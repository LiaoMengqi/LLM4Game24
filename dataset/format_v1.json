[{"input": "5 13 7 9\n", "output": "(7) / (9) = 7/9, left: 7/9, 5, 13\n(7/9) / (13) = 7/117, left: 7/117, 5\n(5) / (13) = 5/13, left: 5/13, 7/9\n(7) + (9) = 16, left: 16, 5, 13\n(16) - (5) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((7 + 9) - 5))"}, {"input": "5 13 7 9\n", "output": "(7) - (13) = -6, left: -6, 5, 9\n(9) / (-6) = -3/2, left: -3/2, 5\n(-3/2) / (5) = -3/10, left: -3/10\n(9) - (-6) = 15, left: 15, 5\n(5) - (9) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((7 - 13) * (5 - 9))"}, {"input": "5 13 7 9\n", "output": "(5) / (7) = 5/7, left: 5/7, 13, 9\n(5/7) / (9) = 5/63, left: 5/63, 13\n(13) / (5/63) = 819/5, left: 819/5\n(7) - (5) = 2, left: 2, 13, 9\n(9) + (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (9 + (7 - 5)))"}, {"input": "5 13 7 9\n", "output": "(5) + (13) = 18, left: 18, 7, 9\n(18) / (7) = 18/7, left: 18/7, 9\n(9) - (7) = 2, left: 2, 18\n(5) / (13) = 5/13, left: 5/13, 7, 9\n(7) / (5/13) = 91/5, left: 91/5, 9\n(7) - (5/13) = 86/13, left: 86/13, 9\n(9) + (5/13) = 122/13, left: 122/13, 7\n(13) - (5) = 8, left: 8, 7, 9\n(7) + (8) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (7 + (13 - 5)))"}, {"input": "5 13 7 9\n", "output": "(9) - (13) = -4, left: -4, 5, 7\n(5) + (7) = 12, left: 12, -4\n(5) / (7) = 5/7, left: 5/7, -4\n(7) + (-4) = 3, left: 3, 5\n(5) / (3) = 5/3, left: 5/3\n(7) * (-4) = -28, left: -28, 5\n(5) * (-4) = -20, left: -20, 7\n(13) + (9) = 22, left: 22, 5, 7\n(7) + (22) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((7 + (13 + 9)) - 5)"}, {"input": "5 13 7 9\n", "output": "(7) - (13) = -6, left: -6, 5, 9\n(-6) / (9) = -2/3, left: -2/3, 5\n(5) / (-2/3) = -15/2, left: -15/2\n(9) * (-6) = -54, left: -54, 5\n(9) - (-6) = 15, left: 15, 5\n(-6) - (9) = -15, left: -15, 5\n(9) / (5) = 9/5, left: 9/5, -6\n(5) + (9) = 14, left: 14, -6\n(5) - (9) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((7 - 13) * (5 - 9))"}, {"input": "5 13 7 9\n", "output": "(5) / (7) = 5/7, left: 5/7, 13, 9\n(5/7) / (13) = 5/91, left: 5/91, 9\n(9) + (5/91) = 824/91, left: 824/91\n(13) - (9) = 4, left: 4, 5/7\n(9) / (5/7) = 63/5, left: 63/5, 13\n(63/5) - (13) = -2/5, left: -2/5\n(9) - (5/7) = 58/7, left: 58/7, 13\n(7) - (5) = 2, left: 2, 13, 9\n(9) + (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (9 + (7 - 5)))"}, {"input": "5 13 7 9\n", "output": "(7) / (9) = 7/9, left: 7/9, 5, 13\n(5) / (13) = 5/13, left: 5/13, 7/9\n(5/13) - (7/9) = -46/117, left: -46/117\n(7/9) + (5/13) = 136/117, left: 136/117\n(5) / (7/9) = 45/7, left: 45/7, 13\n(7) + (9) = 16, left: 16, 5, 13\n(5) / (16) = 5/16, left: 5/16, 13\n(13) - (5/16) = 203/16, left: 203/16\n(16) - (5) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((7 + 9) - 5))"}, {"input": "1 2 4 11\n", "output": "(2) * (11) = 22, left: 22, 1, 4\n(1) / (22) = 1/22, left: 1/22, 4\n(4) + (1/22) = 89/22, left: 89/22\n(2) / (4) = 1/2, left: 1/2, 1, 11\n(1) + (11) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((1 + 11) / (2 / 4))"}, {"input": "1 2 4 11\n", "output": "(11) / (2) = 11/2, left: 11/2, 1, 4\n(2) / (11) = 2/11, left: 2/11, 1, 4\n(4) + (11) = 15, left: 15, 1, 2\n(1) + (2) = 3, left: 3, 4, 11\n(4) * (11) = 44, left: 44, 3\n(3) * (44) = 132, left: 132\n(2) - (1) = 1, left: 1, 4, 11\n(1) - (11) = -10, left: -10, 2, 4\n(2) * (-10) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (2 * (1 - 11)))"}, {"input": "1 2 4 11\n", "output": "(2) * (11) = 22, left: 22, 1, 4\n(2) - (11) = -9, left: -9, 1, 4\n(11) - (2) = 9, left: 9, 1, 4\n(9) - (4) = 5, left: 5, 1\n(1) + (4) = 5, left: 5, 9\n(9) - (5) = 4, left: 4\n(1) + (4) = 5, left: 5, 2, 11\n(2) / (4) = 1/2, left: 1/2, 1, 11\n(1) + (11) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((1 + 11) / (2 / 4))"}, {"input": "1 2 4 11\n", "output": "(11) - (1) = 10, left: 10, 2, 4\n(10) - (4) = 6, left: 6, 2\n(6) / (2) = 3, left: 3\n(4) / (10) = 2/5, left: 2/5, 2\n(2) * (4) = 8, left: 8, 10\n(10) - (2) = 8, left: 8, 4\n(2) / (10) = 1/5, left: 1/5, 4\n(4) * (1/5) = 4/5, left: 4/5\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (11 - 1)))"}, {"input": "1 2 4 11\n", "output": "(1) * (2) = 2, left: 2, 4, 11\n(1) + (4) = 5, left: 5, 2, 11\n(5) / (2) = 5/2, left: 5/2, 11\n(1) * (4) = 4, left: 4, 2, 11\n(4) * (11) = 44, left: 44, 1, 2\n(1) / (44) = 1/44, left: 1/44, 2\n(4) / (2) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: ((4 / 2) * (1 + 11))"}, {"input": "1 2 4 11\n", "output": "(2) * (4) = 8, left: 8, 1, 11\n(11) - (1) = 10, left: 10, 8\n(8) / (1) = 8, left: 8, 11\n(4) - (2) = 2, left: 2, 1, 11\n(11) * (2) = 22, left: 22, 1\n(1) + (22) = 23, left: 23\n(2) - (11) = -9, left: -9, 1\n(-9) - (1) = -10, left: -10\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((4 - 2) * (1 + 11))"}, {"input": "1 2 4 11\n", "output": "(2) / (1) = 2, left: 2, 4, 11\n(1) - (2) = -1, left: -1, 4, 11\n(1) / (2) = 1/2, left: 1/2, 4, 11\n(4) / (11) = 4/11, left: 4/11, 1/2\n(2) - (1) = 1, left: 1, 4, 11\n(4) / (1) = 4, left: 4, 2, 11\n(1) / (4) = 1/4, left: 1/4, 2, 11\n(2) - (1/4) = 7/4, left: 7/4, 11\n(11) - (4) = 7, left: 7, 1, 2\n(1) * (2) = 2, left: 2, 7\n(11) / (4) = 11/4, left: 11/4, 1, 2\n(4) / (2) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((4 / 2) * (1 + 11))"}, {"input": "1 13 2 2\n", "output": "(13) + (2) = 15, left: 15, 1, 2\n(2) / (1) = 2, left: 2, 15\n(1) / (2) = 1/2, left: 1/2, 15\n(13) * (2) = 26, left: 26, 1, 2\n(26) / (1) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 2) / 1) - 2)"}, {"input": "1 13 2 2\n", "output": "(13) + (2) = 15, left: 15, 1, 2\n(2) * (15) = 30, left: 30, 1\n(13) / (2) = 13/2, left: 13/2, 1, 2\n(13/2) - (2) = 9/2, left: 9/2, 1\n(1) * (13/2) = 13/2, left: 13/2, 2\n(1) / (2) = 1/2, left: 1/2, 13/2\n(13) * (2) = 26, left: 26, 1, 2\n(26) - (1) = 25, left: 25, 2\n(26) / (1) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 2) / 1) - 2)"}, {"input": "1 13 2 2\n", "output": "(1) - (13) = -12, left: -12, 2, 2\n(2) / (2) = 1, left: 1, -12\n(2) * (2) = 4, left: 4, -12\n(2) + (-12) = -10, left: -10, 2\n(2) * (-12) = -24, left: -24, 2\n(2) * (-24) = -48, left: -48\n(1) * (13) = 13, left: 13, 2, 2\n(13) - (2) = 11, left: 11, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (1 * 13)) - 2)"}, {"input": "1 13 2 2\n", "output": "(1) * (2) = 2, left: 2, 13, 2\n(2) / (2) = 1, left: 1, 13\n(2) + (2) = 4, left: 4, 13\n(2) / (2) = 1, left: 1, 13\n(2) - (2) = 0, left: 0, 13\n(2) * (2) = 4, left: 4, 13\n(2) - (2) = 0, left: 0, 13\n(13) + (0) = 13, left: 13\n(13) * (2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * 2) - (1 * 2))"}, {"input": "1 13 2 2\n", "output": "(13) + (2) = 15, left: 15, 1, 2\n(1) / (2) = 1/2, left: 1/2, 15\n(1) / (15) = 1/15, left: 1/15, 2\n(2) / (13) = 2/13, left: 2/13, 1, 2\n(2) - (1) = 1, left: 1, 2/13\n(2/13) + (1) = 15/13, left: 15/13\n(1) - (2/13) = 11/13, left: 11/13, 2\n(2) - (13) = -11, left: -11, 1, 2\n(1) - (-11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 - (2 - 13)))"}, {"input": "2 11 9 7\n", "output": "(9) - (7) = 2, left: 2, 2, 11\n(2) - (11) = -9, left: -9, 2\n(2) * (-9) = -18, left: -18\n(11) + (2) = 13, left: 13, 2\n(2) / (11) = 2/11, left: 2/11, 2\n(2/11) / (2) = 1/11, left: 1/11\n(11) - (2) = 9, left: 9, 2\n(2) - (9) = -7, left: -7\n(11) * (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 * (9 - 7)))"}, {"input": "2 11 9 7\n", "output": "(7) / (11) = 7/11, left: 7/11, 2, 9\n(11) * (7) = 77, left: 77, 2, 9\n(9) / (2) = 9/2, left: 9/2, 11, 7\n(2) * (9) = 18, left: 18, 11, 7\n(11) / (9) = 11/9, left: 11/9, 2, 7\n(11/9) / (7) = 11/63, left: 11/63, 2\n(11) - (2) = 9, left: 9, 9, 7\n(2) * (11) = 22, left: 22, 9, 7\n(22) - (7) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((2 * 11) - 7))"}, {"input": "2 11 9 7\n", "output": "(2) / (9) = 2/9, left: 2/9, 11, 7\n(7) / (11) = 7/11, left: 7/11, 2/9\n(9) - (11) = -2, left: -2, 2, 7\n(7) / (-2) = -7/2, left: -7/2, 2\n(7) - (11) = -4, left: -4, 2, 9\n(11) + (7) = 18, left: 18, 2, 9\n(9) / (2) = 9/2, left: 9/2, 18\n(7) - (9) = -2, left: -2, 2, 11\n(2) * (11) = 22, left: 22, -2\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((2 * 11) - (7 - 9))"}, {"input": "2 11 9 7\n", "output": "(2) * (7) = 14, left: 14, 11, 9\n(2) - (7) = -5, left: -5, 11, 9\n(9) - (11) = -2, left: -2, 2, 7\n(11) + (9) = 20, left: 20, 2, 7\n(2) * (20) = 40, left: 40, 7\n(11) + (7) = 18, left: 18, 2, 9\n(7) - (11) = -4, left: -4, 2, 9\n(2) * (11) = 22, left: 22, 9, 7\n(9) - (7) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((2 * 11) + (9 - 7))"}, {"input": "2 11 9 7\n", "output": "(9) * (7) = 63, left: 63, 2, 11\n(2) + (63) = 65, left: 65, 11\n(63) / (2) = 63/2, left: 63/2, 11\n(11) / (2) = 11/2, left: 11/2, 63\n(9) + (7) = 16, left: 16, 2, 11\n(11) / (16) = 11/16, left: 11/16, 2\n(2) - (16) = -14, left: -14, 11\n(7) - (9) = -2, left: -2, 2, 11\n(2) * (11) = 22, left: 22, -2\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((2 * 11) - (7 - 9))"}, {"input": "13 12 11 6\n", "output": "(11) - (12) = -1, left: -1, 13, 6\n(13) / (-1) = -13, left: -13, 6\n(-13) - (6) = -19, left: -19\n(13) - (11) = 2, left: 2, 12, 6\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (13 - 11)))"}, {"input": "13 12 11 6\n", "output": "(13) / (12) = 13/12, left: 13/12, 11, 6\n(13) - (12) = 1, left: 1, 11, 6\n(6) / (1) = 6, left: 6, 11\n(11) - (13) = -2, left: -2, 12, 6\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (11 - 13)))"}, {"input": "13 12 11 6\n", "output": "(12) - (11) = 1, left: 1, 13, 6\n(12) * (6) = 72, left: 72, 13, 11\n(72) / (13) = 72/13, left: 72/13, 11\n(11) - (13) = -2, left: -2, 12, 6\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (11 - 13)))"}, {"input": "13 12 11 6\n", "output": "(6) - (12) = -6, left: -6, 13, 11\n(13) - (11) = 2, left: 2, -6\n(6) / (12) = 1/2, left: 1/2, 13, 11\n(13) - (11) = 2, left: 2, 12, 6\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (13 - 11)))"}, {"input": "13 12 11 6\n", "output": "(11) / (6) = 11/6, left: 11/6, 13, 12\n(13) - (12) = 1, left: 1, 11/6\n(6) / (11) = 6/11, left: 6/11, 13, 12\n(6/11) / (12) = 1/22, left: 1/22, 13\n(6) / (13) = 6/13, left: 6/13, 12, 11\n(12) * (11) = 132, left: 132, 13, 6\n(11) - (12) = -1, left: -1, 13, 6\n(13) - (11) = 2, left: 2, 12, 6\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (13 - 11)))"}, {"input": "13 12 11 6\n", "output": "(11) * (6) = 66, left: 66, 13, 12\n(11) + (6) = 17, left: 17, 13, 12\n(13) * (17) = 221, left: 221, 12\n(11) - (12) = -1, left: -1, 13, 6\n(6) - (-1) = 7, left: 7, 13\n(12) / (13) = 12/13, left: 12/13, 11, 6\n(6) + (12/13) = 90/13, left: 90/13, 11\n(11) - (13) = -2, left: -2, 12, 6\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (11 - 13)))"}, {"input": "13 12 11 6\n", "output": "(11) / (12) = 11/12, left: 11/12, 13, 6\n(11) - (12) = -1, left: -1, 13, 6\n(13) / (6) = 13/6, left: 13/6, -1\n(12) + (11) = 23, left: 23, 13, 6\n(13) * (11) = 143, left: 143, 12, 6\n(6) - (143) = -137, left: -137, 12\n(11) / (13) = 11/13, left: 11/13, 12, 6\n(13) - (11) = 2, left: 2, 12, 6\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (13 - 11)))"}, {"input": "13 12 11 6\n", "output": "(13) + (12) = 25, left: 25, 11, 6\n(12) - (13) = -1, left: -1, 11, 6\n(11) / (-1) = -11, left: -11, 6\n(13) - (12) = 1, left: 1, 11, 6\n(13) * (11) = 143, left: 143, 12, 6\n(143) - (12) = 131, left: 131, 6\n(143) / (12) = 143/12, left: 143/12, 6\n(11) - (13) = -2, left: -2, 12, 6\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (11 - 13)))"}, {"input": "13 12 11 6\n", "output": "(13) * (6) = 78, left: 78, 12, 11\n(12) * (6) = 72, left: 72, 13, 11\n(13) / (12) = 13/12, left: 13/12, 11, 6\n(12) - (13) = -1, left: -1, 11, 6\n(6) - (11) = -5, left: -5, -1\n(13) * (12) = 156, left: 156, 11, 6\n(12) + (11) = 23, left: 23, 13, 6\n(13) - (11) = 2, left: 2, 12, 6\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (13 - 11)))"}, {"input": "5 3 7 10\n", "output": "(3) - (5) = -2, left: -2, 7, 10\n(7) / (10) = 7/10, left: 7/10, -2\n(7) + (10) = 17, left: 17, -2\n(-2) / (7) = -2/7, left: -2/7, 10\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (3 - 5)))"}, {"input": "5 3 7 10\n", "output": "(5) / (7) = 5/7, left: 5/7, 3, 10\n(10) / (3) = 10/3, left: 10/3, 5/7\n(5/7) / (3) = 5/21, left: 5/21, 10\n(7) - (5) = 2, left: 2, 3, 10\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (7 - 5)))"}, {"input": "5 3 7 10\n", "output": "(3) - (5) = -2, left: -2, 7, 10\n(10) + (-2) = 8, left: 8, 7\n(8) - (7) = 1, left: 1\n(10) - (-2) = 12, left: 12, 7\n(7) - (12) = -5, left: -5\n(12) / (7) = 12/7, left: 12/7\n(7) + (10) = 17, left: 17, -2\n(7) - (10) = -3, left: -3, -2\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (3 - 5)))"}, {"input": "5 3 7 10\n", "output": "(7) / (5) = 7/5, left: 7/5, 3, 10\n(10) - (7/5) = 43/5, left: 43/5, 3\n(7/5) / (3) = 7/15, left: 7/15, 10\n(10) - (3) = 7, left: 7, 7/5\n(10) / (3) = 10/3, left: 10/3, 7/5\n(7/5) / (10/3) = 21/50, left: 21/50\n(5) / (7) = 5/7, left: 5/7, 3, 10\n(7) - (5) = 2, left: 2, 3, 10\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (7 - 5)))"}, {"input": "5 3 7 10\n", "output": "(3) * (10) = 30, left: 30, 5, 7\n(3) / (10) = 3/10, left: 3/10, 5, 7\n(5) + (3/10) = 53/10, left: 53/10, 7\n(7) * (53/10) = 371/10, left: 371/10\n(3) - (10) = -7, left: -7, 5, 7\n(5) * (-7) = -35, left: -35, 7\n(3) + (10) = 13, left: 13, 5, 7\n(7) - (5) = 2, left: 2, 3, 10\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (7 - 5)))"}, {"input": "5 3 7 10\n", "output": "(7) - (10) = -3, left: -3, 5, 3\n(-3) - (3) = -6, left: -6, 5\n(-3) / (3) = -1, left: -1, 5\n(5) + (-1) = 4, left: 4\n(3) * (-3) = -9, left: -9, 5\n(5) * (-3) = -15, left: -15, 3\n(3) + (-15) = -12, left: -12\n(5) / (-3) = -5/3, left: -5/3, 3\n(5) - (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 - (7 - 10)))"}, {"input": "5 3 7 10\n", "output": "(5) - (10) = -5, left: -5, 3, 7\n(7) + (-5) = 2, left: 2, 3\n(3) / (-5) = -3/5, left: -3/5, 7\n(5) / (10) = 1/2, left: 1/2, 3, 7\n(10) / (5) = 2, left: 2, 3, 7\n(7) / (2) = 7/2, left: 7/2, 3\n(2) / (3) = 2/3, left: 2/3, 7\n(5) + (10) = 15, left: 15, 3, 7\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 + 10) - 7))"}, {"input": "5 8 13 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 13, 8\n(13) * (8) = 104, left: 104, 5/8\n(13) - (8) = 5, left: 5, 5/8\n(5) - (8) = -3, left: -3, 13, 8\n(13) + (8) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((13 + 8) - (5 - 8))"}, {"input": "5 8 13 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 13, 8\n(8) - (13) = -5, left: -5, 5/8\n(5) * (8) = 40, left: 40, 13, 8\n(5) + (8) = 13, left: 13, 13, 8\n(13) - (8) = 5, left: 5, 13\n(8) / (13) = 8/13, left: 8/13, 13\n(8) / (5) = 8/5, left: 8/5, 13, 8\n(8) - (5) = 3, left: 3, 13, 8\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (13 + (8 - 5)))"}, {"input": "5 8 13 8\n", "output": "(8) * (13) = 104, left: 104, 5, 8\n(8) / (104) = 1/13, left: 1/13, 5\n(8) - (104) = -96, left: -96, 5\n(8) + (104) = 112, left: 112, 5\n(5) - (8) = -3, left: -3, 104\n(8) + (13) = 21, left: 21, 5, 8\n(5) / (21) = 5/21, left: 5/21, 8\n(8) / (5/21) = 168/5, left: 168/5\n(21) - (5) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((8 + 13) - 5))"}, {"input": "5 8 13 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 13, 8\n(5/8) - (13) = -99/8, left: -99/8, 8\n(13) - (5/8) = 99/8, left: 99/8, 8\n(99/8) / (8) = 99/64, left: 99/64\n(13) + (8) = 21, left: 21, 5/8\n(13) * (8) = 104, left: 104, 5/8\n(8) - (13) = -5, left: -5, 5/8\n(5) - (8) = -3, left: -3, 13, 8\n(13) + (8) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((13 + 8) - (5 - 8))"}, {"input": "5 8 13 8\n", "output": "(5) + (8) = 13, left: 13, 8, 13\n(8) - (13) = -5, left: -5, 13\n(5) / (8) = 5/8, left: 5/8, 8, 13\n(5/8) - (8) = -59/8, left: -59/8, 13\n(8) + (13) = 21, left: 21, 5/8\n(5/8) - (13) = -99/8, left: -99/8, 8\n(13) / (5/8) = 104/5, left: 104/5, 8\n(5) - (8) = -3, left: -3, 8, 13\n(-3) - (13) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - ((5 - 8) - 13))"}, {"input": "12 3 5 8\n", "output": "(5) / (12) = 5/12, left: 5/12, 3, 8\n(8) * (5/12) = 10/3, left: 10/3, 3\n(3) * (8) = 24, left: 24, 12, 5\n(5) / (8) = 5/8, left: 5/8, 12, 3\n(12) + (3) = 15, left: 15, 5/8\n(15) / (5/8) = 24, left: 24\nreach 24! expression: ((12 + 3) / (5 / 8))"}, {"input": "12 3 5 8\n", "output": "(12) + (5) = 17, left: 17, 3, 8\n(8) - (17) = -9, left: -9, 3\n(12) * (5) = 60, left: 60, 3, 8\n(5) / (12) = 5/12, left: 5/12, 3, 8\n(8) / (3) = 8/3, left: 8/3, 12, 5\n(3) * (8) = 24, left: 24, 12, 5\n(5) * (8) = 40, left: 40, 12, 3\n(5) / (8) = 5/8, left: 5/8, 12, 3\n(12) + (3) = 15, left: 15, 5/8\n(15) / (5/8) = 24, left: 24\nreach 24! expression: ((12 + 3) / (5 / 8))"}, {"input": "12 3 5 8\n", "output": "(12) + (8) = 20, left: 20, 3, 5\n(5) - (3) = 2, left: 2, 20\n(8) / (12) = 2/3, left: 2/3, 3, 5\n(8) / (3) = 8/3, left: 8/3, 12, 5\n(3) - (8) = -5, left: -5, 12, 5\n(12) * (5) = 60, left: 60, 3, 8\n(60) - (8) = 52, left: 52, 3\n(12) + (3) = 15, left: 15, 5, 8\n(5) / (15) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (5 / (12 + 3)))"}, {"input": "12 3 5 8\n", "output": "(12) - (5) = 7, left: 7, 3, 8\n(3) / (8) = 3/8, left: 3/8, 7\n(12) / (8) = 3/2, left: 3/2, 3, 5\n(3) - (5) = -2, left: -2, 3/2\n(12) + (8) = 20, left: 20, 3, 5\n(5) / (3) = 5/3, left: 5/3, 20\n(3) - (12) = -9, left: -9, 5, 8\n(12) + (3) = 15, left: 15, 5, 8\n(5) / (8) = 5/8, left: 5/8, 15\n(15) / (5/8) = 24, left: 24\nreach 24! expression: ((12 + 3) / (5 / 8))"}, {"input": "12 3 5 8\n", "output": "(3) * (8) = 24, left: 24, 12, 5\n(3) / (8) = 3/8, left: 3/8, 12, 5\n(8) / (3) = 8/3, left: 8/3, 12, 5\n(3) + (8) = 11, left: 11, 12, 5\n(12) - (3) = 9, left: 9, 5, 8\n(5) + (9) = 14, left: 14, 8\n(12) + (3) = 15, left: 15, 5, 8\n(8) - (15) = -7, left: -7, 5\n(8) * (15) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((8 * (12 + 3)) / 5)"}, {"input": "12 3 5 8\n", "output": "(5) - (8) = -3, left: -3, 12, 3\n(12) - (-3) = 15, left: 15, 3\n(15) / (3) = 5, left: 5\n(5) * (8) = 40, left: 40, 12, 3\n(40) - (12) = 28, left: 28, 3\n(3) / (28) = 3/28, left: 3/28\n(8) - (5) = 3, left: 3, 12, 3\n(5) / (8) = 5/8, left: 5/8, 12, 3\n(12) + (3) = 15, left: 15, 5/8\n(15) / (5/8) = 24, left: 24\nreach 24! expression: ((12 + 3) / (5 / 8))"}, {"input": "3 12 2 10\n", "output": "(3) / (12) = 1/4, left: 1/4, 2, 10\n(1/4) - (2) = -7/4, left: -7/4, 10\n(10) - (2) = 8, left: 8, 1/4\n(12) / (3) = 4, left: 4, 2, 10\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((12 / 3) + (2 * 10))"}, {"input": "3 12 2 10\n", "output": "(3) / (10) = 3/10, left: 3/10, 12, 2\n(10) / (3) = 10/3, left: 10/3, 12, 2\n(10/3) / (2) = 5/3, left: 5/3, 12\n(3) * (10) = 30, left: 30, 12, 2\n(12) / (2) = 6, left: 6, 30\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * 10) - (12 / 2))"}, {"input": "3 12 2 10\n", "output": "(3) * (2) = 6, left: 6, 12, 10\n(6) / (12) = 1/2, left: 1/2, 10\n(10) - (1/2) = 19/2, left: 19/2\n(3) + (2) = 5, left: 5, 12, 10\n(12) * (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (3 + 2))"}, {"input": "3 12 2 10\n", "output": "(2) / (12) = 1/6, left: 1/6, 3, 10\n(10) / (1/6) = 60, left: 60, 3\n(10) - (3) = 7, left: 7, 1/6\n(12) / (2) = 6, left: 6, 3, 10\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * 10) - (12 / 2))"}, {"input": "3 12 2 10\n", "output": "(3) / (12) = 1/4, left: 1/4, 2, 10\n(2) * (1/4) = 1/2, left: 1/2, 10\n(1/2) - (10) = -19/2, left: -19/2\n(2) - (10) = -8, left: -8, 1/4\n(1/4) + (-8) = -31/4, left: -31/4\n(10) / (2) = 5, left: 5, 1/4\n(1/4) - (10) = -39/4, left: -39/4, 2\n(12) / (3) = 4, left: 4, 2, 10\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((12 / 3) + (2 * 10))"}, {"input": "3 12 2 10\n", "output": "(3) + (10) = 13, left: 13, 12, 2\n(12) / (13) = 12/13, left: 12/13, 2\n(3) / (10) = 3/10, left: 3/10, 12, 2\n(3/10) - (2) = -17/10, left: -17/10, 12\n(10) / (3) = 10/3, left: 10/3, 12, 2\n(12) + (10/3) = 46/3, left: 46/3, 2\n(3) * (10) = 30, left: 30, 12, 2\n(2) / (12) = 1/6, left: 1/6, 30\n(12) / (2) = 6, left: 6, 30\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * 10) - (12 / 2))"}, {"input": "3 12 2 10\n", "output": "(3) * (2) = 6, left: 6, 12, 10\n(3) - (2) = 1, left: 1, 12, 10\n(12) - (1) = 11, left: 11, 10\n(12) + (1) = 13, left: 13, 10\n(10) - (1) = 9, left: 9, 12\n(12) - (9) = 3, left: 3\n(1) / (10) = 1/10, left: 1/10, 12\n(3) + (2) = 5, left: 5, 12, 10\n(12) * (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (3 + 2))"}, {"input": "3 12 2 10\n", "output": "(12) - (10) = 2, left: 2, 3, 2\n(2) / (2) = 1, left: 1, 3\n(12) / (10) = 6/5, left: 6/5, 3, 2\n(3) + (2) = 5, left: 5, 6/5\n(12) + (10) = 22, left: 22, 3, 2\n(12) * (10) = 120, left: 120, 3, 2\n(3) / (2) = 3/2, left: 3/2, 120\n(2) / (3) = 2/3, left: 2/3, 120\n(3) + (2) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (3 + 2))"}, {"input": "3 12 2 10\n", "output": "(2) - (12) = -10, left: -10, 3, 10\n(3) * (-10) = -30, left: -30, 10\n(10) / (-30) = -1/3, left: -1/3\n(2) / (12) = 1/6, left: 1/6, 3, 10\n(3) - (10) = -7, left: -7, 1/6\n(12) / (2) = 6, left: 6, 3, 10\n(6) - (10) = -4, left: -4, 3\n(3) - (10) = -7, left: -7, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * 10) - (12 / 2))"}, {"input": "4 9 7 1\n", "output": "(7) / (1) = 7, left: 7, 4, 9\n(7) + (1) = 8, left: 8, 4, 9\n(9) + (7) = 16, left: 16, 4, 1\n(16) - (1) = 15, left: 15, 4\n(4) + (15) = 19, left: 19\n(7) / (9) = 7/9, left: 7/9, 4, 1\n(9) * (7) = 63, left: 63, 4, 1\n(4) - (7) = -3, left: -3, 9, 1\n(1) - (9) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((4 - 7) * (1 - 9))"}, {"input": "4 9 7 1\n", "output": "(4) - (9) = -5, left: -5, 7, 1\n(9) - (4) = 5, left: 5, 7, 1\n(9) / (4) = 9/4, left: 9/4, 7, 1\n(1) - (9/4) = -5/4, left: -5/4, 7\n(7) + (-5/4) = 23/4, left: 23/4\n(9) / (1) = 9, left: 9, 4, 7\n(4) / (7) = 4/7, left: 4/7, 9\n(1) - (9) = -8, left: -8, 4, 7\n(4) - (7) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (4 - 7))"}, {"input": "4 9 7 1\n", "output": "(1) / (7) = 1/7, left: 1/7, 4, 9\n(1/7) - (4) = -27/7, left: -27/7, 9\n(1) - (7) = -6, left: -6, 4, 9\n(7) * (1) = 7, left: 7, 4, 9\n(9) / (7) = 9/7, left: 9/7, 4\n(4) + (1) = 5, left: 5, 9, 7\n(1) / (9) = 1/9, left: 1/9, 4, 7\n(1) - (9) = -8, left: -8, 4, 7\n(4) - (7) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (4 - 7))"}, {"input": "4 9 7 1\n", "output": "(4) - (9) = -5, left: -5, 7, 1\n(1) + (-5) = -4, left: -4, 7\n(4) + (7) = 11, left: 11, 9, 1\n(11) - (9) = 2, left: 2, 1\n(7) / (4) = 7/4, left: 7/4, 9, 1\n(1) / (9) = 1/9, left: 1/9, 7/4\n(9) + (1) = 10, left: 10, 7/4\n(7) - (4) = 3, left: 3, 9, 1\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((7 - 4) * (9 - 1))"}, {"input": "4 9 7 1\n", "output": "(1) / (9) = 1/9, left: 1/9, 4, 7\n(4) / (7) = 4/7, left: 4/7, 1/9\n(7) / (4) = 7/4, left: 7/4, 1/9\n(4) * (7) = 28, left: 28, 1/9\n(4) * (1/9) = 4/9, left: 4/9, 7\n(9) - (1) = 8, left: 8, 4, 7\n(4) - (8) = -4, left: -4, 7\n(4) * (8) = 32, left: 32, 7\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((9 - 1) * (7 - 4))"}, {"input": "4 9 7 1\n", "output": "(7) + (1) = 8, left: 8, 4, 9\n(8) / (4) = 2, left: 2, 9\n(7) / (1) = 7, left: 7, 4, 9\n(9) - (4) = 5, left: 5, 7\n(4) + (1) = 5, left: 5, 9, 7\n(9) / (7) = 9/7, left: 9/7, 5\n(4) - (1) = 3, left: 3, 9, 7\n(7) / (3) = 7/3, left: 7/3, 9\n(1) / (9) = 1/9, left: 1/9, 4, 7\n(1/9) - (7) = -62/9, left: -62/9, 4\n(4) / (-62/9) = -18/31, left: -18/31\n(1) - (9) = -8, left: -8, 4, 7\n(4) - (7) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (4 - 7))"}, {"input": "4 9 7 1\n", "output": "(4) * (9) = 36, left: 36, 7, 1\n(7) - (1) = 6, left: 6, 36\n(7) + (36) = 43, left: 43, 1\n(9) - (4) = 5, left: 5, 7, 1\n(9) / (4) = 9/4, left: 9/4, 7, 1\n(1) - (9/4) = -5/4, left: -5/4, 7\n(7) - (-5/4) = 33/4, left: 33/4\n(7) - (1) = 6, left: 6, 9/4\n(7) / (4) = 7/4, left: 7/4, 9, 1\n(4) / (7) = 4/7, left: 4/7, 9, 1\n(1) + (4/7) = 11/7, left: 11/7, 9\n(7) - (4) = 3, left: 3, 9, 1\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((7 - 4) * (9 - 1))"}, {"input": "4 9 7 1\n", "output": "(7) * (1) = 7, left: 7, 4, 9\n(1) / (7) = 1/7, left: 1/7, 4, 9\n(7) + (1) = 8, left: 8, 4, 9\n(4) + (1) = 5, left: 5, 9, 7\n(1) / (4) = 1/4, left: 1/4, 9, 7\n(4) - (1) = 3, left: 3, 9, 7\n(4) / (1) = 4, left: 4, 9, 7\n(9) / (7) = 9/7, left: 9/7, 4, 1\n(9) - (7) = 2, left: 2, 4, 1\n(4) / (7) = 4/7, left: 4/7, 9, 1\n(4/7) / (9) = 4/63, left: 4/63, 1\n(4) - (7) = -3, left: -3, 9, 1\n(1) - (9) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((4 - 7) * (1 - 9))"}, {"input": "4 9 7 1\n", "output": "(4) - (9) = -5, left: -5, 7, 1\n(7) - (1) = 6, left: 6, -5\n(6) - (-5) = 11, left: 11\n(4) / (9) = 4/9, left: 4/9, 7, 1\n(7) - (1) = 6, left: 6, 4/9\n(6) - (4/9) = 50/9, left: 50/9\n(9) / (4) = 9/4, left: 9/4, 7, 1\n(7) * (9/4) = 63/4, left: 63/4, 1\n(4) + (9) = 13, left: 13, 7, 1\n(4) * (9) = 36, left: 36, 7, 1\n(1) + (36) = 37, left: 37, 7\n(1) - (9) = -8, left: -8, 4, 7\n(4) - (7) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (4 - 7))"}, {"input": "4 4 2 12\n", "output": "(4) / (2) = 2, left: 2, 4, 12\n(4) * (2) = 8, left: 8, 12\n(12) - (8) = 4, left: 4\n(12) / (8) = 3/2, left: 3/2\n(8) / (12) = 2/3, left: 2/3\n(8) - (12) = -4, left: -4\n(4) / (2) = 2, left: 2, 12\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (4 / (4 / 2)))"}, {"input": "4 4 2 12\n", "output": "(12) - (4) = 8, left: 8, 4, 2\n(2) - (4) = -2, left: -2, 8\n(-2) - (8) = -10, left: -10\n(4) - (2) = 2, left: 2, 8\n(2) / (8) = 1/4, left: 1/4, 4\n(1/4) - (4) = -15/4, left: -15/4\n(8) - (2) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(4) + (6) = 10, left: 10\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((12 - 4) - 2))"}, {"input": "3 9 1 10\n", "output": "(10) / (1) = 10, left: 10, 3, 9\n(3) - (10) = -7, left: -7, 9\n(1) - (10) = -9, left: -9, 3, 9\n(9) - (-9) = 18, left: 18, 3\n(-9) / (9) = -1, left: -1, 3\n(-9) / (3) = -3, left: -3, 9\n(1) + (10) = 11, left: 11, 3, 9\n(9) / (3) = 3, left: 3, 11\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(10) - (9) = 1, left: 1, 3, 1\n(1) / (1) = 1, left: 1, 3\n(9) + (10) = 19, left: 19, 3, 1\n(3) * (9) = 27, left: 27, 1, 10\n(1) - (3) = -2, left: -2, 9, 10\n(1) / (10) = 1/10, left: 1/10, 3, 9\n(9) / (1/10) = 90, left: 90, 3\n(1) + (10) = 11, left: 11, 3, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(3) * (9) = 27, left: 27, 1, 10\n(3) - (9) = -6, left: -6, 1, 10\n(10) - (1) = 9, left: 9, -6\n(9) / (3) = 3, left: 3, 1, 10\n(3) - (10) = -7, left: -7, 9, 1\n(1) * (-7) = -7, left: -7, 9\n(10) / (9) = 10/9, left: 10/9, 3, 1\n(1) + (10) = 11, left: 11, 3, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(9) / (3) = 3, left: 3, 1, 10\n(3) - (1) = 2, left: 2, 10\n(3) * (9) = 27, left: 27, 1, 10\n(9) + (1) = 10, left: 10, 3, 10\n(10) / (10) = 1, left: 1, 3\n(1) / (9) = 1/9, left: 1/9, 3, 10\n(9) - (1) = 8, left: 8, 3, 10\n(1) + (10) = 11, left: 11, 3, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(3) * (9) = 27, left: 27, 1, 10\n(9) / (3) = 3, left: 3, 1, 10\n(1) - (10) = -9, left: -9, 3\n(3) - (1) = 2, left: 2, 10\n(3) - (9) = -6, left: -6, 1, 10\n(3) + (9) = 12, left: 12, 1, 10\n(1) * (10) = 10, left: 10, 3, 9\n(1) + (10) = 11, left: 11, 3, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(3) - (9) = -6, left: -6, 1, 10\n(1) / (-6) = -1/6, left: -1/6, 10\n(9) / (1) = 9, left: 9, 3, 10\n(9) * (1) = 9, left: 9, 3, 10\n(1) - (9) = -8, left: -8, 3, 10\n(3) / (-8) = -3/8, left: -3/8, 10\n(3) + (10) = 13, left: 13, -8\n(1) - (10) = -9, left: -9, 3, 9\n(3) / (-9) = -1/3, left: -1/3, 9\n(1) / (10) = 1/10, left: 1/10, 3, 9\n(3) * (1/10) = 3/10, left: 3/10, 9\n(1) + (10) = 11, left: 11, 3, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(3) * (9) = 27, left: 27, 1, 10\n(9) / (3) = 3, left: 3, 1, 10\n(3) - (1) = 2, left: 2, 10\n(3) - (9) = -6, left: -6, 1, 10\n(9) - (3) = 6, left: 6, 1, 10\n(1) * (10) = 10, left: 10, 6\n(10) / (6) = 5/3, left: 5/3\n(10) / (1) = 10, left: 10, 3, 9\n(10) - (1) = 9, left: 9, 3, 9\n(9) + (9) = 18, left: 18, 3\n(1) - (10) = -9, left: -9, 3, 9\n(1) + (10) = 11, left: 11, 3, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(9) - (1) = 8, left: 8, 3, 10\n(10) - (3) = 7, left: 7, 8\n(1) - (9) = -8, left: -8, 3, 10\n(9) - (10) = -1, left: -1, 3, 1\n(10) - (9) = 1, left: 1, 3, 1\n(9) * (10) = 90, left: 90, 3, 1\n(9) + (10) = 19, left: 19, 3, 1\n(1) / (19) = 1/19, left: 1/19, 3\n(3) + (10) = 13, left: 13, 9, 1\n(1) / (10) = 1/10, left: 1/10, 3, 9\n(1/10) - (3) = -29/10, left: -29/10, 9\n(1) + (10) = 11, left: 11, 3, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(9) - (3) = 6, left: 6, 1, 10\n(1) * (6) = 6, left: 6, 10\n(3) + (9) = 12, left: 12, 1, 10\n(3) * (9) = 27, left: 27, 1, 10\n(1) / (10) = 1/10, left: 1/10, 27\n(3) - (1) = 2, left: 2, 9, 10\n(3) + (1) = 4, left: 4, 9, 10\n(3) - (10) = -7, left: -7, 9, 1\n(10) / (1) = 10, left: 10, 3, 9\n(3) * (9) = 27, left: 27, 10\n(10) - (1) = 9, left: 9, 3, 9\n(1) + (10) = 11, left: 11, 3, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "10 13 9 3\n", "output": "(13) - (3) = 10, left: 10, 10, 9\n(10) / (9) = 10/9, left: 10/9, 10\n(9) / (13) = 9/13, left: 9/13, 10, 3\n(13) - (10) = 3, left: 3, 9, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (13 - 10))"}, {"input": "10 13 9 3\n", "output": "(13) / (10) = 13/10, left: 13/10, 9, 3\n(13/10) / (3) = 13/30, left: 13/30, 9\n(10) - (13) = -3, left: -3, 9, 3\n(3) - (9) = -6, left: -6, -3\n(9) * (3) = 27, left: 27, -3\n(-3) + (27) = 24, left: 24\nreach 24! expression: ((10 - 13) + (9 * 3))"}, {"input": "10 13 9 3\n", "output": "(3) / (10) = 3/10, left: 3/10, 13, 9\n(10) / (9) = 10/9, left: 10/9, 13, 3\n(13) / (3) = 13/3, left: 13/3, 10/9\n(13) - (10) = 3, left: 3, 9, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * (13 - 10)) - 3)"}, {"input": "10 13 9 3\n", "output": "(3) - (9) = -6, left: -6, 10, 13\n(3) / (9) = 1/3, left: 1/3, 10, 13\n(10) + (13) = 23, left: 23, 1/3\n(9) * (3) = 27, left: 27, 10, 13\n(10) + (27) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((10 + (9 * 3)) - 13)"}, {"input": "10 13 9 3\n", "output": "(13) / (10) = 13/10, left: 13/10, 9, 3\n(9) / (3) = 3, left: 3, 13/10\n(3) / (13/10) = 30/13, left: 30/13\n(9) * (3) = 27, left: 27, 13/10\n(9) - (3) = 6, left: 6, 13/10\n(13/10) / (9) = 13/90, left: 13/90, 3\n(10) - (13) = -3, left: -3, 9, 3\n(3) - (9) = -6, left: -6, -3\n(9) * (3) = 27, left: 27, -3\n(-3) + (27) = 24, left: 24\nreach 24! expression: ((10 - 13) + (9 * 3))"}, {"input": "10 13 9 3\n", "output": "(3) - (9) = -6, left: -6, 10, 13\n(13) / (-6) = -13/6, left: -13/6, 10\n(-13/6) - (10) = -73/6, left: -73/6\n(3) / (9) = 1/3, left: 1/3, 10, 13\n(9) + (3) = 12, left: 12, 10, 13\n(10) + (13) = 23, left: 23, 12\n(9) * (3) = 27, left: 27, 10, 13\n(10) / (27) = 10/27, left: 10/27, 13\n(10) + (27) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((10 + (9 * 3)) - 13)"}, {"input": "10 13 9 3\n", "output": "(13) - (9) = 4, left: 4, 10, 3\n(13) / (9) = 13/9, left: 13/9, 10, 3\n(3) * (13/9) = 13/3, left: 13/3, 10\n(3) / (10) = 3/10, left: 3/10, 13/9\n(10) + (9) = 19, left: 19, 13, 3\n(9) - (10) = -1, left: -1, 13, 3\n(13) / (-1) = -13, left: -13, 3\n(13) - (10) = 3, left: 3, 9, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * (13 - 10)) - 3)"}, {"input": "10 13 9 3\n", "output": "(9) / (13) = 9/13, left: 9/13, 10, 3\n(13) - (9) = 4, left: 4, 10, 3\n(10) * (3) = 30, left: 30, 13, 9\n(10) / (9) = 10/9, left: 10/9, 13, 3\n(3) - (13) = -10, left: -10, 10/9\n(13) + (3) = 16, left: 16, 10/9\n(13) - (3) = 10, left: 10, 10, 9\n(13) - (10) = 3, left: 3, 9, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * (13 - 10)) - 3)"}, {"input": "10 13 9 3\n", "output": "(13) / (3) = 13/3, left: 13/3, 10, 9\n(13/3) / (10) = 13/30, left: 13/30, 9\n(13) + (3) = 16, left: 16, 10, 9\n(13) * (3) = 39, left: 39, 10, 9\n(9) / (13) = 9/13, left: 9/13, 10, 3\n(3) - (9/13) = 30/13, left: 30/13, 10\n(10) - (30/13) = 100/13, left: 100/13\n(13) - (10) = 3, left: 3, 9, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (13 - 10))"}, {"input": "12 7 8 12\n", "output": "(7) - (12) = -5, left: -5, 8, 12\n(7) / (12) = 7/12, left: 7/12, 8, 12\n(12) - (8) = 4, left: 4, 7/12\n(12) + (12) = 24, left: 24, 7, 8\n(8) - (7) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (8 - 7))"}, {"input": "12 7 8 12\n", "output": "(12) + (12) = 24, left: 24, 7, 8\n(7) + (24) = 31, left: 31, 8\n(24) - (8) = 16, left: 16, 7\n(16) / (7) = 16/7, left: 16/7\n(8) - (7) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 + 12) * (8 - 7))"}, {"input": "12 7 8 12\n", "output": "(12) / (8) = 3/2, left: 3/2, 12, 7\n(7) / (3/2) = 14/3, left: 14/3, 12\n(8) + (12) = 20, left: 20, 12, 7\n(12) + (7) = 19, left: 19, 20\n(8) - (12) = -4, left: -4, 12, 7\n(12) - (8) = 4, left: 4, 12, 7\n(8) * (12) = 96, left: 96, 12, 7\n(7) - (8) = -1, left: -1, 12, 12\n(12) / (-1) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (12 / (7 - 8)))"}, {"input": "12 7 8 12\n", "output": "(12) * (7) = 84, left: 84, 8, 12\n(8) - (12) = -4, left: -4, 84\n(12) - (7) = 5, left: 5, 8, 12\n(12) + (7) = 19, left: 19, 8, 12\n(8) * (19) = 152, left: 152, 12\n(12) * (12) = 144, left: 144, 7, 8\n(12) + (12) = 24, left: 24, 7, 8\n(7) / (24) = 7/24, left: 7/24, 8\n(8) - (7) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (8 - 7))"}, {"input": "12 7 8 12\n", "output": "(8) * (12) = 96, left: 96, 12, 7\n(8) / (12) = 2/3, left: 2/3, 7, 12\n(2/3) - (12) = -34/3, left: -34/3, 7\n(12) * (8) = 96, left: 96, 7, 12\n(12) - (8) = 4, left: 4, 7, 12\n(8) - (12) = -4, left: -4, 7, 12\n(12) - (7) = 5, left: 5, -4\n(8) - (7) = 1, left: 1, 12, 12\n(12) + (12) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (8 - 7))"}, {"input": "12 7 8 12\n", "output": "(12) - (12) = 0, left: 0, 7, 8\n(12) / (12) = 1, left: 1, 7, 8\n(1) - (8) = -7, left: -7, 7\n(7) + (8) = 15, left: 15, 1\n(12) - (12) = 0, left: 0, 7, 8\n(8) - (0) = 8, left: 8, 7\n(7) / (8) = 7/8, left: 7/8, 0\n(12) + (12) = 24, left: 24, 7, 8\n(8) - (7) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 + 12) * (8 - 7))"}, {"input": "12 7 8 12\n", "output": "(12) + (12) = 24, left: 24, 7, 8\n(24) - (7) = 17, left: 17, 8\n(8) + (17) = 25, left: 25\n(8) / (24) = 1/3, left: 1/3, 7\n(8) * (24) = 192, left: 192, 7\n(7) + (8) = 15, left: 15, 24\n(7) / (8) = 7/8, left: 7/8, 24\n(7/8) / (24) = 7/192, left: 7/192\n(8) - (7) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 + 12) * (8 - 7))"}, {"input": "9 1 5 6\n", "output": "(6) / (9) = 2/3, left: 2/3, 1, 5\n(2/3) / (1) = 2/3, left: 2/3, 5\n(9) * (6) = 54, left: 54, 1, 5\n(5) + (54) = 59, left: 59, 1\n(9) / (6) = 3/2, left: 3/2, 1, 5\n(1) - (3/2) = -1/2, left: -1/2, 5\n(1) - (6) = -5, left: -5, 9, 5\n(1) / (6) = 1/6, left: 1/6, 9, 5\n(9) - (5) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((9 - 5) / (1 / 6))"}, {"input": "9 1 5 6\n", "output": "(6) - (9) = -3, left: -3, 1, 5\n(1) + (5) = 6, left: 6, -3\n(9) / (6) = 3/2, left: 3/2, 1, 5\n(6) / (5) = 6/5, left: 6/5, 9, 1\n(5) * (6) = 30, left: 30, 9, 1\n(9) * (30) = 270, left: 270, 1\n(5) - (6) = -1, left: -1, 9, 1\n(1) / (6) = 1/6, left: 1/6, 9, 5\n(9) - (5) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((9 - 5) / (1 / 6))"}, {"input": "9 1 5 6\n", "output": "(1) - (9) = -8, left: -8, 5, 6\n(6) * (-8) = -48, left: -48, 5\n(9) + (1) = 10, left: 10, 5, 6\n(5) * (10) = 50, left: 50, 6\n(6) / (50) = 3/25, left: 3/25\n(1) / (9) = 1/9, left: 1/9, 5, 6\n(5) + (6) = 11, left: 11, 1/9\n(9) / (1) = 9, left: 9, 5, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 / 1) - 5))"}, {"input": "9 1 5 6\n", "output": "(5) - (9) = -4, left: -4, 1, 6\n(9) + (5) = 14, left: 14, 1, 6\n(1) * (6) = 6, left: 6, 14\n(14) * (6) = 84, left: 84\n(9) / (5) = 9/5, left: 9/5, 1, 6\n(9/5) / (1) = 9/5, left: 9/5, 6\n(6) * (9/5) = 54/5, left: 54/5\n(9) - (5) = 4, left: 4, 1, 6\n(4) / (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 - 5) / 1))"}, {"input": "9 1 5 6\n", "output": "(9) + (6) = 15, left: 15, 1, 5\n(6) - (9) = -3, left: -3, 1, 5\n(9) - (6) = 3, left: 3, 1, 5\n(5) / (1) = 5, left: 5, 3\n(6) / (9) = 2/3, left: 2/3, 1, 5\n(9) + (1) = 10, left: 10, 5, 6\n(10) / (5) = 2, left: 2, 6\n(9) / (1) = 9, left: 9, 5, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 / 1) - 5))"}, {"input": "9 1 5 6\n", "output": "(9) + (6) = 15, left: 15, 1, 5\n(1) * (15) = 15, left: 15, 5\n(15) - (5) = 10, left: 10\n(9) * (6) = 54, left: 54, 1, 5\n(1) * (54) = 54, left: 54, 5\n(1) + (54) = 55, left: 55, 5\n(5) * (55) = 275, left: 275\n(1) / (9) = 1/9, left: 1/9, 5, 6\n(9) - (1) = 8, left: 8, 5, 6\n(5) / (8) = 5/8, left: 5/8, 6\n(6) * (8) = 48, left: 48, 5\n(9) / (1) = 9, left: 9, 5, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 / 1) - 5))"}, {"input": "9 1 5 6\n", "output": "(9) + (6) = 15, left: 15, 1, 5\n(5) - (15) = -10, left: -10, 1\n(1) / (5) = 1/5, left: 1/5, 15\n(6) / (9) = 2/3, left: 2/3, 1, 5\n(1) - (2/3) = 1/3, left: 1/3, 5\n(6) - (9) = -3, left: -3, 1, 5\n(9) * (6) = 54, left: 54, 1, 5\n(9) / (6) = 3/2, left: 3/2, 1, 5\n(5) / (1) = 5, left: 5, 3/2\n(5) - (3/2) = 7/2, left: 7/2, 1\n(9) - (6) = 3, left: 3, 1, 5\n(1) / (6) = 1/6, left: 1/6, 9, 5\n(9) - (5) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((9 - 5) / (1 / 6))"}, {"input": "9 1 5 6\n", "output": "(6) - (9) = -3, left: -3, 1, 5\n(1) + (-3) = -2, left: -2, 5\n(9) + (6) = 15, left: 15, 1, 5\n(1) + (15) = 16, left: 16, 5\n(5) + (16) = 21, left: 21\n(9) / (6) = 3/2, left: 3/2, 1, 5\n(1) / (5) = 1/5, left: 1/5, 3/2\n(5) - (1) = 4, left: 4, 3/2\n(6) - (5) = 1, left: 1, 9, 1\n(1) / (1) = 1, left: 1, 9\n(5) / (6) = 5/6, left: 5/6, 9, 1\n(1) / (6) = 1/6, left: 1/6, 9, 5\n(9) - (5) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((9 - 5) / (1 / 6))"}, {"input": "9 1 5 6\n", "output": "(1) - (9) = -8, left: -8, 5, 6\n(6) - (-8) = 14, left: 14, 5\n(5) + (-8) = -3, left: -3, 6\n(9) + (1) = 10, left: 10, 5, 6\n(10) / (5) = 2, left: 2, 6\n(5) * (10) = 50, left: 50, 6\n(1) / (9) = 1/9, left: 1/9, 5, 6\n(6) / (1/9) = 54, left: 54, 5\n(6) - (5) = 1, left: 1, 1/9\n(5) * (1/9) = 5/9, left: 5/9, 6\n(9) / (1) = 9, left: 9, 5, 6\n(5) / (6) = 5/6, left: 5/6, 9\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 / 1) - 5))"}, {"input": "9 1 5 6\n", "output": "(5) - (9) = -4, left: -4, 1, 6\n(1) * (-4) = -4, left: -4, 6\n(1) + (6) = 7, left: 7, -4\n(-4) / (6) = -2/3, left: -2/3, 1\n(-4) - (6) = -10, left: -10, 1\n(5) / (9) = 5/9, left: 5/9, 1, 6\n(5/9) / (1) = 5/9, left: 5/9, 6\n(9) / (5) = 9/5, left: 9/5, 1, 6\n(9) * (5) = 45, left: 45, 1, 6\n(1) + (6) = 7, left: 7, 45\n(45) / (7) = 45/7, left: 45/7\n(9) - (5) = 4, left: 4, 1, 6\n(4) / (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 - 5) / 1))"}, {"input": "12 7 9 1\n", "output": "(7) * (9) = 63, left: 63, 12, 1\n(9) / (7) = 9/7, left: 9/7, 12, 1\n(1) / (12) = 1/12, left: 1/12, 9/7\n(1) / (9/7) = 7/9, left: 7/9, 12\n(7) - (9) = -2, left: -2, 12, 1\n(12) * (-2) = -24, left: -24, 1\n(12) * (1) = 12, left: 12, -2\n(9) - (7) = 2, left: 2, 12, 1\n(12) * (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((9 - 7) * (12 * 1))"}, {"input": "12 7 9 1\n", "output": "(9) - (12) = -3, left: -3, 7, 1\n(1) / (7) = 1/7, left: 1/7, -3\n(-3) / (7) = -3/7, left: -3/7, 1\n(12) + (9) = 21, left: 21, 7, 1\n(21) - (7) = 14, left: 14, 1\n(12) - (9) = 3, left: 3, 7, 1\n(1) / (7) = 1/7, left: 1/7, 3\n(7) / (1) = 7, left: 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((12 - 9) * (7 + 1))"}, {"input": "12 7 9 1\n", "output": "(12) / (7) = 12/7, left: 12/7, 9, 1\n(12) * (7) = 84, left: 84, 9, 1\n(7) - (12) = -5, left: -5, 9, 1\n(9) - (12) = -3, left: -3, 7, 1\n(12) * (9) = 108, left: 108, 7, 1\n(1) / (7) = 1/7, left: 1/7, 108\n(1) - (108) = -107, left: -107, 7\n(12) - (9) = 3, left: 3, 7, 1\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((12 - 9) * (7 + 1))"}, {"input": "12 7 9 1\n", "output": "(9) + (1) = 10, left: 10, 12, 7\n(1) - (9) = -8, left: -8, 12, 7\n(7) * (-8) = -56, left: -56, 12\n(-8) / (7) = -8/7, left: -8/7, 12\n(12) * (7) = 84, left: 84, -8\n(12) / (7) = 12/7, left: 12/7, -8\n(-8) + (12/7) = -44/7, left: -44/7\n(9) / (1) = 9, left: 9, 12, 7\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 / 1) - 7))"}, {"input": "12 7 9 1\n", "output": "(7) * (1) = 7, left: 7, 12, 9\n(12) * (7) = 84, left: 84, 9\n(12) - (7) = 5, left: 5, 9\n(5) / (9) = 5/9, left: 5/9\n(12) + (7) = 19, left: 19, 9\n(9) / (19) = 9/19, left: 9/19\n(9) - (19) = -10, left: -10\n(9) - (12) = -3, left: -3, 7\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (9 - (7 * 1)))"}, {"input": "9 1 12 6\n", "output": "(9) * (6) = 54, left: 54, 1, 12\n(12) + (54) = 66, left: 66, 1\n(9) + (6) = 15, left: 15, 1, 12\n(15) / (1) = 15, left: 15, 12\n(6) / (9) = 2/3, left: 2/3, 1, 12\n(1) + (12) = 13, left: 13, 2/3\n(2/3) * (13) = 26/3, left: 26/3\n(9) / (6) = 3/2, left: 3/2, 1, 12\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((9 / 6) - 1))"}, {"input": "9 1 12 6\n", "output": "(6) - (9) = -3, left: -3, 1, 12\n(1) - (12) = -11, left: -11, -3\n(6) / (9) = 2/3, left: 2/3, 1, 12\n(2/3) - (12) = -34/3, left: -34/3, 1\n(9) + (6) = 15, left: 15, 1, 12\n(9) * (6) = 54, left: 54, 1, 12\n(12) * (54) = 648, left: 648, 1\n(9) / (6) = 3/2, left: 3/2, 1, 12\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((9 / 6) - 1))"}, {"input": "9 1 12 6\n", "output": "(9) - (1) = 8, left: 8, 12, 6\n(6) - (8) = -2, left: -2, 12\n(12) / (-2) = -6, left: -6\n(6) / (8) = 3/4, left: 3/4, 12\n(12) / (3/4) = 16, left: 16\n(3/4) - (12) = -45/4, left: -45/4\n(6) + (8) = 14, left: 14, 12\n(12) - (14) = -2, left: -2\n(8) - (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 - 1) - 6))"}, {"input": "9 1 12 6\n", "output": "(1) / (9) = 1/9, left: 1/9, 12, 6\n(12) - (6) = 6, left: 6, 1/9\n(6) + (1/9) = 55/9, left: 55/9, 12\n(12) * (55/9) = 220/3, left: 220/3\n(9) - (1) = 8, left: 8, 12, 6\n(12) * (8) = 96, left: 96, 6\n(12) / (8) = 3/2, left: 3/2, 6\n(6) / (3/2) = 4, left: 4\n(12) - (8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (12 - (9 - 1)))"}, {"input": "9 1 12 6\n", "output": "(1) / (12) = 1/12, left: 1/12, 9, 6\n(1/12) - (6) = -71/12, left: -71/12, 9\n(12) / (1) = 12, left: 12, 9, 6\n(9) / (12) = 3/4, left: 3/4, 6\n(6) - (9) = -3, left: -3, 12\n(12) - (1) = 11, left: 11, 9, 6\n(9) - (6) = 3, left: 3, 11\n(1) + (12) = 13, left: 13, 9, 6\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((1 + 12) - 9))"}, {"input": "8 8 5 2\n", "output": "(8) * (5) = 40, left: 40, 8, 2\n(8) * (40) = 320, left: 320, 2\n(8) - (40) = -32, left: -32, 2\n(-32) - (2) = -34, left: -34\n(40) - (8) = 32, left: 32, 2\n(2) / (32) = 1/16, left: 1/16\n(8) / (40) = 1/5, left: 1/5, 2\n(1/5) / (2) = 1/10, left: 1/10\n(8) + (40) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 + (8 * 5)) / 2)"}, {"input": "8 8 5 2\n", "output": "(2) - (8) = -6, left: -6, 8, 5\n(-6) / (8) = -3/4, left: -3/4, 5\n(5) * (-3/4) = -15/4, left: -15/4\n(2) / (8) = 1/4, left: 1/4, 8, 5\n(8) / (2) = 4, left: 4, 8, 5\n(8) - (2) = 6, left: 6, 8, 5\n(8) / (6) = 4/3, left: 4/3, 5\n(8) * (2) = 16, left: 16, 8, 5\n(8) * (5) = 40, left: 40, 16\n(40) - (16) = 24, left: 24\nreach 24! expression: ((8 * 5) - (8 * 2))"}, {"input": "8 8 5 2\n", "output": "(5) - (8) = -3, left: -3, 8, 2\n(-3) - (8) = -11, left: -11, 2\n(8) - (5) = 3, left: 3, 8, 2\n(8) / (3) = 8/3, left: 8/3, 2\n(5) / (8) = 5/8, left: 5/8, 8, 2\n(2) - (5/8) = 11/8, left: 11/8, 8\n(8) * (2) = 16, left: 16, 5/8\n(8) * (5) = 40, left: 40, 8, 2\n(8) * (2) = 16, left: 16, 40\n(40) - (16) = 24, left: 24\nreach 24! expression: ((8 * 5) - (8 * 2))"}, {"input": "8 8 5 2\n", "output": "(8) / (8) = 1, left: 1, 5, 2\n(5) / (1) = 5, left: 5, 2\n(8) * (8) = 64, left: 64, 5, 2\n(5) + (2) = 7, left: 7, 64\n(8) - (8) = 0, left: 0, 5, 2\n(5) - (8) = -3, left: -3, 8, 2\n(5) / (8) = 5/8, left: 5/8, 8, 2\n(8) * (5) = 40, left: 40, 8, 2\n(8) + (40) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 + (8 * 5)) / 2)"}, {"input": "8 8 5 2\n", "output": "(2) - (8) = -6, left: -6, 8, 5\n(5) - (8) = -3, left: -3, -6\n(8) + (2) = 10, left: 10, 8, 5\n(5) / (10) = 1/2, left: 1/2, 8\n(2) / (8) = 1/4, left: 1/4, 8, 5\n(5) - (1/4) = 19/4, left: 19/4, 8\n(8) * (2) = 16, left: 16, 8, 5\n(8) - (5) = 3, left: 3, 16\n(8) * (5) = 40, left: 40, 16\n(40) - (16) = 24, left: 24\nreach 24! expression: ((8 * 5) - (8 * 2))"}, {"input": "8 8 5 2\n", "output": "(2) - (8) = -6, left: -6, 8, 5\n(-6) - (5) = -11, left: -11, 8\n(2) / (8) = 1/4, left: 1/4, 8, 5\n(5) - (1/4) = 19/4, left: 19/4, 8\n(8) / (1/4) = 32, left: 32, 5\n(8) / (2) = 4, left: 4, 8, 5\n(4) / (8) = 1/2, left: 1/2, 5\n(8) + (2) = 10, left: 10, 8, 5\n(8) - (10) = -2, left: -2, 5\n(8) / (10) = 4/5, left: 4/5, 5\n(8) - (2) = 6, left: 6, 8, 5\n(8) * (2) = 16, left: 16, 8, 5\n(8) * (5) = 40, left: 40, 16\n(40) - (16) = 24, left: 24\nreach 24! expression: ((8 * 5) - (8 * 2))"}, {"input": "8 8 5 2\n", "output": "(8) / (8) = 1, left: 1, 5, 2\n(8) - (8) = 0, left: 0, 5, 2\n(0) - (2) = -2, left: -2, 5\n(8) + (8) = 16, left: 16, 5, 2\n(8) - (8) = 0, left: 0, 5, 2\n(5) - (8) = -3, left: -3, 8, 2\n(8) * (-3) = -24, left: -24, 2\n(2) + (-24) = -22, left: -22\n(5) / (8) = 5/8, left: 5/8, 8, 2\n(8) / (2) = 4, left: 4, 5/8\n(5/8) / (4) = 5/32, left: 5/32\n(8) * (5) = 40, left: 40, 8, 2\n(8) + (40) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 + (8 * 5)) / 2)"}, {"input": "9 6 10 11\n", "output": "(6) / (9) = 2/3, left: 2/3, 10, 11\n(10) + (11) = 21, left: 21, 2/3\n(2/3) / (11) = 2/33, left: 2/33, 10\n(6) - (9) = -3, left: -3, 10, 11\n(-3) - (11) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((6 - 9) - 11))"}, {"input": "9 6 10 11\n", "output": "(10) / (6) = 5/3, left: 5/3, 9, 11\n(9) / (5/3) = 27/5, left: 27/5, 11\n(6) - (10) = -4, left: -4, 9, 11\n(11) * (-4) = -44, left: -44, 9\n(11) - (-4) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (11 - (6 - 10)))"}, {"input": "9 6 10 11\n", "output": "(9) + (11) = 20, left: 20, 6, 10\n(6) - (10) = -4, left: -4, 20\n(20) + (-4) = 16, left: 16\n(-4) - (20) = -24, left: -24\n(20) * (-4) = -80, left: -80\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((9 + 11) - (6 - 10))"}, {"input": "9 6 10 11\n", "output": "(9) / (11) = 9/11, left: 9/11, 6, 10\n(9) * (11) = 99, left: 99, 6, 10\n(10) * (99) = 990, left: 990, 6\n(9) + (11) = 20, left: 20, 6, 10\n(10) + (20) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 + (9 + 11)) - 6)"}, {"input": "9 6 10 11\n", "output": "(6) * (10) = 60, left: 60, 9, 11\n(6) + (10) = 16, left: 16, 9, 11\n(16) - (11) = 5, left: 5, 9\n(6) / (10) = 3/5, left: 3/5, 9, 11\n(9) / (11) = 9/11, left: 9/11, 3/5\n(10) / (6) = 5/3, left: 5/3, 9, 11\n(11) / (9) = 11/9, left: 11/9, 5/3\n(10) - (6) = 4, left: 4, 9, 11\n(9) + (4) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (9 + (10 - 6)))"}, {"input": "9 6 10 11\n", "output": "(9) / (11) = 9/11, left: 9/11, 6, 10\n(6) / (9/11) = 22/3, left: 22/3, 10\n(22/3) - (10) = -8/3, left: -8/3\n(9) * (11) = 99, left: 99, 6, 10\n(99) / (6) = 33/2, left: 33/2, 10\n(6) / (10) = 3/5, left: 3/5, 99\n(99) * (3/5) = 297/5, left: 297/5\n(9) + (11) = 20, left: 20, 6, 10\n(10) + (20) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 + (9 + 11)) - 6)"}, {"input": "9 6 10 11\n", "output": "(6) / (9) = 2/3, left: 2/3, 10, 11\n(10) + (2/3) = 32/3, left: 32/3, 11\n(2/3) - (10) = -28/3, left: -28/3, 11\n(11) / (2/3) = 33/2, left: 33/2, 10\n(10) - (33/2) = -13/2, left: -13/2\n(2/3) - (11) = -31/3, left: -31/3, 10\n(10) * (-31/3) = -310/3, left: -310/3\n(6) - (9) = -3, left: -3, 10, 11\n(-3) - (11) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((6 - 9) - 11))"}, {"input": "9 6 10 11\n", "output": "(10) / (6) = 5/3, left: 5/3, 9, 11\n(9) / (11) = 9/11, left: 9/11, 5/3\n(11) / (5/3) = 33/5, left: 33/5, 9\n(5/3) - (9) = -22/3, left: -22/3, 11\n(9) + (5/3) = 32/3, left: 32/3, 11\n(5/3) / (9) = 5/27, left: 5/27, 11\n(6) - (10) = -4, left: -4, 9, 11\n(11) * (-4) = -44, left: -44, 9\n(11) - (-4) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (11 - (6 - 10)))"}, {"input": "9 6 10 11\n", "output": "(9) + (11) = 20, left: 20, 6, 10\n(6) - (10) = -4, left: -4, 20\n(20) / (-4) = -5, left: -5\n(20) + (-4) = 16, left: 16\n(-4) - (20) = -24, left: -24\n(20) * (-4) = -80, left: -80\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((9 + 11) - (6 - 10))"}, {"input": "9 6 10 11\n", "output": "(9) + (11) = 20, left: 20, 6, 10\n(6) - (10) = -4, left: -4, 20\n(20) / (-4) = -5, left: -5\n(20) + (-4) = 16, left: 16\n(-4) - (20) = -24, left: -24\n(20) * (-4) = -80, left: -80\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((9 + 11) - (6 - 10))"}, {"input": "9 6 10 11\n", "output": "(9) + (11) = 20, left: 20, 6, 10\n(6) - (10) = -4, left: -4, 20\n(20) / (-4) = -5, left: -5\n(20) + (-4) = 16, left: 16\n(-4) - (20) = -24, left: -24\n(20) * (-4) = -80, left: -80\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((9 + 11) - (6 - 10))"}, {"input": "10 6 2 5\n", "output": "(5) / (2) = 5/2, left: 5/2, 10, 6\n(10) - (5/2) = 15/2, left: 15/2, 6\n(6) - (15/2) = -3/2, left: -3/2\n(5/2) / (10) = 1/4, left: 1/4, 6\n(6) + (1/4) = 25/4, left: 25/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 2) / 10))"}, {"input": "10 6 2 5\n", "output": "(6) - (5) = 1, left: 1, 10, 2\n(2) + (1) = 3, left: 3, 10\n(10) - (2) = 8, left: 8, 1\n(6) + (5) = 11, left: 11, 10, 2\n(2) * (11) = 22, left: 22, 10\n(10) * (2) = 20, left: 20, 11\n(2) - (10) = -8, left: -8, 11\n(6) / (5) = 6/5, left: 6/5, 10, 2\n(10) * (2) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((6 / 5) * (10 * 2))"}, {"input": "10 6 2 5\n", "output": "(5) / (2) = 5/2, left: 5/2, 10, 6\n(10) * (5/2) = 25, left: 25, 6\n(6) * (25) = 150, left: 150\n(10) - (5/2) = 15/2, left: 15/2, 6\n(6) / (15/2) = 4/5, left: 4/5\n(15/2) - (6) = 3/2, left: 3/2\n(6) + (15/2) = 27/2, left: 27/2\n(5/2) / (10) = 1/4, left: 1/4, 6\n(1/4) / (6) = 1/24, left: 1/24\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 2) / 10))"}, {"input": "10 6 2 5\n", "output": "(2) / (10) = 1/5, left: 1/5, 6, 5\n(1/5) / (5) = 1/25, left: 1/25, 6\n(1/5) - (5) = -24/5, left: -24/5, 6\n(10) / (2) = 5, left: 5, 6, 5\n(10) - (2) = 8, left: 8, 6, 5\n(8) - (5) = 3, left: 3, 6\n(10) * (2) = 20, left: 20, 6, 5\n(20) - (6) = 14, left: 14, 5\n(6) * (20) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((6 * (10 * 2)) / 5)"}, {"input": "10 6 2 5\n", "output": "(6) / (2) = 3, left: 3, 10, 5\n(3) - (10) = -7, left: -7, 5\n(10) + (3) = 13, left: 13, 5\n(2) / (6) = 1/3, left: 1/3, 10, 5\n(5) - (10) = -5, left: -5, 1/3\n(2) - (6) = -4, left: -4, 10, 5\n(10) - (5) = 5, left: 5, -4\n(6) * (2) = 12, left: 12, 10, 5\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (6 * 2)) / 5)"}, {"input": "10 6 2 5\n", "output": "(6) + (5) = 11, left: 11, 10, 2\n(2) / (10) = 1/5, left: 1/5, 11\n(5) - (6) = -1, left: -1, 10, 2\n(10) - (2) = 8, left: 8, -1\n(10) + (2) = 12, left: 12, -1\n(10) / (-1) = -10, left: -10, 2\n(2) - (-10) = 12, left: 12\n(5) / (6) = 5/6, left: 5/6, 10, 2\n(10) * (2) = 20, left: 20, 5/6\n(20) / (5/6) = 24, left: 24\nreach 24! expression: ((10 * 2) / (5 / 6))"}, {"input": "3 11 8 7\n", "output": "(7) - (8) = -1, left: -1, 3, 11\n(11) + (-1) = 10, left: 10, 3\n(7) / (8) = 7/8, left: 7/8, 3, 11\n(3) + (7/8) = 31/8, left: 31/8, 11\n(8) * (7) = 56, left: 56, 3, 11\n(8) / (7) = 8/7, left: 8/7, 3, 11\n(7) - (11) = -4, left: -4, 3, 8\n(8) - (11) = -3, left: -3, 3, 7\n(3) * (7) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((3 * 7) - (8 - 11))"}, {"input": "3 11 8 7\n", "output": "(8) / (7) = 8/7, left: 8/7, 3, 11\n(8) + (7) = 15, left: 15, 3, 11\n(7) - (8) = -1, left: -1, 3, 11\n(3) / (8) = 3/8, left: 3/8, 11, 7\n(8) / (3) = 8/3, left: 8/3, 11, 7\n(11) - (8/3) = 25/3, left: 25/3, 7\n(3) - (8) = -5, left: -5, 11, 7\n(8) - (3) = 5, left: 5, 11, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (8 - 3)) - 11)"}, {"input": "3 11 8 7\n", "output": "(3) + (7) = 10, left: 10, 11, 8\n(7) / (3) = 7/3, left: 7/3, 11, 8\n(8) - (7/3) = 17/3, left: 17/3, 11\n(11) / (17/3) = 33/17, left: 33/17\n(3) - (7) = -4, left: -4, 11, 8\n(11) - (-4) = 15, left: 15, 8\n(3) / (7) = 3/7, left: 3/7, 11, 8\n(3) * (7) = 21, left: 21, 11, 8\n(11) + (21) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((11 + (3 * 7)) - 8)"}, {"input": "3 11 8 7\n", "output": "(11) + (8) = 19, left: 19, 3, 7\n(3) / (7) = 3/7, left: 3/7, 19\n(7) * (19) = 133, left: 133, 3\n(3) + (133) = 136, left: 136\n(7) / (19) = 7/19, left: 7/19, 3\n(3) - (7/19) = 50/19, left: 50/19\n(19) / (7) = 19/7, left: 19/7, 3\n(8) - (11) = -3, left: -3, 3, 7\n(7) * (-3) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (7 * (8 - 11)))"}, {"input": "3 11 8 7\n", "output": "(11) - (3) = 8, left: 8, 8, 7\n(11) / (3) = 11/3, left: 11/3, 8, 7\n(7) * (11/3) = 77/3, left: 77/3, 8\n(3) * (11) = 33, left: 33, 8, 7\n(33) - (7) = 26, left: 26, 8\n(3) - (11) = -8, left: -8, 8, 7\n(7) / (3) = 7/3, left: 7/3, 11, 8\n(3) * (7) = 21, left: 21, 11, 8\n(11) - (8) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((3 * 7) + (11 - 8))"}, {"input": "10 7 7 9\n", "output": "(7) * (7) = 49, left: 49, 10, 9\n(9) / (10) = 9/10, left: 9/10, 49\n(9/10) - (49) = -481/10, left: -481/10\n(7) - (9) = -2, left: -2, 10, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (7 - 9)))"}, {"input": "10 7 7 9\n", "output": "(10) - (7) = 3, left: 3, 7, 9\n(3) - (7) = -4, left: -4, 9\n(10) * (7) = 70, left: 70, 7, 9\n(9) - (7) = 2, left: 2, 70\n(7) - (10) = -3, left: -3, 7, 9\n(7) + (9) = 16, left: 16, 10, 7\n(7) / (9) = 7/9, left: 7/9, 10, 7\n(9) - (7) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (9 - 7)))"}, {"input": "10 7 7 9\n", "output": "(7) / (7) = 1, left: 1, 10, 9\n(9) + (1) = 10, left: 10, 10\n(7) - (7) = 0, left: 0, 10, 9\n(7) * (7) = 49, left: 49, 10, 9\n(10) + (49) = 59, left: 59, 9\n(9) / (7) = 9/7, left: 9/7, 10, 7\n(7) * (9) = 63, left: 63, 10, 7\n(9) - (7) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (9 - 7)))"}, {"input": "10 7 7 9\n", "output": "(10) / (7) = 10/7, left: 10/7, 7, 9\n(7) / (10) = 7/10, left: 7/10, 7, 9\n(7) / (7/10) = 10, left: 10, 9\n(10) / (7) = 10/7, left: 10/7, 7, 9\n(10/7) / (9) = 10/63, left: 10/63, 7\n(10) + (7) = 17, left: 17, 7, 9\n(7) - (9) = -2, left: -2, 10, 7\n(10) + (7) = 17, left: 17, -2\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (7 - 9)))"}, {"input": "10 7 7 9\n", "output": "(10) - (7) = 3, left: 3, 7, 9\n(9) / (3) = 3, left: 3, 7\n(7) / (10) = 7/10, left: 7/10, 7, 9\n(10) / (9) = 10/9, left: 10/9, 7, 7\n(7) / (10) = 7/10, left: 7/10, 7, 9\n(9) * (7/10) = 63/10, left: 63/10, 7\n(7) / (7) = 1, left: 1, 10, 9\n(9) - (7) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (9 - 7)))"}, {"input": "10 7 7 9\n", "output": "(7) - (7) = 0, left: 0, 10, 9\n(7) - (7) = 0, left: 0, 10, 9\n(10) + (9) = 19, left: 19, 0\n(7) + (7) = 14, left: 14, 10, 9\n(9) - (14) = -5, left: -5, 10\n(10) - (-5) = 15, left: 15\n(7) / (7) = 1, left: 1, 10, 9\n(7) - (9) = -2, left: -2, 10, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (7 - 9)))"}, {"input": "10 7 7 9\n", "output": "(7) / (10) = 7/10, left: 7/10, 7, 9\n(10) + (7) = 17, left: 17, 7, 9\n(17) / (7) = 17/7, left: 17/7, 9\n(10) - (7) = 3, left: 3, 7, 9\n(9) - (7) = 2, left: 2, 3\n(10) / (7) = 10/7, left: 10/7, 7, 9\n(10) - (7) = 3, left: 3, 7, 9\n(9) * (3) = 27, left: 27, 7\n(10) * (7) = 70, left: 70, 7, 9\n(9) + (70) = 79, left: 79, 7\n(7) / (10) = 7/10, left: 7/10, 7, 9\n(7) - (9) = -2, left: -2, 10, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (7 - 9)))"}, {"input": "10 7 7 9\n", "output": "(7) - (7) = 0, left: 0, 10, 9\n(9) + (0) = 9, left: 9, 10\n(7) / (7) = 1, left: 1, 10, 9\n(1) - (9) = -8, left: -8, 10\n(7) - (7) = 0, left: 0, 10, 9\n(0) - (10) = -10, left: -10, 9\n(9) - (0) = 9, left: 9, 10\n(7) + (7) = 14, left: 14, 10, 9\n(9) - (10) = -1, left: -1, 14\n(14) / (-1) = -14, left: -14\n(7) / (7) = 1, left: 1, 10, 9\n(7) - (9) = -2, left: -2, 10, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (7 - 9)))"}, {"input": "10 7 7 9\n", "output": "(10) + (7) = 17, left: 17, 7, 9\n(10) - (7) = 3, left: 3, 7, 9\n(10) / (7) = 10/7, left: 10/7, 7, 9\n(7) * (10/7) = 10, left: 10, 9\n(10) + (9) = 19, left: 19, 7, 7\n(9) / (10) = 9/10, left: 9/10, 7, 7\n(7) - (7) = 0, left: 0, 9/10\n(10) / (7) = 10/7, left: 10/7, 7, 9\n(7) * (7) = 49, left: 49, 10, 9\n(7) + (7) = 14, left: 14, 10, 9\n(14) - (10) = 4, left: 4, 9\n(9) - (7) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (9 - 7)))"}, {"input": "10 2 4 13\n", "output": "(10) / (2) = 5, left: 5, 4, 13\n(10) - (2) = 8, left: 8, 4, 13\n(10) + (2) = 12, left: 12, 4, 13\n(13) * (12) = 156, left: 156, 4\n(4) / (2) = 2, left: 2, 10, 13\n(10) + (2) = 12, left: 12, 13\n(2) + (4) = 6, left: 6, 10, 13\n(2) * (4) = 8, left: 8, 10, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((2 * 4) * (13 - 10))"}, {"input": "10 2 4 13\n", "output": "(10) * (13) = 130, left: 130, 2, 4\n(2) + (4) = 6, left: 6, 130\n(130) - (6) = 124, left: 124\n(10) / (13) = 10/13, left: 10/13, 2, 4\n(10) - (13) = -3, left: -3, 2, 4\n(4) * (-3) = -12, left: -12, 2\n(-3) - (2) = -5, left: -5, 4\n(13) - (10) = 3, left: 3, 2, 4\n(2) * (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 * (13 - 10)))"}, {"input": "10 2 4 13\n", "output": "(10) - (2) = 8, left: 8, 4, 13\n(4) - (8) = -4, left: -4, 13\n(10) + (2) = 12, left: 12, 4, 13\n(2) * (13) = 26, left: 26, 10, 4\n(2) - (13) = -11, left: -11, 10, 4\n(4) / (13) = 4/13, left: 4/13, 10, 2\n(2) * (4/13) = 8/13, left: 8/13, 10\n(4) + (13) = 17, left: 17, 10, 2\n(2) * (17) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((2 * (4 + 13)) - 10)"}, {"input": "10 2 4 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 10, 4\n(2/13) / (4) = 1/26, left: 1/26, 10\n(2) * (13) = 26, left: 26, 10, 4\n(10) - (26) = -16, left: -16, 4\n(2) + (13) = 15, left: 15, 10, 4\n(4) - (15) = -11, left: -11, 10\n(13) / (10) = 13/10, left: 13/10, 2, 4\n(13) - (10) = 3, left: 3, 2, 4\n(2) * (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((13 - 10) * (2 * 4))"}, {"input": "10 2 4 13\n", "output": "(10) / (13) = 10/13, left: 10/13, 2, 4\n(2) - (10/13) = 16/13, left: 16/13, 4\n(10/13) - (2) = -16/13, left: -16/13, 4\n(10) + (13) = 23, left: 23, 2, 4\n(13) / (10) = 13/10, left: 13/10, 2, 4\n(10) * (13) = 130, left: 130, 2, 4\n(2) + (130) = 132, left: 132, 4\n(13) - (10) = 3, left: 3, 2, 4\n(2) * (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 * (13 - 10)))"}, {"input": "8 11 12 6\n", "output": "(11) / (8) = 11/8, left: 11/8, 12, 6\n(11/8) - (12) = -85/8, left: -85/8, 6\n(12) / (11/8) = 96/11, left: 96/11, 6\n(11) - (8) = 3, left: 3, 12, 6\n(12) * (6) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 * 6) / (11 - 8))"}, {"input": "8 11 12 6\n", "output": "(11) / (12) = 11/12, left: 11/12, 8, 6\n(8) - (11/12) = 85/12, left: 85/12, 6\n(11) + (12) = 23, left: 23, 8, 6\n(11) - (8) = 3, left: 3, 12, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((11 - 8) / 6))"}, {"input": "8 11 12 6\n", "output": "(11) / (12) = 11/12, left: 11/12, 8, 6\n(11/12) - (8) = -85/12, left: -85/12, 6\n(11) + (12) = 23, left: 23, 8, 6\n(8) + (6) = 14, left: 14, 23\n(11) * (12) = 132, left: 132, 8, 6\n(8) / (6) = 4/3, left: 4/3, 132\n(6) - (132) = -126, left: -126, 8\n(11) - (8) = 3, left: 3, 12, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((11 - 8) / 6))"}, {"input": "8 11 12 6\n", "output": "(11) - (6) = 5, left: 5, 8, 12\n(8) - (6) = 2, left: 2, 11, 12\n(6) / (8) = 3/4, left: 3/4, 11, 12\n(8) * (6) = 48, left: 48, 11, 12\n(11) + (12) = 23, left: 23, 8, 6\n(11) - (12) = -1, left: -1, 8, 6\n(6) + (-1) = 5, left: 5, 8\n(11) - (8) = 3, left: 3, 12, 6\n(3) / (12) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((11 - 8) / 12))"}, {"input": "8 11 12 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 8, 12\n(8) - (6/11) = 82/11, left: 82/11, 12\n(6) - (11) = -5, left: -5, 8, 12\n(11) + (6) = 17, left: 17, 8, 12\n(12) + (6) = 18, left: 18, 8, 11\n(18) - (11) = 7, left: 7, 8\n(8) * (18) = 144, left: 144, 11\n(12) * (6) = 72, left: 72, 8, 11\n(11) - (8) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 * 6) / (11 - 8))"}, {"input": "8 11 12 6\n", "output": "(8) + (12) = 20, left: 20, 11, 6\n(8) / (12) = 2/3, left: 2/3, 11, 6\n(12) - (6) = 6, left: 6, 8, 11\n(12) + (6) = 18, left: 18, 8, 11\n(11) + (18) = 29, left: 29, 8\n(12) / (6) = 2, left: 2, 8, 11\n(8) * (2) = 16, left: 16, 11\n(12) * (6) = 72, left: 72, 8, 11\n(11) - (8) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 * 6) / (11 - 8))"}, {"input": "8 11 12 6\n", "output": "(11) / (8) = 11/8, left: 11/8, 12, 6\n(12) + (6) = 18, left: 18, 11/8\n(12) + (11/8) = 107/8, left: 107/8, 6\n(6) + (107/8) = 155/8, left: 155/8\n(11) - (8) = 3, left: 3, 12, 6\n(6) - (12) = -6, left: -6, 3\n(-6) - (3) = -9, left: -9\n(12) - (6) = 6, left: 6, 3\n(12) * (6) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 * 6) / (11 - 8))"}, {"input": "11 12 9 7\n", "output": "(9) / (12) = 3/4, left: 3/4, 11, 7\n(7) - (11) = -4, left: -4, 3/4\n(-4) - (3/4) = -19/4, left: -19/4\n(-4) / (3/4) = -16/3, left: -16/3\n(11) + (7) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((11 + 7) / (9 / 12))"}, {"input": "11 12 9 7\n", "output": "(12) + (7) = 19, left: 19, 11, 9\n(9) - (11) = -2, left: -2, 19\n(12) - (7) = 5, left: 5, 11, 9\n(12) / (9) = 4/3, left: 4/3, 11, 7\n(11) + (7) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((12 / 9) * (11 + 7))"}, {"input": "11 12 9 7\n", "output": "(9) / (7) = 9/7, left: 9/7, 11, 12\n(9/7) / (12) = 3/28, left: 3/28, 11\n(12) + (7) = 19, left: 19, 11, 9\n(12) / (9) = 4/3, left: 4/3, 11, 7\n(11) + (7) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((12 / 9) * (11 + 7))"}, {"input": "11 12 9 7\n", "output": "(9) - (11) = -2, left: -2, 12, 7\n(11) / (9) = 11/9, left: 11/9, 12, 7\n(11) + (9) = 20, left: 20, 12, 7\n(12) + (7) = 19, left: 19, 11, 9\n(11) * (19) = 209, left: 209, 9\n(12) - (7) = 5, left: 5, 11, 9\n(7) - (12) = -5, left: -5, 11, 9\n(12) / (9) = 4/3, left: 4/3, 11, 7\n(11) + (7) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((12 / 9) * (11 + 7))"}, {"input": "11 12 9 7\n", "output": "(9) / (12) = 3/4, left: 3/4, 11, 7\n(7) - (11) = -4, left: -4, 3/4\n(-4) - (3/4) = -19/4, left: -19/4\n(3/4) * (-4) = -3, left: -3\n(3/4) + (-4) = -13/4, left: -13/4\n(3/4) - (-4) = 19/4, left: 19/4\n(3/4) / (-4) = -3/16, left: -3/16\n(-4) / (3/4) = -16/3, left: -16/3\n(11) + (7) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((11 + 7) / (9 / 12))"}, {"input": "11 12 9 7\n", "output": "(11) / (7) = 11/7, left: 11/7, 12, 9\n(12) + (11/7) = 95/7, left: 95/7, 9\n(95/7) - (9) = 32/7, left: 32/7\n(12) - (9) = 3, left: 3, 11/7\n(7) / (11) = 7/11, left: 7/11, 12, 9\n(9) / (7/11) = 99/7, left: 99/7, 12\n(7) - (11) = -4, left: -4, 12, 9\n(11) - (7) = 4, left: 4, 12, 9\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (11 - 7)) - 12)"}, {"input": "11 12 9 7\n", "output": "(12) - (7) = 5, left: 5, 11, 9\n(11) / (5) = 11/5, left: 11/5, 9\n(9) * (7) = 63, left: 63, 11, 12\n(63) - (11) = 52, left: 52, 12\n(9) + (7) = 16, left: 16, 11, 12\n(11) * (9) = 99, left: 99, 12, 7\n(7) - (99) = -92, left: -92, 12\n(12) / (9) = 4/3, left: 4/3, 11, 7\n(11) + (7) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((12 / 9) * (11 + 7))"}, {"input": "11 12 9 7\n", "output": "(12) + (9) = 21, left: 21, 11, 7\n(11) / (7) = 11/7, left: 11/7, 21\n(12) - (9) = 3, left: 3, 11, 7\n(11) / (7) = 11/7, left: 11/7, 3\n(11) + (7) = 18, left: 18, 3\n(9) / (12) = 3/4, left: 3/4, 11, 7\n(7) / (3/4) = 28/3, left: 28/3, 11\n(11) * (3/4) = 33/4, left: 33/4, 7\n(11) + (7) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((11 + 7) / (9 / 12))"}, {"input": "11 12 9 7\n", "output": "(9) / (12) = 3/4, left: 3/4, 11, 7\n(7) - (11) = -4, left: -4, 3/4\n(-4) - (3/4) = -19/4, left: -19/4\n(3/4) * (-4) = -3, left: -3\n(3/4) + (-4) = -13/4, left: -13/4\n(3/4) - (-4) = 19/4, left: 19/4\n(3/4) / (-4) = -3/16, left: -3/16\n(-4) / (3/4) = -16/3, left: -16/3\n(11) + (7) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((11 + 7) / (9 / 12))"}, {"input": "11 12 9 7\n", "output": "(9) / (12) = 3/4, left: 3/4, 11, 7\n(7) - (11) = -4, left: -4, 3/4\n(-4) - (3/4) = -19/4, left: -19/4\n(3/4) * (-4) = -3, left: -3\n(3/4) + (-4) = -13/4, left: -13/4\n(3/4) - (-4) = 19/4, left: 19/4\n(3/4) / (-4) = -3/16, left: -3/16\n(-4) / (3/4) = -16/3, left: -16/3\n(11) + (7) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((11 + 7) / (9 / 12))"}, {"input": "6 11 9 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 9, 6\n(9) - (6/11) = 93/11, left: 93/11, 6\n(6) - (9) = -3, left: -3, 6/11\n(6) - (11) = -5, left: -5, 9, 6\n(9) + (-5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 + (6 - 11)))"}, {"input": "6 11 9 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 9, 6\n(6/11) / (6) = 1/11, left: 1/11, 9\n(9) + (6) = 15, left: 15, 6/11\n(9) - (6) = 3, left: 3, 6/11\n(11) / (6) = 11/6, left: 11/6, 9, 6\n(9) * (11/6) = 33/2, left: 33/2, 6\n(6) - (11) = -5, left: -5, 9, 6\n(6) - (9) = -3, left: -3, -5\n(9) + (-5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 + (6 - 11)))"}, {"input": "6 11 9 6\n", "output": "(9) - (6) = 3, left: 3, 6, 11\n(9) / (6) = 3/2, left: 3/2, 6, 11\n(3/2) - (11) = -19/2, left: -19/2, 6\n(3/2) - (6) = -9/2, left: -9/2, 11\n(6) / (9) = 2/3, left: 2/3, 6, 11\n(6) - (9) = -3, left: -3, 6, 11\n(11) * (-3) = -33, left: -33, 6\n(9) + (6) = 15, left: 15, 6, 11\n(15) - (11) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 + 6) - 11))"}, {"input": "6 11 9 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 6, 9\n(11) / (6) = 11/6, left: 11/6, 6, 9\n(6) - (9) = -3, left: -3, 11/6\n(11) + (6) = 17, left: 17, 6, 9\n(6) / (9) = 2/3, left: 2/3, 17\n(9) + (17) = 26, left: 26, 6\n(26) - (6) = 20, left: 20\n(11) - (6) = 5, left: 5, 6, 9\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (11 - 6)))"}, {"input": "6 11 9 6\n", "output": "(11) * (9) = 99, left: 99, 6, 6\n(6) + (6) = 12, left: 12, 99\n(6) / (6) = 1, left: 1, 99\n(99) - (1) = 98, left: 98\n(11) + (9) = 20, left: 20, 6, 6\n(20) / (6) = 10/3, left: 10/3, 6\n(6) * (10/3) = 20, left: 20\n(9) - (11) = -2, left: -2, 6, 6\n(6) + (-2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (6 + (9 - 11)))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 13, 12\n(13) * (12) = 156, left: 156, 2/13\n(156) / (2/13) = 1014, left: 1014\n(2/13) - (156) = -2026/13, left: -2026/13\n(2/13) * (156) = 24, left: 24\nreach 24! expression: ((2 / 13) * (13 * 12))"}, {"input": "13 12 2 13\n", "output": "(12) / (13) = 12/13, left: 12/13, 2, 13\n(2) + (12/13) = 38/13, left: 38/13, 13\n(12/13) / (2) = 6/13, left: 6/13, 13\n(2) / (12/13) = 13/6, left: 13/6, 13\n(2) * (12/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (2 * (12 / 13)))"}, {"input": "13 12 2 13\n", "output": "(13) * (2) = 26, left: 26, 12, 13\n(12) / (13) = 12/13, left: 12/13, 26\n(26) / (12/13) = 169/6, left: 169/6\n(26) - (12/13) = 326/13, left: 326/13\n(26) + (12/13) = 350/13, left: 350/13\n(26) * (12/13) = 24, left: 24\nreach 24! expression: ((13 * 2) * (12 / 13))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 13, 12\n(12) + (2/13) = 158/13, left: 158/13, 13\n(13) + (158/13) = 327/13, left: 327/13\n(12) - (2/13) = 154/13, left: 154/13, 13\n(12) * (2/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (12 * (2 / 13)))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 12, 13\n(13) / (2/13) = 169/2, left: 169/2, 12\n(2/13) - (13) = -167/13, left: -167/13, 12\n(12) + (-167/13) = -11/13, left: -11/13\n(13) * (2/13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 * (2 / 13)))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 12, 13\n(13) + (2/13) = 171/13, left: 171/13, 12\n(13) - (2/13) = 167/13, left: 167/13, 12\n(167/13) - (12) = 11/13, left: 11/13\n(13) / (2/13) = 169/2, left: 169/2, 12\n(2/13) - (13) = -167/13, left: -167/13, 12\n(12) + (-167/13) = -11/13, left: -11/13\n(12) * (-167/13) = -2004/13, left: -2004/13\n(13) * (2/13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 * (2 / 13)))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 13, 12\n(13) * (12) = 156, left: 156, 2/13\n(156) / (2/13) = 1014, left: 1014\n(2/13) - (156) = -2026/13, left: -2026/13\n(2/13) * (156) = 24, left: 24\nreach 24! expression: ((2 / 13) * (13 * 12))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 13, 12\n(12) + (2/13) = 158/13, left: 158/13, 13\n(13) - (158/13) = 11/13, left: 11/13\n(12) / (2/13) = 78, left: 78, 13\n(78) - (13) = 65, left: 65\n(2/13) / (12) = 1/78, left: 1/78, 13\n(1/78) / (13) = 1/1014, left: 1/1014\n(1/78) - (13) = -1013/78, left: -1013/78\n(12) * (2/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (12 * (2 / 13)))"}, {"input": "13 12 2 13\n", "output": "(12) / (13) = 12/13, left: 12/13, 2, 13\n(12/13) / (2) = 6/13, left: 6/13, 13\n(6/13) / (13) = 6/169, left: 6/169\n(2) - (12/13) = 14/13, left: 14/13, 13\n(12/13) - (2) = -14/13, left: -14/13, 13\n(-14/13) / (13) = -14/169, left: -14/169\n(2) / (12/13) = 13/6, left: 13/6, 13\n(13) / (13/6) = 6, left: 6\n(2) * (12/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (2 * (12 / 13)))"}, {"input": "13 12 2 13\n", "output": "(13) * (2) = 26, left: 26, 12, 13\n(12) / (13) = 12/13, left: 12/13, 26\n(12/13) / (26) = 6/169, left: 6/169\n(26) / (12/13) = 169/6, left: 169/6\n(26) - (12/13) = 326/13, left: 326/13\n(26) + (12/13) = 350/13, left: 350/13\n(12/13) - (26) = -326/13, left: -326/13\n(26) * (12/13) = 24, left: 24\nreach 24! expression: ((13 * 2) * (12 / 13))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 13, 12\n(13) * (12) = 156, left: 156, 2/13\n(156) / (2/13) = 1014, left: 1014\n(2/13) - (156) = -2026/13, left: -2026/13\n(2/13) * (156) = 24, left: 24\nreach 24! expression: ((2 / 13) * (13 * 12))"}, {"input": "13 12 2 13\n", "output": "(13) * (2) = 26, left: 26, 12, 13\n(12) / (13) = 12/13, left: 12/13, 26\n(12/13) / (26) = 6/169, left: 6/169\n(26) / (12/13) = 169/6, left: 169/6\n(26) - (12/13) = 326/13, left: 326/13\n(26) + (12/13) = 350/13, left: 350/13\n(12/13) - (26) = -326/13, left: -326/13\n(26) * (12/13) = 24, left: 24\nreach 24! expression: ((13 * 2) * (12 / 13))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 13, 12\n(13) * (12) = 156, left: 156, 2/13\n(156) / (2/13) = 1014, left: 1014\n(2/13) - (156) = -2026/13, left: -2026/13\n(2/13) * (156) = 24, left: 24\nreach 24! expression: ((2 / 13) * (13 * 12))"}, {"input": "13 12 2 13\n", "output": "(13) * (2) = 26, left: 26, 12, 13\n(12) / (13) = 12/13, left: 12/13, 26\n(12/13) / (26) = 6/169, left: 6/169\n(26) / (12/13) = 169/6, left: 169/6\n(26) - (12/13) = 326/13, left: 326/13\n(26) + (12/13) = 350/13, left: 350/13\n(12/13) - (26) = -326/13, left: -326/13\n(26) * (12/13) = 24, left: 24\nreach 24! expression: ((13 * 2) * (12 / 13))"}, {"input": "13 13 6 4\n", "output": "(13) / (6) = 13/6, left: 13/6, 13, 4\n(4) / (13/6) = 24/13, left: 24/13, 13\n(13) / (24/13) = 169/24, left: 169/24\n(13) - (24/13) = 145/13, left: 145/13\n(24/13) - (13) = -145/13, left: -145/13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (4 / (13 / 6)))"}, {"input": "13 13 6 4\n", "output": "(6) - (4) = 2, left: 2, 13, 13\n(13) - (13) = 0, left: 0, 2\n(0) - (2) = -2, left: -2\n(13) + (13) = 26, left: 26, 2\n(26) / (2) = 13, left: 13\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + 13) - (6 - 4))"}, {"input": "13 13 6 4\n", "output": "(4) - (6) = -2, left: -2, 13, 13\n(13) * (-2) = -26, left: -26, 13\n(13) / (-26) = -1/2, left: -1/2\n(13) * (-26) = -338, left: -338\n(13) + (-2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (13 + (4 - 6)))"}, {"input": "13 13 6 4\n", "output": "(13) + (6) = 19, left: 19, 13, 4\n(13) - (19) = -6, left: -6, 4\n(-6) - (4) = -10, left: -10\n(13) * (19) = 247, left: 247, 4\n(19) - (13) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((13 + 6) - 13))"}, {"input": "13 13 6 4\n", "output": "(13) - (6) = 7, left: 7, 13, 4\n(13) / (7) = 13/7, left: 13/7, 4\n(4) / (13/7) = 28/13, left: 28/13\n(7) / (13) = 7/13, left: 7/13, 4\n(13) - (7) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (13 - (13 - 6)))"}, {"input": "13 13 6 4\n", "output": "(13) / (6) = 13/6, left: 13/6, 13, 4\n(4) / (13/6) = 24/13, left: 24/13, 13\n(13) / (24/13) = 169/24, left: 169/24\n(13) - (24/13) = 145/13, left: 145/13\n(24/13) - (13) = -145/13, left: -145/13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (4 / (13 / 6)))"}, {"input": "13 13 6 4\n", "output": "(13) + (6) = 19, left: 19, 13, 4\n(13) - (19) = -6, left: -6, 4\n(13) * (19) = 247, left: 247, 4\n(13) + (19) = 32, left: 32, 4\n(4) + (32) = 36, left: 36\n(32) / (4) = 8, left: 8\n(13) / (19) = 13/19, left: 13/19, 4\n(13/19) / (4) = 13/76, left: 13/76\n(19) - (13) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((13 + 6) - 13))"}, {"input": "13 13 6 4\n", "output": "(6) - (4) = 2, left: 2, 13, 13\n(13) - (13) = 0, left: 0, 2\n(2) * (0) = 0, left: 0\n(0) / (2) = 0, left: 0\n(2) + (0) = 2, left: 2\n(13) + (13) = 26, left: 26, 2\n(2) * (26) = 52, left: 52\n(26) / (2) = 13, left: 13\n(2) + (26) = 28, left: 28\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + 13) - (6 - 4))"}, {"input": "13 13 6 4\n", "output": "(13) - (6) = 7, left: 7, 13, 4\n(13) / (7) = 13/7, left: 13/7, 4\n(13/7) - (4) = -15/7, left: -15/7\n(4) / (13/7) = 28/13, left: 28/13\n(7) / (13) = 7/13, left: 7/13, 4\n(4) / (7/13) = 52/7, left: 52/7\n(4) - (7/13) = 45/13, left: 45/13\n(7/13) - (4) = -45/13, left: -45/13\n(13) - (7) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (13 - (13 - 6)))"}, {"input": "13 13 6 4\n", "output": "(4) - (6) = -2, left: -2, 13, 13\n(13) * (-2) = -26, left: -26, 13\n(13) - (-26) = 39, left: 39\n(-26) - (13) = -39, left: -39\n(13) / (-26) = -1/2, left: -1/2\n(13) * (-26) = -338, left: -338\n(13) + (-2) = 11, left: 11, 13\n(13) - (11) = 2, left: 2\n(13) * (11) = 143, left: 143\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (13 + (4 - 6)))"}, {"input": "13 13 6 4\n", "output": "(13) / (6) = 13/6, left: 13/6, 13, 4\n(4) / (13/6) = 24/13, left: 24/13, 13\n(13) / (24/13) = 169/24, left: 169/24\n(13) - (24/13) = 145/13, left: 145/13\n(24/13) - (13) = -145/13, left: -145/13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (4 / (13 / 6)))"}, {"input": "13 13 6 4\n", "output": "(4) - (6) = -2, left: -2, 13, 13\n(13) * (-2) = -26, left: -26, 13\n(13) + (-26) = -13, left: -13\n(13) - (-26) = 39, left: 39\n(-26) - (13) = -39, left: -39\n(13) / (-26) = -1/2, left: -1/2\n(13) * (-26) = -338, left: -338\n(-26) / (13) = -2, left: -2\n(13) + (-2) = 11, left: 11, 13\n(13) - (11) = 2, left: 2\n(13) * (11) = 143, left: 143\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (13 + (4 - 6)))"}, {"input": "13 13 6 4\n", "output": "(13) / (6) = 13/6, left: 13/6, 13, 4\n(4) / (13/6) = 24/13, left: 24/13, 13\n(13) / (24/13) = 169/24, left: 169/24\n(13) - (24/13) = 145/13, left: 145/13\n(24/13) - (13) = -145/13, left: -145/13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (4 / (13 / 6)))"}, {"input": "13 13 6 4\n", "output": "(4) - (6) = -2, left: -2, 13, 13\n(13) * (-2) = -26, left: -26, 13\n(13) + (-26) = -13, left: -13\n(13) - (-26) = 39, left: 39\n(-26) - (13) = -39, left: -39\n(13) / (-26) = -1/2, left: -1/2\n(13) * (-26) = -338, left: -338\n(-26) / (13) = -2, left: -2\n(13) + (-2) = 11, left: 11, 13\n(13) - (11) = 2, left: 2\n(13) * (11) = 143, left: 143\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (13 + (4 - 6)))"}, {"input": "11 5 2 4\n", "output": "(4) / (5) = 4/5, left: 4/5, 11, 2\n(11) + (4/5) = 59/5, left: 59/5, 2\n(5) / (4) = 5/4, left: 5/4, 11, 2\n(5) * (4) = 20, left: 20, 11, 2\n(2) / (11) = 2/11, left: 2/11, 20\n(11) / (20) = 11/20, left: 11/20, 2\n(2) - (11/20) = 29/20, left: 29/20\n(5) - (4) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (5 - 4)))"}, {"input": "11 5 2 4\n", "output": "(5) / (4) = 5/4, left: 5/4, 11, 2\n(5/4) - (11) = -39/4, left: -39/4, 2\n(2) + (5/4) = 13/4, left: 13/4, 11\n(5) * (4) = 20, left: 20, 11, 2\n(2) - (11) = -9, left: -9, 20\n(11) - (2) = 9, left: 9, 20\n(9) - (20) = -11, left: -11\n(4) - (5) = -1, left: -1, 11, 2\n(11) - (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 - (4 - 5)))"}, {"input": "11 5 2 4\n", "output": "(5) / (4) = 5/4, left: 5/4, 11, 2\n(11) + (5/4) = 49/4, left: 49/4, 2\n(5) * (4) = 20, left: 20, 11, 2\n(2) - (20) = -18, left: -18, 11\n(2) / (20) = 1/10, left: 1/10, 11\n(11) * (1/10) = 11/10, left: 11/10\n(5) - (4) = 1, left: 1, 11, 2\n(1) / (11) = 1/11, left: 1/11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (5 - 4)))"}, {"input": "11 5 2 4\n", "output": "(4) / (11) = 4/11, left: 4/11, 5, 2\n(5) / (4/11) = 55/4, left: 55/4, 2\n(2) - (55/4) = -47/4, left: -47/4\n(11) + (4) = 15, left: 15, 5, 2\n(2) / (15) = 2/15, left: 2/15, 5\n(5) * (2/15) = 2/3, left: 2/3\n(4) - (11) = -7, left: -7, 5, 2\n(2) + (-7) = -5, left: -5, 5\n(5) - (-7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (5 - (4 - 11)))"}, {"input": "11 5 2 4\n", "output": "(5) - (11) = -6, left: -6, 2, 4\n(2) + (-6) = -4, left: -4, 4\n(2) - (-6) = 8, left: 8, 4\n(4) - (-6) = 10, left: 10, 2\n(4) / (-6) = -2/3, left: -2/3, 2\n(2) * (4) = 8, left: 8, -6\n(-6) / (8) = -3/4, left: -3/4\n(11) + (5) = 16, left: 16, 2, 4\n(16) - (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 5) - 4))"}, {"input": "1 2 10 3\n", "output": "(1) + (3) = 4, left: 4, 2, 10\n(10) - (2) = 8, left: 8, 4\n(2) + (10) = 12, left: 12, 4\n(12) - (4) = 8, left: 8\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((1 + 3) + (2 * 10))"}, {"input": "1 2 10 3\n", "output": "(1) * (3) = 3, left: 3, 2, 10\n(2) + (3) = 5, left: 5, 10\n(2) / (10) = 1/5, left: 1/5, 3\n(3) * (1/5) = 3/5, left: 3/5\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((1 * 3) * (10 - 2))"}, {"input": "1 2 10 3\n", "output": "(1) * (3) = 3, left: 3, 2, 10\n(2) + (3) = 5, left: 5, 10\n(2) - (3) = -1, left: -1, 10\n(3) / (2) = 3/2, left: 3/2, 10\n(2) * (3) = 6, left: 6, 10\n(10) * (6) = 60, left: 60\n(10) - (6) = 4, left: 4\n(2) * (10) = 20, left: 20, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((1 * 3) * (10 - 2))"}, {"input": "1 2 10 3\n", "output": "(2) - (3) = -1, left: -1, 1, 10\n(10) * (-1) = -10, left: -10, 1\n(-10) / (1) = -10, left: -10\n(1) * (10) = 10, left: 10, -1\n(2) + (3) = 5, left: 5, 1, 10\n(3) - (2) = 1, left: 1, 1, 10\n(2) / (3) = 2/3, left: 2/3, 1, 10\n(2) * (10) = 20, left: 20, 1, 3\n(1) + (3) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((2 * 10) + (1 + 3))"}, {"input": "1 2 10 3\n", "output": "(2) - (1) = 1, left: 1, 10, 3\n(10) * (1) = 10, left: 10, 3\n(3) - (1) = 2, left: 2, 10\n(3) - (10) = -7, left: -7, 1\n(1) / (2) = 1/2, left: 1/2, 10, 3\n(1) * (2) = 2, left: 2, 10, 3\n(2) / (3) = 2/3, left: 2/3, 10\n(10) - (2) = 8, left: 8, 3\n(3) - (8) = -5, left: -5\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (1 * 2)))"}, {"input": "1 2 10 3\n", "output": "(1) - (2) = -1, left: -1, 10, 3\n(3) - (10) = -7, left: -7, -1\n(10) * (-1) = -10, left: -10, 3\n(2) / (1) = 2, left: 2, 10, 3\n(10) - (3) = 7, left: 7, 2\n(10) + (3) = 13, left: 13, 2\n(2) / (3) = 2/3, left: 2/3, 10\n(2) - (10) = -8, left: -8, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (2 / 1)))"}, {"input": "1 2 10 3\n", "output": "(1) + (3) = 4, left: 4, 2, 10\n(2) - (10) = -8, left: -8, 4\n(4) - (-8) = 12, left: 12\n(-8) / (4) = -2, left: -2\n(10) / (2) = 5, left: 5, 4\n(4) / (5) = 4/5, left: 4/5\n(2) / (10) = 1/5, left: 1/5, 4\n(2) + (10) = 12, left: 12, 4\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((1 + 3) + (2 * 10))"}, {"input": "6 2 3 6\n", "output": "(2) + (3) = 5, left: 5, 6, 6\n(5) / (6) = 5/6, left: 5/6, 6\n(6) / (5) = 6/5, left: 6/5, 6\n(6/5) - (6) = -24/5, left: -24/5\n(6) + (5) = 11, left: 11, 6\n(6) * (11) = 66, left: 66\n(11) - (6) = 5, left: 5\n(11) / (6) = 11/6, left: 11/6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (2 + 3)) - 6)"}, {"input": "6 2 3 6\n", "output": "(2) / (6) = 1/3, left: 1/3, 6, 3\n(3) - (1/3) = 8/3, left: 8/3, 6\n(6) + (1/3) = 19/3, left: 19/3, 3\n(6) / (2) = 3, left: 3, 6, 3\n(6) * (3) = 18, left: 18, 3\n(6) - (2) = 4, left: 4, 6, 3\n(3) * (4) = 12, left: 12, 6\n(2) * (6) = 12, left: 12, 6, 3\n(3) / (12) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (3 / (2 * 6)))"}, {"input": "6 2 3 6\n", "output": "(6) - (3) = 3, left: 3, 2, 6\n(3) / (2) = 3/2, left: 3/2, 6\n(2) - (3) = -1, left: -1, 6\n(2) * (3) = 6, left: 6, 6\n(2) + (3) = 5, left: 5, 6\n(6) - (5) = 1, left: 1\n(6) - (2) = 4, left: 4, 3\n(6) / (2) = 3, left: 3, 3\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (2 + 6))"}, {"input": "6 2 3 6\n", "output": "(6) * (3) = 18, left: 18, 2, 6\n(2) - (18) = -16, left: -16, 6\n(2) - (6) = -4, left: -4, 18\n(2) * (6) = 12, left: 12, 18\n(6) - (2) = 4, left: 4, 18\n(18) - (4) = 14, left: 14\n(18) / (4) = 9/2, left: 9/2\n(6) - (18) = -12, left: -12, 2\n(18) - (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((6 * 3) - 6))"}, {"input": "6 2 3 6\n", "output": "(3) - (6) = -3, left: -3, 2, 6\n(6) / (-3) = -2, left: -2, 2\n(6) + (-3) = 3, left: 3, 2\n(2) / (3) = 2/3, left: 2/3\n(2) * (-3) = -6, left: -6, 6\n(2) + (-3) = -1, left: -1, 6\n(2) / (6) = 1/3, left: 1/3, -3\n(6) / (3) = 2, left: 2, 2, 6\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 / 3) * (2 * 6))"}, {"input": "9 13 10 5\n", "output": "(9) / (13) = 9/13, left: 9/13, 10, 5\n(10) * (5) = 50, left: 50, 9/13\n(13) / (9) = 13/9, left: 13/9, 10, 5\n(9) + (13) = 22, left: 22, 10, 5\n(10) / (5) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((9 + 13) + (10 / 5))"}, {"input": "9 13 10 5\n", "output": "(5) - (13) = -8, left: -8, 9, 10\n(-8) - (9) = -17, left: -17, 10\n(13) / (5) = 13/5, left: 13/5, 9, 10\n(9) - (10) = -1, left: -1, 13/5\n(13) - (5) = 8, left: 8, 9, 10\n(9) * (5) = 45, left: 45, 13, 10\n(5) - (9) = -4, left: -4, 13, 10\n(10) / (5) = 2, left: 2, 9, 13\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((10 / 5) + (9 + 13))"}, {"input": "9 13 10 5\n", "output": "(13) / (5) = 13/5, left: 13/5, 9, 10\n(5) - (13) = -8, left: -8, 9, 10\n(9) / (10) = 9/10, left: 9/10, 13, 5\n(5) - (9) = -4, left: -4, 13, 10\n(9) - (5) = 4, left: 4, 13, 10\n(9) / (5) = 9/5, left: 9/5, 13, 10\n(10) * (9/5) = 18, left: 18, 13\n(13) - (10) = 3, left: 3, 9, 5\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (13 - 10)))"}, {"input": "9 13 10 5\n", "output": "(9) + (5) = 14, left: 14, 13, 10\n(9) - (5) = 4, left: 4, 13, 10\n(5) - (9) = -4, left: -4, 13, 10\n(-4) / (10) = -2/5, left: -2/5, 13\n(9) / (10) = 9/10, left: 9/10, 13, 5\n(9) * (10) = 90, left: 90, 13, 5\n(10) - (9) = 1, left: 1, 13, 5\n(9) + (13) = 22, left: 22, 10, 5\n(10) / (5) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((9 + 13) + (10 / 5))"}, {"input": "9 13 10 5\n", "output": "(9) - (5) = 4, left: 4, 13, 10\n(10) - (4) = 6, left: 6, 13\n(5) - (9) = -4, left: -4, 13, 10\n(10) + (-4) = 6, left: 6, 13\n(10) / (13) = 10/13, left: 10/13, 9, 5\n(5) - (9) = -4, left: -4, 10/13\n(13) + (10) = 23, left: 23, 9, 5\n(10) - (13) = -3, left: -3, 9, 5\n(5) * (-3) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 * (10 - 13)))"}, {"input": "9 13 10 5\n", "output": "(13) / (9) = 13/9, left: 13/9, 10, 5\n(5) / (13/9) = 45/13, left: 45/13, 10\n(13) - (9) = 4, left: 4, 10, 5\n(9) - (13) = -4, left: -4, 10, 5\n(-4) - (10) = -14, left: -14, 5\n(5) - (-14) = 19, left: 19\n(10) - (-4) = 14, left: 14, 5\n(9) + (13) = 22, left: 22, 10, 5\n(10) / (5) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((9 + 13) + (10 / 5))"}, {"input": "4 1 4 9\n", "output": "(4) * (9) = 36, left: 36, 1, 4\n(1) - (36) = -35, left: -35, 4\n(1) + (4) = 5, left: 5, 36\n(9) / (4) = 9/4, left: 9/4, 1, 4\n(4) + (9) = 13, left: 13, 1, 4\n(13) / (1) = 13, left: 13, 4\n(4) - (9) = -5, left: -5, 1, 4\n(4) - (-5) = 9, left: 9, 1\n(1) - (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 - (4 - 9)))"}, {"input": "4 1 4 9\n", "output": "(1) - (4) = -3, left: -3, 4, 9\n(4) - (9) = -5, left: -5, -3\n(4) + (9) = 13, left: 13, -3\n(13) / (-3) = -13/3, left: -13/3\n(9) - (4) = 5, left: 5, -3\n(9) - (-3) = 12, left: 12, 4\n(-3) / (9) = -1/3, left: -1/3, 4\n(-1/3) / (4) = -1/12, left: -1/12\n(9) + (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 + (1 - 4)))"}, {"input": "4 1 4 9\n", "output": "(4) * (9) = 36, left: 36, 1, 4\n(4) / (1) = 4, left: 4, 36\n(4) / (36) = 1/9, left: 1/9\n(36) - (4) = 32, left: 32, 1\n(4) + (36) = 40, left: 40, 1\n(4) - (9) = -5, left: -5, 1, 4\n(4) / (-5) = -4/5, left: -4/5, 1\n(4) + (-5) = -1, left: -1, 1\n(1) - (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 - (4 - 9)))"}, {"input": "4 1 4 9\n", "output": "(4) - (1) = 3, left: 3, 4, 9\n(4) * (3) = 12, left: 12, 9\n(12) - (9) = 3, left: 3\n(3) / (4) = 3/4, left: 3/4, 9\n(9) / (3) = 3, left: 3, 4\n(9) * (3) = 27, left: 27, 4\n(4) * (27) = 108, left: 108\n(9) - (3) = 6, left: 6, 4\n(4) - (6) = -2, left: -2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (4 - 1)))"}, {"input": "4 1 4 9\n", "output": "(9) / (4) = 9/4, left: 9/4, 1, 4\n(9/4) - (1) = 5/4, left: 5/4, 4\n(9/4) / (1) = 9/4, left: 9/4, 4\n(4) + (9/4) = 25/4, left: 25/4\n(4) / (9) = 4/9, left: 4/9, 1, 4\n(4) + (9) = 13, left: 13, 1, 4\n(13) / (4) = 13/4, left: 13/4, 1\n(4) - (9) = -5, left: -5, 1, 4\n(1) - (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 - (4 - 9)))"}, {"input": "4 1 4 9\n", "output": "(4) - (1) = 3, left: 3, 4, 9\n(4) / (3) = 4/3, left: 4/3, 9\n(4) - (3) = 1, left: 1, 9\n(3) - (4) = -1, left: -1, 9\n(4) * (3) = 12, left: 12, 9\n(9) * (12) = 108, left: 108\n(9) - (12) = -3, left: -3\n(4) + (3) = 7, left: 7, 9\n(9) + (7) = 16, left: 16\n(9) / (3) = 3, left: 3, 4\n(4) * (3) = 12, left: 12\n(9) * (3) = 27, left: 27, 4\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (4 - 1)))"}, {"input": "1 4 4 3\n", "output": "(1) + (4) = 5, left: 5, 4, 3\n(5) / (3) = 5/3, left: 5/3, 4\n(4) * (3) = 12, left: 12, 5\n(5) / (12) = 5/12, left: 5/12\n(4) + (3) = 7, left: 7, 5\n(4) / (1) = 4, left: 4, 4, 3\n(4) / (4) = 1, left: 1, 3\n(1) / (3) = 1/3, left: 1/3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (4 / 1)))"}, {"input": "1 4 4 3\n", "output": "(4) / (4) = 1, left: 1, 1, 3\n(1) - (3) = -2, left: -2, 1\n(1) + (3) = 4, left: 4, 1\n(1) + (1) = 2, left: 2, 3\n(2) - (3) = -1, left: -1\n(4) - (4) = 0, left: 0, 1, 3\n(1) * (0) = 0, left: 0, 3\n(4) + (4) = 8, left: 8, 1, 3\n(3) * (8) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * (4 + 4)) / 1)"}, {"input": "1 4 4 3\n", "output": "(3) - (4) = -1, left: -1, 1, 4\n(4) - (-1) = 5, left: 5, 1\n(4) - (1) = 3, left: 3, -1\n(4) - (3) = 1, left: 1, 1, 4\n(1) - (1) = 0, left: 0, 4\n(4) * (3) = 12, left: 12, 1, 4\n(3) / (4) = 3/4, left: 3/4, 1, 4\n(4) + (3) = 7, left: 7, 1, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((4 + 3) - 1))"}, {"input": "1 4 4 3\n", "output": "(1) * (3) = 3, left: 3, 4, 4\n(4) - (4) = 0, left: 0, 3\n(0) / (3) = 0, left: 0\n(4) / (4) = 1, left: 1, 3\n(3) / (1) = 3, left: 3\n(4) / (4) = 1, left: 1, 3\n(1) / (3) = 1/3, left: 1/3\n(4) * (4) = 16, left: 16, 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((1 * 3) * (4 + 4))"}, {"input": "1 4 4 3\n", "output": "(4) + (3) = 7, left: 7, 1, 4\n(4) - (1) = 3, left: 3, 7\n(7) * (3) = 21, left: 21\n(1) / (4) = 1/4, left: 1/4, 7\n(1) * (4) = 4, left: 4, 7\n(1) - (4) = -3, left: -3, 7\n(1) + (7) = 8, left: 8, 4\n(8) - (4) = 4, left: 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((4 + 3) - 1))"}, {"input": "1 4 4 3\n", "output": "(3) - (4) = -1, left: -1, 1, 4\n(4) - (3) = 1, left: 1, 1, 4\n(1) / (1) = 1, left: 1, 4\n(4) + (1) = 5, left: 5\n(1) - (1) = 0, left: 0, 4\n(4) * (1) = 4, left: 4, 1\n(4) / (1) = 4, left: 4, 1\n(1) + (4) = 5, left: 5, 1\n(4) * (3) = 12, left: 12, 1, 4\n(1) * (4) = 4, left: 4, 12\n(3) / (4) = 3/4, left: 3/4, 1, 4\n(4) + (3) = 7, left: 7, 1, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((4 + 3) - 1))"}, {"input": "1 4 4 3\n", "output": "(4) / (4) = 1, left: 1, 1, 3\n(1) - (3) = -2, left: -2, 1\n(1) / (3) = 1/3, left: 1/3, 1\n(3) - (1) = 2, left: 2, 1\n(1) + (3) = 4, left: 4, 1\n(1) / (4) = 1/4, left: 1/4\n(4) - (4) = 0, left: 0, 1, 3\n(0) / (1) = 0, left: 0, 3\n(0) - (3) = -3, left: -3\n(4) + (4) = 8, left: 8, 1, 3\n(3) + (8) = 11, left: 11, 1\n(1) - (11) = -10, left: -10\n(3) * (8) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * (4 + 4)) / 1)"}, {"input": "8 1 5 6\n", "output": "(8) * (6) = 48, left: 48, 1, 5\n(1) + (48) = 49, left: 49, 5\n(8) / (6) = 4/3, left: 4/3, 1, 5\n(6) - (8) = -2, left: -2, 1, 5\n(8) - (6) = 2, left: 2, 1, 5\n(5) / (2) = 5/2, left: 5/2, 1\n(8) + (5) = 13, left: 13, 1, 6\n(5) - (8) = -3, left: -3, 1, 6\n(1) - (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 - (5 - 8)))"}, {"input": "8 1 5 6\n", "output": "(5) + (6) = 11, left: 11, 8, 1\n(6) - (5) = 1, left: 1, 8, 1\n(1) - (1) = 0, left: 0, 8\n(8) * (0) = 0, left: 0\n(6) / (5) = 6/5, left: 6/5, 8, 1\n(8) + (5) = 13, left: 13, 1, 6\n(1) / (6) = 1/6, left: 1/6, 13\n(5) - (8) = -3, left: -3, 1, 6\n(1) - (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 - (5 - 8)))"}, {"input": "8 1 5 6\n", "output": "(1) / (8) = 1/8, left: 1/8, 5, 6\n(5) * (1/8) = 5/8, left: 5/8, 6\n(6) + (5/8) = 53/8, left: 53/8\n(1) - (8) = -7, left: -7, 5, 6\n(5) + (6) = 11, left: 11, -7\n(6) - (-7) = 13, left: 13, 5\n(8) * (1) = 8, left: 8, 5, 6\n(8) + (1) = 9, left: 9, 5, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((8 + 1) - 5))"}, {"input": "8 1 5 6\n", "output": "(1) - (5) = -4, left: -4, 8, 6\n(6) + (-4) = 2, left: 2, 8\n(8) - (2) = 6, left: 6\n(6) - (-4) = 10, left: 10, 8\n(6) * (-4) = -24, left: -24, 8\n(-4) / (6) = -2/3, left: -2/3, 8\n(-4) - (8) = -12, left: -12, 6\n(8) / (-4) = -2, left: -2, 6\n(8) + (-4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 + (1 - 5)))"}, {"input": "8 1 5 6\n", "output": "(5) / (1) = 5, left: 5, 8, 6\n(8) - (5) = 3, left: 3, 6\n(8) * (5) = 40, left: 40, 6\n(6) * (5) = 30, left: 30, 8\n(6) / (5) = 6/5, left: 6/5, 8\n(6) / (8) = 3/4, left: 3/4, 5\n(8) * (6) = 48, left: 48, 5\n(5) - (1) = 4, left: 4, 8, 6\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 - (5 - 1)))"}, {"input": "8 1 5 6\n", "output": "(1) / (8) = 1/8, left: 1/8, 5, 6\n(8) / (1) = 8, left: 8, 5, 6\n(6) * (8) = 48, left: 48, 5\n(5) / (6) = 5/6, left: 5/6, 8\n(1) - (8) = -7, left: -7, 5, 6\n(5) / (6) = 5/6, left: 5/6, -7\n(5/6) - (-7) = 47/6, left: 47/6\n(5) - (-7) = 12, left: 12, 6\n(8) * (1) = 8, left: 8, 5, 6\n(6) / (8) = 3/4, left: 3/4, 5\n(5) / (6) = 5/6, left: 5/6, 8\n(8) + (1) = 9, left: 9, 5, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((8 + 1) - 5))"}, {"input": "8 1 5 6\n", "output": "(6) / (8) = 3/4, left: 3/4, 1, 5\n(3/4) / (1) = 3/4, left: 3/4, 5\n(3/4) / (5) = 3/20, left: 3/20\n(8) / (6) = 4/3, left: 4/3, 1, 5\n(1) * (4/3) = 4/3, left: 4/3, 5\n(8) + (6) = 14, left: 14, 1, 5\n(5) * (14) = 70, left: 70, 1\n(8) - (6) = 2, left: 2, 1, 5\n(5) / (1) = 5, left: 5, 2\n(8) + (5) = 13, left: 13, 1, 6\n(5) / (8) = 5/8, left: 5/8, 1, 6\n(5) - (8) = -3, left: -3, 1, 6\n(1) - (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 - (5 - 8)))"}, {"input": "8 1 5 6\n", "output": "(5) * (6) = 30, left: 30, 8, 1\n(1) / (8) = 1/8, left: 1/8, 30\n(5) + (6) = 11, left: 11, 8, 1\n(8) - (1) = 7, left: 7, 11\n(6) - (5) = 1, left: 1, 8, 1\n(8) / (1) = 8, left: 8, 1\n(8) * (5) = 40, left: 40, 1, 6\n(1) / (40) = 1/40, left: 1/40, 6\n(5) / (8) = 5/8, left: 5/8, 1, 6\n(8) / (5) = 8/5, left: 8/5, 1, 6\n(6) / (8/5) = 15/4, left: 15/4, 1\n(5) - (8) = -3, left: -3, 1, 6\n(1) - (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 - (5 - 8)))"}, {"input": "9 9 4 10\n", "output": "(9) - (4) = 5, left: 5, 9, 10\n(9) - (10) = -1, left: -1, 5\n(5) * (-1) = -5, left: -5\n(10) / (9) = 10/9, left: 10/9, 5\n(9) + (10) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((9 - 4) + (9 + 10))"}, {"input": "9 9 4 10\n", "output": "(9) / (10) = 9/10, left: 9/10, 9, 4\n(4) - (9) = -5, left: -5, 9/10\n(9/10) - (-5) = 59/10, left: 59/10\n(9) + (10) = 19, left: 19, 9, 4\n(9) + (19) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((9 + (9 + 10)) - 4)"}, {"input": "9 9 4 10\n", "output": "(10) / (4) = 5/2, left: 5/2, 9, 9\n(9) + (9) = 18, left: 18, 5/2\n(5/2) / (9) = 5/18, left: 5/18, 9\n(4) - (10) = -6, left: -6, 9, 9\n(-6) - (9) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - ((4 - 10) - 9))"}, {"input": "9 9 4 10\n", "output": "(9) / (4) = 9/4, left: 9/4, 9, 10\n(9) * (10) = 90, left: 90, 9/4\n(9) / (10) = 9/10, left: 9/10, 9/4\n(9) + (4) = 13, left: 13, 9, 10\n(9) / (10) = 9/10, left: 9/10, 13\n(9) * (10) = 90, left: 90, 13\n(4) - (9) = -5, left: -5, 9, 10\n(9) - (10) = -1, left: -1, -5\n(9) + (10) = 19, left: 19, -5\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((9 + 10) - (4 - 9))"}, {"input": "9 9 4 10\n", "output": "(9) / (10) = 9/10, left: 9/10, 9, 4\n(9/10) / (4) = 9/40, left: 9/40, 9\n(9) - (4) = 5, left: 5, 9/10\n(9/10) + (5) = 59/10, left: 59/10\n(9) * (4) = 36, left: 36, 9/10\n(36) - (9/10) = 351/10, left: 351/10\n(9) + (10) = 19, left: 19, 9, 4\n(19) - (9) = 10, left: 10, 4\n(9) + (19) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((9 + (9 + 10)) - 4)"}, {"input": "9 9 4 10\n", "output": "(10) / (9) = 10/9, left: 10/9, 9, 4\n(4) + (10/9) = 46/9, left: 46/9, 9\n(9) / (10) = 9/10, left: 9/10, 9, 4\n(10) - (9) = 1, left: 1, 9, 4\n(9) - (4) = 5, left: 5, 1\n(9) / (4) = 9/4, left: 9/4, 1\n(9) - (10) = -1, left: -1, 9, 4\n(9) + (10) = 19, left: 19, 9, 4\n(4) - (9) = -5, left: -5, 19\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((9 + 10) - (4 - 9))"}, {"input": "9 9 4 10\n", "output": "(10) / (4) = 5/2, left: 5/2, 9, 9\n(9) * (5/2) = 45/2, left: 45/2, 9\n(9) + (5/2) = 23/2, left: 23/2, 9\n(9) - (9) = 0, left: 0, 5/2\n(9) / (9) = 1, left: 1, 5/2\n(5/2) / (9) = 5/18, left: 5/18, 9\n(9) / (5/18) = 162/5, left: 162/5\n(4) - (10) = -6, left: -6, 9, 9\n(-6) - (9) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - ((4 - 10) - 9))"}, {"input": "9 9 4 10\n", "output": "(9) - (4) = 5, left: 5, 9, 10\n(9) - (10) = -1, left: -1, 5\n(5) - (-1) = 6, left: 6\n(5) + (-1) = 4, left: 4\n(9) * (10) = 90, left: 90, 5\n(5) * (90) = 450, left: 450\n(9) / (10) = 9/10, left: 9/10, 5\n(5) - (9/10) = 41/10, left: 41/10\n(9) + (10) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((9 - 4) + (9 + 10))"}, {"input": "5 5 8 10\n", "output": "(5) / (5) = 1, left: 1, 8, 10\n(8) + (10) = 18, left: 18, 1\n(1) * (18) = 18, left: 18\n(5) / (8) = 5/8, left: 5/8, 5, 10\n(5) + (10) = 15, left: 15, 5/8\n(15) / (5/8) = 24, left: 24\nreach 24! expression: ((5 + 10) / (5 / 8))"}, {"input": "5 5 8 10\n", "output": "(5) * (8) = 40, left: 40, 5, 10\n(5) * (40) = 200, left: 200, 10\n(10) - (200) = -190, left: -190\n(8) / (5) = 8/5, left: 8/5, 5, 10\n(5) + (10) = 15, left: 15, 8/5\n(8/5) * (15) = 24, left: 24\nreach 24! expression: ((8 / 5) * (5 + 10))"}, {"input": "5 5 8 10\n", "output": "(5) * (8) = 40, left: 40, 5, 10\n(5) - (40) = -35, left: -35, 10\n(5) - (10) = -5, left: -5, 40\n(10) - (40) = -30, left: -30, 5\n(-30) - (5) = -35, left: -35\n(8) / (5) = 8/5, left: 8/5, 5, 10\n(5) - (8/5) = 17/5, left: 17/5, 10\n(5) * (8/5) = 8, left: 8, 10\n(5) + (10) = 15, left: 15, 8/5\n(8/5) * (15) = 24, left: 24\nreach 24! expression: ((8 / 5) * (5 + 10))"}, {"input": "5 5 8 10\n", "output": "(8) - (5) = 3, left: 3, 5, 10\n(10) - (3) = 7, left: 7, 5\n(5) / (10) = 1/2, left: 1/2, 3\n(5) + (8) = 13, left: 13, 5, 10\n(13) - (5) = 8, left: 8, 10\n(8) - (10) = -2, left: -2\n(5) / (8) = 5/8, left: 5/8, 5, 10\n(5) * (5/8) = 25/8, left: 25/8, 10\n(5) + (10) = 15, left: 15, 5/8\n(15) / (5/8) = 24, left: 24\nreach 24! expression: ((5 + 10) / (5 / 8))"}, {"input": "5 5 8 10\n", "output": "(5) + (5) = 10, left: 10, 8, 10\n(10) - (10) = 0, left: 0, 8\n(5) / (5) = 1, left: 1, 8, 10\n(5) * (5) = 25, left: 25, 8, 10\n(5) - (5) = 0, left: 0, 8, 10\n(8) / (5) = 8/5, left: 8/5, 5, 10\n(10) * (8/5) = 16, left: 16, 5\n(16) - (5) = 11, left: 11\n(5) + (10) = 15, left: 15, 8/5\n(8/5) * (15) = 24, left: 24\nreach 24! expression: ((8 / 5) * (5 + 10))"}, {"input": "5 5 8 10\n", "output": "(8) / (10) = 4/5, left: 4/5, 5, 5\n(8) + (10) = 18, left: 18, 5, 5\n(5) * (18) = 90, left: 90, 5\n(5) / (90) = 1/18, left: 1/18\n(8) - (10) = -2, left: -2, 5, 5\n(5) / (5) = 1, left: 1, 8, 10\n(8) - (1) = 7, left: 7, 10\n(5) / (8) = 5/8, left: 5/8, 5, 10\n(5) + (10) = 15, left: 15, 5/8\n(15) / (5/8) = 24, left: 24\nreach 24! expression: ((5 + 10) / (5 / 8))"}, {"input": "5 5 8 10\n", "output": "(10) / (5) = 2, left: 2, 5, 8\n(8) - (2) = 6, left: 6, 5\n(5) - (6) = -1, left: -1\n(5) - (8) = -3, left: -3, 2\n(2) * (-3) = -6, left: -6\n(5) / (8) = 5/8, left: 5/8, 2\n(5/8) - (2) = -11/8, left: -11/8\n(8) / (5) = 8/5, left: 8/5, 2\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (10 / 5)))"}, {"input": "5 5 8 10\n", "output": "(8) / (10) = 4/5, left: 4/5, 5, 5\n(8) + (10) = 18, left: 18, 5, 5\n(18) / (5) = 18/5, left: 18/5, 5\n(8) * (10) = 80, left: 80, 5, 5\n(5) / (5) = 1, left: 1, 80\n(5) + (5) = 10, left: 10, 8, 10\n(5) * (5) = 25, left: 25, 8, 10\n(5) - (5) = 0, left: 0, 8, 10\n(5) / (5) = 1, left: 1, 8, 10\n(5) - (5) = 0, left: 0, 8, 10\n(8) + (0) = 8, left: 8, 10\n(5) / (8) = 5/8, left: 5/8, 5, 10\n(5) + (10) = 15, left: 15, 5/8\n(15) / (5/8) = 24, left: 24\nreach 24! expression: ((5 + 10) / (5 / 8))"}, {"input": "13 10 11 11\n", "output": "(13) - (11) = 2, left: 2, 10, 11\n(10) / (11) = 10/11, left: 10/11, 2\n(11) - (13) = -2, left: -2, 10, 11\n(13) + (11) = 24, left: 24, 10, 11\n(11) - (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (11 - 10))"}, {"input": "13 10 11 11\n", "output": "(11) - (11) = 0, left: 0, 13, 10\n(13) / (10) = 13/10, left: 13/10, 0\n(11) / (11) = 1, left: 1, 13, 10\n(10) - (1) = 9, left: 9, 13\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (11 / 11)))"}, {"input": "13 10 11 11\n", "output": "(11) / (13) = 11/13, left: 11/13, 10, 11\n(11) / (10) = 11/10, left: 11/10, 11/13\n(11/13) * (11/10) = 121/130, left: 121/130\n(13) + (11) = 24, left: 24, 10, 11\n(11) - (10) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (11 - 10))"}, {"input": "13 10 11 11\n", "output": "(10) / (11) = 10/11, left: 10/11, 13, 11\n(13) / (10/11) = 143/10, left: 143/10, 11\n(10) - (11) = -1, left: -1, 13, 11\n(11) + (-1) = 10, left: 10, 13\n(11) * (-1) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (11 * (10 - 11)))"}, {"input": "13 10 11 11\n", "output": "(10) / (11) = 10/11, left: 10/11, 13, 11\n(11) + (10/11) = 131/11, left: 131/11, 13\n(10/11) / (11) = 10/121, left: 10/121, 13\n(10) - (11) = -1, left: -1, 13, 11\n(13) - (11) = 2, left: 2, -1\n(-1) - (2) = -3, left: -3\n(13) / (11) = 13/11, left: 13/11, -1\n(13/11) / (-1) = -13/11, left: -13/11\n(11) * (-1) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (11 * (10 - 11)))"}, {"input": "13 10 11 11\n", "output": "(13) * (11) = 143, left: 143, 10, 11\n(13) / (11) = 13/11, left: 13/11, 10, 11\n(13/11) / (10) = 13/110, left: 13/110, 11\n(11) - (13/110) = 1197/110, left: 1197/110\n(11) / (13) = 11/13, left: 11/13, 10, 11\n(11) - (13) = -2, left: -2, 10, 11\n(11) - (10) = 1, left: 1, -2\n(13) + (11) = 24, left: 24, 10, 11\n(11) - (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (11 - 10))"}, {"input": "13 10 11 11\n", "output": "(11) / (13) = 11/13, left: 11/13, 10, 11\n(11) + (11/13) = 154/13, left: 154/13, 10\n(154/13) / (10) = 77/65, left: 77/65\n(11) - (10) = 1, left: 1, 11/13\n(10) + (11) = 21, left: 21, 11/13\n(10) + (11/13) = 141/13, left: 141/13, 11\n(10) * (11/13) = 110/13, left: 110/13, 11\n(13) + (11) = 24, left: 24, 10, 11\n(11) - (10) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (11 - 10))"}, {"input": "13 10 11 11\n", "output": "(11) - (11) = 0, left: 0, 13, 10\n(13) + (10) = 23, left: 23, 0\n(0) - (10) = -10, left: -10, 13\n(10) - (0) = 10, left: 10, 13\n(10) + (0) = 10, left: 10, 13\n(11) / (11) = 1, left: 1, 13, 10\n(10) - (1) = 9, left: 9, 13\n(9) / (13) = 9/13, left: 9/13\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (11 / 11)))"}, {"input": "10 7 12 4\n", "output": "(7) - (12) = -5, left: -5, 10, 4\n(10) * (4) = 40, left: 40, -5\n(40) - (-5) = 45, left: 45\n(12) / (7) = 12/7, left: 12/7, 10, 4\n(10) + (4) = 14, left: 14, 12/7\n(12/7) * (14) = 24, left: 24\nreach 24! expression: ((12 / 7) * (10 + 4))"}, {"input": "10 7 12 4\n", "output": "(7) + (12) = 19, left: 19, 10, 4\n(19) - (4) = 15, left: 15, 10\n(10) + (4) = 14, left: 14, 19\n(12) / (7) = 12/7, left: 12/7, 10, 4\n(10) + (4) = 14, left: 14, 12/7\n(12/7) * (14) = 24, left: 24\nreach 24! expression: ((12 / 7) * (10 + 4))"}, {"input": "10 7 12 4\n", "output": "(4) - (12) = -8, left: -8, 10, 7\n(10) + (-8) = 2, left: 2, 7\n(10) / (7) = 10/7, left: 10/7, -8\n(-8) + (10/7) = -46/7, left: -46/7\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((4 - 12) * (7 - 10))"}, {"input": "10 7 12 4\n", "output": "(10) / (4) = 5/2, left: 5/2, 7, 12\n(12) * (5/2) = 30, left: 30, 7\n(5/2) - (12) = -19/2, left: -19/2, 7\n(10) - (4) = 6, left: 6, 7, 12\n(7) + (12) = 19, left: 19, 6\n(4) - (10) = -6, left: -6, 7, 12\n(-6) / (12) = -1/2, left: -1/2, 7\n(10) + (4) = 14, left: 14, 7, 12\n(12) * (14) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: ((12 * (10 + 4)) / 7)"}, {"input": "10 7 12 4\n", "output": "(7) * (12) = 84, left: 84, 10, 4\n(10) / (4) = 5/2, left: 5/2, 84\n(12) - (7) = 5, left: 5, 10, 4\n(5) / (4) = 5/4, left: 5/4, 10\n(4) / (5) = 4/5, left: 4/5, 10\n(7) - (12) = -5, left: -5, 10, 4\n(10) - (4) = 6, left: 6, -5\n(12) / (7) = 12/7, left: 12/7, 10, 4\n(10) + (4) = 14, left: 14, 12/7\n(12/7) * (14) = 24, left: 24\nreach 24! expression: ((12 / 7) * (10 + 4))"}, {"input": "10 7 12 4\n", "output": "(7) + (4) = 11, left: 11, 10, 12\n(12) / (11) = 12/11, left: 12/11, 10\n(7) * (4) = 28, left: 28, 10, 12\n(12) - (28) = -16, left: -16, 10\n(28) / (10) = 14/5, left: 14/5, 12\n(7) / (4) = 7/4, left: 7/4, 10, 12\n(4) - (7) = -3, left: -3, 10, 12\n(7) - (10) = -3, left: -3, 12, 4\n(4) * (-3) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (4 * (7 - 10)))"}, {"input": "10 7 12 4\n", "output": "(7) * (12) = 84, left: 84, 10, 4\n(10) - (84) = -74, left: -74, 4\n(10) + (4) = 14, left: 14, 84\n(84) + (14) = 98, left: 98\n(7) + (12) = 19, left: 19, 10, 4\n(4) - (10) = -6, left: -6, 19\n(10) / (4) = 5/2, left: 5/2, 19\n(12) / (7) = 12/7, left: 12/7, 10, 4\n(10) + (4) = 14, left: 14, 12/7\n(12/7) * (14) = 24, left: 24\nreach 24! expression: ((12 / 7) * (10 + 4))"}, {"input": "10 7 12 4\n", "output": "(4) - (12) = -8, left: -8, 10, 7\n(10) + (-8) = 2, left: 2, 7\n(7) / (2) = 7/2, left: 7/2\n(10) * (-8) = -80, left: -80, 7\n(-8) - (10) = -18, left: -18, 7\n(7) + (-18) = -11, left: -11\n(-8) / (10) = -4/5, left: -4/5, 7\n(10) + (7) = 17, left: 17, -8\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((4 - 12) * (7 - 10))"}, {"input": "10 2 12 13\n", "output": "(2) * (12) = 24, left: 24, 10, 13\n(13) - (10) = 3, left: 3, 2, 12\n(12) / (13) = 12/13, left: 12/13, 10, 2\n(10) - (12) = -2, left: -2, 2, 13\n(2) * (13) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((10 - 12) + (2 * 13))"}, {"input": "10 2 12 13\n", "output": "(2) - (13) = -11, left: -11, 10, 12\n(12) - (10) = 2, left: 2, -11\n(2) / (13) = 2/13, left: 2/13, 10, 12\n(2) * (13) = 26, left: 26, 10, 12\n(12) - (26) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (12 - (2 * 13)))"}, {"input": "10 2 12 13\n", "output": "(2) / (10) = 1/5, left: 1/5, 12, 13\n(12) / (2) = 6, left: 6, 10, 13\n(13) - (10) = 3, left: 3, 6\n(10) + (12) = 22, left: 22, 2, 13\n(22) / (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((10 + 12) / 2))"}, {"input": "10 2 12 13\n", "output": "(13) / (10) = 13/10, left: 13/10, 2, 12\n(13) / (2) = 13/2, left: 13/2, 10, 12\n(12) - (10) = 2, left: 2, 13/2\n(2) * (13) = 26, left: 26, 10, 12\n(12) - (10) = 2, left: 2, 26\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * 13) - (12 - 10))"}, {"input": "10 2 12 13\n", "output": "(2) / (10) = 1/5, left: 1/5, 12, 13\n(1/5) - (13) = -64/5, left: -64/5, 12\n(10) - (2) = 8, left: 8, 12, 13\n(10) - (12) = -2, left: -2, 2, 13\n(2) * (13) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((10 - 12) + (2 * 13))"}, {"input": "10 2 12 13\n", "output": "(10) + (13) = 23, left: 23, 2, 12\n(12) / (23) = 12/23, left: 12/23, 2\n(10) * (13) = 130, left: 130, 2, 12\n(12) + (130) = 142, left: 142, 2\n(12) / (2) = 6, left: 6, 130\n(13) / (2) = 13/2, left: 13/2, 10, 12\n(12) / (10) = 6/5, left: 6/5, 13/2\n(2) * (13) = 26, left: 26, 10, 12\n(12) - (10) = 2, left: 2, 26\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * 13) - (12 - 10))"}, {"input": "10 2 12 13\n", "output": "(13) - (10) = 3, left: 3, 2, 12\n(10) / (13) = 10/13, left: 10/13, 2, 12\n(2) - (10/13) = 16/13, left: 16/13, 12\n(10) - (13) = -3, left: -3, 2, 12\n(10) - (2) = 8, left: 8, 12, 13\n(13) - (12) = 1, left: 1, 8\n(2) - (10) = -8, left: -8, 12, 13\n(10) - (12) = -2, left: -2, 2, 13\n(2) * (13) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((10 - 12) + (2 * 13))"}, {"input": "10 2 12 13\n", "output": "(10) - (2) = 8, left: 8, 12, 13\n(12) * (8) = 96, left: 96, 13\n(2) / (12) = 1/6, left: 1/6, 10, 13\n(2) - (12) = -10, left: -10, 10, 13\n(12) - (2) = 10, left: 10, 10, 13\n(13) - (10) = 3, left: 3, 10\n(10) - (13) = -3, left: -3, 2, 12\n(10) - (12) = -2, left: -2, 2, 13\n(2) * (13) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((10 - 12) + (2 * 13))"}, {"input": "10 2 12 13\n", "output": "(13) / (2) = 13/2, left: 13/2, 10, 12\n(10) - (12) = -2, left: -2, 13/2\n(13) - (2) = 11, left: 11, 10, 12\n(12) * (11) = 132, left: 132, 10\n(11) / (10) = 11/10, left: 11/10, 12\n(2) / (13) = 2/13, left: 2/13, 10, 12\n(10) - (12) = -2, left: -2, 2/13\n(2) * (13) = 26, left: 26, 10, 12\n(12) - (26) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (12 - (2 * 13)))"}, {"input": "10 2 12 13\n", "output": "(10) / (13) = 10/13, left: 10/13, 2, 12\n(2) * (12) = 24, left: 24, 10/13\n(13) - (10) = 3, left: 3, 2, 12\n(13) / (10) = 13/10, left: 13/10, 2, 12\n(13/10) / (2) = 13/20, left: 13/20, 12\n(2) - (10) = -8, left: -8, 12, 13\n(10) / (2) = 5, left: 5, 12, 13\n(10) + (12) = 22, left: 22, 2, 13\n(22) / (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((10 + 12) / 2))"}, {"input": "7 5 11 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 7, 5\n(5) + (11/5) = 36/5, left: 36/5, 7\n(11/5) - (7) = -24/5, left: -24/5, 5\n(7) * (11/5) = 77/5, left: 77/5, 5\n(7) - (11/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "7 5 11 5\n", "output": "(11) - (5) = 6, left: 6, 7, 5\n(5) + (6) = 11, left: 11, 7\n(11) / (5) = 11/5, left: 11/5, 7, 5\n(7) + (5) = 12, left: 12, 11/5\n(7) - (11/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "7 5 11 5\n", "output": "(5) - (7) = -2, left: -2, 11, 5\n(5) - (-2) = 7, left: 7, 11\n(5) / (7) = 5/7, left: 5/7, 11, 5\n(7) + (5) = 12, left: 12, 11, 5\n(5) / (5) = 1, left: 1, 7, 11\n(7) * (11) = 77, left: 77, 1\n(5) + (5) = 10, left: 10, 7, 11\n(11) / (5) = 11/5, left: 11/5, 7, 5\n(7) - (11/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "7 5 11 5\n", "output": "(11) - (5) = 6, left: 6, 7, 5\n(6) - (7) = -1, left: -1, 5\n(5) - (6) = -1, left: -1, 7\n(5) - (11) = -6, left: -6, 7, 5\n(7) - (5) = 2, left: 2, -6\n(5) / (-6) = -5/6, left: -5/6, 7\n(11) / (5) = 11/5, left: 11/5, 7, 5\n(5) / (11/5) = 25/11, left: 25/11, 7\n(7) - (11/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "7 5 11 5\n", "output": "(11) - (7) = 4, left: 4, 5, 5\n(7) + (11) = 18, left: 18, 5, 5\n(5) * (18) = 90, left: 90, 5\n(7) * (11) = 77, left: 77, 5, 5\n(5) - (77) = -72, left: -72, 5\n(5) * (-72) = -360, left: -360\n(5) + (77) = 82, left: 82, 5\n(11) / (5) = 11/5, left: 11/5, 7, 5\n(7) - (11/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "7 5 11 5\n", "output": "(11) - (5) = 6, left: 6, 7, 5\n(7) - (5) = 2, left: 2, 6\n(7) / (5) = 7/5, left: 7/5, 6\n(11) / (5) = 11/5, left: 11/5, 7, 5\n(5) - (7) = -2, left: -2, 11/5\n(5) - (11/5) = 14/5, left: 14/5, 7\n(5) * (11/5) = 11, left: 11, 7\n(11/5) / (5) = 11/25, left: 11/25, 7\n(7) - (11/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "7 5 11 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 7, 5\n(5) - (11/5) = 14/5, left: 14/5, 7\n(7) * (14/5) = 98/5, left: 98/5\n(11/5) / (5) = 11/25, left: 11/25, 7\n(11/5) - (5) = -14/5, left: -14/5, 7\n(5) + (11/5) = 36/5, left: 36/5, 7\n(7) * (11/5) = 77/5, left: 77/5, 5\n(77/5) / (5) = 77/25, left: 77/25\n(7) - (11/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "7 5 11 5\n", "output": "(11) - (7) = 4, left: 4, 5, 5\n(7) + (11) = 18, left: 18, 5, 5\n(7) - (11) = -4, left: -4, 5, 5\n(7) * (11) = 77, left: 77, 5, 5\n(5) - (5) = 0, left: 0, 7, 11\n(11) * (0) = 0, left: 0, 7\n(5) - (5) = 0, left: 0, 7, 11\n(7) * (11) = 77, left: 77, 0\n(0) - (77) = -77, left: -77\n(5) * (5) = 25, left: 25, 7, 11\n(5) / (5) = 1, left: 1, 7, 11\n(11) / (5) = 11/5, left: 11/5, 7, 5\n(7) - (11/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "8 5 13 11\n", "output": "(11) / (13) = 11/13, left: 11/13, 8, 5\n(5) / (11/13) = 65/11, left: 65/11, 8\n(8) - (65/11) = 23/11, left: 23/11\n(11) - (13) = -2, left: -2, 8, 5\n(5) + (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 + (11 - 13)))"}, {"input": "8 5 13 11\n", "output": "(8) * (11) = 88, left: 88, 5, 13\n(13) / (5) = 13/5, left: 13/5, 88\n(88) / (13/5) = 440/13, left: 440/13\n(8) - (11) = -3, left: -3, 5, 13\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((8 - 11) * (5 - 13))"}, {"input": "8 5 13 11\n", "output": "(13) - (8) = 5, left: 5, 5, 11\n(11) - (5) = 6, left: 6, 5\n(5) / (11) = 5/11, left: 5/11, 5\n(5) / (8) = 5/8, left: 5/8, 13, 11\n(8) * (5) = 40, left: 40, 13, 11\n(40) - (13) = 27, left: 27, 11\n(8) / (5) = 8/5, left: 8/5, 13, 11\n(5) - (13) = -8, left: -8, 8, 11\n(11) + (-8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (11 + (5 - 13)))"}, {"input": "8 5 13 11\n", "output": "(8) * (11) = 88, left: 88, 5, 13\n(5) / (88) = 5/88, left: 5/88, 13\n(88) - (5) = 83, left: 83, 13\n(83) / (13) = 83/13, left: 83/13\n(5) - (13) = -8, left: -8, 88\n(13) / (5) = 13/5, left: 13/5, 88\n(88) / (13) = 88/13, left: 88/13, 5\n(8) - (11) = -3, left: -3, 5, 13\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((8 - 11) * (5 - 13))"}, {"input": "8 5 13 11\n", "output": "(8) * (11) = 88, left: 88, 5, 13\n(13) / (5) = 13/5, left: 13/5, 88\n(13) - (88) = -75, left: -75, 5\n(5) / (88) = 5/88, left: 5/88, 13\n(8) / (11) = 8/11, left: 8/11, 5, 13\n(5) + (8/11) = 63/11, left: 63/11, 13\n(11) - (8) = 3, left: 3, 5, 13\n(5) / (13) = 5/13, left: 5/13, 3\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((11 - 8) * (13 - 5))"}, {"input": "8 5 13 11\n", "output": "(13) + (11) = 24, left: 24, 8, 5\n(24) / (8) = 3, left: 3, 5\n(8) * (24) = 192, left: 192, 5\n(5) * (192) = 960, left: 960\n(11) / (13) = 11/13, left: 11/13, 8, 5\n(5) - (8) = -3, left: -3, 11/13\n(11/13) / (8) = 11/104, left: 11/104, 5\n(11) - (13) = -2, left: -2, 8, 5\n(5) + (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 + (11 - 13)))"}, {"input": "7 13 7 3\n", "output": "(3) - (13) = -10, left: -10, 7, 7\n(-10) - (7) = -17, left: -17, 7\n(-17) - (7) = -24, left: -24\n(7) * (-17) = -119, left: -119\n(-17) / (7) = -17/7, left: -17/7\n(7) - (-17) = 24, left: 24\nreach 24! expression: (7 - ((3 - 13) - 7))"}, {"input": "7 13 7 3\n", "output": "(13) / (3) = 13/3, left: 13/3, 7, 7\n(13/3) / (7) = 13/21, left: 13/21, 7\n(7) * (13/3) = 91/3, left: 91/3, 7\n(13) - (3) = 10, left: 10, 7, 7\n(7) + (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((13 - 3) + (7 + 7))"}, {"input": "7 13 7 3\n", "output": "(3) / (13) = 3/13, left: 3/13, 7, 7\n(3/13) / (7) = 3/91, left: 3/91, 7\n(7) * (3/13) = 21/13, left: 21/13, 7\n(13) - (3) = 10, left: 10, 7, 7\n(7) + (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((13 - 3) + (7 + 7))"}, {"input": "7 13 7 3\n", "output": "(7) + (3) = 10, left: 10, 13, 7\n(7) - (13) = -6, left: -6, 10\n(7) / (3) = 7/3, left: 7/3, 13, 7\n(13) / (7/3) = 39/7, left: 39/7, 7\n(13) * (7/3) = 91/3, left: 91/3, 7\n(7) - (7/3) = 14/3, left: 14/3, 13\n(7) + (7/3) = 28/3, left: 28/3, 13\n(7) - (3) = 4, left: 4, 13, 7\n(13) + (4) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (13 + (7 - 3)))"}, {"input": "7 13 7 3\n", "output": "(3) / (13) = 3/13, left: 3/13, 7, 7\n(7) / (3/13) = 91/3, left: 91/3, 7\n(3/13) / (7) = 3/91, left: 3/91, 7\n(7) / (3/13) = 91/3, left: 91/3, 7\n(7) - (7) = 0, left: 0, 3/13\n(7) / (7) = 1, left: 1, 3/13\n(13) - (3) = 10, left: 10, 7, 7\n(7) - (7) = 0, left: 0, 10\n(7) + (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((13 - 3) + (7 + 7))"}, {"input": "7 13 7 3\n", "output": "(3) - (13) = -10, left: -10, 7, 7\n(-10) - (7) = -17, left: -17, 7\n(-17) - (7) = -24, left: -24\n(7) * (-17) = -119, left: -119\n(7) / (-17) = -7/17, left: -7/17\n(-17) / (7) = -17/7, left: -17/7\n(7) - (-17) = 24, left: 24\nreach 24! expression: (7 - ((3 - 13) - 7))"}, {"input": "7 13 7 3\n", "output": "(13) / (3) = 13/3, left: 13/3, 7, 7\n(7) / (13/3) = 21/13, left: 21/13, 7\n(13/3) / (7) = 13/21, left: 13/21, 7\n(7) + (13/21) = 160/21, left: 160/21\n(7) * (13/3) = 91/3, left: 91/3, 7\n(13) - (3) = 10, left: 10, 7, 7\n(7) / (7) = 1, left: 1, 10\n(7) - (7) = 0, left: 0, 10\n(7) + (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((13 - 3) + (7 + 7))"}, {"input": "7 13 7 3\n", "output": "(13) * (3) = 39, left: 39, 7, 7\n(3) / (13) = 3/13, left: 3/13, 7, 7\n(3/13) / (7) = 3/91, left: 3/91, 7\n(7) * (3/13) = 21/13, left: 21/13, 7\n(7) - (3/13) = 88/13, left: 88/13, 7\n(7) - (7) = 0, left: 0, 3/13\n(3/13) * (0) = 0, left: 0\n(3) - (13) = -10, left: -10, 7, 7\n(7) - (-10) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (7 - (3 - 13)))"}, {"input": "7 13 7 3\n", "output": "(3) - (13) = -10, left: -10, 7, 7\n(-10) - (7) = -17, left: -17, 7\n(-17) - (7) = -24, left: -24\n(7) * (-17) = -119, left: -119\n(7) / (-17) = -7/17, left: -7/17\n(-17) / (7) = -17/7, left: -17/7\n(7) - (-17) = 24, left: 24\nreach 24! expression: (7 - ((3 - 13) - 7))"}, {"input": "7 13 7 3\n", "output": "(3) - (13) = -10, left: -10, 7, 7\n(-10) - (7) = -17, left: -17, 7\n(-17) - (7) = -24, left: -24\n(7) * (-17) = -119, left: -119\n(7) / (-17) = -7/17, left: -7/17\n(-17) / (7) = -17/7, left: -17/7\n(7) - (-17) = 24, left: 24\nreach 24! expression: (7 - ((3 - 13) - 7))"}, {"input": "1 10 4 5\n", "output": "(10) / (4) = 5/2, left: 5/2, 1, 5\n(5) * (5/2) = 25/2, left: 25/2, 1\n(5/2) / (5) = 1/2, left: 1/2, 1\n(10) - (4) = 6, left: 6, 1, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((10 - 4) * (5 - 1))"}, {"input": "1 10 4 5\n", "output": "(5) / (1) = 5, left: 5, 10, 4\n(10) * (4) = 40, left: 40, 5\n(5) - (40) = -35, left: -35\n(5) / (10) = 1/2, left: 1/2, 4\n(10) / (5) = 2, left: 2, 4\n(4) / (5) = 4/5, left: 4/5, 10\n(1) - (5) = -4, left: -4, 10, 4\n(-4) / (10) = -2/5, left: -2/5, 4\n(10) + (-4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (10 + (1 - 5)))"}, {"input": "1 10 4 5\n", "output": "(10) + (5) = 15, left: 15, 1, 4\n(15) - (4) = 11, left: 11, 1\n(11) - (1) = 10, left: 10\n(15) / (4) = 15/4, left: 15/4, 1\n(1) - (4) = -3, left: -3, 15\n(15) / (-3) = -5, left: -5\n(10) - (5) = 5, left: 5, 1, 4\n(5) / (1) = 5, left: 5, 4\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (10 - 5)))"}, {"input": "1 10 4 5\n", "output": "(1) + (10) = 11, left: 11, 4, 5\n(4) + (5) = 9, left: 9, 11\n(4) * (5) = 20, left: 20, 11\n(5) - (4) = 1, left: 1, 11\n(11) + (1) = 12, left: 12\n(4) - (11) = -7, left: -7, 5\n(-7) / (5) = -7/5, left: -7/5\n(4) / (11) = 4/11, left: 4/11, 5\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((1 + 10) - 5))"}, {"input": "1 10 4 5\n", "output": "(1) + (10) = 11, left: 11, 4, 5\n(11) - (5) = 6, left: 6, 4\n(6) / (4) = 3/2, left: 3/2\n(4) / (6) = 2/3, left: 2/3\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(4) + (6) = 10, left: 10\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((1 + 10) - 5))"}, {"input": "1 10 4 5\n", "output": "(10) / (4) = 5/2, left: 5/2, 1, 5\n(5) * (5/2) = 25/2, left: 25/2, 1\n(1) / (25/2) = 2/25, left: 2/25\n(5) - (5/2) = 5/2, left: 5/2, 1\n(1) / (5) = 1/5, left: 1/5, 5/2\n(1) + (5) = 6, left: 6, 5/2\n(1) / (5/2) = 2/5, left: 2/5, 5\n(10) - (4) = 6, left: 6, 1, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((10 - 4) * (5 - 1))"}, {"input": "1 10 4 5\n", "output": "(1) + (10) = 11, left: 11, 4, 5\n(11) - (5) = 6, left: 6, 4\n(6) / (4) = 3/2, left: 3/2\n(4) / (6) = 2/3, left: 2/3\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(4) + (6) = 10, left: 10\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((1 + 10) - 5))"}, {"input": "1 10 4 5\n", "output": "(1) + (10) = 11, left: 11, 4, 5\n(11) - (5) = 6, left: 6, 4\n(6) / (4) = 3/2, left: 3/2\n(4) / (6) = 2/3, left: 2/3\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(4) + (6) = 10, left: 10\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((1 + 10) - 5))"}, {"input": "6 11 13 9\n", "output": "(11) / (13) = 11/13, left: 11/13, 6, 9\n(13) / (11) = 13/11, left: 13/11, 6, 9\n(9) / (13/11) = 99/13, left: 99/13, 6\n(13) - (11) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (13 - 11)))"}, {"input": "6 11 13 9\n", "output": "(11) / (13) = 11/13, left: 11/13, 6, 9\n(11/13) - (6) = -67/13, left: -67/13, 9\n(13) / (11) = 13/11, left: 13/11, 6, 9\n(11) - (13) = -2, left: -2, 6, 9\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (11 - 13)))"}, {"input": "6 11 13 9\n", "output": "(9) / (11) = 9/11, left: 9/11, 6, 13\n(13) * (9/11) = 117/11, left: 117/11, 6\n(9) - (11) = -2, left: -2, 6, 13\n(11) - (13) = -2, left: -2, 6, 9\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (11 - 13)))"}, {"input": "6 11 13 9\n", "output": "(11) / (13) = 11/13, left: 11/13, 6, 9\n(9) - (11/13) = 106/13, left: 106/13, 6\n(9) / (11/13) = 117/11, left: 117/11, 6\n(13) / (11) = 13/11, left: 13/11, 6, 9\n(6) + (9) = 15, left: 15, 13/11\n(6) * (13/11) = 78/11, left: 78/11, 9\n(13/11) - (6) = -53/11, left: -53/11, 9\n(11) - (13) = -2, left: -2, 6, 9\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (11 - 13)))"}, {"input": "6 11 13 9\n", "output": "(11) - (9) = 2, left: 2, 6, 13\n(13) * (2) = 26, left: 26, 6\n(9) - (11) = -2, left: -2, 6, 13\n(6) * (13) = 78, left: 78, -2\n(6) / (-2) = -3, left: -3, 13\n(11) + (9) = 20, left: 20, 6, 13\n(11) / (9) = 11/9, left: 11/9, 6, 13\n(11) - (13) = -2, left: -2, 6, 9\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (11 - 13)))"}, {"input": "6 11 13 9\n", "output": "(6) + (13) = 19, left: 19, 11, 9\n(11) - (19) = -8, left: -8, 9\n(6) - (13) = -7, left: -7, 11, 9\n(11) / (9) = 11/9, left: 11/9, -7\n(13) - (6) = 7, left: 7, 11, 9\n(11) * (13) = 143, left: 143, 6, 9\n(143) / (6) = 143/6, left: 143/6, 9\n(13) - (11) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (13 - 11)))"}, {"input": "6 11 13 9\n", "output": "(11) * (9) = 99, left: 99, 6, 13\n(11) + (9) = 20, left: 20, 6, 13\n(13) / (11) = 13/11, left: 13/11, 6, 9\n(6) + (9) = 15, left: 15, 13/11\n(13/11) * (15) = 195/11, left: 195/11\n(6) * (9) = 54, left: 54, 13/11\n(13/11) / (54) = 13/594, left: 13/594\n(11) - (13) = -2, left: -2, 6, 9\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (11 - 13)))"}, {"input": "6 11 13 9\n", "output": "(9) / (11) = 9/11, left: 9/11, 6, 13\n(11) / (6) = 11/6, left: 11/6, 13, 9\n(11/6) - (13) = -67/6, left: -67/6, 9\n(9) + (11/6) = 65/6, left: 65/6, 13\n(6) + (9) = 15, left: 15, 11, 13\n(6) - (9) = -3, left: -3, 11, 13\n(13) + (9) = 22, left: 22, 6, 11\n(11) - (13) = -2, left: -2, 6, 9\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (11 - 13)))"}, {"input": "6 6 12 11\n", "output": "(11) - (12) = -1, left: -1, 6, 6\n(6) - (6) = 0, left: 0, -1\n(12) / (11) = 12/11, left: 12/11, 6, 6\n(12) + (11) = 23, left: 23, 6, 6\n(6) / (6) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (6 / 6))"}, {"input": "6 6 12 11\n", "output": "(11) - (12) = -1, left: -1, 6, 6\n(11) / (12) = 11/12, left: 11/12, 6, 6\n(12) + (11) = 23, left: 23, 6, 6\n(6) - (23) = -17, left: -17, 6\n(6) / (6) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (6 / 6))"}, {"input": "6 6 12 11\n", "output": "(11) - (12) = -1, left: -1, 6, 6\n(11) / (12) = 11/12, left: 11/12, 6, 6\n(6) - (6) = 0, left: 0, 11/12\n(6) / (6) = 1, left: 1, 11/12\n(11/12) + (1) = 23/12, left: 23/12\n(6) * (11/12) = 11/2, left: 11/2, 6\n(6) + (11/12) = 83/12, left: 83/12, 6\n(12) + (11) = 23, left: 23, 6, 6\n(6) / (6) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (6 / 6))"}, {"input": "6 6 12 11\n", "output": "(6) + (11) = 17, left: 17, 6, 12\n(17) / (6) = 17/6, left: 17/6, 12\n(11) - (6) = 5, left: 5, 6, 12\n(6) + (12) = 18, left: 18, 5\n(11) / (6) = 11/6, left: 11/6, 6, 12\n(12) - (6) = 6, left: 6, 11/6\n(6) / (11) = 6/11, left: 6/11, 6, 12\n(12) + (11) = 23, left: 23, 6, 6\n(6) / (6) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (6 / 6))"}, {"input": "6 6 12 11\n", "output": "(6) / (11) = 6/11, left: 6/11, 6, 12\n(6/11) / (12) = 1/22, left: 1/22, 6\n(11) / (6) = 11/6, left: 11/6, 6, 12\n(6) * (11/6) = 11, left: 11, 12\n(6) - (6) = 0, left: 0, 12, 11\n(6) - (6) = 0, left: 0, 12, 11\n(11) - (0) = 11, left: 11, 12\n(6) / (6) = 1, left: 1, 12, 11\n(12) + (11) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: ((6 / 6) + (12 + 11))"}, {"input": "6 6 12 11\n", "output": "(11) - (12) = -1, left: -1, 6, 6\n(-1) - (6) = -7, left: -7, 6\n(-7) - (6) = -13, left: -13\n(12) * (11) = 132, left: 132, 6, 6\n(12) / (11) = 12/11, left: 12/11, 6, 6\n(6) * (12/11) = 72/11, left: 72/11, 6\n(12) + (11) = 23, left: 23, 6, 6\n(6) + (23) = 29, left: 29, 6\n(6) / (6) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (6 / 6))"}, {"input": "6 6 12 11\n", "output": "(6) * (11) = 66, left: 66, 6, 12\n(6) - (11) = -5, left: -5, 6, 12\n(-5) / (6) = -5/6, left: -5/6, 12\n(6) / (11) = 6/11, left: 6/11, 6, 12\n(6/11) / (12) = 1/22, left: 1/22, 6\n(11) - (6) = 5, left: 5, 6, 12\n(6) + (6) = 12, left: 12, 12, 11\n(6) / (6) = 1, left: 1, 12, 11\n(11) + (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (11 + (6 / 6)))"}, {"input": "8 10 12 4\n", "output": "(4) - (10) = -6, left: -6, 8, 12\n(-6) / (12) = -1/2, left: -1/2, 8\n(12) * (-6) = -72, left: -72, 8\n(8) - (-72) = 80, left: 80\n(8) + (-6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (8 + (4 - 10)))"}, {"input": "8 10 12 4\n", "output": "(8) / (12) = 2/3, left: 2/3, 10, 4\n(12) / (8) = 3/2, left: 3/2, 10, 4\n(3/2) / (10) = 3/20, left: 3/20, 4\n(8) - (12) = -4, left: -4, 10, 4\n(4) - (10) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((8 - 12) * (4 - 10))"}, {"input": "8 10 12 4\n", "output": "(10) - (8) = 2, left: 2, 12, 4\n(4) / (2) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(2) - (12) = -10, left: -10\n(2) / (12) = 1/6, left: 1/6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (4 / (10 - 8)))"}, {"input": "8 10 12 4\n", "output": "(10) - (4) = 6, left: 6, 8, 12\n(8) * (12) = 96, left: 96, 6\n(96) - (6) = 90, left: 90\n(8) - (12) = -4, left: -4, 6\n(12) - (8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((10 - 4) * (12 - 8))"}, {"input": "8 10 12 4\n", "output": "(10) - (4) = 6, left: 6, 8, 12\n(8) + (12) = 20, left: 20, 6\n(6) * (20) = 120, left: 120\n(20) / (6) = 10/3, left: 10/3\n(6) + (20) = 26, left: 26\n(8) * (12) = 96, left: 96, 6\n(12) / (8) = 3/2, left: 3/2, 6\n(8) - (12) = -4, left: -4, 6\n(12) - (8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((10 - 4) * (12 - 8))"}, {"input": "8 10 12 4\n", "output": "(10) - (8) = 2, left: 2, 12, 4\n(4) / (2) = 2, left: 2, 12\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(2) - (12) = -10, left: -10\n(2) / (12) = 1/6, left: 1/6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (4 / (10 - 8)))"}, {"input": "8 10 12 4\n", "output": "(8) / (12) = 2/3, left: 2/3, 10, 4\n(4) - (10) = -6, left: -6, 2/3\n(12) / (8) = 3/2, left: 3/2, 10, 4\n(10) * (3/2) = 15, left: 15, 4\n(10) + (3/2) = 23/2, left: 23/2, 4\n(3/2) - (4) = -5/2, left: -5/2, 10\n(10) - (-5/2) = 25/2, left: 25/2\n(8) - (12) = -4, left: -4, 10, 4\n(4) - (10) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((8 - 12) * (4 - 10))"}, {"input": "8 10 12 4\n", "output": "(8) + (12) = 20, left: 20, 10, 4\n(10) + (20) = 30, left: 30, 4\n(4) * (20) = 80, left: 80, 10\n(10) - (80) = -70, left: -70\n(4) / (10) = 2/5, left: 2/5, 20\n(10) - (4) = 6, left: 6, 20\n(4) - (10) = -6, left: -6, 20\n(8) - (12) = -4, left: -4, 10, 4\n(4) - (10) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((8 - 12) * (4 - 10))"}, {"input": "8 10 12 4\n", "output": "(4) - (10) = -6, left: -6, 8, 12\n(12) / (-6) = -2, left: -2, 8\n(-6) - (12) = -18, left: -18, 8\n(8) * (-18) = -144, left: -144\n(8) / (-18) = -4/9, left: -4/9\n(-6) / (8) = -3/4, left: -3/4, 12\n(-6) - (8) = -14, left: -14, 12\n(8) / (-6) = -4/3, left: -4/3, 12\n(8) + (-6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (8 + (4 - 10)))"}, {"input": "8 10 12 4\n", "output": "(10) - (8) = 2, left: 2, 12, 4\n(4) / (2) = 2, left: 2, 12\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(2) - (12) = -10, left: -10\n(2) / (12) = 1/6, left: 1/6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (4 / (10 - 8)))"}, {"input": "8 10 12 4\n", "output": "(10) - (8) = 2, left: 2, 12, 4\n(4) / (2) = 2, left: 2, 12\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(2) - (12) = -10, left: -10\n(2) / (12) = 1/6, left: 1/6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (4 / (10 - 8)))"}, {"input": "2 13 8 13\n", "output": "(8) / (2) = 4, left: 4, 13, 13\n(2) + (8) = 10, left: 10, 13, 13\n(13) / (2) = 13/2, left: 13/2, 13, 8\n(13) - (8) = 5, left: 5, 2, 13\n(8) + (13) = 21, left: 21, 2, 13\n(13) / (2) = 13/2, left: 13/2, 21\n(8) / (13) = 8/13, left: 8/13, 2, 13\n(13) / (13) = 1, left: 1, 2, 8\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "2 13 8 13\n", "output": "(8) - (13) = -5, left: -5, 2, 13\n(-5) / (2) = -5/2, left: -5/2, 13\n(13) / (8) = 13/8, left: 13/8, 2, 13\n(2) - (13) = -11, left: -11, 13, 8\n(-11) - (13) = -24, left: -24, 8\n(2) + (13) = 15, left: 15, 13, 8\n(8) / (13) = 8/13, left: 8/13, 2, 13\n(13) / (13) = 1, left: 1, 2, 8\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "2 13 8 13\n", "output": "(13) - (13) = 0, left: 0, 2, 8\n(0) - (2) = -2, left: -2, 8\n(2) + (8) = 10, left: 10, 0\n(0) + (10) = 10, left: 10\n(13) + (13) = 26, left: 26, 2, 8\n(26) / (2) = 13, left: 13, 8\n(13) / (13) = 1, left: 1, 2, 8\n(2) * (1) = 2, left: 2, 8\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "2 13 8 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 8, 13\n(8) * (13) = 104, left: 104, 2/13\n(2/13) * (104) = 16, left: 16\n(2) + (13) = 15, left: 15, 8, 13\n(2) / (8) = 1/4, left: 1/4, 13, 13\n(8) - (13) = -5, left: -5, 2, 13\n(13) * (-5) = -65, left: -65, 2\n(13) / (13) = 1, left: 1, 2, 8\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "2 13 8 13\n", "output": "(2) - (13) = -11, left: -11, 8, 13\n(8) / (-11) = -8/11, left: -8/11, 13\n(-8/11) / (13) = -8/143, left: -8/143\n(13) - (8) = 5, left: 5, 2, 13\n(13) * (8) = 104, left: 104, 2, 13\n(13) / (2) = 13/2, left: 13/2, 104\n(13) - (13) = 0, left: 0, 2, 8\n(13) / (13) = 1, left: 1, 2, 8\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "8 13 10 12\n", "output": "(10) + (12) = 22, left: 22, 8, 13\n(12) - (10) = 2, left: 2, 8, 13\n(10) - (12) = -2, left: -2, 8, 13\n(10) * (12) = 120, left: 120, 8, 13\n(13) - (8) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (13 - 8))"}, {"input": "8 13 10 12\n", "output": "(8) + (10) = 18, left: 18, 13, 12\n(8) + (12) = 20, left: 20, 13, 10\n(8) * (13) = 104, left: 104, 10, 12\n(13) - (8) = 5, left: 5, 10, 12\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((13 - 8) / 10))"}, {"input": "8 13 10 12\n", "output": "(13) - (8) = 5, left: 5, 10, 12\n(5) - (10) = -5, left: -5, 12\n(-5) - (12) = -17, left: -17\n(10) * (5) = 50, left: 50, 12\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 / (13 - 8)))"}, {"input": "8 13 10 12\n", "output": "(8) + (10) = 18, left: 18, 13, 12\n(8) / (10) = 4/5, left: 4/5, 13, 12\n(13) * (10) = 130, left: 130, 8, 12\n(10) * (12) = 120, left: 120, 8, 13\n(13) - (8) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (13 - 8))"}, {"input": "8 13 10 12\n", "output": "(8) / (12) = 2/3, left: 2/3, 13, 10\n(8) - (12) = -4, left: -4, 13, 10\n(12) / (10) = 6/5, left: 6/5, 8, 13\n(10) * (12) = 120, left: 120, 8, 13\n(13) - (8) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (13 - 8))"}, {"input": "8 13 10 12\n", "output": "(13) - (8) = 5, left: 5, 10, 12\n(5) - (10) = -5, left: -5, 12\n(12) / (-5) = -12/5, left: -12/5\n(10) * (5) = 50, left: 50, 12\n(12) - (50) = -38, left: -38\n(10) - (5) = 5, left: 5, 12\n(5) / (12) = 5/12, left: 5/12\n(5) - (12) = -7, left: -7\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 / (13 - 8)))"}, {"input": "8 13 10 12\n", "output": "(10) / (12) = 5/6, left: 5/6, 8, 13\n(5/6) / (13) = 5/78, left: 5/78, 8\n(10) + (12) = 22, left: 22, 8, 13\n(13) - (22) = -9, left: -9, 8\n(12) - (10) = 2, left: 2, 8, 13\n(10) - (12) = -2, left: -2, 8, 13\n(10) * (12) = 120, left: 120, 8, 13\n(8) * (13) = 104, left: 104, 120\n(13) - (8) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (13 - 8))"}, {"input": "8 13 10 12\n", "output": "(8) * (12) = 96, left: 96, 13, 10\n(10) / (96) = 5/48, left: 5/48, 13\n(12) / (8) = 3/2, left: 3/2, 13, 10\n(12) - (8) = 4, left: 4, 13, 10\n(13) / (10) = 13/10, left: 13/10, 4\n(4) * (13/10) = 26/5, left: 26/5\n(10) / (12) = 5/6, left: 5/6, 8, 13\n(10) * (12) = 120, left: 120, 8, 13\n(13) - (8) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (13 - 8))"}, {"input": "8 13 10 12\n", "output": "(8) - (10) = -2, left: -2, 13, 12\n(8) * (10) = 80, left: 80, 13, 12\n(12) / (13) = 12/13, left: 12/13, 80\n(13) * (12) = 156, left: 156, 80\n(10) - (13) = -3, left: -3, 8, 12\n(13) / (10) = 13/10, left: 13/10, 8, 12\n(12) - (13/10) = 107/10, left: 107/10, 8\n(10) * (12) = 120, left: 120, 8, 13\n(13) - (8) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (13 - 8))"}, {"input": "8 13 10 12\n", "output": "(10) - (8) = 2, left: 2, 13, 12\n(13) + (2) = 15, left: 15, 12\n(8) / (10) = 4/5, left: 4/5, 13, 12\n(10) / (8) = 5/4, left: 5/4, 13, 12\n(5/4) / (13) = 5/52, left: 5/52, 12\n(10) / (13) = 10/13, left: 10/13, 8, 12\n(8) * (13) = 104, left: 104, 10, 12\n(13) - (8) = 5, left: 5, 10, 12\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((13 - 8) / 10))"}, {"input": "6 6 5 1\n", "output": "(1) / (5) = 1/5, left: 1/5, 6, 6\n(1/5) / (6) = 1/30, left: 1/30, 6\n(1/30) - (6) = -179/30, left: -179/30\n(6) - (1/30) = 179/30, left: 179/30\n(6) / (1/5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 / (1 / 5)) - 6)"}, {"input": "6 6 5 1\n", "output": "(6) * (6) = 36, left: 36, 5, 1\n(6) + (6) = 12, left: 12, 5, 1\n(5) * (1) = 5, left: 5, 12\n(12) + (5) = 17, left: 17\n(5) / (1) = 5, left: 5, 12\n(6) / (6) = 1, left: 1, 5, 1\n(1) / (1) = 1, left: 1, 5\n(5) * (1) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (5 * 1)) - 6)"}, {"input": "6 6 5 1\n", "output": "(1) - (6) = -5, left: -5, 6, 5\n(5) / (-5) = -1, left: -1, 6\n(-5) / (5) = -1, left: -1, 6\n(6) + (1) = 7, left: 7, 6, 5\n(6) / (5) = 6/5, left: 6/5, 7\n(6) * (5) = 30, left: 30, 7\n(7) / (6) = 7/6, left: 7/6, 5\n(6) / (1) = 6, left: 6, 6, 5\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (6 / 1))"}, {"input": "6 6 5 1\n", "output": "(1) - (5) = -4, left: -4, 6, 6\n(6) + (-4) = 2, left: 2, 6\n(6) - (6) = 0, left: 0, -4\n(6) - (-4) = 10, left: 10, 6\n(5) + (1) = 6, left: 6, 6, 6\n(6) - (6) = 0, left: 0, 6\n(6) + (6) = 12, left: 12, 6\n(5) * (1) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (5 * 1)) - 6)"}, {"input": "6 6 5 1\n", "output": "(6) / (1) = 6, left: 6, 6, 5\n(5) - (6) = -1, left: -1, 6\n(-1) - (6) = -7, left: -7\n(-1) / (6) = -1/6, left: -1/6\n(6) * (-1) = -6, left: -6\n(6) + (-1) = 5, left: 5\n(6) - (-1) = 7, left: 7\n(5) * (6) = 30, left: 30, 6\n(6) / (30) = 1/5, left: 1/5\n(30) - (6) = 24, left: 24\nreach 24! expression: ((5 * (6 / 1)) - 6)"}, {"input": "6 6 5 1\n", "output": "(1) / (5) = 1/5, left: 1/5, 6, 6\n(1/5) / (6) = 1/30, left: 1/30, 6\n(1/30) - (6) = -179/30, left: -179/30\n(1/30) / (6) = 1/180, left: 1/180\n(6) / (1/30) = 180, left: 180\n(6) - (1/30) = 179/30, left: 179/30\n(6) + (1/30) = 181/30, left: 181/30\n(6) / (1/5) = 30, left: 30, 6\n(6) / (30) = 1/5, left: 1/5\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 / (1 / 5)) - 6)"}, {"input": "6 6 5 1\n", "output": "(1) / (5) = 1/5, left: 1/5, 6, 6\n(1/5) / (6) = 1/30, left: 1/30, 6\n(1/30) - (6) = -179/30, left: -179/30\n(1/30) / (6) = 1/180, left: 1/180\n(6) / (1/30) = 180, left: 180\n(6) - (1/30) = 179/30, left: 179/30\n(6) * (1/30) = 1/5, left: 1/5\n(6) + (1/30) = 181/30, left: 181/30\n(6) / (1/5) = 30, left: 30, 6\n(6) / (30) = 1/5, left: 1/5\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 / (1 / 5)) - 6)"}, {"input": "6 6 5 1\n", "output": "(6) / (1) = 6, left: 6, 6, 5\n(5) - (6) = -1, left: -1, 6\n(-1) - (6) = -7, left: -7\n(6) / (-1) = -6, left: -6\n(-1) / (6) = -1/6, left: -1/6\n(6) * (-1) = -6, left: -6\n(6) + (-1) = 5, left: 5\n(6) - (-1) = 7, left: 7\n(5) * (6) = 30, left: 30, 6\n(6) / (30) = 1/5, left: 1/5\n(30) - (6) = 24, left: 24\nreach 24! expression: ((5 * (6 / 1)) - 6)"}, {"input": "6 6 5 1\n", "output": "(6) * (6) = 36, left: 36, 5, 1\n(6) - (6) = 0, left: 0, 5, 1\n(0) - (5) = -5, left: -5, 1\n(6) / (6) = 1, left: 1, 5, 1\n(5) + (1) = 6, left: 6, 1\n(6) + (6) = 12, left: 12, 5, 1\n(5) - (12) = -7, left: -7, 1\n(-7) / (1) = -7, left: -7\n(6) / (6) = 1, left: 1, 5, 1\n(6) - (6) = 0, left: 0, 5, 1\n(5) - (1) = 4, left: 4, 0\n(5) * (1) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (5 * 1)) - 6)"}, {"input": "6 6 5 1\n", "output": "(1) - (5) = -4, left: -4, 6, 6\n(-4) - (6) = -10, left: -10, 6\n(6) * (-4) = -24, left: -24, 6\n(6) - (-4) = 10, left: 10, 6\n(-4) / (6) = -2/3, left: -2/3, 6\n(6) / (6) = 1, left: 1, -4\n(5) + (1) = 6, left: 6, 6, 6\n(6) - (6) = 0, left: 0, 6\n(6) * (0) = 0, left: 0\n(6) - (6) = 0, left: 0, 6\n(5) * (1) = 5, left: 5, 6, 6\n(5) - (6) = -1, left: -1, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (5 * 1)) - 6)"}, {"input": "6 6 5 1\n", "output": "(1) / (5) = 1/5, left: 1/5, 6, 6\n(1/5) / (6) = 1/30, left: 1/30, 6\n(1/30) - (6) = -179/30, left: -179/30\n(1/30) / (6) = 1/180, left: 1/180\n(6) / (1/30) = 180, left: 180\n(6) - (1/30) = 179/30, left: 179/30\n(6) * (1/30) = 1/5, left: 1/5\n(6) + (1/30) = 181/30, left: 181/30\n(6) / (1/5) = 30, left: 30, 6\n(6) / (30) = 1/5, left: 1/5\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 / (1 / 5)) - 6)"}, {"input": "6 6 5 1\n", "output": "(6) / (1) = 6, left: 6, 6, 5\n(5) - (6) = -1, left: -1, 6\n(-1) - (6) = -7, left: -7\n(6) / (-1) = -6, left: -6\n(-1) / (6) = -1/6, left: -1/6\n(6) * (-1) = -6, left: -6\n(6) + (-1) = 5, left: 5\n(6) - (-1) = 7, left: 7\n(5) * (6) = 30, left: 30, 6\n(6) / (30) = 1/5, left: 1/5\n(30) - (6) = 24, left: 24\nreach 24! expression: ((5 * (6 / 1)) - 6)"}, {"input": "13 6 11 1\n", "output": "(6) - (1) = 5, left: 5, 13, 11\n(13) / (11) = 13/11, left: 13/11, 5\n(13) - (11) = 2, left: 2, 6, 1\n(13) * (11) = 143, left: 143, 6, 1\n(1) + (143) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "13 6 11 1\n", "output": "(13) + (11) = 24, left: 24, 6, 1\n(11) / (13) = 11/13, left: 11/13, 6, 1\n(13) * (11) = 143, left: 143, 6, 1\n(6) / (143) = 6/143, left: 6/143, 1\n(1) + (143) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "13 6 11 1\n", "output": "(13) * (1) = 13, left: 13, 6, 11\n(13) / (1) = 13, left: 13, 6, 11\n(11) / (6) = 11/6, left: 11/6, 13\n(13) * (11) = 143, left: 143, 6, 1\n(1) + (143) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "13 6 11 1\n", "output": "(11) + (1) = 12, left: 12, 13, 6\n(13) / (11) = 13/11, left: 13/11, 6, 1\n(1) + (13/11) = 24/11, left: 24/11, 6\n(13) * (11) = 143, left: 143, 6, 1\n(1) + (143) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "13 6 11 1\n", "output": "(1) - (13) = -12, left: -12, 6, 11\n(13) * (1) = 13, left: 13, 6, 11\n(13) - (1) = 12, left: 12, 6, 11\n(13) + (1) = 14, left: 14, 6, 11\n(6) / (11) = 6/11, left: 6/11, 14\n(11) - (14) = -3, left: -3, 6\n(13) * (11) = 143, left: 143, 6, 1\n(143) - (1) = 142, left: 142, 6\n(1) + (143) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "13 6 11 1\n", "output": "(13) + (11) = 24, left: 24, 6, 1\n(6) / (24) = 1/4, left: 1/4, 1\n(11) / (13) = 11/13, left: 11/13, 6, 1\n(1) * (11/13) = 11/13, left: 11/13, 6\n(13) * (11) = 143, left: 143, 6, 1\n(6) - (143) = -137, left: -137, 1\n(143) / (6) = 143/6, left: 143/6, 1\n(143/6) - (1) = 137/6, left: 137/6\n(1) + (143) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "13 6 11 1\n", "output": "(13) + (6) = 19, left: 19, 11, 1\n(1) / (19) = 1/19, left: 1/19, 11\n(6) + (1) = 7, left: 7, 13, 11\n(6) / (1) = 6, left: 6, 13, 11\n(13) / (1) = 13, left: 13, 6, 11\n(1) - (13) = -12, left: -12, 6, 11\n(11) - (13) = -2, left: -2, 6, 1\n(13) * (11) = 143, left: 143, 6, 1\n(1) + (143) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "13 6 11 1\n", "output": "(6) / (1) = 6, left: 6, 13, 11\n(6) / (13) = 6/13, left: 6/13, 11\n(6) * (1) = 6, left: 6, 13, 11\n(13) - (11) = 2, left: 2, 6\n(13) - (11) = 2, left: 2, 6, 1\n(6) * (2) = 12, left: 12, 1\n(6) + (1) = 7, left: 7, 2\n(13) * (11) = 143, left: 143, 6, 1\n(1) + (143) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "13 6 11 1\n", "output": "(13) + (1) = 14, left: 14, 6, 11\n(6) - (11) = -5, left: -5, 13, 1\n(13) - (1) = 12, left: 12, -5\n(11) / (6) = 11/6, left: 11/6, 13, 1\n(6) + (11) = 17, left: 17, 13, 1\n(11) / (1) = 11, left: 11, 13, 6\n(1) / (11) = 1/11, left: 1/11, 13, 6\n(13) * (11) = 143, left: 143, 6, 1\n(1) + (143) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "2 12 7 8\n", "output": "(2) * (7) = 14, left: 14, 12, 8\n(12) - (14) = -2, left: -2, 8\n(2) - (7) = -5, left: -5, 12, 8\n(8) / (12) = 2/3, left: 2/3, -5\n(7) / (2) = 7/2, left: 7/2, 12, 8\n(7/2) - (8) = -9/2, left: -9/2, 12\n(12) * (7/2) = 42, left: 42, 8\n(2) + (7) = 9, left: 9, 12, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (12 - (2 + 7)))"}, {"input": "2 12 7 8\n", "output": "(7) / (2) = 7/2, left: 7/2, 12, 8\n(7) - (2) = 5, left: 5, 12, 8\n(8) - (12) = -4, left: -4, 5\n(12) * (5) = 60, left: 60, 8\n(5) - (8) = -3, left: -3, 12\n(2) + (7) = 9, left: 9, 12, 8\n(8) / (12) = 2/3, left: 2/3, 9\n(12) * (9) = 108, left: 108, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (12 - (2 + 7)))"}, {"input": "2 12 7 8\n", "output": "(12) + (7) = 19, left: 19, 2, 8\n(8) / (2) = 4, left: 4, 19\n(12) * (7) = 84, left: 84, 2, 8\n(2) / (84) = 1/42, left: 1/42, 8\n(7) - (12) = -5, left: -5, 2, 8\n(2) + (-5) = -3, left: -3, 8\n(12) / (7) = 12/7, left: 12/7, 2, 8\n(12) - (7) = 5, left: 5, 2, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 7) - 2))"}, {"input": "2 12 7 8\n", "output": "(8) - (12) = -4, left: -4, 2, 7\n(2) / (7) = 2/7, left: 2/7, -4\n(12) * (8) = 96, left: 96, 2, 7\n(2) + (7) = 9, left: 9, 96\n(2) * (8) = 16, left: 16, 12, 7\n(7) * (16) = 112, left: 112, 12\n(2) / (8) = 1/4, left: 1/4, 12, 7\n(12) - (2) = 10, left: 10, 7, 8\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 2) - 7))"}, {"input": "2 12 7 8\n", "output": "(2) - (8) = -6, left: -6, 12, 7\n(2) + (8) = 10, left: 10, 12, 7\n(12) + (7) = 19, left: 19, 10\n(2) / (8) = 1/4, left: 1/4, 12, 7\n(8) / (2) = 4, left: 4, 12, 7\n(7) - (12) = -5, left: -5, 4\n(2) * (12) = 24, left: 24, 7, 8\n(24) / (7) = 24/7, left: 24/7, 8\n(8) - (7) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((2 * 12) * (8 - 7))"}, {"input": "12 1 12 5\n", "output": "(12) - (5) = 7, left: 7, 12, 1\n(7) / (12) = 7/12, left: 7/12, 1\n(5) - (12) = -7, left: -7, 12, 1\n(12) * (12) = 144, left: 144, 1, 5\n(1) + (5) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (1 + 5))"}, {"input": "12 1 12 5\n", "output": "(1) / (12) = 1/12, left: 1/12, 12, 5\n(5) / (12) = 5/12, left: 5/12, 1, 12\n(5/12) / (12) = 5/144, left: 5/144, 1\n(12) * (12) = 144, left: 144, 1, 5\n(1) + (5) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (1 + 5))"}, {"input": "12 1 12 5\n", "output": "(5) / (12) = 5/12, left: 5/12, 12, 1\n(5) - (12) = -7, left: -7, 12, 1\n(1) - (12) = -11, left: -11, -7\n(12) / (5) = 12/5, left: 12/5, 12, 1\n(12) - (1) = 11, left: 11, 12/5\n(12) * (5) = 60, left: 60, 12, 1\n(12) + (12) = 24, left: 24, 1, 5\n(12) * (12) = 144, left: 144, 1, 5\n(1) + (5) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (1 + 5))"}, {"input": "12 1 12 5\n", "output": "(12) + (1) = 13, left: 13, 12, 5\n(1) - (12) = -11, left: -11, 12, 5\n(5) - (1) = 4, left: 4, 12, 12\n(12) / (12) = 1, left: 1, 4\n(1) - (5) = -4, left: -4, 12, 12\n(12) * (-4) = -48, left: -48, 12\n(12) / (12) = 1, left: 1, -4\n(1) + (5) = 6, left: 6, 12, 12\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (12 / (1 + 5)))"}, {"input": "12 1 12 5\n", "output": "(12) / (1) = 12, left: 12, 12, 5\n(12) / (5) = 12/5, left: 12/5, 12\n(1) - (12) = -11, left: -11, 12, 5\n(12) / (12) = 1, left: 1, 1, 5\n(5) - (1) = 4, left: 4, 1\n(12) / (12) = 1, left: 1, 1, 5\n(12) * (12) = 144, left: 144, 1, 5\n(5) - (144) = -139, left: -139, 1\n(1) + (5) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (1 + 5))"}, {"input": "12 1 12 5\n", "output": "(12) + (1) = 13, left: 13, 12, 5\n(13) - (12) = 1, left: 1, 5\n(1) - (5) = -4, left: -4\n(1) / (12) = 1/12, left: 1/12, 12, 5\n(12) * (5) = 60, left: 60, 1, 12\n(1) / (12) = 1/12, left: 1/12, 60\n(5) / (12) = 5/12, left: 5/12, 1, 12\n(12) * (12) = 144, left: 144, 1, 5\n(1) + (5) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (1 + 5))"}, {"input": "12 1 12 5\n", "output": "(12) * (5) = 60, left: 60, 1, 12\n(12) - (5) = 7, left: 7, 1, 12\n(1) - (12) = -11, left: -11, 12, 5\n(1) * (5) = 5, left: 5, 12, 12\n(5) - (1) = 4, left: 4, 12, 12\n(12) * (12) = 144, left: 144, 4\n(144) / (4) = 36, left: 36\n(1) + (5) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((1 + 5) / 12))"}, {"input": "6 9 3 1\n", "output": "(9) + (1) = 10, left: 10, 6, 3\n(3) / (6) = 1/2, left: 1/2, 10\n(6) / (10) = 3/5, left: 3/5, 3\n(3) + (3/5) = 18/5, left: 18/5\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (9 + 1)) - 6)"}, {"input": "6 9 3 1\n", "output": "(9) + (1) = 10, left: 10, 6, 3\n(3) - (6) = -3, left: -3, 10\n(6) + (3) = 9, left: 9, 10\n(6) * (10) = 60, left: 60, 3\n(60) / (3) = 20, left: 20\n(10) - (3) = 7, left: 7, 6\n(7) - (6) = 1, left: 1\n(10) / (3) = 10/3, left: 10/3, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (9 + 1)) - 6)"}, {"input": "6 9 3 1\n", "output": "(9) / (3) = 3, left: 3, 6, 1\n(6) + (3) = 9, left: 9, 1\n(3) / (6) = 1/2, left: 1/2, 1\n(1) / (1/2) = 2, left: 2\n(3) - (1) = 2, left: 2, 6\n(6) * (2) = 12, left: 12\n(1) - (3) = -2, left: -2, 6\n(6) - (-2) = 8, left: 8\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (9 / 3)))"}, {"input": "6 9 3 1\n", "output": "(6) / (3) = 2, left: 2, 9, 1\n(6) - (3) = 3, left: 3, 9, 1\n(3) - (9) = -6, left: -6, 1\n(1) - (3) = -2, left: -2, 9\n(9) / (-2) = -9/2, left: -9/2\n(1) / (3) = 1/3, left: 1/3, 9\n(1) + (3) = 4, left: 4, 9\n(9) + (1) = 10, left: 10, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (9 - 1))"}, {"input": "6 9 3 1\n", "output": "(3) - (6) = -3, left: -3, 9, 1\n(9) + (1) = 10, left: 10, -3\n(10) / (-3) = -10/3, left: -10/3\n(-3) - (10) = -13, left: -13\n(1) / (9) = 1/9, left: 1/9, -3\n(1/9) - (-3) = 28/9, left: 28/9\n(9) / (1) = 9, left: 9, -3\n(-3) - (9) = -12, left: -12\n(1) - (9) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((3 - 6) * (1 - 9))"}, {"input": "6 9 3 1\n", "output": "(6) + (3) = 9, left: 9, 9, 1\n(1) / (9) = 1/9, left: 1/9, 9\n(9) / (1) = 9, left: 9, 9\n(3) / (6) = 1/2, left: 1/2, 9, 1\n(9) - (1/2) = 17/2, left: 17/2, 1\n(6) / (3) = 2, left: 2, 9, 1\n(6) - (3) = 3, left: 3, 9, 1\n(1) / (9) = 1/9, left: 1/9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (9 - 1))"}, {"input": "6 9 3 1\n", "output": "(9) / (3) = 3, left: 3, 6, 1\n(6) / (3) = 2, left: 2, 1\n(1) + (2) = 3, left: 3\n(6) + (3) = 9, left: 9, 1\n(3) - (6) = -3, left: -3, 1\n(1) - (-3) = 4, left: 4\n(6) - (3) = 3, left: 3, 1\n(3) / (1) = 3, left: 3\n(3) / (1) = 3, left: 3, 6\n(3) - (6) = -3, left: -3\n(3) - (1) = 2, left: 2, 6\n(6) * (2) = 12, left: 12\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (9 / 3)))"}, {"input": "6 9 3 1\n", "output": "(6) + (3) = 9, left: 9, 9, 1\n(1) / (9) = 1/9, left: 1/9, 9\n(9) + (1) = 10, left: 10, 9\n(3) / (6) = 1/2, left: 1/2, 9, 1\n(6) / (3) = 2, left: 2, 9, 1\n(1) - (9) = -8, left: -8, 2\n(1) * (2) = 2, left: 2, 9\n(9) / (2) = 9/2, left: 9/2\n(9) - (2) = 7, left: 7, 1\n(1) / (7) = 1/7, left: 1/7\n(6) - (3) = 3, left: 3, 9, 1\n(9) - (3) = 6, left: 6, 1\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (9 - 1))"}, {"input": "6 9 3 1\n", "output": "(6) / (3) = 2, left: 2, 9, 1\n(1) / (2) = 1/2, left: 1/2, 9\n(1) + (2) = 3, left: 3, 9\n(2) / (1) = 2, left: 2, 9\n(9) - (2) = 7, left: 7, 1\n(7) - (1) = 6, left: 6\n(9) / (2) = 9/2, left: 9/2, 1\n(9) * (2) = 18, left: 18, 1\n(1) - (18) = -17, left: -17\n(6) - (3) = 3, left: 3, 9, 1\n(3) - (9) = -6, left: -6, 1\n(1) - (3) = -2, left: -2, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (9 - 1))"}, {"input": "1 12 4 1\n", "output": "(12) - (1) = 11, left: 11, 4, 1\n(12) / (1) = 12, left: 12, 4, 1\n(1) / (12) = 1/12, left: 1/12, 4, 1\n(1) / (4) = 1/4, left: 1/4, 12, 1\n(1/4) - (12) = -47/4, left: -47/4, 1\n(4) - (1) = 3, left: 3, 12, 1\n(12) * (3) = 36, left: 36, 1\n(1) + (36) = 37, left: 37\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "1 12 4 1\n", "output": "(4) / (1) = 4, left: 4, 12, 1\n(1) * (4) = 4, left: 4, 12, 1\n(1) + (4) = 5, left: 5, 12, 1\n(1) - (12) = -11, left: -11, 5\n(5) / (1) = 5, left: 5, 12\n(1) - (4) = -3, left: -3, 12, 1\n(1) / (4) = 1/4, left: 1/4, 12, 1\n(4) - (1) = 3, left: 3, 12, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "1 12 4 1\n", "output": "(12) / (4) = 3, left: 3, 1, 1\n(3) / (1) = 3, left: 3, 1\n(1) / (1) = 1, left: 1, 3\n(4) - (12) = -8, left: -8, 1, 1\n(12) - (4) = 8, left: 8, 1, 1\n(1) + (8) = 9, left: 9, 1\n(4) / (12) = 1/3, left: 1/3, 1, 1\n(12) * (4) = 48, left: 48, 1, 1\n(1) + (1) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (1 + 1))"}, {"input": "1 12 4 1\n", "output": "(4) + (1) = 5, left: 5, 1, 12\n(1) - (12) = -11, left: -11, 5\n(1) / (4) = 1/4, left: 1/4, 1, 12\n(1) + (1/4) = 5/4, left: 5/4, 12\n(12) / (1) = 12, left: 12, 1/4\n(4) - (1) = 3, left: 3, 1, 12\n(12) / (1) = 12, left: 12, 3\n(3) / (1) = 3, left: 3, 12\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "1 12 4 1\n", "output": "(1) / (4) = 1/4, left: 1/4, 12, 1\n(12) / (1) = 12, left: 12, 1/4\n(1) - (4) = -3, left: -3, 12, 1\n(-3) - (1) = -4, left: -4, 12\n(12) + (-3) = 9, left: 9, 1\n(4) - (1) = 3, left: 3, 12, 1\n(12) - (3) = 9, left: 9, 1\n(9) - (1) = 8, left: 8\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "1 12 4 1\n", "output": "(12) - (1) = 11, left: 11, 4, 1\n(12) / (1) = 12, left: 12, 4, 1\n(1) + (12) = 13, left: 13, 4\n(1) * (12) = 12, left: 12, 4, 1\n(4) - (12) = -8, left: -8, 1\n(1) / (12) = 1/12, left: 1/12, 4, 1\n(4) / (1) = 4, left: 4, 1/12\n(1) / (4) = 1/4, left: 1/4, 12, 1\n(12) - (1/4) = 47/4, left: 47/4, 1\n(1) * (4) = 4, left: 4, 12, 1\n(1) + (4) = 5, left: 5, 12, 1\n(4) - (1) = 3, left: 3, 12, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "1 12 4 1\n", "output": "(4) / (1) = 4, left: 4, 12, 1\n(1) / (4) = 1/4, left: 1/4, 12\n(1) + (4) = 5, left: 5, 12\n(1) * (4) = 4, left: 4, 12, 1\n(12) / (4) = 3, left: 3, 1\n(3) / (1) = 3, left: 3\n(1) + (4) = 5, left: 5, 12, 1\n(1) - (5) = -4, left: -4, 12\n(1) - (4) = -3, left: -3, 12, 1\n(1) / (4) = 1/4, left: 1/4, 12, 1\n(12) * (1/4) = 3, left: 3, 1\n(4) - (1) = 3, left: 3, 12, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "5 13 3 4\n", "output": "(3) * (4) = 12, left: 12, 5, 13\n(13) * (12) = 156, left: 156, 5\n(5) * (156) = 780, left: 780\n(3) / (4) = 3/4, left: 3/4, 5, 13\n(5) + (13) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((5 + 13) / (3 / 4))"}, {"input": "5 13 3 4\n", "output": "(5) + (3) = 8, left: 8, 13, 4\n(13) * (4) = 52, left: 52, 8\n(3) - (5) = -2, left: -2, 13, 4\n(4) + (-2) = 2, left: 2, 13\n(13) + (2) = 15, left: 15\n(4) / (13) = 4/13, left: 4/13, -2\n(13) / (-2) = -13/2, left: -13/2, 4\n(5) * (3) = 15, left: 15, 13, 4\n(4) - (13) = -9, left: -9, 15\n(15) - (-9) = 24, left: 24\nreach 24! expression: ((5 * 3) - (4 - 13))"}, {"input": "5 13 3 4\n", "output": "(3) * (4) = 12, left: 12, 5, 13\n(13) + (12) = 25, left: 25, 5\n(5) - (25) = -20, left: -20\n(13) / (12) = 13/12, left: 13/12, 5\n(5) / (13) = 5/13, left: 5/13, 12\n(3) / (4) = 3/4, left: 3/4, 5, 13\n(3/4) - (5) = -17/4, left: -17/4, 13\n(5) * (3/4) = 15/4, left: 15/4, 13\n(5) + (13) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((5 + 13) / (3 / 4))"}, {"input": "5 13 3 4\n", "output": "(4) - (5) = -1, left: -1, 13, 3\n(13) * (3) = 39, left: 39, -1\n(4) / (5) = 4/5, left: 4/5, 13, 3\n(4/5) - (3) = -11/5, left: -11/5, 13\n(13) / (4) = 13/4, left: 13/4, 5, 3\n(3) * (13/4) = 39/4, left: 39/4, 5\n(4) - (13) = -9, left: -9, 5, 3\n(3) - (-9) = 12, left: 12, 5\n(5) * (3) = 15, left: 15, -9\n(15) - (-9) = 24, left: 24\nreach 24! expression: ((5 * 3) - (4 - 13))"}, {"input": "5 13 3 4\n", "output": "(13) / (5) = 13/5, left: 13/5, 3, 4\n(4) - (13/5) = 7/5, left: 7/5, 3\n(13) - (5) = 8, left: 8, 3, 4\n(3) * (8) = 24, left: 24, 4\n(5) / (13) = 5/13, left: 5/13, 3, 4\n(5) * (13) = 65, left: 65, 3, 4\n(4) - (65) = -61, left: -61, 3\n(5) + (13) = 18, left: 18, 3, 4\n(4) * (18) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((4 * (5 + 13)) / 3)"}, {"input": "5 13 3 4\n", "output": "(5) * (4) = 20, left: 20, 13, 3\n(20) - (3) = 17, left: 17, 13\n(4) / (5) = 4/5, left: 4/5, 13, 3\n(4) - (5) = -1, left: -1, 13, 3\n(5) / (4) = 5/4, left: 5/4, 13, 3\n(13) / (3) = 13/3, left: 13/3, 5/4\n(5) - (4) = 1, left: 1, 13, 3\n(3) / (4) = 3/4, left: 3/4, 5, 13\n(5) + (13) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((5 + 13) / (3 / 4))"}, {"input": "3 10 3 9\n", "output": "(9) - (3) = 6, left: 6, 10, 3\n(3) - (6) = -3, left: -3, 10\n(3) / (6) = 1/2, left: 1/2, 10\n(1/2) - (10) = -19/2, left: -19/2\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (9 - 3))"}, {"input": "3 10 3 9\n", "output": "(3) * (9) = 27, left: 27, 3, 10\n(10) * (27) = 270, left: 270, 3\n(3) + (9) = 12, left: 12, 3, 10\n(3) - (10) = -7, left: -7, 12\n(3) / (9) = 1/3, left: 1/3, 3, 10\n(9) / (3) = 3, left: 3, 3, 10\n(3) / (3) = 1, left: 1, 10\n(9) - (3) = 6, left: 6, 3, 10\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * 10) - (9 - 3))"}, {"input": "3 10 3 9\n", "output": "(10) - (9) = 1, left: 1, 3, 3\n(10) + (9) = 19, left: 19, 3, 3\n(10) / (9) = 10/9, left: 10/9, 3, 3\n(9) / (10) = 9/10, left: 9/10, 3, 3\n(3) / (3) = 1, left: 1, 9/10\n(9) / (3) = 3, left: 3, 10, 3\n(10) / (3) = 10/3, left: 10/3, 3\n(9) - (3) = 6, left: 6, 10, 3\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (9 - 3))"}, {"input": "3 10 3 9\n", "output": "(9) / (3) = 3, left: 3, 3, 10\n(3) * (10) = 30, left: 30, 3\n(3) * (9) = 27, left: 27, 3, 10\n(10) - (27) = -17, left: -17, 3\n(3) * (-17) = -51, left: -51\n(10) - (3) = 7, left: 7, 27\n(9) - (3) = 6, left: 6, 3, 10\n(10) * (6) = 60, left: 60, 3\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * 10) - (9 - 3))"}, {"input": "3 10 3 9\n", "output": "(3) / (3) = 1, left: 1, 10, 9\n(10) - (1) = 9, left: 9, 9\n(9) + (9) = 18, left: 18\n(3) - (3) = 0, left: 0, 10, 9\n(0) - (9) = -9, left: -9, 10\n(9) - (10) = -1, left: -1, 0\n(3) * (3) = 9, left: 9, 10, 9\n(3) - (9) = -6, left: -6, 3, 10\n(3) * (10) = 30, left: 30, -6\n(-6) + (30) = 24, left: 24\nreach 24! expression: ((3 - 9) + (3 * 10))"}, {"input": "3 10 3 9\n", "output": "(9) - (3) = 6, left: 6, 10, 3\n(6) / (3) = 2, left: 2, 10\n(6) - (3) = 3, left: 3, 10\n(10) - (6) = 4, left: 4, 3\n(3) + (4) = 7, left: 7\n(10) + (6) = 16, left: 16, 3\n(16) - (3) = 13, left: 13\n(10) + (3) = 13, left: 13, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (9 - 3))"}, {"input": "3 10 3 9\n", "output": "(3) - (3) = 0, left: 0, 10, 9\n(3) / (3) = 1, left: 1, 10, 9\n(10) + (1) = 11, left: 11, 9\n(9) / (11) = 9/11, left: 9/11\n(3) - (3) = 0, left: 0, 10, 9\n(10) - (0) = 10, left: 10, 9\n(3) * (3) = 9, left: 9, 10, 9\n(10) + (9) = 19, left: 19, 9\n(9) + (19) = 28, left: 28\n(3) / (3) = 1, left: 1, 10, 9\n(1) - (9) = -8, left: -8, 10\n(3) - (9) = -6, left: -6, 3, 10\n(3) * (10) = 30, left: 30, -6\n(-6) + (30) = 24, left: 24\nreach 24! expression: ((3 - 9) + (3 * 10))"}, {"input": "13 6 5 10\n", "output": "(13) / (5) = 13/5, left: 13/5, 6, 10\n(6) / (13/5) = 30/13, left: 30/13, 10\n(13) + (5) = 18, left: 18, 6, 10\n(13) - (5) = 8, left: 8, 6, 10\n(6) + (10) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((13 - 5) + (6 + 10))"}, {"input": "13 6 5 10\n", "output": "(13) - (5) = 8, left: 8, 6, 10\n(8) - (10) = -2, left: -2, 6\n(8) / (10) = 4/5, left: 4/5, 6\n(6) - (4/5) = 26/5, left: 26/5\n(10) + (8) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (10 + (13 - 5)))"}, {"input": "13 6 5 10\n", "output": "(5) - (10) = -5, left: -5, 13, 6\n(13) + (-5) = 8, left: 8, 6\n(6) / (8) = 3/4, left: 3/4\n(6) + (8) = 14, left: 14\n(8) - (6) = 2, left: 2\n(6) - (8) = -2, left: -2\n(13) - (-5) = 18, left: 18, 6\n(6) - (18) = -12, left: -12\n(6) / (18) = 1/3, left: 1/3\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (13 - (5 - 10)))"}, {"input": "13 6 5 10\n", "output": "(10) / (13) = 10/13, left: 10/13, 6, 5\n(6) - (5) = 1, left: 1, 10/13\n(10) - (13) = -3, left: -3, 6, 5\n(6) + (-3) = 3, left: 3, 5\n(6) * (-3) = -18, left: -18, 5\n(5) + (-3) = 2, left: 2, 6\n(5) * (-3) = -15, left: -15, 6\n(13) + (10) = 23, left: 23, 6, 5\n(6) + (23) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((6 + (13 + 10)) - 5)"}, {"input": "13 6 5 10\n", "output": "(13) / (5) = 13/5, left: 13/5, 6, 10\n(10) * (13/5) = 26, left: 26, 6\n(13/5) - (10) = -37/5, left: -37/5, 6\n(13) + (5) = 18, left: 18, 6, 10\n(10) / (6) = 5/3, left: 5/3, 18\n(10) / (18) = 5/9, left: 5/9, 6\n(10) + (18) = 28, left: 28, 6\n(13) - (5) = 8, left: 8, 6, 10\n(6) + (10) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((13 - 5) + (6 + 10))"}, {"input": "13 6 5 10\n", "output": "(13) - (5) = 8, left: 8, 6, 10\n(8) - (10) = -2, left: -2, 6\n(8) / (10) = 4/5, left: 4/5, 6\n(6) * (4/5) = 24/5, left: 24/5\n(10) - (8) = 2, left: 2, 6\n(6) + (2) = 8, left: 8\n(10) / (8) = 5/4, left: 5/4, 6\n(5/4) - (6) = -19/4, left: -19/4\n(10) + (8) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (10 + (13 - 5)))"}, {"input": "3 8 3 8\n", "output": "(3) + (8) = 11, left: 11, 3, 8\n(3) + (8) = 11, left: 11, 11\n(3) / (8) = 3/8, left: 3/8, 3, 8\n(3/8) - (8) = -61/8, left: -61/8, 3\n(3) - (8) = -5, left: -5, 3, 8\n(-5) / (3) = -5/3, left: -5/3, 8\n(8) / (3) = 8/3, left: 8/3, 3, 8\n(3) + (8/3) = 17/3, left: 17/3, 8\n(3) - (8/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(3) / (3) = 1, left: 1, 8, 8\n(8) / (1) = 8, left: 8, 8\n(8) + (8) = 16, left: 16, 3, 3\n(16) - (3) = 13, left: 13, 3\n(8) - (8) = 0, left: 0, 3, 3\n(8) - (8) = 0, left: 0, 3, 3\n(8) / (3) = 8/3, left: 8/3, 8, 3\n(3) + (8/3) = 17/3, left: 17/3, 8\n(3) - (8/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(8) + (3) = 11, left: 11, 3, 8\n(3) + (11) = 14, left: 14, 8\n(8) / (11) = 8/11, left: 8/11, 3\n(3) - (8) = -5, left: -5, 3, 8\n(8) / (3) = 8/3, left: 8/3, 3, 8\n(8/3) - (8) = -16/3, left: -16/3, 3\n(8/3) / (8) = 1/3, left: 1/3, 3\n(3) + (1/3) = 10/3, left: 10/3\n(3) - (8/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(3) * (8) = 24, left: 24, 8, 3\n(3) / (24) = 1/8, left: 1/8, 8\n(8) + (1/8) = 65/8, left: 65/8\n(8) - (3) = 5, left: 5, 8, 3\n(3) - (5) = -2, left: -2, 8\n(3) / (8) = 3/8, left: 3/8, 8, 3\n(8) / (3) = 8/3, left: 8/3, 3/8\n(8) / (3) = 8/3, left: 8/3, 8, 3\n(3) - (8/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(8) + (3) = 11, left: 11, 3, 8\n(8) * (3) = 24, left: 24, 3, 8\n(3) - (8) = -5, left: -5, 24\n(3) - (8) = -5, left: -5, 3, 8\n(8) / (-5) = -8/5, left: -8/5, 3\n(3) - (-5) = 8, left: 8, 8\n(3) / (-5) = -3/5, left: -3/5, 8\n(8) / (3) = 8/3, left: 8/3, 3, 8\n(3) - (8/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(8) + (3) = 11, left: 11, 3, 8\n(8) * (11) = 88, left: 88, 3\n(3) - (88) = -85, left: -85\n(11) - (8) = 3, left: 3, 3\n(8) * (3) = 24, left: 24, 3, 8\n(8) - (24) = -16, left: -16, 3\n(3) - (8) = -5, left: -5, 3, 8\n(-5) - (8) = -13, left: -13, 3\n(8) - (3) = 5, left: 5, -5\n(3) * (8) = 24, left: 24, -5\n(8) / (3) = 8/3, left: 8/3, 3, 8\n(3) / (8/3) = 9/8, left: 9/8, 8\n(3) - (8/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(3) / (3) = 1, left: 1, 8, 8\n(8) - (1) = 7, left: 7, 8\n(8) / (1) = 8, left: 8, 8\n(3) - (3) = 0, left: 0, 8, 8\n(8) + (8) = 16, left: 16, 0\n(0) * (16) = 0, left: 0\n(8) - (8) = 0, left: 0, 0\n(3) / (3) = 1, left: 1, 8, 8\n(8) + (8) = 16, left: 16, 3, 3\n(8) / (8) = 1, left: 1, 3, 3\n(8) / (8) = 1, left: 1, 3, 3\n(8) / (3) = 8/3, left: 8/3, 8, 3\n(3) - (8/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "8 12 11 9\n", "output": "(11) / (8) = 11/8, left: 11/8, 12, 9\n(11/8) - (9) = -61/8, left: -61/8, 12\n(8) + (11) = 19, left: 19, 12, 9\n(11) - (8) = 3, left: 3, 12, 9\n(12) + (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (12 + (11 - 8)))"}, {"input": "8 12 11 9\n", "output": "(8) * (11) = 88, left: 88, 12, 9\n(12) - (9) = 3, left: 3, 88\n(88) * (3) = 264, left: 264\n(11) - (8) = 3, left: 3, 12, 9\n(12) + (9) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((11 - 8) + (12 + 9))"}, {"input": "8 12 11 9\n", "output": "(11) / (9) = 11/9, left: 11/9, 8, 12\n(8) / (11/9) = 72/11, left: 72/11, 12\n(9) - (11) = -2, left: -2, 8, 12\n(11) + (9) = 20, left: 20, 8, 12\n(12) + (20) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((12 + (11 + 9)) - 8)"}, {"input": "8 12 11 9\n", "output": "(9) - (12) = -3, left: -3, 8, 11\n(-3) / (11) = -3/11, left: -3/11, 8\n(12) - (9) = 3, left: 3, 8, 11\n(3) - (8) = -5, left: -5, 11\n(11) / (3) = 11/3, left: 11/3, 8\n(12) * (9) = 108, left: 108, 8, 11\n(8) - (11) = -3, left: -3, 108\n(12) + (9) = 21, left: 21, 8, 11\n(11) + (21) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((11 + (12 + 9)) - 8)"}, {"input": "8 12 11 9\n", "output": "(11) / (9) = 11/9, left: 11/9, 8, 12\n(11/9) - (8) = -61/9, left: -61/9, 12\n(11/9) / (8) = 11/72, left: 11/72, 12\n(11) - (9) = 2, left: 2, 8, 12\n(12) - (8) = 4, left: 4, 2\n(11) * (9) = 99, left: 99, 8, 12\n(9) - (11) = -2, left: -2, 8, 12\n(11) + (9) = 20, left: 20, 8, 12\n(12) + (20) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((12 + (11 + 9)) - 8)"}, {"input": "8 12 11 9\n", "output": "(9) / (8) = 9/8, left: 9/8, 12, 11\n(9/8) / (11) = 9/88, left: 9/88, 12\n(8) + (9) = 17, left: 17, 12, 11\n(11) / (12) = 11/12, left: 11/12, 17\n(12) - (11) = 1, left: 1, 17\n(12) * (11) = 132, left: 132, 17\n(9) - (8) = 1, left: 1, 12, 11\n(12) * (1) = 12, left: 12, 11\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (9 - 8)))"}, {"input": "8 12 11 9\n", "output": "(11) / (8) = 11/8, left: 11/8, 12, 9\n(11/8) - (12) = -85/8, left: -85/8, 9\n(9) / (-85/8) = -72/85, left: -72/85\n(8) * (11) = 88, left: 88, 12, 9\n(88) - (12) = 76, left: 76, 9\n(9) + (88) = 97, left: 97, 12\n(8) + (11) = 19, left: 19, 12, 9\n(11) - (8) = 3, left: 3, 12, 9\n(12) + (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (12 + (11 - 8)))"}, {"input": "8 12 11 9\n", "output": "(8) + (11) = 19, left: 19, 12, 9\n(19) - (9) = 10, left: 10, 12\n(8) * (11) = 88, left: 88, 12, 9\n(9) + (88) = 97, left: 97, 12\n(88) - (12) = 76, left: 76, 9\n(76) - (9) = 67, left: 67\n(8) / (11) = 8/11, left: 8/11, 12, 9\n(11) - (8) = 3, left: 3, 12, 9\n(12) + (9) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((11 - 8) + (12 + 9))"}, {"input": "1 7 8 9\n", "output": "(8) - (1) = 7, left: 7, 7, 9\n(9) * (7) = 63, left: 63, 7\n(7) / (9) = 7/9, left: 7/9, 7\n(1) / (8) = 1/8, left: 1/8, 7, 9\n(1/8) / (9) = 1/72, left: 1/72, 7\n(1) + (8) = 9, left: 9, 7, 9\n(9) * (9) = 81, left: 81, 7\n(1) * (8) = 8, left: 8, 7, 9\n(7) + (8) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (7 + (1 * 8)))"}, {"input": "1 7 8 9\n", "output": "(8) - (7) = 1, left: 1, 1, 9\n(7) - (8) = -1, left: -1, 1, 9\n(9) * (-1) = -9, left: -9, 1\n(8) / (7) = 8/7, left: 8/7, 1, 9\n(1) * (9) = 9, left: 9, 8/7\n(7) * (8) = 56, left: 56, 1, 9\n(7) + (8) = 15, left: 15, 1, 9\n(15) - (1) = 14, left: 14, 9\n(1) * (15) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (1 * (7 + 8)))"}, {"input": "1 7 8 9\n", "output": "(8) - (7) = 1, left: 1, 1, 9\n(1) / (9) = 1/9, left: 1/9, 1\n(8) / (7) = 8/7, left: 8/7, 1, 9\n(8/7) / (1) = 8/7, left: 8/7, 9\n(8/7) - (1) = 1/7, left: 1/7, 9\n(9) - (1/7) = 62/7, left: 62/7\n(7) - (8) = -1, left: -1, 1, 9\n(7) + (8) = 15, left: 15, 1, 9\n(1) * (15) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (1 * (7 + 8)))"}, {"input": "1 7 8 9\n", "output": "(1) * (7) = 7, left: 7, 8, 9\n(9) / (7) = 9/7, left: 9/7, 8\n(8) * (9/7) = 72/7, left: 72/7\n(9/7) / (8) = 9/56, left: 9/56\n(9) + (7) = 16, left: 16, 8\n(16) / (8) = 2, left: 2\n(8) * (16) = 128, left: 128\n(8) - (16) = -8, left: -8\n(16) - (8) = 8, left: 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (9 + (1 * 7)))"}, {"input": "1 7 8 9\n", "output": "(8) - (7) = 1, left: 1, 1, 9\n(1) * (9) = 9, left: 9, 1\n(1) + (1) = 2, left: 2, 9\n(7) / (8) = 7/8, left: 7/8, 1, 9\n(1) - (7/8) = 1/8, left: 1/8, 9\n(9) / (7/8) = 72/7, left: 72/7, 1\n(1) - (72/7) = -65/7, left: -65/7\n(7) - (8) = -1, left: -1, 1, 9\n(8) / (7) = 8/7, left: 8/7, 1, 9\n(7) * (8) = 56, left: 56, 1, 9\n(1) + (9) = 10, left: 10, 56\n(7) + (8) = 15, left: 15, 1, 9\n(1) * (15) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (1 * (7 + 8)))"}, {"input": "1 7 8 9\n", "output": "(8) - (1) = 7, left: 7, 7, 9\n(9) - (7) = 2, left: 2, 7\n(1) / (8) = 1/8, left: 1/8, 7, 9\n(9) / (1/8) = 72, left: 72, 7\n(7) - (1/8) = 55/8, left: 55/8, 9\n(1) + (8) = 9, left: 9, 7, 9\n(7) / (9) = 7/9, left: 7/9, 9\n(7) - (9) = -2, left: -2, 9\n(9) + (9) = 18, left: 18, 7\n(7) - (18) = -11, left: -11\n(9) / (9) = 1, left: 1, 7\n(1) * (8) = 8, left: 8, 7, 9\n(7) + (8) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (7 + (1 * 8)))"}, {"input": "1 13 4 2\n", "output": "(4) - (1) = 3, left: 3, 13, 2\n(4) / (1) = 4, left: 4, 13, 2\n(2) * (4) = 8, left: 8, 13\n(1) * (4) = 4, left: 4, 13, 2\n(2) + (4) = 6, left: 6, 13\n(1) / (13) = 1/13, left: 1/13, 4, 2\n(4) / (1/13) = 52, left: 52, 2\n(1) + (13) = 14, left: 14, 4, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (1 + 13)) - 4)"}, {"input": "1 13 4 2\n", "output": "(1) / (2) = 1/2, left: 1/2, 13, 4\n(2) - (1) = 1, left: 1, 13, 4\n(2) / (1) = 2, left: 2, 13, 4\n(13) + (4) = 17, left: 17, 2\n(1) - (2) = -1, left: -1, 13, 4\n(13) - (4) = 9, left: 9, 1, 2\n(13) * (4) = 52, left: 52, 1, 2\n(2) / (4) = 1/2, left: 1/2, 1, 13\n(13) - (1) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((13 - 1) / (2 / 4))"}, {"input": "1 13 4 2\n", "output": "(1) / (4) = 1/4, left: 1/4, 13, 2\n(2) / (13) = 2/13, left: 2/13, 1/4\n(2) / (1/4) = 8, left: 8, 13\n(1) * (4) = 4, left: 4, 13, 2\n(4) / (1) = 4, left: 4, 13, 2\n(13) / (2) = 13/2, left: 13/2, 4\n(1) - (4) = -3, left: -3, 13, 2\n(1) + (13) = 14, left: 14, 4, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (1 + 13)) - 4)"}, {"input": "1 13 4 2\n", "output": "(4) / (13) = 4/13, left: 4/13, 1, 2\n(2) / (13) = 2/13, left: 2/13, 1, 4\n(4) - (2/13) = 50/13, left: 50/13, 1\n(1) - (4) = -3, left: -3, 13, 2\n(1) / (4) = 1/4, left: 1/4, 13, 2\n(1) - (2) = -1, left: -1, 13, 4\n(1) * (2) = 2, left: 2, 13, 4\n(1) + (13) = 14, left: 14, 4, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (1 + 13)) - 4)"}, {"input": "1 13 4 2\n", "output": "(1) / (2) = 1/2, left: 1/2, 13, 4\n(2) - (1) = 1, left: 1, 13, 4\n(4) / (1) = 4, left: 4, 13\n(13) * (4) = 52, left: 52\n(2) / (1) = 2, left: 2, 13, 4\n(1) - (2) = -1, left: -1, 13, 4\n(13) - (4) = 9, left: 9, 1, 2\n(1) * (2) = 2, left: 2, 9\n(9) + (2) = 11, left: 11\n(13) * (4) = 52, left: 52, 1, 2\n(2) / (4) = 1/2, left: 1/2, 1, 13\n(1) / (1/2) = 2, left: 2, 13\n(13) - (1) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((13 - 1) / (2 / 4))"}, {"input": "1 13 4 2\n", "output": "(4) - (13) = -9, left: -9, 1, 2\n(13) * (4) = 52, left: 52, 1, 2\n(2) - (52) = -50, left: -50, 1\n(1) * (-50) = -50, left: -50\n(4) / (13) = 4/13, left: 4/13, 1, 2\n(4) - (1) = 3, left: 3, 13, 2\n(1) * (4) = 4, left: 4, 13, 2\n(13) * (2) = 26, left: 26, 4\n(4) / (1) = 4, left: 4, 13, 2\n(2) / (4) = 1/2, left: 1/2, 13\n(2) / (1) = 2, left: 2, 13, 4\n(1) + (13) = 14, left: 14, 4, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (1 + 13)) - 4)"}, {"input": "1 13 4 2\n", "output": "(1) / (4) = 1/4, left: 1/4, 13, 2\n(1) * (4) = 4, left: 4, 13, 2\n(13) - (4) = 9, left: 9, 2\n(1) + (4) = 5, left: 5, 13, 2\n(4) / (1) = 4, left: 4, 13, 2\n(2) - (4) = -2, left: -2, 13\n(2) / (13) = 2/13, left: 2/13, 4\n(13) * (4) = 52, left: 52, 2\n(4) - (1) = 3, left: 3, 13, 2\n(1) - (4) = -3, left: -3, 13, 2\n(-3) - (2) = -5, left: -5, 13\n(1) + (13) = 14, left: 14, 4, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (1 + 13)) - 4)"}, {"input": "6 3 3 11\n", "output": "(6) + (3) = 9, left: 9, 3, 11\n(11) * (9) = 99, left: 99, 3\n(9) / (11) = 9/11, left: 9/11, 3\n(3) * (11) = 33, left: 33, 9\n(9) - (33) = -24, left: -24\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * 11) - (6 + 3))"}, {"input": "6 3 3 11\n", "output": "(11) / (3) = 11/3, left: 11/3, 6, 3\n(6) * (3) = 18, left: 18, 11/3\n(11/3) - (18) = -43/3, left: -43/3\n(3) + (11) = 14, left: 14, 6, 3\n(14) - (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 + 11) - 6))"}, {"input": "6 3 3 11\n", "output": "(6) + (3) = 9, left: 9, 3, 11\n(9) - (11) = -2, left: -2, 3\n(3) + (-2) = 1, left: 1\n(11) + (9) = 20, left: 20, 3\n(11) * (9) = 99, left: 99, 3\n(11) / (9) = 11/9, left: 11/9, 3\n(3) - (11) = -8, left: -8, 9\n(3) * (11) = 33, left: 33, 9\n(9) * (33) = 297, left: 297\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * 11) - (6 + 3))"}, {"input": "6 3 3 11\n", "output": "(11) / (3) = 11/3, left: 11/3, 6, 3\n(3) / (6) = 1/2, left: 1/2, 11/3\n(3) + (11/3) = 20/3, left: 20/3, 6\n(6) - (20/3) = -2/3, left: -2/3\n(6) * (11/3) = 22, left: 22, 3\n(6) / (11/3) = 18/11, left: 18/11, 3\n(3) / (18/11) = 11/6, left: 11/6\n(3) + (11) = 14, left: 14, 6, 3\n(14) - (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 + 11) - 6))"}, {"input": "6 3 3 11\n", "output": "(6) + (3) = 9, left: 9, 3, 11\n(11) * (9) = 99, left: 99, 3\n(9) / (11) = 9/11, left: 9/11, 3\n(11) - (9) = 2, left: 2, 3\n(3) - (9) = -6, left: -6, 11\n(3) / (9) = 1/3, left: 1/3, 11\n(9) / (3) = 3, left: 3, 11\n(9) - (3) = 6, left: 6, 11\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * 11) - (6 + 3))"}, {"input": "6 3 3 11\n", "output": "(3) + (3) = 6, left: 6, 6, 11\n(3) / (3) = 1, left: 1, 6, 11\n(3) - (3) = 0, left: 0, 6, 11\n(11) / (6) = 11/6, left: 11/6, 0\n(6) / (3) = 2, left: 2, 3, 11\n(11) - (3) = 8, left: 8, 2\n(2) - (8) = -6, left: -6\n(6) - (3) = 3, left: 3, 3, 11\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (6 - 3)))"}, {"input": "6 3 3 11\n", "output": "(6) / (3) = 2, left: 2, 3, 11\n(11) / (2) = 11/2, left: 11/2, 3\n(2) / (11) = 2/11, left: 2/11, 3\n(2) - (11) = -9, left: -9, 3\n(11) * (2) = 22, left: 22, 3\n(11) + (2) = 13, left: 13, 3\n(3) / (11) = 3/11, left: 3/11, 2\n(3) - (6) = -3, left: -3, 3, 11\n(11) + (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 + (3 - 6)))"}, {"input": "6 3 3 11\n", "output": "(3) - (3) = 0, left: 0, 6, 11\n(6) * (11) = 66, left: 66, 0\n(0) + (66) = 66, left: 66\n(3) + (3) = 6, left: 6, 6, 11\n(3) / (3) = 1, left: 1, 6, 11\n(6) - (11) = -5, left: -5, 1\n(3) / (3) = 1, left: 1, 6, 11\n(11) / (6) = 11/6, left: 11/6, 1\n(3) - (3) = 0, left: 0, 6, 11\n(6) / (3) = 2, left: 2, 3, 11\n(6) - (3) = 3, left: 3, 3, 11\n(3) - (11) = -8, left: -8, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (6 - 3)))"}, {"input": "3 4 3 5\n", "output": "(5) / (3) = 5/3, left: 5/3, 4, 3\n(3) * (5) = 15, left: 15, 4, 3\n(15) / (3) = 5, left: 5, 4\n(4) - (5) = -1, left: -1\n(3) - (4) = -1, left: -1, 15\n(3) / (5) = 3/5, left: 3/5, 4, 3\n(3) / (3/5) = 5, left: 5, 4\n(5) - (3) = 2, left: 2, 4, 3\n(4) * (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 * (5 - 3)))"}, {"input": "3 4 3 5\n", "output": "(3) / (3) = 1, left: 1, 4, 5\n(5) / (1) = 5, left: 5, 4\n(5) - (4) = 1, left: 1\n(4) / (5) = 4/5, left: 4/5\n(5) - (1) = 4, left: 4, 4\n(4) - (4) = 0, left: 0\n(1) / (5) = 1/5, left: 1/5, 4\n(4) * (1/5) = 4/5, left: 4/5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (3 / 3)))"}, {"input": "3 4 3 5\n", "output": "(4) - (3) = 1, left: 1, 3, 5\n(3) + (5) = 8, left: 8, 1\n(3) - (4) = -1, left: -1, 3, 5\n(5) - (-1) = 6, left: 6, 3\n(-1) - (5) = -6, left: -6, 3\n(3) / (4) = 3/4, left: 3/4, 3, 5\n(5) * (3/4) = 15/4, left: 15/4, 3\n(3) * (4) = 12, left: 12, 3, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 * 4) * (5 - 3))"}, {"input": "3 4 3 5\n", "output": "(3) * (4) = 12, left: 12, 3, 5\n(3) - (12) = -9, left: -9, 5\n(3) + (12) = 15, left: 15, 5\n(5) * (15) = 75, left: 75\n(3) * (12) = 36, left: 36, 5\n(3) / (5) = 3/5, left: 3/5, 12\n(3) * (5) = 15, left: 15, 12\n(12) + (15) = 27, left: 27\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 * 4) * (5 - 3))"}, {"input": "3 4 3 5\n", "output": "(4) / (3) = 4/3, left: 4/3, 3, 5\n(4) + (3) = 7, left: 7, 3, 5\n(5) / (7) = 5/7, left: 5/7, 3\n(3) - (7) = -4, left: -4, 5\n(5) - (-4) = 9, left: 9\n(4) * (3) = 12, left: 12, 3, 5\n(12) / (5) = 12/5, left: 12/5, 3\n(5) / (3) = 5/3, left: 5/3, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((4 * 3) * (5 - 3))"}, {"input": "6 7 12 13\n", "output": "(13) / (7) = 13/7, left: 13/7, 6, 12\n(7) / (13) = 7/13, left: 7/13, 6, 12\n(12) - (6) = 6, left: 6, 7/13\n(7) - (13) = -6, left: -6, 6, 12\n(12) - (-6) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (12 - (7 - 13)))"}, {"input": "6 7 12 13\n", "output": "(13) - (6) = 7, left: 7, 7, 12\n(13) / (6) = 13/6, left: 13/6, 7, 12\n(12) - (13/6) = 59/6, left: 59/6, 7\n(6) + (13) = 19, left: 19, 7, 12\n(7) - (19) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (7 - (6 + 13)))"}, {"input": "6 7 12 13\n", "output": "(6) * (7) = 42, left: 42, 12, 13\n(12) + (13) = 25, left: 25, 42\n(13) / (12) = 13/12, left: 13/12, 42\n(6) - (7) = -1, left: -1, 12, 13\n(12) + (-1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (12 + (6 - 7)))"}, {"input": "6 7 12 13\n", "output": "(7) + (13) = 20, left: 20, 6, 12\n(12) - (20) = -8, left: -8, 6\n(6) / (-8) = -3/4, left: -3/4\n(7) * (13) = 91, left: 91, 6, 12\n(12) / (91) = 12/91, left: 12/91, 6\n(12) - (91) = -79, left: -79, 6\n(7) / (13) = 7/13, left: 7/13, 6, 12\n(7) - (13) = -6, left: -6, 6, 12\n(12) - (-6) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (12 - (7 - 13)))"}, {"input": "6 7 12 13\n", "output": "(6) * (7) = 42, left: 42, 12, 13\n(42) - (12) = 30, left: 30, 13\n(7) / (6) = 7/6, left: 7/6, 12, 13\n(6) + (7) = 13, left: 13, 12, 13\n(12) - (13) = -1, left: -1, 13\n(6) / (7) = 6/7, left: 6/7, 12, 13\n(12) - (13) = -1, left: -1, 6/7\n(6) - (7) = -1, left: -1, 12, 13\n(12) + (-1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (12 + (6 - 7)))"}, {"input": "6 7 12 13\n", "output": "(6) - (12) = -6, left: -6, 7, 13\n(-6) - (7) = -13, left: -13, 13\n(13) / (-6) = -13/6, left: -13/6, 7\n(6) / (12) = 1/2, left: 1/2, 7, 13\n(1/2) - (7) = -13/2, left: -13/2, 13\n(7) + (1/2) = 15/2, left: 15/2, 13\n(6) * (12) = 72, left: 72, 7, 13\n(6) + (12) = 18, left: 18, 7, 13\n(13) + (18) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((13 + (6 + 12)) - 7)"}, {"input": "6 7 12 13\n", "output": "(6) - (13) = -7, left: -7, 7, 12\n(-7) - (12) = -19, left: -19, 7\n(6) / (13) = 6/13, left: 6/13, 7, 12\n(12) / (7) = 12/7, left: 12/7, 6/13\n(13) - (6) = 7, left: 7, 7, 12\n(7) - (12) = -5, left: -5, 7\n(-5) / (7) = -5/7, left: -5/7\n(6) + (13) = 19, left: 19, 7, 12\n(7) - (19) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (7 - (6 + 13)))"}, {"input": "6 7 12 13\n", "output": "(6) / (12) = 1/2, left: 1/2, 7, 13\n(13) + (1/2) = 27/2, left: 27/2, 7\n(1/2) / (13) = 1/26, left: 1/26, 7\n(12) - (6) = 6, left: 6, 7, 13\n(12) / (6) = 2, left: 2, 7, 13\n(13) + (2) = 15, left: 15, 7\n(6) * (12) = 72, left: 72, 7, 13\n(6) + (12) = 18, left: 18, 7, 13\n(13) + (18) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((13 + (6 + 12)) - 7)"}, {"input": "4 7 5 7\n", "output": "(4) + (7) = 11, left: 11, 5, 7\n(5) / (7) = 5/7, left: 5/7, 11\n(11) * (5/7) = 55/7, left: 55/7\n(5) * (7) = 35, left: 35, 11\n(11) / (35) = 11/35, left: 11/35\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (4 + 7))"}, {"input": "4 7 5 7\n", "output": "(7) - (4) = 3, left: 3, 5, 7\n(4) - (7) = -3, left: -3, 5, 7\n(7) / (4) = 7/4, left: 7/4, 5, 7\n(7) - (5) = 2, left: 2, 7/4\n(4) / (7) = 4/7, left: 4/7, 5, 7\n(5) * (4/7) = 20/7, left: 20/7, 7\n(4) + (7) = 11, left: 11, 5, 7\n(7) - (5) = 2, left: 2, 11\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (4 + 7))"}, {"input": "4 7 5 7\n", "output": "(4) + (7) = 11, left: 11, 5, 7\n(5) / (7) = 5/7, left: 5/7, 11\n(11) + (5/7) = 82/7, left: 82/7\n(5/7) / (11) = 5/77, left: 5/77\n(5/7) - (11) = -72/7, left: -72/7\n(11) / (5/7) = 77/5, left: 77/5\n(5) * (7) = 35, left: 35, 11\n(11) / (35) = 11/35, left: 11/35\n(11) * (35) = 385, left: 385\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (4 + 7))"}, {"input": "4 7 5 7\n", "output": "(5) / (7) = 5/7, left: 5/7, 4, 7\n(4) - (7) = -3, left: -3, 5/7\n(4) * (7) = 28, left: 28, 5/7\n(5) - (7) = -2, left: -2, 4, 7\n(7) + (-2) = 5, left: 5, 4\n(4) * (-2) = -8, left: -8, 7\n(5) * (7) = 35, left: 35, 4, 7\n(4) + (35) = 39, left: 39, 7\n(35) - (4) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: (((5 * 7) - 4) - 7)"}, {"input": "4 7 5 7\n", "output": "(7) + (7) = 14, left: 14, 4, 5\n(4) + (5) = 9, left: 9, 14\n(4) / (5) = 4/5, left: 4/5, 14\n(5) + (14) = 19, left: 19, 4\n(5) * (14) = 70, left: 70, 4\n(4) + (70) = 74, left: 74\n(7) / (7) = 1, left: 1, 4, 5\n(1) - (4) = -3, left: -3, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (7 / 7)))"}, {"input": "4 7 5 7\n", "output": "(7) * (7) = 49, left: 49, 4, 5\n(4) * (5) = 20, left: 20, 49\n(7) - (7) = 0, left: 0, 4, 5\n(7) - (7) = 0, left: 0, 4, 5\n(4) + (0) = 4, left: 4, 5\n(7) / (7) = 1, left: 1, 4, 5\n(4) * (1) = 4, left: 4, 5\n(5) / (1) = 5, left: 5, 4\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (7 / 7)))"}, {"input": "4 7 5 7\n", "output": "(7) * (7) = 49, left: 49, 4, 5\n(4) / (5) = 4/5, left: 4/5, 49\n(4) * (49) = 196, left: 196, 5\n(7) - (7) = 0, left: 0, 4, 5\n(5) - (4) = 1, left: 1, 0\n(4) - (0) = 4, left: 4, 5\n(0) - (5) = -5, left: -5, 4\n(4) * (-5) = -20, left: -20\n(7) - (7) = 0, left: 0, 4, 5\n(7) / (7) = 1, left: 1, 4, 5\n(5) - (4) = 1, left: 1, 1\n(5) - (1) = 4, left: 4, 4\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (7 / 7)))"}, {"input": "4 5 5 8\n", "output": "(4) * (5) = 20, left: 20, 5, 8\n(5) / (8) = 5/8, left: 5/8, 20\n(4) / (5) = 4/5, left: 4/5, 5, 8\n(5) / (8) = 5/8, left: 5/8, 4/5\n(4) * (5) = 20, left: 20, 5, 8\n(4) + (8) = 12, left: 12, 5, 5\n(12) - (5) = 7, left: 7, 5\n(5) / (5) = 1, left: 1, 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(4) + (8) = 12, left: 12, 5, 5\n(4) - (8) = -4, left: -4, 5, 5\n(8) / (4) = 2, left: 2, 5, 5\n(5) / (2) = 5/2, left: 5/2, 5\n(5) + (5) = 10, left: 10, 4, 8\n(5) - (5) = 0, left: 0, 4, 8\n(5) - (5) = 0, left: 0, 4, 8\n(5) / (5) = 1, left: 1, 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(5) - (8) = -3, left: -3, 4, 5\n(4) + (-3) = 1, left: 1, 5\n(5) / (4) = 5/4, left: 5/4, 5, 8\n(8) * (5/4) = 10, left: 10, 5\n(4) / (5) = 4/5, left: 4/5, 5, 8\n(5) + (5) = 10, left: 10, 4, 8\n(4) - (10) = -6, left: -6, 8\n(5) / (5) = 1, left: 1, 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(5) - (5) = 0, left: 0, 4, 8\n(8) * (0) = 0, left: 0, 4\n(0) - (4) = -4, left: -4, 8\n(8) / (4) = 2, left: 2, 0\n(5) / (5) = 1, left: 1, 4, 8\n(4) - (8) = -4, left: -4, 1\n(1) / (-4) = -1/4, left: -1/4\n(1) - (4) = -3, left: -3, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 4, 5\n(5) - (8) = -3, left: -3, 4, 5\n(4) * (5) = 20, left: 20, 5, 8\n(4) + (5) = 9, left: 9, 5, 8\n(5) + (9) = 14, left: 14, 8\n(4) / (8) = 1/2, left: 1/2, 5, 5\n(5) + (5) = 10, left: 10, 1/2\n(5) / (5) = 1, left: 1, 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(4) - (5) = -1, left: -1, 5, 8\n(8) - (-1) = 9, left: 9, 5\n(8) / (5) = 8/5, left: 8/5, -1\n(4) * (5) = 20, left: 20, 5, 8\n(5) / (4) = 5/4, left: 5/4, 5, 8\n(4) + (5) = 9, left: 9, 5, 8\n(4) * (5) = 20, left: 20, 5, 8\n(5) / (4) = 5/4, left: 5/4, 5, 8\n(4) - (5) = -1, left: -1, 5, 8\n(4) + (8) = 12, left: 12, 5, 5\n(5) / (12) = 5/12, left: 5/12, 5\n(5) / (5) = 1, left: 1, 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(5) + (8) = 13, left: 13, 4, 5\n(8) - (5) = 3, left: 3, 4, 5\n(4) - (5) = -1, left: -1, 3\n(8) - (5) = 3, left: 3, 4, 5\n(5) - (8) = -3, left: -3, 4, 5\n(5) - (-3) = 8, left: 8, 4\n(4) / (5) = 4/5, left: 4/5, 5, 8\n(4) * (5) = 20, left: 20, 5, 8\n(5) / (4) = 5/4, left: 5/4, 5, 8\n(4) + (5) = 9, left: 9, 5, 8\n(5) - (8) = -3, left: -3, 9\n(5) / (5) = 1, left: 1, 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(5) - (5) = 0, left: 0, 4, 8\n(8) + (0) = 8, left: 8, 4\n(4) - (0) = 4, left: 4, 8\n(8) / (4) = 2, left: 2, 0\n(4) - (8) = -4, left: -4, 0\n(5) / (5) = 1, left: 1, 4, 8\n(4) / (8) = 1/2, left: 1/2, 1\n(4) - (8) = -4, left: -4, 1\n(8) - (4) = 4, left: 4, 1\n(1) - (4) = -3, left: -3\n(1) - (4) = -3, left: -3, 8\n(8) + (-3) = 5, left: 5\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(4) + (8) = 12, left: 12, 5, 5\n(5) / (12) = 5/12, left: 5/12, 5\n(8) / (4) = 2, left: 2, 5, 5\n(4) * (8) = 32, left: 32, 5, 5\n(5) * (32) = 160, left: 160, 5\n(8) - (4) = 4, left: 4, 5, 5\n(5) / (5) = 1, left: 1, 4\n(5) - (5) = 0, left: 0, 4\n(4) * (0) = 0, left: 0\n(5) - (5) = 0, left: 0, 4, 8\n(5) - (5) = 0, left: 0, 4, 8\n(5) / (5) = 1, left: 1, 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(5) + (8) = 13, left: 13, 4, 5\n(5) * (13) = 65, left: 65, 4\n(5) / (8) = 5/8, left: 5/8, 4, 5\n(8) / (5) = 8/5, left: 8/5, 4, 5\n(5) - (4) = 1, left: 1, 5, 8\n(1) - (8) = -7, left: -7, 5\n(4) + (5) = 9, left: 9, 5, 8\n(5) * (9) = 45, left: 45, 8\n(4) * (5) = 20, left: 20, 5, 8\n(4) - (5) = -1, left: -1, 5, 8\n(5) + (8) = 13, left: 13, -1\n(5) / (5) = 1, left: 1, 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "2 10 12 7\n", "output": "(2) / (7) = 2/7, left: 2/7, 10, 12\n(10) - (12) = -2, left: -2, 2/7\n(10) + (12) = 22, left: 22, 2/7\n(7) - (2) = 5, left: 5, 10, 12\n(5) / (12) = 5/12, left: 5/12, 10\n(10) / (5/12) = 24, left: 24\nreach 24! expression: (10 / ((7 - 2) / 12))"}, {"input": "2 10 12 7\n", "output": "(10) / (2) = 5, left: 5, 12, 7\n(7) - (12) = -5, left: -5, 5\n(7) / (12) = 7/12, left: 7/12, 5\n(12) - (7) = 5, left: 5, 5\n(12) + (7) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((10 / 2) + (12 + 7))"}, {"input": "2 10 12 7\n", "output": "(7) - (2) = 5, left: 5, 10, 12\n(10) - (12) = -2, left: -2, 5\n(5) - (-2) = 7, left: 7\n(5) + (-2) = 3, left: 3\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (7 - 2))"}, {"input": "2 10 12 7\n", "output": "(7) - (2) = 5, left: 5, 10, 12\n(10) - (12) = -2, left: -2, 5\n(5) - (-2) = 7, left: 7\n(5) + (-2) = 3, left: 3\n(5) * (-2) = -10, left: -10\n(10) * (12) = 120, left: 120, 5\n(5) * (120) = 600, left: 600\n(5) / (120) = 1/24, left: 1/24\n(5) - (120) = -115, left: -115\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (7 - 2))"}, {"input": "2 10 12 7\n", "output": "(10) * (7) = 70, left: 70, 2, 12\n(2) + (12) = 14, left: 14, 70\n(2) / (12) = 1/6, left: 1/6, 10, 7\n(1/6) / (7) = 1/42, left: 1/42, 10\n(10) + (1/6) = 61/6, left: 61/6, 7\n(12) - (2) = 10, left: 10, 10, 7\n(12) / (7) = 12/7, left: 12/7, 2, 10\n(12) + (7) = 19, left: 19, 2, 10\n(10) / (2) = 5, left: 5, 19\n(19) + (5) = 24, left: 24\nreach 24! expression: ((12 + 7) + (10 / 2))"}, {"input": "2 10 12 7\n", "output": "(2) / (7) = 2/7, left: 2/7, 10, 12\n(12) + (2/7) = 86/7, left: 86/7, 10\n(2/7) - (12) = -82/7, left: -82/7, 10\n(2) * (7) = 14, left: 14, 10, 12\n(2) + (7) = 9, left: 9, 10, 12\n(9) / (12) = 3/4, left: 3/4, 10\n(2) - (7) = -5, left: -5, 10, 12\n(7) - (2) = 5, left: 5, 10, 12\n(5) / (12) = 5/12, left: 5/12, 10\n(10) / (5/12) = 24, left: 24\nreach 24! expression: (10 / ((7 - 2) / 12))"}, {"input": "2 10 12 7\n", "output": "(10) / (2) = 5, left: 5, 12, 7\n(7) - (12) = -5, left: -5, 5\n(7) / (12) = 7/12, left: 7/12, 5\n(7/12) / (5) = 7/60, left: 7/60\n(5) * (7/12) = 35/12, left: 35/12\n(12) - (7) = 5, left: 5, 5\n(5) / (5) = 1, left: 1\n(5) - (5) = 0, left: 0\n(12) + (7) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((10 / 2) + (12 + 7))"}, {"input": "2 10 12 7\n", "output": "(7) / (12) = 7/12, left: 7/12, 2, 10\n(12) * (7) = 84, left: 84, 2, 10\n(10) * (84) = 840, left: 840, 2\n(12) - (7) = 5, left: 5, 2, 10\n(10) * (5) = 50, left: 50, 2\n(10) - (5) = 5, left: 5, 2\n(12) + (7) = 19, left: 19, 2, 10\n(19) - (2) = 17, left: 17, 10\n(10) / (2) = 5, left: 5, 19\n(19) + (5) = 24, left: 24\nreach 24! expression: ((12 + 7) + (10 / 2))"}, {"input": "9 4 1 13\n", "output": "(1) - (13) = -12, left: -12, 9, 4\n(4) - (-12) = 16, left: 16, 9\n(-12) / (4) = -3, left: -3, 9\n(-12) / (9) = -4/3, left: -4/3, 4\n(9) * (4) = 36, left: 36, -12\n(-12) + (36) = 24, left: 24\nreach 24! expression: ((1 - 13) + (9 * 4))"}, {"input": "9 4 1 13\n", "output": "(4) / (9) = 4/9, left: 4/9, 1, 13\n(13) * (4/9) = 52/9, left: 52/9, 1\n(1) / (4/9) = 9/4, left: 9/4, 13\n(9) * (4) = 36, left: 36, 1, 13\n(13) - (36) = -23, left: -23, 1\n(1) - (-23) = 24, left: 24\nreach 24! expression: (1 - (13 - (9 * 4)))"}, {"input": "9 4 1 13\n", "output": "(4) + (13) = 17, left: 17, 9, 1\n(13) / (4) = 13/4, left: 13/4, 9, 1\n(9) + (1) = 10, left: 10, 13/4\n(9) + (13/4) = 49/4, left: 49/4, 1\n(4) / (13) = 4/13, left: 4/13, 9, 1\n(1) + (4/13) = 17/13, left: 17/13, 9\n(1) * (13) = 13, left: 13, 9, 4\n(1) - (13) = -12, left: -12, 9, 4\n(9) * (4) = 36, left: 36, -12\n(-12) + (36) = 24, left: 24\nreach 24! expression: ((1 - 13) + (9 * 4))"}, {"input": "9 4 1 13\n", "output": "(4) - (9) = -5, left: -5, 1, 13\n(1) - (-5) = 6, left: 6, 13\n(-5) - (13) = -18, left: -18, 1\n(4) / (9) = 4/9, left: 4/9, 1, 13\n(13) / (1) = 13, left: 13, 4/9\n(4/9) * (13) = 52/9, left: 52/9\n(4/9) - (1) = -5/9, left: -5/9, 13\n(9) * (4) = 36, left: 36, 1, 13\n(13) - (36) = -23, left: -23, 1\n(1) - (-23) = 24, left: 24\nreach 24! expression: (1 - (13 - (9 * 4)))"}, {"input": "9 4 1 13\n", "output": "(4) / (9) = 4/9, left: 4/9, 1, 13\n(9) - (4) = 5, left: 5, 1, 13\n(5) / (13) = 5/13, left: 5/13, 1\n(1) + (5) = 6, left: 6, 13\n(1) * (13) = 13, left: 13, 5\n(5) - (13) = -8, left: -8\n(13) - (1) = 12, left: 12, 5\n(9) * (4) = 36, left: 36, 1, 13\n(1) + (36) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((1 + (9 * 4)) - 13)"}, {"input": "9 4 1 13\n", "output": "(1) - (13) = -12, left: -12, 9, 4\n(4) - (-12) = 16, left: 16, 9\n(9) * (16) = 144, left: 144\n(4) + (-12) = -8, left: -8, 9\n(4) / (-12) = -1/3, left: -1/3, 9\n(-12) / (4) = -3, left: -3, 9\n(9) - (-12) = 21, left: 21, 4\n(9) + (4) = 13, left: 13, -12\n(9) * (4) = 36, left: 36, -12\n(-12) + (36) = 24, left: 24\nreach 24! expression: ((1 - 13) + (9 * 4))"}, {"input": "9 4 1 13\n", "output": "(9) * (1) = 9, left: 9, 4, 13\n(4) * (9) = 36, left: 36, 13\n(1) / (9) = 1/9, left: 1/9, 4, 13\n(4) + (13) = 17, left: 17, 1/9\n(1) / (4) = 1/4, left: 1/4, 9, 13\n(4) - (1) = 3, left: 3, 9, 13\n(4) * (1) = 4, left: 4, 9, 13\n(1) - (13) = -12, left: -12, 9, 4\n(9) * (4) = 36, left: 36, -12\n(-12) + (36) = 24, left: 24\nreach 24! expression: ((1 - 13) + (9 * 4))"}, {"input": "9 4 1 13\n", "output": "(9) + (1) = 10, left: 10, 4, 13\n(13) - (10) = 3, left: 3, 4\n(9) / (1) = 9, left: 9, 4, 13\n(13) * (9) = 117, left: 117, 4\n(1) - (9) = -8, left: -8, 4, 13\n(13) - (4) = 9, left: 9, -8\n(1) / (4) = 1/4, left: 1/4, 9, 13\n(4) / (1) = 4, left: 4, 9, 13\n(1) - (4) = -3, left: -3, 9, 13\n(4) * (1) = 4, left: 4, 9, 13\n(9) * (13) = 117, left: 117, 4\n(1) - (13) = -12, left: -12, 9, 4\n(9) * (4) = 36, left: 36, -12\n(-12) + (36) = 24, left: 24\nreach 24! expression: ((1 - 13) + (9 * 4))"}, {"input": "12 2 9 13\n", "output": "(13) - (2) = 11, left: 11, 12, 9\n(9) / (12) = 3/4, left: 3/4, 11\n(3/4) / (11) = 3/44, left: 3/44\n(12) * (9) = 108, left: 108, 11\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 2) - 9))"}, {"input": "12 2 9 13\n", "output": "(9) * (13) = 117, left: 117, 12, 2\n(2) / (12) = 1/6, left: 1/6, 117\n(9) + (13) = 22, left: 22, 12, 2\n(13) - (9) = 4, left: 4, 12, 2\n(4) / (2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 9) / 2))"}, {"input": "12 2 9 13\n", "output": "(9) - (2) = 7, left: 7, 12, 13\n(2) * (9) = 18, left: 18, 12, 13\n(2) - (9) = -7, left: -7, 12, 13\n(13) - (12) = 1, left: 1, -7\n(-7) - (12) = -19, left: -19, 13\n(13) * (-19) = -247, left: -247\n(2) + (9) = 11, left: 11, 12, 13\n(12) + (11) = 23, left: 23, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 - (2 + 9)))"}, {"input": "12 2 9 13\n", "output": "(12) - (2) = 10, left: 10, 9, 13\n(9) * (13) = 117, left: 117, 10\n(13) / (10) = 13/10, left: 13/10, 9\n(2) - (12) = -10, left: -10, 9, 13\n(9) * (-10) = -90, left: -90, 13\n(13) * (-90) = -1170, left: -1170\n(-10) - (13) = -23, left: -23, 9\n(12) / (2) = 6, left: 6, 9, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((12 / 2) * (13 - 9))"}, {"input": "12 2 9 13\n", "output": "(12) - (13) = -1, left: -1, 2, 9\n(-1) / (2) = -1/2, left: -1/2, 9\n(2) * (-1) = -2, left: -2, 9\n(12) * (13) = 156, left: 156, 2, 9\n(156) - (2) = 154, left: 154, 9\n(12) / (13) = 12/13, left: 12/13, 2, 9\n(2) * (9) = 18, left: 18, 12/13\n(2) + (9) = 11, left: 11, 12, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 - (2 + 9)))"}, {"input": "12 2 9 13\n", "output": "(9) * (13) = 117, left: 117, 12, 2\n(12) / (2) = 6, left: 6, 117\n(9) + (13) = 22, left: 22, 12, 2\n(12) * (22) = 264, left: 264, 2\n(2) * (22) = 44, left: 44, 12\n(13) / (9) = 13/9, left: 13/9, 12, 2\n(2) - (12) = -10, left: -10, 13/9\n(13) - (9) = 4, left: 4, 12, 2\n(4) / (2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 9) / 2))"}, {"input": "12 2 9 13\n", "output": "(13) - (2) = 11, left: 11, 12, 9\n(9) / (12) = 3/4, left: 3/4, 11\n(3/4) / (11) = 3/44, left: 3/44\n(9) - (12) = -3, left: -3, 11\n(-3) - (11) = -14, left: -14\n(11) - (-3) = 14, left: 14\n(12) * (9) = 108, left: 108, 11\n(11) - (9) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 2) - 9))"}, {"input": "8 4 1 12\n", "output": "(8) / (12) = 2/3, left: 2/3, 4, 1\n(4) * (1) = 4, left: 4, 2/3\n(2/3) + (4) = 14/3, left: 14/3\n(8) * (12) = 96, left: 96, 4, 1\n(1) / (4) = 1/4, left: 1/4, 96\n(96) * (1/4) = 24, left: 24\nreach 24! expression: ((8 * 12) * (1 / 4))"}, {"input": "8 4 1 12\n", "output": "(1) / (8) = 1/8, left: 1/8, 4, 12\n(1/8) / (4) = 1/32, left: 1/32, 12\n(12) + (1/32) = 385/32, left: 385/32\n(12) - (1/32) = 383/32, left: 383/32\n(4) * (1/8) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (4 * (1 / 8)))"}, {"input": "8 4 1 12\n", "output": "(4) - (8) = -4, left: -4, 1, 12\n(1) / (12) = 1/12, left: 1/12, -4\n(1) - (12) = -11, left: -11, -4\n(4) / (8) = 1/2, left: 1/2, 1, 12\n(12) / (1/2) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 / (4 / 8)) / 1)"}, {"input": "8 4 1 12\n", "output": "(8) / (12) = 2/3, left: 2/3, 4, 1\n(4) * (1) = 4, left: 4, 2/3\n(1) * (2/3) = 2/3, left: 2/3, 4\n(2/3) / (4) = 1/6, left: 1/6, 1\n(12) / (8) = 3/2, left: 3/2, 4, 1\n(1) / (3/2) = 2/3, left: 2/3, 4\n(1) - (4) = -3, left: -3, 3/2\n(8) * (12) = 96, left: 96, 4, 1\n(1) / (4) = 1/4, left: 1/4, 96\n(96) * (1/4) = 24, left: 24\nreach 24! expression: ((8 * 12) * (1 / 4))"}, {"input": "8 4 1 12\n", "output": "(1) / (8) = 1/8, left: 1/8, 4, 12\n(1/8) / (4) = 1/32, left: 1/32, 12\n(12) - (1/32) = 383/32, left: 383/32\n(12) / (1/32) = 384, left: 384\n(4) * (1/8) = 1/2, left: 1/2, 12\n(1/2) / (12) = 1/24, left: 1/24\n(12) * (1/2) = 6, left: 6\n(1/2) - (12) = -23/2, left: -23/2\n(12) - (1/2) = 23/2, left: 23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (4 * (1 / 8)))"}, {"input": "8 4 1 12\n", "output": "(4) - (8) = -4, left: -4, 1, 12\n(12) - (-4) = 16, left: 16, 1\n(1) + (16) = 17, left: 17\n(1) * (-4) = -4, left: -4, 12\n(12) / (-4) = -3, left: -3\n(1) / (12) = 1/12, left: 1/12, -4\n(-4) / (1/12) = -48, left: -48\n(4) / (8) = 1/2, left: 1/2, 1, 12\n(12) / (1/2) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 / (4 / 8)) / 1)"}, {"input": "8 4 1 12\n", "output": "(4) - (12) = -8, left: -8, 8, 1\n(-8) - (8) = -16, left: -16, 1\n(1) - (-8) = 9, left: 9, 8\n(8) + (9) = 17, left: 17\n(8) * (1) = 8, left: 8, -8\n(-8) + (8) = 0, left: 0\n(8) - (1) = 7, left: 7, -8\n(4) + (12) = 16, left: 16, 8, 1\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((4 + 12) / 1))"}, {"input": "8 4 1 12\n", "output": "(4) - (12) = -8, left: -8, 8, 1\n(8) / (-8) = -1, left: -1, 1\n(8) - (-8) = 16, left: 16, 1\n(-8) / (1) = -8, left: -8, 8\n(1) - (-8) = 9, left: 9, 8\n(8) * (1) = 8, left: 8, -8\n(8) - (1) = 7, left: 7, -8\n(4) + (12) = 16, left: 16, 8, 1\n(8) / (1) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((4 + 12) + (8 / 1))"}, {"input": "2 2 6 10\n", "output": "(2) - (6) = -4, left: -4, 2, 10\n(2) / (10) = 1/5, left: 1/5, -4\n(2) + (10) = 12, left: 12, -4\n(12) - (-4) = 16, left: 16\n(2) * (10) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((2 * 10) - (2 - 6))"}, {"input": "2 2 6 10\n", "output": "(2) * (10) = 20, left: 20, 2, 6\n(2) * (6) = 12, left: 12, 20\n(6) / (2) = 3, left: 3, 20\n(20) - (3) = 17, left: 17\n(6) - (2) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((2 * 10) + (6 - 2))"}, {"input": "2 2 6 10\n", "output": "(2) - (10) = -8, left: -8, 2, 6\n(2) - (6) = -4, left: -4, -8\n(-4) - (-8) = 4, left: 4\n(2) / (10) = 1/5, left: 1/5, 2, 6\n(6) / (2) = 3, left: 3, 1/5\n(2) / (1/5) = 10, left: 10, 6\n(6) - (1/5) = 29/5, left: 29/5, 2\n(10) - (2) = 8, left: 8, 2, 6\n(2) / (6) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((10 - 2) / (2 / 6))"}, {"input": "2 2 6 10\n", "output": "(2) * (10) = 20, left: 20, 2, 6\n(2) + (6) = 8, left: 8, 20\n(20) + (8) = 28, left: 28\n(2) * (6) = 12, left: 12, 20\n(20) / (12) = 5/3, left: 5/3\n(2) / (6) = 1/3, left: 1/3, 20\n(1/3) - (20) = -59/3, left: -59/3\n(6) - (2) = 4, left: 4, 20\n(20) * (4) = 80, left: 80\n(20) + (4) = 24, left: 24\nreach 24! expression: ((2 * 10) + (6 - 2))"}, {"input": "2 2 6 10\n", "output": "(10) / (6) = 5/3, left: 5/3, 2, 2\n(6) / (10) = 3/5, left: 3/5, 2, 2\n(2) / (2) = 1, left: 1, 3/5\n(3/5) - (1) = -2/5, left: -2/5\n(2) * (2) = 4, left: 4, 6, 10\n(2) / (2) = 1, left: 1, 6, 10\n(2) + (2) = 4, left: 4, 6, 10\n(6) - (2) = 4, left: 4, 2, 10\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((6 - 2) + (2 * 10))"}, {"input": "2 2 6 10\n", "output": "(2) - (6) = -4, left: -4, 2, 10\n(2) / (10) = 1/5, left: 1/5, -4\n(-4) - (1/5) = -21/5, left: -21/5\n(2) + (10) = 12, left: 12, -4\n(-4) / (12) = -1/3, left: -1/3\n(12) / (-4) = -3, left: -3\n(10) / (2) = 5, left: 5, -4\n(-4) + (5) = 1, left: 1\n(2) * (10) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((2 * 10) - (2 - 6))"}, {"input": "2 2 6 10\n", "output": "(6) / (2) = 3, left: 3, 2, 10\n(3) - (2) = 1, left: 1, 10\n(3) - (10) = -7, left: -7, 2\n(2) + (-7) = -5, left: -5\n(10) - (3) = 7, left: 7, 2\n(10) * (3) = 30, left: 30, 2\n(10) / (3) = 10/3, left: 10/3, 2\n(10/3) / (2) = 5/3, left: 5/3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 / 2) * (10 - 2))"}, {"input": "2 2 6 10\n", "output": "(10) - (6) = 4, left: 4, 2, 2\n(2) * (4) = 8, left: 8, 2\n(10) / (6) = 5/3, left: 5/3, 2, 2\n(6) - (10) = -4, left: -4, 2, 2\n(-4) / (2) = -2, left: -2, 2\n(2) + (2) = 4, left: 4, 6, 10\n(10) - (4) = 6, left: 6, 6\n(2) / (2) = 1, left: 1, 6, 10\n(6) * (10) = 60, left: 60, 1\n(10) - (6) = 4, left: 4, 1\n(6) + (1) = 7, left: 7, 10\n(6) - (2) = 4, left: 4, 2, 10\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((6 - 2) + (2 * 10))"}, {"input": "3 12 4 12\n", "output": "(3) * (4) = 12, left: 12, 12, 12\n(12) + (12) = 24, left: 24, 12\n(12) / (12) = 1, left: 1, 12\n(4) - (3) = 1, left: 1, 12, 12\n(12) * (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (12 * (4 - 3)))"}, {"input": "3 12 4 12\n", "output": "(3) / (12) = 1/4, left: 1/4, 12, 4\n(1/4) / (12) = 1/48, left: 1/48, 4\n(3) + (12) = 15, left: 15, 12, 4\n(12) * (4) = 48, left: 48, 15\n(12) * (15) = 180, left: 180, 4\n(12) - (15) = -3, left: -3, 4\n(12) / (3) = 4, left: 4, 12, 4\n(12) - (3) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (12 - 3)) - 12)"}, {"input": "3 12 4 12\n", "output": "(12) - (4) = 8, left: 8, 3, 12\n(12) - (8) = 4, left: 4, 3\n(12) / (4) = 3, left: 3, 3, 12\n(4) - (12) = -8, left: -8, 3, 12\n(4) + (12) = 16, left: 16, 3, 12\n(4) / (12) = 1/3, left: 1/3, 3, 12\n(1/3) - (3) = -8/3, left: -8/3, 12\n(3) - (4) = -1, left: -1, 12, 12\n(12) * (-1) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (12 * (3 - 4)))"}, {"input": "3 12 4 12\n", "output": "(12) + (4) = 16, left: 16, 3, 12\n(16) - (3) = 13, left: 13, 12\n(12) * (4) = 48, left: 48, 3, 12\n(12) - (4) = 8, left: 8, 3, 12\n(3) + (12) = 15, left: 15, 4, 12\n(3) / (12) = 1/4, left: 1/4, 4, 12\n(4) + (12) = 16, left: 16, 1/4\n(12) - (3) = 9, left: 9, 4, 12\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (12 - 3)) - 12)"}, {"input": "3 12 4 12\n", "output": "(4) / (3) = 4/3, left: 4/3, 12, 12\n(12) / (12) = 1, left: 1, 4/3\n(4/3) - (1) = 1/3, left: 1/3\n(12) - (4/3) = 32/3, left: 32/3, 12\n(12) / (4/3) = 9, left: 9, 12\n(12) / (4/3) = 9, left: 9, 12\n(9) / (12) = 3/4, left: 3/4\n(4) - (3) = 1, left: 1, 12, 12\n(12) * (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (12 * (4 - 3)))"}, {"input": "3 12 4 12\n", "output": "(12) / (3) = 4, left: 4, 12, 4\n(4) / (12) = 1/3, left: 1/3, 4\n(4) + (1/3) = 13/3, left: 13/3\n(3) / (12) = 1/4, left: 1/4, 12, 4\n(1/4) - (12) = -47/4, left: -47/4, 4\n(12) * (1/4) = 3, left: 3, 4\n(12) - (3) = 9, left: 9, 12, 4\n(12) - (4) = 8, left: 8, 9\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (12 - 3)) - 12)"}, {"input": "8 12 13 3\n", "output": "(12) / (13) = 12/13, left: 12/13, 8, 3\n(12) * (13) = 156, left: 156, 8, 3\n(156) / (3) = 52, left: 52, 8\n(13) - (12) = 1, left: 1, 8, 3\n(8) * (3) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * 3) / (13 - 12))"}, {"input": "8 12 13 3\n", "output": "(12) / (8) = 3/2, left: 3/2, 13, 3\n(13) + (3/2) = 29/2, left: 29/2, 3\n(3/2) - (3) = -3/2, left: -3/2, 13\n(13) - (-3/2) = 29/2, left: 29/2\n(13) + (3) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((12 / 8) * (13 + 3))"}, {"input": "8 12 13 3\n", "output": "(13) - (12) = 1, left: 1, 8, 3\n(3) / (8) = 3/8, left: 3/8, 1\n(8) + (3) = 11, left: 11, 1\n(1) + (11) = 12, left: 12\n(8) * (3) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * 3) / (13 - 12))"}, {"input": "8 12 13 3\n", "output": "(12) / (8) = 3/2, left: 3/2, 13, 3\n(13) / (3/2) = 26/3, left: 26/3, 3\n(13) + (3/2) = 29/2, left: 29/2, 3\n(3/2) / (3) = 1/2, left: 1/2, 13\n(1/2) / (13) = 1/26, left: 1/26\n(3) - (3/2) = 3/2, left: 3/2, 13\n(3) + (3/2) = 9/2, left: 9/2, 13\n(3) / (13) = 3/13, left: 3/13, 3/2\n(13) + (3) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((12 / 8) * (13 + 3))"}, {"input": "8 12 13 3\n", "output": "(12) / (13) = 12/13, left: 12/13, 8, 3\n(8) - (12/13) = 92/13, left: 92/13, 3\n(92/13) / (3) = 92/39, left: 92/39\n(12) - (13) = -1, left: -1, 8, 3\n(8) * (3) = 24, left: 24, -1\n(13) / (12) = 13/12, left: 13/12, 8, 3\n(13/12) / (3) = 13/36, left: 13/36, 8\n(13) - (12) = 1, left: 1, 8, 3\n(8) * (3) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * 3) / (13 - 12))"}, {"input": "8 12 13 3\n", "output": "(8) - (3) = 5, left: 5, 12, 13\n(13) - (5) = 8, left: 8, 12\n(12) + (8) = 20, left: 20\n(5) / (13) = 5/13, left: 5/13, 12\n(13) * (5) = 65, left: 65, 12\n(12) + (13) = 25, left: 25, 5\n(25) - (5) = 20, left: 20\n(8) + (3) = 11, left: 11, 12, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 - (8 + 3)))"}, {"input": "8 12 13 3\n", "output": "(13) - (12) = 1, left: 1, 8, 3\n(3) / (8) = 3/8, left: 3/8, 1\n(1) / (3/8) = 8/3, left: 8/3\n(8) + (3) = 11, left: 11, 1\n(11) - (1) = 10, left: 10\n(1) - (11) = -10, left: -10\n(1) * (11) = 11, left: 11\n(8) * (3) = 24, left: 24, 1\n(24) - (1) = 23, left: 23\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * 3) / (13 - 12))"}, {"input": "8 12 13 3\n", "output": "(8) / (3) = 8/3, left: 8/3, 12, 13\n(8) - (3) = 5, left: 5, 12, 13\n(12) - (5) = 7, left: 7, 13\n(13) - (7) = 6, left: 6\n(8) + (3) = 11, left: 11, 12, 13\n(12) - (11) = 1, left: 1, 13\n(13) + (1) = 14, left: 14\n(12) * (13) = 156, left: 156, 11\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 - (8 + 3)))"}, {"input": "12 13 10 1\n", "output": "(12) - (13) = -1, left: -1, 10, 1\n(-1) - (10) = -11, left: -11, 1\n(1) + (-11) = -10, left: -10\n(10) + (1) = 11, left: 11, 12, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 - (10 + 1)))"}, {"input": "12 13 10 1\n", "output": "(1) / (13) = 1/13, left: 1/13, 12, 10\n(12) + (1/13) = 157/13, left: 157/13, 10\n(13) + (1) = 14, left: 14, 12, 10\n(13) - (1) = 12, left: 12, 12, 10\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((13 - 1) * (12 - 10))"}, {"input": "12 13 10 1\n", "output": "(13) * (10) = 130, left: 130, 12, 1\n(1) * (130) = 130, left: 130, 12\n(13) - (10) = 3, left: 3, 12, 1\n(1) + (3) = 4, left: 4, 12\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 10) - 1))"}, {"input": "12 13 10 1\n", "output": "(13) * (10) = 130, left: 130, 12, 1\n(12) * (1) = 12, left: 12, 130\n(13) - (10) = 3, left: 3, 12, 1\n(12) - (3) = 9, left: 9, 1\n(12) + (3) = 15, left: 15, 1\n(1) + (15) = 16, left: 16\n(12) / (3) = 4, left: 4, 1\n(1) - (12) = -11, left: -11, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 10) - 1))"}, {"input": "12 13 10 1\n", "output": "(1) / (10) = 1/10, left: 1/10, 12, 13\n(1) - (10) = -9, left: -9, 12, 13\n(12) + (-9) = 3, left: 3, 13\n(10) * (1) = 10, left: 10, 12, 13\n(10) - (13) = -3, left: -3, 12\n(10) / (1) = 10, left: 10, 12, 13\n(10) - (12) = -2, left: -2, 13\n(10) + (1) = 11, left: 11, 12, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 - (10 + 1)))"}, {"input": "12 13 10 1\n", "output": "(12) / (13) = 12/13, left: 12/13, 10, 1\n(12) - (13) = -1, left: -1, 10, 1\n(-1) - (10) = -11, left: -11, 1\n(13) / (12) = 13/12, left: 13/12, 10, 1\n(12) * (13) = 156, left: 156, 10, 1\n(1) * (156) = 156, left: 156, 10\n(10) - (156) = -146, left: -146\n(10) + (1) = 11, left: 11, 12, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 - (10 + 1)))"}, {"input": "12 13 10 1\n", "output": "(1) - (12) = -11, left: -11, 13, 10\n(12) + (1) = 13, left: 13, 13, 10\n(12) / (1) = 12, left: 12, 13, 10\n(13) * (10) = 130, left: 130, 12\n(13) + (10) = 23, left: 23, 12\n(10) - (13) = -3, left: -3, 12, 1\n(13) * (10) = 130, left: 130, 12, 1\n(13) - (10) = 3, left: 3, 12, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 10) - 1))"}, {"input": "12 13 10 1\n", "output": "(1) / (13) = 1/13, left: 1/13, 12, 10\n(13) + (1) = 14, left: 14, 12, 10\n(10) - (14) = -4, left: -4, 12\n(10) - (12) = -2, left: -2, 14\n(12) * (10) = 120, left: 120, 14\n(12) / (10) = 6/5, left: 6/5, 14\n(14) / (6/5) = 35/3, left: 35/3\n(13) - (1) = 12, left: 12, 12, 10\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((13 - 1) * (12 - 10))"}, {"input": "5 1 8 8\n", "output": "(8) * (8) = 64, left: 64, 5, 1\n(8) - (8) = 0, left: 0, 5, 1\n(8) + (8) = 16, left: 16, 5, 1\n(8) - (8) = 0, left: 0, 5, 1\n(1) / (5) = 1/5, left: 1/5, 0\n(0) * (1/5) = 0, left: 0\n(5) - (8) = -3, left: -3, 1, 8\n(8) - (5) = 3, left: 3, 1, 8\n(1) / (3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (1 / (8 - 5)))"}, {"input": "5 1 8 8\n", "output": "(1) - (5) = -4, left: -4, 8, 8\n(-4) - (8) = -12, left: -12, 8\n(8) / (-4) = -2, left: -2, 8\n(8) / (8) = 1, left: 1, -4\n(1) / (-4) = -1/4, left: -1/4\n(8) * (8) = 64, left: 64, -4\n(-4) - (64) = -68, left: -68\n(5) / (1) = 5, left: 5, 8, 8\n(8) - (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (8 - (5 / 1)))"}, {"input": "5 1 8 8\n", "output": "(1) - (8) = -7, left: -7, 5, 8\n(5) - (-7) = 12, left: 12, 8\n(-7) - (5) = -12, left: -12, 8\n(8) - (1) = 7, left: 7, 5, 8\n(7) / (5) = 7/5, left: 7/5, 8\n(8) / (1) = 8, left: 8, 5, 8\n(8) * (8) = 64, left: 64, 5\n(8) - (8) = 0, left: 0, 5\n(8) - (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((8 / 1) * (8 - 5))"}, {"input": "5 1 8 8\n", "output": "(5) + (8) = 13, left: 13, 1, 8\n(8) / (5) = 8/5, left: 8/5, 1, 8\n(5) / (8) = 5/8, left: 5/8, 1, 8\n(1) * (5/8) = 5/8, left: 5/8, 8\n(5) * (8) = 40, left: 40, 1, 8\n(40) - (8) = 32, left: 32, 1\n(5) - (8) = -3, left: -3, 1, 8\n(8) - (5) = 3, left: 3, 1, 8\n(8) * (3) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * (8 - 5)) / 1)"}, {"input": "5 1 8 8\n", "output": "(1) + (8) = 9, left: 9, 5, 8\n(8) - (5) = 3, left: 3, 9\n(8) / (9) = 8/9, left: 8/9, 5\n(5) + (8/9) = 53/9, left: 53/9\n(9) - (8) = 1, left: 1, 5\n(5) / (9) = 5/9, left: 5/9, 8\n(5) - (9) = -4, left: -4, 8\n(8) / (1) = 8, left: 8, 5, 8\n(8) - (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((8 / 1) * (8 - 5))"}, {"input": "5 1 8 8\n", "output": "(1) - (8) = -7, left: -7, 5, 8\n(5) + (-7) = -2, left: -2, 8\n(5) / (8) = 5/8, left: 5/8, -7\n(-7) * (5/8) = -35/8, left: -35/8\n(8) - (1) = 7, left: 7, 5, 8\n(8) - (7) = 1, left: 1, 5\n(5) * (7) = 35, left: 35, 8\n(7) - (5) = 2, left: 2, 8\n(2) - (8) = -6, left: -6\n(5) / (7) = 5/7, left: 5/7, 8\n(8) / (1) = 8, left: 8, 5, 8\n(8) + (8) = 16, left: 16, 5\n(8) - (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((8 / 1) * (8 - 5))"}, {"input": "5 1 8 8\n", "output": "(5) + (8) = 13, left: 13, 1, 8\n(13) / (1) = 13, left: 13, 8\n(1) / (8) = 1/8, left: 1/8, 13\n(8) / (5) = 8/5, left: 8/5, 1, 8\n(8/5) / (1) = 8/5, left: 8/5, 8\n(5) / (8) = 5/8, left: 5/8, 1, 8\n(5) * (8) = 40, left: 40, 1, 8\n(8) * (40) = 320, left: 320, 1\n(1) * (8) = 8, left: 8, 40\n(5) - (8) = -3, left: -3, 1, 8\n(1) * (-3) = -3, left: -3, 8\n(8) - (5) = 3, left: 3, 1, 8\n(8) * (3) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * (8 - 5)) / 1)"}, {"input": "5 1 8 8\n", "output": "(8) / (8) = 1, left: 1, 5, 1\n(8) - (8) = 0, left: 0, 5, 1\n(1) + (0) = 1, left: 1, 5\n(8) + (8) = 16, left: 16, 5, 1\n(1) - (16) = -15, left: -15, 5\n(5) - (-15) = 20, left: 20\n(8) / (8) = 1, left: 1, 5, 1\n(5) + (1) = 6, left: 6, 1\n(5) - (8) = -3, left: -3, 1, 8\n(1) - (-3) = 4, left: 4, 8\n(5) * (8) = 40, left: 40, 1, 8\n(8) - (5) = 3, left: 3, 1, 8\n(1) / (3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (1 / (8 - 5)))"}, {"input": "8 6 3 5\n", "output": "(5) - (6) = -1, left: -1, 8, 3\n(8) + (-1) = 7, left: 7, 3\n(-1) - (8) = -9, left: -9, 3\n(8) + (3) = 11, left: 11, -1\n(8) - (3) = 5, left: 5, -1\n(6) / (5) = 6/5, left: 6/5, 8, 3\n(8) + (6/5) = 46/5, left: 46/5, 3\n(6) - (5) = 1, left: 1, 8, 3\n(8) / (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (8 / (6 - 5)))"}, {"input": "8 6 3 5\n", "output": "(6) / (3) = 2, left: 2, 8, 5\n(2) - (8) = -6, left: -6, 5\n(5) * (-6) = -30, left: -30\n(8) - (2) = 6, left: 6, 5\n(8) + (2) = 10, left: 10, 5\n(2) / (8) = 1/4, left: 1/4, 5\n(5) / (1/4) = 20, left: 20\n(8) * (2) = 16, left: 16, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (6 / 3)))"}, {"input": "8 6 3 5\n", "output": "(3) - (5) = -2, left: -2, 8, 6\n(-2) / (8) = -1/4, left: -1/4, 6\n(6) / (-2) = -3, left: -3, 8\n(8) * (6) = 48, left: 48, -2\n(3) / (5) = 3/5, left: 3/5, 8, 6\n(8) / (3/5) = 40/3, left: 40/3, 6\n(5) - (3) = 2, left: 2, 8, 6\n(8) * (2) = 16, left: 16, 6\n(2) / (8) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 - 3) / 8))"}, {"input": "8 6 3 5\n", "output": "(5) - (8) = -3, left: -3, 6, 3\n(8) + (5) = 13, left: 13, 6, 3\n(13) - (6) = 7, left: 7, 3\n(6) / (8) = 3/4, left: 3/4, 3, 5\n(6) - (8) = -2, left: -2, 3, 5\n(5) - (3) = 2, left: 2, -2\n(-2) + (2) = 0, left: 0\n(8) * (6) = 48, left: 48, 3, 5\n(5) - (3) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (5 - 3))"}, {"input": "8 6 3 5\n", "output": "(3) + (5) = 8, left: 8, 8, 6\n(8) * (8) = 64, left: 64, 6\n(8) * (6) = 48, left: 48, 8\n(6) / (8) = 3/4, left: 3/4, 8\n(3) / (5) = 3/5, left: 3/5, 8, 6\n(6) * (3/5) = 18/5, left: 18/5, 8\n(3/5) / (8) = 3/40, left: 3/40, 6\n(5) - (3) = 2, left: 2, 8, 6\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (5 - 3))"}, {"input": "8 6 3 5\n", "output": "(6) / (3) = 2, left: 2, 8, 5\n(2) - (8) = -6, left: -6, 5\n(8) / (2) = 4, left: 4, 5\n(5) * (4) = 20, left: 20\n(5) - (4) = 1, left: 1\n(8) - (2) = 6, left: 6, 5\n(5) + (6) = 11, left: 11\n(8) + (2) = 10, left: 10, 5\n(5) - (10) = -5, left: -5\n(8) * (2) = 16, left: 16, 5\n(5) / (16) = 5/16, left: 5/16\n(5) - (2) = 3, left: 3, 8\n(8) / (3) = 8/3, left: 8/3\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (6 / 3)))"}, {"input": "8 6 3 5\n", "output": "(5) - (8) = -3, left: -3, 6, 3\n(8) * (5) = 40, left: 40, 6, 3\n(8) / (5) = 8/5, left: 8/5, 6, 3\n(5) / (8) = 5/8, left: 5/8, 6, 3\n(8) - (5) = 3, left: 3, 6, 3\n(3) - (3) = 0, left: 0, 6\n(6) * (0) = 0, left: 0\n(6) / (3) = 2, left: 2, 3\n(8) - (6) = 2, left: 2, 3, 5\n(6) - (8) = -2, left: -2, 3, 5\n(8) + (6) = 14, left: 14, 3, 5\n(8) * (6) = 48, left: 48, 3, 5\n(5) - (3) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (5 - 3))"}, {"input": "2 9 12 8\n", "output": "(12) * (8) = 96, left: 96, 2, 9\n(8) / (12) = 2/3, left: 2/3, 2, 9\n(2/3) - (9) = -25/3, left: -25/3, 2\n(2) * (2/3) = 4/3, left: 4/3, 9\n(2) + (2/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (2 + (8 / 12)))"}, {"input": "2 9 12 8\n", "output": "(9) * (12) = 108, left: 108, 2, 8\n(9) / (12) = 3/4, left: 3/4, 2, 8\n(2) - (3/4) = 5/4, left: 5/4, 8\n(9) / (8) = 9/8, left: 9/8, 2, 12\n(2) + (12) = 14, left: 14, 9/8\n(8) / (9) = 8/9, left: 8/9, 2, 12\n(12) / (8/9) = 27/2, left: 27/2, 2\n(9) - (8) = 1, left: 1, 2, 12\n(2) * (12) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((9 - 8) * (2 * 12))"}, {"input": "2 9 12 8\n", "output": "(12) - (2) = 10, left: 10, 9, 8\n(9) / (8) = 9/8, left: 9/8, 10\n(9) + (10) = 19, left: 19, 8\n(2) / (12) = 1/6, left: 1/6, 9, 8\n(9) + (8) = 17, left: 17, 1/6\n(8) + (1/6) = 49/6, left: 49/6, 9\n(2) * (12) = 24, left: 24, 9, 8\n(24) / (8) = 3, left: 3, 9\n(9) - (8) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((2 * 12) * (9 - 8))"}, {"input": "2 9 12 8\n", "output": "(12) * (8) = 96, left: 96, 2, 9\n(2) - (96) = -94, left: -94, 9\n(96) - (2) = 94, left: 94, 9\n(2) / (96) = 1/48, left: 1/48, 9\n(12) + (8) = 20, left: 20, 2, 9\n(9) * (20) = 180, left: 180, 2\n(2) / (9) = 2/9, left: 2/9, 20\n(8) / (12) = 2/3, left: 2/3, 2, 9\n(2) + (2/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (2 + (8 / 12)))"}, {"input": "2 9 12 8\n", "output": "(9) - (2) = 7, left: 7, 12, 8\n(7) - (12) = -5, left: -5, 8\n(12) / (7) = 12/7, left: 12/7, 8\n(8) / (7) = 8/7, left: 8/7, 12\n(2) / (9) = 2/9, left: 2/9, 12, 8\n(12) * (2/9) = 8/3, left: 8/3, 8\n(8) - (2/9) = 70/9, left: 70/9, 12\n(12) * (70/9) = 280/3, left: 280/3\n(8) / (2/9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((8 / (2 / 9)) - 12)"}, {"input": "2 9 12 8\n", "output": "(8) / (2) = 4, left: 4, 9, 12\n(12) + (4) = 16, left: 16, 9\n(4) - (12) = -8, left: -8, 9\n(4) - (9) = -5, left: -5, 12\n(-5) - (12) = -17, left: -17\n(4) / (9) = 4/9, left: 4/9, 12\n(9) / (4) = 9/4, left: 9/4, 12\n(12) / (9/4) = 16/3, left: 16/3\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (8 / 2)) - 12)"}, {"input": "13 11 5 4\n", "output": "(5) / (4) = 5/4, left: 5/4, 13, 11\n(11) / (5/4) = 44/5, left: 44/5, 13\n(13) + (5/4) = 57/4, left: 57/4, 11\n(4) - (5) = -1, left: -1, 13, 11\n(13) / (-1) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (13 / (4 - 5)))"}, {"input": "13 11 5 4\n", "output": "(11) - (13) = -2, left: -2, 5, 4\n(4) - (5) = -1, left: -1, -2\n(5) / (-2) = -5/2, left: -5/2, 4\n(13) + (11) = 24, left: 24, 5, 4\n(5) - (4) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (5 - 4))"}, {"input": "13 11 5 4\n", "output": "(5) - (13) = -8, left: -8, 11, 4\n(13) / (11) = 13/11, left: 13/11, 5, 4\n(13) + (11) = 24, left: 24, 5, 4\n(4) - (5) = -1, left: -1, 24\n(5) - (4) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (5 - 4))"}, {"input": "13 11 5 4\n", "output": "(4) - (11) = -7, left: -7, 13, 5\n(11) / (4) = 11/4, left: 11/4, 13, 5\n(5) + (11/4) = 31/4, left: 31/4, 13\n(13) + (5) = 18, left: 18, 11, 4\n(13) - (4) = 9, left: 9, 11, 5\n(11) / (5) = 11/5, left: 11/5, 13, 4\n(13) - (11/5) = 54/5, left: 54/5, 4\n(5) - (4) = 1, left: 1, 13, 11\n(13) + (11) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (5 - 4))"}, {"input": "13 11 5 4\n", "output": "(13) / (5) = 13/5, left: 13/5, 11, 4\n(13) + (5) = 18, left: 18, 11, 4\n(4) / (18) = 2/9, left: 2/9, 11\n(5) / (13) = 5/13, left: 5/13, 11, 4\n(13) / (11) = 13/11, left: 13/11, 5, 4\n(4) / (13/11) = 44/13, left: 44/13, 5\n(5) / (13/11) = 55/13, left: 55/13, 4\n(13) + (11) = 24, left: 24, 5, 4\n(5) - (4) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (5 - 4))"}, {"input": "13 11 5 4\n", "output": "(5) / (4) = 5/4, left: 5/4, 13, 11\n(5/4) / (11) = 5/44, left: 5/44, 13\n(13) / (5/44) = 572/5, left: 572/5\n(5) * (4) = 20, left: 20, 13, 11\n(20) / (13) = 20/13, left: 20/13, 11\n(4) / (5) = 4/5, left: 4/5, 13, 11\n(13) * (4/5) = 52/5, left: 52/5, 11\n(4) - (5) = -1, left: -1, 13, 11\n(13) * (-1) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (13 * (4 - 5)))"}, {"input": "13 11 5 4\n", "output": "(11) - (13) = -2, left: -2, 5, 4\n(4) - (5) = -1, left: -1, -2\n(4) * (-2) = -8, left: -8, 5\n(4) + (-2) = 2, left: 2, 5\n(2) - (5) = -3, left: -3\n(13) + (11) = 24, left: 24, 5, 4\n(4) + (24) = 28, left: 28, 5\n(5) + (28) = 33, left: 33\n(5) - (4) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (5 - 4))"}, {"input": "13 11 5 4\n", "output": "(5) / (4) = 5/4, left: 5/4, 13, 11\n(13) * (11) = 143, left: 143, 5/4\n(5/4) / (143) = 5/572, left: 5/572\n(5/4) * (143) = 715/4, left: 715/4\n(13) + (11) = 24, left: 24, 5/4\n(5/4) + (24) = 101/4, left: 101/4\n(13) / (5/4) = 52/5, left: 52/5, 11\n(4) - (5) = -1, left: -1, 13, 11\n(13) / (-1) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (13 / (4 - 5)))"}, {"input": "4 13 5 4\n", "output": "(4) / (13) = 4/13, left: 4/13, 5, 4\n(4) * (13) = 52, left: 52, 5, 4\n(4) + (13) = 17, left: 17, 5, 4\n(5) / (4) = 5/4, left: 5/4, 13, 4\n(5) - (4) = 1, left: 1, 13, 4\n(4) + (5) = 9, left: 9, 13, 4\n(9) - (13) = -4, left: -4, 4\n(13) - (5) = 8, left: 8, 4, 4\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((13 - 5) + (4 * 4))"}, {"input": "4 13 5 4\n", "output": "(4) * (5) = 20, left: 20, 13, 4\n(5) - (4) = 1, left: 1, 13, 4\n(4) + (1) = 5, left: 5, 13\n(5) / (4) = 5/4, left: 5/4, 13, 4\n(4) / (5) = 4/5, left: 4/5, 13, 4\n(4) - (4) = 0, left: 0, 13, 5\n(4) / (4) = 1, left: 1, 13, 5\n(4) * (4) = 16, left: 16, 13, 5\n(13) - (5) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((4 * 4) + (13 - 5))"}, {"input": "4 13 5 4\n", "output": "(4) + (5) = 9, left: 9, 13, 4\n(5) / (4) = 5/4, left: 5/4, 13, 4\n(13) * (4) = 52, left: 52, 5/4\n(4) - (13) = -9, left: -9, 5/4\n(13) - (4) = 9, left: 9, 5, 4\n(4) * (13) = 52, left: 52, 5, 4\n(5) + (4) = 9, left: 9, 4, 13\n(4) * (4) = 16, left: 16, 13, 5\n(13) + (16) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((13 + (4 * 4)) - 5)"}, {"input": "4 13 5 4\n", "output": "(13) + (5) = 18, left: 18, 4, 4\n(4) + (18) = 22, left: 22, 4\n(4) / (18) = 2/9, left: 2/9, 4\n(4) - (18) = -14, left: -14, 4\n(4) * (4) = 16, left: 16, 18\n(5) - (13) = -8, left: -8, 4, 4\n(-8) / (4) = -2, left: -2, 4\n(-8) - (4) = -12, left: -12, 4\n(4) * (4) = 16, left: 16, -8\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((4 * 4) - (5 - 13))"}, {"input": "4 13 5 4\n", "output": "(4) / (5) = 4/5, left: 4/5, 4, 13\n(4) + (13) = 17, left: 17, 5, 4\n(4) / (5) = 4/5, left: 4/5, 17\n(13) + (5) = 18, left: 18, 4, 4\n(4) * (18) = 72, left: 72, 4\n(5) / (13) = 5/13, left: 5/13, 4, 4\n(4) / (4) = 1, left: 1, 5/13\n(13) - (5) = 8, left: 8, 4, 4\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((13 - 5) + (4 * 4))"}, {"input": "4 13 5 4\n", "output": "(5) - (4) = 1, left: 1, 13, 4\n(5) / (4) = 5/4, left: 5/4, 13, 4\n(13) - (5/4) = 47/4, left: 47/4, 4\n(4) / (5) = 4/5, left: 4/5, 13, 4\n(13) / (4/5) = 65/4, left: 65/4, 4\n(4) + (4) = 8, left: 8, 13, 5\n(4) - (4) = 0, left: 0, 13, 5\n(4) / (4) = 1, left: 1, 13, 5\n(5) - (13) = -8, left: -8, 1\n(4) / (4) = 1, left: 1, 13, 5\n(5) - (13) = -8, left: -8, 1\n(4) * (4) = 16, left: 16, 13, 5\n(13) - (5) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((4 * 4) + (13 - 5))"}, {"input": "4 13 5 4\n", "output": "(4) - (5) = -1, left: -1, 13, 4\n(4) * (5) = 20, left: 20, 13, 4\n(5) - (4) = 1, left: 1, 13, 4\n(4) + (13) = 17, left: 17, 5, 4\n(4) / (13) = 4/13, left: 4/13, 5, 4\n(4) * (13) = 52, left: 52, 5, 4\n(4) - (5) = -1, left: -1, 4, 13\n(4) - (13) = -9, left: -9, -1\n(5) - (4) = 1, left: 1, 4, 13\n(1) - (4) = -3, left: -3, 13\n(-3) / (13) = -3/13, left: -3/13\n(4) * (4) = 16, left: 16, 13, 5\n(13) + (16) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((13 + (4 * 4)) - 5)"}, {"input": "11 9 4 1\n", "output": "(1) / (11) = 1/11, left: 1/11, 9, 4\n(9) * (1/11) = 9/11, left: 9/11, 4\n(11) * (1) = 11, left: 11, 9, 4\n(11) / (4) = 11/4, left: 11/4, 9\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (4 + (11 * 1)))"}, {"input": "11 9 4 1\n", "output": "(9) * (1) = 9, left: 9, 11, 4\n(4) * (9) = 36, left: 36, 11\n(9) - (4) = 5, left: 5, 11\n(11) * (5) = 55, left: 55\n(4) - (9) = -5, left: -5, 11\n(11) - (-5) = 16, left: 16\n(11) * (-5) = -55, left: -55\n(11) + (-5) = 6, left: 6\n(4) + (9) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (4 + (9 * 1)))"}, {"input": "11 9 4 1\n", "output": "(9) / (11) = 9/11, left: 9/11, 4, 1\n(4) + (9/11) = 53/11, left: 53/11, 1\n(11) - (9) = 2, left: 2, 4, 1\n(11) * (9) = 99, left: 99, 4, 1\n(11) / (9) = 11/9, left: 11/9, 4, 1\n(1) * (11/9) = 11/9, left: 11/9, 4\n(11/9) - (4) = -25/9, left: -25/9, 1\n(11) + (9) = 20, left: 20, 4, 1\n(4) + (20) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (4 + (11 + 9)))"}, {"input": "11 9 4 1\n", "output": "(1) / (11) = 1/11, left: 1/11, 9, 4\n(9) / (4) = 9/4, left: 9/4, 1/11\n(4) / (9) = 4/9, left: 4/9, 1/11\n(9) * (4) = 36, left: 36, 1/11\n(1/11) - (36) = -395/11, left: -395/11\n(4) + (1/11) = 45/11, left: 45/11, 9\n(4) - (1/11) = 43/11, left: 43/11, 9\n(11) * (1) = 11, left: 11, 9, 4\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (4 + (11 * 1)))"}, {"input": "11 9 4 1\n", "output": "(1) - (9) = -8, left: -8, 11, 4\n(11) - (4) = 7, left: 7, -8\n(11) + (4) = 15, left: 15, -8\n(4) + (-8) = -4, left: -4, 11\n(11) - (-4) = 15, left: 15\n(11) + (-8) = 3, left: 3, 4\n(9) / (1) = 9, left: 9, 11, 4\n(11) - (9) = 2, left: 2, 4\n(11) + (9) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (11 + (9 / 1)))"}, {"input": "11 9 4 1\n", "output": "(1) - (11) = -10, left: -10, 9, 4\n(-10) / (4) = -5/2, left: -5/2, 9\n(9) - (-5/2) = 23/2, left: 23/2\n(1) / (11) = 1/11, left: 1/11, 9, 4\n(9) * (4) = 36, left: 36, 1/11\n(11) + (1) = 12, left: 12, 9, 4\n(12) / (4) = 3, left: 3, 9\n(12) - (4) = 8, left: 8, 9\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (11 + 1))"}, {"input": "12 9 3 3\n", "output": "(12) + (3) = 15, left: 15, 9, 3\n(9) / (3) = 3, left: 3, 15\n(3) / (12) = 1/4, left: 1/4, 9, 3\n(9) * (3) = 27, left: 27, 1/4\n(9) - (3) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((9 - 3) / (3 / 12))"}, {"input": "12 9 3 3\n", "output": "(9) / (12) = 3/4, left: 3/4, 3, 3\n(12) / (9) = 4/3, left: 4/3, 3, 3\n(12) + (9) = 21, left: 21, 3, 3\n(3) + (21) = 24, left: 24, 3\n(12) * (9) = 108, left: 108, 3, 3\n(3) * (3) = 9, left: 9, 108\n(9) - (12) = -3, left: -3, 3, 3\n(9) - (3) = 6, left: 6, 12, 3\n(12) / (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((9 - 3) * (12 / 3))"}, {"input": "12 9 3 3\n", "output": "(12) + (3) = 15, left: 15, 9, 3\n(9) - (3) = 6, left: 6, 15\n(3) / (15) = 1/5, left: 1/5, 9\n(9) / (1/5) = 45, left: 45\n(3) / (12) = 1/4, left: 1/4, 9, 3\n(9) / (1/4) = 36, left: 36, 3\n(9) - (1/4) = 35/4, left: 35/4, 3\n(3) * (1/4) = 3/4, left: 3/4, 9\n(9) - (3) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((9 - 3) / (3 / 12))"}, {"input": "12 9 3 3\n", "output": "(9) + (3) = 12, left: 12, 12, 3\n(12) + (12) = 24, left: 24, 3\n(12) - (12) = 0, left: 0, 3\n(0) - (3) = -3, left: -3\n(12) / (12) = 1, left: 1, 3\n(12) - (12) = 0, left: 0, 3\n(3) + (12) = 15, left: 15, 12\n(12) - (15) = -3, left: -3\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * (9 + 3)) - 12)"}, {"input": "12 9 3 3\n", "output": "(3) - (9) = -6, left: -6, 12, 3\n(12) * (-6) = -72, left: -72, 3\n(3) * (-72) = -216, left: -216\n(-6) - (12) = -18, left: -18, 3\n(9) + (3) = 12, left: 12, 12, 3\n(3) + (12) = 15, left: 15, 12\n(12) / (15) = 4/5, left: 4/5\n(3) - (12) = -9, left: -9, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * (9 + 3)) - 12)"}, {"input": "12 9 3 3\n", "output": "(9) + (3) = 12, left: 12, 12, 3\n(3) / (12) = 1/4, left: 1/4, 12\n(1/4) / (12) = 1/48, left: 1/48\n(12) / (1/4) = 48, left: 48\n(3) + (12) = 15, left: 15, 12\n(3) - (12) = -9, left: -9, 12\n(12) / (3) = 4, left: 4, 12\n(4) - (12) = -8, left: -8\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * (9 + 3)) - 12)"}, {"input": "7 5 11 1\n", "output": "(11) * (1) = 11, left: 11, 7, 5\n(5) - (7) = -2, left: -2, 11\n(11) * (-2) = -22, left: -22\n(5) / (7) = 5/7, left: 5/7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * 5) - (11 * 1))"}, {"input": "7 5 11 1\n", "output": "(11) * (1) = 11, left: 11, 7, 5\n(5) - (11) = -6, left: -6, 7\n(7) + (-6) = 1, left: 1\n(5) / (7) = 5/7, left: 5/7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * 5) - (11 * 1))"}, {"input": "7 5 11 1\n", "output": "(11) / (7) = 11/7, left: 11/7, 5, 1\n(1) - (11/7) = -4/7, left: -4/7, 5\n(5) / (-4/7) = -35/4, left: -35/4\n(7) + (11) = 18, left: 18, 5, 1\n(5) + (1) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((7 + 11) + (5 + 1))"}, {"input": "7 5 11 1\n", "output": "(11) / (7) = 11/7, left: 11/7, 5, 1\n(5) / (1) = 5, left: 5, 11/7\n(5) - (1) = 4, left: 4, 11/7\n(1) - (11/7) = -4/7, left: -4/7, 5\n(1) * (11/7) = 11/7, left: 11/7, 5\n(5) * (11/7) = 55/7, left: 55/7\n(7) + (11) = 18, left: 18, 5, 1\n(5) * (1) = 5, left: 5, 18\n(5) + (1) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((7 + 11) + (5 + 1))"}, {"input": "7 5 11 1\n", "output": "(11) * (1) = 11, left: 11, 7, 5\n(5) - (7) = -2, left: -2, 11\n(-2) - (11) = -13, left: -13\n(5) / (7) = 5/7, left: 5/7, 11\n(11) - (5/7) = 72/7, left: 72/7\n(11) / (5/7) = 77/5, left: 77/5\n(5/7) / (11) = 5/77, left: 5/77\n(11) + (5/7) = 82/7, left: 82/7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * 5) - (11 * 1))"}, {"input": "7 5 11 1\n", "output": "(1) - (7) = -6, left: -6, 5, 11\n(11) - (5) = 6, left: 6, -6\n(5) + (11) = 16, left: 16, -6\n(5) * (11) = 55, left: 55, -6\n(-6) - (11) = -17, left: -17, 5\n(-6) / (11) = -6/11, left: -6/11, 5\n(7) * (1) = 7, left: 7, 5, 11\n(7) - (5) = 2, left: 2, 11\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (7 * 1)) - 11)"}, {"input": "7 5 11 1\n", "output": "(5) - (11) = -6, left: -6, 7, 1\n(7) - (1) = 6, left: 6, -6\n(-6) + (6) = 0, left: 0\n(-6) / (6) = -1, left: -1\n(-6) - (7) = -13, left: -13, 1\n(7) - (-6) = 13, left: 13, 1\n(5) + (11) = 16, left: 16, 7, 1\n(16) / (7) = 16/7, left: 16/7, 1\n(7) + (16) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (7 + (5 + 11)))"}, {"input": "7 5 11 1\n", "output": "(11) * (1) = 11, left: 11, 7, 5\n(5) / (11) = 5/11, left: 5/11, 7\n(7) - (5/11) = 72/11, left: 72/11\n(11) - (5) = 6, left: 6, 7\n(7) / (6) = 7/6, left: 7/6\n(5) * (11) = 55, left: 55, 7\n(55) - (7) = 48, left: 48\n(5) / (7) = 5/7, left: 5/7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * 5) - (11 * 1))"}, {"input": "8 2 13 7\n", "output": "(8) * (2) = 16, left: 16, 13, 7\n(7) * (16) = 112, left: 112, 13\n(13) - (112) = -99, left: -99\n(2) / (8) = 1/4, left: 1/4, 13, 7\n(13) - (7) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((13 - 7) / (2 / 8))"}, {"input": "8 2 13 7\n", "output": "(13) / (7) = 13/7, left: 13/7, 8, 2\n(8) - (2) = 6, left: 6, 13/7\n(13/7) * (6) = 78/7, left: 78/7\n(13) - (7) = 6, left: 6, 8, 2\n(6) / (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 7) / 2))"}, {"input": "8 2 13 7\n", "output": "(7) / (2) = 7/2, left: 7/2, 8, 13\n(8) + (7/2) = 23/2, left: 23/2, 13\n(2) * (7) = 14, left: 14, 8, 13\n(7) - (2) = 5, left: 5, 8, 13\n(2) - (13) = -11, left: -11, 8, 7\n(13) - (2) = 11, left: 11, 8, 7\n(13) / (2) = 13/2, left: 13/2, 8, 7\n(13) - (7) = 6, left: 6, 8, 2\n(8) / (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((13 - 7) * (8 / 2))"}, {"input": "8 2 13 7\n", "output": "(2) + (13) = 15, left: 15, 8, 7\n(8) * (15) = 120, left: 120, 7\n(13) - (2) = 11, left: 11, 8, 7\n(2) / (13) = 2/13, left: 2/13, 8, 7\n(8) / (2/13) = 52, left: 52, 7\n(2) - (13) = -11, left: -11, 8, 7\n(13) / (2) = 13/2, left: 13/2, 8, 7\n(13) - (7) = 6, left: 6, 8, 2\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * (13 - 7)) / 2)"}, {"input": "8 2 13 7\n", "output": "(13) / (7) = 13/7, left: 13/7, 8, 2\n(2) / (8) = 1/4, left: 1/4, 13/7\n(1/4) / (13/7) = 7/52, left: 7/52\n(2) - (8) = -6, left: -6, 13/7\n(8) + (2) = 10, left: 10, 13/7\n(13/7) / (2) = 13/14, left: 13/14, 8\n(2) - (13/7) = 1/7, left: 1/7, 8\n(13) - (7) = 6, left: 6, 8, 2\n(6) / (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 7) / 2))"}, {"input": "8 2 13 7\n", "output": "(8) + (2) = 10, left: 10, 13, 7\n(7) / (13) = 7/13, left: 7/13, 10\n(13) + (7) = 20, left: 20, 10\n(13) / (10) = 13/10, left: 13/10, 7\n(13/10) - (7) = -57/10, left: -57/10\n(7) * (10) = 70, left: 70, 13\n(8) / (2) = 4, left: 4, 13, 7\n(13) - (4) = 9, left: 9, 7\n(13) + (4) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (13 + (8 / 2)))"}, {"input": "8 2 13 7\n", "output": "(8) * (2) = 16, left: 16, 13, 7\n(2) / (8) = 1/4, left: 1/4, 13, 7\n(1/4) - (7) = -27/4, left: -27/4, 13\n(7) / (1/4) = 28, left: 28, 13\n(7) * (1/4) = 7/4, left: 7/4, 13\n(13) / (7) = 13/7, left: 13/7, 1/4\n(7) - (13) = -6, left: -6, 1/4\n(13) + (7) = 20, left: 20, 1/4\n(13) - (7) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((13 - 7) / (2 / 8))"}, {"input": "1 2 7 4\n", "output": "(7) * (4) = 28, left: 28, 1, 2\n(2) / (1) = 2, left: 2, 28\n(1) * (28) = 28, left: 28, 2\n(2) + (28) = 30, left: 30\n(7) / (4) = 7/4, left: 7/4, 1, 2\n(1) - (7/4) = -3/4, left: -3/4, 2\n(2) - (-3/4) = 11/4, left: 11/4\n(7) + (4) = 11, left: 11, 1, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (7 + 4)))"}, {"input": "1 2 7 4\n", "output": "(2) / (4) = 1/2, left: 1/2, 1, 7\n(2) - (4) = -2, left: -2, 1, 7\n(1) + (7) = 8, left: 8, -2\n(4) - (2) = 2, left: 2, 1, 7\n(7) / (1) = 7, left: 7, 2\n(4) / (2) = 2, left: 2, 1, 7\n(2) * (4) = 8, left: 8, 1, 7\n(2) - (1) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (2 - 1)))"}, {"input": "1 2 7 4\n", "output": "(4) / (7) = 4/7, left: 4/7, 1, 2\n(1) - (2) = -1, left: -1, 4/7\n(4/7) - (1) = -3/7, left: -3/7, 2\n(2) - (-3/7) = 17/7, left: 17/7\n(1) / (4/7) = 7/4, left: 7/4, 2\n(7/4) - (2) = -1/4, left: -1/4\n(4/7) - (2) = -10/7, left: -10/7, 1\n(7) + (4) = 11, left: 11, 1, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (7 + 4)))"}, {"input": "1 2 7 4\n", "output": "(4) / (7) = 4/7, left: 4/7, 1, 2\n(7) / (4) = 7/4, left: 7/4, 1, 2\n(7/4) - (2) = -1/4, left: -1/4, 1\n(4) - (7) = -3, left: -3, 1, 2\n(1) + (-3) = -2, left: -2, 2\n(1) / (-3) = -1/3, left: -1/3, 2\n(7) - (4) = 3, left: 3, 1, 2\n(7) + (4) = 11, left: 11, 1, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (7 + 4)))"}, {"input": "1 2 7 4\n", "output": "(7) / (4) = 7/4, left: 7/4, 1, 2\n(4) / (7) = 4/7, left: 4/7, 1, 2\n(7) * (4) = 28, left: 28, 1, 2\n(7) - (4) = 3, left: 3, 1, 2\n(3) - (1) = 2, left: 2, 2\n(4) - (7) = -3, left: -3, 1, 2\n(7) + (4) = 11, left: 11, 1, 2\n(1) * (2) = 2, left: 2, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (7 + 4)))"}, {"input": "1 2 7 4\n", "output": "(2) / (4) = 1/2, left: 1/2, 1, 7\n(2) + (4) = 6, left: 6, 1, 7\n(7) * (6) = 42, left: 42, 1\n(42) - (1) = 41, left: 41\n(4) - (2) = 2, left: 2, 1, 7\n(2) / (1) = 2, left: 2, 7\n(1) * (2) = 2, left: 2, 7\n(2) - (7) = -5, left: -5, 1\n(4) / (2) = 2, left: 2, 1, 7\n(7) / (2) = 7/2, left: 7/2, 1\n(2) * (4) = 8, left: 8, 1, 7\n(2) - (1) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (2 - 1)))"}, {"input": "1 2 7 4\n", "output": "(4) / (7) = 4/7, left: 4/7, 1, 2\n(7) * (4) = 28, left: 28, 1, 2\n(28) / (2) = 14, left: 14, 1\n(1) * (28) = 28, left: 28, 2\n(2) - (28) = -26, left: -26\n(7) - (4) = 3, left: 3, 1, 2\n(1) + (3) = 4, left: 4, 2\n(2) + (4) = 6, left: 6\n(4) - (7) = -3, left: -3, 1, 2\n(2) * (-3) = -6, left: -6, 1\n(1) * (-6) = -6, left: -6\n(7) + (4) = 11, left: 11, 1, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (7 + 4)))"}, {"input": "3 8 2 2\n", "output": "(2) / (8) = 1/4, left: 1/4, 3, 2\n(3) / (2) = 3/2, left: 3/2, 1/4\n(3/2) / (1/4) = 6, left: 6\n(3/2) - (1/4) = 5/4, left: 5/4\n(3) * (2) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((3 * 2) / (2 / 8))"}, {"input": "3 8 2 2\n", "output": "(8) - (2) = 6, left: 6, 3, 2\n(2) / (3) = 2/3, left: 2/3, 6\n(3) + (2) = 5, left: 5, 6\n(6) - (3) = 3, left: 3, 2\n(2) - (3) = -1, left: -1\n(6) / (3) = 2, left: 2, 2\n(3) * (6) = 18, left: 18, 2\n(2) * (18) = 36, left: 36\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (8 - 2)))"}, {"input": "3 8 2 2\n", "output": "(8) + (2) = 10, left: 10, 3, 2\n(3) / (10) = 3/10, left: 3/10, 2\n(2) + (3/10) = 23/10, left: 23/10\n(10) - (3) = 7, left: 7, 2\n(10) / (3) = 10/3, left: 10/3, 2\n(10/3) / (2) = 5/3, left: 5/3\n(3) * (10) = 30, left: 30, 2\n(2) * (10) = 20, left: 20, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((8 + 2) - 2))"}, {"input": "3 8 2 2\n", "output": "(3) / (8) = 3/8, left: 3/8, 2, 2\n(3/8) - (2) = -13/8, left: -13/8, 2\n(2) - (3/8) = 13/8, left: 13/8, 2\n(2) * (3/8) = 3/4, left: 3/4, 2\n(2) + (3/8) = 19/8, left: 19/8, 2\n(2) / (19/8) = 16/19, left: 16/19\n(3/8) - (2) = -13/8, left: -13/8, 2\n(3) * (8) = 24, left: 24, 2, 2\n(2) / (24) = 1/12, left: 1/12, 2\n(2) / (1/12) = 24, left: 24\nreach 24! expression: (2 / (2 / (3 * 8)))"}, {"input": "3 8 2 2\n", "output": "(2) / (8) = 1/4, left: 1/4, 3, 2\n(3) / (2) = 3/2, left: 3/2, 1/4\n(3/2) / (1/4) = 6, left: 6\n(1/4) / (3/2) = 1/6, left: 1/6\n(1/4) - (3/2) = -5/4, left: -5/4\n(1/4) + (3/2) = 7/4, left: 7/4\n(3) * (2) = 6, left: 6, 1/4\n(1/4) - (6) = -23/4, left: -23/4\n(6) - (1/4) = 23/4, left: 23/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((3 * 2) / (2 / 8))"}, {"input": "3 8 2 2\n", "output": "(8) - (2) = 6, left: 6, 3, 2\n(2) / (6) = 1/3, left: 1/3, 3\n(3) + (1/3) = 10/3, left: 10/3\n(2) * (6) = 12, left: 12, 3\n(3) / (12) = 1/4, left: 1/4\n(6) / (2) = 3, left: 3, 3\n(3) / (3) = 1, left: 1\n(3) + (3) = 6, left: 6\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (8 - 2)))"}, {"input": "1 3 6 6\n", "output": "(6) * (6) = 36, left: 36, 1, 3\n(1) / (36) = 1/36, left: 1/36, 3\n(3) / (1/36) = 108, left: 108\n(6) - (6) = 0, left: 0, 1, 3\n(1) - (0) = 1, left: 1, 3\n(1) + (0) = 1, left: 1, 3\n(6) - (6) = 0, left: 0, 1, 3\n(6) + (6) = 12, left: 12, 1, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 + 6) * (3 - 1))"}, {"input": "1 3 6 6\n", "output": "(6) - (6) = 0, left: 0, 1, 3\n(3) - (0) = 3, left: 3, 1\n(0) / (3) = 0, left: 0, 1\n(0) - (1) = -1, left: -1\n(6) / (6) = 1, left: 1, 1, 3\n(1) / (3) = 1/3, left: 1/3, 1\n(1) / (1) = 1, left: 1, 3\n(6) + (6) = 12, left: 12, 1, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 + 6) * (3 - 1))"}, {"input": "1 3 6 6\n", "output": "(3) * (6) = 18, left: 18, 1, 6\n(1) + (18) = 19, left: 19, 6\n(19) - (6) = 13, left: 13\n(1) - (18) = -17, left: -17, 6\n(-17) - (6) = -23, left: -23\n(6) / (-17) = -6/17, left: -6/17\n(6) - (-17) = 23, left: 23\n(1) * (18) = 18, left: 18, 6\n(6) / (18) = 1/3, left: 1/3\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (1 * (3 * 6)))"}, {"input": "1 3 6 6\n", "output": "(6) / (6) = 1, left: 1, 1, 3\n(1) * (1) = 1, left: 1, 3\n(1) + (3) = 4, left: 4, 1\n(6) - (6) = 0, left: 0, 1, 3\n(6) / (6) = 1, left: 1, 1, 3\n(1) + (3) = 4, left: 4, 1\n(1) / (1) = 1, left: 1, 3\n(6) + (6) = 12, left: 12, 1, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 + 6) * (3 - 1))"}, {"input": "1 3 6 6\n", "output": "(1) * (6) = 6, left: 6, 3, 6\n(6) - (3) = 3, left: 3, 6\n(6) - (3) = 3, left: 3\n(3) - (6) = -3, left: -3\n(3) - (6) = -3, left: -3, 6\n(6) / (3) = 2, left: 2, 6\n(6) / (2) = 3, left: 3\n(3) * (6) = 18, left: 18, 6\n(18) - (6) = 12, left: 12\n(6) + (18) = 24, left: 24\nreach 24! expression: ((1 * 6) + (3 * 6))"}, {"input": "1 3 6 6\n", "output": "(6) - (6) = 0, left: 0, 1, 3\n(6) / (6) = 1, left: 1, 1, 3\n(3) * (1) = 3, left: 3, 1\n(1) - (3) = -2, left: -2, 1\n(-2) - (1) = -3, left: -3\n(6) / (6) = 1, left: 1, 1, 3\n(3) + (1) = 4, left: 4, 1\n(6) - (6) = 0, left: 0, 1, 3\n(3) + (0) = 3, left: 3, 1\n(6) * (6) = 36, left: 36, 1, 3\n(3) - (1) = 2, left: 2, 36\n(6) + (6) = 12, left: 12, 1, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 + 6) * (3 - 1))"}, {"input": "1 3 6 6\n", "output": "(6) * (6) = 36, left: 36, 1, 3\n(3) / (36) = 1/12, left: 1/12, 1\n(36) - (1) = 35, left: 35, 3\n(6) - (6) = 0, left: 0, 1, 3\n(3) - (1) = 2, left: 2, 0\n(0) * (2) = 0, left: 0\n(1) - (0) = 1, left: 1, 3\n(6) - (6) = 0, left: 0, 1, 3\n(3) - (0) = 3, left: 3, 1\n(0) / (3) = 0, left: 0, 1\n(0) - (1) = -1, left: -1\n(6) + (6) = 12, left: 12, 1, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 + 6) * (3 - 1))"}, {"input": "1 3 6 6\n", "output": "(6) / (6) = 1, left: 1, 1, 3\n(1) / (1) = 1, left: 1, 3\n(1) * (3) = 3, left: 3, 1\n(6) * (6) = 36, left: 36, 1, 3\n(1) - (3) = -2, left: -2, 36\n(1) * (3) = 3, left: 3, 36\n(3) - (1) = 2, left: 2, 36\n(6) - (6) = 0, left: 0, 1, 3\n(6) / (6) = 1, left: 1, 1, 3\n(1) + (3) = 4, left: 4, 1\n(1) + (1) = 2, left: 2, 3\n(6) + (6) = 12, left: 12, 1, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 + 6) * (3 - 1))"}, {"input": "7 12 12 2\n", "output": "(12) - (7) = 5, left: 5, 12, 2\n(12) + (2) = 14, left: 14, 5\n(5) / (2) = 5/2, left: 5/2, 12\n(12) / (7) = 12/7, left: 12/7, 12, 2\n(12) + (2) = 14, left: 14, 12/7\n(12/7) * (14) = 24, left: 24\nreach 24! expression: ((12 / 7) * (12 + 2))"}, {"input": "7 12 12 2\n", "output": "(2) / (12) = 1/6, left: 1/6, 7, 12\n(12) * (1/6) = 2, left: 2, 7\n(7) / (12) = 7/12, left: 7/12, 1/6\n(12) + (2) = 14, left: 14, 7, 12\n(7) / (14) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (7 / (12 + 2)))"}, {"input": "7 12 12 2\n", "output": "(12) + (12) = 24, left: 24, 7, 2\n(7) / (24) = 7/24, left: 7/24, 2\n(7/24) - (2) = -41/24, left: -41/24\n(12) + (2) = 14, left: 14, 7, 12\n(12) * (14) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: ((12 * (12 + 2)) / 7)"}, {"input": "7 12 12 2\n", "output": "(12) - (7) = 5, left: 5, 12, 2\n(12) * (2) = 24, left: 24, 5\n(12) / (5) = 12/5, left: 12/5, 2\n(2) + (5) = 7, left: 7, 12\n(12) / (7) = 12/7, left: 12/7, 12, 2\n(12/7) - (2) = -2/7, left: -2/7, 12\n(12) - (-2/7) = 86/7, left: 86/7\n(12) * (2) = 24, left: 24, 12/7\n(12) + (2) = 14, left: 14, 12/7\n(12/7) * (14) = 24, left: 24\nreach 24! expression: ((12 / 7) * (12 + 2))"}, {"input": "7 12 12 2\n", "output": "(2) / (7) = 2/7, left: 2/7, 12, 12\n(7) - (2) = 5, left: 5, 12, 12\n(12) - (12) = 0, left: 0, 5\n(7) + (2) = 9, left: 9, 12, 12\n(12) / (12) = 1, left: 1, 9\n(2) - (7) = -5, left: -5, 12, 12\n(-5) - (12) = -17, left: -17, 12\n(7) * (2) = 14, left: 14, 12, 12\n(14) - (12) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 * 2) - 12))"}, {"input": "7 12 12 2\n", "output": "(12) / (12) = 1, left: 1, 7, 2\n(7) + (2) = 9, left: 9, 1\n(1) + (9) = 10, left: 10\n(1) / (7) = 1/7, left: 1/7, 2\n(7) / (1) = 7, left: 7, 2\n(2) - (7) = -5, left: -5\n(12) / (12) = 1, left: 1, 7, 2\n(12) + (2) = 14, left: 14, 7, 12\n(12) * (14) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: ((12 * (12 + 2)) / 7)"}, {"input": "7 12 12 2\n", "output": "(12) * (12) = 144, left: 144, 7, 2\n(12) + (12) = 24, left: 24, 7, 2\n(7) - (24) = -17, left: -17, 2\n(2) / (12) = 1/6, left: 1/6, 7, 12\n(12) + (1/6) = 73/6, left: 73/6, 7\n(73/6) - (7) = 31/6, left: 31/6\n(12) * (2) = 24, left: 24, 7, 12\n(12) + (2) = 14, left: 14, 7, 12\n(7) / (14) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (7 / (12 + 2)))"}, {"input": "7 12 12 2\n", "output": "(2) / (12) = 1/6, left: 1/6, 7, 12\n(1/6) / (12) = 1/72, left: 1/72, 7\n(1/72) - (7) = -503/72, left: -503/72\n(7) / (12) = 7/12, left: 7/12, 1/6\n(12) - (7) = 5, left: 5, 1/6\n(7) - (1/6) = 41/6, left: 41/6, 12\n(7) + (1/6) = 43/6, left: 43/6, 12\n(12) + (2) = 14, left: 14, 7, 12\n(7) / (14) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (7 / (12 + 2)))"}, {"input": "10 2 8 6\n", "output": "(8) / (2) = 4, left: 4, 10, 6\n(6) / (10) = 3/5, left: 3/5, 4\n(4) + (3/5) = 23/5, left: 23/5\n(8) - (2) = 6, left: 6, 10, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((8 - 2) * (10 - 6))"}, {"input": "10 2 8 6\n", "output": "(8) - (2) = 6, left: 6, 10, 6\n(6) - (10) = -4, left: -4, 6\n(10) + (6) = 16, left: 16, 6\n(6) / (10) = 3/5, left: 3/5, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((8 - 2) * (10 - 6))"}, {"input": "10 2 8 6\n", "output": "(8) - (2) = 6, left: 6, 10, 6\n(6) - (10) = -4, left: -4, 6\n(6) * (-4) = -24, left: -24\n(10) / (6) = 5/3, left: 5/3, 6\n(6) / (5/3) = 18/5, left: 18/5\n(6) - (5/3) = 13/3, left: 13/3\n(6) / (10) = 3/5, left: 3/5, 6\n(6) * (3/5) = 18/5, left: 18/5\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((8 - 2) * (10 - 6))"}, {"input": "10 2 8 6\n", "output": "(10) * (2) = 20, left: 20, 8, 6\n(20) / (6) = 10/3, left: 10/3, 8\n(10) / (2) = 5, left: 5, 8, 6\n(6) / (8) = 3/4, left: 3/4, 5\n(8) / (6) = 4/3, left: 4/3, 5\n(5) - (8) = -3, left: -3, 6\n(10) + (2) = 12, left: 12, 8, 6\n(12) / (6) = 2, left: 2, 8\n(12) - (8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((10 + 2) - 8))"}, {"input": "10 2 8 6\n", "output": "(8) / (2) = 4, left: 4, 10, 6\n(4) / (6) = 2/3, left: 2/3, 10\n(2/3) - (10) = -28/3, left: -28/3\n(10) + (6) = 16, left: 16, 4\n(4) * (16) = 64, left: 64\n(10) - (4) = 6, left: 6, 6\n(2) + (8) = 10, left: 10, 10, 6\n(8) - (2) = 6, left: 6, 10, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((8 - 2) * (10 - 6))"}, {"input": "10 2 8 6\n", "output": "(6) - (2) = 4, left: 4, 10, 8\n(4) / (10) = 2/5, left: 2/5, 8\n(4) - (10) = -6, left: -6, 8\n(2) / (6) = 1/3, left: 1/3, 10, 8\n(10) * (1/3) = 10/3, left: 10/3, 8\n(2) * (6) = 12, left: 12, 10, 8\n(10) / (12) = 5/6, left: 5/6, 8\n(10) - (12) = -2, left: -2, 8\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((2 * 6) * (10 - 8))"}, {"input": "10 2 8 6\n", "output": "(2) - (10) = -8, left: -8, 8, 6\n(2) / (10) = 1/5, left: 1/5, 8, 6\n(6) * (1/5) = 6/5, left: 6/5, 8\n(10) / (2) = 5, left: 5, 8, 6\n(10) - (2) = 8, left: 8, 8, 6\n(6) + (8) = 14, left: 14, 8\n(6) - (8) = -2, left: -2, 8\n(10) + (2) = 12, left: 12, 8, 6\n(12) - (8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((10 + 2) - 8))"}, {"input": "11 11 2 11\n", "output": "(11) * (11) = 121, left: 121, 11, 2\n(11) / (11) = 1, left: 1, 11, 2\n(11) * (1) = 11, left: 11, 2\n(2) - (11) = -9, left: -9\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "11 11 2 11\n", "output": "(11) - (11) = 0, left: 0, 2, 11\n(2) - (11) = -9, left: -9, 0\n(11) / (11) = 1, left: 1, 2, 11\n(2) + (11) = 13, left: 13, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "11 11 2 11\n", "output": "(11) - (11) = 0, left: 0, 11, 2\n(11) + (11) = 22, left: 22, 11, 2\n(22) - (11) = 11, left: 11, 2\n(11) / (11) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "11 11 2 11\n", "output": "(11) / (11) = 1, left: 1, 11, 2\n(11) * (1) = 11, left: 11, 2\n(2) * (11) = 22, left: 22\n(11) + (1) = 12, left: 12, 2\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "11 11 2 11\n", "output": "(11) / (2) = 11/2, left: 11/2, 11, 11\n(2) / (11) = 2/11, left: 2/11, 11, 11\n(2) - (11) = -9, left: -9, 11, 11\n(11) + (2) = 13, left: 13, 11, 11\n(2) / (11) = 2/11, left: 2/11, 11, 11\n(2) - (11) = -9, left: -9, 11, 11\n(11) - (2) = 9, left: 9, 11, 11\n(11) / (11) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "11 11 2 11\n", "output": "(11) * (11) = 121, left: 121, 11, 2\n(2) / (121) = 2/121, left: 2/121, 11\n(11) + (11) = 22, left: 22, 11, 2\n(22) - (11) = 11, left: 11, 2\n(22) / (11) = 2, left: 2, 2\n(2) - (11) = -9, left: -9, 22\n(22) / (-9) = -22/9, left: -22/9\n(11) / (11) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "11 11 2 11\n", "output": "(11) * (11) = 121, left: 121, 11, 2\n(2) + (121) = 123, left: 123, 11\n(11) / (11) = 1, left: 1, 11, 2\n(11) * (2) = 22, left: 22, 1\n(22) - (1) = 21, left: 21\n(11) + (2) = 13, left: 13, 1\n(11) - (2) = 9, left: 9, 1\n(1) / (9) = 1/9, left: 1/9\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "11 11 2 11\n", "output": "(11) * (11) = 121, left: 121, 2, 11\n(2) + (121) = 123, left: 123, 11\n(121) - (11) = 110, left: 110, 2\n(11) - (11) = 0, left: 0, 2, 11\n(2) - (0) = 2, left: 2, 11\n(11) + (11) = 22, left: 22, 2, 11\n(11) - (2) = 9, left: 9, 22\n(11) / (11) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "11 11 2 11\n", "output": "(11) / (11) = 1, left: 1, 11, 2\n(1) / (11) = 1/11, left: 1/11, 2\n(2) - (1/11) = 21/11, left: 21/11\n(11) * (1) = 11, left: 11, 2\n(2) * (11) = 22, left: 22\n(11) - (2) = 9, left: 9\n(1) - (11) = -10, left: -10, 2\n(-10) - (2) = -12, left: -12\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "9 4 4 8\n", "output": "(9) - (8) = 1, left: 1, 4, 4\n(4) * (1) = 4, left: 4, 4\n(8) / (9) = 8/9, left: 8/9, 4, 4\n(4) + (4) = 8, left: 8, 8/9\n(4) / (8) = 1/2, left: 1/2, 9, 4\n(9) * (4) = 36, left: 36, 1/2\n(1/2) + (36) = 73/2, left: 73/2\n(4) + (8) = 12, left: 12, 9, 4\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(8) / (9) = 8/9, left: 8/9, 4, 4\n(4) - (4) = 0, left: 0, 9, 8\n(8) + (0) = 8, left: 8, 9\n(9) * (8) = 72, left: 72\n(9) / (4) = 9/4, left: 9/4, 4, 8\n(4) - (8) = -4, left: -4, 9/4\n(9) + (4) = 13, left: 13, 4, 8\n(9) * (4) = 36, left: 36, 4, 8\n(4) + (8) = 12, left: 12, 36\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(4) + (4) = 8, left: 8, 9, 8\n(8) - (9) = -1, left: -1, 8\n(9) + (8) = 17, left: 17, 8\n(4) - (4) = 0, left: 0, 9, 8\n(9) + (0) = 9, left: 9, 8\n(4) / (4) = 1, left: 1, 9, 8\n(4) / (9) = 4/9, left: 4/9, 4, 8\n(9) * (4) = 36, left: 36, 4, 8\n(4) + (8) = 12, left: 12, 36\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(4) + (8) = 12, left: 12, 9, 4\n(12) / (9) = 4/3, left: 4/3, 4\n(9) * (12) = 108, left: 108, 4\n(12) - (4) = 8, left: 8, 9\n(4) - (12) = -8, left: -8, 9\n(12) / (4) = 3, left: 3, 9\n(9) / (3) = 3, left: 3\n(4) * (12) = 48, left: 48, 9\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(9) / (4) = 9/4, left: 9/4, 4, 8\n(4) / (9) = 4/9, left: 4/9, 4, 8\n(8) - (4) = 4, left: 4, 4/9\n(4) / (4/9) = 9, left: 9, 8\n(9) - (4) = 5, left: 5, 4, 8\n(4) - (9) = -5, left: -5, 4, 8\n(8) / (-5) = -8/5, left: -8/5, 4\n(9) * (4) = 36, left: 36, 4, 8\n(36) - (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: (((9 * 4) - 4) - 8)"}, {"input": "9 4 4 8\n", "output": "(8) / (9) = 8/9, left: 8/9, 4, 4\n(4) / (4) = 1, left: 1, 8/9\n(8) - (9) = -1, left: -1, 4, 4\n(9) / (8) = 9/8, left: 9/8, 4, 4\n(4) * (4) = 16, left: 16, 9/8\n(4) + (4) = 8, left: 8, 9, 8\n(8) - (9) = -1, left: -1, 8\n(4) - (4) = 0, left: 0, 9, 8\n(9) / (8) = 9/8, left: 9/8, 0\n(0) + (9/8) = 9/8, left: 9/8\n(4) - (4) = 0, left: 0, 9, 8\n(9) * (4) = 36, left: 36, 4, 8\n(4) + (8) = 12, left: 12, 36\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(4) + (4) = 8, left: 8, 9, 8\n(9) - (8) = 1, left: 1, 8\n(4) - (4) = 0, left: 0, 9, 8\n(0) - (9) = -9, left: -9, 8\n(4) / (4) = 1, left: 1, 9, 8\n(8) / (1) = 8, left: 8, 9\n(9) * (8) = 72, left: 72\n(4) / (4) = 1, left: 1, 9, 8\n(8) * (1) = 8, left: 8, 9\n(4) / (9) = 4/9, left: 4/9, 4, 8\n(4) / (4/9) = 9, left: 9, 8\n(9) * (4) = 36, left: 36, 4, 8\n(4) + (8) = 12, left: 12, 36\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(9) - (8) = 1, left: 1, 4, 4\n(9) / (8) = 9/8, left: 9/8, 4, 4\n(9) + (8) = 17, left: 17, 4, 4\n(4) / (17) = 4/17, left: 4/17, 4\n(4/17) / (4) = 1/17, left: 1/17\n(4) - (4) = 0, left: 0, 17\n(4) * (17) = 68, left: 68, 4\n(8) - (9) = -1, left: -1, 4, 4\n(4) / (8) = 1/2, left: 1/2, 9, 4\n(4) * (8) = 32, left: 32, 9, 4\n(9) + (32) = 41, left: 41, 4\n(4) + (8) = 12, left: 12, 9, 4\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(9) / (4) = 9/4, left: 9/4, 4, 8\n(4) / (8) = 1/2, left: 1/2, 9/4\n(4) / (9) = 4/9, left: 4/9, 4, 8\n(4) + (8) = 12, left: 12, 4/9\n(9) - (4) = 5, left: 5, 4, 8\n(8) / (5) = 8/5, left: 8/5, 4\n(8) * (5) = 40, left: 40, 4\n(4) / (5) = 4/5, left: 4/5, 8\n(4) - (9) = -5, left: -5, 4, 8\n(8) / (-5) = -8/5, left: -8/5, 4\n(-5) / (8) = -5/8, left: -5/8, 4\n(9) * (4) = 36, left: 36, 4, 8\n(36) - (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: (((9 * 4) - 4) - 8)"}, {"input": "4 12 2 3\n", "output": "(4) + (2) = 6, left: 6, 12, 3\n(12) - (3) = 9, left: 9, 6\n(6) / (9) = 2/3, left: 2/3\n(3) - (12) = -9, left: -9, 6\n(12) / (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((4 + 2) * (12 / 3))"}, {"input": "4 12 2 3\n", "output": "(2) * (3) = 6, left: 6, 4, 12\n(6) - (12) = -6, left: -6, 4\n(-6) / (4) = -3/2, left: -3/2\n(4) - (-6) = 10, left: 10\n(-6) - (4) = -10, left: -10\n(4) + (-6) = -2, left: -2\n(4) / (-6) = -2/3, left: -2/3\n(12) - (6) = 6, left: 6, 4\n(4) + (6) = 10, left: 10\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (12 - (2 * 3)))"}, {"input": "4 12 2 3\n", "output": "(4) + (2) = 6, left: 6, 12, 3\n(12) - (3) = 9, left: 9, 6\n(9) / (6) = 3/2, left: 3/2\n(3) - (12) = -9, left: -9, 6\n(6) - (-9) = 15, left: 15\n(-9) - (6) = -15, left: -15\n(6) / (-9) = -2/3, left: -2/3\n(12) + (3) = 15, left: 15, 6\n(12) / (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((4 + 2) * (12 / 3))"}, {"input": "4 12 2 3\n", "output": "(4) * (12) = 48, left: 48, 2, 3\n(48) / (2) = 24, left: 24, 3\n(48) - (2) = 46, left: 46, 3\n(12) / (4) = 3, left: 3, 2, 3\n(3) - (3) = 0, left: 0, 2\n(3) * (3) = 9, left: 9, 2\n(2) * (3) = 6, left: 6, 3\n(4) + (12) = 16, left: 16, 2, 3\n(3) / (2) = 3/2, left: 3/2, 16\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((4 + 12) * (3 / 2))"}, {"input": "4 12 2 3\n", "output": "(4) / (12) = 1/3, left: 1/3, 2, 3\n(2) - (3) = -1, left: -1, 1/3\n(1/3) + (-1) = -2/3, left: -2/3\n(4) - (12) = -8, left: -8, 2, 3\n(2) - (3) = -1, left: -1, -8\n(12) - (4) = 8, left: 8, 2, 3\n(8) - (3) = 5, left: 5, 2\n(4) + (12) = 16, left: 16, 2, 3\n(16) / (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((4 + 12) / 2))"}, {"input": "4 12 2 3\n", "output": "(4) - (12) = -8, left: -8, 2, 3\n(2) - (3) = -1, left: -1, -8\n(-1) / (-8) = 1/8, left: 1/8\n(12) - (4) = 8, left: 8, 2, 3\n(2) - (3) = -1, left: -1, 8\n(3) - (8) = -5, left: -5, 2\n(8) / (3) = 8/3, left: 8/3, 2\n(4) + (12) = 16, left: 16, 2, 3\n(16) / (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((4 + 12) / 2))"}, {"input": "4 12 2 3\n", "output": "(2) * (3) = 6, left: 6, 4, 12\n(6) - (12) = -6, left: -6, 4\n(-6) / (4) = -3/2, left: -3/2\n(4) * (-6) = -24, left: -24\n(4) - (-6) = 10, left: 10\n(-6) - (4) = -10, left: -10\n(4) + (-6) = -2, left: -2\n(4) / (-6) = -2/3, left: -2/3\n(12) - (6) = 6, left: 6, 4\n(4) + (6) = 10, left: 10\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (12 - (2 * 3)))"}, {"input": "4 12 2 3\n", "output": "(2) * (3) = 6, left: 6, 4, 12\n(6) - (12) = -6, left: -6, 4\n(-6) / (4) = -3/2, left: -3/2\n(4) * (-6) = -24, left: -24\n(4) - (-6) = 10, left: 10\n(-6) - (4) = -10, left: -10\n(4) + (-6) = -2, left: -2\n(4) / (-6) = -2/3, left: -2/3\n(12) - (6) = 6, left: 6, 4\n(4) + (6) = 10, left: 10\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (12 - (2 * 3)))"}, {"input": "9 2 3 12\n", "output": "(3) - (12) = -9, left: -9, 9, 2\n(12) / (3) = 4, left: 4, 9, 2\n(12) - (3) = 9, left: 9, 9, 2\n(3) + (12) = 15, left: 15, 9, 2\n(2) - (9) = -7, left: -7, 15\n(-7) / (15) = -7/15, left: -7/15\n(9) * (3) = 27, left: 27, 2, 12\n(9) - (3) = 6, left: 6, 2, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (9 - 3)))"}, {"input": "9 2 3 12\n", "output": "(12) / (9) = 4/3, left: 4/3, 2, 3\n(9) + (12) = 21, left: 21, 2, 3\n(2) + (12) = 14, left: 14, 9, 3\n(2) + (3) = 5, left: 5, 9, 12\n(9) / (5) = 9/5, left: 9/5, 12\n(9/5) / (12) = 3/20, left: 3/20\n(2) * (3) = 6, left: 6, 9, 12\n(3) - (9) = -6, left: -6, 2, 12\n(2) * (-6) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 * (3 - 9)))"}, {"input": "9 2 3 12\n", "output": "(3) / (12) = 1/4, left: 1/4, 9, 2\n(9) + (1/4) = 37/4, left: 37/4, 2\n(3) - (12) = -9, left: -9, 9, 2\n(9) + (2) = 11, left: 11, 3, 12\n(9) * (2) = 18, left: 18, 3, 12\n(3) * (12) = 36, left: 36, 18\n(36) / (18) = 2, left: 2\n(9) - (3) = 6, left: 6, 2, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (9 - 3)))"}, {"input": "9 2 3 12\n", "output": "(12) / (2) = 6, left: 6, 9, 3\n(6) / (3) = 2, left: 2, 9\n(2) - (9) = -7, left: -7\n(2) - (12) = -10, left: -10, 9, 3\n(3) / (9) = 1/3, left: 1/3, 2, 12\n(2) * (1/3) = 2/3, left: 2/3, 12\n(2/3) / (12) = 1/18, left: 1/18\n(3) - (9) = -6, left: -6, 2, 12\n(2) * (-6) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 * (3 - 9)))"}, {"input": "9 2 3 12\n", "output": "(2) / (12) = 1/6, left: 1/6, 9, 3\n(3) + (1/6) = 19/6, left: 19/6, 9\n(2) + (12) = 14, left: 14, 9, 3\n(12) - (3) = 9, left: 9, 9, 2\n(9) - (12) = -3, left: -3, 2, 3\n(3) - (-3) = 6, left: 6, 2\n(6) / (2) = 3, left: 3\n(9) - (3) = 6, left: 6, 2, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (9 - 3)))"}, {"input": "9 2 3 12\n", "output": "(12) - (3) = 9, left: 9, 9, 2\n(9) / (12) = 3/4, left: 3/4, 2, 3\n(12) - (9) = 3, left: 3, 2, 3\n(9) - (12) = -3, left: -3, 2, 3\n(-3) / (3) = -1, left: -1, 2\n(12) / (9) = 4/3, left: 4/3, 2, 3\n(12) / (2) = 6, left: 6, 9, 3\n(2) / (12) = 1/6, left: 1/6, 9, 3\n(2) - (12) = -10, left: -10, 9, 3\n(9) * (3) = 27, left: 27, 2, 12\n(2) - (12) = -10, left: -10, 27\n(3) - (9) = -6, left: -6, 2, 12\n(2) * (-6) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 * (3 - 9)))"}, {"input": "9 2 3 12\n", "output": "(12) / (2) = 6, left: 6, 9, 3\n(2) / (12) = 1/6, left: 1/6, 9, 3\n(2) + (12) = 14, left: 14, 9, 3\n(9) + (14) = 23, left: 23, 3\n(3) * (12) = 36, left: 36, 9, 2\n(3) + (12) = 15, left: 15, 9, 2\n(3) - (12) = -9, left: -9, 9, 2\n(12) / (9) = 4/3, left: 4/3, 2, 3\n(3) - (4/3) = 5/3, left: 5/3, 2\n(12) - (9) = 3, left: 3, 2, 3\n(9) / (12) = 3/4, left: 3/4, 2, 3\n(9) - (3) = 6, left: 6, 2, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (9 - 3)))"}, {"input": "9 2 3 12\n", "output": "(9) - (12) = -3, left: -3, 2, 3\n(9) * (12) = 108, left: 108, 2, 3\n(9) + (12) = 21, left: 21, 2, 3\n(3) / (21) = 1/7, left: 1/7, 2\n(12) / (2) = 6, left: 6, 9, 3\n(2) / (12) = 1/6, left: 1/6, 9, 3\n(3) + (12) = 15, left: 15, 9, 2\n(2) - (9) = -7, left: -7, 15\n(2) * (3) = 6, left: 6, 9, 12\n(6) - (9) = -3, left: -3, 12\n(3) / (2) = 3/2, left: 3/2, 9, 12\n(3) - (9) = -6, left: -6, 2, 12\n(2) * (-6) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 * (3 - 9)))"}, {"input": "9 2 3 12\n", "output": "(3) * (12) = 36, left: 36, 9, 2\n(2) * (36) = 72, left: 72, 9\n(36) / (9) = 4, left: 4, 2\n(3) / (12) = 1/4, left: 1/4, 9, 2\n(3) + (12) = 15, left: 15, 9, 2\n(12) / (3) = 4, left: 4, 9, 2\n(9) - (2) = 7, left: 7, 3, 12\n(12) / (7) = 12/7, left: 12/7, 3\n(2) / (9) = 2/9, left: 2/9, 3, 12\n(2) - (9) = -7, left: -7, 3, 12\n(-7) / (3) = -7/3, left: -7/3, 12\n(9) - (3) = 6, left: 6, 2, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (9 - 3)))"}, {"input": "1 11 5 10\n", "output": "(11) / (1) = 11, left: 11, 5, 10\n(5) / (11) = 5/11, left: 5/11, 10\n(5) * (10) = 50, left: 50, 11\n(1) + (11) = 12, left: 12, 5, 10\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (1 + 11)) / 5)"}, {"input": "1 11 5 10\n", "output": "(11) - (1) = 10, left: 10, 5, 10\n(5) * (10) = 50, left: 50, 10\n(10) / (10) = 1, left: 1, 5\n(1) + (11) = 12, left: 12, 5, 10\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (10 / 5))"}, {"input": "1 11 5 10\n", "output": "(1) - (5) = -4, left: -4, 11, 10\n(11) * (10) = 110, left: 110, -4\n(-4) * (110) = -440, left: -440\n(1) + (11) = 12, left: 12, 5, 10\n(5) / (12) = 5/12, left: 5/12, 10\n(10) / (5/12) = 24, left: 24\nreach 24! expression: (10 / (5 / (1 + 11)))"}, {"input": "1 11 5 10\n", "output": "(11) + (10) = 21, left: 21, 1, 5\n(10) / (1) = 10, left: 10, 11, 5\n(5) - (11) = -6, left: -6, 10\n(5) + (10) = 15, left: 15, 1, 11\n(5) * (10) = 50, left: 50, 1, 11\n(11) - (1) = 10, left: 10, 50\n(50) - (10) = 40, left: 40\n(10) / (5) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (1 + 11))"}, {"input": "1 11 5 10\n", "output": "(10) - (11) = -1, left: -1, 1, 5\n(5) - (-1) = 6, left: 6, 1\n(1) * (6) = 6, left: 6\n(11) - (1) = 10, left: 10, 5, 10\n(10) - (5) = 5, left: 5, 10\n(5) - (10) = -5, left: -5, 10\n(10) - (-5) = 15, left: 15\n(1) + (11) = 12, left: 12, 5, 10\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (10 / 5))"}, {"input": "1 11 5 10\n", "output": "(5) - (1) = 4, left: 4, 11, 10\n(11) + (10) = 21, left: 21, 4\n(4) * (21) = 84, left: 84\n(1) * (5) = 5, left: 5, 11, 10\n(1) + (5) = 6, left: 6, 11, 10\n(5) / (1) = 5, left: 5, 11, 10\n(11) * (5) = 55, left: 55, 10\n(5) / (10) = 1/2, left: 1/2, 1, 11\n(1) + (11) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((1 + 11) / (5 / 10))"}, {"input": "1 11 5 10\n", "output": "(10) / (1) = 10, left: 10, 11, 5\n(5) - (1) = 4, left: 4, 11, 10\n(11) * (4) = 44, left: 44, 10\n(1) / (5) = 1/5, left: 1/5, 11, 10\n(1/5) - (10) = -49/5, left: -49/5, 11\n(1) * (5) = 5, left: 5, 11, 10\n(11) / (1) = 11, left: 11, 5, 10\n(1) + (11) = 12, left: 12, 5, 10\n(5) / (12) = 5/12, left: 5/12, 10\n(10) / (5/12) = 24, left: 24\nreach 24! expression: (10 / (5 / (1 + 11)))"}, {"input": "1 11 5 10\n", "output": "(11) / (1) = 11, left: 11, 5, 10\n(10) * (11) = 110, left: 110, 5\n(10) - (11) = -1, left: -1, 5\n(5) * (-1) = -5, left: -5\n(5) - (10) = -5, left: -5, 11\n(-5) / (11) = -5/11, left: -5/11\n(5) + (10) = 15, left: 15, 11\n(1) + (11) = 12, left: 12, 5, 10\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (1 + 11)) / 5)"}, {"input": "3 11 4 9\n", "output": "(11) * (9) = 99, left: 99, 3, 4\n(3) * (99) = 297, left: 297, 4\n(3) / (99) = 1/33, left: 1/33, 4\n(4) / (1/33) = 132, left: 132\n(99) - (3) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((11 * 9) - 3) / 4)"}, {"input": "3 11 4 9\n", "output": "(11) / (9) = 11/9, left: 11/9, 3, 4\n(3) / (11/9) = 27/11, left: 27/11, 4\n(4) - (11/9) = 25/9, left: 25/9, 3\n(11) - (9) = 2, left: 2, 3, 4\n(4) * (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 * (11 - 9)))"}, {"input": "3 11 4 9\n", "output": "(11) / (9) = 11/9, left: 11/9, 3, 4\n(3) * (4) = 12, left: 12, 11/9\n(11/9) / (12) = 11/108, left: 11/108\n(4) - (3) = 1, left: 1, 11/9\n(11/9) - (3) = -16/9, left: -16/9, 4\n(3) * (11/9) = 11/3, left: 11/3, 4\n(4) * (11/9) = 44/9, left: 44/9, 3\n(11) * (9) = 99, left: 99, 3, 4\n(99) - (3) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((11 * 9) - 3) / 4)"}, {"input": "3 11 4 9\n", "output": "(4) - (11) = -7, left: -7, 3, 9\n(4) / (11) = 4/11, left: 4/11, 3, 9\n(11) / (4) = 11/4, left: 11/4, 3, 9\n(3) / (9) = 1/3, left: 1/3, 11, 4\n(11) * (1/3) = 11/3, left: 11/3, 4\n(3) * (9) = 27, left: 27, 11, 4\n(11) / (3) = 11/3, left: 11/3, 4, 9\n(11) * (9) = 99, left: 99, 3, 4\n(99) - (3) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((11 * 9) - 3) / 4)"}, {"input": "3 11 4 9\n", "output": "(11) + (9) = 20, left: 20, 3, 4\n(20) - (3) = 17, left: 17, 4\n(4) * (20) = 80, left: 80, 3\n(11) / (9) = 11/9, left: 11/9, 3, 4\n(11/9) / (4) = 11/36, left: 11/36, 3\n(9) / (11) = 9/11, left: 9/11, 3, 4\n(4) * (9/11) = 36/11, left: 36/11, 3\n(11) - (9) = 2, left: 2, 3, 4\n(4) * (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 * (11 - 9)))"}, {"input": "3 11 4 9\n", "output": "(3) / (4) = 3/4, left: 3/4, 11, 9\n(11) - (9) = 2, left: 2, 3/4\n(3) - (4) = -1, left: -1, 11, 9\n(-1) / (9) = -1/9, left: -1/9, 11\n(11) / (9) = 11/9, left: 11/9, -1\n(-1) / (11/9) = -9/11, left: -9/11\n(3) * (4) = 12, left: 12, 11, 9\n(11) * (12) = 132, left: 132, 9\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 * 4) * (11 - 9))"}, {"input": "3 11 4 9\n", "output": "(3) - (4) = -1, left: -1, 11, 9\n(9) - (11) = -2, left: -2, -1\n(4) - (3) = 1, left: 1, 11, 9\n(11) - (1) = 10, left: 10, 9\n(3) / (4) = 3/4, left: 3/4, 11, 9\n(9) / (3/4) = 12, left: 12, 11\n(11) + (12) = 23, left: 23\n(3) * (4) = 12, left: 12, 11, 9\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 * 4) * (11 - 9))"}, {"input": "3 11 4 9\n", "output": "(4) - (11) = -7, left: -7, 3, 9\n(11) * (4) = 44, left: 44, 3, 9\n(44) - (3) = 41, left: 41, 9\n(3) + (9) = 12, left: 12, 11, 4\n(11) * (4) = 44, left: 44, 12\n(9) / (3) = 3, left: 3, 11, 4\n(3) + (11) = 14, left: 14, 4, 9\n(3) - (11) = -8, left: -8, 4, 9\n(4) - (-8) = 12, left: 12, 9\n(3) / (11) = 3/11, left: 3/11, 4, 9\n(4) + (9) = 13, left: 13, 3, 11\n(11) * (9) = 99, left: 99, 3, 4\n(99) - (3) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((11 * 9) - 3) / 4)"}, {"input": "9 3 4 12\n", "output": "(4) + (12) = 16, left: 16, 9, 3\n(9) - (3) = 6, left: 6, 16\n(6) - (16) = -10, left: -10\n(4) / (12) = 1/3, left: 1/3, 9, 3\n(9) / (1/3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 / (4 / 12)) - 3)"}, {"input": "9 3 4 12\n", "output": "(12) - (4) = 8, left: 8, 9, 3\n(9) * (3) = 27, left: 27, 8\n(8) * (27) = 216, left: 216\n(8) + (27) = 35, left: 35\n(9) / (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((12 - 4) * (9 / 3))"}, {"input": "9 3 4 12\n", "output": "(9) * (12) = 108, left: 108, 3, 4\n(108) - (4) = 104, left: 104, 3\n(4) + (108) = 112, left: 112, 3\n(4) / (108) = 1/27, left: 1/27, 3\n(108) / (4) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: (((9 * 12) / 4) - 3)"}, {"input": "9 3 4 12\n", "output": "(9) - (4) = 5, left: 5, 3, 12\n(3) + (5) = 8, left: 8, 12\n(12) - (8) = 4, left: 4\n(3) / (5) = 3/5, left: 3/5, 12\n(12) + (3/5) = 63/5, left: 63/5\n(12) * (3/5) = 36/5, left: 36/5\n(12) - (3/5) = 57/5, left: 57/5\n(5) - (3) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 - 4) - 3))"}, {"input": "9 3 4 12\n", "output": "(9) * (12) = 108, left: 108, 3, 4\n(4) - (108) = -104, left: -104, 3\n(-104) / (3) = -104/3, left: -104/3\n(108) - (4) = 104, left: 104, 3\n(3) - (104) = -101, left: -101\n(4) * (108) = 432, left: 432, 3\n(3) / (432) = 1/144, left: 1/144\n(3) + (432) = 435, left: 435\n(108) / (4) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: (((9 * 12) / 4) - 3)"}, {"input": "9 3 4 12\n", "output": "(12) / (4) = 3, left: 3, 9, 3\n(3) * (3) = 9, left: 9, 9\n(3) / (3) = 1, left: 1, 9\n(3) / (3) = 1, left: 1, 9\n(9) + (1) = 10, left: 10\n(3) + (3) = 6, left: 6, 9\n(9) / (6) = 3/2, left: 3/2\n(3) - (3) = 0, left: 0, 9\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (12 / 4))"}, {"input": "9 3 4 12\n", "output": "(12) - (4) = 8, left: 8, 9, 3\n(9) * (3) = 27, left: 27, 8\n(8) - (27) = -19, left: -19\n(8) * (27) = 216, left: 216\n(8) + (27) = 35, left: 35\n(9) - (3) = 6, left: 6, 8\n(6) / (8) = 3/4, left: 3/4\n(8) / (6) = 4/3, left: 4/3\n(9) / (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((12 - 4) * (9 / 3))"}, {"input": "9 3 4 12\n", "output": "(4) + (12) = 16, left: 16, 9, 3\n(16) / (3) = 16/3, left: 16/3, 9\n(16) - (9) = 7, left: 7, 3\n(3) / (9) = 1/3, left: 1/3, 16\n(9) / (3) = 3, left: 3, 16\n(9) * (3) = 27, left: 27, 16\n(16) / (27) = 16/27, left: 16/27\n(4) / (12) = 1/3, left: 1/3, 9, 3\n(9) / (1/3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 / (4 / 12)) - 3)"}, {"input": "5 10 9 5\n", "output": "(10) * (5) = 50, left: 50, 5, 9\n(10) / (5) = 2, left: 2, 5, 9\n(5) + (2) = 7, left: 7, 9\n(2) / (9) = 2/9, left: 2/9, 5\n(10) + (5) = 15, left: 15, 5, 9\n(10) * (9) = 90, left: 90, 5, 5\n(90) / (5) = 18, left: 18, 5\n(9) - (10) = -1, left: -1, 5, 5\n(5) * (5) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((9 - 10) + (5 * 5))"}, {"input": "5 10 9 5\n", "output": "(9) / (10) = 9/10, left: 9/10, 5, 5\n(5) * (9/10) = 9/2, left: 9/2, 5\n(5) + (9/2) = 19/2, left: 19/2\n(5) + (9/10) = 59/10, left: 59/10, 5\n(10) + (9) = 19, left: 19, 5, 5\n(5) - (5) = 0, left: 0, 19\n(5) + (19) = 24, left: 24, 5\n(9) - (10) = -1, left: -1, 5, 5\n(5) * (5) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((9 - 10) + (5 * 5))"}, {"input": "5 10 9 5\n", "output": "(9) / (5) = 9/5, left: 9/5, 10, 5\n(5) / (9) = 5/9, left: 5/9, 10, 5\n(5) + (10) = 15, left: 15, 9, 5\n(15) - (5) = 10, left: 10, 9\n(10) - (5) = 5, left: 5, 9, 5\n(5) / (5) = 1, left: 1, 10, 9\n(10) - (9) = 1, left: 1, 1\n(5) * (5) = 25, left: 25, 10, 9\n(25) - (10) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((5 * 5) - 10))"}, {"input": "5 10 9 5\n", "output": "(5) + (5) = 10, left: 10, 10, 9\n(10) - (10) = 0, left: 0, 9\n(5) / (5) = 1, left: 1, 10, 9\n(10) + (9) = 19, left: 19, 1\n(10) / (9) = 10/9, left: 10/9, 1\n(1) / (10/9) = 9/10, left: 9/10\n(1) / (10) = 1/10, left: 1/10, 9\n(5) * (5) = 25, left: 25, 10, 9\n(9) - (10) = -1, left: -1, 25\n(25) + (-1) = 24, left: 24\nreach 24! expression: ((5 * 5) + (9 - 10))"}, {"input": "5 10 9 5\n", "output": "(9) - (5) = 4, left: 4, 5, 10\n(5) - (10) = -5, left: -5, 9, 5\n(9) + (-5) = 4, left: 4, 5\n(10) / (5) = 2, left: 2, 9, 5\n(9) / (2) = 9/2, left: 9/2, 5\n(5) + (9) = 14, left: 14, 10, 5\n(9) / (5) = 9/5, left: 9/5, 10, 5\n(9) - (10) = -1, left: -1, 5, 5\n(5) * (5) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((9 - 10) + (5 * 5))"}, {"input": "5 10 9 5\n", "output": "(10) - (5) = 5, left: 5, 5, 9\n(5) - (5) = 0, left: 0, 9\n(10) + (5) = 15, left: 15, 5, 9\n(5) / (9) = 5/9, left: 5/9, 15\n(5) - (10) = -5, left: -5, 5, 9\n(10) / (5) = 2, left: 2, 5, 9\n(9) - (5) = 4, left: 4, 5, 10\n(5) - (10) = -5, left: -5, 9, 5\n(5) - (9) = -4, left: -4, -5\n(5) + (9) = 14, left: 14, 10, 5\n(10) * (9) = 90, left: 90, 5, 5\n(9) - (10) = -1, left: -1, 5, 5\n(5) * (5) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((9 - 10) + (5 * 5))"}, {"input": "5 10 9 5\n", "output": "(10) - (5) = 5, left: 5, 5, 9\n(5) - (5) = 0, left: 0, 9\n(10) * (5) = 50, left: 50, 5, 9\n(5) - (10) = -5, left: -5, 5, 9\n(10) / (5) = 2, left: 2, 5, 9\n(10) + (5) = 15, left: 15, 5, 9\n(9) / (10) = 9/10, left: 9/10, 5, 5\n(5) + (9/10) = 59/10, left: 59/10, 5\n(10) + (9) = 19, left: 19, 5, 5\n(5) / (19) = 5/19, left: 5/19, 5\n(10) / (9) = 10/9, left: 10/9, 5, 5\n(9) - (10) = -1, left: -1, 5, 5\n(5) * (5) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((9 - 10) + (5 * 5))"}, {"input": "4 12 6 7\n", "output": "(4) * (12) = 48, left: 48, 6, 7\n(7) * (48) = 336, left: 336, 6\n(4) + (12) = 16, left: 16, 6, 7\n(4) / (12) = 1/3, left: 1/3, 6, 7\n(12) - (4) = 8, left: 8, 6, 7\n(12) / (4) = 3, left: 3, 6, 7\n(6) - (3) = 3, left: 3, 7\n(3) - (7) = -4, left: -4\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (12 / 4)))"}, {"input": "4 12 6 7\n", "output": "(4) * (7) = 28, left: 28, 12, 6\n(6) - (12) = -6, left: -6, 28\n(12) - (6) = 6, left: 6, 28\n(7) / (4) = 7/4, left: 7/4, 12, 6\n(12) + (6) = 18, left: 18, 7/4\n(4) / (7) = 4/7, left: 4/7, 12, 6\n(6) / (4/7) = 21/2, left: 21/2, 12\n(7) - (4) = 3, left: 3, 12, 6\n(12) * (6) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 * 6) / (7 - 4))"}, {"input": "4 12 6 7\n", "output": "(7) - (4) = 3, left: 3, 12, 6\n(6) - (3) = 3, left: 3, 12\n(3) - (12) = -9, left: -9\n(3) - (6) = -3, left: -3, 12\n(-3) - (12) = -15, left: -15\n(6) * (3) = 18, left: 18, 12\n(12) - (18) = -6, left: -6\n(18) / (12) = 3/2, left: 3/2\n(6) / (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (6 / (7 - 4)))"}, {"input": "4 12 6 7\n", "output": "(6) - (4) = 2, left: 2, 12, 7\n(7) * (2) = 14, left: 14, 12\n(4) - (6) = -2, left: -2, 12, 7\n(-2) / (7) = -2/7, left: -2/7, 12\n(12) + (6) = 18, left: 18, 4, 7\n(7) * (18) = 126, left: 126, 4\n(6) - (12) = -6, left: -6, 4, 7\n(12) * (6) = 72, left: 72, 4, 7\n(7) - (4) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 * 6) / (7 - 4))"}, {"input": "4 12 6 7\n", "output": "(4) + (7) = 11, left: 11, 12, 6\n(11) / (12) = 11/12, left: 11/12, 6\n(4) / (7) = 4/7, left: 4/7, 12, 6\n(12) * (4/7) = 48/7, left: 48/7, 6\n(4/7) - (12) = -80/7, left: -80/7, 6\n(12) / (4/7) = 21, left: 21, 6\n(6) * (4/7) = 24/7, left: 24/7, 12\n(7) - (4) = 3, left: 3, 12, 6\n(6) / (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (6 / (7 - 4)))"}, {"input": "4 12 6 7\n", "output": "(4) / (6) = 2/3, left: 2/3, 12, 7\n(4) + (6) = 10, left: 10, 12, 7\n(7) + (10) = 17, left: 17, 12\n(12) * (10) = 120, left: 120, 7\n(4) * (6) = 24, left: 24, 12, 7\n(6) / (4) = 3/2, left: 3/2, 12, 7\n(6) - (4) = 2, left: 2, 12, 7\n(4) - (6) = -2, left: -2, 12, 7\n(12) + (6) = 18, left: 18, 4, 7\n(6) - (12) = -6, left: -6, 4, 7\n(6) / (12) = 1/2, left: 1/2, 4, 7\n(12) * (6) = 72, left: 72, 4, 7\n(7) - (4) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 * 6) / (7 - 4))"}, {"input": "5 9 12 13\n", "output": "(12) / (5) = 12/5, left: 12/5, 9, 13\n(13) + (12/5) = 77/5, left: 77/5, 9\n(5) / (9) = 5/9, left: 5/9, 12, 13\n(9) / (12) = 3/4, left: 3/4, 5, 13\n(5) + (13) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((5 + 13) / (9 / 12))"}, {"input": "5 9 12 13\n", "output": "(9) - (5) = 4, left: 4, 12, 13\n(5) + (9) = 14, left: 14, 12, 13\n(5) / (9) = 5/9, left: 5/9, 12, 13\n(12) * (5/9) = 20/3, left: 20/3, 13\n(12) - (5/9) = 103/9, left: 103/9, 13\n(9) / (5) = 9/5, left: 9/5, 12, 13\n(13) + (9/5) = 74/5, left: 74/5, 12\n(12) - (9) = 3, left: 3, 5, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((12 - 9) * (13 - 5))"}, {"input": "5 9 12 13\n", "output": "(5) / (9) = 5/9, left: 5/9, 12, 13\n(5) - (9) = -4, left: -4, 12, 13\n(-4) - (13) = -17, left: -17, 12\n(5) * (9) = 45, left: 45, 12, 13\n(9) + (12) = 21, left: 21, 5, 13\n(9) - (12) = -3, left: -3, 5, 13\n(5) / (-3) = -5/3, left: -5/3, 13\n(13) + (-5/3) = 34/3, left: 34/3\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((9 - 12) * (5 - 13))"}, {"input": "5 9 12 13\n", "output": "(12) - (5) = 7, left: 7, 9, 13\n(9) / (13) = 9/13, left: 9/13, 7\n(5) / (12) = 5/12, left: 5/12, 9, 13\n(12) / (5) = 12/5, left: 12/5, 9, 13\n(5) / (9) = 5/9, left: 5/9, 12, 13\n(5) + (9) = 14, left: 14, 12, 13\n(13) * (14) = 182, left: 182, 12\n(9) / (12) = 3/4, left: 3/4, 5, 13\n(5) + (13) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((5 + 13) / (9 / 12))"}, {"input": "5 9 12 13\n", "output": "(13) / (9) = 13/9, left: 13/9, 5, 12\n(9) + (13) = 22, left: 22, 5, 12\n(5) - (22) = -17, left: -17, 12\n(12) - (5) = 7, left: 7, 22\n(9) - (13) = -4, left: -4, 5, 12\n(9) / (13) = 9/13, left: 9/13, 5, 12\n(13) - (9) = 4, left: 4, 5, 12\n(5) + (13) = 18, left: 18, 9, 12\n(18) / (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((5 + 13) / 9))"}, {"input": "5 9 12 13\n", "output": "(9) / (13) = 9/13, left: 9/13, 5, 12\n(5) + (12) = 17, left: 17, 9/13\n(13) - (9) = 4, left: 4, 5, 12\n(13) / (9) = 13/9, left: 13/9, 5, 12\n(5) - (13/9) = 32/9, left: 32/9, 12\n(5) / (13) = 5/13, left: 5/13, 9, 12\n(9) - (5/13) = 112/13, left: 112/13, 12\n(5) - (13) = -8, left: -8, 9, 12\n(9) - (12) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (9 - 12))"}, {"input": "6 2 2 7\n", "output": "(2) * (7) = 14, left: 14, 6, 2\n(14) / (2) = 7, left: 7, 6\n(2) / (7) = 2/7, left: 2/7, 6, 2\n(2/7) - (6) = -40/7, left: -40/7, 2\n(2) * (-40/7) = -80/7, left: -80/7\n(7) / (2) = 7/2, left: 7/2, 6, 2\n(2) - (7) = -5, left: -5, 6, 2\n(2) + (7) = 9, left: 9, 6, 2\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (2 + 7)))"}, {"input": "6 2 2 7\n", "output": "(2) / (6) = 1/3, left: 1/3, 2, 7\n(2) - (7) = -5, left: -5, 1/3\n(2) - (6) = -4, left: -4, 2, 7\n(2) * (2) = 4, left: 4, 6, 7\n(6) * (4) = 24, left: 24, 7\n(2) + (2) = 4, left: 4, 6, 7\n(4) - (6) = -2, left: -2, 7\n(6) + (7) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (6 + 7)) - 2)"}, {"input": "6 2 2 7\n", "output": "(2) - (2) = 0, left: 0, 6, 7\n(2) * (2) = 4, left: 4, 6, 7\n(2) / (2) = 1, left: 1, 6, 7\n(7) / (2) = 7/2, left: 7/2, 6, 2\n(2) * (7/2) = 7, left: 7, 6\n(2) + (7) = 9, left: 9, 6, 2\n(9) / (2) = 9/2, left: 9/2, 6\n(6) / (9/2) = 4/3, left: 4/3\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (2 + 7)))"}, {"input": "6 2 2 7\n", "output": "(2) / (6) = 1/3, left: 1/3, 2, 7\n(6) + (2) = 8, left: 8, 2, 7\n(2) + (7) = 9, left: 9, 8\n(2) - (2) = 0, left: 0, 6, 7\n(6) - (7) = -1, left: -1, 0\n(0) / (-1) = 0, left: 0\n(2) + (2) = 4, left: 4, 6, 7\n(6) + (7) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (6 + 7)) - 2)"}, {"input": "6 2 2 7\n", "output": "(2) - (7) = -5, left: -5, 6, 2\n(6) / (-5) = -6/5, left: -6/5, 2\n(2) / (7) = 2/7, left: 2/7, 6, 2\n(6) + (2) = 8, left: 8, 2/7\n(2) - (6) = -4, left: -4, 2/7\n(2) + (2/7) = 16/7, left: 16/7, 6\n(2) + (7) = 9, left: 9, 6, 2\n(6) - (2) = 4, left: 4, 9\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (2 + 7)))"}, {"input": "6 2 2 7\n", "output": "(2) - (2) = 0, left: 0, 6, 7\n(2) * (2) = 4, left: 4, 6, 7\n(7) * (4) = 28, left: 28, 6\n(2) + (2) = 4, left: 4, 6, 7\n(4) - (7) = -3, left: -3, 6\n(2) / (2) = 1, left: 1, 6, 7\n(2) - (7) = -5, left: -5, 6, 2\n(7) - (2) = 5, left: 5, 6, 2\n(2) / (7) = 2/7, left: 2/7, 6, 2\n(2) / (6) = 1/3, left: 1/3, 2/7\n(6) * (2/7) = 12/7, left: 12/7, 2\n(2) + (7) = 9, left: 9, 6, 2\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (2 + 7)))"}, {"input": "6 2 2 7\n", "output": "(6) + (2) = 8, left: 8, 2, 7\n(7) / (2) = 7/2, left: 7/2, 8\n(6) - (2) = 4, left: 4, 2, 7\n(6) + (2) = 8, left: 8, 2, 7\n(2) / (6) = 1/3, left: 1/3, 2, 7\n(7) / (2) = 7/2, left: 7/2, 1/3\n(2) - (2) = 0, left: 0, 6, 7\n(7) - (0) = 7, left: 7, 6\n(2) * (2) = 4, left: 4, 6, 7\n(2) / (2) = 1, left: 1, 6, 7\n(7) - (6) = 1, left: 1, 2, 2\n(6) + (7) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (6 + 7)) - 2)"}, {"input": "6 2 2 7\n", "output": "(2) / (6) = 1/3, left: 1/3, 2, 7\n(7) * (1/3) = 7/3, left: 7/3, 2\n(2) + (7/3) = 13/3, left: 13/3\n(2) - (6) = -4, left: -4, 2, 7\n(6) / (2) = 3, left: 3, 2, 7\n(7) * (3) = 21, left: 21, 2\n(2) - (2) = 0, left: 0, 6, 7\n(2) + (2) = 4, left: 4, 6, 7\n(6) * (7) = 42, left: 42, 2, 2\n(42) / (2) = 21, left: 21, 2\n(2) + (21) = 23, left: 23\n(6) + (7) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (6 + 7)) - 2)"}, {"input": "6 2 2 7\n", "output": "(2) * (7) = 14, left: 14, 6, 2\n(2) - (6) = -4, left: -4, 14\n(14) - (2) = 12, left: 12, 6\n(2) / (7) = 2/7, left: 2/7, 6, 2\n(7) / (2) = 7/2, left: 7/2, 6, 2\n(6) + (7/2) = 19/2, left: 19/2, 2\n(2) - (7) = -5, left: -5, 6, 2\n(6) * (-5) = -30, left: -30, 2\n(-30) - (2) = -32, left: -32\n(6) / (2) = 3, left: 3, -5\n(2) + (7) = 9, left: 9, 6, 2\n(9) / (6) = 3/2, left: 3/2, 2\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (2 + 7)))"}, {"input": "1 8 6 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 1, 8\n(1/3) / (8) = 1/24, left: 1/24, 1\n(1/24) / (1) = 1/24, left: 1/24\n(1) - (1/24) = 23/24, left: 23/24\n(1) * (1/24) = 1/24, left: 1/24\n(1) / (1/24) = 24, left: 24\nreach 24! expression: (1 / ((2 / 6) / 8))"}, {"input": "1 8 6 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 1, 8\n(1/3) / (8) = 1/24, left: 1/24, 1\n(1/24) / (1) = 1/24, left: 1/24\n(1) - (1/24) = 23/24, left: 23/24\n(1/24) - (1) = -23/24, left: -23/24\n(1) * (1/24) = 1/24, left: 1/24\n(1) / (1/24) = 24, left: 24\nreach 24! expression: (1 / ((2 / 6) / 8))"}, {"input": "1 8 6 2\n", "output": "(6) + (2) = 8, left: 8, 1, 8\n(1) * (8) = 8, left: 8, 8\n(8) / (8) = 1, left: 1\n(1) - (8) = -7, left: -7, 8\n(8) * (8) = 64, left: 64, 1\n(8) / (8) = 1, left: 1, 1\n(6) / (2) = 3, left: 3, 1, 8\n(8) - (3) = 5, left: 5, 1\n(8) * (3) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * (6 / 2)) / 1)"}, {"input": "1 8 6 2\n", "output": "(6) + (2) = 8, left: 8, 1, 8\n(1) - (8) = -7, left: -7, 8\n(8) + (-7) = 1, left: 1\n(1) / (8) = 1/8, left: 1/8, 8\n(8) + (8) = 16, left: 16, 1\n(1) - (8) = -7, left: -7, 8\n(8) - (-7) = 15, left: 15\n(2) / (6) = 1/3, left: 1/3, 1, 8\n(8) / (1/3) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 / (2 / 6)) / 1)"}, {"input": "1 8 6 2\n", "output": "(1) + (2) = 3, left: 3, 8, 6\n(6) / (8) = 3/4, left: 3/4, 3\n(8) - (6) = 2, left: 2, 3\n(8) * (6) = 48, left: 48, 3\n(8) * (3) = 24, left: 24, 6\n(8) + (3) = 11, left: 11, 6\n(6) * (3) = 18, left: 18, 8\n(8) + (18) = 26, left: 26\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (1 + 2)))"}, {"input": "1 8 6 2\n", "output": "(6) / (2) = 3, left: 3, 1, 8\n(8) + (3) = 11, left: 11, 1\n(3) - (8) = -5, left: -5, 1\n(1) + (-5) = -4, left: -4\n(1) - (-5) = 6, left: 6\n(8) - (3) = 5, left: 5, 1\n(1) / (5) = 1/5, left: 1/5\n(5) / (1) = 5, left: 5\n(8) * (3) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (8 * (6 / 2)))"}, {"input": "1 8 6 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 1, 8\n(1/3) / (8) = 1/24, left: 1/24, 1\n(1/24) / (1) = 1/24, left: 1/24\n(1) - (1/24) = 23/24, left: 23/24\n(1/24) - (1) = -23/24, left: -23/24\n(1) * (1/24) = 1/24, left: 1/24\n(1) / (1/24) = 24, left: 24\nreach 24! expression: (1 / ((2 / 6) / 8))"}, {"input": "1 8 6 2\n", "output": "(6) + (2) = 8, left: 8, 1, 8\n(8) - (1) = 7, left: 7, 8\n(1) + (8) = 9, left: 9, 8\n(8) / (9) = 8/9, left: 8/9\n(8) - (1) = 7, left: 7, 8\n(1) - (8) = -7, left: -7, 8\n(8) / (8) = 1, left: 1, 1\n(8) * (8) = 64, left: 64, 1\n(8) - (8) = 0, left: 0, 1\n(6) / (2) = 3, left: 3, 1, 8\n(3) / (8) = 3/8, left: 3/8, 1\n(8) / (3) = 8/3, left: 8/3, 1\n(8) * (3) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * (6 / 2)) / 1)"}, {"input": "1 8 6 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 1, 8\n(1/3) / (8) = 1/24, left: 1/24, 1\n(1/24) / (1) = 1/24, left: 1/24\n(1) - (1/24) = 23/24, left: 23/24\n(1/24) - (1) = -23/24, left: -23/24\n(1) * (1/24) = 1/24, left: 1/24\n(1) / (1/24) = 24, left: 24\nreach 24! expression: (1 / ((2 / 6) / 8))"}, {"input": "4 2 13 6\n", "output": "(2) - (6) = -4, left: -4, 4, 13\n(13) - (-4) = 17, left: 17, 4\n(6) - (2) = 4, left: 4, 4, 13\n(4) - (4) = 0, left: 0, 13\n(2) * (6) = 12, left: 12, 4, 13\n(4) + (12) = 16, left: 16, 13\n(13) - (2) = 11, left: 11, 4, 6\n(2) * (13) = 26, left: 26, 4, 6\n(6) - (4) = 2, left: 2, 26\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * 13) - (6 - 4))"}, {"input": "4 2 13 6\n", "output": "(4) - (2) = 2, left: 2, 13, 6\n(4) / (2) = 2, left: 2, 13, 6\n(2) / (4) = 1/2, left: 1/2, 13, 6\n(6) / (13) = 6/13, left: 6/13, 1/2\n(4) + (2) = 6, left: 6, 13, 6\n(13) - (6) = 7, left: 7, 6\n(13) * (6) = 78, left: 78, 6\n(6) - (4) = 2, left: 2, 2, 13\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * 13) - (6 - 4))"}, {"input": "4 2 13 6\n", "output": "(13) - (2) = 11, left: 11, 4, 6\n(4) - (11) = -7, left: -7, 6\n(4) * (6) = 24, left: 24, 11\n(24) - (11) = 13, left: 13\n(6) - (4) = 2, left: 2, 11\n(4) - (6) = -2, left: -2, 11\n(11) - (6) = 5, left: 5, 4\n(2) * (13) = 26, left: 26, 4, 6\n(26) - (6) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((2 * 13) - 6))"}, {"input": "4 2 13 6\n", "output": "(2) - (4) = -2, left: -2, 13, 6\n(6) - (13) = -7, left: -7, -2\n(4) / (2) = 2, left: 2, 13, 6\n(6) * (2) = 12, left: 12, 13\n(2) / (4) = 1/2, left: 1/2, 13, 6\n(13) - (6) = 7, left: 7, 1/2\n(1/2) / (7) = 1/14, left: 1/14\n(4) - (6) = -2, left: -2, 2, 13\n(2) * (13) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((4 - 6) + (2 * 13))"}, {"input": "4 2 13 6\n", "output": "(2) - (4) = -2, left: -2, 13, 6\n(6) - (2) = 4, left: 4, 4, 13\n(4) / (13) = 4/13, left: 4/13, 4\n(2) * (6) = 12, left: 12, 4, 13\n(2) - (6) = -4, left: -4, 4, 13\n(6) / (2) = 3, left: 3, 4, 13\n(4) * (3) = 12, left: 12, 13\n(4) - (13) = -9, left: -9, 2, 6\n(2) * (-9) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (2 * (4 - 13)))"}, {"input": "4 2 13 6\n", "output": "(4) * (2) = 8, left: 8, 13, 6\n(2) / (4) = 1/2, left: 1/2, 13, 6\n(4) / (2) = 2, left: 2, 13, 6\n(6) - (2) = 4, left: 4, 13\n(13) * (6) = 78, left: 78, 2\n(78) - (2) = 76, left: 76\n(2) - (6) = -4, left: -4, 4, 13\n(-4) - (13) = -17, left: -17, 4\n(2) + (6) = 8, left: 8, 4, 13\n(13) + (8) = 21, left: 21, 4\n(4) + (13) = 17, left: 17, 2, 6\n(4) - (13) = -9, left: -9, 2, 6\n(2) * (-9) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (2 * (4 - 13)))"}, {"input": "4 2 13 6\n", "output": "(2) - (4) = -2, left: -2, 13, 6\n(-2) - (6) = -8, left: -8, 13\n(-2) / (6) = -1/3, left: -1/3, 13\n(4) * (2) = 8, left: 8, 13, 6\n(8) - (6) = 2, left: 2, 13\n(8) - (13) = -5, left: -5, 6\n(4) / (2) = 2, left: 2, 13, 6\n(6) + (2) = 8, left: 8, 13\n(2) / (4) = 1/2, left: 1/2, 13, 6\n(4) - (2) = 2, left: 2, 13, 6\n(4) / (6) = 2/3, left: 2/3, 2, 13\n(4) - (6) = -2, left: -2, 2, 13\n(2) * (13) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((4 - 6) + (2 * 13))"}, {"input": "11 5 2 5\n", "output": "(5) - (5) = 0, left: 0, 11, 2\n(11) * (0) = 0, left: 0, 2\n(0) / (2) = 0, left: 0\n(0) - (2) = -2, left: -2, 11\n(2) * (0) = 0, left: 0, 11\n(5) / (5) = 1, left: 1, 11, 2\n(2) / (11) = 2/11, left: 2/11, 1\n(11) - (1) = 10, left: 10, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (5 / 5)))"}, {"input": "11 5 2 5\n", "output": "(5) - (11) = -6, left: -6, 2, 5\n(5) / (11) = 5/11, left: 5/11, 2, 5\n(5) / (5/11) = 11, left: 11, 2\n(11) - (5) = 6, left: 6, 2, 5\n(5) - (2) = 3, left: 3, 6\n(11) + (5) = 16, left: 16, 2, 5\n(5) + (16) = 21, left: 21, 2\n(5) / (5) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (5 / 5)))"}, {"input": "11 5 2 5\n", "output": "(11) * (5) = 55, left: 55, 5, 2\n(5) - (2) = 3, left: 3, 55\n(11) - (5) = 6, left: 6, 5, 2\n(2) + (6) = 8, left: 8, 5\n(11) / (5) = 11/5, left: 11/5, 5, 2\n(5) - (11) = -6, left: -6, 5, 2\n(2) / (5) = 2/5, left: 2/5, -6\n(5) + (2) = 7, left: 7, 11, 5\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (5 + 2)) - 11)"}, {"input": "11 5 2 5\n", "output": "(11) - (5) = 6, left: 6, 5, 2\n(5) - (11) = -6, left: -6, 5, 2\n(2) / (11) = 2/11, left: 2/11, 5, 5\n(5) / (5) = 1, left: 1, 2/11\n(5) / (2) = 5/2, left: 5/2, 11, 5\n(5) + (2) = 7, left: 7, 11, 5\n(11) * (7) = 77, left: 77, 5\n(77) - (5) = 72, left: 72\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (5 + 2)) - 11)"}, {"input": "11 5 2 5\n", "output": "(2) / (5) = 2/5, left: 2/5, 11, 5\n(5) + (2/5) = 27/5, left: 27/5, 11\n(11) + (2/5) = 57/5, left: 57/5, 5\n(2) * (5) = 10, left: 10, 11, 5\n(11) - (10) = 1, left: 1, 5\n(5) - (2) = 3, left: 3, 11, 5\n(3) - (11) = -8, left: -8, 5\n(2) + (5) = 7, left: 7, 11, 5\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (2 + 5)) - 11)"}, {"input": "11 5 2 5\n", "output": "(11) + (5) = 16, left: 16, 5, 2\n(11) - (5) = 6, left: 6, 5, 2\n(5) / (11) = 5/11, left: 5/11, 5, 2\n(11) + (2) = 13, left: 13, 5, 5\n(5) - (13) = -8, left: -8, 5\n(5) - (5) = 0, left: 0, 13\n(11) - (2) = 9, left: 9, 5, 5\n(2) - (11) = -9, left: -9, 5, 5\n(2) / (11) = 2/11, left: 2/11, 5, 5\n(5) / (5) = 1, left: 1, 2/11\n(11) / (2) = 11/2, left: 11/2, 5, 5\n(5) + (2) = 7, left: 7, 11, 5\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (5 + 2)) - 11)"}, {"input": "6 6 1 13\n", "output": "(6) * (6) = 36, left: 36, 1, 13\n(1) / (36) = 1/36, left: 1/36, 13\n(1) * (36) = 36, left: 36, 13\n(36) / (1) = 36, left: 36, 13\n(1) + (36) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((1 + (6 * 6)) - 13)"}, {"input": "6 6 1 13\n", "output": "(6) - (1) = 5, left: 5, 6, 13\n(6) + (13) = 19, left: 19, 5\n(19) / (5) = 19/5, left: 19/5\n(5) / (19) = 5/19, left: 5/19\n(19) - (5) = 14, left: 14\n(5) + (19) = 24, left: 24\nreach 24! expression: ((6 - 1) + (6 + 13))"}, {"input": "6 6 1 13\n", "output": "(6) * (1) = 6, left: 6, 6, 13\n(6) * (13) = 78, left: 78, 6\n(6) / (13) = 6/13, left: 6/13, 6\n(1) / (6) = 1/6, left: 1/6, 6, 13\n(13) - (1/6) = 77/6, left: 77/6, 6\n(6) - (77/6) = -41/6, left: -41/6\n(6) + (1) = 7, left: 7, 6, 13\n(6) - (1) = 5, left: 5, 6, 13\n(6) + (13) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((6 - 1) + (6 + 13))"}, {"input": "6 6 1 13\n", "output": "(6) / (1) = 6, left: 6, 6, 13\n(1) / (6) = 1/6, left: 1/6, 6, 13\n(6) + (1/6) = 37/6, left: 37/6, 13\n(6) - (13) = -7, left: -7, 1/6\n(6) + (1) = 7, left: 7, 6, 13\n(6) * (7) = 42, left: 42, 13\n(13) * (7) = 91, left: 91, 6\n(1) - (6) = -5, left: -5, 6, 13\n(-5) - (6) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((1 - 6) - 6))"}, {"input": "6 6 1 13\n", "output": "(6) - (1) = 5, left: 5, 6, 13\n(6) + (13) = 19, left: 19, 5\n(19) / (5) = 19/5, left: 19/5\n(5) / (19) = 5/19, left: 5/19\n(19) - (5) = 14, left: 14\n(5) + (19) = 24, left: 24\nreach 24! expression: ((6 - 1) + (6 + 13))"}, {"input": "6 6 1 13\n", "output": "(6) - (13) = -7, left: -7, 6, 1\n(6) + (-7) = -1, left: -1, 1\n(6) * (13) = 78, left: 78, 6, 1\n(1) * (78) = 78, left: 78, 6\n(6) / (13) = 6/13, left: 6/13, 6, 1\n(6) / (6/13) = 13, left: 13, 1\n(1) - (13) = -12, left: -12\n(6) + (13) = 19, left: 19, 6, 1\n(6) - (1) = 5, left: 5, 19\n(19) + (5) = 24, left: 24\nreach 24! expression: ((6 + 13) + (6 - 1))"}, {"input": "6 6 1 13\n", "output": "(6) * (6) = 36, left: 36, 1, 13\n(1) / (36) = 1/36, left: 1/36, 13\n(13) / (1/36) = 468, left: 468\n(1) - (36) = -35, left: -35, 13\n(-35) / (13) = -35/13, left: -35/13\n(1) * (36) = 36, left: 36, 13\n(36) - (13) = 23, left: 23\n(36) / (1) = 36, left: 36, 13\n(1) + (36) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((1 + (6 * 6)) - 13)"}, {"input": "6 6 1 13\n", "output": "(6) - (1) = 5, left: 5, 6, 13\n(6) + (13) = 19, left: 19, 5\n(19) / (5) = 19/5, left: 19/5\n(5) / (19) = 5/19, left: 5/19\n(19) - (5) = 14, left: 14\n(5) + (19) = 24, left: 24\nreach 24! expression: ((6 - 1) + (6 + 13))"}, {"input": "6 6 1 13\n", "output": "(6) - (1) = 5, left: 5, 6, 13\n(6) + (13) = 19, left: 19, 5\n(19) / (5) = 19/5, left: 19/5\n(5) / (19) = 5/19, left: 5/19\n(19) - (5) = 14, left: 14\n(5) + (19) = 24, left: 24\nreach 24! expression: ((6 - 1) + (6 + 13))"}, {"input": "3 3 10 13\n", "output": "(10) + (13) = 23, left: 23, 3, 3\n(3) / (23) = 3/23, left: 3/23, 3\n(3) / (23) = 3/23, left: 3/23, 3\n(23) / (3) = 23/3, left: 23/3, 3\n(3) / (3) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (3 / 3))"}, {"input": "3 3 10 13\n", "output": "(3) * (13) = 39, left: 39, 3, 10\n(3) + (10) = 13, left: 13, 39\n(3) + (13) = 16, left: 16, 3, 10\n(13) / (3) = 13/3, left: 13/3, 3, 10\n(13) - (3) = 10, left: 10, 3, 10\n(3) - (13) = -10, left: -10, 3, 10\n(3) * (10) = 30, left: 30, 3, 13\n(10) + (13) = 23, left: 23, 3, 3\n(3) / (3) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (3 / 3))"}, {"input": "3 3 10 13\n", "output": "(10) - (13) = -3, left: -3, 3, 3\n(3) - (3) = 0, left: 0, -3\n(10) / (13) = 10/13, left: 10/13, 3, 3\n(10/13) - (3) = -29/13, left: -29/13, 3\n(10) + (13) = 23, left: 23, 3, 3\n(23) / (3) = 23/3, left: 23/3, 3\n(3) - (23/3) = -14/3, left: -14/3\n(3) - (23) = -20, left: -20, 3\n(3) / (3) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (3 / 3))"}, {"input": "3 3 10 13\n", "output": "(13) / (3) = 13/3, left: 13/3, 3, 10\n(3) / (13) = 3/13, left: 3/13, 3, 10\n(3) / (10) = 3/10, left: 3/10, 3/13\n(3/13) - (3) = -36/13, left: -36/13, 10\n(3) * (13) = 39, left: 39, 3, 10\n(3) - (3) = 0, left: 0, 10, 13\n(10) * (13) = 130, left: 130, 0\n(3) / (3) = 1, left: 1, 10, 13\n(10) + (13) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: ((3 / 3) + (10 + 13))"}, {"input": "3 3 10 13\n", "output": "(10) + (13) = 23, left: 23, 3, 3\n(3) + (23) = 26, left: 26, 3\n(3) * (23) = 69, left: 69, 3\n(3) - (69) = -66, left: -66\n(3) - (23) = -20, left: -20, 3\n(3) * (23) = 69, left: 69, 3\n(3) + (69) = 72, left: 72\n(23) - (3) = 20, left: 20, 3\n(3) / (3) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (3 / 3))"}, {"input": "3 3 10 13\n", "output": "(3) - (10) = -7, left: -7, 3, 13\n(13) * (-7) = -91, left: -91, 3\n(3) / (13) = 3/13, left: 3/13, 3, 10\n(3/13) / (10) = 3/130, left: 3/130, 3\n(3) - (13) = -10, left: -10, 3, 10\n(10) - (3) = 7, left: 7, 3, 13\n(3) * (10) = 30, left: 30, 3, 13\n(3) / (3) = 1, left: 1, 10, 13\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (3 / 3)))"}, {"input": "4 10 13 4\n", "output": "(10) * (13) = 130, left: 130, 4, 4\n(4) / (4) = 1, left: 1, 130\n(10) + (13) = 23, left: 23, 4, 4\n(4) - (23) = -19, left: -19, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (4 / 4))"}, {"input": "4 10 13 4\n", "output": "(4) / (10) = 2/5, left: 2/5, 13, 4\n(2/5) / (4) = 1/10, left: 1/10, 13\n(10) / (4) = 5/2, left: 5/2, 13, 4\n(10) + (13) = 23, left: 23, 4, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (4 / 4))"}, {"input": "4 10 13 4\n", "output": "(10) + (4) = 14, left: 14, 4, 13\n(14) - (4) = 10, left: 10, 13\n(13) / (10) = 13/10, left: 13/10\n(4) / (10) = 2/5, left: 2/5, 4, 13\n(2/5) - (4) = -18/5, left: -18/5, 13\n(4) - (10) = -6, left: -6, 4, 13\n(4) + (13) = 17, left: 17, 10, 4\n(4) + (4) = 8, left: 8, 10, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (13 - 10))"}, {"input": "4 10 13 4\n", "output": "(4) + (13) = 17, left: 17, 10, 4\n(4) * (13) = 52, left: 52, 10, 4\n(52) / (4) = 13, left: 13, 10\n(13) / (4) = 13/4, left: 13/4, 10, 4\n(4) - (10) = -6, left: -6, 13/4\n(4) * (4) = 16, left: 16, 10, 13\n(13) + (16) = 29, left: 29, 10\n(4) / (4) = 1, left: 1, 10, 13\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (4 / 4)))"}, {"input": "4 10 13 4\n", "output": "(10) * (13) = 130, left: 130, 4, 4\n(4) + (130) = 134, left: 134, 4\n(4) * (130) = 520, left: 520, 4\n(130) / (4) = 65/2, left: 65/2, 4\n(10) + (13) = 23, left: 23, 4, 4\n(4) * (23) = 92, left: 92, 4\n(4) + (23) = 27, left: 27, 4\n(4) - (4) = 0, left: 0, 23\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (4 / 4))"}, {"input": "4 10 13 4\n", "output": "(13) - (4) = 9, left: 9, 4, 10\n(13) * (4) = 52, left: 52, 4, 10\n(10) - (4) = 6, left: 6, 4, 13\n(10) / (4) = 5/2, left: 5/2, 4, 13\n(4) - (10) = -6, left: -6, 4, 13\n(4) + (13) = 17, left: 17, 10, 4\n(4) * (13) = 52, left: 52, 10, 4\n(10) + (13) = 23, left: 23, 4, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (4 / 4))"}, {"input": "4 10 13 4\n", "output": "(13) / (4) = 13/4, left: 13/4, 4, 10\n(10) / (4) = 5/2, left: 5/2, 13/4\n(4) * (10) = 40, left: 40, 13, 4\n(13) / (4) = 13/4, left: 13/4, 40\n(10) / (4) = 5/2, left: 5/2, 13, 4\n(4) - (10) = -6, left: -6, 13, 4\n(10) / (13) = 10/13, left: 10/13, 4, 4\n(10) + (13) = 23, left: 23, 4, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (4 / 4))"}, {"input": "6 2 11 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 2, 6\n(6/11) - (6) = -60/11, left: -60/11, 2\n(2) * (6) = 12, left: 12, 6/11\n(11) / (6) = 11/6, left: 11/6, 2, 6\n(2) * (6) = 12, left: 12, 11/6\n(6) + (11) = 17, left: 17, 2, 6\n(6) - (6) = 0, left: 0, 2, 11\n(6) / (6) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(6) - (2) = 4, left: 4, 6, 11\n(2) / (6) = 1/3, left: 1/3, 6, 11\n(6) - (11) = -5, left: -5, 2, 6\n(2) + (6) = 8, left: 8, -5\n(6) * (6) = 36, left: 36, 2, 11\n(11) / (36) = 11/36, left: 11/36, 2\n(11/36) / (2) = 11/72, left: 11/72\n(6) / (6) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(6) - (11) = -5, left: -5, 2, 6\n(-5) - (2) = -7, left: -7, 6\n(6) - (6) = 0, left: 0, 2, 11\n(2) * (0) = 0, left: 0, 11\n(6) - (6) = 0, left: 0, 2, 11\n(6) / (6) = 1, left: 1, 2, 11\n(1) / (2) = 1/2, left: 1/2, 11\n(1/2) / (11) = 1/22, left: 1/22\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(11) + (6) = 17, left: 17, 6, 2\n(2) / (17) = 2/17, left: 2/17, 6\n(6) + (11) = 17, left: 17, 2, 6\n(6) - (17) = -11, left: -11, 2\n(6) - (11) = -5, left: -5, 2, 6\n(2) / (6) = 1/3, left: 1/3, -5\n(-5) * (1/3) = -5/3, left: -5/3\n(6) / (6) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(6) / (6) = 1, left: 1, 2, 11\n(2) + (1) = 3, left: 3, 11\n(1) / (2) = 1/2, left: 1/2, 11\n(2) / (1) = 2, left: 2, 11\n(2) / (11) = 2/11, left: 2/11\n(11) / (2) = 11/2, left: 11/2\n(1) - (2) = -1, left: -1, 11\n(11) / (1) = 11, left: 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(11) - (6) = 5, left: 5, 2, 6\n(6) * (5) = 30, left: 30, 2\n(11) / (6) = 11/6, left: 11/6, 2, 6\n(6) - (2) = 4, left: 4, 11/6\n(2) - (11/6) = 1/6, left: 1/6, 6\n(6) * (11) = 66, left: 66, 2, 6\n(6) - (11) = -5, left: -5, 2, 6\n(6) - (6) = 0, left: 0, 2, 11\n(2) + (11) = 13, left: 13, 0\n(6) - (6) = 0, left: 0, 2, 11\n(6) * (6) = 36, left: 36, 2, 11\n(6) / (6) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(6) * (11) = 66, left: 66, 2, 6\n(66) / (6) = 11, left: 11, 2\n(6) / (11) = 6/11, left: 6/11, 2, 6\n(6) - (11) = -5, left: -5, 2, 6\n(11) - (6) = 5, left: 5, 2, 6\n(11) / (6) = 11/6, left: 11/6, 2, 6\n(6) + (11) = 17, left: 17, 2, 6\n(2) * (6) = 12, left: 12, 17\n(17) - (6) = 11, left: 11, 2\n(6) - (6) = 0, left: 0, 2, 11\n(2) - (11) = -9, left: -9, 0\n(6) / (6) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(6) * (2) = 12, left: 12, 11, 6\n(6) + (12) = 18, left: 18, 11\n(6) / (2) = 3, left: 3, 11, 6\n(6) / (3) = 2, left: 2, 11\n(2) / (6) = 1/3, left: 1/3, 11, 6\n(11) - (6) = 5, left: 5, 6, 2\n(2) / (5) = 2/5, left: 2/5, 6\n(6) - (11) = -5, left: -5, 6, 2\n(6) + (11) = 17, left: 17, 2, 6\n(11) - (6) = 5, left: 5, 2, 6\n(2) + (6) = 8, left: 8, 5\n(6) / (6) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "1 6 12 1\n", "output": "(12) / (1) = 12, left: 12, 1, 6\n(1) + (6) = 7, left: 7, 12\n(1) / (12) = 1/12, left: 1/12, 1, 6\n(1) + (12) = 13, left: 13, 6, 1\n(13) / (1) = 13, left: 13, 6\n(12) - (1) = 11, left: 11, 6, 1\n(1) + (1) = 2, left: 2, 6, 12\n(6) * (12) = 72, left: 72, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(1) - (12) = -11, left: -11, 6, 1\n(1) / (12) = 1/12, left: 1/12, 6, 1\n(6) * (1) = 6, left: 6, 1, 12\n(1) / (6) = 1/6, left: 1/6, 1, 12\n(1) + (1/6) = 7/6, left: 7/6, 12\n(7/6) / (12) = 7/72, left: 7/72\n(1) - (1) = 0, left: 0, 6, 12\n(1) + (1) = 2, left: 2, 6, 12\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(1) - (12) = -11, left: -11, 6, 1\n(1) / (-11) = -1/11, left: -1/11, 6\n(6) / (1) = 6, left: 6, 12, 1\n(12) + (1) = 13, left: 13, 1, 6\n(12) - (1) = 11, left: 11, 1, 6\n(1) * (11) = 11, left: 11, 6\n(1) / (1) = 1, left: 1, 6, 12\n(1) + (1) = 2, left: 2, 6, 12\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(6) + (12) = 18, left: 18, 1, 1\n(12) - (1) = 11, left: 11, 1, 6\n(6) / (1) = 6, left: 6, 12, 1\n(1) + (6) = 7, left: 7, 12, 1\n(12) - (7) = 5, left: 5, 1\n(1) * (6) = 6, left: 6, 12, 1\n(1) / (1) = 1, left: 1, 6, 12\n(1) + (1) = 2, left: 2, 6, 12\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(1) / (12) = 1/12, left: 1/12, 1, 6\n(12) * (1) = 12, left: 12, 1, 6\n(12) - (1) = 11, left: 11, 1, 6\n(1) + (11) = 12, left: 12, 6\n(12) / (1) = 12, left: 12, 1, 6\n(1) + (6) = 7, left: 7, 12\n(1) * (1) = 1, left: 1, 6, 12\n(1) + (1) = 2, left: 2, 6, 12\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(12) / (6) = 2, left: 2, 1, 1\n(6) + (12) = 18, left: 18, 1, 1\n(18) - (1) = 17, left: 17, 1\n(1) + (17) = 18, left: 18\n(1) / (18) = 1/18, left: 1/18, 1\n(12) - (6) = 6, left: 6, 1, 1\n(12) / (1) = 12, left: 12, 1, 6\n(6) / (12) = 1/2, left: 1/2, 1\n(6) - (1) = 5, left: 5, 12, 1\n(1) - (6) = -5, left: -5, 12, 1\n(-5) - (1) = -6, left: -6, 12\n(1) + (1) = 2, left: 2, 6, 12\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(6) / (12) = 1/2, left: 1/2, 1, 1\n(12) - (6) = 6, left: 6, 1, 1\n(1) / (12) = 1/12, left: 1/12, 6, 1\n(6) / (1/12) = 72, left: 72, 1\n(1) - (12) = -11, left: -11, 1, 6\n(12) - (1) = 11, left: 11, 1, 6\n(12) / (1) = 12, left: 12, 1, 6\n(1) * (6) = 6, left: 6, 12\n(1) / (6) = 1/6, left: 1/6, 1, 12\n(1) + (1/6) = 7/6, left: 7/6, 12\n(6) + (1) = 7, left: 7, 1, 12\n(1) + (1) = 2, left: 2, 6, 12\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(1) * (12) = 12, left: 12, 6, 1\n(12) / (1) = 12, left: 12, 6, 1\n(12) / (1) = 12, left: 12, 6\n(6) * (12) = 72, left: 72\n(1) + (6) = 7, left: 7, 12, 1\n(12) * (1) = 12, left: 12, 7\n(1) - (6) = -5, left: -5, 12, 1\n(12) / (1) = 12, left: 12, -5\n(12) * (1) = 12, left: 12, 1, 6\n(1) - (12) = -11, left: -11, 1, 6\n(6) - (1) = 5, left: 5, -11\n(1) + (1) = 2, left: 2, 6, 12\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(6) / (12) = 1/2, left: 1/2, 1, 1\n(6) * (12) = 72, left: 72, 1, 1\n(72) - (1) = 71, left: 71, 1\n(12) - (1) = 11, left: 11, 1, 6\n(12) / (1) = 12, left: 12, 1, 6\n(6) / (12) = 1/2, left: 1/2, 1\n(12) / (1) = 12, left: 12, 6, 1\n(12) / (6) = 2, left: 2, 1\n(1) * (12) = 12, left: 12, 6, 1\n(12) - (6) = 6, left: 6, 1\n(1) / (1) = 1, left: 1, 6, 12\n(1) + (1) = 2, left: 2, 6, 12\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "7 8 8 4\n", "output": "(8) / (4) = 2, left: 2, 7, 8\n(2) / (7) = 2/7, left: 2/7, 8\n(8) / (7) = 8/7, left: 8/7, 2\n(4) / (8) = 1/2, left: 1/2, 7, 8\n(8) / (1/2) = 16, left: 16, 7\n(8) + (4) = 12, left: 12, 7, 8\n(8) - (12) = -4, left: -4, 7\n(4) - (8) = -4, left: -4, 7, 8\n(7) + (-4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 + (4 - 8)))"}, {"input": "7 8 8 4\n", "output": "(4) / (8) = 1/2, left: 1/2, 7, 8\n(1/2) - (8) = -15/2, left: -15/2, 7\n(7) / (8) = 7/8, left: 7/8, 1/2\n(1/2) + (7/8) = 11/8, left: 11/8\n(7) - (8) = -1, left: -1, 1/2\n(8) - (4) = 4, left: 4, 7, 8\n(8) * (4) = 32, left: 32, 7\n(7) * (32) = 224, left: 224\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (8 - 4)))"}, {"input": "7 8 8 4\n", "output": "(4) - (8) = -4, left: -4, 7, 8\n(8) * (-4) = -32, left: -32, 7\n(-4) - (8) = -12, left: -12, 7\n(7) * (-12) = -84, left: -84\n(7) - (8) = -1, left: -1, -4\n(7) * (8) = 56, left: 56, -4\n(7) / (8) = 7/8, left: 7/8, -4\n(-4) / (7/8) = -32/7, left: -32/7\n(7) + (-4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 + (4 - 8)))"}, {"input": "7 8 8 4\n", "output": "(7) - (8) = -1, left: -1, 8, 4\n(8) / (4) = 2, left: 2, -1\n(8) + (4) = 12, left: 12, -1\n(4) - (8) = -4, left: -4, -1\n(-1) * (-4) = 4, left: 4\n(8) - (-1) = 9, left: 9, 4\n(4) + (9) = 13, left: 13\n(8) * (-1) = -8, left: -8, 4\n(4) + (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 + (7 - 8)))"}, {"input": "7 8 8 4\n", "output": "(7) / (8) = 7/8, left: 7/8, 8, 4\n(8) + (7/8) = 71/8, left: 71/8, 4\n(7) + (8) = 15, left: 15, 8, 4\n(8) / (7) = 8/7, left: 8/7, 8, 4\n(8) * (4) = 32, left: 32, 8/7\n(8/7) / (32) = 1/28, left: 1/28\n(8/7) - (8) = -48/7, left: -48/7, 4\n(7) * (8) = 56, left: 56, 8, 4\n(8) * (4) = 32, left: 32, 56\n(56) - (32) = 24, left: 24\nreach 24! expression: ((7 * 8) - (8 * 4))"}, {"input": "4 13 12 6\n", "output": "(13) / (6) = 13/6, left: 13/6, 4, 12\n(13) + (6) = 19, left: 19, 4, 12\n(4) / (12) = 1/3, left: 1/3, 19\n(4) * (6) = 24, left: 24, 13, 12\n(13) - (12) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((4 * 6) * (13 - 12))"}, {"input": "4 13 12 6\n", "output": "(13) / (12) = 13/12, left: 13/12, 4, 6\n(6) + (13/12) = 85/12, left: 85/12, 4\n(4) - (85/12) = -37/12, left: -37/12\n(13) - (12) = 1, left: 1, 4, 6\n(6) * (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (6 * (13 - 12)))"}, {"input": "4 13 12 6\n", "output": "(13) - (6) = 7, left: 7, 4, 12\n(12) * (7) = 84, left: 84, 4\n(4) - (84) = -80, left: -80\n(13) - (12) = 1, left: 1, 4, 6\n(1) / (6) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / ((13 - 12) / 6))"}, {"input": "4 13 12 6\n", "output": "(12) - (4) = 8, left: 8, 13, 6\n(4) / (12) = 1/3, left: 1/3, 13, 6\n(6) / (13) = 6/13, left: 6/13, 4, 12\n(13) - (6) = 7, left: 7, 4, 12\n(13) + (6) = 19, left: 19, 4, 12\n(4) + (6) = 10, left: 10, 13, 12\n(4) - (6) = -2, left: -2, 13, 12\n(4) * (6) = 24, left: 24, 13, 12\n(13) - (12) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((4 * 6) * (13 - 12))"}, {"input": "4 13 12 6\n", "output": "(12) / (4) = 3, left: 3, 13, 6\n(12) + (6) = 18, left: 18, 4, 13\n(4) / (13) = 4/13, left: 4/13, 18\n(12) - (6) = 6, left: 6, 4, 13\n(4) * (13) = 52, left: 52, 6\n(6) / (12) = 1/2, left: 1/2, 4, 13\n(12) / (6) = 2, left: 2, 4, 13\n(13) - (12) = 1, left: 1, 4, 6\n(1) / (6) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / ((13 - 12) / 6))"}, {"input": "4 13 12 6\n", "output": "(12) / (13) = 12/13, left: 12/13, 4, 6\n(4) + (6) = 10, left: 10, 12/13\n(10) - (12/13) = 118/13, left: 118/13\n(4) - (6) = -2, left: -2, 12/13\n(4) / (6) = 2/3, left: 2/3, 12/13\n(13) / (12) = 13/12, left: 13/12, 4, 6\n(4) + (13/12) = 61/12, left: 61/12, 6\n(13) - (12) = 1, left: 1, 4, 6\n(6) * (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (6 * (13 - 12)))"}, {"input": "4 13 12 6\n", "output": "(4) / (12) = 1/3, left: 1/3, 13, 6\n(6) * (1/3) = 2, left: 2, 13\n(13) + (6) = 19, left: 19, 4, 12\n(13) * (6) = 78, left: 78, 4, 12\n(4) + (78) = 82, left: 82, 12\n(12) - (13) = -1, left: -1, 4, 6\n(6) - (-1) = 7, left: 7, 4\n(13) - (12) = 1, left: 1, 4, 6\n(6) * (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (6 * (13 - 12)))"}, {"input": "4 13 12 6\n", "output": "(13) - (6) = 7, left: 7, 4, 12\n(7) - (4) = 3, left: 3, 12\n(13) / (6) = 13/6, left: 13/6, 4, 12\n(13/6) - (12) = -59/6, left: -59/6, 4\n(4) + (12) = 16, left: 16, 13/6\n(13) * (6) = 78, left: 78, 4, 12\n(78) - (4) = 74, left: 74, 12\n(13) - (12) = 1, left: 1, 4, 6\n(1) / (6) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / ((13 - 12) / 6))"}, {"input": "8 8 10 6\n", "output": "(8) * (6) = 48, left: 48, 8, 10\n(48) / (8) = 6, left: 6, 10\n(48) / (10) = 24/5, left: 24/5, 8\n(8) / (24/5) = 5/3, left: 5/3\n(10) - (8) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (10 - 8))"}, {"input": "8 8 10 6\n", "output": "(10) - (8) = 2, left: 2, 8, 6\n(2) - (8) = -6, left: -6, 6\n(6) + (-6) = 0, left: 0\n(8) - (2) = 6, left: 6, 6\n(6) - (6) = 0, left: 0\n(8) * (2) = 16, left: 16, 6\n(6) - (16) = -10, left: -10\n(16) - (6) = 10, left: 10\n(8) / (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 / (10 - 8)))"}, {"input": "8 8 10 6\n", "output": "(10) + (6) = 16, left: 16, 8, 8\n(8) - (16) = -8, left: -8, 8\n(8) - (8) = 0, left: 0, 16\n(10) / (6) = 5/3, left: 5/3, 8, 8\n(5/3) - (8) = -19/3, left: -19/3, 8\n(5/3) - (8) = -19/3, left: -19/3, 8\n(6) - (10) = -4, left: -4, 8, 8\n(10) - (6) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (10 - 6)) - 8)"}, {"input": "8 8 10 6\n", "output": "(8) * (6) = 48, left: 48, 8, 10\n(48) - (8) = 40, left: 40, 10\n(10) * (40) = 400, left: 400\n(10) + (48) = 58, left: 58, 8\n(48) - (10) = 38, left: 38, 8\n(38) - (8) = 30, left: 30\n(48) / (10) = 24/5, left: 24/5, 8\n(8) / (24/5) = 5/3, left: 5/3\n(10) - (8) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (10 - 8))"}, {"input": "8 8 10 6\n", "output": "(8) / (10) = 4/5, left: 4/5, 8, 6\n(6) / (8) = 3/4, left: 3/4, 4/5\n(8) / (4/5) = 10, left: 10, 6\n(6) + (4/5) = 34/5, left: 34/5, 8\n(34/5) / (8) = 17/20, left: 17/20\n(10) / (8) = 5/4, left: 5/4, 8, 6\n(8) - (5/4) = 27/4, left: 27/4, 6\n(10) - (8) = 2, left: 2, 8, 6\n(8) / (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 / (10 - 8)))"}, {"input": "9 4 10 5\n", "output": "(9) * (10) = 90, left: 90, 4, 5\n(4) * (90) = 360, left: 360, 5\n(9) + (10) = 19, left: 19, 4, 5\n(19) - (4) = 15, left: 15, 5\n(10) - (9) = 1, left: 1, 4, 5\n(4) - (5) = -1, left: -1, 1\n(1) / (-1) = -1, left: -1\n(4) * (1) = 4, left: 4, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (10 - 9)))"}, {"input": "9 4 10 5\n", "output": "(4) - (9) = -5, left: -5, 10, 5\n(9) / (4) = 9/4, left: 9/4, 10, 5\n(10) - (5) = 5, left: 5, 9/4\n(4) / (9) = 4/9, left: 4/9, 10, 5\n(10) * (4/9) = 40/9, left: 40/9, 5\n(5) / (10) = 1/2, left: 1/2, 4/9\n(9) * (5) = 45, left: 45, 4, 10\n(9) - (5) = 4, left: 4, 4, 10\n(10) - (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (10 - (9 - 5)))"}, {"input": "9 4 10 5\n", "output": "(4) - (10) = -6, left: -6, 9, 5\n(9) - (-6) = 15, left: 15, 5\n(9) * (-6) = -54, left: -54, 5\n(5) - (-54) = 59, left: 59\n(9) + (-6) = 3, left: 3, 5\n(3) - (5) = -2, left: -2\n(-6) / (9) = -2/3, left: -2/3, 5\n(9) / (5) = 9/5, left: 9/5, -6\n(5) - (9) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((4 - 10) * (5 - 9))"}, {"input": "9 4 10 5\n", "output": "(5) - (9) = -4, left: -4, 4, 10\n(-4) - (10) = -14, left: -14, 4\n(-14) / (4) = -7/2, left: -7/2\n(-4) / (10) = -2/5, left: -2/5, 4\n(4) - (-2/5) = 22/5, left: 22/5\n(-2/5) - (4) = -22/5, left: -22/5\n(10) - (-4) = 14, left: 14, 4\n(4) - (14) = -10, left: -10\n(10) + (-4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (10 + (5 - 9)))"}, {"input": "9 4 10 5\n", "output": "(9) / (10) = 9/10, left: 9/10, 4, 5\n(4) / (9/10) = 40/9, left: 40/9, 5\n(5) - (9/10) = 41/10, left: 41/10, 4\n(9) * (10) = 90, left: 90, 4, 5\n(5) / (4) = 5/4, left: 5/4, 90\n(4) * (5) = 20, left: 20, 90\n(9) - (10) = -1, left: -1, 4, 5\n(5) * (-1) = -5, left: -5, 4\n(5) - (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 - (9 - 10)))"}, {"input": "3 3 6 3\n", "output": "(3) * (3) = 9, left: 9, 6, 3\n(6) / (3) = 2, left: 2, 9\n(3) - (3) = 0, left: 0, 6, 3\n(6) / (3) = 2, left: 2, 0\n(6) - (0) = 6, left: 6, 3\n(3) - (0) = 3, left: 3, 6\n(3) + (3) = 6, left: 6, 6, 3\n(3) - (6) = -3, left: -3, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((3 + 3) + (6 * 3))"}, {"input": "3 3 6 3\n", "output": "(3) - (3) = 0, left: 0, 3, 6\n(0) / (6) = 0, left: 0, 3\n(0) - (3) = -3, left: -3\n(0) - (3) = -3, left: -3, 6\n(6) - (-3) = 9, left: 9\n(3) * (6) = 18, left: 18, 0\n(0) / (18) = 0, left: 0\n(3) / (3) = 1, left: 1, 3, 6\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (3 / 3)))"}, {"input": "3 3 6 3\n", "output": "(6) / (3) = 2, left: 2, 3, 3\n(3) / (6) = 1/2, left: 1/2, 3, 3\n(3) + (1/2) = 7/2, left: 7/2, 3\n(7/2) - (3) = 1/2, left: 1/2\n(3) - (6) = -3, left: -3, 3, 3\n(-3) - (3) = -6, left: -6, 3\n(3) * (6) = 18, left: 18, 3, 3\n(18) / (3) = 6, left: 6, 3\n(3) + (18) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 + (3 * 6)))"}, {"input": "3 3 6 3\n", "output": "(3) / (6) = 1/2, left: 1/2, 3, 3\n(3) / (1/2) = 6, left: 6, 3\n(6) * (3) = 18, left: 18, 3, 3\n(3) * (18) = 54, left: 54, 3\n(3) * (54) = 162, left: 162\n(3) - (18) = -15, left: -15, 3\n(3) / (18) = 1/6, left: 1/6, 3\n(3) + (1/6) = 19/6, left: 19/6\n(3) + (18) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 + (6 * 3)))"}, {"input": "3 3 6 3\n", "output": "(3) / (3) = 1, left: 1, 6, 3\n(6) + (1) = 7, left: 7, 3\n(1) / (6) = 1/6, left: 1/6, 3\n(1) - (6) = -5, left: -5, 3\n(-5) - (3) = -8, left: -8\n(6) * (3) = 18, left: 18, 1\n(1) - (3) = -2, left: -2, 6\n(-2) - (6) = -8, left: -8\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (3 / 3)))"}, {"input": "3 3 6 3\n", "output": "(3) * (3) = 9, left: 9, 6, 3\n(6) - (9) = -3, left: -3, 3\n(9) / (6) = 3/2, left: 3/2, 3\n(3) - (3) = 0, left: 0, 6, 3\n(6) / (3) = 2, left: 2, 0\n(6) + (0) = 6, left: 6, 3\n(6) - (3) = 3, left: 3\n(0) / (6) = 0, left: 0, 3\n(0) / (3) = 0, left: 0\n(3) - (0) = 3, left: 3, 6\n(3) + (3) = 6, left: 6, 6, 3\n(6) + (3) = 9, left: 9, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((3 + 3) + (6 * 3))"}, {"input": "3 3 6 3\n", "output": "(6) / (3) = 2, left: 2, 3, 3\n(3) * (2) = 6, left: 6, 3\n(3) / (2) = 3/2, left: 3/2, 3\n(3) / (6) = 1/2, left: 1/2, 3, 3\n(3) + (1/2) = 7/2, left: 7/2, 3\n(3) * (1/2) = 3/2, left: 3/2, 3\n(3) / (1/2) = 6, left: 6, 3\n(3) - (6) = -3, left: -3, 3, 3\n(-3) / (3) = -1, left: -1, 3\n(3) / (-1) = -3, left: -3\n(-3) - (3) = -6, left: -6, 3\n(3) * (6) = 18, left: 18, 3, 3\n(3) + (18) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 + (3 * 6)))"}, {"input": "3 3 6 3\n", "output": "(3) - (3) = 0, left: 0, 3, 6\n(0) - (6) = -6, left: -6, 3\n(6) - (0) = 6, left: 6, 3\n(6) + (0) = 6, left: 6, 3\n(0) / (3) = 0, left: 0, 6\n(3) + (6) = 9, left: 9, 0\n(9) - (0) = 9, left: 9\n(3) - (6) = -3, left: -3, 0\n(0) / (-3) = 0, left: 0\n(3) / (3) = 1, left: 1, 3, 6\n(1) - (3) = -2, left: -2, 6\n(3) - (1) = 2, left: 2, 6\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (3 / 3)))"}, {"input": "9 3 3 8\n", "output": "(3) - (9) = -6, left: -6, 3, 8\n(3) + (8) = 11, left: 11, -6\n(-6) + (11) = 5, left: 5\n(9) + (3) = 12, left: 12, 3, 8\n(3) / (9) = 1/3, left: 1/3, 3, 8\n(1/3) - (8) = -23/3, left: -23/3, 3\n(9) * (3) = 27, left: 27, 3, 8\n(9) - (3) = 6, left: 6, 3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 3) - 3))"}, {"input": "9 3 3 8\n", "output": "(8) / (9) = 8/9, left: 8/9, 3, 3\n(3) * (8/9) = 8/3, left: 8/3, 3\n(9) / (8) = 9/8, left: 9/8, 3, 3\n(3) + (3) = 6, left: 6, 9/8\n(3) * (9/8) = 27/8, left: 27/8, 3\n(9) * (8) = 72, left: 72, 3, 3\n(3) - (72) = -69, left: -69, 3\n(9) - (3) = 6, left: 6, 3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 3) - 3))"}, {"input": "9 3 3 8\n", "output": "(3) / (9) = 1/3, left: 1/3, 3, 8\n(1/3) / (3) = 1/9, left: 1/9, 8\n(8) * (1/9) = 8/9, left: 8/9\n(3) + (8) = 11, left: 11, 1/3\n(3) / (8) = 3/8, left: 3/8, 1/3\n(9) + (3) = 12, left: 12, 3, 8\n(8) - (12) = -4, left: -4, 3\n(9) - (3) = 6, left: 6, 3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 3) - 3))"}, {"input": "9 3 3 8\n", "output": "(3) / (8) = 3/8, left: 3/8, 9, 3\n(9) / (3) = 3, left: 3, 3/8\n(8) / (3) = 8/3, left: 8/3, 9, 3\n(9) - (8/3) = 19/3, left: 19/3, 3\n(3) / (8/3) = 9/8, left: 9/8, 9\n(3) + (8) = 11, left: 11, 9, 3\n(9) - (11) = -2, left: -2, 3\n(3) / (9) = 1/3, left: 1/3, 11\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (3 + 8)) - 9)"}, {"input": "9 3 3 8\n", "output": "(3) / (3) = 1, left: 1, 9, 8\n(9) / (8) = 9/8, left: 9/8, 1\n(9) - (8) = 1, left: 1, 1\n(1) / (8) = 1/8, left: 1/8, 9\n(1) - (8) = -7, left: -7, 9\n(3) + (3) = 6, left: 6, 9, 8\n(8) + (6) = 14, left: 14, 9\n(8) * (6) = 48, left: 48, 9\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 - (3 + 3)))"}, {"input": "9 3 3 8\n", "output": "(3) / (3) = 1, left: 1, 9, 8\n(9) * (8) = 72, left: 72, 1\n(1) + (72) = 73, left: 73\n(9) + (1) = 10, left: 10, 8\n(9) * (1) = 9, left: 9, 8\n(9) - (8) = 1, left: 1\n(8) / (1) = 8, left: 8, 9\n(1) - (8) = -7, left: -7, 9\n(8) + (1) = 9, left: 9, 9\n(9) / (9) = 1, left: 1\n(3) + (3) = 6, left: 6, 9, 8\n(9) * (6) = 54, left: 54, 8\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 - (3 + 3)))"}, {"input": "9 3 3 8\n", "output": "(3) - (9) = -6, left: -6, 3, 8\n(3) * (8) = 24, left: 24, -6\n(8) + (-6) = 2, left: 2, 3\n(9) + (3) = 12, left: 12, 3, 8\n(12) - (3) = 9, left: 9, 8\n(3) / (9) = 1/3, left: 1/3, 3, 8\n(3) + (8) = 11, left: 11, 1/3\n(1/3) / (8) = 1/24, left: 1/24, 3\n(9) * (3) = 27, left: 27, 3, 8\n(3) - (27) = -24, left: -24, 8\n(9) - (3) = 6, left: 6, 3, 8\n(3) * (6) = 18, left: 18, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 3) - 3))"}, {"input": "9 3 3 8\n", "output": "(3) / (9) = 1/3, left: 1/3, 3, 8\n(8) - (3) = 5, left: 5, 1/3\n(5) / (1/3) = 15, left: 15\n(3) - (8) = -5, left: -5, 1/3\n(9) + (3) = 12, left: 12, 3, 8\n(3) * (12) = 36, left: 36, 8\n(8) - (36) = -28, left: -28\n(9) / (3) = 3, left: 3, 3, 8\n(8) / (3) = 8/3, left: 8/3, 3\n(3) - (3) = 0, left: 0, 8\n(3) / (3) = 1, left: 1, 8\n(9) - (3) = 6, left: 6, 3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 3) - 3))"}, {"input": "9 3 3 8\n", "output": "(9) - (8) = 1, left: 1, 3, 3\n(1) - (3) = -2, left: -2, 3\n(8) / (9) = 8/9, left: 8/9, 3, 3\n(8/9) - (3) = -19/9, left: -19/9, 3\n(9) / (8) = 9/8, left: 9/8, 3, 3\n(3) - (9/8) = 15/8, left: 15/8, 3\n(3) / (15/8) = 8/5, left: 8/5\n(8) - (9) = -1, left: -1, 3, 3\n(3) / (3) = 1, left: 1, -1\n(3) / (-1) = -3, left: -3, 3\n(9) - (3) = 6, left: 6, 3, 8\n(8) - (6) = 2, left: 2, 3\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 3) - 3))"}, {"input": "10 7 10 6\n", "output": "(10) / (10) = 1, left: 1, 7, 6\n(7) / (10) = 7/10, left: 7/10, 10, 6\n(10) + (6) = 16, left: 16, 7/10\n(10) - (7) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "10 7 10 6\n", "output": "(10) - (10) = 0, left: 0, 7, 6\n(7) / (6) = 7/6, left: 7/6, 0\n(7) / (6) = 7/6, left: 7/6, 10, 10\n(10) + (7/6) = 67/6, left: 67/6, 10\n(10) * (6) = 60, left: 60, 7, 10\n(6) / (10) = 3/5, left: 3/5, 7, 10\n(3/5) / (10) = 3/50, left: 3/50, 7\n(10) - (7) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "10 7 10 6\n", "output": "(10) - (6) = 4, left: 4, 7, 10\n(4) - (10) = -6, left: -6, 7\n(10) * (6) = 60, left: 60, 7, 10\n(6) - (10) = -4, left: -4, 7, 10\n(7) / (6) = 7/6, left: 7/6, 10, 10\n(10) + (6) = 16, left: 16, 10, 7\n(10) + (7) = 17, left: 17, 16\n(10) - (7) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "10 7 10 6\n", "output": "(6) - (10) = -4, left: -4, 7, 10\n(10) - (6) = 4, left: 4, 7, 10\n(7) + (4) = 11, left: 11, 10\n(10) + (7) = 17, left: 17, 10, 6\n(6) / (10) = 3/5, left: 3/5, 17\n(10) * (7) = 70, left: 70, 10, 6\n(70) / (10) = 7, left: 7, 6\n(10) - (7) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "10 7 10 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 10, 7\n(10) * (6) = 60, left: 60, 10, 7\n(6) - (10) = -4, left: -4, 10, 7\n(10) / (6) = 5/3, left: 5/3, 10, 7\n(7) / (5/3) = 21/5, left: 21/5, 10\n(10) / (7) = 10/7, left: 10/7, 10, 6\n(6) - (10/7) = 32/7, left: 32/7, 10\n(10) - (7) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "10 7 10 6\n", "output": "(10) / (10) = 1, left: 1, 7, 6\n(6) / (1) = 6, left: 6, 7\n(6) / (7) = 6/7, left: 6/7\n(10) * (10) = 100, left: 100, 7, 6\n(10) + (7) = 17, left: 17, 10, 6\n(10) + (6) = 16, left: 16, 17\n(10) / (7) = 10/7, left: 10/7, 10, 6\n(10) - (7) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "9 5 8 7\n", "output": "(7) - (5) = 2, left: 2, 9, 8\n(2) - (8) = -6, left: -6, 9\n(9) - (2) = 7, left: 7, 8\n(8) - (7) = 1, left: 1\n(5) + (7) = 12, left: 12, 9, 8\n(12) / (8) = 3/2, left: 3/2, 9\n(8) + (12) = 20, left: 20, 9\n(8) / (12) = 2/3, left: 2/3, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((5 + 7) - 9))"}, {"input": "9 5 8 7\n", "output": "(5) - (8) = -3, left: -3, 9, 7\n(8) / (5) = 8/5, left: 8/5, 9, 7\n(5) / (8) = 5/8, left: 5/8, 9, 7\n(8) - (5) = 3, left: 3, 9, 7\n(7) * (3) = 21, left: 21, 9\n(7) / (3) = 7/3, left: 7/3, 9\n(9) / (7) = 9/7, left: 9/7, 3\n(5) * (8) = 40, left: 40, 9, 7\n(40) - (7) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: (((5 * 8) - 7) - 9)"}, {"input": "9 5 8 7\n", "output": "(8) / (5) = 8/5, left: 8/5, 9, 7\n(7) * (8/5) = 56/5, left: 56/5, 9\n(5) + (8) = 13, left: 13, 9, 7\n(7) / (9) = 7/9, left: 7/9, 13\n(5) / (8) = 5/8, left: 5/8, 9, 7\n(9) - (5/8) = 67/8, left: 67/8, 7\n(7) / (67/8) = 56/67, left: 56/67\n(5) * (8) = 40, left: 40, 9, 7\n(40) - (9) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: (((5 * 8) - 9) - 7)"}, {"input": "9 5 8 7\n", "output": "(5) + (8) = 13, left: 13, 9, 7\n(13) / (9) = 13/9, left: 13/9, 7\n(7) / (13/9) = 63/13, left: 63/13\n(5) - (8) = -3, left: -3, 9, 7\n(9) / (-3) = -3, left: -3, 7\n(9) + (-3) = 6, left: 6, 7\n(5) * (8) = 40, left: 40, 9, 7\n(9) + (40) = 49, left: 49, 7\n(40) - (9) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: (((5 * 8) - 9) - 7)"}, {"input": "9 5 8 7\n", "output": "(7) - (5) = 2, left: 2, 9, 8\n(9) + (2) = 11, left: 11, 8\n(8) * (11) = 88, left: 88\n(5) - (7) = -2, left: -2, 9, 8\n(5) + (7) = 12, left: 12, 9, 8\n(12) - (8) = 4, left: 4, 9\n(12) / (8) = 3/2, left: 3/2, 9\n(12) - (9) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((5 + 7) - 9))"}, {"input": "9 5 8 7\n", "output": "(7) - (5) = 2, left: 2, 9, 8\n(2) - (9) = -7, left: -7, 8\n(8) - (-7) = 15, left: 15\n(9) + (2) = 11, left: 11, 8\n(8) + (2) = 10, left: 10, 9\n(5) - (7) = -2, left: -2, 9, 8\n(8) - (-2) = 10, left: 10, 9\n(8) - (9) = -1, left: -1, -2\n(9) * (8) = 72, left: 72, -2\n(-2) / (72) = -1/36, left: -1/36\n(9) / (-2) = -9/2, left: -9/2, 8\n(5) + (7) = 12, left: 12, 9, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((5 + 7) - 9))"}, {"input": "3 13 9 12\n", "output": "(12) - (9) = 3, left: 3, 3, 13\n(3) / (13) = 3/13, left: 3/13, 3\n(3) * (3/13) = 9/13, left: 9/13\n(9) + (12) = 21, left: 21, 3, 13\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((9 + 12) - 13))"}, {"input": "3 13 9 12\n", "output": "(9) / (3) = 3, left: 3, 13, 12\n(13) * (3) = 39, left: 39, 12\n(39) / (12) = 13/4, left: 13/4\n(3) - (13) = -10, left: -10, 12\n(3) - (9) = -6, left: -6, 13, 12\n(12) / (9) = 4/3, left: 4/3, 3, 13\n(3) - (13) = -10, left: -10, 4/3\n(9) + (12) = 21, left: 21, 3, 13\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((9 + 12) - 13))"}, {"input": "3 13 9 12\n", "output": "(9) / (3) = 3, left: 3, 13, 12\n(13) * (12) = 156, left: 156, 3\n(3) - (9) = -6, left: -6, 13, 12\n(3) - (12) = -9, left: -9, 13, 9\n(3) / (12) = 1/4, left: 1/4, 13, 9\n(1/4) - (13) = -51/4, left: -51/4, 9\n(9) * (1/4) = 9/4, left: 9/4, 13\n(13) - (12) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (13 - 12)))"}, {"input": "3 13 9 12\n", "output": "(13) + (12) = 25, left: 25, 3, 9\n(9) * (25) = 225, left: 225, 3\n(225) - (3) = 222, left: 222\n(25) - (3) = 22, left: 22, 9\n(13) - (12) = 1, left: 1, 3, 9\n(3) - (1) = 2, left: 2, 9\n(9) * (1) = 9, left: 9, 3\n(1) - (9) = -8, left: -8, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (13 - 12)))"}, {"input": "3 13 9 12\n", "output": "(12) - (9) = 3, left: 3, 3, 13\n(13) * (3) = 39, left: 39, 3\n(13) - (3) = 10, left: 10, 3\n(3) - (10) = -7, left: -7\n(9) - (12) = -3, left: -3, 3, 13\n(-3) / (13) = -3/13, left: -3/13, 3\n(9) + (12) = 21, left: 21, 3, 13\n(21) - (3) = 18, left: 18, 13\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((9 + 12) - 13))"}, {"input": "3 13 9 12\n", "output": "(3) + (9) = 12, left: 12, 13, 12\n(13) + (12) = 25, left: 25, 12\n(9) / (3) = 3, left: 3, 13, 12\n(3) * (13) = 39, left: 39, 9, 12\n(9) + (12) = 21, left: 21, 39\n(13) - (12) = 1, left: 1, 3, 9\n(1) - (3) = -2, left: -2, 9\n(9) + (-2) = 7, left: 7\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (13 - 12)))"}, {"input": "4 1 12 6\n", "output": "(6) / (4) = 3/2, left: 3/2, 1, 12\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) * (1/2) = 6, left: 6\n(1/2) - (12) = -23/2, left: -23/2\n(12) + (1/2) = 25/2, left: 25/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 / 4) - 1))"}, {"input": "4 1 12 6\n", "output": "(4) + (6) = 10, left: 10, 1, 12\n(1) / (12) = 1/12, left: 1/12, 10\n(10) - (1) = 9, left: 9, 12\n(6) / (4) = 3/2, left: 3/2, 1, 12\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 / 4) - 1))"}, {"input": "4 1 12 6\n", "output": "(4) / (12) = 1/3, left: 1/3, 1, 6\n(4) + (12) = 16, left: 16, 1, 6\n(4) * (12) = 48, left: 48, 1, 6\n(6) / (1) = 6, left: 6, 48\n(48) / (6) = 8, left: 8, 1\n(12) - (4) = 8, left: 8, 1, 6\n(12) / (4) = 3, left: 3, 1, 6\n(3) / (6) = 1/2, left: 1/2, 1\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (12 / 4)))"}, {"input": "4 1 12 6\n", "output": "(6) - (1) = 5, left: 5, 4, 12\n(12) - (5) = 7, left: 7, 4\n(5) - (12) = -7, left: -7, 4\n(4) - (5) = -1, left: -1, 12\n(5) - (4) = 1, left: 1, 12\n(1) - (6) = -5, left: -5, 4, 12\n(4) / (-5) = -4/5, left: -4/5, 12\n(6) / (1) = 6, left: 6, 4, 12\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((6 / 1) - 4))"}, {"input": "4 1 12 6\n", "output": "(4) + (6) = 10, left: 10, 1, 12\n(1) - (12) = -11, left: -11, 10\n(-11) / (10) = -11/10, left: -11/10\n(6) / (4) = 3/2, left: 3/2, 1, 12\n(12) / (1) = 12, left: 12, 3/2\n(1) + (3/2) = 5/2, left: 5/2, 12\n(1) - (3/2) = -1/2, left: -1/2, 12\n(12) + (-1/2) = 23/2, left: 23/2\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 / 4) - 1))"}, {"input": "4 1 12 6\n", "output": "(4) + (6) = 10, left: 10, 1, 12\n(1) + (10) = 11, left: 11, 12\n(12) / (10) = 6/5, left: 6/5, 1\n(12) - (10) = 2, left: 2, 1\n(4) / (6) = 2/3, left: 2/3, 1, 12\n(1) * (12) = 12, left: 12, 2/3\n(1) / (12) = 1/12, left: 1/12, 2/3\n(6) - (4) = 2, left: 2, 1, 12\n(1) / (12) = 1/12, left: 1/12, 2\n(2) / (1/12) = 24, left: 24\nreach 24! expression: ((6 - 4) / (1 / 12))"}, {"input": "4 1 12 6\n", "output": "(6) / (4) = 3/2, left: 3/2, 1, 12\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(12) * (1/2) = 6, left: 6\n(1/2) - (12) = -23/2, left: -23/2\n(12) + (1/2) = 25/2, left: 25/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 / 4) - 1))"}, {"input": "4 1 12 6\n", "output": "(6) / (4) = 3/2, left: 3/2, 1, 12\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(12) * (1/2) = 6, left: 6\n(1/2) - (12) = -23/2, left: -23/2\n(12) + (1/2) = 25/2, left: 25/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 / 4) - 1))"}, {"input": "4 1 12 6\n", "output": "(6) / (4) = 3/2, left: 3/2, 1, 12\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(12) * (1/2) = 6, left: 6\n(1/2) - (12) = -23/2, left: -23/2\n(12) + (1/2) = 25/2, left: 25/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 / 4) - 1))"}, {"input": "4 5 4 3\n", "output": "(4) / (4) = 1, left: 1, 5, 3\n(1) / (3) = 1/3, left: 1/3, 5\n(5) * (1/3) = 5/3, left: 5/3\n(4) - (4) = 0, left: 0, 5, 3\n(4) / (4) = 1, left: 1, 5, 3\n(5) * (1) = 5, left: 5, 3\n(5) - (3) = 2, left: 2\n(4) * (4) = 16, left: 16, 5, 3\n(3) + (16) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (3 + (4 * 4)))"}, {"input": "4 5 4 3\n", "output": "(3) / (5) = 3/5, left: 3/5, 4, 4\n(4) / (4) = 1, left: 1, 3/5\n(4) - (4) = 0, left: 0, 3/5\n(3/5) - (4) = -17/5, left: -17/5, 4\n(4) - (3/5) = 17/5, left: 17/5, 4\n(5) * (3) = 15, left: 15, 4, 4\n(5) / (3) = 5/3, left: 5/3, 4, 4\n(5) - (3) = 2, left: 2, 4, 4\n(4) + (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (4 + (5 - 3)))"}, {"input": "4 5 4 3\n", "output": "(5) / (3) = 5/3, left: 5/3, 4, 4\n(4) * (4) = 16, left: 16, 5/3\n(4) / (4) = 1, left: 1, 5/3\n(5/3) / (4) = 5/12, left: 5/12, 4\n(4) - (5/3) = 7/3, left: 7/3, 4\n(4) / (5/3) = 12/5, left: 12/5, 4\n(4) * (5/3) = 20/3, left: 20/3, 4\n(5) + (3) = 8, left: 8, 4, 4\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((5 + 3) + (4 * 4))"}, {"input": "4 5 4 3\n", "output": "(4) * (3) = 12, left: 12, 5, 4\n(4) - (12) = -8, left: -8, 5\n(4) / (5) = 4/5, left: 4/5, 12\n(4) + (3) = 7, left: 7, 5, 4\n(4) - (3) = 1, left: 1, 5, 4\n(4) - (1) = 3, left: 3, 5\n(4) * (1) = 4, left: 4, 5\n(5) / (1) = 5, left: 5, 4\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (4 - 3)))"}, {"input": "4 5 4 3\n", "output": "(4) - (4) = 0, left: 0, 5, 3\n(5) / (3) = 5/3, left: 5/3, 0\n(4) - (4) = 0, left: 0, 5, 3\n(5) * (3) = 15, left: 15, 0\n(4) + (4) = 8, left: 8, 5, 3\n(5) * (8) = 40, left: 40, 3\n(3) - (40) = -37, left: -37\n(4) * (4) = 16, left: 16, 5, 3\n(3) + (16) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (3 + (4 * 4)))"}, {"input": "4 5 4 3\n", "output": "(4) + (4) = 8, left: 8, 5, 3\n(4) / (4) = 1, left: 1, 5, 3\n(1) - (5) = -4, left: -4, 3\n(3) / (1) = 3, left: 3, 5\n(4) - (4) = 0, left: 0, 5, 3\n(3) / (5) = 3/5, left: 3/5, 0\n(4) - (4) = 0, left: 0, 5, 3\n(0) - (5) = -5, left: -5, 3\n(3) / (5) = 3/5, left: 3/5, 0\n(4) / (4) = 1, left: 1, 5, 3\n(5) - (3) = 2, left: 2, 1\n(4) * (4) = 16, left: 16, 5, 3\n(3) + (16) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (3 + (4 * 4)))"}, {"input": "4 5 4 3\n", "output": "(4) - (4) = 0, left: 0, 5, 3\n(0) / (5) = 0, left: 0, 3\n(4) - (4) = 0, left: 0, 5, 3\n(5) - (0) = 5, left: 5, 3\n(5) + (0) = 5, left: 5, 3\n(3) + (5) = 8, left: 8\n(5) + (3) = 8, left: 8, 0\n(4) + (4) = 8, left: 8, 5, 3\n(3) - (8) = -5, left: -5, 5\n(5) + (3) = 8, left: 8, 8\n(8) / (8) = 1, left: 1\n(4) * (4) = 16, left: 16, 5, 3\n(3) + (16) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (3 + (4 * 4)))"}, {"input": "4 5 4 3\n", "output": "(4) * (3) = 12, left: 12, 5, 4\n(12) - (4) = 8, left: 8, 5\n(4) / (5) = 4/5, left: 4/5, 12\n(4) + (3) = 7, left: 7, 5, 4\n(4) - (7) = -3, left: -3, 5\n(-3) - (5) = -8, left: -8\n(5) - (7) = -2, left: -2, 4\n(4) - (3) = 1, left: 1, 5, 4\n(4) / (1) = 4, left: 4, 5\n(4) - (1) = 3, left: 3, 5\n(5) / (3) = 5/3, left: 5/3\n(1) / (4) = 1/4, left: 1/4, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (4 - 3)))"}, {"input": "7 5 10 1\n", "output": "(1) - (7) = -6, left: -6, 5, 10\n(-6) / (5) = -6/5, left: -6/5, 10\n(10) + (-6/5) = 44/5, left: 44/5\n(7) / (5) = 7/5, left: 7/5, 10, 1\n(1) + (7/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (1 + (7 / 5)))"}, {"input": "7 5 10 1\n", "output": "(1) / (5) = 1/5, left: 1/5, 7, 10\n(7) / (1/5) = 35, left: 35, 10\n(10) + (1) = 11, left: 11, 7, 5\n(11) / (7) = 11/7, left: 11/7, 5\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * 5) - (10 + 1))"}, {"input": "7 5 10 1\n", "output": "(10) - (7) = 3, left: 3, 5, 1\n(1) * (3) = 3, left: 3, 5\n(7) * (10) = 70, left: 70, 5, 1\n(1) / (10) = 1/10, left: 1/10, 7, 5\n(7) * (1/10) = 7/10, left: 7/10, 5\n(7/10) / (5) = 7/50, left: 7/50\n(10) + (1) = 11, left: 11, 7, 5\n(11) - (5) = 6, left: 6, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * 5) - (10 + 1))"}, {"input": "7 5 10 1\n", "output": "(5) / (1) = 5, left: 5, 7, 10\n(7) - (5) = 2, left: 2, 10\n(5) - (1) = 4, left: 4, 7, 10\n(7) - (1) = 6, left: 6, 5, 10\n(7) / (1) = 7, left: 7, 5, 10\n(1) / (7) = 1/7, left: 1/7, 5, 10\n(10) + (1/7) = 71/7, left: 71/7, 5\n(7) / (5) = 7/5, left: 7/5, 10, 1\n(1) + (7/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (1 + (7 / 5)))"}, {"input": "7 5 10 1\n", "output": "(7) * (1) = 7, left: 7, 5, 10\n(10) / (5) = 2, left: 2, 7\n(10) - (5) = 5, left: 5, 7, 1\n(5) - (7) = -2, left: -2, 1\n(5) * (10) = 50, left: 50, 7, 1\n(50) / (1) = 50, left: 50, 7\n(5) / (10) = 1/2, left: 1/2, 7, 1\n(7) / (5) = 7/5, left: 7/5, 10, 1\n(1) + (7/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (1 + (7 / 5)))"}, {"input": "7 5 10 1\n", "output": "(5) - (1) = 4, left: 4, 7, 10\n(4) / (10) = 2/5, left: 2/5, 7\n(5) + (1) = 6, left: 6, 7, 10\n(7) + (6) = 13, left: 13, 10\n(5) / (1) = 5, left: 5, 7, 10\n(1) / (5) = 1/5, left: 1/5, 7, 10\n(10) + (1) = 11, left: 11, 7, 5\n(5) / (11) = 5/11, left: 5/11, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * 5) - (10 + 1))"}, {"input": "7 5 10 1\n", "output": "(7) + (1) = 8, left: 8, 5, 10\n(10) / (5) = 2, left: 2, 8\n(7) - (1) = 6, left: 6, 5, 10\n(7) * (1) = 7, left: 7, 5, 10\n(7) / (10) = 7/10, left: 7/10, 5\n(10) / (7) = 10/7, left: 10/7, 5, 1\n(7) / (10) = 7/10, left: 7/10, 5, 1\n(7) * (5) = 35, left: 35, 10, 1\n(35) - (10) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: (((7 * 5) - 10) - 1)"}, {"input": "7 5 10 1\n", "output": "(1) / (7) = 1/7, left: 1/7, 5, 10\n(7) / (1) = 7, left: 7, 5, 10\n(10) - (7) = 3, left: 3, 5\n(7) - (1) = 6, left: 6, 5, 10\n(7) * (1) = 7, left: 7, 5, 10\n(10) / (7) = 10/7, left: 10/7, 5, 1\n(5) * (1) = 5, left: 5, 10/7\n(7) * (10) = 70, left: 70, 5, 1\n(7) - (10) = -3, left: -3, 5, 1\n(1) / (-3) = -1/3, left: -1/3, 5\n(5) - (7) = -2, left: -2, 10, 1\n(7) * (5) = 35, left: 35, 10, 1\n(35) - (10) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: (((7 * 5) - 10) - 1)"}, {"input": "7 5 10 1\n", "output": "(5) * (1) = 5, left: 5, 7, 10\n(10) / (7) = 10/7, left: 10/7, 5\n(5) + (1) = 6, left: 6, 7, 10\n(1) - (5) = -4, left: -4, 7, 10\n(-4) / (7) = -4/7, left: -4/7, 10\n(1) - (7) = -6, left: -6, 5, 10\n(7) * (1) = 7, left: 7, 5, 10\n(5) / (10) = 1/2, left: 1/2, 7\n(5) + (7) = 12, left: 12, 10\n(7) / (1) = 7, left: 7, 5, 10\n(7) - (1) = 6, left: 6, 5, 10\n(7) / (5) = 7/5, left: 7/5, 10, 1\n(1) + (7/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (1 + (7 / 5)))"}, {"input": "3 1 13 2\n", "output": "(3) / (2) = 3/2, left: 3/2, 1, 13\n(1) + (13) = 14, left: 14, 3/2\n(3) + (2) = 5, left: 5, 1, 13\n(13) - (1) = 12, left: 12, 3, 2\n(12) - (3) = 9, left: 9, 2\n(13) / (1) = 13, left: 13, 3, 2\n(3) - (13) = -10, left: -10, 1, 2\n(13) * (2) = 26, left: 26, 3, 1\n(3) - (1) = 2, left: 2, 26\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * 2) - (3 - 1))"}, {"input": "3 1 13 2\n", "output": "(1) * (2) = 2, left: 2, 3, 13\n(1) / (3) = 1/3, left: 1/3, 13, 2\n(2) - (1/3) = 5/3, left: 5/3, 13\n(2) - (13) = -11, left: -11, 1/3\n(13) - (2) = 11, left: 11, 1/3\n(11) / (1/3) = 33, left: 33\n(3) - (1) = 2, left: 2, 13, 2\n(2) / (2) = 1, left: 1, 13\n(13) * (2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * (3 - 1)) - 2)"}, {"input": "3 1 13 2\n", "output": "(1) - (2) = -1, left: -1, 3, 13\n(2) - (1) = 1, left: 1, 3, 13\n(13) / (1) = 13, left: 13, 3\n(1) - (3) = -2, left: -2, 13\n(1) + (2) = 3, left: 3, 3, 13\n(13) - (3) = 10, left: 10, 3\n(13) / (2) = 13/2, left: 13/2, 3, 1\n(13) * (2) = 26, left: 26, 3, 1\n(1) + (26) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((1 + (13 * 2)) - 3)"}, {"input": "3 1 13 2\n", "output": "(3) - (2) = 1, left: 1, 1, 13\n(2) - (3) = -1, left: -1, 1, 13\n(3) * (2) = 6, left: 6, 1, 13\n(3) / (13) = 3/13, left: 3/13, 1, 2\n(3/13) / (2) = 3/26, left: 3/26, 1\n(3) - (13) = -10, left: -10, 1, 2\n(3) * (1) = 3, left: 3, 13, 2\n(1) - (3) = -2, left: -2, 13, 2\n(13) * (2) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((1 - 3) + (13 * 2))"}, {"input": "3 1 13 2\n", "output": "(13) / (1) = 13, left: 13, 3, 2\n(13) - (1) = 12, left: 12, 3, 2\n(1) * (13) = 13, left: 13, 3, 2\n(3) - (2) = 1, left: 1, 13\n(2) - (3) = -1, left: -1, 1, 13\n(3) / (2) = 3/2, left: 3/2, 1, 13\n(3) * (2) = 6, left: 6, 1, 13\n(13) * (2) = 26, left: 26, 3, 1\n(1) + (26) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((1 + (13 * 2)) - 3)"}, {"input": "9 9 7 6\n", "output": "(9) + (7) = 16, left: 16, 9, 6\n(9) - (6) = 3, left: 3, 16\n(6) - (9) = -3, left: -3, 16\n(-3) / (16) = -3/16, left: -3/16\n(9) / (6) = 3/2, left: 3/2, 16\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((9 + 7) * (9 / 6))"}, {"input": "9 9 7 6\n", "output": "(9) + (7) = 16, left: 16, 9, 6\n(9) - (6) = 3, left: 3, 16\n(16) / (3) = 16/3, left: 16/3\n(6) - (9) = -3, left: -3, 16\n(-3) - (16) = -19, left: -19\n(16) * (-3) = -48, left: -48\n(9) / (6) = 3/2, left: 3/2, 16\n(16) - (3/2) = 29/2, left: 29/2\n(3/2) - (16) = -29/2, left: -29/2\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((9 + 7) * (9 / 6))"}, {"input": "9 9 7 6\n", "output": "(9) / (9) = 1, left: 1, 7, 6\n(9) / (9) = 1, left: 1, 7, 6\n(6) - (1) = 5, left: 5, 7\n(6) / (1) = 6, left: 6, 7\n(6) * (1) = 6, left: 6, 7\n(9) - (9) = 0, left: 0, 7, 6\n(0) - (6) = -6, left: -6, 7\n(9) + (9) = 18, left: 18, 7, 6\n(7) * (6) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((7 * 6) - (9 + 9))"}, {"input": "9 9 7 6\n", "output": "(7) - (9) = -2, left: -2, 9, 6\n(-2) / (6) = -1/3, left: -1/3, 9\n(9) + (-1/3) = 26/3, left: 26/3\n(6) - (-2) = 8, left: 8, 9\n(9) - (8) = 1, left: 1\n(6) + (-2) = 4, left: 4, 9\n(9) - (4) = 5, left: 5\n(9) * (-2) = -18, left: -18, 6\n(6) / (-18) = -1/3, left: -1/3\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (7 - 9)))"}, {"input": "9 9 7 6\n", "output": "(7) / (9) = 7/9, left: 7/9, 9, 6\n(9) * (7/9) = 7, left: 7, 6\n(7) / (6) = 7/6, left: 7/6\n(9) / (7/9) = 81/7, left: 81/7, 6\n(7) - (9) = -2, left: -2, 9, 6\n(9) - (6) = 3, left: 3, -2\n(6) * (-2) = -12, left: -12, 9\n(9) / (-12) = -3/4, left: -3/4\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (7 - 9)))"}, {"input": "9 9 7 6\n", "output": "(9) + (9) = 18, left: 18, 7, 6\n(18) / (6) = 3, left: 3, 7\n(7) / (3) = 7/3, left: 7/3\n(18) / (7) = 18/7, left: 18/7, 6\n(18) - (7) = 11, left: 11, 6\n(7) / (6) = 7/6, left: 7/6, 18\n(18) - (7/6) = 101/6, left: 101/6\n(18) + (7/6) = 115/6, left: 115/6\n(7) * (6) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((7 * 6) - (9 + 9))"}, {"input": "9 9 7 6\n", "output": "(7) - (9) = -2, left: -2, 9, 6\n(-2) / (6) = -1/3, left: -1/3, 9\n(-1/3) / (9) = -1/27, left: -1/27\n(6) * (-2) = -12, left: -12, 9\n(-2) - (6) = -8, left: -8, 9\n(9) - (-8) = 17, left: 17\n(6) - (-2) = 8, left: 8, 9\n(6) / (-2) = -3, left: -3, 9\n(9) + (-3) = 6, left: 6\n(6) + (-2) = 4, left: 4, 9\n(9) / (4) = 9/4, left: 9/4\n(9) + (-2) = 7, left: 7, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (7 - 9)))"}, {"input": "9 9 7 6\n", "output": "(9) / (9) = 1, left: 1, 7, 6\n(1) - (7) = -6, left: -6, 6\n(9) / (9) = 1, left: 1, 7, 6\n(7) + (1) = 8, left: 8, 6\n(6) + (8) = 14, left: 14\n(7) * (6) = 42, left: 42, 1\n(9) * (9) = 81, left: 81, 7, 6\n(9) - (9) = 0, left: 0, 7, 6\n(9) - (9) = 0, left: 0, 7, 6\n(6) + (0) = 6, left: 6, 7\n(9) + (9) = 18, left: 18, 7, 6\n(6) - (18) = -12, left: -12, 7\n(7) * (6) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((7 * 6) - (9 + 9))"}, {"input": "13 4 5 6\n", "output": "(13) / (4) = 13/4, left: 13/4, 5, 6\n(13/4) / (6) = 13/24, left: 13/24, 5\n(6) / (13/4) = 24/13, left: 24/13, 5\n(13) - (4) = 9, left: 9, 5, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 4) - 5))"}, {"input": "13 4 5 6\n", "output": "(6) / (5) = 6/5, left: 6/5, 13, 4\n(5) / (6) = 5/6, left: 5/6, 13, 4\n(4) * (5/6) = 10/3, left: 10/3, 13\n(5) * (6) = 30, left: 30, 13, 4\n(13) + (4) = 17, left: 17, 5, 6\n(13) / (4) = 13/4, left: 13/4, 5, 6\n(6) - (5) = 1, left: 1, 13/4\n(13) - (4) = 9, left: 9, 5, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 4) - 5))"}, {"input": "13 4 5 6\n", "output": "(13) / (5) = 13/5, left: 13/5, 4, 6\n(6) - (4) = 2, left: 2, 13/5\n(5) - (13) = -8, left: -8, 4, 6\n(6) * (-8) = -48, left: -48, 4\n(13) + (5) = 18, left: 18, 4, 6\n(4) / (18) = 2/9, left: 2/9, 6\n(13) - (5) = 8, left: 8, 4, 6\n(4) / (6) = 2/3, left: 2/3, 8\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 5) - 4))"}, {"input": "13 4 5 6\n", "output": "(5) + (6) = 11, left: 11, 13, 4\n(6) / (5) = 6/5, left: 6/5, 13, 4\n(13) + (4) = 17, left: 17, 6/5\n(6) - (4) = 2, left: 2, 13, 5\n(4) / (6) = 2/3, left: 2/3, 13, 5\n(5) * (2/3) = 10/3, left: 10/3, 13\n(5) - (13) = -8, left: -8, 4, 6\n(13) - (5) = 8, left: 8, 4, 6\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 5) - 4))"}, {"input": "13 4 5 6\n", "output": "(4) / (6) = 2/3, left: 2/3, 13, 5\n(5) - (13) = -8, left: -8, 2/3\n(4) + (6) = 10, left: 10, 13, 5\n(4) * (6) = 24, left: 24, 13, 5\n(6) - (4) = 2, left: 2, 13, 5\n(5) + (6) = 11, left: 11, 13, 4\n(13) / (4) = 13/4, left: 13/4, 11\n(4) + (5) = 9, left: 9, 13, 6\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (4 + 5)))"}, {"input": "13 4 5 6\n", "output": "(13) / (4) = 13/4, left: 13/4, 5, 6\n(5) / (6) = 5/6, left: 5/6, 13/4\n(13/4) - (5/6) = 29/12, left: 29/12\n(6) - (5) = 1, left: 1, 13/4\n(6) * (13/4) = 39/2, left: 39/2, 5\n(5) * (13/4) = 65/4, left: 65/4, 6\n(13) - (4) = 9, left: 9, 5, 6\n(5) / (9) = 5/9, left: 5/9, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 4) - 5))"}, {"input": "13 4 5 6\n", "output": "(4) / (6) = 2/3, left: 2/3, 13, 5\n(4) - (6) = -2, left: -2, 13, 5\n(-2) - (5) = -7, left: -7, 13\n(5) + (-2) = 3, left: 3, 13\n(4) * (6) = 24, left: 24, 13, 5\n(5) + (6) = 11, left: 11, 13, 4\n(5) / (6) = 5/6, left: 5/6, 13, 4\n(5) - (6) = -1, left: -1, 13, 4\n(5) - (4) = 1, left: 1, 13, 6\n(4) * (5) = 20, left: 20, 13, 6\n(20) - (6) = 14, left: 14, 13\n(4) + (5) = 9, left: 9, 13, 6\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (4 + 5)))"}, {"input": "13 9 12 8\n", "output": "(12) / (13) = 12/13, left: 12/13, 9, 8\n(9) - (8) = 1, left: 1, 12/13\n(12) - (13) = -1, left: -1, 9, 8\n(13) + (12) = 25, left: 25, 9, 8\n(9) - (25) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (9 - (13 + 12)))"}, {"input": "13 9 12 8\n", "output": "(9) + (8) = 17, left: 17, 13, 12\n(13) * (12) = 156, left: 156, 17\n(9) - (8) = 1, left: 1, 13, 12\n(13) - (12) = 1, left: 1, 1\n(13) + (12) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (9 - 8))"}, {"input": "13 9 12 8\n", "output": "(12) * (8) = 96, left: 96, 13, 9\n(13) / (96) = 13/96, left: 13/96, 9\n(9) - (96) = -87, left: -87, 13\n(-87) / (13) = -87/13, left: -87/13\n(13) - (9) = 4, left: 4, 96\n(96) / (4) = 24, left: 24\nreach 24! expression: ((12 * 8) / (13 - 9))"}, {"input": "13 9 12 8\n", "output": "(12) - (9) = 3, left: 3, 13, 8\n(8) / (13) = 8/13, left: 8/13, 3\n(3) - (8/13) = 31/13, left: 31/13\n(8/13) - (3) = -31/13, left: -31/13\n(13) + (8) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((12 - 9) + (13 + 8))"}, {"input": "13 9 12 8\n", "output": "(12) / (8) = 3/2, left: 3/2, 13, 9\n(9) - (13) = -4, left: -4, 3/2\n(3/2) - (9) = -15/2, left: -15/2, 13\n(9) - (3/2) = 15/2, left: 15/2, 13\n(12) * (8) = 96, left: 96, 13, 9\n(9) * (96) = 864, left: 864, 13\n(9) + (96) = 105, left: 105, 13\n(13) / (9) = 13/9, left: 13/9, 96\n(13) - (9) = 4, left: 4, 96\n(96) / (4) = 24, left: 24\nreach 24! expression: ((12 * 8) / (13 - 9))"}, {"input": "13 9 12 8\n", "output": "(9) + (8) = 17, left: 17, 13, 12\n(13) / (17) = 13/17, left: 13/17, 12\n(12) * (13/17) = 156/17, left: 156/17\n(12) - (17) = -5, left: -5, 13\n(-5) - (13) = -18, left: -18\n(9) - (8) = 1, left: 1, 13, 12\n(13) - (12) = 1, left: 1, 1\n(13) * (12) = 156, left: 156, 1\n(13) + (12) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (9 - 8))"}, {"input": "13 9 12 8\n", "output": "(12) - (9) = 3, left: 3, 13, 8\n(8) / (13) = 8/13, left: 8/13, 3\n(3) + (8/13) = 47/13, left: 47/13\n(3) - (8/13) = 31/13, left: 31/13\n(3) * (8/13) = 24/13, left: 24/13\n(8/13) / (3) = 8/39, left: 8/39\n(8/13) - (3) = -31/13, left: -31/13\n(13) + (8) = 21, left: 21, 3\n(3) * (21) = 63, left: 63\n(3) + (21) = 24, left: 24\nreach 24! expression: ((12 - 9) + (13 + 8))"}, {"input": "13 9 12 8\n", "output": "(8) - (13) = -5, left: -5, 9, 12\n(9) + (12) = 21, left: 21, -5\n(13) * (8) = 104, left: 104, 9, 12\n(9) - (104) = -95, left: -95, 12\n(-95) / (12) = -95/12, left: -95/12\n(8) / (13) = 8/13, left: 8/13, 9, 12\n(9) / (12) = 3/4, left: 3/4, 8/13\n(13) + (8) = 21, left: 21, 9, 12\n(12) - (9) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((13 + 8) + (12 - 9))"}, {"input": "13 9 12 8\n", "output": "(13) - (12) = 1, left: 1, 9, 8\n(1) - (8) = -7, left: -7, 9\n(9) / (1) = 9, left: 9, 8\n(13) * (12) = 156, left: 156, 9, 8\n(13) / (12) = 13/12, left: 13/12, 9, 8\n(8) * (13/12) = 26/3, left: 26/3, 9\n(12) - (13) = -1, left: -1, 9, 8\n(13) + (12) = 25, left: 25, 9, 8\n(9) - (25) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (9 - (13 + 12)))"}, {"input": "13 9 12 8\n", "output": "(12) - (9) = 3, left: 3, 13, 8\n(8) / (13) = 8/13, left: 8/13, 3\n(3) + (8/13) = 47/13, left: 47/13\n(3) / (8/13) = 39/8, left: 39/8\n(3) - (8/13) = 31/13, left: 31/13\n(3) * (8/13) = 24/13, left: 24/13\n(8/13) / (3) = 8/39, left: 8/39\n(8/13) - (3) = -31/13, left: -31/13\n(13) + (8) = 21, left: 21, 3\n(3) * (21) = 63, left: 63\n(3) + (21) = 24, left: 24\nreach 24! expression: ((12 - 9) + (13 + 8))"}, {"input": "13 9 12 8\n", "output": "(12) - (9) = 3, left: 3, 13, 8\n(8) / (13) = 8/13, left: 8/13, 3\n(3) + (8/13) = 47/13, left: 47/13\n(3) / (8/13) = 39/8, left: 39/8\n(3) - (8/13) = 31/13, left: 31/13\n(3) * (8/13) = 24/13, left: 24/13\n(8/13) / (3) = 8/39, left: 8/39\n(8/13) - (3) = -31/13, left: -31/13\n(13) + (8) = 21, left: 21, 3\n(3) * (21) = 63, left: 63\n(3) + (21) = 24, left: 24\nreach 24! expression: ((12 - 9) + (13 + 8))"}, {"input": "2 4 2 9\n", "output": "(9) / (2) = 9/2, left: 9/2, 4, 2\n(9/2) / (2) = 9/4, left: 9/4, 4\n(9) - (2) = 7, left: 7, 4, 2\n(2) - (4) = -2, left: -2, 7\n(4) + (2) = 6, left: 6, 7\n(2) + (9) = 11, left: 11, 4, 2\n(11) - (2) = 9, left: 9, 4\n(2) * (9) = 18, left: 18, 4, 2\n(4) + (18) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (4 + (2 * 9)))"}, {"input": "2 4 2 9\n", "output": "(9) / (2) = 9/2, left: 9/2, 2, 4\n(2) + (4) = 6, left: 6, 9/2\n(2) / (4) = 1/2, left: 1/2, 9/2\n(2) / (9/2) = 4/9, left: 4/9, 4\n(2) / (9) = 2/9, left: 2/9, 2, 4\n(2) * (9) = 18, left: 18, 2, 4\n(18) / (2) = 9, left: 9, 4\n(18) - (2) = 16, left: 16, 4\n(2) + (18) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 + (2 * 9)))"}, {"input": "2 4 2 9\n", "output": "(9) - (4) = 5, left: 5, 2, 2\n(5) / (2) = 5/2, left: 5/2, 2\n(4) * (9) = 36, left: 36, 2, 2\n(2) - (36) = -34, left: -34, 2\n(36) / (2) = 18, left: 18, 2\n(36) - (2) = 34, left: 34, 2\n(2) - (34) = -32, left: -32\n(4) + (9) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (4 + 9)) - 2)"}, {"input": "2 4 2 9\n", "output": "(2) * (4) = 8, left: 8, 2, 9\n(2) / (4) = 1/2, left: 1/2, 2, 9\n(2) * (9) = 18, left: 18, 1/2\n(2) * (1/2) = 1, left: 1, 9\n(2) + (4) = 6, left: 6, 2, 9\n(9) / (6) = 3/2, left: 3/2, 2\n(3/2) - (2) = -1/2, left: -1/2\n(9) - (6) = 3, left: 3, 2\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((2 + 4) + (2 * 9))"}, {"input": "2 4 2 9\n", "output": "(4) - (2) = 2, left: 2, 2, 9\n(2) + (2) = 4, left: 4, 9\n(9) - (4) = 5, left: 5\n(2) - (9) = -7, left: -7, 2\n(2) / (4) = 1/2, left: 1/2, 2, 9\n(9) - (2) = 7, left: 7, 1/2\n(2) + (4) = 6, left: 6, 2, 9\n(9) - (6) = 3, left: 3, 2\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((2 + 4) + (2 * 9))"}, {"input": "2 4 2 9\n", "output": "(9) / (2) = 9/2, left: 9/2, 4, 2\n(4) / (9/2) = 8/9, left: 8/9, 2\n(2) + (8/9) = 26/9, left: 26/9\n(4) * (9/2) = 18, left: 18, 2\n(2) / (9) = 2/9, left: 2/9, 4, 2\n(2/9) / (4) = 1/18, left: 1/18, 2\n(9) - (2) = 7, left: 7, 4, 2\n(2) / (7) = 2/7, left: 2/7, 4\n(2) + (7) = 9, left: 9, 4\n(2) + (9) = 11, left: 11, 4, 2\n(4) - (2) = 2, left: 2, 11\n(2) * (9) = 18, left: 18, 4, 2\n(4) + (18) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (4 + (2 * 9)))"}, {"input": "13 4 12 10\n", "output": "(13) + (10) = 23, left: 23, 4, 12\n(12) / (4) = 3, left: 3, 23\n(23) - (12) = 11, left: 11, 4\n(13) - (10) = 3, left: 3, 4, 12\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (4 * (13 - 10)))"}, {"input": "13 4 12 10\n", "output": "(12) - (10) = 2, left: 2, 13, 4\n(2) - (13) = -11, left: -11, 4\n(12) + (10) = 22, left: 22, 13, 4\n(4) - (12) = -8, left: -8, 13, 10\n(10) - (13) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((4 - 12) * (10 - 13))"}, {"input": "13 4 12 10\n", "output": "(10) - (12) = -2, left: -2, 13, 4\n(13) * (-2) = -26, left: -26, 4\n(12) * (10) = 120, left: 120, 13, 4\n(12) - (10) = 2, left: 2, 13, 4\n(12) / (10) = 6/5, left: 6/5, 13, 4\n(4) * (6/5) = 24/5, left: 24/5, 13\n(13) / (24/5) = 65/24, left: 65/24\n(4) - (12) = -8, left: -8, 13, 10\n(10) - (13) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((4 - 12) * (10 - 13))"}, {"input": "13 4 12 10\n", "output": "(12) / (10) = 6/5, left: 6/5, 13, 4\n(12) + (10) = 22, left: 22, 13, 4\n(13) / (22) = 13/22, left: 13/22, 4\n(10) / (12) = 5/6, left: 5/6, 13, 4\n(12) - (10) = 2, left: 2, 13, 4\n(10) - (12) = -2, left: -2, 13, 4\n(4) / (10) = 2/5, left: 2/5, 13, 12\n(12) - (4) = 8, left: 8, 13, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((12 - 4) * (13 - 10))"}, {"input": "13 4 12 10\n", "output": "(4) + (10) = 14, left: 14, 13, 12\n(10) / (4) = 5/2, left: 5/2, 13, 12\n(13) * (5/2) = 65/2, left: 65/2, 12\n(4) / (10) = 2/5, left: 2/5, 13, 12\n(12) * (2/5) = 24/5, left: 24/5, 13\n(4) + (12) = 16, left: 16, 13, 10\n(4) - (12) = -8, left: -8, 13, 10\n(10) * (-8) = -80, left: -80, 13\n(10) - (13) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((4 - 12) * (10 - 13))"}, {"input": "13 4 12 10\n", "output": "(12) - (10) = 2, left: 2, 13, 4\n(10) - (12) = -2, left: -2, 13, 4\n(-2) / (13) = -2/13, left: -2/13, 4\n(12) + (10) = 22, left: 22, 13, 4\n(4) + (12) = 16, left: 16, 13, 10\n(13) - (10) = 3, left: 3, 16\n(4) * (12) = 48, left: 48, 13, 10\n(4) - (12) = -8, left: -8, 13, 10\n(10) - (13) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((4 - 12) * (10 - 13))"}, {"input": "13 4 12 10\n", "output": "(13) + (10) = 23, left: 23, 4, 12\n(4) * (12) = 48, left: 48, 23\n(12) - (4) = 8, left: 8, 23\n(23) / (8) = 23/8, left: 23/8\n(12) - (23) = -11, left: -11, 4\n(12) * (23) = 276, left: 276, 4\n(4) - (23) = -19, left: -19, 12\n(13) - (10) = 3, left: 3, 4, 12\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (4 * (13 - 10)))"}, {"input": "1 4 4 5\n", "output": "(1) / (4) = 1/4, left: 1/4, 4, 5\n(1/4) / (5) = 1/20, left: 1/20, 4\n(4) - (1/20) = 79/20, left: 79/20\n(5) * (1/4) = 5/4, left: 5/4, 4\n(5) / (1/4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 / (1 / 4)))"}, {"input": "1 4 4 5\n", "output": "(1) / (4) = 1/4, left: 1/4, 4, 5\n(5) - (1/4) = 19/4, left: 19/4, 4\n(4) - (19/4) = -3/4, left: -3/4\n(1/4) / (5) = 1/20, left: 1/20, 4\n(5) / (1/4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 / (1 / 4)))"}, {"input": "1 4 4 5\n", "output": "(1) / (4) = 1/4, left: 1/4, 4, 5\n(4) + (5) = 9, left: 9, 1/4\n(1/4) - (4) = -15/4, left: -15/4, 5\n(4) + (1/4) = 17/4, left: 17/4, 5\n(5) / (1/4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 / (1 / 4)))"}, {"input": "1 4 4 5\n", "output": "(4) + (5) = 9, left: 9, 1, 4\n(1) + (9) = 10, left: 10, 4\n(10) / (4) = 5/2, left: 5/2\n(5) - (4) = 1, left: 1, 1, 4\n(4) - (5) = -1, left: -1, 1, 4\n(4) / (-1) = -4, left: -4, 1\n(1) - (-1) = 2, left: 2, 4\n(4) * (5) = 20, left: 20, 1, 4\n(1) * (4) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((4 * 5) + (1 * 4))"}, {"input": "1 4 4 5\n", "output": "(4) * (5) = 20, left: 20, 1, 4\n(4) - (1) = 3, left: 3, 20\n(20) * (3) = 60, left: 60\n(1) + (4) = 5, left: 5, 20\n(5) / (20) = 1/4, left: 1/4\n(1) - (4) = -3, left: -3, 20\n(20) + (-3) = 17, left: 17\n(20) - (-3) = 23, left: 23\n(4) / (1) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((4 * 5) + (4 / 1))"}, {"input": "1 4 4 5\n", "output": "(1) / (4) = 1/4, left: 1/4, 4, 5\n(1/4) / (5) = 1/20, left: 1/20, 4\n(5) + (1/4) = 21/4, left: 21/4, 4\n(4) / (21/4) = 16/21, left: 16/21\n(21/4) - (4) = 5/4, left: 5/4\n(5) - (1/4) = 19/4, left: 19/4, 4\n(4) / (19/4) = 16/19, left: 16/19\n(5) * (1/4) = 5/4, left: 5/4, 4\n(5) / (1/4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 / (1 / 4)))"}, {"input": "1 4 4 5\n", "output": "(1) / (4) = 1/4, left: 1/4, 4, 5\n(5) * (1/4) = 5/4, left: 5/4, 4\n(1/4) - (5) = -19/4, left: -19/4, 4\n(-19/4) / (4) = -19/16, left: -19/16\n(-19/4) - (4) = -35/4, left: -35/4\n(5) - (1/4) = 19/4, left: 19/4, 4\n(5) / (1/4) = 20, left: 20, 4\n(4) / (20) = 1/5, left: 1/5\n(4) - (20) = -16, left: -16\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 / (1 / 4)))"}, {"input": "1 4 4 5\n", "output": "(1) / (4) = 1/4, left: 1/4, 4, 5\n(5) - (4) = 1, left: 1, 1/4\n(4) / (1/4) = 16, left: 16, 5\n(5) + (16) = 21, left: 21\n(4) - (1/4) = 15/4, left: 15/4, 5\n(1/4) / (4) = 1/16, left: 1/16, 5\n(4) + (1/4) = 17/4, left: 17/4, 5\n(5) - (1/4) = 19/4, left: 19/4, 4\n(5) / (1/4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 / (1 / 4)))"}, {"input": "1 4 4 5\n", "output": "(4) + (5) = 9, left: 9, 1, 4\n(9) - (1) = 8, left: 8, 4\n(4) + (9) = 13, left: 13, 1\n(1) / (13) = 1/13, left: 1/13\n(5) - (4) = 1, left: 1, 1, 4\n(4) + (1) = 5, left: 5, 1\n(4) - (5) = -1, left: -1, 1, 4\n(4) - (-1) = 5, left: 5, 1\n(5) / (4) = 5/4, left: 5/4, 1, 4\n(5/4) - (1) = 1/4, left: 1/4, 4\n(1/4) / (4) = 1/16, left: 1/16\n(4) * (5) = 20, left: 20, 1, 4\n(1) * (4) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((4 * 5) + (1 * 4))"}, {"input": "7 6 2 5\n", "output": "(2) / (5) = 2/5, left: 2/5, 7, 6\n(6) / (2/5) = 15, left: 15, 7\n(7) * (2/5) = 14/5, left: 14/5, 6\n(7) + (2/5) = 37/5, left: 37/5, 6\n(2) - (5) = -3, left: -3, 7, 6\n(7) - (6) = 1, left: 1, -3\n(7) / (6) = 7/6, left: 7/6, -3\n(6) - (-3) = 9, left: 9, 7\n(7) + (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 + (2 - 5)))"}, {"input": "7 6 2 5\n", "output": "(5) - (7) = -2, left: -2, 6, 2\n(2) / (-2) = -1, left: -1, 6\n(6) / (-1) = -6, left: -6\n(2) * (-2) = -4, left: -4, 6\n(6) * (-4) = -24, left: -24\n(2) + (-2) = 0, left: 0, 6\n(6) + (0) = 6, left: 6\n(-2) / (2) = -1, left: -1, 6\n(2) - (-2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 - (5 - 7)))"}, {"input": "7 6 2 5\n", "output": "(6) - (7) = -1, left: -1, 2, 5\n(2) / (-1) = -2, left: -2, 5\n(6) / (7) = 6/7, left: 6/7, 2, 5\n(7) / (6) = 7/6, left: 7/6, 2, 5\n(7) + (6) = 13, left: 13, 2, 5\n(13) / (5) = 13/5, left: 13/5, 2\n(5) - (2) = 3, left: 3, 7, 6\n(7) + (3) = 10, left: 10, 6\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (5 - 2)))"}, {"input": "7 6 2 5\n", "output": "(5) - (7) = -2, left: -2, 6, 2\n(6) / (2) = 3, left: 3, -2\n(-2) + (3) = 1, left: 1\n(-2) - (2) = -4, left: -4, 6\n(-4) / (6) = -2/3, left: -2/3\n(2) * (-2) = -4, left: -4, 6\n(2) / (-2) = -1, left: -1, 6\n(6) - (-1) = 7, left: 7\n(2) - (-2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 - (5 - 7)))"}, {"input": "7 6 2 5\n", "output": "(7) - (6) = 1, left: 1, 2, 5\n(2) - (1) = 1, left: 1, 5\n(6) / (7) = 6/7, left: 6/7, 2, 5\n(5) * (6/7) = 30/7, left: 30/7, 2\n(7) / (6) = 7/6, left: 7/6, 2, 5\n(7/6) - (5) = -23/6, left: -23/6, 2\n(2) + (7/6) = 19/6, left: 19/6, 5\n(7) + (2) = 9, left: 9, 6, 5\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((7 + 2) - 5))"}, {"input": "7 6 2 5\n", "output": "(5) - (7) = -2, left: -2, 6, 2\n(2) / (-2) = -1, left: -1, 6\n(6) * (-1) = -6, left: -6\n(6) + (-1) = 5, left: 5\n(2) * (-2) = -4, left: -4, 6\n(6) * (-4) = -24, left: -24\n(6) / (-4) = -3/2, left: -3/2\n(6) - (-4) = 10, left: 10\n(2) + (-2) = 0, left: 0, 6\n(-2) / (2) = -1, left: -1, 6\n(6) + (-1) = 5, left: 5\n(-1) - (6) = -7, left: -7\n(2) - (-2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 - (5 - 7)))"}, {"input": "4 3 6 12\n", "output": "(3) / (4) = 3/4, left: 3/4, 6, 12\n(12) * (3/4) = 9, left: 9, 6\n(12) - (3/4) = 45/4, left: 45/4, 6\n(6) * (12) = 72, left: 72, 3/4\n(6) + (12) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((6 + 12) / (3 / 4))"}, {"input": "4 3 6 12\n", "output": "(6) + (12) = 18, left: 18, 4, 3\n(4) / (18) = 2/9, left: 2/9, 3\n(4) + (18) = 22, left: 22, 3\n(3) - (22) = -19, left: -19\n(4) * (18) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((4 * (6 + 12)) / 3)"}, {"input": "4 3 6 12\n", "output": "(3) / (6) = 1/2, left: 1/2, 4, 12\n(4) / (1/2) = 8, left: 8, 12\n(12) + (8) = 20, left: 20\n(1/2) - (4) = -7/2, left: -7/2, 12\n(4) * (1/2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (4 * (3 / 6)))"}, {"input": "4 3 6 12\n", "output": "(3) / (6) = 1/2, left: 1/2, 4, 12\n(4) / (1/2) = 8, left: 8, 12\n(12) * (8) = 96, left: 96\n(1/2) - (4) = -7/2, left: -7/2, 12\n(-7/2) / (12) = -7/24, left: -7/24\n(4) * (1/2) = 2, left: 2, 12\n(12) + (2) = 14, left: 14\n(12) / (2) = 6, left: 6\n(2) - (12) = -10, left: -10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (4 * (3 / 6)))"}, {"input": "4 3 6 12\n", "output": "(6) - (12) = -6, left: -6, 4, 3\n(-6) - (3) = -9, left: -9, 4\n(3) - (4) = -1, left: -1, -6\n(-1) / (-6) = 1/6, left: 1/6\n(4) / (-6) = -2/3, left: -2/3, 3\n(6) * (12) = 72, left: 72, 4, 3\n(3) / (4) = 3/4, left: 3/4, 72\n(6) + (12) = 18, left: 18, 4, 3\n(4) / (3) = 4/3, left: 4/3, 18\n(18) * (4/3) = 24, left: 24\nreach 24! expression: ((6 + 12) * (4 / 3))"}, {"input": "4 3 6 12\n", "output": "(6) + (12) = 18, left: 18, 4, 3\n(4) / (18) = 2/9, left: 2/9, 3\n(3) * (2/9) = 2/3, left: 2/3\n(3) / (2/9) = 27/2, left: 27/2\n(4) - (18) = -14, left: -14, 3\n(3) - (-14) = 17, left: 17\n(4) + (18) = 22, left: 22, 3\n(22) / (3) = 22/3, left: 22/3\n(4) * (18) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((4 * (6 + 12)) / 3)"}, {"input": "4 3 6 12\n", "output": "(3) / (4) = 3/4, left: 3/4, 6, 12\n(3/4) / (12) = 1/16, left: 1/16, 6\n(12) * (3/4) = 9, left: 9, 6\n(6) + (9) = 15, left: 15\n(12) - (3/4) = 45/4, left: 45/4, 6\n(12) - (6) = 6, left: 6, 3/4\n(6) * (12) = 72, left: 72, 3/4\n(72) / (3/4) = 96, left: 96\n(6) + (12) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((6 + 12) / (3 / 4))"}, {"input": "10 11 2 1\n", "output": "(10) / (11) = 10/11, left: 10/11, 2, 1\n(11) / (10) = 11/10, left: 11/10, 2, 1\n(10) * (11) = 110, left: 110, 2, 1\n(10) + (11) = 21, left: 21, 2, 1\n(2) + (21) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (2 + (10 + 11)))"}, {"input": "10 11 2 1\n", "output": "(11) + (2) = 13, left: 13, 10, 1\n(10) - (1) = 9, left: 9, 13\n(13) + (9) = 22, left: 22\n(10) * (1) = 10, left: 10, 13\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((11 + 2) + (10 + 1))"}, {"input": "10 11 2 1\n", "output": "(2) * (1) = 2, left: 2, 10, 11\n(1) - (2) = -1, left: -1, 10, 11\n(10) / (11) = 10/11, left: 10/11, -1\n(10/11) - (-1) = 21/11, left: 21/11\n(11) / (10) = 11/10, left: 11/10, -1\n(2) / (1) = 2, left: 2, 10, 11\n(10) - (11) = -1, left: -1, 2\n(2) + (1) = 3, left: 3, 10, 11\n(10) + (11) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((2 + 1) + (10 + 11))"}, {"input": "10 11 2 1\n", "output": "(11) - (2) = 9, left: 9, 10, 1\n(1) / (9) = 1/9, left: 1/9, 10\n(10) / (1/9) = 90, left: 90\n(11) / (2) = 11/2, left: 11/2, 10, 1\n(11/2) / (10) = 11/20, left: 11/20, 1\n(2) / (11) = 2/11, left: 2/11, 10, 1\n(1) / (10) = 1/10, left: 1/10, 2/11\n(11) + (2) = 13, left: 13, 10, 1\n(1) + (13) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (1 + (11 + 2)))"}, {"input": "10 11 2 1\n", "output": "(11) - (10) = 1, left: 1, 2, 1\n(1) / (1) = 1, left: 1, 2\n(1) / (2) = 1/2, left: 1/2, 1\n(11) / (10) = 11/10, left: 11/10, 2, 1\n(2) * (11/10) = 11/5, left: 11/5, 1\n(2) + (1) = 3, left: 3, 11/10\n(10) * (11) = 110, left: 110, 2, 1\n(10) + (11) = 21, left: 21, 2, 1\n(2) + (21) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (2 + (10 + 11)))"}, {"input": "10 11 2 1\n", "output": "(11) + (2) = 13, left: 13, 10, 1\n(10) / (1) = 10, left: 10, 13\n(10) * (1) = 10, left: 10, 13\n(10) - (13) = -3, left: -3\n(10) / (13) = 10/13, left: 10/13\n(1) / (10) = 1/10, left: 1/10, 13\n(13) * (1/10) = 13/10, left: 13/10\n(10) + (1) = 11, left: 11, 13\n(13) / (11) = 13/11, left: 13/11\n(13) + (11) = 24, left: 24\nreach 24! expression: ((11 + 2) + (10 + 1))"}, {"input": "10 11 2 1\n", "output": "(11) / (1) = 11, left: 11, 10, 2\n(11) / (10) = 11/10, left: 11/10, 2\n(11/10) - (2) = -9/10, left: -9/10\n(11) / (2) = 11/2, left: 11/2, 10\n(11) - (1) = 10, left: 10, 10, 2\n(10) / (10) = 1, left: 1, 2\n(11) * (1) = 11, left: 11, 10, 2\n(11) + (1) = 12, left: 12, 10, 2\n(2) + (12) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 + (11 + 1)))"}, {"input": "1 6 3 3\n", "output": "(1) - (3) = -2, left: -2, 6, 3\n(-2) - (6) = -8, left: -8, 3\n(3) * (-8) = -24, left: -24\n(6) + (-2) = 4, left: 4, 3\n(6) / (-2) = -3, left: -3, 3\n(-2) / (6) = -1/3, left: -1/3, 3\n(3) - (-1/3) = 10/3, left: 10/3\n(6) - (-2) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 - (1 - 3)))"}, {"input": "1 6 3 3\n", "output": "(6) + (3) = 9, left: 9, 1, 3\n(1) + (9) = 10, left: 10, 3\n(1) / (9) = 1/9, left: 1/9, 3\n(1/9) / (3) = 1/27, left: 1/27\n(3) + (1/9) = 28/9, left: 28/9\n(3) * (1/9) = 1/3, left: 1/3\n(3) - (1/9) = 26/9, left: 26/9\n(9) - (1) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((6 + 3) - 1))"}, {"input": "1 6 3 3\n", "output": "(6) - (3) = 3, left: 3, 1, 3\n(3) / (1) = 3, left: 3, 3\n(6) / (3) = 2, left: 2, 1, 3\n(3) / (6) = 1/2, left: 1/2, 1, 3\n(1) + (1/2) = 3/2, left: 3/2, 3\n(3) - (6) = -3, left: -3, 1, 3\n(6) * (3) = 18, left: 18, 1, 3\n(6) + (3) = 9, left: 9, 1, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((6 + 3) - 1))"}, {"input": "1 6 3 3\n", "output": "(3) / (3) = 1, left: 1, 1, 6\n(1) / (6) = 1/6, left: 1/6, 1\n(3) - (3) = 0, left: 0, 1, 6\n(3) * (3) = 9, left: 9, 1, 6\n(6) - (9) = -3, left: -3, 1\n(3) + (3) = 6, left: 6, 1, 6\n(6) - (1) = 5, left: 5, 3, 3\n(5) - (3) = 2, left: 2, 3\n(3) + (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (3 + (6 - 1)))"}, {"input": "1 6 3 3\n", "output": "(6) / (1) = 6, left: 6, 3, 3\n(6) / (3) = 2, left: 2, 3\n(3) - (2) = 1, left: 1\n(3) * (6) = 18, left: 18, 3\n(3) / (6) = 1/2, left: 1/2, 3\n(1) + (6) = 7, left: 7, 3, 3\n(3) + (7) = 10, left: 10, 3\n(3) / (10) = 3/10, left: 3/10\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 * (1 + 6)))"}, {"input": "1 6 3 3\n", "output": "(6) / (1) = 6, left: 6, 3, 3\n(6) / (3) = 2, left: 2, 3\n(3) / (6) = 1/2, left: 1/2, 3\n(3) + (6) = 9, left: 9, 3\n(3) / (9) = 1/3, left: 1/3\n(3) * (6) = 18, left: 18, 3\n(3) - (3) = 0, left: 0, 6\n(3) * (3) = 9, left: 9, 6\n(6) / (3) = 2, left: 2, 3\n(3) * (6) = 18, left: 18, 3\n(1) + (6) = 7, left: 7, 3, 3\n(7) - (3) = 4, left: 4, 3\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 * (1 + 6)))"}, {"input": "1 6 3 3\n", "output": "(3) / (3) = 1, left: 1, 1, 6\n(3) - (3) = 0, left: 0, 1, 6\n(0) / (6) = 0, left: 0, 1\n(3) + (3) = 6, left: 6, 1, 6\n(6) / (1) = 6, left: 6, 6\n(1) * (6) = 6, left: 6, 6\n(6) * (6) = 36, left: 36\n(1) / (6) = 1/6, left: 1/6, 6\n(6) / (6) = 1, left: 1, 1\n(1) * (6) = 6, left: 6, 3, 3\n(3) / (6) = 1/2, left: 1/2, 3\n(6) - (1) = 5, left: 5, 3, 3\n(3) + (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (3 + (6 - 1)))"}, {"input": "1 6 3 3\n", "output": "(6) - (3) = 3, left: 3, 1, 3\n(1) * (3) = 3, left: 3, 3\n(3) - (1) = 2, left: 2, 3\n(3) / (6) = 1/2, left: 1/2, 1, 3\n(1) * (3) = 3, left: 3, 1/2\n(3) - (1/2) = 5/2, left: 5/2\n(3) - (6) = -3, left: -3, 1, 3\n(6) * (3) = 18, left: 18, 1, 3\n(1) + (18) = 19, left: 19, 3\n(1) / (18) = 1/18, left: 1/18, 3\n(6) + (3) = 9, left: 9, 1, 3\n(3) / (1) = 3, left: 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((6 + 3) - 1))"}, {"input": "1 6 3 3\n", "output": "(1) - (3) = -2, left: -2, 6, 3\n(6) * (-2) = -12, left: -12, 3\n(-2) - (6) = -8, left: -8, 3\n(3) * (-8) = -24, left: -24\n(6) + (-2) = 4, left: 4, 3\n(6) / (-2) = -3, left: -3, 3\n(3) * (-3) = -9, left: -9\n(-3) / (3) = -1, left: -1\n(-2) / (6) = -1/3, left: -1/3, 3\n(3) + (-1/3) = 8/3, left: 8/3\n(6) - (-2) = 8, left: 8, 3\n(8) - (3) = 5, left: 5\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 - (1 - 3)))"}, {"input": "1 11 2 12\n", "output": "(1) + (12) = 13, left: 13, 11, 2\n(2) / (11) = 2/11, left: 2/11, 13\n(2) / (13) = 2/13, left: 2/13, 11\n(1) - (12) = -11, left: -11, 11, 2\n(-11) - (2) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - ((1 - 12) - 2))"}, {"input": "1 11 2 12\n", "output": "(1) * (2) = 2, left: 2, 11, 12\n(2) - (12) = -10, left: -10, 11\n(2) / (12) = 1/6, left: 1/6, 11\n(2) - (1) = 1, left: 1, 11, 12\n(11) + (12) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: ((2 - 1) + (11 + 12))"}, {"input": "1 11 2 12\n", "output": "(1) / (2) = 1/2, left: 1/2, 11, 12\n(1/2) / (12) = 1/24, left: 1/24, 11\n(11) * (12) = 132, left: 132, 1/2\n(1) - (2) = -1, left: -1, 11, 12\n(11) + (12) = 23, left: 23, -1\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((11 + 12) - (1 - 2))"}, {"input": "1 11 2 12\n", "output": "(1) + (12) = 13, left: 13, 11, 2\n(11) - (2) = 9, left: 9, 13\n(11) - (13) = -2, left: -2, 2\n(-2) / (2) = -1, left: -1\n(1) * (12) = 12, left: 12, 11, 2\n(12) / (2) = 6, left: 6, 11\n(11) / (6) = 11/6, left: 11/6\n(1) - (12) = -11, left: -11, 11, 2\n(-11) - (2) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - ((1 - 12) - 2))"}, {"input": "1 11 2 12\n", "output": "(1) / (2) = 1/2, left: 1/2, 11, 12\n(1/2) - (12) = -23/2, left: -23/2, 11\n(12) + (1/2) = 25/2, left: 25/2, 11\n(12) - (11) = 1, left: 1, 1/2\n(1/2) + (1) = 3/2, left: 3/2\n(1) - (1/2) = 1/2, left: 1/2\n(11) + (1/2) = 23/2, left: 23/2, 12\n(1) - (2) = -1, left: -1, 11, 12\n(11) + (12) = 23, left: 23, -1\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((11 + 12) - (1 - 2))"}, {"input": "1 11 2 12\n", "output": "(1) + (12) = 13, left: 13, 11, 2\n(13) / (11) = 13/11, left: 13/11, 2\n(11) - (13) = -2, left: -2, 2\n(2) - (11) = -9, left: -9, 13\n(13) - (2) = 11, left: 11, 11\n(2) - (13) = -11, left: -11, 11\n(13) / (2) = 13/2, left: 13/2, 11\n(1) - (12) = -11, left: -11, 11, 2\n(-11) - (2) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - ((1 - 12) - 2))"}, {"input": "1 11 2 12\n", "output": "(1) * (2) = 2, left: 2, 11, 12\n(12) / (2) = 6, left: 6, 11\n(6) / (11) = 6/11, left: 6/11\n(1) + (2) = 3, left: 3, 11, 12\n(11) * (12) = 132, left: 132, 3\n(1) / (2) = 1/2, left: 1/2, 11, 12\n(12) * (1/2) = 6, left: 6, 11\n(2) - (1) = 1, left: 1, 11, 12\n(11) + (12) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: ((2 - 1) + (11 + 12))"}, {"input": "1 11 2 12\n", "output": "(1) * (2) = 2, left: 2, 11, 12\n(1) + (2) = 3, left: 3, 11, 12\n(12) - (11) = 1, left: 1, 3\n(3) + (1) = 4, left: 4\n(11) - (3) = 8, left: 8, 12\n(3) / (11) = 3/11, left: 3/11, 12\n(2) - (1) = 1, left: 1, 11, 12\n(12) * (1) = 12, left: 12, 11\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (2 - 1)))"}, {"input": "6 12 12 12\n", "output": "(12) / (6) = 2, left: 2, 12, 12\n(12) - (2) = 10, left: 10, 12\n(6) * (12) = 72, left: 72, 12, 12\n(12) - (6) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 - 6) / 12))"}, {"input": "6 12 12 12\n", "output": "(12) * (12) = 144, left: 144, 6, 12\n(6) * (144) = 864, left: 864, 12\n(12) * (864) = 10368, left: 10368\n(6) - (144) = -138, left: -138, 12\n(12) - (6) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (12 - 6))"}, {"input": "6 12 12 12\n", "output": "(12) + (12) = 24, left: 24, 6, 12\n(12) - (12) = 0, left: 0, 6, 12\n(6) - (0) = 6, left: 6, 12\n(12) * (12) = 144, left: 144, 6, 12\n(12) - (6) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (12 - 6))"}, {"input": "6 12 12 12\n", "output": "(6) / (12) = 1/2, left: 1/2, 12, 12\n(12) / (12) = 1, left: 1, 1/2\n(6) * (12) = 72, left: 72, 12, 12\n(12) - (6) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 - 6) / 12))"}, {"input": "6 12 12 12\n", "output": "(12) * (12) = 144, left: 144, 6, 12\n(144) - (6) = 138, left: 138, 12\n(138) - (12) = 126, left: 126\n(6) * (144) = 864, left: 864, 12\n(6) + (144) = 150, left: 150, 12\n(6) - (12) = -6, left: -6, 144\n(6) / (12) = 1/2, left: 1/2, 144\n(144) / (1/2) = 288, left: 288\n(12) - (6) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (12 - 6))"}, {"input": "6 12 12 12\n", "output": "(6) + (12) = 18, left: 18, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12, 12\n(1/2) - (12) = -23/2, left: -23/2, 12\n(6) * (12) = 72, left: 72, 12, 12\n(12) + (72) = 84, left: 84, 12\n(12) / (72) = 1/6, left: 1/6, 12\n(1/6) - (12) = -71/6, left: -71/6\n(12) - (6) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 - 6) / 12))"}, {"input": "6 12 12 12\n", "output": "(6) / (12) = 1/2, left: 1/2, 12, 12\n(12) / (6) = 2, left: 2, 12, 12\n(12) - (2) = 10, left: 10, 12\n(6) * (12) = 72, left: 72, 12, 12\n(12) - (72) = -60, left: -60, 12\n(12) / (12) = 1, left: 1, 72\n(12) / (12) = 1, left: 1, 72\n(12) - (6) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 - 6) / 12))"}, {"input": "6 12 12 12\n", "output": "(6) + (12) = 18, left: 18, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12, 12\n(12) - (1/2) = 23/2, left: 23/2, 12\n(6) - (12) = -6, left: -6, 12, 12\n(12) / (-6) = -2, left: -2, 12\n(12) * (-6) = -72, left: -72, 12\n(12) - (-72) = 84, left: 84\n(12) - (6) = 6, left: 6, 12, 12\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (12 / (12 - 6)))"}, {"input": "6 12 12 12\n", "output": "(12) + (12) = 24, left: 24, 6, 12\n(24) / (12) = 2, left: 2, 6\n(12) - (12) = 0, left: 0, 6, 12\n(12) / (6) = 2, left: 2, 0\n(2) - (0) = 2, left: 2\n(6) + (12) = 18, left: 18, 0\n(12) * (12) = 144, left: 144, 6, 12\n(6) - (12) = -6, left: -6, 144\n(12) - (6) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (12 - 6))"}, {"input": "3 12 3 13\n", "output": "(3) - (13) = -10, left: -10, 12, 3\n(13) - (3) = 10, left: 10, 12, 3\n(10) / (3) = 10/3, left: 10/3, 12\n(3) * (13) = 39, left: 39, 12, 3\n(39) - (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: (((3 * 13) - 3) - 12)"}, {"input": "3 12 3 13\n", "output": "(3) / (13) = 3/13, left: 3/13, 3, 12\n(12) - (3) = 9, left: 9, 3/13\n(12) + (3/13) = 159/13, left: 159/13, 3\n(3) * (13) = 39, left: 39, 3, 12\n(3) + (12) = 15, left: 15, 39\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (3 + 12))"}, {"input": "3 12 3 13\n", "output": "(13) / (12) = 13/12, left: 13/12, 3, 3\n(12) * (13) = 156, left: 156, 3, 3\n(3) * (156) = 468, left: 468, 3\n(12) + (13) = 25, left: 25, 3, 3\n(3) / (3) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((12 + 13) - (3 / 3))"}, {"input": "3 12 3 13\n", "output": "(12) + (3) = 15, left: 15, 3, 13\n(13) * (15) = 195, left: 195, 3\n(15) / (3) = 5, left: 5, 13\n(3) * (15) = 45, left: 45, 13\n(3) * (13) = 39, left: 39, 15\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (12 + 3))"}, {"input": "3 12 3 13\n", "output": "(12) + (13) = 25, left: 25, 3, 3\n(3) - (25) = -22, left: -22, 3\n(3) + (25) = 28, left: 28, 3\n(3) / (25) = 3/25, left: 3/25, 3\n(3) / (3) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((12 + 13) - (3 / 3))"}, {"input": "3 12 3 13\n", "output": "(13) / (3) = 13/3, left: 13/3, 12, 3\n(12) - (13/3) = 23/3, left: 23/3, 3\n(3) - (13) = -10, left: -10, 12, 3\n(3) / (12) = 1/4, left: 1/4, -10\n(12) - (-10) = 22, left: 22, 3\n(13) - (3) = 10, left: 10, 12, 3\n(12) + (10) = 22, left: 22, 3\n(3) * (13) = 39, left: 39, 12, 3\n(39) - (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: (((3 * 13) - 3) - 12)"}, {"input": "3 12 3 13\n", "output": "(13) / (12) = 13/12, left: 13/12, 3, 3\n(3) * (13/12) = 13/4, left: 13/4, 3\n(13) - (12) = 1, left: 1, 3, 3\n(3) * (3) = 9, left: 9, 1\n(12) * (13) = 156, left: 156, 3, 3\n(3) / (156) = 1/52, left: 1/52, 3\n(12) + (13) = 25, left: 25, 3, 3\n(25) - (3) = 22, left: 22, 3\n(3) / (3) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((12 + 13) - (3 / 3))"}, {"input": "3 12 3 13\n", "output": "(12) + (13) = 25, left: 25, 3, 3\n(3) - (25) = -22, left: -22, 3\n(25) - (3) = 22, left: 22, 3\n(22) / (3) = 22/3, left: 22/3\n(3) + (25) = 28, left: 28, 3\n(28) - (3) = 25, left: 25\n(3) * (25) = 75, left: 75, 3\n(3) * (3) = 9, left: 9, 25\n(3) / (3) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((12 + 13) - (3 / 3))"}, {"input": "3 12 3 13\n", "output": "(3) / (13) = 3/13, left: 3/13, 3, 12\n(3) + (3/13) = 42/13, left: 42/13, 12\n(3/13) / (3) = 1/13, left: 1/13, 12\n(3) / (3/13) = 13, left: 13, 12\n(12) - (3) = 9, left: 9, 3/13\n(3) * (13) = 39, left: 39, 3, 12\n(3) * (12) = 36, left: 36, 39\n(3) + (12) = 15, left: 15, 39\n(15) / (39) = 5/13, left: 5/13\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (3 + 12))"}, {"input": "3 12 3 13\n", "output": "(12) + (3) = 15, left: 15, 3, 13\n(13) * (15) = 195, left: 195, 3\n(13) + (15) = 28, left: 28, 3\n(15) - (3) = 12, left: 12, 13\n(15) / (3) = 5, left: 5, 13\n(3) * (15) = 45, left: 45, 13\n(3) / (15) = 1/5, left: 1/5, 13\n(3) + (13) = 16, left: 16, 15\n(3) * (13) = 39, left: 39, 15\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (12 + 3))"}, {"input": "11 8 2 10\n", "output": "(2) / (11) = 2/11, left: 2/11, 8, 10\n(8) / (2/11) = 44, left: 44, 10\n(11) / (2) = 11/2, left: 11/2, 8, 10\n(11) * (2) = 22, left: 22, 8, 10\n(22) - (8) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((11 * 2) - 8))"}, {"input": "11 8 2 10\n", "output": "(8) + (10) = 18, left: 18, 11, 2\n(8) / (10) = 4/5, left: 4/5, 11, 2\n(2) * (4/5) = 8/5, left: 8/5, 11\n(10) - (8) = 2, left: 2, 11, 2\n(11) * (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((10 - 8) + (11 * 2))"}, {"input": "11 8 2 10\n", "output": "(10) - (11) = -1, left: -1, 8, 2\n(8) / (2) = 4, left: 4, -1\n(4) - (-1) = 5, left: 5\n(-1) - (2) = -3, left: -3, 8\n(2) - (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 - (10 - 11)))"}, {"input": "11 8 2 10\n", "output": "(2) / (11) = 2/11, left: 2/11, 8, 10\n(2/11) / (8) = 1/44, left: 1/44, 10\n(10) - (1/44) = 439/44, left: 439/44\n(8) + (10) = 18, left: 18, 2/11\n(10) * (2/11) = 20/11, left: 20/11, 8\n(11) / (2) = 11/2, left: 11/2, 8, 10\n(8) + (11/2) = 27/2, left: 27/2, 10\n(11) * (2) = 22, left: 22, 8, 10\n(22) - (8) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((11 * 2) - 8))"}, {"input": "11 8 2 10\n", "output": "(10) / (8) = 5/4, left: 5/4, 11, 2\n(5/4) / (2) = 5/8, left: 5/8, 11\n(8) + (10) = 18, left: 18, 11, 2\n(18) / (2) = 9, left: 9, 11\n(2) / (18) = 1/9, left: 1/9, 11\n(11) / (1/9) = 99, left: 99\n(11) * (18) = 198, left: 198, 2\n(10) - (8) = 2, left: 2, 11, 2\n(11) * (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((10 - 8) + (11 * 2))"}, {"input": "11 8 2 10\n", "output": "(10) / (11) = 10/11, left: 10/11, 8, 2\n(8) - (10/11) = 78/11, left: 78/11, 2\n(11) * (10) = 110, left: 110, 8, 2\n(8) * (2) = 16, left: 16, 110\n(16) - (110) = -94, left: -94\n(2) - (8) = -6, left: -6, 110\n(10) - (11) = -1, left: -1, 8, 2\n(2) / (-1) = -2, left: -2, 8\n(2) - (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 - (10 - 11)))"}, {"input": "11 8 2 10\n", "output": "(8) + (10) = 18, left: 18, 11, 2\n(11) * (2) = 22, left: 22, 18\n(11) / (2) = 11/2, left: 11/2, 18\n(2) / (11) = 2/11, left: 2/11, 18\n(18) / (2) = 9, left: 9, 11\n(11) * (9) = 99, left: 99\n(2) + (18) = 20, left: 20, 11\n(8) - (10) = -2, left: -2, 11, 2\n(11) * (-2) = -22, left: -22, 2\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (11 * (8 - 10)))"}, {"input": "11 8 2 10\n", "output": "(10) - (11) = -1, left: -1, 8, 2\n(8) + (-1) = 7, left: 7, 2\n(7) - (2) = 5, left: 5\n(8) / (-1) = -8, left: -8, 2\n(-8) - (2) = -10, left: -10\n(8) - (-1) = 9, left: 9, 2\n(8) + (2) = 10, left: 10, -1\n(8) * (2) = 16, left: 16, -1\n(2) - (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 - (10 - 11)))"}, {"input": "3 9 13 8\n", "output": "(9) - (13) = -4, left: -4, 3, 8\n(8) * (-4) = -32, left: -32, 3\n(9) + (13) = 22, left: 22, 3, 8\n(3) / (22) = 3/22, left: 3/22, 8\n(22) / (3) = 22/3, left: 22/3, 8\n(9) / (13) = 9/13, left: 9/13, 3, 8\n(3) - (9/13) = 30/13, left: 30/13, 8\n(13) + (8) = 21, left: 21, 3, 9\n(9) / (3) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((13 + 8) + (9 / 3))"}, {"input": "3 9 13 8\n", "output": "(8) / (13) = 8/13, left: 8/13, 3, 9\n(13) / (8) = 13/8, left: 13/8, 3, 9\n(3) + (13/8) = 37/8, left: 37/8, 9\n(9) - (37/8) = 35/8, left: 35/8\n(8) - (13) = -5, left: -5, 3, 9\n(9) + (-5) = 4, left: 4, 3\n(3) - (-5) = 8, left: 8, 9\n(9) * (8) = 72, left: 72\n(3) * (-5) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (3 * (8 - 13)))"}, {"input": "3 9 13 8\n", "output": "(3) - (8) = -5, left: -5, 9, 13\n(8) - (3) = 5, left: 5, 9, 13\n(3) + (8) = 11, left: 11, 9, 13\n(9) - (11) = -2, left: -2, 13\n(8) - (9) = -1, left: -1, 3, 13\n(3) - (13) = -10, left: -10, -1\n(8) - (13) = -5, left: -5, 3, 9\n(9) - (3) = 6, left: 6, -5\n(3) * (-5) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (3 * (8 - 13)))"}, {"input": "3 9 13 8\n", "output": "(13) - (3) = 10, left: 10, 9, 8\n(9) * (13) = 117, left: 117, 3, 8\n(117) / (3) = 39, left: 39, 8\n(8) / (9) = 8/9, left: 8/9, 3, 13\n(9) * (8) = 72, left: 72, 3, 13\n(9) - (8) = 1, left: 1, 3, 13\n(9) + (8) = 17, left: 17, 3, 13\n(13) + (8) = 21, left: 21, 3, 9\n(9) / (3) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((13 + 8) + (9 / 3))"}, {"input": "3 9 13 8\n", "output": "(13) - (3) = 10, left: 10, 9, 8\n(3) / (13) = 3/13, left: 3/13, 9, 8\n(9) * (8) = 72, left: 72, 3/13\n(3) + (13) = 16, left: 16, 9, 8\n(9) + (8) = 17, left: 17, 3, 13\n(9) - (8) = 1, left: 1, 3, 13\n(9) / (13) = 9/13, left: 9/13, 3, 8\n(9) / (3) = 3, left: 3, 13, 8\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (13 + (9 / 3)))"}, {"input": "3 9 13 8\n", "output": "(3) - (13) = -10, left: -10, 9, 8\n(8) * (-10) = -80, left: -80, 9\n(13) - (3) = 10, left: 10, 9, 8\n(3) * (13) = 39, left: 39, 9, 8\n(9) - (13) = -4, left: -4, 3, 8\n(3) + (-4) = -1, left: -1, 8\n(9) * (8) = 72, left: 72, 3, 13\n(3) + (13) = 16, left: 16, 72\n(8) - (9) = -1, left: -1, 3, 13\n(9) + (8) = 17, left: 17, 3, 13\n(17) - (13) = 4, left: 4, 3\n(13) + (8) = 21, left: 21, 3, 9\n(9) / (3) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((13 + 8) + (9 / 3))"}, {"input": "3 9 13 8\n", "output": "(3) * (8) = 24, left: 24, 9, 13\n(13) - (24) = -11, left: -11, 9\n(3) / (8) = 3/8, left: 3/8, 9, 13\n(8) - (3) = 5, left: 5, 9, 13\n(9) * (8) = 72, left: 72, 3, 13\n(13) - (72) = -59, left: -59, 3\n(-59) / (3) = -59/3, left: -59/3\n(9) + (8) = 17, left: 17, 3, 13\n(3) / (17) = 3/17, left: 3/17, 13\n(8) - (9) = -1, left: -1, 3, 13\n(8) - (13) = -5, left: -5, 3, 9\n(9) / (-5) = -9/5, left: -9/5, 3\n(3) * (-5) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (3 * (8 - 13)))"}, {"input": "3 9 13 8\n", "output": "(3) / (13) = 3/13, left: 3/13, 9, 8\n(8) / (9) = 8/9, left: 8/9, 3, 13\n(13) - (3) = 10, left: 10, 8/9\n(9) - (13) = -4, left: -4, 3, 8\n(9) + (13) = 22, left: 22, 3, 8\n(22) - (3) = 19, left: 19, 8\n(13) - (9) = 4, left: 4, 3, 8\n(4) / (8) = 1/2, left: 1/2, 3\n(13) / (9) = 13/9, left: 13/9, 3, 8\n(9) / (13) = 9/13, left: 9/13, 3, 8\n(9) - (3) = 6, left: 6, 13, 8\n(9) / (3) = 3, left: 3, 13, 8\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (13 + (9 / 3)))"}, {"input": "9 7 1 7\n", "output": "(9) * (7) = 63, left: 63, 1, 7\n(1) + (63) = 64, left: 64, 7\n(9) - (7) = 2, left: 2, 1, 7\n(7) / (9) = 7/9, left: 7/9, 1, 7\n(7) - (9) = -2, left: -2, 1, 7\n(7) * (-2) = -14, left: -14, 1\n(9) / (7) = 9/7, left: 9/7, 1, 7\n(9) + (7) = 16, left: 16, 1, 7\n(1) + (7) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((9 + 7) + (1 + 7))"}, {"input": "9 7 1 7\n", "output": "(9) - (7) = 2, left: 2, 7, 1\n(1) - (7) = -6, left: -6, 2\n(7) / (9) = 7/9, left: 7/9, 7, 1\n(1) - (7) = -6, left: -6, 7/9\n(9) * (7) = 63, left: 63, 7, 1\n(7) * (63) = 441, left: 441, 1\n(7) - (9) = -2, left: -2, 7, 1\n(9) + (7) = 16, left: 16, 7, 1\n(1) + (16) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (1 + (9 + 7)))"}, {"input": "9 7 1 7\n", "output": "(1) - (7) = -6, left: -6, 9, 7\n(7) + (-6) = 1, left: 1, 9\n(7) / (1) = 7, left: 7, 9, 7\n(9) / (7) = 9/7, left: 9/7, 7\n(1) / (7) = 1/7, left: 1/7, 9, 7\n(7) + (1) = 8, left: 8, 9, 7\n(9) / (8) = 9/8, left: 9/8, 7\n(8) / (9) = 8/9, left: 8/9, 7\n(9) + (8) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (9 + (7 + 1)))"}, {"input": "9 7 1 7\n", "output": "(9) - (1) = 8, left: 8, 7, 7\n(7) / (8) = 7/8, left: 7/8, 7\n(7) + (8) = 15, left: 15, 7\n(15) / (7) = 15/7, left: 15/7\n(7) / (8) = 7/8, left: 7/8, 7\n(7) - (7) = 0, left: 0, 8\n(8) * (0) = 0, left: 0\n(9) + (1) = 10, left: 10, 7, 7\n(7) + (10) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (7 + (9 + 1)))"}, {"input": "9 7 1 7\n", "output": "(1) / (9) = 1/9, left: 1/9, 7, 7\n(9) - (1) = 8, left: 8, 7, 7\n(7) - (8) = -1, left: -1, 7\n(9) * (1) = 9, left: 9, 7, 7\n(9) - (7) = 2, left: 2, 7\n(9) / (7) = 9/7, left: 9/7, 7\n(7) + (7) = 14, left: 14, 9\n(9) + (1) = 10, left: 10, 7, 7\n(7) + (10) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (7 + (9 + 1)))"}, {"input": "9 7 1 7\n", "output": "(9) - (7) = 2, left: 2, 7, 1\n(7) * (1) = 7, left: 7, 2\n(7) / (9) = 7/9, left: 7/9, 7, 1\n(7) + (1) = 8, left: 8, 7/9\n(7/9) / (7) = 1/9, left: 1/9, 1\n(9) * (7) = 63, left: 63, 7, 1\n(1) * (63) = 63, left: 63, 7\n(63) / (1) = 63, left: 63, 7\n(7) - (9) = -2, left: -2, 7, 1\n(1) - (-2) = 3, left: 3, 7\n(7) * (1) = 7, left: 7, -2\n(9) + (7) = 16, left: 16, 7, 1\n(1) + (16) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (1 + (9 + 7)))"}, {"input": "9 7 1 7\n", "output": "(1) - (7) = -6, left: -6, 9, 7\n(7) / (1) = 7, left: 7, 9, 7\n(9) + (7) = 16, left: 16, 7\n(1) / (7) = 1/7, left: 1/7, 9, 7\n(9) - (7) = 2, left: 2, 1/7\n(7) - (1) = 6, left: 6, 9, 7\n(7) - (6) = 1, left: 1, 9\n(9) + (1) = 10, left: 10\n(7) + (6) = 13, left: 13, 9\n(6) / (9) = 2/3, left: 2/3, 7\n(7) / (2/3) = 21/2, left: 21/2\n(7) + (1) = 8, left: 8, 9, 7\n(9) + (8) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (9 + (7 + 1)))"}, {"input": "9 7 1 7\n", "output": "(9) * (7) = 63, left: 63, 1, 7\n(1) / (7) = 1/7, left: 1/7, 63\n(7) + (63) = 70, left: 70, 1\n(7) - (63) = -56, left: -56, 1\n(9) - (7) = 2, left: 2, 1, 7\n(7) / (1) = 7, left: 7, 2\n(7) - (9) = -2, left: -2, 1, 7\n(1) / (7) = 1/7, left: 1/7, -2\n(7) * (-2) = -14, left: -14, 1\n(9) / (7) = 9/7, left: 9/7, 1, 7\n(1) + (9/7) = 16/7, left: 16/7, 7\n(9) + (7) = 16, left: 16, 1, 7\n(1) + (7) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((9 + 7) + (1 + 7))"}, {"input": "9 7 1 7\n", "output": "(1) - (9) = -8, left: -8, 7, 7\n(7) * (-8) = -56, left: -56, 7\n(7) + (-56) = -49, left: -49\n(1) / (9) = 1/9, left: 1/9, 7, 7\n(7) - (1/9) = 62/9, left: 62/9, 7\n(7) / (62/9) = 63/62, left: 63/62\n(9) * (1) = 9, left: 9, 7, 7\n(7) * (9) = 63, left: 63, 7\n(9) / (1) = 9, left: 9, 7, 7\n(7) + (7) = 14, left: 14, 9\n(9) + (1) = 10, left: 10, 7, 7\n(7) / (10) = 7/10, left: 7/10, 7\n(7) + (10) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (7 + (9 + 1)))"}, {"input": "11 8 12 8\n", "output": "(8) / (8) = 1, left: 1, 11, 12\n(1) / (12) = 1/12, left: 1/12, 11\n(12) / (1) = 12, left: 12, 11\n(11) - (12) = -1, left: -1\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (8 / 8)))"}, {"input": "11 8 12 8\n", "output": "(8) / (8) = 1, left: 1, 11, 12\n(1) - (12) = -11, left: -11, 11\n(12) * (1) = 12, left: 12, 11\n(12) - (11) = 1, left: 1\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (8 / 8)))"}, {"input": "11 8 12 8\n", "output": "(8) / (8) = 1, left: 1, 11, 12\n(12) - (1) = 11, left: 11, 11\n(11) * (11) = 121, left: 121\n(1) / (12) = 1/12, left: 1/12, 11\n(12) / (1) = 12, left: 12, 11\n(12) * (1) = 12, left: 12, 11\n(12) + (1) = 13, left: 13, 11\n(11) - (13) = -2, left: -2\n(13) - (11) = 2, left: 2\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (8 / 8)))"}, {"input": "11 8 12 8\n", "output": "(12) - (8) = 4, left: 4, 11, 8\n(11) / (8) = 11/8, left: 11/8, 8, 12\n(8) - (11) = -3, left: -3, 8, 12\n(8) * (-3) = -24, left: -24, 12\n(11) * (8) = 88, left: 88, 12, 8\n(88) / (8) = 11, left: 11, 12\n(8) - (8) = 0, left: 0, 11, 12\n(8) / (8) = 1, left: 1, 11, 12\n(11) + (12) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: ((8 / 8) + (11 + 12))"}, {"input": "11 8 12 8\n", "output": "(8) / (8) = 1, left: 1, 11, 12\n(1) / (12) = 1/12, left: 1/12, 11\n(11) / (1/12) = 132, left: 132\n(11) * (1/12) = 11/12, left: 11/12\n(12) / (1) = 12, left: 12, 11\n(12) - (11) = 1, left: 1\n(11) + (12) = 23, left: 23\n(12) + (1) = 13, left: 13, 11\n(13) / (11) = 13/11, left: 13/11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (8 / 8)))"}, {"input": "11 8 12 8\n", "output": "(11) + (8) = 19, left: 19, 12, 8\n(11) * (8) = 88, left: 88, 12, 8\n(12) / (88) = 3/22, left: 3/22, 8\n(11) - (8) = 3, left: 3, 12, 8\n(12) / (11) = 12/11, left: 12/11, 8, 8\n(8) / (8) = 1, left: 1, 12/11\n(12) - (11) = 1, left: 1, 8, 8\n(11) + (12) = 23, left: 23, 8, 8\n(8) / (8) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((11 + 12) + (8 / 8))"}, {"input": "11 8 12 8\n", "output": "(8) - (12) = -4, left: -4, 11, 8\n(11) + (-4) = 7, left: 7, 8\n(8) + (12) = 20, left: 20, 11, 8\n(20) - (8) = 12, left: 12, 11\n(8) - (12) = -4, left: -4, 11, 8\n(11) + (8) = 19, left: 19, 8, 12\n(11) * (8) = 88, left: 88, 8, 12\n(8) / (8) = 1, left: 1, 11, 12\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (8 / 8)))"}, {"input": "12 6 5 13\n", "output": "(13) - (6) = 7, left: 7, 12, 5\n(12) - (5) = 7, left: 7, 7\n(12) * (5) = 60, left: 60, 7\n(7) - (60) = -53, left: -53\n(12) + (5) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: ((13 - 6) + (12 + 5))"}, {"input": "12 6 5 13\n", "output": "(12) / (6) = 2, left: 2, 5, 13\n(13) + (2) = 15, left: 15, 5\n(5) / (2) = 5/2, left: 5/2, 13\n(6) - (12) = -6, left: -6, 5, 13\n(5) + (13) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((5 + 13) - (6 - 12))"}, {"input": "12 6 5 13\n", "output": "(5) + (13) = 18, left: 18, 12, 6\n(12) / (6) = 2, left: 2, 18\n(18) + (2) = 20, left: 20\n(6) / (12) = 1/2, left: 1/2, 18\n(12) - (6) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((5 + 13) + (12 - 6))"}, {"input": "12 6 5 13\n", "output": "(5) * (13) = 65, left: 65, 12, 6\n(65) - (6) = 59, left: 59, 12\n(6) / (65) = 6/65, left: 6/65, 12\n(13) - (5) = 8, left: 8, 12, 6\n(8) - (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 5) - 6))"}, {"input": "12 6 5 13\n", "output": "(13) - (6) = 7, left: 7, 12, 5\n(5) * (7) = 35, left: 35, 12\n(35) - (12) = 23, left: 23\n(7) - (5) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 6) - 5))"}, {"input": "12 6 5 13\n", "output": "(13) - (6) = 7, left: 7, 12, 5\n(5) * (7) = 35, left: 35, 12\n(35) - (12) = 23, left: 23\n(12) / (35) = 12/35, left: 12/35\n(12) - (35) = -23, left: -23\n(7) - (5) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(12) / (2) = 6, left: 6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 6) - 5))"}, {"input": "12 6 5 13\n", "output": "(13) - (6) = 7, left: 7, 12, 5\n(12) / (5) = 12/5, left: 12/5, 7\n(12/5) / (7) = 12/35, left: 12/35\n(12) - (5) = 7, left: 7, 7\n(5) / (12) = 5/12, left: 5/12, 7\n(12) * (5) = 60, left: 60, 7\n(7) + (60) = 67, left: 67\n(7) - (60) = -53, left: -53\n(12) + (5) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: ((13 - 6) + (12 + 5))"}, {"input": "12 6 5 13\n", "output": "(5) + (13) = 18, left: 18, 12, 6\n(12) / (6) = 2, left: 2, 18\n(2) - (18) = -16, left: -16\n(18) + (2) = 20, left: 20\n(6) / (12) = 1/2, left: 1/2, 18\n(18) * (1/2) = 9, left: 9\n(1/2) - (18) = -35/2, left: -35/2\n(12) - (6) = 6, left: 6, 18\n(6) / (18) = 1/3, left: 1/3\n(18) + (6) = 24, left: 24\nreach 24! expression: ((5 + 13) + (12 - 6))"}, {"input": "12 6 5 13\n", "output": "(5) * (13) = 65, left: 65, 12, 6\n(65) / (12) = 65/12, left: 65/12, 6\n(12) / (65) = 12/65, left: 12/65, 6\n(12) / (6) = 2, left: 2, 65\n(65) - (6) = 59, left: 59, 12\n(6) + (65) = 71, left: 71, 12\n(65) / (6) = 65/6, left: 65/6, 12\n(13) - (5) = 8, left: 8, 12, 6\n(8) - (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 5) - 6))"}, {"input": "12 6 5 13\n", "output": "(12) / (6) = 2, left: 2, 5, 13\n(5) - (13) = -8, left: -8, 2\n(12) + (6) = 18, left: 18, 5, 13\n(13) / (5) = 13/5, left: 13/5, 18\n(13) - (5) = 8, left: 8, 18\n(5) * (18) = 90, left: 90, 13\n(6) - (12) = -6, left: -6, 5, 13\n(5) - (13) = -8, left: -8, -6\n(5) + (13) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((5 + 13) - (6 - 12))"}, {"input": "12 11 5 8\n", "output": "(11) + (5) = 16, left: 16, 12, 8\n(16) / (8) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) / (2) = 6, left: 6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 + 5) / 8))"}, {"input": "12 11 5 8\n", "output": "(11) + (5) = 16, left: 16, 12, 8\n(16) / (8) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(2) - (12) = -10, left: -10\n(12) - (2) = 10, left: 10\n(12) / (2) = 6, left: 6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 + 5) / 8))"}, {"input": "12 11 5 8\n", "output": "(5) - (8) = -3, left: -3, 12, 11\n(12) + (-3) = 9, left: 9, 11\n(12) * (11) = 132, left: 132, -3\n(132) - (-3) = 135, left: 135\n(5) / (8) = 5/8, left: 5/8, 12, 11\n(12) + (5/8) = 101/8, left: 101/8, 11\n(5) + (8) = 13, left: 13, 12, 11\n(11) + (13) = 24, left: 24, 12\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((5 + 8) - 11))"}, {"input": "12 11 5 8\n", "output": "(12) + (5) = 17, left: 17, 11, 8\n(8) / (11) = 8/11, left: 8/11, 17\n(12) / (5) = 12/5, left: 12/5, 11, 8\n(5) / (12) = 5/12, left: 5/12, 11, 8\n(11) * (5/12) = 55/12, left: 55/12, 8\n(11) * (8) = 88, left: 88, 12, 5\n(11) + (8) = 19, left: 19, 12, 5\n(11) - (8) = 3, left: 3, 12, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (11 - 8)))"}, {"input": "12 11 5 8\n", "output": "(12) + (5) = 17, left: 17, 11, 8\n(12) * (11) = 132, left: 132, 5, 8\n(12) + (11) = 23, left: 23, 5, 8\n(5) / (8) = 5/8, left: 5/8, 23\n(23) + (5/8) = 189/8, left: 189/8\n(12) / (11) = 12/11, left: 12/11, 5, 8\n(12/11) - (5) = -43/11, left: -43/11, 8\n(12) / (8) = 3/2, left: 3/2, 11, 5\n(11) + (5) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((12 / 8) * (11 + 5))"}, {"input": "12 11 5 8\n", "output": "(12) * (5) = 60, left: 60, 11, 8\n(12) - (5) = 7, left: 7, 11, 8\n(8) * (7) = 56, left: 56, 11\n(11) / (56) = 11/56, left: 11/56\n(11) - (7) = 4, left: 4, 8\n(5) / (11) = 5/11, left: 5/11, 12, 8\n(11) * (5) = 55, left: 55, 12, 8\n(5) - (11) = -6, left: -6, 12, 8\n(8) + (-6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (8 + (5 - 11)))"}, {"input": "12 11 5 8\n", "output": "(11) + (5) = 16, left: 16, 12, 8\n(16) / (8) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(2) - (12) = -10, left: -10\n(12) - (2) = 10, left: 10\n(12) / (2) = 6, left: 6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 + 5) / 8))"}, {"input": "12 11 5 8\n", "output": "(11) + (5) = 16, left: 16, 12, 8\n(16) / (8) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(2) - (12) = -10, left: -10\n(12) - (2) = 10, left: 10\n(12) / (2) = 6, left: 6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 + 5) / 8))"}, {"input": "5 10 9 6\n", "output": "(6) - (9) = -3, left: -3, 5, 10\n(9) - (6) = 3, left: 3, 5, 10\n(5) * (10) = 50, left: 50, 3\n(9) * (6) = 54, left: 54, 5, 10\n(10) / (54) = 5/27, left: 5/27, 5\n(10) - (9) = 1, left: 1, 5, 6\n(6) * (1) = 6, left: 6, 5\n(6) - (1) = 5, left: 5, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (10 - 9)))"}, {"input": "5 10 9 6\n", "output": "(5) + (6) = 11, left: 11, 10, 9\n(9) + (11) = 20, left: 20, 10\n(5) - (6) = -1, left: -1, 10, 9\n(10) - (6) = 4, left: 4, 5, 9\n(4) - (5) = -1, left: -1, 9\n(6) - (10) = -4, left: -4, 5, 9\n(-4) - (5) = -9, left: -9, 9\n(9) - (10) = -1, left: -1, 5, 6\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (9 - 10)))"}, {"input": "5 10 9 6\n", "output": "(9) * (6) = 54, left: 54, 5, 10\n(5) - (6) = -1, left: -1, 10, 9\n(-1) / (9) = -1/9, left: -1/9, 10\n(6) / (5) = 6/5, left: 6/5, 10, 9\n(10) / (6) = 5/3, left: 5/3, 5, 9\n(6) - (10) = -4, left: -4, 5, 9\n(5) - (9) = -4, left: -4, 10, 6\n(9) / (5) = 9/5, left: 9/5, 10, 6\n(10) * (9/5) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (10 * (9 / 5)))"}, {"input": "5 10 9 6\n", "output": "(9) + (6) = 15, left: 15, 5, 10\n(5) + (10) = 15, left: 15, 15\n(5) * (10) = 50, left: 50, 15\n(9) - (6) = 3, left: 3, 5, 10\n(3) - (10) = -7, left: -7, 5\n(6) - (9) = -3, left: -3, 5, 10\n(10) - (5) = 5, left: 5, -3\n(10) * (9) = 90, left: 90, 5, 6\n(90) / (5) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + ((10 * 9) / 5))"}, {"input": "5 10 9 6\n", "output": "(6) - (9) = -3, left: -3, 5, 10\n(5) - (10) = -5, left: -5, -3\n(9) / (6) = 3/2, left: 3/2, 5, 10\n(5) * (10) = 50, left: 50, 3/2\n(5) + (10) = 15, left: 15, 3/2\n(10) + (3/2) = 23/2, left: 23/2, 5\n(9) / (5) = 9/5, left: 9/5, 10, 6\n(6) + (9/5) = 39/5, left: 39/5, 10\n(10) * (9/5) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (10 * (9 / 5)))"}, {"input": "5 10 9 6\n", "output": "(6) / (5) = 6/5, left: 6/5, 10, 9\n(5) / (6) = 5/6, left: 5/6, 10, 9\n(10) * (6) = 60, left: 60, 5, 9\n(10) + (6) = 16, left: 16, 5, 9\n(16) / (5) = 16/5, left: 16/5, 9\n(6) / (10) = 3/5, left: 3/5, 5, 9\n(10) - (6) = 4, left: 4, 5, 9\n(6) - (10) = -4, left: -4, 5, 9\n(9) * (-4) = -36, left: -36, 5\n(5) + (9) = 14, left: 14, -4\n(10) / (6) = 5/3, left: 5/3, 5, 9\n(9) - (10) = -1, left: -1, 5, 6\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (9 - 10)))"}, {"input": "5 10 9 6\n", "output": "(9) + (6) = 15, left: 15, 5, 10\n(9) - (6) = 3, left: 3, 5, 10\n(5) * (6) = 30, left: 30, 10, 9\n(6) - (5) = 1, left: 1, 10, 9\n(5) / (6) = 5/6, left: 5/6, 10, 9\n(10) * (6) = 60, left: 60, 5, 9\n(5) * (9) = 45, left: 45, 60\n(10) - (6) = 4, left: 4, 5, 9\n(5) / (9) = 5/9, left: 5/9, 4\n(6) / (10) = 3/5, left: 3/5, 5, 9\n(5) - (9) = -4, left: -4, 3/5\n(9) / (5) = 9/5, left: 9/5, 10, 6\n(10) * (9/5) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (10 * (9 / 5)))"}, {"input": "13 12 12 11\n", "output": "(12) - (11) = 1, left: 1, 13, 12\n(1) / (12) = 1/12, left: 1/12, 13\n(12) + (1) = 13, left: 13, 13\n(13) / (13) = 1, left: 1\n(1) - (12) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((12 - 11) - 12))"}, {"input": "13 12 12 11\n", "output": "(12) - (11) = 1, left: 1, 13, 12\n(12) * (1) = 12, left: 12, 13\n(12) + (1) = 13, left: 13, 13\n(12) / (1) = 12, left: 12, 13\n(1) - (12) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((12 - 11) - 12))"}, {"input": "13 12 12 11\n", "output": "(13) / (11) = 13/11, left: 13/11, 12, 12\n(13) - (11) = 2, left: 2, 12, 12\n(12) - (12) = 0, left: 0, 2\n(13) + (11) = 24, left: 24, 12, 12\n(12) - (12) = 0, left: 0, 24\n(24) + (0) = 24, left: 24\nreach 24! expression: ((13 + 11) + (12 - 12))"}, {"input": "13 12 12 11\n", "output": "(11) / (12) = 11/12, left: 11/12, 13, 12\n(13) + (11/12) = 167/12, left: 167/12, 12\n(13) / (12) = 13/12, left: 13/12, 11/12\n(11/12) - (12) = -133/12, left: -133/12, 13\n(12) * (11/12) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (12 * (11 / 12)))"}, {"input": "13 12 12 11\n", "output": "(11) - (12) = -1, left: -1, 13, 12\n(13) / (-1) = -13, left: -13, 12\n(12) / (-13) = -12/13, left: -12/13\n(-1) / (13) = -1/13, left: -1/13, 12\n(13) + (-1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (13 + (11 - 12)))"}, {"input": "13 12 12 11\n", "output": "(12) - (11) = 1, left: 1, 13, 12\n(12) * (1) = 12, left: 12, 13\n(12) / (1) = 12, left: 12, 13\n(13) / (12) = 13/12, left: 13/12\n(13) * (12) = 156, left: 156\n(12) / (13) = 12/13, left: 12/13\n(1) / (12) = 1/12, left: 1/12, 13\n(1/12) / (13) = 1/156, left: 1/156\n(1) - (12) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((12 - 11) - 12))"}, {"input": "13 12 12 11\n", "output": "(12) - (11) = 1, left: 1, 13, 12\n(1) / (12) = 1/12, left: 1/12, 13\n(13) + (1/12) = 157/12, left: 157/12\n(1/12) - (13) = -155/12, left: -155/12\n(1/12) / (13) = 1/156, left: 1/156\n(12) + (1) = 13, left: 13, 13\n(13) - (13) = 0, left: 0\n(13) - (13) = 0, left: 0\n(1) - (12) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((12 - 11) - 12))"}, {"input": "13 12 12 11\n", "output": "(11) - (12) = -1, left: -1, 13, 12\n(13) / (-1) = -13, left: -13, 12\n(12) / (-13) = -12/13, left: -12/13\n(-1) / (13) = -1/13, left: -1/13, 12\n(12) - (-1/13) = 157/13, left: 157/13\n(-1) - (13) = -14, left: -14, 12\n(12) / (-14) = -6/7, left: -6/7\n(13) + (-1) = 12, left: 12, 12\n(12) - (12) = 0, left: 0\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (13 + (11 - 12)))"}, {"input": "13 12 12 11\n", "output": "(11) / (12) = 11/12, left: 11/12, 13, 12\n(11/12) / (13) = 11/156, left: 11/156, 12\n(13) - (11/12) = 145/12, left: 145/12, 12\n(12) / (145/12) = 144/145, left: 144/145\n(12) - (13) = -1, left: -1, 11/12\n(13) - (12) = 1, left: 1, 11/12\n(13) + (12) = 25, left: 25, 11/12\n(11/12) - (25) = -289/12, left: -289/12\n(12) * (11/12) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (12 * (11 / 12)))"}, {"input": "13 12 12 11\n", "output": "(13) / (11) = 13/11, left: 13/11, 12, 12\n(11) / (13) = 11/13, left: 11/13, 12, 12\n(11) - (13) = -2, left: -2, 12, 12\n(-2) / (12) = -1/6, left: -1/6, 12\n(12) + (-1/6) = 71/6, left: 71/6\n(13) - (11) = 2, left: 2, 12, 12\n(12) + (2) = 14, left: 14, 12\n(13) + (11) = 24, left: 24, 12, 12\n(12) - (12) = 0, left: 0, 24\n(24) + (0) = 24, left: 24\nreach 24! expression: ((13 + 11) + (12 - 12))"}, {"input": "2 6 2 11\n", "output": "(2) / (11) = 2/11, left: 2/11, 6, 2\n(2/11) - (2) = -20/11, left: -20/11, 6\n(2/11) / (6) = 1/33, left: 1/33, 2\n(11) - (2) = 9, left: 9, 6, 2\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (11 - 2)))"}, {"input": "2 6 2 11\n", "output": "(6) - (11) = -5, left: -5, 2, 2\n(6) + (11) = 17, left: 17, 2, 2\n(2) - (17) = -15, left: -15, 2\n(6) + (2) = 8, left: 8, 2, 11\n(2) / (6) = 1/3, left: 1/3, 2, 11\n(2) / (11) = 2/11, left: 2/11, 1/3\n(6) / (2) = 3, left: 3, 2, 11\n(2) - (11) = -9, left: -9, 6, 2\n(2) * (-9) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (2 * (2 - 11)))"}, {"input": "2 6 2 11\n", "output": "(2) / (11) = 2/11, left: 2/11, 6, 2\n(2/11) / (6) = 1/33, left: 1/33, 2\n(2) * (2/11) = 4/11, left: 4/11, 6\n(2) / (6) = 1/3, left: 1/3, 2/11\n(2/11) - (1/3) = -5/33, left: -5/33\n(2) + (11) = 13, left: 13, 6, 2\n(6) * (2) = 12, left: 12, 13\n(2) - (11) = -9, left: -9, 6, 2\n(2) * (-9) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (2 * (2 - 11)))"}, {"input": "2 6 2 11\n", "output": "(2) / (11) = 2/11, left: 2/11, 6, 2\n(2) * (2/11) = 4/11, left: 4/11, 6\n(6) / (2) = 3, left: 3, 2/11\n(6) * (2/11) = 12/11, left: 12/11, 2\n(11) - (2) = 9, left: 9, 6, 2\n(6) - (9) = -3, left: -3, 2\n(2) / (9) = 2/9, left: 2/9, 6\n(2) - (9) = -7, left: -7, 6\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (11 - 2)))"}, {"input": "2 6 2 11\n", "output": "(2) / (6) = 1/3, left: 1/3, 2, 11\n(1/3) / (11) = 1/33, left: 1/33, 2\n(2) - (6) = -4, left: -4, 2, 11\n(6) + (2) = 8, left: 8, 2, 11\n(11) * (8) = 88, left: 88, 2\n(6) - (2) = 4, left: 4, 2, 11\n(2) - (11) = -9, left: -9, 2, 6\n(2) / (-9) = -2/9, left: -2/9, 6\n(2) * (-9) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (2 * (2 - 11)))"}, {"input": "2 6 2 11\n", "output": "(6) / (2) = 3, left: 3, 2, 11\n(2) / (6) = 1/3, left: 1/3, 2, 11\n(2) - (1/3) = 5/3, left: 5/3, 11\n(2) / (11) = 2/11, left: 2/11, 2, 6\n(2) * (2/11) = 4/11, left: 4/11, 6\n(2) + (11) = 13, left: 13, 2, 6\n(11) - (2) = 9, left: 9, 2, 6\n(2) - (6) = -4, left: -4, 9\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (11 - 2)))"}, {"input": "2 6 2 11\n", "output": "(2) / (6) = 1/3, left: 1/3, 2, 11\n(1/3) - (11) = -32/3, left: -32/3, 2\n(2) - (6) = -4, left: -4, 2, 11\n(2) * (-4) = -8, left: -8, 11\n(6) * (2) = 12, left: 12, 2, 11\n(2) - (11) = -9, left: -9, 12\n(6) + (2) = 8, left: 8, 2, 11\n(6) - (2) = 4, left: 4, 2, 11\n(6) / (2) = 3, left: 3, 2, 11\n(2) - (11) = -9, left: -9, 2, 6\n(-9) - (6) = -15, left: -15, 2\n(2) - (-15) = 17, left: 17\n(2) * (-9) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (2 * (2 - 11)))"}, {"input": "2 6 2 11\n", "output": "(6) - (2) = 4, left: 4, 2, 11\n(2) - (6) = -4, left: -4, 2, 11\n(2) + (2) = 4, left: 4, 6, 11\n(6) + (11) = 17, left: 17, 4\n(2) - (2) = 0, left: 0, 6, 11\n(6) * (0) = 0, left: 0, 11\n(2) / (2) = 1, left: 1, 6, 11\n(6) + (1) = 7, left: 7, 11\n(2) / (2) = 1, left: 1, 6, 11\n(6) + (1) = 7, left: 7, 11\n(2) / (11) = 2/11, left: 2/11, 2, 6\n(11) - (2) = 9, left: 9, 2, 6\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (11 - 2)))"}, {"input": "10 5 3 13\n", "output": "(13) - (3) = 10, left: 10, 10, 5\n(3) + (13) = 16, left: 16, 10, 5\n(16) / (5) = 16/5, left: 16/5, 10\n(3) * (13) = 39, left: 39, 10, 5\n(10) + (5) = 15, left: 15, 39\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (10 + 5))"}, {"input": "10 5 3 13\n", "output": "(13) - (10) = 3, left: 3, 5, 3\n(3) / (3) = 1, left: 1, 5\n(3) - (3) = 0, left: 0, 5\n(5) - (3) = 2, left: 2, 3\n(5) + (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((13 - 10) * (5 + 3))"}, {"input": "10 5 3 13\n", "output": "(3) * (13) = 39, left: 39, 10, 5\n(39) / (10) = 39/10, left: 39/10, 5\n(5) + (39/10) = 89/10, left: 89/10\n(10) + (39) = 49, left: 49, 5\n(39) - (10) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: (((3 * 13) - 10) - 5)"}, {"input": "10 5 3 13\n", "output": "(3) - (5) = -2, left: -2, 10, 13\n(10) - (-2) = 12, left: 12, 13\n(-2) / (13) = -2/13, left: -2/13, 10\n(5) + (3) = 8, left: 8, 10, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((5 + 3) * (13 - 10))"}, {"input": "10 5 3 13\n", "output": "(10) * (13) = 130, left: 130, 5, 3\n(10) / (13) = 10/13, left: 10/13, 5, 3\n(5) / (10/13) = 13/2, left: 13/2, 3\n(13) - (10) = 3, left: 3, 5, 3\n(5) + (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 + (13 - 10)))"}, {"input": "10 5 3 13\n", "output": "(10) + (13) = 23, left: 23, 5, 3\n(23) - (3) = 20, left: 20, 5\n(5) - (20) = -15, left: -15\n(10) / (13) = 10/13, left: 10/13, 5, 3\n(10/13) - (5) = -55/13, left: -55/13, 3\n(10/13) / (3) = 10/39, left: 10/39, 5\n(3) - (10/13) = 29/13, left: 29/13, 5\n(13) - (10) = 3, left: 3, 5, 3\n(5) + (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 + (13 - 10)))"}, {"input": "10 5 3 13\n", "output": "(3) - (5) = -2, left: -2, 10, 13\n(10) + (13) = 23, left: 23, -2\n(10) + (-2) = 8, left: 8, 13\n(5) * (3) = 15, left: 15, 10, 13\n(5) - (3) = 2, left: 2, 10, 13\n(3) / (5) = 3/5, left: 3/5, 10, 13\n(3/5) / (10) = 3/50, left: 3/50, 13\n(5) + (3) = 8, left: 8, 10, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((5 + 3) * (13 - 10))"}, {"input": "10 5 3 13\n", "output": "(13) - (10) = 3, left: 3, 5, 3\n(3) / (3) = 1, left: 1, 5\n(5) + (1) = 6, left: 6\n(3) + (3) = 6, left: 6, 5\n(6) - (5) = 1, left: 1\n(5) + (6) = 11, left: 11\n(3) * (3) = 9, left: 9, 5\n(5) - (3) = 2, left: 2, 3\n(5) + (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((13 - 10) * (5 + 3))"}, {"input": "10 5 3 13\n", "output": "(13) - (3) = 10, left: 10, 10, 5\n(10) * (10) = 100, left: 100, 5\n(3) + (13) = 16, left: 16, 10, 5\n(5) / (16) = 5/16, left: 5/16, 10\n(5) - (10) = -5, left: -5, 16\n(10) * (5) = 50, left: 50, 16\n(3) * (13) = 39, left: 39, 10, 5\n(5) / (10) = 1/2, left: 1/2, 39\n(10) + (5) = 15, left: 15, 39\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (10 + 5))"}, {"input": "10 5 3 13\n", "output": "(3) * (13) = 39, left: 39, 10, 5\n(39) / (10) = 39/10, left: 39/10, 5\n(10) + (39) = 49, left: 49, 5\n(5) - (49) = -44, left: -44\n(10) - (39) = -29, left: -29, 5\n(-29) - (5) = -34, left: -34\n(39) - (10) = 29, left: 29, 5\n(5) * (29) = 145, left: 145\n(5) + (29) = 34, left: 34\n(29) - (5) = 24, left: 24\nreach 24! expression: (((3 * 13) - 10) - 5)"}, {"input": "5 12 3 2\n", "output": "(5) / (12) = 5/12, left: 5/12, 3, 2\n(3) / (5/12) = 36/5, left: 36/5, 2\n(12) / (5) = 12/5, left: 12/5, 3, 2\n(5) / (2) = 5/2, left: 5/2, 12, 3\n(3) - (5/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(5) - (12) = -7, left: -7, 3, 2\n(12) - (5) = 7, left: 7, 3, 2\n(5) + (12) = 17, left: 17, 3, 2\n(2) / (3) = 2/3, left: 2/3, 17\n(17) / (3) = 17/3, left: 17/3, 2\n(2) - (17/3) = -11/3, left: -11/3\n(5) + (2) = 7, left: 7, 12, 3\n(5) / (2) = 5/2, left: 5/2, 12, 3\n(3) - (5/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(5) - (3) = 2, left: 2, 12, 2\n(3) / (5) = 3/5, left: 3/5, 12, 2\n(5) * (3) = 15, left: 15, 12, 2\n(12) + (3) = 15, left: 15, 5, 2\n(2) * (15) = 30, left: 30, 5\n(3) / (12) = 1/4, left: 1/4, 5, 2\n(2) / (5) = 2/5, left: 2/5, 1/4\n(5) / (2) = 5/2, left: 5/2, 12, 3\n(3) - (5/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(12) * (2) = 24, left: 24, 5, 3\n(2) - (12) = -10, left: -10, 5, 3\n(12) / (2) = 6, left: 6, 5, 3\n(5) * (3) = 15, left: 15, 6\n(5) / (3) = 5/3, left: 5/3, 12, 2\n(2) / (5) = 2/5, left: 2/5, 12, 3\n(5) / (2) = 5/2, left: 5/2, 12, 3\n(12) - (5/2) = 19/2, left: 19/2, 3\n(3) - (5/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(5) / (3) = 5/3, left: 5/3, 12, 2\n(5) * (3) = 15, left: 15, 12, 2\n(5) / (12) = 5/12, left: 5/12, 3, 2\n(12) - (5) = 7, left: 7, 3, 2\n(12) - (3) = 9, left: 9, 5, 2\n(9) / (2) = 9/2, left: 9/2, 5\n(12) + (3) = 15, left: 15, 5, 2\n(5) / (2) = 5/2, left: 5/2, 12, 3\n(3) - (5/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(3) / (5) = 3/5, left: 3/5, 12, 2\n(2) / (5) = 2/5, left: 2/5, 12, 3\n(3) - (2/5) = 13/5, left: 13/5, 12\n(5) + (2) = 7, left: 7, 12, 3\n(7) / (12) = 7/12, left: 7/12, 3\n(5) * (2) = 10, left: 10, 12, 3\n(12) / (10) = 6/5, left: 6/5, 3\n(5) / (2) = 5/2, left: 5/2, 12, 3\n(3) - (5/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(3) - (5) = -2, left: -2, 12, 2\n(12) / (-2) = -6, left: -6, 2\n(2) / (12) = 1/6, left: 1/6, -2\n(5) * (3) = 15, left: 15, 12, 2\n(2) - (12) = -10, left: -10, 15\n(5) - (3) = 2, left: 2, 12, 2\n(5) + (12) = 17, left: 17, 3, 2\n(5) * (12) = 60, left: 60, 3, 2\n(5) - (12) = -7, left: -7, 3, 2\n(5) * (2) = 10, left: 10, 12, 3\n(12) / (10) = 6/5, left: 6/5, 3\n(5) / (2) = 5/2, left: 5/2, 12, 3\n(3) - (5/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(12) + (2) = 14, left: 14, 5, 3\n(12) - (2) = 10, left: 10, 5, 3\n(2) - (12) = -10, left: -10, 5, 3\n(3) - (5) = -2, left: -2, -10\n(5) + (3) = 8, left: 8, 12, 2\n(3) - (5) = -2, left: -2, 12, 2\n(3) / (5) = 3/5, left: 3/5, 12, 2\n(5) * (2) = 10, left: 10, 12, 3\n(12) / (10) = 6/5, left: 6/5, 3\n(5) - (2) = 3, left: 3, 12, 3\n(12) - (3) = 9, left: 9, 3\n(5) / (2) = 5/2, left: 5/2, 12, 3\n(3) - (5/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "1 7 13 9\n", "output": "(1) / (9) = 1/9, left: 1/9, 7, 13\n(13) - (7) = 6, left: 6, 1/9\n(1) - (9) = -8, left: -8, 7, 13\n(7) + (13) = 20, left: 20, -8\n(9) - (1) = 8, left: 8, 7, 13\n(9) / (1) = 9, left: 9, 7, 13\n(9) - (13) = -4, left: -4, 7\n(13) - (9) = 4, left: 4, 1, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((13 - 9) * (7 - 1))"}, {"input": "1 7 13 9\n", "output": "(13) - (9) = 4, left: 4, 1, 7\n(1) + (7) = 8, left: 8, 4\n(4) - (8) = -4, left: -4\n(8) / (4) = 2, left: 2\n(1) - (7) = -6, left: -6, 4\n(-6) - (4) = -10, left: -10\n(7) - (1) = 6, left: 6, 4\n(6) / (4) = 3/2, left: 3/2\n(6) - (4) = 2, left: 2\n(4) * (6) = 24, left: 24\nreach 24! expression: ((13 - 9) * (7 - 1))"}, {"input": "1 7 13 9\n", "output": "(1) - (7) = -6, left: -6, 13, 9\n(13) / (-6) = -13/6, left: -13/6, 9\n(13) - (-6) = 19, left: 19, 9\n(9) * (19) = 171, left: 171\n(9) + (-6) = 3, left: 3, 13\n(13) + (3) = 16, left: 16\n(13) - (9) = 4, left: 4, -6\n(4) / (-6) = -2/3, left: -2/3\n(9) - (13) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((1 - 7) * (9 - 13))"}, {"input": "1 7 13 9\n", "output": "(9) - (1) = 8, left: 8, 7, 13\n(7) - (13) = -6, left: -6, 8\n(1) + (9) = 10, left: 10, 7, 13\n(7) * (13) = 91, left: 91, 10\n(9) / (1) = 9, left: 9, 7, 13\n(9) - (7) = 2, left: 2, 13\n(13) + (9) = 22, left: 22, 1, 7\n(9) - (13) = -4, left: -4, 1, 7\n(1) - (7) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((9 - 13) * (1 - 7))"}, {"input": "1 7 13 9\n", "output": "(7) / (1) = 7, left: 7, 13, 9\n(7) - (9) = -2, left: -2, 13\n(13) - (7) = 6, left: 6, 9\n(6) / (9) = 2/3, left: 2/3\n(13) / (7) = 13/7, left: 13/7, 9\n(13) - (9) = 4, left: 4, 7\n(9) - (13) = -4, left: -4, 7\n(1) - (7) = -6, left: -6, 13, 9\n(9) - (13) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((1 - 7) * (9 - 13))"}, {"input": "6 7 12 2\n", "output": "(7) - (6) = 1, left: 1, 12, 2\n(2) - (12) = -10, left: -10, 1\n(12) + (2) = 14, left: 14, 1\n(14) / (1) = 14, left: 14\n(12) * (2) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((7 - 6) * (12 * 2))"}, {"input": "6 7 12 2\n", "output": "(7) - (6) = 1, left: 1, 12, 2\n(1) - (2) = -1, left: -1, 12\n(12) / (-1) = -12, left: -12\n(12) * (-1) = -12, left: -12\n(12) - (-1) = 13, left: 13\n(-1) - (12) = -13, left: -13\n(2) * (1) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (2 * (7 - 6)))"}, {"input": "6 7 12 2\n", "output": "(7) * (2) = 14, left: 14, 6, 12\n(6) / (12) = 1/2, left: 1/2, 7, 2\n(2) + (1/2) = 5/2, left: 5/2, 7\n(5/2) / (7) = 5/14, left: 5/14\n(6) + (12) = 18, left: 18, 7, 2\n(7) * (18) = 126, left: 126, 2\n(12) / (6) = 2, left: 2, 7, 2\n(7) - (6) = 1, left: 1, 12, 2\n(1) / (12) = 1/12, left: 1/12, 2\n(2) / (1/12) = 24, left: 24\nreach 24! expression: (2 / ((7 - 6) / 12))"}, {"input": "6 7 12 2\n", "output": "(7) - (6) = 1, left: 1, 12, 2\n(2) / (12) = 1/6, left: 1/6, 1\n(1) * (1/6) = 1/6, left: 1/6\n(12) - (2) = 10, left: 10, 1\n(1) - (10) = -9, left: -9\n(2) - (12) = -10, left: -10, 1\n(12) / (2) = 6, left: 6, 1\n(12) + (2) = 14, left: 14, 1\n(12) * (2) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((7 - 6) * (12 * 2))"}, {"input": "6 7 12 2\n", "output": "(7) - (12) = -5, left: -5, 6, 2\n(6) / (12) = 1/2, left: 1/2, 7, 2\n(2) / (7) = 2/7, left: 2/7, 6, 12\n(2) - (7) = -5, left: -5, 6, 12\n(7) * (2) = 14, left: 14, 6, 12\n(6) * (12) = 72, left: 72, 14\n(6) * (7) = 42, left: 42, 12, 2\n(7) - (6) = 1, left: 1, 12, 2\n(12) * (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (12 * (7 - 6)))"}, {"input": "6 7 12 2\n", "output": "(7) + (12) = 19, left: 19, 6, 2\n(19) - (2) = 17, left: 17, 6\n(12) / (7) = 12/7, left: 12/7, 6, 2\n(7) - (12) = -5, left: -5, 6, 2\n(2) / (-5) = -2/5, left: -2/5, 6\n(7) / (12) = 7/12, left: 7/12, 6, 2\n(7) * (12) = 84, left: 84, 6, 2\n(7) - (6) = 1, left: 1, 12, 2\n(12) * (2) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((7 - 6) * (12 * 2))"}, {"input": "6 7 12 2\n", "output": "(7) - (6) = 1, left: 1, 12, 2\n(1) - (2) = -1, left: -1, 12\n(12) / (-1) = -12, left: -12\n(-1) / (12) = -1/12, left: -1/12\n(12) * (-1) = -12, left: -12\n(12) - (-1) = 13, left: 13\n(12) + (-1) = 11, left: 11\n(-1) - (12) = -13, left: -13\n(2) * (1) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (2 * (7 - 6)))"}, {"input": "6 7 12 2\n", "output": "(2) / (7) = 2/7, left: 2/7, 6, 12\n(2) - (7) = -5, left: -5, 6, 12\n(12) / (6) = 2, left: 2, -5\n(6) / (12) = 1/2, left: 1/2, 7, 2\n(6) + (12) = 18, left: 18, 7, 2\n(12) / (6) = 2, left: 2, 7, 2\n(12) - (6) = 6, left: 6, 7, 2\n(6) - (12) = -6, left: -6, 7, 2\n(7) * (2) = 14, left: 14, -6\n(-6) - (14) = -20, left: -20\n(7) / (6) = 7/6, left: 7/6, 12, 2\n(7) - (6) = 1, left: 1, 12, 2\n(1) / (12) = 1/12, left: 1/12, 2\n(2) / (1/12) = 24, left: 24\nreach 24! expression: (2 / ((7 - 6) / 12))"}, {"input": "6 7 12 2\n", "output": "(12) / (7) = 12/7, left: 12/7, 6, 2\n(7) - (12) = -5, left: -5, 6, 2\n(7) * (12) = 84, left: 84, 6, 2\n(7) * (2) = 14, left: 14, 6, 12\n(6) / (12) = 1/2, left: 1/2, 14\n(2) / (7) = 2/7, left: 2/7, 6, 12\n(7) / (2) = 7/2, left: 7/2, 6, 12\n(2) - (7) = -5, left: -5, 6, 12\n(7) + (2) = 9, left: 9, 6, 12\n(6) - (9) = -3, left: -3, 12\n(6) * (7) = 42, left: 42, 12, 2\n(7) - (6) = 1, left: 1, 12, 2\n(12) * (2) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((7 - 6) * (12 * 2))"}, {"input": "6 7 12 2\n", "output": "(7) - (6) = 1, left: 1, 12, 2\n(1) - (2) = -1, left: -1, 12\n(12) / (-1) = -12, left: -12\n(-1) / (12) = -1/12, left: -1/12\n(12) * (-1) = -12, left: -12\n(12) - (-1) = 13, left: 13\n(12) + (-1) = 11, left: 11\n(-1) - (12) = -13, left: -13\n(2) * (1) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (2 * (7 - 6)))"}, {"input": "6 4 9 1\n", "output": "(6) + (4) = 10, left: 10, 9, 1\n(10) - (1) = 9, left: 9, 9\n(6) * (4) = 24, left: 24, 9, 1\n(1) + (24) = 25, left: 25, 9\n(9) * (1) = 9, left: 9, 6, 4\n(1) - (9) = -8, left: -8, 6, 4\n(6) * (4) = 24, left: 24, -8\n(9) - (1) = 8, left: 8, 6, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 - 1) - 4))"}, {"input": "6 4 9 1\n", "output": "(6) + (4) = 10, left: 10, 9, 1\n(9) * (10) = 90, left: 90, 1\n(90) - (1) = 89, left: 89\n(4) / (6) = 2/3, left: 2/3, 9, 1\n(9) / (1) = 9, left: 9, 6, 4\n(6) - (9) = -3, left: -3, 4\n(1) / (9) = 1/9, left: 1/9, 6, 4\n(9) - (1) = 8, left: 8, 6, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 - 1) - 4))"}, {"input": "6 4 9 1\n", "output": "(1) / (6) = 1/6, left: 1/6, 4, 9\n(9) / (4) = 9/4, left: 9/4, 1/6\n(1/6) - (9/4) = -25/12, left: -25/12\n(6) + (1) = 7, left: 7, 4, 9\n(7) / (9) = 7/9, left: 7/9, 4\n(6) / (4) = 3/2, left: 3/2, 9, 1\n(6) + (4) = 10, left: 10, 9, 1\n(9) - (4) = 5, left: 5, 6, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 - 4) - 1))"}, {"input": "6 4 9 1\n", "output": "(6) - (1) = 5, left: 5, 4, 9\n(4) * (9) = 36, left: 36, 5\n(1) - (6) = -5, left: -5, 4, 9\n(-5) - (4) = -9, left: -9, 9\n(-9) / (9) = -1, left: -1\n(1) - (4) = -3, left: -3, 6, 9\n(4) * (1) = 4, left: 4, 6, 9\n(4) + (1) = 5, left: 5, 6, 9\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (4 + 1)))"}, {"input": "6 4 9 1\n", "output": "(9) / (1) = 9, left: 9, 6, 4\n(6) / (9) = 2/3, left: 2/3, 4\n(4) - (2/3) = 10/3, left: 10/3\n(6) / (4) = 3/2, left: 3/2, 9\n(9) * (1) = 9, left: 9, 6, 4\n(6) / (9) = 2/3, left: 2/3, 4\n(4) / (2/3) = 6, left: 6\n(9) - (1) = 8, left: 8, 6, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 - 1) - 4))"}, {"input": "6 4 9 1\n", "output": "(1) - (6) = -5, left: -5, 4, 9\n(1) / (6) = 1/6, left: 1/6, 4, 9\n(4) + (1/6) = 25/6, left: 25/6, 9\n(9) - (25/6) = 29/6, left: 29/6\n(4) / (1) = 4, left: 4, 6, 9\n(9) / (6) = 3/2, left: 3/2, 4\n(4) * (1) = 4, left: 4, 6, 9\n(9) + (4) = 13, left: 13, 6\n(13) - (6) = 7, left: 7\n(4) + (1) = 5, left: 5, 6, 9\n(6) * (9) = 54, left: 54, 5\n(5) * (54) = 270, left: 270\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (4 + 1)))"}, {"input": "6 4 9 1\n", "output": "(4) / (6) = 2/3, left: 2/3, 9, 1\n(6) + (4) = 10, left: 10, 9, 1\n(1) + (10) = 11, left: 11, 9\n(9) / (1) = 9, left: 9, 10\n(10) * (9) = 90, left: 90\n(4) - (6) = -2, left: -2, 9, 1\n(6) - (4) = 2, left: 2, 9, 1\n(2) - (1) = 1, left: 1, 9\n(6) / (4) = 3/2, left: 3/2, 9, 1\n(9) / (1) = 9, left: 9, 6, 4\n(1) - (9) = -8, left: -8, 6, 4\n(9) - (1) = 8, left: 8, 6, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 - 1) - 4))"}, {"input": "6 4 9 1\n", "output": "(6) - (1) = 5, left: 5, 4, 9\n(1) / (6) = 1/6, left: 1/6, 4, 9\n(6) * (1) = 6, left: 6, 4, 9\n(4) - (6) = -2, left: -2, 9\n(1) - (6) = -5, left: -5, 4, 9\n(6) + (1) = 7, left: 7, 4, 9\n(6) / (1) = 6, left: 6, 4, 9\n(6) / (4) = 3/2, left: 3/2, 9, 1\n(6) + (4) = 10, left: 10, 9, 1\n(1) - (10) = -9, left: -9, 9\n(6) - (4) = 2, left: 2, 9, 1\n(9) - (4) = 5, left: 5, 6, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 - 4) - 1))"}, {"input": "6 4 9 1\n", "output": "(6) + (4) = 10, left: 10, 9, 1\n(6) * (4) = 24, left: 24, 9, 1\n(1) * (24) = 24, left: 24, 9\n(4) / (6) = 2/3, left: 2/3, 9, 1\n(4) - (6) = -2, left: -2, 9, 1\n(1) / (9) = 1/9, left: 1/9, -2\n(6) - (4) = 2, left: 2, 9, 1\n(1) - (9) = -8, left: -8, 6, 4\n(1) / (9) = 1/9, left: 1/9, 6, 4\n(1/9) / (6) = 1/54, left: 1/54, 4\n(9) - (1) = 8, left: 8, 6, 4\n(4) - (8) = -4, left: -4, 6\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 - 1) - 4))"}, {"input": "9 4 4 11\n", "output": "(9) / (4) = 9/4, left: 9/4, 4, 11\n(4) / (11) = 4/11, left: 4/11, 9/4\n(9/4) - (4/11) = 83/44, left: 83/44\n(4) - (9) = -5, left: -5, 4, 11\n(11) + (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (4 - 9)))"}, {"input": "9 4 4 11\n", "output": "(4) - (9) = -5, left: -5, 4, 11\n(4) + (11) = 15, left: 15, -5\n(11) / (4) = 11/4, left: 11/4, -5\n(-5) - (11) = -16, left: -16, 4\n(11) + (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (4 - 9)))"}, {"input": "9 4 4 11\n", "output": "(4) * (11) = 44, left: 44, 9, 4\n(44) - (9) = 35, left: 35, 4\n(11) - (4) = 7, left: 7, 9, 4\n(4) / (7) = 4/7, left: 4/7, 9\n(4) - (11) = -7, left: -7, 9, 4\n(-7) / (9) = -7/9, left: -7/9, 4\n(4) + (11) = 15, left: 15, 9, 4\n(4) - (15) = -11, left: -11, 9\n(15) - (9) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((4 + 11) - 9))"}, {"input": "9 4 4 11\n", "output": "(9) * (4) = 36, left: 36, 4, 11\n(11) + (36) = 47, left: 47, 4\n(4) + (11) = 15, left: 15, 36\n(11) - (4) = 7, left: 7, 36\n(9) - (4) = 5, left: 5, 4, 11\n(5) / (4) = 5/4, left: 5/4, 11\n(5) - (11) = -6, left: -6, 4\n(4) / (-6) = -2/3, left: -2/3\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (9 - 4)))"}, {"input": "9 4 4 11\n", "output": "(9) / (4) = 9/4, left: 9/4, 4, 11\n(9) * (4) = 36, left: 36, 4, 11\n(4) / (36) = 1/9, left: 1/9, 11\n(4) - (36) = -32, left: -32, 11\n(11) / (36) = 11/36, left: 11/36, 4\n(4) - (9) = -5, left: -5, 4, 11\n(-5) - (4) = -9, left: -9, 11\n(-5) - (11) = -16, left: -16, 4\n(11) + (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (4 - 9)))"}, {"input": "9 4 4 11\n", "output": "(4) - (4) = 0, left: 0, 9, 11\n(4) / (4) = 1, left: 1, 9, 11\n(11) / (4) = 11/4, left: 11/4, 9, 4\n(4) / (11/4) = 16/11, left: 16/11, 9\n(9) / (16/11) = 99/16, left: 99/16\n(4) / (11) = 4/11, left: 4/11, 9, 4\n(4) + (4/11) = 48/11, left: 48/11, 9\n(4) + (11) = 15, left: 15, 9, 4\n(15) - (9) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((4 + 11) - 9))"}, {"input": "9 4 4 11\n", "output": "(4) - (9) = -5, left: -5, 4, 11\n(-5) - (4) = -9, left: -9, 11\n(-9) / (11) = -9/11, left: -9/11\n(4) * (-5) = -20, left: -20, 11\n(4) / (11) = 4/11, left: 4/11, -5\n(11) / (4) = 11/4, left: 11/4, -5\n(11) * (-5) = -55, left: -55, 4\n(-5) - (11) = -16, left: -16, 4\n(11) + (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (4 - 9)))"}, {"input": "9 4 4 11\n", "output": "(4) * (4) = 16, left: 16, 9, 11\n(4) / (4) = 1, left: 1, 9, 11\n(9) - (1) = 8, left: 8, 11\n(4) / (4) = 1, left: 1, 9, 11\n(4) - (4) = 0, left: 0, 9, 11\n(11) - (4) = 7, left: 7, 9, 4\n(9) - (7) = 2, left: 2, 4\n(7) - (9) = -2, left: -2, 4\n(11) / (4) = 11/4, left: 11/4, 9, 4\n(4) - (11) = -7, left: -7, 9, 4\n(-7) / (9) = -7/9, left: -7/9, 4\n(4) + (11) = 15, left: 15, 9, 4\n(15) - (9) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((4 + 11) - 9))"}, {"input": "2 10 5 10\n", "output": "(10) + (10) = 20, left: 20, 2, 5\n(20) / (5) = 4, left: 4, 2\n(10) - (10) = 0, left: 0, 2, 5\n(2) + (10) = 12, left: 12, 10, 5\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((2 + 10) / (5 / 10))"}, {"input": "2 10 5 10\n", "output": "(10) - (2) = 8, left: 8, 10, 5\n(2) - (10) = -8, left: -8, 10, 5\n(5) / (10) = 1/2, left: 1/2, -8\n(2) + (10) = 12, left: 12, 10, 5\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * ((2 + 10) / 5))"}, {"input": "2 10 5 10\n", "output": "(2) + (10) = 12, left: 12, 10, 5\n(10) - (5) = 5, left: 5, 12\n(12) + (5) = 17, left: 17\n(5) / (12) = 5/12, left: 5/12\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((2 + 10) / (5 / 10))"}, {"input": "2 10 5 10\n", "output": "(10) - (10) = 0, left: 0, 2, 5\n(10) / (10) = 1, left: 1, 2, 5\n(10) / (10) = 1, left: 1, 2, 5\n(2) - (10) = -8, left: -8, 10, 5\n(2) * (10) = 20, left: 20, 10, 5\n(2) / (10) = 1/5, left: 1/5, 10, 5\n(10) * (1/5) = 2, left: 2, 5\n(2) + (10) = 12, left: 12, 10, 5\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((2 + 10) / (5 / 10))"}, {"input": "2 10 5 10\n", "output": "(10) - (2) = 8, left: 8, 10, 5\n(10) + (5) = 15, left: 15, 8\n(8) / (10) = 4/5, left: 4/5, 5\n(5) * (4/5) = 4, left: 4\n(2) - (10) = -8, left: -8, 10, 5\n(5) - (10) = -5, left: -5, -8\n(2) + (10) = 12, left: 12, 10, 5\n(5) - (12) = -7, left: -7, 10\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * ((2 + 10) / 5))"}, {"input": "2 10 5 10\n", "output": "(5) / (2) = 5/2, left: 5/2, 10, 10\n(5/2) - (10) = -15/2, left: -15/2, 10\n(2) - (5) = -3, left: -3, 10, 10\n(10) - (10) = 0, left: 0, -3\n(5) - (2) = 3, left: 3, 10, 10\n(3) / (10) = 3/10, left: 3/10, 10\n(10) - (5) = 5, left: 5, 2, 10\n(5) / (10) = 1/2, left: 1/2, 2, 10\n(2) + (10) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((2 + 10) / (5 / 10))"}, {"input": "2 10 5 10\n", "output": "(2) + (10) = 12, left: 12, 10, 5\n(10) - (5) = 5, left: 5, 12\n(12) * (5) = 60, left: 60\n(12) + (5) = 17, left: 17\n(5) / (12) = 5/12, left: 5/12\n(5) - (12) = -7, left: -7\n(12) / (5) = 12/5, left: 12/5\n(5) / (10) = 1/2, left: 1/2, 12\n(1/2) - (12) = -23/2, left: -23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((2 + 10) / (5 / 10))"}, {"input": "2 10 5 10\n", "output": "(2) + (5) = 7, left: 7, 10, 10\n(10) - (7) = 3, left: 3, 10\n(10) / (10) = 1, left: 1, 7\n(5) / (2) = 5/2, left: 5/2, 10, 10\n(5/2) - (10) = -15/2, left: -15/2, 10\n(10) / (2) = 5, left: 5, 5, 10\n(2) - (10) = -8, left: -8, 5, 10\n(2) + (10) = 12, left: 12, 5, 10\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (2 + 10)) / 5)"}, {"input": "2 10 5 10\n", "output": "(2) + (10) = 12, left: 12, 10, 5\n(10) - (5) = 5, left: 5, 12\n(12) * (5) = 60, left: 60\n(12) + (5) = 17, left: 17\n(5) / (12) = 5/12, left: 5/12\n(5) - (12) = -7, left: -7\n(12) / (5) = 12/5, left: 12/5\n(12) - (5) = 7, left: 7\n(5) / (10) = 1/2, left: 1/2, 12\n(1/2) - (12) = -23/2, left: -23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((2 + 10) / (5 / 10))"}, {"input": "2 10 5 10\n", "output": "(2) + (10) = 12, left: 12, 10, 5\n(10) - (5) = 5, left: 5, 12\n(12) * (5) = 60, left: 60\n(12) + (5) = 17, left: 17\n(5) / (12) = 5/12, left: 5/12\n(5) - (12) = -7, left: -7\n(12) / (5) = 12/5, left: 12/5\n(12) - (5) = 7, left: 7\n(5) / (10) = 1/2, left: 1/2, 12\n(1/2) - (12) = -23/2, left: -23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((2 + 10) / (5 / 10))"}, {"input": "2 4 6 2\n", "output": "(6) * (2) = 12, left: 12, 2, 4\n(2) - (4) = -2, left: -2, 12\n(2) / (4) = 1/2, left: 1/2, 12\n(1/2) - (12) = -23/2, left: -23/2\n(12) * (1/2) = 6, left: 6\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((6 * 2) / (2 / 4))"}, {"input": "2 4 6 2\n", "output": "(2) + (4) = 6, left: 6, 6, 2\n(2) - (6) = -4, left: -4, 6\n(6) / (-4) = -3/2, left: -3/2\n(-4) - (6) = -10, left: -10\n(6) + (2) = 8, left: 8, 6\n(6) / (8) = 3/4, left: 3/4\n(6) * (8) = 48, left: 48\n(8) - (6) = 2, left: 2\n(6) - (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 + 4) * (6 - 2))"}, {"input": "2 4 6 2\n", "output": "(2) + (4) = 6, left: 6, 6, 2\n(2) - (6) = -4, left: -4, 6\n(-4) - (6) = -10, left: -10\n(2) * (6) = 12, left: 12, 6\n(6) + (12) = 18, left: 18\n(6) / (2) = 3, left: 3, 6\n(2) + (6) = 8, left: 8, 6\n(2) / (6) = 1/3, left: 1/3, 6\n(6) - (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((2 + 4) - 2))"}, {"input": "2 4 6 2\n", "output": "(6) - (2) = 4, left: 4, 2, 4\n(4) / (2) = 2, left: 2, 4\n(2) - (4) = -2, left: -2, 4\n(4) - (2) = 2, left: 2, 4\n(2) - (4) = -2, left: -2\n(2) * (4) = 8, left: 8, 4\n(4) * (8) = 32, left: 32\n(8) / (4) = 2, left: 2\n(2) + (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 + (6 - 2)))"}, {"input": "2 4 6 2\n", "output": "(6) * (2) = 12, left: 12, 2, 4\n(2) - (4) = -2, left: -2, 12\n(-2) - (12) = -14, left: -14\n(12) * (-2) = -24, left: -24\n(12) + (-2) = 10, left: 10\n(2) / (4) = 1/2, left: 1/2, 12\n(1/2) - (12) = -23/2, left: -23/2\n(12) + (1/2) = 25/2, left: 25/2\n(12) - (1/2) = 23/2, left: 23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((6 * 2) / (2 / 4))"}, {"input": "2 4 6 2\n", "output": "(2) - (4) = -2, left: -2, 2, 6\n(2) - (-2) = 4, left: 4, 6\n(4) / (6) = 2/3, left: 2/3\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(6) + (4) = 10, left: 10\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 - (2 - 4)))"}, {"input": "2 4 6 2\n", "output": "(2) + (4) = 6, left: 6, 6, 2\n(2) - (6) = -4, left: -4, 6\n(-4) - (6) = -10, left: -10\n(2) * (6) = 12, left: 12, 6\n(6) * (12) = 72, left: 72\n(6) / (2) = 3, left: 3, 6\n(2) + (6) = 8, left: 8, 6\n(8) / (6) = 4/3, left: 4/3\n(6) + (8) = 14, left: 14\n(2) / (6) = 1/3, left: 1/3, 6\n(6) * (1/3) = 2, left: 2\n(6) - (2) = 4, left: 4, 6\n(6) + (4) = 10, left: 10\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((2 + 4) - 2))"}, {"input": "2 4 6 2\n", "output": "(2) - (4) = -2, left: -2, 2, 6\n(2) - (-2) = 4, left: 4, 6\n(4) / (6) = 2/3, left: 2/3\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(6) + (4) = 10, left: 10\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 - (2 - 4)))"}, {"input": "2 4 6 2\n", "output": "(6) - (2) = 4, left: 4, 2, 4\n(4) / (2) = 2, left: 2, 4\n(4) + (2) = 6, left: 6\n(2) - (4) = -2, left: -2, 4\n(-2) - (4) = -6, left: -6\n(-2) / (4) = -1/2, left: -1/2\n(4) - (2) = 2, left: 2, 4\n(2) * (4) = 8, left: 8, 4\n(4) - (8) = -4, left: -4\n(4) * (8) = 32, left: 32\n(8) / (4) = 2, left: 2\n(2) + (4) = 6, left: 6, 4\n(4) / (6) = 2/3, left: 2/3\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 + (6 - 2)))"}, {"input": "2 4 6 2\n", "output": "(2) - (4) = -2, left: -2, 2, 6\n(2) - (-2) = 4, left: 4, 6\n(4) / (6) = 2/3, left: 2/3\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(6) + (4) = 10, left: 10\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 - (2 - 4)))"}, {"input": "2 12 4 12\n", "output": "(12) - (2) = 10, left: 10, 4, 12\n(10) / (12) = 5/6, left: 5/6, 4\n(2) + (12) = 14, left: 14, 4, 12\n(2) * (12) = 24, left: 24, 4, 12\n(4) * (12) = 48, left: 48, 24\n(48) - (24) = 24, left: 24\nreach 24! expression: ((4 * 12) - (2 * 12))"}, {"input": "2 12 4 12\n", "output": "(12) / (12) = 1, left: 1, 2, 4\n(2) + (4) = 6, left: 6, 1\n(12) * (12) = 144, left: 144, 2, 4\n(2) - (144) = -142, left: -142, 4\n(2) + (4) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (2 + 4))"}, {"input": "2 12 4 12\n", "output": "(2) * (4) = 8, left: 8, 12, 12\n(12) - (12) = 0, left: 0, 8\n(12) / (12) = 1, left: 1, 8\n(2) + (4) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((2 + 4) / 12))"}, {"input": "2 12 4 12\n", "output": "(4) / (2) = 2, left: 2, 12, 12\n(12) - (2) = 10, left: 10, 12\n(12) / (10) = 6/5, left: 6/5\n(2) - (4) = -2, left: -2, 12, 12\n(-2) - (12) = -14, left: -14, 12\n(12) / (-2) = -6, left: -6, 12\n(-2) / (12) = -1/6, left: -1/6, 12\n(2) + (4) = 6, left: 6, 12, 12\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (12 / (2 + 4)))"}, {"input": "2 12 4 12\n", "output": "(12) / (12) = 1, left: 1, 2, 4\n(1) / (2) = 1/2, left: 1/2, 4\n(1) / (4) = 1/4, left: 1/4, 2\n(12) * (12) = 144, left: 144, 2, 4\n(4) / (144) = 1/36, left: 1/36, 2\n(2) * (1/36) = 1/18, left: 1/18\n(144) / (4) = 36, left: 36, 2\n(2) + (36) = 38, left: 38\n(2) + (4) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (2 + 4))"}, {"input": "2 12 4 12\n", "output": "(2) / (4) = 1/2, left: 1/2, 12, 12\n(12) * (1/2) = 6, left: 6, 12\n(12) - (1/2) = 23/2, left: 23/2, 12\n(12) - (23/2) = 1/2, left: 1/2\n(12) - (1/2) = 23/2, left: 23/2, 12\n(1/2) - (12) = -23/2, left: -23/2, 12\n(2) * (4) = 8, left: 8, 12, 12\n(2) + (4) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((2 + 4) / 12))"}, {"input": "2 12 4 12\n", "output": "(2) - (4) = -2, left: -2, 12, 12\n(12) - (-2) = 14, left: 14, 12\n(2) / (4) = 1/2, left: 1/2, 12, 12\n(1/2) / (12) = 1/24, left: 1/24, 12\n(4) / (2) = 2, left: 2, 12, 12\n(12) / (2) = 6, left: 6, 12\n(12) * (6) = 72, left: 72\n(2) + (4) = 6, left: 6, 12, 12\n(12) * (12) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (2 + 4))"}, {"input": "2 12 4 12\n", "output": "(12) - (2) = 10, left: 10, 4, 12\n(10) - (12) = -2, left: -2, 4\n(2) / (12) = 1/6, left: 1/6, 4, 12\n(4) - (12) = -8, left: -8, 1/6\n(2) + (12) = 14, left: 14, 4, 12\n(14) / (4) = 7/2, left: 7/2, 12\n(4) * (12) = 48, left: 48, 14\n(2) * (12) = 24, left: 24, 4, 12\n(4) * (12) = 48, left: 48, 24\n(48) - (24) = 24, left: 24\nreach 24! expression: ((4 * 12) - (2 * 12))"}, {"input": "4 3 9 2\n", "output": "(4) / (3) = 4/3, left: 4/3, 9, 2\n(2) * (4/3) = 8/3, left: 8/3, 9\n(9) + (8/3) = 35/3, left: 35/3\n(8/3) - (9) = -19/3, left: -19/3\n(8/3) / (9) = 8/27, left: 8/27\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (2 * (4 / 3)))"}, {"input": "4 3 9 2\n", "output": "(9) / (4) = 9/4, left: 9/4, 3, 2\n(9/4) / (2) = 9/8, left: 9/8, 3\n(9/8) - (3) = -15/8, left: -15/8\n(4) * (9) = 36, left: 36, 3, 2\n(2) / (3) = 2/3, left: 2/3, 36\n(36) * (2/3) = 24, left: 24\nreach 24! expression: ((4 * 9) * (2 / 3))"}, {"input": "4 3 9 2\n", "output": "(4) - (9) = -5, left: -5, 3, 2\n(4) + (9) = 13, left: 13, 3, 2\n(3) / (2) = 3/2, left: 3/2, 13\n(9) - (4) = 5, left: 5, 3, 2\n(2) * (5) = 10, left: 10, 3\n(9) / (4) = 9/4, left: 9/4, 3, 2\n(3) - (2) = 1, left: 1, 9/4\n(4) * (9) = 36, left: 36, 3, 2\n(2) / (3) = 2/3, left: 2/3, 36\n(36) * (2/3) = 24, left: 24\nreach 24! expression: ((4 * 9) * (2 / 3))"}, {"input": "4 3 9 2\n", "output": "(3) + (2) = 5, left: 5, 4, 9\n(3) - (2) = 1, left: 1, 4, 9\n(4) / (1) = 4, left: 4, 9\n(2) - (3) = -1, left: -1, 4, 9\n(4) - (9) = -5, left: -5, -1\n(-1) - (-5) = 4, left: 4\n(4) + (-1) = 3, left: 3, 9\n(2) / (3) = 2/3, left: 2/3, 4, 9\n(4) * (2/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (4 * (2 / 3)))"}, {"input": "4 3 9 2\n", "output": "(4) / (3) = 4/3, left: 4/3, 9, 2\n(2) * (4/3) = 8/3, left: 8/3, 9\n(9) + (8/3) = 35/3, left: 35/3\n(8/3) - (9) = -19/3, left: -19/3\n(8/3) / (9) = 8/27, left: 8/27\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (2 * (4 / 3)))"}, {"input": "4 3 9 2\n", "output": "(9) * (2) = 18, left: 18, 4, 3\n(18) - (4) = 14, left: 14, 3\n(3) * (14) = 42, left: 42\n(4) + (18) = 22, left: 22, 3\n(22) - (3) = 19, left: 19\n(18) / (4) = 9/2, left: 9/2, 3\n(4) / (18) = 2/9, left: 2/9, 3\n(4) - (18) = -14, left: -14, 3\n(4) * (18) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((4 * (9 * 2)) / 3)"}, {"input": "4 3 9 2\n", "output": "(4) * (3) = 12, left: 12, 9, 2\n(9) * (2) = 18, left: 18, 12\n(12) / (18) = 2/3, left: 2/3\n(9) - (12) = -3, left: -3, 2\n(-3) - (2) = -5, left: -5\n(12) - (2) = 10, left: 10, 9\n(3) / (4) = 3/4, left: 3/4, 9, 2\n(3/4) / (9) = 1/12, left: 1/12, 2\n(1/12) - (2) = -23/12, left: -23/12\n(2) / (1/12) = 24, left: 24\nreach 24! expression: (2 / ((3 / 4) / 9))"}, {"input": "4 3 9 2\n", "output": "(3) + (2) = 5, left: 5, 4, 9\n(4) - (5) = -1, left: -1, 9\n(3) - (2) = 1, left: 1, 4, 9\n(9) / (4) = 9/4, left: 9/4, 1\n(1) - (9/4) = -5/4, left: -5/4\n(1) - (9) = -8, left: -8, 4\n(9) * (1) = 9, left: 9, 4\n(2) - (3) = -1, left: -1, 4, 9\n(4) / (-1) = -4, left: -4, 9\n(4) + (-1) = 3, left: 3, 9\n(2) / (3) = 2/3, left: 2/3, 4, 9\n(4) + (2/3) = 14/3, left: 14/3, 9\n(4) * (2/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (4 * (2 / 3)))"}, {"input": "4 3 9 2\n", "output": "(4) / (3) = 4/3, left: 4/3, 9, 2\n(2) * (4/3) = 8/3, left: 8/3, 9\n(9) + (8/3) = 35/3, left: 35/3\n(8/3) - (9) = -19/3, left: -19/3\n(8/3) / (9) = 8/27, left: 8/27\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (2 * (4 / 3)))"}, {"input": "4 3 9 2\n", "output": "(4) / (3) = 4/3, left: 4/3, 9, 2\n(2) * (4/3) = 8/3, left: 8/3, 9\n(9) + (8/3) = 35/3, left: 35/3\n(8/3) - (9) = -19/3, left: -19/3\n(8/3) / (9) = 8/27, left: 8/27\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (2 * (4 / 3)))"}, {"input": "5 7 11 13\n", "output": "(13) - (11) = 2, left: 2, 5, 7\n(2) / (7) = 2/7, left: 2/7, 5\n(2) - (7) = -5, left: -5, 5\n(7) / (2) = 7/2, left: 7/2, 5\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (5 + 7))"}, {"input": "5 7 11 13\n", "output": "(11) / (13) = 11/13, left: 11/13, 5, 7\n(11) + (13) = 24, left: 24, 5, 7\n(13) - (11) = 2, left: 2, 5, 7\n(7) - (5) = 2, left: 2, 2\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (5 + 7))"}, {"input": "5 7 11 13\n", "output": "(5) - (7) = -2, left: -2, 11, 13\n(5) / (7) = 5/7, left: 5/7, 11, 13\n(13) - (5/7) = 86/7, left: 86/7, 11\n(5) + (7) = 12, left: 12, 11, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (13 - 11))"}, {"input": "5 7 11 13\n", "output": "(7) * (11) = 77, left: 77, 5, 13\n(11) + (13) = 24, left: 24, 5, 7\n(5) + (7) = 12, left: 12, 24\n(13) - (11) = 2, left: 2, 5, 7\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (5 + 7))"}, {"input": "5 7 11 13\n", "output": "(7) - (11) = -4, left: -4, 5, 13\n(5) - (13) = -8, left: -8, -4\n(13) / (7) = 13/7, left: 13/7, 5, 11\n(11) / (5) = 11/5, left: 11/5, 13/7\n(7) - (13) = -6, left: -6, 5, 11\n(7) * (13) = 91, left: 91, 5, 11\n(7) + (13) = 20, left: 20, 5, 11\n(13) - (11) = 2, left: 2, 5, 7\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (5 + 7))"}, {"input": "5 7 11 13\n", "output": "(7) / (11) = 7/11, left: 7/11, 5, 13\n(7) + (11) = 18, left: 18, 5, 13\n(5) * (13) = 65, left: 65, 18\n(5) / (18) = 5/18, left: 5/18, 13\n(11) - (7) = 4, left: 4, 5, 13\n(11) / (7) = 11/7, left: 11/7, 5, 13\n(5) - (7) = -2, left: -2, 11, 13\n(5) + (7) = 12, left: 12, 11, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (13 - 11))"}, {"input": "5 7 11 13\n", "output": "(5) * (13) = 65, left: 65, 7, 11\n(13) - (5) = 8, left: 8, 7, 11\n(5) - (13) = -8, left: -8, 7, 11\n(7) / (11) = 7/11, left: 7/11, -8\n(7) + (11) = 18, left: 18, -8\n(-8) * (18) = -144, left: -144\n(5) - (7) = -2, left: -2, 11, 13\n(5) + (7) = 12, left: 12, 11, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (13 - 11))"}, {"input": "5 7 11 13\n", "output": "(11) / (13) = 11/13, left: 11/13, 5, 7\n(7) / (5) = 7/5, left: 7/5, 11/13\n(5) - (7) = -2, left: -2, 11/13\n(5) * (7) = 35, left: 35, 11/13\n(11/13) / (7) = 11/91, left: 11/91, 5\n(11) + (13) = 24, left: 24, 5, 7\n(5) - (7) = -2, left: -2, 24\n(13) - (11) = 2, left: 2, 5, 7\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (5 + 7))"}, {"input": "5 7 11 13\n", "output": "(11) * (13) = 143, left: 143, 5, 7\n(5) * (7) = 35, left: 35, 143\n(35) / (143) = 35/143, left: 35/143\n(143) - (7) = 136, left: 136, 5\n(5) * (143) = 715, left: 715, 7\n(7) + (715) = 722, left: 722\n(13) - (11) = 2, left: 2, 5, 7\n(7) + (2) = 9, left: 9, 5\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (5 + 7))"}, {"input": "6 10 1 12\n", "output": "(10) / (6) = 5/3, left: 5/3, 1, 12\n(1) / (5/3) = 3/5, left: 3/5, 12\n(6) - (10) = -4, left: -4, 1, 12\n(6) - (1) = 5, left: 5, 10, 12\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (6 - 1))"}, {"input": "6 10 1 12\n", "output": "(12) / (10) = 6/5, left: 6/5, 6, 1\n(12) - (10) = 2, left: 2, 6, 1\n(2) / (6) = 1/3, left: 1/3, 1\n(1) + (1/3) = 4/3, left: 4/3\n(6) + (1) = 7, left: 7, 2\n(10) - (12) = -2, left: -2, 6, 1\n(10) / (12) = 5/6, left: 5/6, 6, 1\n(10) * (12) = 120, left: 120, 6, 1\n(6) - (1) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (6 - 1))"}, {"input": "6 10 1 12\n", "output": "(6) + (10) = 16, left: 16, 1, 12\n(1) - (16) = -15, left: -15, 12\n(16) - (12) = 4, left: 4, 1\n(10) - (6) = 4, left: 4, 1, 12\n(6) / (10) = 3/5, left: 3/5, 1, 12\n(6) - (10) = -4, left: -4, 1, 12\n(-4) / (1) = -4, left: -4, 12\n(6) - (1) = 5, left: 5, 10, 12\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (6 - 1))"}, {"input": "6 10 1 12\n", "output": "(1) - (12) = -11, left: -11, 6, 10\n(6) / (10) = 3/5, left: 3/5, 1, 12\n(10) / (6) = 5/3, left: 5/3, 1, 12\n(6) - (10) = -4, left: -4, 1, 12\n(-4) - (1) = -5, left: -5, 12\n(6) + (12) = 18, left: 18, 10, 1\n(6) + (1) = 7, left: 7, 10, 12\n(6) - (1) = 5, left: 5, 10, 12\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 / (6 - 1)))"}, {"input": "6 10 1 12\n", "output": "(6) + (10) = 16, left: 16, 1, 12\n(6) * (10) = 60, left: 60, 1, 12\n(60) - (12) = 48, left: 48, 1\n(1) - (12) = -11, left: -11, 6, 10\n(1) * (12) = 12, left: 12, 6, 10\n(6) + (1) = 7, left: 7, 10, 12\n(7) / (10) = 7/10, left: 7/10, 12\n(6) - (1) = 5, left: 5, 10, 12\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 - 1) / 10))"}, {"input": "6 10 1 12\n", "output": "(10) / (6) = 5/3, left: 5/3, 1, 12\n(10) * (1) = 10, left: 10, 6, 12\n(12) + (10) = 22, left: 22, 6\n(1) / (10) = 1/10, left: 1/10, 6, 12\n(1) - (6) = -5, left: -5, 10, 12\n(12) - (-5) = 17, left: 17, 10\n(6) - (1) = 5, left: 5, 10, 12\n(10) + (12) = 22, left: 22, 5\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (6 - 1))"}, {"input": "6 10 1 12\n", "output": "(1) - (12) = -11, left: -11, 6, 10\n(10) + (-11) = -1, left: -1, 6\n(1) / (12) = 1/12, left: 1/12, 6, 10\n(1) + (12) = 13, left: 13, 6, 10\n(6) * (10) = 60, left: 60, 1, 12\n(6) - (10) = -4, left: -4, 1, 12\n(6) / (12) = 1/2, left: 1/2, 10, 1\n(6) + (12) = 18, left: 18, 10, 1\n(6) - (12) = -6, left: -6, 10, 1\n(-6) - (1) = -7, left: -7, 10\n(6) + (1) = 7, left: 7, 10, 12\n(6) - (1) = 5, left: 5, 10, 12\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 / (6 - 1)))"}, {"input": "2 3 6 3\n", "output": "(3) * (6) = 18, left: 18, 2, 3\n(2) * (3) = 6, left: 6, 18\n(6) / (18) = 1/3, left: 1/3\n(18) - (6) = 12, left: 12\n(6) - (18) = -12, left: -12\n(18) + (6) = 24, left: 24\nreach 24! expression: ((3 * 6) + (2 * 3))"}, {"input": "2 3 6 3\n", "output": "(3) / (2) = 3/2, left: 3/2, 6, 3\n(3) - (6) = -3, left: -3, 3/2\n(3/2) - (3) = -3/2, left: -3/2, 6\n(6) / (3/2) = 4, left: 4, 3\n(6) - (3/2) = 9/2, left: 9/2, 3\n(2) - (3) = -1, left: -1, 6, 3\n(6) * (-1) = -6, left: -6, 3\n(-1) - (3) = -4, left: -4, 6\n(3) - (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (2 - 3)))"}, {"input": "2 3 6 3\n", "output": "(3) - (3) = 0, left: 0, 2, 6\n(6) + (0) = 6, left: 6, 2\n(2) * (6) = 12, left: 12\n(2) * (6) = 12, left: 12, 0\n(2) - (6) = -4, left: -4, 0\n(3) * (3) = 9, left: 9, 2, 6\n(9) - (2) = 7, left: 7, 6\n(7) - (6) = 1, left: 1\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (3 * 3)))"}, {"input": "2 3 6 3\n", "output": "(2) + (6) = 8, left: 8, 3, 3\n(3) - (3) = 0, left: 0, 8\n(0) / (8) = 0, left: 0\n(8) - (3) = 5, left: 5, 3\n(3) * (8) = 24, left: 24, 3\n(6) - (2) = 4, left: 4, 3, 3\n(4) - (3) = 1, left: 1, 3\n(3) + (4) = 7, left: 7, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((6 - 2) * (3 + 3))"}, {"input": "2 3 6 3\n", "output": "(6) - (2) = 4, left: 4, 3, 3\n(4) - (3) = 1, left: 1, 3\n(3) + (1) = 4, left: 4\n(3) - (4) = -1, left: -1, 3\n(3) + (-1) = 2, left: 2\n(-1) / (3) = -1/3, left: -1/3\n(3) * (4) = 12, left: 12, 3\n(3) - (12) = -9, left: -9\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((6 - 2) * (3 + 3))"}, {"input": "2 3 6 3\n", "output": "(3) * (6) = 18, left: 18, 2, 3\n(2) * (3) = 6, left: 6, 18\n(18) / (6) = 3, left: 3\n(6) / (18) = 1/3, left: 1/3\n(18) - (6) = 12, left: 12\n(18) * (6) = 108, left: 108\n(6) - (18) = -12, left: -12\n(18) + (6) = 24, left: 24\nreach 24! expression: ((3 * 6) + (2 * 3))"}, {"input": "2 3 6 3\n", "output": "(3) - (3) = 0, left: 0, 2, 6\n(6) * (0) = 0, left: 0, 2\n(6) - (0) = 6, left: 6, 2\n(2) + (0) = 2, left: 2, 6\n(2) * (0) = 0, left: 0, 6\n(0) - (6) = -6, left: -6\n(0) - (2) = -2, left: -2, 6\n(6) / (2) = 3, left: 3, 0\n(2) - (6) = -4, left: -4, 0\n(2) + (6) = 8, left: 8, 0\n(3) * (3) = 9, left: 9, 2, 6\n(9) - (2) = 7, left: 7, 6\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (2 * (3 * 3)))"}, {"input": "2 3 6 3\n", "output": "(3) * (6) = 18, left: 18, 2, 3\n(2) * (3) = 6, left: 6, 18\n(18) / (6) = 3, left: 3\n(6) / (18) = 1/3, left: 1/3\n(18) - (6) = 12, left: 12\n(18) * (6) = 108, left: 108\n(6) - (18) = -12, left: -12\n(18) + (6) = 24, left: 24\nreach 24! expression: ((3 * 6) + (2 * 3))"}, {"input": "2 3 6 3\n", "output": "(2) + (6) = 8, left: 8, 3, 3\n(3) / (3) = 1, left: 1, 8\n(3) - (3) = 0, left: 0, 8\n(3) + (3) = 6, left: 6, 8\n(8) - (6) = 2, left: 2\n(8) - (3) = 5, left: 5, 3\n(3) * (8) = 24, left: 24, 3\n(6) - (2) = 4, left: 4, 3, 3\n(3) + (4) = 7, left: 7, 3\n(3) / (4) = 3/4, left: 3/4, 3\n(4) - (3) = 1, left: 1, 3\n(1) / (3) = 1/3, left: 1/3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((6 - 2) * (3 + 3))"}, {"input": "2 3 6 3\n", "output": "(3) * (6) = 18, left: 18, 2, 3\n(2) * (3) = 6, left: 6, 18\n(18) / (6) = 3, left: 3\n(6) / (18) = 1/3, left: 1/3\n(18) - (6) = 12, left: 12\n(18) * (6) = 108, left: 108\n(6) - (18) = -12, left: -12\n(18) + (6) = 24, left: 24\nreach 24! expression: ((3 * 6) + (2 * 3))"}, {"input": "3 11 4 1\n", "output": "(3) * (4) = 12, left: 12, 11, 1\n(1) / (12) = 1/12, left: 1/12, 11\n(12) / (1) = 12, left: 12, 11\n(11) * (12) = 132, left: 132\n(1) + (12) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (1 + (3 * 4)))"}, {"input": "3 11 4 1\n", "output": "(11) / (4) = 11/4, left: 11/4, 3, 1\n(11/4) / (1) = 11/4, left: 11/4, 3\n(3) + (1) = 4, left: 4, 11/4\n(4) - (11) = -7, left: -7, 3, 1\n(1) - (-7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 - (4 - 11)))"}, {"input": "3 11 4 1\n", "output": "(1) - (3) = -2, left: -2, 11, 4\n(3) / (1) = 3, left: 3, 11, 4\n(3) / (11) = 3/11, left: 3/11, 4\n(11) / (4) = 11/4, left: 11/4, 3\n(3) - (1) = 2, left: 2, 11, 4\n(3) + (1) = 4, left: 4, 11, 4\n(11) * (4) = 44, left: 44, 4\n(3) - (11) = -8, left: -8, 4, 1\n(1) - (4) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((3 - 11) * (1 - 4))"}, {"input": "3 11 4 1\n", "output": "(11) / (4) = 11/4, left: 11/4, 3, 1\n(3) / (1) = 3, left: 3, 11/4\n(3) + (11/4) = 23/4, left: 23/4, 1\n(11) * (4) = 44, left: 44, 3, 1\n(3) - (44) = -41, left: -41, 1\n(11) - (4) = 7, left: 7, 3, 1\n(3) / (1) = 3, left: 3, 7\n(3) / (7) = 3/7, left: 3/7\n(1) + (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 + (11 - 4)))"}, {"input": "3 11 4 1\n", "output": "(11) / (4) = 11/4, left: 11/4, 3, 1\n(3) * (11/4) = 33/4, left: 33/4, 1\n(33/4) / (1) = 33/4, left: 33/4\n(3) - (11/4) = 1/4, left: 1/4, 1\n(1) + (11/4) = 15/4, left: 15/4, 3\n(3) - (1) = 2, left: 2, 11/4\n(4) - (11) = -7, left: -7, 3, 1\n(-7) - (3) = -10, left: -10, 1\n(1) - (-7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 - (4 - 11)))"}, {"input": "3 11 4 1\n", "output": "(11) + (1) = 12, left: 12, 3, 4\n(4) - (12) = -8, left: -8, 3\n(3) + (-8) = -5, left: -5\n(4) + (12) = 16, left: 16, 3\n(16) / (3) = 16/3, left: 16/3\n(3) / (16) = 3/16, left: 3/16\n(4) / (12) = 1/3, left: 1/3, 3\n(12) - (4) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((11 + 1) - 4))"}, {"input": "3 11 4 1\n", "output": "(3) * (4) = 12, left: 12, 11, 1\n(1) / (12) = 1/12, left: 1/12, 11\n(1) * (12) = 12, left: 12, 11\n(11) + (12) = 23, left: 23\n(12) / (1) = 12, left: 12, 11\n(11) + (12) = 23, left: 23\n(12) - (1) = 11, left: 11, 11\n(11) - (11) = 0, left: 0\n(1) + (12) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (1 + (3 * 4)))"}, {"input": "2 9 13 9\n", "output": "(9) - (9) = 0, left: 0, 2, 13\n(13) - (2) = 11, left: 11, 0\n(2) / (13) = 2/13, left: 2/13, 0\n(9) - (9) = 0, left: 0, 2, 13\n(13) + (0) = 13, left: 13, 2\n(9) / (9) = 1, left: 1, 2, 13\n(2) / (13) = 2/13, left: 2/13, 1\n(2) - (13) = -11, left: -11, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(2) - (13) = -11, left: -11, 9, 9\n(9) - (9) = 0, left: 0, -11\n(13) / (9) = 13/9, left: 13/9, 2, 9\n(2) * (9) = 18, left: 18, 13/9\n(9) * (9) = 81, left: 81, 2, 13\n(81) - (2) = 79, left: 79, 13\n(9) - (9) = 0, left: 0, 2, 13\n(9) / (9) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(2) * (13) = 26, left: 26, 9, 9\n(2) - (13) = -11, left: -11, 9, 9\n(2) / (13) = 2/13, left: 2/13, 9, 9\n(13) / (2) = 13/2, left: 13/2, 9, 9\n(2) + (13) = 15, left: 15, 9, 9\n(2) * (9) = 18, left: 18, 9, 13\n(18) - (13) = 5, left: 5, 9\n(9) / (9) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(13) / (9) = 13/9, left: 13/9, 2, 9\n(13) - (9) = 4, left: 4, 2, 9\n(2) - (9) = -7, left: -7, 13, 9\n(13) + (-7) = 6, left: 6, 9\n(9) - (6) = 3, left: 3\n(2) * (9) = 18, left: 18, 13, 9\n(9) / (9) = 1, left: 1, 2, 13\n(13) / (1) = 13, left: 13, 2\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(13) - (2) = 11, left: 11, 9, 9\n(13) / (9) = 13/9, left: 13/9, 2, 9\n(2) + (9) = 11, left: 11, 13, 9\n(13) / (9) = 13/9, left: 13/9, 2, 9\n(9) / (2) = 9/2, left: 9/2, 13/9\n(9) - (9) = 0, left: 0, 2, 13\n(0) - (2) = -2, left: -2, 13\n(9) / (9) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(13) / (2) = 13/2, left: 13/2, 9, 9\n(2) - (13) = -11, left: -11, 9, 9\n(9) / (-11) = -9/11, left: -9/11, 9\n(2) + (13) = 15, left: 15, 9, 9\n(9) + (15) = 24, left: 24, 9\n(2) + (9) = 11, left: 11, 13, 9\n(9) / (2) = 9/2, left: 9/2, 9, 13\n(13) - (9) = 4, left: 4, 2, 9\n(2) + (4) = 6, left: 6, 9\n(9) - (9) = 0, left: 0, 2, 13\n(9) + (9) = 18, left: 18, 2, 13\n(9) / (9) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(2) * (13) = 26, left: 26, 9, 9\n(9) + (26) = 35, left: 35, 9\n(13) / (2) = 13/2, left: 13/2, 9, 9\n(9) - (9) = 0, left: 0, 13/2\n(2) - (9) = -7, left: -7, 9, 13\n(2) + (9) = 11, left: 11, 9, 13\n(9) * (11) = 99, left: 99, 13\n(9) - (2) = 7, left: 7, 9, 13\n(9) + (7) = 16, left: 16, 13\n(9) * (9) = 81, left: 81, 2, 13\n(9) - (9) = 0, left: 0, 2, 13\n(9) / (9) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "6 7 3 10\n", "output": "(3) / (6) = 1/2, left: 1/2, 7, 10\n(1/2) - (7) = -13/2, left: -13/2, 10\n(10) - (-13/2) = 33/2, left: 33/2\n(7) - (1/2) = 13/2, left: 13/2, 10\n(7) / (1/2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 / (3 / 6)))"}, {"input": "6 7 3 10\n", "output": "(6) / (3) = 2, left: 2, 7, 10\n(10) / (7) = 10/7, left: 10/7, 2\n(2) / (7) = 2/7, left: 2/7, 10\n(10) + (2/7) = 72/7, left: 72/7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (6 / 3)))"}, {"input": "6 7 3 10\n", "output": "(10) / (7) = 10/7, left: 10/7, 6, 3\n(7) * (10) = 70, left: 70, 6, 3\n(7) - (10) = -3, left: -3, 6, 3\n(6) / (3) = 2, left: 2, -3\n(10) / (6) = 5/3, left: 5/3, 7, 3\n(6) / (10) = 3/5, left: 3/5, 7, 3\n(7) - (3) = 4, left: 4, 3/5\n(3) / (7) = 3/7, left: 3/7, 6, 10\n(6) / (3/7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (6 / (3 / 7)))"}, {"input": "6 7 3 10\n", "output": "(3) / (6) = 1/2, left: 1/2, 7, 10\n(10) / (7) = 10/7, left: 10/7, 1/2\n(10) - (7) = 3, left: 3, 1/2\n(1/2) * (3) = 3/2, left: 3/2\n(7) - (1/2) = 13/2, left: 13/2, 10\n(10) + (13/2) = 33/2, left: 33/2\n(10) / (13/2) = 20/13, left: 20/13\n(7) * (1/2) = 7/2, left: 7/2, 10\n(7) / (1/2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 / (3 / 6)))"}, {"input": "6 7 3 10\n", "output": "(7) - (6) = 1, left: 1, 3, 10\n(1) - (10) = -9, left: -9, 3\n(10) / (1) = 10, left: 10, 3\n(10) / (3) = 10/3, left: 10/3\n(6) - (7) = -1, left: -1, 3, 10\n(-1) - (3) = -4, left: -4, 10\n(3) - (-1) = 4, left: 4, 10\n(6) * (7) = 42, left: 42, 3, 10\n(42) / (3) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((6 * 7) / 3))"}, {"input": "6 7 3 10\n", "output": "(10) / (7) = 10/7, left: 10/7, 6, 3\n(7) * (10) = 70, left: 70, 6, 3\n(3) * (70) = 210, left: 210, 6\n(7) + (10) = 17, left: 17, 6, 3\n(6) + (10) = 16, left: 16, 7, 3\n(3) - (7) = -4, left: -4, 16\n(3) / (6) = 1/2, left: 1/2, 7, 10\n(7) * (10) = 70, left: 70, 1/2\n(7) / (1/2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 / (3 / 6)))"}, {"input": "6 7 3 10\n", "output": "(6) / (3) = 2, left: 2, 7, 10\n(10) / (7) = 10/7, left: 10/7, 2\n(7) - (10) = -3, left: -3, 2\n(-3) - (2) = -5, left: -5\n(2) / (7) = 2/7, left: 2/7, 10\n(2/7) - (10) = -68/7, left: -68/7\n(2) - (7) = -5, left: -5, 10\n(7) / (2) = 7/2, left: 7/2, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (6 / 3)))"}, {"input": "6 7 3 10\n", "output": "(3) + (10) = 13, left: 13, 6, 7\n(3) / (10) = 3/10, left: 3/10, 6, 7\n(7) * (3/10) = 21/10, left: 21/10, 6\n(7) - (10) = -3, left: -3, 6, 3\n(3) + (-3) = 0, left: 0, 6\n(10) - (7) = 3, left: 3, 6, 3\n(6) * (10) = 60, left: 60, 7, 3\n(7) * (60) = 420, left: 420, 3\n(6) - (10) = -4, left: -4, 7, 3\n(3) / (-4) = -3/4, left: -3/4, 7\n(7) - (3) = 4, left: 4, 6, 10\n(3) / (7) = 3/7, left: 3/7, 6, 10\n(6) / (3/7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (6 / (3 / 7)))"}, {"input": "3 12 11 2\n", "output": "(3) + (11) = 14, left: 14, 12, 2\n(12) / (2) = 6, left: 6, 14\n(14) / (6) = 7/3, left: 7/3\n(6) - (14) = -8, left: -8\n(12) - (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((3 + 11) + (12 - 2))"}, {"input": "3 12 11 2\n", "output": "(12) + (11) = 23, left: 23, 3, 2\n(23) / (3) = 23/3, left: 23/3, 2\n(2) * (23/3) = 46/3, left: 46/3\n(23) - (3) = 20, left: 20, 2\n(3) + (23) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((3 + (12 + 11)) - 2)"}, {"input": "3 12 11 2\n", "output": "(11) / (12) = 11/12, left: 11/12, 3, 2\n(3) * (11/12) = 11/4, left: 11/4, 2\n(2) * (11/12) = 11/6, left: 11/6, 3\n(12) + (11) = 23, left: 23, 3, 2\n(3) + (23) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((3 + (12 + 11)) - 2)"}, {"input": "3 12 11 2\n", "output": "(3) + (11) = 14, left: 14, 12, 2\n(12) / (2) = 6, left: 6, 14\n(14) / (6) = 7/3, left: 7/3\n(14) + (6) = 20, left: 20\n(6) - (14) = -8, left: -8\n(14) * (6) = 84, left: 84\n(14) - (6) = 8, left: 8\n(6) / (14) = 3/7, left: 3/7\n(12) - (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((3 + 11) + (12 - 2))"}, {"input": "3 12 11 2\n", "output": "(11) / (12) = 11/12, left: 11/12, 3, 2\n(3) + (11/12) = 47/12, left: 47/12, 2\n(2) - (47/12) = -23/12, left: -23/12\n(11/12) - (3) = -25/12, left: -25/12, 2\n(2) * (11/12) = 11/6, left: 11/6, 3\n(12) + (11) = 23, left: 23, 3, 2\n(3) / (23) = 3/23, left: 3/23, 2\n(3) * (23) = 69, left: 69, 2\n(3) + (23) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((3 + (12 + 11)) - 2)"}, {"input": "3 12 11 2\n", "output": "(12) + (11) = 23, left: 23, 3, 2\n(23) / (3) = 23/3, left: 23/3, 2\n(23/3) / (2) = 23/6, left: 23/6\n(3) / (23) = 3/23, left: 3/23, 2\n(23) - (3) = 20, left: 20, 2\n(3) - (23) = -20, left: -20, 2\n(-20) - (2) = -22, left: -22\n(2) * (-20) = -40, left: -40\n(3) + (23) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((3 + (12 + 11)) - 2)"}, {"input": "3 12 11 2\n", "output": "(3) * (2) = 6, left: 6, 12, 11\n(12) * (6) = 72, left: 72, 11\n(11) / (6) = 11/6, left: 11/6, 12\n(3) / (2) = 3/2, left: 3/2, 12, 11\n(3) + (2) = 5, left: 5, 12, 11\n(11) - (12) = -1, left: -1, 5\n(5) * (-1) = -5, left: -5\n(2) - (3) = -1, left: -1, 12, 11\n(12) + (11) = 23, left: 23, -1\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((12 + 11) - (2 - 3))"}, {"input": "3 12 11 2\n", "output": "(3) + (11) = 14, left: 14, 12, 2\n(12) / (2) = 6, left: 6, 14\n(14) / (6) = 7/3, left: 7/3\n(14) + (6) = 20, left: 20\n(6) - (14) = -8, left: -8\n(14) * (6) = 84, left: 84\n(14) - (6) = 8, left: 8\n(6) / (14) = 3/7, left: 3/7\n(12) - (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((3 + 11) + (12 - 2))"}, {"input": "3 12 11 2\n", "output": "(3) + (11) = 14, left: 14, 12, 2\n(12) / (2) = 6, left: 6, 14\n(14) / (6) = 7/3, left: 7/3\n(14) + (6) = 20, left: 20\n(6) - (14) = -8, left: -8\n(14) * (6) = 84, left: 84\n(14) - (6) = 8, left: 8\n(6) / (14) = 3/7, left: 3/7\n(12) - (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((3 + 11) + (12 - 2))"}, {"input": "1 5 12 9\n", "output": "(5) - (1) = 4, left: 4, 12, 9\n(9) + (4) = 13, left: 13, 12\n(13) / (12) = 13/12, left: 13/12\n(9) * (4) = 36, left: 36, 12\n(12) + (36) = 48, left: 48\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (5 - 1)) - 12)"}, {"input": "1 5 12 9\n", "output": "(1) + (12) = 13, left: 13, 5, 9\n(5) / (9) = 5/9, left: 5/9, 13\n(13) / (9) = 13/9, left: 13/9, 5\n(5) / (12) = 5/12, left: 5/12, 1, 9\n(1) + (9) = 10, left: 10, 5/12\n(10) / (5/12) = 24, left: 24\nreach 24! expression: ((1 + 9) / (5 / 12))"}, {"input": "1 5 12 9\n", "output": "(1) / (12) = 1/12, left: 1/12, 5, 9\n(9) * (1/12) = 3/4, left: 3/4, 5\n(12) / (1) = 12, left: 12, 5, 9\n(9) + (12) = 21, left: 21, 5\n(1) + (12) = 13, left: 13, 5, 9\n(1) * (12) = 12, left: 12, 5, 9\n(5) / (9) = 5/9, left: 5/9, 12\n(5) / (12) = 5/12, left: 5/12, 1, 9\n(1) + (9) = 10, left: 10, 5/12\n(10) / (5/12) = 24, left: 24\nreach 24! expression: ((1 + 9) / (5 / 12))"}, {"input": "1 5 12 9\n", "output": "(5) - (9) = -4, left: -4, 1, 12\n(12) - (1) = 11, left: 11, -4\n(9) - (5) = 4, left: 4, 1, 12\n(12) / (1) = 12, left: 12, 4\n(5) / (9) = 5/9, left: 5/9, 1, 12\n(1) * (5/9) = 5/9, left: 5/9, 12\n(5) - (1) = 4, left: 4, 12, 9\n(12) / (9) = 4/3, left: 4/3, 4\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (5 - 1)) - 12)"}, {"input": "1 5 12 9\n", "output": "(12) / (1) = 12, left: 12, 5, 9\n(9) - (12) = -3, left: -3, 5\n(1) - (12) = -11, left: -11, 5, 9\n(5) / (-11) = -5/11, left: -5/11, 9\n(12) - (5) = 7, left: 7, 1, 9\n(1) + (9) = 10, left: 10, 7\n(9) * (7) = 63, left: 63, 1\n(5) / (12) = 5/12, left: 5/12, 1, 9\n(1) + (9) = 10, left: 10, 5/12\n(10) / (5/12) = 24, left: 24\nreach 24! expression: ((1 + 9) / (5 / 12))"}, {"input": "1 5 12 9\n", "output": "(12) - (5) = 7, left: 7, 1, 9\n(7) - (9) = -2, left: -2, 1\n(5) + (12) = 17, left: 17, 1, 9\n(1) + (17) = 18, left: 18, 9\n(5) - (12) = -7, left: -7, 1, 9\n(12) / (5) = 12/5, left: 12/5, 1, 9\n(1) * (9) = 9, left: 9, 12/5\n(9) / (12/5) = 15/4, left: 15/4\n(1) + (9) = 10, left: 10, 12/5\n(12/5) * (10) = 24, left: 24\nreach 24! expression: ((12 / 5) * (1 + 9))"}, {"input": "1 5 12 9\n", "output": "(5) - (1) = 4, left: 4, 12, 9\n(4) - (12) = -8, left: -8, 9\n(12) + (4) = 16, left: 16, 9\n(12) - (4) = 8, left: 8, 9\n(12) / (4) = 3, left: 3, 9\n(4) - (9) = -5, left: -5, 12\n(9) + (4) = 13, left: 13, 12\n(9) - (4) = 5, left: 5, 12\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (5 - 1)) - 12)"}, {"input": "10 11 3 8\n", "output": "(11) - (3) = 8, left: 8, 10, 8\n(11) + (3) = 14, left: 14, 10, 8\n(3) * (8) = 24, left: 24, 10, 11\n(11) / (24) = 11/24, left: 11/24, 10\n(11) - (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (11 - 10))"}, {"input": "10 11 3 8\n", "output": "(11) * (8) = 88, left: 88, 10, 3\n(10) + (3) = 13, left: 13, 88\n(11) + (8) = 19, left: 19, 10, 3\n(3) * (8) = 24, left: 24, 10, 11\n(11) - (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (11 - 10))"}, {"input": "10 11 3 8\n", "output": "(3) / (11) = 3/11, left: 3/11, 10, 8\n(3/11) / (10) = 3/110, left: 3/110, 8\n(11) * (3) = 33, left: 33, 10, 8\n(8) - (10) = -2, left: -2, 33\n(11) + (3) = 14, left: 14, 10, 8\n(10) - (14) = -4, left: -4, 8\n(11) - (3) = 8, left: 8, 10, 8\n(11) - (10) = 1, left: 1, 3, 8\n(3) / (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (3 / (11 - 10)))"}, {"input": "10 11 3 8\n", "output": "(3) / (10) = 3/10, left: 3/10, 11, 8\n(10) - (3) = 7, left: 7, 11, 8\n(7) / (8) = 7/8, left: 7/8, 11\n(11) / (8) = 11/8, left: 11/8, 10, 3\n(8) - (11) = -3, left: -3, 10, 3\n(11) + (8) = 19, left: 19, 10, 3\n(3) + (8) = 11, left: 11, 10, 11\n(3) * (8) = 24, left: 24, 10, 11\n(11) - (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (11 - 10))"}, {"input": "10 11 3 8\n", "output": "(10) / (8) = 5/4, left: 5/4, 11, 3\n(5/4) / (3) = 5/12, left: 5/12, 11\n(10) * (8) = 80, left: 80, 11, 3\n(3) - (80) = -77, left: -77, 11\n(11) - (8) = 3, left: 3, 10, 3\n(3) - (10) = -7, left: -7, 3\n(10) - (3) = 7, left: 7, 3\n(11) - (10) = 1, left: 1, 3, 8\n(3) / (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (3 / (11 - 10)))"}, {"input": "10 11 3 8\n", "output": "(3) - (11) = -8, left: -8, 10, 8\n(11) * (3) = 33, left: 33, 10, 8\n(33) / (10) = 33/10, left: 33/10, 8\n(33/10) - (8) = -47/10, left: -47/10\n(11) / (3) = 11/3, left: 11/3, 10, 8\n(10) / (8) = 5/4, left: 5/4, 11/3\n(11) + (3) = 14, left: 14, 10, 8\n(3) * (8) = 24, left: 24, 10, 11\n(11) - (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (11 - 10))"}, {"input": "10 11 3 8\n", "output": "(10) - (3) = 7, left: 7, 11, 8\n(11) / (8) = 11/8, left: 11/8, 10, 3\n(10) + (8) = 18, left: 18, 11, 3\n(10) - (8) = 2, left: 2, 11, 3\n(11) / (2) = 11/2, left: 11/2, 3\n(3) + (8) = 11, left: 11, 10, 11\n(11) - (10) = 1, left: 1, 11\n(3) * (8) = 24, left: 24, 10, 11\n(11) - (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (11 - 10))"}, {"input": "11 9 5 9\n", "output": "(5) + (9) = 14, left: 14, 11, 9\n(9) / (11) = 9/11, left: 9/11, 14\n(5) / (9) = 5/9, left: 5/9, 11, 9\n(11) * (9) = 99, left: 99, 5/9\n(99) - (5/9) = 886/9, left: 886/9\n(5/9) - (11) = -94/9, left: -94/9, 9\n(5/9) / (9) = 5/81, left: 5/81, 11\n(9) - (5) = 4, left: 4, 11, 9\n(11) + (4) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (11 + (9 - 5)))"}, {"input": "11 9 5 9\n", "output": "(11) * (9) = 99, left: 99, 5, 9\n(9) / (11) = 9/11, left: 9/11, 5, 9\n(11) / (9) = 11/9, left: 11/9, 5, 9\n(5) - (11/9) = 34/9, left: 34/9, 9\n(34/9) / (9) = 34/81, left: 34/81\n(11) - (9) = 2, left: 2, 5, 9\n(11) + (9) = 20, left: 20, 5, 9\n(5) + (20) = 25, left: 25, 9\n(20) - (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((11 + 9) - 5))"}, {"input": "11 9 5 9\n", "output": "(9) / (9) = 1, left: 1, 11, 5\n(11) - (1) = 10, left: 10, 5\n(1) - (11) = -10, left: -10, 5\n(11) + (1) = 12, left: 12, 5\n(5) - (1) = 4, left: 4, 11\n(5) * (1) = 5, left: 5, 11\n(11) * (5) = 55, left: 55\n(9) + (9) = 18, left: 18, 11, 5\n(18) - (5) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((9 + 9) - 5))"}, {"input": "11 9 5 9\n", "output": "(9) / (9) = 1, left: 1, 11, 5\n(1) - (11) = -10, left: -10, 5\n(5) - (-10) = 15, left: 15\n(11) + (1) = 12, left: 12, 5\n(11) - (5) = 6, left: 6, 1\n(6) - (1) = 5, left: 5\n(9) + (9) = 18, left: 18, 11, 5\n(11) - (18) = -7, left: -7, 5\n(11) + (18) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((11 + (9 + 9)) - 5)"}, {"input": "11 9 5 9\n", "output": "(11) * (5) = 55, left: 55, 9, 9\n(9) - (9) = 0, left: 0, 55\n(5) / (11) = 5/11, left: 5/11, 9, 9\n(5/11) - (9) = -94/11, left: -94/11, 9\n(11) / (5) = 11/5, left: 11/5, 9, 9\n(11) + (5) = 16, left: 16, 9, 9\n(16) / (9) = 16/9, left: 16/9, 9\n(11) - (5) = 6, left: 6, 9, 9\n(9) + (6) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (9 + (11 - 5)))"}, {"input": "2 12 4 7\n", "output": "(12) / (2) = 6, left: 6, 4, 7\n(7) * (6) = 42, left: 42, 4\n(7) - (12) = -5, left: -5, 2, 4\n(4) - (-5) = 9, left: 9, 2\n(7) - (4) = 3, left: 3, 2, 12\n(4) - (12) = -8, left: -8, 2, 7\n(2) + (4) = 6, left: 6, 12, 7\n(2) + (7) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (2 + 7)) - 12)"}, {"input": "2 12 4 7\n", "output": "(7) - (4) = 3, left: 3, 2, 12\n(12) - (3) = 9, left: 9, 2\n(4) - (12) = -8, left: -8, 2, 7\n(12) - (4) = 8, left: 8, 2, 7\n(7) / (8) = 7/8, left: 7/8, 2\n(12) - (7) = 5, left: 5, 2, 4\n(7) - (12) = -5, left: -5, 2, 4\n(2) + (7) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (2 + 7)) - 12)"}, {"input": "2 12 4 7\n", "output": "(2) + (12) = 14, left: 14, 4, 7\n(2) - (12) = -10, left: -10, 4, 7\n(7) - (12) = -5, left: -5, 2, 4\n(12) / (7) = 12/7, left: 12/7, 2, 4\n(2) / (4) = 1/2, left: 1/2, 12/7\n(12) * (4) = 48, left: 48, 2, 7\n(2) + (7) = 9, left: 9, 48\n(7) / (2) = 7/2, left: 7/2, 12, 4\n(4) - (7/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (4 - (7 / 2)))"}, {"input": "2 12 4 7\n", "output": "(4) - (2) = 2, left: 2, 12, 7\n(4) / (2) = 2, left: 2, 12, 7\n(2) + (4) = 6, left: 6, 12, 7\n(12) / (6) = 2, left: 2, 7\n(12) * (7) = 84, left: 84, 6\n(4) - (7) = -3, left: -3, 2, 12\n(-3) / (2) = -3/2, left: -3/2, 12\n(7) / (2) = 7/2, left: 7/2, 12, 4\n(4) - (7/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (4 - (7 / 2)))"}, {"input": "2 12 4 7\n", "output": "(12) * (7) = 84, left: 84, 2, 4\n(4) / (84) = 1/21, left: 1/21, 2\n(12) - (7) = 5, left: 5, 2, 4\n(12) + (7) = 19, left: 19, 2, 4\n(19) - (4) = 15, left: 15, 2\n(4) / (12) = 1/3, left: 1/3, 2, 7\n(4) + (7) = 11, left: 11, 2, 12\n(2) + (7) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (2 + 7)) - 12)"}, {"input": "2 12 4 7\n", "output": "(12) * (7) = 84, left: 84, 2, 4\n(4) + (84) = 88, left: 88, 2\n(12) - (7) = 5, left: 5, 2, 4\n(2) * (4) = 8, left: 8, 5\n(7) / (12) = 7/12, left: 7/12, 2, 4\n(4) - (12) = -8, left: -8, 2, 7\n(4) + (7) = 11, left: 11, 2, 12\n(7) / (4) = 7/4, left: 7/4, 2, 12\n(7/4) / (2) = 7/8, left: 7/8, 12\n(4) - (7) = -3, left: -3, 2, 12\n(2) - (12) = -10, left: -10, -3\n(2) + (7) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (2 + 7)) - 12)"}, {"input": "6 2 3 7\n", "output": "(2) / (7) = 2/7, left: 2/7, 6, 3\n(6) + (2/7) = 44/7, left: 44/7, 3\n(3) - (44/7) = -23/7, left: -23/7\n(6) * (2/7) = 12/7, left: 12/7, 3\n(6) / (2/7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (6 / (2 / 7)))"}, {"input": "6 2 3 7\n", "output": "(6) / (7) = 6/7, left: 6/7, 2, 3\n(2) / (3) = 2/3, left: 2/3, 6/7\n(6/7) + (2/3) = 32/21, left: 32/21\n(7) - (6) = 1, left: 1, 2, 3\n(1) - (2) = -1, left: -1, 3\n(7) / (6) = 7/6, left: 7/6, 2, 3\n(7/6) / (3) = 7/18, left: 7/18, 2\n(6) * (7) = 42, left: 42, 2, 3\n(42) / (2) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + ((6 * 7) / 2))"}, {"input": "6 2 3 7\n", "output": "(3) + (7) = 10, left: 10, 6, 2\n(6) + (10) = 16, left: 16, 2\n(3) / (7) = 3/7, left: 3/7, 6, 2\n(2) - (3/7) = 11/7, left: 11/7, 6\n(3) - (7) = -4, left: -4, 6, 2\n(2) - (6) = -4, left: -4, -4\n(6) + (-4) = 2, left: 2, 2\n(3) * (7) = 21, left: 21, 6, 2\n(6) / (2) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((3 * 7) + (6 / 2))"}, {"input": "6 2 3 7\n", "output": "(6) / (3) = 2, left: 2, 2, 7\n(7) / (2) = 7/2, left: 7/2, 2\n(6) * (3) = 18, left: 18, 2, 7\n(2) + (18) = 20, left: 20, 7\n(6) - (3) = 3, left: 3, 2, 7\n(3) / (6) = 1/2, left: 1/2, 2, 7\n(7) / (1/2) = 14, left: 14, 2\n(2) / (7) = 2/7, left: 2/7, 6, 3\n(6) / (2/7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (6 / (2 / 7)))"}, {"input": "6 2 3 7\n", "output": "(2) * (7) = 14, left: 14, 6, 3\n(3) * (14) = 42, left: 42, 6\n(6) + (42) = 48, left: 48\n(3) + (14) = 17, left: 17, 6\n(6) * (17) = 102, left: 102\n(3) - (14) = -11, left: -11, 6\n(6) + (14) = 20, left: 20, 3\n(20) / (3) = 20/3, left: 20/3\n(14) - (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((2 * 7) - 6))"}, {"input": "6 2 3 7\n", "output": "(2) / (7) = 2/7, left: 2/7, 6, 3\n(2/7) / (6) = 1/21, left: 1/21, 3\n(6) + (2/7) = 44/7, left: 44/7, 3\n(3) + (44/7) = 65/7, left: 65/7\n(44/7) / (3) = 44/21, left: 44/21\n(6) * (2/7) = 12/7, left: 12/7, 3\n(6) / (2/7) = 21, left: 21, 3\n(3) * (21) = 63, left: 63\n(3) - (21) = -18, left: -18\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (6 / (2 / 7)))"}, {"input": "6 2 3 7\n", "output": "(6) + (7) = 13, left: 13, 2, 3\n(2) * (3) = 6, left: 6, 13\n(6) - (7) = -1, left: -1, 2, 3\n(6) / (7) = 6/7, left: 6/7, 2, 3\n(3) / (2) = 3/2, left: 3/2, 6/7\n(7) - (6) = 1, left: 1, 2, 3\n(2) - (3) = -1, left: -1, 1\n(-1) / (1) = -1, left: -1\n(2) / (1) = 2, left: 2, 3\n(2) / (3) = 2/3, left: 2/3\n(7) / (6) = 7/6, left: 7/6, 2, 3\n(6) * (7) = 42, left: 42, 2, 3\n(42) / (2) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + ((6 * 7) / 2))"}, {"input": "6 2 3 7\n", "output": "(6) + (3) = 9, left: 9, 2, 7\n(6) / (3) = 2, left: 2, 2, 7\n(2) * (7) = 14, left: 14, 2\n(2) - (14) = -12, left: -12\n(6) * (3) = 18, left: 18, 2, 7\n(6) - (3) = 3, left: 3, 2, 7\n(7) / (3) = 7/3, left: 7/3, 2\n(3) - (6) = -3, left: -3, 2, 7\n(7) / (-3) = -7/3, left: -7/3, 2\n(-3) / (7) = -3/7, left: -3/7, 2\n(2) + (7) = 9, left: 9, -3\n(2) / (7) = 2/7, left: 2/7, 6, 3\n(6) / (2/7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (6 / (2 / 7)))"}, {"input": "2 8 7 8\n", "output": "(7) + (8) = 15, left: 15, 2, 8\n(8) * (15) = 120, left: 120, 2\n(8) + (15) = 23, left: 23, 2\n(2) - (15) = -13, left: -13, 8\n(8) - (-13) = 21, left: 21\n(2) / (15) = 2/15, left: 2/15, 8\n(7) * (8) = 56, left: 56, 2, 8\n(56) / (2) = 28, left: 28, 8\n(56) - (8) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: (((7 * 8) - 8) / 2)"}, {"input": "2 8 7 8\n", "output": "(8) - (8) = 0, left: 0, 2, 7\n(7) - (2) = 5, left: 5, 0\n(8) + (8) = 16, left: 16, 2, 7\n(2) + (7) = 9, left: 9, 8, 8\n(8) - (9) = -1, left: -1, 8\n(2) / (7) = 2/7, left: 2/7, 8, 8\n(2/7) / (8) = 1/28, left: 1/28, 8\n(2) - (7) = -5, left: -5, 8, 8\n(8) + (-5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (8 + (2 - 7)))"}, {"input": "2 8 7 8\n", "output": "(2) + (8) = 10, left: 10, 8, 7\n(8) - (7) = 1, left: 1, 10\n(7) - (8) = -1, left: -1, 10\n(8) + (7) = 15, left: 15, 10\n(15) - (10) = 5, left: 5\n(8) * (7) = 56, left: 56, 10\n(10) / (8) = 5/4, left: 5/4, 7\n(7) + (10) = 17, left: 17, 8\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 + 8) - 7))"}, {"input": "2 8 7 8\n", "output": "(2) + (8) = 10, left: 10, 7, 8\n(10) / (8) = 5/4, left: 5/4, 7\n(7) + (5/4) = 33/4, left: 33/4\n(7) * (5/4) = 35/4, left: 35/4\n(8) * (10) = 80, left: 80, 7\n(7) / (80) = 7/80, left: 7/80\n(8) + (10) = 18, left: 18, 7\n(7) / (18) = 7/18, left: 7/18\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 + 8) - 7))"}, {"input": "2 8 7 8\n", "output": "(2) + (8) = 10, left: 10, 8, 7\n(7) * (10) = 70, left: 70, 8\n(70) - (8) = 62, left: 62\n(10) / (7) = 10/7, left: 10/7, 8\n(8) * (10/7) = 80/7, left: 80/7\n(7) / (10) = 7/10, left: 7/10, 8\n(8) / (7/10) = 80/7, left: 80/7\n(10) - (7) = 3, left: 3, 8\n(8) / (3) = 8/3, left: 8/3\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 + 8) - 7))"}, {"input": "2 8 7 8\n", "output": "(8) * (8) = 64, left: 64, 2, 7\n(8) - (8) = 0, left: 0, 2, 7\n(8) + (8) = 16, left: 16, 2, 7\n(16) - (7) = 9, left: 9, 2\n(7) - (2) = 5, left: 5, 16\n(8) / (8) = 1, left: 1, 2, 7\n(7) * (1) = 7, left: 7, 2\n(1) - (2) = -1, left: -1, 7\n(2) + (7) = 9, left: 9, 8, 8\n(8) - (9) = -1, left: -1, 8\n(2) / (7) = 2/7, left: 2/7, 8, 8\n(2) - (7) = -5, left: -5, 8, 8\n(8) + (-5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (8 + (2 - 7)))"}, {"input": "12 10 11 13\n", "output": "(10) + (11) = 21, left: 21, 12, 13\n(12) - (13) = -1, left: -1, 21\n(10) / (11) = 10/11, left: 10/11, 12, 13\n(11) - (10) = 1, left: 1, 12, 13\n(13) - (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (13 - (11 - 10)))"}, {"input": "12 10 11 13\n", "output": "(11) - (10) = 1, left: 1, 12, 13\n(13) / (12) = 13/12, left: 13/12, 1\n(12) * (13) = 156, left: 156, 1\n(1) + (156) = 157, left: 157\n(12) + (13) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((12 + 13) - (11 - 10))"}, {"input": "12 10 11 13\n", "output": "(10) / (12) = 5/6, left: 5/6, 11, 13\n(12) - (10) = 2, left: 2, 11, 13\n(13) * (2) = 26, left: 26, 11\n(12) + (10) = 22, left: 22, 11, 13\n(11) - (13) = -2, left: -2, 22\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((12 + 10) - (11 - 13))"}, {"input": "12 10 11 13\n", "output": "(13) / (12) = 13/12, left: 13/12, 10, 11\n(13) - (12) = 1, left: 1, 10, 11\n(1) / (11) = 1/11, left: 1/11, 10\n(12) + (13) = 25, left: 25, 10, 11\n(10) + (25) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((10 + (12 + 13)) - 11)"}, {"input": "12 10 11 13\n", "output": "(13) / (11) = 13/11, left: 13/11, 12, 10\n(13/11) / (12) = 13/132, left: 13/132, 10\n(13/11) - (10) = -97/11, left: -97/11, 12\n(11) - (13) = -2, left: -2, 12, 10\n(-2) - (12) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((11 - 13) - 12))"}, {"input": "12 10 11 13\n", "output": "(12) - (13) = -1, left: -1, 10, 11\n(10) - (11) = -1, left: -1, -1\n(13) / (12) = 13/12, left: 13/12, 10, 11\n(13/12) / (11) = 13/132, left: 13/132, 10\n(11) / (10) = 11/10, left: 11/10, 13/12\n(13) - (12) = 1, left: 1, 10, 11\n(10) * (1) = 10, left: 10, 11\n(12) + (13) = 25, left: 25, 10, 11\n(10) + (25) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((10 + (12 + 13)) - 11)"}, {"input": "12 10 11 13\n", "output": "(11) - (10) = 1, left: 1, 12, 13\n(13) / (12) = 13/12, left: 13/12, 1\n(13/12) - (1) = 1/12, left: 1/12\n(12) * (13) = 156, left: 156, 1\n(156) / (1) = 156, left: 156\n(1) + (156) = 157, left: 157\n(12) + (13) = 25, left: 25, 1\n(1) + (25) = 26, left: 26\n(1) / (25) = 1/25, left: 1/25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((12 + 13) - (11 - 10))"}, {"input": "12 10 11 13\n", "output": "(13) / (11) = 13/11, left: 13/11, 12, 10\n(13/11) / (12) = 13/132, left: 13/132, 10\n(12) + (10) = 22, left: 22, 13/11\n(22) / (13/11) = 242/13, left: 242/13\n(10) / (13/11) = 110/13, left: 110/13, 12\n(110/13) / (12) = 55/78, left: 55/78\n(11) - (13) = -2, left: -2, 12, 10\n(12) + (-2) = 10, left: 10, 10\n(-2) - (12) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((11 - 13) - 12))"}, {"input": "12 10 11 13\n", "output": "(12) * (10) = 120, left: 120, 11, 13\n(10) / (12) = 5/6, left: 5/6, 11, 13\n(12) / (10) = 6/5, left: 6/5, 11, 13\n(11) * (13) = 143, left: 143, 6/5\n(13) + (6/5) = 71/5, left: 71/5, 11\n(71/5) - (11) = 16/5, left: 16/5\n(10) - (12) = -2, left: -2, 11, 13\n(12) + (10) = 22, left: 22, 11, 13\n(11) - (13) = -2, left: -2, 22\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((12 + 10) - (11 - 13))"}, {"input": "12 10 11 13\n", "output": "(10) * (11) = 110, left: 110, 12, 13\n(10) + (11) = 21, left: 21, 12, 13\n(21) / (12) = 7/4, left: 7/4, 13\n(12) - (21) = -9, left: -9, 13\n(13) / (12) = 13/12, left: 13/12, 21\n(10) / (11) = 10/11, left: 10/11, 12, 13\n(11) - (10) = 1, left: 1, 12, 13\n(1) / (13) = 1/13, left: 1/13, 12\n(13) - (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (13 - (11 - 10)))"}, {"input": "3 1 2 5\n", "output": "(1) - (3) = -2, left: -2, 2, 5\n(3) / (1) = 3, left: 3, 2, 5\n(3) * (1) = 3, left: 3, 2, 5\n(2) / (5) = 2/5, left: 2/5, 3\n(2/5) - (3) = -13/5, left: -13/5\n(3) + (1) = 4, left: 4, 2, 5\n(2) * (5) = 10, left: 10, 4\n(3) + (5) = 8, left: 8, 1, 2\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((3 + 5) * (1 + 2))"}, {"input": "3 1 2 5\n", "output": "(3) - (1) = 2, left: 2, 2, 5\n(3) / (1) = 3, left: 3, 2, 5\n(5) * (3) = 15, left: 15, 2\n(3) + (1) = 4, left: 4, 2, 5\n(3) / (2) = 3/2, left: 3/2, 1, 5\n(1) + (5) = 6, left: 6, 3/2\n(3/2) / (1) = 3/2, left: 3/2, 5\n(3) * (2) = 6, left: 6, 1, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 * 2) * (5 - 1))"}, {"input": "3 1 2 5\n", "output": "(3) / (2) = 3/2, left: 3/2, 1, 5\n(5) - (1) = 4, left: 4, 3/2\n(3/2) - (5) = -7/2, left: -7/2, 1\n(1) + (3/2) = 5/2, left: 5/2, 5\n(1) / (3/2) = 2/3, left: 2/3, 5\n(2/3) / (5) = 2/15, left: 2/15\n(3) + (2) = 5, left: 5, 1, 5\n(5) / (5) = 1, left: 1, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (3 + 2)) - 1)"}, {"input": "3 1 2 5\n", "output": "(1) / (3) = 1/3, left: 1/3, 2, 5\n(3) * (1) = 3, left: 3, 2, 5\n(5) / (2) = 5/2, left: 5/2, 3\n(3) / (1) = 3, left: 3, 2, 5\n(3) - (1) = 2, left: 2, 2, 5\n(5) + (2) = 7, left: 7, 2\n(1) - (3) = -2, left: -2, 2, 5\n(3) + (5) = 8, left: 8, 1, 2\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((3 + 5) * (1 + 2))"}, {"input": "3 1 2 5\n", "output": "(2) - (5) = -3, left: -3, 3, 1\n(1) - (3) = -2, left: -2, -3\n(-3) * (-2) = 6, left: 6\n(1) + (-3) = -2, left: -2, 3\n(3) * (-3) = -9, left: -9, 1\n(3) / (-3) = -1, left: -1, 1\n(2) + (5) = 7, left: 7, 3, 1\n(7) / (1) = 7, left: 7, 3\n(1) + (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 + (2 + 5)))"}, {"input": "3 1 2 5\n", "output": "(1) / (3) = 1/3, left: 1/3, 2, 5\n(1/3) - (2) = -5/3, left: -5/3, 5\n(1) - (3) = -2, left: -2, 2, 5\n(3) / (1) = 3, left: 3, 2, 5\n(5) * (3) = 15, left: 15, 2\n(3) + (1) = 4, left: 4, 2, 5\n(3) - (1) = 2, left: 2, 2, 5\n(3) * (5) = 15, left: 15, 1, 2\n(3) - (5) = -2, left: -2, 1, 2\n(1) + (-2) = -1, left: -1, 2\n(2) - (1) = 1, left: 1, -2\n(3) + (5) = 8, left: 8, 1, 2\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((3 + 5) * (1 + 2))"}, {"input": "3 1 2 5\n", "output": "(2) - (5) = -3, left: -3, 3, 1\n(1) / (3) = 1/3, left: 1/3, -3\n(1) * (-3) = -3, left: -3, 3\n(3) / (-3) = -1, left: -1\n(-3) / (1) = -3, left: -3, 3\n(-3) / (3) = -1, left: -1\n(3) / (-3) = -1, left: -1, 1\n(3) - (-3) = 6, left: 6, 1\n(3) + (-3) = 0, left: 0, 1\n(2) + (5) = 7, left: 7, 3, 1\n(1) / (7) = 1/7, left: 1/7, 3\n(3) / (1/7) = 21, left: 21\n(1) + (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 + (2 + 5)))"}, {"input": "3 1 2 5\n", "output": "(1) / (3) = 1/3, left: 1/3, 2, 5\n(5) - (2) = 3, left: 3, 1/3\n(3) * (1) = 3, left: 3, 2, 5\n(2) / (5) = 2/5, left: 2/5, 3\n(3) + (1) = 4, left: 4, 2, 5\n(2) / (4) = 1/2, left: 1/2, 5\n(4) / (5) = 4/5, left: 4/5, 2\n(1) - (3) = -2, left: -2, 2, 5\n(-2) / (2) = -1, left: -1, 5\n(5) - (-2) = 7, left: 7, 2\n(5) - (3) = 2, left: 2, 1, 2\n(3) + (5) = 8, left: 8, 1, 2\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((3 + 5) * (1 + 2))"}, {"input": "3 1 2 5\n", "output": "(3) - (1) = 2, left: 2, 2, 5\n(1) / (3) = 1/3, left: 1/3, 2, 5\n(5) * (1/3) = 5/3, left: 5/3, 2\n(2) - (1/3) = 5/3, left: 5/3, 5\n(3) / (1) = 3, left: 3, 2, 5\n(5) / (2) = 5/2, left: 5/2, 3\n(3) - (5/2) = 1/2, left: 1/2\n(3) * (1) = 3, left: 3, 2, 5\n(3) - (2) = 1, left: 1, 5\n(3) / (2) = 3/2, left: 3/2, 1, 5\n(3) * (2) = 6, left: 6, 1, 5\n(5) / (1) = 5, left: 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 * 2) * (5 - 1))"}, {"input": "4 9 7 11\n", "output": "(4) - (9) = -5, left: -5, 7, 11\n(4) * (9) = 36, left: 36, 7, 11\n(7) * (36) = 252, left: 252, 11\n(9) / (4) = 9/4, left: 9/4, 7, 11\n(9) - (4) = 5, left: 5, 7, 11\n(7) / (11) = 7/11, left: 7/11, 5\n(5) - (11) = -6, left: -6, 7\n(-6) - (7) = -13, left: -13\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (9 - 4)) - 11)"}, {"input": "4 9 7 11\n", "output": "(4) * (7) = 28, left: 28, 9, 11\n(11) * (28) = 308, left: 308, 9\n(4) + (7) = 11, left: 11, 9, 11\n(11) - (9) = 2, left: 2, 11\n(7) / (4) = 7/4, left: 7/4, 9, 11\n(4) - (7) = -3, left: -3, 9, 11\n(-3) / (11) = -3/11, left: -3/11, 9\n(7) - (4) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (7 - 4)) - 9)"}, {"input": "4 9 7 11\n", "output": "(9) / (7) = 9/7, left: 9/7, 4, 11\n(7) / (9) = 7/9, left: 7/9, 4, 11\n(11) / (9) = 11/9, left: 11/9, 4, 7\n(4) * (11/9) = 44/9, left: 44/9, 7\n(7) / (44/9) = 63/44, left: 63/44\n(4) - (11) = -7, left: -7, 9, 7\n(7) - (4) = 3, left: 3, 9, 11\n(11) - (3) = 8, left: 8, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (7 - 4)) - 9)"}, {"input": "4 9 7 11\n", "output": "(7) + (11) = 18, left: 18, 4, 9\n(7) - (11) = -4, left: -4, 4, 9\n(9) - (11) = -2, left: -2, 4, 7\n(4) + (-2) = 2, left: 2, 7\n(11) / (9) = 11/9, left: 11/9, 4, 7\n(4) * (11/9) = 44/9, left: 44/9, 7\n(4) / (7) = 4/7, left: 4/7, 9, 11\n(7) - (4) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (7 - 4)) - 9)"}, {"input": "4 9 7 11\n", "output": "(9) - (4) = 5, left: 5, 7, 11\n(7) - (5) = 2, left: 2, 11\n(5) - (7) = -2, left: -2, 11\n(7) + (5) = 12, left: 12, 11\n(11) / (12) = 11/12, left: 11/12\n(11) * (12) = 132, left: 132\n(7) / (5) = 7/5, left: 7/5, 11\n(7/5) / (11) = 7/55, left: 7/55\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (9 - 4)) - 11)"}, {"input": "4 9 7 11\n", "output": "(7) + (11) = 18, left: 18, 4, 9\n(7) * (11) = 77, left: 77, 4, 9\n(77) / (9) = 77/9, left: 77/9, 4\n(11) - (9) = 2, left: 2, 4, 7\n(7) - (4) = 3, left: 3, 2\n(11) / (9) = 11/9, left: 11/9, 4, 7\n(9) + (11) = 20, left: 20, 4, 7\n(4) / (20) = 1/5, left: 1/5, 7\n(4) * (7) = 28, left: 28, 9, 11\n(4) + (7) = 11, left: 11, 9, 11\n(11) - (9) = 2, left: 2, 11\n(7) - (4) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (7 - 4)) - 9)"}, {"input": "3 12 13 7\n", "output": "(3) * (12) = 36, left: 36, 13, 7\n(36) / (7) = 36/7, left: 36/7, 13\n(13) - (36/7) = 55/7, left: 55/7\n(3) / (12) = 1/4, left: 1/4, 13, 7\n(13) - (7) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((13 - 7) / (3 / 12))"}, {"input": "3 12 13 7\n", "output": "(7) / (12) = 7/12, left: 7/12, 3, 13\n(13) - (3) = 10, left: 10, 7/12\n(3) / (7/12) = 36/7, left: 36/7, 13\n(7) - (12) = -5, left: -5, 3, 13\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (7 - 12)))"}, {"input": "3 12 13 7\n", "output": "(13) * (7) = 91, left: 91, 3, 12\n(3) / (91) = 3/91, left: 3/91, 12\n(13) / (7) = 13/7, left: 13/7, 3, 12\n(13) + (7) = 20, left: 20, 3, 12\n(12) / (3) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((13 + 7) + (12 / 3))"}, {"input": "3 12 13 7\n", "output": "(7) / (13) = 7/13, left: 7/13, 3, 12\n(7) - (13) = -6, left: -6, 3, 12\n(13) * (7) = 91, left: 91, 3, 12\n(3) - (12) = -9, left: -9, 91\n(13) / (7) = 13/7, left: 13/7, 3, 12\n(3) * (13/7) = 39/7, left: 39/7, 12\n(3) + (12) = 15, left: 15, 13/7\n(13) + (7) = 20, left: 20, 3, 12\n(12) / (3) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((13 + 7) + (12 / 3))"}, {"input": "3 12 13 7\n", "output": "(7) / (12) = 7/12, left: 7/12, 3, 13\n(13) * (7/12) = 91/12, left: 91/12, 3\n(13) + (7/12) = 163/12, left: 163/12, 3\n(3) + (13) = 16, left: 16, 7/12\n(7) - (12) = -5, left: -5, 3, 13\n(-5) - (13) = -18, left: -18, 3\n(13) * (-5) = -65, left: -65, 3\n(-65) / (3) = -65/3, left: -65/3\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (7 - 12)))"}, {"input": "3 12 13 7\n", "output": "(3) - (12) = -9, left: -9, 13, 7\n(-9) / (7) = -9/7, left: -9/7, 13\n(3) * (12) = 36, left: 36, 13, 7\n(13) * (7) = 91, left: 91, 36\n(36) / (91) = 36/91, left: 36/91\n(7) / (36) = 7/36, left: 7/36, 13\n(3) / (12) = 1/4, left: 1/4, 13, 7\n(13) * (7) = 91, left: 91, 1/4\n(13) - (7) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((13 - 7) / (3 / 12))"}, {"input": "3 12 13 7\n", "output": "(3) + (7) = 10, left: 10, 12, 13\n(13) * (10) = 130, left: 130, 12\n(3) - (7) = -4, left: -4, 12, 13\n(13) / (12) = 13/12, left: 13/12, -4\n(13) * (7) = 91, left: 91, 3, 12\n(91) - (3) = 88, left: 88, 12\n(7) / (13) = 7/13, left: 7/13, 3, 12\n(13) - (7) = 6, left: 6, 3, 12\n(3) / (6) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (3 / (13 - 7)))"}, {"input": "3 12 13 7\n", "output": "(12) + (13) = 25, left: 25, 3, 7\n(25) - (3) = 22, left: 22, 7\n(25) - (7) = 18, left: 18, 3\n(18) - (3) = 15, left: 15\n(12) - (13) = -1, left: -1, 3, 7\n(3) + (7) = 10, left: 10, -1\n(10) / (-1) = -10, left: -10\n(3) * (7) = 21, left: 21, -1\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (12 - 13)))"}, {"input": "10 10 5 1\n", "output": "(10) - (5) = 5, left: 5, 10, 1\n(1) - (5) = -4, left: -4, 10\n(5) / (10) = 1/2, left: 1/2, 10, 1\n(10) * (1) = 10, left: 10, 1/2\n(10) / (1/2) = 20, left: 20\n(10) * (5) = 50, left: 50, 10, 1\n(10) * (50) = 500, left: 500, 1\n(10) + (5) = 15, left: 15, 10, 1\n(1) - (10) = -9, left: -9, 15\n(15) - (-9) = 24, left: 24\nreach 24! expression: ((10 + 5) - (1 - 10))"}, {"input": "10 10 5 1\n", "output": "(10) * (1) = 10, left: 10, 10, 5\n(10) / (5) = 2, left: 2, 10\n(10) * (10) = 100, left: 100, 5\n(10) + (10) = 20, left: 20, 5\n(5) * (10) = 50, left: 50, 10\n(10) / (50) = 1/5, left: 1/5\n(1) - (10) = -9, left: -9, 10, 5\n(-9) / (10) = -9/10, left: -9/10, 5\n(10) - (-9) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (10 - (1 - 10)))"}, {"input": "10 10 5 1\n", "output": "(10) / (10) = 1, left: 1, 5, 1\n(10) - (10) = 0, left: 0, 5, 1\n(1) - (0) = 1, left: 1, 5\n(5) * (0) = 0, left: 0, 1\n(10) - (10) = 0, left: 0, 5, 1\n(5) - (0) = 5, left: 5, 1\n(10) * (10) = 100, left: 100, 5, 1\n(10) + (10) = 20, left: 20, 5, 1\n(20) - (1) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((10 + 10) - 1))"}, {"input": "10 10 5 1\n", "output": "(5) / (1) = 5, left: 5, 10, 10\n(5) / (10) = 1/2, left: 1/2, 10\n(5) + (1) = 6, left: 6, 10, 10\n(10) * (6) = 60, left: 60, 10\n(1) / (5) = 1/5, left: 1/5, 10, 10\n(10) + (1/5) = 51/5, left: 51/5, 10\n(10) * (51/5) = 102, left: 102\n(5) - (1) = 4, left: 4, 10, 10\n(10) + (4) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (10 + (5 - 1)))"}, {"input": "10 10 5 1\n", "output": "(5) / (10) = 1/2, left: 1/2, 10, 1\n(10) / (5) = 2, left: 2, 10, 1\n(1) / (2) = 1/2, left: 1/2, 10\n(10) * (2) = 20, left: 20, 1\n(5) - (10) = -5, left: -5, 10, 1\n(1) / (-5) = -1/5, left: -1/5, 10\n(10) / (-1/5) = -50, left: -50\n(10) + (5) = 15, left: 15, 10, 1\n(15) - (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((10 + 5) - 1))"}, {"input": "13 12 11 13\n", "output": "(13) + (12) = 25, left: 25, 11, 13\n(13) + (25) = 38, left: 38, 11\n(13) * (25) = 325, left: 325, 11\n(12) - (13) = -1, left: -1, 11, 13\n(13) * (-1) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (13 * (12 - 13)))"}, {"input": "13 12 11 13\n", "output": "(13) / (13) = 1, left: 1, 12, 11\n(12) - (1) = 11, left: 11, 11\n(11) * (11) = 121, left: 121\n(11) - (11) = 0, left: 0\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (13 / 13)))"}, {"input": "13 12 11 13\n", "output": "(11) + (13) = 24, left: 24, 13, 12\n(24) / (13) = 24/13, left: 24/13, 12\n(13) * (24) = 312, left: 312, 12\n(13) + (24) = 37, left: 37, 12\n(13) - (12) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((11 + 13) * (13 - 12))"}, {"input": "13 12 11 13\n", "output": "(12) + (13) = 25, left: 25, 13, 11\n(11) / (13) = 11/13, left: 11/13, 25\n(12) / (13) = 12/13, left: 12/13, 13, 11\n(13) - (12) = 1, left: 1, 13, 11\n(13) * (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 * (13 - 12)))"}, {"input": "13 12 11 13\n", "output": "(13) / (11) = 13/11, left: 13/11, 13, 12\n(12) - (13) = -1, left: -1, 13/11\n(13) - (11) = 2, left: 2, 13, 12\n(11) + (13) = 24, left: 24, 13, 12\n(13) - (12) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((11 + 13) * (13 - 12))"}, {"input": "13 12 11 13\n", "output": "(11) - (13) = -2, left: -2, 13, 12\n(13) / (11) = 13/11, left: 13/11, 13, 12\n(13) - (11) = 2, left: 2, 13, 12\n(2) / (13) = 2/13, left: 2/13, 12\n(11) + (13) = 24, left: 24, 13, 12\n(12) + (24) = 36, left: 36, 13\n(13) / (12) = 13/12, left: 13/12, 24\n(24) * (13/12) = 26, left: 26\n(13) - (12) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((11 + 13) * (13 - 12))"}, {"input": "13 12 11 13\n", "output": "(12) + (13) = 25, left: 25, 13, 11\n(13) - (11) = 2, left: 2, 25\n(25) / (13) = 25/13, left: 25/13, 11\n(13) / (25) = 13/25, left: 13/25, 11\n(12) / (13) = 12/13, left: 12/13, 13, 11\n(13) + (12/13) = 181/13, left: 181/13, 11\n(11) / (181/13) = 143/181, left: 143/181\n(13) - (12) = 1, left: 1, 13, 11\n(13) * (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 * (13 - 12)))"}, {"input": "13 12 11 13\n", "output": "(13) / (13) = 1, left: 1, 12, 11\n(12) - (1) = 11, left: 11, 11\n(11) - (11) = 0, left: 0\n(11) - (11) = 0, left: 0\n(11) + (11) = 22, left: 22\n(11) / (11) = 1, left: 1\n(12) + (1) = 13, left: 13, 11\n(13) / (11) = 13/11, left: 13/11\n(11) / (13) = 11/13, left: 11/13\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (13 / 13)))"}, {"input": "13 12 11 13\n", "output": "(13) + (12) = 25, left: 25, 11, 13\n(11) / (13) = 11/13, left: 11/13, 25\n(11) + (25) = 36, left: 36, 13\n(13) - (36) = -23, left: -23\n(13) * (25) = 325, left: 325, 11\n(25) / (13) = 25/13, left: 25/13, 11\n(11) * (25/13) = 275/13, left: 275/13\n(12) - (13) = -1, left: -1, 11, 13\n(13) * (-1) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (13 * (12 - 13)))"}, {"input": "13 12 11 13\n", "output": "(11) + (13) = 24, left: 24, 13, 12\n(24) / (13) = 24/13, left: 24/13, 12\n(13) * (24) = 312, left: 312, 12\n(12) + (312) = 324, left: 324\n(24) - (13) = 11, left: 11, 12\n(12) + (11) = 23, left: 23\n(13) / (24) = 13/24, left: 13/24, 12\n(12) - (13/24) = 275/24, left: 275/24\n(13) - (12) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((11 + 13) * (13 - 12))"}, {"input": "12 3 6 5\n", "output": "(12) + (6) = 18, left: 18, 3, 5\n(3) - (18) = -15, left: -15, 5\n(5) / (3) = 5/3, left: 5/3, 18\n(12) * (6) = 72, left: 72, 3, 5\n(6) - (12) = -6, left: -6, 3, 5\n(3) + (5) = 8, left: 8, -6\n(3) / (5) = 3/5, left: 3/5, -6\n(3) + (5) = 8, left: 8, 12, 6\n(8) - (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 + 5) - 6))"}, {"input": "12 3 6 5\n", "output": "(6) - (3) = 3, left: 3, 12, 5\n(5) / (3) = 5/3, left: 5/3, 12\n(12) / (5/3) = 36/5, left: 36/5\n(5/3) - (12) = -31/3, left: -31/3\n(5/3) / (12) = 5/36, left: 5/36\n(12) * (5/3) = 20, left: 20\n(3) - (5) = -2, left: -2, 12\n(5) + (3) = 8, left: 8, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (6 - 3)))"}, {"input": "12 3 6 5\n", "output": "(3) + (5) = 8, left: 8, 12, 6\n(12) - (6) = 6, left: 6, 8\n(12) / (6) = 2, left: 2, 8\n(8) + (2) = 10, left: 10\n(6) / (12) = 1/2, left: 1/2, 8\n(12) / (8) = 3/2, left: 3/2, 6\n(6) + (3/2) = 15/2, left: 15/2\n(8) - (12) = -4, left: -4, 6\n(12) - (8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (12 - (3 + 5)))"}, {"input": "12 3 6 5\n", "output": "(12) + (5) = 17, left: 17, 3, 6\n(17) - (6) = 11, left: 11, 3\n(17) / (3) = 17/3, left: 17/3, 6\n(3) - (6) = -3, left: -3, 17\n(12) * (5) = 60, left: 60, 3, 6\n(6) / (3) = 2, left: 2, 60\n(60) / (3) = 20, left: 20, 6\n(12) - (5) = 7, left: 7, 3, 6\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((12 - 5) - 3))"}, {"input": "12 3 6 5\n", "output": "(12) * (5) = 60, left: 60, 3, 6\n(3) * (60) = 180, left: 180, 6\n(5) / (12) = 5/12, left: 5/12, 3, 6\n(6) - (5/12) = 67/12, left: 67/12, 3\n(12) / (5) = 12/5, left: 12/5, 3, 6\n(12/5) - (6) = -18/5, left: -18/5, 3\n(12) - (5) = 7, left: 7, 3, 6\n(6) + (7) = 13, left: 13, 3\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((12 - 5) - 3))"}, {"input": "12 3 6 5\n", "output": "(12) + (6) = 18, left: 18, 3, 5\n(18) / (3) = 6, left: 6, 5\n(12) / (6) = 2, left: 2, 3, 5\n(12) * (6) = 72, left: 72, 3, 5\n(3) * (72) = 216, left: 216, 5\n(12) - (6) = 6, left: 6, 3, 5\n(3) * (6) = 18, left: 18, 5\n(3) * (5) = 15, left: 15, 6\n(6) / (12) = 1/2, left: 1/2, 3, 5\n(3) / (5) = 3/5, left: 3/5, 1/2\n(3) * (5) = 15, left: 15, 12, 6\n(3) + (5) = 8, left: 8, 12, 6\n(8) - (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 + 5) - 6))"}, {"input": "6 5 13 9\n", "output": "(5) + (9) = 14, left: 14, 6, 13\n(13) / (14) = 13/14, left: 13/14, 6\n(6) * (13/14) = 39/7, left: 39/7\n(9) - (6) = 3, left: 3, 5, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((9 - 6) * (13 - 5))"}, {"input": "6 5 13 9\n", "output": "(5) - (13) = -8, left: -8, 6, 9\n(9) / (-8) = -9/8, left: -9/8, 6\n(-9/8) / (6) = -3/16, left: -3/16\n(6) - (-9/8) = 57/8, left: 57/8\n(6) - (9) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (6 - 9))"}, {"input": "6 5 13 9\n", "output": "(5) - (9) = -4, left: -4, 6, 13\n(6) + (13) = 19, left: 19, -4\n(5) * (9) = 45, left: 45, 6, 13\n(9) / (5) = 9/5, left: 9/5, 6, 13\n(6) * (9/5) = 54/5, left: 54/5, 13\n(13) / (9/5) = 65/9, left: 65/9, 6\n(5) + (9) = 14, left: 14, 6, 13\n(9) - (6) = 3, left: 3, 5, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((9 - 6) * (13 - 5))"}, {"input": "6 5 13 9\n", "output": "(5) / (6) = 5/6, left: 5/6, 13, 9\n(13) - (9) = 4, left: 4, 5/6\n(6) * (5) = 30, left: 30, 13, 9\n(9) / (30) = 3/10, left: 3/10, 13\n(6) / (5) = 6/5, left: 6/5, 13, 9\n(9) + (6/5) = 51/5, left: 51/5, 13\n(51/5) - (13) = -14/5, left: -14/5\n(6) - (9) = -3, left: -3, 5, 13\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((6 - 9) * (5 - 13))"}, {"input": "6 5 13 9\n", "output": "(5) - (13) = -8, left: -8, 6, 9\n(9) * (-8) = -72, left: -72, 6\n(-8) - (9) = -17, left: -17, 6\n(6) + (-17) = -11, left: -11\n(-8) - (6) = -14, left: -14, 9\n(6) + (-8) = -2, left: -2, 9\n(-8) / (6) = -4/3, left: -4/3, 9\n(9) * (-4/3) = -12, left: -12\n(6) - (9) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (6 - 9))"}, {"input": "6 5 13 9\n", "output": "(6) / (5) = 6/5, left: 6/5, 13, 9\n(6) - (5) = 1, left: 1, 13, 9\n(13) * (9) = 117, left: 117, 1\n(5) - (6) = -1, left: -1, 13, 9\n(6) + (5) = 11, left: 11, 13, 9\n(6) * (5) = 30, left: 30, 13, 9\n(9) - (30) = -21, left: -21, 13\n(5) - (13) = -8, left: -8, 6, 9\n(6) - (9) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (6 - 9))"}, {"input": "6 5 13 9\n", "output": "(5) + (9) = 14, left: 14, 6, 13\n(13) + (9) = 22, left: 22, 6, 5\n(6) * (5) = 30, left: 30, 22\n(9) - (13) = -4, left: -4, 6, 5\n(6) - (5) = 1, left: 1, -4\n(6) + (13) = 19, left: 19, 5, 9\n(9) / (5) = 9/5, left: 9/5, 19\n(13) - (5) = 8, left: 8, 6, 9\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((13 - 5) * (9 - 6))"}, {"input": "6 13 7 5\n", "output": "(6) / (5) = 6/5, left: 6/5, 13, 7\n(6/5) / (13) = 6/65, left: 6/65, 7\n(7) * (6/65) = 42/65, left: 42/65\n(13) + (7) = 20, left: 20, 6/5\n(6/5) + (20) = 106/5, left: 106/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((6 / 5) * (13 + 7))"}, {"input": "6 13 7 5\n", "output": "(7) - (6) = 1, left: 1, 13, 5\n(6) / (7) = 6/7, left: 6/7, 13, 5\n(5) - (13) = -8, left: -8, 6/7\n(13) - (5) = 8, left: 8, 6/7\n(8) / (6/7) = 28/3, left: 28/3\n(5) / (13) = 5/13, left: 5/13, 6/7\n(13) - (6/7) = 85/7, left: 85/7, 5\n(6) * (7) = 42, left: 42, 13, 5\n(42) - (5) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: (((6 * 7) - 5) - 13)"}, {"input": "6 13 7 5\n", "output": "(13) / (7) = 13/7, left: 13/7, 6, 5\n(7) / (13) = 7/13, left: 7/13, 6, 5\n(6) + (5) = 11, left: 11, 7/13\n(7/13) * (11) = 77/13, left: 77/13\n(5) / (6) = 5/6, left: 5/6, 7/13\n(7/13) + (5/6) = 107/78, left: 107/78\n(5) + (7/13) = 72/13, left: 72/13, 6\n(7) - (13) = -6, left: -6, 6, 5\n(6) * (5) = 30, left: 30, -6\n(-6) + (30) = 24, left: 24\nreach 24! expression: ((7 - 13) + (6 * 5))"}, {"input": "6 13 7 5\n", "output": "(6) / (5) = 6/5, left: 6/5, 13, 7\n(13) - (6/5) = 59/5, left: 59/5, 7\n(6/5) / (13) = 6/65, left: 6/65, 7\n(7) + (6/65) = 461/65, left: 461/65\n(7) - (6/5) = 29/5, left: 29/5, 13\n(13) * (7) = 91, left: 91, 6/5\n(7) - (13) = -6, left: -6, 6/5\n(-6) / (6/5) = -5, left: -5\n(13) + (7) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((6 / 5) * (13 + 7))"}, {"input": "6 13 7 5\n", "output": "(7) - (5) = 2, left: 2, 6, 13\n(7) + (5) = 12, left: 12, 6, 13\n(13) - (12) = 1, left: 1, 6\n(6) * (1) = 6, left: 6\n(6) + (13) = 19, left: 19, 12\n(12) * (19) = 228, left: 228\n(5) - (7) = -2, left: -2, 6, 13\n(6) * (7) = 42, left: 42, 13, 5\n(13) + (5) = 18, left: 18, 42\n(42) - (18) = 24, left: 24\nreach 24! expression: ((6 * 7) - (13 + 5))"}, {"input": "6 13 7 5\n", "output": "(6) * (13) = 78, left: 78, 7, 5\n(7) - (78) = -71, left: -71, 5\n(7) + (78) = 85, left: 85, 5\n(13) - (6) = 7, left: 7, 7, 5\n(13) / (6) = 13/6, left: 13/6, 7, 5\n(6) + (7) = 13, left: 13, 13, 5\n(7) / (6) = 7/6, left: 7/6, 13, 5\n(6) * (7) = 42, left: 42, 13, 5\n(13) + (5) = 18, left: 18, 42\n(42) - (18) = 24, left: 24\nreach 24! expression: ((6 * 7) - (13 + 5))"}, {"input": "6 13 7 5\n", "output": "(5) / (7) = 5/7, left: 5/7, 6, 13\n(7) - (5) = 2, left: 2, 6, 13\n(7) + (5) = 12, left: 12, 6, 13\n(12) / (6) = 2, left: 2, 13\n(7) / (5) = 7/5, left: 7/5, 6, 13\n(7) / (6) = 7/6, left: 7/6, 13, 5\n(13) + (7/6) = 85/6, left: 85/6, 5\n(7) - (6) = 1, left: 1, 13, 5\n(6) + (7) = 13, left: 13, 13, 5\n(13) / (5) = 13/5, left: 13/5, 13\n(6) / (7) = 6/7, left: 6/7, 13, 5\n(6) * (7) = 42, left: 42, 13, 5\n(13) + (5) = 18, left: 18, 42\n(42) - (18) = 24, left: 24\nreach 24! expression: ((6 * 7) - (13 + 5))"}, {"input": "10 1 4 6\n", "output": "(10) / (1) = 10, left: 10, 4, 6\n(1) / (10) = 1/10, left: 1/10, 4, 6\n(10) * (1) = 10, left: 10, 4, 6\n(6) / (4) = 3/2, left: 3/2, 10\n(1) - (4) = -3, left: -3, 10, 6\n(4) / (1) = 4, left: 4, 10, 6\n(4) - (10) = -6, left: -6, 6\n(4) - (1) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(10) * (1) = 10, left: 10, 4, 6\n(1) / (10) = 1/10, left: 1/10, 4, 6\n(1/10) - (6) = -59/10, left: -59/10, 4\n(1) * (4) = 4, left: 4, 10, 6\n(1) - (4) = -3, left: -3, 10, 6\n(4) / (1) = 4, left: 4, 10, 6\n(6) - (10) = -4, left: -4, 4\n(4) - (1) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(1) * (4) = 4, left: 4, 10, 6\n(10) / (6) = 5/3, left: 5/3, 4\n(1) / (4) = 1/4, left: 1/4, 10, 6\n(1) - (4) = -3, left: -3, 10, 6\n(-3) / (10) = -3/10, left: -3/10, 6\n(10) / (-3) = -10/3, left: -10/3, 6\n(10) + (6) = 16, left: 16, -3\n(4) - (1) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(6) - (4) = 2, left: 2, 10, 1\n(4) + (6) = 10, left: 10, 10, 1\n(10) + (10) = 20, left: 20, 1\n(10) * (4) = 40, left: 40, 1, 6\n(10) + (1) = 11, left: 11, 4, 6\n(10) * (1) = 10, left: 10, 4, 6\n(10) - (6) = 4, left: 4, 4\n(4) - (1) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(1) * (6) = 6, left: 6, 10, 4\n(1) / (10) = 1/10, left: 1/10, 4, 6\n(4) - (1/10) = 39/10, left: 39/10, 6\n(6) / (39/10) = 20/13, left: 20/13\n(10) / (4) = 5/2, left: 5/2, 1, 6\n(10) + (4) = 14, left: 14, 1, 6\n(1) - (14) = -13, left: -13, 6\n(4) - (1) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(1) + (6) = 7, left: 7, 10, 4\n(4) + (7) = 11, left: 11, 10\n(6) / (1) = 6, left: 6, 10, 4\n(4) + (6) = 10, left: 10, 10, 1\n(1) - (10) = -9, left: -9, 10\n(10) - (1) = 9, left: 9, 4, 6\n(10) + (1) = 11, left: 11, 4, 6\n(1) / (10) = 1/10, left: 1/10, 4, 6\n(1) / (4) = 1/4, left: 1/4, 10, 6\n(10) - (1/4) = 39/4, left: 39/4, 6\n(1) - (4) = -3, left: -3, 10, 6\n(4) - (1) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(10) / (6) = 5/3, left: 5/3, 1, 4\n(6) / (10) = 3/5, left: 3/5, 1, 4\n(1) / (3/5) = 5/3, left: 5/3, 4\n(1) - (6) = -5, left: -5, 10, 4\n(10) - (-5) = 15, left: 15, 4\n(4) + (-5) = -1, left: -1, 10\n(1) / (6) = 1/6, left: 1/6, 10, 4\n(6) / (1) = 6, left: 6, 10, 4\n(10) - (1) = 9, left: 9, 4, 6\n(10) + (4) = 14, left: 14, 1, 6\n(14) / (6) = 7/3, left: 7/3, 1\n(4) - (1) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(1) - (10) = -9, left: -9, 4, 6\n(10) + (1) = 11, left: 11, 4, 6\n(10) / (1) = 10, left: 10, 4, 6\n(4) * (6) = 24, left: 24, 10\n(4) + (6) = 10, left: 10, 10\n(10) * (1) = 10, left: 10, 4, 6\n(1) - (4) = -3, left: -3, 10, 6\n(6) - (10) = -4, left: -4, -3\n(1) / (4) = 1/4, left: 1/4, 10, 6\n(1/4) - (10) = -39/4, left: -39/4, 6\n(1) * (4) = 4, left: 4, 10, 6\n(4) - (1) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(6) / (4) = 3/2, left: 3/2, 10, 1\n(10) * (1) = 10, left: 10, 3/2\n(10) / (4) = 5/2, left: 5/2, 1, 6\n(5/2) / (1) = 5/2, left: 5/2, 6\n(4) - (10) = -6, left: -6, 1, 6\n(10) + (4) = 14, left: 14, 1, 6\n(10) - (6) = 4, left: 4, 1, 4\n(1) - (4) = -3, left: -3, 4\n(10) - (1) = 9, left: 9, 4, 6\n(10) * (1) = 10, left: 10, 4, 6\n(6) + (10) = 16, left: 16, 4\n(4) - (1) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "12 8 8 2\n", "output": "(12) - (2) = 10, left: 10, 8, 8\n(8) - (8) = 0, left: 0, 10\n(10) - (8) = 2, left: 2, 8\n(2) - (8) = -6, left: -6\n(8) - (10) = -2, left: -2, 8\n(8) * (-2) = -16, left: -16\n(10) - (8) = 2, left: 2, 8\n(12) * (2) = 24, left: 24, 8, 8\n(24) / (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 * 2) / 8))"}, {"input": "12 8 8 2\n", "output": "(8) - (8) = 0, left: 0, 12, 2\n(2) - (0) = 2, left: 2, 12\n(12) + (2) = 14, left: 14\n(2) - (12) = -10, left: -10\n(2) / (12) = 1/6, left: 1/6\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (2 - (8 - 8)))"}, {"input": "12 8 8 2\n", "output": "(12) - (2) = 10, left: 10, 8, 8\n(10) - (8) = 2, left: 2, 8\n(8) * (8) = 64, left: 64, 10\n(12) / (2) = 6, left: 6, 8, 8\n(12) + (2) = 14, left: 14, 8, 8\n(2) / (12) = 1/6, left: 1/6, 8, 8\n(8) / (1/6) = 48, left: 48, 8\n(12) * (2) = 24, left: 24, 8, 8\n(8) - (8) = 0, left: 0, 24\n(24) - (0) = 24, left: 24\nreach 24! expression: ((12 * 2) - (8 - 8))"}, {"input": "12 8 8 2\n", "output": "(8) - (8) = 0, left: 0, 12, 2\n(2) - (0) = 2, left: 2, 12\n(12) + (2) = 14, left: 14\n(2) - (12) = -10, left: -10\n(2) / (12) = 1/6, left: 1/6\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (2 - (8 - 8)))"}, {"input": "12 8 8 2\n", "output": "(8) - (8) = 0, left: 0, 12, 2\n(2) - (0) = 2, left: 2, 12\n(12) + (2) = 14, left: 14\n(2) - (12) = -10, left: -10\n(2) / (12) = 1/6, left: 1/6\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (2 - (8 - 8)))"}, {"input": "4 1 12 5\n", "output": "(5) - (1) = 4, left: 4, 4, 12\n(12) + (4) = 16, left: 16, 4\n(12) - (4) = 8, left: 8, 4\n(1) * (5) = 5, left: 5, 4, 12\n(4) * (12) = 48, left: 48, 5\n(5) - (12) = -7, left: -7, 4\n(5) / (12) = 5/12, left: 5/12, 4\n(1) + (5) = 6, left: 6, 4, 12\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((1 + 5) - 4))"}, {"input": "4 1 12 5\n", "output": "(5) - (4) = 1, left: 1, 1, 12\n(12) - (1) = 11, left: 11, 1\n(11) / (1) = 11, left: 11\n(12) / (1) = 12, left: 12, 1\n(12) - (1) = 11, left: 11\n(12) - (1) = 11, left: 11, 1\n(1) / (1) = 1, left: 1, 12\n(1) - (1) = 0, left: 0, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (5 - 4)))"}, {"input": "4 1 12 5\n", "output": "(4) + (5) = 9, left: 9, 1, 12\n(1) / (12) = 1/12, left: 1/12, 9\n(9) / (12) = 3/4, left: 3/4, 1\n(12) + (9) = 21, left: 21, 1\n(12) - (9) = 3, left: 3, 1\n(1) + (3) = 4, left: 4\n(1) - (9) = -8, left: -8, 12\n(5) - (4) = 1, left: 1, 1, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (5 - 4)))"}, {"input": "4 1 12 5\n", "output": "(4) + (1) = 5, left: 5, 12, 5\n(12) * (5) = 60, left: 60, 5\n(12) + (5) = 17, left: 17, 5\n(1) / (4) = 1/4, left: 1/4, 12, 5\n(12) * (1/4) = 3, left: 3, 5\n(1/4) / (12) = 1/48, left: 1/48, 5\n(12) + (1/4) = 49/4, left: 49/4, 5\n(4) - (1) = 3, left: 3, 12, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (4 - 1)))"}, {"input": "4 1 12 5\n", "output": "(4) + (5) = 9, left: 9, 1, 12\n(1) * (12) = 12, left: 12, 9\n(1) * (9) = 9, left: 9, 12\n(1) - (9) = -8, left: -8, 12\n(12) * (9) = 108, left: 108, 1\n(108) / (1) = 108, left: 108\n(12) + (9) = 21, left: 21, 1\n(5) - (4) = 1, left: 1, 1, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (5 - 4)))"}, {"input": "5 1 9 2\n", "output": "(9) / (1) = 9, left: 9, 5, 2\n(9) - (5) = 4, left: 4, 2\n(2) + (4) = 6, left: 6\n(1) * (9) = 9, left: 9, 5, 2\n(1) + (9) = 10, left: 10, 5, 2\n(10) / (5) = 2, left: 2, 2\n(1) - (9) = -8, left: -8, 5, 2\n(5) * (2) = 10, left: 10, -8\n(2) - (5) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (2 - 5))"}, {"input": "5 1 9 2\n", "output": "(5) - (9) = -4, left: -4, 1, 2\n(1) - (2) = -1, left: -1, -4\n(9) - (5) = 4, left: 4, 1, 2\n(2) + (4) = 6, left: 6, 1\n(5) + (9) = 14, left: 14, 1, 2\n(5) * (9) = 45, left: 45, 1, 2\n(5) / (9) = 5/9, left: 5/9, 1, 2\n(2) - (5) = -3, left: -3, 1, 9\n(1) - (9) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((2 - 5) * (1 - 9))"}, {"input": "5 1 9 2\n", "output": "(1) * (2) = 2, left: 2, 5, 9\n(5) / (2) = 5/2, left: 5/2, 9\n(5/2) / (9) = 5/18, left: 5/18\n(1) / (2) = 1/2, left: 1/2, 5, 9\n(5) - (9) = -4, left: -4, 1/2\n(1/2) - (-4) = 9/2, left: 9/2\n(2) / (1) = 2, left: 2, 5, 9\n(1) + (2) = 3, left: 3, 5, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (1 + 2)))"}, {"input": "5 1 9 2\n", "output": "(9) / (1) = 9, left: 9, 5, 2\n(5) + (2) = 7, left: 7, 9\n(7) / (9) = 7/9, left: 7/9\n(1) * (9) = 9, left: 9, 5, 2\n(2) - (9) = -7, left: -7, 5\n(1) / (9) = 1/9, left: 1/9, 5, 2\n(2) - (1/9) = 17/9, left: 17/9, 5\n(9) - (1) = 8, left: 8, 5, 2\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((9 - 1) * (5 - 2))"}, {"input": "5 1 9 2\n", "output": "(1) / (9) = 1/9, left: 1/9, 5, 2\n(2) - (1/9) = 17/9, left: 17/9, 5\n(2) / (1/9) = 18, left: 18, 5\n(5) + (2) = 7, left: 7, 1/9\n(5) / (2) = 5/2, left: 5/2, 1/9\n(5) - (1/9) = 44/9, left: 44/9, 2\n(2) * (44/9) = 88/9, left: 88/9\n(9) - (1) = 8, left: 8, 5, 2\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((9 - 1) * (5 - 2))"}, {"input": "5 1 9 2\n", "output": "(5) - (9) = -4, left: -4, 1, 2\n(1) * (-4) = -4, left: -4, 2\n(9) - (5) = 4, left: 4, 1, 2\n(2) / (4) = 1/2, left: 1/2, 1\n(5) + (9) = 14, left: 14, 1, 2\n(5) * (9) = 45, left: 45, 1, 2\n(2) / (1) = 2, left: 2, 45\n(5) / (9) = 5/9, left: 5/9, 1, 2\n(2) / (1) = 2, left: 2, 5/9\n(2) - (5/9) = 13/9, left: 13/9, 1\n(9) / (5) = 9/5, left: 9/5, 1, 2\n(2) - (5) = -3, left: -3, 1, 9\n(1) - (9) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((2 - 5) * (1 - 9))"}, {"input": "5 1 9 2\n", "output": "(9) / (1) = 9, left: 9, 5, 2\n(9) - (2) = 7, left: 7, 5\n(1) * (9) = 9, left: 9, 5, 2\n(9) / (5) = 9/5, left: 9/5, 2\n(9) - (5) = 4, left: 4, 2\n(1) + (9) = 10, left: 10, 5, 2\n(2) - (5) = -3, left: -3, 10\n(5) * (10) = 50, left: 50, 2\n(1) - (9) = -8, left: -8, 5, 2\n(5) * (2) = 10, left: 10, -8\n(5) + (2) = 7, left: 7, -8\n(-8) + (7) = -1, left: -1\n(2) - (5) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (2 - 5))"}, {"input": "5 1 9 2\n", "output": "(1) * (2) = 2, left: 2, 5, 9\n(9) - (2) = 7, left: 7, 5\n(1) / (2) = 1/2, left: 1/2, 5, 9\n(1) - (2) = -1, left: -1, 5, 9\n(5) - (-1) = 6, left: 6, 9\n(2) / (1) = 2, left: 2, 5, 9\n(2) - (5) = -3, left: -3, 9\n(-3) / (9) = -1/3, left: -1/3\n(2) - (1) = 1, left: 1, 5, 9\n(5) - (1) = 4, left: 4, 9\n(9) + (1) = 10, left: 10, 5\n(1) + (2) = 3, left: 3, 5, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (1 + 2)))"}, {"input": "10 4 4 2\n", "output": "(10) / (4) = 5/2, left: 5/2, 4, 2\n(4) / (5/2) = 8/5, left: 8/5, 2\n(4) * (2) = 8, left: 8, 5/2\n(10) + (4) = 14, left: 14, 4, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (10 + 4)) - 4)"}, {"input": "10 4 4 2\n", "output": "(4) + (2) = 6, left: 6, 10, 4\n(10) + (6) = 16, left: 16, 4\n(10) - (6) = 4, left: 4, 4\n(4) * (4) = 16, left: 16\n(2) - (4) = -2, left: -2, 10, 4\n(-2) - (4) = -6, left: -6, 10\n(4) * (-2) = -8, left: -8, 10\n(10) - (4) = 6, left: 6, -2\n(10) * (-2) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (10 * (2 - 4)))"}, {"input": "10 4 4 2\n", "output": "(10) / (4) = 5/2, left: 5/2, 4, 2\n(2) - (5/2) = -1/2, left: -1/2, 4\n(-1/2) / (4) = -1/8, left: -1/8\n(5/2) / (4) = 5/8, left: 5/8, 2\n(4) / (5/2) = 8/5, left: 8/5, 2\n(10) * (4) = 40, left: 40, 4, 2\n(2) - (4) = -2, left: -2, 40\n(40) - (2) = 38, left: 38, 4\n(40) / (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((10 * 4) / 2))"}, {"input": "10 4 4 2\n", "output": "(10) * (2) = 20, left: 20, 4, 4\n(4) * (20) = 80, left: 80, 4\n(4) / (4) = 1, left: 1, 20\n(4) / (4) = 1, left: 1, 20\n(4) / (20) = 1/5, left: 1/5, 4\n(1/5) - (4) = -19/5, left: -19/5\n(20) / (4) = 5, left: 5, 4\n(2) / (10) = 1/5, left: 1/5, 4, 4\n(4) / (1/5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 / (2 / 10)))"}, {"input": "10 4 4 2\n", "output": "(4) / (4) = 1, left: 1, 10, 2\n(10) * (1) = 10, left: 10, 2\n(10) / (2) = 5, left: 5\n(4) / (4) = 1, left: 1, 10, 2\n(4) + (4) = 8, left: 8, 10, 2\n(8) / (10) = 4/5, left: 4/5, 2\n(2) + (4/5) = 14/5, left: 14/5\n(4) * (4) = 16, left: 16, 10, 2\n(2) - (16) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 - (4 * 4)))"}, {"input": "10 4 4 2\n", "output": "(10) / (4) = 5/2, left: 5/2, 4, 2\n(5/2) - (4) = -3/2, left: -3/2, 2\n(4) - (5/2) = 3/2, left: 3/2, 2\n(3/2) - (2) = -1/2, left: -1/2\n(4) / (5/2) = 8/5, left: 8/5, 2\n(8/5) - (2) = -2/5, left: -2/5\n(2) - (4) = -2, left: -2, 5/2\n(10) + (4) = 14, left: 14, 4, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (10 + 4)) - 4)"}, {"input": "7 3 3 4\n", "output": "(7) - (3) = 4, left: 4, 3, 4\n(4) * (4) = 16, left: 16, 3\n(3) + (16) = 19, left: 19\n(4) - (4) = 0, left: 0, 3\n(3) * (0) = 0, left: 0\n(4) / (4) = 1, left: 1, 3\n(4) - (4) = 0, left: 0, 3\n(3) - (0) = 3, left: 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (7 - 3)))"}, {"input": "7 3 3 4\n", "output": "(4) / (3) = 4/3, left: 4/3, 7, 3\n(3) + (4/3) = 13/3, left: 13/3, 7\n(7) - (13/3) = 8/3, left: 8/3\n(7) - (4/3) = 17/3, left: 17/3, 3\n(3) * (4) = 12, left: 12, 7, 3\n(3) / (4) = 3/4, left: 3/4, 7, 3\n(3) / (7) = 3/7, left: 3/7, 3/4\n(3) - (4) = -1, left: -1, 7, 3\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (3 - 4)))"}, {"input": "7 3 3 4\n", "output": "(3) / (3) = 1, left: 1, 7, 4\n(1) / (4) = 1/4, left: 1/4, 7\n(7) - (1/4) = 27/4, left: 27/4\n(4) - (1) = 3, left: 3, 7\n(3) - (7) = -4, left: -4\n(7) / (1) = 7, left: 7, 4\n(1) - (7) = -6, left: -6, 4\n(4) / (-6) = -2/3, left: -2/3\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (3 / 3)))"}, {"input": "7 3 3 4\n", "output": "(7) / (3) = 7/3, left: 7/3, 3, 4\n(3) / (7) = 3/7, left: 3/7, 3, 4\n(3) / (4) = 3/4, left: 3/4, 3/7\n(7) + (3) = 10, left: 10, 3, 4\n(10) - (4) = 6, left: 6, 3\n(4) * (10) = 40, left: 40, 3\n(10) - (3) = 7, left: 7, 4\n(7) - (3) = 4, left: 4, 3, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (7 - 3)))"}, {"input": "7 3 3 4\n", "output": "(3) / (3) = 1, left: 1, 7, 4\n(1) - (4) = -3, left: -3, 7\n(4) * (1) = 4, left: 4, 7\n(7) - (4) = 3, left: 3\n(4) + (1) = 5, left: 5, 7\n(1) / (4) = 1/4, left: 1/4, 7\n(4) - (1) = 3, left: 3, 7\n(7) / (1) = 7, left: 7, 4\n(1) - (7) = -6, left: -6, 4\n(7) * (1) = 7, left: 7, 4\n(7) / (4) = 7/4, left: 7/4\n(7) - (1) = 6, left: 6, 4\n(4) - (6) = -2, left: -2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (3 / 3)))"}, {"input": "7 3 3 4\n", "output": "(7) / (3) = 7/3, left: 7/3, 3, 4\n(3) + (7/3) = 16/3, left: 16/3, 4\n(7) + (3) = 10, left: 10, 3, 4\n(4) - (10) = -6, left: -6, 3\n(10) - (4) = 6, left: 6, 3\n(7) - (3) = 4, left: 4, 3, 4\n(3) - (4) = -1, left: -1, 4\n(3) - (4) = -1, left: -1, 4\n(3) / (4) = 3/4, left: 3/4, 4\n(4) / (4) = 1, left: 1, 3\n(4) * (4) = 16, left: 16, 3\n(3) * (16) = 48, left: 48\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (7 - 3)))"}, {"input": "7 3 3 4\n", "output": "(4) / (3) = 4/3, left: 4/3, 7, 3\n(7) + (4/3) = 25/3, left: 25/3, 3\n(3) * (4) = 12, left: 12, 7, 3\n(7) + (12) = 19, left: 19, 3\n(3) + (12) = 15, left: 15, 7\n(7) - (15) = -8, left: -8\n(3) * (12) = 36, left: 36, 7\n(7) * (36) = 252, left: 252\n(3) + (4) = 7, left: 7, 7, 3\n(3) / (4) = 3/4, left: 3/4, 7, 3\n(3/4) - (7) = -25/4, left: -25/4, 3\n(3) - (4) = -1, left: -1, 7, 3\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (3 - 4)))"}, {"input": "7 3 3 4\n", "output": "(7) - (3) = 4, left: 4, 3, 4\n(4) * (4) = 16, left: 16, 3\n(16) / (3) = 16/3, left: 16/3\n(4) - (4) = 0, left: 0, 3\n(0) - (3) = -3, left: -3\n(4) / (4) = 1, left: 1, 3\n(1) / (3) = 1/3, left: 1/3\n(3) + (1) = 4, left: 4\n(4) - (4) = 0, left: 0, 3\n(0) - (3) = -3, left: -3\n(3) + (0) = 3, left: 3\n(4) + (4) = 8, left: 8, 3\n(3) - (8) = -5, left: -5\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (7 - 3)))"}, {"input": "11 6 1 5\n", "output": "(11) + (6) = 17, left: 17, 1, 5\n(6) - (11) = -5, left: -5, 1, 5\n(1) + (5) = 6, left: 6, -5\n(6) / (-5) = -6/5, left: -6/5\n(5) * (-5) = -25, left: -25, 1\n(-25) / (1) = -25, left: -25\n(11) / (6) = 11/6, left: 11/6, 1, 5\n(11) - (6) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "11 6 1 5\n", "output": "(11) - (6) = 5, left: 5, 1, 5\n(5) - (1) = 4, left: 4, 5\n(1) / (5) = 1/5, left: 1/5, 5\n(1/5) / (5) = 1/25, left: 1/25\n(5) / (1/5) = 25, left: 25\n(1) - (5) = -4, left: -4, 5\n(1) + (5) = 6, left: 6, 5\n(1) * (5) = 5, left: 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "11 6 1 5\n", "output": "(1) - (5) = -4, left: -4, 11, 6\n(-4) / (11) = -4/11, left: -4/11, 6\n(5) / (1) = 5, left: 5, 11, 6\n(1) + (5) = 6, left: 6, 11, 6\n(11) + (5) = 16, left: 16, 6, 1\n(11) - (5) = 6, left: 6, 6, 1\n(11) - (1) = 10, left: 10, 6, 5\n(11) - (6) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "11 6 1 5\n", "output": "(11) * (5) = 55, left: 55, 6, 1\n(55) / (1) = 55, left: 55, 6\n(6) - (1) = 5, left: 5, 55\n(11) - (5) = 6, left: 6, 6, 1\n(11) + (5) = 16, left: 16, 6, 1\n(6) / (5) = 6/5, left: 6/5, 11, 1\n(11) / (6/5) = 55/6, left: 55/6, 1\n(6) + (1) = 7, left: 7, 11, 5\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (6 + 1)) - 11)"}, {"input": "11 6 1 5\n", "output": "(5) / (11) = 5/11, left: 5/11, 6, 1\n(1) / (11) = 1/11, left: 1/11, 6, 5\n(5) / (6) = 5/6, left: 5/6, 1/11\n(5) - (6) = -1, left: -1, 11, 1\n(11) / (6) = 11/6, left: 11/6, 1, 5\n(1) + (11/6) = 17/6, left: 17/6, 5\n(5) + (11/6) = 41/6, left: 41/6, 1\n(11) - (6) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "11 6 1 5\n", "output": "(11) * (5) = 55, left: 55, 6, 1\n(11) - (5) = 6, left: 6, 6, 1\n(11) / (5) = 11/5, left: 11/5, 6, 1\n(1) / (11) = 1/11, left: 1/11, 6, 5\n(11) * (1) = 11, left: 11, 6, 5\n(11) / (1) = 11, left: 11, 6, 5\n(6) / (5) = 6/5, left: 6/5, 11, 1\n(11) + (1) = 12, left: 12, 6/5\n(12) / (6/5) = 10, left: 10\n(5) / (6) = 5/6, left: 5/6, 11, 1\n(1) - (6) = -5, left: -5, 11, 5\n(6) + (1) = 7, left: 7, 11, 5\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (6 + 1)) - 11)"}, {"input": "11 6 1 5\n", "output": "(5) / (11) = 5/11, left: 5/11, 6, 1\n(11) - (5) = 6, left: 6, 6, 1\n(5) - (11) = -6, left: -6, 6, 1\n(1) * (-6) = -6, left: -6, 6\n(11) + (5) = 16, left: 16, 6, 1\n(11) - (1) = 10, left: 10, 6, 5\n(11) + (1) = 12, left: 12, 6, 5\n(11) / (1) = 11, left: 11, 6, 5\n(6) - (5) = 1, left: 1, 11, 1\n(6) / (5) = 6/5, left: 6/5, 11, 1\n(11) * (1) = 11, left: 11, 6/5\n(11) - (6) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "11 6 1 5\n", "output": "(5) / (1) = 5, left: 5, 11, 6\n(1) + (5) = 6, left: 6, 11, 6\n(11) + (5) = 16, left: 16, 6, 1\n(11) * (5) = 55, left: 55, 6, 1\n(1) / (55) = 1/55, left: 1/55, 6\n(11) - (5) = 6, left: 6, 6, 1\n(5) / (11) = 5/11, left: 5/11, 6, 1\n(11) - (1) = 10, left: 10, 6, 5\n(6) / (5) = 6/5, left: 6/5, 10\n(11) * (1) = 11, left: 11, 6, 5\n(11) + (1) = 12, left: 12, 6, 5\n(11) - (6) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "4 11 10 12\n", "output": "(10) - (12) = -2, left: -2, 4, 11\n(-2) - (11) = -13, left: -13, 4\n(10) + (12) = 22, left: 22, 4, 11\n(12) / (4) = 3, left: 3, 11, 10\n(11) + (10) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((12 / 4) + (11 + 10))"}, {"input": "4 11 10 12\n", "output": "(11) / (10) = 11/10, left: 11/10, 4, 12\n(11) - (10) = 1, left: 1, 4, 12\n(1) - (12) = -11, left: -11, 4\n(11) + (10) = 21, left: 21, 4, 12\n(12) / (4) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((11 + 10) + (12 / 4))"}, {"input": "4 11 10 12\n", "output": "(4) / (12) = 1/3, left: 1/3, 11, 10\n(10) * (1/3) = 10/3, left: 10/3, 11\n(4) * (12) = 48, left: 48, 11, 10\n(12) / (4) = 3, left: 3, 11, 10\n(11) + (10) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((12 / 4) + (11 + 10))"}, {"input": "4 11 10 12\n", "output": "(11) + (10) = 21, left: 21, 4, 12\n(12) + (21) = 33, left: 33, 4\n(21) - (12) = 9, left: 9, 4\n(4) - (9) = -5, left: -5\n(12) / (4) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((11 + 10) + (12 / 4))"}, {"input": "4 11 10 12\n", "output": "(4) / (12) = 1/3, left: 1/3, 11, 10\n(10) * (1/3) = 10/3, left: 10/3, 11\n(11) * (10) = 110, left: 110, 1/3\n(4) * (12) = 48, left: 48, 11, 10\n(11) / (48) = 11/48, left: 11/48, 10\n(11/48) - (10) = -469/48, left: -469/48\n(11) + (48) = 59, left: 59, 10\n(12) / (4) = 3, left: 3, 11, 10\n(11) + (10) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((12 / 4) + (11 + 10))"}, {"input": "4 11 10 12\n", "output": "(11) + (10) = 21, left: 21, 4, 12\n(21) / (12) = 7/4, left: 7/4, 4\n(21) - (12) = 9, left: 9, 4\n(4) + (9) = 13, left: 13\n(12) - (21) = -9, left: -9, 4\n(4) * (21) = 84, left: 84, 12\n(4) + (21) = 25, left: 25, 12\n(12) / (25) = 12/25, left: 12/25\n(12) / (4) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((11 + 10) + (12 / 4))"}, {"input": "4 11 10 12\n", "output": "(10) - (11) = -1, left: -1, 4, 12\n(-1) - (12) = -13, left: -13, 4\n(11) / (10) = 11/10, left: 11/10, 4, 12\n(10) / (11) = 10/11, left: 10/11, 4, 12\n(10/11) / (12) = 5/66, left: 5/66, 4\n(11) - (10) = 1, left: 1, 4, 12\n(1) - (4) = -3, left: -3, 12\n(11) + (10) = 21, left: 21, 4, 12\n(12) / (4) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((11 + 10) + (12 / 4))"}, {"input": "4 11 10 12\n", "output": "(10) - (4) = 6, left: 6, 11, 12\n(11) + (6) = 17, left: 17, 12\n(12) * (17) = 204, left: 204\n(4) * (10) = 40, left: 40, 11, 12\n(40) / (12) = 10/3, left: 10/3, 11\n(10) / (4) = 5/2, left: 5/2, 11, 12\n(4) / (10) = 2/5, left: 2/5, 11, 12\n(12) / (4) = 3, left: 3, 11, 10\n(11) + (3) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (11 + (12 / 4)))"}, {"input": "4 11 10 12\n", "output": "(10) - (12) = -2, left: -2, 4, 11\n(4) / (11) = 4/11, left: 4/11, -2\n(10) / (12) = 5/6, left: 5/6, 4, 11\n(10) * (12) = 120, left: 120, 4, 11\n(12) - (4) = 8, left: 8, 11, 10\n(4) - (12) = -8, left: -8, 11, 10\n(11) * (10) = 110, left: 110, -8\n(12) / (4) = 3, left: 3, 11, 10\n(11) + (10) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((12 / 4) + (11 + 10))"}, {"input": "5 5 4 1\n", "output": "(5) + (5) = 10, left: 10, 4, 1\n(5) / (5) = 1, left: 1, 4, 1\n(4) + (1) = 5, left: 5, 1\n(1) - (4) = -3, left: -3, 5, 5\n(4) * (1) = 4, left: 4, 5, 5\n(1) / (5) = 1/5, left: 1/5, 5, 4\n(5) + (1) = 6, left: 6, 5, 4\n(1) - (5) = -4, left: -4, 5, 4\n(5) * (-4) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (5 * (1 - 5)))"}, {"input": "5 5 4 1\n", "output": "(4) / (5) = 4/5, left: 4/5, 5, 1\n(5) - (4) = 1, left: 1, 5, 1\n(5) / (4) = 5/4, left: 5/4, 5, 1\n(5) + (4) = 9, left: 9, 5, 1\n(9) - (1) = 8, left: 8, 5\n(4) - (5) = -1, left: -1, 5, 1\n(5) + (-1) = 4, left: 4, 1\n(5) * (4) = 20, left: 20, 5, 1\n(20) - (1) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((5 * 4) - 1))"}, {"input": "5 5 4 1\n", "output": "(5) / (5) = 1, left: 1, 4, 1\n(5) * (5) = 25, left: 25, 4, 1\n(1) - (4) = -3, left: -3, 25\n(5) + (5) = 10, left: 10, 4, 1\n(10) - (4) = 6, left: 6, 1\n(10) - (1) = 9, left: 9, 4\n(5) / (5) = 1, left: 1, 4, 1\n(5) * (4) = 20, left: 20, 5, 1\n(5) + (20) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 + (5 * 4)) - 1)"}, {"input": "5 5 4 1\n", "output": "(5) / (5) = 1, left: 1, 4, 1\n(1) / (4) = 1/4, left: 1/4, 1\n(1) - (1/4) = 3/4, left: 3/4\n(5) * (5) = 25, left: 25, 4, 1\n(4) - (25) = -21, left: -21, 1\n(4) * (25) = 100, left: 100, 1\n(5) - (5) = 0, left: 0, 4, 1\n(5) * (4) = 20, left: 20, 5, 1\n(5) - (1) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((5 * 4) + (5 - 1))"}, {"input": "5 5 4 1\n", "output": "(5) / (5) = 1, left: 1, 4, 1\n(5) + (5) = 10, left: 10, 4, 1\n(1) / (10) = 1/10, left: 1/10, 4\n(5) * (5) = 25, left: 25, 4, 1\n(1) + (25) = 26, left: 26, 4\n(5) / (5) = 1, left: 1, 4, 1\n(5) - (5) = 0, left: 0, 4, 1\n(5) - (1) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((5 - 1) + (5 * 4))"}, {"input": "5 5 4 1\n", "output": "(5) * (5) = 25, left: 25, 4, 1\n(5) - (5) = 0, left: 0, 4, 1\n(5) / (5) = 1, left: 1, 4, 1\n(4) - (1) = 3, left: 3, 1\n(5) - (5) = 0, left: 0, 4, 1\n(5) / (1) = 5, left: 5, 5, 4\n(5) - (4) = 1, left: 1, 5\n(4) - (5) = -1, left: -1, 5\n(5) * (-1) = -5, left: -5\n(1) / (5) = 1/5, left: 1/5, 5, 4\n(1/5) / (5) = 1/25, left: 1/25, 4\n(5) - (1) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((5 - 1) + (5 * 4))"}, {"input": "5 5 4 1\n", "output": "(5) - (5) = 0, left: 0, 4, 1\n(5) - (5) = 0, left: 0, 4, 1\n(5) / (5) = 1, left: 1, 4, 1\n(4) / (1) = 4, left: 4, 5, 5\n(4) * (1) = 4, left: 4, 5, 5\n(5) / (4) = 5/4, left: 5/4, 5\n(4) - (1) = 3, left: 3, 5, 5\n(4) + (1) = 5, left: 5, 5, 5\n(5) / (5) = 1, left: 1, 5\n(1) / (5) = 1/5, left: 1/5, 5, 4\n(5) + (1) = 6, left: 6, 5, 4\n(1) - (5) = -4, left: -4, 5, 4\n(5) * (-4) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (5 * (1 - 5)))"}, {"input": "5 5 4 1\n", "output": "(5) / (5) = 1, left: 1, 4, 1\n(4) + (1) = 5, left: 5, 1\n(4) - (1) = 3, left: 3, 1\n(5) * (5) = 25, left: 25, 4, 1\n(4) + (25) = 29, left: 29, 1\n(5) - (5) = 0, left: 0, 4, 1\n(1) - (0) = 1, left: 1, 4\n(5) + (5) = 10, left: 10, 4, 1\n(5) - (5) = 0, left: 0, 4, 1\n(0) - (1) = -1, left: -1, 4\n(5) * (4) = 20, left: 20, 5, 1\n(5) * (20) = 100, left: 100, 1\n(5) + (20) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 + (5 * 4)) - 1)"}, {"input": "5 5 4 1\n", "output": "(5) - (5) = 0, left: 0, 4, 1\n(5) / (5) = 1, left: 1, 4, 1\n(1) - (1) = 0, left: 0, 4\n(5) / (5) = 1, left: 1, 4, 1\n(4) + (1) = 5, left: 5, 1\n(5) + (5) = 10, left: 10, 4, 1\n(5) * (5) = 25, left: 25, 4, 1\n(4) + (25) = 29, left: 29, 1\n(4) / (1) = 4, left: 4, 25\n(5) - (5) = 0, left: 0, 4, 1\n(1) - (0) = 1, left: 1, 4\n(5) * (4) = 20, left: 20, 5, 1\n(5) - (1) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((5 * 4) + (5 - 1))"}, {"input": "7 12 8 4\n", "output": "(12) + (4) = 16, left: 16, 7, 8\n(8) * (4) = 32, left: 32, 7, 12\n(7) * (8) = 56, left: 56, 12, 4\n(7) - (12) = -5, left: -5, 8, 4\n(7) / (12) = 7/12, left: 7/12, 8, 4\n(7) - (4) = 3, left: 3, 12, 8\n(8) / (3) = 8/3, left: 8/3, 12\n(7) * (4) = 28, left: 28, 12, 8\n(8) + (28) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((8 + (7 * 4)) - 12)"}, {"input": "7 12 8 4\n", "output": "(12) / (7) = 12/7, left: 12/7, 8, 4\n(7) - (12) = -5, left: -5, 8, 4\n(8) / (-5) = -8/5, left: -8/5, 4\n(7) * (12) = 84, left: 84, 8, 4\n(7) / (12) = 7/12, left: 7/12, 8, 4\n(8) * (4) = 32, left: 32, 7/12\n(7) * (8) = 56, left: 56, 12, 4\n(8) - (12) = -4, left: -4, 7, 4\n(7) * (4) = 28, left: 28, -4\n(-4) + (28) = 24, left: 24\nreach 24! expression: ((8 - 12) + (7 * 4))"}, {"input": "7 12 8 4\n", "output": "(8) - (12) = -4, left: -4, 7, 4\n(7) - (-4) = 11, left: 11, 4\n(11) / (4) = 11/4, left: 11/4\n(-4) / (7) = -4/7, left: -4/7, 4\n(4) - (-4/7) = 32/7, left: 32/7\n(7) + (-4) = 3, left: 3, 4\n(7) / (4) = 7/4, left: 7/4, -4\n(7) * (4) = 28, left: 28, -4\n(28) / (-4) = -7, left: -7\n(-4) + (28) = 24, left: 24\nreach 24! expression: ((8 - 12) + (7 * 4))"}, {"input": "7 12 8 4\n", "output": "(4) - (8) = -4, left: -4, 7, 12\n(8) * (4) = 32, left: 32, 7, 12\n(4) / (12) = 1/3, left: 1/3, 7, 8\n(12) * (4) = 48, left: 48, 7, 8\n(48) - (7) = 41, left: 41, 8\n(7) * (12) = 84, left: 84, 8, 4\n(7) / (12) = 7/12, left: 7/12, 8, 4\n(7) * (4) = 28, left: 28, 12, 8\n(28) - (12) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((7 * 4) - 12))"}, {"input": "7 12 8 4\n", "output": "(7) / (4) = 7/4, left: 7/4, 12, 8\n(12) / (7/4) = 48/7, left: 48/7, 8\n(4) - (7) = -3, left: -3, 12, 8\n(-3) - (8) = -11, left: -11, 12\n(7) + (4) = 11, left: 11, 12, 8\n(11) / (12) = 11/12, left: 11/12, 8\n(7) * (4) = 28, left: 28, 12, 8\n(8) * (28) = 224, left: 224, 12\n(8) + (28) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((8 + (7 * 4)) - 12)"}, {"input": "8 6 1 6\n", "output": "(6) / (8) = 3/4, left: 3/4, 6, 1\n(6) - (1) = 5, left: 5, 3/4\n(3/4) * (5) = 15/4, left: 15/4\n(6) + (1) = 7, left: 7, 3/4\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(6) - (6) = 0, left: 0, 8, 1\n(8) + (1) = 9, left: 9, 0\n(6) * (6) = 36, left: 36, 8, 1\n(6) - (1) = 5, left: 5, 8, 6\n(1) * (6) = 6, left: 6, 8, 6\n(6) - (8) = -2, left: -2, 6\n(8) - (1) = 7, left: 7, 6, 6\n(6) / (8) = 3/4, left: 3/4, 1, 6\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(6) / (8) = 3/4, left: 3/4, 6, 1\n(6) / (1) = 6, left: 6, 3/4\n(6) - (1) = 5, left: 5, 3/4\n(3/4) * (5) = 15/4, left: 15/4\n(6) * (1) = 6, left: 6, 3/4\n(1) / (6) = 1/6, left: 1/6, 3/4\n(1) + (3/4) = 7/4, left: 7/4, 6\n(7/4) - (6) = -17/4, left: -17/4\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(1) - (6) = -5, left: -5, 8, 6\n(6) / (1) = 6, left: 6, 8, 6\n(6) * (6) = 36, left: 36, 8\n(1) * (6) = 6, left: 6, 8, 6\n(6) / (8) = 3/4, left: 3/4, 6\n(1) / (6) = 1/6, left: 1/6, 8, 6\n(6) - (8) = -2, left: -2, 6, 1\n(6) / (8) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(6) - (1) = 5, left: 5, 8, 6\n(1) * (6) = 6, left: 6, 8, 6\n(8) / (6) = 4/3, left: 4/3, 6\n(6) + (4/3) = 22/3, left: 22/3\n(1) - (6) = -5, left: -5, 8, 6\n(8) + (6) = 14, left: 14, 1, 6\n(6) / (1) = 6, left: 6, 14\n(6) / (8) = 3/4, left: 3/4, 1, 6\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(8) + (6) = 14, left: 14, 6, 1\n(6) - (1) = 5, left: 5, 14\n(14) * (5) = 70, left: 70\n(6) + (1) = 7, left: 7, 14\n(14) - (6) = 8, left: 8, 1\n(6) * (14) = 84, left: 84, 1\n(6) / (8) = 3/4, left: 3/4, 6, 1\n(1) + (3/4) = 7/4, left: 7/4, 6\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(6) - (6) = 0, left: 0, 8, 1\n(8) - (1) = 7, left: 7, 0\n(6) / (6) = 1, left: 1, 8, 1\n(6) + (6) = 12, left: 12, 8, 1\n(6) / (1) = 6, left: 6, 8, 6\n(1) * (6) = 6, left: 6, 8, 6\n(6) - (6) = 0, left: 0, 8\n(1) / (6) = 1/6, left: 1/6, 8, 6\n(6) - (8) = -2, left: -2, 1/6\n(1) - (6) = -5, left: -5, 8, 6\n(8) - (1) = 7, left: 7, 6, 6\n(6) / (8) = 3/4, left: 3/4, 1, 6\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(1) / (6) = 1/6, left: 1/6, 8, 6\n(8) - (1/6) = 47/6, left: 47/6, 6\n(1/6) / (8) = 1/48, left: 1/48, 6\n(6) / (1) = 6, left: 6, 8, 6\n(8) + (6) = 14, left: 14, 6\n(6) / (6) = 1, left: 1, 8, 1\n(6) / (6) = 1, left: 1, 8, 1\n(6) + (6) = 12, left: 12, 8, 1\n(12) - (1) = 11, left: 11, 8\n(8) + (6) = 14, left: 14, 1, 6\n(8) * (6) = 48, left: 48, 1, 6\n(6) / (8) = 3/4, left: 3/4, 1, 6\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(1) + (6) = 7, left: 7, 8, 6\n(6) / (7) = 6/7, left: 6/7, 8\n(1) - (6) = -5, left: -5, 8, 6\n(8) / (6) = 4/3, left: 4/3, -5\n(6) / (1) = 6, left: 6, 8, 6\n(1) * (6) = 6, left: 6, 8, 6\n(6) - (6) = 0, left: 0, 8\n(6) - (8) = -2, left: -2, 6, 1\n(-2) - (6) = -8, left: -8, 1\n(-2) - (1) = -3, left: -3, 6\n(6) / (8) = 3/4, left: 3/4, 6, 1\n(3/4) - (1) = -1/4, left: -1/4, 6\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "6 10 13 1\n", "output": "(13) * (1) = 13, left: 13, 6, 10\n(6) / (10) = 3/5, left: 3/5, 13\n(1) / (13) = 1/13, left: 1/13, 6, 10\n(13) + (1) = 14, left: 14, 6, 10\n(14) - (10) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 + 1) - 10))"}, {"input": "6 10 13 1\n", "output": "(10) * (13) = 130, left: 130, 6, 1\n(6) / (130) = 3/65, left: 3/65, 1\n(1) * (130) = 130, left: 130, 6\n(13) - (10) = 3, left: 3, 6, 1\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (13 - 10)))"}, {"input": "6 10 13 1\n", "output": "(6) + (10) = 16, left: 16, 13, 1\n(10) / (6) = 5/3, left: 5/3, 13, 1\n(1) - (6) = -5, left: -5, 10, 13\n(10) * (1) = 10, left: 10, 6, 13\n(10) / (13) = 10/13, left: 10/13, 6\n(10) + (1) = 11, left: 11, 6, 13\n(11) - (6) = 5, left: 5, 13\n(10) - (1) = 9, left: 9, 6, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (10 - 1)))"}, {"input": "6 10 13 1\n", "output": "(10) * (13) = 130, left: 130, 6, 1\n(6) / (130) = 3/65, left: 3/65, 1\n(6) * (130) = 780, left: 780, 1\n(130) / (1) = 130, left: 130, 6\n(1) + (130) = 131, left: 131, 6\n(1) - (130) = -129, left: -129, 6\n(6) / (1) = 6, left: 6, 130\n(13) - (10) = 3, left: 3, 6, 1\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (13 - 10)))"}, {"input": "6 10 13 1\n", "output": "(6) - (13) = -7, left: -7, 10, 1\n(10) - (6) = 4, left: 4, 13, 1\n(13) / (1) = 13, left: 13, 6, 10\n(13) * (1) = 13, left: 13, 6, 10\n(1) - (13) = -12, left: -12, 6, 10\n(13) - (1) = 12, left: 12, 6, 10\n(10) - (6) = 4, left: 4, 12\n(13) + (1) = 14, left: 14, 6, 10\n(14) - (10) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 + 1) - 10))"}, {"input": "6 10 13 1\n", "output": "(13) * (1) = 13, left: 13, 6, 10\n(6) / (10) = 3/5, left: 3/5, 13\n(13) / (1) = 13, left: 13, 6, 10\n(6) - (10) = -4, left: -4, 13\n(10) / (6) = 5/3, left: 5/3, 13\n(10) - (13) = -3, left: -3, 6\n(13) + (1) = 14, left: 14, 6, 10\n(10) - (6) = 4, left: 4, 14\n(14) - (10) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 + 1) - 10))"}, {"input": "6 10 13 1\n", "output": "(1) / (10) = 1/10, left: 1/10, 6, 13\n(10) * (1) = 10, left: 10, 6, 13\n(6) - (10) = -4, left: -4, 13\n(13) * (-4) = -52, left: -52\n(13) - (6) = 7, left: 7, 10\n(10) - (7) = 3, left: 3\n(10) + (1) = 11, left: 11, 6, 13\n(10) - (1) = 9, left: 9, 6, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (10 - 1)))"}, {"input": "3 6 4 8\n", "output": "(6) / (4) = 3/2, left: 3/2, 3, 8\n(3/2) / (3) = 1/2, left: 1/2, 8\n(1/2) - (8) = -15/2, left: -15/2\n(3) / (3/2) = 2, left: 2, 8\n(6) + (4) = 10, left: 10, 3, 8\n(6) - (4) = 2, left: 2, 3, 8\n(8) / (2) = 4, left: 4, 3\n(3) / (6) = 1/2, left: 1/2, 4, 8\n(4) + (8) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((4 + 8) / (3 / 6))"}, {"input": "3 6 4 8\n", "output": "(8) - (6) = 2, left: 2, 3, 4\n(3) * (2) = 6, left: 6, 4\n(4) + (6) = 10, left: 10\n(4) / (6) = 2/3, left: 2/3\n(6) / (4) = 3/2, left: 3/2\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 * (8 - 6)))"}, {"input": "3 6 4 8\n", "output": "(8) / (6) = 4/3, left: 4/3, 3, 4\n(4) - (3) = 1, left: 1, 4/3\n(4/3) - (3) = -5/3, left: -5/3, 4\n(4) * (4/3) = 16/3, left: 16/3, 3\n(4) / (4/3) = 3, left: 3, 3\n(4/3) - (4) = -8/3, left: -8/3, 3\n(8) - (6) = 2, left: 2, 3, 4\n(3) - (2) = 1, left: 1, 4\n(3) * (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 * (8 - 6)))"}, {"input": "3 6 4 8\n", "output": "(8) - (4) = 4, left: 4, 3, 6\n(3) / (6) = 1/2, left: 1/2, 4\n(6) - (3) = 3, left: 3, 4\n(4) / (8) = 1/2, left: 1/2, 3, 6\n(3) - (1/2) = 5/2, left: 5/2, 6\n(3) + (1/2) = 7/2, left: 7/2, 6\n(7/2) - (6) = -5/2, left: -5/2\n(4) + (8) = 12, left: 12, 3, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((4 + 8) / (3 / 6))"}, {"input": "3 6 4 8\n", "output": "(3) * (6) = 18, left: 18, 4, 8\n(18) - (4) = 14, left: 14, 8\n(4) * (18) = 72, left: 72, 8\n(3) / (6) = 1/2, left: 1/2, 4, 8\n(8) * (1/2) = 4, left: 4, 4\n(1/2) / (8) = 1/16, left: 1/16, 4\n(4) - (8) = -4, left: -4, 1/2\n(8) - (4) = 4, left: 4, 1/2\n(4) + (8) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((4 + 8) / (3 / 6))"}, {"input": "3 6 4 8\n", "output": "(8) - (6) = 2, left: 2, 3, 4\n(3) * (2) = 6, left: 6, 4\n(4) + (6) = 10, left: 10\n(4) / (6) = 2/3, left: 2/3\n(6) / (4) = 3/2, left: 3/2\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 * (8 - 6)))"}, {"input": "3 6 4 8\n", "output": "(8) - (6) = 2, left: 2, 3, 4\n(3) * (2) = 6, left: 6, 4\n(4) + (6) = 10, left: 10\n(4) / (6) = 2/3, left: 2/3\n(6) / (4) = 3/2, left: 3/2\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 * (8 - 6)))"}, {"input": "13 13 6 5\n", "output": "(6) * (5) = 30, left: 30, 13, 13\n(30) - (13) = 17, left: 17, 13\n(13) + (5) = 18, left: 18, 13, 6\n(6) / (18) = 1/3, left: 1/3, 13\n(13) * (1/3) = 13/3, left: 13/3\n(13) + (18) = 31, left: 31, 6\n(13) - (5) = 8, left: 8, 13, 6\n(13) / (13) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "13 13 6 5\n", "output": "(13) - (5) = 8, left: 8, 13, 6\n(13) + (6) = 19, left: 19, 13, 5\n(13) / (6) = 13/6, left: 13/6, 13, 5\n(13) + (6) = 19, left: 19, 13, 5\n(6) - (5) = 1, left: 1, 13, 13\n(6) / (5) = 6/5, left: 6/5, 13, 13\n(5) / (6) = 5/6, left: 5/6, 13, 13\n(13) / (13) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "13 13 6 5\n", "output": "(13) + (5) = 18, left: 18, 13, 6\n(13) / (6) = 13/6, left: 13/6, 18\n(13) - (5) = 8, left: 8, 13, 6\n(13) / (5) = 13/5, left: 13/5, 13, 6\n(5) / (13) = 5/13, left: 5/13, 13, 6\n(13) * (5) = 65, left: 65, 13, 6\n(65) / (6) = 65/6, left: 65/6, 13\n(13) / (13) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "13 13 6 5\n", "output": "(13) + (6) = 19, left: 19, 13, 5\n(13) * (6) = 78, left: 78, 13, 5\n(13) * (5) = 65, left: 65, 78\n(13) + (6) = 19, left: 19, 13, 5\n(13) - (19) = -6, left: -6, 5\n(-6) - (5) = -11, left: -11\n(5) / (6) = 5/6, left: 5/6, 13, 13\n(13) / (13) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "13 13 6 5\n", "output": "(13) + (5) = 18, left: 18, 13, 6\n(5) / (13) = 5/13, left: 5/13, 13, 6\n(13) / (6) = 13/6, left: 13/6, 5/13\n(13) + (6) = 19, left: 19, 13, 5\n(5) + (19) = 24, left: 24, 13\n(13) * (5) = 65, left: 65, 13, 6\n(6) - (65) = -59, left: -59, 13\n(13) / (13) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "6 5 1 5\n", "output": "(6) / (5) = 6/5, left: 6/5, 5, 1\n(1) * (6/5) = 6/5, left: 6/5, 5\n(6) - (5) = 1, left: 1, 5, 1\n(1) / (5) = 1/5, left: 1/5, 1\n(6) + (5) = 11, left: 11, 5, 1\n(5) / (6) = 5/6, left: 5/6, 5, 1\n(1) / (5) = 1/5, left: 1/5, 5/6\n(6) * (5) = 30, left: 30, 5, 1\n(30) - (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: (((6 * 5) - 5) - 1)"}, {"input": "6 5 1 5\n", "output": "(6) - (1) = 5, left: 5, 5, 5\n(1) - (6) = -5, left: -5, 5, 5\n(5) * (-5) = -25, left: -25, 5\n(6) * (1) = 6, left: 6, 5, 5\n(5) / (6) = 5/6, left: 5/6, 5\n(6) + (1) = 7, left: 7, 5, 5\n(5) - (5) = 0, left: 0, 6, 1\n(5) + (1) = 6, left: 6, 6, 5\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (5 + 1))"}, {"input": "6 5 1 5\n", "output": "(6) + (5) = 11, left: 11, 5, 1\n(1) - (5) = -4, left: -4, 11\n(5) / (6) = 5/6, left: 5/6, 5, 1\n(5) - (6) = -1, left: -1, 5, 1\n(5) - (-1) = 6, left: 6, 1\n(5) + (-1) = 4, left: 4, 1\n(6) * (5) = 30, left: 30, 5, 1\n(30) / (5) = 6, left: 6, 1\n(30) - (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: (((6 * 5) - 5) - 1)"}, {"input": "6 5 1 5\n", "output": "(5) / (6) = 5/6, left: 5/6, 1, 5\n(5) / (5/6) = 6, left: 6, 1\n(6) - (5) = 1, left: 1, 1, 5\n(5) * (1) = 5, left: 5, 1\n(5) - (1) = 4, left: 4, 1\n(6) + (5) = 11, left: 11, 1, 5\n(5) - (6) = -1, left: -1, 1, 5\n(6) * (5) = 30, left: 30, 1, 5\n(1) + (5) = 6, left: 6, 30\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (1 + 5))"}, {"input": "6 5 1 5\n", "output": "(1) - (5) = -4, left: -4, 6, 5\n(5) / (6) = 5/6, left: 5/6, -4\n(6) * (-4) = -24, left: -24, 5\n(5) / (-4) = -5/4, left: -5/4, 6\n(5) + (1) = 6, left: 6, 6, 5\n(6) + (6) = 12, left: 12, 5\n(6) / (6) = 1, left: 1, 5\n(6) - (6) = 0, left: 0, 5\n(5) * (6) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((5 * (5 + 1)) - 6)"}, {"input": "6 5 1 5\n", "output": "(6) - (5) = 1, left: 1, 1, 5\n(1) * (1) = 1, left: 1, 5\n(5) + (1) = 6, left: 6\n(6) + (5) = 11, left: 11, 1, 5\n(1) * (5) = 5, left: 5, 11\n(5) / (11) = 5/11, left: 5/11, 1\n(6) / (5) = 6/5, left: 6/5, 1, 5\n(5) * (6/5) = 6, left: 6, 1\n(5) - (6) = -1, left: -1, 1, 5\n(5) - (1) = 4, left: 4, -1\n(-1) / (1) = -1, left: -1, 5\n(6) * (5) = 30, left: 30, 1, 5\n(1) + (5) = 6, left: 6, 30\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (1 + 5))"}, {"input": "6 5 1 5\n", "output": "(6) + (5) = 11, left: 11, 5, 1\n(5) - (11) = -6, left: -6, 1\n(5) / (6) = 5/6, left: 5/6, 5, 1\n(5) / (1) = 5, left: 5, 5/6\n(5/6) / (5) = 1/6, left: 1/6, 1\n(5/6) - (1) = -1/6, left: -1/6, 5\n(6) / (5) = 6/5, left: 6/5, 5, 1\n(6/5) - (5) = -19/5, left: -19/5, 1\n(5) - (6) = -1, left: -1, 5, 1\n(6) - (5) = 1, left: 1, 5, 1\n(5) + (1) = 6, left: 6, 1\n(6) * (5) = 30, left: 30, 5, 1\n(30) - (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: (((6 * 5) - 5) - 1)"}, {"input": "6 5 1 5\n", "output": "(6) + (1) = 7, left: 7, 5, 5\n(5) - (5) = 0, left: 0, 6, 1\n(5) + (5) = 10, left: 10, 6, 1\n(5) / (5) = 1, left: 1, 6, 1\n(6) + (1) = 7, left: 7, 1\n(5) * (5) = 25, left: 25, 6, 1\n(25) - (6) = 19, left: 19, 1\n(1) - (19) = -18, left: -18\n(5) / (5) = 1, left: 1, 6, 1\n(6) / (1) = 6, left: 6, 1\n(6) - (1) = 5, left: 5\n(5) + (1) = 6, left: 6, 6, 5\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (5 + 1))"}, {"input": "11 1 11 9\n", "output": "(11) - (9) = 2, left: 2, 1, 11\n(1) - (2) = -1, left: -1, 11\n(11) + (-1) = 10, left: 10\n(1) / (2) = 1/2, left: 1/2, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (1 + 11))"}, {"input": "11 1 11 9\n", "output": "(1) - (11) = -10, left: -10, 11, 9\n(11) / (9) = 11/9, left: 11/9, -10\n(11) - (1) = 10, left: 10, 11, 9\n(1) + (11) = 12, left: 12, 11, 9\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (11 - 9))"}, {"input": "11 1 11 9\n", "output": "(1) / (9) = 1/9, left: 1/9, 11, 11\n(11) + (1/9) = 100/9, left: 100/9, 11\n(11) * (9) = 99, left: 99, 11, 1\n(11) - (9) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (11 + 1))"}, {"input": "11 1 11 9\n", "output": "(11) + (9) = 20, left: 20, 1, 11\n(11) + (20) = 31, left: 31, 1\n(1) / (11) = 1/11, left: 1/11, 20\n(11) - (9) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (1 + 11))"}, {"input": "11 1 11 9\n", "output": "(1) - (11) = -10, left: -10, 11, 9\n(-10) / (9) = -10/9, left: -10/9, 11\n(11) + (-10/9) = 89/9, left: 89/9\n(1) * (11) = 11, left: 11, 11, 9\n(11) * (11) = 121, left: 121, 9\n(11) - (1) = 10, left: 10, 11, 9\n(1) + (11) = 12, left: 12, 11, 9\n(9) / (12) = 3/4, left: 3/4, 11\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (11 - 9))"}, {"input": "11 1 11 9\n", "output": "(9) / (1) = 9, left: 9, 11, 11\n(9) - (1) = 8, left: 8, 11, 11\n(1) / (9) = 1/9, left: 1/9, 11, 11\n(1) * (9) = 9, left: 9, 11, 11\n(11) - (9) = 2, left: 2, 11\n(11) * (9) = 99, left: 99, 11, 1\n(1) - (99) = -98, left: -98, 11\n(11) - (9) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (11 + 1))"}, {"input": "11 1 11 9\n", "output": "(1) * (9) = 9, left: 9, 11, 11\n(1) - (9) = -8, left: -8, 11, 11\n(11) + (-8) = 3, left: 3, 11\n(1) + (9) = 10, left: 10, 11, 11\n(9) - (1) = 8, left: 8, 11, 11\n(9) / (1) = 9, left: 9, 11, 11\n(9) / (11) = 9/11, left: 9/11, 11, 1\n(11) - (9) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (11 + 1))"}, {"input": "11 1 11 9\n", "output": "(11) - (9) = 2, left: 2, 1, 11\n(1) - (2) = -1, left: -1, 11\n(11) + (-1) = 10, left: 10\n(2) / (1) = 2, left: 2, 11\n(11) * (2) = 22, left: 22\n(1) * (2) = 2, left: 2, 11\n(11) - (2) = 9, left: 9\n(1) - (11) = -10, left: -10, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (1 + 11))"}, {"input": "11 1 11 9\n", "output": "(11) * (9) = 99, left: 99, 1, 11\n(11) - (1) = 10, left: 10, 99\n(1) + (99) = 100, left: 100, 11\n(11) + (9) = 20, left: 20, 1, 11\n(20) - (11) = 9, left: 9, 1\n(11) - (9) = 2, left: 2, 1, 11\n(2) / (11) = 2/11, left: 2/11, 1\n(2) / (1) = 2, left: 2, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (1 + 11))"}, {"input": "7 3 10 9\n", "output": "(3) / (7) = 3/7, left: 3/7, 10, 9\n(10) - (3/7) = 67/7, left: 67/7, 9\n(7) - (3) = 4, left: 4, 10, 9\n(7) + (3) = 10, left: 10, 10, 9\n(9) / (10) = 9/10, left: 9/10, 10\n(9) * (10) = 90, left: 90, 10\n(7) - (9) = -2, left: -2, 3, 10\n(10) * (-2) = -20, left: -20, 3\n(10) + (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 + (7 - 9)))"}, {"input": "7 3 10 9\n", "output": "(9) - (3) = 6, left: 6, 7, 10\n(10) - (7) = 3, left: 3, 6\n(3) + (9) = 12, left: 12, 7, 10\n(9) / (3) = 3, left: 3, 7, 10\n(10) - (7) = 3, left: 3, 3\n(7) - (10) = -3, left: -3, 3\n(3) - (10) = -7, left: -7, 7\n(3) * (9) = 27, left: 27, 7, 10\n(7) + (27) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((7 + (3 * 9)) - 10)"}, {"input": "7 3 10 9\n", "output": "(10) - (9) = 1, left: 1, 7, 3\n(7) * (3) = 21, left: 21, 1\n(1) - (21) = -20, left: -20\n(7) / (3) = 7/3, left: 7/3, 1\n(3) / (7) = 3/7, left: 3/7, 1\n(3/7) / (1) = 3/7, left: 3/7\n(7) + (3) = 10, left: 10, 1\n(3) / (1) = 3, left: 3, 7\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (10 - 9)))"}, {"input": "7 3 10 9\n", "output": "(3) - (7) = -4, left: -4, 10, 9\n(9) - (-4) = 13, left: 13, 10\n(7) + (3) = 10, left: 10, 10, 9\n(7) / (3) = 7/3, left: 7/3, 10, 9\n(7) - (3) = 4, left: 4, 10, 9\n(10) / (9) = 10/9, left: 10/9, 4\n(7) * (9) = 63, left: 63, 3, 10\n(7) - (9) = -2, left: -2, 3, 10\n(10) + (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 + (7 - 9)))"}, {"input": "7 3 10 9\n", "output": "(7) * (3) = 21, left: 21, 10, 9\n(10) / (9) = 10/9, left: 10/9, 21\n(7) / (3) = 7/3, left: 7/3, 10, 9\n(7) - (3) = 4, left: 4, 10, 9\n(3) / (7) = 3/7, left: 3/7, 10, 9\n(10) / (9) = 10/9, left: 10/9, 3/7\n(3/7) - (10/9) = -43/63, left: -43/63\n(7) + (10) = 17, left: 17, 3, 9\n(17) - (9) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((7 + 10) - 9))"}, {"input": "2 7 12 1\n", "output": "(7) - (12) = -5, left: -5, 2, 1\n(2) / (1) = 2, left: 2, -5\n(7) * (12) = 84, left: 84, 2, 1\n(2) + (84) = 86, left: 86, 1\n(7) + (12) = 19, left: 19, 2, 1\n(7) / (12) = 7/12, left: 7/12, 2, 1\n(7) - (1) = 6, left: 6, 2, 12\n(12) - (6) = 6, left: 6, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (7 - 1)))"}, {"input": "2 7 12 1\n", "output": "(2) / (7) = 2/7, left: 2/7, 12, 1\n(2/7) - (12) = -82/7, left: -82/7, 1\n(2) * (7) = 14, left: 14, 12, 1\n(14) / (12) = 7/6, left: 7/6, 1\n(12) + (1) = 13, left: 13, 2, 7\n(7) + (13) = 20, left: 20, 2\n(1) - (12) = -11, left: -11, 2, 7\n(7) - (1) = 6, left: 6, 2, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (7 - 1)))"}, {"input": "2 7 12 1\n", "output": "(1) / (7) = 1/7, left: 1/7, 2, 12\n(1/7) / (2) = 1/14, left: 1/14, 12\n(1/14) / (12) = 1/168, left: 1/168\n(12) / (2) = 6, left: 6, 1/7\n(12) / (1/7) = 84, left: 84, 2\n(1) - (7) = -6, left: -6, 2, 12\n(12) / (2) = 6, left: 6, -6\n(2) - (12) = -10, left: -10, -6\n(2) * (-6) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 * (1 - 7)))"}, {"input": "2 7 12 1\n", "output": "(7) / (12) = 7/12, left: 7/12, 2, 1\n(12) / (7) = 12/7, left: 12/7, 2, 1\n(2) * (1) = 2, left: 2, 12/7\n(2) - (7) = -5, left: -5, 12, 1\n(12) / (1) = 12, left: 12, 2, 7\n(2) + (12) = 14, left: 14, 7\n(12) - (1) = 11, left: 11, 2, 7\n(1) - (7) = -6, left: -6, 2, 12\n(2) * (-6) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 * (1 - 7)))"}, {"input": "2 7 12 1\n", "output": "(7) / (12) = 7/12, left: 7/12, 2, 1\n(12) - (7) = 5, left: 5, 2, 1\n(7) * (12) = 84, left: 84, 2, 1\n(2) / (1) = 2, left: 2, 7, 12\n(12) - (7) = 5, left: 5, 2\n(7) / (1) = 7, left: 7, 2, 12\n(7) * (1) = 7, left: 7, 2, 12\n(7) - (1) = 6, left: 6, 2, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (7 - 1)))"}, {"input": "2 7 12 1\n", "output": "(12) / (7) = 12/7, left: 12/7, 2, 1\n(7) + (12) = 19, left: 19, 2, 1\n(2) + (19) = 21, left: 21, 1\n(7) * (12) = 84, left: 84, 2, 1\n(2) - (1) = 1, left: 1, 7, 12\n(1) / (12) = 1/12, left: 1/12, 7\n(2) + (1) = 3, left: 3, 7, 12\n(12) / (3) = 4, left: 4, 7\n(7) - (4) = 3, left: 3\n(1) / (12) = 1/12, left: 1/12, 2, 7\n(12) * (1) = 12, left: 12, 2, 7\n(7) - (1) = 6, left: 6, 2, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (7 - 1)))"}, {"input": "2 7 12 1\n", "output": "(2) / (12) = 1/6, left: 1/6, 7, 1\n(1/6) / (1) = 1/6, left: 1/6, 7\n(7) * (12) = 84, left: 84, 2, 1\n(7) - (12) = -5, left: -5, 2, 1\n(2) + (-5) = -3, left: -3, 1\n(2) * (7) = 14, left: 14, 12, 1\n(7) / (2) = 7/2, left: 7/2, 12, 1\n(1) / (7/2) = 2/7, left: 2/7, 12\n(12) - (1) = 11, left: 11, 2, 7\n(11) - (7) = 4, left: 4, 2\n(2) - (1) = 1, left: 1, 7, 12\n(1) - (7) = -6, left: -6, 2, 12\n(2) * (-6) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 * (1 - 7)))"}, {"input": "10 6 13 8\n", "output": "(6) / (10) = 3/5, left: 3/5, 13, 8\n(13) * (3/5) = 39/5, left: 39/5, 8\n(13) * (8) = 104, left: 104, 3/5\n(10) + (6) = 16, left: 16, 13, 8\n(16) - (13) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 + 6) - 13))"}, {"input": "10 6 13 8\n", "output": "(10) * (13) = 130, left: 130, 6, 8\n(8) + (130) = 138, left: 138, 6\n(138) - (6) = 132, left: 132\n(13) - (10) = 3, left: 3, 6, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (13 - 10)))"}, {"input": "10 6 13 8\n", "output": "(10) + (6) = 16, left: 16, 13, 8\n(13) / (16) = 13/16, left: 13/16, 8\n(13/16) - (8) = -115/16, left: -115/16\n(16) / (13) = 16/13, left: 16/13, 8\n(16) - (13) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 + 6) - 13))"}, {"input": "10 6 13 8\n", "output": "(10) / (6) = 5/3, left: 5/3, 13, 8\n(6) / (10) = 3/5, left: 3/5, 13, 8\n(10) + (6) = 16, left: 16, 13, 8\n(16) / (13) = 16/13, left: 16/13, 8\n(16) - (13) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 + 6) - 13))"}, {"input": "10 6 13 8\n", "output": "(10) / (13) = 10/13, left: 10/13, 6, 8\n(10/13) / (8) = 5/52, left: 5/52, 6\n(10) + (13) = 23, left: 23, 6, 8\n(23) - (8) = 15, left: 15, 6\n(6) / (15) = 2/5, left: 2/5\n(10) * (13) = 130, left: 130, 6, 8\n(13) - (10) = 3, left: 3, 6, 8\n(6) + (3) = 9, left: 9, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (13 - 10)))"}, {"input": "10 6 13 8\n", "output": "(6) / (10) = 3/5, left: 3/5, 13, 8\n(3/5) - (13) = -62/5, left: -62/5, 8\n(8) - (-62/5) = 102/5, left: 102/5\n(8) - (3/5) = 37/5, left: 37/5, 13\n(13) + (8) = 21, left: 21, 3/5\n(3/5) - (21) = -102/5, left: -102/5\n(8) / (13) = 8/13, left: 8/13, 3/5\n(10) + (6) = 16, left: 16, 13, 8\n(16) - (13) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 + 6) - 13))"}, {"input": "10 6 13 8\n", "output": "(10) - (6) = 4, left: 4, 13, 8\n(10) / (6) = 5/3, left: 5/3, 13, 8\n(13) * (8) = 104, left: 104, 5/3\n(6) / (10) = 3/5, left: 3/5, 13, 8\n(13) / (8) = 13/8, left: 13/8, 3/5\n(13) - (8) = 5, left: 5, 3/5\n(10) + (6) = 16, left: 16, 13, 8\n(8) - (13) = -5, left: -5, 16\n(16) - (13) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 + 6) - 13))"}, {"input": "10 6 13 8\n", "output": "(13) + (8) = 21, left: 21, 10, 6\n(6) - (10) = -4, left: -4, 21\n(13) / (8) = 13/8, left: 13/8, 10, 6\n(8) - (13) = -5, left: -5, 10, 6\n(13) * (8) = 104, left: 104, 10, 6\n(8) - (6) = 2, left: 2, 10, 13\n(6) + (8) = 14, left: 14, 10, 13\n(10) - (13) = -3, left: -3, 6, 8\n(6) + (-3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 + (10 - 13)))"}, {"input": "10 6 13 8\n", "output": "(10) + (6) = 16, left: 16, 13, 8\n(13) + (16) = 29, left: 29, 8\n(13) / (16) = 13/16, left: 13/16, 8\n(16) / (13) = 16/13, left: 16/13, 8\n(16/13) / (8) = 2/13, left: 2/13\n(13) - (16) = -3, left: -3, 8\n(8) / (-3) = -8/3, left: -8/3\n(-3) / (8) = -3/8, left: -3/8\n(16) - (13) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 + 6) - 13))"}, {"input": "6 13 9 6\n", "output": "(6) + (9) = 15, left: 15, 13, 6\n(13) - (6) = 7, left: 7, 15\n(15) * (7) = 105, left: 105\n(6) * (9) = 54, left: 54, 13, 6\n(13) * (6) = 78, left: 78, 54\n(78) - (54) = 24, left: 24\nreach 24! expression: ((13 * 6) - (6 * 9))"}, {"input": "6 13 9 6\n", "output": "(13) * (6) = 78, left: 78, 6, 9\n(6) + (78) = 84, left: 84, 9\n(9) + (78) = 87, left: 87, 6\n(6) - (9) = -3, left: -3, 78\n(6) * (9) = 54, left: 54, 78\n(78) - (54) = 24, left: 24\nreach 24! expression: ((13 * 6) - (6 * 9))"}, {"input": "6 13 9 6\n", "output": "(13) + (6) = 19, left: 19, 6, 9\n(19) / (9) = 19/9, left: 19/9, 6\n(13) * (6) = 78, left: 78, 6, 9\n(78) - (6) = 72, left: 72, 9\n(6) * (9) = 54, left: 54, 78\n(78) - (54) = 24, left: 24\nreach 24! expression: ((13 * 6) - (6 * 9))"}, {"input": "6 13 9 6\n", "output": "(13) * (9) = 117, left: 117, 6, 6\n(6) - (6) = 0, left: 0, 117\n(0) - (117) = -117, left: -117\n(13) + (9) = 22, left: 22, 6, 6\n(6) / (6) = 1, left: 1, 13, 9\n(6) / (6) = 1, left: 1, 13, 9\n(13) / (6) = 13/6, left: 13/6, 6, 9\n(13) * (6) = 78, left: 78, 6, 9\n(6) * (9) = 54, left: 54, 78\n(78) - (54) = 24, left: 24\nreach 24! expression: ((13 * 6) - (6 * 9))"}, {"input": "6 13 9 6\n", "output": "(9) / (6) = 3/2, left: 3/2, 13, 6\n(6) * (3/2) = 9, left: 9, 13\n(9) - (13) = -4, left: -4\n(3/2) / (6) = 1/4, left: 1/4, 13\n(3/2) - (6) = -9/2, left: -9/2, 13\n(6) + (9) = 15, left: 15, 13, 6\n(13) / (15) = 13/15, left: 13/15, 6\n(6) * (9) = 54, left: 54, 13, 6\n(13) * (6) = 78, left: 78, 54\n(78) - (54) = 24, left: 24\nreach 24! expression: ((13 * 6) - (6 * 9))"}, {"input": "6 13 9 6\n", "output": "(6) - (6) = 0, left: 0, 13, 9\n(6) * (6) = 36, left: 36, 13, 9\n(6) + (6) = 12, left: 12, 13, 9\n(13) - (9) = 4, left: 4, 12\n(9) / (13) = 9/13, left: 9/13, 6, 6\n(6) - (9/13) = 69/13, left: 69/13, 6\n(13) / (9) = 13/9, left: 13/9, 6, 6\n(9) * (6) = 54, left: 54, 6, 13\n(6) * (13) = 78, left: 78, 54\n(78) - (54) = 24, left: 24\nreach 24! expression: ((6 * 13) - (9 * 6))"}, {"input": "6 13 9 6\n", "output": "(13) + (6) = 19, left: 19, 6, 9\n(6) / (19) = 6/19, left: 6/19, 9\n(6) - (9) = -3, left: -3, 19\n(13) * (6) = 78, left: 78, 6, 9\n(78) - (6) = 72, left: 72, 9\n(9) * (72) = 648, left: 648\n(6) * (78) = 468, left: 468, 9\n(6) / (9) = 2/3, left: 2/3, 78\n(6) * (9) = 54, left: 54, 78\n(78) - (54) = 24, left: 24\nreach 24! expression: ((13 * 6) - (6 * 9))"}, {"input": "6 13 9 6\n", "output": "(13) * (6) = 78, left: 78, 6, 9\n(6) - (78) = -72, left: -72, 9\n(9) / (-72) = -1/8, left: -1/8\n(78) / (9) = 26/3, left: 26/3, 6\n(6) / (26/3) = 9/13, left: 9/13\n(9) * (78) = 702, left: 702, 6\n(702) - (6) = 696, left: 696\n(9) + (78) = 87, left: 87, 6\n(6) * (9) = 54, left: 54, 78\n(78) - (54) = 24, left: 24\nreach 24! expression: ((13 * 6) - (6 * 9))"}, {"input": "3 3 7 11\n", "output": "(3) + (7) = 10, left: 10, 3, 11\n(3) - (10) = -7, left: -7, 11\n(11) - (-7) = 18, left: 18\n(3) + (10) = 13, left: 13, 11\n(13) / (11) = 13/11, left: 13/11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (3 + (3 + 7)))"}, {"input": "3 3 7 11\n", "output": "(3) + (7) = 10, left: 10, 3, 11\n(10) - (3) = 7, left: 7, 11\n(11) / (7) = 11/7, left: 11/7\n(11) - (7) = 4, left: 4\n(3) * (10) = 30, left: 30, 11\n(11) / (30) = 11/30, left: 11/30\n(30) - (11) = 19, left: 19\n(3) + (10) = 13, left: 13, 11\n(13) - (11) = 2, left: 2\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (3 + (3 + 7)))"}, {"input": "3 3 7 11\n", "output": "(3) - (3) = 0, left: 0, 7, 11\n(11) * (0) = 0, left: 0, 7\n(11) + (0) = 11, left: 11, 7\n(7) * (0) = 0, left: 0, 11\n(7) + (0) = 7, left: 7, 11\n(3) / (3) = 1, left: 1, 7, 11\n(1) - (7) = -6, left: -6, 11\n(3) + (3) = 6, left: 6, 7, 11\n(7) + (11) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((3 + 3) + (7 + 11))"}, {"input": "3 3 7 11\n", "output": "(11) - (3) = 8, left: 8, 3, 7\n(3) + (7) = 10, left: 10, 8\n(3) - (11) = -8, left: -8, 3, 7\n(-8) / (3) = -8/3, left: -8/3, 7\n(3) * (-8) = -24, left: -24, 7\n(3) / (11) = 3/11, left: 3/11, 3, 7\n(3/11) / (3) = 1/11, left: 1/11, 7\n(3) + (11) = 14, left: 14, 3, 7\n(3) + (14) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (3 + (3 + 11)))"}, {"input": "3 3 7 11\n", "output": "(3) + (3) = 6, left: 6, 7, 11\n(11) / (6) = 11/6, left: 11/6, 7\n(6) / (11) = 6/11, left: 6/11, 7\n(11) * (6) = 66, left: 66, 7\n(7) + (66) = 73, left: 73\n(66) - (7) = 59, left: 59\n(6) - (11) = -5, left: -5, 7\n(-5) - (7) = -12, left: -12\n(11) + (6) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (11 + (3 + 3)))"}, {"input": "3 3 7 11\n", "output": "(3) - (11) = -8, left: -8, 3, 7\n(7) - (-8) = 15, left: 15, 3\n(15) / (3) = 5, left: 5\n(11) - (3) = 8, left: 8, 3, 7\n(7) / (8) = 7/8, left: 7/8, 3\n(7) / (3) = 7/3, left: 7/3, 8\n(8) + (7/3) = 31/3, left: 31/3\n(3) + (11) = 14, left: 14, 3, 7\n(3) + (7) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((3 + 11) + (3 + 7))"}, {"input": "11 3 1 9\n", "output": "(1) - (11) = -10, left: -10, 3, 9\n(3) / (-10) = -3/10, left: -3/10, 9\n(9) - (-3/10) = 93/10, left: 93/10\n(11) * (1) = 11, left: 11, 3, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (11 * 1)) - 9)"}, {"input": "11 3 1 9\n", "output": "(3) + (9) = 12, left: 12, 11, 1\n(11) / (1) = 11, left: 11, 12\n(12) * (11) = 132, left: 132\n(12) + (11) = 23, left: 23\n(11) + (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((3 + 9) + (11 + 1))"}, {"input": "11 3 1 9\n", "output": "(1) / (9) = 1/9, left: 1/9, 11, 3\n(11) + (1/9) = 100/9, left: 100/9, 3\n(11) - (1/9) = 98/9, left: 98/9, 3\n(1) + (9) = 10, left: 10, 11, 3\n(3) + (10) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (3 + (1 + 9)))"}, {"input": "11 3 1 9\n", "output": "(3) + (9) = 12, left: 12, 11, 1\n(11) - (1) = 10, left: 10, 12\n(12) + (10) = 22, left: 22\n(12) - (10) = 2, left: 2\n(12) * (10) = 120, left: 120\n(11) / (1) = 11, left: 11, 12\n(11) + (1) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: ((3 + 9) + (11 + 1))"}, {"input": "11 3 1 9\n", "output": "(3) / (9) = 1/3, left: 1/3, 11, 1\n(3) - (9) = -6, left: -6, 11, 1\n(11) / (1) = 11, left: 11, -6\n(9) - (3) = 6, left: 6, 11, 1\n(11) / (1) = 11, left: 11, 6\n(3) * (9) = 27, left: 27, 11, 1\n(11) * (27) = 297, left: 297, 1\n(3) + (9) = 12, left: 12, 11, 1\n(1) + (12) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (1 + (3 + 9)))"}, {"input": "11 3 1 9\n", "output": "(1) / (9) = 1/9, left: 1/9, 11, 3\n(3) - (11) = -8, left: -8, 1/9\n(1/9) - (3) = -26/9, left: -26/9, 11\n(3) * (1/9) = 1/3, left: 1/3, 11\n(3) - (1/9) = 26/9, left: 26/9, 11\n(26/9) / (11) = 26/99, left: 26/99\n(1) + (9) = 10, left: 10, 11, 3\n(10) / (3) = 10/3, left: 10/3, 11\n(3) + (10) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (3 + (1 + 9)))"}, {"input": "11 3 1 9\n", "output": "(1) - (11) = -10, left: -10, 3, 9\n(3) - (-10) = 13, left: 13, 9\n(9) - (3) = 6, left: 6, -10\n(11) - (1) = 10, left: 10, 3, 9\n(9) - (3) = 6, left: 6, 10\n(3) * (9) = 27, left: 27, 10\n(10) - (27) = -17, left: -17\n(11) * (1) = 11, left: 11, 3, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (11 * 1)) - 9)"}, {"input": "11 3 1 9\n", "output": "(11) - (1) = 10, left: 10, 3, 9\n(10) / (3) = 10/3, left: 10/3, 9\n(10/3) - (9) = -17/3, left: -17/3\n(3) * (10) = 30, left: 30, 9\n(30) - (9) = 21, left: 21\n(10) - (9) = 1, left: 1, 3\n(11) * (1) = 11, left: 11, 3, 9\n(11) - (3) = 8, left: 8, 9\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (11 * 1)) - 9)"}, {"input": "8 8 2 9\n", "output": "(8) + (8) = 16, left: 16, 2, 9\n(8) / (8) = 1, left: 1, 2, 9\n(9) + (1) = 10, left: 10, 2\n(8) - (8) = 0, left: 0, 2, 9\n(8) * (8) = 64, left: 64, 2, 9\n(8) / (8) = 1, left: 1, 2, 9\n(9) / (2) = 9/2, left: 9/2, 1\n(2) - (8) = -6, left: -6, 8, 9\n(9) + (-6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 + (2 - 8)))"}, {"input": "8 8 2 9\n", "output": "(8) * (2) = 16, left: 16, 8, 9\n(8) + (16) = 24, left: 24, 9\n(24) - (9) = 15, left: 15\n(8) * (9) = 72, left: 72, 16\n(72) / (16) = 9/2, left: 9/2\n(9) - (16) = -7, left: -7, 8\n(2) - (8) = -6, left: -6, 8, 9\n(9) - (-6) = 15, left: 15, 8\n(9) + (-6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 + (2 - 8)))"}, {"input": "8 8 2 9\n", "output": "(8) * (9) = 72, left: 72, 8, 2\n(72) / (8) = 9, left: 9, 2\n(2) * (9) = 18, left: 18\n(72) - (8) = 64, left: 64, 2\n(64) / (2) = 32, left: 32\n(72) / (2) = 36, left: 36, 8\n(9) - (8) = 1, left: 1, 8, 2\n(1) / (2) = 1/2, left: 1/2, 8\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (9 - 8)))"}, {"input": "8 8 2 9\n", "output": "(8) * (9) = 72, left: 72, 8, 2\n(8) + (2) = 10, left: 10, 72\n(8) / (9) = 8/9, left: 8/9, 8, 2\n(2) - (8/9) = 10/9, left: 10/9, 8\n(8/9) - (2) = -10/9, left: -10/9, 8\n(9) / (8) = 9/8, left: 9/8, 8, 2\n(2) / (8) = 1/4, left: 1/4, 9/8\n(8) - (9) = -1, left: -1, 8, 2\n(2) - (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 - (8 - 9)))"}, {"input": "8 8 2 9\n", "output": "(8) + (8) = 16, left: 16, 2, 9\n(16) - (2) = 14, left: 14, 9\n(8) / (8) = 1, left: 1, 2, 9\n(2) / (1) = 2, left: 2, 9\n(1) / (2) = 1/2, left: 1/2, 9\n(9) - (1/2) = 17/2, left: 17/2\n(8) / (8) = 1, left: 1, 2, 9\n(9) - (2) = 7, left: 7, 1\n(8) + (2) = 10, left: 10, 8, 9\n(9) / (8) = 9/8, left: 9/8, 10\n(10) + (9/8) = 89/8, left: 89/8\n(2) - (8) = -6, left: -6, 8, 9\n(9) + (-6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 + (2 - 8)))"}, {"input": "8 11 9 2\n", "output": "(9) / (11) = 9/11, left: 9/11, 8, 2\n(8) - (9/11) = 79/11, left: 79/11, 2\n(11) / (9) = 11/9, left: 11/9, 8, 2\n(11) + (9) = 20, left: 20, 8, 2\n(20) - (8) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 9) - 8))"}, {"input": "8 11 9 2\n", "output": "(2) / (8) = 1/4, left: 1/4, 11, 9\n(11) + (1/4) = 45/4, left: 45/4, 9\n(9) + (1/4) = 37/4, left: 37/4, 11\n(9) - (1/4) = 35/4, left: 35/4, 11\n(8) * (2) = 16, left: 16, 11, 9\n(16) / (9) = 16/9, left: 16/9, 11\n(9) / (16) = 9/16, left: 9/16, 11\n(8) / (2) = 4, left: 4, 11, 9\n(11) + (4) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (11 + (8 / 2)))"}, {"input": "8 11 9 2\n", "output": "(9) + (2) = 11, left: 11, 8, 11\n(11) / (8) = 11/8, left: 11/8, 11\n(2) / (9) = 2/9, left: 2/9, 8, 11\n(9) / (2) = 9/2, left: 9/2, 8, 11\n(11) / (9) = 11/9, left: 11/9, 8, 2\n(11) + (9) = 20, left: 20, 8, 2\n(8) * (20) = 160, left: 160, 2\n(8) + (20) = 28, left: 28, 2\n(20) - (8) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 9) - 8))"}, {"input": "8 11 9 2\n", "output": "(2) - (11) = -9, left: -9, 8, 9\n(11) - (2) = 9, left: 9, 8, 9\n(8) - (2) = 6, left: 6, 11, 9\n(9) + (6) = 15, left: 15, 11\n(2) - (8) = -6, left: -6, 11, 9\n(8) * (2) = 16, left: 16, 11, 9\n(9) + (16) = 25, left: 25, 11\n(8) / (2) = 4, left: 4, 11, 9\n(11) + (9) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((8 / 2) + (11 + 9))"}, {"input": "8 11 9 2\n", "output": "(2) / (9) = 2/9, left: 2/9, 8, 11\n(11) - (2/9) = 97/9, left: 97/9, 8\n(9) - (2) = 7, left: 7, 8, 11\n(7) - (8) = -1, left: -1, 11\n(2) - (9) = -7, left: -7, 8, 11\n(9) + (2) = 11, left: 11, 8, 11\n(8) + (11) = 19, left: 19, 11\n(11) - (8) = 3, left: 3, 9, 2\n(9) + (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 + (11 - 8)))"}, {"input": "8 11 9 2\n", "output": "(11) - (9) = 2, left: 2, 8, 2\n(9) / (11) = 9/11, left: 9/11, 8, 2\n(8) * (2) = 16, left: 16, 9/11\n(9/11) / (16) = 9/176, left: 9/176\n(8) + (9/11) = 97/11, left: 97/11, 2\n(11) / (9) = 11/9, left: 11/9, 8, 2\n(11) + (9) = 20, left: 20, 8, 2\n(8) - (20) = -12, left: -12, 2\n(20) - (8) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 9) - 8))"}, {"input": "8 11 9 2\n", "output": "(11) + (2) = 13, left: 13, 8, 9\n(2) / (11) = 2/11, left: 2/11, 8, 9\n(8) + (9) = 17, left: 17, 2/11\n(11) / (2) = 11/2, left: 11/2, 8, 9\n(11) * (2) = 22, left: 22, 8, 9\n(8) + (22) = 30, left: 30, 9\n(8) - (2) = 6, left: 6, 11, 9\n(9) - (6) = 3, left: 3, 11\n(2) - (8) = -6, left: -6, 11, 9\n(8) * (2) = 16, left: 16, 11, 9\n(9) - (11) = -2, left: -2, 16\n(8) / (2) = 4, left: 4, 11, 9\n(11) + (9) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((8 / 2) + (11 + 9))"}, {"input": "10 13 7 12\n", "output": "(10) + (12) = 22, left: 22, 13, 7\n(13) - (7) = 6, left: 6, 22\n(10) * (12) = 120, left: 120, 13, 7\n(12) / (10) = 6/5, left: 6/5, 13, 7\n(13) + (7) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (13 + 7))"}, {"input": "10 13 7 12\n", "output": "(10) * (13) = 130, left: 130, 7, 12\n(10) - (13) = -3, left: -3, 7, 12\n(13) / (7) = 13/7, left: 13/7, 10, 12\n(13) + (7) = 20, left: 20, 10, 12\n(12) * (20) = 240, left: 240, 10\n(240) / (10) = 24, left: 24\nreach 24! expression: ((12 * (13 + 7)) / 10)"}, {"input": "10 13 7 12\n", "output": "(10) - (12) = -2, left: -2, 13, 7\n(7) * (-2) = -14, left: -14, 13\n(13) * (-14) = -182, left: -182\n(12) / (10) = 6/5, left: 6/5, 13, 7\n(13) + (7) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (13 + 7))"}, {"input": "10 13 7 12\n", "output": "(10) * (13) = 130, left: 130, 7, 12\n(12) - (7) = 5, left: 5, 10, 13\n(10) / (7) = 10/7, left: 10/7, 13, 12\n(13) + (7) = 20, left: 20, 10, 12\n(12) * (20) = 240, left: 240, 10\n(240) / (10) = 24, left: 24\nreach 24! expression: ((12 * (13 + 7)) / 10)"}, {"input": "10 13 7 12\n", "output": "(10) + (13) = 23, left: 23, 7, 12\n(10) * (12) = 120, left: 120, 13, 7\n(7) / (13) = 7/13, left: 7/13, 120\n(12) / (10) = 6/5, left: 6/5, 13, 7\n(13) + (7) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (13 + 7))"}, {"input": "10 13 7 12\n", "output": "(10) + (12) = 22, left: 22, 13, 7\n(22) / (13) = 22/13, left: 22/13, 7\n(22/13) / (7) = 22/91, left: 22/91\n(13) * (7) = 91, left: 91, 22\n(7) / (22) = 7/22, left: 7/22, 13\n(10) * (12) = 120, left: 120, 13, 7\n(12) / (10) = 6/5, left: 6/5, 13, 7\n(6/5) / (13) = 6/65, left: 6/65, 7\n(13) + (7) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (13 + 7))"}, {"input": "10 13 7 12\n", "output": "(13) - (10) = 3, left: 3, 7, 12\n(7) * (12) = 84, left: 84, 3\n(13) * (7) = 91, left: 91, 10, 12\n(91) / (12) = 91/12, left: 91/12, 10\n(10) - (91) = -81, left: -81, 12\n(13) - (7) = 6, left: 6, 10, 12\n(6) - (12) = -6, left: -6, 10\n(13) + (7) = 20, left: 20, 10, 12\n(12) * (20) = 240, left: 240, 10\n(240) / (10) = 24, left: 24\nreach 24! expression: ((12 * (13 + 7)) / 10)"}, {"input": "10 13 7 12\n", "output": "(10) + (13) = 23, left: 23, 7, 12\n(13) - (10) = 3, left: 3, 7, 12\n(7) + (12) = 19, left: 19, 10, 13\n(12) - (13) = -1, left: -1, 10, 7\n(13) + (12) = 25, left: 25, 10, 7\n(10) + (7) = 17, left: 17, 13, 12\n(12) / (17) = 12/17, left: 12/17, 13\n(13) + (7) = 20, left: 20, 10, 12\n(12) * (20) = 240, left: 240, 10\n(240) / (10) = 24, left: 24\nreach 24! expression: ((12 * (13 + 7)) / 10)"}, {"input": "10 13 7 12\n", "output": "(10) * (13) = 130, left: 130, 7, 12\n(10) / (13) = 10/13, left: 10/13, 7, 12\n(7) / (12) = 7/12, left: 7/12, 10/13\n(10) + (13) = 23, left: 23, 7, 12\n(12) - (23) = -11, left: -11, 7\n(7) * (-11) = -77, left: -77\n(12) - (10) = 2, left: 2, 13, 7\n(12) / (10) = 6/5, left: 6/5, 13, 7\n(13) + (7) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (13 + 7))"}, {"input": "10 13 7 12\n", "output": "(10) * (12) = 120, left: 120, 13, 7\n(7) - (13) = -6, left: -6, 120\n(7) - (120) = -113, left: -113, 13\n(10) - (12) = -2, left: -2, 13, 7\n(10) + (12) = 22, left: 22, 13, 7\n(7) * (22) = 154, left: 154, 13\n(13) - (154) = -141, left: -141\n(12) / (10) = 6/5, left: 6/5, 13, 7\n(13) + (7) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (13 + 7))"}, {"input": "4 4 1 4\n", "output": "(4) - (1) = 3, left: 3, 4, 4\n(3) - (4) = -1, left: -1, 4\n(4) + (-1) = 3, left: 3\n(4) / (3) = 4/3, left: 4/3, 4\n(4) + (3) = 7, left: 7, 4\n(4) / (3) = 4/3, left: 4/3, 4\n(4) + (4/3) = 16/3, left: 16/3\n(4) * (4/3) = 16/3, left: 16/3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((4 - 1) * (4 + 4))"}, {"input": "4 4 1 4\n", "output": "(4) * (1) = 4, left: 4, 4, 4\n(4) * (4) = 16, left: 16, 4\n(4) / (1) = 4, left: 4, 4, 4\n(1) / (4) = 1/4, left: 1/4, 4, 4\n(1) - (4) = -3, left: -3, 4, 4\n(4) - (4) = 0, left: 0, -3\n(-3) + (0) = -3, left: -3\n(4) - (1) = 3, left: 3, 4, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((4 - 1) * (4 + 4))"}, {"input": "4 4 1 4\n", "output": "(4) - (4) = 0, left: 0, 1, 4\n(4) - (0) = 4, left: 4, 1\n(4) - (4) = 0, left: 0, 1, 4\n(4) + (0) = 4, left: 4, 1\n(1) - (4) = -3, left: -3\n(4) / (4) = 1, left: 1, 1, 4\n(4) + (4) = 8, left: 8, 1, 4\n(1) * (4) = 4, left: 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (4 - 1))"}, {"input": "4 4 1 4\n", "output": "(1) - (4) = -3, left: -3, 4, 4\n(4) * (4) = 16, left: 16, -3\n(4) + (-3) = 1, left: 1, 4\n(4) / (1) = 4, left: 4\n(4) + (-3) = 1, left: 1, 4\n(-3) / (4) = -3/4, left: -3/4, 4\n(1) / (4) = 1/4, left: 1/4, 4, 4\n(4) + (1) = 5, left: 5, 4, 4\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (4 + 1)))"}, {"input": "4 4 1 4\n", "output": "(1) / (4) = 1/4, left: 1/4, 4, 4\n(4) - (1/4) = 15/4, left: 15/4, 4\n(4) / (1/4) = 16, left: 16, 4\n(4) * (1/4) = 1, left: 1, 4\n(4) / (4) = 1, left: 1, 1/4\n(4) - (4) = 0, left: 0, 1/4\n(1/4) * (0) = 0, left: 0\n(4) - (1) = 3, left: 3, 4, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((4 - 1) * (4 + 4))"}, {"input": "4 4 1 4\n", "output": "(4) - (4) = 0, left: 0, 1, 4\n(1) - (0) = 1, left: 1, 4\n(1) - (4) = -3, left: -3\n(4) * (4) = 16, left: 16, 1, 4\n(1) + (16) = 17, left: 17, 4\n(4) - (4) = 0, left: 0, 1, 4\n(1) * (0) = 0, left: 0, 4\n(4) - (1) = 3, left: 3, 0\n(4) / (4) = 1, left: 1, 1, 4\n(4) - (1) = 3, left: 3, 1\n(4) + (4) = 8, left: 8, 1, 4\n(4) * (8) = 32, left: 32, 1\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (4 - 1))"}, {"input": "4 4 1 4\n", "output": "(4) - (1) = 3, left: 3, 4, 4\n(3) - (4) = -1, left: -1, 4\n(4) / (3) = 4/3, left: 4/3, 4\n(4) * (3) = 12, left: 12, 4\n(12) / (4) = 3, left: 3\n(12) - (4) = 8, left: 8\n(3) / (4) = 3/4, left: 3/4, 4\n(4) - (3) = 1, left: 1, 4\n(1) - (4) = -3, left: -3\n(3) - (4) = -1, left: -1, 4\n(4) * (3) = 12, left: 12, 4\n(4) / (3) = 4/3, left: 4/3, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((4 - 1) * (4 + 4))"}, {"input": "4 4 1 4\n", "output": "(4) * (1) = 4, left: 4, 4, 4\n(4) + (4) = 8, left: 8, 4\n(4) / (4) = 1, left: 1, 4\n(4) / (1) = 4, left: 4, 4, 4\n(4) / (4) = 1, left: 1, 4\n(4) / (1) = 4, left: 4\n(4) + (4) = 8, left: 8, 4\n(1) / (4) = 1/4, left: 1/4, 4, 4\n(4) / (4) = 1, left: 1, 1/4\n(1) - (4) = -3, left: -3, 4, 4\n(4) / (-3) = -4/3, left: -4/3, 4\n(4) - (1) = 3, left: 3, 4, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((4 - 1) * (4 + 4))"}, {"input": "13 13 10 8\n", "output": "(13) * (8) = 104, left: 104, 13, 10\n(13) - (8) = 5, left: 5, 13, 10\n(13) + (10) = 23, left: 23, 5\n(13) + (8) = 21, left: 21, 13, 10\n(10) - (21) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (10 - (13 + 8)))"}, {"input": "13 13 10 8\n", "output": "(13) / (8) = 13/8, left: 13/8, 13, 10\n(10) * (13/8) = 65/4, left: 65/4, 13\n(13) * (8) = 104, left: 104, 13, 10\n(13) + (8) = 21, left: 21, 13, 10\n(13) - (10) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((13 + 8) + (13 - 10))"}, {"input": "13 13 10 8\n", "output": "(13) - (13) = 0, left: 0, 10, 8\n(8) + (0) = 8, left: 8, 10\n(13) / (13) = 1, left: 1, 10, 8\n(13) + (13) = 26, left: 26, 10, 8\n(10) - (8) = 2, left: 2, 26\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + 13) - (10 - 8))"}, {"input": "13 13 10 8\n", "output": "(13) * (10) = 130, left: 130, 13, 8\n(13) / (8) = 13/8, left: 13/8, 130\n(13) / (10) = 13/10, left: 13/10, 13, 8\n(10) - (13) = -3, left: -3, 13, 8\n(13) + (8) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((13 + 8) - (10 - 13))"}, {"input": "13 13 10 8\n", "output": "(8) / (13) = 8/13, left: 8/13, 13, 10\n(13) * (8/13) = 8, left: 8, 10\n(8) - (13) = -5, left: -5, 13, 10\n(13) + (8) = 21, left: 21, 13, 10\n(10) - (13) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((13 + 8) - (10 - 13))"}, {"input": "13 13 10 8\n", "output": "(13) * (10) = 130, left: 130, 13, 8\n(13) / (8) = 13/8, left: 13/8, 130\n(13/8) - (130) = -1027/8, left: -1027/8\n(10) / (13) = 10/13, left: 10/13, 13, 8\n(13) / (8) = 13/8, left: 13/8, 10/13\n(13) / (10) = 13/10, left: 13/10, 13, 8\n(13) / (13/10) = 10, left: 10, 8\n(10) - (13) = -3, left: -3, 13, 8\n(13) + (8) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((13 + 8) - (10 - 13))"}, {"input": "13 13 10 8\n", "output": "(13) / (8) = 13/8, left: 13/8, 13, 10\n(10) - (13) = -3, left: -3, 13/8\n(13) * (8) = 104, left: 104, 13, 10\n(104) - (13) = 91, left: 91, 10\n(13) * (10) = 130, left: 130, 104\n(8) - (13) = -5, left: -5, 13, 10\n(13) - (8) = 5, left: 5, 13, 10\n(13) + (8) = 21, left: 21, 13, 10\n(13) - (10) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((13 + 8) + (13 - 10))"}, {"input": "13 13 10 8\n", "output": "(13) / (8) = 13/8, left: 13/8, 13, 10\n(10) + (13/8) = 93/8, left: 93/8, 13\n(13) * (8) = 104, left: 104, 13, 10\n(104) / (10) = 52/5, left: 52/5, 13\n(52/5) / (13) = 4/5, left: 4/5\n(13) - (8) = 5, left: 5, 13, 10\n(10) - (5) = 5, left: 5, 13\n(13) + (8) = 21, left: 21, 13, 10\n(10) - (21) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (10 - (13 + 8)))"}, {"input": "13 13 10 8\n", "output": "(13) * (8) = 104, left: 104, 13, 10\n(13) / (10) = 13/10, left: 13/10, 104\n(8) / (13) = 8/13, left: 8/13, 13, 10\n(10) / (8/13) = 65/4, left: 65/4, 13\n(8) - (13) = -5, left: -5, 13, 10\n(13) - (10) = 3, left: 3, -5\n(-5) / (3) = -5/3, left: -5/3\n(13) + (8) = 21, left: 21, 13, 10\n(10) - (13) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((13 + 8) - (10 - 13))"}, {"input": "13 13 10 8\n", "output": "(13) - (13) = 0, left: 0, 10, 8\n(13) / (13) = 1, left: 1, 10, 8\n(13) * (13) = 169, left: 169, 10, 8\n(10) - (8) = 2, left: 2, 169\n(13) - (13) = 0, left: 0, 10, 8\n(8) + (0) = 8, left: 8, 10\n(10) * (8) = 80, left: 80\n(13) + (13) = 26, left: 26, 10, 8\n(10) - (8) = 2, left: 2, 26\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + 13) - (10 - 8))"}, {"input": "3 5 3 7\n", "output": "(3) + (7) = 10, left: 10, 3, 5\n(5) + (10) = 15, left: 15, 3\n(7) / (3) = 7/3, left: 7/3, 3, 5\n(5) / (7/3) = 15/7, left: 15/7, 3\n(3) * (7) = 21, left: 21, 3, 5\n(3) * (5) = 15, left: 15, 21\n(21) / (3) = 7, left: 7, 5\n(5) * (3) = 15, left: 15, 3, 7\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 3) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) + (5) = 8, left: 8, 3, 7\n(7) + (8) = 15, left: 15, 3\n(7) - (8) = -1, left: -1, 3\n(3) / (7) = 3/7, left: 3/7, 8\n(7) - (3) = 4, left: 4, 8\n(3) * (5) = 15, left: 15, 3, 7\n(7) / (3) = 7/3, left: 7/3, 15\n(15) / (3) = 5, left: 5, 7\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 5) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) + (7) = 10, left: 10, 3, 5\n(3) - (7) = -4, left: -4, 3, 5\n(7) - (3) = 4, left: 4, 3, 5\n(3) / (3) = 1, left: 1, 5, 7\n(5) - (3) = 2, left: 2, 3, 7\n(3) / (5) = 3/5, left: 3/5, 3, 7\n(7) / (3/5) = 35/3, left: 35/3, 3\n(5) * (3) = 15, left: 15, 3, 7\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 3) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) + (7) = 10, left: 10, 5, 3\n(3) + (7) = 10, left: 10, 3, 5\n(3) + (5) = 8, left: 8, 10\n(5) * (7) = 35, left: 35, 3, 3\n(5) / (7) = 5/7, left: 5/7, 3, 3\n(3) / (3) = 1, left: 1, 5, 7\n(3) - (3) = 0, left: 0, 5, 7\n(3) * (5) = 15, left: 15, 3, 7\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 5) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) / (3) = 1, left: 1, 5, 7\n(3) - (3) = 0, left: 0, 5, 7\n(5) - (7) = -2, left: -2, 0\n(3) / (7) = 3/7, left: 3/7, 3, 5\n(3) - (7) = -4, left: -4, 3, 5\n(7) / (3) = 7/3, left: 7/3, 3, 5\n(5) / (3) = 5/3, left: 5/3, 3, 7\n(3) * (5) = 15, left: 15, 3, 7\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 5) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) + (7) = 10, left: 10, 3, 5\n(3) + (5) = 8, left: 8, 10\n(3) - (7) = -4, left: -4, 3, 5\n(7) / (3) = 7/3, left: 7/3, 3, 5\n(3) * (5) = 15, left: 15, 7/3\n(7) - (3) = 4, left: 4, 3, 5\n(3) / (5) = 3/5, left: 3/5, 4\n(5) + (3) = 8, left: 8, 3, 7\n(3) * (8) = 24, left: 24, 7\n(5) - (3) = 2, left: 2, 3, 7\n(5) * (3) = 15, left: 15, 3, 7\n(7) / (3) = 7/3, left: 7/3, 15\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 3) - 7))"}, {"input": "3 5 3 7\n", "output": "(7) - (3) = 4, left: 4, 5, 3\n(7) / (3) = 7/3, left: 7/3, 5, 3\n(3) * (7) = 21, left: 21, 3, 5\n(7) - (3) = 4, left: 4, 3, 5\n(7) / (5) = 7/5, left: 7/5, 3, 3\n(7) - (5) = 2, left: 2, 3, 3\n(3) / (3) = 1, left: 1, 5, 7\n(7) - (1) = 6, left: 6, 5\n(3) - (5) = -2, left: -2, 3, 7\n(3) / (5) = 3/5, left: 3/5, 3, 7\n(7) - (3) = 4, left: 4, 3/5\n(3) * (5) = 15, left: 15, 3, 7\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 5) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) / (3) = 1, left: 1, 5, 7\n(3) - (3) = 0, left: 0, 5, 7\n(3) / (7) = 3/7, left: 3/7, 3, 5\n(3) - (7) = -4, left: -4, 3, 5\n(5) / (3) = 5/3, left: 5/3, 3, 7\n(7) + (5/3) = 26/3, left: 26/3, 3\n(3) + (5) = 8, left: 8, 3, 7\n(7) - (8) = -1, left: -1, 3\n(-1) - (3) = -4, left: -4\n(3) - (5) = -2, left: -2, 3, 7\n(5) - (3) = 2, left: 2, 3, 7\n(3) * (5) = 15, left: 15, 3, 7\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 5) - 7))"}, {"input": "3 5 3 7\n", "output": "(7) / (3) = 7/3, left: 7/3, 3, 5\n(5) - (3) = 2, left: 2, 7/3\n(3) / (7) = 3/7, left: 3/7, 3, 5\n(3) + (3) = 6, left: 6, 5, 7\n(6) - (5) = 1, left: 1, 7\n(3) / (3) = 1, left: 1, 5, 7\n(1) / (7) = 1/7, left: 1/7, 5\n(5) + (7) = 12, left: 12, 1\n(3) * (3) = 9, left: 9, 5, 7\n(3) / (5) = 3/5, left: 3/5, 3, 7\n(7) * (3/5) = 21/5, left: 21/5, 3\n(5) * (3) = 15, left: 15, 3, 7\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 3) - 7))"}, {"input": "3 11 9 9\n", "output": "(9) / (3) = 3, left: 3, 11, 9\n(11) / (9) = 11/9, left: 11/9, 3\n(11) + (9) = 20, left: 20, 3\n(20) - (3) = 17, left: 17\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (9 / 3)) - 9)"}, {"input": "3 11 9 9\n", "output": "(3) * (9) = 27, left: 27, 11, 9\n(27) - (11) = 16, left: 16, 9\n(3) / (9) = 1/3, left: 1/3, 11, 9\n(1/3) - (11) = -32/3, left: -32/3, 9\n(11) / (1/3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 / (3 / 9)) - 9)"}, {"input": "3 11 9 9\n", "output": "(9) / (9) = 1, left: 1, 3, 11\n(3) - (11) = -8, left: -8, 1\n(1) * (-8) = -8, left: -8\n(11) + (1) = 12, left: 12, 3\n(9) + (9) = 18, left: 18, 3, 11\n(9) - (9) = 0, left: 0, 3, 11\n(9) - (9) = 0, left: 0, 3, 11\n(9) / (3) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (9 / 3)) - 9)"}, {"input": "3 11 9 9\n", "output": "(9) / (3) = 3, left: 3, 11, 9\n(11) / (9) = 11/9, left: 11/9, 3\n(9) / (11) = 9/11, left: 9/11, 3\n(11) * (9) = 99, left: 99, 3\n(99) / (3) = 33, left: 33\n(9) - (11) = -2, left: -2, 3\n(11) + (3) = 14, left: 14, 9\n(11) * (3) = 33, left: 33, 9\n(33) / (9) = 11/3, left: 11/3\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (9 / 3)) - 9)"}, {"input": "3 11 9 9\n", "output": "(3) * (9) = 27, left: 27, 11, 9\n(9) + (27) = 36, left: 36, 11\n(27) - (9) = 18, left: 18, 11\n(9) - (11) = -2, left: -2, 27\n(27) - (11) = 16, left: 16, 9\n(11) / (27) = 11/27, left: 11/27, 9\n(11) * (27) = 297, left: 297, 9\n(9) / (3) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (9 / 3)) - 9)"}, {"input": "3 11 9 9\n", "output": "(9) - (11) = -2, left: -2, 3, 9\n(9) * (-2) = -18, left: -18, 3\n(-2) / (3) = -2/3, left: -2/3, 9\n(3) + (-2) = 1, left: 1, 9\n(3) * (-2) = -6, left: -6, 9\n(3) - (9) = -6, left: -6, -2\n(11) - (9) = 2, left: 2, 3, 9\n(9) - (3) = 6, left: 6, 2\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (3 + 9))"}, {"input": "3 11 9 9\n", "output": "(3) * (9) = 27, left: 27, 11, 9\n(11) * (27) = 297, left: 297, 9\n(27) / (9) = 3, left: 3, 11\n(9) - (27) = -18, left: -18, 11\n(9) + (27) = 36, left: 36, 11\n(11) - (36) = -25, left: -25\n(3) / (9) = 1/3, left: 1/3, 11, 9\n(1/3) - (11) = -32/3, left: -32/3, 9\n(11) / (1/3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 / (3 / 9)) - 9)"}, {"input": "3 11 9 9\n", "output": "(9) / (9) = 1, left: 1, 3, 11\n(3) * (11) = 33, left: 33, 1\n(11) / (1) = 11, left: 11, 3\n(3) / (11) = 3/11, left: 3/11\n(9) / (9) = 1, left: 1, 3, 11\n(9) + (9) = 18, left: 18, 3, 11\n(3) * (11) = 33, left: 33, 18\n(9) - (9) = 0, left: 0, 3, 11\n(0) - (3) = -3, left: -3, 11\n(9) - (9) = 0, left: 0, 3, 11\n(9) / (3) = 3, left: 3, 11, 9\n(9) / (3) = 3, left: 3, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (9 / 3)) - 9)"}, {"input": "7 4 8 11\n", "output": "(7) * (4) = 28, left: 28, 8, 11\n(28) - (11) = 17, left: 17, 8\n(7) + (4) = 11, left: 11, 8, 11\n(7) / (4) = 7/4, left: 7/4, 8, 11\n(11) - (7/4) = 37/4, left: 37/4, 8\n(7) / (11) = 7/11, left: 7/11, 4, 8\n(7) + (11) = 18, left: 18, 4, 8\n(11) - (7) = 4, left: 4, 4, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (11 - 7)))"}, {"input": "7 4 8 11\n", "output": "(11) - (7) = 4, left: 4, 4, 8\n(4) - (8) = -4, left: -4, 4\n(4) / (-4) = -1, left: -1\n(4) / (8) = 1/2, left: 1/2, 4\n(8) - (4) = 4, left: 4, 4\n(4) - (8) = -4, left: -4, 4\n(4) / (4) = 1, left: 1, 8\n(4) - (4) = 0, left: 0, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (11 - 7)))"}, {"input": "7 4 8 11\n", "output": "(7) / (8) = 7/8, left: 7/8, 4, 11\n(4) - (7/8) = 25/8, left: 25/8, 11\n(11) / (25/8) = 88/25, left: 88/25\n(8) / (7) = 8/7, left: 8/7, 4, 11\n(11) / (4) = 11/4, left: 11/4, 8/7\n(8) / (11) = 8/11, left: 8/11, 7, 4\n(7) + (4) = 11, left: 11, 8, 11\n(7) - (11) = -4, left: -4, 4, 8\n(4) * (-4) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (4 * (7 - 11)))"}, {"input": "7 4 8 11\n", "output": "(8) - (4) = 4, left: 4, 7, 11\n(4) - (7) = -3, left: -3, 11\n(11) - (4) = 7, left: 7, 7, 8\n(7) + (8) = 15, left: 15, 4, 11\n(7) * (8) = 56, left: 56, 4, 11\n(7) - (8) = -1, left: -1, 4, 11\n(8) * (11) = 88, left: 88, 7, 4\n(11) - (7) = 4, left: 4, 4, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (11 - 7)))"}, {"input": "7 4 8 11\n", "output": "(11) / (8) = 11/8, left: 11/8, 7, 4\n(4) * (11) = 44, left: 44, 7, 8\n(7) - (4) = 3, left: 3, 8, 11\n(11) + (3) = 14, left: 14, 8\n(4) / (7) = 4/7, left: 4/7, 8, 11\n(4) + (8) = 12, left: 12, 7, 11\n(7) * (12) = 84, left: 84, 11\n(7) - (11) = -4, left: -4, 4, 8\n(4) * (-4) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (4 * (7 - 11)))"}, {"input": "7 4 8 11\n", "output": "(4) / (11) = 4/11, left: 4/11, 7, 8\n(11) - (4) = 7, left: 7, 7, 8\n(4) - (11) = -7, left: -7, 7, 8\n(7) + (8) = 15, left: 15, -7\n(8) * (-7) = -56, left: -56, 7\n(7) / (-56) = -1/8, left: -1/8\n(8) + (11) = 19, left: 19, 7, 4\n(8) - (11) = -3, left: -3, 7, 4\n(7) + (-3) = 4, left: 4, 4\n(8) * (11) = 88, left: 88, 7, 4\n(4) / (88) = 1/22, left: 1/22, 7\n(11) - (7) = 4, left: 4, 4, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (11 - 7)))"}, {"input": "10 3 6 1\n", "output": "(10) / (6) = 5/3, left: 5/3, 3, 1\n(3) + (6) = 9, left: 9, 10, 1\n(1) / (9) = 1/9, left: 1/9, 10\n(3) / (6) = 1/2, left: 1/2, 10, 1\n(1) - (1/2) = 1/2, left: 1/2, 10\n(3) - (6) = -3, left: -3, 10, 1\n(1) + (-3) = -2, left: -2, 10\n(10) / (1) = 10, left: 10, 3, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (10 / 1)) - 6)"}, {"input": "10 3 6 1\n", "output": "(6) + (1) = 7, left: 7, 10, 3\n(10) * (7) = 70, left: 70, 3\n(3) / (10) = 3/10, left: 3/10, 7\n(6) * (1) = 6, left: 6, 10, 3\n(10) - (6) = 4, left: 4, 3\n(3) * (4) = 12, left: 12\n(4) / (3) = 4/3, left: 4/3\n(3) - (6) = -3, left: -3, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (6 * 1))"}, {"input": "10 3 6 1\n", "output": "(10) / (3) = 10/3, left: 10/3, 6, 1\n(1) - (10/3) = -7/3, left: -7/3, 6\n(-7/3) - (6) = -25/3, left: -25/3\n(10/3) / (6) = 5/9, left: 5/9, 1\n(3) - (10) = -7, left: -7, 6, 1\n(3) / (10) = 3/10, left: 3/10, 6, 1\n(6) * (3/10) = 9/5, left: 9/5, 1\n(10) * (3) = 30, left: 30, 6, 1\n(1) * (30) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((1 * (10 * 3)) - 6)"}, {"input": "10 3 6 1\n", "output": "(10) - (6) = 4, left: 4, 3, 1\n(6) - (10) = -4, left: -4, 3, 1\n(3) + (1) = 4, left: 4, -4\n(1) + (-4) = -3, left: -3, 3\n(1) / (-4) = -1/4, left: -1/4, 3\n(3) * (-1/4) = -3/4, left: -3/4\n(10) - (1) = 9, left: 9, 3, 6\n(10) * (1) = 10, left: 10, 3, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (10 * 1)) - 6)"}, {"input": "10 3 6 1\n", "output": "(10) * (6) = 60, left: 60, 3, 1\n(6) / (10) = 3/5, left: 3/5, 3, 1\n(3) - (1) = 2, left: 2, 3/5\n(3) * (3/5) = 9/5, left: 9/5, 1\n(10) + (6) = 16, left: 16, 3, 1\n(1) - (16) = -15, left: -15, 3\n(6) - (10) = -4, left: -4, 3, 1\n(6) / (1) = 6, left: 6, 10, 3\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (6 / 1))"}, {"input": "10 3 6 1\n", "output": "(6) - (10) = -4, left: -4, 3, 1\n(10) + (6) = 16, left: 16, 3, 1\n(3) / (1) = 3, left: 3, 16\n(10) / (6) = 5/3, left: 5/3, 3, 1\n(10) - (6) = 4, left: 4, 3, 1\n(6) - (3) = 3, left: 3, 10, 1\n(1) / (3) = 1/3, left: 1/3, 10\n(3) + (6) = 9, left: 9, 10, 1\n(3) * (6) = 18, left: 18, 10, 1\n(6) / (3) = 2, left: 2, 10, 1\n(3) - (6) = -3, left: -3, 10, 1\n(10) / (1) = 10, left: 10, 3, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (10 / 1)) - 6)"}, {"input": "7 2 8 2\n", "output": "(8) / (7) = 8/7, left: 8/7, 2, 2\n(7) - (8) = -1, left: -1, 2, 2\n(7) / (8) = 7/8, left: 7/8, 2, 2\n(2) + (2) = 4, left: 4, 7/8\n(8) - (7) = 1, left: 1, 2, 2\n(7) + (8) = 15, left: 15, 2, 2\n(2) - (7) = -5, left: -5, 2, 8\n(7) * (2) = 14, left: 14, 2, 8\n(2) + (8) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 * 2) + (2 + 8))"}, {"input": "7 2 8 2\n", "output": "(7) + (2) = 9, left: 9, 8, 2\n(2) / (9) = 2/9, left: 2/9, 8\n(7) / (2) = 7/2, left: 7/2, 8, 2\n(8) - (7/2) = 9/2, left: 9/2, 2\n(8) - (2) = 6, left: 6, 7/2\n(7) - (2) = 5, left: 5, 8, 2\n(8) / (5) = 8/5, left: 8/5, 2\n(2) + (8/5) = 18/5, left: 18/5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 - 2) - 2))"}, {"input": "7 2 8 2\n", "output": "(7) * (8) = 56, left: 56, 2, 2\n(2) / (2) = 1, left: 1, 56\n(7) / (8) = 7/8, left: 7/8, 2, 2\n(2) / (2) = 1, left: 1, 7/8\n(8) / (7) = 8/7, left: 8/7, 2, 2\n(2) - (2) = 0, left: 0, 8/7\n(7) - (8) = -1, left: -1, 2, 2\n(7) * (2) = 14, left: 14, 8, 2\n(8) + (14) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (8 + (7 * 2)))"}, {"input": "7 2 8 2\n", "output": "(7) + (8) = 15, left: 15, 2, 2\n(7) - (8) = -1, left: -1, 2, 2\n(2) * (-1) = -2, left: -2, 2\n(7) * (8) = 56, left: 56, 2, 2\n(2) * (56) = 112, left: 112, 2\n(8) / (7) = 8/7, left: 8/7, 2, 2\n(2) + (2) = 4, left: 4, 8/7\n(7) * (2) = 14, left: 14, 2, 8\n(8) + (14) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (8 + (7 * 2)))"}, {"input": "7 2 8 2\n", "output": "(7) / (2) = 7/2, left: 7/2, 8, 2\n(8) + (7/2) = 23/2, left: 23/2, 2\n(2) / (8) = 1/4, left: 1/4, 7/2\n(2) - (7) = -5, left: -5, 8, 2\n(2) - (8) = -6, left: -6, -5\n(-6) / (-5) = 6/5, left: 6/5\n(7) + (2) = 9, left: 9, 8, 2\n(7) * (2) = 14, left: 14, 8, 2\n(8) + (14) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (8 + (7 * 2)))"}, {"input": "7 2 8 2\n", "output": "(7) + (8) = 15, left: 15, 2, 2\n(2) / (15) = 2/15, left: 2/15, 2\n(2) / (2/15) = 15, left: 15\n(7) - (8) = -1, left: -1, 2, 2\n(8) / (7) = 8/7, left: 8/7, 2, 2\n(7) / (8) = 7/8, left: 7/8, 2, 2\n(2) / (7/8) = 16/7, left: 16/7, 2\n(2) + (16/7) = 30/7, left: 30/7\n(8) - (7) = 1, left: 1, 2, 2\n(2) + (1) = 3, left: 3, 2\n(2) - (1) = 1, left: 1, 2\n(7) * (2) = 14, left: 14, 2, 8\n(8) + (14) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (8 + (7 * 2)))"}, {"input": "7 2 8 2\n", "output": "(7) * (8) = 56, left: 56, 2, 2\n(8) / (7) = 8/7, left: 8/7, 2, 2\n(2) / (2) = 1, left: 1, 8/7\n(7) - (8) = -1, left: -1, 2, 2\n(2) * (2) = 4, left: 4, -1\n(2) * (-1) = -2, left: -2, 2\n(7) / (8) = 7/8, left: 7/8, 2, 2\n(8) - (7) = 1, left: 1, 2, 2\n(2) / (1) = 2, left: 2, 2\n(2) * (2) = 4, left: 4, 1\n(2) - (7) = -5, left: -5, 2, 8\n(7) * (2) = 14, left: 14, 2, 8\n(2) + (8) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 * 2) + (2 + 8))"}, {"input": "10 6 8 3\n", "output": "(10) - (3) = 7, left: 7, 6, 8\n(10) * (3) = 30, left: 30, 6, 8\n(10) / (3) = 10/3, left: 10/3, 6, 8\n(3) / (8) = 3/8, left: 3/8, 10, 6\n(6) * (3/8) = 9/4, left: 9/4, 10\n(10) / (6) = 5/3, left: 5/3, 3/8\n(3) - (8) = -5, left: -5, 10, 6\n(8) - (10) = -2, left: -2, 6, 3\n(6) - (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 - (8 - 10)))"}, {"input": "10 6 8 3\n", "output": "(10) / (6) = 5/3, left: 5/3, 8, 3\n(3) / (8) = 3/8, left: 3/8, 5/3\n(3) + (5/3) = 14/3, left: 14/3, 8\n(10) - (6) = 4, left: 4, 8, 3\n(3) / (4) = 3/4, left: 3/4, 8\n(8) + (3/4) = 35/4, left: 35/4\n(10) + (6) = 16, left: 16, 8, 3\n(3) - (16) = -13, left: -13, 8\n(16) - (8) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((10 + 6) - 8))"}, {"input": "10 6 8 3\n", "output": "(3) - (10) = -7, left: -7, 6, 8\n(8) / (-7) = -8/7, left: -8/7, 6\n(3) / (10) = 3/10, left: 3/10, 6, 8\n(10) - (6) = 4, left: 4, 8, 3\n(6) - (10) = -4, left: -4, 8, 3\n(3) + (-4) = -1, left: -1, 8\n(10) + (6) = 16, left: 16, 8, 3\n(8) * (3) = 24, left: 24, 16\n(16) - (8) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((10 + 6) - 8))"}, {"input": "10 6 8 3\n", "output": "(8) - (10) = -2, left: -2, 6, 3\n(6) + (-2) = 4, left: 4, 3\n(3) + (4) = 7, left: 7\n(3) / (4) = 3/4, left: 3/4\n(6) / (-2) = -3, left: -3, 3\n(3) / (-3) = -1, left: -1\n(-3) - (3) = -6, left: -6\n(6) - (-2) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 - (8 - 10)))"}, {"input": "10 6 8 3\n", "output": "(8) - (6) = 2, left: 2, 10, 3\n(3) + (2) = 5, left: 5, 10\n(2) - (3) = -1, left: -1, 10\n(3) * (2) = 6, left: 6, 10\n(3) / (2) = 3/2, left: 3/2, 10\n(10) + (3/2) = 23/2, left: 23/2\n(10) * (2) = 20, left: 20, 3\n(10) + (2) = 12, left: 12, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (8 - 6)))"}, {"input": "10 6 8 3\n", "output": "(10) * (3) = 30, left: 30, 6, 8\n(10) + (3) = 13, left: 13, 6, 8\n(3) - (10) = -7, left: -7, 6, 8\n(6) + (-7) = -1, left: -1, 8\n(10) - (3) = 7, left: 7, 6, 8\n(7) - (8) = -1, left: -1, 6\n(6) / (10) = 3/5, left: 3/5, 8, 3\n(10) - (6) = 4, left: 4, 8, 3\n(10) * (6) = 60, left: 60, 8, 3\n(3) + (60) = 63, left: 63, 8\n(10) + (6) = 16, left: 16, 8, 3\n(8) * (16) = 128, left: 128, 3\n(16) - (8) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((10 + 6) - 8))"}, {"input": "10 6 8 3\n", "output": "(3) / (10) = 3/10, left: 3/10, 6, 8\n(10) * (3) = 30, left: 30, 6, 8\n(30) - (6) = 24, left: 24, 8\n(8) / (6) = 4/3, left: 4/3, 30\n(6) * (8) = 48, left: 48, 30\n(10) + (3) = 13, left: 13, 6, 8\n(3) / (8) = 3/8, left: 3/8, 10, 6\n(8) * (3) = 24, left: 24, 10, 6\n(8) + (3) = 11, left: 11, 10, 6\n(3) - (8) = -5, left: -5, 10, 6\n(10) - (6) = 4, left: 4, -5\n(8) - (10) = -2, left: -2, 6, 3\n(6) - (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 - (8 - 10)))"}, {"input": "11 4 10 9\n", "output": "(4) - (9) = -5, left: -5, 11, 10\n(4) + (10) = 14, left: 14, 11, 9\n(9) / (11) = 9/11, left: 9/11, 14\n(4) * (10) = 40, left: 40, 11, 9\n(11) - (9) = 2, left: 2, 40\n(11) + (4) = 15, left: 15, 10, 9\n(11) * (4) = 44, left: 44, 10, 9\n(9) - (11) = -2, left: -2, 4, 10\n(10) * (-2) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (10 * (9 - 11)))"}, {"input": "11 4 10 9\n", "output": "(11) / (10) = 11/10, left: 11/10, 4, 9\n(4) + (11/10) = 51/10, left: 51/10, 9\n(11/10) / (9) = 11/90, left: 11/90, 4\n(10) / (11) = 10/11, left: 10/11, 4, 9\n(11) - (10) = 1, left: 1, 4, 9\n(11) + (10) = 21, left: 21, 4, 9\n(4) - (21) = -17, left: -17, 9\n(11) - (9) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (11 - 9)))"}, {"input": "11 4 10 9\n", "output": "(11) - (9) = 2, left: 2, 4, 10\n(2) / (4) = 1/2, left: 1/2, 10\n(4) + (2) = 6, left: 6, 10\n(4) / (2) = 2, left: 2, 10\n(2) - (10) = -8, left: -8\n(10) / (4) = 5/2, left: 5/2, 2\n(2) - (10) = -8, left: -8, 4\n(10) / (2) = 5, left: 5, 4\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (11 - 9)))"}, {"input": "11 4 10 9\n", "output": "(10) / (4) = 5/2, left: 5/2, 11, 9\n(11) * (9) = 99, left: 99, 5/2\n(99) / (5/2) = 198/5, left: 198/5\n(10) - (4) = 6, left: 6, 11, 9\n(11) * (9) = 99, left: 99, 6\n(11) - (9) = 2, left: 2, 4, 10\n(4) - (10) = -6, left: -6, 2\n(2) - (-6) = 8, left: 8\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (11 - 9)))"}, {"input": "11 4 10 9\n", "output": "(10) + (9) = 19, left: 19, 11, 4\n(10) / (4) = 5/2, left: 5/2, 11, 9\n(9) / (11) = 9/11, left: 9/11, 5/2\n(4) - (10) = -6, left: -6, 11, 9\n(4) / (10) = 2/5, left: 2/5, 11, 9\n(9) * (2/5) = 18/5, left: 18/5, 11\n(11) / (18/5) = 55/18, left: 55/18\n(11) - (9) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (11 - 9)))"}, {"input": "8 8 6 4\n", "output": "(8) / (6) = 4/3, left: 4/3, 8, 4\n(4) - (8) = -4, left: -4, 4/3\n(4/3) / (-4) = -1/3, left: -1/3\n(8) / (4) = 2, left: 2, 4/3\n(8) * (4) = 32, left: 32, 4/3\n(32) / (4/3) = 24, left: 24\nreach 24! expression: ((8 * 4) / (8 / 6))"}, {"input": "8 8 6 4\n", "output": "(8) / (6) = 4/3, left: 4/3, 8, 4\n(8) / (4) = 2, left: 2, 4/3\n(4) - (8) = -4, left: -4, 4/3\n(8) + (4) = 12, left: 12, 4/3\n(8) * (4) = 32, left: 32, 4/3\n(32) / (4/3) = 24, left: 24\nreach 24! expression: ((8 * 4) / (8 / 6))"}, {"input": "8 8 6 4\n", "output": "(8) / (6) = 4/3, left: 4/3, 8, 4\n(8) / (4) = 2, left: 2, 4/3\n(2) - (4/3) = 2/3, left: 2/3\n(8) - (4) = 4, left: 4, 4/3\n(4/3) - (4) = -8/3, left: -8/3\n(4) - (8) = -4, left: -4, 4/3\n(-4) / (4/3) = -3, left: -3\n(8) + (4) = 12, left: 12, 4/3\n(8) * (4) = 32, left: 32, 4/3\n(32) / (4/3) = 24, left: 24\nreach 24! expression: ((8 * 4) / (8 / 6))"}, {"input": "8 8 6 4\n", "output": "(8) - (8) = 0, left: 0, 6, 4\n(4) - (0) = 4, left: 4, 6\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(4) / (6) = 2/3, left: 2/3\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (4 - (8 - 8)))"}, {"input": "8 8 6 4\n", "output": "(8) / (6) = 4/3, left: 4/3, 8, 4\n(4) - (8) = -4, left: -4, 4/3\n(4/3) - (-4) = 16/3, left: 16/3\n(-4) - (4/3) = -16/3, left: -16/3\n(4/3) + (-4) = -8/3, left: -8/3\n(8) / (4) = 2, left: 2, 4/3\n(4/3) * (2) = 8/3, left: 8/3\n(8) * (4) = 32, left: 32, 4/3\n(4/3) / (32) = 1/24, left: 1/24\n(32) / (4/3) = 24, left: 24\nreach 24! expression: ((8 * 4) / (8 / 6))"}, {"input": "8 8 6 4\n", "output": "(4) - (8) = -4, left: -4, 8, 6\n(8) * (-4) = -32, left: -32, 6\n(-4) - (8) = -12, left: -12, 6\n(6) - (-12) = 18, left: 18\n(8) - (-4) = 12, left: 12, 6\n(-4) / (8) = -1/2, left: -1/2, 6\n(6) + (-1/2) = 11/2, left: 11/2\n(8) + (-4) = 4, left: 4, 6\n(4) / (6) = 2/3, left: 2/3\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 + (4 - 8)))"}, {"input": "8 8 6 4\n", "output": "(8) * (8) = 64, left: 64, 6, 4\n(64) - (4) = 60, left: 60, 6\n(6) * (60) = 360, left: 360\n(6) + (4) = 10, left: 10, 64\n(10) / (64) = 5/32, left: 5/32\n(6) - (4) = 2, left: 2, 64\n(6) / (64) = 3/32, left: 3/32, 4\n(8) / (8) = 1, left: 1, 6, 4\n(1) / (4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((8 / 8) / 4))"}, {"input": "8 8 6 4\n", "output": "(8) - (8) = 0, left: 0, 6, 4\n(4) - (0) = 4, left: 4, 6\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(4) / (6) = 2/3, left: 2/3\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (4 - (8 - 8)))"}, {"input": "8 8 6 4\n", "output": "(8) - (8) = 0, left: 0, 6, 4\n(4) - (0) = 4, left: 4, 6\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(4) / (6) = 2/3, left: 2/3\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (4 - (8 - 8)))"}, {"input": "8 11 4 13\n", "output": "(11) * (13) = 143, left: 143, 8, 4\n(11) / (13) = 11/13, left: 11/13, 8, 4\n(4) / (8) = 1/2, left: 1/2, 11/13\n(13) - (11) = 2, left: 2, 8, 4\n(8) + (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (8 + 4))"}, {"input": "8 11 4 13\n", "output": "(8) + (4) = 12, left: 12, 11, 13\n(13) * (12) = 156, left: 156, 11\n(12) / (11) = 12/11, left: 12/11, 13\n(13) / (12/11) = 143/12, left: 143/12\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((8 + 4) * (13 - 11))"}, {"input": "8 11 4 13\n", "output": "(8) + (13) = 21, left: 21, 11, 4\n(11) / (4) = 11/4, left: 11/4, 21\n(21) - (11/4) = 73/4, left: 73/4\n(8) - (13) = -5, left: -5, 11, 4\n(11) + (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (8 - 13)))"}, {"input": "8 11 4 13\n", "output": "(8) + (13) = 21, left: 21, 11, 4\n(11) - (21) = -10, left: -10, 4\n(13) / (8) = 13/8, left: 13/8, 11, 4\n(4) * (13/8) = 13/2, left: 13/2, 11\n(4) + (13/8) = 45/8, left: 45/8, 11\n(8) - (13) = -5, left: -5, 11, 4\n(-5) / (4) = -5/4, left: -5/4, 11\n(-5) - (11) = -16, left: -16, 4\n(11) + (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (8 - 13)))"}, {"input": "8 11 4 13\n", "output": "(13) / (11) = 13/11, left: 13/11, 8, 4\n(8) / (4) = 2, left: 2, 13/11\n(2) / (13/11) = 22/13, left: 22/13\n(11) + (13) = 24, left: 24, 8, 4\n(4) + (24) = 28, left: 28, 8\n(8) * (28) = 224, left: 224\n(11) - (13) = -2, left: -2, 8, 4\n(8) + (4) = 12, left: 12, -2\n(8) + (-2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (8 + (11 - 13)))"}, {"input": "8 11 4 13\n", "output": "(8) + (4) = 12, left: 12, 11, 13\n(13) - (12) = 1, left: 1, 11\n(11) + (12) = 23, left: 23, 13\n(13) / (23) = 13/23, left: 13/23\n(11) * (12) = 132, left: 132, 13\n(132) / (13) = 132/13, left: 132/13\n(12) / (11) = 12/11, left: 12/11, 13\n(13) - (11) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: ((8 + 4) * (13 - 11))"}, {"input": "8 11 4 13\n", "output": "(11) * (13) = 143, left: 143, 8, 4\n(8) / (143) = 8/143, left: 8/143, 4\n(11) / (13) = 11/13, left: 11/13, 8, 4\n(4) - (11/13) = 41/13, left: 41/13, 8\n(4) + (11/13) = 63/13, left: 63/13, 8\n(63/13) / (8) = 63/104, left: 63/104\n(8) + (11/13) = 115/13, left: 115/13, 4\n(13) - (11) = 2, left: 2, 8, 4\n(8) + (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (8 + 4))"}, {"input": "8 11 4 13\n", "output": "(4) + (13) = 17, left: 17, 8, 11\n(17) / (11) = 17/11, left: 17/11, 8\n(4) / (13) = 4/13, left: 4/13, 8, 11\n(13) - (4) = 9, left: 9, 8, 11\n(9) / (11) = 9/11, left: 9/11, 8\n(4) - (13) = -9, left: -9, 8, 11\n(4) * (13) = 52, left: 52, 8, 11\n(8) + (11) = 19, left: 19, 4, 13\n(19) - (13) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((8 + 11) - 13))"}, {"input": "1 1 5 5\n", "output": "(1) - (5) = -4, left: -4, 1, 5\n(-4) / (1) = -4, left: -4, 5\n(1) / (-4) = -1/4, left: -1/4, 5\n(1) + (-4) = -3, left: -3, 5\n(1) + (5) = 6, left: 6, -4\n(5) - (1) = 4, left: 4, 1, 5\n(1) * (5) = 5, left: 5, 4\n(1) + (5) = 6, left: 6, 4\n(4) / (6) = 2/3, left: 2/3\n(4) * (6) = 24, left: 24\nreach 24! expression: ((5 - 1) * (1 + 5))"}, {"input": "1 1 5 5\n", "output": "(1) - (5) = -4, left: -4, 1, 5\n(1) * (5) = 5, left: 5, -4\n(5) * (-4) = -20, left: -20, 1\n(1) - (-20) = 21, left: 21\n(1) - (-4) = 5, left: 5, 5\n(1) / (5) = 1/5, left: 1/5, 1, 5\n(1/5) / (1) = 1/5, left: 1/5, 5\n(5) - (1/5) = 24/5, left: 24/5\n(5) / (1/5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 / (1 / 5)) - 1)"}, {"input": "1 1 5 5\n", "output": "(1) - (5) = -4, left: -4, 1, 5\n(1) / (5) = 1/5, left: 1/5, -4\n(1/5) / (-4) = -1/20, left: -1/20\n(1) + (-4) = -3, left: -3, 5\n(5) - (1) = 4, left: 4, 1, 5\n(4) - (1) = 3, left: 3, 5\n(1) - (4) = -3, left: -3, 5\n(5) - (1) = 4, left: 4, 4\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((5 - 1) * (1 + 5))"}, {"input": "1 1 5 5\n", "output": "(1) / (1) = 1, left: 1, 5, 5\n(5) + (1) = 6, left: 6, 5\n(5) * (1) = 5, left: 5, 5\n(5) - (5) = 0, left: 0, 1\n(5) / (5) = 1, left: 1, 1\n(1) - (1) = 0, left: 0\n(5) + (5) = 10, left: 10, 1\n(1) + (10) = 11, left: 11\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (1 / 1))"}, {"input": "1 1 5 5\n", "output": "(5) - (5) = 0, left: 0, 1, 1\n(1) / (1) = 1, left: 1, 0\n(5) / (5) = 1, left: 1, 1, 1\n(1) / (1) = 1, left: 1, 1\n(1) / (1) = 1, left: 1, 1\n(1) * (1) = 1, left: 1, 1\n(1) - (1) = 0, left: 0, 1\n(5) * (5) = 25, left: 25, 1, 1\n(25) - (1) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: (((5 * 5) - 1) / 1)"}, {"input": "1 1 5 5\n", "output": "(5) - (5) = 0, left: 0, 1, 1\n(1) + (0) = 1, left: 1, 1\n(0) - (1) = -1, left: -1, 1\n(1) / (1) = 1, left: 1, 0\n(1) / (1) = 1, left: 1, 0\n(0) / (1) = 0, left: 0\n(5) / (5) = 1, left: 1, 1, 1\n(1) - (1) = 0, left: 0, 1\n(1) - (1) = 0, left: 0, 1\n(1) + (0) = 1, left: 1\n(1) / (1) = 1, left: 1, 1\n(5) * (5) = 25, left: 25, 1, 1\n(25) - (1) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: (((5 * 5) - 1) / 1)"}, {"input": "1 1 5 5\n", "output": "(1) - (5) = -4, left: -4, 1, 5\n(5) + (-4) = 1, left: 1, 1\n(-4) - (5) = -9, left: -9, 1\n(5) / (-4) = -5/4, left: -5/4, 1\n(1) + (-4) = -3, left: -3, 5\n(1) * (-4) = -4, left: -4, 5\n(1) - (-4) = 5, left: 5, 5\n(-4) - (1) = -5, left: -5, 5\n(5) * (-5) = -25, left: -25\n(-4) / (1) = -4, left: -4, 5\n(5) - (1) = 4, left: 4, 1, 5\n(4) - (1) = 3, left: 3, 5\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((5 - 1) * (1 + 5))"}, {"input": "1 1 5 5\n", "output": "(1) - (5) = -4, left: -4, 1, 5\n(1) * (-4) = -4, left: -4, 5\n(1) - (-4) = 5, left: 5, 5\n(1) + (-4) = -3, left: -3, 5\n(5) + (-3) = 2, left: 2\n(5) * (-4) = -20, left: -20, 1\n(5) + (-4) = 1, left: 1, 1\n(5) - (1) = 4, left: 4, -4\n(1) * (5) = 5, left: 5, -4\n(5) - (1) = 4, left: 4, 1, 5\n(1) * (5) = 5, left: 5, 4\n(1) / (5) = 1/5, left: 1/5, 4\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((5 - 1) * (1 + 5))"}, {"input": "10 8 10 4\n", "output": "(10) / (4) = 5/2, left: 5/2, 10, 8\n(8) - (5/2) = 11/2, left: 11/2, 10\n(10) - (8) = 2, left: 2, 5/2\n(4) - (10) = -6, left: -6, 10, 8\n(-6) - (10) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - ((4 - 10) - 10))"}, {"input": "10 8 10 4\n", "output": "(4) - (8) = -4, left: -4, 10, 10\n(10) - (10) = 0, left: 0, -4\n(0) / (-4) = 0, left: 0\n(10) + (10) = 20, left: 20, -4\n(-4) * (20) = -80, left: -80\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((10 + 10) - (4 - 8))"}, {"input": "10 8 10 4\n", "output": "(8) - (4) = 4, left: 4, 10, 10\n(4) / (10) = 2/5, left: 2/5, 10\n(4) - (10) = -6, left: -6, 10\n(10) * (4) = 40, left: 40, 10\n(10) + (4) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (10 + (8 - 4)))"}, {"input": "10 8 10 4\n", "output": "(10) - (10) = 0, left: 0, 8, 4\n(4) / (8) = 1/2, left: 1/2, 0\n(4) + (0) = 4, left: 4, 8\n(10) + (10) = 20, left: 20, 8, 4\n(8) - (4) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 + 10) + (8 - 4))"}, {"input": "10 8 10 4\n", "output": "(10) - (10) = 0, left: 0, 8, 4\n(8) - (0) = 8, left: 8, 4\n(4) + (8) = 12, left: 12\n(0) - (8) = -8, left: -8, 4\n(-8) / (4) = -2, left: -2\n(10) - (10) = 0, left: 0, 8, 4\n(8) * (4) = 32, left: 32, 0\n(10) + (10) = 20, left: 20, 8, 4\n(8) - (4) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 + 10) + (8 - 4))"}, {"input": "10 8 10 4\n", "output": "(8) - (4) = 4, left: 4, 10, 10\n(4) / (10) = 2/5, left: 2/5, 10\n(4) - (10) = -6, left: -6, 10\n(10) - (-6) = 16, left: 16\n(-6) / (10) = -3/5, left: -3/5\n(10) - (4) = 6, left: 6, 10\n(10) * (4) = 40, left: 40, 10\n(10) + (40) = 50, left: 50\n(10) + (4) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (10 + (8 - 4)))"}, {"input": "10 8 10 4\n", "output": "(4) - (8) = -4, left: -4, 10, 10\n(10) / (10) = 1, left: 1, -4\n(-4) - (1) = -5, left: -5\n(10) - (10) = 0, left: 0, -4\n(-4) + (0) = -4, left: -4\n(0) / (-4) = 0, left: 0\n(-4) * (0) = 0, left: 0\n(10) + (10) = 20, left: 20, -4\n(-4) + (20) = 16, left: 16\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((10 + 10) - (4 - 8))"}, {"input": "10 8 10 4\n", "output": "(10) / (4) = 5/2, left: 5/2, 10, 8\n(5/2) - (8) = -11/2, left: -11/2, 10\n(10) - (-11/2) = 31/2, left: 31/2\n(8) - (5/2) = 11/2, left: 11/2, 10\n(11/2) / (10) = 11/20, left: 11/20\n(10) + (5/2) = 25/2, left: 25/2, 8\n(10) * (5/2) = 25, left: 25, 8\n(4) - (10) = -6, left: -6, 10, 8\n(-6) - (10) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - ((4 - 10) - 10))"}, {"input": "10 8 10 4\n", "output": "(10) - (4) = 6, left: 6, 10, 8\n(8) - (6) = 2, left: 2, 10\n(10) - (2) = 8, left: 8\n(10) * (2) = 20, left: 20\n(2) / (10) = 1/5, left: 1/5\n(6) - (8) = -2, left: -2, 10\n(10) * (-2) = -20, left: -20\n(10) / (-2) = -5, left: -5\n(8) + (6) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (8 + (10 - 4)))"}, {"input": "12 1 8 9\n", "output": "(9) - (12) = -3, left: -3, 1, 8\n(12) / (9) = 4/3, left: 4/3, 1, 8\n(8) * (4/3) = 32/3, left: 32/3, 1\n(4/3) / (8) = 1/6, left: 1/6, 1\n(4/3) - (1) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((12 / 9) - 1))"}, {"input": "12 1 8 9\n", "output": "(8) - (12) = -4, left: -4, 1, 9\n(-4) - (9) = -13, left: -13, 1\n(12) + (8) = 20, left: 20, 1, 9\n(12) - (8) = 4, left: 4, 1, 9\n(1) / (9) = 1/9, left: 1/9, 4\n(12) / (8) = 3/2, left: 3/2, 1, 9\n(1) * (9) = 9, left: 9, 3/2\n(1) / (8) = 1/8, left: 1/8, 12, 9\n(12) - (9) = 3, left: 3, 1/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((12 - 9) / (1 / 8))"}, {"input": "12 1 8 9\n", "output": "(12) + (1) = 13, left: 13, 8, 9\n(13) / (8) = 13/8, left: 13/8, 9\n(8) + (9) = 17, left: 17, 13\n(1) - (12) = -11, left: -11, 8, 9\n(-11) - (9) = -20, left: -20, 8\n(12) - (1) = 11, left: 11, 8, 9\n(8) - (9) = -1, left: -1, 11\n(12) * (1) = 12, left: 12, 8, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 * 1) - 9))"}, {"input": "12 1 8 9\n", "output": "(9) - (12) = -3, left: -3, 1, 8\n(-3) / (8) = -3/8, left: -3/8, 1\n(1) + (8) = 9, left: 9, -3\n(12) / (9) = 4/3, left: 4/3, 1, 8\n(4/3) / (8) = 1/6, left: 1/6, 1\n(1) * (8) = 8, left: 8, 4/3\n(8) / (1) = 8, left: 8, 4/3\n(4/3) / (8) = 1/6, left: 1/6\n(4/3) - (1) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((12 / 9) - 1))"}, {"input": "12 1 8 9\n", "output": "(1) * (8) = 8, left: 8, 12, 9\n(9) - (8) = 1, left: 1, 12\n(12) * (1) = 12, left: 12\n(9) * (8) = 72, left: 72, 12\n(12) / (72) = 1/6, left: 1/6\n(8) / (9) = 8/9, left: 8/9, 12\n(12) / (8) = 3/2, left: 3/2, 9\n(12) - (8) = 4, left: 4, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 * 8) * (12 - 9))"}, {"input": "12 1 8 9\n", "output": "(9) / (1) = 9, left: 9, 12, 8\n(8) - (12) = -4, left: -4, 9\n(12) - (8) = 4, left: 4, 9\n(8) / (9) = 8/9, left: 8/9, 12\n(12) + (8/9) = 116/9, left: 116/9\n(9) / (8) = 9/8, left: 9/8, 12\n(9) - (12) = -3, left: -3, 8\n(12) / (9) = 4/3, left: 4/3, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (12 - (9 / 1)))"}, {"input": "5 13 3 12\n", "output": "(13) / (3) = 13/3, left: 13/3, 5, 12\n(3) / (13) = 3/13, left: 3/13, 5, 12\n(5) / (12) = 5/12, left: 5/12, 3/13\n(13) - (3) = 10, left: 10, 5, 12\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 3) / 5))"}, {"input": "5 13 3 12\n", "output": "(5) * (13) = 65, left: 65, 3, 12\n(12) / (13) = 12/13, left: 12/13, 5, 3\n(5) * (12) = 60, left: 60, 13, 3\n(12) / (5) = 12/5, left: 12/5, 13, 3\n(13) - (3) = 10, left: 10, 12/5\n(12/5) * (10) = 24, left: 24\nreach 24! expression: ((12 / 5) * (13 - 3))"}, {"input": "5 13 3 12\n", "output": "(5) / (3) = 5/3, left: 5/3, 13, 12\n(5) + (3) = 8, left: 8, 13, 12\n(13) * (8) = 104, left: 104, 12\n(5) - (3) = 2, left: 2, 13, 12\n(2) - (13) = -11, left: -11, 12\n(12) - (-11) = 23, left: 23\n(5) * (3) = 15, left: 15, 13, 12\n(13) + (15) = 28, left: 28, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((5 * 3) - 13))"}, {"input": "5 13 3 12\n", "output": "(3) / (5) = 3/5, left: 3/5, 13, 12\n(12) / (13) = 12/13, left: 12/13, 3/5\n(12) + (3/5) = 63/5, left: 63/5, 13\n(13) - (63/5) = 2/5, left: 2/5\n(5) / (3) = 5/3, left: 5/3, 13, 12\n(12) - (13) = -1, left: -1, 5/3\n(5) + (3) = 8, left: 8, 13, 12\n(5) * (3) = 15, left: 15, 13, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((5 * 3) - 13))"}, {"input": "5 13 3 12\n", "output": "(13) / (5) = 13/5, left: 13/5, 3, 12\n(3) - (12) = -9, left: -9, 13/5\n(5) * (13) = 65, left: 65, 3, 12\n(5) - (13) = -8, left: -8, 3, 12\n(12) / (13) = 12/13, left: 12/13, 5, 3\n(13) * (12) = 156, left: 156, 5, 3\n(12) / (5) = 12/5, left: 12/5, 13, 3\n(3) / (12/5) = 5/4, left: 5/4, 13\n(13) - (3) = 10, left: 10, 12/5\n(12/5) * (10) = 24, left: 24\nreach 24! expression: ((12 / 5) * (13 - 3))"}, {"input": "5 13 3 12\n", "output": "(3) - (13) = -10, left: -10, 5, 12\n(5) - (-10) = 15, left: 15, 12\n(15) - (12) = 3, left: 3\n(-10) - (5) = -15, left: -15, 12\n(5) - (12) = -7, left: -7, -10\n(3) / (13) = 3/13, left: 3/13, 5, 12\n(5) - (12) = -7, left: -7, 3/13\n(13) - (3) = 10, left: 10, 5, 12\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 - 3) / 5))"}, {"input": "5 13 3 12\n", "output": "(3) - (5) = -2, left: -2, 13, 12\n(13) * (12) = 156, left: 156, -2\n(-2) + (156) = 154, left: 154\n(-2) - (13) = -15, left: -15, 12\n(5) - (3) = 2, left: 2, 13, 12\n(2) - (13) = -11, left: -11, 12\n(13) * (2) = 26, left: 26, 12\n(5) * (3) = 15, left: 15, 13, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((5 * 3) - 13))"}, {"input": "4 11 8 1\n", "output": "(4) / (11) = 4/11, left: 4/11, 8, 1\n(8) - (4/11) = 84/11, left: 84/11, 1\n(4/11) / (1) = 4/11, left: 4/11, 8\n(4) + (11) = 15, left: 15, 8, 1\n(8) + (1) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((4 + 11) + (8 + 1))"}, {"input": "4 11 8 1\n", "output": "(11) + (1) = 12, left: 12, 4, 8\n(4) / (8) = 1/2, left: 1/2, 12\n(1/2) - (12) = -23/2, left: -23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) + (1/2) = 25/2, left: 25/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((11 + 1) / (4 / 8))"}, {"input": "4 11 8 1\n", "output": "(11) / (4) = 11/4, left: 11/4, 8, 1\n(1) - (11/4) = -7/4, left: -7/4, 8\n(4) + (11) = 15, left: 15, 8, 1\n(15) / (8) = 15/8, left: 15/8, 1\n(8) + (15) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (8 + (4 + 11)))"}, {"input": "4 11 8 1\n", "output": "(11) + (1) = 12, left: 12, 4, 8\n(4) / (8) = 1/2, left: 1/2, 12\n(12) * (1/2) = 6, left: 6\n(1/2) - (12) = -23/2, left: -23/2\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) + (1/2) = 25/2, left: 25/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((11 + 1) / (4 / 8))"}, {"input": "4 11 8 1\n", "output": "(4) - (11) = -7, left: -7, 8, 1\n(8) + (-7) = 1, left: 1, 1\n(1) - (8) = -7, left: -7, -7\n(1) - (-7) = 8, left: 8, 8\n(11) - (4) = 7, left: 7, 8, 1\n(8) + (1) = 9, left: 9, 7\n(7) + (9) = 16, left: 16\n(4) + (11) = 15, left: 15, 8, 1\n(1) + (15) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (1 + (4 + 11)))"}, {"input": "4 11 8 1\n", "output": "(1) / (4) = 1/4, left: 1/4, 11, 8\n(4) - (1) = 3, left: 3, 11, 8\n(8) + (3) = 11, left: 11, 11\n(11) - (11) = 0, left: 0\n(3) / (8) = 3/8, left: 3/8, 11\n(4) * (1) = 4, left: 4, 11, 8\n(11) + (4) = 15, left: 15, 8\n(4) + (1) = 5, left: 5, 11, 8\n(11) + (8) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((4 + 1) + (11 + 8))"}, {"input": "4 11 8 1\n", "output": "(4) / (11) = 4/11, left: 4/11, 8, 1\n(8) * (1) = 8, left: 8, 4/11\n(8) / (1) = 8, left: 8, 4/11\n(8) + (4/11) = 92/11, left: 92/11, 1\n(1) - (92/11) = -81/11, left: -81/11\n(4/11) - (8) = -84/11, left: -84/11, 1\n(1) - (4/11) = 7/11, left: 7/11, 8\n(4) + (11) = 15, left: 15, 8, 1\n(8) + (1) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((4 + 11) + (8 + 1))"}, {"input": "4 11 8 1\n", "output": "(11) / (4) = 11/4, left: 11/4, 8, 1\n(11/4) - (8) = -21/4, left: -21/4, 1\n(1) + (-21/4) = -17/4, left: -17/4\n(8) / (1) = 8, left: 8, 11/4\n(1) / (11/4) = 4/11, left: 4/11, 8\n(4) + (11) = 15, left: 15, 8, 1\n(8) / (15) = 8/15, left: 8/15, 1\n(15) / (8) = 15/8, left: 15/8, 1\n(8) + (15) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (8 + (4 + 11)))"}, {"input": "4 11 8 1\n", "output": "(11) + (1) = 12, left: 12, 4, 8\n(4) / (8) = 1/2, left: 1/2, 12\n(12) * (1/2) = 6, left: 6\n(1/2) - (12) = -23/2, left: -23/2\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) + (1/2) = 25/2, left: 25/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((11 + 1) / (4 / 8))"}, {"input": "4 11 8 1\n", "output": "(11) + (1) = 12, left: 12, 4, 8\n(4) / (8) = 1/2, left: 1/2, 12\n(12) * (1/2) = 6, left: 6\n(1/2) - (12) = -23/2, left: -23/2\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) + (1/2) = 25/2, left: 25/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((11 + 1) / (4 / 8))"}, {"input": "1 12 12 10\n", "output": "(1) / (10) = 1/10, left: 1/10, 12, 12\n(12) + (12) = 24, left: 24, 1/10\n(1) + (10) = 11, left: 11, 12, 12\n(1) * (10) = 10, left: 10, 12, 12\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (12 - (1 * 10)))"}, {"input": "1 12 12 10\n", "output": "(12) / (12) = 1, left: 1, 1, 10\n(10) / (1) = 10, left: 10, 1\n(12) + (12) = 24, left: 24, 1, 10\n(12) - (10) = 2, left: 2, 1, 12\n(12) * (2) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (12 * (12 - 10)))"}, {"input": "1 12 12 10\n", "output": "(10) - (12) = -2, left: -2, 1, 12\n(1) + (12) = 13, left: 13, -2\n(12) + (10) = 22, left: 22, 1, 12\n(12) - (10) = 2, left: 2, 1, 12\n(12) * (2) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (12 * (12 - 10)))"}, {"input": "1 12 12 10\n", "output": "(12) / (1) = 12, left: 12, 12, 10\n(12) / (12) = 1, left: 1, 10\n(10) * (12) = 120, left: 120, 12\n(10) / (12) = 5/6, left: 5/6, 12\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((12 / 1) - 10))"}, {"input": "1 12 12 10\n", "output": "(12) * (12) = 144, left: 144, 1, 10\n(10) + (144) = 154, left: 154, 1\n(12) / (12) = 1, left: 1, 1, 10\n(12) + (12) = 24, left: 24, 1, 10\n(10) - (24) = -14, left: -14, 1\n(10) - (12) = -2, left: -2, 1, 12\n(10) / (12) = 5/6, left: 5/6, 1, 12\n(12) - (10) = 2, left: 2, 1, 12\n(12) * (2) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (12 * (12 - 10)))"}, {"input": "1 12 12 10\n", "output": "(12) / (10) = 6/5, left: 6/5, 1, 12\n(1) * (6/5) = 6/5, left: 6/5, 12\n(10) - (12) = -2, left: -2, 1, 12\n(12) * (-2) = -24, left: -24, 1\n(12) / (1) = 12, left: 12, -2\n(12) + (10) = 22, left: 22, 1, 12\n(1) + (22) = 23, left: 23, 12\n(12) - (10) = 2, left: 2, 1, 12\n(12) * (2) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (12 * (12 - 10)))"}, {"input": "1 12 12 10\n", "output": "(12) - (12) = 0, left: 0, 1, 10\n(0) - (10) = -10, left: -10, 1\n(12) + (12) = 24, left: 24, 1, 10\n(1) / (24) = 1/24, left: 1/24, 10\n(24) / (1) = 24, left: 24, 10\n(12) / (10) = 6/5, left: 6/5, 1, 12\n(12) + (10) = 22, left: 22, 1, 12\n(12) - (10) = 2, left: 2, 1, 12\n(1) * (2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 * (12 - 10)))"}, {"input": "1 12 12 10\n", "output": "(12) / (1) = 12, left: 12, 12, 10\n(12) + (12) = 24, left: 24, 10\n(12) - (12) = 0, left: 0, 10\n(10) * (12) = 120, left: 120, 12\n(10) / (12) = 5/6, left: 5/6, 12\n(10) - (12) = -2, left: -2, 12\n(-2) - (12) = -14, left: -14\n(12) * (-2) = -24, left: -24\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((12 / 1) - 10))"}, {"input": "1 12 12 10\n", "output": "(1) / (10) = 1/10, left: 1/10, 12, 12\n(12) + (12) = 24, left: 24, 1/10\n(12) + (1/10) = 121/10, left: 121/10, 12\n(1) + (10) = 11, left: 11, 12, 12\n(10) - (1) = 9, left: 9, 12, 12\n(9) - (12) = -3, left: -3, 12\n(-3) - (12) = -15, left: -15\n(1) * (10) = 10, left: 10, 12, 12\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (12 - (1 * 10)))"}, {"input": "3 9 11 7\n", "output": "(11) / (7) = 11/7, left: 11/7, 3, 9\n(9) / (11/7) = 63/11, left: 63/11, 3\n(9) + (11/7) = 74/7, left: 74/7, 3\n(7) - (11) = -4, left: -4, 3, 9\n(3) - (9) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((7 - 11) * (3 - 9))"}, {"input": "3 9 11 7\n", "output": "(7) / (11) = 7/11, left: 7/11, 3, 9\n(9) / (3) = 3, left: 3, 7/11\n(7/11) - (3) = -26/11, left: -26/11, 9\n(7) - (11) = -4, left: -4, 3, 9\n(3) - (9) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((7 - 11) * (3 - 9))"}, {"input": "3 9 11 7\n", "output": "(9) / (3) = 3, left: 3, 11, 7\n(3) - (11) = -8, left: -8, 7\n(7) - (-8) = 15, left: 15\n(11) + (3) = 14, left: 14, 7\n(11) * (7) = 77, left: 77, 3\n(7) - (11) = -4, left: -4, 3\n(-4) / (3) = -4/3, left: -4/3\n(3) - (9) = -6, left: -6, 11, 7\n(-6) - (7) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - ((3 - 9) - 7))"}, {"input": "3 9 11 7\n", "output": "(7) - (3) = 4, left: 4, 9, 11\n(4) - (11) = -7, left: -7, 9\n(-7) / (9) = -7/9, left: -7/9\n(11) * (4) = 44, left: 44, 9\n(9) * (44) = 396, left: 396\n(4) / (11) = 4/11, left: 4/11, 9\n(9) / (4/11) = 99/4, left: 99/4\n(11) + (4) = 15, left: 15, 9\n(15) / (9) = 5/3, left: 5/3\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (11 + (7 - 3)))"}, {"input": "3 9 11 7\n", "output": "(3) / (7) = 3/7, left: 3/7, 9, 11\n(11) * (3/7) = 33/7, left: 33/7, 9\n(33/7) - (9) = -30/7, left: -30/7\n(11) / (9) = 11/9, left: 11/9, 3/7\n(7) / (3) = 7/3, left: 7/3, 9, 11\n(9) - (7/3) = 20/3, left: 20/3, 11\n(11) - (20/3) = 13/3, left: 13/3\n(7) - (3) = 4, left: 4, 9, 11\n(9) + (11) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((7 - 3) + (9 + 11))"}, {"input": "3 9 11 7\n", "output": "(11) / (7) = 11/7, left: 11/7, 3, 9\n(9) * (11/7) = 99/7, left: 99/7, 3\n(99/7) - (3) = 78/7, left: 78/7\n(7) - (11) = -4, left: -4, 3, 9\n(3) - (-4) = 7, left: 7, 9\n(9) * (7) = 63, left: 63\n(3) + (-4) = -1, left: -1, 9\n(3) + (9) = 12, left: 12, -4\n(3) - (9) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((7 - 11) * (3 - 9))"}, {"input": "3 9 11 7\n", "output": "(7) / (11) = 7/11, left: 7/11, 3, 9\n(7/11) - (9) = -92/11, left: -92/11, 3\n(9) * (7/11) = 63/11, left: 63/11, 3\n(9) - (3) = 6, left: 6, 7/11\n(3) - (7/11) = 26/11, left: 26/11, 9\n(9) / (26/11) = 99/26, left: 99/26\n(3) * (7/11) = 21/11, left: 21/11, 9\n(7) - (11) = -4, left: -4, 3, 9\n(3) - (9) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((7 - 11) * (3 - 9))"}, {"input": "9 8 1 4\n", "output": "(1) - (4) = -3, left: -3, 9, 8\n(-3) / (9) = -1/3, left: -1/3, 8\n(1) + (4) = 5, left: 5, 9, 8\n(8) - (9) = -1, left: -1, 5\n(1) * (4) = 4, left: 4, 9, 8\n(4) - (8) = -4, left: -4, 9\n(-4) / (9) = -4/9, left: -4/9\n(4) - (1) = 3, left: 3, 9, 8\n(9) * (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (4 - 1))"}, {"input": "9 8 1 4\n", "output": "(1) * (4) = 4, left: 4, 9, 8\n(1) / (4) = 1/4, left: 1/4, 9, 8\n(8) - (9) = -1, left: -1, 1/4\n(1/4) - (9) = -35/4, left: -35/4, 8\n(-35/4) - (8) = -67/4, left: -67/4\n(9) / (1/4) = 36, left: 36, 8\n(36) / (8) = 9/2, left: 9/2\n(4) - (1) = 3, left: 3, 9, 8\n(9) * (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (4 - 1))"}, {"input": "9 8 1 4\n", "output": "(9) * (4) = 36, left: 36, 8, 1\n(9) / (4) = 9/4, left: 9/4, 8, 1\n(1) / (8) = 1/8, left: 1/8, 9/4\n(9) + (4) = 13, left: 13, 8, 1\n(13) / (8) = 13/8, left: 13/8, 1\n(8) + (13) = 21, left: 21, 1\n(4) - (9) = -5, left: -5, 8, 1\n(1) - (9) = -8, left: -8, 8, 4\n(8) * (4) = 32, left: 32, -8\n(-8) + (32) = 24, left: 24\nreach 24! expression: ((1 - 9) + (8 * 4))"}, {"input": "9 8 1 4\n", "output": "(4) - (1) = 3, left: 3, 9, 8\n(9) / (3) = 3, left: 3, 8\n(8) / (3) = 8/3, left: 8/3\n(8) + (3) = 11, left: 11\n(8) - (3) = 5, left: 5\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (4 - 1)))"}, {"input": "9 8 1 4\n", "output": "(8) / (1) = 8, left: 8, 9, 4\n(4) - (9) = -5, left: -5, 8\n(8) - (-5) = 13, left: 13\n(8) * (1) = 8, left: 8, 9, 4\n(4) - (8) = -4, left: -4, 9\n(8) - (1) = 7, left: 7, 9, 4\n(4) * (7) = 28, left: 28, 9\n(9) * (8) = 72, left: 72, 1, 4\n(4) - (1) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (4 - 1))"}, {"input": "9 8 1 4\n", "output": "(8) / (1) = 8, left: 8, 9, 4\n(8) * (1) = 8, left: 8, 9, 4\n(9) + (4) = 13, left: 13, 8\n(9) * (4) = 36, left: 36, 8\n(9) * (8) = 72, left: 72, 4\n(8) + (1) = 9, left: 9, 9, 4\n(9) - (4) = 5, left: 5, 9\n(1) / (8) = 1/8, left: 1/8, 9, 4\n(1/8) - (9) = -71/8, left: -71/8, 4\n(9) / (1/8) = 72, left: 72, 4\n(9) * (8) = 72, left: 72, 1, 4\n(1) - (72) = -71, left: -71, 4\n(4) - (1) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (4 - 1))"}, {"input": "9 8 1 4\n", "output": "(4) - (1) = 3, left: 3, 9, 8\n(9) / (3) = 3, left: 3, 8\n(8) / (3) = 8/3, left: 8/3\n(8) + (3) = 11, left: 11\n(8) - (3) = 5, left: 5\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (4 - 1)))"}, {"input": "9 8 1 4\n", "output": "(4) / (9) = 4/9, left: 4/9, 8, 1\n(9) + (4) = 13, left: 13, 8, 1\n(8) / (1) = 8, left: 8, 13\n(8) / (13) = 8/13, left: 8/13\n(4) - (9) = -5, left: -5, 8, 1\n(8) - (-5) = 13, left: 13, 1\n(8) + (-5) = 3, left: 3, 1\n(8) / (1) = 8, left: 8, -5\n(8) * (1) = 8, left: 8, -5\n(1) - (9) = -8, left: -8, 8, 4\n(8) - (4) = 4, left: 4, -8\n(4) - (8) = -4, left: -4, -8\n(8) * (4) = 32, left: 32, -8\n(-8) + (32) = 24, left: 24\nreach 24! expression: ((1 - 9) + (8 * 4))"}, {"input": "9 8 1 4\n", "output": "(4) - (1) = 3, left: 3, 9, 8\n(9) / (3) = 3, left: 3, 8\n(8) / (3) = 8/3, left: 8/3\n(8) + (3) = 11, left: 11\n(8) - (3) = 5, left: 5\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (4 - 1)))"}, {"input": "4 6 6 1\n", "output": "(4) + (6) = 10, left: 10, 6, 1\n(6) + (1) = 7, left: 7, 10\n(6) - (1) = 5, left: 5, 4, 6\n(6) * (1) = 6, left: 6, 4, 6\n(1) / (6) = 1/6, left: 1/6, 4, 6\n(1/6) - (6) = -35/6, left: -35/6, 4\n(4) * (-35/6) = -70/3, left: -70/3\n(4) + (1) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (4 + 1)) - 6)"}, {"input": "4 6 6 1\n", "output": "(6) - (6) = 0, left: 0, 4, 1\n(6) - (6) = 0, left: 0, 4, 1\n(6) + (1) = 7, left: 7, 4, 6\n(1) - (6) = -5, left: -5, 4, 6\n(-5) / (4) = -5/4, left: -5/4, 6\n(4) / (6) = 2/3, left: 2/3, 6, 1\n(6) / (2/3) = 9, left: 9, 1\n(1) - (4) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (1 - 4)))"}, {"input": "4 6 6 1\n", "output": "(4) / (1) = 4, left: 4, 6, 6\n(4) - (6) = -2, left: -2, 6\n(6) * (-2) = -12, left: -12\n(4) / (6) = 2/3, left: 2/3, 6\n(6) - (6) = 0, left: 0, 4\n(4) * (0) = 0, left: 0\n(4) + (1) = 5, left: 5, 6, 6\n(6) / (6) = 1, left: 1, 5\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (4 + 1)) - 6)"}, {"input": "4 6 6 1\n", "output": "(4) / (1) = 4, left: 4, 6, 6\n(6) / (6) = 1, left: 1, 4\n(6) + (4) = 10, left: 10, 6\n(6) - (4) = 2, left: 2, 6\n(4) / (6) = 2/3, left: 2/3, 6\n(6) + (2/3) = 20/3, left: 20/3\n(4) - (1) = 3, left: 3, 6, 6\n(6) + (3) = 9, left: 9, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (4 - 1)))"}, {"input": "4 6 6 1\n", "output": "(1) / (4) = 1/4, left: 1/4, 6, 6\n(6) - (1/4) = 23/4, left: 23/4, 6\n(6) * (23/4) = 69/2, left: 69/2\n(6) / (6) = 1, left: 1, 1/4\n(6) / (6) = 1, left: 1, 1/4\n(1/4) - (1) = -3/4, left: -3/4\n(1/4) / (6) = 1/24, left: 1/24, 6\n(4) - (1) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (4 - 1)))"}, {"input": "4 6 6 1\n", "output": "(6) + (1) = 7, left: 7, 4, 6\n(1) - (6) = -5, left: -5, 4, 6\n(6) - (1) = 5, left: 5, 4, 6\n(6) / (1) = 6, left: 6, 4, 6\n(6) + (1) = 7, left: 7, 4, 6\n(4) * (6) = 24, left: 24, 6, 1\n(6) / (4) = 3/2, left: 3/2, 6, 1\n(6) / (1) = 6, left: 6, 3/2\n(4) / (6) = 2/3, left: 2/3, 6, 1\n(6) - (1) = 5, left: 5, 2/3\n(1) / (4) = 1/4, left: 1/4, 6, 6\n(1) - (4) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (1 - 4)))"}, {"input": "4 6 6 1\n", "output": "(6) / (4) = 3/2, left: 3/2, 6, 1\n(6) / (1) = 6, left: 6, 3/2\n(4) * (6) = 24, left: 24, 6, 1\n(6) / (1) = 6, left: 6, 24\n(6) / (1) = 6, left: 6, 4, 6\n(4) + (6) = 10, left: 10, 6\n(6) - (1) = 5, left: 5, 4, 6\n(6) + (1) = 7, left: 7, 4, 6\n(1) / (4) = 1/4, left: 1/4, 6, 6\n(6) - (1/4) = 23/4, left: 23/4, 6\n(6) + (1/4) = 25/4, left: 25/4, 6\n(4) + (1) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (4 + 1)) - 6)"}, {"input": "6 4 10 4\n", "output": "(4) / (4) = 1, left: 1, 6, 10\n(1) - (10) = -9, left: -9, 6\n(4) - (4) = 0, left: 0, 6, 10\n(0) / (6) = 0, left: 0, 10\n(6) + (0) = 6, left: 6, 10\n(6) * (0) = 0, left: 0, 10\n(0) - (10) = -10, left: -10, 6\n(4) + (4) = 8, left: 8, 6, 10\n(10) + (8) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (10 + (4 + 4)))"}, {"input": "6 4 10 4\n", "output": "(4) * (10) = 40, left: 40, 6, 4\n(6) * (4) = 24, left: 24, 40\n(24) / (40) = 3/5, left: 3/5\n(4) - (10) = -6, left: -6, 6, 4\n(10) - (4) = 6, left: 6, 6, 4\n(6) / (4) = 3/2, left: 3/2, 6\n(4) / (10) = 2/5, left: 2/5, 6, 4\n(4) + (10) = 14, left: 14, 6, 4\n(6) + (14) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (6 + (4 + 10)))"}, {"input": "6 4 10 4\n", "output": "(10) / (4) = 5/2, left: 5/2, 6, 4\n(6) / (4) = 3/2, left: 3/2, 5/2\n(6) * (5/2) = 15, left: 15, 4\n(5/2) / (6) = 5/12, left: 5/12, 4\n(4) - (10) = -6, left: -6, 6, 4\n(6) * (-6) = -36, left: -36, 4\n(4) / (6) = 2/3, left: 2/3, -6\n(4) + (10) = 14, left: 14, 6, 4\n(6) + (14) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (6 + (4 + 10)))"}, {"input": "6 4 10 4\n", "output": "(4) - (10) = -6, left: -6, 6, 4\n(-6) / (6) = -1, left: -1, 4\n(-1) - (4) = -5, left: -5\n(4) / (10) = 2/5, left: 2/5, 6, 4\n(6) + (2/5) = 32/5, left: 32/5, 4\n(10) - (4) = 6, left: 6, 6, 4\n(4) + (6) = 10, left: 10, 6\n(4) + (10) = 14, left: 14, 6, 4\n(6) + (14) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (6 + (4 + 10)))"}, {"input": "6 4 10 4\n", "output": "(6) + (4) = 10, left: 10, 10, 4\n(10) - (10) = 0, left: 0, 4\n(0) / (4) = 0, left: 0\n(10) - (10) = 0, left: 0, 4\n(0) / (4) = 0, left: 0\n(4) - (0) = 4, left: 4\n(0) - (4) = -4, left: -4\n(10) + (10) = 20, left: 20, 4\n(20) - (4) = 16, left: 16\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 + (6 + 4)))"}, {"input": "1 4 2 6\n", "output": "(4) / (1) = 4, left: 4, 2, 6\n(2) + (6) = 8, left: 8, 4\n(4) / (6) = 2/3, left: 2/3, 2\n(1) + (4) = 5, left: 5, 2, 6\n(5) - (2) = 3, left: 3, 6\n(2) + (5) = 7, left: 7, 6\n(4) - (1) = 3, left: 3, 2, 6\n(3) / (2) = 3/2, left: 3/2, 6\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((4 - 1) * (2 + 6))"}, {"input": "1 4 2 6\n", "output": "(2) - (4) = -2, left: -2, 1, 6\n(4) / (2) = 2, left: 2, 1, 6\n(1) * (2) = 2, left: 2, 6\n(4) - (2) = 2, left: 2, 1, 6\n(1) / (2) = 1/2, left: 1/2, 6\n(6) - (2) = 4, left: 4, 1, 4\n(1) + (4) = 5, left: 5, 4\n(2) + (6) = 8, left: 8, 1, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((2 + 6) * (4 - 1))"}, {"input": "1 4 2 6\n", "output": "(2) + (6) = 8, left: 8, 1, 4\n(1) + (4) = 5, left: 5, 8\n(8) + (5) = 13, left: 13\n(5) / (8) = 5/8, left: 5/8\n(4) / (1) = 4, left: 4, 8\n(8) / (4) = 2, left: 2\n(8) + (4) = 12, left: 12\n(1) * (4) = 4, left: 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((2 + 6) * (4 - 1))"}, {"input": "1 4 2 6\n", "output": "(1) - (4) = -3, left: -3, 2, 6\n(-3) / (2) = -3/2, left: -3/2, 6\n(2) / (-3) = -2/3, left: -2/3, 6\n(1) * (4) = 4, left: 4, 2, 6\n(1) / (4) = 1/4, left: 1/4, 2, 6\n(1) + (4) = 5, left: 5, 2, 6\n(5) - (6) = -1, left: -1, 2\n(4) - (1) = 3, left: 3, 2, 6\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((4 - 1) * (2 + 6))"}, {"input": "1 4 2 6\n", "output": "(4) * (6) = 24, left: 24, 1, 2\n(2) * (24) = 48, left: 48, 1\n(1) + (48) = 49, left: 49\n(24) - (2) = 22, left: 22, 1\n(2) + (24) = 26, left: 26, 1\n(26) - (1) = 25, left: 25\n(2) / (24) = 1/12, left: 1/12, 1\n(1) - (24) = -23, left: -23, 2\n(2) - (1) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((4 * 6) * (2 - 1))"}, {"input": "1 4 2 6\n", "output": "(1) - (4) = -3, left: -3, 2, 6\n(2) - (-3) = 5, left: 5, 6\n(1) * (4) = 4, left: 4, 2, 6\n(2) + (6) = 8, left: 8, 4\n(6) - (4) = 2, left: 2, 2\n(6) + (4) = 10, left: 10, 2\n(1) / (4) = 1/4, left: 1/4, 2, 6\n(2) / (1/4) = 8, left: 8, 6\n(6) / (2) = 3, left: 3, 1/4\n(1) + (4) = 5, left: 5, 2, 6\n(4) - (1) = 3, left: 3, 2, 6\n(6) - (3) = 3, left: 3, 2\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((4 - 1) * (2 + 6))"}, {"input": "1 4 2 6\n", "output": "(4) / (1) = 4, left: 4, 2, 6\n(2) / (4) = 1/2, left: 1/2, 6\n(1) + (4) = 5, left: 5, 2, 6\n(2) - (6) = -4, left: -4, 5\n(5) - (2) = 3, left: 3, 6\n(5) / (2) = 5/2, left: 5/2, 6\n(6) + (5/2) = 17/2, left: 17/2\n(4) - (1) = 3, left: 3, 2, 6\n(3) - (6) = -3, left: -3, 2\n(3) - (2) = 1, left: 1, 6\n(3) / (2) = 3/2, left: 3/2, 6\n(2) * (6) = 12, left: 12, 3\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((4 - 1) * (2 + 6))"}, {"input": "1 4 2 6\n", "output": "(2) / (4) = 1/2, left: 1/2, 1, 6\n(6) - (1) = 5, left: 5, 1/2\n(4) / (2) = 2, left: 2, 1, 6\n(6) - (1) = 5, left: 5, 2\n(4) * (2) = 8, left: 8, 1, 6\n(4) - (2) = 2, left: 2, 1, 6\n(6) + (2) = 8, left: 8, 1\n(1) / (6) = 1/6, left: 1/6, 2\n(1) / (2) = 1/2, left: 1/2, 6\n(4) + (2) = 6, left: 6, 1, 6\n(1) / (6) = 1/6, left: 1/6, 6\n(2) + (6) = 8, left: 8, 1, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((2 + 6) * (4 - 1))"}, {"input": "2 4 2 3\n", "output": "(4) - (2) = 2, left: 2, 2, 3\n(2) + (3) = 5, left: 5, 2\n(2) / (3) = 2/3, left: 2/3, 2\n(3) / (2) = 3/2, left: 3/2, 2\n(4) / (2) = 2, left: 2, 2, 3\n(3) * (2) = 6, left: 6, 2\n(3) + (2) = 5, left: 5, 2\n(4) + (2) = 6, left: 6, 2, 3\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (4 + 2)))"}, {"input": "2 4 2 3\n", "output": "(2) / (2) = 1, left: 1, 4, 3\n(4) - (1) = 3, left: 3, 3\n(2) / (2) = 1, left: 1, 4, 3\n(3) * (1) = 3, left: 3, 4\n(1) - (3) = -2, left: -2, 4\n(2) - (2) = 0, left: 0, 4, 3\n(4) / (3) = 4/3, left: 4/3, 0\n(2) + (2) = 4, left: 4, 4, 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (2 + 2)))"}, {"input": "2 4 2 3\n", "output": "(4) / (3) = 4/3, left: 4/3, 2, 2\n(2) - (4/3) = 2/3, left: 2/3, 2\n(4) * (3) = 12, left: 12, 2, 2\n(2) + (12) = 14, left: 14, 2\n(3) - (4) = -1, left: -1, 2, 2\n(2) * (3) = 6, left: 6, 4, 2\n(2) * (4) = 8, left: 8, 2, 3\n(2) + (4) = 6, left: 6, 2, 3\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (2 + 4)))"}, {"input": "2 4 2 3\n", "output": "(2) + (2) = 4, left: 4, 4, 3\n(3) - (4) = -1, left: -1, 4\n(-1) / (4) = -1/4, left: -1/4\n(3) / (4) = 3/4, left: 3/4, 4\n(4) / (3/4) = 16/3, left: 16/3\n(4) / (3) = 4/3, left: 4/3, 4\n(4) - (3) = 1, left: 1, 4\n(4) + (4) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (2 + 2)))"}, {"input": "2 4 2 3\n", "output": "(2) - (2) = 0, left: 0, 4, 3\n(0) - (3) = -3, left: -3, 4\n(3) + (0) = 3, left: 3, 4\n(2) / (2) = 1, left: 1, 4, 3\n(1) - (3) = -2, left: -2, 4\n(4) - (3) = 1, left: 1, 1\n(2) / (2) = 1, left: 1, 4, 3\n(2) * (2) = 4, left: 4, 4, 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (2 * 2)))"}, {"input": "2 4 2 3\n", "output": "(4) - (2) = 2, left: 2, 2, 3\n(3) - (2) = 1, left: 1, 2\n(2) - (2) = 0, left: 0, 3\n(2) * (3) = 6, left: 6, 2\n(2) * (6) = 12, left: 12\n(4) / (2) = 2, left: 2, 2, 3\n(2) - (3) = -1, left: -1, 2\n(2) * (2) = 4, left: 4, 3\n(4) - (3) = 1, left: 1\n(2) - (2) = 0, left: 0, 3\n(3) / (2) = 3/2, left: 3/2, 2\n(4) + (2) = 6, left: 6, 2, 3\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (4 + 2)))"}, {"input": "2 4 2 3\n", "output": "(4) * (3) = 12, left: 12, 2, 2\n(2) + (12) = 14, left: 14, 2\n(3) / (4) = 3/4, left: 3/4, 2, 2\n(4) - (3) = 1, left: 1, 2, 2\n(2) * (2) = 4, left: 4, 1\n(1) / (2) = 1/2, left: 1/2, 2\n(4) + (3) = 7, left: 7, 2, 2\n(2) / (3) = 2/3, left: 2/3, 4, 2\n(2) * (3) = 6, left: 6, 4, 2\n(2) * (4) = 8, left: 8, 2, 3\n(2) / (4) = 1/2, left: 1/2, 2, 3\n(2) + (4) = 6, left: 6, 2, 3\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (2 + 4)))"}, {"input": "2 4 2 3\n", "output": "(2) / (2) = 1, left: 1, 4, 3\n(3) / (4) = 3/4, left: 3/4, 1\n(4) * (3) = 12, left: 12, 1\n(12) / (1) = 12, left: 12\n(2) / (2) = 1, left: 1, 4, 3\n(1) / (4) = 1/4, left: 1/4, 3\n(3) / (1/4) = 12, left: 12\n(3) - (4) = -1, left: -1, 1\n(1) * (-1) = -1, left: -1\n(2) - (2) = 0, left: 0, 4, 3\n(0) - (3) = -3, left: -3, 4\n(2) + (2) = 4, left: 4, 4, 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (2 + 2)))"}, {"input": "2 4 2 3\n", "output": "(2) - (2) = 0, left: 0, 4, 3\n(3) / (4) = 3/4, left: 3/4, 0\n(3) + (0) = 3, left: 3, 4\n(4) / (3) = 4/3, left: 4/3\n(2) / (2) = 1, left: 1, 4, 3\n(3) * (1) = 3, left: 3, 4\n(4) - (3) = 1, left: 1, 1\n(3) - (4) = -1, left: -1, 1\n(1) * (-1) = -1, left: -1\n(2) * (2) = 4, left: 4, 4, 3\n(4) - (3) = 1, left: 1, 4\n(4) / (4) = 1, left: 1, 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (2 * 2)))"}, {"input": "4 6 2 4\n", "output": "(2) - (6) = -4, left: -4, 4, 4\n(-4) / (4) = -1, left: -1, 4\n(4) / (4) = 1, left: 1, -4\n(-4) - (1) = -5, left: -5\n(6) * (2) = 12, left: 12, 4, 4\n(6) / (2) = 3, left: 3, 4, 4\n(4) / (4) = 1, left: 1, 3\n(3) + (1) = 4, left: 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 / 2) * (4 + 4))"}, {"input": "4 6 2 4\n", "output": "(6) / (4) = 3/2, left: 3/2, 4, 2\n(6) * (4) = 24, left: 24, 4, 2\n(4) / (6) = 2/3, left: 2/3, 4, 2\n(4) - (2) = 2, left: 2, 2/3\n(2/3) / (4) = 1/6, left: 1/6, 2\n(4) - (6) = -2, left: -2, 4, 2\n(-2) / (4) = -1/2, left: -1/2, 2\n(6) + (4) = 10, left: 10, 4, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (6 + 4)))"}, {"input": "4 6 2 4\n", "output": "(4) * (4) = 16, left: 16, 6, 2\n(16) / (6) = 8/3, left: 8/3, 2\n(8/3) - (2) = 2/3, left: 2/3\n(6) - (16) = -10, left: -10, 2\n(2) + (-10) = -8, left: -8\n(2) / (-10) = -1/5, left: -1/5\n(2) - (-10) = 12, left: 12\n(6) + (16) = 22, left: 22, 2\n(2) - (22) = -20, left: -20\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (6 + (4 * 4)))"}, {"input": "4 6 2 4\n", "output": "(6) * (4) = 24, left: 24, 4, 2\n(4) + (24) = 28, left: 28, 2\n(24) - (4) = 20, left: 20, 2\n(2) * (24) = 48, left: 48, 4\n(2) - (4) = -2, left: -2, 24\n(4) * (2) = 8, left: 8, 24\n(6) + (4) = 10, left: 10, 4, 2\n(10) - (2) = 8, left: 8, 4\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (6 + 4)))"}, {"input": "4 6 2 4\n", "output": "(4) / (6) = 2/3, left: 2/3, 2, 4\n(4) + (2/3) = 14/3, left: 14/3, 2\n(2) / (4) = 1/2, left: 1/2, 2/3\n(4) * (6) = 24, left: 24, 2, 4\n(4) / (2) = 2, left: 2, 24\n(4) - (6) = -2, left: -2, 2, 4\n(4) * (-2) = -8, left: -8, 2\n(4) + (6) = 10, left: 10, 2, 4\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (4 + 6)))"}, {"input": "4 6 2 4\n", "output": "(4) / (6) = 2/3, left: 2/3, 2, 4\n(2/3) - (4) = -10/3, left: -10/3, 2\n(4) * (6) = 24, left: 24, 2, 4\n(4) / (2) = 2, left: 2, 24\n(2) / (24) = 1/12, left: 1/12, 4\n(4) / (24) = 1/6, left: 1/6, 2\n(6) - (4) = 2, left: 2, 2, 4\n(4) / (2) = 2, left: 2, 2\n(2) * (4) = 8, left: 8, 2\n(4) - (6) = -2, left: -2, 2, 4\n(4) + (6) = 10, left: 10, 2, 4\n(10) / (2) = 5, left: 5, 4\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (4 + 6)))"}, {"input": "4 6 2 4\n", "output": "(2) - (6) = -4, left: -4, 4, 4\n(-4) / (4) = -1, left: -1, 4\n(4) * (-4) = -16, left: -16, 4\n(6) * (2) = 12, left: 12, 4, 4\n(6) / (2) = 3, left: 3, 4, 4\n(4) - (3) = 1, left: 1, 4\n(4) - (1) = 3, left: 3\n(3) - (4) = -1, left: -1, 4\n(4) / (3) = 4/3, left: 4/3, 4\n(4) * (4) = 16, left: 16, 3\n(3) + (16) = 19, left: 19\n(4) - (4) = 0, left: 0, 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 / 2) * (4 + 4))"}, {"input": "3 1 2 9\n", "output": "(3) / (9) = 1/3, left: 1/3, 1, 2\n(1) / (2) = 1/2, left: 1/2, 1/3\n(1/3) + (1/2) = 5/6, left: 5/6\n(3) + (9) = 12, left: 12, 1, 2\n(2) * (12) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((2 * (3 + 9)) / 1)"}, {"input": "3 1 2 9\n", "output": "(9) / (3) = 3, left: 3, 1, 2\n(2) * (3) = 6, left: 6, 1\n(2) - (3) = -1, left: -1, 1\n(3) / (9) = 1/3, left: 1/3, 1, 2\n(1) + (1/3) = 4/3, left: 4/3, 2\n(2) * (4/3) = 8/3, left: 8/3\n(1/3) / (2) = 1/6, left: 1/6, 1\n(3) * (9) = 27, left: 27, 1, 2\n(27) - (2) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: (((3 * 9) - 2) - 1)"}, {"input": "3 1 2 9\n", "output": "(9) / (2) = 9/2, left: 9/2, 3, 1\n(9/2) - (1) = 7/2, left: 7/2, 3\n(1) / (9/2) = 2/9, left: 2/9, 3\n(2) / (9) = 2/9, left: 2/9, 3, 1\n(2) * (9) = 18, left: 18, 3, 1\n(18) / (1) = 18, left: 18, 3\n(2) + (9) = 11, left: 11, 3, 1\n(2) - (9) = -7, left: -7, 3, 1\n(1) - (-7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 - (2 - 9)))"}, {"input": "3 1 2 9\n", "output": "(3) - (9) = -6, left: -6, 1, 2\n(1) + (2) = 3, left: 3, -6\n(3) / (9) = 1/3, left: 1/3, 1, 2\n(1) - (1/3) = 2/3, left: 2/3, 2\n(1/3) / (2) = 1/6, left: 1/6, 1\n(2) - (1) = 1, left: 1, 1/3\n(1) / (1/3) = 3, left: 3\n(3) + (9) = 12, left: 12, 1, 2\n(2) * (12) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((2 * (3 + 9)) / 1)"}, {"input": "3 1 2 9\n", "output": "(1) * (9) = 9, left: 9, 3, 2\n(9) - (3) = 6, left: 6, 2\n(2) - (6) = -4, left: -4\n(6) / (2) = 3, left: 3\n(9) / (3) = 3, left: 3, 2\n(2) - (3) = -1, left: -1\n(2) + (3) = 5, left: 5\n(2) / (3) = 2/3, left: 2/3\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 + (1 * 9)))"}, {"input": "3 1 2 9\n", "output": "(3) / (2) = 3/2, left: 3/2, 1, 9\n(1) + (3/2) = 5/2, left: 5/2, 9\n(9) + (5/2) = 23/2, left: 23/2\n(2) / (3) = 2/3, left: 2/3, 1, 9\n(3) + (2) = 5, left: 5, 1, 9\n(9) - (1) = 8, left: 8, 5\n(3) * (2) = 6, left: 6, 1, 9\n(3) * (9) = 27, left: 27, 1, 2\n(27) - (1) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((3 * 9) - 1) - 2)"}, {"input": "3 1 2 9\n", "output": "(9) / (3) = 3, left: 3, 1, 2\n(1) - (3) = -2, left: -2, 2\n(-2) / (2) = -1, left: -1\n(3) - (1) = 2, left: 2, 2\n(3) / (1) = 3, left: 3, 2\n(1) * (2) = 2, left: 2, 3\n(3) / (9) = 1/3, left: 1/3, 1, 2\n(1) * (1/3) = 1/3, left: 1/3, 2\n(2) * (1/3) = 2/3, left: 2/3, 1\n(2) / (1/3) = 6, left: 6, 1\n(6) - (1) = 5, left: 5\n(3) * (9) = 27, left: 27, 1, 2\n(27) - (2) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: (((3 * 9) - 2) - 1)"}, {"input": "3 1 2 9\n", "output": "(1) * (9) = 9, left: 9, 3, 2\n(9) - (3) = 6, left: 6, 2\n(6) - (2) = 4, left: 4\n(2) * (6) = 12, left: 12\n(2) + (6) = 8, left: 8\n(2) - (6) = -4, left: -4\n(6) / (2) = 3, left: 3\n(9) / (3) = 3, left: 3, 2\n(2) - (3) = -1, left: -1\n(2) * (3) = 6, left: 6\n(2) + (3) = 5, left: 5\n(3) + (9) = 12, left: 12, 2\n(2) / (12) = 1/6, left: 1/6\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 + (1 * 9)))"}, {"input": "3 1 2 9\n", "output": "(3) / (2) = 3/2, left: 3/2, 1, 9\n(2) / (3) = 2/3, left: 2/3, 1, 9\n(1) * (9) = 9, left: 9, 2/3\n(9) - (1) = 8, left: 8, 2/3\n(1) * (2/3) = 2/3, left: 2/3, 9\n(3) + (2) = 5, left: 5, 1, 9\n(5) / (1) = 5, left: 5, 9\n(9) * (5) = 45, left: 45, 1\n(3) * (2) = 6, left: 6, 1, 9\n(1) / (9) = 1/9, left: 1/9, 6\n(3) - (2) = 1, left: 1, 1, 9\n(3) * (9) = 27, left: 27, 1, 2\n(27) - (1) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((3 * 9) - 1) - 2)"}, {"input": "3 1 2 9\n", "output": "(3) - (9) = -6, left: -6, 1, 2\n(1) / (-6) = -1/6, left: -1/6, 2\n(1) * (-6) = -6, left: -6, 2\n(1) - (-6) = 7, left: 7, 2\n(-6) - (2) = -8, left: -8, 1\n(2) + (-6) = -4, left: -4, 1\n(-6) / (2) = -3, left: -3, 1\n(1) * (-3) = -3, left: -3\n(3) / (9) = 1/3, left: 1/3, 1, 2\n(2) + (1/3) = 7/3, left: 7/3, 1\n(1) - (2) = -1, left: -1, 1/3\n(3) + (9) = 12, left: 12, 1, 2\n(2) * (12) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((2 * (3 + 9)) / 1)"}, {"input": "5 4 2 5\n", "output": "(5) * (2) = 10, left: 10, 4, 5\n(2) - (5) = -3, left: -3, 4, 5\n(4) / (-3) = -4/3, left: -4/3, 5\n(2) / (5) = 2/5, left: 2/5, 4, 5\n(5) / (5) = 1, left: 1, 4, 2\n(5) + (5) = 10, left: 10, 4, 2\n(2) + (10) = 12, left: 12, 4\n(4) * (12) = 48, left: 48\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(2) * (5) = 10, left: 10, 5, 4\n(5) / (2) = 5/2, left: 5/2, 5, 4\n(4) + (5/2) = 13/2, left: 13/2, 5\n(5) * (13/2) = 65/2, left: 65/2\n(5) * (5) = 25, left: 25, 4, 2\n(5) / (5) = 1, left: 1, 4, 2\n(4) * (1) = 4, left: 4, 2\n(5) + (5) = 10, left: 10, 4, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(5) - (2) = 3, left: 3, 4, 5\n(4) - (2) = 2, left: 2, 5, 5\n(2) + (5) = 7, left: 7, 5, 4\n(5) + (4) = 9, left: 9, 2, 5\n(4) / (5) = 4/5, left: 4/5, 2, 5\n(5) * (4) = 20, left: 20, 2, 5\n(5) / (5) = 1, left: 1, 4, 2\n(5) + (5) = 10, left: 10, 4, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(5) / (5) = 1, left: 1, 4, 2\n(2) - (1) = 1, left: 1, 4\n(2) / (1) = 2, left: 2, 4\n(4) * (1) = 4, left: 4, 2\n(5) * (5) = 25, left: 25, 4, 2\n(2) / (4) = 1/2, left: 1/2, 25\n(4) / (2) = 2, left: 2, 25\n(5) + (5) = 10, left: 10, 4, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(5) - (5) = 0, left: 0, 4, 2\n(0) - (4) = -4, left: -4, 2\n(4) - (0) = 4, left: 4, 2\n(4) + (0) = 4, left: 4, 2\n(5) + (5) = 10, left: 10, 4, 2\n(10) - (2) = 8, left: 8, 4\n(8) / (4) = 2, left: 2\n(2) * (10) = 20, left: 20, 4\n(20) / (4) = 5, left: 5\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(2) - (5) = -3, left: -3, 4, 5\n(-3) - (5) = -8, left: -8, 4\n(-8) / (4) = -2, left: -2\n(-3) - (4) = -7, left: -7, 5\n(5) + (2) = 7, left: 7, 4, 5\n(2) / (5) = 2/5, left: 2/5, 4, 5\n(5) * (5) = 25, left: 25, 4, 2\n(4) - (2) = 2, left: 2, 25\n(4) / (25) = 4/25, left: 4/25, 2\n(5) / (5) = 1, left: 1, 4, 2\n(2) * (1) = 2, left: 2, 4\n(5) + (5) = 10, left: 10, 4, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(5) - (5) = 0, left: 0, 4, 2\n(4) - (0) = 4, left: 4, 2\n(4) / (2) = 2, left: 2\n(0) / (4) = 0, left: 0, 2\n(2) + (0) = 2, left: 2\n(2) - (0) = 2, left: 2, 4\n(0) - (2) = -2, left: -2, 4\n(4) / (-2) = -2, left: -2\n(2) - (4) = -2, left: -2, 0\n(0) / (-2) = 0, left: 0\n(4) / (2) = 2, left: 2, 0\n(5) + (5) = 10, left: 10, 4, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(2) / (5) = 2/5, left: 2/5, 4, 5\n(4) - (2/5) = 18/5, left: 18/5, 5\n(5) + (2) = 7, left: 7, 4, 5\n(7) - (4) = 3, left: 3, 5\n(2) - (5) = -3, left: -3, 4, 5\n(5) / (-3) = -5/3, left: -5/3, 4\n(4) / (2) = 2, left: 2, 5, 5\n(4) - (2) = 2, left: 2, 5, 5\n(5) + (4) = 9, left: 9, 2, 5\n(2) - (9) = -7, left: -7, 5\n(5) * (4) = 20, left: 20, 2, 5\n(5) + (5) = 10, left: 10, 4, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(5) - (5) = 0, left: 0, 4, 2\n(5) / (5) = 1, left: 1, 4, 2\n(4) / (2) = 2, left: 2, 1\n(2) + (1) = 3, left: 3, 4\n(4) * (1) = 4, left: 4, 2\n(2) * (4) = 8, left: 8\n(4) + (1) = 5, left: 5, 2\n(5) * (5) = 25, left: 25, 4, 2\n(2) - (25) = -23, left: -23, 4\n(-23) - (4) = -27, left: -27\n(4) + (2) = 6, left: 6, 25\n(5) + (5) = 10, left: 10, 4, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(2) / (5) = 2/5, left: 2/5, 5, 4\n(5) - (2) = 3, left: 3, 5, 4\n(2) - (5) = -3, left: -3, 5, 4\n(5) - (5) = 0, left: 0, 4, 2\n(4) + (2) = 6, left: 6, 0\n(0) + (6) = 6, left: 6\n(5) / (5) = 1, left: 1, 4, 2\n(4) - (1) = 3, left: 3, 2\n(5) / (5) = 1, left: 1, 4, 2\n(5) + (5) = 10, left: 10, 4, 2\n(10) - (4) = 6, left: 6, 2\n(2) + (6) = 8, left: 8\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "8 5 6 8\n", "output": "(8) - (8) = 0, left: 0, 5, 6\n(5) / (6) = 5/6, left: 5/6, 0\n(8) + (8) = 16, left: 16, 5, 6\n(6) / (16) = 3/8, left: 3/8, 5\n(8) * (8) = 64, left: 64, 5, 6\n(8) / (8) = 1, left: 1, 5, 6\n(6) - (5) = 1, left: 1, 1\n(5) * (6) = 30, left: 30, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (8 / 8)))"}, {"input": "8 5 6 8\n", "output": "(8) - (6) = 2, left: 2, 5, 8\n(5) / (2) = 5/2, left: 5/2, 8\n(5/2) / (8) = 5/16, left: 5/16\n(2) / (5) = 2/5, left: 2/5, 8\n(2/5) - (8) = -38/5, left: -38/5\n(2) - (5) = -3, left: -3, 8\n(8) / (-3) = -8/3, left: -8/3\n(5) - (2) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 - 6)))"}, {"input": "8 5 6 8\n", "output": "(5) + (8) = 13, left: 13, 8, 6\n(8) / (6) = 4/3, left: 4/3, 13\n(8) * (13) = 104, left: 104, 6\n(5) * (8) = 40, left: 40, 8, 6\n(5) / (8) = 5/8, left: 5/8, 8, 6\n(8) - (6) = 2, left: 2, 5/8\n(6) * (5/8) = 15/4, left: 15/4, 8\n(8) - (5) = 3, left: 3, 8, 6\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (8 - 5)))"}, {"input": "8 5 6 8\n", "output": "(8) * (8) = 64, left: 64, 5, 6\n(5) + (6) = 11, left: 11, 64\n(64) + (11) = 75, left: 75\n(6) * (64) = 384, left: 384, 5\n(8) - (8) = 0, left: 0, 5, 6\n(5) - (6) = -1, left: -1, 0\n(8) / (8) = 1, left: 1, 5, 6\n(5) / (1) = 5, left: 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (8 / 8)))"}, {"input": "8 5 6 8\n", "output": "(6) / (8) = 3/4, left: 3/4, 5, 8\n(8) - (5) = 3, left: 3, 3/4\n(8) / (5) = 8/5, left: 8/5, 3/4\n(5) + (8) = 13, left: 13, 3/4\n(5) + (3/4) = 23/4, left: 23/4, 8\n(8) / (3/4) = 32/3, left: 32/3, 5\n(6) - (8) = -2, left: -2, 5, 8\n(5) - (8) = -3, left: -3, -2\n(5) + (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 + (6 - 8)))"}, {"input": "8 5 6 8\n", "output": "(8) - (8) = 0, left: 0, 5, 6\n(0) - (6) = -6, left: -6, 5\n(0) / (5) = 0, left: 0, 6\n(8) + (8) = 16, left: 16, 5, 6\n(5) * (16) = 80, left: 80, 6\n(5) / (6) = 5/6, left: 5/6, 16\n(8) * (8) = 64, left: 64, 5, 6\n(5) * (6) = 30, left: 30, 64\n(5) + (6) = 11, left: 11, 64\n(6) - (64) = -58, left: -58, 5\n(6) / (64) = 3/32, left: 3/32, 5\n(8) / (8) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (8 / 8)))"}, {"input": "8 5 6 8\n", "output": "(8) - (8) = 0, left: 0, 5, 6\n(5) - (6) = -1, left: -1, 0\n(5) * (6) = 30, left: 30, 0\n(0) / (5) = 0, left: 0, 6\n(6) - (0) = 6, left: 6\n(8) * (8) = 64, left: 64, 5, 6\n(8) - (8) = 0, left: 0, 5, 6\n(6) - (5) = 1, left: 1, 0\n(5) - (0) = 5, left: 5, 6\n(0) - (5) = -5, left: -5, 6\n(6) * (-5) = -30, left: -30\n(8) / (8) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (8 / 8)))"}, {"input": "2 3 8 12\n", "output": "(2) * (3) = 6, left: 6, 8, 12\n(8) + (12) = 20, left: 20, 6\n(20) / (6) = 10/3, left: 10/3\n(20) - (6) = 14, left: 14\n(12) - (8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (12 - 8))"}, {"input": "2 3 8 12\n", "output": "(3) - (12) = -9, left: -9, 2, 8\n(8) * (-9) = -72, left: -72, 2\n(2) / (8) = 1/4, left: 1/4, -9\n(2) * (8) = 16, left: 16, -9\n(8) - (2) = 6, left: 6, -9\n(2) + (-9) = -7, left: -7, 8\n(8) * (-7) = -56, left: -56\n(12) / (3) = 4, left: 4, 2, 8\n(8) + (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (8 + (12 / 3)))"}, {"input": "2 3 8 12\n", "output": "(12) - (2) = 10, left: 10, 3, 8\n(8) / (10) = 4/5, left: 4/5, 3\n(8) - (10) = -2, left: -2, 3\n(12) / (2) = 6, left: 6, 3, 8\n(3) + (8) = 11, left: 11, 6\n(6) / (8) = 3/4, left: 3/4, 3\n(8) * (6) = 48, left: 48, 3\n(48) / (3) = 16, left: 16\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 / 2) - 3))"}, {"input": "2 3 8 12\n", "output": "(2) * (3) = 6, left: 6, 8, 12\n(8) / (12) = 2/3, left: 2/3, 6\n(6) - (2/3) = 16/3, left: 16/3\n(6) * (2/3) = 4, left: 4\n(8) + (12) = 20, left: 20, 6\n(6) * (20) = 120, left: 120\n(8) - (12) = -4, left: -4, 6\n(12) - (8) = 4, left: 4, 6\n(6) + (4) = 10, left: 10\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (12 - 8))"}, {"input": "2 3 8 12\n", "output": "(3) * (8) = 24, left: 24, 2, 12\n(24) / (12) = 2, left: 2, 2\n(2) / (2) = 1, left: 1\n(2) - (2) = 0, left: 0\n(2) + (2) = 4, left: 4\n(12) + (24) = 36, left: 36, 2\n(2) * (36) = 72, left: 72\n(24) - (12) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((3 * 8) - 12))"}, {"input": "2 3 8 12\n", "output": "(3) + (12) = 15, left: 15, 2, 8\n(2) + (8) = 10, left: 10, 15\n(10) / (15) = 2/3, left: 2/3\n(8) / (2) = 4, left: 4, 15\n(3) - (12) = -9, left: -9, 2, 8\n(12) / (3) = 4, left: 4, 2, 8\n(8) / (4) = 2, left: 2, 2\n(2) + (2) = 4, left: 4\n(8) + (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (8 + (12 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) + (3) = 9, left: 9, 6, 3\n(9) / (6) = 3/2, left: 3/2, 3\n(6) - (3) = 3, left: 3, 6, 3\n(3) + (3) = 6, left: 6, 6\n(3) - (3) = 0, left: 0, 6\n(3) / (6) = 1/2, left: 1/2, 3\n(6) / (3) = 2, left: 2, 6, 3\n(6) - (2) = 4, left: 4, 3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) + (6) = 12, left: 12, 3, 3\n(3) * (12) = 36, left: 36, 3\n(6) - (6) = 0, left: 0, 3, 3\n(3) + (3) = 6, left: 6, 6, 6\n(3) * (3) = 9, left: 9, 6, 6\n(3) - (3) = 0, left: 0, 6, 6\n(3) / (3) = 1, left: 1, 6, 6\n(6) / (3) = 2, left: 2, 6, 3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) / (6) = 1, left: 1, 3, 3\n(3) - (3) = 0, left: 0, 1\n(6) - (6) = 0, left: 0, 3, 3\n(6) / (6) = 1, left: 1, 3, 3\n(3) * (1) = 3, left: 3, 3\n(3) / (6) = 1/2, left: 1/2, 6, 3\n(3) - (6) = -3, left: -3, 1/2\n(6) / (3) = 2, left: 2, 6, 3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) * (3) = 18, left: 18, 6, 3\n(3) / (18) = 1/6, left: 1/6, 6\n(18) - (3) = 15, left: 15, 6\n(18) / (6) = 3, left: 3, 3\n(6) - (3) = 3, left: 3, 6, 3\n(3) - (6) = -3, left: -3, 6, 3\n(6) * (3) = 18, left: 18, -3\n(6) / (3) = 2, left: 2, 6, 3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(3) / (6) = 1/2, left: 1/2, 6, 3\n(6) - (3) = 3, left: 3, 6, 3\n(3) / (3) = 1, left: 1, 6\n(1) - (6) = -5, left: -5\n(3) - (6) = -3, left: -3, 6, 3\n(-3) / (6) = -1/2, left: -1/2, 3\n(6) / (3) = 2, left: 2, 6, 3\n(3) + (2) = 5, left: 5, 6\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) + (3) = 9, left: 9, 6, 3\n(3) / (6) = 1/2, left: 1/2, 6, 3\n(3) / (6) = 1/2, left: 1/2, 1/2\n(6) * (1/2) = 3, left: 3, 3\n(3) + (1/2) = 7/2, left: 7/2, 6\n(6) * (3) = 18, left: 18, 6, 3\n(6) / (3) = 2, left: 2, 18\n(2) / (18) = 1/9, left: 1/9\n(6) - (3) = 3, left: 3, 6, 3\n(3) - (6) = -3, left: -3, 6, 3\n(-3) - (3) = -6, left: -6, 6\n(6) / (3) = 2, left: 2, 6, 3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) + (3) = 9, left: 9, 6, 3\n(9) - (6) = 3, left: 3, 3\n(9) / (6) = 3/2, left: 3/2, 3\n(3) - (3/2) = 3/2, left: 3/2\n(6) - (3) = 3, left: 3, 6, 3\n(3) / (3) = 1, left: 1, 6\n(1) / (6) = 1/6, left: 1/6\n(3) + (3) = 6, left: 6, 6\n(6) * (3) = 18, left: 18, 3\n(6) / (3) = 2, left: 2, 6, 3\n(6) - (2) = 4, left: 4, 3\n(6) * (2) = 12, left: 12, 3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) + (6) = 12, left: 12, 3, 3\n(6) / (6) = 1, left: 1, 3, 3\n(3) + (1) = 4, left: 4, 3\n(6) * (6) = 36, left: 36, 3, 3\n(3) + (3) = 6, left: 6, 6, 6\n(6) + (6) = 12, left: 12, 6\n(6) * (6) = 36, left: 36, 6\n(3) * (3) = 9, left: 9, 6, 6\n(6) * (9) = 54, left: 54, 6\n(3) - (3) = 0, left: 0, 6, 6\n(3) / (3) = 1, left: 1, 6, 6\n(6) / (3) = 2, left: 2, 6, 3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(3) / (6) = 1/2, left: 1/2, 6, 3\n(6) + (1/2) = 13/2, left: 13/2, 3\n(3) * (1/2) = 3/2, left: 3/2, 6\n(6) * (3) = 18, left: 18, 6, 3\n(6) - (18) = -12, left: -12, 3\n(6) + (18) = 24, left: 24, 3\n(3) * (24) = 72, left: 72\n(6) - (3) = 3, left: 3, 6, 3\n(3) - (3) = 0, left: 0, 6\n(6) + (3) = 9, left: 9, 6, 3\n(6) / (9) = 2/3, left: 2/3, 3\n(6) / (3) = 2, left: 2, 6, 3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) + (6) = 12, left: 12, 3, 3\n(6) / (6) = 1, left: 1, 3, 3\n(6) - (6) = 0, left: 0, 3, 3\n(3) * (0) = 0, left: 0, 3\n(6) - (6) = 0, left: 0, 3, 3\n(0) / (3) = 0, left: 0, 3\n(0) - (3) = -3, left: -3, 3\n(6) / (6) = 1, left: 1, 3, 3\n(3) / (1) = 3, left: 3, 3\n(3) - (1) = 2, left: 2, 3\n(3) / (6) = 1/2, left: 1/2, 6, 3\n(6) / (3) = 2, left: 2, 6, 3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "10 3 8 8\n", "output": "(3) / (8) = 3/8, left: 3/8, 10, 8\n(8) / (8) = 1, left: 1, 10, 3\n(8) - (8) = 0, left: 0, 10, 3\n(8) - (8) = 0, left: 0, 10, 3\n(8) / (8) = 1, left: 1, 10, 3\n(10) + (3) = 13, left: 13, 8, 8\n(10) / (3) = 10/3, left: 10/3, 8, 8\n(10) * (8) = 80, left: 80, 3, 8\n(80) - (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(8) - (10) = -2, left: -2, 3, 8\n(8) / (-2) = -4, left: -4, 3\n(10) / (8) = 5/4, left: 5/4, 3, 8\n(5/4) / (3) = 5/12, left: 5/12, 8\n(10) - (8) = 2, left: 2, 3, 8\n(10) * (8) = 80, left: 80, 3, 8\n(80) / (3) = 80/3, left: 80/3, 8\n(8) * (80/3) = 640/3, left: 640/3\n(80) - (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(3) * (8) = 24, left: 24, 10, 8\n(10) * (8) = 80, left: 80, 24\n(8) / (3) = 8/3, left: 8/3, 10, 8\n(8/3) - (8) = -16/3, left: -16/3, 10\n(8) / (8) = 1, left: 1, 10, 3\n(10) + (8) = 18, left: 18, 3, 8\n(3) - (18) = -15, left: -15, 8\n(10) * (8) = 80, left: 80, 3, 8\n(80) - (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(3) / (10) = 3/10, left: 3/10, 8, 8\n(10) + (3) = 13, left: 13, 8, 8\n(8) / (3) = 8/3, left: 8/3, 10, 8\n(8) + (8/3) = 32/3, left: 32/3, 10\n(8) - (10) = -2, left: -2, 3, 8\n(8) / (10) = 4/5, left: 4/5, 3, 8\n(3) + (8) = 11, left: 11, 4/5\n(10) * (8) = 80, left: 80, 3, 8\n(80) - (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(8) / (3) = 8/3, left: 8/3, 10, 8\n(8) - (10) = -2, left: -2, 3, 8\n(8) / (10) = 4/5, left: 4/5, 3, 8\n(10) / (8) = 5/4, left: 5/4, 3, 8\n(3) / (5/4) = 12/5, left: 12/5, 8\n(8) + (5/4) = 37/4, left: 37/4, 3\n(5/4) / (8) = 5/32, left: 5/32, 3\n(10) * (8) = 80, left: 80, 3, 8\n(80) - (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(3) + (8) = 11, left: 11, 10, 8\n(3) * (8) = 24, left: 24, 10, 8\n(8) / (3) = 8/3, left: 8/3, 10, 8\n(3) / (8) = 3/8, left: 3/8, 10, 8\n(8) - (3) = 5, left: 5, 10, 8\n(3) - (8) = -5, left: -5, 10, 8\n(8) - (10) = -2, left: -2, 3, 8\n(3) + (-2) = 1, left: 1, 8\n(1) - (8) = -7, left: -7\n(10) + (8) = 18, left: 18, 3, 8\n(10) / (8) = 5/4, left: 5/4, 3, 8\n(10) * (8) = 80, left: 80, 3, 8\n(80) - (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(3) / (8) = 3/8, left: 3/8, 10, 8\n(8) - (3) = 5, left: 5, 10, 8\n(8) + (5) = 13, left: 13, 10\n(3) + (8) = 11, left: 11, 10, 8\n(3) - (8) = -5, left: -5, 10, 8\n(8) / (8) = 1, left: 1, 10, 3\n(3) + (1) = 4, left: 4, 10\n(8) * (8) = 64, left: 64, 10, 3\n(8) / (10) = 4/5, left: 4/5, 3, 8\n(8) - (10) = -2, left: -2, 3, 8\n(10) + (8) = 18, left: 18, 3, 8\n(10) * (8) = 80, left: 80, 3, 8\n(80) - (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(3) - (8) = -5, left: -5, 10, 8\n(8) / (3) = 8/3, left: 8/3, 10, 8\n(8) + (8/3) = 32/3, left: 32/3, 10\n(8) - (8) = 0, left: 0, 10, 3\n(0) - (10) = -10, left: -10, 3\n(8) - (8) = 0, left: 0, 10, 3\n(3) * (0) = 0, left: 0, 10\n(10) / (3) = 10/3, left: 10/3, 8, 8\n(10/3) - (8) = -14/3, left: -14/3, 8\n(3) - (10) = -7, left: -7, 8, 8\n(10) - (3) = 7, left: 7, 8, 8\n(10) * (8) = 80, left: 80, 3, 8\n(80) - (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "5 7 11 4\n", "output": "(11) / (5) = 11/5, left: 11/5, 7, 4\n(4) / (7) = 4/7, left: 4/7, 11/5\n(7) - (11/5) = 24/5, left: 24/5, 4\n(4) / (7) = 4/7, left: 4/7, 5, 11\n(5) - (11) = -6, left: -6, 4/7\n(4) - (7) = -3, left: -3, 5, 11\n(5) / (-3) = -5/3, left: -5/3, 11\n(11) - (7) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((11 - 7) + (5 * 4))"}, {"input": "5 7 11 4\n", "output": "(11) + (4) = 15, left: 15, 5, 7\n(5) + (15) = 20, left: 20, 7\n(4) / (11) = 4/11, left: 4/11, 5, 7\n(5) + (4/11) = 59/11, left: 59/11, 7\n(7) / (5) = 7/5, left: 7/5, 4/11\n(11) / (4) = 11/4, left: 11/4, 5, 7\n(5) * (7) = 35, left: 35, 11/4\n(11) - (7) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((11 - 7) + (5 * 4))"}, {"input": "5 7 11 4\n", "output": "(4) / (11) = 4/11, left: 4/11, 5, 7\n(11) - (4) = 7, left: 7, 5, 7\n(11) / (4) = 11/4, left: 11/4, 5, 7\n(7) / (11/4) = 28/11, left: 28/11, 5\n(11) - (5) = 6, left: 6, 7, 4\n(5) + (11) = 16, left: 16, 7, 4\n(5) - (11) = -6, left: -6, 7, 4\n(11) - (7) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 * (11 - 7)))"}, {"input": "5 7 11 4\n", "output": "(7) + (4) = 11, left: 11, 5, 11\n(5) / (7) = 5/7, left: 5/7, 11, 4\n(4) * (5/7) = 20/7, left: 20/7, 11\n(5) + (7) = 12, left: 12, 11, 4\n(4) - (12) = -8, left: -8, 11\n(7) / (11) = 7/11, left: 7/11, 5, 4\n(7) + (11) = 18, left: 18, 5, 4\n(11) - (7) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 * (11 - 7)))"}, {"input": "5 7 11 4\n", "output": "(4) - (5) = -1, left: -1, 7, 11\n(7) - (11) = -4, left: -4, -1\n(-1) - (-4) = 3, left: 3\n(5) / (4) = 5/4, left: 5/4, 7, 11\n(7) - (11) = -4, left: -4, 5/4\n(11) / (5/4) = 44/5, left: 44/5, 7\n(5) + (4) = 9, left: 9, 7, 11\n(5) * (4) = 20, left: 20, 7, 11\n(11) + (20) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((11 + (5 * 4)) - 7)"}, {"input": "5 7 11 4\n", "output": "(4) - (7) = -3, left: -3, 5, 11\n(5) - (11) = -6, left: -6, -3\n(7) + (4) = 11, left: 11, 5, 11\n(5) + (11) = 16, left: 16, 11\n(7) * (4) = 28, left: 28, 5, 11\n(5) - (11) = -6, left: -6, 28\n(7) / (5) = 7/5, left: 7/5, 11, 4\n(4) - (7/5) = 13/5, left: 13/5, 11\n(7) - (5) = 2, left: 2, 11, 4\n(11) * (2) = 22, left: 22, 4\n(5) * (7) = 35, left: 35, 11, 4\n(11) - (7) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 * (11 - 7)))"}, {"input": "8 6 6 2\n", "output": "(8) + (6) = 14, left: 14, 6, 2\n(2) * (14) = 28, left: 28, 6\n(8) * (6) = 48, left: 48, 6, 2\n(6) + (2) = 8, left: 8, 48\n(6) + (48) = 54, left: 54, 2\n(6) / (8) = 3/4, left: 3/4, 6, 2\n(6) + (2) = 8, left: 8, 3/4\n(8) - (6) = 2, left: 2, 6, 2\n(6) * (2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((8 - 6) * (6 * 2))"}, {"input": "8 6 6 2\n", "output": "(8) * (6) = 48, left: 48, 6, 2\n(2) - (48) = -46, left: -46, 6\n(-46) / (6) = -23/3, left: -23/3\n(6) - (2) = 4, left: 4, 48\n(8) / (6) = 4/3, left: 4/3, 6, 2\n(2) / (4/3) = 3/2, left: 3/2, 6\n(3/2) / (6) = 1/4, left: 1/4\n(6) - (8) = -2, left: -2, 6, 2\n(2) - (-2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 - (6 - 8)))"}, {"input": "8 6 6 2\n", "output": "(6) - (6) = 0, left: 0, 8, 2\n(8) * (2) = 16, left: 16, 0\n(0) - (16) = -16, left: -16\n(6) + (6) = 12, left: 12, 8, 2\n(8) - (12) = -4, left: -4, 2\n(12) / (8) = 3/2, left: 3/2, 2\n(2) * (3/2) = 3, left: 3\n(6) / (6) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (6 / 6)))"}, {"input": "8 6 6 2\n", "output": "(2) - (8) = -6, left: -6, 6, 6\n(8) / (2) = 4, left: 4, 6, 6\n(6) * (6) = 36, left: 36, 4\n(8) - (2) = 6, left: 6, 6, 6\n(8) * (2) = 16, left: 16, 6, 6\n(6) / (6) = 1, left: 1, 16\n(6) - (16) = -10, left: -10, 6\n(8) + (2) = 10, left: 10, 6, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((8 + 2) - 6))"}, {"input": "8 6 6 2\n", "output": "(8) - (6) = 2, left: 2, 6, 2\n(2) - (6) = -4, left: -4, 2\n(-4) / (2) = -2, left: -2\n(2) / (-4) = -1/2, left: -1/2\n(6) - (2) = 4, left: 4, 2\n(2) / (6) = 1/3, left: 1/3, 2\n(2) - (1/3) = 5/3, left: 5/3\n(2) + (1/3) = 7/3, left: 7/3\n(6) * (2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (6 * (8 - 6)))"}, {"input": "8 6 6 2\n", "output": "(8) - (6) = 2, left: 2, 6, 2\n(2) - (6) = -4, left: -4, 2\n(-4) / (2) = -2, left: -2\n(6) - (2) = 4, left: 4, 2\n(4) / (2) = 2, left: 2\n(2) * (4) = 8, left: 8\n(6) / (2) = 3, left: 3, 2\n(2) * (3) = 6, left: 6\n(2) + (3) = 5, left: 5\n(2) / (6) = 1/3, left: 1/3, 2\n(2) / (1/3) = 6, left: 6\n(1/3) - (2) = -5/3, left: -5/3\n(6) * (2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (6 * (8 - 6)))"}, {"input": "8 6 6 2\n", "output": "(2) - (8) = -6, left: -6, 6, 6\n(6) + (6) = 12, left: 12, -6\n(8) / (2) = 4, left: 4, 6, 6\n(6) / (6) = 1, left: 1, 4\n(8) - (2) = 6, left: 6, 6, 6\n(6) - (6) = 0, left: 0, 6\n(2) / (8) = 1/4, left: 1/4, 6, 6\n(6) / (6) = 1, left: 1, 1/4\n(8) * (2) = 16, left: 16, 6, 6\n(6) / (6) = 1, left: 1, 16\n(16) * (1) = 16, left: 16\n(8) + (2) = 10, left: 10, 6, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((8 + 2) - 6))"}, {"input": "8 6 6 2\n", "output": "(6) - (6) = 0, left: 0, 8, 2\n(6) * (6) = 36, left: 36, 8, 2\n(36) / (8) = 9/2, left: 9/2, 2\n(8) * (2) = 16, left: 16, 36\n(6) + (6) = 12, left: 12, 8, 2\n(8) / (12) = 2/3, left: 2/3, 2\n(2/3) / (2) = 1/3, left: 1/3\n(2) + (12) = 14, left: 14, 8\n(8) / (2) = 4, left: 4, 12\n(2) - (8) = -6, left: -6, 12\n(6) / (6) = 1, left: 1, 8, 2\n(2) - (1) = 1, left: 1, 8\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (6 / 6)))"}, {"input": "9 12 1 11\n", "output": "(11) / (9) = 11/9, left: 11/9, 12, 1\n(1) / (12) = 1/12, left: 1/12, 11/9\n(11/9) * (1/12) = 11/108, left: 11/108\n(11) - (9) = 2, left: 2, 12, 1\n(12) * (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (12 * 1))"}, {"input": "9 12 1 11\n", "output": "(12) / (11) = 12/11, left: 12/11, 9, 1\n(12) + (11) = 23, left: 23, 9, 1\n(11) / (12) = 11/12, left: 11/12, 9, 1\n(11) - (9) = 2, left: 2, 12, 1\n(1) / (12) = 1/12, left: 1/12, 2\n(2) / (1/12) = 24, left: 24\nreach 24! expression: ((11 - 9) / (1 / 12))"}, {"input": "9 12 1 11\n", "output": "(9) / (12) = 3/4, left: 3/4, 1, 11\n(11) / (12) = 11/12, left: 11/12, 9, 1\n(12) / (11) = 12/11, left: 12/11, 9, 1\n(12) * (1) = 12, left: 12, 9, 11\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((12 * 1) * (11 - 9))"}, {"input": "9 12 1 11\n", "output": "(12) - (11) = 1, left: 1, 9, 1\n(9) * (1) = 9, left: 9, 1\n(9) + (1) = 10, left: 10, 1\n(12) + (11) = 23, left: 23, 9, 1\n(12) * (11) = 132, left: 132, 9, 1\n(1) + (132) = 133, left: 133, 9\n(9) + (133) = 142, left: 142\n(11) - (9) = 2, left: 2, 12, 1\n(1) / (12) = 1/12, left: 1/12, 2\n(2) / (1/12) = 24, left: 24\nreach 24! expression: ((11 - 9) / (1 / 12))"}, {"input": "9 12 1 11\n", "output": "(12) / (9) = 4/3, left: 4/3, 1, 11\n(9) * (12) = 108, left: 108, 1, 11\n(1) + (11) = 12, left: 12, 108\n(12) * (11) = 132, left: 132, 9, 1\n(1) * (132) = 132, left: 132, 9\n(12) / (11) = 12/11, left: 12/11, 9, 1\n(12/11) - (9) = -87/11, left: -87/11, 1\n(12) / (1) = 12, left: 12, 9, 11\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((12 / 1) * (11 - 9))"}, {"input": "9 12 1 11\n", "output": "(9) - (12) = -3, left: -3, 1, 11\n(11) - (1) = 10, left: 10, -3\n(9) / (12) = 3/4, left: 3/4, 1, 11\n(9) * (12) = 108, left: 108, 1, 11\n(108) - (1) = 107, left: 107, 11\n(12) - (11) = 1, left: 1, 9, 1\n(11) / (12) = 11/12, left: 11/12, 9, 1\n(12) * (1) = 12, left: 12, 9, 11\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((12 * 1) * (11 - 9))"}, {"input": "9 12 1 11\n", "output": "(9) + (11) = 20, left: 20, 12, 1\n(12) / (1) = 12, left: 12, 20\n(12) - (20) = -8, left: -8, 1\n(20) - (1) = 19, left: 19, 12\n(1) * (20) = 20, left: 20, 12\n(11) / (9) = 11/9, left: 11/9, 12, 1\n(1) / (11/9) = 9/11, left: 9/11, 12\n(11) - (9) = 2, left: 2, 12, 1\n(12) * (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (12 * 1))"}, {"input": "7 12 4 13\n", "output": "(7) / (13) = 7/13, left: 7/13, 12, 4\n(12) * (4) = 48, left: 48, 7/13\n(13) / (7) = 13/7, left: 13/7, 12, 4\n(7) - (13) = -6, left: -6, 12, 4\n(12) + (-6) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (12 + (7 - 13)))"}, {"input": "7 12 4 13\n", "output": "(13) - (12) = 1, left: 1, 7, 4\n(7) * (4) = 28, left: 28, 1\n(28) - (1) = 27, left: 27\n(4) / (7) = 4/7, left: 4/7, 1\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (13 - 12)))"}, {"input": "7 12 4 13\n", "output": "(7) + (4) = 11, left: 11, 12, 13\n(12) / (11) = 12/11, left: 12/11, 13\n(12/11) / (13) = 12/143, left: 12/143\n(12) - (11) = 1, left: 1, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 - (7 + 4)))"}, {"input": "7 12 4 13\n", "output": "(7) + (4) = 11, left: 11, 12, 13\n(12) / (11) = 12/11, left: 12/11, 13\n(12) * (11) = 132, left: 132, 13\n(12) - (11) = 1, left: 1, 13\n(13) - (12) = 1, left: 1, 11\n(1) / (11) = 1/11, left: 1/11\n(11) / (13) = 11/13, left: 11/13, 12\n(12) - (11/13) = 145/13, left: 145/13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (13 - (7 + 4)))"}, {"input": "7 12 4 13\n", "output": "(13) - (12) = 1, left: 1, 7, 4\n(4) - (7) = -3, left: -3, 1\n(7) + (4) = 11, left: 11, 1\n(1) / (11) = 1/11, left: 1/11\n(11) / (1) = 11, left: 11\n(7) / (4) = 7/4, left: 7/4, 1\n(1) / (7) = 1/7, left: 1/7, 4\n(4) - (1/7) = 27/7, left: 27/7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (13 - 12)))"}, {"input": "7 12 4 13\n", "output": "(4) / (12) = 1/3, left: 1/3, 7, 13\n(13) / (7) = 13/7, left: 13/7, 1/3\n(12) / (4) = 3, left: 3, 7, 13\n(13) - (3) = 10, left: 10, 7\n(12) * (13) = 156, left: 156, 7, 4\n(7) * (156) = 1092, left: 1092, 4\n(12) / (13) = 12/13, left: 12/13, 7, 4\n(12) - (13) = -1, left: -1, 7, 4\n(7) + (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 + (12 - 13)))"}, {"input": "7 12 4 13\n", "output": "(4) - (12) = -8, left: -8, 7, 13\n(13) / (7) = 13/7, left: 13/7, -8\n(12) * (4) = 48, left: 48, 7, 13\n(7) / (12) = 7/12, left: 7/12, 4, 13\n(7) - (12) = -5, left: -5, 4, 13\n(4) / (-5) = -4/5, left: -4/5, 13\n(7) + (12) = 19, left: 19, 4, 13\n(19) - (13) = 6, left: 6, 4\n(6) / (4) = 3/2, left: 3/2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((7 + 12) - 13))"}, {"input": "7 12 4 13\n", "output": "(7) / (13) = 7/13, left: 7/13, 12, 4\n(12) / (7/13) = 156/7, left: 156/7, 4\n(7) * (13) = 91, left: 91, 12, 4\n(4) - (12) = -8, left: -8, 91\n(91) / (12) = 91/12, left: 91/12, 4\n(13) / (7) = 13/7, left: 13/7, 12, 4\n(12) + (4) = 16, left: 16, 13/7\n(7) - (13) = -6, left: -6, 12, 4\n(12) + (-6) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (12 + (7 - 13)))"}, {"input": "3 1 1 11\n", "output": "(1) + (11) = 12, left: 12, 3, 1\n(3) * (1) = 3, left: 3, 12\n(3) / (1) = 3, left: 3, 12\n(12) / (3) = 4, left: 4\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (3 - 1))"}, {"input": "3 1 1 11\n", "output": "(1) / (3) = 1/3, left: 1/3, 1, 11\n(1) / (11) = 1/11, left: 1/11, 1/3\n(1/3) - (1/11) = 8/33, left: 8/33\n(3) - (1) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((3 - 1) * (1 + 11))"}, {"input": "3 1 1 11\n", "output": "(1) + (1) = 2, left: 2, 3, 11\n(11) * (2) = 22, left: 22, 3\n(1) / (1) = 1, left: 1, 3, 11\n(11) + (1) = 12, left: 12, 3\n(1) - (1) = 0, left: 0, 3, 11\n(0) / (3) = 0, left: 0, 11\n(11) - (1) = 10, left: 10, 3, 1\n(1) + (11) = 12, left: 12, 3, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (3 - 1))"}, {"input": "3 1 1 11\n", "output": "(1) * (11) = 11, left: 11, 3, 1\n(3) + (1) = 4, left: 4, 11\n(11) / (1) = 11, left: 11, 3, 1\n(3) - (1) = 2, left: 2, 11\n(11) - (1) = 10, left: 10, 3, 1\n(1) * (10) = 10, left: 10, 3\n(1) / (11) = 1/11, left: 1/11, 3, 1\n(1) + (11) = 12, left: 12, 3, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (3 - 1))"}, {"input": "3 1 1 11\n", "output": "(1) + (11) = 12, left: 12, 3, 1\n(12) - (3) = 9, left: 9, 1\n(1) + (9) = 10, left: 10\n(12) / (3) = 4, left: 4, 1\n(3) + (1) = 4, left: 4, 12\n(4) / (12) = 1/3, left: 1/3\n(1) / (3) = 1/3, left: 1/3, 12\n(1/3) - (12) = -35/3, left: -35/3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (3 - 1))"}, {"input": "3 1 1 11\n", "output": "(3) * (1) = 3, left: 3, 1, 11\n(11) - (1) = 10, left: 10, 3\n(1) / (3) = 1/3, left: 1/3, 1, 11\n(1/3) - (11) = -32/3, left: -32/3, 1\n(1) / (1/3) = 3, left: 3, 11\n(1) / (11) = 1/11, left: 1/11, 1/3\n(1) - (3) = -2, left: -2, 1, 11\n(3) - (1) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((3 - 1) * (1 + 11))"}, {"input": "3 1 1 11\n", "output": "(3) * (1) = 3, left: 3, 1, 11\n(1) / (3) = 1/3, left: 1/3, 1, 11\n(1/3) - (11) = -32/3, left: -32/3, 1\n(3) + (1) = 4, left: 4, 1, 11\n(3) / (1) = 3, left: 3, 1, 11\n(3) - (11) = -8, left: -8, 1\n(3) / (11) = 3/11, left: 3/11, 1\n(3) - (1) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((3 - 1) * (1 + 11))"}, {"input": "13 12 4 3\n", "output": "(13) * (3) = 39, left: 39, 12, 4\n(12) * (4) = 48, left: 48, 39\n(4) / (39) = 4/39, left: 4/39, 12\n(13) + (3) = 16, left: 16, 12, 4\n(4) - (12) = -8, left: -8, 16\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((13 + 3) - (4 - 12))"}, {"input": "13 12 4 3\n", "output": "(4) / (3) = 4/3, left: 4/3, 13, 12\n(13) - (4/3) = 35/3, left: 35/3, 12\n(13) + (4/3) = 43/3, left: 43/3, 12\n(4) - (3) = 1, left: 1, 13, 12\n(13) - (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (13 - (4 - 3)))"}, {"input": "13 12 4 3\n", "output": "(12) - (3) = 9, left: 9, 13, 4\n(13) - (4) = 9, left: 9, 9\n(4) - (13) = -9, left: -9, 9\n(4) * (9) = 36, left: 36, 13\n(12) * (3) = 36, left: 36, 13, 4\n(13) + (4) = 17, left: 17, 36\n(36) / (17) = 36/17, left: 36/17\n(12) + (3) = 15, left: 15, 13, 4\n(13) + (15) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((13 + (12 + 3)) - 4)"}, {"input": "13 12 4 3\n", "output": "(4) / (3) = 4/3, left: 4/3, 13, 12\n(12) / (13) = 12/13, left: 12/13, 4/3\n(13) / (12) = 13/12, left: 13/12, 4/3\n(13/12) - (4/3) = -1/4, left: -1/4\n(12) / (4/3) = 9, left: 9, 13\n(4/3) - (12) = -32/3, left: -32/3, 13\n(4) - (3) = 1, left: 1, 13, 12\n(13) + (1) = 14, left: 14, 12\n(13) - (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (13 - (4 - 3)))"}, {"input": "13 12 4 3\n", "output": "(12) - (13) = -1, left: -1, 4, 3\n(-1) - (3) = -4, left: -4, 4\n(13) / (12) = 13/12, left: 13/12, 4, 3\n(13/12) / (4) = 13/48, left: 13/48, 3\n(13) - (12) = 1, left: 1, 4, 3\n(12) / (13) = 12/13, left: 12/13, 4, 3\n(12/13) - (4) = -40/13, left: -40/13, 3\n(13) + (12) = 25, left: 25, 4, 3\n(4) - (3) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (4 - 3))"}, {"input": "13 12 4 3\n", "output": "(13) * (3) = 39, left: 39, 12, 4\n(12) - (4) = 8, left: 8, 39\n(4) - (39) = -35, left: -35, 12\n(39) - (4) = 35, left: 35, 12\n(12) - (35) = -23, left: -23\n(13) + (3) = 16, left: 16, 12, 4\n(12) / (4) = 3, left: 3, 16\n(12) + (4) = 16, left: 16, 16\n(4) - (12) = -8, left: -8, 16\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((13 + 3) - (4 - 12))"}, {"input": "13 12 4 3\n", "output": "(12) / (4) = 3, left: 3, 13, 3\n(3) - (3) = 0, left: 0, 13\n(3) - (3) = 0, left: 0, 13\n(13) * (3) = 39, left: 39, 3\n(13) + (3) = 16, left: 16, 3\n(4) / (12) = 1/3, left: 1/3, 13, 3\n(1/3) / (3) = 1/9, left: 1/9, 13\n(4) - (12) = -8, left: -8, 13, 3\n(13) + (3) = 16, left: 16, -8\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((13 + 3) - (4 - 12))"}, {"input": "8 11 13 9\n", "output": "(11) * (13) = 143, left: 143, 8, 9\n(11) - (13) = -2, left: -2, 8, 9\n(11) + (13) = 24, left: 24, 8, 9\n(8) + (9) = 17, left: 17, 24\n(9) - (8) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((11 + 13) / (9 - 8))"}, {"input": "8 11 13 9\n", "output": "(9) - (11) = -2, left: -2, 8, 13\n(11) * (13) = 143, left: 143, 8, 9\n(9) + (143) = 152, left: 152, 8\n(11) + (13) = 24, left: 24, 8, 9\n(9) - (8) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((11 + 13) / (9 - 8))"}, {"input": "8 11 13 9\n", "output": "(13) / (11) = 13/11, left: 13/11, 8, 9\n(13/11) / (9) = 13/99, left: 13/99, 8\n(8) - (13/11) = 75/11, left: 75/11, 9\n(9) + (75/11) = 174/11, left: 174/11\n(11) / (13) = 11/13, left: 11/13, 8, 9\n(11) - (13) = -2, left: -2, 8, 9\n(9) / (8) = 9/8, left: 9/8, -2\n(11) + (13) = 24, left: 24, 8, 9\n(9) - (8) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((11 + 13) * (9 - 8))"}, {"input": "8 11 13 9\n", "output": "(8) * (11) = 88, left: 88, 13, 9\n(8) / (11) = 8/11, left: 8/11, 13, 9\n(8) + (11) = 19, left: 19, 13, 9\n(13) - (8) = 5, left: 5, 11, 9\n(5) - (9) = -4, left: -4, 11\n(11) - (-4) = 15, left: 15\n(9) - (13) = -4, left: -4, 8, 11\n(9) - (8) = 1, left: 1, 11, 13\n(13) * (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 * (9 - 8)))"}, {"input": "8 11 13 9\n", "output": "(13) - (8) = 5, left: 5, 11, 9\n(9) - (5) = 4, left: 4, 11\n(8) / (13) = 8/13, left: 8/13, 11, 9\n(11) - (9) = 2, left: 2, 8/13\n(8) - (13) = -5, left: -5, 11, 9\n(13) / (11) = 13/11, left: 13/11, 8, 9\n(8) * (13/11) = 104/11, left: 104/11, 9\n(11) + (13) = 24, left: 24, 8, 9\n(9) - (8) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((11 + 13) / (9 - 8))"}, {"input": "8 11 13 9\n", "output": "(11) - (9) = 2, left: 2, 8, 13\n(13) + (2) = 15, left: 15, 8\n(8) / (11) = 8/11, left: 8/11, 13, 9\n(8) * (11) = 88, left: 88, 13, 9\n(88) / (13) = 88/13, left: 88/13, 9\n(11) - (8) = 3, left: 3, 13, 9\n(8) - (11) = -3, left: -3, 13, 9\n(11) + (13) = 24, left: 24, 8, 9\n(9) - (8) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((11 + 13) / (9 - 8))"}, {"input": "8 11 13 9\n", "output": "(11) / (13) = 11/13, left: 11/13, 8, 9\n(11/13) - (8) = -93/13, left: -93/13, 9\n(11) - (13) = -2, left: -2, 8, 9\n(8) + (9) = 17, left: 17, -2\n(9) / (8) = 9/8, left: 9/8, -2\n(-2) - (8) = -10, left: -10, 9\n(9) / (-10) = -9/10, left: -9/10\n(11) + (13) = 24, left: 24, 8, 9\n(9) - (8) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((11 + 13) / (9 - 8))"}, {"input": "13 3 2 10\n", "output": "(2) - (10) = -8, left: -8, 13, 3\n(13) * (-8) = -104, left: -104, 3\n(-8) - (13) = -21, left: -21, 3\n(3) * (-21) = -63, left: -63\n(3) / (-21) = -1/7, left: -1/7\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - ((2 - 10) - 13))"}, {"input": "13 3 2 10\n", "output": "(2) + (10) = 12, left: 12, 13, 3\n(13) + (12) = 25, left: 25, 3\n(13) * (12) = 156, left: 156, 3\n(10) - (2) = 8, left: 8, 13, 3\n(13) + (8) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (13 + (10 - 2)))"}, {"input": "13 3 2 10\n", "output": "(10) / (3) = 10/3, left: 10/3, 13, 2\n(2) / (13) = 2/13, left: 2/13, 10/3\n(2) / (10/3) = 3/5, left: 3/5, 13\n(3) + (10) = 13, left: 13, 13, 2\n(13) - (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((3 + 10) + (13 - 2))"}, {"input": "13 3 2 10\n", "output": "(3) + (10) = 13, left: 13, 13, 2\n(2) * (13) = 26, left: 26, 13\n(13) / (2) = 13/2, left: 13/2, 13\n(13) - (13/2) = 13/2, left: 13/2\n(2) - (13) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (2 - (3 + 10)))"}, {"input": "13 3 2 10\n", "output": "(10) / (3) = 10/3, left: 10/3, 13, 2\n(2) - (13) = -11, left: -11, 10/3\n(-11) - (10/3) = -43/3, left: -43/3\n(2) + (10/3) = 16/3, left: 16/3, 13\n(13) + (16/3) = 55/3, left: 55/3\n(2) - (10/3) = -4/3, left: -4/3, 13\n(3) + (10) = 13, left: 13, 13, 2\n(13) - (2) = 11, left: 11, 13\n(13) * (11) = 143, left: 143\n(13) + (11) = 24, left: 24\nreach 24! expression: ((3 + 10) + (13 - 2))"}, {"input": "13 3 2 10\n", "output": "(3) + (10) = 13, left: 13, 13, 2\n(2) * (13) = 26, left: 26, 13\n(26) - (13) = 13, left: 13\n(13) - (26) = -13, left: -13\n(2) + (13) = 15, left: 15, 13\n(13) / (2) = 13/2, left: 13/2, 13\n(13) - (13/2) = 13/2, left: 13/2\n(2) - (13) = -11, left: -11, 13\n(-11) - (13) = -24, left: -24\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (2 - (3 + 10)))"}, {"input": "13 3 2 10\n", "output": "(2) + (10) = 12, left: 12, 13, 3\n(3) / (13) = 3/13, left: 3/13, 12\n(13) + (3) = 16, left: 16, 12\n(12) / (3) = 4, left: 4, 13\n(13) / (4) = 13/4, left: 13/4\n(10) - (2) = 8, left: 8, 13, 3\n(8) / (13) = 8/13, left: 8/13, 3\n(13) / (8) = 13/8, left: 13/8, 3\n(13) + (8) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (13 + (10 - 2)))"}, {"input": "13 3 2 10\n", "output": "(2) - (10) = -8, left: -8, 13, 3\n(13) * (-8) = -104, left: -104, 3\n(-104) / (3) = -104/3, left: -104/3\n(-104) - (3) = -107, left: -107\n(3) + (-104) = -101, left: -101\n(3) - (-104) = 107, left: 107\n(-8) - (13) = -21, left: -21, 3\n(3) * (-21) = -63, left: -63\n(3) / (-21) = -1/7, left: -1/7\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - ((2 - 10) - 13))"}, {"input": "13 3 2 10\n", "output": "(13) - (10) = 3, left: 3, 3, 2\n(13) / (10) = 13/10, left: 13/10, 3, 2\n(10) / (13) = 10/13, left: 10/13, 3, 2\n(13) * (10) = 130, left: 130, 3, 2\n(130) / (2) = 65, left: 65, 3\n(3) - (2) = 1, left: 1, 130\n(10) - (13) = -3, left: -3, 3, 2\n(13) + (10) = 23, left: 23, 3, 2\n(2) - (23) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (2 - (13 + 10)))"}, {"input": "8 7 2 4\n", "output": "(2) / (7) = 2/7, left: 2/7, 8, 4\n(4) * (2/7) = 8/7, left: 8/7, 8\n(4) / (8) = 1/2, left: 1/2, 2/7\n(2/7) - (8) = -54/7, left: -54/7, 4\n(8) / (2/7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((8 / (2 / 7)) - 4)"}, {"input": "8 7 2 4\n", "output": "(7) / (8) = 7/8, left: 7/8, 2, 4\n(7/8) - (2) = -9/8, left: -9/8, 4\n(2) + (4) = 6, left: 6, 7/8\n(7/8) / (4) = 7/32, left: 7/32, 2\n(4) - (7/8) = 25/8, left: 25/8, 2\n(4) * (7/8) = 7/2, left: 7/2, 2\n(8) * (7) = 56, left: 56, 2, 4\n(4) + (56) = 60, left: 60, 2\n(56) / (2) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: (((8 * 7) / 2) - 4)"}, {"input": "8 7 2 4\n", "output": "(8) + (7) = 15, left: 15, 2, 4\n(7) - (8) = -1, left: -1, 2, 4\n(2) / (4) = 1/2, left: 1/2, -1\n(-1) - (4) = -5, left: -5, 2\n(-5) / (2) = -5/2, left: -5/2\n(8) * (7) = 56, left: 56, 2, 4\n(2) / (4) = 1/2, left: 1/2, 56\n(4) + (56) = 60, left: 60, 2\n(56) / (2) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: (((8 * 7) / 2) - 4)"}, {"input": "8 7 2 4\n", "output": "(2) / (7) = 2/7, left: 2/7, 8, 4\n(4) / (2/7) = 14, left: 14, 8\n(2/7) - (4) = -26/7, left: -26/7, 8\n(8) + (4) = 12, left: 12, 2/7\n(4) / (8) = 1/2, left: 1/2, 2/7\n(8) * (4) = 32, left: 32, 2/7\n(8) - (4) = 4, left: 4, 2/7\n(8) / (4) = 2, left: 2, 2/7\n(8) / (2/7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((8 / (2 / 7)) - 4)"}, {"input": "8 7 2 4\n", "output": "(4) - (8) = -4, left: -4, 7, 2\n(2) + (-4) = -2, left: -2, 7\n(8) / (4) = 2, left: 2, 7, 2\n(2) / (2) = 1, left: 1, 7\n(4) / (8) = 1/2, left: 1/2, 7, 2\n(1/2) / (7) = 1/14, left: 1/14, 2\n(8) * (4) = 32, left: 32, 7, 2\n(2) / (8) = 1/4, left: 1/4, 7, 4\n(7) / (1/4) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((7 / (2 / 8)) - 4)"}, {"input": "8 7 2 4\n", "output": "(7) + (2) = 9, left: 9, 8, 4\n(8) / (4) = 2, left: 2, 9\n(9) + (2) = 11, left: 11\n(9) / (8) = 9/8, left: 9/8, 4\n(9) - (4) = 5, left: 5, 8\n(7) / (2) = 7/2, left: 7/2, 8, 4\n(7/2) - (4) = -1/2, left: -1/2, 8\n(4) * (7/2) = 14, left: 14, 8\n(8) * (7/2) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((8 * (7 / 2)) - 4)"}, {"input": "8 7 2 4\n", "output": "(8) + (7) = 15, left: 15, 2, 4\n(4) / (15) = 4/15, left: 4/15, 2\n(4) + (15) = 19, left: 19, 2\n(15) - (2) = 13, left: 13, 4\n(7) - (8) = -1, left: -1, 2, 4\n(4) / (-1) = -4, left: -4, 2\n(2) + (-1) = 1, left: 1, 4\n(2) / (-1) = -2, left: -2, 4\n(8) * (7) = 56, left: 56, 2, 4\n(4) - (2) = 2, left: 2, 56\n(56) - (4) = 52, left: 52, 2\n(2) + (56) = 58, left: 58, 4\n(56) / (2) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: (((8 * 7) / 2) - 4)"}, {"input": "8 7 2 4\n", "output": "(8) - (4) = 4, left: 4, 7, 2\n(2) / (7) = 2/7, left: 2/7, 4\n(7) * (4) = 28, left: 28, 2\n(4) - (8) = -4, left: -4, 7, 2\n(2) * (-4) = -8, left: -8, 7\n(8) / (4) = 2, left: 2, 7, 2\n(4) / (8) = 1/2, left: 1/2, 7, 2\n(8) + (4) = 12, left: 12, 7, 2\n(8) * (4) = 32, left: 32, 7, 2\n(32) - (2) = 30, left: 30, 7\n(2) / (8) = 1/4, left: 1/4, 7, 4\n(7) + (4) = 11, left: 11, 1/4\n(7) / (1/4) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((7 / (2 / 8)) - 4)"}, {"input": "13 6 4 9\n", "output": "(13) + (4) = 17, left: 17, 6, 9\n(6) + (9) = 15, left: 15, 17\n(15) / (17) = 15/17, left: 15/17\n(4) - (13) = -9, left: -9, 6, 9\n(-9) - (9) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - ((4 - 13) - 9))"}, {"input": "13 6 4 9\n", "output": "(13) / (4) = 13/4, left: 13/4, 6, 9\n(13/4) / (9) = 13/36, left: 13/36, 6\n(4) / (13) = 4/13, left: 4/13, 6, 9\n(6) * (4/13) = 24/13, left: 24/13, 9\n(9) + (24/13) = 141/13, left: 141/13\n(6) + (9) = 15, left: 15, 4/13\n(13) * (4) = 52, left: 52, 6, 9\n(4) - (13) = -9, left: -9, 6, 9\n(6) + (9) = 15, left: 15, -9\n(15) - (-9) = 24, left: 24\nreach 24! expression: ((6 + 9) - (4 - 13))"}, {"input": "13 6 4 9\n", "output": "(13) / (4) = 13/4, left: 13/4, 6, 9\n(13/4) / (9) = 13/36, left: 13/36, 6\n(6) * (13/4) = 39/2, left: 39/2, 9\n(9) - (39/2) = -21/2, left: -21/2\n(6) / (13/4) = 24/13, left: 24/13, 9\n(13) * (4) = 52, left: 52, 6, 9\n(6) + (52) = 58, left: 58, 9\n(4) - (13) = -9, left: -9, 6, 9\n(-9) - (9) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - ((4 - 13) - 9))"}, {"input": "13 6 4 9\n", "output": "(4) / (13) = 4/13, left: 4/13, 6, 9\n(6) * (4/13) = 24/13, left: 24/13, 9\n(9) / (4/13) = 117/4, left: 117/4, 6\n(6) + (117/4) = 141/4, left: 141/4\n(13) + (4) = 17, left: 17, 6, 9\n(6) - (9) = -3, left: -3, 17\n(17) - (9) = 8, left: 8, 6\n(4) - (13) = -9, left: -9, 6, 9\n(6) - (-9) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (6 - (4 - 13)))"}, {"input": "13 6 4 9\n", "output": "(6) / (4) = 3/2, left: 3/2, 13, 9\n(13) - (3/2) = 23/2, left: 23/2, 9\n(23/2) / (9) = 23/18, left: 23/18\n(13) * (3/2) = 39/2, left: 39/2, 9\n(3/2) / (9) = 1/6, left: 1/6, 13\n(13) + (9) = 22, left: 22, 3/2\n(4) - (6) = -2, left: -2, 13, 9\n(9) - (-2) = 11, left: 11, 13\n(11) / (13) = 11/13, left: 11/13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (9 - (4 - 6)))"}, {"input": "13 6 4 9\n", "output": "(6) / (9) = 2/3, left: 2/3, 13, 4\n(13) + (4) = 17, left: 17, 2/3\n(6) - (9) = -3, left: -3, 13, 4\n(9) - (6) = 3, left: 3, 13, 4\n(6) * (9) = 54, left: 54, 13, 4\n(4) - (13) = -9, left: -9, 54\n(9) / (6) = 3/2, left: 3/2, 13, 4\n(6) + (9) = 15, left: 15, 13, 4\n(15) - (4) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((6 + 9) - 4))"}, {"input": "7 2 1 10\n", "output": "(7) / (1) = 7, left: 7, 2, 10\n(10) / (2) = 5, left: 5, 7\n(7) / (2) = 7/2, left: 7/2, 10\n(10) + (7/2) = 27/2, left: 27/2\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (7 / 1)))"}, {"input": "7 2 1 10\n", "output": "(1) - (7) = -6, left: -6, 2, 10\n(1) / (7) = 1/7, left: 1/7, 2, 10\n(10) / (2) = 5, left: 5, 1/7\n(1/7) - (10) = -69/7, left: -69/7, 2\n(2) / (1/7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 / (1 / 7)))"}, {"input": "7 2 1 10\n", "output": "(10) - (2) = 8, left: 8, 7, 1\n(2) / (10) = 1/5, left: 1/5, 7, 1\n(2) + (10) = 12, left: 12, 7, 1\n(1) / (7) = 1/7, left: 1/7, 12\n(10) / (2) = 5, left: 5, 7, 1\n(7) + (1) = 8, left: 8, 2, 10\n(8) / (2) = 4, left: 4, 10\n(7) * (1) = 7, left: 7, 2, 10\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (7 * 1)))"}, {"input": "7 2 1 10\n", "output": "(10) / (2) = 5, left: 5, 7, 1\n(2) - (10) = -8, left: -8, 7, 1\n(2) / (10) = 1/5, left: 1/5, 7, 1\n(7) + (10) = 17, left: 17, 2, 1\n(17) / (1) = 17, left: 17, 2\n(7) - (10) = -3, left: -3, 2, 1\n(1) + (-3) = -2, left: -2, 2\n(1) / (7) = 1/7, left: 1/7, 2, 10\n(2) / (1/7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 / (1 / 7)))"}, {"input": "7 2 1 10\n", "output": "(1) - (7) = -6, left: -6, 2, 10\n(2) * (-6) = -12, left: -12, 10\n(2) * (10) = 20, left: 20, -6\n(1) / (7) = 1/7, left: 1/7, 2, 10\n(2) / (10) = 1/5, left: 1/5, 1/7\n(2) * (10) = 20, left: 20, 1/7\n(1/7) - (10) = -69/7, left: -69/7, 2\n(10) * (1/7) = 10/7, left: 10/7, 2\n(2) / (1/7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 / (1 / 7)))"}, {"input": "7 2 1 10\n", "output": "(1) + (10) = 11, left: 11, 7, 2\n(7) - (11) = -4, left: -4, 2\n(10) - (1) = 9, left: 9, 7, 2\n(7) / (9) = 7/9, left: 7/9, 2\n(7) / (2) = 7/2, left: 7/2, 9\n(1) / (10) = 1/10, left: 1/10, 7, 2\n(1/10) / (2) = 1/20, left: 1/20, 7\n(1) * (10) = 10, left: 10, 7, 2\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((1 * 10) + (7 * 2))"}, {"input": "7 2 1 10\n", "output": "(7) / (1) = 7, left: 7, 2, 10\n(2) - (10) = -8, left: -8, 7\n(-8) - (7) = -15, left: -15\n(10) / (2) = 5, left: 5, 7\n(2) / (10) = 1/5, left: 1/5, 7\n(7) + (1/5) = 36/5, left: 36/5\n(2) * (10) = 20, left: 20, 7\n(2) / (7) = 2/7, left: 2/7, 10\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (7 / 1)))"}, {"input": "7 2 1 10\n", "output": "(2) * (10) = 20, left: 20, 7, 1\n(20) / (1) = 20, left: 20, 7\n(10) - (2) = 8, left: 8, 7, 1\n(7) / (8) = 7/8, left: 7/8, 1\n(7) * (8) = 56, left: 56, 1\n(2) - (10) = -8, left: -8, 7, 1\n(7) / (1) = 7, left: 7, -8\n(-8) - (1) = -9, left: -9, 7\n(7) + (1) = 8, left: 8, 2, 10\n(10) / (2) = 5, left: 5, 8\n(10) - (8) = 2, left: 2, 2\n(7) * (1) = 7, left: 7, 2, 10\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (7 * 1)))"}, {"input": "2 13 5 6\n", "output": "(2) - (6) = -4, left: -4, 13, 5\n(-4) - (13) = -17, left: -17, 5\n(-4) / (13) = -4/13, left: -4/13, 5\n(6) - (2) = 4, left: 4, 13, 5\n(5) + (4) = 9, left: 9, 13\n(4) - (5) = -1, left: -1, 13\n(2) * (6) = 12, left: 12, 13, 5\n(6) / (2) = 3, left: 3, 13, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 / 2) * (13 - 5))"}, {"input": "2 13 5 6\n", "output": "(13) * (5) = 65, left: 65, 2, 6\n(6) + (65) = 71, left: 71, 2\n(2) + (65) = 67, left: 67, 6\n(5) / (13) = 5/13, left: 5/13, 2, 6\n(2) + (5/13) = 31/13, left: 31/13, 6\n(6) - (2) = 4, left: 4, 5/13\n(5/13) + (4) = 57/13, left: 57/13\n(13) + (5) = 18, left: 18, 2, 6\n(18) - (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((13 + 5) - 6))"}, {"input": "2 13 5 6\n", "output": "(2) + (13) = 15, left: 15, 5, 6\n(13) / (2) = 13/2, left: 13/2, 5, 6\n(5) / (13/2) = 10/13, left: 10/13, 6\n(5) - (6) = -1, left: -1, 13/2\n(-1) - (13/2) = -15/2, left: -15/2\n(13) - (2) = 11, left: 11, 5, 6\n(2) - (6) = -4, left: -4, 13, 5\n(6) / (2) = 3, left: 3, 13, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 / 2) * (13 - 5))"}, {"input": "2 13 5 6\n", "output": "(2) * (5) = 10, left: 10, 13, 6\n(2) + (5) = 7, left: 7, 13, 6\n(7) / (6) = 7/6, left: 7/6, 13\n(2) / (5) = 2/5, left: 2/5, 13, 6\n(2) - (5) = -3, left: -3, 13, 6\n(13) * (5) = 65, left: 65, 2, 6\n(2) - (65) = -63, left: -63, 6\n(13) - (5) = 8, left: 8, 2, 6\n(6) / (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((13 - 5) * (6 / 2))"}, {"input": "2 13 5 6\n", "output": "(13) / (5) = 13/5, left: 13/5, 2, 6\n(6) / (13/5) = 30/13, left: 30/13, 2\n(6) + (13/5) = 43/5, left: 43/5, 2\n(6) * (13/5) = 78/5, left: 78/5, 2\n(78/5) - (2) = 68/5, left: 68/5\n(6) / (2) = 3, left: 3, 13/5\n(13) + (5) = 18, left: 18, 2, 6\n(2) + (18) = 20, left: 20, 6\n(18) - (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((13 + 5) - 6))"}, {"input": "2 11 11 12\n", "output": "(12) - (11) = 1, left: 1, 2, 11\n(1) - (2) = -1, left: -1, 11\n(11) + (-1) = 10, left: 10\n(2) / (1) = 2, left: 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (12 - 11)))"}, {"input": "2 11 11 12\n", "output": "(2) * (11) = 22, left: 22, 11, 12\n(12) - (11) = 1, left: 1, 22\n(22) + (1) = 23, left: 23\n(22) - (1) = 21, left: 21\n(12) / (11) = 12/11, left: 12/11, 22\n(22) * (12/11) = 24, left: 24\nreach 24! expression: ((2 * 11) * (12 / 11))"}, {"input": "2 11 11 12\n", "output": "(11) + (12) = 23, left: 23, 2, 11\n(2) / (23) = 2/23, left: 2/23, 11\n(11) / (23) = 11/23, left: 11/23, 2\n(2) / (11/23) = 46/11, left: 46/11\n(23) - (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 12) - 11))"}, {"input": "2 11 11 12\n", "output": "(12) / (11) = 12/11, left: 12/11, 2, 11\n(12/11) - (2) = -10/11, left: -10/11, 11\n(-10/11) / (11) = -10/121, left: -10/121\n(11) + (-10/11) = 111/11, left: 111/11\n(2) * (12/11) = 24/11, left: 24/11, 11\n(11) * (24/11) = 24, left: 24\nreach 24! expression: (11 * (2 * (12 / 11)))"}, {"input": "2 11 11 12\n", "output": "(12) - (11) = 1, left: 1, 2, 11\n(2) + (1) = 3, left: 3, 11\n(11) - (3) = 8, left: 8\n(2) * (1) = 2, left: 2, 11\n(2) - (1) = 1, left: 1, 11\n(11) + (1) = 12, left: 12\n(1) / (2) = 1/2, left: 1/2, 11\n(11) / (1/2) = 22, left: 22\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (12 - 11)))"}, {"input": "2 11 11 12\n", "output": "(11) + (12) = 23, left: 23, 2, 11\n(2) - (23) = -21, left: -21, 11\n(-21) / (11) = -21/11, left: -21/11\n(23) - (2) = 21, left: 21, 11\n(11) - (23) = -12, left: -12, 2\n(11) / (23) = 11/23, left: 11/23, 2\n(11/23) - (2) = -35/23, left: -35/23\n(23) / (11) = 23/11, left: 23/11, 2\n(23) - (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 12) - 11))"}, {"input": "2 11 11 12\n", "output": "(12) / (11) = 12/11, left: 12/11, 2, 11\n(12/11) - (2) = -10/11, left: -10/11, 11\n(11) - (-10/11) = 131/11, left: 131/11\n(-10/11) / (11) = -10/121, left: -10/121\n(-10/11) - (11) = -131/11, left: -131/11\n(11) / (-10/11) = -121/10, left: -121/10\n(11) * (-10/11) = -10, left: -10\n(11) + (-10/11) = 111/11, left: 111/11\n(2) * (12/11) = 24/11, left: 24/11, 11\n(11) * (24/11) = 24, left: 24\nreach 24! expression: (11 * (2 * (12 / 11)))"}, {"input": "2 11 11 12\n", "output": "(2) * (11) = 22, left: 22, 11, 12\n(12) - (11) = 1, left: 1, 22\n(1) - (22) = -21, left: -21\n(22) + (1) = 23, left: 23\n(22) / (1) = 22, left: 22\n(22) - (1) = 21, left: 21\n(1) / (22) = 1/22, left: 1/22\n(12) / (11) = 12/11, left: 12/11, 22\n(22) / (12/11) = 121/6, left: 121/6\n(22) * (12/11) = 24, left: 24\nreach 24! expression: ((2 * 11) * (12 / 11))"}, {"input": "2 11 11 12\n", "output": "(2) * (11) = 22, left: 22, 11, 12\n(12) - (11) = 1, left: 1, 22\n(1) - (22) = -21, left: -21\n(22) + (1) = 23, left: 23\n(22) / (1) = 22, left: 22\n(22) - (1) = 21, left: 21\n(22) * (1) = 22, left: 22\n(1) / (22) = 1/22, left: 1/22\n(12) / (11) = 12/11, left: 12/11, 22\n(22) / (12/11) = 121/6, left: 121/6\n(22) * (12/11) = 24, left: 24\nreach 24! expression: ((2 * 11) * (12 / 11))"}, {"input": "2 11 11 12\n", "output": "(12) / (11) = 12/11, left: 12/11, 2, 11\n(12/11) - (2) = -10/11, left: -10/11, 11\n(11) - (-10/11) = 131/11, left: 131/11\n(-10/11) / (11) = -10/121, left: -10/121\n(-10/11) - (11) = -131/11, left: -131/11\n(11) / (-10/11) = -121/10, left: -121/10\n(11) * (-10/11) = -10, left: -10\n(11) + (-10/11) = 111/11, left: 111/11\n(2) * (12/11) = 24/11, left: 24/11, 11\n(11) * (24/11) = 24, left: 24\nreach 24! expression: (11 * (2 * (12 / 11)))"}, {"input": "2 11 11 12\n", "output": "(2) * (11) = 22, left: 22, 11, 12\n(12) - (11) = 1, left: 1, 22\n(1) - (22) = -21, left: -21\n(22) + (1) = 23, left: 23\n(22) / (1) = 22, left: 22\n(22) - (1) = 21, left: 21\n(22) * (1) = 22, left: 22\n(1) / (22) = 1/22, left: 1/22\n(12) / (11) = 12/11, left: 12/11, 22\n(22) / (12/11) = 121/6, left: 121/6\n(22) * (12/11) = 24, left: 24\nreach 24! expression: ((2 * 11) * (12 / 11))"}, {"input": "2 11 11 12\n", "output": "(12) / (11) = 12/11, left: 12/11, 2, 11\n(12/11) - (2) = -10/11, left: -10/11, 11\n(11) - (-10/11) = 131/11, left: 131/11\n(-10/11) / (11) = -10/121, left: -10/121\n(-10/11) - (11) = -131/11, left: -131/11\n(11) / (-10/11) = -121/10, left: -121/10\n(11) * (-10/11) = -10, left: -10\n(11) + (-10/11) = 111/11, left: 111/11\n(2) * (12/11) = 24/11, left: 24/11, 11\n(11) * (24/11) = 24, left: 24\nreach 24! expression: (11 * (2 * (12 / 11)))"}, {"input": "2 10 9 5\n", "output": "(9) / (2) = 9/2, left: 9/2, 10, 5\n(5) + (9/2) = 19/2, left: 19/2, 10\n(19/2) / (10) = 19/20, left: 19/20\n(2) / (9) = 2/9, left: 2/9, 10, 5\n(2) - (9) = -7, left: -7, 10, 5\n(10) / (-7) = -10/7, left: -10/7, 5\n(9) - (5) = 4, left: 4, 2, 10\n(10) / (4) = 5/2, left: 5/2, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((9 - 5) + (2 * 10))"}, {"input": "2 10 9 5\n", "output": "(10) * (5) = 50, left: 50, 2, 9\n(2) + (50) = 52, left: 52, 9\n(5) - (10) = -5, left: -5, 2, 9\n(10) + (9) = 19, left: 19, 2, 5\n(9) / (10) = 9/10, left: 9/10, 2, 5\n(2) + (9) = 11, left: 11, 10, 5\n(5) / (10) = 1/2, left: 1/2, 11\n(5) - (9) = -4, left: -4, 2, 10\n(2) * (10) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((2 * 10) - (5 - 9))"}, {"input": "2 10 9 5\n", "output": "(9) - (10) = -1, left: -1, 2, 5\n(10) * (9) = 90, left: 90, 2, 5\n(10) - (9) = 1, left: 1, 2, 5\n(1) - (2) = -1, left: -1, 5\n(2) - (5) = -3, left: -3, 10, 9\n(5) / (2) = 5/2, left: 5/2, 10, 9\n(9) * (5/2) = 45/2, left: 45/2, 10\n(5) - (9) = -4, left: -4, 2, 10\n(2) * (10) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((2 * 10) - (5 - 9))"}, {"input": "2 10 9 5\n", "output": "(9) + (5) = 14, left: 14, 2, 10\n(10) / (14) = 5/7, left: 5/7, 2\n(2) / (5/7) = 14/5, left: 14/5\n(2) * (14) = 28, left: 28, 10\n(9) * (5) = 45, left: 45, 2, 10\n(2) / (45) = 2/45, left: 2/45, 10\n(45) / (2) = 45/2, left: 45/2, 10\n(9) - (5) = 4, left: 4, 2, 10\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((9 - 5) + (2 * 10))"}, {"input": "2 10 9 5\n", "output": "(9) - (5) = 4, left: 4, 2, 10\n(2) * (4) = 8, left: 8, 10\n(8) - (10) = -2, left: -2\n(4) / (2) = 2, left: 2, 10\n(2) / (10) = 1/5, left: 1/5\n(2) + (4) = 6, left: 6, 10\n(4) / (10) = 2/5, left: 2/5, 2\n(2) / (10) = 1/5, left: 1/5, 4\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((9 - 5) + (2 * 10))"}, {"input": "2 10 9 5\n", "output": "(10) / (9) = 10/9, left: 10/9, 2, 5\n(10) * (9) = 90, left: 90, 2, 5\n(5) + (90) = 95, left: 95, 2\n(2) - (5) = -3, left: -3, 10, 9\n(2) * (5) = 10, left: 10, 10, 9\n(5) / (2) = 5/2, left: 5/2, 10, 9\n(2) + (9) = 11, left: 11, 10, 5\n(9) - (2) = 7, left: 7, 10, 5\n(2) - (9) = -7, left: -7, 10, 5\n(5) / (10) = 1/2, left: 1/2, -7\n(-7) / (1/2) = -14, left: -14\n(5) - (9) = -4, left: -4, 2, 10\n(2) * (10) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((2 * 10) - (5 - 9))"}, {"input": "2 1 3 7\n", "output": "(3) + (7) = 10, left: 10, 2, 1\n(10) - (1) = 9, left: 9, 2\n(3) - (7) = -4, left: -4, 2, 1\n(1) / (-4) = -1/4, left: -1/4, 2\n(2) + (-1/4) = 7/4, left: 7/4\n(1) * (-4) = -4, left: -4, 2\n(3) / (7) = 3/7, left: 3/7, 2, 1\n(3) * (7) = 21, left: 21, 2, 1\n(1) + (21) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (1 + (3 * 7)))"}, {"input": "2 1 3 7\n", "output": "(2) * (1) = 2, left: 2, 3, 7\n(2) - (7) = -5, left: -5, 3\n(2) / (7) = 2/7, left: 2/7, 3\n(3) * (2/7) = 6/7, left: 6/7\n(7) * (2) = 14, left: 14, 3\n(3) / (7) = 3/7, left: 3/7, 2\n(3/7) / (2) = 3/14, left: 3/14\n(2) - (1) = 1, left: 1, 3, 7\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (2 - 1)))"}, {"input": "2 1 3 7\n", "output": "(1) - (7) = -6, left: -6, 2, 3\n(2) + (3) = 5, left: 5, -6\n(2) * (3) = 6, left: 6, -6\n(-6) * (6) = -36, left: -36\n(3) + (-6) = -3, left: -3, 2\n(3) / (-6) = -1/2, left: -1/2, 2\n(-6) / (3) = -2, left: -2, 2\n(2) + (-6) = -4, left: -4, 3\n(2) - (-6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 - (1 - 7)))"}, {"input": "2 1 3 7\n", "output": "(1) * (7) = 7, left: 7, 2, 3\n(3) - (2) = 1, left: 1, 7\n(1) / (7) = 1/7, left: 1/7\n(1) / (7) = 1/7, left: 1/7, 2, 3\n(2) * (3) = 6, left: 6, 1/7\n(1/7) - (6) = -41/7, left: -41/7\n(7) / (1) = 7, left: 7, 2, 3\n(7) - (1) = 6, left: 6, 2, 3\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (7 - 1)))"}, {"input": "2 1 3 7\n", "output": "(2) + (7) = 9, left: 9, 1, 3\n(1) + (3) = 4, left: 4, 9\n(4) - (9) = -5, left: -5\n(3) / (1) = 3, left: 3, 9\n(9) * (3) = 27, left: 27\n(3) / (9) = 1/3, left: 1/3, 1\n(9) - (3) = 6, left: 6, 1\n(1) + (6) = 7, left: 7\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((2 + 7) - 1))"}, {"input": "2 1 3 7\n", "output": "(3) + (7) = 10, left: 10, 2, 1\n(1) + (10) = 11, left: 11, 2\n(2) / (1) = 2, left: 2, 10\n(3) - (7) = -4, left: -4, 2, 1\n(2) - (-4) = 6, left: 6, 1\n(3) / (7) = 3/7, left: 3/7, 2, 1\n(1) - (3/7) = 4/7, left: 4/7, 2\n(7) / (3) = 7/3, left: 7/3, 2, 1\n(1) * (7/3) = 7/3, left: 7/3, 2\n(1) + (7/3) = 10/3, left: 10/3, 2\n(2) + (1) = 3, left: 3, 7/3\n(3) * (7) = 21, left: 21, 2, 1\n(1) + (21) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (1 + (3 * 7)))"}, {"input": "4 2 7 2\n", "output": "(2) - (7) = -5, left: -5, 4, 2\n(-5) / (4) = -5/4, left: -5/4, 2\n(7) + (2) = 9, left: 9, 4, 2\n(7) / (2) = 7/2, left: 7/2, 4, 2\n(4) - (2) = 2, left: 2, 7/2\n(7/2) - (4) = -1/2, left: -1/2, 2\n(7) * (2) = 14, left: 14, 4, 2\n(14) / (2) = 7, left: 7, 4\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (7 * 2)) - 4)"}, {"input": "4 2 7 2\n", "output": "(4) + (7) = 11, left: 11, 2, 2\n(2) - (11) = -9, left: -9, 2\n(-9) / (2) = -9/2, left: -9/2\n(2) + (11) = 13, left: 13, 2\n(13) / (2) = 13/2, left: 13/2\n(13) - (2) = 11, left: 11\n(2) * (13) = 26, left: 26\n(2) * (11) = 22, left: 22, 2\n(2) - (22) = -20, left: -20\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (4 + 7)))"}, {"input": "4 2 7 2\n", "output": "(2) / (7) = 2/7, left: 2/7, 4, 2\n(2/7) / (4) = 1/14, left: 1/14, 2\n(1/14) / (2) = 1/28, left: 1/28\n(7) - (2) = 5, left: 5, 4, 2\n(7) / (2) = 7/2, left: 7/2, 4, 2\n(2) + (7) = 9, left: 9, 4, 2\n(2) - (7) = -5, left: -5, 4, 2\n(2) * (7) = 14, left: 14, 4, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (2 * 7)) - 4)"}, {"input": "4 2 7 2\n", "output": "(2) / (2) = 1, left: 1, 4, 7\n(4) + (7) = 11, left: 11, 1\n(4) * (7) = 28, left: 28, 1\n(7) - (4) = 3, left: 3, 1\n(1) - (4) = -3, left: -3, 7\n(1) / (7) = 1/7, left: 1/7, 4\n(4) - (1/7) = 27/7, left: 27/7\n(7) + (1) = 8, left: 8, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (2 / 2)))"}, {"input": "4 2 7 2\n", "output": "(7) * (2) = 14, left: 14, 4, 2\n(4) - (2) = 2, left: 2, 14\n(14) + (2) = 16, left: 16\n(4) + (2) = 6, left: 6, 14\n(4) * (14) = 56, left: 56, 2\n(14) - (4) = 10, left: 10, 2\n(2) * (10) = 20, left: 20\n(14) / (2) = 7, left: 7, 4\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (7 * 2)) - 4)"}, {"input": "4 2 7 2\n", "output": "(2) - (7) = -5, left: -5, 4, 2\n(4) * (2) = 8, left: 8, -5\n(-5) - (4) = -9, left: -9, 2\n(-9) / (2) = -9/2, left: -9/2\n(-5) - (2) = -7, left: -7, 4\n(7) + (2) = 9, left: 9, 4, 2\n(4) + (9) = 13, left: 13, 2\n(7) / (2) = 7/2, left: 7/2, 4, 2\n(4) * (2) = 8, left: 8, 7/2\n(2) - (7/2) = -3/2, left: -3/2, 4\n(7/2) - (2) = 3/2, left: 3/2, 4\n(7) * (2) = 14, left: 14, 4, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (7 * 2)) - 4)"}, {"input": "4 2 7 2\n", "output": "(2) / (7) = 2/7, left: 2/7, 4, 2\n(7) - (2) = 5, left: 5, 4, 2\n(2) - (4) = -2, left: -2, 5\n(5) - (-2) = 7, left: 7\n(4) + (2) = 6, left: 6, 5\n(7) / (2) = 7/2, left: 7/2, 4, 2\n(4) - (7/2) = 1/2, left: 1/2, 2\n(2) - (7) = -5, left: -5, 4, 2\n(2) - (-5) = 7, left: 7, 4\n(2) * (7) = 14, left: 14, 4, 2\n(4) / (14) = 2/7, left: 2/7, 2\n(2/7) - (2) = -12/7, left: -12/7\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (2 * 7)) - 4)"}, {"input": "1 3 5 9\n", "output": "(1) - (9) = -8, left: -8, 3, 5\n(5) / (3) = 5/3, left: 5/3, -8\n(5/3) - (-8) = 29/3, left: 29/3\n(3) - (-8) = 11, left: 11, 5\n(5) * (-8) = -40, left: -40, 3\n(-8) - (5) = -13, left: -13, 3\n(-13) / (3) = -13/3, left: -13/3\n(1) * (9) = 9, left: 9, 3, 5\n(3) * (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((1 * 9) + (3 * 5))"}, {"input": "1 3 5 9\n", "output": "(3) / (9) = 1/3, left: 1/3, 1, 5\n(3) * (9) = 27, left: 27, 1, 5\n(27) / (1) = 27, left: 27, 5\n(5) / (1) = 5, left: 5, 27\n(3) - (9) = -6, left: -6, 1, 5\n(5) / (-6) = -5/6, left: -5/6, 1\n(-5/6) / (1) = -5/6, left: -5/6\n(5) + (-6) = -1, left: -1, 1\n(1) - (5) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((3 - 9) * (1 - 5))"}, {"input": "1 3 5 9\n", "output": "(1) / (5) = 1/5, left: 1/5, 3, 9\n(3) / (1/5) = 15, left: 15, 9\n(9) - (15) = -6, left: -6\n(15) / (9) = 5/3, left: 5/3\n(9) * (15) = 135, left: 135\n(9) / (15) = 3/5, left: 3/5\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (3 / (1 / 5)))"}, {"input": "1 3 5 9\n", "output": "(1) + (9) = 10, left: 10, 3, 5\n(10) - (5) = 5, left: 5, 3\n(3) * (10) = 30, left: 30, 5\n(1) - (9) = -8, left: -8, 3, 5\n(3) + (5) = 8, left: 8, -8\n(9) - (1) = 8, left: 8, 3, 5\n(1) * (9) = 9, left: 9, 3, 5\n(5) - (9) = -4, left: -4, 3\n(3) * (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((1 * 9) + (3 * 5))"}, {"input": "1 3 5 9\n", "output": "(5) - (1) = 4, left: 4, 3, 9\n(3) * (9) = 27, left: 27, 4\n(4) * (27) = 108, left: 108\n(3) / (9) = 1/3, left: 1/3, 4\n(4) * (1/3) = 4/3, left: 4/3\n(4) + (1/3) = 13/3, left: 13/3\n(3) - (9) = -6, left: -6, 4\n(9) - (3) = 6, left: 6, 4\n(4) + (6) = 10, left: 10\n(4) * (6) = 24, left: 24\nreach 24! expression: ((5 - 1) * (9 - 3))"}, {"input": "1 3 5 9\n", "output": "(1) / (5) = 1/5, left: 1/5, 3, 9\n(3) / (1/5) = 15, left: 15, 9\n(9) - (15) = -6, left: -6\n(15) / (9) = 5/3, left: 5/3\n(9) * (15) = 135, left: 135\n(9) / (15) = 3/5, left: 3/5\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (3 / (1 / 5)))"}, {"input": "1 3 5 9\n", "output": "(1) + (9) = 10, left: 10, 3, 5\n(5) / (10) = 1/2, left: 1/2, 3\n(1) - (9) = -8, left: -8, 3, 5\n(5) - (-8) = 13, left: 13, 3\n(3) - (13) = -10, left: -10\n(5) / (-8) = -5/8, left: -5/8, 3\n(3) * (5) = 15, left: 15, -8\n(9) - (1) = 8, left: 8, 3, 5\n(3) - (5) = -2, left: -2, 8\n(-2) / (8) = -1/4, left: -1/4\n(1) * (9) = 9, left: 9, 3, 5\n(5) / (3) = 5/3, left: 5/3, 9\n(3) * (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((1 * 9) + (3 * 5))"}, {"input": "1 3 5 9\n", "output": "(1) / (5) = 1/5, left: 1/5, 3, 9\n(3) / (1/5) = 15, left: 15, 9\n(9) - (15) = -6, left: -6\n(15) / (9) = 5/3, left: 5/3\n(9) * (15) = 135, left: 135\n(9) / (15) = 3/5, left: 3/5\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (3 / (1 / 5)))"}, {"input": "3 12 11 1\n", "output": "(3) + (11) = 14, left: 14, 12, 1\n(1) * (14) = 14, left: 14, 12\n(11) / (3) = 11/3, left: 11/3, 12, 1\n(11) + (1) = 12, left: 12, 3, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * 12) - (11 + 1))"}, {"input": "3 12 11 1\n", "output": "(3) / (12) = 1/4, left: 1/4, 11, 1\n(11) * (1) = 11, left: 11, 1/4\n(1) - (11) = -10, left: -10, 1/4\n(3) * (12) = 36, left: 36, 11, 1\n(36) - (1) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((3 * 12) - 1) - 11)"}, {"input": "3 12 11 1\n", "output": "(1) - (11) = -10, left: -10, 3, 12\n(12) / (-10) = -6/5, left: -6/5, 3\n(3) / (12) = 1/4, left: 1/4, -10\n(11) + (1) = 12, left: 12, 3, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * (11 + 1)) - 12)"}, {"input": "3 12 11 1\n", "output": "(11) - (1) = 10, left: 10, 3, 12\n(12) + (10) = 22, left: 22, 3\n(12) * (10) = 120, left: 120, 3\n(11) + (1) = 12, left: 12, 3, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * 12) - (11 + 1))"}, {"input": "3 12 11 1\n", "output": "(11) - (1) = 10, left: 10, 3, 12\n(3) - (12) = -9, left: -9, 10\n(3) * (10) = 30, left: 30, 12\n(12) - (30) = -18, left: -18\n(10) - (12) = -2, left: -2, 3\n(12) / (10) = 6/5, left: 6/5, 3\n(11) + (1) = 12, left: 12, 3, 12\n(3) / (12) = 1/4, left: 1/4, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * 12) - (11 + 1))"}, {"input": "3 12 11 1\n", "output": "(11) - (1) = 10, left: 10, 3, 12\n(12) * (10) = 120, left: 120, 3\n(1) - (11) = -10, left: -10, 3, 12\n(3) / (-10) = -3/10, left: -3/10, 12\n(11) * (1) = 11, left: 11, 3, 12\n(1) / (11) = 1/11, left: 1/11, 3, 12\n(12) - (1/11) = 131/11, left: 131/11, 3\n(11) + (1) = 12, left: 12, 3, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * (11 + 1)) - 12)"}, {"input": "3 12 11 1\n", "output": "(1) - (11) = -10, left: -10, 3, 12\n(3) - (-10) = 13, left: 13, 12\n(-10) / (3) = -10/3, left: -10/3, 12\n(12) * (-10) = -120, left: -120, 3\n(12) + (-10) = 2, left: 2, 3\n(11) + (1) = 12, left: 12, 3, 12\n(3) - (12) = -9, left: -9, 12\n(-9) - (12) = -21, left: -21\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * (11 + 1)) - 12)"}, {"input": "3 12 11 1\n", "output": "(3) / (11) = 3/11, left: 3/11, 12, 1\n(1) / (12) = 1/12, left: 1/12, 3/11\n(3) + (11) = 14, left: 14, 12, 1\n(11) - (3) = 8, left: 8, 12, 1\n(12) + (8) = 20, left: 20, 1\n(3) - (11) = -8, left: -8, 12, 1\n(11) + (1) = 12, left: 12, 3, 12\n(12) * (12) = 144, left: 144, 3\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * 12) - (11 + 1))"}, {"input": "3 12 11 1\n", "output": "(12) - (3) = 9, left: 9, 11, 1\n(11) / (9) = 11/9, left: 11/9, 1\n(11) * (9) = 99, left: 99, 1\n(1) - (11) = -10, left: -10, 9\n(-10) - (9) = -19, left: -19\n(3) * (12) = 36, left: 36, 11, 1\n(1) + (36) = 37, left: 37, 11\n(36) / (1) = 36, left: 36, 11\n(36) - (1) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((3 * 12) - 1) - 11)"}, {"input": "3 9 3 13\n", "output": "(9) * (3) = 27, left: 27, 3, 13\n(27) / (13) = 27/13, left: 27/13, 3\n(3) / (13) = 3/13, left: 3/13, 9, 3\n(9) + (3) = 12, left: 12, 3/13\n(13) - (3) = 10, left: 10, 9, 3\n(3) - (3) = 0, left: 0, 9, 13\n(9) + (0) = 9, left: 9, 13\n(3) + (3) = 6, left: 6, 9, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (13 - 9))"}, {"input": "3 9 3 13\n", "output": "(3) / (13) = 3/13, left: 3/13, 3, 9\n(13) / (3) = 13/3, left: 13/3, 3, 9\n(13) - (3) = 10, left: 10, 3, 9\n(9) * (3) = 27, left: 27, 3, 13\n(3) * (13) = 39, left: 39, 27\n(3) / (9) = 1/3, left: 1/3, 3, 13\n(1/3) / (3) = 1/9, left: 1/9, 13\n(13) - (9) = 4, left: 4, 3, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((13 - 9) * (3 + 3))"}, {"input": "3 9 3 13\n", "output": "(9) / (3) = 3, left: 3, 3, 13\n(3) - (9) = -6, left: -6, 3, 13\n(9) * (3) = 27, left: 27, 3, 13\n(3) * (13) = 39, left: 39, 27\n(3) - (9) = -6, left: -6, 3, 13\n(-6) - (3) = -9, left: -9, 13\n(-9) - (13) = -22, left: -22\n(13) - (9) = 4, left: 4, 3, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((13 - 9) * (3 + 3))"}, {"input": "3 9 3 13\n", "output": "(3) - (13) = -10, left: -10, 9, 3\n(-10) - (9) = -19, left: -19, 3\n(3) * (13) = 39, left: 39, 9, 3\n(9) - (39) = -30, left: -30, 3\n(3) + (13) = 16, left: 16, 9, 3\n(9) - (16) = -7, left: -7, 3\n(9) / (3) = 3, left: 3, 16\n(13) - (9) = 4, left: 4, 3, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((13 - 9) * (3 + 3))"}, {"input": "3 9 3 13\n", "output": "(3) / (13) = 3/13, left: 3/13, 9, 3\n(3) + (13) = 16, left: 16, 9, 3\n(3) - (16) = -13, left: -13, 9\n(-13) / (9) = -13/9, left: -13/9\n(13) / (3) = 13/3, left: 13/3, 9, 3\n(3) * (13) = 39, left: 39, 9, 3\n(3) * (3) = 9, left: 9, 9, 13\n(3) + (3) = 6, left: 6, 9, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (13 - 9))"}, {"input": "3 9 3 13\n", "output": "(3) / (9) = 1/3, left: 1/3, 3, 13\n(3) * (9) = 27, left: 27, 3, 13\n(27) / (3) = 9, left: 9, 13\n(13) - (9) = 4, left: 4\n(9) + (3) = 12, left: 12, 3, 13\n(9) * (3) = 27, left: 27, 3, 13\n(3) - (27) = -24, left: -24, 13\n(3) - (9) = -6, left: -6, 3, 13\n(9) / (3) = 3, left: 3, 3, 13\n(9) * (13) = 117, left: 117, 3, 3\n(3) * (117) = 351, left: 351, 3\n(13) - (9) = 4, left: 4, 3, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((13 - 9) * (3 + 3))"}, {"input": "3 9 3 13\n", "output": "(9) * (3) = 27, left: 27, 3, 13\n(9) / (3) = 3, left: 3, 3, 13\n(9) + (3) = 12, left: 12, 3, 13\n(3) / (9) = 1/3, left: 1/3, 3, 13\n(3) * (13) = 39, left: 39, 1/3\n(3) * (13) = 39, left: 39, 9, 3\n(9) / (3) = 3, left: 3, 39\n(3) + (13) = 16, left: 16, 9, 3\n(3) / (3) = 1, left: 1, 9, 13\n(1) - (13) = -12, left: -12, 9\n(-12) / (9) = -4/3, left: -4/3\n(3) + (3) = 6, left: 6, 9, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (13 - 9))"}, {"input": "13 9 6 12\n", "output": "(9) + (6) = 15, left: 15, 13, 12\n(15) / (13) = 15/13, left: 15/13, 12\n(12) + (15/13) = 171/13, left: 171/13\n(15) - (13) = 2, left: 2, 12\n(12) / (2) = 6, left: 6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 + 6) - 13))"}, {"input": "13 9 6 12\n", "output": "(9) * (12) = 108, left: 108, 13, 6\n(13) / (6) = 13/6, left: 13/6, 108\n(12) / (9) = 4/3, left: 4/3, 13, 6\n(9) + (6) = 15, left: 15, 13, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 + 6) - 13))"}, {"input": "13 9 6 12\n", "output": "(13) + (9) = 22, left: 22, 6, 12\n(6) + (12) = 18, left: 18, 22\n(22) / (18) = 11/9, left: 11/9\n(18) / (22) = 9/11, left: 9/11\n(12) / (6) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((13 + 9) + (12 / 6))"}, {"input": "13 9 6 12\n", "output": "(13) / (12) = 13/12, left: 13/12, 9, 6\n(13/12) / (9) = 13/108, left: 13/108, 6\n(13) + (6) = 19, left: 19, 9, 12\n(13) - (6) = 7, left: 7, 9, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (9 - (13 - 6)))"}, {"input": "13 9 6 12\n", "output": "(6) * (12) = 72, left: 72, 13, 9\n(72) / (9) = 8, left: 8, 13\n(13) / (9) = 13/9, left: 13/9, 72\n(6) - (12) = -6, left: -6, 13, 9\n(9) - (13) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((6 - 12) * (9 - 13))"}, {"input": "13 9 6 12\n", "output": "(13) + (9) = 22, left: 22, 6, 12\n(6) + (12) = 18, left: 18, 22\n(22) * (18) = 396, left: 396\n(22) / (18) = 11/9, left: 11/9\n(18) / (22) = 9/11, left: 9/11\n(12) / (6) = 2, left: 2, 22\n(22) * (2) = 44, left: 44\n(2) / (22) = 1/11, left: 1/11\n(2) - (22) = -20, left: -20\n(22) + (2) = 24, left: 24\nreach 24! expression: ((13 + 9) + (12 / 6))"}, {"input": "13 9 6 12\n", "output": "(9) - (12) = -3, left: -3, 13, 6\n(9) * (12) = 108, left: 108, 13, 6\n(13) + (12) = 25, left: 25, 9, 6\n(9) / (25) = 9/25, left: 9/25, 6\n(13) / (12) = 13/12, left: 13/12, 9, 6\n(6) / (13) = 6/13, left: 6/13, 9, 12\n(12) - (9) = 3, left: 3, 6/13\n(13) - (6) = 7, left: 7, 9, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (9 - (13 - 6)))"}, {"input": "13 9 6 12\n", "output": "(9) * (12) = 108, left: 108, 13, 6\n(12) - (9) = 3, left: 3, 13, 6\n(9) - (12) = -3, left: -3, 13, 6\n(13) - (6) = 7, left: 7, -3\n(-3) + (7) = 4, left: 4\n(12) / (9) = 4/3, left: 4/3, 13, 6\n(9) * (6) = 54, left: 54, 13, 12\n(9) + (6) = 15, left: 15, 13, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 + 6) - 13))"}, {"input": "13 9 6 12\n", "output": "(9) + (6) = 15, left: 15, 13, 12\n(15) / (13) = 15/13, left: 15/13, 12\n(15/13) - (12) = -141/13, left: -141/13\n(12) * (15/13) = 180/13, left: 180/13\n(12) + (15/13) = 171/13, left: 171/13\n(12) - (15/13) = 141/13, left: 141/13\n(12) / (15/13) = 52/5, left: 52/5\n(15) - (13) = 2, left: 2, 12\n(12) / (2) = 6, left: 6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 + 6) - 13))"}, {"input": "13 9 6 12\n", "output": "(6) * (12) = 72, left: 72, 13, 9\n(72) - (9) = 63, left: 63, 13\n(9) - (72) = -63, left: -63, 13\n(9) - (13) = -4, left: -4, 72\n(13) / (72) = 13/72, left: 13/72, 9\n(9) + (13/72) = 661/72, left: 661/72\n(13) * (72) = 936, left: 936, 9\n(6) - (12) = -6, left: -6, 13, 9\n(9) - (13) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((6 - 12) * (9 - 13))"}, {"input": "12 2 9 6\n", "output": "(9) / (6) = 3/2, left: 3/2, 12, 2\n(2) / (12) = 1/6, left: 1/6, 3/2\n(3/2) / (1/6) = 9, left: 9\n(3/2) / (12) = 1/8, left: 1/8, 2\n(2) - (3/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 - (9 / 6)))"}, {"input": "12 2 9 6\n", "output": "(9) / (6) = 3/2, left: 3/2, 12, 2\n(12) + (2) = 14, left: 14, 3/2\n(12) / (2) = 6, left: 6, 3/2\n(12) * (2) = 24, left: 24, 3/2\n(24) / (3/2) = 16, left: 16\n(12) + (3/2) = 27/2, left: 27/2, 2\n(12) / (3/2) = 8, left: 8, 2\n(2) + (8) = 10, left: 10\n(2) - (3/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 - (9 / 6)))"}, {"input": "12 2 9 6\n", "output": "(9) * (6) = 54, left: 54, 12, 2\n(54) / (12) = 9/2, left: 9/2, 2\n(6) / (9) = 2/3, left: 2/3, 12, 2\n(2) / (12) = 1/6, left: 1/6, 2/3\n(9) + (6) = 15, left: 15, 12, 2\n(9) - (6) = 3, left: 3, 12, 2\n(12) + (3) = 15, left: 15, 2\n(9) / (6) = 3/2, left: 3/2, 12, 2\n(2) - (3/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 - (9 / 6)))"}, {"input": "12 2 9 6\n", "output": "(12) * (6) = 72, left: 72, 2, 9\n(2) / (9) = 2/9, left: 2/9, 72\n(12) / (6) = 2, left: 2, 2, 9\n(12) - (6) = 6, left: 6, 2, 9\n(2) + (6) = 8, left: 8, 9\n(9) * (8) = 72, left: 72\n(2) - (6) = -4, left: -4, 9\n(-4) / (9) = -4/9, left: -4/9\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((12 - 6) + (2 * 9))"}, {"input": "12 2 9 6\n", "output": "(12) + (2) = 14, left: 14, 9, 6\n(9) + (14) = 23, left: 23, 6\n(14) / (6) = 7/3, left: 7/3, 9\n(12) * (2) = 24, left: 24, 9, 6\n(12) / (2) = 6, left: 6, 9, 6\n(2) / (9) = 2/9, left: 2/9, 12, 6\n(2) - (9) = -7, left: -7, 12, 6\n(2) * (9) = 18, left: 18, 12, 6\n(12) + (18) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((12 + (2 * 9)) - 6)"}, {"input": "12 2 9 6\n", "output": "(2) * (6) = 12, left: 12, 12, 9\n(9) - (12) = -3, left: -3, 12\n(12) - (12) = 0, left: 0, 9\n(2) - (6) = -4, left: -4, 12, 9\n(12) / (9) = 4/3, left: 4/3, -4\n(12) + (-4) = 8, left: 8, 9\n(6) - (2) = 4, left: 4, 12, 9\n(12) * (4) = 48, left: 48, 9\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (6 - 2)) - 12)"}, {"input": "12 2 9 6\n", "output": "(12) * (2) = 24, left: 24, 9, 6\n(12) - (2) = 10, left: 10, 9, 6\n(2) - (12) = -10, left: -10, 9, 6\n(9) - (2) = 7, left: 7, 12, 6\n(12) - (7) = 5, left: 5, 6\n(12) / (7) = 12/7, left: 12/7, 6\n(2) / (9) = 2/9, left: 2/9, 12, 6\n(2) - (9) = -7, left: -7, 12, 6\n(6) / (-7) = -6/7, left: -6/7, 12\n(2) + (9) = 11, left: 11, 12, 6\n(11) - (12) = -1, left: -1, 6\n(2) * (9) = 18, left: 18, 12, 6\n(12) + (18) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((12 + (2 * 9)) - 6)"}, {"input": "3 3 4 6\n", "output": "(3) * (4) = 12, left: 12, 3, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(1/2) - (12) = -23/2, left: -23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((3 * 4) / (3 / 6))"}, {"input": "3 3 4 6\n", "output": "(3) * (4) = 12, left: 12, 3, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(1/2) - (12) = -23/2, left: -23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((3 * 4) / (3 / 6))"}, {"input": "3 3 4 6\n", "output": "(6) - (4) = 2, left: 2, 3, 3\n(3) + (2) = 5, left: 5, 3\n(4) + (6) = 10, left: 10, 3, 3\n(10) / (3) = 10/3, left: 10/3, 3\n(4) - (6) = -2, left: -2, 3, 3\n(3) + (3) = 6, left: 6, -2\n(3) + (-2) = 1, left: 1, 3\n(4) * (6) = 24, left: 24, 3, 3\n(3) * (24) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((3 * (4 * 6)) / 3)"}, {"input": "3 3 4 6\n", "output": "(4) / (3) = 4/3, left: 4/3, 3, 6\n(4/3) / (6) = 2/9, left: 2/9, 3\n(2/9) / (3) = 2/27, left: 2/27\n(3) - (2/9) = 25/9, left: 25/9\n(3) * (2/9) = 2/3, left: 2/3\n(3) / (2/9) = 27/2, left: 27/2\n(2/9) - (3) = -25/9, left: -25/9\n(6) * (4/3) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 * (4 / 3)))"}, {"input": "3 3 4 6\n", "output": "(3) + (3) = 6, left: 6, 4, 6\n(6) / (6) = 1, left: 1, 4\n(4) * (6) = 24, left: 24, 6\n(6) - (4) = 2, left: 2, 6\n(4) + (6) = 10, left: 10, 6\n(4) * (6) = 24, left: 24, 6\n(3) - (3) = 0, left: 0, 4, 6\n(6) / (4) = 3/2, left: 3/2, 0\n(4) * (6) = 24, left: 24, 0\n(0) + (24) = 24, left: 24\nreach 24! expression: ((3 - 3) + (4 * 6))"}, {"input": "3 3 4 6\n", "output": "(6) - (4) = 2, left: 2, 3, 3\n(3) / (2) = 3/2, left: 3/2, 3\n(4) + (6) = 10, left: 10, 3, 3\n(10) - (3) = 7, left: 7, 3\n(3) + (7) = 10, left: 10\n(4) - (6) = -2, left: -2, 3, 3\n(3) * (-2) = -6, left: -6, 3\n(4) * (6) = 24, left: 24, 3, 3\n(3) - (24) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (3 - (4 * 6)))"}, {"input": "3 3 4 6\n", "output": "(3) * (4) = 12, left: 12, 3, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(1/2) - (12) = -23/2, left: -23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((3 * 4) / (3 / 6))"}, {"input": "3 3 4 6\n", "output": "(6) - (4) = 2, left: 2, 3, 3\n(3) / (2) = 3/2, left: 3/2, 3\n(3) / (3) = 1, left: 1, 2\n(6) / (4) = 3/2, left: 3/2, 3, 3\n(3) * (3) = 9, left: 9, 3/2\n(3) / (3/2) = 2, left: 2, 3\n(3) - (3/2) = 3/2, left: 3/2, 3\n(4) + (6) = 10, left: 10, 3, 3\n(4) - (6) = -2, left: -2, 3, 3\n(3) * (-2) = -6, left: -6, 3\n(3) - (3) = 0, left: 0, -2\n(4) * (6) = 24, left: 24, 3, 3\n(3) - (24) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (3 - (4 * 6)))"}, {"input": "3 3 4 6\n", "output": "(6) - (4) = 2, left: 2, 3, 3\n(3) - (2) = 1, left: 1, 3\n(4) + (6) = 10, left: 10, 3, 3\n(3) + (10) = 13, left: 13, 3\n(10) - (3) = 7, left: 7, 3\n(3) - (7) = -4, left: -4\n(3) + (10) = 13, left: 13, 3\n(4) - (6) = -2, left: -2, 3, 3\n(3) - (-2) = 5, left: 5, 3\n(3) * (-2) = -6, left: -6, 3\n(3) * (-2) = -6, left: -6, 3\n(4) * (6) = 24, left: 24, 3, 3\n(3) * (24) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((3 * (4 * 6)) / 3)"}, {"input": "3 3 4 6\n", "output": "(3) * (4) = 12, left: 12, 3, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(1/2) - (12) = -23/2, left: -23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((3 * 4) / (3 / 6))"}, {"input": "7 9 8 4\n", "output": "(4) - (8) = -4, left: -4, 7, 9\n(7) / (9) = 7/9, left: 7/9, -4\n(8) * (4) = 32, left: 32, 7, 9\n(9) / (32) = 9/32, left: 9/32, 7\n(8) + (4) = 12, left: 12, 7, 9\n(7) - (12) = -5, left: -5, 9\n(9) * (-5) = -45, left: -45\n(9) - (12) = -3, left: -3, 7\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((8 + 4) * (9 - 7))"}, {"input": "7 9 8 4\n", "output": "(9) / (8) = 9/8, left: 9/8, 7, 4\n(9/8) - (7) = -47/8, left: -47/8, 4\n(9/8) / (4) = 9/32, left: 9/32, 7\n(9) - (8) = 1, left: 1, 7, 4\n(4) / (1) = 4, left: 4, 7\n(4) / (7) = 4/7, left: 4/7\n(1) / (4) = 1/4, left: 1/4, 7\n(7) / (4) = 7/4, left: 7/4, 1\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 - 8)))"}, {"input": "7 9 8 4\n", "output": "(7) / (9) = 7/9, left: 7/9, 8, 4\n(7/9) - (4) = -29/9, left: -29/9, 8\n(7) + (9) = 16, left: 16, 8, 4\n(8) * (4) = 32, left: 32, 16\n(32) - (16) = 16, left: 16\n(8) / (4) = 2, left: 2, 16\n(4) - (16) = -12, left: -12, 8\n(9) - (7) = 2, left: 2, 8, 4\n(8) - (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (8 - (9 - 7)))"}, {"input": "7 9 8 4\n", "output": "(8) + (4) = 12, left: 12, 7, 9\n(12) / (9) = 4/3, left: 4/3, 7\n(9) * (12) = 108, left: 108, 7\n(108) / (7) = 108/7, left: 108/7\n(9) + (12) = 21, left: 21, 7\n(7) - (12) = -5, left: -5, 9\n(12) - (7) = 5, left: 5, 9\n(5) - (9) = -4, left: -4\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((8 + 4) * (9 - 7))"}, {"input": "7 9 8 4\n", "output": "(7) * (9) = 63, left: 63, 8, 4\n(8) + (4) = 12, left: 12, 63\n(63) - (12) = 51, left: 51\n(7) + (9) = 16, left: 16, 8, 4\n(4) / (16) = 1/4, left: 1/4, 8\n(9) - (7) = 2, left: 2, 8, 4\n(4) / (8) = 1/2, left: 1/2, 2\n(2) + (1/2) = 5/2, left: 5/2\n(8) + (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((9 - 7) * (8 + 4))"}, {"input": "4 6 1 11\n", "output": "(6) / (4) = 3/2, left: 3/2, 1, 11\n(11) / (1) = 11, left: 11, 3/2\n(11) * (3/2) = 33/2, left: 33/2, 1\n(6) - (4) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 - 4) * (1 + 11))"}, {"input": "4 6 1 11\n", "output": "(4) / (11) = 4/11, left: 4/11, 6, 1\n(4) * (11) = 44, left: 44, 6, 1\n(4) / (1) = 4, left: 4, 6, 11\n(1) / (4) = 1/4, left: 1/4, 6, 11\n(4) * (1) = 4, left: 4, 6, 11\n(11) - (6) = 5, left: 5, 4\n(4) - (1) = 3, left: 3, 6, 11\n(1) + (11) = 12, left: 12, 4, 6\n(12) - (6) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((1 + 11) - 6))"}, {"input": "4 6 1 11\n", "output": "(6) / (11) = 6/11, left: 6/11, 4, 1\n(1) + (6/11) = 17/11, left: 17/11, 4\n(4) - (1) = 3, left: 3, 6/11\n(4) / (6/11) = 22/3, left: 22/3, 1\n(1) - (22/3) = -19/3, left: -19/3\n(4) + (6/11) = 50/11, left: 50/11, 1\n(50/11) - (1) = 39/11, left: 39/11\n(11) - (6) = 5, left: 5, 4, 1\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (11 - 6)))"}, {"input": "4 6 1 11\n", "output": "(4) - (1) = 3, left: 3, 6, 11\n(4) / (1) = 4, left: 4, 6, 11\n(11) * (4) = 44, left: 44, 6\n(1) - (4) = -3, left: -3, 6, 11\n(4) + (1) = 5, left: 5, 6, 11\n(6) * (1) = 6, left: 6, 4, 11\n(1) / (6) = 1/6, left: 1/6, 4, 11\n(6) - (1) = 5, left: 5, 4, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (6 - 1)))"}, {"input": "4 6 1 11\n", "output": "(1) - (4) = -3, left: -3, 6, 11\n(-3) / (11) = -3/11, left: -3/11, 6\n(4) / (1) = 4, left: 4, 6, 11\n(11) / (6) = 11/6, left: 11/6, 4\n(1) / (4) = 1/4, left: 1/4, 6, 11\n(4) + (1) = 5, left: 5, 6, 11\n(6) * (5) = 30, left: 30, 11\n(11) - (6) = 5, left: 5, 4, 1\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (11 - 6)))"}, {"input": "4 6 1 11\n", "output": "(6) / (4) = 3/2, left: 3/2, 1, 11\n(11) / (3/2) = 22/3, left: 22/3, 1\n(3/2) / (11) = 3/22, left: 3/22, 1\n(6) - (4) = 2, left: 2, 1, 11\n(2) - (1) = 1, left: 1, 11\n(1) - (2) = -1, left: -1, 11\n(1) * (2) = 2, left: 2, 11\n(11) - (1) = 10, left: 10, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 - 4) * (1 + 11))"}, {"input": "4 6 1 11\n", "output": "(11) - (4) = 7, left: 7, 6, 1\n(11) / (4) = 11/4, left: 11/4, 6, 1\n(4) - (11) = -7, left: -7, 6, 1\n(1) - (-7) = 8, left: 8, 6\n(4) * (11) = 44, left: 44, 6, 1\n(44) / (6) = 22/3, left: 22/3, 1\n(4) / (1) = 4, left: 4, 6, 11\n(4) * (1) = 4, left: 4, 6, 11\n(6) + (4) = 10, left: 10, 11\n(1) - (4) = -3, left: -3, 6, 11\n(6) + (11) = 17, left: 17, -3\n(1) + (11) = 12, left: 12, 4, 6\n(12) - (6) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((1 + 11) - 6))"}, {"input": "9 7 4 9\n", "output": "(9) - (7) = 2, left: 2, 4, 9\n(9) / (4) = 9/4, left: 9/4, 7, 9\n(7) * (9) = 63, left: 63, 9, 4\n(4) / (9) = 4/9, left: 4/9, 63\n(7) - (9) = -2, left: -2, 9, 4\n(9) / (7) = 9/7, left: 9/7, 9, 4\n(4) * (9) = 36, left: 36, 9, 7\n(9) / (9) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(4) / (9) = 4/9, left: 4/9, 7, 9\n(7) / (4/9) = 63/4, left: 63/4, 9\n(4) / (7) = 4/7, left: 4/7, 9, 9\n(9) + (7) = 16, left: 16, 4, 9\n(4) - (16) = -12, left: -12, 9\n(4) * (9) = 36, left: 36, 16\n(16) + (36) = 52, left: 52\n(9) / (9) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(9) / (7) = 9/7, left: 9/7, 9, 4\n(7) * (4) = 28, left: 28, 9, 9\n(28) / (9) = 28/9, left: 28/9, 9\n(4) - (7) = -3, left: -3, 9, 9\n(4) / (9) = 4/9, left: 4/9, 9, 7\n(9) / (4) = 9/4, left: 9/4, 9, 7\n(9) + (9) = 18, left: 18, 7, 4\n(9) / (9) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(4) - (9) = -5, left: -5, 7, 9\n(9) / (-5) = -9/5, left: -9/5, 7\n(4) / (9) = 4/9, left: 4/9, 7, 9\n(9) - (4) = 5, left: 5, 7, 9\n(9) + (4) = 13, left: 13, 7, 9\n(9) - (9) = 0, left: 0, 7, 4\n(9) + (9) = 18, left: 18, 7, 4\n(9) / (9) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(9) - (7) = 2, left: 2, 4, 9\n(4) - (9) = -5, left: -5, 2\n(7) - (9) = -2, left: -2, 4, 9\n(4) * (9) = 36, left: 36, -2\n(4) / (9) = 4/9, left: 4/9, 9, 7\n(4) + (9) = 13, left: 13, 9, 7\n(9) / (4) = 9/4, left: 9/4, 9, 7\n(9) / (9) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(7) + (9) = 16, left: 16, 9, 4\n(7) + (4) = 11, left: 11, 9, 9\n(9) / (9) = 1, left: 1, 11\n(7) / (4) = 7/4, left: 7/4, 9, 9\n(7/4) - (9) = -29/4, left: -29/4, 9\n(4) / (9) = 4/9, left: 4/9, 7, 9\n(9) * (4) = 36, left: 36, 7, 9\n(4) / (9) = 4/9, left: 4/9, 9, 7\n(9) / (4) = 9/4, left: 9/4, 9, 7\n(9) * (7) = 63, left: 63, 9/4\n(4) + (9) = 13, left: 13, 9, 7\n(9) / (9) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(9) / (4) = 9/4, left: 9/4, 7, 9\n(4) - (9) = -5, left: -5, 7, 9\n(7) - (-5) = 12, left: 12, 9\n(7) * (9) = 63, left: 63, -5\n(4) / (9) = 4/9, left: 4/9, 7, 9\n(9) - (4) = 5, left: 5, 7, 9\n(7) * (5) = 35, left: 35, 9\n(9) - (7) = 2, left: 2, 5\n(9) + (4) = 13, left: 13, 7, 9\n(9) - (9) = 0, left: 0, 7, 4\n(9) * (9) = 81, left: 81, 7, 4\n(9) / (9) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(7) - (9) = -2, left: -2, 4, 9\n(-2) - (4) = -6, left: -6, 9\n(4) / (-2) = -2, left: -2, 9\n(9) * (7) = 63, left: 63, 4, 9\n(9) - (63) = -54, left: -54, 4\n(9) + (7) = 16, left: 16, 4, 9\n(4) / (9) = 4/9, left: 4/9, 9, 7\n(9) - (4) = 5, left: 5, 9, 7\n(5) - (7) = -2, left: -2, 9\n(4) * (9) = 36, left: 36, 9, 7\n(9) + (9) = 18, left: 18, 7, 4\n(9) / (9) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(9) * (4) = 36, left: 36, 7, 9\n(9) / (36) = 1/4, left: 1/4, 7\n(9) / (7) = 9/7, left: 9/7, 9, 4\n(4) + (9/7) = 37/7, left: 37/7, 9\n(7) - (4) = 3, left: 3, 9, 9\n(4) / (7) = 4/7, left: 4/7, 9, 9\n(7) + (4) = 11, left: 11, 9, 9\n(7) * (4) = 28, left: 28, 9, 9\n(9) - (7) = 2, left: 2, 4, 9\n(9) + (7) = 16, left: 16, 4, 9\n(4) - (9) = -5, left: -5, 16\n(9) / (9) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(7) - (9) = -2, left: -2, 4, 9\n(4) * (-2) = -8, left: -8, 9\n(7) / (9) = 7/9, left: 7/9, 4, 9\n(9) + (7) = 16, left: 16, 4, 9\n(16) - (9) = 7, left: 7, 4\n(9) / (4) = 9/4, left: 9/4, 7, 9\n(9) - (7) = 2, left: 2, 9, 4\n(4) / (9) = 4/9, left: 4/9, 9, 7\n(9) - (4) = 5, left: 5, 9, 7\n(5) - (9) = -4, left: -4, 7\n(9) + (5) = 14, left: 14, 7\n(9) / (9) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "11 6 10 4\n", "output": "(6) * (10) = 60, left: 60, 11, 4\n(11) + (10) = 21, left: 21, 6, 4\n(6) + (4) = 10, left: 10, 21\n(11) - (10) = 1, left: 1, 6, 4\n(1) / (4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((11 - 10) / 4))"}, {"input": "11 6 10 4\n", "output": "(11) * (6) = 66, left: 66, 10, 4\n(6) / (4) = 3/2, left: 3/2, 11, 10\n(10) - (3/2) = 17/2, left: 17/2, 11\n(6) * (4) = 24, left: 24, 11, 10\n(11) - (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * 4) / (11 - 10))"}, {"input": "11 6 10 4\n", "output": "(6) * (10) = 60, left: 60, 11, 4\n(11) + (4) = 15, left: 15, 60\n(11) * (6) = 66, left: 66, 10, 4\n(6) * (4) = 24, left: 24, 11, 10\n(11) - (10) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((6 * 4) * (11 - 10))"}, {"input": "11 6 10 4\n", "output": "(6) / (10) = 3/5, left: 3/5, 11, 4\n(6) + (10) = 16, left: 16, 11, 4\n(11) / (4) = 11/4, left: 11/4, 16\n(10) - (6) = 4, left: 4, 11, 4\n(6) * (10) = 60, left: 60, 11, 4\n(11) + (4) = 15, left: 15, 6, 10\n(11) / (4) = 11/4, left: 11/4, 6, 10\n(11) - (10) = 1, left: 1, 6, 4\n(1) / (4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((11 - 10) / 4))"}, {"input": "11 6 10 4\n", "output": "(6) - (11) = -5, left: -5, 10, 4\n(11) / (6) = 11/6, left: 11/6, 10, 4\n(4) / (10) = 2/5, left: 2/5, 11/6\n(11/6) / (2/5) = 55/12, left: 55/12\n(11) - (6) = 5, left: 5, 10, 4\n(4) / (5) = 4/5, left: 4/5, 10\n(11) * (6) = 66, left: 66, 10, 4\n(6) * (4) = 24, left: 24, 11, 10\n(11) - (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * 4) / (11 - 10))"}, {"input": "11 6 10 4\n", "output": "(6) * (10) = 60, left: 60, 11, 4\n(11) - (6) = 5, left: 5, 10, 4\n(5) / (4) = 5/4, left: 5/4, 10\n(6) - (11) = -5, left: -5, 10, 4\n(10) * (-5) = -50, left: -50, 4\n(11) + (6) = 17, left: 17, 10, 4\n(10) - (11) = -1, left: -1, 6, 4\n(11) - (10) = 1, left: 1, 6, 4\n(1) / (4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((11 - 10) / 4))"}, {"input": "11 6 10 4\n", "output": "(6) / (10) = 3/5, left: 3/5, 11, 4\n(6) - (10) = -4, left: -4, 11, 4\n(10) / (6) = 5/3, left: 5/3, 11, 4\n(6) / (11) = 6/11, left: 6/11, 10, 4\n(4) + (6/11) = 50/11, left: 50/11, 10\n(6) - (11) = -5, left: -5, 10, 4\n(11) + (6) = 17, left: 17, 10, 4\n(6) * (4) = 24, left: 24, 11, 10\n(11) - (10) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((6 * 4) * (11 - 10))"}, {"input": "11 6 10 4\n", "output": "(4) - (10) = -6, left: -6, 11, 6\n(6) - (10) = -4, left: -4, 11, 4\n(11) + (4) = 15, left: 15, -4\n(10) - (6) = 4, left: 4, 11, 4\n(11) + (6) = 17, left: 17, 10, 4\n(10) + (17) = 27, left: 27, 4\n(11) - (6) = 5, left: 5, 10, 4\n(11) - (10) = 1, left: 1, 6, 4\n(4) / (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (4 / (11 - 10)))"}, {"input": "9 1 5 10\n", "output": "(9) / (1) = 9, left: 9, 5, 10\n(5) + (10) = 15, left: 15, 9\n(15) / (9) = 5/3, left: 5/3\n(15) - (9) = 6, left: 6\n(9) - (15) = -6, left: -6\n(9) + (15) = 24, left: 24\nreach 24! expression: ((9 / 1) + (5 + 10))"}, {"input": "9 1 5 10\n", "output": "(5) / (9) = 5/9, left: 5/9, 1, 10\n(9) / (5) = 9/5, left: 9/5, 1, 10\n(1) * (10) = 10, left: 10, 9/5\n(9) * (5) = 45, left: 45, 1, 10\n(5) - (9) = -4, left: -4, 1, 10\n(1) + (10) = 11, left: 11, -4\n(9) + (5) = 14, left: 14, 1, 10\n(14) / (1) = 14, left: 14, 10\n(10) - (14) = -4, left: -4\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((9 + 5) / 1))"}, {"input": "9 1 5 10\n", "output": "(9) / (5) = 9/5, left: 9/5, 1, 10\n(9/5) - (1) = 4/5, left: 4/5, 10\n(10) * (9/5) = 18, left: 18, 1\n(5) / (9) = 5/9, left: 5/9, 1, 10\n(1) - (10) = -9, left: -9, 5/9\n(1) - (5/9) = 4/9, left: 4/9, 10\n(1) * (5/9) = 5/9, left: 5/9, 10\n(9) + (5) = 14, left: 14, 1, 10\n(14) / (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((9 + 5) / 1))"}, {"input": "9 1 5 10\n", "output": "(1) - (5) = -4, left: -4, 9, 10\n(10) / (9) = 10/9, left: 10/9, -4\n(9) * (-4) = -36, left: -36, 10\n(10) - (-36) = 46, left: 46\n(5) - (1) = 4, left: 4, 9, 10\n(1) / (5) = 1/5, left: 1/5, 9, 10\n(10) / (9) = 10/9, left: 10/9, 1/5\n(1) * (5) = 5, left: 5, 9, 10\n(9) + (5) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (9 + (1 * 5)))"}, {"input": "9 1 5 10\n", "output": "(9) / (1) = 9, left: 9, 5, 10\n(5) + (10) = 15, left: 15, 9\n(9) * (15) = 135, left: 135\n(15) / (9) = 5/3, left: 5/3\n(15) - (9) = 6, left: 6\n(9) - (15) = -6, left: -6\n(9) / (15) = 3/5, left: 3/5\n(9) + (15) = 24, left: 24\nreach 24! expression: ((9 / 1) + (5 + 10))"}, {"input": "9 1 5 10\n", "output": "(9) - (1) = 8, left: 8, 5, 10\n(5) - (10) = -5, left: -5, 8\n(-5) / (8) = -5/8, left: -5/8\n(5) * (10) = 50, left: 50, 8\n(1) - (9) = -8, left: -8, 5, 10\n(9) + (1) = 10, left: 10, 5, 10\n(9) * (1) = 9, left: 9, 5, 10\n(10) * (9) = 90, left: 90, 5\n(10) + (9) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (10 + (9 * 1)))"}, {"input": "9 1 5 10\n", "output": "(9) / (1) = 9, left: 9, 5, 10\n(5) + (10) = 15, left: 15, 9\n(9) * (15) = 135, left: 135\n(15) / (9) = 5/3, left: 5/3\n(15) - (9) = 6, left: 6\n(9) - (15) = -6, left: -6\n(9) / (15) = 3/5, left: 3/5\n(9) + (15) = 24, left: 24\nreach 24! expression: ((9 / 1) + (5 + 10))"}, {"input": "9 1 5 10\n", "output": "(9) / (1) = 9, left: 9, 5, 10\n(5) + (10) = 15, left: 15, 9\n(9) * (15) = 135, left: 135\n(15) / (9) = 5/3, left: 5/3\n(15) - (9) = 6, left: 6\n(9) - (15) = -6, left: -6\n(9) / (15) = 3/5, left: 3/5\n(9) + (15) = 24, left: 24\nreach 24! expression: ((9 / 1) + (5 + 10))"}, {"input": "8 11 6 6\n", "output": "(8) / (6) = 4/3, left: 4/3, 11, 6\n(4/3) - (11) = -29/3, left: -29/3, 6\n(6) / (-29/3) = -18/29, left: -18/29\n(11) - (8) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (11 - 8)))"}, {"input": "8 11 6 6\n", "output": "(11) * (6) = 66, left: 66, 8, 6\n(11) - (6) = 5, left: 5, 8, 6\n(6) - (8) = -2, left: -2, 5\n(5) * (-2) = -10, left: -10\n(8) * (6) = 48, left: 48, 11, 6\n(11) / (6) = 11/6, left: 11/6, 48\n(8) * (11) = 88, left: 88, 6, 6\n(11) - (8) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (11 - 8)))"}, {"input": "8 11 6 6\n", "output": "(11) - (6) = 5, left: 5, 8, 6\n(11) / (6) = 11/6, left: 11/6, 8, 6\n(11/6) - (8) = -37/6, left: -37/6, 6\n(8) / (11/6) = 48/11, left: 48/11, 6\n(11) + (6) = 17, left: 17, 8, 6\n(6) / (11) = 6/11, left: 6/11, 8, 6\n(8) + (11) = 19, left: 19, 6, 6\n(8) - (11) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (8 - 11)))"}, {"input": "8 11 6 6\n", "output": "(8) * (6) = 48, left: 48, 11, 6\n(11) / (6) = 11/6, left: 11/6, 48\n(11/6) - (48) = -277/6, left: -277/6\n(11) - (6) = 5, left: 5, 48\n(8) / (6) = 4/3, left: 4/3, 11, 6\n(6) - (8) = -2, left: -2, 11, 6\n(8) - (6) = 2, left: 2, 11, 6\n(8) - (11) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (8 - 11)))"}, {"input": "8 11 6 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 8, 6\n(8) - (6) = 2, left: 2, 11, 6\n(11) / (6) = 11/6, left: 11/6, 2\n(6) * (6) = 36, left: 36, 8, 11\n(36) - (11) = 25, left: 25, 8\n(6) / (6) = 1, left: 1, 8, 11\n(11) - (6) = 5, left: 5, 8, 6\n(11) - (8) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (11 - 8)))"}, {"input": "8 11 6 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 8, 6\n(8) / (6) = 4/3, left: 4/3, 11, 6\n(11) * (6) = 66, left: 66, 4/3\n(6) * (6) = 36, left: 36, 8, 11\n(6) + (6) = 12, left: 12, 8, 11\n(8) / (6) = 4/3, left: 4/3, 11, 6\n(6) - (11) = -5, left: -5, 4/3\n(11) - (8) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (11 - 8)))"}, {"input": "8 11 6 6\n", "output": "(11) - (6) = 5, left: 5, 8, 6\n(8) + (5) = 13, left: 13, 6\n(11) + (6) = 17, left: 17, 8, 6\n(6) - (11) = -5, left: -5, 8, 6\n(8) - (6) = 2, left: 2, -5\n(6) * (-5) = -30, left: -30, 8\n(11) * (6) = 66, left: 66, 8, 6\n(6) - (66) = -60, left: -60, 8\n(8) + (11) = 19, left: 19, 6, 6\n(6) - (19) = -13, left: -13, 6\n(8) - (11) = -3, left: -3, 6, 6\n(6) / (6) = 1, left: 1, -3\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (8 - 11)))"}, {"input": "8 11 6 6\n", "output": "(8) * (6) = 48, left: 48, 11, 6\n(11) + (48) = 59, left: 59, 6\n(8) + (6) = 14, left: 14, 11, 6\n(6) / (8) = 3/4, left: 3/4, 11, 6\n(11) / (6) = 11/6, left: 11/6, 8, 6\n(8) * (6) = 48, left: 48, 11/6\n(11) * (6) = 66, left: 66, 8, 6\n(8) + (6) = 14, left: 14, 11, 6\n(8) - (6) = 2, left: 2, 11, 6\n(6) / (6) = 1, left: 1, 8, 11\n(11) * (6) = 66, left: 66, 8, 6\n(11) - (8) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (11 - 8)))"}, {"input": "10 5 3 9\n", "output": "(3) * (9) = 27, left: 27, 10, 5\n(27) - (10) = 17, left: 17, 5\n(10) + (27) = 37, left: 37, 5\n(5) + (37) = 42, left: 42\n(9) / (3) = 3, left: 3, 10, 5\n(10) + (5) = 15, left: 15, 3\n(10) / (5) = 2, left: 2, 3\n(3) + (9) = 12, left: 12, 10, 5\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (3 + 9)) / 5)"}, {"input": "10 5 3 9\n", "output": "(5) - (3) = 2, left: 2, 10, 9\n(5) / (3) = 5/3, left: 5/3, 10, 9\n(9) - (10) = -1, left: -1, 5/3\n(5/3) - (9) = -22/3, left: -22/3, 10\n(10) - (-22/3) = 52/3, left: 52/3\n(3) - (5) = -2, left: -2, 10, 9\n(10) / (5) = 2, left: 2, 3, 9\n(9) * (2) = 18, left: 18, 3\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (3 + 9))"}, {"input": "10 5 3 9\n", "output": "(5) + (9) = 14, left: 14, 10, 3\n(10) * (3) = 30, left: 30, 14\n(5) / (9) = 5/9, left: 5/9, 10, 3\n(5) * (9) = 45, left: 45, 10, 3\n(3) / (45) = 1/15, left: 1/15, 10\n(1/15) - (10) = -149/15, left: -149/15\n(9) / (5) = 9/5, left: 9/5, 10, 3\n(10) - (5) = 5, left: 5, 3, 9\n(3) * (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (3 * (10 - 5)))"}, {"input": "10 5 3 9\n", "output": "(9) / (5) = 9/5, left: 9/5, 10, 3\n(10) * (3) = 30, left: 30, 9/5\n(10) / (3) = 10/3, left: 10/3, 9/5\n(5) - (9) = -4, left: -4, 10, 3\n(5) + (9) = 14, left: 14, 10, 3\n(10) / (14) = 5/7, left: 5/7, 3\n(10) + (5) = 15, left: 15, 3, 9\n(10) / (5) = 2, left: 2, 3, 9\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (3 + 9))"}, {"input": "10 5 3 9\n", "output": "(3) - (9) = -6, left: -6, 10, 5\n(5) / (10) = 1/2, left: 1/2, -6\n(3) / (9) = 1/3, left: 1/3, 10, 5\n(1/3) / (10) = 1/30, left: 1/30, 5\n(9) - (3) = 6, left: 6, 10, 5\n(5) - (6) = -1, left: -1, 10\n(3) + (9) = 12, left: 12, 10, 5\n(10) - (12) = -2, left: -2, 5\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (3 + 9)) / 5)"}, {"input": "12 12 2 5\n", "output": "(2) - (12) = -10, left: -10, 12, 5\n(-10) / (12) = -5/6, left: -5/6, 5\n(12) - (2) = 10, left: 10, 12, 5\n(12) + (10) = 22, left: 22, 5\n(12) * (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * (12 - 2)) / 5)"}, {"input": "12 12 2 5\n", "output": "(5) - (12) = -7, left: -7, 12, 2\n(12) * (2) = 24, left: 24, -7\n(12) * (5) = 60, left: 60, 12, 2\n(60) - (2) = 58, left: 58, 12\n(60) - (12) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: (((12 * 5) - 12) / 2)"}, {"input": "12 12 2 5\n", "output": "(5) / (12) = 5/12, left: 5/12, 12, 2\n(12) * (5/12) = 5, left: 5, 2\n(2) / (5/12) = 24/5, left: 24/5, 12\n(2) * (5/12) = 5/6, left: 5/6, 12\n(12) - (2) = 10, left: 10, 5/12\n(10) / (5/12) = 24, left: 24\nreach 24! expression: ((12 - 2) / (5 / 12))"}, {"input": "12 12 2 5\n", "output": "(5) - (12) = -7, left: -7, 12, 2\n(2) - (12) = -10, left: -10, -7\n(12) / (5) = 12/5, left: 12/5, 12, 2\n(2) * (12/5) = 24/5, left: 24/5, 12\n(12) - (2) = 10, left: 10, 12/5\n(12/5) * (10) = 24, left: 24\nreach 24! expression: ((12 / 5) * (12 - 2))"}, {"input": "12 12 2 5\n", "output": "(2) + (5) = 7, left: 7, 12, 12\n(12) - (7) = 5, left: 5, 12\n(2) - (5) = -3, left: -3, 12, 12\n(12) + (-3) = 9, left: 9, 12\n(12) * (-3) = -36, left: -36, 12\n(12) + (12) = 24, left: 24, -3\n(5) - (2) = 3, left: 3, 12, 12\n(3) / (12) = 1/4, left: 1/4, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (5 - 2)) - 12)"}, {"input": "12 12 2 5\n", "output": "(5) - (12) = -7, left: -7, 12, 2\n(12) / (2) = 6, left: 6, -7\n(2) - (12) = -10, left: -10, -7\n(12) + (2) = 14, left: 14, -7\n(2) + (-7) = -5, left: -5, 12\n(2) - (-7) = 9, left: 9, 12\n(12) / (5) = 12/5, left: 12/5, 12, 2\n(2) / (12/5) = 5/6, left: 5/6, 12\n(12) - (2) = 10, left: 10, 12/5\n(12/5) * (10) = 24, left: 24\nreach 24! expression: ((12 / 5) * (12 - 2))"}, {"input": "12 12 2 5\n", "output": "(5) / (12) = 5/12, left: 5/12, 12, 2\n(12) - (5/12) = 139/12, left: 139/12, 2\n(12) * (5/12) = 5, left: 5, 2\n(12) / (5/12) = 144/5, left: 144/5, 2\n(2) - (144/5) = -134/5, left: -134/5\n(2) - (5/12) = 19/12, left: 19/12, 12\n(5/12) / (2) = 5/24, left: 5/24, 12\n(12) / (5/24) = 288/5, left: 288/5\n(12) - (2) = 10, left: 10, 5/12\n(10) / (5/12) = 24, left: 24\nreach 24! expression: ((12 - 2) / (5 / 12))"}, {"input": "12 12 2 5\n", "output": "(2) - (12) = -10, left: -10, 12, 5\n(-10) / (5) = -2, left: -2, 12\n(-2) / (12) = -1/6, left: -1/6\n(12) * (-10) = -120, left: -120, 5\n(12) - (-10) = 22, left: 22, 5\n(2) / (12) = 1/6, left: 1/6, 12, 5\n(12) + (2) = 14, left: 14, 12, 5\n(12) - (2) = 10, left: 10, 12, 5\n(12) * (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * (12 - 2)) / 5)"}, {"input": "12 12 2 5\n", "output": "(5) - (12) = -7, left: -7, 12, 2\n(12) / (-7) = -12/7, left: -12/7, 2\n(12) + (-7) = 5, left: 5, 2\n(12) * (2) = 24, left: 24, -7\n(12) - (2) = 10, left: 10, -7\n(12) * (5) = 60, left: 60, 12, 2\n(60) / (2) = 30, left: 30, 12\n(2) / (60) = 1/30, left: 1/30, 12\n(60) - (12) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: (((12 * 5) - 12) / 2)"}, {"input": "10 1 1 12\n", "output": "(1) + (1) = 2, left: 2, 10, 12\n(12) / (10) = 6/5, left: 6/5, 2\n(2) + (6/5) = 16/5, left: 16/5\n(10) / (12) = 5/6, left: 5/6, 2\n(10) + (12) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((1 + 1) + (10 + 12))"}, {"input": "10 1 1 12\n", "output": "(1) / (12) = 1/12, left: 1/12, 10, 1\n(12) / (1) = 12, left: 12, 10, 1\n(10) * (1) = 10, left: 10, 12\n(1) + (12) = 13, left: 13, 10, 1\n(10) + (13) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (10 + (1 + 12)))"}, {"input": "10 1 1 12\n", "output": "(10) + (1) = 11, left: 11, 1, 12\n(1) / (12) = 1/12, left: 1/12, 11\n(1) * (12) = 12, left: 12, 11\n(1) + (12) = 13, left: 13, 11\n(13) - (11) = 2, left: 2\n(11) + (13) = 24, left: 24\nreach 24! expression: ((10 + 1) + (1 + 12))"}, {"input": "10 1 1 12\n", "output": "(10) - (1) = 9, left: 9, 1, 12\n(9) - (1) = 8, left: 8, 12\n(8) / (12) = 2/3, left: 2/3\n(1) + (9) = 10, left: 10, 12\n(1) - (12) = -11, left: -11, 9\n(12) + (9) = 21, left: 21, 1\n(1) / (10) = 1/10, left: 1/10, 1, 12\n(10) + (1) = 11, left: 11, 1, 12\n(12) + (11) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (12 + (10 + 1)))"}, {"input": "10 1 1 12\n", "output": "(10) + (1) = 11, left: 11, 1, 12\n(1) / (12) = 1/12, left: 1/12, 11\n(11) - (1/12) = 131/12, left: 131/12\n(1) - (12) = -11, left: -11, 11\n(1) * (12) = 12, left: 12, 11\n(11) / (12) = 11/12, left: 11/12\n(11) * (12) = 132, left: 132\n(12) - (11) = 1, left: 1\n(1) + (12) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((10 + 1) + (1 + 12))"}, {"input": "10 1 1 12\n", "output": "(1) + (1) = 2, left: 2, 10, 12\n(12) / (10) = 6/5, left: 6/5, 2\n(6/5) - (2) = -4/5, left: -4/5\n(10) / (12) = 5/6, left: 5/6, 2\n(2) - (5/6) = 7/6, left: 7/6\n(5/6) - (2) = -7/6, left: -7/6\n(2) * (5/6) = 5/3, left: 5/3\n(10) * (12) = 120, left: 120, 2\n(10) + (12) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((1 + 1) + (10 + 12))"}, {"input": "10 1 1 12\n", "output": "(12) - (1) = 11, left: 11, 10, 1\n(10) / (1) = 10, left: 10, 11\n(1) / (12) = 1/12, left: 1/12, 10, 1\n(10) + (1) = 11, left: 11, 1/12\n(1) * (12) = 12, left: 12, 10, 1\n(1) / (10) = 1/10, left: 1/10, 12\n(12) - (1) = 11, left: 11, 10\n(1) + (12) = 13, left: 13, 10, 1\n(10) + (13) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (10 + (1 + 12)))"}, {"input": "10 1 1 12\n", "output": "(12) - (1) = 11, left: 11, 10, 1\n(11) - (10) = 1, left: 1, 1\n(10) * (1) = 10, left: 10, 11\n(1) / (12) = 1/12, left: 1/12, 10, 1\n(10) / (1/12) = 120, left: 120, 1\n(10) - (1) = 9, left: 9, 1/12\n(1) * (12) = 12, left: 12, 10, 1\n(1) + (12) = 13, left: 13, 10, 1\n(1) + (13) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (1 + (1 + 12)))"}, {"input": "8 12 3 3\n", "output": "(12) + (3) = 15, left: 15, 8, 3\n(8) + (15) = 23, left: 23, 3\n(3) - (12) = -9, left: -9, 8, 3\n(8) - (-9) = 17, left: 17, 3\n(12) / (3) = 4, left: 4, 8, 3\n(3) / (4) = 3/4, left: 3/4, 8\n(4) - (8) = -4, left: -4, 3\n(12) - (3) = 9, left: 9, 8, 3\n(3) / (9) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (3 / (12 - 3)))"}, {"input": "8 12 3 3\n", "output": "(12) / (3) = 4, left: 4, 8, 3\n(3) / (4) = 3/4, left: 3/4, 8\n(4) - (8) = -4, left: -4, 3\n(12) + (3) = 15, left: 15, 8, 3\n(8) + (3) = 11, left: 11, 15\n(3) - (12) = -9, left: -9, 8, 3\n(8) / (3) = 8/3, left: 8/3, -9\n(12) - (3) = 9, left: 9, 8, 3\n(9) / (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 3) / 3))"}, {"input": "8 12 3 3\n", "output": "(12) * (3) = 36, left: 36, 8, 3\n(8) + (3) = 11, left: 11, 36\n(3) - (36) = -33, left: -33, 8\n(36) - (3) = 33, left: 33, 8\n(36) / (3) = 12, left: 12, 8\n(3) / (36) = 1/12, left: 1/12, 8\n(8) * (1/12) = 2/3, left: 2/3\n(12) - (3) = 9, left: 9, 8, 3\n(8) / (3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: ((12 - 3) * (8 / 3))"}, {"input": "8 12 3 3\n", "output": "(8) + (12) = 20, left: 20, 3, 3\n(20) / (3) = 20/3, left: 20/3, 3\n(8) - (12) = -4, left: -4, 3, 3\n(3) - (3) = 0, left: 0, -4\n(-4) + (0) = -4, left: -4\n(12) / (8) = 3/2, left: 3/2, 3, 3\n(12) - (8) = 4, left: 4, 3, 3\n(3) / (3) = 1, left: 1, 4\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((12 - 8) * (3 + 3))"}, {"input": "6 12 1 8\n", "output": "(6) + (8) = 14, left: 14, 12, 1\n(1) + (14) = 15, left: 15, 12\n(12) / (1) = 12, left: 12, 14\n(8) / (6) = 4/3, left: 4/3, 12, 1\n(6) - (8) = -2, left: -2, 12, 1\n(1) - (12) = -11, left: -11, -2\n(8) - (6) = 2, left: 2, 12, 1\n(12) - (2) = 10, left: 10, 1\n(12) * (2) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 * (8 - 6)) / 1)"}, {"input": "6 12 1 8\n", "output": "(12) / (8) = 3/2, left: 3/2, 6, 1\n(1) / (3/2) = 2/3, left: 2/3, 6\n(6) * (1) = 6, left: 6, 3/2\n(8) - (12) = -4, left: -4, 6, 1\n(6) / (1) = 6, left: 6, -4\n(1) / (-4) = -1/4, left: -1/4, 6\n(6) - (-1/4) = 25/4, left: 25/4\n(12) - (8) = 4, left: 4, 6, 1\n(1) / (4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 / (12 - 8)))"}, {"input": "6 12 1 8\n", "output": "(12) + (8) = 20, left: 20, 6, 1\n(6) * (20) = 120, left: 120, 1\n(6) * (1) = 6, left: 6, 20\n(20) + (6) = 26, left: 26\n(12) * (8) = 96, left: 96, 6, 1\n(6) - (96) = -90, left: -90, 1\n(1) - (-90) = 91, left: 91\n(12) - (8) = 4, left: 4, 6, 1\n(6) * (4) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * (12 - 8)) / 1)"}, {"input": "6 12 1 8\n", "output": "(8) - (1) = 7, left: 7, 6, 12\n(12) / (7) = 12/7, left: 12/7, 6\n(12) + (7) = 19, left: 19, 6\n(12) * (7) = 84, left: 84, 6\n(1) / (8) = 1/8, left: 1/8, 6, 12\n(12) / (6) = 2, left: 2, 1/8\n(12) * (1/8) = 3/2, left: 3/2, 6\n(1) * (8) = 8, left: 8, 6, 12\n(12) - (8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (12 - (1 * 8)))"}, {"input": "6 12 1 8\n", "output": "(1) - (6) = -5, left: -5, 12, 8\n(8) * (-5) = -40, left: -40, 12\n(8) - (-5) = 13, left: 13, 12\n(12) - (8) = 4, left: 4, -5\n(4) / (-5) = -4/5, left: -4/5\n(6) / (1) = 6, left: 6, 12, 8\n(12) * (6) = 72, left: 72, 8\n(8) - (6) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (8 - (6 / 1)))"}, {"input": "5 2 1 7\n", "output": "(2) - (7) = -5, left: -5, 5, 1\n(5) + (-5) = 0, left: 0, 1\n(2) + (7) = 9, left: 9, 5, 1\n(2) * (7) = 14, left: 14, 5, 1\n(5) + (14) = 19, left: 19, 1\n(5) + (1) = 6, left: 6, 14\n(5) * (1) = 5, left: 5, 14\n(7) - (2) = 5, left: 5, 5, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (7 - 2)) - 1)"}, {"input": "5 2 1 7\n", "output": "(7) / (2) = 7/2, left: 7/2, 5, 1\n(1) + (7/2) = 9/2, left: 9/2, 5\n(7/2) - (5) = -3/2, left: -3/2, 1\n(5) / (1) = 5, left: 5, 7/2\n(7/2) + (5) = 17/2, left: 17/2\n(7) - (2) = 5, left: 5, 5, 1\n(5) * (1) = 5, left: 5, 5\n(1) / (5) = 1/5, left: 1/5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (7 - 2)) - 1)"}, {"input": "5 2 1 7\n", "output": "(1) - (2) = -1, left: -1, 5, 7\n(5) * (-1) = -5, left: -5, 7\n(7) - (-5) = 12, left: 12\n(2) + (1) = 3, left: 3, 5, 7\n(7) + (3) = 10, left: 10, 5\n(1) / (2) = 1/2, left: 1/2, 5, 7\n(5) * (1/2) = 5/2, left: 5/2, 7\n(7) - (5/2) = 9/2, left: 9/2\n(5) + (7) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((5 + 7) / (1 / 2))"}, {"input": "5 2 1 7\n", "output": "(7) / (1) = 7, left: 7, 5, 2\n(7) - (2) = 5, left: 5, 5\n(2) - (7) = -5, left: -5, 5\n(7) / (2) = 7/2, left: 7/2, 5\n(5) + (7/2) = 17/2, left: 17/2\n(5) / (2) = 5/2, left: 5/2, 7\n(2) - (5) = -3, left: -3, 7\n(7) * (-3) = -21, left: -21\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (5 + (7 / 1)))"}, {"input": "5 2 1 7\n", "output": "(7) / (2) = 7/2, left: 7/2, 5, 1\n(1) - (7/2) = -5/2, left: -5/2, 5\n(1) + (7/2) = 9/2, left: 9/2, 5\n(2) + (7) = 9, left: 9, 5, 1\n(5) / (1) = 5, left: 5, 9\n(5) + (1) = 6, left: 6, 9\n(5) * (9) = 45, left: 45, 1\n(2) * (7) = 14, left: 14, 5, 1\n(5) * (1) = 5, left: 5, 14\n(5) - (1) = 4, left: 4, 14\n(7) - (2) = 5, left: 5, 5, 1\n(1) - (5) = -4, left: -4, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (7 - 2)) - 1)"}, {"input": "3 7 13 8\n", "output": "(13) / (7) = 13/7, left: 13/7, 3, 8\n(8) / (13/7) = 56/13, left: 56/13, 3\n(7) - (13) = -6, left: -6, 3, 8\n(-6) / (8) = -3/4, left: -3/4, 3\n(-6) - (3) = -9, left: -9, 8\n(13) - (7) = 6, left: 6, 3, 8\n(8) / (6) = 4/3, left: 4/3, 3\n(3) * (6) = 18, left: 18, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 7) - 3))"}, {"input": "3 7 13 8\n", "output": "(13) - (8) = 5, left: 5, 3, 7\n(7) * (5) = 35, left: 35, 3\n(13) / (8) = 13/8, left: 13/8, 3, 7\n(3) / (13/8) = 24/13, left: 24/13, 7\n(8) / (13) = 8/13, left: 8/13, 3, 7\n(7) - (8) = -1, left: -1, 3, 13\n(-1) - (3) = -4, left: -4, 13\n(7) + (8) = 15, left: 15, 3, 13\n(3) * (13) = 39, left: 39, 15\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (7 + 8))"}, {"input": "3 7 13 8\n", "output": "(8) / (3) = 8/3, left: 8/3, 7, 13\n(8/3) - (7) = -13/3, left: -13/3, 13\n(8) - (3) = 5, left: 5, 7, 13\n(7) * (8) = 56, left: 56, 3, 13\n(8) / (7) = 8/7, left: 8/7, 3, 13\n(3) * (13) = 39, left: 39, 8/7\n(7) + (8) = 15, left: 15, 3, 13\n(13) / (3) = 13/3, left: 13/3, 15\n(3) * (13) = 39, left: 39, 15\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (7 + 8))"}, {"input": "3 7 13 8\n", "output": "(7) - (13) = -6, left: -6, 3, 8\n(3) / (-6) = -1/2, left: -1/2, 8\n(-1/2) / (8) = -1/16, left: -1/16\n(7) + (13) = 20, left: 20, 3, 8\n(7) / (13) = 7/13, left: 7/13, 3, 8\n(13) - (7) = 6, left: 6, 3, 8\n(8) - (3) = 5, left: 5, 6\n(3) - (6) = -3, left: -3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 7) - 3))"}, {"input": "3 7 13 8\n", "output": "(8) - (3) = 5, left: 5, 7, 13\n(3) + (8) = 11, left: 11, 7, 13\n(8) / (3) = 8/3, left: 8/3, 7, 13\n(8) - (13) = -5, left: -5, 3, 7\n(3) / (-5) = -3/5, left: -3/5, 7\n(13) / (8) = 13/8, left: 13/8, 3, 7\n(3) + (13/8) = 37/8, left: 37/8, 7\n(3) * (13) = 39, left: 39, 7, 8\n(7) + (8) = 15, left: 15, 39\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (7 + 8))"}, {"input": "3 7 13 8\n", "output": "(3) - (8) = -5, left: -5, 7, 13\n(3) * (8) = 24, left: 24, 7, 13\n(3) / (8) = 3/8, left: 3/8, 7, 13\n(3/8) / (7) = 3/56, left: 3/56, 13\n(8) - (13) = -5, left: -5, 3, 7\n(13) + (8) = 21, left: 21, 3, 7\n(13) / (8) = 13/8, left: 13/8, 3, 7\n(8) / (13) = 8/13, left: 8/13, 3, 7\n(13) * (8) = 104, left: 104, 3, 7\n(13) - (8) = 5, left: 5, 3, 7\n(7) * (5) = 35, left: 35, 3\n(3) * (13) = 39, left: 39, 7, 8\n(7) + (8) = 15, left: 15, 39\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (7 + 8))"}, {"input": "12 12 6 8\n", "output": "(12) * (6) = 72, left: 72, 12, 8\n(12) / (8) = 3/2, left: 3/2, 72\n(72) + (3/2) = 147/2, left: 147/2\n(72) * (3/2) = 108, left: 108\n(12) * (8) = 96, left: 96, 72\n(96) - (72) = 24, left: 24\nreach 24! expression: ((12 * 8) - (12 * 6))"}, {"input": "12 12 6 8\n", "output": "(12) * (6) = 72, left: 72, 12, 8\n(72) / (12) = 6, left: 6, 8\n(8) / (12) = 2/3, left: 2/3, 72\n(12) * (8) = 96, left: 96, 72\n(96) / (72) = 4/3, left: 4/3\n(96) - (72) = 24, left: 24\nreach 24! expression: ((12 * 8) - (12 * 6))"}, {"input": "12 12 6 8\n", "output": "(12) * (8) = 96, left: 96, 12, 6\n(96) - (12) = 84, left: 84, 6\n(6) - (12) = -6, left: -6, 96\n(96) - (-6) = 102, left: 102\n(12) * (6) = 72, left: 72, 96\n(96) - (72) = 24, left: 24\nreach 24! expression: ((12 * 8) - (12 * 6))"}, {"input": "12 12 6 8\n", "output": "(12) - (6) = 6, left: 6, 12, 8\n(6) / (12) = 1/2, left: 1/2, 8\n(12) + (6) = 18, left: 18, 8\n(6) - (8) = -2, left: -2, 12\n(8) - (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (8 - (12 - 6)))"}, {"input": "12 12 6 8\n", "output": "(12) - (6) = 6, left: 6, 12, 8\n(6) - (12) = -6, left: -6, 8\n(-6) - (8) = -14, left: -14\n(12) * (6) = 72, left: 72, 8\n(6) / (12) = 1/2, left: 1/2, 8\n(12) / (6) = 2, left: 2, 8\n(12) + (6) = 18, left: 18, 8\n(6) / (8) = 3/4, left: 3/4, 12\n(8) - (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (8 - (12 - 6)))"}, {"input": "12 12 6 8\n", "output": "(8) - (6) = 2, left: 2, 12, 12\n(2) / (12) = 1/6, left: 1/6, 12\n(12) / (1/6) = 72, left: 72\n(12) * (12) = 144, left: 144, 2\n(12) / (12) = 1, left: 1, 2\n(12) * (2) = 24, left: 24, 12\n(12) * (24) = 288, left: 288\n(6) + (8) = 14, left: 14, 12, 12\n(14) - (12) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((6 + 8) - 12))"}, {"input": "12 12 6 8\n", "output": "(12) * (8) = 96, left: 96, 12, 6\n(12) + (96) = 108, left: 108, 6\n(12) / (96) = 1/8, left: 1/8, 6\n(96) / (12) = 8, left: 8, 6\n(12) - (6) = 6, left: 6, 96\n(6) / (96) = 1/16, left: 1/16\n(6) - (12) = -6, left: -6, 96\n(96) + (-6) = 90, left: 90\n(12) * (6) = 72, left: 72, 96\n(96) - (72) = 24, left: 24\nreach 24! expression: ((12 * 8) - (12 * 6))"}, {"input": "12 12 6 8\n", "output": "(12) / (6) = 2, left: 2, 12, 8\n(8) / (2) = 4, left: 4, 12\n(12) - (8) = 4, left: 4, 2\n(8) / (12) = 2/3, left: 2/3, 2\n(2) - (12) = -10, left: -10, 8\n(-10) - (8) = -18, left: -18\n(12) - (2) = 10, left: 10, 8\n(12) * (6) = 72, left: 72, 12, 8\n(12) * (8) = 96, left: 96, 72\n(96) - (72) = 24, left: 24\nreach 24! expression: ((12 * 8) - (12 * 6))"}, {"input": "12 12 6 8\n", "output": "(12) * (6) = 72, left: 72, 12, 8\n(12) / (8) = 3/2, left: 3/2, 72\n(3/2) - (72) = -141/2, left: -141/2\n(72) * (3/2) = 108, left: 108\n(3/2) / (72) = 1/48, left: 1/48\n(72) - (3/2) = 141/2, left: 141/2\n(12) * (8) = 96, left: 96, 72\n(96) / (72) = 4/3, left: 4/3\n(72) - (96) = -24, left: -24\n(96) - (72) = 24, left: 24\nreach 24! expression: ((12 * 8) - (12 * 6))"}, {"input": "5 4 9 12\n", "output": "(4) / (5) = 4/5, left: 4/5, 9, 12\n(12) / (9) = 4/3, left: 4/3, 4/5\n(4/5) - (9) = -41/5, left: -41/5, 12\n(12) + (4/5) = 64/5, left: 64/5, 9\n(12) / (4/5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (12 / (4 / 5)))"}, {"input": "5 4 9 12\n", "output": "(12) / (9) = 4/3, left: 4/3, 5, 4\n(9) * (12) = 108, left: 108, 5, 4\n(9) - (12) = -3, left: -3, 5, 4\n(12) - (9) = 3, left: 3, 5, 4\n(5) / (4) = 5/4, left: 5/4, 3\n(5) * (3) = 15, left: 15, 4\n(9) + (12) = 21, left: 21, 5, 4\n(5) * (12) = 60, left: 60, 4, 9\n(4) * (9) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((5 * 12) - (4 * 9))"}, {"input": "5 4 9 12\n", "output": "(9) + (12) = 21, left: 21, 5, 4\n(9) / (12) = 3/4, left: 3/4, 5, 4\n(5) - (4) = 1, left: 1, 3/4\n(5) + (4) = 9, left: 9, 3/4\n(9) - (12) = -3, left: -3, 5, 4\n(12) - (9) = 3, left: 3, 5, 4\n(5) * (4) = 20, left: 20, 3\n(4) / (12) = 1/3, left: 1/3, 5, 9\n(5) / (1/3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 / (4 / 12)))"}, {"input": "5 4 9 12\n", "output": "(4) - (5) = -1, left: -1, 9, 12\n(9) + (12) = 21, left: 21, -1\n(5) + (4) = 9, left: 9, 9, 12\n(9) / (12) = 3/4, left: 3/4, 9\n(9) - (3/4) = 33/4, left: 33/4\n(9) * (9) = 81, left: 81, 12\n(5) / (4) = 5/4, left: 5/4, 9, 12\n(9) + (5/4) = 41/4, left: 41/4, 12\n(12) * (5/4) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (12 * (5 / 4)))"}, {"input": "5 4 9 12\n", "output": "(5) + (4) = 9, left: 9, 9, 12\n(12) / (9) = 4/3, left: 4/3, 9\n(9) + (12) = 21, left: 21, 9\n(12) - (9) = 3, left: 3, 9\n(12) * (9) = 108, left: 108, 9\n(5) - (4) = 1, left: 1, 9, 12\n(9) - (1) = 8, left: 8, 12\n(4) / (5) = 4/5, left: 4/5, 9, 12\n(12) / (4/5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (12 / (4 / 5)))"}, {"input": "5 4 9 12\n", "output": "(4) / (5) = 4/5, left: 4/5, 9, 12\n(9) + (12) = 21, left: 21, 4/5\n(4/5) - (21) = -101/5, left: -101/5\n(9) - (12) = -3, left: -3, 4/5\n(-3) / (4/5) = -15/4, left: -15/4\n(4/5) - (9) = -41/5, left: -41/5, 12\n(12) / (-41/5) = -60/41, left: -60/41\n(9) - (4/5) = 41/5, left: 41/5, 12\n(12) / (4/5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (12 / (4 / 5)))"}, {"input": "3 7 13 5\n", "output": "(3) / (5) = 3/5, left: 3/5, 7, 13\n(13) * (5) = 65, left: 65, 3, 7\n(65) / (3) = 65/3, left: 65/3, 7\n(7) / (65/3) = 21/65, left: 21/65\n(7) + (65) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(3) * (5) = 15, left: 15, 7, 13\n(7) + (13) = 20, left: 20, 15\n(3) - (5) = -2, left: -2, 7, 13\n(-2) / (7) = -2/7, left: -2/7, 13\n(7) + (-2) = 5, left: 5, 13\n(3) * (7) = 21, left: 21, 13, 5\n(13) - (21) = -8, left: -8, 5\n(13) * (5) = 65, left: 65, 3, 7\n(7) + (65) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(13) / (7) = 13/7, left: 13/7, 3, 5\n(13/7) / (3) = 13/21, left: 13/21, 5\n(3) * (5) = 15, left: 15, 7, 13\n(5) / (13) = 5/13, left: 5/13, 3, 7\n(7) - (3) = 4, left: 4, 5/13\n(13) - (5) = 8, left: 8, 3, 7\n(13) + (5) = 18, left: 18, 3, 7\n(13) * (5) = 65, left: 65, 3, 7\n(7) + (65) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(7) - (5) = 2, left: 2, 3, 13\n(7) + (5) = 12, left: 12, 3, 13\n(3) / (5) = 3/5, left: 3/5, 7, 13\n(5) / (3) = 5/3, left: 5/3, 7, 13\n(3) - (5) = -2, left: -2, 7, 13\n(7) - (13) = -6, left: -6, 3, 5\n(3) - (5) = -2, left: -2, -6\n(13) * (5) = 65, left: 65, 3, 7\n(7) + (65) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(3) / (13) = 3/13, left: 3/13, 7, 5\n(7) - (13) = -6, left: -6, 3, 5\n(5) - (3) = 2, left: 2, -6\n(7) / (13) = 7/13, left: 7/13, 3, 5\n(3) / (5) = 3/5, left: 3/5, 7, 13\n(13) + (5) = 18, left: 18, 3, 7\n(7) + (18) = 25, left: 25, 3\n(13) * (5) = 65, left: 65, 3, 7\n(7) + (65) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(7) - (3) = 4, left: 4, 13, 5\n(7) / (3) = 7/3, left: 7/3, 13, 5\n(3) + (7) = 10, left: 10, 13, 5\n(13) / (5) = 13/5, left: 13/5, 10\n(10) / (13/5) = 50/13, left: 50/13\n(7) / (5) = 7/5, left: 7/5, 3, 13\n(7/5) - (3) = -8/5, left: -8/5, 13\n(13) * (5) = 65, left: 65, 3, 7\n(7) + (65) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(13) / (3) = 13/3, left: 13/3, 7, 5\n(3) - (13) = -10, left: -10, 7, 5\n(3) * (13) = 39, left: 39, 7, 5\n(5) * (39) = 195, left: 195, 7\n(3) / (5) = 3/5, left: 3/5, 7, 13\n(3) * (5) = 15, left: 15, 7, 13\n(3) / (7) = 3/7, left: 3/7, 13, 5\n(3/7) - (5) = -32/7, left: -32/7, 13\n(7) - (5) = 2, left: 2, 3, 13\n(7) + (13) = 20, left: 20, 3, 5\n(5) / (3) = 5/3, left: 5/3, 20\n(13) * (5) = 65, left: 65, 3, 7\n(7) + (65) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(7) - (5) = 2, left: 2, 3, 13\n(5) / (7) = 5/7, left: 5/7, 3, 13\n(7) + (5) = 12, left: 12, 3, 13\n(13) / (7) = 13/7, left: 13/7, 3, 5\n(7) + (13) = 20, left: 20, 3, 5\n(7) - (13) = -6, left: -6, 3, 5\n(7) * (13) = 91, left: 91, 3, 5\n(3) * (91) = 273, left: 273, 5\n(13) + (5) = 18, left: 18, 3, 7\n(3) + (7) = 10, left: 10, 18\n(10) - (18) = -8, left: -8\n(13) * (5) = 65, left: 65, 3, 7\n(7) + (65) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "2 9 3 10\n", "output": "(9) - (3) = 6, left: 6, 2, 10\n(2) / (6) = 1/3, left: 1/3, 10\n(3) / (9) = 1/3, left: 1/3, 2, 10\n(10) - (1/3) = 29/3, left: 29/3, 2\n(10) - (2) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((10 - 2) / (3 / 9))"}, {"input": "2 9 3 10\n", "output": "(2) + (10) = 12, left: 12, 9, 3\n(12) / (9) = 4/3, left: 4/3, 3\n(4/3) / (3) = 4/9, left: 4/9\n(9) + (12) = 21, left: 21, 3\n(3) * (21) = 63, left: 63\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (9 + (2 + 10)))"}, {"input": "2 9 3 10\n", "output": "(2) / (10) = 1/5, left: 1/5, 9, 3\n(3) / (1/5) = 15, left: 15, 9\n(9) / (15) = 3/5, left: 3/5\n(15) / (9) = 5/3, left: 5/3\n(9) - (15) = -6, left: -6\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (3 / (2 / 10)))"}, {"input": "2 9 3 10\n", "output": "(9) / (2) = 9/2, left: 9/2, 3, 10\n(3) * (9/2) = 27/2, left: 27/2, 10\n(10) + (9/2) = 29/2, left: 29/2, 3\n(2) + (9) = 11, left: 11, 3, 10\n(3) + (10) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((2 + 9) + (3 + 10))"}, {"input": "2 9 3 10\n", "output": "(9) - (3) = 6, left: 6, 2, 10\n(2) - (6) = -4, left: -4, 10\n(6) / (2) = 3, left: 3, 10\n(3) / (9) = 1/3, left: 1/3, 2, 10\n(10) * (1/3) = 10/3, left: 10/3, 2\n(1/3) / (2) = 1/6, left: 1/6, 10\n(2) + (1/3) = 7/3, left: 7/3, 10\n(7/3) - (10) = -23/3, left: -23/3\n(10) - (2) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((10 - 2) / (3 / 9))"}, {"input": "2 9 3 10\n", "output": "(9) / (2) = 9/2, left: 9/2, 3, 10\n(9/2) - (3) = 3/2, left: 3/2, 10\n(3) + (10) = 13, left: 13, 9/2\n(2) + (9) = 11, left: 11, 3, 10\n(10) - (3) = 7, left: 7, 11\n(3) - (10) = -7, left: -7, 11\n(10) / (3) = 10/3, left: 10/3, 11\n(11) * (10/3) = 110/3, left: 110/3\n(3) + (10) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((2 + 9) + (3 + 10))"}, {"input": "2 9 3 10\n", "output": "(9) - (10) = -1, left: -1, 2, 3\n(-1) - (3) = -4, left: -4, 2\n(3) * (-1) = -3, left: -3, 2\n(3) / (-1) = -3, left: -3, 2\n(3) / (2) = 3/2, left: 3/2, -1\n(3/2) - (-1) = 5/2, left: 5/2\n(2) * (-1) = -2, left: -2, 3\n(9) + (10) = 19, left: 19, 2, 3\n(2) + (19) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (2 + (9 + 10)))"}, {"input": "2 9 3 10\n", "output": "(2) / (10) = 1/5, left: 1/5, 9, 3\n(3) / (1/5) = 15, left: 15, 9\n(9) / (15) = 3/5, left: 3/5\n(15) / (9) = 5/3, left: 5/3\n(9) - (15) = -6, left: -6\n(15) - (9) = 6, left: 6\n(9) * (15) = 135, left: 135\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (3 / (2 / 10)))"}, {"input": "2 9 3 10\n", "output": "(2) + (10) = 12, left: 12, 9, 3\n(12) / (9) = 4/3, left: 4/3, 3\n(3) / (4/3) = 9/4, left: 9/4\n(4/3) / (3) = 4/9, left: 4/9\n(9) + (12) = 21, left: 21, 3\n(3) - (21) = -18, left: -18\n(3) * (21) = 63, left: 63\n(3) / (21) = 1/7, left: 1/7\n(21) / (3) = 7, left: 7\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (9 + (2 + 10)))"}, {"input": "2 9 3 10\n", "output": "(2) / (10) = 1/5, left: 1/5, 9, 3\n(3) / (1/5) = 15, left: 15, 9\n(9) / (15) = 3/5, left: 3/5\n(15) / (9) = 5/3, left: 5/3\n(9) - (15) = -6, left: -6\n(15) - (9) = 6, left: 6\n(9) * (15) = 135, left: 135\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (3 / (2 / 10)))"}, {"input": "2 9 3 10\n", "output": "(2) / (10) = 1/5, left: 1/5, 9, 3\n(3) / (1/5) = 15, left: 15, 9\n(9) / (15) = 3/5, left: 3/5\n(15) / (9) = 5/3, left: 5/3\n(9) - (15) = -6, left: -6\n(15) - (9) = 6, left: 6\n(9) * (15) = 135, left: 135\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (3 / (2 / 10)))"}, {"input": "8 12 4 9\n", "output": "(8) / (9) = 8/9, left: 8/9, 12, 4\n(12) - (8/9) = 100/9, left: 100/9, 4\n(12) + (4) = 16, left: 16, 8/9\n(8) * (9) = 72, left: 72, 12, 4\n(12) / (72) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / (12 / (8 * 9)))"}, {"input": "8 12 4 9\n", "output": "(4) / (12) = 1/3, left: 1/3, 8, 9\n(8) / (9) = 8/9, left: 8/9, 1/3\n(1/3) * (8/9) = 8/27, left: 8/27\n(8) + (9) = 17, left: 17, 1/3\n(8) * (9) = 72, left: 72, 1/3\n(1/3) * (72) = 24, left: 24\nreach 24! expression: ((4 / 12) * (8 * 9))"}, {"input": "8 12 4 9\n", "output": "(4) / (12) = 1/3, left: 1/3, 8, 9\n(8) / (9) = 8/9, left: 8/9, 1/3\n(8/9) - (1/3) = 5/9, left: 5/9\n(1/3) * (8/9) = 8/27, left: 8/27\n(1/3) / (8/9) = 3/8, left: 3/8\n(8/9) / (1/3) = 8/3, left: 8/3\n(8) + (9) = 17, left: 17, 1/3\n(17) / (1/3) = 51, left: 51\n(8) * (9) = 72, left: 72, 1/3\n(1/3) * (72) = 24, left: 24\nreach 24! expression: ((4 / 12) * (8 * 9))"}, {"input": "8 12 4 9\n", "output": "(8) / (9) = 8/9, left: 8/9, 12, 4\n(4) / (8/9) = 9/2, left: 9/2, 12\n(8/9) / (4) = 2/9, left: 2/9, 12\n(12) + (2/9) = 110/9, left: 110/9\n(12) * (4) = 48, left: 48, 8/9\n(12) + (4) = 16, left: 16, 8/9\n(8/9) * (16) = 128/9, left: 128/9\n(8) * (9) = 72, left: 72, 12, 4\n(12) / (72) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / (12 / (8 * 9)))"}, {"input": "8 12 4 9\n", "output": "(4) / (8) = 1/2, left: 1/2, 12, 9\n(1/2) - (9) = -17/2, left: -17/2, 12\n(12) + (1/2) = 25/2, left: 25/2, 9\n(4) - (8) = -4, left: -4, 12, 9\n(12) - (9) = 3, left: 3, -4\n(9) / (12) = 3/4, left: 3/4, -4\n(12) - (-4) = 16, left: 16, 9\n(8) * (4) = 32, left: 32, 12, 9\n(9) * (32) = 288, left: 288, 12\n(288) / (12) = 24, left: 24\nreach 24! expression: ((9 * (8 * 4)) / 12)"}, {"input": "8 12 4 9\n", "output": "(4) / (9) = 4/9, left: 4/9, 8, 12\n(8) * (12) = 96, left: 96, 4/9\n(9) / (4) = 9/4, left: 9/4, 8, 12\n(8) / (9/4) = 32/9, left: 32/9, 12\n(32/9) / (12) = 8/27, left: 8/27\n(8) - (12) = -4, left: -4, 9/4\n(4) + (9) = 13, left: 13, 8, 12\n(4) * (9) = 36, left: 36, 8, 12\n(12) / (8) = 3/2, left: 3/2, 36\n(36) / (3/2) = 24, left: 24\nreach 24! expression: ((4 * 9) / (12 / 8))"}, {"input": "8 12 4 9\n", "output": "(4) - (9) = -5, left: -5, 8, 12\n(8) - (-5) = 13, left: 13, 12\n(-5) / (8) = -5/8, left: -5/8, 12\n(12) - (8) = 4, left: 4, -5\n(8) / (12) = 2/3, left: 2/3, -5\n(12) + (-5) = 7, left: 7, 8\n(-5) - (12) = -17, left: -17, 8\n(4) * (9) = 36, left: 36, 8, 12\n(8) * (36) = 288, left: 288, 12\n(288) / (12) = 24, left: 24\nreach 24! expression: ((8 * (4 * 9)) / 12)"}, {"input": "2 13 11 1\n", "output": "(2) - (13) = -11, left: -11, 11, 1\n(13) / (11) = 13/11, left: 13/11, 2, 1\n(1) / (13/11) = 11/13, left: 11/13, 2\n(13) + (11) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (2 - 1))"}, {"input": "2 13 11 1\n", "output": "(11) / (1) = 11, left: 11, 2, 13\n(13) * (11) = 143, left: 143, 2, 1\n(143) / (1) = 143, left: 143, 2\n(13) + (11) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (2 - 1))"}, {"input": "2 13 11 1\n", "output": "(11) - (1) = 10, left: 10, 2, 13\n(11) * (1) = 11, left: 11, 2, 13\n(13) - (2) = 11, left: 11, 11\n(2) - (11) = -9, left: -9, 13\n(11) / (2) = 11/2, left: 11/2, 13, 1\n(2) / (11) = 2/11, left: 2/11, 13, 1\n(11) - (2) = 9, left: 9, 13, 1\n(1) - (2) = -1, left: -1, 13, 11\n(11) * (-1) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (11 * (1 - 2)))"}, {"input": "2 13 11 1\n", "output": "(2) / (11) = 2/11, left: 2/11, 13, 1\n(2) * (11) = 22, left: 22, 13, 1\n(11) / (1) = 11, left: 11, 2, 13\n(11) / (2) = 11/2, left: 11/2, 13\n(11) + (1) = 12, left: 12, 2, 13\n(13) / (2) = 13/2, left: 13/2, 11, 1\n(1) - (2) = -1, left: -1, 13, 11\n(11) / (13) = 11/13, left: 11/13, -1\n(11) / (-1) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (11 / (1 - 2)))"}, {"input": "2 13 11 1\n", "output": "(11) / (1) = 11, left: 11, 2, 13\n(13) * (11) = 143, left: 143, 2\n(2) + (11) = 13, left: 13, 13\n(1) - (11) = -10, left: -10, 2, 13\n(2) / (13) = 2/13, left: 2/13, -10\n(11) - (1) = 10, left: 10, 2, 13\n(2) - (10) = -8, left: -8, 13\n(13) + (11) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (2 - 1))"}, {"input": "2 13 11 1\n", "output": "(13) - (2) = 11, left: 11, 11, 1\n(2) * (13) = 26, left: 26, 11, 1\n(2) - (13) = -11, left: -11, 11, 1\n(13) / (2) = 13/2, left: 13/2, 11, 1\n(11) * (1) = 11, left: 11, 13/2\n(11) + (13/2) = 35/2, left: 35/2, 1\n(1) + (13/2) = 15/2, left: 15/2, 11\n(13) + (11) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (2 - 1))"}, {"input": "2 13 11 1\n", "output": "(11) - (1) = 10, left: 10, 2, 13\n(1) - (11) = -10, left: -10, 2, 13\n(2) * (13) = 26, left: 26, -10\n(11) + (1) = 12, left: 12, 2, 13\n(1) / (11) = 1/11, left: 1/11, 2, 13\n(2) * (11) = 22, left: 22, 13, 1\n(2) / (11) = 2/11, left: 2/11, 13, 1\n(13) + (11) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (2 - 1))"}, {"input": "5 5 5 6\n", "output": "(5) - (5) = 0, left: 0, 5, 6\n(6) / (5) = 6/5, left: 6/5, 0\n(5) + (5) = 10, left: 10, 5, 6\n(6) / (10) = 3/5, left: 3/5, 5\n(5) - (5) = 0, left: 0, 5, 6\n(0) - (5) = -5, left: -5, 6\n(6) / (5) = 6/5, left: 6/5, 0\n(5) / (5) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) - (5) = 0, left: 0, 5, 6\n(0) / (6) = 0, left: 0, 5\n(0) / (5) = 0, left: 0\n(6) * (0) = 0, left: 0, 5\n(0) - (6) = -6, left: -6, 5\n(-6) / (5) = -6/5, left: -6/5\n(5) / (5) = 1, left: 1, 5, 6\n(5) * (1) = 5, left: 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) - (5) = 0, left: 0, 5, 6\n(0) / (6) = 0, left: 0, 5\n(5) + (5) = 10, left: 10, 5, 6\n(10) - (5) = 5, left: 5, 6\n(6) + (10) = 16, left: 16, 5\n(16) - (5) = 11, left: 11\n(10) - (6) = 4, left: 4, 5\n(5) * (5) = 25, left: 25, 5, 6\n(5) - (6) = -1, left: -1, 25\n(25) + (-1) = 24, left: 24\nreach 24! expression: ((5 * 5) + (5 - 6))"}, {"input": "5 5 5 6\n", "output": "(5) / (5) = 1, left: 1, 5, 6\n(6) / (1) = 6, left: 6, 5\n(6) + (1) = 7, left: 7, 5\n(7) / (5) = 7/5, left: 7/5\n(6) * (1) = 6, left: 6, 5\n(6) - (1) = 5, left: 5, 5\n(5) + (1) = 6, left: 6, 6\n(6) / (6) = 1, left: 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) + (5) = 10, left: 10, 5, 6\n(6) * (10) = 60, left: 60, 5\n(10) / (6) = 5/3, left: 5/3, 5\n(5) - (5/3) = 10/3, left: 10/3\n(6) + (10) = 16, left: 16, 5\n(5) - (10) = -5, left: -5, 6\n(10) / (5) = 2, left: 2, 6\n(5) / (5) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) / (5) = 1, left: 1, 5, 6\n(1) / (6) = 1/6, left: 1/6, 5\n(6) / (1) = 6, left: 6, 5\n(5) * (6) = 30, left: 30\n(6) + (1) = 7, left: 7, 5\n(6) * (1) = 6, left: 6, 5\n(5) + (6) = 11, left: 11\n(6) - (1) = 5, left: 5, 5\n(5) * (5) = 25, left: 25\n(5) / (5) = 1, left: 1\n(5) + (1) = 6, left: 6, 6\n(5) * (1) = 5, left: 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) - (5) = 0, left: 0, 5, 6\n(6) + (0) = 6, left: 6, 5\n(5) + (0) = 5, left: 5, 6\n(5) * (0) = 0, left: 0, 6\n(6) + (0) = 6, left: 6\n(5) + (5) = 10, left: 10, 5, 6\n(10) - (5) = 5, left: 5, 6\n(10) / (5) = 2, left: 2, 6\n(5) - (5) = 0, left: 0, 5, 6\n(6) / (5) = 6/5, left: 6/5, 0\n(0) + (6/5) = 6/5, left: 6/5\n(5) / (5) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) - (5) = 0, left: 0, 5, 6\n(6) * (0) = 0, left: 0, 5\n(0) - (5) = -5, left: -5\n(5) + (6) = 11, left: 11, 0\n(5) - (6) = -1, left: -1, 0\n(5) * (0) = 0, left: 0, 6\n(5) - (0) = 5, left: 5, 6\n(5) / (5) = 1, left: 1, 5, 6\n(5) / (1) = 5, left: 5, 6\n(6) - (5) = 1, left: 1\n(1) / (5) = 1/5, left: 1/5, 6\n(6) + (1/5) = 31/5, left: 31/5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "1 12 8 5\n", "output": "(8) + (5) = 13, left: 13, 1, 12\n(1) + (13) = 14, left: 14, 12\n(12) / (14) = 6/7, left: 6/7\n(12) + (14) = 26, left: 26\n(13) - (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((8 + 5) - 1))"}, {"input": "1 12 8 5\n", "output": "(5) - (1) = 4, left: 4, 12, 8\n(8) - (12) = -4, left: -4, 4\n(-4) - (4) = -8, left: -8\n(4) * (-4) = -16, left: -16\n(12) * (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((12 * 8) / (5 - 1))"}, {"input": "1 12 8 5\n", "output": "(8) - (5) = 3, left: 3, 1, 12\n(1) / (3) = 1/3, left: 1/3, 12\n(1/3) / (12) = 1/36, left: 1/36\n(1) + (3) = 4, left: 4, 12\n(3) / (1) = 3, left: 3, 12\n(1) * (3) = 3, left: 3, 12\n(12) / (3) = 4, left: 4\n(3) - (1) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((8 - 5) - 1))"}, {"input": "1 12 8 5\n", "output": "(1) * (12) = 12, left: 12, 8, 5\n(8) / (12) = 2/3, left: 2/3, 5\n(5) - (2/3) = 13/3, left: 13/3\n(5) + (12) = 17, left: 17, 8\n(12) - (5) = 7, left: 7, 8\n(12) / (5) = 12/5, left: 12/5, 8\n(12/5) - (8) = -28/5, left: -28/5\n(1) - (12) = -11, left: -11, 8, 5\n(5) - (-11) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (5 - (1 - 12)))"}, {"input": "1 12 8 5\n", "output": "(8) + (5) = 13, left: 13, 1, 12\n(1) + (13) = 14, left: 14, 12\n(12) * (14) = 168, left: 168\n(12) / (14) = 6/7, left: 6/7\n(12) + (14) = 26, left: 26\n(12) - (14) = -2, left: -2\n(14) - (12) = 2, left: 2\n(13) - (1) = 12, left: 12, 12\n(12) - (12) = 0, left: 0\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((8 + 5) - 1))"}, {"input": "1 12 8 5\n", "output": "(12) / (5) = 12/5, left: 12/5, 1, 8\n(1) + (8) = 9, left: 9, 12/5\n(8) - (1) = 7, left: 7, 12/5\n(8) * (12/5) = 96/5, left: 96/5, 1\n(8) / (12/5) = 10/3, left: 10/3, 1\n(1) + (10/3) = 13/3, left: 13/3\n(12/5) - (1) = 7/5, left: 7/5, 8\n(12) + (5) = 17, left: 17, 1, 8\n(8) + (17) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((8 + (12 + 5)) - 1)"}, {"input": "1 12 8 5\n", "output": "(5) - (1) = 4, left: 4, 12, 8\n(8) - (12) = -4, left: -4, 4\n(-4) / (4) = -1, left: -1\n(4) - (-4) = 8, left: 8\n(-4) - (4) = -8, left: -8\n(4) + (-4) = 0, left: 0\n(4) * (-4) = -16, left: -16\n(4) / (-4) = -1, left: -1\n(12) * (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((12 * 8) / (5 - 1))"}, {"input": "1 12 8 5\n", "output": "(8) + (5) = 13, left: 13, 1, 12\n(1) + (13) = 14, left: 14, 12\n(12) * (14) = 168, left: 168\n(12) / (14) = 6/7, left: 6/7\n(12) + (14) = 26, left: 26\n(12) - (14) = -2, left: -2\n(14) - (12) = 2, left: 2\n(14) / (12) = 7/6, left: 7/6\n(13) - (1) = 12, left: 12, 12\n(12) - (12) = 0, left: 0\n(12) - (12) = 0, left: 0\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((8 + 5) - 1))"}, {"input": "1 12 8 5\n", "output": "(5) - (1) = 4, left: 4, 12, 8\n(8) - (12) = -4, left: -4, 4\n(-4) / (4) = -1, left: -1\n(4) - (-4) = 8, left: 8\n(-4) - (4) = -8, left: -8\n(4) + (-4) = 0, left: 0\n(4) * (-4) = -16, left: -16\n(4) / (-4) = -1, left: -1\n(12) * (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((12 * 8) / (5 - 1))"}, {"input": "1 12 8 5\n", "output": "(8) + (5) = 13, left: 13, 1, 12\n(1) + (13) = 14, left: 14, 12\n(12) * (14) = 168, left: 168\n(12) / (14) = 6/7, left: 6/7\n(12) + (14) = 26, left: 26\n(12) - (14) = -2, left: -2\n(14) - (12) = 2, left: 2\n(14) / (12) = 7/6, left: 7/6\n(13) - (1) = 12, left: 12, 12\n(12) - (12) = 0, left: 0\n(12) - (12) = 0, left: 0\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((8 + 5) - 1))"}, {"input": "1 12 8 5\n", "output": "(5) - (1) = 4, left: 4, 12, 8\n(8) - (12) = -4, left: -4, 4\n(-4) / (4) = -1, left: -1\n(4) - (-4) = 8, left: 8\n(-4) - (4) = -8, left: -8\n(4) + (-4) = 0, left: 0\n(4) * (-4) = -16, left: -16\n(4) / (-4) = -1, left: -1\n(12) * (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((12 * 8) / (5 - 1))"}, {"input": "3 1 12 9\n", "output": "(3) + (9) = 12, left: 12, 1, 12\n(1) + (12) = 13, left: 13, 12\n(13) - (12) = 1, left: 1\n(12) - (1) = 11, left: 11, 12\n(1) * (12) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((3 + 9) + (1 * 12))"}, {"input": "3 1 12 9\n", "output": "(9) / (3) = 3, left: 3, 1, 12\n(1) + (12) = 13, left: 13, 3\n(1) - (12) = -11, left: -11, 3\n(1) / (12) = 1/12, left: 1/12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 / 3) - 1))"}, {"input": "3 1 12 9\n", "output": "(9) / (3) = 3, left: 3, 1, 12\n(1) + (12) = 13, left: 13, 3\n(3) / (13) = 3/13, left: 3/13\n(12) / (1) = 12, left: 12, 3\n(12) - (1) = 11, left: 11, 3\n(3) + (11) = 14, left: 14\n(3) / (11) = 3/11, left: 3/11\n(1) / (12) = 1/12, left: 1/12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 / 3) - 1))"}, {"input": "3 1 12 9\n", "output": "(3) + (9) = 12, left: 12, 1, 12\n(1) + (12) = 13, left: 13, 12\n(13) / (12) = 13/12, left: 13/12\n(13) - (12) = 1, left: 1\n(12) * (13) = 156, left: 156\n(12) - (1) = 11, left: 11, 12\n(11) - (12) = -1, left: -1\n(1) * (12) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: ((3 + 9) + (1 * 12))"}, {"input": "3 1 12 9\n", "output": "(3) - (9) = -6, left: -6, 1, 12\n(12) * (-6) = -72, left: -72, 1\n(12) + (-6) = 6, left: 6, 1\n(9) - (3) = 6, left: 6, 1, 12\n(1) * (12) = 12, left: 12, 6\n(3) / (9) = 1/3, left: 1/3, 1, 12\n(1) + (1/3) = 4/3, left: 4/3, 12\n(9) / (3) = 3, left: 3, 1, 12\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 / 3) - 1))"}, {"input": "3 1 12 9\n", "output": "(12) / (1) = 12, left: 12, 3, 9\n(3) / (12) = 1/4, left: 1/4, 9\n(1/4) / (9) = 1/36, left: 1/36\n(9) - (1/4) = 35/4, left: 35/4\n(12) - (3) = 9, left: 9, 9\n(9) + (9) = 18, left: 18\n(3) + (12) = 15, left: 15, 9\n(15) - (9) = 6, left: 6\n(9) - (15) = -6, left: -6\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (3 + (12 / 1)))"}, {"input": "3 1 12 9\n", "output": "(3) - (1) = 2, left: 2, 12, 9\n(2) / (12) = 1/6, left: 1/6, 9\n(9) / (1/6) = 54, left: 54\n(9) - (2) = 7, left: 7, 12\n(2) - (9) = -7, left: -7, 12\n(12) * (-7) = -84, left: -84\n(3) / (1) = 3, left: 3, 12, 9\n(3) / (9) = 1/3, left: 1/3, 12\n(9) + (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (3 / 1)))"}, {"input": "5 3 4 10\n", "output": "(4) / (3) = 4/3, left: 4/3, 5, 10\n(10) * (4/3) = 40/3, left: 40/3, 5\n(3) * (4) = 12, left: 12, 5, 10\n(10) + (12) = 22, left: 22, 5\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (3 * 4)) / 5)"}, {"input": "5 3 4 10\n", "output": "(4) / (5) = 4/5, left: 4/5, 3, 10\n(4/5) - (3) = -11/5, left: -11/5, 10\n(10) + (-11/5) = 39/5, left: 39/5\n(-11/5) / (10) = -11/50, left: -11/50\n(3) * (4/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 * (4 / 5)))"}, {"input": "5 3 4 10\n", "output": "(3) - (10) = -7, left: -7, 5, 4\n(3) + (10) = 13, left: 13, 5, 4\n(5) - (13) = -8, left: -8, 4\n(5) + (13) = 18, left: 18, 4\n(18) / (4) = 9/2, left: 9/2\n(10) / (3) = 10/3, left: 10/3, 5, 4\n(5) - (10/3) = 5/3, left: 5/3, 4\n(3) * (10) = 30, left: 30, 5, 4\n(4) * (30) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((4 * (3 * 10)) / 5)"}, {"input": "5 3 4 10\n", "output": "(4) / (3) = 4/3, left: 4/3, 5, 10\n(4/3) / (5) = 4/15, left: 4/15, 10\n(10) + (4/3) = 34/3, left: 34/3, 5\n(10) / (4/3) = 15/2, left: 15/2, 5\n(3) - (4) = -1, left: -1, 5, 10\n(10) / (-1) = -10, left: -10, 5\n(-1) - (10) = -11, left: -11, 5\n(3) * (4) = 12, left: 12, 5, 10\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (3 * 4)) / 5)"}, {"input": "5 3 4 10\n", "output": "(5) * (10) = 50, left: 50, 3, 4\n(3) + (50) = 53, left: 53, 4\n(50) - (3) = 47, left: 47, 4\n(3) / (4) = 3/4, left: 3/4, 50\n(4) + (50) = 54, left: 54, 3\n(50) - (4) = 46, left: 46, 3\n(5) + (10) = 15, left: 15, 3, 4\n(5) / (10) = 1/2, left: 1/2, 3, 4\n(1/2) / (3) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / ((5 / 10) / 3))"}, {"input": "5 3 4 10\n", "output": "(4) / (5) = 4/5, left: 4/5, 3, 10\n(4/5) - (3) = -11/5, left: -11/5, 10\n(10) - (-11/5) = 61/5, left: 61/5\n(10) * (-11/5) = -22, left: -22\n(10) + (-11/5) = 39/5, left: 39/5\n(-11/5) / (10) = -11/50, left: -11/50\n(10) / (-11/5) = -50/11, left: -50/11\n(-11/5) - (10) = -61/5, left: -61/5\n(3) * (4/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 * (4 / 5)))"}, {"input": "5 3 4 10\n", "output": "(4) - (5) = -1, left: -1, 3, 10\n(3) / (-1) = -3, left: -3, 10\n(10) * (-3) = -30, left: -30\n(-1) / (3) = -1/3, left: -1/3, 10\n(3) / (10) = 3/10, left: 3/10, -1\n(5) / (4) = 5/4, left: 5/4, 3, 10\n(3) + (10) = 13, left: 13, 5/4\n(5/4) * (13) = 65/4, left: 65/4\n(3) * (10) = 30, left: 30, 5/4\n(30) / (5/4) = 24, left: 24\nreach 24! expression: ((3 * 10) / (5 / 4))"}, {"input": "5 3 4 10\n", "output": "(4) / (5) = 4/5, left: 4/5, 3, 10\n(4/5) - (3) = -11/5, left: -11/5, 10\n(10) - (-11/5) = 61/5, left: 61/5\n(10) * (-11/5) = -22, left: -22\n(10) + (-11/5) = 39/5, left: 39/5\n(-11/5) / (10) = -11/50, left: -11/50\n(10) / (-11/5) = -50/11, left: -50/11\n(-11/5) - (10) = -61/5, left: -61/5\n(3) * (4/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 * (4 / 5)))"}, {"input": "5 3 4 10\n", "output": "(4) / (5) = 4/5, left: 4/5, 3, 10\n(4/5) - (3) = -11/5, left: -11/5, 10\n(10) - (-11/5) = 61/5, left: 61/5\n(10) * (-11/5) = -22, left: -22\n(10) + (-11/5) = 39/5, left: 39/5\n(-11/5) / (10) = -11/50, left: -11/50\n(10) / (-11/5) = -50/11, left: -50/11\n(-11/5) - (10) = -61/5, left: -61/5\n(3) * (4/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 * (4 / 5)))"}, {"input": "3 7 11 4\n", "output": "(3) + (4) = 7, left: 7, 7, 11\n(7) / (11) = 7/11, left: 7/11, 7\n(3) / (4) = 3/4, left: 3/4, 7, 11\n(11) + (3/4) = 47/4, left: 47/4, 7\n(7) + (11) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((7 + 11) / (3 / 4))"}, {"input": "3 7 11 4\n", "output": "(7) + (4) = 11, left: 11, 3, 11\n(3) + (11) = 14, left: 14, 11\n(7) / (4) = 7/4, left: 7/4, 3, 11\n(11) + (7/4) = 51/4, left: 51/4, 3\n(3) / (11) = 3/11, left: 3/11, 7/4\n(3/11) - (7/4) = -65/44, left: -65/44\n(4) - (7) = -3, left: -3, 3, 11\n(3) - (-3) = 6, left: 6, 11\n(11) + (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 + (4 - 7)))"}, {"input": "3 7 11 4\n", "output": "(7) - (11) = -4, left: -4, 3, 4\n(3) / (4) = 3/4, left: 3/4, -4\n(-4) * (3/4) = -3, left: -3\n(-4) / (3/4) = -16/3, left: -16/3\n(4) - (3) = 1, left: 1, -4\n(4) / (3) = 4/3, left: 4/3, -4\n(4) / (-4) = -1, left: -1, 3\n(3) * (-1) = -3, left: -3\n(4) - (-4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 - (7 - 11)))"}, {"input": "3 7 11 4\n", "output": "(3) + (4) = 7, left: 7, 7, 11\n(7) / (7) = 1, left: 1, 11\n(11) + (7) = 18, left: 18, 7\n(3) / (4) = 3/4, left: 3/4, 7, 11\n(11) * (3/4) = 33/4, left: 33/4, 7\n(3/4) - (7) = -25/4, left: -25/4, 11\n(11) - (7) = 4, left: 4, 3/4\n(7) + (11) = 18, left: 18, 3/4\n(3/4) + (18) = 75/4, left: 75/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((7 + 11) / (3 / 4))"}, {"input": "3 7 11 4\n", "output": "(11) / (7) = 11/7, left: 11/7, 3, 4\n(3) * (4) = 12, left: 12, 11/7\n(4) / (11/7) = 28/11, left: 28/11, 3\n(7) * (11) = 77, left: 77, 3, 4\n(3) / (4) = 3/4, left: 3/4, 77\n(3) + (4) = 7, left: 7, 77\n(77) + (7) = 84, left: 84\n(11) - (7) = 4, left: 4, 3, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (11 - 7)))"}, {"input": "3 7 11 4\n", "output": "(7) - (11) = -4, left: -4, 3, 4\n(-4) / (4) = -1, left: -1, 3\n(3) - (-1) = 4, left: 4\n(3) * (-1) = -3, left: -3\n(3) / (-1) = -3, left: -3\n(-1) - (3) = -4, left: -4\n(3) + (-1) = 2, left: 2\n(4) - (-4) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 - (7 - 11)))"}, {"input": "3 7 11 4\n", "output": "(7) - (11) = -4, left: -4, 3, 4\n(-4) / (4) = -1, left: -1, 3\n(3) - (-1) = 4, left: 4\n(3) * (-1) = -3, left: -3\n(3) / (-1) = -3, left: -3\n(-1) - (3) = -4, left: -4\n(3) + (-1) = 2, left: 2\n(-1) / (3) = -1/3, left: -1/3\n(4) - (-4) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) - (8) = -5, left: -5\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 - (7 - 11)))"}, {"input": "3 7 11 4\n", "output": "(7) - (11) = -4, left: -4, 3, 4\n(-4) / (4) = -1, left: -1, 3\n(3) - (-1) = 4, left: 4\n(3) * (-1) = -3, left: -3\n(3) / (-1) = -3, left: -3\n(-1) - (3) = -4, left: -4\n(3) + (-1) = 2, left: 2\n(-1) / (3) = -1/3, left: -1/3\n(4) - (-4) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) - (8) = -5, left: -5\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 - (7 - 11)))"}, {"input": "4 3 9 3\n", "output": "(3) / (9) = 1/3, left: 1/3, 4, 3\n(3) * (9) = 27, left: 27, 4, 3\n(4) - (27) = -23, left: -23, 3\n(3) / (4) = 3/4, left: 3/4, 27\n(3) + (9) = 12, left: 12, 4, 3\n(3) / (4) = 3/4, left: 3/4, 12\n(12) - (3/4) = 45/4, left: 45/4\n(4) / (3) = 4/3, left: 4/3, 12\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((3 + 9) + (4 * 3))"}, {"input": "4 3 9 3\n", "output": "(4) * (3) = 12, left: 12, 9, 3\n(9) / (12) = 3/4, left: 3/4, 3\n(3) * (3/4) = 9/4, left: 9/4\n(3/4) / (3) = 1/4, left: 1/4\n(12) - (9) = 3, left: 3, 3\n(3) + (3) = 6, left: 6\n(3) * (3) = 9, left: 9\n(9) + (12) = 21, left: 21, 3\n(21) - (3) = 18, left: 18\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (9 + (4 * 3)))"}, {"input": "4 3 9 3\n", "output": "(9) - (3) = 6, left: 6, 4, 3\n(3) / (6) = 1/2, left: 1/2, 4\n(1/2) - (4) = -7/2, left: -7/2\n(3) / (9) = 1/3, left: 1/3, 4, 3\n(4) * (1/3) = 4/3, left: 4/3, 3\n(4) / (3) = 4/3, left: 4/3, 1/3\n(3) / (4) = 3/4, left: 3/4, 1/3\n(3) + (9) = 12, left: 12, 4, 3\n(12) - (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 + 9) - 4))"}, {"input": "4 3 9 3\n", "output": "(3) - (3) = 0, left: 0, 4, 9\n(3) * (3) = 9, left: 9, 4, 9\n(3) / (3) = 1, left: 1, 4, 9\n(3) + (3) = 6, left: 6, 4, 9\n(3) / (3) = 1, left: 1, 4, 9\n(4) - (9) = -5, left: -5, 1\n(1) + (-5) = -4, left: -4\n(9) - (4) = 5, left: 5, 3, 3\n(3) + (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (3 + (9 - 4)))"}, {"input": "4 3 9 3\n", "output": "(3) / (9) = 1/3, left: 1/3, 4, 3\n(1/3) / (3) = 1/9, left: 1/9, 4\n(1/3) - (3) = -8/3, left: -8/3, 4\n(4) - (-8/3) = 20/3, left: 20/3\n(4) - (3) = 1, left: 1, 1/3\n(4) * (1/3) = 4/3, left: 4/3, 3\n(4) + (1/3) = 13/3, left: 13/3, 3\n(9) / (3) = 3, left: 3, 4, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 + (9 / 3)))"}, {"input": "4 3 9 3\n", "output": "(3) - (3) = 0, left: 0, 4, 9\n(3) - (3) = 0, left: 0, 4, 9\n(9) * (0) = 0, left: 0, 4\n(0) / (4) = 0, left: 0\n(3) * (3) = 9, left: 9, 4, 9\n(3) + (3) = 6, left: 6, 4, 9\n(6) / (4) = 3/2, left: 3/2, 9\n(4) * (6) = 24, left: 24, 9\n(3) / (3) = 1, left: 1, 4, 9\n(9) - (1) = 8, left: 8, 4\n(4) + (8) = 12, left: 12\n(9) - (4) = 5, left: 5, 3, 3\n(3) + (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (3 + (9 - 4)))"}, {"input": "5 11 6 3\n", "output": "(6) + (3) = 9, left: 9, 5, 11\n(5) * (11) = 55, left: 55, 9\n(5) - (11) = -6, left: -6, 9\n(11) / (5) = 11/5, left: 11/5, 9\n(9) - (11) = -2, left: -2, 5\n(5) / (9) = 5/9, left: 5/9, 11\n(5) - (9) = -4, left: -4, 11\n(6) * (3) = 18, left: 18, 5, 11\n(5) - (11) = -6, left: -6, 18\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((6 * 3) - (5 - 11))"}, {"input": "5 11 6 3\n", "output": "(5) / (3) = 5/3, left: 5/3, 11, 6\n(5/3) / (6) = 5/18, left: 5/18, 11\n(6) * (5/3) = 10, left: 10, 11\n(5) + (3) = 8, left: 8, 11, 6\n(8) - (6) = 2, left: 2, 11\n(11) - (2) = 9, left: 9\n(3) / (5) = 3/5, left: 3/5, 11, 6\n(5) * (3) = 15, left: 15, 11, 6\n(15) - (11) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((5 * 3) - 11))"}, {"input": "5 11 6 3\n", "output": "(5) - (6) = -1, left: -1, 11, 3\n(6) / (5) = 6/5, left: 6/5, 11, 3\n(3) - (6/5) = 9/5, left: 9/5, 11\n(6/5) / (3) = 2/5, left: 2/5, 11\n(5) * (6) = 30, left: 30, 11, 3\n(3) + (30) = 33, left: 33, 11\n(5) + (6) = 11, left: 11, 11, 3\n(5) * (3) = 15, left: 15, 11, 6\n(15) - (11) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((5 * 3) - 11))"}, {"input": "5 11 6 3\n", "output": "(6) - (3) = 3, left: 3, 5, 11\n(11) / (5) = 11/5, left: 11/5, 3\n(3) - (11/5) = 4/5, left: 4/5\n(3) / (6) = 1/2, left: 1/2, 5, 11\n(6) / (3) = 2, left: 2, 5, 11\n(11) * (2) = 22, left: 22, 5\n(5) / (2) = 5/2, left: 5/2, 11\n(6) * (3) = 18, left: 18, 5, 11\n(5) - (11) = -6, left: -6, 18\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((6 * 3) - (5 - 11))"}, {"input": "5 11 6 3\n", "output": "(3) - (5) = -2, left: -2, 11, 6\n(5) + (3) = 8, left: 8, 11, 6\n(11) + (6) = 17, left: 17, 8\n(3) / (5) = 3/5, left: 3/5, 11, 6\n(6) * (3/5) = 18/5, left: 18/5, 11\n(11) - (3/5) = 52/5, left: 52/5, 6\n(5) * (3) = 15, left: 15, 11, 6\n(6) * (15) = 90, left: 90, 11\n(15) - (11) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((5 * 3) - 11))"}, {"input": "12 13 4 8\n", "output": "(13) * (8) = 104, left: 104, 12, 4\n(13) / (8) = 13/8, left: 13/8, 12, 4\n(12) / (13/8) = 96/13, left: 96/13, 4\n(13) + (8) = 21, left: 21, 12, 4\n(12) / (4) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((13 + 8) + (12 / 4))"}, {"input": "12 13 4 8\n", "output": "(12) / (4) = 3, left: 3, 13, 8\n(13) / (8) = 13/8, left: 13/8, 3\n(3) * (13/8) = 39/8, left: 39/8\n(13) - (8) = 5, left: 5, 3\n(13) + (8) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((12 / 4) + (13 + 8))"}, {"input": "12 13 4 8\n", "output": "(12) / (13) = 12/13, left: 12/13, 4, 8\n(4) + (8) = 12, left: 12, 12/13\n(13) / (12) = 13/12, left: 13/12, 4, 8\n(12) - (13) = -1, left: -1, 4, 8\n(4) + (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 + (12 - 13)))"}, {"input": "12 13 4 8\n", "output": "(12) / (13) = 12/13, left: 12/13, 4, 8\n(4) - (12/13) = 40/13, left: 40/13, 8\n(8) * (40/13) = 320/13, left: 320/13\n(8) / (4) = 2, left: 2, 12/13\n(13) / (12) = 13/12, left: 13/12, 4, 8\n(13/12) / (8) = 13/96, left: 13/96, 4\n(12) + (13) = 25, left: 25, 4, 8\n(12) - (13) = -1, left: -1, 4, 8\n(4) + (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 + (12 - 13)))"}, {"input": "12 13 4 8\n", "output": "(4) * (8) = 32, left: 32, 12, 13\n(8) / (4) = 2, left: 2, 12, 13\n(4) / (8) = 1/2, left: 1/2, 12, 13\n(1/2) - (13) = -25/2, left: -25/2, 12\n(8) - (4) = 4, left: 4, 12, 13\n(12) * (4) = 48, left: 48, 13\n(4) + (8) = 12, left: 12, 12, 13\n(12) - (13) = -1, left: -1, 4, 8\n(4) + (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 + (12 - 13)))"}, {"input": "12 13 4 8\n", "output": "(12) / (4) = 3, left: 3, 13, 8\n(13) * (8) = 104, left: 104, 3\n(3) + (104) = 107, left: 107\n(3) / (104) = 3/104, left: 3/104\n(8) / (13) = 8/13, left: 8/13, 3\n(13) / (8) = 13/8, left: 13/8, 3\n(13) - (8) = 5, left: 5, 3\n(3) - (5) = -2, left: -2\n(13) + (8) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((12 / 4) + (13 + 8))"}, {"input": "12 13 4 8\n", "output": "(8) / (13) = 8/13, left: 8/13, 12, 4\n(13) - (8) = 5, left: 5, 12, 4\n(5) - (4) = 1, left: 1, 12\n(13) * (8) = 104, left: 104, 12, 4\n(12) * (104) = 1248, left: 1248, 4\n(13) / (8) = 13/8, left: 13/8, 12, 4\n(4) / (13/8) = 32/13, left: 32/13, 12\n(13) + (8) = 21, left: 21, 12, 4\n(12) / (4) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((13 + 8) + (12 / 4))"}, {"input": "12 13 4 8\n", "output": "(12) * (8) = 96, left: 96, 13, 4\n(4) + (96) = 100, left: 100, 13\n(12) - (8) = 4, left: 4, 13, 4\n(4) / (13) = 4/13, left: 4/13, 4\n(8) / (12) = 2/3, left: 2/3, 13, 4\n(4) / (13) = 4/13, left: 4/13, 12, 8\n(4/13) / (12) = 1/39, left: 1/39, 8\n(13) - (4) = 9, left: 9, 12, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (12 - (13 - 4)))"}, {"input": "9 2 11 9\n", "output": "(9) / (11) = 9/11, left: 9/11, 9, 2\n(9) - (9/11) = 90/11, left: 90/11, 2\n(9) * (9/11) = 81/11, left: 81/11, 2\n(11) - (9) = 2, left: 2, 9, 2\n(9) * (2) = 18, left: 18, 2\n(9) - (11) = -2, left: -2, 9, 2\n(9) / (9) = 1, left: 1, 2, 11\n(11) - (2) = 9, left: 9, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(9) - (11) = -2, left: -2, 2, 9\n(9) + (11) = 20, left: 20, 2, 9\n(2) * (11) = 22, left: 22, 9, 9\n(22) / (9) = 22/9, left: 22/9, 9\n(9) + (22) = 31, left: 31, 9\n(11) / (2) = 11/2, left: 11/2, 9, 9\n(9) * (11/2) = 99/2, left: 99/2, 9\n(9) / (9) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(9) / (11) = 9/11, left: 9/11, 2, 9\n(2) + (9/11) = 31/11, left: 31/11, 9\n(9) + (11) = 20, left: 20, 2, 9\n(9) / (2) = 9/2, left: 9/2, 9, 11\n(9/2) - (9) = -9/2, left: -9/2, 11\n(11) * (-9/2) = -99/2, left: -99/2\n(9) - (2) = 7, left: 7, 11, 9\n(9) / (9) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(2) + (11) = 13, left: 13, 9, 9\n(2) * (11) = 22, left: 22, 9, 9\n(2) / (9) = 2/9, left: 2/9, 9, 11\n(11) - (9) = 2, left: 2, 9, 2\n(2) - (9) = -7, left: -7, 2\n(11) + (9) = 20, left: 20, 9, 2\n(9) - (11) = -2, left: -2, 9, 2\n(9) / (9) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(9) / (9) = 1, left: 1, 2, 11\n(2) + (1) = 3, left: 3, 11\n(2) - (11) = -9, left: -9, 1\n(11) - (2) = 9, left: 9, 1\n(11) * (1) = 11, left: 11, 2\n(11) - (2) = 9, left: 9\n(1) - (11) = -10, left: -10, 2\n(-10) / (2) = -5, left: -5\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(2) - (11) = -9, left: -9, 9, 9\n(11) / (2) = 11/2, left: 11/2, 9, 9\n(11) - (2) = 9, left: 9, 9, 9\n(9) - (9) = 0, left: 0, 9\n(2) - (9) = -7, left: -7, 9, 11\n(11) - (9) = 2, left: 2, -7\n(9) / (2) = 9/2, left: 9/2, 9, 11\n(11) - (9/2) = 13/2, left: 13/2, 9\n(9) / (11) = 9/11, left: 9/11, 9, 2\n(11) - (9) = 2, left: 2, 9, 2\n(2) / (2) = 1, left: 1, 9\n(9) / (9) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(9) + (11) = 20, left: 20, 2, 9\n(9) - (11) = -2, left: -2, 2, 9\n(2) * (9) = 18, left: 18, 9, 11\n(18) / (11) = 18/11, left: 18/11, 9\n(9) / (2) = 9/2, left: 9/2, 9, 11\n(9) * (2) = 18, left: 18, 11, 9\n(9) / (2) = 9/2, left: 9/2, 11, 9\n(2) / (9) = 2/9, left: 2/9, 11, 9\n(2) - (9) = -7, left: -7, 11, 9\n(11) * (9) = 99, left: 99, 9, 2\n(11) / (9) = 11/9, left: 11/9, 9, 2\n(9) / (9) = 1, left: 1, 2, 11\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 8 2\n", "output": "(2) / (9) = 2/9, left: 2/9, 8, 2\n(9) / (2) = 9/2, left: 9/2, 8, 2\n(2) + (9/2) = 13/2, left: 13/2, 8\n(2) - (9) = -7, left: -7, 8, 2\n(-7) / (8) = -7/8, left: -7/8, 2\n(8) / (-7) = -8/7, left: -8/7, 2\n(9) * (2) = 18, left: 18, 8, 2\n(2) * (18) = 36, left: 36, 8\n(2) - (18) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (2 - (9 * 2)))"}, {"input": "9 2 8 2\n", "output": "(9) + (2) = 11, left: 11, 2, 8\n(8) - (11) = -3, left: -3, 2\n(2) - (8) = -6, left: -6, 11\n(2) + (11) = 13, left: 13, 8\n(13) / (8) = 13/8, left: 13/8\n(2) / (11) = 2/11, left: 2/11, 8\n(9) * (2) = 18, left: 18, 2, 8\n(8) * (18) = 144, left: 144, 2\n(8) + (18) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((8 + (9 * 2)) - 2)"}, {"input": "9 2 8 2\n", "output": "(2) / (2) = 1, left: 1, 9, 8\n(2) - (2) = 0, left: 0, 9, 8\n(8) + (0) = 8, left: 8, 9\n(2) + (2) = 4, left: 4, 9, 8\n(2) * (2) = 4, left: 4, 9, 8\n(2) - (8) = -6, left: -6, 9, 2\n(9) + (-6) = 3, left: 3, 2\n(-6) - (2) = -8, left: -8, 9\n(9) * (2) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((9 * 2) - (2 - 8))"}, {"input": "9 2 8 2\n", "output": "(9) + (8) = 17, left: 17, 2, 2\n(2) - (2) = 0, left: 0, 17\n(2) / (2) = 1, left: 1, 17\n(8) / (9) = 8/9, left: 8/9, 2, 2\n(2) * (8/9) = 16/9, left: 16/9, 2\n(2) - (2) = 0, left: 0, 8/9\n(8) - (2) = 6, left: 6, 9, 2\n(9) - (2) = 7, left: 7, 6\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((8 - 2) + (9 * 2))"}, {"input": "9 2 8 2\n", "output": "(8) - (2) = 6, left: 6, 9, 2\n(2) - (6) = -4, left: -4, 9\n(-4) / (9) = -4/9, left: -4/9\n(6) / (2) = 3, left: 3, 9\n(9) + (6) = 15, left: 15, 2\n(6) - (9) = -3, left: -3, 2\n(9) * (6) = 54, left: 54, 2\n(2) + (54) = 56, left: 56\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((8 - 2) + (9 * 2))"}, {"input": "9 2 8 2\n", "output": "(9) - (8) = 1, left: 1, 2, 2\n(2) * (1) = 2, left: 2, 2\n(9) + (8) = 17, left: 17, 2, 2\n(2) + (17) = 19, left: 19, 2\n(9) / (8) = 9/8, left: 9/8, 2, 2\n(9/8) - (2) = -7/8, left: -7/8, 2\n(9) * (8) = 72, left: 72, 2, 2\n(2) / (72) = 1/36, left: 1/36, 2\n(8) - (9) = -1, left: -1, 2, 2\n(-1) / (2) = -1/2, left: -1/2, 2\n(8) - (2) = 6, left: 6, 9, 2\n(9) * (6) = 54, left: 54, 2\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((8 - 2) + (9 * 2))"}, {"input": "9 2 8 2\n", "output": "(2) - (2) = 0, left: 0, 9, 8\n(9) - (8) = 1, left: 1, 0\n(8) - (9) = -1, left: -1, 0\n(2) / (2) = 1, left: 1, 9, 8\n(9) + (8) = 17, left: 17, 1\n(2) - (2) = 0, left: 0, 9, 8\n(0) - (9) = -9, left: -9, 8\n(2) * (2) = 4, left: 4, 9, 8\n(8) - (4) = 4, left: 4, 9\n(2) - (8) = -6, left: -6, 9, 2\n(9) / (-6) = -3/2, left: -3/2, 2\n(2) * (-6) = -12, left: -12, 9\n(9) * (2) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((9 * 2) - (2 - 8))"}, {"input": "5 9 5 8\n", "output": "(5) - (9) = -4, left: -4, 5, 8\n(9) + (5) = 14, left: 14, 5, 8\n(9) - (5) = 4, left: 4, 5, 8\n(9) * (5) = 45, left: 45, 5, 8\n(5) - (8) = -3, left: -3, 45\n(8) / (5) = 8/5, left: 8/5, 45\n(45) / (8) = 45/8, left: 45/8, 5\n(8) - (9) = -1, left: -1, 5, 5\n(5) * (5) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((8 - 9) + (5 * 5))"}, {"input": "5 9 5 8\n", "output": "(8) - (5) = 3, left: 3, 9, 5\n(9) + (3) = 12, left: 12, 5\n(12) / (5) = 12/5, left: 12/5\n(5) - (12) = -7, left: -7\n(9) - (3) = 6, left: 6, 5\n(6) / (5) = 6/5, left: 6/5\n(5) - (3) = 2, left: 2, 9\n(5) / (3) = 5/3, left: 5/3, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (8 - 5)))"}, {"input": "5 9 5 8\n", "output": "(5) * (8) = 40, left: 40, 5, 9\n(40) / (9) = 40/9, left: 40/9, 5\n(5) / (8) = 5/8, left: 5/8, 5, 9\n(5) + (9) = 14, left: 14, 5/8\n(8) / (5) = 8/5, left: 8/5, 5, 9\n(5) * (9) = 45, left: 45, 8/5\n(5) + (9) = 14, left: 14, 8/5\n(5) - (8) = -3, left: -3, 5, 9\n(5) * (-3) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 * (5 - 8)))"}, {"input": "5 9 5 8\n", "output": "(5) - (8) = -3, left: -3, 5, 9\n(5) / (9) = 5/9, left: 5/9, -3\n(-3) - (5/9) = -32/9, left: -32/9\n(9) - (5) = 4, left: 4, -3\n(9) / (5) = 9/5, left: 9/5, -3\n(9) - (-3) = 12, left: 12, 5\n(-3) - (5) = -8, left: -8, 9\n(5) * (-3) = -15, left: -15, 9\n(-15) / (9) = -5/3, left: -5/3\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 * (5 - 8)))"}, {"input": "5 9 5 8\n", "output": "(5) * (9) = 45, left: 45, 5, 8\n(45) - (5) = 40, left: 40, 8\n(9) - (5) = 4, left: 4, 5, 8\n(5) - (4) = 1, left: 1, 8\n(5) + (9) = 14, left: 14, 5, 8\n(5) / (5) = 1, left: 1, 9, 8\n(9) + (1) = 10, left: 10, 8\n(5) * (5) = 25, left: 25, 9, 8\n(8) + (25) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((8 + (5 * 5)) - 9)"}, {"input": "5 9 5 8\n", "output": "(5) / (9) = 5/9, left: 5/9, 5, 8\n(8) / (5/9) = 72/5, left: 72/5, 5\n(5) - (9) = -4, left: -4, 5, 8\n(5) * (-4) = -20, left: -20, 8\n(9) / (5) = 9/5, left: 9/5, 5, 8\n(9/5) / (8) = 9/40, left: 9/40, 5\n(8) / (9/5) = 40/9, left: 40/9, 5\n(5) * (9) = 45, left: 45, 5, 8\n(9) - (5) = 4, left: 4, 5, 8\n(5) + (9) = 14, left: 14, 5, 8\n(8) / (5) = 8/5, left: 8/5, 14\n(5) * (5) = 25, left: 25, 9, 8\n(8) + (25) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((8 + (5 * 5)) - 9)"}, {"input": "5 9 5 8\n", "output": "(5) - (9) = -4, left: -4, 5, 8\n(-4) / (5) = -4/5, left: -4/5, 8\n(9) / (5) = 9/5, left: 9/5, 5, 8\n(5) + (9/5) = 34/5, left: 34/5, 8\n(9) - (5) = 4, left: 4, 5, 8\n(5) - (8) = -3, left: -3, 4\n(4) * (-3) = -12, left: -12\n(9) * (5) = 45, left: 45, 5, 8\n(45) / (5) = 9, left: 9, 8\n(8) - (9) = -1, left: -1, 5, 5\n(-1) - (5) = -6, left: -6, 5\n(-1) / (5) = -1/5, left: -1/5, 5\n(5) * (5) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((8 - 9) + (5 * 5))"}, {"input": "13 3 10 7\n", "output": "(13) + (7) = 20, left: 20, 3, 10\n(3) + (20) = 23, left: 23, 10\n(7) - (13) = -6, left: -6, 3, 10\n(10) + (-6) = 4, left: 4, 3\n(3) * (10) = 30, left: 30, -6\n(-6) + (30) = 24, left: 24\nreach 24! expression: ((7 - 13) + (3 * 10))"}, {"input": "13 3 10 7\n", "output": "(13) * (10) = 130, left: 130, 3, 7\n(3) * (7) = 21, left: 21, 130\n(7) - (130) = -123, left: -123, 3\n(13) - (10) = 3, left: 3, 3, 7\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((13 - 10) + (3 * 7))"}, {"input": "13 3 10 7\n", "output": "(13) + (7) = 20, left: 20, 3, 10\n(3) * (10) = 30, left: 30, 20\n(10) - (3) = 7, left: 7, 20\n(20) - (3) = 17, left: 17, 10\n(10) * (17) = 170, left: 170\n(7) - (13) = -6, left: -6, 3, 10\n(10) * (-6) = -60, left: -60, 3\n(3) + (10) = 13, left: 13, -6\n(3) * (10) = 30, left: 30, -6\n(-6) + (30) = 24, left: 24\nreach 24! expression: ((7 - 13) + (3 * 10))"}, {"input": "13 3 10 7\n", "output": "(10) / (7) = 10/7, left: 10/7, 13, 3\n(10) * (7) = 70, left: 70, 13, 3\n(13) - (3) = 10, left: 10, 10, 7\n(10) / (7) = 10/7, left: 10/7, 10\n(13) / (3) = 13/3, left: 13/3, 10, 7\n(13/3) - (7) = -8/3, left: -8/3, 10\n(7) - (3) = 4, left: 4, 13, 10\n(3) * (7) = 21, left: 21, 13, 10\n(10) - (13) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((3 * 7) - (10 - 13))"}, {"input": "13 3 10 7\n", "output": "(13) + (3) = 16, left: 16, 10, 7\n(7) / (10) = 7/10, left: 7/10, 16\n(3) - (13) = -10, left: -10, 10, 7\n(13) * (3) = 39, left: 39, 10, 7\n(39) - (10) = 29, left: 29, 7\n(10) * (7) = 70, left: 70, 13, 3\n(10) - (7) = 3, left: 3, 13, 3\n(13) - (10) = 3, left: 3, 3, 7\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((13 - 10) + (3 * 7))"}, {"input": "13 3 10 7\n", "output": "(13) / (3) = 13/3, left: 13/3, 10, 7\n(13) - (3) = 10, left: 10, 10, 7\n(3) - (13) = -10, left: -10, 10, 7\n(10) * (-10) = -100, left: -100, 7\n(3) / (13) = 3/13, left: 3/13, 10, 7\n(10) + (7) = 17, left: 17, 3/13\n(3) - (10) = -7, left: -7, 13, 7\n(3) * (10) = 30, left: 30, 13, 7\n(7) - (13) = -6, left: -6, 30\n(30) + (-6) = 24, left: 24\nreach 24! expression: ((3 * 10) + (7 - 13))"}, {"input": "13 3 10 7\n", "output": "(13) * (10) = 130, left: 130, 3, 7\n(7) - (3) = 4, left: 4, 130\n(7) * (130) = 910, left: 910, 3\n(910) - (3) = 907, left: 907\n(130) - (7) = 123, left: 123, 3\n(13) - (10) = 3, left: 3, 3, 7\n(3) / (3) = 1, left: 1, 7\n(3) / (3) = 1, left: 1, 7\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((13 - 10) + (3 * 7))"}, {"input": "5 1 12 6\n", "output": "(1) / (12) = 1/12, left: 1/12, 5, 6\n(1/12) / (6) = 1/72, left: 1/72, 5\n(5) * (1/72) = 5/72, left: 5/72\n(1) + (12) = 13, left: 13, 5, 6\n(5) + (13) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (5 + (1 + 12)))"}, {"input": "5 1 12 6\n", "output": "(1) / (5) = 1/5, left: 1/5, 12, 6\n(1/5) / (12) = 1/60, left: 1/60, 6\n(6) + (1/5) = 31/5, left: 31/5, 12\n(5) + (1) = 6, left: 6, 12, 6\n(6) * (6) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((6 * (5 + 1)) - 12)"}, {"input": "5 1 12 6\n", "output": "(1) + (6) = 7, left: 7, 5, 12\n(5) / (7) = 5/7, left: 5/7, 12\n(12) - (5/7) = 79/7, left: 79/7\n(7) / (5) = 7/5, left: 7/5, 12\n(5) + (7) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (5 + (1 + 6)))"}, {"input": "5 1 12 6\n", "output": "(1) + (6) = 7, left: 7, 5, 12\n(5) / (7) = 5/7, left: 5/7, 12\n(12) - (5/7) = 79/7, left: 79/7\n(12) / (5/7) = 84/5, left: 84/5\n(12) * (5/7) = 60/7, left: 60/7\n(7) / (5) = 7/5, left: 7/5, 12\n(7/5) / (12) = 7/60, left: 7/60\n(12) + (7/5) = 67/5, left: 67/5\n(5) + (7) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (5 + (1 + 6)))"}, {"input": "5 1 12 6\n", "output": "(12) - (1) = 11, left: 11, 5, 6\n(5) + (6) = 11, left: 11, 11\n(11) * (11) = 121, left: 121\n(5) / (6) = 5/6, left: 5/6, 11\n(11) * (5/6) = 55/6, left: 55/6\n(5) * (11) = 55, left: 55, 6\n(1) + (12) = 13, left: 13, 5, 6\n(6) - (5) = 1, left: 1, 13\n(5) + (6) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((1 + 12) + (5 + 6))"}, {"input": "5 1 12 6\n", "output": "(1) / (12) = 1/12, left: 1/12, 5, 6\n(12) - (1) = 11, left: 11, 5, 6\n(5) * (6) = 30, left: 30, 11\n(5) - (11) = -6, left: -6, 6\n(1) * (12) = 12, left: 12, 5, 6\n(12) - (5) = 7, left: 7, 6\n(5) + (6) = 11, left: 11, 12\n(1) + (12) = 13, left: 13, 5, 6\n(5) + (13) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (5 + (1 + 12)))"}, {"input": "5 1 12 6\n", "output": "(5) * (1) = 5, left: 5, 12, 6\n(5) / (12) = 5/12, left: 5/12, 6\n(6) * (5/12) = 5/2, left: 5/2\n(5) / (6) = 5/6, left: 5/6, 12\n(1) / (5) = 1/5, left: 1/5, 12, 6\n(1/5) - (6) = -29/5, left: -29/5, 12\n(-29/5) - (12) = -89/5, left: -89/5\n(5) + (1) = 6, left: 6, 12, 6\n(6) * (6) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((6 * (5 + 1)) - 12)"}, {"input": "5 1 12 6\n", "output": "(6) / (12) = 1/2, left: 1/2, 5, 1\n(5) / (1/2) = 10, left: 10, 1\n(10) / (1) = 10, left: 10\n(1/2) / (1) = 1/2, left: 1/2, 5\n(12) / (6) = 2, left: 2, 5, 1\n(1) - (2) = -1, left: -1, 5\n(2) / (1) = 2, left: 2, 5\n(12) - (6) = 6, left: 6, 5, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((12 - 6) * (5 - 1))"}, {"input": "6 3 6 9\n", "output": "(9) - (3) = 6, left: 6, 6, 6\n(6) - (6) = 0, left: 0, 6\n(6) * (6) = 36, left: 36, 6\n(6) / (6) = 1, left: 1, 6\n(6) - (6) = 0, left: 0, 6\n(3) / (9) = 1/3, left: 1/3, 6, 6\n(6) / (6) = 1, left: 1, 1/3\n(6) + (6) = 12, left: 12, 1/3\n(6) / (1/3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 / (3 / 9)))"}, {"input": "6 3 6 9\n", "output": "(6) - (9) = -3, left: -3, 6, 3\n(6) / (9) = 2/3, left: 2/3, 6, 3\n(3) - (2/3) = 7/3, left: 7/3, 6\n(3) - (6) = -3, left: -3, 2/3\n(9) - (6) = 3, left: 3, 6, 3\n(6) / (3) = 2, left: 2, 3\n(6) - (3) = 3, left: 3, 3\n(6) + (9) = 15, left: 15, 6, 3\n(6) + (15) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (6 + (6 + 9)))"}, {"input": "6 3 6 9\n", "output": "(9) / (6) = 3/2, left: 3/2, 3, 6\n(6) / (3) = 2, left: 2, 3/2\n(3/2) / (2) = 3/4, left: 3/4\n(3) - (6) = -3, left: -3, 3/2\n(6) / (3/2) = 4, left: 4, 3\n(6) - (3/2) = 9/2, left: 9/2, 3\n(6) + (3/2) = 15/2, left: 15/2, 3\n(6) + (9) = 15, left: 15, 3, 6\n(3) + (15) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (3 + (6 + 9)))"}, {"input": "6 3 6 9\n", "output": "(6) - (9) = -3, left: -3, 6, 3\n(-3) / (3) = -1, left: -1, 6\n(6) / (9) = 2/3, left: 2/3, 6, 3\n(3) * (2/3) = 2, left: 2, 6\n(3) / (6) = 1/2, left: 1/2, 2/3\n(6) * (2/3) = 4, left: 4, 3\n(3) - (4) = -1, left: -1\n(6) / (2/3) = 9, left: 9, 3\n(9) - (6) = 3, left: 3, 6, 3\n(6) - (3) = 3, left: 3, 3\n(6) * (3) = 18, left: 18, 3\n(6) + (9) = 15, left: 15, 6, 3\n(6) + (15) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (6 + (6 + 9)))"}, {"input": "10 12 11 3\n", "output": "(12) + (3) = 15, left: 15, 10, 11\n(10) + (15) = 25, left: 25, 11\n(12) * (3) = 36, left: 36, 10, 11\n(10) + (3) = 13, left: 13, 12, 11\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "10 12 11 3\n", "output": "(11) + (3) = 14, left: 14, 10, 12\n(10) * (14) = 140, left: 140, 12\n(10) + (12) = 22, left: 22, 14\n(11) - (3) = 8, left: 8, 10, 12\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (11 - 3)))"}, {"input": "10 12 11 3\n", "output": "(10) * (3) = 30, left: 30, 12, 11\n(11) - (30) = -19, left: -19, 12\n(3) - (10) = -7, left: -7, 12, 11\n(10) + (3) = 13, left: 13, 12, 11\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "10 12 11 3\n", "output": "(10) * (3) = 30, left: 30, 12, 11\n(11) - (30) = -19, left: -19, 12\n(10) / (3) = 10/3, left: 10/3, 12, 11\n(12) - (11) = 1, left: 1, 10/3\n(3) / (10) = 3/10, left: 3/10, 12, 11\n(11) - (3/10) = 107/10, left: 107/10, 12\n(10) + (3) = 13, left: 13, 12, 11\n(12) * (11) = 132, left: 132, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "10 12 11 3\n", "output": "(11) + (3) = 14, left: 14, 10, 12\n(10) * (12) = 120, left: 120, 14\n(11) / (3) = 11/3, left: 11/3, 10, 12\n(10) * (11/3) = 110/3, left: 110/3, 12\n(12) + (110/3) = 146/3, left: 146/3\n(11) - (3) = 8, left: 8, 10, 12\n(10) / (12) = 5/6, left: 5/6, 8\n(5/6) / (8) = 5/48, left: 5/48\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (11 - 3)))"}, {"input": "10 12 11 3\n", "output": "(12) - (3) = 9, left: 9, 10, 11\n(12) + (3) = 15, left: 15, 10, 11\n(10) / (11) = 10/11, left: 10/11, 15\n(15) * (10/11) = 150/11, left: 150/11\n(12) * (3) = 36, left: 36, 10, 11\n(10) - (36) = -26, left: -26, 11\n(10) / (36) = 5/18, left: 5/18, 11\n(10) + (3) = 13, left: 13, 12, 11\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "10 12 11 3\n", "output": "(12) - (10) = 2, left: 2, 11, 3\n(10) * (12) = 120, left: 120, 11, 3\n(10) + (12) = 22, left: 22, 11, 3\n(3) - (11) = -8, left: -8, 22\n(22) * (-8) = -176, left: -176\n(3) - (10) = -7, left: -7, 12, 11\n(12) - (11) = 1, left: 1, -7\n(10) + (3) = 13, left: 13, 12, 11\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "12 10 7 10\n", "output": "(10) / (7) = 10/7, left: 10/7, 12, 10\n(10) - (10/7) = 60/7, left: 60/7, 12\n(7) - (10) = -3, left: -3, 12, 10\n(10) - (12) = -2, left: -2, 10, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (10 - 12)))"}, {"input": "12 10 7 10\n", "output": "(12) - (10) = 2, left: 2, 7, 10\n(2) - (10) = -8, left: -8, 7\n(10) - (2) = 8, left: 8, 7\n(7) - (8) = -1, left: -1\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (12 - 10)))"}, {"input": "12 10 7 10\n", "output": "(12) + (10) = 22, left: 22, 7, 10\n(7) / (22) = 7/22, left: 7/22, 10\n(10) / (12) = 5/6, left: 5/6, 7, 10\n(12) - (10) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (12 - 10)))"}, {"input": "12 10 7 10\n", "output": "(7) / (10) = 7/10, left: 7/10, 12, 10\n(12) * (10) = 120, left: 120, 7, 10\n(7) * (10) = 70, left: 70, 120\n(10) - (12) = -2, left: -2, 7, 10\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (10 - 12)))"}, {"input": "12 10 7 10\n", "output": "(12) + (7) = 19, left: 19, 10, 10\n(10) * (19) = 190, left: 190, 10\n(10) / (12) = 5/6, left: 5/6, 10, 7\n(12) - (10) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (12 - 10)))"}, {"input": "12 10 7 10\n", "output": "(10) - (7) = 3, left: 3, 12, 10\n(12) + (10) = 22, left: 22, 3\n(10) / (7) = 10/7, left: 10/7, 12, 10\n(10/7) - (12) = -74/7, left: -74/7, 10\n(10) * (7) = 70, left: 70, 12, 10\n(12) * (10) = 120, left: 120, 70\n(10) + (7) = 17, left: 17, 12, 10\n(10) - (12) = -2, left: -2, 7, 10\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (10 - 12)))"}, {"input": "12 10 7 10\n", "output": "(12) - (10) = 2, left: 2, 7, 10\n(2) / (10) = 1/5, left: 1/5, 7\n(7) - (1/5) = 34/5, left: 34/5\n(10) - (2) = 8, left: 8, 7\n(7) / (10) = 7/10, left: 7/10, 2\n(10) / (7) = 10/7, left: 10/7, 2\n(2) + (10/7) = 24/7, left: 24/7\n(7) - (10) = -3, left: -3, 2\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (12 - 10)))"}, {"input": "12 10 7 10\n", "output": "(7) * (10) = 70, left: 70, 12, 10\n(10) - (7) = 3, left: 3, 12, 10\n(12) - (3) = 9, left: 9, 10\n(10) * (3) = 30, left: 30, 12\n(7) + (10) = 17, left: 17, 12, 10\n(7) / (10) = 7/10, left: 7/10, 12, 10\n(10) - (12) = -2, left: -2, 10, 7\n(10) / (-2) = -5, left: -5, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (10 - 12)))"}, {"input": "12 10 7 10\n", "output": "(12) + (10) = 22, left: 22, 7, 10\n(10) - (7) = 3, left: 3, 22\n(22) - (10) = 12, left: 12, 7\n(10) / (12) = 5/6, left: 5/6, 7, 10\n(7) + (5/6) = 47/6, left: 47/6, 10\n(10) / (7) = 10/7, left: 10/7, 5/6\n(5/6) / (10/7) = 7/12, left: 7/12\n(12) - (10) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (12 - 10)))"}, {"input": "12 10 7 10\n", "output": "(12) / (7) = 12/7, left: 12/7, 10, 10\n(10) + (12/7) = 82/7, left: 82/7, 10\n(10) - (12/7) = 58/7, left: 58/7, 10\n(10) * (12/7) = 120/7, left: 120/7, 10\n(7) - (12) = -5, left: -5, 10, 10\n(12) * (7) = 84, left: 84, 10, 10\n(10) / (12) = 5/6, left: 5/6, 10, 7\n(12) - (10) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (12 - 10)))"}, {"input": "1 1 2 8\n", "output": "(1) * (8) = 8, left: 8, 1, 2\n(8) / (2) = 4, left: 4, 1\n(4) - (1) = 3, left: 3\n(2) / (8) = 1/4, left: 1/4, 1\n(2) - (8) = -6, left: -6, 1\n(2) / (1) = 2, left: 2, 8\n(8) * (2) = 16, left: 16\n(1) / (2) = 1/2, left: 1/2, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 * 8) * (1 + 2))"}, {"input": "1 1 2 8\n", "output": "(8) / (1) = 8, left: 8, 1, 2\n(2) * (8) = 16, left: 16, 1\n(2) / (8) = 1/4, left: 1/4, 1\n(1) * (2) = 2, left: 2, 8\n(8) / (2) = 4, left: 4\n(8) * (2) = 16, left: 16\n(1) - (2) = -1, left: -1, 8\n(2) - (1) = 1, left: 1, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((8 / 1) * (1 + 2))"}, {"input": "1 1 2 8\n", "output": "(2) / (1) = 2, left: 2, 1, 8\n(1) / (2) = 1/2, left: 1/2, 8\n(1/2) - (8) = -15/2, left: -15/2\n(8) - (1/2) = 15/2, left: 15/2\n(1) - (2) = -1, left: -1, 8\n(2) / (1) = 2, left: 2, 8\n(8) * (2) = 16, left: 16\n(2) / (8) = 1/4, left: 1/4\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (2 / 1)))"}, {"input": "1 1 2 8\n", "output": "(1) + (8) = 9, left: 9, 1, 2\n(2) / (9) = 2/9, left: 2/9, 1\n(9) - (1) = 8, left: 8, 2\n(1) / (9) = 1/9, left: 1/9, 2\n(1/9) - (2) = -17/9, left: -17/9\n(8) / (1) = 8, left: 8, 1, 2\n(1) - (8) = -7, left: -7, 2\n(2) - (-7) = 9, left: 9\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((8 / 1) * (1 + 2))"}, {"input": "1 1 2 8\n", "output": "(1) + (8) = 9, left: 9, 1, 2\n(1) / (2) = 1/2, left: 1/2, 9\n(2) * (9) = 18, left: 18, 1\n(18) / (1) = 18, left: 18\n(2) - (9) = -7, left: -7, 1\n(2) + (9) = 11, left: 11, 1\n(11) / (1) = 11, left: 11\n(9) - (1) = 8, left: 8, 2\n(2) / (8) = 1/4, left: 1/4\n(8) / (1) = 8, left: 8, 1, 2\n(1) * (8) = 8, left: 8, 2\n(1) / (8) = 1/8, left: 1/8, 2\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((8 / 1) * (1 + 2))"}, {"input": "6 2 9 4\n", "output": "(6) * (2) = 12, left: 12, 9, 4\n(9) + (4) = 13, left: 13, 12\n(12) + (13) = 25, left: 25\n(9) - (4) = 5, left: 5, 12\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (6 * 2))"}, {"input": "6 2 9 4\n", "output": "(4) - (2) = 2, left: 2, 6, 9\n(6) - (2) = 4, left: 4, 9\n(9) - (4) = 5, left: 5\n(6) + (2) = 8, left: 8, 9\n(6) * (9) = 54, left: 54, 2\n(54) - (2) = 52, left: 52\n(9) / (6) = 3/2, left: 3/2, 2\n(2) - (3/2) = 1/2, left: 1/2\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (4 - 2)))"}, {"input": "6 2 9 4\n", "output": "(6) / (2) = 3, left: 3, 9, 4\n(9) + (3) = 12, left: 12, 4\n(12) - (4) = 8, left: 8\n(3) / (9) = 1/3, left: 1/3, 4\n(4) + (1/3) = 13/3, left: 13/3\n(9) * (3) = 27, left: 27, 4\n(4) * (27) = 108, left: 108\n(4) / (27) = 4/27, left: 4/27\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (6 / 2)))"}, {"input": "6 2 9 4\n", "output": "(2) - (4) = -2, left: -2, 6, 9\n(9) - (6) = 3, left: 3, -2\n(3) / (-2) = -3/2, left: -3/2\n(6) + (9) = 15, left: 15, -2\n(-2) * (15) = -30, left: -30\n(-2) - (6) = -8, left: -8, 9\n(-2) / (6) = -1/3, left: -1/3, 9\n(-2) / (9) = -2/9, left: -2/9, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (2 - 4)))"}, {"input": "6 2 9 4\n", "output": "(6) - (9) = -3, left: -3, 2, 4\n(4) - (-3) = 7, left: 7, 2\n(9) / (6) = 3/2, left: 3/2, 2, 4\n(4) - (2) = 2, left: 2, 3/2\n(3/2) / (2) = 3/4, left: 3/4, 4\n(3/2) / (4) = 3/8, left: 3/8, 2\n(6) / (9) = 2/3, left: 2/3, 2, 4\n(9) - (6) = 3, left: 3, 2, 4\n(2) * (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((9 - 6) * (2 * 4))"}, {"input": "6 2 9 4\n", "output": "(6) * (2) = 12, left: 12, 9, 4\n(4) - (9) = -5, left: -5, 12\n(-5) / (12) = -5/12, left: -5/12\n(-5) - (12) = -17, left: -17\n(9) + (4) = 13, left: 13, 12\n(12) - (13) = -1, left: -1\n(9) - (4) = 5, left: 5, 12\n(12) / (5) = 12/5, left: 12/5\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (6 * 2))"}, {"input": "6 2 9 4\n", "output": "(2) - (4) = -2, left: -2, 6, 9\n(9) - (6) = 3, left: 3, -2\n(6) + (-2) = 4, left: 4, 9\n(6) / (-2) = -3, left: -3, 9\n(6) - (-2) = 8, left: 8, 9\n(8) / (9) = 8/9, left: 8/9\n(6) * (-2) = -12, left: -12, 9\n(-2) - (6) = -8, left: -8, 9\n(-8) / (9) = -8/9, left: -8/9\n(9) / (-2) = -9/2, left: -9/2, 6\n(-2) / (9) = -2/9, left: -2/9, 6\n(9) - (-2) = 11, left: 11, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (2 - 4)))"}, {"input": "8 10 8 8\n", "output": "(8) - (10) = -2, left: -2, 8, 8\n(8) + (-2) = 6, left: 6, 8\n(8) + (6) = 14, left: 14\n(8) - (6) = 2, left: 2\n(8) * (6) = 48, left: 48\n(8) / (-2) = -4, left: -4, 8\n(8) / (-4) = -2, left: -2\n(8) * (-2) = -16, left: -16, 8\n(-16) - (8) = -24, left: -24\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (8 - 10)))"}, {"input": "8 10 8 8\n", "output": "(8) - (8) = 0, left: 0, 10, 8\n(8) / (8) = 1, left: 1, 10, 8\n(8) + (1) = 9, left: 9, 10\n(10) + (9) = 19, left: 19\n(8) / (8) = 1, left: 1, 10, 8\n(8) / (10) = 4/5, left: 4/5, 8, 8\n(4/5) / (8) = 1/10, left: 1/10, 8\n(8) - (10) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (8 - 10)))"}, {"input": "8 10 8 8\n", "output": "(8) - (8) = 0, left: 0, 10, 8\n(8) / (8) = 1, left: 1, 10, 8\n(1) - (8) = -7, left: -7, 10\n(8) - (8) = 0, left: 0, 10, 8\n(0) / (8) = 0, left: 0, 10\n(10) / (8) = 5/4, left: 5/4, 8, 8\n(8) * (8) = 64, left: 64, 5/4\n(10) - (8) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (10 - 8)))"}, {"input": "8 10 8 8\n", "output": "(8) * (8) = 64, left: 64, 8, 10\n(8) - (64) = -56, left: -56, 10\n(8) - (8) = 0, left: 0, 8, 10\n(8) / (8) = 1, left: 1, 10, 8\n(10) / (8) = 5/4, left: 5/4, 1\n(8) * (8) = 64, left: 64, 10, 8\n(8) + (10) = 18, left: 18, 8, 8\n(10) - (8) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (10 - 8)))"}, {"input": "8 10 8 8\n", "output": "(8) * (10) = 80, left: 80, 8, 8\n(80) / (8) = 10, left: 10, 8\n(8) - (10) = -2, left: -2\n(8) / (8) = 1, left: 1, 80\n(8) - (80) = -72, left: -72, 8\n(8) * (-72) = -576, left: -576\n(8) + (10) = 18, left: 18, 8, 8\n(8) - (10) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (8 - 10)))"}, {"input": "8 10 8 8\n", "output": "(8) + (8) = 16, left: 16, 10, 8\n(16) / (10) = 8/5, left: 8/5, 8\n(8) / (8) = 1, left: 1, 10, 8\n(8) - (8) = 0, left: 0, 10, 8\n(8) / (10) = 4/5, left: 4/5, 8, 8\n(8) / (8) = 1, left: 1, 4/5\n(10) + (8) = 18, left: 18, 8, 8\n(8) + (8) = 16, left: 16, 18\n(10) / (8) = 5/4, left: 5/4, 8, 8\n(10) * (8) = 80, left: 80, 8, 8\n(80) / (8) = 10, left: 10, 8\n(10) - (8) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (10 - 8)))"}, {"input": "8 10 8 8\n", "output": "(8) * (8) = 64, left: 64, 10, 8\n(10) / (64) = 5/32, left: 5/32, 8\n(8) - (8) = 0, left: 0, 10, 8\n(10) + (0) = 10, left: 10, 8\n(8) - (8) = 0, left: 0, 10, 8\n(0) - (10) = -10, left: -10, 8\n(8) / (8) = 1, left: 1, 10, 8\n(1) / (8) = 1/8, left: 1/8, 10\n(8) / (8) = 1, left: 1, 10, 8\n(8) * (10) = 80, left: 80, 8, 8\n(8) / (80) = 1/10, left: 1/10, 8\n(8) - (10) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (8 - 10)))"}, {"input": "8 10 8 8\n", "output": "(8) - (8) = 0, left: 0, 8, 10\n(8) / (8) = 1, left: 1, 8, 10\n(10) + (1) = 11, left: 11, 8\n(8) - (8) = 0, left: 0, 8, 10\n(8) * (10) = 80, left: 80, 0\n(8) / (8) = 1, left: 1, 10, 8\n(8) + (8) = 16, left: 16, 10, 8\n(8) - (16) = -8, left: -8, 10\n(8) / (8) = 1, left: 1, 10, 8\n(8) + (10) = 18, left: 18, 8, 8\n(8) * (18) = 144, left: 144, 8\n(10) - (8) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (10 - 8)))"}, {"input": "12 4 6 10\n", "output": "(12) / (6) = 2, left: 2, 4, 10\n(4) - (2) = 2, left: 2, 10\n(10) / (2) = 5, left: 5, 4\n(2) / (10) = 1/5, left: 1/5, 4\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (12 / 6)))"}, {"input": "12 4 6 10\n", "output": "(6) / (4) = 3/2, left: 3/2, 12, 10\n(12) * (10) = 120, left: 120, 3/2\n(12) + (3/2) = 27/2, left: 27/2, 10\n(6) - (4) = 2, left: 2, 12, 10\n(12) + (10) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((6 - 4) + (12 + 10))"}, {"input": "12 4 6 10\n", "output": "(10) / (4) = 5/2, left: 5/2, 12, 6\n(5/2) - (12) = -19/2, left: -19/2, 6\n(12) - (5/2) = 19/2, left: 19/2, 6\n(12) / (5/2) = 24/5, left: 24/5, 6\n(12) * (5/2) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((12 * (10 / 4)) - 6)"}, {"input": "12 4 6 10\n", "output": "(4) - (12) = -8, left: -8, 6, 10\n(6) + (10) = 16, left: 16, -8\n(-8) + (16) = 8, left: 8\n(-8) / (16) = -1/2, left: -1/2\n(-8) * (16) = -128, left: -128\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((6 + 10) - (4 - 12))"}, {"input": "12 4 6 10\n", "output": "(12) * (4) = 48, left: 48, 6, 10\n(6) - (10) = -4, left: -4, 48\n(12) - (4) = 8, left: 8, 6, 10\n(8) / (6) = 4/3, left: 4/3, 10\n(6) + (8) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (6 + (12 - 4)))"}, {"input": "12 4 6 10\n", "output": "(4) / (6) = 2/3, left: 2/3, 12, 10\n(10) - (12) = -2, left: -2, 2/3\n(10) / (2/3) = 15, left: 15, 12\n(12) * (15) = 180, left: 180\n(2/3) - (12) = -34/3, left: -34/3, 10\n(6) / (4) = 3/2, left: 3/2, 12, 10\n(12) - (3/2) = 21/2, left: 21/2, 10\n(6) - (4) = 2, left: 2, 12, 10\n(12) + (10) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((6 - 4) + (12 + 10))"}, {"input": "12 4 6 10\n", "output": "(10) / (4) = 5/2, left: 5/2, 12, 6\n(5/2) - (12) = -19/2, left: -19/2, 6\n(-19/2) - (6) = -31/2, left: -31/2\n(12) - (5/2) = 19/2, left: 19/2, 6\n(6) + (19/2) = 31/2, left: 31/2\n(12) / (5/2) = 24/5, left: 24/5, 6\n(12) * (5/2) = 30, left: 30, 6\n(30) / (6) = 5, left: 5\n(6) + (30) = 36, left: 36\n(30) - (6) = 24, left: 24\nreach 24! expression: ((12 * (10 / 4)) - 6)"}, {"input": "12 4 6 10\n", "output": "(12) * (4) = 48, left: 48, 6, 10\n(48) / (10) = 24/5, left: 24/5, 6\n(10) - (48) = -38, left: -38, 6\n(6) - (-38) = 44, left: 44\n(6) + (48) = 54, left: 54, 10\n(6) * (10) = 60, left: 60, 48\n(12) - (4) = 8, left: 8, 6, 10\n(6) - (8) = -2, left: -2, 10\n(6) + (8) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (6 + (12 - 4)))"}, {"input": "12 4 6 10\n", "output": "(12) / (6) = 2, left: 2, 4, 10\n(2) - (4) = -2, left: -2, 10\n(10) / (-2) = -5, left: -5\n(4) / (2) = 2, left: 2, 10\n(4) - (2) = 2, left: 2, 10\n(10) / (2) = 5, left: 5, 4\n(2) - (10) = -8, left: -8, 4\n(2) / (10) = 1/5, left: 1/5, 4\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (12 / 6)))"}, {"input": "12 4 6 10\n", "output": "(4) - (12) = -8, left: -8, 6, 10\n(6) + (10) = 16, left: 16, -8\n(16) / (-8) = -2, left: -2\n(-8) + (16) = 8, left: 8\n(-8) / (16) = -1/2, left: -1/2\n(-8) * (16) = -128, left: -128\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((6 + 10) - (4 - 12))"}, {"input": "12 4 6 10\n", "output": "(4) - (12) = -8, left: -8, 6, 10\n(6) + (10) = 16, left: 16, -8\n(16) / (-8) = -2, left: -2\n(-8) + (16) = 8, left: 8\n(-8) / (16) = -1/2, left: -1/2\n(-8) * (16) = -128, left: -128\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((6 + 10) - (4 - 12))"}, {"input": "12 4 6 10\n", "output": "(4) - (12) = -8, left: -8, 6, 10\n(6) + (10) = 16, left: 16, -8\n(16) / (-8) = -2, left: -2\n(-8) + (16) = 8, left: 8\n(-8) / (16) = -1/2, left: -1/2\n(-8) * (16) = -128, left: -128\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((6 + 10) - (4 - 12))"}, {"input": "5 6 10 11\n", "output": "(5) / (10) = 1/2, left: 1/2, 6, 11\n(11) * (1/2) = 11/2, left: 11/2, 6\n(6) + (11/2) = 23/2, left: 23/2\n(5) + (10) = 15, left: 15, 6, 11\n(15) - (11) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((5 + 10) - 11))"}, {"input": "5 6 10 11\n", "output": "(6) / (11) = 6/11, left: 6/11, 5, 10\n(10) * (11) = 110, left: 110, 5, 6\n(6) / (5) = 6/5, left: 6/5, 110\n(11) - (10) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (11 - 10)))"}, {"input": "5 6 10 11\n", "output": "(5) / (10) = 1/2, left: 1/2, 6, 11\n(11) + (1/2) = 23/2, left: 23/2, 6\n(1/2) / (11) = 1/22, left: 1/22, 6\n(5) * (10) = 50, left: 50, 6, 11\n(6) / (50) = 3/25, left: 3/25, 11\n(11) + (50) = 61, left: 61, 6\n(11) - (6) = 5, left: 5, 50\n(5) + (10) = 15, left: 15, 6, 11\n(15) - (11) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((5 + 10) - 11))"}, {"input": "5 6 10 11\n", "output": "(5) + (6) = 11, left: 11, 10, 11\n(5) / (6) = 5/6, left: 5/6, 10, 11\n(5/6) - (10) = -55/6, left: -55/6, 11\n(11) * (-55/6) = -605/6, left: -605/6\n(6) - (5) = 1, left: 1, 10, 11\n(10) * (11) = 110, left: 110, 1\n(110) - (1) = 109, left: 109\n(10) - (11) = -1, left: -1, 5, 6\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (10 - 11)))"}, {"input": "5 6 10 11\n", "output": "(11) - (6) = 5, left: 5, 5, 10\n(11) / (6) = 11/6, left: 11/6, 5, 10\n(6) - (11) = -5, left: -5, 5, 10\n(6) + (11) = 17, left: 17, 5, 10\n(17) - (10) = 7, left: 7, 5\n(6) * (11) = 66, left: 66, 5, 10\n(5) + (10) = 15, left: 15, 6, 11\n(15) / (11) = 15/11, left: 15/11, 6\n(15) - (11) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((5 + 10) - 11))"}, {"input": "5 6 10 11\n", "output": "(6) / (5) = 6/5, left: 6/5, 10, 11\n(10) / (11) = 10/11, left: 10/11, 6/5\n(5) * (6) = 30, left: 30, 10, 11\n(11) - (6) = 5, left: 5, 5, 10\n(10) - (5) = 5, left: 5, 5\n(5) / (5) = 1, left: 1\n(6) * (11) = 66, left: 66, 5, 10\n(11) - (10) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (11 - 10)))"}, {"input": "5 6 10 11\n", "output": "(6) / (5) = 6/5, left: 6/5, 10, 11\n(10) / (6/5) = 25/3, left: 25/3, 11\n(5) / (6) = 5/6, left: 5/6, 10, 11\n(11) / (6) = 11/6, left: 11/6, 5, 10\n(5) - (10) = -5, left: -5, 11/6\n(6) * (11) = 66, left: 66, 5, 10\n(66) - (5) = 61, left: 61, 10\n(10) - (11) = -1, left: -1, 5, 6\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (10 - 11)))"}, {"input": "4 2 9 4\n", "output": "(4) + (9) = 13, left: 13, 2, 4\n(4) - (4) = 0, left: 0, 2, 9\n(0) / (9) = 0, left: 0, 2\n(4) + (4) = 8, left: 8, 2, 9\n(4) / (2) = 2, left: 2, 9, 4\n(2) / (9) = 2/9, left: 2/9, 4\n(4) - (2) = 2, left: 2, 4, 9\n(9) - (2) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(2) - (4) = -2, left: -2, 4, 9\n(2) / (4) = 1/2, left: 1/2, 9, 4\n(4) * (9) = 36, left: 36, 2, 4\n(9) - (4) = 5, left: 5, 4, 2\n(2) * (5) = 10, left: 10, 4\n(9) + (4) = 13, left: 13, 4, 2\n(2) - (4) = -2, left: -2, 13\n(9) - (2) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(2) / (4) = 1/2, left: 1/2, 4, 9\n(4) - (9) = -5, left: -5, 1/2\n(9) / (4) = 9/4, left: 9/4, 4, 2\n(9) * (4) = 36, left: 36, 4, 2\n(4) + (9) = 13, left: 13, 2, 4\n(4) * (4) = 16, left: 16, 2, 9\n(16) / (2) = 8, left: 8, 9\n(9) - (2) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(4) / (9) = 4/9, left: 4/9, 4, 2\n(4) * (2) = 8, left: 8, 4/9\n(4) + (4/9) = 40/9, left: 40/9, 2\n(2) + (40/9) = 58/9, left: 58/9\n(9) + (4) = 13, left: 13, 4, 2\n(4) + (13) = 17, left: 17, 2\n(2) - (9) = -7, left: -7, 4, 4\n(9) - (2) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(4) + (4) = 8, left: 8, 2, 9\n(2) / (8) = 1/4, left: 1/4, 9\n(9) - (8) = 1, left: 1, 2\n(9) - (4) = 5, left: 5, 4, 2\n(4) / (5) = 4/5, left: 4/5, 2\n(9) / (4) = 9/4, left: 9/4, 4, 2\n(2) + (9) = 11, left: 11, 4, 4\n(9) - (2) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(4) - (4) = 0, left: 0, 2, 9\n(4) * (4) = 16, left: 16, 2, 9\n(16) - (2) = 14, left: 14, 9\n(4) / (4) = 1, left: 1, 2, 9\n(2) / (9) = 2/9, left: 2/9, 1\n(4) + (4) = 8, left: 8, 2, 9\n(9) - (4) = 5, left: 5, 4, 2\n(2) - (4) = -2, left: -2, 5\n(4) / (9) = 4/9, left: 4/9, 4, 2\n(2) - (9) = -7, left: -7, 4, 4\n(9) / (2) = 9/2, left: 9/2, 4, 4\n(9) - (2) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(2) - (4) = -2, left: -2, 4, 9\n(-2) - (4) = -6, left: -6, 9\n(4) - (2) = 2, left: 2, 4, 9\n(4) * (2) = 8, left: 8, 9, 4\n(9) * (4) = 36, left: 36, 4, 2\n(2) / (36) = 1/18, left: 1/18, 4\n(9) - (4) = 5, left: 5, 4, 2\n(4) - (9) = -5, left: -5, 4, 2\n(9) + (4) = 13, left: 13, 4, 2\n(4) / (9) = 4/9, left: 4/9, 2, 4\n(9) / (4) = 9/4, left: 9/4, 2, 4\n(9) - (2) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(2) - (4) = -2, left: -2, 4, 9\n(4) / (2) = 2, left: 2, 9, 4\n(4) / (2) = 2, left: 2, 9\n(9) + (2) = 11, left: 11\n(4) + (2) = 6, left: 6, 9, 4\n(9) / (4) = 9/4, left: 9/4, 2, 4\n(4) + (9) = 13, left: 13, 2, 4\n(4) / (9) = 4/9, left: 4/9, 4, 2\n(4) * (2) = 8, left: 8, 4/9\n(4) - (9) = -5, left: -5, 4, 2\n(2) / (4) = 1/2, left: 1/2, -5\n(9) - (2) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(9) - (4) = 5, left: 5, 4, 2\n(4) + (2) = 6, left: 6, 5\n(4) - (9) = -5, left: -5, 4, 2\n(4) / (9) = 4/9, left: 4/9, 4, 2\n(4) * (9) = 36, left: 36, 2, 4\n(4) / (4) = 1, left: 1, 2, 9\n(4) / (2) = 2, left: 2, 9, 4\n(9) + (4) = 13, left: 13, 2\n(2) / (4) = 1/2, left: 1/2, 4, 9\n(9) - (1/2) = 17/2, left: 17/2, 4\n(2) - (4) = -2, left: -2, 4, 9\n(9) - (2) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(9) - (4) = 5, left: 5, 4, 2\n(4) - (2) = 2, left: 2, 5\n(4) - (9) = -5, left: -5, 4, 2\n(4) / (9) = 4/9, left: 4/9, 4, 2\n(9) + (4) = 13, left: 13, 4, 2\n(4) * (13) = 52, left: 52, 2\n(9) / (4) = 9/4, left: 9/4, 4, 2\n(9) / (2) = 9/2, left: 9/2, 4, 4\n(9/2) / (4) = 9/8, left: 9/8, 4\n(4) - (9/8) = 23/8, left: 23/8\n(2) * (9) = 18, left: 18, 4, 4\n(9) - (2) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "3 9 9 8\n", "output": "(9) / (3) = 3, left: 3, 9, 8\n(8) / (3) = 8/3, left: 8/3, 9\n(9) - (8/3) = 19/3, left: 19/3\n(9) + (8/3) = 35/3, left: 35/3\n(8/3) - (9) = -19/3, left: -19/3\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (8 / (9 / 3)))"}, {"input": "3 9 9 8\n", "output": "(9) * (9) = 81, left: 81, 3, 8\n(3) * (81) = 243, left: 243, 8\n(8) / (243) = 8/243, left: 8/243\n(3) + (81) = 84, left: 84, 8\n(3) * (8) = 24, left: 24, 81\n(81) * (24) = 1944, left: 1944\n(3) + (8) = 11, left: 11, 81\n(9) / (9) = 1, left: 1, 3, 8\n(3) * (8) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((9 / 9) * (3 * 8))"}, {"input": "3 9 9 8\n", "output": "(3) / (8) = 3/8, left: 3/8, 9, 9\n(9) / (9) = 1, left: 1, 3/8\n(9) * (3/8) = 27/8, left: 27/8, 9\n(8) / (3) = 8/3, left: 8/3, 9, 9\n(8/3) / (9) = 8/27, left: 8/27, 9\n(8) - (3) = 5, left: 5, 9, 9\n(9) + (9) = 18, left: 18, 5\n(3) * (8) = 24, left: 24, 9, 9\n(9) / (9) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((3 * 8) * (9 / 9))"}, {"input": "3 9 9 8\n", "output": "(9) / (3) = 3, left: 3, 9, 8\n(8) / (3) = 8/3, left: 8/3, 9\n(8/3) / (9) = 8/27, left: 8/27\n(9) - (8/3) = 19/3, left: 19/3\n(9) + (8/3) = 35/3, left: 35/3\n(8/3) - (9) = -19/3, left: -19/3\n(9) / (8/3) = 27/8, left: 27/8\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (8 / (9 / 3)))"}, {"input": "3 9 9 8\n", "output": "(9) / (3) = 3, left: 3, 9, 8\n(8) / (3) = 8/3, left: 8/3, 9\n(8/3) / (9) = 8/27, left: 8/27\n(9) - (8/3) = 19/3, left: 19/3\n(9) + (8/3) = 35/3, left: 35/3\n(8/3) - (9) = -19/3, left: -19/3\n(9) / (8/3) = 27/8, left: 27/8\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (8 / (9 / 3)))"}, {"input": "3 9 9 8\n", "output": "(9) / (3) = 3, left: 3, 9, 8\n(8) / (3) = 8/3, left: 8/3, 9\n(8/3) / (9) = 8/27, left: 8/27\n(9) - (8/3) = 19/3, left: 19/3\n(9) + (8/3) = 35/3, left: 35/3\n(8/3) - (9) = -19/3, left: -19/3\n(9) / (8/3) = 27/8, left: 27/8\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (8 / (9 / 3)))"}, {"input": "4 1 11 10\n", "output": "(4) / (10) = 2/5, left: 2/5, 1, 11\n(11) - (1) = 10, left: 10, 2/5\n(4) - (10) = -6, left: -6, 1, 11\n(4) + (10) = 14, left: 14, 1, 11\n(11) + (14) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((11 + (4 + 10)) - 1)"}, {"input": "4 1 11 10\n", "output": "(10) / (11) = 10/11, left: 10/11, 4, 1\n(10/11) / (1) = 10/11, left: 10/11, 4\n(4) * (10/11) = 40/11, left: 40/11\n(11) + (10) = 21, left: 21, 4, 1\n(4) + (21) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((4 + (11 + 10)) - 1)"}, {"input": "4 1 11 10\n", "output": "(11) / (10) = 11/10, left: 11/10, 4, 1\n(4) * (11/10) = 22/5, left: 22/5, 1\n(1) - (11/10) = -1/10, left: -1/10, 4\n(1) + (11/10) = 21/10, left: 21/10, 4\n(4) / (21/10) = 40/21, left: 40/21\n(10) - (11) = -1, left: -1, 4, 1\n(4) - (-1) = 5, left: 5, 1\n(11) + (10) = 21, left: 21, 4, 1\n(4) + (21) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((4 + (11 + 10)) - 1)"}, {"input": "4 1 11 10\n", "output": "(10) / (11) = 10/11, left: 10/11, 4, 1\n(1) + (10/11) = 21/11, left: 21/11, 4\n(1) - (10/11) = 1/11, left: 1/11, 4\n(4) * (10/11) = 40/11, left: 40/11, 1\n(4) * (1) = 4, left: 4, 10/11\n(4) / (1) = 4, left: 4, 10/11\n(4) + (1) = 5, left: 5, 10/11\n(11) + (10) = 21, left: 21, 4, 1\n(4) + (21) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((4 + (11 + 10)) - 1)"}, {"input": "4 1 11 10\n", "output": "(10) / (4) = 5/2, left: 5/2, 1, 11\n(11) + (5/2) = 27/2, left: 27/2, 1\n(4) / (10) = 2/5, left: 2/5, 1, 11\n(1) * (11) = 11, left: 11, 2/5\n(11) + (2/5) = 57/5, left: 57/5, 1\n(4) + (10) = 14, left: 14, 1, 11\n(14) / (11) = 14/11, left: 14/11, 1\n(1) / (14/11) = 11/14, left: 11/14\n(11) + (14) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((11 + (4 + 10)) - 1)"}, {"input": "4 3 7 8\n", "output": "(3) - (4) = -1, left: -1, 7, 8\n(7) - (8) = -1, left: -1, 4, 3\n(8) / (7) = 8/7, left: 8/7, 4, 3\n(4) + (3) = 7, left: 7, 8/7\n(3) + (8) = 11, left: 11, 4, 7\n(4) / (7) = 4/7, left: 4/7, 11\n(3) / (7) = 3/7, left: 3/7, 4, 8\n(7) - (3) = 4, left: 4, 4, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (7 - 3)))"}, {"input": "4 3 7 8\n", "output": "(4) - (3) = 1, left: 1, 7, 8\n(7) / (1) = 7, left: 7, 8\n(4) + (3) = 7, left: 7, 7, 8\n(3) / (4) = 3/4, left: 3/4, 7, 8\n(3) * (8) = 24, left: 24, 4, 7\n(4) + (7) = 11, left: 11, 24\n(3) - (8) = -5, left: -5, 4, 7\n(3) - (7) = -4, left: -4, 4, 8\n(4) * (-4) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (4 * (3 - 7)))"}, {"input": "4 3 7 8\n", "output": "(4) + (7) = 11, left: 11, 3, 8\n(11) - (3) = 8, left: 8, 8\n(4) - (7) = -3, left: -3, 3, 8\n(7) / (4) = 7/4, left: 7/4, 3, 8\n(3) - (4) = -1, left: -1, 7, 8\n(7) + (8) = 15, left: 15, -1\n(4) + (3) = 7, left: 7, 7, 8\n(7) - (3) = 4, left: 4, 4, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (7 - 3)))"}, {"input": "4 3 7 8\n", "output": "(4) - (8) = -4, left: -4, 3, 7\n(8) / (4) = 2, left: 2, 3, 7\n(3) - (2) = 1, left: 1, 7\n(4) + (8) = 12, left: 12, 3, 7\n(7) * (12) = 84, left: 84, 3\n(8) / (3) = 8/3, left: 8/3, 4, 7\n(3) - (8) = -5, left: -5, 4, 7\n(3) - (7) = -4, left: -4, 4, 8\n(4) * (-4) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (4 * (3 - 7)))"}, {"input": "4 3 7 8\n", "output": "(3) - (8) = -5, left: -5, 4, 7\n(7) - (8) = -1, left: -1, 4, 3\n(-1) / (4) = -1/4, left: -1/4, 3\n(7) + (8) = 15, left: 15, 4, 3\n(8) - (4) = 4, left: 4, 3, 7\n(3) / (7) = 3/7, left: 3/7, 4, 8\n(8) / (4) = 2, left: 2, 3/7\n(7) - (3) = 4, left: 4, 4, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (7 - 3)))"}, {"input": "4 3 7 8\n", "output": "(3) / (4) = 3/4, left: 3/4, 7, 8\n(4) + (7) = 11, left: 11, 3, 8\n(3) + (8) = 11, left: 11, 11\n(8) - (3) = 5, left: 5, 4, 7\n(5) / (4) = 5/4, left: 5/4, 7\n(3) / (8) = 3/8, left: 3/8, 4, 7\n(7) - (8) = -1, left: -1, 4, 3\n(7) / (8) = 7/8, left: 7/8, 4, 3\n(8) - (4) = 4, left: 4, 3, 7\n(3) + (7) = 10, left: 10, 4, 8\n(10) / (8) = 5/4, left: 5/4, 4\n(7) - (3) = 4, left: 4, 4, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (7 - 3)))"}, {"input": "4 3 7 8\n", "output": "(4) * (3) = 12, left: 12, 7, 8\n(4) / (3) = 4/3, left: 4/3, 7, 8\n(3) + (8) = 11, left: 11, 4, 7\n(7) - (11) = -4, left: -4, 4\n(4) / (11) = 4/11, left: 4/11, 7\n(3) / (8) = 3/8, left: 3/8, 4, 7\n(3) - (8) = -5, left: -5, 4, 7\n(3) / (7) = 3/7, left: 3/7, 4, 8\n(4) / (8) = 1/2, left: 1/2, 3/7\n(3) + (7) = 10, left: 10, 4, 8\n(3) - (7) = -4, left: -4, 4, 8\n(8) + (-4) = 4, left: 4, 4\n(4) * (-4) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (4 * (3 - 7)))"}, {"input": "4 3 7 8\n", "output": "(4) + (7) = 11, left: 11, 3, 8\n(3) + (8) = 11, left: 11, 11\n(4) * (7) = 28, left: 28, 3, 8\n(7) / (4) = 7/4, left: 7/4, 3, 8\n(3) * (7/4) = 21/4, left: 21/4, 8\n(4) * (3) = 12, left: 12, 7, 8\n(4) - (8) = -4, left: -4, 3, 7\n(8) / (4) = 2, left: 2, 3, 7\n(8) - (4) = 4, left: 4, 3, 7\n(7) - (3) = 4, left: 4, 4\n(3) + (7) = 10, left: 10, 4, 8\n(7) - (3) = 4, left: 4, 4, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (7 - 3)))"}, {"input": "4 3 7 8\n", "output": "(8) / (4) = 2, left: 2, 3, 7\n(7) / (3) = 7/3, left: 7/3, 2\n(3) * (7) = 21, left: 21, 2\n(4) / (8) = 1/2, left: 1/2, 3, 7\n(7) - (3) = 4, left: 4, 1/2\n(8) - (3) = 5, left: 5, 4, 7\n(4) + (5) = 9, left: 9, 7\n(8) / (3) = 8/3, left: 8/3, 4, 7\n(7) + (8/3) = 29/3, left: 29/3, 4\n(3) - (8) = -5, left: -5, 4, 7\n(4) - (-5) = 9, left: 9, 7\n(3) - (7) = -4, left: -4, 4, 8\n(4) * (-4) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (4 * (3 - 7)))"}, {"input": "4 3 7 8\n", "output": "(4) / (3) = 4/3, left: 4/3, 7, 8\n(8) / (7) = 8/7, left: 8/7, 4, 3\n(8) - (3) = 5, left: 5, 4, 7\n(4) * (5) = 20, left: 20, 7\n(20) / (7) = 20/7, left: 20/7\n(3) - (8) = -5, left: -5, 4, 7\n(8) / (3) = 8/3, left: 8/3, 4, 7\n(4) / (8/3) = 3/2, left: 3/2, 7\n(4) + (8/3) = 20/3, left: 20/3, 7\n(20/3) / (7) = 20/21, left: 20/21\n(3) * (7) = 21, left: 21, 4, 8\n(7) - (3) = 4, left: 4, 4, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (7 - 3)))"}, {"input": "6 2 13 2\n", "output": "(6) - (2) = 4, left: 4, 13, 2\n(2) + (4) = 6, left: 6, 13\n(2) / (6) = 1/3, left: 1/3, 13, 2\n(13) + (1/3) = 40/3, left: 40/3, 2\n(13) / (6) = 13/6, left: 13/6, 2, 2\n(2) + (13/6) = 25/6, left: 25/6, 2\n(2) / (13) = 2/13, left: 2/13, 6, 2\n(13) + (2) = 15, left: 15, 6, 2\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (13 + 2)) - 6)"}, {"input": "6 2 13 2\n", "output": "(2) - (13) = -11, left: -11, 6, 2\n(-11) - (6) = -17, left: -17, 2\n(2) * (-17) = -34, left: -34\n(2) - (-11) = 13, left: 13, 6\n(13) - (6) = 7, left: 7\n(13) - (2) = 11, left: 11, 6, 2\n(6) * (11) = 66, left: 66, 2\n(2) + (13) = 15, left: 15, 6, 2\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (2 + 13)) - 6)"}, {"input": "6 2 13 2\n", "output": "(2) * (2) = 4, left: 4, 6, 13\n(4) - (6) = -2, left: -2, 13\n(2) - (2) = 0, left: 0, 6, 13\n(2) / (2) = 1, left: 1, 6, 13\n(6) * (13) = 78, left: 78, 2, 2\n(2) / (78) = 1/39, left: 1/39, 2\n(13) / (6) = 13/6, left: 13/6, 2, 2\n(2) + (13) = 15, left: 15, 6, 2\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (2 + 13)) - 6)"}, {"input": "6 2 13 2\n", "output": "(13) * (2) = 26, left: 26, 6, 2\n(13) / (2) = 13/2, left: 13/2, 6, 2\n(13) - (2) = 11, left: 11, 6, 2\n(2) / (11) = 2/11, left: 2/11, 6\n(2) / (13) = 2/13, left: 2/13, 6, 2\n(6) * (2/13) = 12/13, left: 12/13, 2\n(2) - (13) = -11, left: -11, 6, 2\n(13) + (2) = 15, left: 15, 6, 2\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (13 + 2)) - 6)"}, {"input": "6 2 13 2\n", "output": "(2) / (13) = 2/13, left: 2/13, 6, 2\n(13) / (2) = 13/2, left: 13/2, 6, 2\n(13) - (2) = 11, left: 11, 6, 2\n(2) - (13) = -11, left: -11, 6, 2\n(2) * (13) = 26, left: 26, 6, 2\n(2) - (26) = -24, left: -24, 6\n(2) + (13) = 15, left: 15, 6, 2\n(6) - (2) = 4, left: 4, 15\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (2 + 13)) - 6)"}, {"input": "6 2 13 2\n", "output": "(6) - (2) = 4, left: 4, 2, 13\n(6) / (2) = 3, left: 3, 2, 13\n(2) / (3) = 2/3, left: 2/3, 13\n(6) * (2) = 12, left: 12, 2, 13\n(13) - (2) = 11, left: 11, 12\n(6) / (2) = 3, left: 3, 13, 2\n(2) / (3) = 2/3, left: 2/3, 13\n(13) - (6) = 7, left: 7, 2, 2\n(13) / (6) = 13/6, left: 13/6, 2, 2\n(2) + (13/6) = 25/6, left: 25/6, 2\n(6) * (13) = 78, left: 78, 2, 2\n(13) + (2) = 15, left: 15, 6, 2\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (13 + 2)) - 6)"}, {"input": "6 2 13 2\n", "output": "(2) * (2) = 4, left: 4, 6, 13\n(2) - (2) = 0, left: 0, 6, 13\n(2) + (2) = 4, left: 4, 6, 13\n(13) - (6) = 7, left: 7, 2, 2\n(6) + (13) = 19, left: 19, 2, 2\n(19) - (2) = 17, left: 17, 2\n(13) - (2) = 11, left: 11, 6, 2\n(11) - (6) = 5, left: 5, 2\n(2) / (13) = 2/13, left: 2/13, 6, 2\n(6) - (2/13) = 76/13, left: 76/13, 2\n(13) / (2) = 13/2, left: 13/2, 6, 2\n(2) + (13) = 15, left: 15, 6, 2\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (2 + 13)) - 6)"}, {"input": "13 4 2 3\n", "output": "(3) - (4) = -1, left: -1, 13, 2\n(2) / (13) = 2/13, left: 2/13, -1\n(-1) * (2/13) = -2/13, left: -2/13\n(13) / (-1) = -13, left: -13, 2\n(13) + (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 + (3 - 4)))"}, {"input": "13 4 2 3\n", "output": "(2) + (3) = 5, left: 5, 13, 4\n(13) / (5) = 13/5, left: 13/5, 4\n(2) / (3) = 2/3, left: 2/3, 13, 4\n(2/3) / (13) = 2/39, left: 2/39, 4\n(13) - (4) = 9, left: 9, 2/3\n(3) - (2) = 1, left: 1, 13, 4\n(13) * (4) = 52, left: 52, 1\n(4) * (2) = 8, left: 8, 13, 3\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((4 * 2) + (13 + 3))"}, {"input": "13 4 2 3\n", "output": "(4) - (13) = -9, left: -9, 2, 3\n(2) * (-9) = -18, left: -18, 3\n(2) + (-9) = -7, left: -7, 3\n(-9) / (2) = -9/2, left: -9/2, 3\n(2) - (-9) = 11, left: 11, 3\n(3) * (11) = 33, left: 33\n(-9) - (2) = -11, left: -11, 3\n(2) / (-9) = -2/9, left: -2/9, 3\n(3) - (-9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 - (4 - 13)))"}, {"input": "13 4 2 3\n", "output": "(4) + (3) = 7, left: 7, 13, 2\n(4) * (3) = 12, left: 12, 13, 2\n(2) * (12) = 24, left: 24, 13\n(13) / (24) = 13/24, left: 13/24\n(2) + (12) = 14, left: 14, 13\n(13) * (2) = 26, left: 26, 12\n(2) - (13) = -11, left: -11, 12\n(4) - (3) = 1, left: 1, 13, 2\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (4 - 3)))"}, {"input": "13 4 2 3\n", "output": "(3) - (4) = -1, left: -1, 13, 2\n(2) / (13) = 2/13, left: 2/13, -1\n(2/13) / (-1) = -2/13, left: -2/13\n(13) + (2) = 15, left: 15, -1\n(13) * (-1) = -13, left: -13, 2\n(2) / (-13) = -2/13, left: -2/13\n(-1) - (13) = -14, left: -14, 2\n(13) + (-1) = 12, left: 12, 2\n(2) + (12) = 14, left: 14\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 + (3 - 4)))"}, {"input": "13 4 2 3\n", "output": "(4) / (3) = 4/3, left: 4/3, 13, 2\n(13) - (2) = 11, left: 11, 4/3\n(4/3) - (2) = -2/3, left: -2/3, 13\n(4) - (3) = 1, left: 1, 13, 2\n(2) / (1) = 2, left: 2, 13\n(2) / (13) = 2/13, left: 2/13\n(13) / (2) = 13/2, left: 13/2, 1\n(13) * (2) = 26, left: 26, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (4 - 3)))"}, {"input": "1 4 1 5\n", "output": "(1) / (5) = 1/5, left: 1/5, 1, 4\n(1) - (4) = -3, left: -3, 1/5\n(1/5) / (-3) = -1/15, left: -1/15\n(1) - (5) = -4, left: -4, 1, 4\n(1) - (-4) = 5, left: 5, 4\n(1) / (-4) = -1/4, left: -1/4, 4\n(4) / (-1/4) = -16, left: -16\n(1) + (5) = 6, left: 6, 1, 4\n(4) * (6) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((4 * (1 + 5)) / 1)"}, {"input": "1 4 1 5\n", "output": "(4) / (5) = 4/5, left: 4/5, 1, 1\n(1) - (1) = 0, left: 0, 4/5\n(1) - (4/5) = 1/5, left: 1/5, 1\n(1) + (4/5) = 9/5, left: 9/5, 1\n(4) + (5) = 9, left: 9, 1, 1\n(1) / (1) = 1, left: 1, 9\n(1) + (9) = 10, left: 10, 1\n(1) / (4) = 1/4, left: 1/4, 1, 5\n(1) + (5) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((1 + 5) / (1 / 4))"}, {"input": "1 4 1 5\n", "output": "(1) / (5) = 1/5, left: 1/5, 4, 1\n(4) - (1/5) = 19/5, left: 19/5, 1\n(1) - (5) = -4, left: -4, 4, 1\n(5) - (1) = 4, left: 4, 4, 1\n(4) - (4) = 0, left: 0, 1\n(4) + (1) = 5, left: 5, 4\n(5) / (1) = 5, left: 5, 4, 1\n(1) - (5) = -4, left: -4, 4\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (5 / 1)))"}, {"input": "1 4 1 5\n", "output": "(5) / (1) = 5, left: 5, 1, 4\n(4) / (1) = 4, left: 4, 5\n(4) - (5) = -1, left: -1\n(5) / (4) = 5/4, left: 5/4, 1\n(1) * (5/4) = 5/4, left: 5/4\n(5) - (4) = 1, left: 1, 1\n(1) - (1) = 0, left: 0\n(1) - (5) = -4, left: -4, 4\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (5 / 1)))"}, {"input": "1 4 1 5\n", "output": "(4) * (1) = 4, left: 4, 1, 5\n(4) / (1) = 4, left: 4, 5\n(1) + (4) = 5, left: 5, 5\n(1) * (5) = 5, left: 5, 4\n(4) - (5) = -1, left: -1\n(1) / (5) = 1/5, left: 1/5, 4\n(1/5) - (4) = -19/5, left: -19/5\n(1) - (5) = -4, left: -4, 4\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((4 * 1) * (1 + 5))"}, {"input": "1 4 1 5\n", "output": "(1) / (5) = 1/5, left: 1/5, 4, 1\n(4) - (1/5) = 19/5, left: 19/5, 1\n(1) - (5) = -4, left: -4, 4, 1\n(4) * (-4) = -16, left: -16, 1\n(1) + (-4) = -3, left: -3, 4\n(4) * (-3) = -12, left: -12\n(4) + (1) = 5, left: 5, -4\n(5) / (-4) = -5/4, left: -5/4\n(5) - (1) = 4, left: 4, 4, 1\n(4) - (1) = 3, left: 3, 4\n(5) / (1) = 5, left: 5, 4, 1\n(4) * (1) = 4, left: 4, 5\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (5 / 1)))"}, {"input": "1 4 1 5\n", "output": "(4) * (1) = 4, left: 4, 1, 5\n(1) - (4) = -3, left: -3, 5\n(4) / (1) = 4, left: 4, 5\n(5) + (4) = 9, left: 9\n(4) - (1) = 3, left: 3, 5\n(5) - (3) = 2, left: 2\n(1) + (4) = 5, left: 5, 5\n(1) * (4) = 4, left: 4, 5\n(5) / (1) = 5, left: 5, 4\n(4) - (5) = -1, left: -1\n(5) - (1) = 4, left: 4, 4\n(1) - (5) = -4, left: -4, 4\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((4 * 1) * (1 + 5))"}, {"input": "1 4 1 5\n", "output": "(1) / (5) = 1/5, left: 1/5, 1, 4\n(4) * (1/5) = 4/5, left: 4/5, 1\n(4) / (1/5) = 20, left: 20, 1\n(1) - (5) = -4, left: -4, 1, 4\n(4) * (-4) = -16, left: -16, 1\n(-16) - (1) = -17, left: -17\n(4) - (-4) = 8, left: 8, 1\n(1) / (4) = 1/4, left: 1/4, -4\n(-4) / (1) = -4, left: -4, 4\n(4) / (-4) = -1, left: -1\n(-4) - (1) = -5, left: -5, 4\n(1) + (5) = 6, left: 6, 1, 4\n(4) * (6) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((4 * (1 + 5)) / 1)"}, {"input": "1 4 1 5\n", "output": "(5) - (4) = 1, left: 1, 1, 1\n(5) / (4) = 5/4, left: 5/4, 1, 1\n(1) / (5/4) = 4/5, left: 4/5, 1\n(4) / (5) = 4/5, left: 4/5, 1, 1\n(4) * (5) = 20, left: 20, 1, 1\n(1) / (20) = 1/20, left: 1/20, 1\n(1) - (20) = -19, left: -19, 1\n(4) - (5) = -1, left: -1, 1, 1\n(4) + (5) = 9, left: 9, 1, 1\n(1) * (9) = 9, left: 9, 1\n(1) / (4) = 1/4, left: 1/4, 1, 5\n(5) / (1) = 5, left: 5, 1/4\n(1) + (5) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((1 + 5) / (1 / 4))"}, {"input": "8 13 2 5\n", "output": "(13) - (5) = 8, left: 8, 8, 2\n(8) - (8) = 0, left: 0, 2\n(8) + (2) = 10, left: 10, 8\n(8) * (10) = 80, left: 80\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((13 - 5) + (8 * 2))"}, {"input": "8 13 2 5\n", "output": "(8) * (13) = 104, left: 104, 2, 5\n(2) + (104) = 106, left: 106, 5\n(2) - (104) = -102, left: -102, 5\n(8) + (13) = 21, left: 21, 2, 5\n(5) - (2) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((8 + 13) + (5 - 2))"}, {"input": "8 13 2 5\n", "output": "(8) - (5) = 3, left: 3, 13, 2\n(2) - (13) = -11, left: -11, 3\n(13) * (2) = 26, left: 26, 3\n(2) * (3) = 6, left: 6, 13\n(13) + (3) = 16, left: 16, 2\n(13) - (3) = 10, left: 10, 2\n(2) / (10) = 1/5, left: 1/5\n(8) / (5) = 8/5, left: 8/5, 13, 2\n(13) + (2) = 15, left: 15, 8/5\n(8/5) * (15) = 24, left: 24\nreach 24! expression: ((8 / 5) * (13 + 2))"}, {"input": "8 13 2 5\n", "output": "(13) - (5) = 8, left: 8, 8, 2\n(8) - (8) = 0, left: 0, 2\n(2) * (0) = 0, left: 0\n(8) / (8) = 1, left: 1, 2\n(2) * (1) = 2, left: 2\n(8) + (2) = 10, left: 10, 8\n(8) * (10) = 80, left: 80\n(8) / (2) = 4, left: 4, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((13 - 5) + (8 * 2))"}, {"input": "8 13 2 5\n", "output": "(8) / (2) = 4, left: 4, 13, 5\n(4) - (5) = -1, left: -1, 13\n(4) / (5) = 4/5, left: 4/5, 13\n(13) * (4) = 52, left: 52, 5\n(13) - (4) = 9, left: 9, 5\n(4) / (13) = 4/13, left: 4/13, 5\n(4) - (13) = -9, left: -9, 5\n(8) * (2) = 16, left: 16, 13, 5\n(13) + (16) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((13 + (8 * 2)) - 5)"}, {"input": "8 13 2 5\n", "output": "(13) * (2) = 26, left: 26, 8, 5\n(2) / (13) = 2/13, left: 2/13, 8, 5\n(2/13) / (8) = 1/52, left: 1/52, 5\n(2/13) / (5) = 2/65, left: 2/65, 8\n(13) / (2) = 13/2, left: 13/2, 8, 5\n(13/2) / (8) = 13/16, left: 13/16, 5\n(13) - (2) = 11, left: 11, 8, 5\n(5) - (11) = -6, left: -6, 8\n(5) + (11) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (5 + (13 - 2)))"}, {"input": "8 13 2 5\n", "output": "(8) * (13) = 104, left: 104, 2, 5\n(2) * (104) = 208, left: 208, 5\n(5) * (208) = 1040, left: 1040\n(2) - (104) = -102, left: -102, 5\n(-102) / (5) = -102/5, left: -102/5\n(2) / (104) = 1/52, left: 1/52, 5\n(5) + (104) = 109, left: 109, 2\n(8) + (13) = 21, left: 21, 2, 5\n(5) - (2) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((8 + 13) + (5 - 2))"}, {"input": "11 3 3 2\n", "output": "(2) - (3) = -1, left: -1, 11, 3\n(11) / (-1) = -11, left: -11, 3\n(3) + (2) = 5, left: 5, 11, 3\n(3) - (11) = -8, left: -8, 5\n(3) - (2) = 1, left: 1, 11, 3\n(2) / (3) = 2/3, left: 2/3, 11, 3\n(3) / (3) = 1, left: 1, 11, 2\n(1) - (11) = -10, left: -10, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (3 / 3)))"}, {"input": "11 3 3 2\n", "output": "(3) * (2) = 6, left: 6, 11, 3\n(3) - (6) = -3, left: -3, 11\n(2) / (3) = 2/3, left: 2/3, 11, 3\n(11) - (3) = 8, left: 8, 3, 2\n(3) / (2) = 3/2, left: 3/2, 11, 3\n(11) + (3) = 14, left: 14, 3, 2\n(3) * (3) = 9, left: 9, 11, 2\n(3) / (3) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (3 / 3)))"}, {"input": "11 3 3 2\n", "output": "(11) / (2) = 11/2, left: 11/2, 3, 3\n(3) * (11/2) = 33/2, left: 33/2, 3\n(2) - (11) = -9, left: -9, 3, 3\n(11) + (2) = 13, left: 13, 3, 3\n(3) - (13) = -10, left: -10, 3\n(3) / (13) = 3/13, left: 3/13, 3\n(3) + (13) = 16, left: 16, 3\n(11) - (2) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (11 - 2)) - 3)"}, {"input": "11 3 3 2\n", "output": "(3) - (11) = -8, left: -8, 3, 2\n(-8) / (2) = -4, left: -4, 3\n(3) * (-4) = -12, left: -12\n(11) * (3) = 33, left: 33, 3, 2\n(2) / (3) = 2/3, left: 2/3, 33\n(3) / (11) = 3/11, left: 3/11, 3, 2\n(2) / (3) = 2/3, left: 2/3, 3/11\n(11) - (2) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (11 - 2)) - 3)"}, {"input": "11 3 3 2\n", "output": "(3) - (3) = 0, left: 0, 11, 2\n(2) - (0) = 2, left: 2, 11\n(11) - (2) = 9, left: 9\n(11) + (2) = 13, left: 13, 0\n(13) - (0) = 13, left: 13\n(3) * (3) = 9, left: 9, 11, 2\n(2) / (9) = 2/9, left: 2/9, 11\n(3) / (3) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (3 / 3)))"}, {"input": "11 3 3 2\n", "output": "(3) * (2) = 6, left: 6, 11, 3\n(6) / (3) = 2, left: 2, 11\n(2) - (3) = -1, left: -1, 11, 3\n(-1) - (3) = -4, left: -4, 11\n(11) * (3) = 33, left: 33, 3, 2\n(33) - (3) = 30, left: 30, 2\n(3) - (2) = 1, left: 1, 11, 3\n(3) * (1) = 3, left: 3, 11\n(11) * (3) = 33, left: 33, 1\n(2) / (3) = 2/3, left: 2/3, 11, 3\n(2/3) - (11) = -31/3, left: -31/3, 3\n(3) / (3) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (3 / 3)))"}, {"input": "10 10 5 7\n", "output": "(7) / (5) = 7/5, left: 7/5, 10, 10\n(7/5) / (10) = 7/50, left: 7/50, 10\n(10) / (7/5) = 50/7, left: 50/7, 10\n(50/7) - (10) = -20/7, left: -20/7\n(10) * (7/5) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (10 * (7 / 5)))"}, {"input": "10 10 5 7\n", "output": "(5) * (7) = 35, left: 35, 10, 10\n(35) / (10) = 7/2, left: 7/2, 10\n(10) - (10) = 0, left: 0, 35\n(5) / (7) = 5/7, left: 5/7, 10, 10\n(10) / (5/7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (10 / (5 / 7)))"}, {"input": "10 10 5 7\n", "output": "(10) * (5) = 50, left: 50, 10, 7\n(10) * (50) = 500, left: 500, 7\n(5) / (10) = 1/2, left: 1/2, 10, 7\n(1/2) / (10) = 1/20, left: 1/20, 7\n(7) / (1/2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 / (5 / 10)))"}, {"input": "10 10 5 7\n", "output": "(7) - (10) = -3, left: -3, 10, 5\n(5) / (-3) = -5/3, left: -5/3, 10\n(-5/3) - (10) = -35/3, left: -35/3\n(10) / (7) = 10/7, left: 10/7, 10, 5\n(7) / (10) = 7/10, left: 7/10, 10, 5\n(10) * (7/10) = 7, left: 7, 5\n(10) * (7) = 70, left: 70, 10, 5\n(5) + (70) = 75, left: 75, 10\n(70) / (5) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((10 * 7) / 5))"}, {"input": "10 10 5 7\n", "output": "(5) + (7) = 12, left: 12, 10, 10\n(10) * (12) = 120, left: 120, 10\n(10) - (12) = -2, left: -2, 10\n(5) * (7) = 35, left: 35, 10, 10\n(10) / (35) = 2/7, left: 2/7, 10\n(10) - (2/7) = 68/7, left: 68/7\n(10) / (10) = 1, left: 1, 35\n(5) / (7) = 5/7, left: 5/7, 10, 10\n(10) / (5/7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (10 / (5 / 7)))"}, {"input": "10 10 5 7\n", "output": "(10) * (5) = 50, left: 50, 10, 7\n(10) * (50) = 500, left: 500, 7\n(7) * (500) = 3500, left: 3500\n(10) + (7) = 17, left: 17, 50\n(7) - (50) = -43, left: -43, 10\n(10) + (-43) = -33, left: -33\n(5) / (10) = 1/2, left: 1/2, 10, 7\n(10) * (1/2) = 5, left: 5, 7\n(7) / (1/2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 / (5 / 10)))"}, {"input": "10 10 5 7\n", "output": "(10) - (10) = 0, left: 0, 5, 7\n(10) * (10) = 100, left: 100, 5, 7\n(5) - (7) = -2, left: -2, 100\n(10) + (10) = 20, left: 20, 5, 7\n(20) / (5) = 4, left: 4, 7\n(10) - (10) = 0, left: 0, 5, 7\n(5) * (7) = 35, left: 35, 10, 10\n(7) / (5) = 7/5, left: 7/5, 10, 10\n(10) * (7/5) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (10 * (7 / 5)))"}, {"input": "10 10 5 7\n", "output": "(7) / (5) = 7/5, left: 7/5, 10, 10\n(7/5) / (10) = 7/50, left: 7/50, 10\n(7/50) / (10) = 7/500, left: 7/500\n(10) * (7/50) = 7/5, left: 7/5\n(10) / (7/50) = 500/7, left: 500/7\n(10) / (7/5) = 50/7, left: 50/7, 10\n(50/7) - (10) = -20/7, left: -20/7\n(50/7) / (10) = 5/7, left: 5/7\n(10) * (7/5) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (10 * (7 / 5)))"}, {"input": "7 12 7 12\n", "output": "(7) / (12) = 7/12, left: 7/12, 7, 12\n(12) / (7) = 12/7, left: 12/7, 7/12\n(7) * (12) = 84, left: 84, 7/12\n(12) / (7/12) = 144/7, left: 144/7, 7\n(7) / (7/12) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (7 / (7 / 12)))"}, {"input": "7 12 7 12\n", "output": "(12) / (7) = 12/7, left: 12/7, 12, 7\n(12) - (7) = 5, left: 5, 12/7\n(12) / (7) = 12/7, left: 12/7, 12/7\n(12/7) - (12/7) = 0, left: 0\n(7) * (12/7) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (7 * (12 / 7)))"}, {"input": "7 12 7 12\n", "output": "(7) + (7) = 14, left: 14, 12, 12\n(12) - (14) = -2, left: -2, 12\n(-2) - (12) = -14, left: -14\n(14) / (12) = 7/6, left: 7/6, 12\n(14) - (12) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 + 7) - 12))"}, {"input": "7 12 7 12\n", "output": "(12) / (7) = 12/7, left: 12/7, 12, 7\n(7) - (12) = -5, left: -5, 12/7\n(12) / (12/7) = 7, left: 7, 7\n(7) + (7) = 14, left: 14\n(7) * (12/7) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (7 * (12 / 7)))"}, {"input": "7 12 7 12\n", "output": "(7) + (7) = 14, left: 14, 12, 12\n(12) - (14) = -2, left: -2, 12\n(-2) / (12) = -1/6, left: -1/6\n(12) / (-2) = -6, left: -6\n(12) + (-2) = 10, left: 10\n(14) / (12) = 7/6, left: 7/6, 12\n(12) + (7/6) = 79/6, left: 79/6\n(14) - (12) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 + 7) - 12))"}, {"input": "7 12 7 12\n", "output": "(12) / (7) = 12/7, left: 12/7, 12, 7\n(12) * (12/7) = 144/7, left: 144/7, 7\n(12) - (12/7) = 72/7, left: 72/7, 7\n(7) / (12) = 7/12, left: 7/12, 12/7\n(12) + (7) = 19, left: 19, 12/7\n(7) / (12/7) = 49/12, left: 49/12, 12\n(12/7) - (7) = -37/7, left: -37/7, 12\n(12) + (-37/7) = 47/7, left: 47/7\n(7) * (12/7) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (7 * (12 / 7)))"}, {"input": "7 12 7 12\n", "output": "(7) / (12) = 7/12, left: 7/12, 7, 12\n(7) - (12) = -5, left: -5, 7/12\n(7/12) / (-5) = -7/60, left: -7/60\n(12) - (7) = 5, left: 5, 7/12\n(7/12) - (12) = -137/12, left: -137/12, 7\n(7) - (-137/12) = 221/12, left: 221/12\n(12) - (7/12) = 137/12, left: 137/12, 7\n(7) / (7/12) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (7 / (7 / 12)))"}, {"input": "7 12 7 12\n", "output": "(12) - (12) = 0, left: 0, 7, 7\n(7) + (0) = 7, left: 7, 7\n(12) - (12) = 0, left: 0, 7, 7\n(7) + (0) = 7, left: 7, 7\n(12) / (12) = 1, left: 1, 7, 7\n(7) / (7) = 1, left: 1, 1\n(7) + (1) = 8, left: 8, 7\n(12) + (12) = 24, left: 24, 7, 7\n(7) - (7) = 0, left: 0, 24\n(24) + (0) = 24, left: 24\nreach 24! expression: ((12 + 12) + (7 - 7))"}, {"input": "7 12 7 12\n", "output": "(12) / (7) = 12/7, left: 12/7, 12, 7\n(12) + (7) = 19, left: 19, 12/7\n(12) / (7) = 12/7, left: 12/7, 12/7\n(12) - (7) = 5, left: 5, 12/7\n(7) - (12) = -5, left: -5, 12/7\n(12) * (12/7) = 144/7, left: 144/7, 7\n(144/7) / (7) = 144/49, left: 144/49\n(7) / (12/7) = 49/12, left: 49/12, 12\n(7) * (12/7) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (7 * (12 / 7)))"}, {"input": "4 2 3 7\n", "output": "(2) + (3) = 5, left: 5, 4, 7\n(4) * (5) = 20, left: 20, 7\n(7) + (20) = 27, left: 27\n(3) / (2) = 3/2, left: 3/2, 4, 7\n(7) * (3/2) = 21/2, left: 21/2, 4\n(3/2) - (4) = -5/2, left: -5/2, 7\n(2) - (3) = -1, left: -1, 4, 7\n(4) - (-1) = 5, left: 5, 7\n(7) + (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 + (2 - 3)))"}, {"input": "4 2 3 7\n", "output": "(2) - (4) = -2, left: -2, 3, 7\n(-2) - (3) = -5, left: -5, 7\n(7) - (-5) = 12, left: 12\n(4) / (2) = 2, left: 2, 3, 7\n(3) * (2) = 6, left: 6, 7\n(4) + (2) = 6, left: 6, 3, 7\n(3) + (6) = 9, left: 9, 7\n(9) - (7) = 2, left: 2\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((4 + 2) * (7 - 3))"}, {"input": "4 2 3 7\n", "output": "(3) / (7) = 3/7, left: 3/7, 4, 2\n(3/7) - (2) = -11/7, left: -11/7, 4\n(-11/7) - (4) = -39/7, left: -39/7\n(2) + (3/7) = 17/7, left: 17/7, 4\n(2) / (4) = 1/2, left: 1/2, 3/7\n(4) + (2) = 6, left: 6, 3/7\n(6) - (3/7) = 39/7, left: 39/7\n(7) - (3) = 4, left: 4, 4, 2\n(4) + (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((7 - 3) * (4 + 2))"}, {"input": "4 2 3 7\n", "output": "(7) - (4) = 3, left: 3, 2, 3\n(3) / (2) = 3/2, left: 3/2, 3\n(3) + (3) = 6, left: 6, 2\n(4) * (7) = 28, left: 28, 2, 3\n(4) + (7) = 11, left: 11, 2, 3\n(2) + (3) = 5, left: 5, 4, 7\n(4) - (5) = -1, left: -1, 7\n(3) - (2) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (3 - 2)))"}, {"input": "4 2 3 7\n", "output": "(7) / (4) = 7/4, left: 7/4, 2, 3\n(2) * (3) = 6, left: 6, 7/4\n(4) / (7) = 4/7, left: 4/7, 2, 3\n(3) - (2) = 1, left: 1, 4/7\n(2) + (3) = 5, left: 5, 4, 7\n(4) * (7) = 28, left: 28, 5\n(7) - (5) = 2, left: 2, 4\n(2) - (3) = -1, left: -1, 4, 7\n(7) + (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 + (2 - 3)))"}, {"input": "4 2 3 7\n", "output": "(2) - (4) = -2, left: -2, 3, 7\n(3) - (-2) = 5, left: 5, 7\n(7) * (5) = 35, left: 35\n(7) * (-2) = -14, left: -14, 3\n(7) + (-2) = 5, left: 5, 3\n(-2) - (7) = -9, left: -9, 3\n(4) / (2) = 2, left: 2, 3, 7\n(2) - (3) = -1, left: -1, 7\n(2) / (3) = 2/3, left: 2/3, 7\n(3) / (2) = 3/2, left: 3/2, 7\n(3) * (7) = 21, left: 21, 2\n(4) + (2) = 6, left: 6, 3, 7\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((4 + 2) * (7 - 3))"}, {"input": "4 2 3 7\n", "output": "(7) / (4) = 7/4, left: 7/4, 2, 3\n(2) + (3) = 5, left: 5, 7/4\n(4) - (7) = -3, left: -3, 2, 3\n(2) + (-3) = -1, left: -1, 3\n(2) * (-3) = -6, left: -6, 3\n(4) + (7) = 11, left: 11, 2, 3\n(4) / (7) = 4/7, left: 4/7, 2, 3\n(4/7) - (3) = -17/7, left: -17/7, 2\n(4) * (7) = 28, left: 28, 2, 3\n(7) - (4) = 3, left: 3, 2, 3\n(2) + (3) = 5, left: 5, 4, 7\n(2) - (3) = -1, left: -1, 4, 7\n(7) + (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 + (2 - 3)))"}, {"input": "4 2 3 7\n", "output": "(4) - (7) = -3, left: -3, 2, 3\n(-3) - (3) = -6, left: -6, 2\n(7) - (4) = 3, left: 3, 2, 3\n(7) / (4) = 7/4, left: 7/4, 2, 3\n(7/4) - (3) = -5/4, left: -5/4, 2\n(7/4) / (3) = 7/12, left: 7/12, 2\n(4) * (7) = 28, left: 28, 2, 3\n(2) * (3) = 6, left: 6, 28\n(3) - (2) = 1, left: 1, 4, 7\n(4) - (7) = -3, left: -3, 1\n(7) + (1) = 8, left: 8, 4\n(4) / (8) = 1/2, left: 1/2\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (3 - 2)))"}, {"input": "2 9 5 4\n", "output": "(4) / (9) = 4/9, left: 4/9, 2, 5\n(4) - (9) = -5, left: -5, 2, 5\n(5) / (2) = 5/2, left: 5/2, -5\n(9) / (4) = 9/4, left: 9/4, 2, 5\n(9) + (4) = 13, left: 13, 2, 5\n(5) * (13) = 65, left: 65, 2\n(9) + (5) = 14, left: 14, 2, 4\n(4) + (14) = 18, left: 18, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (9 + 5)) - 4)"}, {"input": "2 9 5 4\n", "output": "(4) - (5) = -1, left: -1, 2, 9\n(5) - (4) = 1, left: 1, 2, 9\n(4) / (5) = 4/5, left: 4/5, 2, 9\n(2) * (4/5) = 8/5, left: 8/5, 9\n(5) / (4) = 5/4, left: 5/4, 2, 9\n(5) + (4) = 9, left: 9, 2, 9\n(9) - (2) = 7, left: 7, 9\n(2) + (9) = 11, left: 11, 5, 4\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((2 + 9) - 5))"}, {"input": "2 9 5 4\n", "output": "(2) / (5) = 2/5, left: 2/5, 9, 4\n(9) * (4) = 36, left: 36, 2/5\n(2/5) + (36) = 182/5, left: 182/5\n(4) + (2/5) = 22/5, left: 22/5, 9\n(5) / (2) = 5/2, left: 5/2, 9, 4\n(4) - (5/2) = 3/2, left: 3/2, 9\n(5/2) - (4) = -3/2, left: -3/2, 9\n(2) - (5) = -3, left: -3, 9, 4\n(9) + (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 + (2 - 5)))"}, {"input": "2 9 5 4\n", "output": "(2) * (5) = 10, left: 10, 9, 4\n(9) * (10) = 90, left: 90, 4\n(10) / (9) = 10/9, left: 10/9, 4\n(4) + (10/9) = 46/9, left: 46/9\n(10) / (4) = 5/2, left: 5/2, 9\n(2) - (5) = -3, left: -3, 9, 4\n(9) + (4) = 13, left: 13, -3\n(9) * (-3) = -27, left: -27, 4\n(9) + (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 + (2 - 5)))"}, {"input": "2 9 5 4\n", "output": "(2) / (5) = 2/5, left: 2/5, 9, 4\n(9) - (2/5) = 43/5, left: 43/5, 4\n(5) / (2) = 5/2, left: 5/2, 9, 4\n(9) - (4) = 5, left: 5, 5/2\n(2) * (5) = 10, left: 10, 9, 4\n(2) - (5) = -3, left: -3, 9, 4\n(9) + (4) = 13, left: 13, -3\n(-3) - (9) = -12, left: -12, 4\n(9) + (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 + (2 - 5)))"}, {"input": "2 9 5 4\n", "output": "(4) - (5) = -1, left: -1, 2, 9\n(2) - (-1) = 3, left: 3, 9\n(5) - (4) = 1, left: 1, 2, 9\n(1) - (9) = -8, left: -8, 2\n(4) / (5) = 4/5, left: 4/5, 2, 9\n(4/5) / (2) = 2/5, left: 2/5, 9\n(5) / (4) = 5/4, left: 5/4, 2, 9\n(5/4) - (2) = -3/4, left: -3/4, 9\n(-3/4) - (9) = -39/4, left: -39/4\n(2) - (9) = -7, left: -7, 5/4\n(5) * (4) = 20, left: 20, 2, 9\n(2) + (9) = 11, left: 11, 5, 4\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((2 + 9) - 5))"}, {"input": "2 9 5 4\n", "output": "(4) / (9) = 4/9, left: 4/9, 2, 5\n(4/9) / (5) = 4/45, left: 4/45, 2\n(2) + (4/9) = 22/9, left: 22/9, 5\n(9) * (4) = 36, left: 36, 2, 5\n(4) - (9) = -5, left: -5, 2, 5\n(5) * (-5) = -25, left: -25, 2\n(9) / (4) = 9/4, left: 9/4, 2, 5\n(9/4) - (2) = 1/4, left: 1/4, 5\n(9) + (4) = 13, left: 13, 2, 5\n(2) / (5) = 2/5, left: 2/5, 13\n(9) + (5) = 14, left: 14, 2, 4\n(14) - (4) = 10, left: 10, 2\n(2) * (14) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 * (9 + 5)) - 4)"}, {"input": "2 9 5 4\n", "output": "(2) * (5) = 10, left: 10, 9, 4\n(4) / (10) = 2/5, left: 2/5, 9\n(9) / (4) = 9/4, left: 9/4, 10\n(9) / (10) = 9/10, left: 9/10, 4\n(2) / (5) = 2/5, left: 2/5, 9, 4\n(4) / (2/5) = 10, left: 10, 9\n(2/5) / (4) = 1/10, left: 1/10, 9\n(5) / (2) = 5/2, left: 5/2, 9, 4\n(2) - (5) = -3, left: -3, 9, 4\n(4) + (-3) = 1, left: 1, 9\n(9) + (1) = 10, left: 10\n(9) / (-3) = -3, left: -3, 4\n(9) + (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 + (2 - 5)))"}, {"input": "4 11 4 13\n", "output": "(11) - (4) = 7, left: 7, 4, 13\n(4) + (13) = 17, left: 17, 7\n(7) * (17) = 119, left: 119\n(17) / (7) = 17/7, left: 17/7\n(17) - (7) = 10, left: 10\n(7) + (17) = 24, left: 24\nreach 24! expression: ((11 - 4) + (4 + 13))"}, {"input": "4 11 4 13\n", "output": "(4) / (4) = 1, left: 1, 11, 13\n(11) * (13) = 143, left: 143, 1\n(11) / (13) = 11/13, left: 11/13, 1\n(11/13) - (1) = -2/13, left: -2/13\n(11) + (13) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((4 / 4) * (11 + 13))"}, {"input": "4 11 4 13\n", "output": "(13) / (11) = 13/11, left: 13/11, 4, 4\n(4) / (13/11) = 44/13, left: 44/13, 4\n(4) - (13/11) = 31/11, left: 31/11, 4\n(13) - (11) = 2, left: 2, 4, 4\n(4) + (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (4 + (13 - 11)))"}, {"input": "4 11 4 13\n", "output": "(4) / (11) = 4/11, left: 4/11, 4, 13\n(4/11) / (13) = 4/143, left: 4/143, 4\n(13) - (4/11) = 139/11, left: 139/11, 4\n(4/11) - (4) = -40/11, left: -40/11, 13\n(4) / (4/11) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (4 / (4 / 11)))"}, {"input": "4 11 4 13\n", "output": "(13) / (11) = 13/11, left: 13/11, 4, 4\n(4) / (13/11) = 44/13, left: 44/13, 4\n(4) * (4) = 16, left: 16, 13/11\n(4) / (4) = 1, left: 1, 13/11\n(4) - (4) = 0, left: 0, 13/11\n(0) / (13/11) = 0, left: 0\n(13) - (11) = 2, left: 2, 4, 4\n(4) - (2) = 2, left: 2, 4\n(4) + (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (4 + (13 - 11)))"}, {"input": "4 11 4 13\n", "output": "(4) / (4) = 1, left: 1, 11, 13\n(11) - (13) = -2, left: -2, 1\n(1) / (-2) = -1/2, left: -1/2\n(11) * (13) = 143, left: 143, 1\n(13) / (11) = 13/11, left: 13/11, 1\n(13/11) - (1) = 2/11, left: 2/11\n(11) / (13) = 11/13, left: 11/13, 1\n(1) / (11/13) = 13/11, left: 13/11\n(11) + (13) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((4 / 4) * (11 + 13))"}, {"input": "4 11 4 13\n", "output": "(4) / (11) = 4/11, left: 4/11, 4, 13\n(4/11) - (13) = -139/11, left: -139/11, 4\n(13) / (4/11) = 143/4, left: 143/4, 4\n(143/4) - (4) = 127/4, left: 127/4\n(13) - (4/11) = 139/11, left: 139/11, 4\n(139/11) / (4) = 139/44, left: 139/44\n(4) * (4/11) = 16/11, left: 16/11, 13\n(4/11) - (4) = -40/11, left: -40/11, 13\n(4) / (4/11) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (4 / (4 / 11)))"}, {"input": "4 11 4 13\n", "output": "(11) - (4) = 7, left: 7, 4, 13\n(4) + (13) = 17, left: 17, 7\n(7) / (17) = 7/17, left: 7/17\n(7) * (17) = 119, left: 119\n(17) / (7) = 17/7, left: 17/7\n(7) - (17) = -10, left: -10\n(17) - (7) = 10, left: 10\n(7) + (17) = 24, left: 24\nreach 24! expression: ((11 - 4) + (4 + 13))"}, {"input": "4 11 4 13\n", "output": "(11) - (4) = 7, left: 7, 4, 13\n(4) + (13) = 17, left: 17, 7\n(7) / (17) = 7/17, left: 7/17\n(7) * (17) = 119, left: 119\n(17) / (7) = 17/7, left: 17/7\n(7) - (17) = -10, left: -10\n(17) - (7) = 10, left: 10\n(7) + (17) = 24, left: 24\nreach 24! expression: ((11 - 4) + (4 + 13))"}, {"input": "4 11 4 13\n", "output": "(11) - (4) = 7, left: 7, 4, 13\n(4) + (13) = 17, left: 17, 7\n(7) / (17) = 7/17, left: 7/17\n(7) * (17) = 119, left: 119\n(17) / (7) = 17/7, left: 17/7\n(7) - (17) = -10, left: -10\n(17) - (7) = 10, left: 10\n(7) + (17) = 24, left: 24\nreach 24! expression: ((11 - 4) + (4 + 13))"}, {"input": "4 11 7 2\n", "output": "(4) + (2) = 6, left: 6, 11, 7\n(11) * (7) = 77, left: 77, 6\n(77) / (6) = 77/6, left: 77/6\n(7) - (11) = -4, left: -4, 6\n(11) - (7) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((4 + 2) * (11 - 7))"}, {"input": "4 11 7 2\n", "output": "(11) / (4) = 11/4, left: 11/4, 7, 2\n(11/4) / (7) = 11/28, left: 11/28, 2\n(2) + (11/4) = 19/4, left: 19/4, 7\n(11) - (4) = 7, left: 7, 7, 2\n(4) - (11) = -7, left: -7, 7, 2\n(4) * (11) = 44, left: 44, 7, 2\n(2) + (44) = 46, left: 46, 7\n(4) + (11) = 15, left: 15, 7, 2\n(2) + (15) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (2 + (4 + 11)))"}, {"input": "4 11 7 2\n", "output": "(4) + (2) = 6, left: 6, 11, 7\n(11) * (7) = 77, left: 77, 6\n(6) * (77) = 462, left: 462\n(6) - (77) = -71, left: -71\n(6) + (77) = 83, left: 83\n(7) - (11) = -4, left: -4, 6\n(6) / (-4) = -3/2, left: -3/2\n(6) * (-4) = -24, left: -24\n(11) - (7) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((4 + 2) * (11 - 7))"}, {"input": "4 11 7 2\n", "output": "(11) * (7) = 77, left: 77, 4, 2\n(4) * (77) = 308, left: 308, 2\n(2) / (4) = 1/2, left: 1/2, 77\n(77) / (2) = 77/2, left: 77/2, 4\n(77/2) / (4) = 77/8, left: 77/8\n(11) / (7) = 11/7, left: 11/7, 4, 2\n(4) * (11/7) = 44/7, left: 44/7, 2\n(11) + (7) = 18, left: 18, 4, 2\n(2) + (18) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 + (11 + 7)))"}, {"input": "4 11 7 2\n", "output": "(4) - (2) = 2, left: 2, 11, 7\n(7) / (11) = 7/11, left: 7/11, 2\n(11) + (2) = 13, left: 13, 7\n(11) * (2) = 22, left: 22, 7\n(4) * (2) = 8, left: 8, 11, 7\n(11) - (8) = 3, left: 3, 7\n(11) * (8) = 88, left: 88, 7\n(4) + (2) = 6, left: 6, 11, 7\n(11) + (6) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (11 + (4 + 2)))"}, {"input": "4 11 7 2\n", "output": "(7) / (11) = 7/11, left: 7/11, 4, 2\n(11) * (7) = 77, left: 77, 4, 2\n(4) * (2) = 8, left: 8, 77\n(11) / (7) = 11/7, left: 11/7, 4, 2\n(4) * (2) = 8, left: 8, 11/7\n(11/7) / (2) = 11/14, left: 11/14, 4\n(11) + (7) = 18, left: 18, 4, 2\n(4) / (2) = 2, left: 2, 18\n(4) + (2) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((11 + 7) + (4 + 2))"}, {"input": "9 1 5 13\n", "output": "(1) + (5) = 6, left: 6, 9, 13\n(9) * (6) = 54, left: 54, 13\n(9) * (13) = 117, left: 117, 6\n(9) - (13) = -4, left: -4, 6\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((1 + 5) * (13 - 9))"}, {"input": "9 1 5 13\n", "output": "(5) - (9) = -4, left: -4, 1, 13\n(1) * (13) = 13, left: 13, -4\n(9) * (5) = 45, left: 45, 1, 13\n(1) - (13) = -12, left: -12, 45\n(-12) - (45) = -57, left: -57\n(9) - (5) = 4, left: 4, 1, 13\n(1) - (4) = -3, left: -3, 13\n(1) + (5) = 6, left: 6, 9, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((1 + 5) * (13 - 9))"}, {"input": "9 1 5 13\n", "output": "(1) / (9) = 1/9, left: 1/9, 5, 13\n(1) / (13) = 1/13, left: 1/13, 9, 5\n(9) / (5) = 9/5, left: 9/5, 1/13\n(1/13) / (9/5) = 5/117, left: 5/117\n(13) - (5) = 8, left: 8, 9, 1\n(1) * (8) = 8, left: 8, 9\n(9) - (5) = 4, left: 4, 1, 13\n(13) - (9) = 4, left: 4, 1, 5\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((13 - 9) * (1 + 5))"}, {"input": "9 1 5 13\n", "output": "(1) + (5) = 6, left: 6, 9, 13\n(6) - (9) = -3, left: -3, 13\n(13) + (-3) = 10, left: 10\n(9) - (6) = 3, left: 3, 13\n(9) + (13) = 22, left: 22, 6\n(22) - (6) = 16, left: 16\n(9) - (13) = -4, left: -4, 6\n(6) / (-4) = -3/2, left: -3/2\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((1 + 5) * (13 - 9))"}, {"input": "9 1 5 13\n", "output": "(1) * (5) = 5, left: 5, 9, 13\n(13) - (9) = 4, left: 4, 5\n(1) / (5) = 1/5, left: 1/5, 9, 13\n(13) / (9) = 13/9, left: 13/9, 1/5\n(1/5) * (13/9) = 13/45, left: 13/45\n(9) - (1/5) = 44/5, left: 44/5, 13\n(5) - (1) = 4, left: 4, 9, 13\n(1) + (5) = 6, left: 6, 9, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((1 + 5) * (13 - 9))"}, {"input": "9 1 5 13\n", "output": "(9) + (5) = 14, left: 14, 1, 13\n(13) / (9) = 13/9, left: 13/9, 1, 5\n(5) + (13/9) = 58/9, left: 58/9, 1\n(1) + (58/9) = 67/9, left: 67/9\n(9) / (13) = 9/13, left: 9/13, 1, 5\n(9) + (13) = 22, left: 22, 1, 5\n(9) * (13) = 117, left: 117, 1, 5\n(13) - (9) = 4, left: 4, 1, 5\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((13 - 9) * (1 + 5))"}, {"input": "8 9 3 5\n", "output": "(5) / (3) = 5/3, left: 5/3, 8, 9\n(3) - (5) = -2, left: -2, 8, 9\n(9) - (-2) = 11, left: 11, 8\n(8) + (9) = 17, left: 17, 3, 5\n(8) * (9) = 72, left: 72, 3, 5\n(9) + (3) = 12, left: 12, 8, 5\n(12) / (5) = 12/5, left: 12/5, 8\n(9) * (3) = 27, left: 27, 8, 5\n(27) - (8) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((9 * 3) - 8))"}, {"input": "8 9 3 5\n", "output": "(8) / (5) = 8/5, left: 8/5, 9, 3\n(9) / (3) = 3, left: 3, 8/5\n(9) - (8/5) = 37/5, left: 37/5, 3\n(8) * (5) = 40, left: 40, 9, 3\n(40) / (3) = 40/3, left: 40/3, 9\n(9) + (3) = 12, left: 12, 40\n(9) / (40) = 9/40, left: 9/40, 3\n(8) - (5) = 3, left: 3, 9, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (8 - 5))"}, {"input": "8 9 3 5\n", "output": "(9) + (3) = 12, left: 12, 8, 5\n(12) / (5) = 12/5, left: 12/5, 8\n(5) - (8) = -3, left: -3, 12\n(12) / (8) = 3/2, left: 3/2, 5\n(9) / (3) = 3, left: 3, 8, 5\n(8) - (5) = 3, left: 3, 3\n(3) / (8) = 3/8, left: 3/8, 5\n(9) * (3) = 27, left: 27, 8, 5\n(8) - (5) = 3, left: 3, 27\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (8 - 5))"}, {"input": "8 9 3 5\n", "output": "(9) * (5) = 45, left: 45, 8, 3\n(8) + (3) = 11, left: 11, 45\n(5) / (9) = 5/9, left: 5/9, 8, 3\n(9) / (8) = 9/8, left: 9/8, 3, 5\n(8) / (9) = 8/9, left: 8/9, 3, 5\n(8) + (9) = 17, left: 17, 3, 5\n(8) - (9) = -1, left: -1, 3, 5\n(8) - (5) = 3, left: 3, 9, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (8 - 5))"}, {"input": "8 9 3 5\n", "output": "(8) * (3) = 24, left: 24, 9, 5\n(9) + (5) = 14, left: 14, 24\n(8) / (9) = 8/9, left: 8/9, 3, 5\n(5) / (8/9) = 45/8, left: 45/8, 3\n(9) - (3) = 6, left: 6, 8, 5\n(8) * (6) = 48, left: 48, 5\n(9) + (3) = 12, left: 12, 8, 5\n(9) * (3) = 27, left: 27, 8, 5\n(5) + (27) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((5 + (9 * 3)) - 8)"}, {"input": "8 9 3 5\n", "output": "(9) + (5) = 14, left: 14, 8, 3\n(9) / (5) = 9/5, left: 9/5, 8, 3\n(9) * (5) = 45, left: 45, 8, 3\n(8) / (45) = 8/45, left: 8/45, 3\n(5) / (9) = 5/9, left: 5/9, 8, 3\n(8) - (9) = -1, left: -1, 3, 5\n(9) - (8) = 1, left: 1, 3, 5\n(8) * (5) = 40, left: 40, 9, 3\n(3) / (9) = 1/3, left: 1/3, 40\n(40) / (9) = 40/9, left: 40/9, 3\n(3) * (40/9) = 40/3, left: 40/3\n(8) - (5) = 3, left: 3, 9, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (8 - 5))"}, {"input": "8 9 3 5\n", "output": "(3) / (8) = 3/8, left: 3/8, 9, 5\n(9) / (5) = 9/5, left: 9/5, 3/8\n(8) / (3) = 8/3, left: 8/3, 9, 5\n(8/3) - (5) = -7/3, left: -7/3, 9\n(9) * (-7/3) = -21, left: -21\n(8) * (3) = 24, left: 24, 9, 5\n(8) + (3) = 11, left: 11, 9, 5\n(8) * (9) = 72, left: 72, 3, 5\n(3) - (5) = -2, left: -2, 72\n(72) + (-2) = 70, left: 70\n(3) / (9) = 1/3, left: 1/3, 8, 5\n(9) * (3) = 27, left: 27, 8, 5\n(5) + (27) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((5 + (9 * 3)) - 8)"}, {"input": "8 9 3 5\n", "output": "(3) / (5) = 3/5, left: 3/5, 8, 9\n(5) / (3) = 5/3, left: 5/3, 8, 9\n(9) - (8) = 1, left: 1, 5/3\n(3) + (5) = 8, left: 8, 8, 9\n(8) + (9) = 17, left: 17, 3, 5\n(8) / (9) = 8/9, left: 8/9, 3, 5\n(5) / (3) = 5/3, left: 5/3, 8/9\n(8/9) + (5/3) = 23/9, left: 23/9\n(3) - (5) = -2, left: -2, 8/9\n(8) * (9) = 72, left: 72, 3, 5\n(9) + (3) = 12, left: 12, 8, 5\n(9) * (3) = 27, left: 27, 8, 5\n(27) - (8) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((9 * 3) - 8))"}, {"input": "2 4 4 5\n", "output": "(2) + (5) = 7, left: 7, 4, 4\n(4) + (7) = 11, left: 11, 4\n(4) + (11) = 15, left: 15\n(4) / (7) = 4/7, left: 4/7, 4\n(4/7) - (4) = -24/7, left: -24/7\n(4) - (7) = -3, left: -3, 4\n(4) + (-3) = 1, left: 1\n(7) - (4) = 3, left: 3, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (2 + 5)) - 4)"}, {"input": "2 4 4 5\n", "output": "(5) / (2) = 5/2, left: 5/2, 4, 4\n(5/2) - (4) = -3/2, left: -3/2, 4\n(-3/2) - (4) = -11/2, left: -11/2\n(4) * (5/2) = 10, left: 10, 4\n(4) - (4) = 0, left: 0, 5/2\n(4) / (4) = 1, left: 1, 5/2\n(5/2) / (4) = 5/8, left: 5/8, 4\n(2) + (5) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (2 + 5)) - 4)"}, {"input": "2 4 4 5\n", "output": "(4) / (5) = 4/5, left: 4/5, 2, 4\n(4) + (5) = 9, left: 9, 2, 4\n(4) - (5) = -1, left: -1, 2, 4\n(2) - (4) = -2, left: -2, 4, 5\n(2) + (4) = 6, left: 6, 4, 5\n(5) * (6) = 30, left: 30, 4\n(4) - (4) = 0, left: 0, 2, 5\n(4) + (4) = 8, left: 8, 2, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (5 - 2))"}, {"input": "2 4 4 5\n", "output": "(2) + (5) = 7, left: 7, 4, 4\n(7) - (4) = 3, left: 3, 4\n(4) * (3) = 12, left: 12\n(4) - (3) = 1, left: 1\n(4) * (7) = 28, left: 28, 4\n(4) * (28) = 112, left: 112\n(28) / (4) = 7, left: 7\n(4) + (28) = 32, left: 32\n(4) - (28) = -24, left: -24\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (2 + 5)) - 4)"}, {"input": "2 4 4 5\n", "output": "(2) - (4) = -2, left: -2, 4, 5\n(2) - (4) = -2, left: -2, 4, 5\n(-2) / (4) = -1/2, left: -1/2, 5\n(4) - (2) = 2, left: 2, 4, 5\n(4) - (4) = 0, left: 0, 2, 5\n(5) - (0) = 5, left: 5, 2\n(4) / (4) = 1, left: 1, 2, 5\n(4) + (4) = 8, left: 8, 2, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (5 - 2))"}, {"input": "2 4 4 5\n", "output": "(4) / (5) = 4/5, left: 4/5, 2, 4\n(4) - (2) = 2, left: 2, 4, 5\n(4) / (2) = 2, left: 2, 4, 5\n(4) + (2) = 6, left: 6, 5\n(2) + (4) = 6, left: 6, 4, 5\n(4) / (2) = 2, left: 2, 4, 5\n(4) + (2) = 6, left: 6, 5\n(2) / (4) = 1/2, left: 1/2, 4, 5\n(4) - (1/2) = 7/2, left: 7/2, 5\n(4) - (4) = 0, left: 0, 2, 5\n(4) / (4) = 1, left: 1, 2, 5\n(4) + (4) = 8, left: 8, 2, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (5 - 2))"}, {"input": "2 4 4 5\n", "output": "(5) / (4) = 5/4, left: 5/4, 2, 4\n(4) * (5) = 20, left: 20, 2, 4\n(4) / (2) = 2, left: 2, 20\n(5) / (4) = 5/4, left: 5/4, 2, 4\n(4) + (5) = 9, left: 9, 2, 4\n(2) - (4) = -2, left: -2, 4, 5\n(4) - (2) = 2, left: 2, 4, 5\n(5) - (2) = 3, left: 3, 4\n(2) + (4) = 6, left: 6, 4, 5\n(5) - (4) = 1, left: 1, 6\n(6) / (1) = 6, left: 6\n(4) + (4) = 8, left: 8, 2, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (5 - 2))"}, {"input": "2 13 13 13\n", "output": "(2) * (13) = 26, left: 26, 13, 13\n(2) / (13) = 2/13, left: 2/13, 13, 13\n(13) + (13) = 26, left: 26, 2/13\n(13) / (13) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 13 13 13\n", "output": "(13) + (13) = 26, left: 26, 2, 13\n(13) / (26) = 1/2, left: 1/2, 2\n(2) + (13) = 15, left: 15, 26\n(13) / (13) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 13 13 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 13, 13\n(13) / (2/13) = 169/2, left: 169/2, 13\n(2) + (13) = 15, left: 15, 13, 13\n(13) / (13) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 13 13 13\n", "output": "(13) + (13) = 26, left: 26, 2, 13\n(2) + (26) = 28, left: 28, 13\n(2) - (26) = -24, left: -24, 13\n(13) / (13) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 13 13 13\n", "output": "(2) * (13) = 26, left: 26, 13, 13\n(13) - (2) = 11, left: 11, 13, 13\n(2) / (13) = 2/13, left: 2/13, 13, 13\n(13) * (13) = 169, left: 169, 2, 13\n(13) / (13) = 1, left: 1, 2, 13\n(13) - (2) = 11, left: 11, 1\n(1) / (11) = 1/11, left: 1/11\n(2) / (13) = 2/13, left: 2/13, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 13 13 13\n", "output": "(13) - (13) = 0, left: 0, 2, 13\n(13) / (2) = 13/2, left: 13/2, 0\n(13) - (2) = 11, left: 11, 0\n(13) + (13) = 26, left: 26, 2, 13\n(13) + (26) = 39, left: 39, 2\n(13) - (2) = 11, left: 11, 26\n(13) / (13) = 1, left: 1, 2, 13\n(13) * (1) = 13, left: 13, 2\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 13 13 13\n", "output": "(13) - (2) = 11, left: 11, 13, 13\n(2) - (13) = -11, left: -11, 13, 13\n(13) + (-11) = 2, left: 2, 13\n(2) + (13) = 15, left: 15, 13, 13\n(13) + (15) = 28, left: 28, 13\n(2) * (13) = 26, left: 26, 13, 13\n(13) + (26) = 39, left: 39, 13\n(13) / (13) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 13 13 13\n", "output": "(2) - (13) = -11, left: -11, 13, 13\n(2) / (13) = 2/13, left: 2/13, 13, 13\n(13) - (2/13) = 167/13, left: 167/13, 13\n(13) - (2) = 11, left: 11, 13, 13\n(13) / (2) = 13/2, left: 13/2, 13, 13\n(13) * (13/2) = 169/2, left: 169/2, 13\n(13) + (169/2) = 195/2, left: 195/2\n(13) / (13) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 13 13 13\n", "output": "(13) + (13) = 26, left: 26, 2, 13\n(13) / (26) = 1/2, left: 1/2, 2\n(13) + (26) = 39, left: 39, 2\n(26) / (2) = 13, left: 13, 13\n(13) - (2) = 11, left: 11, 26\n(26) + (11) = 37, left: 37\n(13) / (13) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 6 12 5\n", "output": "(12) * (5) = 60, left: 60, 2, 6\n(6) + (60) = 66, left: 66, 2\n(66) / (2) = 33, left: 33\n(2) * (6) = 12, left: 12, 60\n(60) / (2) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: (((12 * 5) / 2) - 6)"}, {"input": "2 6 12 5\n", "output": "(2) + (12) = 14, left: 14, 6, 5\n(5) / (6) = 5/6, left: 5/6, 14\n(2) * (12) = 24, left: 24, 6, 5\n(6) * (5) = 30, left: 30, 24\n(6) - (5) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((2 * 12) * (6 - 5))"}, {"input": "2 6 12 5\n", "output": "(6) - (5) = 1, left: 1, 2, 12\n(1) - (12) = -11, left: -11, 2\n(-11) / (2) = -11/2, left: -11/2\n(2) - (-11) = 13, left: 13\n(12) / (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (12 / (6 - 5)))"}, {"input": "2 6 12 5\n", "output": "(6) - (5) = 1, left: 1, 2, 12\n(1) - (12) = -11, left: -11, 2\n(2) * (-11) = -22, left: -22\n(-11) - (2) = -13, left: -13\n(-11) / (2) = -11/2, left: -11/2\n(2) - (-11) = 13, left: 13\n(2) + (-11) = -9, left: -9\n(2) / (-11) = -2/11, left: -2/11\n(12) / (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (12 / (6 - 5)))"}, {"input": "2 6 12 5\n", "output": "(6) + (5) = 11, left: 11, 2, 12\n(2) - (12) = -10, left: -10, 11\n(11) / (-10) = -11/10, left: -11/10\n(2) * (11) = 22, left: 22, 12\n(6) * (5) = 30, left: 30, 2, 12\n(30) / (2) = 15, left: 15, 12\n(12) - (30) = -18, left: -18, 2\n(-18) / (2) = -9, left: -9\n(12) / (2) = 6, left: 6, 30\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (12 / 2))"}, {"input": "2 6 12 5\n", "output": "(12) * (5) = 60, left: 60, 2, 6\n(60) / (6) = 10, left: 10, 2\n(60) - (6) = 54, left: 54, 2\n(2) * (6) = 12, left: 12, 60\n(6) / (2) = 3, left: 3, 60\n(2) / (6) = 1/3, left: 1/3, 60\n(60) / (1/3) = 180, left: 180\n(60) / (2) = 30, left: 30, 6\n(30) / (6) = 5, left: 5\n(30) - (6) = 24, left: 24\nreach 24! expression: (((12 * 5) / 2) - 6)"}, {"input": "2 6 12 5\n", "output": "(2) + (12) = 14, left: 14, 6, 5\n(6) - (14) = -8, left: -8, 5\n(5) / (-8) = -5/8, left: -5/8\n(6) * (14) = 84, left: 84, 5\n(5) / (14) = 5/14, left: 5/14, 6\n(2) * (12) = 24, left: 24, 6, 5\n(5) - (6) = -1, left: -1, 24\n(-1) / (24) = -1/24, left: -1/24\n(6) - (5) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((2 * 12) * (6 - 5))"}, {"input": "2 6 12 5\n", "output": "(6) - (5) = 1, left: 1, 2, 12\n(1) - (12) = -11, left: -11, 2\n(2) * (-11) = -22, left: -22\n(-11) - (2) = -13, left: -13\n(-11) / (2) = -11/2, left: -11/2\n(2) - (-11) = 13, left: 13\n(2) + (-11) = -9, left: -9\n(2) / (-11) = -2/11, left: -2/11\n(12) / (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (12 / (6 - 5)))"}, {"input": "2 6 12 5\n", "output": "(6) - (5) = 1, left: 1, 2, 12\n(1) - (12) = -11, left: -11, 2\n(2) * (-11) = -22, left: -22\n(-11) - (2) = -13, left: -13\n(-11) / (2) = -11/2, left: -11/2\n(2) - (-11) = 13, left: 13\n(2) + (-11) = -9, left: -9\n(2) / (-11) = -2/11, left: -2/11\n(12) / (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (12 / (6 - 5)))"}, {"input": "7 8 10 11\n", "output": "(11) - (8) = 3, left: 3, 7, 10\n(11) / (8) = 11/8, left: 11/8, 7, 10\n(7) / (8) = 7/8, left: 7/8, 10, 11\n(10) * (11) = 110, left: 110, 7/8\n(10) + (11) = 21, left: 21, 7/8\n(21) / (7/8) = 24, left: 24\nreach 24! expression: ((10 + 11) / (7 / 8))"}, {"input": "7 8 10 11\n", "output": "(7) + (8) = 15, left: 15, 10, 11\n(10) * (15) = 150, left: 150, 11\n(8) / (7) = 8/7, left: 8/7, 10, 11\n(10) * (8/7) = 80/7, left: 80/7, 11\n(10) + (11) = 21, left: 21, 8/7\n(8/7) * (21) = 24, left: 24\nreach 24! expression: ((8 / 7) * (10 + 11))"}, {"input": "7 8 10 11\n", "output": "(7) + (10) = 17, left: 17, 8, 11\n(11) - (17) = -6, left: -6, 8\n(-6) / (8) = -3/4, left: -3/4\n(8) / (7) = 8/7, left: 8/7, 10, 11\n(10) + (11) = 21, left: 21, 8/7\n(8/7) * (21) = 24, left: 24\nreach 24! expression: ((8 / 7) * (10 + 11))"}, {"input": "7 8 10 11\n", "output": "(7) + (8) = 15, left: 15, 10, 11\n(15) - (10) = 5, left: 5, 11\n(11) * (5) = 55, left: 55\n(11) + (15) = 26, left: 26, 10\n(10) - (11) = -1, left: -1, 15\n(11) / (10) = 11/10, left: 11/10, 15\n(8) / (7) = 8/7, left: 8/7, 10, 11\n(8/7) / (11) = 8/77, left: 8/77, 10\n(10) + (11) = 21, left: 21, 8/7\n(8/7) * (21) = 24, left: 24\nreach 24! expression: ((8 / 7) * (10 + 11))"}, {"input": "7 8 10 11\n", "output": "(8) * (11) = 88, left: 88, 7, 10\n(88) - (10) = 78, left: 78, 7\n(7) * (88) = 616, left: 616, 10\n(11) / (8) = 11/8, left: 11/8, 7, 10\n(8) / (11) = 8/11, left: 8/11, 7, 10\n(10) - (8/11) = 102/11, left: 102/11, 7\n(7) / (8) = 7/8, left: 7/8, 10, 11\n(11) - (7/8) = 81/8, left: 81/8, 10\n(10) + (11) = 21, left: 21, 7/8\n(21) / (7/8) = 24, left: 24\nreach 24! expression: ((10 + 11) / (7 / 8))"}, {"input": "7 8 10 11\n", "output": "(8) / (10) = 4/5, left: 4/5, 7, 11\n(11) + (4/5) = 59/5, left: 59/5, 7\n(8) - (10) = -2, left: -2, 7, 11\n(10) - (7) = 3, left: 3, 8, 11\n(8) / (11) = 8/11, left: 8/11, 3\n(8) - (7) = 1, left: 1, 10, 11\n(7) + (8) = 15, left: 15, 10, 11\n(7) / (8) = 7/8, left: 7/8, 10, 11\n(10) + (11) = 21, left: 21, 7/8\n(21) / (7/8) = 24, left: 24\nreach 24! expression: ((10 + 11) / (7 / 8))"}, {"input": "7 8 10 11\n", "output": "(10) / (8) = 5/4, left: 5/4, 7, 11\n(7) - (5/4) = 23/4, left: 23/4, 11\n(10) - (8) = 2, left: 2, 7, 11\n(7) + (11) = 18, left: 18, 8, 10\n(18) / (10) = 9/5, left: 9/5, 8\n(11) - (7) = 4, left: 4, 8, 10\n(11) / (7) = 11/7, left: 11/7, 8, 10\n(8) / (7) = 8/7, left: 8/7, 10, 11\n(10) + (11) = 21, left: 21, 8/7\n(8/7) * (21) = 24, left: 24\nreach 24! expression: ((8 / 7) * (10 + 11))"}, {"input": "7 8 10 11\n", "output": "(7) - (10) = -3, left: -3, 8, 11\n(8) + (11) = 19, left: 19, -3\n(10) / (7) = 10/7, left: 10/7, 8, 11\n(10/7) / (8) = 5/28, left: 5/28, 11\n(7) + (10) = 17, left: 17, 8, 11\n(8) + (17) = 25, left: 25, 11\n(7) * (8) = 56, left: 56, 10, 11\n(8) / (7) = 8/7, left: 8/7, 10, 11\n(10) + (11) = 21, left: 21, 8/7\n(8/7) * (21) = 24, left: 24\nreach 24! expression: ((8 / 7) * (10 + 11))"}, {"input": "12 3 11 6\n", "output": "(11) - (12) = -1, left: -1, 3, 6\n(6) * (-1) = -6, left: -6, 3\n(3) * (-6) = -18, left: -18\n(3) - (-6) = 9, left: 9\n(6) / (-1) = -6, left: -6, 3\n(-6) / (3) = -2, left: -2\n(3) - (-6) = 9, left: 9\n(6) - (-1) = 7, left: 7, 3\n(3) - (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (11 - 12)))"}, {"input": "12 3 11 6\n", "output": "(12) - (6) = 6, left: 6, 3, 11\n(12) * (6) = 72, left: 72, 3, 11\n(3) + (72) = 75, left: 75, 11\n(75) - (11) = 64, left: 64\n(12) / (6) = 2, left: 2, 3, 11\n(11) - (2) = 9, left: 9, 3\n(11) * (2) = 22, left: 22, 3\n(3) - (11) = -8, left: -8, 12, 6\n(12) + (-8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (12 + (3 - 11)))"}, {"input": "12 3 11 6\n", "output": "(11) + (6) = 17, left: 17, 12, 3\n(11) / (6) = 11/6, left: 11/6, 12, 3\n(12) + (11/6) = 83/6, left: 83/6, 3\n(12) / (11/6) = 72/11, left: 72/11, 3\n(12) - (3) = 9, left: 9, 11/6\n(11) - (6) = 5, left: 5, 12, 3\n(3) - (5) = -2, left: -2, 12\n(12) - (-2) = 14, left: 14\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 6) - 3))"}, {"input": "12 3 11 6\n", "output": "(12) / (6) = 2, left: 2, 3, 11\n(12) - (6) = 6, left: 6, 3, 11\n(6) - (12) = -6, left: -6, 3, 11\n(12) + (6) = 18, left: 18, 3, 11\n(11) + (6) = 17, left: 17, 12, 3\n(11) * (6) = 66, left: 66, 12, 3\n(11) - (6) = 5, left: 5, 12, 3\n(3) - (5) = -2, left: -2, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 6) - 3))"}, {"input": "12 3 11 6\n", "output": "(12) - (3) = 9, left: 9, 11, 6\n(11) + (9) = 20, left: 20, 6\n(6) * (9) = 54, left: 54, 11\n(3) / (12) = 1/4, left: 1/4, 11, 6\n(1/4) / (11) = 1/44, left: 1/44, 6\n(12) * (3) = 36, left: 36, 11, 6\n(6) * (36) = 216, left: 216, 11\n(12) + (3) = 15, left: 15, 11, 6\n(15) - (11) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((12 + 3) - 11))"}, {"input": "6 6 4 6\n", "output": "(4) - (6) = -2, left: -2, 6, 6\n(-2) / (6) = -1/3, left: -1/3, 6\n(-2) - (6) = -8, left: -8, 6\n(-8) / (6) = -4/3, left: -4/3\n(6) - (-2) = 8, left: 8, 6\n(6) * (8) = 48, left: 48\n(6) * (-2) = -12, left: -12, 6\n(6) + (-12) = -6, left: -6\n(6) + (-2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (6 + (4 - 6)))"}, {"input": "6 6 4 6\n", "output": "(6) * (6) = 36, left: 36, 6, 4\n(36) - (4) = 32, left: 32, 6\n(6) + (32) = 38, left: 38\n(6) - (32) = -26, left: -26\n(6) * (32) = 192, left: 192\n(32) / (6) = 16/3, left: 16/3\n(32) - (6) = 26, left: 26\n(4) * (36) = 144, left: 144, 6\n(144) - (6) = 138, left: 138\n(144) / (6) = 24, left: 24\nreach 24! expression: ((4 * (6 * 6)) / 6)"}, {"input": "6 6 4 6\n", "output": "(6) * (6) = 36, left: 36, 6, 4\n(6) - (36) = -30, left: -30, 4\n(-30) - (4) = -34, left: -34\n(4) / (-30) = -2/15, left: -2/15\n(36) - (6) = 30, left: 30, 4\n(4) - (30) = -26, left: -26\n(4) * (30) = 120, left: 120\n(30) - (4) = 26, left: 26\n(6) / (36) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / (6 / (6 * 6)))"}, {"input": "6 6 4 6\n", "output": "(6) - (4) = 2, left: 2, 6, 6\n(2) / (6) = 1/3, left: 1/3, 6\n(6) / (1/3) = 18, left: 18\n(2) - (6) = -4, left: -4, 6\n(6) * (-4) = -24, left: -24\n(6) / (2) = 3, left: 3, 6\n(6) * (3) = 18, left: 18\n(6) + (2) = 8, left: 8, 6\n(6) - (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (6 - (6 - 4)))"}, {"input": "6 6 4 6\n", "output": "(6) * (6) = 36, left: 36, 6, 4\n(36) - (4) = 32, left: 32, 6\n(6) / (32) = 3/16, left: 3/16\n(6) + (32) = 38, left: 38\n(6) - (32) = -26, left: -26\n(6) * (32) = 192, left: 192\n(32) / (6) = 16/3, left: 16/3\n(32) - (6) = 26, left: 26\n(4) * (36) = 144, left: 144, 6\n(144) - (6) = 138, left: 138\n(144) / (6) = 24, left: 24\nreach 24! expression: ((4 * (6 * 6)) / 6)"}, {"input": "6 6 4 6\n", "output": "(6) * (6) = 36, left: 36, 6, 4\n(36) - (4) = 32, left: 32, 6\n(6) / (32) = 3/16, left: 3/16\n(6) + (32) = 38, left: 38\n(6) - (32) = -26, left: -26\n(6) * (32) = 192, left: 192\n(32) / (6) = 16/3, left: 16/3\n(32) - (6) = 26, left: 26\n(4) * (36) = 144, left: 144, 6\n(144) - (6) = 138, left: 138\n(144) / (6) = 24, left: 24\nreach 24! expression: ((4 * (6 * 6)) / 6)"}, {"input": "9 9 6 2\n", "output": "(9) + (6) = 15, left: 15, 9, 2\n(9) / (15) = 3/5, left: 3/5, 2\n(9) * (15) = 135, left: 135, 2\n(6) / (9) = 2/3, left: 2/3, 9, 2\n(9) + (2) = 11, left: 11, 2/3\n(2) / (2/3) = 3, left: 3, 9\n(9) * (3) = 27, left: 27\n(2) - (2/3) = 4/3, left: 4/3, 9\n(2) + (2/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (2 + (6 / 9)))"}, {"input": "9 9 6 2\n", "output": "(9) + (2) = 11, left: 11, 9, 6\n(9) / (2) = 9/2, left: 9/2, 9, 6\n(9) / (6) = 3/2, left: 3/2, 9, 2\n(2) / (9) = 2/9, left: 2/9, 3/2\n(9) * (6) = 54, left: 54, 9, 2\n(2) / (54) = 1/27, left: 1/27, 9\n(2) / (9) = 2/9, left: 2/9, 54\n(6) / (9) = 2/3, left: 2/3, 9, 2\n(2) + (2/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (2 + (6 / 9)))"}, {"input": "9 9 6 2\n", "output": "(9) * (9) = 81, left: 81, 6, 2\n(81) - (6) = 75, left: 75, 2\n(75) - (2) = 73, left: 73\n(9) / (9) = 1, left: 1, 6, 2\n(1) - (2) = -1, left: -1, 6\n(9) / (9) = 1, left: 1, 6, 2\n(2) - (1) = 1, left: 1, 6\n(9) + (9) = 18, left: 18, 6, 2\n(18) - (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((9 + 9) - 6))"}, {"input": "9 9 6 2\n", "output": "(9) / (6) = 3/2, left: 3/2, 9, 2\n(3/2) / (9) = 1/6, left: 1/6, 2\n(2) + (1/6) = 13/6, left: 13/6\n(9) * (6) = 54, left: 54, 9, 2\n(54) - (9) = 45, left: 45, 2\n(9) + (6) = 15, left: 15, 9, 2\n(15) / (9) = 5/3, left: 5/3, 2\n(6) - (9) = -3, left: -3, 9, 2\n(9) - (-3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 - (6 - 9)))"}, {"input": "9 9 6 2\n", "output": "(9) / (2) = 9/2, left: 9/2, 9, 6\n(6) + (9/2) = 21/2, left: 21/2, 9\n(9) - (21/2) = -3/2, left: -3/2\n(9) * (2) = 18, left: 18, 9, 6\n(6) + (18) = 24, left: 24, 9\n(9) + (2) = 11, left: 11, 9, 6\n(9) + (6) = 15, left: 15, 9, 2\n(6) - (9) = -3, left: -3, 9, 2\n(9) - (-3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 - (6 - 9)))"}, {"input": "9 9 6 2\n", "output": "(9) - (2) = 7, left: 7, 9, 6\n(6) - (7) = -1, left: -1, 9\n(2) - (9) = -7, left: -7, 9, 6\n(9) * (2) = 18, left: 18, 9, 6\n(6) - (9) = -3, left: -3, 18\n(9) / (2) = 9/2, left: 9/2, 9, 6\n(6) + (9/2) = 21/2, left: 21/2, 9\n(9) / (6) = 3/2, left: 3/2, 9, 2\n(3/2) / (9) = 1/6, left: 1/6, 2\n(9) * (6) = 54, left: 54, 9, 2\n(2) + (54) = 56, left: 56, 9\n(6) / (9) = 2/3, left: 2/3, 9, 2\n(2) + (2/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (2 + (6 / 9)))"}, {"input": "9 9 6 2\n", "output": "(2) - (9) = -7, left: -7, 9, 6\n(6) / (9) = 2/3, left: 2/3, -7\n(9) / (-7) = -9/7, left: -9/7, 6\n(9) / (2) = 9/2, left: 9/2, 9, 6\n(9) - (2) = 7, left: 7, 9, 6\n(6) - (7) = -1, left: -1, 9\n(9) * (2) = 18, left: 18, 9, 6\n(9) + (2) = 11, left: 11, 9, 6\n(9) / (11) = 9/11, left: 9/11, 6\n(9) + (6) = 15, left: 15, 9, 2\n(9) - (15) = -6, left: -6, 2\n(6) - (9) = -3, left: -3, 9, 2\n(9) - (-3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 - (6 - 9)))"}, {"input": "9 9 6 2\n", "output": "(9) * (9) = 81, left: 81, 6, 2\n(6) * (2) = 12, left: 12, 81\n(6) / (81) = 2/27, left: 2/27, 2\n(81) - (2) = 79, left: 79, 6\n(9) / (9) = 1, left: 1, 6, 2\n(6) * (1) = 6, left: 6, 2\n(9) - (9) = 0, left: 0, 6, 2\n(9) - (9) = 0, left: 0, 6, 2\n(0) - (2) = -2, left: -2, 6\n(0) / (6) = 0, left: 0, 2\n(9) + (9) = 18, left: 18, 6, 2\n(2) + (18) = 20, left: 20, 6\n(18) - (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((9 + 9) - 6))"}, {"input": "1 2 5 6\n", "output": "(5) - (1) = 4, left: 4, 2, 6\n(2) + (4) = 6, left: 6, 6\n(2) * (4) = 8, left: 8, 6\n(2) / (4) = 1/2, left: 1/2, 6\n(2) - (6) = -4, left: -4, 4\n(6) / (4) = 3/2, left: 3/2, 2\n(4) / (6) = 2/3, left: 2/3, 2\n(1) + (5) = 6, left: 6, 2, 6\n(6) - (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((1 + 5) * (6 - 2))"}, {"input": "1 2 5 6\n", "output": "(1) / (6) = 1/6, left: 1/6, 2, 5\n(2) + (1/6) = 13/6, left: 13/6, 5\n(6) - (1) = 5, left: 5, 2, 5\n(5) / (2) = 5/2, left: 5/2, 5\n(1) - (6) = -5, left: -5, 2, 5\n(-5) - (5) = -10, left: -10, 2\n(5) + (-5) = 0, left: 0, 2\n(1) + (6) = 7, left: 7, 2, 5\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (5 + (1 + 6)))"}, {"input": "1 2 5 6\n", "output": "(1) - (5) = -4, left: -4, 2, 6\n(2) - (6) = -4, left: -4, -4\n(-4) / (-4) = 1, left: 1\n(2) * (6) = 12, left: 12, -4\n(6) - (2) = 4, left: 4, -4\n(-4) / (6) = -2/3, left: -2/3, 2\n(1) + (5) = 6, left: 6, 2, 6\n(6) - (6) = 0, left: 0, 2\n(6) + (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (6 + (1 + 5)))"}, {"input": "1 2 5 6\n", "output": "(2) / (5) = 2/5, left: 2/5, 1, 6\n(6) / (2/5) = 15, left: 15, 1\n(1) + (6) = 7, left: 7, 2/5\n(1) * (6) = 6, left: 6, 2/5\n(6) / (2/5) = 15, left: 15\n(2) - (5) = -3, left: -3, 1, 6\n(1) * (6) = 6, left: 6, -3\n(1) - (6) = -5, left: -5, -3\n(1) - (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 - (2 - 5)))"}, {"input": "1 2 5 6\n", "output": "(6) / (2) = 3, left: 3, 1, 5\n(2) / (6) = 1/3, left: 1/3, 1, 5\n(5) * (1/3) = 5/3, left: 5/3, 1\n(2) - (6) = -4, left: -4, 1, 5\n(-4) - (5) = -9, left: -9, 1\n(2) * (6) = 12, left: 12, 1, 5\n(6) - (2) = 4, left: 4, 1, 5\n(4) / (5) = 4/5, left: 4/5, 1\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((6 - 2) * (1 + 5))"}, {"input": "1 2 5 6\n", "output": "(6) / (2) = 3, left: 3, 1, 5\n(1) * (3) = 3, left: 3, 5\n(1) + (3) = 4, left: 4, 5\n(4) - (5) = -1, left: -1\n(2) / (6) = 1/3, left: 1/3, 1, 5\n(5) - (1/3) = 14/3, left: 14/3, 1\n(2) - (6) = -4, left: -4, 1, 5\n(1) + (-4) = -3, left: -3, 5\n(5) * (-3) = -15, left: -15\n(2) * (6) = 12, left: 12, 1, 5\n(1) + (12) = 13, left: 13, 5\n(6) - (2) = 4, left: 4, 1, 5\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((6 - 2) * (1 + 5))"}, {"input": "1 2 5 6\n", "output": "(1) - (5) = -4, left: -4, 2, 6\n(2) + (6) = 8, left: 8, -4\n(6) - (2) = 4, left: 4, -4\n(-4) + (4) = 0, left: 0\n(-4) / (4) = -1, left: -1\n(6) / (2) = 3, left: 3, -4\n(-4) / (6) = -2/3, left: -2/3, 2\n(-4) - (6) = -10, left: -10, 2\n(-4) - (2) = -6, left: -6, 6\n(-6) / (6) = -1, left: -1\n(1) + (5) = 6, left: 6, 2, 6\n(6) - (6) = 0, left: 0, 2\n(6) + (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (6 + (1 + 5)))"}, {"input": "2 3 8 1\n", "output": "(3) - (8) = -5, left: -5, 2, 1\n(1) - (-5) = 6, left: 6, 2\n(2) - (6) = -4, left: -4\n(1) / (-5) = -1/5, left: -1/5, 2\n(2) / (-1/5) = -10, left: -10\n(8) / (3) = 8/3, left: 8/3, 2, 1\n(8/3) / (2) = 4/3, left: 4/3, 1\n(3) * (8) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (2 - 1))"}, {"input": "2 3 8 1\n", "output": "(3) + (1) = 4, left: 4, 2, 8\n(2) / (4) = 1/2, left: 1/2, 8\n(4) - (2) = 2, left: 2, 8\n(2) + (4) = 6, left: 6, 8\n(2) * (4) = 8, left: 8, 8\n(8) - (8) = 0, left: 0\n(2) * (8) = 16, left: 16, 4\n(4) + (16) = 20, left: 20\n(8) - (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((3 + 1) * (8 - 2))"}, {"input": "2 3 8 1\n", "output": "(2) * (8) = 16, left: 16, 3, 1\n(8) / (2) = 4, left: 4, 3, 1\n(4) - (1) = 3, left: 3, 3\n(1) - (4) = -3, left: -3, 3\n(1) * (4) = 4, left: 4, 3\n(2) / (8) = 1/4, left: 1/4, 3, 1\n(8) - (2) = 6, left: 6, 3, 1\n(1) / (6) = 1/6, left: 1/6, 3\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((8 - 2) * (3 + 1))"}, {"input": "2 3 8 1\n", "output": "(1) / (8) = 1/8, left: 1/8, 2, 3\n(2) / (1/8) = 16, left: 16, 3\n(8) * (1) = 8, left: 8, 2, 3\n(8) / (1) = 8, left: 8, 2, 3\n(3) / (2) = 3/2, left: 3/2, 8\n(8) + (1) = 9, left: 9, 2, 3\n(3) * (9) = 27, left: 27, 2\n(9) - (3) = 6, left: 6, 2\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 + (8 + 1)))"}, {"input": "2 3 8 1\n", "output": "(2) + (3) = 5, left: 5, 8, 1\n(2) - (3) = -1, left: -1, 8, 1\n(1) / (-1) = -1, left: -1, 8\n(3) / (2) = 3/2, left: 3/2, 8, 1\n(1) - (8) = -7, left: -7, 3/2\n(2) * (3) = 6, left: 6, 8, 1\n(8) + (6) = 14, left: 14, 1\n(2) / (3) = 2/3, left: 2/3, 8, 1\n(1) - (2/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (1 - (2 / 3)))"}, {"input": "2 3 8 1\n", "output": "(1) / (8) = 1/8, left: 1/8, 2, 3\n(3) + (1/8) = 25/8, left: 25/8, 2\n(3) - (2) = 1, left: 1, 1/8\n(8) * (1) = 8, left: 8, 2, 3\n(2) + (8) = 10, left: 10, 3\n(2) + (3) = 5, left: 5, 8\n(2) / (3) = 2/3, left: 2/3, 8\n(3) * (8) = 24, left: 24, 2\n(8) / (1) = 8, left: 8, 2, 3\n(8) - (3) = 5, left: 5, 2\n(2) / (5) = 2/5, left: 2/5\n(8) + (1) = 9, left: 9, 2, 3\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 + (8 + 1)))"}, {"input": "2 3 8 1\n", "output": "(2) * (8) = 16, left: 16, 3, 1\n(1) - (16) = -15, left: -15, 3\n(8) / (2) = 4, left: 4, 3, 1\n(3) + (1) = 4, left: 4, 4\n(1) - (3) = -2, left: -2, 4\n(2) - (8) = -6, left: -6, 3, 1\n(1) / (-6) = -1/6, left: -1/6, 3\n(3) - (-1/6) = 19/6, left: 19/6\n(2) / (8) = 1/4, left: 1/4, 3, 1\n(1) - (3) = -2, left: -2, 1/4\n(8) - (2) = 6, left: 6, 3, 1\n(1) + (6) = 7, left: 7, 3\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((8 - 2) * (3 + 1))"}, {"input": "5 6 9 8\n", "output": "(6) / (8) = 3/4, left: 3/4, 5, 9\n(8) / (6) = 4/3, left: 4/3, 5, 9\n(9) - (5) = 4, left: 4, 4/3\n(6) + (8) = 14, left: 14, 5, 9\n(9) * (14) = 126, left: 126, 5\n(6) * (8) = 48, left: 48, 5, 9\n(5) - (48) = -43, left: -43, 9\n(6) + (9) = 15, left: 15, 5, 8\n(15) / (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((6 + 9) / 5))"}, {"input": "5 6 9 8\n", "output": "(6) / (8) = 3/4, left: 3/4, 5, 9\n(9) * (3/4) = 27/4, left: 27/4, 5\n(8) - (6) = 2, left: 2, 5, 9\n(6) * (8) = 48, left: 48, 5, 9\n(5) / (48) = 5/48, left: 5/48, 9\n(6) + (8) = 14, left: 14, 5, 9\n(5) + (9) = 14, left: 14, 14\n(8) - (9) = -1, left: -1, 5, 6\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (8 - 9)))"}, {"input": "5 6 9 8\n", "output": "(5) - (6) = -1, left: -1, 9, 8\n(9) * (8) = 72, left: 72, -1\n(6) / (5) = 6/5, left: 6/5, 9, 8\n(9) + (6/5) = 51/5, left: 51/5, 8\n(5) / (6) = 5/6, left: 5/6, 9, 8\n(5) * (6) = 30, left: 30, 9, 8\n(6) * (9) = 54, left: 54, 5, 8\n(6) + (9) = 15, left: 15, 5, 8\n(15) / (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((6 + 9) / 5))"}, {"input": "5 6 9 8\n", "output": "(6) / (9) = 2/3, left: 2/3, 5, 8\n(2/3) / (5) = 2/15, left: 2/15, 8\n(8) / (2/15) = 60, left: 60\n(5) / (8) = 5/8, left: 5/8, 2/3\n(9) / (6) = 3/2, left: 3/2, 5, 8\n(5) * (8) = 40, left: 40, 3/2\n(6) - (9) = -3, left: -3, 5, 8\n(6) + (9) = 15, left: 15, 5, 8\n(8) * (15) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((8 * (6 + 9)) / 5)"}, {"input": "5 6 9 8\n", "output": "(6) / (5) = 6/5, left: 6/5, 9, 8\n(9) * (8) = 72, left: 72, 6/5\n(5) * (6) = 30, left: 30, 9, 8\n(5) / (6) = 5/6, left: 5/6, 9, 8\n(5) - (6) = -1, left: -1, 9, 8\n(8) / (-1) = -8, left: -8, 9\n(9) / (8) = 9/8, left: 9/8, 5, 6\n(9) - (8) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (9 - 8)))"}, {"input": "5 6 9 8\n", "output": "(6) / (5) = 6/5, left: 6/5, 9, 8\n(9) * (8) = 72, left: 72, 6/5\n(5) * (6) = 30, left: 30, 9, 8\n(5) / (6) = 5/6, left: 5/6, 9, 8\n(8) + (5/6) = 53/6, left: 53/6, 9\n(6) - (5) = 1, left: 1, 9, 8\n(5) + (6) = 11, left: 11, 9, 8\n(9) * (8) = 72, left: 72, 5, 6\n(9) / (8) = 9/8, left: 9/8, 5, 6\n(8) / (9) = 8/9, left: 8/9, 5, 6\n(5) + (6) = 11, left: 11, 8/9\n(9) - (8) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (9 - 8)))"}, {"input": "5 6 9 8\n", "output": "(6) - (8) = -2, left: -2, 5, 9\n(-2) - (5) = -7, left: -7, 9\n(9) / (-7) = -9/7, left: -9/7\n(8) - (6) = 2, left: 2, 5, 9\n(5) - (9) = -4, left: -4, 2\n(6) * (8) = 48, left: 48, 5, 9\n(5) / (9) = 5/9, left: 5/9, 48\n(5) + (48) = 53, left: 53, 9\n(53) / (9) = 53/9, left: 53/9\n(8) / (6) = 4/3, left: 4/3, 5, 9\n(4/3) / (9) = 4/27, left: 4/27, 5\n(8) - (9) = -1, left: -1, 5, 6\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (8 - 9)))"}, {"input": "5 6 9 8\n", "output": "(9) - (6) = 3, left: 3, 5, 8\n(5) * (8) = 40, left: 40, 3\n(3) / (40) = 3/40, left: 3/40\n(6) / (9) = 2/3, left: 2/3, 5, 8\n(9) / (6) = 3/2, left: 3/2, 5, 8\n(6) - (9) = -3, left: -3, 5, 8\n(5) / (-3) = -5/3, left: -5/3, 8\n(8) * (-5/3) = -40/3, left: -40/3\n(5) * (-3) = -15, left: -15, 8\n(8) - (-3) = 11, left: 11, 5\n(8) / (-3) = -8/3, left: -8/3, 5\n(6) + (9) = 15, left: 15, 5, 8\n(8) * (15) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((8 * (6 + 9)) / 5)"}, {"input": "5 6 9 8\n", "output": "(5) - (6) = -1, left: -1, 9, 8\n(8) - (9) = -1, left: -1, -1\n(9) + (8) = 17, left: 17, -1\n(-1) - (8) = -9, left: -9, 9\n(6) - (5) = 1, left: 1, 9, 8\n(6) / (5) = 6/5, left: 6/5, 9, 8\n(5) * (6) = 30, left: 30, 9, 8\n(5) + (6) = 11, left: 11, 9, 8\n(8) - (11) = -3, left: -3, 9\n(9) - (11) = -2, left: -2, 8\n(8) + (-2) = 6, left: 6\n(6) + (9) = 15, left: 15, 5, 8\n(15) / (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((6 + 9) / 5))"}, {"input": "5 6 9 8\n", "output": "(6) / (8) = 3/4, left: 3/4, 5, 9\n(3/4) / (5) = 3/20, left: 3/20, 9\n(8) - (6) = 2, left: 2, 5, 9\n(8) / (6) = 4/3, left: 4/3, 5, 9\n(5) * (9) = 45, left: 45, 4/3\n(4/3) * (45) = 60, left: 60\n(6) * (8) = 48, left: 48, 5, 9\n(6) - (8) = -2, left: -2, 5, 9\n(5) / (-2) = -5/2, left: -5/2, 9\n(5) - (-2) = 7, left: 7, 9\n(9) - (7) = 2, left: 2\n(6) + (9) = 15, left: 15, 5, 8\n(15) / (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((6 + 9) / 5))"}, {"input": "4 9 10 12\n", "output": "(12) / (10) = 6/5, left: 6/5, 4, 9\n(9) / (4) = 9/4, left: 9/4, 6/5\n(12) - (10) = 2, left: 2, 4, 9\n(10) * (12) = 120, left: 120, 4, 9\n(9) - (4) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (9 - 4))"}, {"input": "4 9 10 12\n", "output": "(9) * (12) = 108, left: 108, 4, 10\n(10) + (12) = 22, left: 22, 4, 9\n(4) - (22) = -18, left: -18, 9\n(10) * (12) = 120, left: 120, 4, 9\n(9) - (4) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (9 - 4))"}, {"input": "4 9 10 12\n", "output": "(9) - (12) = -3, left: -3, 4, 10\n(10) - (4) = 6, left: 6, -3\n(9) + (12) = 21, left: 21, 4, 10\n(12) - (9) = 3, left: 3, 4, 10\n(4) + (10) = 14, left: 14, 3\n(10) * (3) = 30, left: 30, 4\n(9) - (4) = 5, left: 5, 10, 12\n(10) - (5) = 5, left: 5, 12\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 / (9 - 4)))"}, {"input": "4 9 10 12\n", "output": "(9) * (12) = 108, left: 108, 4, 10\n(9) + (12) = 21, left: 21, 4, 10\n(9) - (12) = -3, left: -3, 4, 10\n(4) * (10) = 40, left: 40, -3\n(-3) / (40) = -3/40, left: -3/40\n(9) / (12) = 3/4, left: 3/4, 4, 10\n(10) / (3/4) = 40/3, left: 40/3, 4\n(9) - (4) = 5, left: 5, 10, 12\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (9 - 4))"}, {"input": "4 9 10 12\n", "output": "(4) / (12) = 1/3, left: 1/3, 9, 10\n(10) - (1/3) = 29/3, left: 29/3, 9\n(10) * (1/3) = 10/3, left: 10/3, 9\n(4) * (12) = 48, left: 48, 9, 10\n(4) + (12) = 16, left: 16, 9, 10\n(12) / (4) = 3, left: 3, 9, 10\n(10) + (3) = 13, left: 13, 9\n(10) * (12) = 120, left: 120, 4, 9\n(9) - (4) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (9 - 4))"}, {"input": "4 9 10 12\n", "output": "(12) / (9) = 4/3, left: 4/3, 4, 10\n(9) / (12) = 3/4, left: 3/4, 4, 10\n(9) * (12) = 108, left: 108, 4, 10\n(4) * (10) = 40, left: 40, 108\n(108) - (10) = 98, left: 98, 4\n(9) - (12) = -3, left: -3, 4, 10\n(-3) / (10) = -3/10, left: -3/10, 4\n(10) * (12) = 120, left: 120, 4, 9\n(9) - (4) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (9 - 4))"}, {"input": "4 9 10 12\n", "output": "(12) / (9) = 4/3, left: 4/3, 4, 10\n(9) * (12) = 108, left: 108, 4, 10\n(12) - (9) = 3, left: 3, 4, 10\n(10) - (12) = -2, left: -2, 4, 9\n(12) / (10) = 6/5, left: 6/5, 4, 9\n(12) - (10) = 2, left: 2, 4, 9\n(9) * (2) = 18, left: 18, 4\n(10) * (12) = 120, left: 120, 4, 9\n(9) - (4) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (9 - 4))"}, {"input": "12 13 13 1\n", "output": "(12) / (13) = 12/13, left: 12/13, 13, 1\n(13) + (1) = 14, left: 14, 12/13\n(12) / (1) = 12, left: 12, 13, 13\n(13) / (13) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "12 13 13 1\n", "output": "(13) / (1) = 13, left: 13, 12, 13\n(13) * (13) = 169, left: 169, 12\n(13) / (12) = 13/12, left: 13/12, 13, 1\n(13) / (13) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "12 13 13 1\n", "output": "(13) / (13) = 1, left: 1, 12, 1\n(1) - (1) = 0, left: 0, 12\n(0) / (12) = 0, left: 0\n(1) / (1) = 1, left: 1, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "12 13 13 1\n", "output": "(13) * (1) = 13, left: 13, 12, 13\n(12) - (13) = -1, left: -1, 13\n(1) / (13) = 1/13, left: 1/13, 12, 13\n(13) / (13) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "12 13 13 1\n", "output": "(13) / (13) = 1, left: 1, 12, 1\n(1) - (1) = 0, left: 0, 12\n(12) + (0) = 12, left: 12\n(12) - (0) = 12, left: 12\n(1) / (1) = 1, left: 1, 12\n(12) - (1) = 11, left: 11\n(12) * (1) = 12, left: 12\n(12) / (1) = 12, left: 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "12 13 13 1\n", "output": "(12) + (13) = 25, left: 25, 13, 1\n(12) - (13) = -1, left: -1, 13, 1\n(13) * (-1) = -13, left: -13, 1\n(1) * (-13) = -13, left: -13\n(12) / (13) = 12/13, left: 12/13, 13, 1\n(12/13) - (13) = -157/13, left: -157/13, 1\n(-157/13) - (1) = -170/13, left: -170/13\n(13) / (13) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "12 13 13 1\n", "output": "(13) - (1) = 12, left: 12, 12, 13\n(1) / (13) = 1/13, left: 1/13, 12, 13\n(12) - (13) = -1, left: -1, 13, 1\n(1) * (-1) = -1, left: -1, 13\n(1) / (12) = 1/12, left: 1/12, 13, 13\n(12) / (1) = 12, left: 12, 13, 13\n(12) + (1) = 13, left: 13, 13, 13\n(13) / (13) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "12 13 13 1\n", "output": "(1) - (13) = -12, left: -12, 12, 13\n(13) + (-12) = 1, left: 1, 12\n(13) - (1) = 12, left: 12, 12, 13\n(12) - (13) = -1, left: -1, 12\n(13) / (12) = 13/12, left: 13/12, 13, 1\n(13) * (1) = 13, left: 13, 13/12\n(12) * (13) = 156, left: 156, 13, 1\n(13) / (13) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "12 13 13 1\n", "output": "(13) / (1) = 13, left: 13, 12, 13\n(1) - (13) = -12, left: -12, 12, 13\n(13) - (12) = 1, left: 1, 13, 1\n(13) / (12) = 13/12, left: 13/12, 13, 1\n(13) / (12) = 13/12, left: 13/12, 13, 1\n(1) - (13/12) = -1/12, left: -1/12, 13\n(12) / (13) = 12/13, left: 12/13, 13, 1\n(13) / (13) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "13 5 12 5\n", "output": "(5) / (5) = 1, left: 1, 13, 12\n(12) * (1) = 12, left: 12, 13\n(12) - (13) = -1, left: -1\n(13) - (12) = 1, left: 1\n(12) - (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (12 - (5 / 5)))"}, {"input": "13 5 12 5\n", "output": "(5) * (12) = 60, left: 60, 13, 5\n(5) + (12) = 17, left: 17, 13, 5\n(13) / (17) = 13/17, left: 13/17, 5\n(5) / (5) = 1, left: 1, 13, 12\n(13) + (12) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (5 / 5))"}, {"input": "13 5 12 5\n", "output": "(5) - (5) = 0, left: 0, 13, 12\n(0) / (13) = 0, left: 0, 12\n(12) + (0) = 12, left: 12\n(12) + (0) = 12, left: 12, 13\n(12) / (13) = 12/13, left: 12/13\n(0) - (12) = -12, left: -12, 13\n(12) - (0) = 12, left: 12, 13\n(5) / (5) = 1, left: 1, 13, 12\n(12) - (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (12 - (5 / 5)))"}, {"input": "13 5 12 5\n", "output": "(5) - (5) = 0, left: 0, 13, 12\n(5) - (5) = 0, left: 0, 13, 12\n(12) - (13) = -1, left: -1, 0\n(-1) - (0) = -1, left: -1\n(0) - (12) = -12, left: -12, 13\n(13) + (0) = 13, left: 13, 12\n(13) - (0) = 13, left: 13, 12\n(5) / (5) = 1, left: 1, 13, 12\n(13) - (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (13 - (5 / 5)))"}, {"input": "13 5 12 5\n", "output": "(13) * (5) = 65, left: 65, 12, 5\n(5) - (13) = -8, left: -8, 12, 5\n(13) + (5) = 18, left: 18, 12, 5\n(13) - (5) = 8, left: 8, 12, 5\n(12) * (5) = 60, left: 60, 13, 5\n(5) / (12) = 5/12, left: 5/12, 13, 5\n(12) - (5) = 7, left: 7, 13, 5\n(5) * (5) = 25, left: 25, 13, 12\n(12) - (13) = -1, left: -1, 25\n(25) + (-1) = 24, left: 24\nreach 24! expression: ((5 * 5) + (12 - 13))"}, {"input": "13 5 12 5\n", "output": "(5) * (12) = 60, left: 60, 13, 5\n(12) - (5) = 7, left: 7, 13, 5\n(5) / (12) = 5/12, left: 5/12, 13, 5\n(5) - (5/12) = 55/12, left: 55/12, 13\n(5) + (12) = 17, left: 17, 13, 5\n(13) + (17) = 30, left: 30, 5\n(5) - (12) = -7, left: -7, 13, 5\n(5) / (5) = 1, left: 1, 13, 12\n(13) + (12) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (5 / 5))"}, {"input": "13 5 12 5\n", "output": "(5) / (5) = 1, left: 1, 13, 12\n(12) + (1) = 13, left: 13, 13\n(13) + (13) = 26, left: 26\n(12) * (1) = 12, left: 12, 13\n(1) / (12) = 1/12, left: 1/12, 13\n(13) / (1/12) = 156, left: 156\n(12) / (1) = 12, left: 12, 13\n(13) + (12) = 25, left: 25\n(12) - (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (12 - (5 / 5)))"}, {"input": "10 9 6 2\n", "output": "(6) - (9) = -3, left: -3, 10, 2\n(10) / (2) = 5, left: 5, -3\n(-3) / (5) = -3/5, left: -3/5\n(-3) - (5) = -8, left: -8\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((6 - 9) * (2 - 10))"}, {"input": "10 9 6 2\n", "output": "(10) / (9) = 10/9, left: 10/9, 6, 2\n(10) + (9) = 19, left: 19, 6, 2\n(9) / (10) = 9/10, left: 9/10, 6, 2\n(10) + (6) = 16, left: 16, 9, 2\n(9) - (2) = 7, left: 7, 16\n(10) * (6) = 60, left: 60, 9, 2\n(9) + (60) = 69, left: 69, 2\n(10) - (2) = 8, left: 8, 9, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((10 - 2) * (9 - 6))"}, {"input": "10 9 6 2\n", "output": "(10) * (2) = 20, left: 20, 9, 6\n(6) / (9) = 2/3, left: 2/3, 20\n(20) + (2/3) = 62/3, left: 62/3\n(6) - (9) = -3, left: -3, 20\n(9) + (6) = 15, left: 15, 20\n(10) / (2) = 5, left: 5, 9, 6\n(6) / (5) = 6/5, left: 6/5, 9\n(9) * (6/5) = 54/5, left: 54/5\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (10 / 2)))"}, {"input": "10 9 6 2\n", "output": "(10) * (2) = 20, left: 20, 9, 6\n(6) / (20) = 3/10, left: 3/10, 9\n(3/10) / (9) = 1/30, left: 1/30\n(6) + (20) = 26, left: 26, 9\n(9) / (20) = 9/20, left: 9/20, 6\n(9) * (20) = 180, left: 180, 6\n(10) + (2) = 12, left: 12, 9, 6\n(10) / (2) = 5, left: 5, 9, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (10 / 2)))"}, {"input": "10 9 6 2\n", "output": "(6) - (9) = -3, left: -3, 10, 2\n(10) / (2) = 5, left: 5, -3\n(-3) / (5) = -3/5, left: -3/5\n(-3) - (5) = -8, left: -8\n(5) - (-3) = 8, left: 8\n(5) / (-3) = -5/3, left: -5/3\n(-3) + (5) = 2, left: 2\n(2) - (10) = -8, left: -8, -3\n(-8) / (-3) = 8/3, left: 8/3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((6 - 9) * (2 - 10))"}, {"input": "10 9 6 2\n", "output": "(9) + (2) = 11, left: 11, 10, 6\n(6) - (10) = -4, left: -4, 11\n(9) * (2) = 18, left: 18, 10, 6\n(9) - (2) = 7, left: 7, 10, 6\n(10) + (6) = 16, left: 16, 7\n(9) / (2) = 9/2, left: 9/2, 10, 6\n(10) + (9/2) = 29/2, left: 29/2, 6\n(10) - (2) = 8, left: 8, 9, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((10 - 2) * (9 - 6))"}, {"input": "10 9 6 2\n", "output": "(10) + (9) = 19, left: 19, 6, 2\n(10) * (9) = 90, left: 90, 6, 2\n(9) * (2) = 18, left: 18, 10, 6\n(10) / (18) = 5/9, left: 5/9, 6\n(2) / (9) = 2/9, left: 2/9, 10, 6\n(9) + (2) = 11, left: 11, 10, 6\n(6) / (11) = 6/11, left: 6/11, 10\n(9) / (2) = 9/2, left: 9/2, 10, 6\n(2) - (9) = -7, left: -7, 10, 6\n(10) - (6) = 4, left: 4, 9, 2\n(6) / (10) = 3/5, left: 3/5, 9, 2\n(10) - (2) = 8, left: 8, 9, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((10 - 2) * (9 - 6))"}, {"input": "10 9 6 2\n", "output": "(6) - (9) = -3, left: -3, 10, 2\n(10) / (2) = 5, left: 5, -3\n(-3) / (5) = -3/5, left: -3/5\n(-3) - (5) = -8, left: -8\n(5) - (-3) = 8, left: 8\n(-3) * (5) = -15, left: -15\n(5) / (-3) = -5/3, left: -5/3\n(-3) + (5) = 2, left: 2\n(2) - (10) = -8, left: -8, -3\n(-8) / (-3) = 8/3, left: 8/3\n(-3) - (-8) = 5, left: 5\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((6 - 9) * (2 - 10))"}, {"input": "10 9 6 2\n", "output": "(6) - (9) = -3, left: -3, 10, 2\n(10) / (2) = 5, left: 5, -3\n(-3) / (5) = -3/5, left: -3/5\n(-3) - (5) = -8, left: -8\n(5) - (-3) = 8, left: 8\n(-3) * (5) = -15, left: -15\n(5) / (-3) = -5/3, left: -5/3\n(-3) + (5) = 2, left: 2\n(2) - (10) = -8, left: -8, -3\n(-8) / (-3) = 8/3, left: 8/3\n(-3) - (-8) = 5, left: 5\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((6 - 9) * (2 - 10))"}, {"input": "13 8 2 4\n", "output": "(8) / (13) = 8/13, left: 8/13, 2, 4\n(13) / (8) = 13/8, left: 13/8, 2, 4\n(13/8) / (4) = 13/32, left: 13/32, 2\n(4) / (13/8) = 32/13, left: 32/13, 2\n(32/13) / (2) = 16/13, left: 16/13\n(13) - (8) = 5, left: 5, 2, 4\n(2) - (4) = -2, left: -2, 5\n(13) * (8) = 104, left: 104, 2, 4\n(104) / (4) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 8) / 4) - 2)"}, {"input": "13 8 2 4\n", "output": "(13) + (2) = 15, left: 15, 8, 4\n(15) - (8) = 7, left: 7, 4\n(7) / (4) = 7/4, left: 7/4\n(8) + (15) = 23, left: 23, 4\n(2) / (13) = 2/13, left: 2/13, 8, 4\n(4) * (2/13) = 8/13, left: 8/13, 8\n(13) * (2) = 26, left: 26, 8, 4\n(8) * (26) = 208, left: 208, 4\n(8) / (4) = 2, left: 2, 26\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * 2) - (8 / 4))"}, {"input": "13 8 2 4\n", "output": "(8) * (2) = 16, left: 16, 13, 4\n(16) / (13) = 16/13, left: 16/13, 4\n(2) / (8) = 1/4, left: 1/4, 13, 4\n(8) / (13) = 8/13, left: 8/13, 2, 4\n(4) / (2) = 2, left: 2, 8/13\n(13) / (8) = 13/8, left: 13/8, 2, 4\n(2) - (13/8) = 3/8, left: 3/8, 4\n(13) * (8) = 104, left: 104, 2, 4\n(104) / (4) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 8) / 4) - 2)"}, {"input": "13 8 2 4\n", "output": "(8) / (4) = 2, left: 2, 13, 2\n(2) / (2) = 1, left: 1, 13\n(13) / (1) = 13, left: 13\n(13) - (1) = 12, left: 12\n(2) - (2) = 0, left: 0, 13\n(2) / (2) = 1, left: 1, 13\n(1) / (13) = 1/13, left: 1/13\n(13) * (2) = 26, left: 26, 2\n(2) + (26) = 28, left: 28\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * 2) - (8 / 4))"}, {"input": "13 8 2 4\n", "output": "(2) + (4) = 6, left: 6, 13, 8\n(6) - (13) = -7, left: -7, 8\n(4) / (2) = 2, left: 2, 13, 8\n(2) * (4) = 8, left: 8, 13, 8\n(13) / (8) = 13/8, left: 13/8, 8\n(13) - (4) = 9, left: 9, 8, 2\n(8) * (2) = 16, left: 16, 9\n(4) / (13) = 4/13, left: 4/13, 8, 2\n(8) / (4/13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((8 / (4 / 13)) - 2)"}, {"input": "11 12 10 9\n", "output": "(11) - (10) = 1, left: 1, 12, 9\n(11) * (10) = 110, left: 110, 12, 9\n(9) - (12) = -3, left: -3, 110\n(11) + (10) = 21, left: 21, 12, 9\n(9) - (12) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((11 + 10) - (9 - 12))"}, {"input": "11 12 10 9\n", "output": "(12) + (9) = 21, left: 21, 11, 10\n(21) - (11) = 10, left: 10, 10\n(9) - (12) = -3, left: -3, 11, 10\n(11) * (-3) = -33, left: -33, 10\n(-3) - (11) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((9 - 12) - 11))"}, {"input": "11 12 10 9\n", "output": "(12) / (10) = 6/5, left: 6/5, 11, 9\n(11) / (9) = 11/9, left: 11/9, 6/5\n(11) - (9) = 2, left: 2, 6/5\n(6/5) + (2) = 16/5, left: 16/5\n(11) + (9) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (11 + 9))"}, {"input": "11 12 10 9\n", "output": "(11) * (12) = 132, left: 132, 10, 9\n(11) - (12) = -1, left: -1, 10, 9\n(12) / (11) = 12/11, left: 12/11, 10, 9\n(11) + (12) = 23, left: 23, 10, 9\n(10) + (23) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((10 + (11 + 12)) - 9)"}, {"input": "11 12 10 9\n", "output": "(12) / (10) = 6/5, left: 6/5, 11, 9\n(11) / (9) = 11/9, left: 11/9, 6/5\n(6/5) - (11/9) = -1/45, left: -1/45\n(11) - (9) = 2, left: 2, 6/5\n(6/5) + (2) = 16/5, left: 16/5\n(6/5) / (2) = 3/5, left: 3/5\n(6/5) * (2) = 12/5, left: 12/5\n(11) + (9) = 20, left: 20, 6/5\n(6/5) - (20) = -94/5, left: -94/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (11 + 9))"}, {"input": "11 12 10 9\n", "output": "(11) - (10) = 1, left: 1, 12, 9\n(9) / (12) = 3/4, left: 3/4, 1\n(12) - (1) = 11, left: 11, 9\n(9) * (1) = 9, left: 9, 12\n(9) - (12) = -3, left: -3\n(11) * (10) = 110, left: 110, 12, 9\n(12) * (9) = 108, left: 108, 110\n(11) + (10) = 21, left: 21, 12, 9\n(9) - (12) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((11 + 10) - (9 - 12))"}, {"input": "11 12 10 9\n", "output": "(11) * (12) = 132, left: 132, 10, 9\n(10) / (132) = 5/66, left: 5/66, 9\n(11) - (12) = -1, left: -1, 10, 9\n(-1) / (9) = -1/9, left: -1/9, 10\n(-1) / (10) = -1/10, left: -1/10, 9\n(12) / (11) = 12/11, left: 12/11, 10, 9\n(10) - (12/11) = 98/11, left: 98/11, 9\n(11) + (12) = 23, left: 23, 10, 9\n(10) + (23) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((10 + (11 + 12)) - 9)"}, {"input": "11 12 10 9\n", "output": "(12) + (9) = 21, left: 21, 11, 10\n(11) - (21) = -10, left: -10, 10\n(10) + (-10) = 0, left: 0\n(21) - (11) = 10, left: 10, 10\n(10) * (21) = 210, left: 210, 11\n(21) - (10) = 11, left: 11, 11\n(10) - (11) = -1, left: -1, 21\n(9) - (12) = -3, left: -3, 11, 10\n(-3) - (11) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((9 - 12) - 11))"}, {"input": "7 6 2 13\n", "output": "(7) / (6) = 7/6, left: 7/6, 2, 13\n(7/6) / (13) = 7/78, left: 7/78, 2\n(2) / (7/78) = 156/7, left: 156/7\n(7) + (6) = 13, left: 13, 2, 13\n(13) - (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((7 + 6) + (13 - 2))"}, {"input": "7 6 2 13\n", "output": "(13) / (2) = 13/2, left: 13/2, 7, 6\n(13/2) / (6) = 13/12, left: 13/12, 7\n(13/12) / (7) = 13/84, left: 13/84\n(13) - (2) = 11, left: 11, 7, 6\n(7) + (11) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (7 + (13 - 2)))"}, {"input": "7 6 2 13\n", "output": "(6) + (13) = 19, left: 19, 7, 2\n(7) - (19) = -12, left: -12, 2\n(2) + (-12) = -10, left: -10\n(-12) - (2) = -14, left: -14\n(19) - (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((6 + 13) - 7))"}, {"input": "7 6 2 13\n", "output": "(13) / (2) = 13/2, left: 13/2, 7, 6\n(6) / (7) = 6/7, left: 6/7, 13/2\n(6/7) - (13/2) = -79/14, left: -79/14\n(7) / (6) = 7/6, left: 7/6, 13/2\n(2) * (13) = 26, left: 26, 7, 6\n(6) * (26) = 156, left: 156, 7\n(6) / (26) = 3/13, left: 3/13, 7\n(13) - (2) = 11, left: 11, 7, 6\n(7) + (11) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (7 + (13 - 2)))"}, {"input": "7 6 2 13\n", "output": "(7) * (13) = 91, left: 91, 6, 2\n(13) / (7) = 13/7, left: 13/7, 6, 2\n(6) * (13/7) = 78/7, left: 78/7, 2\n(2) + (78/7) = 92/7, left: 92/7\n(13/7) - (6) = -29/7, left: -29/7, 2\n(-29/7) - (2) = -43/7, left: -43/7\n(2) - (13/7) = 1/7, left: 1/7, 6\n(7) + (13) = 20, left: 20, 6, 2\n(6) - (2) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((7 + 13) + (6 - 2))"}, {"input": "7 6 2 13\n", "output": "(7) * (6) = 42, left: 42, 2, 13\n(2) * (13) = 26, left: 26, 42\n(2) / (13) = 2/13, left: 2/13, 42\n(13) * (42) = 546, left: 546, 2\n(7) / (6) = 7/6, left: 7/6, 2, 13\n(13) * (7/6) = 91/6, left: 91/6, 2\n(13) - (7/6) = 71/6, left: 71/6, 2\n(7) + (6) = 13, left: 13, 2, 13\n(13) - (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((7 + 6) + (13 - 2))"}, {"input": "7 6 2 13\n", "output": "(13) - (6) = 7, left: 7, 7, 2\n(2) / (7) = 2/7, left: 2/7, 7\n(7) - (7) = 0, left: 0, 2\n(6) - (13) = -7, left: -7, 7, 2\n(-7) / (2) = -7/2, left: -7/2, 7\n(-7) - (7) = -14, left: -14, 2\n(6) + (13) = 19, left: 19, 7, 2\n(2) * (19) = 38, left: 38, 7\n(19) - (2) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((6 + 13) - 2))"}, {"input": "7 6 2 13\n", "output": "(6) + (13) = 19, left: 19, 7, 2\n(7) - (19) = -12, left: -12, 2\n(-12) / (2) = -6, left: -6\n(2) + (-12) = -10, left: -10\n(-12) - (2) = -14, left: -14\n(2) - (-12) = 14, left: 14\n(2) / (-12) = -1/6, left: -1/6\n(2) * (-12) = -24, left: -24\n(19) - (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((6 + 13) - 7))"}, {"input": "7 6 2 13\n", "output": "(6) + (13) = 19, left: 19, 7, 2\n(7) - (19) = -12, left: -12, 2\n(-12) / (2) = -6, left: -6\n(2) + (-12) = -10, left: -10\n(-12) - (2) = -14, left: -14\n(2) - (-12) = 14, left: 14\n(2) / (-12) = -1/6, left: -1/6\n(2) * (-12) = -24, left: -24\n(19) - (7) = 12, left: 12, 2\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((6 + 13) - 7))"}, {"input": "7 6 2 13\n", "output": "(6) + (13) = 19, left: 19, 7, 2\n(7) - (19) = -12, left: -12, 2\n(-12) / (2) = -6, left: -6\n(2) + (-12) = -10, left: -10\n(-12) - (2) = -14, left: -14\n(2) - (-12) = 14, left: 14\n(2) / (-12) = -1/6, left: -1/6\n(2) * (-12) = -24, left: -24\n(19) - (7) = 12, left: 12, 2\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((6 + 13) - 7))"}, {"input": "1 7 11 4\n", "output": "(1) * (11) = 11, left: 11, 7, 4\n(1) - (11) = -10, left: -10, 7, 4\n(1) / (7) = 1/7, left: 1/7, 11, 4\n(11) * (4) = 44, left: 44, 1/7\n(7) - (1) = 6, left: 6, 11, 4\n(11) + (4) = 15, left: 15, 1, 7\n(7) * (4) = 28, left: 28, 1, 11\n(1) + (4) = 5, left: 5, 7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(7) / (11) = 7/11, left: 7/11, 1, 4\n(11) / (7) = 11/7, left: 11/7, 1, 4\n(11) - (7) = 4, left: 4, 1, 4\n(4) - (1) = 3, left: 3, 7, 11\n(3) - (11) = -8, left: -8, 7\n(7) * (-8) = -56, left: -56\n(1) * (4) = 4, left: 4, 7, 11\n(1) + (4) = 5, left: 5, 7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(1) - (4) = -3, left: -3, 7, 11\n(-3) - (7) = -10, left: -10, 11\n(1) * (4) = 4, left: 4, 7, 11\n(7) / (11) = 7/11, left: 7/11, 4\n(4) / (1) = 4, left: 4, 7, 11\n(11) - (4) = 7, left: 7, 7\n(1) + (4) = 5, left: 5, 7, 11\n(11) - (5) = 6, left: 6, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(11) / (4) = 11/4, left: 11/4, 1, 7\n(7) - (4) = 3, left: 3, 1, 11\n(7) * (4) = 28, left: 28, 1, 11\n(1) + (11) = 12, left: 12, 28\n(7) + (4) = 11, left: 11, 1, 11\n(1) * (11) = 11, left: 11, 11\n(1) / (11) = 1/11, left: 1/11, 7, 4\n(1) + (4) = 5, left: 5, 7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(7) + (11) = 18, left: 18, 1, 4\n(18) - (4) = 14, left: 14, 1\n(11) / (7) = 11/7, left: 11/7, 1, 4\n(1) - (7) = -6, left: -6, 11, 4\n(7) - (1) = 6, left: 6, 11, 4\n(1) - (4) = -3, left: -3, 7, 11\n(-3) - (7) = -10, left: -10, 11\n(1) + (4) = 5, left: 5, 7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(11) - (1) = 10, left: 10, 7, 4\n(1) / (11) = 1/11, left: 1/11, 7, 4\n(7) + (1/11) = 78/11, left: 78/11, 4\n(78/11) / (4) = 39/22, left: 39/22\n(11) - (7) = 4, left: 4, 1, 4\n(1) - (4) = -3, left: -3, 4\n(7) / (11) = 7/11, left: 7/11, 1, 4\n(7) + (11) = 18, left: 18, 1, 4\n(1) - (7) = -6, left: -6, 11, 4\n(11) * (4) = 44, left: 44, 1, 7\n(4) - (1) = 3, left: 3, 7, 11\n(1) + (4) = 5, left: 5, 7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(1) - (11) = -10, left: -10, 7, 4\n(4) - (11) = -7, left: -7, 1, 7\n(7) / (11) = 7/11, left: 7/11, 1, 4\n(7) + (11) = 18, left: 18, 1, 4\n(1) + (4) = 5, left: 5, 18\n(11) / (7) = 11/7, left: 11/7, 1, 4\n(11/7) / (1) = 11/7, left: 11/7, 4\n(7) / (1) = 7, left: 7, 11, 4\n(1) + (7) = 8, left: 8, 11, 4\n(4) + (8) = 12, left: 12, 11\n(1) - (4) = -3, left: -3, 7, 11\n(1) + (4) = 5, left: 5, 7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(11) / (7) = 11/7, left: 11/7, 1, 4\n(4) - (1) = 3, left: 3, 11/7\n(7) + (11) = 18, left: 18, 1, 4\n(4) + (18) = 22, left: 22, 1\n(11) - (7) = 4, left: 4, 1, 4\n(4) / (1) = 4, left: 4, 4\n(7) - (11) = -4, left: -4, 1, 4\n(4) - (1) = 3, left: 3, 7, 11\n(4) / (1) = 4, left: 4, 7, 11\n(4) / (7) = 4/7, left: 4/7, 11\n(1) / (4) = 1/4, left: 1/4, 7, 11\n(1) + (4) = 5, left: 5, 7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "5 11 4 3\n", "output": "(4) + (3) = 7, left: 7, 5, 11\n(5) * (7) = 35, left: 35, 11\n(11) - (35) = -24, left: -24\n(35) / (11) = 35/11, left: 35/11\n(11) / (35) = 11/35, left: 11/35\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (4 + 3)) - 11)"}, {"input": "5 11 4 3\n", "output": "(3) / (5) = 3/5, left: 3/5, 11, 4\n(4) * (3/5) = 12/5, left: 12/5, 11\n(3/5) / (11) = 3/55, left: 3/55, 4\n(4) + (3) = 7, left: 7, 5, 11\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (4 + 3)) - 11)"}, {"input": "5 11 4 3\n", "output": "(4) - (5) = -1, left: -1, 11, 3\n(5) / (4) = 5/4, left: 5/4, 11, 3\n(11) - (3) = 8, left: 8, 5/4\n(5/4) + (8) = 37/4, left: 37/4\n(11) + (3) = 14, left: 14, 5/4\n(14) - (5/4) = 51/4, left: 51/4\n(5) + (4) = 9, left: 9, 11, 3\n(3) + (9) = 12, left: 12, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (5 + 4))"}, {"input": "5 11 4 3\n", "output": "(11) + (3) = 14, left: 14, 5, 4\n(5) + (4) = 9, left: 9, 14\n(5) / (14) = 5/14, left: 5/14, 4\n(11) / (3) = 11/3, left: 11/3, 5, 4\n(11/3) / (5) = 11/15, left: 11/15, 4\n(4) + (11/15) = 71/15, left: 71/15\n(3) / (11) = 3/11, left: 3/11, 5, 4\n(11) * (3) = 33, left: 33, 5, 4\n(33) - (5) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: (((11 * 3) - 5) - 4)"}, {"input": "5 11 4 3\n", "output": "(5) / (3) = 5/3, left: 5/3, 11, 4\n(5) - (3) = 2, left: 2, 11, 4\n(11) * (2) = 22, left: 22, 4\n(22) - (4) = 18, left: 18\n(5) + (3) = 8, left: 8, 11, 4\n(3) / (5) = 3/5, left: 3/5, 11, 4\n(3/5) / (4) = 3/20, left: 3/20, 11\n(4) + (3) = 7, left: 7, 5, 11\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (4 + 3)) - 11)"}, {"input": "5 11 4 3\n", "output": "(5) + (3) = 8, left: 8, 11, 4\n(11) / (4) = 11/4, left: 11/4, 8\n(5) / (3) = 5/3, left: 5/3, 11, 4\n(11) * (4) = 44, left: 44, 5/3\n(11) + (3) = 14, left: 14, 5, 4\n(5) / (4) = 5/4, left: 5/4, 14\n(3) - (11) = -8, left: -8, 5, 4\n(11) * (3) = 33, left: 33, 5, 4\n(33) - (5) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: (((11 * 3) - 5) - 4)"}, {"input": "5 11 4 3\n", "output": "(4) + (3) = 7, left: 7, 5, 11\n(5) * (7) = 35, left: 35, 11\n(11) - (35) = -24, left: -24\n(35) / (11) = 35/11, left: 35/11\n(11) * (35) = 385, left: 385\n(11) / (35) = 11/35, left: 11/35\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (4 + 3)) - 11)"}, {"input": "5 11 4 3\n", "output": "(4) + (3) = 7, left: 7, 5, 11\n(5) * (7) = 35, left: 35, 11\n(11) - (35) = -24, left: -24\n(35) / (11) = 35/11, left: 35/11\n(11) * (35) = 385, left: 385\n(11) / (35) = 11/35, left: 11/35\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (4 + 3)) - 11)"}, {"input": "5 11 4 3\n", "output": "(4) + (3) = 7, left: 7, 5, 11\n(5) * (7) = 35, left: 35, 11\n(11) - (35) = -24, left: -24\n(35) / (11) = 35/11, left: 35/11\n(11) * (35) = 385, left: 385\n(11) / (35) = 11/35, left: 11/35\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (4 + 3)) - 11)"}, {"input": "2 13 11 2\n", "output": "(2) / (11) = 2/11, left: 2/11, 13, 2\n(13) * (2/11) = 26/11, left: 26/11, 2\n(2) / (26/11) = 11/13, left: 11/13\n(2/11) - (2) = -20/11, left: -20/11, 13\n(2) / (2/11) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (2 / (2 / 11)))"}, {"input": "2 13 11 2\n", "output": "(2) * (13) = 26, left: 26, 11, 2\n(2) - (11) = -9, left: -9, 26\n(26) + (-9) = 17, left: 17\n(2) * (26) = 52, left: 52, 11\n(26) / (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((2 * 13) / 2))"}, {"input": "2 13 11 2\n", "output": "(2) - (2) = 0, left: 0, 13, 11\n(0) - (11) = -11, left: -11, 13\n(13) / (-11) = -13/11, left: -13/11\n(-11) - (13) = -24, left: -24\n(-11) / (13) = -11/13, left: -11/13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((2 - 2) - 11))"}, {"input": "2 13 11 2\n", "output": "(11) + (2) = 13, left: 13, 2, 13\n(2) / (13) = 2/13, left: 2/13, 13\n(13) - (2/13) = 167/13, left: 167/13\n(2) * (13) = 26, left: 26, 13\n(13) - (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((11 + 2) - 2))"}, {"input": "2 13 11 2\n", "output": "(2) - (13) = -11, left: -11, 2, 11\n(-11) / (11) = -1, left: -1, 2\n(-1) / (2) = -1/2, left: -1/2\n(2) + (-1) = 1, left: 1\n(11) - (-11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 - (2 - 13)))"}, {"input": "2 13 11 2\n", "output": "(2) / (11) = 2/11, left: 2/11, 13, 2\n(2) - (13) = -11, left: -11, 2/11\n(13) / (2) = 13/2, left: 13/2, 2/11\n(13) * (2/11) = 26/11, left: 26/11, 2\n(13) / (2/11) = 143/2, left: 143/2, 2\n(2) * (143/2) = 143, left: 143\n(2) + (2/11) = 24/11, left: 24/11, 13\n(2) - (2/11) = 20/11, left: 20/11, 13\n(2) / (2/11) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (2 / (2 / 11)))"}, {"input": "2 13 11 2\n", "output": "(11) + (2) = 13, left: 13, 2, 13\n(2) / (13) = 2/13, left: 2/13, 13\n(2/13) - (13) = -167/13, left: -167/13\n(2/13) / (13) = 2/169, left: 2/169\n(2) + (13) = 15, left: 15, 13\n(15) / (13) = 15/13, left: 15/13\n(2) * (13) = 26, left: 26, 13\n(13) + (26) = 39, left: 39\n(13) - (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((11 + 2) - 2))"}, {"input": "2 13 11 2\n", "output": "(2) - (13) = -11, left: -11, 2, 11\n(-11) / (11) = -1, left: -1, 2\n(2) - (-1) = 3, left: 3\n(-1) - (2) = -3, left: -3\n(2) / (-1) = -2, left: -2\n(11) - (-11) = 22, left: 22, 2\n(2) / (22) = 1/11, left: 1/11\n(22) - (2) = 20, left: 20\n(2) * (22) = 44, left: 44\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 - (2 - 13)))"}, {"input": "2 13 11 2\n", "output": "(2) - (2) = 0, left: 0, 13, 11\n(0) - (11) = -11, left: -11, 13\n(13) / (-11) = -13/11, left: -13/11\n(-11) - (13) = -24, left: -24\n(-11) / (13) = -11/13, left: -11/13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((2 - 2) - 11))"}, {"input": "2 13 11 2\n", "output": "(2) * (13) = 26, left: 26, 11, 2\n(11) * (26) = 286, left: 286, 2\n(11) / (26) = 11/26, left: 11/26, 2\n(11) - (26) = -15, left: -15, 2\n(2) * (-15) = -30, left: -30\n(11) - (2) = 9, left: 9, 26\n(2) * (26) = 52, left: 52, 11\n(52) / (11) = 52/11, left: 52/11\n(26) / (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((2 * 13) / 2))"}, {"input": "2 13 11 2\n", "output": "(2) - (2) = 0, left: 0, 13, 11\n(0) - (11) = -11, left: -11, 13\n(13) / (-11) = -13/11, left: -13/11\n(-11) - (13) = -24, left: -24\n(-11) / (13) = -11/13, left: -11/13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((2 - 2) - 11))"}, {"input": "2 13 11 2\n", "output": "(2) - (2) = 0, left: 0, 13, 11\n(0) - (11) = -11, left: -11, 13\n(13) / (-11) = -13/11, left: -13/11\n(-11) - (13) = -24, left: -24\n(-11) / (13) = -11/13, left: -11/13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((2 - 2) - 11))"}, {"input": "10 3 8 1\n", "output": "(3) * (1) = 3, left: 3, 10, 8\n(10) - (8) = 2, left: 2, 3\n(1) / (3) = 1/3, left: 1/3, 10, 8\n(10) + (8) = 18, left: 18, 1/3\n(8) + (1) = 9, left: 9, 10, 3\n(3) / (10) = 3/10, left: 3/10, 9\n(1) / (8) = 1/8, left: 1/8, 10, 3\n(8) / (3) = 8/3, left: 8/3, 10, 1\n(10) - (1) = 9, left: 9, 8/3\n(8/3) * (9) = 24, left: 24\nreach 24! expression: ((8 / 3) * (10 - 1))"}, {"input": "10 3 8 1\n", "output": "(3) * (8) = 24, left: 24, 10, 1\n(1) - (10) = -9, left: -9, 24\n(3) - (8) = -5, left: -5, 10, 1\n(10) - (-5) = 15, left: 15, 1\n(15) / (1) = 15, left: 15\n(10) / (1) = 10, left: 10, -5\n(10) + (1) = 11, left: 11, -5\n(8) / (3) = 8/3, left: 8/3, 10, 1\n(10) - (1) = 9, left: 9, 8/3\n(8/3) * (9) = 24, left: 24\nreach 24! expression: ((8 / 3) * (10 - 1))"}, {"input": "10 3 8 1\n", "output": "(3) / (10) = 3/10, left: 3/10, 8, 1\n(3/10) - (8) = -77/10, left: -77/10, 1\n(10) / (3) = 10/3, left: 10/3, 8, 1\n(8) / (10/3) = 12/5, left: 12/5, 1\n(8) - (3) = 5, left: 5, 10, 1\n(3) - (8) = -5, left: -5, 10, 1\n(1) / (-5) = -1/5, left: -1/5, 10\n(8) / (3) = 8/3, left: 8/3, 10, 1\n(10) - (1) = 9, left: 9, 8/3\n(8/3) * (9) = 24, left: 24\nreach 24! expression: ((8 / 3) * (10 - 1))"}, {"input": "10 3 8 1\n", "output": "(1) / (8) = 1/8, left: 1/8, 10, 3\n(10) - (3) = 7, left: 7, 1/8\n(7) / (1/8) = 56, left: 56\n(1) - (3) = -2, left: -2, 10, 8\n(1) - (10) = -9, left: -9, 3, 8\n(3) / (-9) = -1/3, left: -1/3, 8\n(10) * (1) = 10, left: 10, 3, 8\n(10) - (1) = 9, left: 9, 3, 8\n(3) / (9) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (3 / (10 - 1)))"}, {"input": "10 3 8 1\n", "output": "(10) / (3) = 10/3, left: 10/3, 8, 1\n(3) - (10) = -7, left: -7, 8, 1\n(10) + (3) = 13, left: 13, 8, 1\n(8) + (1) = 9, left: 9, 10, 3\n(8) - (1) = 7, left: 7, 10, 3\n(10) + (1) = 11, left: 11, 3, 8\n(3) + (11) = 14, left: 14, 8\n(10) - (1) = 9, left: 9, 3, 8\n(9) / (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 - 1) / 3))"}, {"input": "10 3 8 1\n", "output": "(1) - (8) = -7, left: -7, 10, 3\n(8) - (1) = 7, left: 7, 10, 3\n(10) + (8) = 18, left: 18, 3, 1\n(10) * (8) = 80, left: 80, 3, 1\n(3) / (1) = 3, left: 3, 10, 8\n(10) / (8) = 5/4, left: 5/4, 3\n(3) + (1) = 4, left: 4, 10, 8\n(4) / (10) = 2/5, left: 2/5, 8\n(8) * (4) = 32, left: 32, 10\n(1) - (10) = -9, left: -9, 3, 8\n(1) / (10) = 1/10, left: 1/10, 3, 8\n(10) - (1) = 9, left: 9, 3, 8\n(3) / (9) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (3 / (10 - 1)))"}, {"input": "10 3 8 1\n", "output": "(10) / (3) = 10/3, left: 10/3, 8, 1\n(3) - (10) = -7, left: -7, 8, 1\n(8) / (1) = 8, left: 8, 10, 3\n(1) - (8) = -7, left: -7, 10, 3\n(10) * (3) = 30, left: 30, -7\n(30) - (-7) = 37, left: 37\n(8) * (1) = 8, left: 8, 10, 3\n(10) + (8) = 18, left: 18, 3\n(10) + (1) = 11, left: 11, 3, 8\n(8) + (11) = 19, left: 19, 3\n(3) - (19) = -16, left: -16\n(10) - (1) = 9, left: 9, 3, 8\n(9) / (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 - 1) / 3))"}, {"input": "4 2 8 1\n", "output": "(4) + (1) = 5, left: 5, 2, 8\n(2) - (5) = -3, left: -3, 8\n(-3) / (8) = -3/8, left: -3/8\n(2) * (5) = 10, left: 10, 8\n(10) / (8) = 5/4, left: 5/4\n(5) - (2) = 3, left: 3, 8\n(8) / (3) = 8/3, left: 8/3\n(8) - (3) = 5, left: 5\n(8) + (3) = 11, left: 11\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((4 + 1) - 2))"}, {"input": "4 2 8 1\n", "output": "(2) - (4) = -2, left: -2, 8, 1\n(-2) / (1) = -2, left: -2, 8\n(-2) - (1) = -3, left: -3, 8\n(-3) - (8) = -11, left: -11\n(-3) / (8) = -3/8, left: -3/8\n(1) * (-2) = -2, left: -2, 8\n(8) - (-2) = 10, left: 10\n(8) / (-2) = -4, left: -4\n(1) - (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 - (2 - 4)))"}, {"input": "4 2 8 1\n", "output": "(2) / (1) = 2, left: 2, 4, 8\n(8) / (4) = 2, left: 2, 2\n(2) / (2) = 1, left: 1\n(2) / (2) = 1, left: 1\n(2) * (2) = 4, left: 4\n(4) / (8) = 1/2, left: 1/2, 2\n(1/2) / (2) = 1/4, left: 1/4\n(2) * (1/2) = 1, left: 1\n(4) + (8) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((2 / 1) * (4 + 8))"}, {"input": "4 2 8 1\n", "output": "(1) - (4) = -3, left: -3, 2, 8\n(8) / (2) = 4, left: 4, -3\n(2) * (8) = 16, left: 16, -3\n(-3) / (2) = -3/2, left: -3/2, 8\n(2) * (-3) = -6, left: -6, 8\n(4) / (1) = 4, left: 4, 2, 8\n(2) * (4) = 8, left: 8, 8\n(8) / (8) = 1, left: 1\n(8) - (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((4 / 1) * (8 - 2))"}, {"input": "4 2 8 1\n", "output": "(1) - (4) = -3, left: -3, 2, 8\n(8) - (2) = 6, left: 6, -3\n(2) * (8) = 16, left: 16, -3\n(-3) / (2) = -3/2, left: -3/2, 8\n(2) / (-3) = -2/3, left: -2/3, 8\n(-3) - (2) = -5, left: -5, 8\n(2) + (-3) = -1, left: -1, 8\n(-1) - (8) = -9, left: -9\n(4) / (1) = 4, left: 4, 2, 8\n(4) - (2) = 2, left: 2, 8\n(2) * (4) = 8, left: 8, 8\n(2) + (4) = 6, left: 6, 8\n(8) - (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((4 / 1) * (8 - 2))"}, {"input": "4 2 8 1\n", "output": "(4) + (1) = 5, left: 5, 2, 8\n(2) - (5) = -3, left: -3, 8\n(8) * (-3) = -24, left: -24\n(8) + (-3) = 5, left: 5\n(-3) - (8) = -11, left: -11\n(8) - (-3) = 11, left: 11\n(2) * (5) = 10, left: 10, 8\n(10) - (8) = 2, left: 2\n(8) + (10) = 18, left: 18\n(5) - (2) = 3, left: 3, 8\n(8) / (3) = 8/3, left: 8/3\n(8) + (3) = 11, left: 11\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((4 + 1) - 2))"}, {"input": "7 8 5 8\n", "output": "(7) * (8) = 56, left: 56, 5, 8\n(56) / (5) = 56/5, left: 56/5, 8\n(5) * (56) = 280, left: 280, 8\n(5) + (56) = 61, left: 61, 8\n(5) - (56) = -51, left: -51, 8\n(56) / (8) = 7, left: 7, 5\n(8) - (56) = -48, left: -48, 5\n(7) + (8) = 15, left: 15, 5, 8\n(5) / (15) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (5 / (7 + 8)))"}, {"input": "7 8 5 8\n", "output": "(7) / (8) = 7/8, left: 7/8, 5, 8\n(7/8) / (8) = 7/64, left: 7/64, 5\n(5) + (7/64) = 327/64, left: 327/64\n(5) + (7/8) = 47/8, left: 47/8, 8\n(7) - (8) = -1, left: -1, 5, 8\n(-1) - (5) = -6, left: -6, 8\n(8) - (7) = 1, left: 1, 5, 8\n(7) + (8) = 15, left: 15, 5, 8\n(15) / (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 8) / 5))"}, {"input": "7 8 5 8\n", "output": "(8) - (7) = 1, left: 1, 8, 5\n(5) / (8) = 5/8, left: 5/8, 1\n(7) - (8) = -1, left: -1, 8, 5\n(-1) - (8) = -9, left: -9, 5\n(-1) / (5) = -1/5, left: -1/5, 8\n(8) / (7) = 8/7, left: 8/7, 8, 5\n(8/7) / (5) = 8/35, left: 8/35, 8\n(7) + (8) = 15, left: 15, 8, 5\n(8) * (15) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((8 * (7 + 8)) / 5)"}, {"input": "7 8 5 8\n", "output": "(8) / (8) = 1, left: 1, 7, 5\n(1) - (7) = -6, left: -6, 5\n(8) + (8) = 16, left: 16, 7, 5\n(16) / (7) = 16/7, left: 16/7, 5\n(8) - (8) = 0, left: 0, 7, 5\n(8) - (8) = 0, left: 0, 7, 5\n(5) * (0) = 0, left: 0, 7\n(5) - (7) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (5 - 7)))"}, {"input": "7 8 5 8\n", "output": "(7) / (8) = 7/8, left: 7/8, 5, 8\n(8) * (7/8) = 7, left: 7, 5\n(7) * (8) = 56, left: 56, 5, 8\n(8) + (56) = 64, left: 64, 5\n(7) - (8) = -1, left: -1, 5, 8\n(5) * (8) = 40, left: 40, -1\n(5) - (-1) = 6, left: 6, 8\n(7) + (8) = 15, left: 15, 5, 8\n(15) / (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 8) / 5))"}, {"input": "7 8 5 8\n", "output": "(8) - (7) = 1, left: 1, 8, 5\n(8) / (1) = 8, left: 8, 5\n(7) - (8) = -1, left: -1, 8, 5\n(-1) / (8) = -1/8, left: -1/8, 5\n(8) + (-1) = 7, left: 7, 5\n(5) + (-1) = 4, left: 4, 8\n(8) * (4) = 32, left: 32\n(8) / (7) = 8/7, left: 8/7, 8, 5\n(7) / (8) = 7/8, left: 7/8, 8, 5\n(8) / (5) = 8/5, left: 8/5, 7/8\n(7/8) - (8/5) = -29/40, left: -29/40\n(7) + (8) = 15, left: 15, 8, 5\n(8) * (15) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((8 * (7 + 8)) / 5)"}, {"input": "7 8 5 8\n", "output": "(7) / (8) = 7/8, left: 7/8, 5, 8\n(5) * (8) = 40, left: 40, 7/8\n(7) * (8) = 56, left: 56, 5, 8\n(8) - (5) = 3, left: 3, 56\n(8) + (56) = 64, left: 64, 5\n(8) - (7) = 1, left: 1, 5, 8\n(5) / (1) = 5, left: 5, 8\n(8) / (1) = 8, left: 8, 5\n(5) / (8) = 5/8, left: 5/8, 1\n(7) - (8) = -1, left: -1, 5, 8\n(5) + (-1) = 4, left: 4, 8\n(7) + (8) = 15, left: 15, 5, 8\n(15) / (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 8) / 5))"}, {"input": "7 8 5 8\n", "output": "(7) / (8) = 7/8, left: 7/8, 5, 8\n(5) * (7/8) = 35/8, left: 35/8, 8\n(7/8) / (5) = 7/40, left: 7/40, 8\n(7) - (8) = -1, left: -1, 5, 8\n(5) + (-1) = 4, left: 4, 8\n(-1) - (5) = -6, left: -6, 8\n(8) - (7) = 1, left: 1, 5, 8\n(5) / (1) = 5, left: 5, 8\n(8) - (5) = 3, left: 3\n(1) / (8) = 1/8, left: 1/8, 5\n(1/8) - (5) = -39/8, left: -39/8\n(7) + (8) = 15, left: 15, 5, 8\n(15) / (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 8) / 5))"}, {"input": "7 8 5 8\n", "output": "(8) / (8) = 1, left: 1, 7, 5\n(8) + (8) = 16, left: 16, 7, 5\n(7) - (16) = -9, left: -9, 5\n(8) / (8) = 1, left: 1, 7, 5\n(5) * (1) = 5, left: 5, 7\n(8) - (8) = 0, left: 0, 7, 5\n(7) - (5) = 2, left: 2, 0\n(8) - (8) = 0, left: 0, 7, 5\n(8) * (8) = 64, left: 64, 7, 5\n(64) - (7) = 57, left: 57, 5\n(5) / (57) = 5/57, left: 5/57\n(5) - (7) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (5 - 7)))"}, {"input": "8 4 2 4\n", "output": "(8) + (4) = 12, left: 12, 4, 2\n(4) * (2) = 8, left: 8, 12\n(12) * (8) = 96, left: 96\n(2) / (4) = 1/2, left: 1/2, 12\n(1/2) - (12) = -23/2, left: -23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((8 + 4) / (2 / 4))"}, {"input": "8 4 2 4\n", "output": "(8) + (4) = 12, left: 12, 4, 2\n(4) * (2) = 8, left: 8, 12\n(12) + (8) = 20, left: 20\n(8) - (12) = -4, left: -4\n(12) / (8) = 3/2, left: 3/2\n(2) / (4) = 1/2, left: 1/2, 12\n(12) * (1/2) = 6, left: 6\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((8 + 4) / (2 / 4))"}, {"input": "8 4 2 4\n", "output": "(8) / (2) = 4, left: 4, 4, 4\n(2) - (8) = -6, left: -6, 4, 4\n(4) / (4) = 1, left: 1, -6\n(2) / (8) = 1/4, left: 1/4, 4, 4\n(4) * (1/4) = 1, left: 1, 4\n(4) / (1/4) = 16, left: 16, 4\n(1/4) - (4) = -15/4, left: -15/4, 4\n(8) * (2) = 16, left: 16, 4, 4\n(4) + (16) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 + (8 * 2)))"}, {"input": "8 4 2 4\n", "output": "(4) - (8) = -4, left: -4, 2, 4\n(4) / (2) = 2, left: 2, -4\n(2) / (-4) = -1/2, left: -1/2\n(4) - (2) = 2, left: 2, -4\n(-4) - (2) = -6, left: -6, 4\n(4) + (-6) = -2, left: -2\n(2) / (-4) = -1/2, left: -1/2, 4\n(4) + (-1/2) = 7/2, left: 7/2\n(2) - (-4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 - (4 - 8)))"}, {"input": "8 4 2 4\n", "output": "(8) - (4) = 4, left: 4, 2, 4\n(4) / (2) = 2, left: 2, 4\n(2) * (4) = 8, left: 8, 4\n(4) / (8) = 1/2, left: 1/2\n(4) - (2) = 2, left: 2, 4\n(4) * (2) = 8, left: 8\n(2) - (4) = -2, left: -2, 4\n(4) - (-2) = 6, left: 6\n(2) + (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 - 4) * (2 + 4))"}, {"input": "8 4 2 4\n", "output": "(4) * (2) = 8, left: 8, 8, 4\n(8) - (4) = 4, left: 4, 8\n(4) / (8) = 1/2, left: 1/2\n(4) / (8) = 1/2, left: 1/2, 8\n(1/2) / (8) = 1/16, left: 1/16\n(8) * (1/2) = 4, left: 4\n(4) - (8) = -4, left: -4, 8\n(8) + (-4) = 4, left: 4\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * 4) - (4 * 2))"}, {"input": "8 4 2 4\n", "output": "(8) / (2) = 4, left: 4, 4, 4\n(4) + (4) = 8, left: 8, 4\n(4) / (4) = 1, left: 1, 4\n(4) - (4) = 0, left: 0, 4\n(2) - (8) = -6, left: -6, 4, 4\n(4) * (-6) = -24, left: -24, 4\n(4) - (4) = 0, left: 0, -6\n(4) / (4) = 1, left: 1, -6\n(2) / (8) = 1/4, left: 1/4, 4, 4\n(4) - (4) = 0, left: 0, 1/4\n(4) * (4) = 16, left: 16, 1/4\n(8) * (2) = 16, left: 16, 4, 4\n(4) + (16) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 + (8 * 2)))"}, {"input": "13 3 3 4\n", "output": "(13) - (3) = 10, left: 10, 3, 4\n(3) / (4) = 3/4, left: 3/4, 13, 3\n(4) / (3) = 4/3, left: 4/3, 13, 3\n(4) - (3) = 1, left: 1, 13, 3\n(13) * (4) = 52, left: 52, 3, 3\n(13) + (4) = 17, left: 17, 3, 3\n(4) / (13) = 4/13, left: 4/13, 3, 3\n(13) - (4) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(4) / (3) = 4/3, left: 4/3, 13, 3\n(13) - (3) = 10, left: 10, 3, 4\n(3) + (3) = 6, left: 6, 13, 4\n(3) * (4) = 12, left: 12, 13, 3\n(4) / (3) = 4/3, left: 4/3, 13, 3\n(3) / (4) = 3/4, left: 3/4, 13, 3\n(13) + (4) = 17, left: 17, 3, 3\n(13) - (4) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(3) / (13) = 3/13, left: 3/13, 3, 4\n(4) / (3) = 4/3, left: 4/3, 3/13\n(3) * (3) = 9, left: 9, 13, 4\n(9) / (4) = 9/4, left: 9/4, 13\n(4) / (3) = 4/3, left: 4/3, 13, 3\n(3) - (4) = -1, left: -1, 13, 3\n(13) / (4) = 13/4, left: 13/4, 3, 3\n(13) - (4) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(3) / (13) = 3/13, left: 3/13, 3, 4\n(13) / (3) = 13/3, left: 13/3, 3, 4\n(3) - (3) = 0, left: 0, 13, 4\n(4) / (13) = 4/13, left: 4/13, 0\n(0) / (4/13) = 0, left: 0\n(3) / (13) = 3/13, left: 3/13, 3, 4\n(13) + (3) = 16, left: 16, 3, 4\n(13) - (4) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(13) - (3) = 10, left: 10, 3, 4\n(3) - (10) = -7, left: -7, 4\n(3) + (3) = 6, left: 6, 13, 4\n(3) / (3) = 1, left: 1, 13, 4\n(3) / (4) = 3/4, left: 3/4, 13, 3\n(3/4) - (3) = -9/4, left: -9/4, 13\n(13) + (-9/4) = 43/4, left: 43/4\n(13) - (4) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(3) - (4) = -1, left: -1, 13, 3\n(3) + (-1) = 2, left: 2, 13\n(3) - (13) = -10, left: -10, -1\n(13) + (3) = 16, left: 16, 3, 4\n(3) * (16) = 48, left: 48, 4\n(3) / (3) = 1, left: 1, 13, 4\n(3) / (3) = 1, left: 1, 13, 4\n(13) - (3) = 10, left: 10, 3, 4\n(10) - (3) = 7, left: 7, 4\n(13) / (3) = 13/3, left: 13/3, 3, 4\n(4) + (13/3) = 25/3, left: 25/3, 3\n(13) - (4) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(3) * (3) = 9, left: 9, 13, 4\n(3) - (3) = 0, left: 0, 13, 4\n(4) * (0) = 0, left: 0, 13\n(4) - (3) = 1, left: 1, 13, 3\n(4) / (3) = 4/3, left: 4/3, 13, 3\n(13) / (4/3) = 39/4, left: 39/4, 3\n(3) / (4) = 3/4, left: 3/4, 13, 3\n(3) + (3/4) = 15/4, left: 15/4, 13\n(13) * (4) = 52, left: 52, 3, 3\n(13) / (4) = 13/4, left: 13/4, 3, 3\n(13) + (4) = 17, left: 17, 3, 3\n(13) - (4) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(3) + (4) = 7, left: 7, 13, 3\n(7) / (13) = 7/13, left: 7/13, 3\n(7/13) / (3) = 7/39, left: 7/39\n(3) * (4) = 12, left: 12, 13, 3\n(13) - (3) = 10, left: 10, 3, 4\n(3) * (10) = 30, left: 30, 4\n(13) - (3) = 10, left: 10, 3, 4\n(3) - (13) = -10, left: -10, 3, 4\n(3) - (4) = -1, left: -1, -10\n(3) - (3) = 0, left: 0, 13, 4\n(3) / (4) = 3/4, left: 3/4, 13, 3\n(13) - (4) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(13) * (3) = 39, left: 39, 3, 4\n(39) - (4) = 35, left: 35, 3\n(3) + (3) = 6, left: 6, 13, 4\n(6) - (13) = -7, left: -7, 4\n(3) * (3) = 9, left: 9, 13, 4\n(4) - (3) = 1, left: 1, 13, 3\n(3) - (4) = -1, left: -1, 13, 3\n(3) * (4) = 12, left: 12, 13, 3\n(4) / (3) = 4/3, left: 4/3, 13, 3\n(3) - (4/3) = 5/3, left: 5/3, 13\n(3) / (4) = 3/4, left: 3/4, 13, 3\n(13) - (4) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "7 3 9 13\n", "output": "(13) / (3) = 13/3, left: 13/3, 7, 9\n(7) * (9) = 63, left: 63, 13/3\n(9) - (7) = 2, left: 2, 13/3\n(7) + (9) = 16, left: 16, 13/3\n(7) - (13/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (7 - (13 / 3)))"}, {"input": "7 3 9 13\n", "output": "(7) - (3) = 4, left: 4, 9, 13\n(9) - (13) = -4, left: -4, 4\n(7) * (3) = 21, left: 21, 9, 13\n(3) - (7) = -4, left: -4, 9, 13\n(-4) / (13) = -4/13, left: -4/13, 9\n(7) / (3) = 7/3, left: 7/3, 9, 13\n(3) / (13) = 3/13, left: 3/13, 7, 9\n(13) / (3) = 13/3, left: 13/3, 7, 9\n(7) - (13/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (7 - (13 / 3)))"}, {"input": "7 3 9 13\n", "output": "(7) / (3) = 7/3, left: 7/3, 9, 13\n(7) * (3) = 21, left: 21, 9, 13\n(3) - (7) = -4, left: -4, 9, 13\n(3) / (13) = 3/13, left: 3/13, 7, 9\n(13) - (3) = 10, left: 10, 7, 9\n(7) / (9) = 7/9, left: 7/9, 10\n(3) + (13) = 16, left: 16, 7, 9\n(13) / (3) = 13/3, left: 13/3, 7, 9\n(7) - (13/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (7 - (13 / 3)))"}, {"input": "7 3 9 13\n", "output": "(13) - (7) = 6, left: 6, 3, 9\n(3) - (9) = -6, left: -6, 6\n(7) / (13) = 7/13, left: 7/13, 3, 9\n(9) + (7/13) = 124/13, left: 124/13, 3\n(7) + (13) = 20, left: 20, 3, 9\n(3) / (20) = 3/20, left: 3/20, 9\n(7) / (9) = 7/9, left: 7/9, 3, 13\n(7) * (9) = 63, left: 63, 3, 13\n(3) * (13) = 39, left: 39, 63\n(63) - (39) = 24, left: 24\nreach 24! expression: ((7 * 9) - (3 * 13))"}, {"input": "7 3 9 13\n", "output": "(7) + (3) = 10, left: 10, 9, 13\n(13) - (10) = 3, left: 3, 9\n(3) - (9) = -6, left: -6\n(7) - (3) = 4, left: 4, 9, 13\n(3) - (7) = -4, left: -4, 9, 13\n(7) * (3) = 21, left: 21, 9, 13\n(3) / (7) = 3/7, left: 3/7, 9, 13\n(7) * (9) = 63, left: 63, 3, 13\n(3) * (13) = 39, left: 39, 63\n(63) - (39) = 24, left: 24\nreach 24! expression: ((7 * 9) - (3 * 13))"}, {"input": "7 3 9 13\n", "output": "(13) / (3) = 13/3, left: 13/3, 7, 9\n(9) / (7) = 9/7, left: 9/7, 13/3\n(7) / (9) = 7/9, left: 7/9, 13/3\n(7) * (9) = 63, left: 63, 13/3\n(13/3) * (63) = 273, left: 273\n(9) - (7) = 2, left: 2, 13/3\n(7) + (9) = 16, left: 16, 13/3\n(13/3) / (16) = 13/48, left: 13/48\n(7) - (13/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (7 - (13 / 3)))"}, {"input": "11 5 11 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 5, 11\n(5) * (11) = 55, left: 55, 11/5\n(11) + (5) = 16, left: 16, 5, 11\n(11) / (11) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "11 5 11 5\n", "output": "(5) / (5) = 1, left: 1, 11, 11\n(11) / (11) = 1, left: 1, 1\n(1) - (11) = -10, left: -10, 11\n(5) * (5) = 25, left: 25, 11, 11\n(11) / (11) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "11 5 11 5\n", "output": "(11) * (5) = 55, left: 55, 11, 5\n(11) + (5) = 16, left: 16, 55\n(5) - (11) = -6, left: -6, 11, 5\n(11) + (5) = 16, left: 16, 11, 5\n(16) / (11) = 16/11, left: 16/11, 5\n(5) / (16/11) = 55/16, left: 55/16\n(5) - (5) = 0, left: 0, 11, 11\n(5) * (5) = 25, left: 25, 11, 11\n(11) / (11) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "11 5 11 5\n", "output": "(5) / (5) = 1, left: 1, 11, 11\n(11) / (1) = 11, left: 11, 11\n(11) / (11) = 1, left: 1\n(11) * (1) = 11, left: 11, 11\n(1) / (11) = 1/11, left: 1/11, 11\n(11) - (1) = 10, left: 10, 11\n(5) * (5) = 25, left: 25, 11, 11\n(11) / (11) = 1, left: 1, 25\n(1) / (25) = 1/25, left: 1/25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "11 5 11 5\n", "output": "(11) + (5) = 16, left: 16, 5, 11\n(5) - (11) = -6, left: -6, 5, 11\n(5) / (11) = 5/11, left: 5/11, -6\n(11) * (5) = 55, left: 55, 11, 5\n(5) - (11) = -6, left: -6, 11, 5\n(5) * (-6) = -30, left: -30, 11\n(5) + (5) = 10, left: 10, 11, 11\n(5) * (5) = 25, left: 25, 11, 11\n(11) / (11) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "11 5 11 5\n", "output": "(5) - (11) = -6, left: -6, 5, 11\n(5) / (11) = 5/11, left: 5/11, -6\n(11) / (5) = 11/5, left: 11/5, 5, 11\n(5) * (11/5) = 11, left: 11, 11\n(11) + (5) = 16, left: 16, 5, 11\n(11) - (5) = 6, left: 6, 5, 11\n(11) * (5) = 55, left: 55, 5, 11\n(11) / (11) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "11 5 11 5\n", "output": "(11) * (5) = 55, left: 55, 5, 11\n(11) / (5) = 11/5, left: 11/5, 5, 11\n(5) - (11/5) = 14/5, left: 14/5, 11\n(11) / (5) = 11/5, left: 11/5, 11, 5\n(5) - (11) = -6, left: -6, 11, 5\n(11) - (5) = 6, left: 6, 11, 5\n(5) + (5) = 10, left: 10, 11, 11\n(5) * (5) = 25, left: 25, 11, 11\n(11) / (11) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "4 2 13 4\n", "output": "(13) / (4) = 13/4, left: 13/4, 2, 4\n(4) * (13) = 52, left: 52, 2, 4\n(52) / (2) = 26, left: 26, 4\n(26) - (4) = 22, left: 22\n(52) - (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: (((4 * 13) - 4) / 2)"}, {"input": "4 2 13 4\n", "output": "(4) - (4) = 0, left: 0, 2, 13\n(4) * (4) = 16, left: 16, 2, 13\n(2) + (16) = 18, left: 18, 13\n(4) + (4) = 8, left: 8, 2, 13\n(13) / (2) = 13/2, left: 13/2, 8\n(8) + (13/2) = 29/2, left: 29/2\n(4) - (4) = 0, left: 0, 2, 13\n(4) / (4) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (4 / 4)))"}, {"input": "4 2 13 4\n", "output": "(4) - (4) = 0, left: 0, 2, 13\n(2) * (13) = 26, left: 26, 0\n(13) - (2) = 11, left: 11, 0\n(13) - (0) = 13, left: 13, 2\n(2) * (13) = 26, left: 26\n(13) + (0) = 13, left: 13, 2\n(4) / (4) = 1, left: 1, 2, 13\n(2) * (1) = 2, left: 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (4 / 4)))"}, {"input": "4 2 13 4\n", "output": "(13) - (4) = 9, left: 9, 2, 4\n(2) * (4) = 8, left: 8, 9\n(4) - (13) = -9, left: -9, 2, 4\n(13) / (4) = 13/4, left: 13/4, 2, 4\n(4) - (2) = 2, left: 2, 13/4\n(4) / (13) = 4/13, left: 4/13, 2, 4\n(4) * (13) = 52, left: 52, 2, 4\n(2) + (52) = 54, left: 54, 4\n(52) - (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: (((4 * 13) - 4) / 2)"}, {"input": "4 2 13 4\n", "output": "(13) / (4) = 13/4, left: 13/4, 4, 2\n(4) / (2) = 2, left: 2, 13/4\n(4) - (2) = 2, left: 2, 13/4\n(2) - (4) = -2, left: -2, 13/4\n(4) - (13/4) = 3/4, left: 3/4, 2\n(13) - (4) = 9, left: 9, 4, 2\n(4) + (2) = 6, left: 6, 9\n(13) * (4) = 52, left: 52, 4, 2\n(52) - (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: (((13 * 4) - 4) / 2)"}, {"input": "4 2 13 4\n", "output": "(13) / (4) = 13/4, left: 13/4, 2, 4\n(4) - (13/4) = 3/4, left: 3/4, 2\n(4) / (13) = 4/13, left: 4/13, 2, 4\n(2) / (4/13) = 13/2, left: 13/2, 4\n(4) * (13) = 52, left: 52, 2, 4\n(4) / (2) = 2, left: 2, 52\n(2) - (52) = -50, left: -50, 4\n(52) / (4) = 13, left: 13, 2\n(52) - (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: (((4 * 13) - 4) / 2)"}, {"input": "5 10 1 5\n", "output": "(5) / (10) = 1/2, left: 1/2, 5, 1\n(1) + (1/2) = 3/2, left: 3/2, 5\n(5) - (3/2) = 7/2, left: 7/2\n(10) + (5) = 15, left: 15, 5, 1\n(5) * (15) = 75, left: 75, 1\n(10) - (5) = 5, left: 5, 5, 1\n(5) + (1) = 6, left: 6, 5\n(5) * (6) = 30, left: 30\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(10) * (1) = 10, left: 10, 5, 5\n(5) * (5) = 25, left: 25, 10\n(1) - (10) = -9, left: -9, 5, 5\n(1) - (5) = -4, left: -4, 5, 10\n(5) / (1) = 5, left: 5, 5, 10\n(5) - (5) = 0, left: 0, 10\n(1) / (5) = 1/5, left: 1/5, 5, 10\n(10) - (5) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(5) / (1) = 5, left: 5, 10, 5\n(10) - (5) = 5, left: 5, 5\n(10) * (5) = 50, left: 50, 5, 1\n(1) - (5) = -4, left: -4, 50\n(-4) / (50) = -2/25, left: -2/25\n(10) / (5) = 2, left: 2, 5, 1\n(5) - (10) = -5, left: -5, 5, 1\n(10) - (5) = 5, left: 5, 5, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(5) / (5) = 1, left: 1, 10, 1\n(1) - (1) = 0, left: 0, 10\n(10) / (1) = 10, left: 10, 5, 5\n(1) - (5) = -4, left: -4, 5, 10\n(5) / (10) = 1/2, left: 1/2, 5, 1\n(1/2) - (5) = -9/2, left: -9/2, 1\n(10) * (5) = 50, left: 50, 5, 1\n(10) - (5) = 5, left: 5, 5, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(5) / (5) = 1, left: 1, 10, 1\n(5) - (5) = 0, left: 0, 10, 1\n(5) * (5) = 25, left: 25, 10, 1\n(25) - (10) = 15, left: 15, 1\n(1) * (25) = 25, left: 25, 10\n(5) + (1) = 6, left: 6, 10, 5\n(1) / (5) = 1/5, left: 1/5, 10, 5\n(10) - (5) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(1) - (5) = -4, left: -4, 10, 5\n(10) * (5) = 50, left: 50, -4\n(1) / (5) = 1/5, left: 1/5, 10, 5\n(5) * (1/5) = 1, left: 1, 10\n(5) * (1) = 5, left: 5, 10, 5\n(10) + (5) = 15, left: 15, 5\n(5) + (1) = 6, left: 6, 10, 5\n(5) / (1) = 5, left: 5, 10, 5\n(5) + (5) = 10, left: 10, 10\n(10) + (5) = 15, left: 15, 5, 1\n(5) - (15) = -10, left: -10, 1\n(10) - (5) = 5, left: 5, 5, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(5) / (5) = 1, left: 1, 10, 1\n(10) + (1) = 11, left: 11, 5, 5\n(10) * (1) = 10, left: 10, 5, 5\n(5) * (1) = 5, left: 5, 10, 5\n(1) - (5) = -4, left: -4, 10, 5\n(1) / (5) = 1/5, left: 1/5, 10, 5\n(1) + (5) = 6, left: 6, 5, 10\n(6) / (10) = 3/5, left: 3/5, 5\n(3/5) / (5) = 3/25, left: 3/25\n(1) * (5) = 5, left: 5, 5, 10\n(10) + (5) = 15, left: 15, 5, 1\n(10) - (5) = 5, left: 5, 5, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(10) * (1) = 10, left: 10, 5, 5\n(1) / (10) = 1/10, left: 1/10, 5, 5\n(1) - (10) = -9, left: -9, 5, 5\n(-9) - (5) = -14, left: -14, 5\n(1) + (5) = 6, left: 6, 5, 10\n(10) / (6) = 5/3, left: 5/3, 5\n(1) * (5) = 5, left: 5, 5, 10\n(1) / (5) = 1/5, left: 1/5, 5, 10\n(10) * (1/5) = 2, left: 2, 5\n(5) - (1) = 4, left: 4, 5, 10\n(4) - (10) = -6, left: -6, 5\n(10) - (5) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(5) - (5) = 0, left: 0, 10, 1\n(5) + (5) = 10, left: 10, 10, 1\n(5) * (5) = 25, left: 25, 10, 1\n(5) + (1) = 6, left: 6, 10, 5\n(5) * (1) = 5, left: 5, 10, 5\n(5) / (1) = 5, left: 5, 10, 5\n(5) - (10) = -5, left: -5, 5\n(5) / (10) = 1/2, left: 1/2, 1, 5\n(1) / (1/2) = 2, left: 2, 5\n(10) - (5) = 5, left: 5, 1, 5\n(1) / (5) = 1/5, left: 1/5, 5\n(1/5) / (5) = 1/25, left: 1/25\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "9 7 12 6\n", "output": "(7) * (6) = 42, left: 42, 9, 12\n(42) / (9) = 14/3, left: 14/3, 12\n(7) - (6) = 1, left: 1, 9, 12\n(9) - (1) = 8, left: 8, 12\n(6) / (7) = 6/7, left: 6/7, 9, 12\n(9) / (7) = 9/7, left: 9/7, 12, 6\n(9) + (7) = 16, left: 16, 12, 6\n(12) * (6) = 72, left: 72, 16\n(16) - (12) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 + 7) - 12))"}, {"input": "9 7 12 6\n", "output": "(9) / (12) = 3/4, left: 3/4, 7, 6\n(9) + (12) = 21, left: 21, 7, 6\n(6) * (21) = 126, left: 126, 7\n(7) / (21) = 1/3, left: 1/3, 6\n(1/3) / (6) = 1/18, left: 1/18\n(12) - (9) = 3, left: 3, 7, 6\n(6) - (3) = 3, left: 3, 7\n(7) / (3) = 7/3, left: 7/3\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (12 - 9)))"}, {"input": "9 7 12 6\n", "output": "(9) + (12) = 21, left: 21, 7, 6\n(7) - (6) = 1, left: 1, 21\n(7) - (21) = -14, left: -14, 6\n(6) * (-14) = -84, left: -84\n(12) - (9) = 3, left: 3, 7, 6\n(7) + (6) = 13, left: 13, 3\n(13) / (3) = 13/3, left: 13/3\n(3) - (7) = -4, left: -4, 6\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (12 - 9)))"}, {"input": "9 7 12 6\n", "output": "(6) - (7) = -1, left: -1, 9, 12\n(12) / (-1) = -12, left: -12, 9\n(12) / (7) = 12/7, left: 12/7, 9, 6\n(12/7) / (9) = 4/21, left: 4/21, 6\n(7) / (12) = 7/12, left: 7/12, 9, 6\n(7) + (12) = 19, left: 19, 9, 6\n(7) * (12) = 84, left: 84, 9, 6\n(12) - (7) = 5, left: 5, 9, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (12 - 7)))"}, {"input": "9 7 12 6\n", "output": "(7) - (9) = -2, left: -2, 12, 6\n(12) - (6) = 6, left: 6, -2\n(6) - (12) = -6, left: -6, -2\n(12) * (6) = 72, left: 72, -2\n(72) / (-2) = -36, left: -36\n(-2) - (12) = -14, left: -14, 6\n(-2) - (6) = -8, left: -8, 12\n(12) / (-8) = -3/2, left: -3/2\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (7 - 9)))"}, {"input": "12 11 6 5\n", "output": "(11) * (6) = 66, left: 66, 12, 5\n(12) / (66) = 2/11, left: 2/11, 5\n(11) / (6) = 11/6, left: 11/6, 12, 5\n(11) + (6) = 17, left: 17, 12, 5\n(12) + (17) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((12 + (11 + 6)) - 5)"}, {"input": "12 11 6 5\n", "output": "(12) - (6) = 6, left: 6, 11, 5\n(6) / (5) = 6/5, left: 6/5, 11\n(6/5) / (11) = 6/55, left: 6/55\n(12) + (6) = 18, left: 18, 11, 5\n(11) + (18) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((11 + (12 + 6)) - 5)"}, {"input": "12 11 6 5\n", "output": "(11) - (12) = -1, left: -1, 6, 5\n(6) * (5) = 30, left: 30, -1\n(-1) * (30) = -30, left: -30\n(6) / (-1) = -6, left: -6, 5\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (11 - 12)))"}, {"input": "12 11 6 5\n", "output": "(11) / (6) = 11/6, left: 11/6, 12, 5\n(5) * (11/6) = 55/6, left: 55/6, 12\n(6) / (11) = 6/11, left: 6/11, 12, 5\n(11) + (6) = 17, left: 17, 12, 5\n(12) - (5) = 7, left: 7, 17\n(17) + (7) = 24, left: 24\nreach 24! expression: ((11 + 6) + (12 - 5))"}, {"input": "12 11 6 5\n", "output": "(12) / (6) = 2, left: 2, 11, 5\n(11) + (2) = 13, left: 13, 5\n(11) * (2) = 22, left: 22, 5\n(6) - (12) = -6, left: -6, 11, 5\n(11) / (-6) = -11/6, left: -11/6, 5\n(6) / (12) = 1/2, left: 1/2, 11, 5\n(12) - (6) = 6, left: 6, 11, 5\n(12) + (6) = 18, left: 18, 11, 5\n(11) + (18) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((11 + (12 + 6)) - 5)"}, {"input": "12 11 6 5\n", "output": "(11) - (12) = -1, left: -1, 6, 5\n(6) / (5) = 6/5, left: 6/5, -1\n(5) / (6) = 5/6, left: 5/6, -1\n(-1) - (6) = -7, left: -7, 5\n(6) / (-1) = -6, left: -6, 5\n(-6) - (5) = -11, left: -11\n(6) * (-1) = -6, left: -6, 5\n(5) - (-1) = 6, left: 6, 6\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (11 - 12)))"}, {"input": "12 11 6 5\n", "output": "(12) - (5) = 7, left: 7, 11, 6\n(6) / (7) = 6/7, left: 6/7, 11\n(6) - (7) = -1, left: -1, 11\n(11) / (-1) = -11, left: -11\n(7) / (6) = 7/6, left: 7/6, 11\n(7/6) / (11) = 7/66, left: 7/66\n(7) - (6) = 1, left: 1, 11\n(11) * (1) = 11, left: 11\n(6) + (7) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (6 + (12 - 5)))"}, {"input": "12 11 6 5\n", "output": "(11) * (6) = 66, left: 66, 12, 5\n(12) * (66) = 792, left: 792, 5\n(6) - (11) = -5, left: -5, 12, 5\n(11) / (6) = 11/6, left: 11/6, 12, 5\n(5) * (11/6) = 55/6, left: 55/6, 12\n(12) * (55/6) = 110, left: 110\n(12) * (11/6) = 22, left: 22, 5\n(11) + (6) = 17, left: 17, 12, 5\n(12) + (17) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((12 + (11 + 6)) - 5)"}, {"input": "12 11 6 5\n", "output": "(11) / (6) = 11/6, left: 11/6, 12, 5\n(11/6) / (12) = 11/72, left: 11/72, 5\n(6) / (11) = 6/11, left: 6/11, 12, 5\n(12) + (5) = 17, left: 17, 6/11\n(5) / (6/11) = 55/6, left: 55/6, 12\n(11) - (6) = 5, left: 5, 12, 5\n(12) / (5) = 12/5, left: 12/5, 5\n(11) + (6) = 17, left: 17, 12, 5\n(12) - (5) = 7, left: 7, 17\n(17) + (7) = 24, left: 24\nreach 24! expression: ((11 + 6) + (12 - 5))"}, {"input": "13 9 7 2\n", "output": "(13) / (2) = 13/2, left: 13/2, 9, 7\n(13/2) / (7) = 13/14, left: 13/14, 9\n(13/2) - (7) = -1/2, left: -1/2, 9\n(2) - (13) = -11, left: -11, 9, 7\n(9) / (-11) = -9/11, left: -9/11, 7\n(-9/11) - (7) = -86/11, left: -86/11\n(7) - (9) = -2, left: -2, -11\n(13) * (2) = 26, left: 26, 9, 7\n(7) - (9) = -2, left: -2, 26\n(26) + (-2) = 24, left: 24\nreach 24! expression: ((13 * 2) + (7 - 9))"}, {"input": "13 9 7 2\n", "output": "(7) / (2) = 7/2, left: 7/2, 13, 9\n(7) * (2) = 14, left: 14, 13, 9\n(2) / (7) = 2/7, left: 2/7, 13, 9\n(13) * (9) = 117, left: 117, 2/7\n(2) - (7) = -5, left: -5, 13, 9\n(2) / (13) = 2/13, left: 2/13, 9, 7\n(7) - (2/13) = 89/13, left: 89/13, 9\n(13) * (2) = 26, left: 26, 9, 7\n(7) + (26) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((7 + (13 * 2)) - 9)"}, {"input": "13 9 7 2\n", "output": "(7) - (13) = -6, left: -6, 9, 2\n(-6) / (2) = -3, left: -3, 9\n(9) + (-3) = 6, left: 6\n(2) * (-6) = -12, left: -12, 9\n(9) * (-12) = -108, left: -108\n(9) + (-6) = 3, left: 3, 2\n(-6) - (9) = -15, left: -15, 2\n(2) / (-15) = -2/15, left: -2/15\n(9) * (2) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((9 * 2) - (7 - 13))"}, {"input": "13 9 7 2\n", "output": "(9) - (2) = 7, left: 7, 13, 7\n(7) - (13) = -6, left: -6, 7\n(13) * (7) = 91, left: 91, 7\n(2) - (9) = -7, left: -7, 13, 7\n(13) / (7) = 13/7, left: 13/7, -7\n(13) + (7) = 20, left: 20, -7\n(-7) * (20) = -140, left: -140\n(9) * (2) = 18, left: 18, 13, 7\n(13) + (18) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((13 + (9 * 2)) - 7)"}, {"input": "13 9 7 2\n", "output": "(7) / (9) = 7/9, left: 7/9, 13, 2\n(13) + (2) = 15, left: 15, 7/9\n(13) / (2) = 13/2, left: 13/2, 7/9\n(13/2) / (7/9) = 117/14, left: 117/14\n(7/9) / (2) = 7/18, left: 7/18, 13\n(9) + (7) = 16, left: 16, 13, 2\n(9) - (7) = 2, left: 2, 13, 2\n(2) / (2) = 1, left: 1, 13\n(13) * (2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * (9 - 7)) - 2)"}, {"input": "7 2 1 1\n", "output": "(7) + (1) = 8, left: 8, 2, 1\n(2) / (8) = 1/4, left: 1/4, 1\n(1) + (8) = 9, left: 9, 2\n(2) * (9) = 18, left: 18\n(1) / (8) = 1/8, left: 1/8, 2\n(2) / (1/8) = 16, left: 16\n(8) / (1) = 8, left: 8, 2\n(2) + (8) = 10, left: 10\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(1) / (7) = 1/7, left: 1/7, 2, 1\n(1/7) - (2) = -13/7, left: -13/7, 1\n(7) / (1) = 7, left: 7, 2, 1\n(7) * (1) = 7, left: 7, 2, 1\n(2) - (1) = 1, left: 1, 7\n(7) - (1) = 6, left: 6\n(1) / (7) = 1/7, left: 1/7, 2\n(7) + (1) = 8, left: 8, 2, 1\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(2) / (7) = 2/7, left: 2/7, 1, 1\n(1) / (2/7) = 7/2, left: 7/2, 1\n(2) - (7) = -5, left: -5, 1, 1\n(7) - (2) = 5, left: 5, 1, 1\n(1) / (1) = 1, left: 1, 5\n(7) + (2) = 9, left: 9, 1, 1\n(2) + (1) = 3, left: 3, 7, 1\n(3) / (1) = 3, left: 3, 7\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((2 + 1) * (7 + 1))"}, {"input": "7 2 1 1\n", "output": "(7) - (1) = 6, left: 6, 2, 1\n(1) / (2) = 1/2, left: 1/2, 6\n(1/2) / (6) = 1/12, left: 1/12\n(2) * (1) = 2, left: 2, 6\n(6) + (2) = 8, left: 8\n(1) / (7) = 1/7, left: 1/7, 2, 1\n(1) + (1/7) = 8/7, left: 8/7, 2\n(7) + (1) = 8, left: 8, 2, 1\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(7) - (1) = 6, left: 6, 2, 1\n(1) / (7) = 1/7, left: 1/7, 2, 1\n(1/7) / (1) = 1/7, left: 1/7, 2\n(1) + (1/7) = 8/7, left: 8/7, 2\n(1) / (1/7) = 7, left: 7, 2\n(1) - (2) = -1, left: -1, 1/7\n(1/7) + (-1) = -6/7, left: -6/7\n(7) + (1) = 8, left: 8, 2, 1\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(1) - (7) = -6, left: -6, 2, 1\n(2) - (-6) = 8, left: 8, 1\n(1) + (8) = 9, left: 9\n(1) + (-6) = -5, left: -5, 2\n(1) / (7) = 1/7, left: 1/7, 2, 1\n(1) - (1/7) = 6/7, left: 6/7, 2\n(7) / (1) = 7, left: 7, 2, 1\n(2) - (1) = 1, left: 1, 7\n(1) - (7) = -6, left: -6, 2\n(-6) - (2) = -8, left: -8\n(7) * (1) = 7, left: 7, 2, 1\n(7) + (1) = 8, left: 8, 2, 1\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(7) + (1) = 8, left: 8, 2, 1\n(2) - (8) = -6, left: -6, 1\n(2) * (8) = 16, left: 16, 1\n(8) / (2) = 4, left: 4, 1\n(1) * (4) = 4, left: 4\n(1) + (8) = 9, left: 9, 2\n(2) / (9) = 2/9, left: 2/9\n(8) - (1) = 7, left: 7, 2\n(2) * (7) = 14, left: 14\n(7) / (2) = 7/2, left: 7/2\n(1) * (8) = 8, left: 8, 2\n(2) / (8) = 1/4, left: 1/4\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(7) / (1) = 7, left: 7, 2, 1\n(1) / (2) = 1/2, left: 1/2, 7\n(7) / (1/2) = 14, left: 14\n(7) - (1) = 6, left: 6, 2, 1\n(1) / (7) = 1/7, left: 1/7, 2, 1\n(1/7) - (1) = -6/7, left: -6/7, 2\n(1) * (1/7) = 1/7, left: 1/7, 2\n(2) - (1/7) = 13/7, left: 13/7\n(7) * (1) = 7, left: 7, 2, 1\n(7) - (2) = 5, left: 5, 1\n(5) / (1) = 5, left: 5\n(7) + (1) = 8, left: 8, 2, 1\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(2) / (7) = 2/7, left: 2/7, 1, 1\n(2) - (7) = -5, left: -5, 1, 1\n(1) - (-5) = 6, left: 6, 1\n(7) - (2) = 5, left: 5, 1, 1\n(7) * (2) = 14, left: 14, 1, 1\n(1) * (14) = 14, left: 14, 1\n(7) / (2) = 7/2, left: 7/2, 1, 1\n(1) / (1) = 1, left: 1, 7/2\n(7) + (2) = 9, left: 9, 1, 1\n(1) / (9) = 1/9, left: 1/9, 1\n(9) / (1) = 9, left: 9, 1\n(2) + (1) = 3, left: 3, 7, 1\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((2 + 1) * (7 + 1))"}, {"input": "7 2 1 1\n", "output": "(7) - (1) = 6, left: 6, 2, 1\n(1) - (2) = -1, left: -1, 6\n(6) / (-1) = -6, left: -6\n(2) + (1) = 3, left: 3, 6\n(2) - (1) = 1, left: 1, 6\n(6) + (1) = 7, left: 7\n(6) / (2) = 3, left: 3, 1\n(1) * (3) = 3, left: 3\n(1) / (7) = 1/7, left: 1/7, 2, 1\n(2) * (1) = 2, left: 2, 1/7\n(7) + (1) = 8, left: 8, 2, 1\n(2) * (1) = 2, left: 2, 8\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "12 4 12 12\n", "output": "(12) + (12) = 24, left: 24, 4, 12\n(12) - (4) = 8, left: 8, 24\n(24) / (8) = 3, left: 3\n(4) + (12) = 16, left: 16, 24\n(4) * (12) = 48, left: 48, 24\n(48) - (24) = 24, left: 24\nreach 24! expression: ((4 * 12) - (12 + 12))"}, {"input": "12 4 12 12\n", "output": "(12) / (4) = 3, left: 3, 12, 12\n(12) / (12) = 1, left: 1, 3\n(3) / (12) = 1/4, left: 1/4, 12\n(12) - (3) = 9, left: 9, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (12 / 4)) - 12)"}, {"input": "12 4 12 12\n", "output": "(12) - (12) = 0, left: 0, 12, 4\n(12) + (4) = 16, left: 16, 0\n(0) / (16) = 0, left: 0\n(12) * (12) = 144, left: 144, 12, 4\n(144) / (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: (((12 * 12) / 4) - 12)"}, {"input": "12 4 12 12\n", "output": "(4) * (12) = 48, left: 48, 12, 12\n(48) / (12) = 4, left: 4, 12\n(4) / (12) = 1/3, left: 1/3\n(12) / (4) = 3, left: 3\n(48) - (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: (((4 * 12) - 12) - 12)"}, {"input": "12 4 12 12\n", "output": "(4) * (12) = 48, left: 48, 12, 12\n(48) / (12) = 4, left: 4, 12\n(12) * (4) = 48, left: 48\n(4) / (12) = 1/3, left: 1/3\n(12) / (4) = 3, left: 3\n(48) - (12) = 36, left: 36, 12\n(12) + (36) = 48, left: 48\n(12) * (36) = 432, left: 432\n(36) / (12) = 3, left: 3\n(36) - (12) = 24, left: 24\nreach 24! expression: (((4 * 12) - 12) - 12)"}, {"input": "12 4 12 12\n", "output": "(12) + (12) = 24, left: 24, 4, 12\n(12) / (4) = 3, left: 3, 24\n(3) - (24) = -21, left: -21\n(4) / (12) = 1/3, left: 1/3, 24\n(12) - (4) = 8, left: 8, 24\n(24) * (8) = 192, left: 192\n(4) + (12) = 16, left: 16, 24\n(16) - (24) = -8, left: -8\n(4) * (12) = 48, left: 48, 24\n(48) - (24) = 24, left: 24\nreach 24! expression: ((4 * 12) - (12 + 12))"}, {"input": "12 4 12 12\n", "output": "(12) - (12) = 0, left: 0, 12, 4\n(4) * (0) = 0, left: 0, 12\n(12) - (12) = 0, left: 0, 12, 4\n(4) + (0) = 4, left: 4, 12\n(4) / (12) = 1/3, left: 1/3\n(12) - (4) = 8, left: 8, 0\n(0) * (8) = 0, left: 0\n(12) * (12) = 144, left: 144, 12, 4\n(144) / (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: (((12 * 12) / 4) - 12)"}, {"input": "12 4 12 12\n", "output": "(12) / (4) = 3, left: 3, 12, 12\n(12) - (12) = 0, left: 0, 3\n(0) - (3) = -3, left: -3\n(12) / (12) = 1, left: 1, 3\n(12) * (12) = 144, left: 144, 3\n(12) / (3) = 4, left: 4, 12\n(3) - (12) = -9, left: -9, 12\n(-9) / (12) = -3/4, left: -3/4\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (12 / 4)) - 12)"}, {"input": "12 4 12 12\n", "output": "(12) - (4) = 8, left: 8, 12, 12\n(12) * (12) = 144, left: 144, 8\n(12) / (8) = 3/2, left: 3/2, 12\n(12) * (3/2) = 18, left: 18\n(8) / (12) = 2/3, left: 2/3, 12\n(4) - (12) = -8, left: -8, 12, 12\n(12) / (4) = 3, left: 3, 12, 12\n(3) - (12) = -9, left: -9, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (12 / 4)) - 12)"}, {"input": "10 3 8 3\n", "output": "(10) - (3) = 7, left: 7, 8, 3\n(3) / (10) = 3/10, left: 3/10, 8, 3\n(8) / (3/10) = 80/3, left: 80/3, 3\n(10) / (3) = 10/3, left: 10/3, 8, 3\n(10/3) - (3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((10 / 3) - 3))"}, {"input": "10 3 8 3\n", "output": "(10) + (3) = 13, left: 13, 3, 8\n(3) - (13) = -10, left: -10, 8\n(13) / (3) = 13/3, left: 13/3, 8\n(8) + (13/3) = 37/3, left: 37/3\n(3) + (13) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (3 + (10 + 3)))"}, {"input": "10 3 8 3\n", "output": "(10) / (8) = 5/4, left: 5/4, 3, 3\n(3) - (5/4) = 7/4, left: 7/4, 3\n(7/4) - (3) = -5/4, left: -5/4\n(10) - (8) = 2, left: 2, 3, 3\n(3) * (2) = 6, left: 6, 3\n(6) / (3) = 2, left: 2\n(8) / (10) = 4/5, left: 4/5, 3, 3\n(10) + (8) = 18, left: 18, 3, 3\n(3) + (3) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((10 + 8) + (3 + 3))"}, {"input": "10 3 8 3\n", "output": "(8) * (3) = 24, left: 24, 10, 3\n(24) - (3) = 21, left: 21, 10\n(3) - (8) = -5, left: -5, 10, 3\n(-5) - (10) = -15, left: -15, 3\n(8) - (3) = 5, left: 5, 10, 3\n(5) - (3) = 2, left: 2, 10\n(10) - (5) = 5, left: 5, 3\n(8) + (3) = 11, left: 11, 10, 3\n(10) + (3) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((8 + 3) + (10 + 3))"}, {"input": "10 3 8 3\n", "output": "(10) + (3) = 13, left: 13, 3, 8\n(3) - (13) = -10, left: -10, 8\n(8) + (-10) = -2, left: -2\n(8) - (-10) = 18, left: 18\n(13) / (3) = 13/3, left: 13/3, 8\n(8) - (13/3) = 11/3, left: 11/3\n(13/3) - (8) = -11/3, left: -11/3\n(8) + (13/3) = 37/3, left: 37/3\n(3) + (13) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (3 + (10 + 3)))"}, {"input": "10 3 8 3\n", "output": "(10) - (3) = 7, left: 7, 3, 8\n(7) - (3) = 4, left: 4, 8\n(8) - (4) = 4, left: 4\n(8) / (3) = 8/3, left: 8/3, 7\n(8) - (7) = 1, left: 1, 3\n(10) + (3) = 13, left: 13, 3, 8\n(13) / (8) = 13/8, left: 13/8, 3\n(13/8) / (3) = 13/24, left: 13/24\n(8) + (13) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (8 + (10 + 3)))"}, {"input": "10 3 8 3\n", "output": "(10) - (3) = 7, left: 7, 8, 3\n(7) / (3) = 7/3, left: 7/3, 8\n(3) * (7) = 21, left: 21, 8\n(8) / (21) = 8/21, left: 8/21\n(3) / (10) = 3/10, left: 3/10, 8, 3\n(8) * (3) = 24, left: 24, 3/10\n(24) - (3/10) = 237/10, left: 237/10\n(10) / (3) = 10/3, left: 10/3, 8, 3\n(10/3) - (3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((10 / 3) - 3))"}, {"input": "8 12 2 4\n", "output": "(2) / (12) = 1/6, left: 1/6, 8, 4\n(8) + (4) = 12, left: 12, 1/6\n(8) * (4) = 32, left: 32, 1/6\n(1/6) / (32) = 1/192, left: 1/192\n(8) - (4) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((8 - 4) / (2 / 12))"}, {"input": "8 12 2 4\n", "output": "(4) / (8) = 1/2, left: 1/2, 12, 2\n(12) - (1/2) = 23/2, left: 23/2, 2\n(2) / (1/2) = 4, left: 4, 12\n(2) + (1/2) = 5/2, left: 5/2, 12\n(1/2) - (2) = -3/2, left: -3/2, 12\n(8) + (4) = 12, left: 12, 12, 2\n(12) / (2) = 6, left: 6, 12\n(8) - (4) = 4, left: 4, 12, 2\n(4) - (2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((8 - 4) - 2))"}, {"input": "8 12 2 4\n", "output": "(2) / (4) = 1/2, left: 1/2, 8, 12\n(8) + (1/2) = 17/2, left: 17/2, 12\n(1/2) / (8) = 1/16, left: 1/16, 12\n(1/2) - (12) = -23/2, left: -23/2, 8\n(2) * (4) = 8, left: 8, 8, 12\n(8) + (12) = 20, left: 20, 8\n(8) * (12) = 96, left: 96, 8\n(2) + (4) = 6, left: 6, 8, 12\n(12) - (8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 + 4) * (12 - 8))"}, {"input": "8 12 2 4\n", "output": "(2) / (12) = 1/6, left: 1/6, 8, 4\n(4) - (8) = -4, left: -4, 1/6\n(1/6) * (-4) = -2/3, left: -2/3\n(4) / (8) = 1/2, left: 1/2, 1/6\n(8) + (4) = 12, left: 12, 1/6\n(1/6) - (12) = -71/6, left: -71/6\n(8) * (4) = 32, left: 32, 1/6\n(8) - (4) = 4, left: 4, 1/6\n(1/6) / (4) = 1/24, left: 1/24\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((8 - 4) / (2 / 12))"}, {"input": "8 12 2 4\n", "output": "(2) / (8) = 1/4, left: 1/4, 12, 4\n(4) - (12) = -8, left: -8, 1/4\n(1/4) - (-8) = 33/4, left: 33/4\n(12) / (4) = 3, left: 3, 1/4\n(8) / (2) = 4, left: 4, 12, 4\n(12) * (4) = 48, left: 48, 4\n(8) - (2) = 6, left: 6, 12, 4\n(4) / (6) = 2/3, left: 2/3, 12\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((8 - 2) - 4))"}, {"input": "8 12 2 4\n", "output": "(12) / (8) = 3/2, left: 3/2, 2, 4\n(2) * (3/2) = 3, left: 3, 4\n(3/2) - (2) = -1/2, left: -1/2, 4\n(3/2) / (4) = 3/8, left: 3/8, 2\n(2) * (3/8) = 3/4, left: 3/4\n(4) - (2) = 2, left: 2, 3/2\n(3/2) + (2) = 7/2, left: 7/2\n(12) - (8) = 4, left: 4, 2, 4\n(2) + (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 + (12 - 8)))"}, {"input": "8 8 10 2\n", "output": "(8) / (10) = 4/5, left: 4/5, 8, 2\n(2) / (8) = 1/4, left: 1/4, 4/5\n(2) / (4/5) = 5/2, left: 5/2, 8\n(8) + (10) = 18, left: 18, 8, 2\n(2) - (18) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (2 - (8 + 10)))"}, {"input": "8 8 10 2\n", "output": "(10) / (8) = 5/4, left: 5/4, 8, 2\n(8) - (5/4) = 27/4, left: 27/4, 2\n(8) - (2) = 6, left: 6, 5/4\n(8) + (10) = 18, left: 18, 8, 2\n(2) - (18) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (2 - (8 + 10)))"}, {"input": "8 8 10 2\n", "output": "(2) - (8) = -6, left: -6, 8, 10\n(-6) / (8) = -3/4, left: -3/4, 10\n(10) + (-3/4) = 37/4, left: 37/4\n(10) / (-3/4) = -40/3, left: -40/3\n(-6) - (8) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((2 - 8) - 8))"}, {"input": "8 8 10 2\n", "output": "(10) / (8) = 5/4, left: 5/4, 8, 2\n(8) / (5/4) = 32/5, left: 32/5, 2\n(5/4) / (2) = 5/8, left: 5/8, 8\n(8) / (2) = 4, left: 4, 5/4\n(8) * (2) = 16, left: 16, 5/4\n(8) + (10) = 18, left: 18, 8, 2\n(18) / (2) = 9, left: 9, 8\n(9) - (8) = 1, left: 1\n(2) - (18) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (2 - (8 + 10)))"}, {"input": "8 8 10 2\n", "output": "(2) - (8) = -6, left: -6, 8, 10\n(-6) / (8) = -3/4, left: -3/4, 10\n(10) + (-3/4) = 37/4, left: 37/4\n(-3/4) / (10) = -3/40, left: -3/40\n(10) * (-3/4) = -15/2, left: -15/2\n(-3/4) - (10) = -43/4, left: -43/4\n(10) / (-3/4) = -40/3, left: -40/3\n(10) - (-3/4) = 43/4, left: 43/4\n(-6) - (8) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((2 - 8) - 8))"}, {"input": "8 8 10 2\n", "output": "(8) / (10) = 4/5, left: 4/5, 8, 2\n(2) - (8) = -6, left: -6, 4/5\n(8) - (10) = -2, left: -2, 8, 2\n(8) / (-2) = -4, left: -4, 2\n(8) / (2) = 4, left: 4, -2\n(10) - (8) = 2, left: 2, 8, 2\n(8) + (2) = 10, left: 10, 2\n(8) + (10) = 18, left: 18, 8, 2\n(8) + (18) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((8 + (8 + 10)) - 2)"}, {"input": "8 8 10 2\n", "output": "(8) / (10) = 4/5, left: 4/5, 8, 2\n(8) * (2) = 16, left: 16, 4/5\n(4/5) / (2) = 2/5, left: 2/5, 8\n(2) * (4/5) = 8/5, left: 8/5, 8\n(2) / (4/5) = 5/2, left: 5/2, 8\n(8) + (5/2) = 21/2, left: 21/2\n(2) + (4/5) = 14/5, left: 14/5, 8\n(8) + (10) = 18, left: 18, 8, 2\n(2) - (18) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (2 - (8 + 10)))"}, {"input": "8 8 10 2\n", "output": "(8) * (10) = 80, left: 80, 8, 2\n(80) - (8) = 72, left: 72, 2\n(10) - (8) = 2, left: 2, 8, 2\n(8) - (10) = -2, left: -2, 8, 2\n(2) / (8) = 1/4, left: 1/4, -2\n(2) * (-2) = -4, left: -4, 8\n(10) / (8) = 5/4, left: 5/4, 8, 2\n(8) + (10) = 18, left: 18, 8, 2\n(18) - (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((8 + 10) - 2))"}, {"input": "8 8 10 2\n", "output": "(2) - (8) = -6, left: -6, 8, 10\n(-6) / (8) = -3/4, left: -3/4, 10\n(10) + (-3/4) = 37/4, left: 37/4\n(-3/4) / (10) = -3/40, left: -3/40\n(10) * (-3/4) = -15/2, left: -15/2\n(-3/4) - (10) = -43/4, left: -43/4\n(10) / (-3/4) = -40/3, left: -40/3\n(10) - (-3/4) = 43/4, left: 43/4\n(-6) - (8) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((2 - 8) - 8))"}, {"input": "8 8 10 2\n", "output": "(2) - (8) = -6, left: -6, 8, 10\n(-6) / (8) = -3/4, left: -3/4, 10\n(10) + (-3/4) = 37/4, left: 37/4\n(-3/4) / (10) = -3/40, left: -3/40\n(10) * (-3/4) = -15/2, left: -15/2\n(-3/4) - (10) = -43/4, left: -43/4\n(10) / (-3/4) = -40/3, left: -40/3\n(10) - (-3/4) = 43/4, left: 43/4\n(-6) - (8) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((2 - 8) - 8))"}, {"input": "12 4 1 2\n", "output": "(4) / (1) = 4, left: 4, 12, 2\n(4) - (2) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(2) / (12) = 1/6, left: 1/6\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 / 1) - 2))"}, {"input": "12 4 1 2\n", "output": "(4) + (2) = 6, left: 6, 12, 1\n(6) / (1) = 6, left: 6, 12\n(6) / (12) = 1/2, left: 1/2\n(12) * (1) = 12, left: 12, 6\n(1) - (12) = -11, left: -11, 6\n(4) / (2) = 2, left: 2, 12, 1\n(1) - (2) = -1, left: -1, 12\n(-1) / (12) = -1/12, left: -1/12\n(1) * (2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 * (4 / 2)))"}, {"input": "12 4 1 2\n", "output": "(2) - (1) = 1, left: 1, 12, 4\n(4) / (12) = 1/3, left: 1/3, 1\n(1) - (1/3) = 2/3, left: 2/3\n(4) - (1) = 3, left: 3, 12\n(12) / (3) = 4, left: 4\n(1) + (2) = 3, left: 3, 12, 4\n(12) + (3) = 15, left: 15, 4\n(4) + (15) = 19, left: 19\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (4 * (1 + 2)))"}, {"input": "12 4 1 2\n", "output": "(2) - (1) = 1, left: 1, 12, 4\n(12) / (4) = 3, left: 3, 1\n(3) / (1) = 3, left: 3\n(4) / (12) = 1/3, left: 1/3, 1\n(1) + (1/3) = 4/3, left: 4/3\n(1) / (12) = 1/12, left: 1/12, 4\n(4) * (1/12) = 1/3, left: 1/3\n(2) / (1) = 2, left: 2, 12, 4\n(12) / (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (12 / (2 / 1)))"}, {"input": "12 4 1 2\n", "output": "(4) / (1) = 4, left: 4, 12, 2\n(4) - (2) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(2) / (12) = 1/6, left: 1/6\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 / 1) - 2))"}, {"input": "12 4 1 2\n", "output": "(4) / (1) = 4, left: 4, 12, 2\n(4) - (2) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(2) / (12) = 1/6, left: 1/6\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 / 1) - 2))"}, {"input": "8 1 7 4\n", "output": "(1) / (8) = 1/8, left: 1/8, 7, 4\n(4) / (1/8) = 32, left: 32, 7\n(7) / (32) = 7/32, left: 7/32\n(4) - (7) = -3, left: -3, 1/8\n(7) - (4) = 3, left: 3, 1/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((7 - 4) / (1 / 8))"}, {"input": "8 1 7 4\n", "output": "(1) / (8) = 1/8, left: 1/8, 7, 4\n(4) * (1/8) = 1/2, left: 1/2, 7\n(1/8) - (4) = -31/8, left: -31/8, 7\n(4) - (1/8) = 31/8, left: 31/8, 7\n(1/8) - (7) = -55/8, left: -55/8, 4\n(7) - (1/8) = 55/8, left: 55/8, 4\n(7) + (4) = 11, left: 11, 1/8\n(11) / (1/8) = 88, left: 88\n(7) - (4) = 3, left: 3, 1/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((7 - 4) / (1 / 8))"}, {"input": "8 1 7 4\n", "output": "(4) - (1) = 3, left: 3, 8, 7\n(7) + (3) = 10, left: 10, 8\n(8) + (7) = 15, left: 15, 3\n(1) - (4) = -3, left: -3, 8, 7\n(8) / (7) = 8/7, left: 8/7, -3\n(4) / (1) = 4, left: 4, 8, 7\n(7) / (4) = 7/4, left: 7/4, 8\n(8) / (7/4) = 32/7, left: 32/7\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (4 / 1)))"}, {"input": "8 1 7 4\n", "output": "(7) / (8) = 7/8, left: 7/8, 1, 4\n(7/8) - (4) = -25/8, left: -25/8, 1\n(7) - (8) = -1, left: -1, 1, 4\n(8) + (7) = 15, left: 15, 1, 4\n(1) - (15) = -14, left: -14, 4\n(8) * (7) = 56, left: 56, 1, 4\n(4) / (8) = 1/2, left: 1/2, 1, 7\n(8) * (4) = 32, left: 32, 1, 7\n(32) - (1) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: (((8 * 4) - 1) - 7)"}, {"input": "8 1 7 4\n", "output": "(1) / (4) = 1/4, left: 1/4, 8, 7\n(7) - (1/4) = 27/4, left: 27/4, 8\n(1) + (4) = 5, left: 5, 8, 7\n(5) / (7) = 5/7, left: 5/7, 8\n(1) - (4) = -3, left: -3, 8, 7\n(8) - (-3) = 11, left: 11, 7\n(7) + (-3) = 4, left: 4, 8\n(1) * (4) = 4, left: 4, 8, 7\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (1 * 4)))"}, {"input": "8 1 7 4\n", "output": "(8) / (1) = 8, left: 8, 7, 4\n(7) / (4) = 7/4, left: 7/4, 8\n(7/4) - (8) = -25/4, left: -25/4\n(7/4) / (8) = 7/32, left: 7/32\n(7) - (4) = 3, left: 3, 8\n(8) + (3) = 11, left: 11\n(3) / (8) = 3/8, left: 3/8\n(3) - (8) = -5, left: -5\n(8) / (3) = 8/3, left: 8/3\n(8) * (3) = 24, left: 24\nreach 24! expression: ((8 / 1) * (7 - 4))"}, {"input": "8 1 7 4\n", "output": "(7) / (8) = 7/8, left: 7/8, 1, 4\n(7) - (8) = -1, left: -1, 1, 4\n(1) - (4) = -3, left: -3, -1\n(8) + (7) = 15, left: 15, 1, 4\n(1) - (15) = -14, left: -14, 4\n(1) + (15) = 16, left: 16, 4\n(8) * (7) = 56, left: 56, 1, 4\n(56) / (4) = 14, left: 14, 1\n(4) / (8) = 1/2, left: 1/2, 1, 7\n(7) + (1/2) = 15/2, left: 15/2, 1\n(1) - (1/2) = 1/2, left: 1/2, 7\n(8) * (4) = 32, left: 32, 1, 7\n(32) - (1) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: (((8 * 4) - 1) - 7)"}, {"input": "8 1 7 4\n", "output": "(4) - (1) = 3, left: 3, 8, 7\n(8) * (3) = 24, left: 24, 7\n(1) / (4) = 1/4, left: 1/4, 8, 7\n(8) - (1/4) = 31/4, left: 31/4, 7\n(7) - (31/4) = -3/4, left: -3/4\n(1) - (4) = -3, left: -3, 8, 7\n(7) + (-3) = 4, left: 4, 8\n(8) * (4) = 32, left: 32\n(8) + (7) = 15, left: 15, -3\n(7) - (8) = -1, left: -1, -3\n(1) * (4) = 4, left: 4, 8, 7\n(4) / (7) = 4/7, left: 4/7, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (1 * 4)))"}, {"input": "5 5 12 3\n", "output": "(12) * (3) = 36, left: 36, 5, 5\n(5) * (3) = 15, left: 15, 5, 12\n(5) / (12) = 5/12, left: 5/12, 5, 3\n(3) / (5/12) = 36/5, left: 36/5, 5\n(5) / (36/5) = 25/36, left: 25/36\n(12) - (5) = 7, left: 7, 5, 3\n(5) * (12) = 60, left: 60, 5, 3\n(5) / (5) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(3) - (12) = -9, left: -9, 5, 5\n(12) - (3) = 9, left: 9, 5, 5\n(3) - (5) = -2, left: -2, 5, 12\n(5) / (-2) = -5/2, left: -5/2, 12\n(5) * (3) = 15, left: 15, 5, 12\n(12) - (15) = -3, left: -3, 5\n(5) / (3) = 5/3, left: 5/3, 5, 12\n(5) / (5) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(12) / (3) = 4, left: 4, 5, 5\n(12) + (3) = 15, left: 15, 5, 5\n(15) - (5) = 10, left: 10, 5\n(3) - (12) = -9, left: -9, 5, 5\n(5) + (5) = 10, left: 10, 12, 3\n(12) - (10) = 2, left: 2, 3\n(5) * (5) = 25, left: 25, 12, 3\n(5) / (5) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(5) * (3) = 15, left: 15, 5, 12\n(5) + (3) = 8, left: 8, 5, 12\n(5) - (3) = 2, left: 2, 5, 12\n(2) - (5) = -3, left: -3, 12\n(3) / (5) = 3/5, left: 3/5, 5, 12\n(5) + (3/5) = 28/5, left: 28/5, 12\n(5) / (3) = 5/3, left: 5/3, 5, 12\n(5) / (5) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(12) * (3) = 36, left: 36, 5, 5\n(3) - (5) = -2, left: -2, 5, 12\n(5) - (12) = -7, left: -7, -2\n(5) - (12) = -7, left: -7, 5, 3\n(5) + (3) = 8, left: 8, 5, 12\n(8) / (5) = 8/5, left: 8/5, 12\n(12) / (8/5) = 15/2, left: 15/2\n(5) / (5) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(5) / (12) = 5/12, left: 5/12, 5, 3\n(5) + (5/12) = 65/12, left: 65/12, 3\n(12) / (5) = 12/5, left: 12/5, 5, 3\n(5) + (12) = 17, left: 17, 5, 3\n(12) / (3) = 4, left: 4, 5, 5\n(3) / (12) = 1/4, left: 1/4, 5, 5\n(5) - (1/4) = 19/4, left: 19/4, 5\n(3) - (12) = -9, left: -9, 5, 5\n(12) - (3) = 9, left: 9, 5, 5\n(5) + (5) = 10, left: 10, 12, 3\n(12) - (10) = 2, left: 2, 3\n(5) / (5) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(3) - (12) = -9, left: -9, 5, 5\n(5) - (-9) = 14, left: 14, 5\n(5) / (3) = 5/3, left: 5/3, 5, 12\n(3) - (5) = -2, left: -2, 5, 12\n(5) + (12) = 17, left: 17, 5, 3\n(12) / (5) = 12/5, left: 12/5, 5, 3\n(5) - (12) = -7, left: -7, 5, 3\n(5) / (12) = 5/12, left: 5/12, 5, 3\n(3) * (5/12) = 5/4, left: 5/4, 5\n(5) + (5) = 10, left: 10, 12, 3\n(12) * (3) = 36, left: 36, 10\n(5) / (5) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(12) * (3) = 36, left: 36, 5, 5\n(36) - (5) = 31, left: 31, 5\n(3) - (12) = -9, left: -9, 5, 5\n(5) * (3) = 15, left: 15, 5, 12\n(15) - (12) = 3, left: 3, 5\n(5) + (3) = 8, left: 8, 5, 12\n(3) - (5) = -2, left: -2, 5, 12\n(12) - (5) = 7, left: 7, 5, 3\n(5) * (12) = 60, left: 60, 5, 3\n(5) - (5) = 0, left: 0, 12, 3\n(12) + (3) = 15, left: 15, 0\n(5) / (5) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(5) + (12) = 17, left: 17, 5, 3\n(5) * (12) = 60, left: 60, 5, 3\n(5) / (12) = 5/12, left: 5/12, 5, 3\n(5) / (3) = 5/3, left: 5/3, 5/12\n(5) / (3) = 5/3, left: 5/3, 5, 12\n(12) + (5/3) = 41/3, left: 41/3, 5\n(5) / (12) = 5/12, left: 5/12, 5, 3\n(5) * (3) = 15, left: 15, 5, 12\n(5) / (3) = 5/3, left: 5/3, 5, 12\n(5) - (3) = 2, left: 2, 5, 12\n(5) + (2) = 7, left: 7, 12\n(5) / (5) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "6 3 10 12\n", "output": "(12) - (3) = 9, left: 9, 6, 10\n(6) / (10) = 3/5, left: 3/5, 9\n(3) / (12) = 1/4, left: 1/4, 6, 10\n(3) * (12) = 36, left: 36, 6, 10\n(6) * (10) = 60, left: 60, 36\n(60) - (36) = 24, left: 24\nreach 24! expression: ((6 * 10) - (3 * 12))"}, {"input": "6 3 10 12\n", "output": "(12) / (3) = 4, left: 4, 6, 10\n(3) / (12) = 1/4, left: 1/4, 6, 10\n(10) * (1/4) = 5/2, left: 5/2, 6\n(3) * (12) = 36, left: 36, 6, 10\n(6) * (10) = 60, left: 60, 36\n(60) - (36) = 24, left: 24\nreach 24! expression: ((6 * 10) - (3 * 12))"}, {"input": "6 3 10 12\n", "output": "(12) - (3) = 9, left: 9, 6, 10\n(6) / (9) = 2/3, left: 2/3, 10\n(3) / (12) = 1/4, left: 1/4, 6, 10\n(6) + (1/4) = 25/4, left: 25/4, 10\n(10) / (25/4) = 8/5, left: 8/5\n(6) * (10) = 60, left: 60, 1/4\n(60) - (1/4) = 239/4, left: 239/4\n(3) * (12) = 36, left: 36, 6, 10\n(6) * (10) = 60, left: 60, 36\n(60) - (36) = 24, left: 24\nreach 24! expression: ((6 * 10) - (3 * 12))"}, {"input": "6 3 10 12\n", "output": "(6) - (10) = -4, left: -4, 3, 12\n(3) - (-4) = 7, left: 7, 12\n(-4) / (3) = -4/3, left: -4/3, 12\n(12) / (-4/3) = -9, left: -9\n(12) - (-4/3) = 40/3, left: 40/3\n(-4) - (3) = -7, left: -7, 12\n(12) + (-7) = 5, left: 5\n(3) * (-4) = -12, left: -12, 12\n(-12) - (12) = -24, left: -24\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (3 * (6 - 10)))"}, {"input": "6 3 10 12\n", "output": "(12) - (10) = 2, left: 2, 6, 3\n(3) / (6) = 1/2, left: 1/2, 2\n(3) - (2) = 1, left: 1, 6\n(6) / (1) = 6, left: 6\n(2) - (3) = -1, left: -1, 6\n(3) / (2) = 3/2, left: 3/2, 6\n(6) + (3/2) = 15/2, left: 15/2\n(6) + (2) = 8, left: 8, 3\n(3) - (8) = -5, left: -5\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (12 - 10)))"}, {"input": "6 3 10 12\n", "output": "(10) - (12) = -2, left: -2, 6, 3\n(3) * (-2) = -6, left: -6, 6\n(-6) - (6) = -12, left: -12\n(3) + (-2) = 1, left: 1, 6\n(1) / (6) = 1/6, left: 1/6\n(3) - (-2) = 5, left: 5, 6\n(6) - (3) = 3, left: 3, -2\n(3) - (6) = -3, left: -3, -2\n(6) - (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 - (10 - 12)))"}, {"input": "6 3 10 12\n", "output": "(3) - (12) = -9, left: -9, 6, 10\n(-9) - (6) = -15, left: -15, 10\n(12) - (3) = 9, left: 9, 6, 10\n(12) / (3) = 4, left: 4, 6, 10\n(6) - (4) = 2, left: 2, 10\n(3) / (12) = 1/4, left: 1/4, 6, 10\n(6) / (10) = 3/5, left: 3/5, 1/4\n(3) * (12) = 36, left: 36, 6, 10\n(6) * (10) = 60, left: 60, 36\n(60) - (36) = 24, left: 24\nreach 24! expression: ((6 * 10) - (3 * 12))"}, {"input": "7 9 12 12\n", "output": "(7) + (12) = 19, left: 19, 9, 12\n(7) - (12) = -5, left: -5, 9, 12\n(12) - (9) = 3, left: 3, -5\n(7) * (12) = 84, left: 84, 9, 12\n(9) * (12) = 108, left: 108, 84\n(108) - (84) = 24, left: 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "7 9 12 12\n", "output": "(7) / (12) = 7/12, left: 7/12, 9, 12\n(7) - (12) = -5, left: -5, 9, 12\n(12) - (9) = 3, left: 3, -5\n(7) * (12) = 84, left: 84, 9, 12\n(9) * (12) = 108, left: 108, 84\n(108) - (84) = 24, left: 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "7 9 12 12\n", "output": "(12) / (12) = 1, left: 1, 7, 9\n(7) - (9) = -2, left: -2, 1\n(12) + (12) = 24, left: 24, 7, 9\n(9) * (12) = 108, left: 108, 7, 12\n(7) * (12) = 84, left: 84, 108\n(108) - (84) = 24, left: 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "7 9 12 12\n", "output": "(7) / (12) = 7/12, left: 7/12, 9, 12\n(7/12) / (9) = 7/108, left: 7/108, 12\n(7) * (12) = 84, left: 84, 9, 12\n(12) + (84) = 96, left: 96, 9\n(9) * (12) = 108, left: 108, 84\n(108) - (84) = 24, left: 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "7 9 12 12\n", "output": "(7) * (12) = 84, left: 84, 9, 12\n(84) - (12) = 72, left: 72, 9\n(72) / (9) = 8, left: 8\n(84) / (12) = 7, left: 7, 9\n(9) * (12) = 108, left: 108, 84\n(108) - (84) = 24, left: 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "7 9 12 12\n", "output": "(7) / (12) = 7/12, left: 7/12, 9, 12\n(9) + (12) = 21, left: 21, 7/12\n(21) - (7/12) = 245/12, left: 245/12\n(7) - (12) = -5, left: -5, 9, 12\n(9) - (12) = -3, left: -3, -5\n(12) - (9) = 3, left: 3, -5\n(-5) - (9) = -14, left: -14, 12\n(7) * (12) = 84, left: 84, 9, 12\n(9) * (12) = 108, left: 108, 84\n(108) - (84) = 24, left: 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "7 9 12 12\n", "output": "(12) - (12) = 0, left: 0, 7, 9\n(7) * (0) = 0, left: 0, 9\n(12) / (12) = 1, left: 1, 7, 9\n(12) / (12) = 1, left: 1, 7, 9\n(1) - (7) = -6, left: -6, 9\n(9) / (12) = 3/4, left: 3/4, 7, 12\n(9) - (12) = -3, left: -3, 7, 12\n(9) * (12) = 108, left: 108, 7, 12\n(7) * (12) = 84, left: 84, 108\n(108) - (84) = 24, left: 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "7 9 12 12\n", "output": "(7) - (12) = -5, left: -5, 9, 12\n(12) + (-5) = 7, left: 7, 9\n(12) - (7) = 5, left: 5, 9, 12\n(5) - (9) = -4, left: -4, 12\n(12) / (7) = 12/7, left: 12/7, 9, 12\n(12/7) - (9) = -51/7, left: -51/7, 12\n(7) * (12) = 84, left: 84, 9, 12\n(12) - (9) = 3, left: 3, 84\n(9) * (12) = 108, left: 108, 84\n(108) - (84) = 24, left: 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "7 9 12 12\n", "output": "(12) / (7) = 12/7, left: 12/7, 9, 12\n(7) / (12) = 7/12, left: 7/12, 9, 12\n(7) + (12) = 19, left: 19, 9, 12\n(19) - (9) = 10, left: 10, 12\n(7) - (12) = -5, left: -5, 9, 12\n(9) + (-5) = 4, left: 4, 12\n(12) * (4) = 48, left: 48\n(7) * (12) = 84, left: 84, 9, 12\n(9) * (12) = 108, left: 108, 84\n(108) - (84) = 24, left: 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "7 9 12 12\n", "output": "(7) * (12) = 84, left: 84, 9, 12\n(84) - (12) = 72, left: 72, 9\n(12) * (84) = 1008, left: 1008, 9\n(9) / (1008) = 1/112, left: 1/112\n(12) + (84) = 96, left: 96, 9\n(9) - (96) = -87, left: -87\n(9) / (96) = 3/32, left: 3/32\n(12) / (84) = 1/7, left: 1/7, 9\n(9) * (12) = 108, left: 108, 84\n(108) - (84) = 24, left: 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "10 5 13 12\n", "output": "(10) + (13) = 23, left: 23, 5, 12\n(23) - (5) = 18, left: 18, 12\n(5) / (12) = 5/12, left: 5/12, 23\n(10) - (13) = -3, left: -3, 5, 12\n(5) + (-3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 + (10 - 13)))"}, {"input": "10 5 13 12\n", "output": "(10) - (5) = 5, left: 5, 13, 12\n(13) + (5) = 18, left: 18, 12\n(18) / (12) = 3/2, left: 3/2\n(10) + (5) = 15, left: 15, 13, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 5) - 13))"}, {"input": "10 5 13 12\n", "output": "(10) / (5) = 2, left: 2, 13, 12\n(12) + (2) = 14, left: 14, 13\n(10) + (5) = 15, left: 15, 13, 12\n(13) / (12) = 13/12, left: 13/12, 15\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 5) - 13))"}, {"input": "10 5 13 12\n", "output": "(12) / (10) = 6/5, left: 6/5, 5, 13\n(5) / (10) = 1/2, left: 1/2, 13, 12\n(13) * (1/2) = 13/2, left: 13/2, 12\n(10) + (5) = 15, left: 15, 13, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 5) - 13))"}, {"input": "10 5 13 12\n", "output": "(10) * (13) = 130, left: 130, 5, 12\n(5) - (130) = -125, left: -125, 12\n(13) - (10) = 3, left: 3, 5, 12\n(5) * (3) = 15, left: 15, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (13 - 10)))"}, {"input": "10 5 13 12\n", "output": "(10) * (13) = 130, left: 130, 5, 12\n(5) - (12) = -7, left: -7, 130\n(5) * (12) = 60, left: 60, 130\n(12) - (5) = 7, left: 7, 130\n(12) * (130) = 1560, left: 1560, 5\n(130) - (12) = 118, left: 118, 5\n(5) / (130) = 1/26, left: 1/26, 12\n(13) - (10) = 3, left: 3, 5, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (13 - 10)))"}, {"input": "10 5 13 12\n", "output": "(10) + (13) = 23, left: 23, 5, 12\n(12) - (23) = -11, left: -11, 5\n(5) * (23) = 115, left: 115, 12\n(115) - (12) = 103, left: 103\n(10) - (13) = -3, left: -3, 5, 12\n(12) / (-3) = -4, left: -4, 5\n(5) / (-3) = -5/3, left: -5/3, 12\n(12) * (-5/3) = -20, left: -20\n(5) + (-3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 + (10 - 13)))"}, {"input": "10 5 13 12\n", "output": "(13) * (12) = 156, left: 156, 10, 5\n(156) - (5) = 151, left: 151, 10\n(12) / (13) = 12/13, left: 12/13, 10, 5\n(13) - (12) = 1, left: 1, 10, 5\n(10) + (5) = 15, left: 15, 1\n(10) - (5) = 5, left: 5, 13, 12\n(5) / (10) = 1/2, left: 1/2, 13, 12\n(10) + (5) = 15, left: 15, 13, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 5) - 13))"}, {"input": "10 5 13 12\n", "output": "(10) / (12) = 5/6, left: 5/6, 5, 13\n(13) - (5/6) = 73/6, left: 73/6, 5\n(73/6) / (5) = 73/30, left: 73/30\n(5) / (10) = 1/2, left: 1/2, 13, 12\n(1/2) - (12) = -23/2, left: -23/2, 13\n(10) - (5) = 5, left: 5, 13, 12\n(10) + (5) = 15, left: 15, 13, 12\n(13) * (12) = 156, left: 156, 15\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 5) - 13))"}, {"input": "10 5 13 12\n", "output": "(10) / (5) = 2, left: 2, 13, 12\n(13) / (12) = 13/12, left: 13/12, 2\n(2) / (12) = 1/6, left: 1/6, 13\n(12) + (2) = 14, left: 14, 13\n(14) / (13) = 14/13, left: 14/13\n(10) + (5) = 15, left: 15, 13, 12\n(13) * (12) = 156, left: 156, 15\n(15) * (156) = 2340, left: 2340\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 5) - 13))"}, {"input": "5 4 2 10\n", "output": "(10) / (4) = 5/2, left: 5/2, 5, 2\n(5/2) - (5) = -5/2, left: -5/2, 2\n(4) + (10) = 14, left: 14, 5, 2\n(14) - (5) = 9, left: 9, 2\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((4 + 10) + (5 * 2))"}, {"input": "5 4 2 10\n", "output": "(10) / (4) = 5/2, left: 5/2, 5, 2\n(5) - (5/2) = 5/2, left: 5/2, 2\n(5/2) / (2) = 5/4, left: 5/4, 5\n(5) - (5/4) = 15/4, left: 15/4\n(4) + (10) = 14, left: 14, 5, 2\n(14) - (2) = 12, left: 12, 5\n(5) + (14) = 19, left: 19, 2\n(2) / (19) = 2/19, left: 2/19\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((4 + 10) + (5 * 2))"}, {"input": "5 4 2 10\n", "output": "(10) / (2) = 5, left: 5, 5, 4\n(5) - (5) = 0, left: 0, 4\n(2) / (10) = 1/5, left: 1/5, 5, 4\n(5) / (10) = 1/2, left: 1/2, 4, 2\n(10) / (5) = 2, left: 2, 4, 2\n(2) - (4) = -2, left: -2, 2\n(10) - (5) = 5, left: 5, 4, 2\n(4) + (10) = 14, left: 14, 5, 2\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((4 + 10) + (5 * 2))"}, {"input": "5 4 2 10\n", "output": "(10) - (4) = 6, left: 6, 5, 2\n(2) / (5) = 2/5, left: 2/5, 6\n(6) + (2/5) = 32/5, left: 32/5\n(4) - (10) = -6, left: -6, 5, 2\n(2) / (-6) = -1/3, left: -1/3, 5\n(5) - (-6) = 11, left: 11, 2\n(2) + (11) = 13, left: 13\n(4) + (10) = 14, left: 14, 5, 2\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((4 + 10) + (5 * 2))"}, {"input": "5 4 2 10\n", "output": "(5) + (4) = 9, left: 9, 2, 10\n(5) - (4) = 1, left: 1, 2, 10\n(1) - (2) = -1, left: -1, 10\n(10) / (5) = 2, left: 2, 4, 2\n(4) / (2) = 2, left: 2, 2\n(2) / (5) = 2/5, left: 2/5, 4, 10\n(10) / (2/5) = 25, left: 25, 4\n(5) * (2) = 10, left: 10, 4, 10\n(10) + (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 + (5 * 2)))"}, {"input": "5 4 2 10\n", "output": "(5) / (2) = 5/2, left: 5/2, 4, 10\n(10) - (5/2) = 15/2, left: 15/2, 4\n(15/2) - (4) = 7/2, left: 7/2\n(4) - (5/2) = 3/2, left: 3/2, 10\n(2) / (5) = 2/5, left: 2/5, 4, 10\n(4) - (10) = -6, left: -6, 2/5\n(5) * (2) = 10, left: 10, 4, 10\n(4) / (10) = 2/5, left: 2/5, 10\n(4) + (10) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (4 + (5 * 2)))"}, {"input": "5 4 2 10\n", "output": "(10) / (2) = 5, left: 5, 5, 4\n(2) - (4) = -2, left: -2, 5, 10\n(2) / (4) = 1/2, left: 1/2, 5, 10\n(10) - (5) = 5, left: 5, 4, 2\n(5) + (2) = 7, left: 7, 4, 10\n(4) - (10) = -6, left: -6, 7\n(7) - (-6) = 13, left: 13\n(2) - (5) = -3, left: -3, 4, 10\n(5) - (2) = 3, left: 3, 4, 10\n(5) / (2) = 5/2, left: 5/2, 4, 10\n(10) / (4) = 5/2, left: 5/2, 5/2\n(5) * (2) = 10, left: 10, 4, 10\n(10) + (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 + (5 * 2)))"}, {"input": "12 4 3 11\n", "output": "(12) - (3) = 9, left: 9, 4, 11\n(4) / (11) = 4/11, left: 4/11, 9\n(9) / (4/11) = 99/4, left: 99/4\n(4/11) / (9) = 4/99, left: 4/99\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((12 - 3) + (4 + 11))"}, {"input": "12 4 3 11\n", "output": "(4) + (11) = 15, left: 15, 12, 3\n(15) / (3) = 5, left: 5, 12\n(15) - (3) = 12, left: 12, 12\n(12) - (12) = 0, left: 0\n(12) - (12) = 0, left: 0\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((4 + 11) - 3))"}, {"input": "12 4 3 11\n", "output": "(3) * (11) = 33, left: 33, 12, 4\n(12) * (4) = 48, left: 48, 33\n(3) - (11) = -8, left: -8, 12, 4\n(12) / (4) = 3, left: 3, -8\n(12) + (4) = 16, left: 16, -8\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((12 + 4) - (3 - 11))"}, {"input": "12 4 3 11\n", "output": "(12) / (4) = 3, left: 3, 3, 11\n(11) * (3) = 33, left: 33, 3\n(33) / (3) = 11, left: 11\n(11) / (3) = 11/3, left: 11/3, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (12 / 4)))"}, {"input": "12 4 3 11\n", "output": "(4) + (11) = 15, left: 15, 12, 3\n(15) / (3) = 5, left: 5, 12\n(12) / (5) = 12/5, left: 12/5\n(12) - (5) = 7, left: 7\n(5) - (12) = -7, left: -7\n(5) / (12) = 5/12, left: 5/12\n(15) - (3) = 12, left: 12, 12\n(12) * (12) = 144, left: 144\n(12) - (12) = 0, left: 0\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((4 + 11) - 3))"}, {"input": "12 4 3 11\n", "output": "(12) / (4) = 3, left: 3, 3, 11\n(11) * (3) = 33, left: 33, 3\n(3) + (33) = 36, left: 36\n(11) / (3) = 11/3, left: 11/3, 3\n(3) / (11/3) = 9/11, left: 9/11\n(11/3) / (3) = 11/9, left: 11/9\n(3) / (11) = 3/11, left: 3/11, 3\n(3) - (11) = -8, left: -8, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (12 / 4)))"}, {"input": "12 4 3 11\n", "output": "(12) - (3) = 9, left: 9, 4, 11\n(4) / (11) = 4/11, left: 4/11, 9\n(9) / (4/11) = 99/4, left: 99/4\n(9) - (4/11) = 95/11, left: 95/11\n(9) * (4/11) = 36/11, left: 36/11\n(4/11) / (9) = 4/99, left: 4/99\n(9) + (4/11) = 103/11, left: 103/11\n(4/11) - (9) = -95/11, left: -95/11\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((12 - 3) + (4 + 11))"}, {"input": "12 4 3 11\n", "output": "(12) + (3) = 15, left: 15, 4, 11\n(4) * (15) = 60, left: 60, 11\n(4) / (11) = 4/11, left: 4/11, 15\n(15) / (4/11) = 165/4, left: 165/4\n(11) / (4) = 11/4, left: 11/4, 15\n(15) * (11/4) = 165/4, left: 165/4\n(4) * (11) = 44, left: 44, 15\n(12) - (3) = 9, left: 9, 4, 11\n(4) + (9) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (4 + (12 - 3)))"}, {"input": "12 4 3 11\n", "output": "(3) * (11) = 33, left: 33, 12, 4\n(4) / (33) = 4/33, left: 4/33, 12\n(33) - (4) = 29, left: 29, 12\n(12) * (33) = 396, left: 396, 4\n(12) / (33) = 4/11, left: 4/11, 4\n(3) - (11) = -8, left: -8, 12, 4\n(12) * (4) = 48, left: 48, -8\n(4) - (12) = -8, left: -8, -8\n(12) + (4) = 16, left: 16, -8\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((12 + 4) - (3 - 11))"}, {"input": "12 4 3 11\n", "output": "(12) - (3) = 9, left: 9, 4, 11\n(4) / (11) = 4/11, left: 4/11, 9\n(9) / (4/11) = 99/4, left: 99/4\n(9) - (4/11) = 95/11, left: 95/11\n(9) * (4/11) = 36/11, left: 36/11\n(4/11) / (9) = 4/99, left: 4/99\n(9) + (4/11) = 103/11, left: 103/11\n(4/11) - (9) = -95/11, left: -95/11\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((12 - 3) + (4 + 11))"}, {"input": "12 4 3 11\n", "output": "(12) - (3) = 9, left: 9, 4, 11\n(4) / (11) = 4/11, left: 4/11, 9\n(9) / (4/11) = 99/4, left: 99/4\n(9) - (4/11) = 95/11, left: 95/11\n(9) * (4/11) = 36/11, left: 36/11\n(4/11) / (9) = 4/99, left: 4/99\n(9) + (4/11) = 103/11, left: 103/11\n(4/11) - (9) = -95/11, left: -95/11\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((12 - 3) + (4 + 11))"}, {"input": "5 12 10 8\n", "output": "(10) / (12) = 5/6, left: 5/6, 5, 8\n(5/6) - (5) = -25/6, left: -25/6, 8\n(8) / (5/6) = 48/5, left: 48/5, 5\n(12) - (10) = 2, left: 2, 5, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (12 - 10)))"}, {"input": "5 12 10 8\n", "output": "(8) - (10) = -2, left: -2, 5, 12\n(10) * (8) = 80, left: 80, 5, 12\n(5) / (80) = 1/16, left: 1/16, 12\n(10) + (8) = 18, left: 18, 5, 12\n(10) / (8) = 5/4, left: 5/4, 5, 12\n(5/4) / (5) = 1/4, left: 1/4, 12\n(5) / (12) = 5/12, left: 5/12, 5/4\n(5) - (12) = -7, left: -7, 10, 8\n(10) + (-7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 + (5 - 12)))"}, {"input": "5 12 10 8\n", "output": "(12) - (5) = 7, left: 7, 10, 8\n(7) - (10) = -3, left: -3, 8\n(8) - (-3) = 11, left: 11\n(7) / (10) = 7/10, left: 7/10, 8\n(8) * (7/10) = 28/5, left: 28/5\n(10) * (7) = 70, left: 70, 8\n(70) - (8) = 62, left: 62\n(10) - (7) = 3, left: 3, 8\n(8) + (3) = 11, left: 11\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 - (12 - 5)))"}, {"input": "5 12 10 8\n", "output": "(10) * (8) = 80, left: 80, 5, 12\n(10) / (8) = 5/4, left: 5/4, 5, 12\n(8) - (5) = 3, left: 3, 12, 10\n(12) / (10) = 6/5, left: 6/5, 3\n(12) / (8) = 3/2, left: 3/2, 5, 10\n(8) - (12) = -4, left: -4, 5, 10\n(5) - (-4) = 9, left: 9, 10\n(12) - (10) = 2, left: 2, 5, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (12 - 10)))"}, {"input": "5 12 10 8\n", "output": "(12) / (8) = 3/2, left: 3/2, 5, 10\n(8) / (12) = 2/3, left: 2/3, 5, 10\n(5) * (2/3) = 10/3, left: 10/3, 10\n(10) - (8) = 2, left: 2, 5, 12\n(5) + (2) = 7, left: 7, 12\n(12) / (7) = 12/7, left: 12/7\n(5) / (8) = 5/8, left: 5/8, 12, 10\n(12) - (5) = 7, left: 7, 10, 8\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 - (12 - 5)))"}, {"input": "5 12 10 8\n", "output": "(10) / (12) = 5/6, left: 5/6, 5, 8\n(8) / (5) = 8/5, left: 8/5, 5/6\n(8/5) / (5/6) = 48/25, left: 48/25\n(5) * (8) = 40, left: 40, 5/6\n(5) - (5/6) = 25/6, left: 25/6, 8\n(12) - (10) = 2, left: 2, 5, 8\n(2) / (5) = 2/5, left: 2/5, 8\n(5) / (2) = 5/2, left: 5/2, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (12 - 10)))"}, {"input": "7 4 1 13\n", "output": "(7) - (13) = -6, left: -6, 4, 1\n(13) / (7) = 13/7, left: 13/7, 4, 1\n(1) / (4) = 1/4, left: 1/4, 13/7\n(4) / (13/7) = 28/13, left: 28/13, 1\n(1) * (13/7) = 13/7, left: 13/7, 4\n(13) - (7) = 6, left: 6, 4, 1\n(4) + (1) = 5, left: 5, 6\n(6) + (5) = 11, left: 11\n(1) / (4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((13 - 7) / (1 / 4))"}, {"input": "7 4 1 13\n", "output": "(4) * (13) = 52, left: 52, 7, 1\n(52) - (7) = 45, left: 45, 1\n(13) / (4) = 13/4, left: 13/4, 7, 1\n(1) + (13/4) = 17/4, left: 17/4, 7\n(7) * (17/4) = 119/4, left: 119/4\n(7) / (1) = 7, left: 7, 13/4\n(13/4) / (7) = 13/28, left: 13/28\n(4) + (13) = 17, left: 17, 7, 1\n(17) / (1) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((4 + 13) / 1))"}, {"input": "7 4 1 13\n", "output": "(7) + (13) = 20, left: 20, 4, 1\n(20) - (4) = 16, left: 16, 1\n(1) + (16) = 17, left: 17\n(1) * (16) = 16, left: 16\n(1) - (16) = -15, left: -15\n(16) / (1) = 16, left: 16\n(4) * (20) = 80, left: 80, 1\n(1) - (80) = -79, left: -79\n(4) + (20) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (4 + (7 + 13)))"}, {"input": "7 4 1 13\n", "output": "(4) * (13) = 52, left: 52, 7, 1\n(7) / (52) = 7/52, left: 7/52, 1\n(1) - (7/52) = 45/52, left: 45/52\n(52) - (7) = 45, left: 45, 1\n(1) - (45) = -44, left: -44\n(4) - (13) = -9, left: -9, 7, 1\n(4) / (13) = 4/13, left: 4/13, 7, 1\n(4) + (13) = 17, left: 17, 7, 1\n(17) / (1) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((4 + 13) / 1))"}, {"input": "12 11 12 9\n", "output": "(12) - (9) = 3, left: 3, 12, 11\n(12) * (11) = 132, left: 132, 3\n(12) / (9) = 4/3, left: 4/3, 12, 11\n(12) * (9) = 108, left: 108, 12, 11\n(12) * (11) = 132, left: 132, 108\n(132) - (108) = 24, left: 24\nreach 24! expression: ((12 * 11) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(12) + (9) = 21, left: 21, 12, 11\n(12) - (9) = 3, left: 3, 12, 11\n(12) * (3) = 36, left: 36, 11\n(12) * (9) = 108, left: 108, 12, 11\n(12) * (11) = 132, left: 132, 108\n(132) - (108) = 24, left: 24\nreach 24! expression: ((12 * 11) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(11) * (12) = 132, left: 132, 12, 9\n(132) / (9) = 44/3, left: 44/3, 12\n(132) - (12) = 120, left: 120, 9\n(12) + (9) = 21, left: 21, 132\n(12) * (9) = 108, left: 108, 132\n(132) - (108) = 24, left: 24\nreach 24! expression: ((11 * 12) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(12) * (9) = 108, left: 108, 11, 12\n(11) + (108) = 119, left: 119, 12\n(108) - (11) = 97, left: 97, 12\n(12) - (108) = -96, left: -96, 11\n(11) * (12) = 132, left: 132, 108\n(132) - (108) = 24, left: 24\nreach 24! expression: ((11 * 12) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(12) / (11) = 12/11, left: 12/11, 12, 9\n(11) - (12) = -1, left: -1, 12, 9\n(-1) - (12) = -13, left: -13, 9\n(11) * (12) = 132, left: 132, 12, 9\n(12) * (9) = 108, left: 108, 132\n(132) - (108) = 24, left: 24\nreach 24! expression: ((11 * 12) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(12) / (9) = 4/3, left: 4/3, 12, 11\n(9) / (12) = 3/4, left: 3/4, 12, 11\n(3/4) - (11) = -41/4, left: -41/4, 12\n(12) + (-41/4) = 7/4, left: 7/4\n(12) * (11) = 132, left: 132, 3/4\n(12) - (9) = 3, left: 3, 12, 11\n(11) / (12) = 11/12, left: 11/12, 3\n(12) * (9) = 108, left: 108, 12, 11\n(12) * (11) = 132, left: 132, 108\n(132) - (108) = 24, left: 24\nreach 24! expression: ((12 * 11) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(12) * (9) = 108, left: 108, 11, 12\n(108) / (11) = 108/11, left: 108/11, 12\n(108) / (12) = 9, left: 9, 11\n(12) - (108) = -96, left: -96, 11\n(12) / (11) = 12/11, left: 12/11, 108\n(108) * (12/11) = 1296/11, left: 1296/11\n(12/11) - (108) = -1176/11, left: -1176/11\n(11) / (12) = 11/12, left: 11/12, 108\n(11) * (12) = 132, left: 132, 108\n(132) - (108) = 24, left: 24\nreach 24! expression: ((11 * 12) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(11) + (12) = 23, left: 23, 12, 9\n(9) + (23) = 32, left: 32, 12\n(12) * (32) = 384, left: 384\n(11) / (12) = 11/12, left: 11/12, 12, 9\n(11) - (12) = -1, left: -1, 12, 9\n(12) / (-1) = -12, left: -12, 9\n(11) * (12) = 132, left: 132, 12, 9\n(12) + (9) = 21, left: 21, 132\n(12) * (9) = 108, left: 108, 132\n(132) - (108) = 24, left: 24\nreach 24! expression: ((11 * 12) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(11) * (12) = 132, left: 132, 12, 9\n(132) / (9) = 44/3, left: 44/3, 12\n(9) + (132) = 141, left: 141, 12\n(132) - (9) = 123, left: 123, 12\n(132) - (12) = 120, left: 120, 9\n(9) - (120) = -111, left: -111\n(12) - (132) = -120, left: -120, 9\n(132) / (12) = 11, left: 11, 9\n(12) * (9) = 108, left: 108, 132\n(132) - (108) = 24, left: 24\nreach 24! expression: ((11 * 12) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(12) + (9) = 21, left: 21, 12, 11\n(12) / (21) = 4/7, left: 4/7, 11\n(12) - (9) = 3, left: 3, 12, 11\n(12) + (11) = 23, left: 23, 3\n(12) / (9) = 4/3, left: 4/3, 12, 11\n(11) / (4/3) = 33/4, left: 33/4, 12\n(11) * (4/3) = 44/3, left: 44/3, 12\n(12) * (9) = 108, left: 108, 12, 11\n(12) * (11) = 132, left: 132, 108\n(132) - (108) = 24, left: 24\nreach 24! expression: ((12 * 11) - (12 * 9))"}, {"input": "5 3 6 4\n", "output": "(5) * (3) = 15, left: 15, 6, 4\n(4) + (15) = 19, left: 19, 6\n(3) - (5) = -2, left: -2, 6, 4\n(-2) / (6) = -1/3, left: -1/3, 4\n(5) - (3) = 2, left: 2, 6, 4\n(3) / (5) = 3/5, left: 3/5, 6, 4\n(4) + (3/5) = 23/5, left: 23/5, 6\n(5) + (3) = 8, left: 8, 6, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((5 + 3) - 4))"}, {"input": "5 3 6 4\n", "output": "(5) + (6) = 11, left: 11, 3, 4\n(11) / (3) = 11/3, left: 11/3, 4\n(5) - (6) = -1, left: -1, 3, 4\n(5) * (6) = 30, left: 30, 3, 4\n(30) / (4) = 15/2, left: 15/2, 3\n(6) / (5) = 6/5, left: 6/5, 3, 4\n(3) - (6/5) = 9/5, left: 9/5, 4\n(5) + (3) = 8, left: 8, 6, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((5 + 3) - 4))"}, {"input": "5 3 6 4\n", "output": "(3) + (4) = 7, left: 7, 5, 6\n(7) / (6) = 7/6, left: 7/6, 5\n(5) / (6) = 5/6, left: 5/6, 7\n(3) / (4) = 3/4, left: 3/4, 5, 6\n(6) - (5) = 1, left: 1, 3/4\n(6) * (3/4) = 9/2, left: 9/2, 5\n(4) - (3) = 1, left: 1, 5, 6\n(5) / (6) = 5/6, left: 5/6, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (4 - 3)))"}, {"input": "5 3 6 4\n", "output": "(5) * (6) = 30, left: 30, 3, 4\n(5) - (6) = -1, left: -1, 3, 4\n(5) / (6) = 5/6, left: 5/6, 3, 4\n(3) + (6) = 9, left: 9, 5, 4\n(4) - (5) = -1, left: -1, 9\n(4) + (9) = 13, left: 13, 5\n(6) / (3) = 2, left: 2, 5, 4\n(4) - (5) = -1, left: -1, 3, 6\n(3) - (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (4 - 5)))"}, {"input": "5 3 6 4\n", "output": "(3) / (4) = 3/4, left: 3/4, 5, 6\n(5) * (3/4) = 15/4, left: 15/4, 6\n(6) + (15/4) = 39/4, left: 39/4\n(5) / (3/4) = 20/3, left: 20/3, 6\n(5) - (3/4) = 17/4, left: 17/4, 6\n(17/4) / (6) = 17/24, left: 17/24\n(6) / (3/4) = 8, left: 8, 5\n(3) - (4) = -1, left: -1, 5, 6\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (3 - 4)))"}, {"input": "5 3 6 4\n", "output": "(3) + (4) = 7, left: 7, 5, 6\n(6) - (7) = -1, left: -1, 5\n(6) * (7) = 42, left: 42, 5\n(6) / (5) = 6/5, left: 6/5, 7\n(6/5) - (7) = -29/5, left: -29/5\n(7) / (5) = 7/5, left: 7/5, 6\n(5) - (7) = -2, left: -2, 6\n(3) / (4) = 3/4, left: 3/4, 5, 6\n(4) - (3) = 1, left: 1, 5, 6\n(5) / (1) = 5, left: 5, 6\n(6) + (5) = 11, left: 11\n(5) * (1) = 5, left: 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (4 - 3)))"}, {"input": "5 3 6 4\n", "output": "(5) * (6) = 30, left: 30, 3, 4\n(5) - (6) = -1, left: -1, 3, 4\n(-1) - (3) = -4, left: -4, 4\n(4) - (3) = 1, left: 1, -1\n(6) - (5) = 1, left: 1, 3, 4\n(5) / (6) = 5/6, left: 5/6, 3, 4\n(4) * (5/6) = 10/3, left: 10/3, 3\n(5) + (6) = 11, left: 11, 3, 4\n(4) / (3) = 4/3, left: 4/3, 11\n(6) / (3) = 2, left: 2, 5, 4\n(6) - (3) = 3, left: 3, 5, 4\n(4) - (5) = -1, left: -1, 3, 6\n(3) - (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (4 - 5)))"}, {"input": "5 3 6 4\n", "output": "(5) + (6) = 11, left: 11, 3, 4\n(3) - (11) = -8, left: -8, 4\n(5) - (6) = -1, left: -1, 3, 4\n(5) * (6) = 30, left: 30, 3, 4\n(3) - (4) = -1, left: -1, 30\n(3) + (30) = 33, left: 33, 4\n(6) / (5) = 6/5, left: 6/5, 3, 4\n(3) * (4) = 12, left: 12, 6/5\n(3) - (6/5) = 9/5, left: 9/5, 4\n(5) * (3) = 15, left: 15, 6, 4\n(6) - (15) = -9, left: -9, 4\n(5) + (3) = 8, left: 8, 6, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((5 + 3) - 4))"}, {"input": "11 8 2 11\n", "output": "(11) - (11) = 0, left: 0, 8, 2\n(8) / (2) = 4, left: 4, 0\n(0) * (4) = 0, left: 0\n(2) - (0) = 2, left: 2, 8\n(0) / (2) = 0, left: 0, 8\n(11) + (11) = 22, left: 22, 8, 2\n(8) * (2) = 16, left: 16, 22\n(11) / (11) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "11 8 2 11\n", "output": "(2) - (11) = -9, left: -9, 11, 8\n(8) / (11) = 8/11, left: 8/11, 11, 2\n(8) * (11) = 88, left: 88, 11, 2\n(2) - (88) = -86, left: -86, 11\n(11) - (8) = 3, left: 3, 2, 11\n(11) + (8) = 19, left: 19, 2, 11\n(8) - (11) = -3, left: -3, 2, 11\n(11) / (11) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "11 8 2 11\n", "output": "(8) - (11) = -3, left: -3, 11, 2\n(11) - (-3) = 14, left: 14, 2\n(2) / (8) = 1/4, left: 1/4, 11, 11\n(11) + (2) = 13, left: 13, 8, 11\n(2) - (11) = -9, left: -9, 8, 11\n(8) * (-9) = -72, left: -72, 11\n(11) * (11) = 121, left: 121, 8, 2\n(11) / (11) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "11 8 2 11\n", "output": "(2) / (11) = 2/11, left: 2/11, 11, 8\n(8) - (11) = -3, left: -3, 2/11\n(2) - (11) = -9, left: -9, 11, 8\n(-9) / (8) = -9/8, left: -9/8, 11\n(-9/8) - (11) = -97/8, left: -97/8\n(11) / (2) = 11/2, left: 11/2, 11, 8\n(11) - (11) = 0, left: 0, 8, 2\n(11) / (11) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "11 8 2 11\n", "output": "(11) / (8) = 11/8, left: 11/8, 2, 11\n(11) + (8) = 19, left: 19, 2, 11\n(2) + (11) = 13, left: 13, 11, 8\n(11) - (8) = 3, left: 3, 13\n(2) / (8) = 1/4, left: 1/4, 11, 11\n(11) + (1/4) = 45/4, left: 45/4, 11\n(8) - (2) = 6, left: 6, 11, 11\n(11) / (11) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "10 6 6 1\n", "output": "(1) - (6) = -5, left: -5, 10, 6\n(10) / (-5) = -2, left: -2, 6\n(6) - (1) = 5, left: 5, 10, 6\n(10) / (6) = 5/3, left: 5/3, 5\n(10) * (5) = 50, left: 50, 6\n(6) / (5) = 6/5, left: 6/5, 10\n(6) + (5) = 11, left: 11, 10\n(6) / (1) = 6, left: 6, 10, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((6 / 1) * (10 - 6))"}, {"input": "10 6 6 1\n", "output": "(1) / (10) = 1/10, left: 1/10, 6, 6\n(6) / (1/10) = 60, left: 60, 6\n(6) * (6) = 36, left: 36, 1/10\n(1) - (10) = -9, left: -9, 6, 6\n(6) * (6) = 36, left: 36, -9\n(6) - (6) = 0, left: 0, -9\n(0) - (-9) = 9, left: 9\n(10) / (1) = 10, left: 10, 6, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((10 / 1) - 6))"}, {"input": "10 6 6 1\n", "output": "(6) / (1) = 6, left: 6, 10, 6\n(6) + (6) = 12, left: 12, 10\n(6) - (6) = 0, left: 0, 10\n(10) + (0) = 10, left: 10\n(10) / (6) = 5/3, left: 5/3, 6\n(10) + (6) = 16, left: 16, 6\n(10) * (6) = 60, left: 60, 6\n(6) - (10) = -4, left: -4, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((6 / 1) * (10 - 6))"}, {"input": "10 6 6 1\n", "output": "(10) / (6) = 5/3, left: 5/3, 6, 1\n(5/3) / (1) = 5/3, left: 5/3, 6\n(6) / (10) = 3/5, left: 3/5, 6, 1\n(10) + (6) = 16, left: 16, 6, 1\n(6) / (1) = 6, left: 6, 16\n(1) / (6) = 1/6, left: 1/6, 16\n(10) * (6) = 60, left: 60, 6, 1\n(10) - (6) = 4, left: 4, 6, 1\n(6) * (4) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * (10 - 6)) / 1)"}, {"input": "9 11 12 4\n", "output": "(4) / (11) = 4/11, left: 4/11, 9, 12\n(4/11) - (12) = -128/11, left: -128/11, 9\n(-128/11) / (9) = -128/99, left: -128/99\n(12) / (4/11) = 33, left: 33, 9\n(9) + (33) = 42, left: 42\n(33) - (9) = 24, left: 24\nreach 24! expression: ((12 / (4 / 11)) - 9)"}, {"input": "9 11 12 4\n", "output": "(12) - (9) = 3, left: 3, 11, 4\n(4) * (3) = 12, left: 12, 11\n(12) * (4) = 48, left: 48, 9, 11\n(9) - (48) = -39, left: -39, 11\n(11) - (9) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (11 - 9))"}, {"input": "9 11 12 4\n", "output": "(4) / (11) = 4/11, left: 4/11, 9, 12\n(9) * (12) = 108, left: 108, 4/11\n(12) * (4/11) = 48/11, left: 48/11, 9\n(9) / (48/11) = 33/16, left: 33/16\n(12) / (4/11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((12 / (4 / 11)) - 9)"}, {"input": "9 11 12 4\n", "output": "(9) - (4) = 5, left: 5, 11, 12\n(11) + (12) = 23, left: 23, 5\n(5) * (23) = 115, left: 115\n(9) + (4) = 13, left: 13, 11, 12\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 + 4) - 11))"}, {"input": "9 11 12 4\n", "output": "(4) - (12) = -8, left: -8, 9, 11\n(12) * (4) = 48, left: 48, 9, 11\n(11) - (48) = -37, left: -37, 9\n(9) / (-37) = -9/37, left: -9/37\n(11) - (9) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (11 - 9))"}, {"input": "9 11 12 4\n", "output": "(4) / (11) = 4/11, left: 4/11, 9, 12\n(12) + (4/11) = 136/11, left: 136/11, 9\n(136/11) - (9) = 37/11, left: 37/11\n(9) / (136/11) = 99/136, left: 99/136\n(136/11) / (9) = 136/99, left: 136/99\n(4/11) - (12) = -128/11, left: -128/11, 9\n(-128/11) - (9) = -227/11, left: -227/11\n(12) / (4/11) = 33, left: 33, 9\n(9) / (33) = 3/11, left: 3/11\n(33) - (9) = 24, left: 24\nreach 24! expression: ((12 / (4 / 11)) - 9)"}, {"input": "9 11 12 4\n", "output": "(9) - (4) = 5, left: 5, 11, 12\n(11) - (5) = 6, left: 6, 12\n(11) / (12) = 11/12, left: 11/12, 5\n(9) * (4) = 36, left: 36, 11, 12\n(36) / (12) = 3, left: 3, 11\n(11) * (36) = 396, left: 396, 12\n(396) - (12) = 384, left: 384\n(9) + (4) = 13, left: 13, 11, 12\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 + 4) - 11))"}, {"input": "9 11 12 4\n", "output": "(12) - (9) = 3, left: 3, 11, 4\n(9) + (12) = 21, left: 21, 11, 4\n(21) - (4) = 17, left: 17, 11\n(9) / (12) = 3/4, left: 3/4, 11, 4\n(4) + (3/4) = 19/4, left: 19/4, 11\n(9) - (12) = -3, left: -3, 11, 4\n(11) * (-3) = -33, left: -33, 4\n(12) * (4) = 48, left: 48, 9, 11\n(11) - (9) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (11 - 9))"}, {"input": "9 11 12 4\n", "output": "(4) - (12) = -8, left: -8, 9, 11\n(-8) / (9) = -8/9, left: -8/9, 11\n(9) / (-8) = -9/8, left: -9/8, 11\n(9) - (-8) = 17, left: 17, 11\n(11) - (9) = 2, left: 2, -8\n(9) / (11) = 9/11, left: 9/11, -8\n(9/11) - (-8) = 97/11, left: 97/11\n(12) * (4) = 48, left: 48, 9, 11\n(11) - (9) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (11 - 9))"}, {"input": "9 11 12 4\n", "output": "(4) / (11) = 4/11, left: 4/11, 9, 12\n(12) / (9) = 4/3, left: 4/3, 4/11\n(9) - (12) = -3, left: -3, 4/11\n(9) - (4/11) = 95/11, left: 95/11, 12\n(4/11) - (9) = -95/11, left: -95/11, 12\n(12) / (-95/11) = -132/95, left: -132/95\n(4/11) - (12) = -128/11, left: -128/11, 9\n(12) - (4/11) = 128/11, left: 128/11, 9\n(12) / (4/11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((12 / (4 / 11)) - 9)"}, {"input": "4 3 6 4\n", "output": "(3) - (4) = -1, left: -1, 6, 4\n(-1) / (4) = -1/4, left: -1/4, 6\n(6) / (-1) = -6, left: -6, 4\n(6) * (-1) = -6, left: -6, 4\n(6) - (4) = 2, left: 2, -1\n(4) * (3) = 12, left: 12, 6, 4\n(6) + (12) = 18, left: 18, 4\n(6) / (12) = 1/2, left: 1/2, 4\n(12) - (6) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((4 * 3) - 6))"}, {"input": "4 3 6 4\n", "output": "(4) + (3) = 7, left: 7, 6, 4\n(6) + (4) = 10, left: 10, 7\n(4) + (7) = 11, left: 11, 6\n(3) / (4) = 3/4, left: 3/4, 6, 4\n(3/4) / (6) = 1/8, left: 1/8, 4\n(4) - (1/8) = 31/8, left: 31/8\n(4) - (3/4) = 13/4, left: 13/4, 6\n(4) - (3) = 1, left: 1, 6, 4\n(4) * (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (4 * (4 - 3)))"}, {"input": "4 3 6 4\n", "output": "(6) / (4) = 3/2, left: 3/2, 4, 3\n(3) - (3/2) = 3/2, left: 3/2, 4\n(3) + (3/2) = 9/2, left: 9/2, 4\n(6) + (4) = 10, left: 10, 4, 3\n(4) * (10) = 40, left: 40, 3\n(4) + (10) = 14, left: 14, 3\n(3) - (10) = -7, left: -7, 4\n(6) * (4) = 24, left: 24, 4, 3\n(4) - (3) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * 4) / (4 - 3))"}, {"input": "4 3 6 4\n", "output": "(6) * (4) = 24, left: 24, 4, 3\n(4) + (24) = 28, left: 28, 3\n(24) / (4) = 6, left: 6, 3\n(3) * (6) = 18, left: 18\n(4) / (24) = 1/6, left: 1/6, 3\n(24) - (4) = 20, left: 20, 3\n(3) * (20) = 60, left: 60\n(3) - (20) = -17, left: -17\n(4) - (3) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * 4) / (4 - 3))"}, {"input": "4 3 6 4\n", "output": "(6) - (3) = 3, left: 3, 4, 4\n(4) / (3) = 4/3, left: 4/3, 4\n(3) - (4) = -1, left: -1, 4\n(-1) - (4) = -5, left: -5\n(4) * (3) = 12, left: 12, 4\n(4) - (3) = 1, left: 1, 4\n(4) / (3) = 4/3, left: 4/3, 4\n(4) * (4/3) = 16/3, left: 16/3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (4 + 4))"}, {"input": "13 10 6 10\n", "output": "(10) + (6) = 16, left: 16, 13, 10\n(10) / (6) = 5/3, left: 5/3, 13, 10\n(5/3) / (10) = 1/6, left: 1/6, 13\n(13) - (10) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "13 10 6 10\n", "output": "(13) / (10) = 13/10, left: 13/10, 6, 10\n(6) * (13/10) = 39/5, left: 39/5, 10\n(10) / (13) = 10/13, left: 10/13, 6, 10\n(13) - (10) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "13 10 6 10\n", "output": "(13) / (10) = 13/10, left: 13/10, 10, 6\n(13) + (10) = 23, left: 23, 10, 6\n(10) / (6) = 5/3, left: 5/3, 23\n(13) - (10) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "13 10 6 10\n", "output": "(6) / (10) = 3/5, left: 3/5, 13, 10\n(13) / (3/5) = 65/3, left: 65/3, 10\n(13) / (6) = 13/6, left: 13/6, 10, 10\n(13) - (10) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "13 10 6 10\n", "output": "(10) / (6) = 5/3, left: 5/3, 13, 10\n(10) / (13) = 10/13, left: 10/13, 5/3\n(6) - (10) = -4, left: -4, 13, 10\n(10) - (6) = 4, left: 4, 13, 10\n(13) - (10) = 3, left: 3, 4\n(6) / (13) = 6/13, left: 6/13, 10, 10\n(13) * (10) = 130, left: 130, 6, 10\n(13) - (10) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "13 10 6 10\n", "output": "(10) * (6) = 60, left: 60, 13, 10\n(10) + (6) = 16, left: 16, 13, 10\n(6) - (10) = -4, left: -4, 13, 10\n(13) / (10) = 13/10, left: 13/10, 6, 10\n(10) * (13/10) = 13, left: 13, 6\n(13) - (6) = 7, left: 7\n(13) + (10) = 23, left: 23, 6, 10\n(13) - (10) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "13 10 6 10\n", "output": "(13) * (10) = 130, left: 130, 6, 10\n(6) - (10) = -4, left: -4, 130\n(13) + (10) = 23, left: 23, 6, 10\n(6) * (10) = 60, left: 60, 23\n(13) / (10) = 13/10, left: 13/10, 6, 10\n(10) / (13) = 10/13, left: 10/13, 6, 10\n(10) - (13) = -3, left: -3, 6, 10\n(13) - (10) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "13 10 6 10\n", "output": "(10) + (10) = 20, left: 20, 13, 6\n(10) / (10) = 1, left: 1, 13, 6\n(13) + (10) = 23, left: 23, 10, 6\n(10) + (23) = 33, left: 33, 6\n(10) / (13) = 10/13, left: 10/13, 10, 6\n(6) / (10) = 3/5, left: 3/5, 10/13\n(10) - (13) = -3, left: -3, 10, 6\n(13) - (10) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "13 10 6 10\n", "output": "(13) / (10) = 13/10, left: 13/10, 10, 6\n(13/10) / (10) = 13/100, left: 13/100, 6\n(6) / (13/10) = 60/13, left: 60/13, 10\n(13) * (10) = 130, left: 130, 10, 6\n(6) - (130) = -124, left: -124, 10\n(13) + (10) = 23, left: 23, 10, 6\n(23) - (10) = 13, left: 13, 6\n(13) - (10) = 3, left: 3, 10, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "8 8 9 13\n", "output": "(9) / (13) = 9/13, left: 9/13, 8, 8\n(8) * (9/13) = 72/13, left: 72/13, 8\n(8) * (72/13) = 576/13, left: 576/13\n(13) - (9) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(8) / (8) = 1, left: 1, 9, 13\n(8) * (8) = 64, left: 64, 9, 13\n(9) / (8) = 9/8, left: 9/8, 8, 13\n(8) + (9) = 17, left: 17, 8, 13\n(8) / (13) = 8/13, left: 8/13, 8, 9\n(9) / (8) = 9/8, left: 9/8, 8/13\n(13) / (9) = 13/9, left: 13/9, 8, 8\n(13) - (9) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(9) - (13) = -4, left: -4, 8, 8\n(8) / (8) = 1, left: 1, -4\n(8) * (-4) = -32, left: -32, 8\n(8) + (-32) = -24, left: -24\n(9) + (13) = 22, left: 22, 8, 8\n(8) / (22) = 4/11, left: 4/11, 8\n(8) - (4/11) = 84/11, left: 84/11\n(13) - (9) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(8) / (13) = 8/13, left: 8/13, 8, 9\n(8) + (13) = 21, left: 21, 8, 9\n(8) * (9) = 72, left: 72, 21\n(8) - (13) = -5, left: -5, 8, 9\n(9) / (-5) = -9/5, left: -9/5, 8\n(8) * (-9/5) = -72/5, left: -72/5\n(8) * (9) = 72, left: 72, 8, 13\n(13) - (9) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(13) / (8) = 13/8, left: 13/8, 8, 9\n(9) - (13/8) = 59/8, left: 59/8, 8\n(8) - (9) = -1, left: -1, 8, 13\n(8) / (9) = 8/9, left: 8/9, 8, 13\n(8) - (8) = 0, left: 0, 9, 13\n(9) + (0) = 9, left: 9, 13\n(9) / (13) = 9/13, left: 9/13, 8, 8\n(13) - (9) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(9) / (13) = 9/13, left: 9/13, 8, 8\n(8) - (9/13) = 95/13, left: 95/13, 8\n(8) + (9/13) = 113/13, left: 113/13, 8\n(8) / (113/13) = 104/113, left: 104/113\n(8) / (8) = 1, left: 1, 9/13\n(8) - (8) = 0, left: 0, 9/13\n(8) - (9/13) = 95/13, left: 95/13, 8\n(13) - (9) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(8) * (13) = 104, left: 104, 8, 9\n(13) - (8) = 5, left: 5, 8, 9\n(8) + (13) = 21, left: 21, 8, 9\n(8) / (13) = 8/13, left: 8/13, 8, 9\n(8) - (9) = -1, left: -1, 8, 13\n(8) + (9) = 17, left: 17, 8, 13\n(8) + (13) = 21, left: 21, 17\n(9) / (8) = 9/8, left: 9/8, 8, 13\n(9) - (13) = -4, left: -4, 8, 8\n(8) / (-4) = -2, left: -2, 8\n(13) / (9) = 13/9, left: 13/9, 8, 8\n(13) - (9) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(8) / (8) = 1, left: 1, 9, 13\n(8) + (9) = 17, left: 17, 8, 13\n(13) / (17) = 13/17, left: 13/17, 8\n(8) - (9) = -1, left: -1, 8, 13\n(-1) - (13) = -14, left: -14, 8\n(13) - (8) = 5, left: 5, 8, 9\n(9) - (5) = 4, left: 4, 8\n(8) - (4) = 4, left: 4\n(8) - (13) = -5, left: -5, 8, 9\n(8) / (-5) = -8/5, left: -8/5, 9\n(9) + (13) = 22, left: 22, 8, 8\n(13) - (9) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(13) / (8) = 13/8, left: 13/8, 8, 9\n(8) - (9) = -1, left: -1, 8, 13\n(8) * (9) = 72, left: 72, 8, 13\n(8) - (72) = -64, left: -64, 13\n(8) + (13) = 21, left: 21, 8, 9\n(13) - (8) = 5, left: 5, 8, 9\n(8) + (9) = 17, left: 17, 5\n(8) - (9) = -1, left: -1, 8, 13\n(8) / (-1) = -8, left: -8, 13\n(8) / (9) = 8/9, left: 8/9, 8, 13\n(9) / (13) = 9/13, left: 9/13, 8, 8\n(13) - (9) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "3 7 12 5\n", "output": "(3) / (5) = 3/5, left: 3/5, 7, 12\n(12) + (5) = 17, left: 17, 3, 7\n(3) + (7) = 10, left: 10, 17\n(5) / (12) = 5/12, left: 5/12, 3, 7\n(3) + (7) = 10, left: 10, 5/12\n(10) / (5/12) = 24, left: 24\nreach 24! expression: ((3 + 7) / (5 / 12))"}, {"input": "3 7 12 5\n", "output": "(5) / (12) = 5/12, left: 5/12, 3, 7\n(5/12) / (7) = 5/84, left: 5/84, 3\n(7) / (3) = 7/3, left: 7/3, 5/12\n(5/12) / (7/3) = 5/28, left: 5/28\n(3) + (7) = 10, left: 10, 5/12\n(10) / (5/12) = 24, left: 24\nreach 24! expression: ((3 + 7) / (5 / 12))"}, {"input": "3 7 12 5\n", "output": "(5) / (12) = 5/12, left: 5/12, 3, 7\n(5/12) - (7) = -79/12, left: -79/12, 3\n(3) + (-79/12) = -43/12, left: -43/12\n(7) - (5/12) = 79/12, left: 79/12, 3\n(79/12) / (3) = 79/36, left: 79/36\n(7) / (3) = 7/3, left: 7/3, 5/12\n(7) - (3) = 4, left: 4, 5/12\n(5/12) / (4) = 5/48, left: 5/48\n(3) + (7) = 10, left: 10, 5/12\n(10) / (5/12) = 24, left: 24\nreach 24! expression: ((3 + 7) / (5 / 12))"}, {"input": "3 7 12 5\n", "output": "(3) * (5) = 15, left: 15, 7, 12\n(3) - (5) = -2, left: -2, 7, 12\n(3) + (5) = 8, left: 8, 7, 12\n(5) / (3) = 5/3, left: 5/3, 7, 12\n(7) - (12) = -5, left: -5, 5/3\n(-5) / (5/3) = -3, left: -3\n(12) + (5) = 17, left: 17, 3, 7\n(5) / (12) = 5/12, left: 5/12, 3, 7\n(3) + (7) = 10, left: 10, 5/12\n(10) / (5/12) = 24, left: 24\nreach 24! expression: ((3 + 7) / (5 / 12))"}, {"input": "3 7 12 5\n", "output": "(7) * (12) = 84, left: 84, 3, 5\n(3) + (84) = 87, left: 87, 5\n(5) - (3) = 2, left: 2, 84\n(7) - (5) = 2, left: 2, 3, 12\n(5) / (7) = 5/7, left: 5/7, 3, 12\n(7) / (5) = 7/5, left: 7/5, 3, 12\n(3) + (12) = 15, left: 15, 7/5\n(7) + (5) = 12, left: 12, 3, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * 12) - (7 + 5))"}, {"input": "3 7 12 5\n", "output": "(5) - (7) = -2, left: -2, 3, 12\n(-2) / (12) = -1/6, left: -1/6, 3\n(3) * (-1/6) = -1/2, left: -1/2\n(3) - (12) = -9, left: -9, -2\n(7) * (5) = 35, left: 35, 3, 12\n(3) / (12) = 1/4, left: 1/4, 35\n(5) / (7) = 5/7, left: 5/7, 3, 12\n(7) + (5) = 12, left: 12, 3, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * 12) - (7 + 5))"}, {"input": "3 7 12 5\n", "output": "(3) / (7) = 3/7, left: 3/7, 12, 5\n(12) / (5) = 12/5, left: 12/5, 3/7\n(3) * (7) = 21, left: 21, 12, 5\n(7) / (3) = 7/3, left: 7/3, 12, 5\n(12) / (5) = 12/5, left: 12/5, 7/3\n(7/3) * (12/5) = 28/5, left: 28/5\n(3) + (7) = 10, left: 10, 12, 5\n(10) - (12) = -2, left: -2, 5\n(12) * (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * (3 + 7)) / 5)"}, {"input": "3 12 2 2\n", "output": "(3) / (2) = 3/2, left: 3/2, 12, 2\n(2) + (3/2) = 7/2, left: 7/2, 12\n(3/2) - (2) = -1/2, left: -1/2, 12\n(12) / (-1/2) = -24, left: -24\n(2) - (3/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 - (3 / 2)))"}, {"input": "3 12 2 2\n", "output": "(12) * (2) = 24, left: 24, 3, 2\n(2) - (3) = -1, left: -1, 24\n(24) + (-1) = 23, left: 23\n(24) / (-1) = -24, left: -24\n(3) - (2) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 * 2) / (3 - 2))"}, {"input": "3 12 2 2\n", "output": "(12) * (2) = 24, left: 24, 3, 2\n(3) + (2) = 5, left: 5, 24\n(24) + (5) = 29, left: 29\n(24) - (5) = 19, left: 19\n(2) - (3) = -1, left: -1, 24\n(24) + (-1) = 23, left: 23\n(-1) - (24) = -25, left: -25\n(3) - (2) = 1, left: 1, 24\n(24) - (1) = 23, left: 23\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 * 2) / (3 - 2))"}, {"input": "3 12 2 2\n", "output": "(3) / (2) = 3/2, left: 3/2, 12, 2\n(3/2) / (2) = 3/4, left: 3/4, 12\n(2) * (3/2) = 3, left: 3, 12\n(12) - (3) = 9, left: 9\n(2) / (3/2) = 4/3, left: 4/3, 12\n(3/2) - (2) = -1/2, left: -1/2, 12\n(12) * (-1/2) = -6, left: -6\n(12) - (-1/2) = 25/2, left: 25/2\n(2) - (3/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 - (3 / 2)))"}, {"input": "3 12 2 2\n", "output": "(3) - (2) = 1, left: 1, 12, 2\n(2) / (1) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(2) / (12) = 1/6, left: 1/6\n(12) / (2) = 6, left: 6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (2 / (3 - 2)))"}, {"input": "3 12 2 2\n", "output": "(3) - (2) = 1, left: 1, 12, 2\n(2) / (1) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(2) / (12) = 1/6, left: 1/6\n(12) / (2) = 6, left: 6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (2 / (3 - 2)))"}, {"input": "3 12 2 2\n", "output": "(3) - (2) = 1, left: 1, 12, 2\n(2) / (1) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(2) / (12) = 1/6, left: 1/6\n(12) / (2) = 6, left: 6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (2 / (3 - 2)))"}, {"input": "6 11 4 11\n", "output": "(4) - (11) = -7, left: -7, 6, 11\n(6) * (-7) = -42, left: -42, 11\n(11) + (-42) = -31, left: -31\n(11) * (-42) = -462, left: -462\n(6) - (-7) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (6 - (4 - 11)))"}, {"input": "6 11 4 11\n", "output": "(11) + (11) = 22, left: 22, 6, 4\n(4) / (6) = 2/3, left: 2/3, 22\n(6) * (4) = 24, left: 24, 22\n(4) - (6) = -2, left: -2, 22\n(22) * (-2) = -44, left: -44\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((11 + 11) - (4 - 6))"}, {"input": "6 11 4 11\n", "output": "(6) - (11) = -5, left: -5, 4, 11\n(4) + (11) = 15, left: 15, -5\n(-5) - (15) = -20, left: -20\n(-5) - (4) = -9, left: -9, 11\n(11) + (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (6 - 11)))"}, {"input": "6 11 4 11\n", "output": "(4) * (11) = 44, left: 44, 6, 11\n(44) - (6) = 38, left: 38, 11\n(38) - (11) = 27, left: 27\n(11) * (38) = 418, left: 418\n(6) * (44) = 264, left: 264, 11\n(264) / (11) = 24, left: 24\nreach 24! expression: ((6 * (4 * 11)) / 11)"}, {"input": "6 11 4 11\n", "output": "(6) - (11) = -5, left: -5, 4, 11\n(4) * (11) = 44, left: 44, -5\n(44) / (-5) = -44/5, left: -44/5\n(4) + (-5) = -1, left: -1, 11\n(-5) / (4) = -5/4, left: -5/4, 11\n(11) / (-5/4) = -44/5, left: -44/5\n(4) / (-5) = -4/5, left: -4/5, 11\n(-4/5) / (11) = -4/55, left: -4/55\n(11) + (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (6 - 11)))"}, {"input": "6 11 4 11\n", "output": "(4) * (11) = 44, left: 44, 6, 11\n(6) + (44) = 50, left: 50, 11\n(11) + (50) = 61, left: 61\n(50) / (11) = 50/11, left: 50/11\n(44) - (6) = 38, left: 38, 11\n(11) / (38) = 11/38, left: 11/38\n(38) - (11) = 27, left: 27\n(11) * (38) = 418, left: 418\n(6) * (44) = 264, left: 264, 11\n(264) / (11) = 24, left: 24\nreach 24! expression: ((6 * (4 * 11)) / 11)"}, {"input": "6 11 4 11\n", "output": "(11) + (11) = 22, left: 22, 6, 4\n(4) / (6) = 2/3, left: 2/3, 22\n(22) - (2/3) = 64/3, left: 64/3\n(22) * (2/3) = 44/3, left: 44/3\n(22) + (2/3) = 68/3, left: 68/3\n(6) * (4) = 24, left: 24, 22\n(22) - (24) = -2, left: -2\n(4) - (6) = -2, left: -2, 22\n(-2) - (22) = -24, left: -24\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((11 + 11) - (4 - 6))"}, {"input": "6 11 4 11\n", "output": "(4) - (11) = -7, left: -7, 6, 11\n(-7) / (6) = -7/6, left: -7/6, 11\n(6) + (-7) = -1, left: -1, 11\n(-1) / (11) = -1/11, left: -1/11\n(11) / (-1) = -11, left: -11\n(6) * (-7) = -42, left: -42, 11\n(11) + (-42) = -31, left: -31\n(6) - (-7) = 13, left: 13, 11\n(13) / (11) = 13/11, left: 13/11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (6 - (4 - 11)))"}, {"input": "7 13 4 5\n", "output": "(5) / (13) = 5/13, left: 5/13, 7, 4\n(5/13) / (4) = 5/52, left: 5/52, 7\n(4) - (5/13) = 47/13, left: 47/13, 7\n(7) / (47/13) = 91/47, left: 91/47\n(4) - (7) = -3, left: -3, 5/13\n(-3) - (5/13) = -44/13, left: -44/13\n(4) / (7) = 4/7, left: 4/7, 5/13\n(5) - (13) = -8, left: -8, 7, 4\n(4) - (7) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (4 - 7))"}, {"input": "7 13 4 5\n", "output": "(7) - (5) = 2, left: 2, 13, 4\n(13) + (2) = 15, left: 15, 4\n(5) - (7) = -2, left: -2, 13, 4\n(-2) - (13) = -15, left: -15, 4\n(7) / (5) = 7/5, left: 7/5, 13, 4\n(5) / (7) = 5/7, left: 5/7, 13, 4\n(5) - (4) = 1, left: 1, 7, 13\n(7) * (13) = 91, left: 91, 4, 5\n(5) + (91) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((5 + (7 * 13)) / 4)"}, {"input": "7 13 4 5\n", "output": "(13) - (7) = 6, left: 6, 4, 5\n(6) / (4) = 3/2, left: 3/2, 5\n(3/2) / (5) = 3/10, left: 3/10\n(7) + (13) = 20, left: 20, 4, 5\n(4) * (20) = 80, left: 80, 5\n(7) - (13) = -6, left: -6, 4, 5\n(-6) / (5) = -6/5, left: -6/5, 4\n(7) * (13) = 91, left: 91, 4, 5\n(5) + (91) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((5 + (7 * 13)) / 4)"}, {"input": "7 13 4 5\n", "output": "(7) - (5) = 2, left: 2, 13, 4\n(5) - (7) = -2, left: -2, 13, 4\n(7) / (5) = 7/5, left: 7/5, 13, 4\n(5) / (7) = 5/7, left: 5/7, 13, 4\n(13) / (4) = 13/4, left: 13/4, 5/7\n(5/7) - (13/4) = -71/28, left: -71/28\n(4) / (7) = 4/7, left: 4/7, 13, 5\n(4) - (7) = -3, left: -3, 13, 5\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((4 - 7) * (5 - 13))"}, {"input": "7 13 4 5\n", "output": "(13) * (5) = 65, left: 65, 7, 4\n(4) - (65) = -61, left: -61, 7\n(-61) - (7) = -68, left: -68\n(5) / (13) = 5/13, left: 5/13, 7, 4\n(7) / (5/13) = 91/5, left: 91/5, 4\n(5) - (13) = -8, left: -8, 7, 4\n(4) * (-8) = -32, left: -32, 7\n(4) / (7) = 4/7, left: 4/7, -8\n(4) - (7) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (4 - 7))"}, {"input": "7 13 4 5\n", "output": "(7) - (5) = 2, left: 2, 13, 4\n(5) - (7) = -2, left: -2, 13, 4\n(7) / (5) = 7/5, left: 7/5, 13, 4\n(13) + (7/5) = 72/5, left: 72/5, 4\n(4) / (13) = 4/13, left: 4/13, 7, 5\n(13) + (4) = 17, left: 17, 7, 5\n(13) - (4) = 9, left: 9, 7, 5\n(5) - (7) = -2, left: -2, 9\n(5) / (4) = 5/4, left: 5/4, 7, 13\n(4) + (5) = 9, left: 9, 7, 13\n(7) - (9) = -2, left: -2, 13\n(7) * (13) = 91, left: 91, 4, 5\n(5) + (91) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((5 + (7 * 13)) / 4)"}, {"input": "9 6 13 8\n", "output": "(9) / (6) = 3/2, left: 3/2, 13, 8\n(13) * (3/2) = 39/2, left: 39/2, 8\n(8) / (13) = 8/13, left: 8/13, 3/2\n(9) - (6) = 3, left: 3, 13, 8\n(13) + (8) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((9 - 6) + (13 + 8))"}, {"input": "9 6 13 8\n", "output": "(6) / (8) = 3/4, left: 3/4, 9, 13\n(9) + (3/4) = 39/4, left: 39/4, 13\n(39/4) - (13) = -13/4, left: -13/4\n(8) - (6) = 2, left: 2, 9, 13\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((8 - 6) + (9 + 13))"}, {"input": "9 6 13 8\n", "output": "(6) * (13) = 78, left: 78, 9, 8\n(8) - (9) = -1, left: -1, 78\n(8) / (9) = 8/9, left: 8/9, 78\n(9) * (78) = 702, left: 702, 8\n(8) + (78) = 86, left: 86, 9\n(78) / (8) = 39/4, left: 39/4, 9\n(9) + (39/4) = 75/4, left: 75/4\n(6) - (13) = -7, left: -7, 9, 8\n(8) - (-7) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (8 - (6 - 13)))"}, {"input": "9 6 13 8\n", "output": "(6) / (9) = 2/3, left: 2/3, 13, 8\n(8) - (2/3) = 22/3, left: 22/3, 13\n(9) * (6) = 54, left: 54, 13, 8\n(13) - (54) = -41, left: -41, 8\n(8) + (-41) = -33, left: -33\n(6) - (9) = -3, left: -3, 13, 8\n(8) + (-3) = 5, left: 5, 13\n(13) + (5) = 18, left: 18\n(-3) - (8) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((6 - 9) - 8))"}, {"input": "9 6 13 8\n", "output": "(6) + (8) = 14, left: 14, 9, 13\n(14) / (13) = 14/13, left: 14/13, 9\n(14/13) - (9) = -103/13, left: -103/13\n(9) - (14) = -5, left: -5, 13\n(6) * (8) = 48, left: 48, 9, 13\n(8) / (6) = 4/3, left: 4/3, 9, 13\n(4/3) - (9) = -23/3, left: -23/3, 13\n(8) - (6) = 2, left: 2, 9, 13\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((8 - 6) + (9 + 13))"}, {"input": "9 6 13 8\n", "output": "(6) + (13) = 19, left: 19, 9, 8\n(9) - (19) = -10, left: -10, 8\n(8) - (-10) = 18, left: 18\n(19) - (8) = 11, left: 11, 9\n(19) / (8) = 19/8, left: 19/8, 9\n(8) - (9) = -1, left: -1, 19\n(6) - (13) = -7, left: -7, 9, 8\n(8) + (-7) = 1, left: 1, 9\n(8) - (-7) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (8 - (6 - 13)))"}, {"input": "9 6 13 8\n", "output": "(9) / (6) = 3/2, left: 3/2, 13, 8\n(3/2) - (13) = -23/2, left: -23/2, 8\n(8) + (-23/2) = -7/2, left: -7/2\n(8) - (3/2) = 13/2, left: 13/2, 13\n(13) / (13/2) = 2, left: 2\n(8) + (3/2) = 19/2, left: 19/2, 13\n(8) * (3/2) = 12, left: 12, 13\n(9) - (6) = 3, left: 3, 13, 8\n(13) + (8) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((9 - 6) + (13 + 8))"}, {"input": "10 12 1 10\n", "output": "(10) / (10) = 1, left: 1, 12, 1\n(1) / (1) = 1, left: 1, 12\n(1) / (1) = 1, left: 1, 12\n(12) * (1) = 12, left: 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "10 12 1 10\n", "output": "(10) / (1) = 10, left: 10, 10, 12\n(1) - (10) = -9, left: -9, 10, 12\n(10) - (1) = 9, left: 9, 10, 12\n(10) - (9) = 1, left: 1, 12\n(1) * (10) = 10, left: 10, 10, 12\n(1) + (10) = 11, left: 11, 10, 12\n(10) / (10) = 1, left: 1, 12, 1\n(12) - (1) = 11, left: 11, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "10 12 1 10\n", "output": "(1) - (10) = -9, left: -9, 12, 10\n(-9) / (12) = -3/4, left: -3/4, 10\n(-3/4) / (10) = -3/40, left: -3/40\n(10) - (12) = -2, left: -2, 10, 1\n(12) * (10) = 120, left: 120, 10, 1\n(10) / (12) = 5/6, left: 5/6, 10, 1\n(12) - (1) = 11, left: 11, 10, 10\n(10) / (10) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "10 12 1 10\n", "output": "(10) / (10) = 1, left: 1, 12, 1\n(1) - (1) = 0, left: 0, 12\n(0) / (12) = 0, left: 0\n(12) - (0) = 12, left: 12\n(1) / (1) = 1, left: 1, 12\n(1) - (1) = 0, left: 0, 12\n(1) * (1) = 1, left: 1, 12\n(12) + (1) = 13, left: 13\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "10 12 1 10\n", "output": "(1) / (12) = 1/12, left: 1/12, 10, 10\n(10) - (12) = -2, left: -2, 1, 10\n(10) + (-2) = 8, left: 8, 1\n(10) + (12) = 22, left: 22, 1, 10\n(22) / (1) = 22, left: 22, 10\n(10) / (1) = 10, left: 10, 12, 10\n(12) / (10) = 6/5, left: 6/5, 10\n(10) / (10) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "10 12 1 10\n", "output": "(10) / (12) = 5/6, left: 5/6, 1, 10\n(12) / (10) = 6/5, left: 6/5, 1, 10\n(1) * (10) = 10, left: 10, 10, 12\n(12) / (10) = 6/5, left: 6/5, 10\n(1) - (10) = -9, left: -9, 10, 12\n(10) / (10) = 1, left: 1, 12, 1\n(12) + (1) = 13, left: 13, 1\n(13) / (1) = 13, left: 13\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "4 11 2 11\n", "output": "(11) - (11) = 0, left: 0, 4, 2\n(4) * (0) = 0, left: 0, 2\n(11) * (11) = 121, left: 121, 4, 2\n(4) - (2) = 2, left: 2, 121\n(11) / (11) = 1, left: 1, 4, 2\n(2) - (1) = 1, left: 1, 4\n(4) * (1) = 4, left: 4\n(11) + (11) = 22, left: 22, 4, 2\n(22) - (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((11 + 11) - 2))"}, {"input": "4 11 2 11\n", "output": "(4) - (11) = -7, left: -7, 11, 2\n(11) / (2) = 11/2, left: 11/2, -7\n(-7) - (2) = -9, left: -9, 11\n(11) / (4) = 11/4, left: 11/4, 11, 2\n(11) - (11/4) = 33/4, left: 33/4, 2\n(4) * (11) = 44, left: 44, 11, 2\n(4) + (11) = 15, left: 15, 11, 2\n(2) / (11) = 2/11, left: 2/11, 15\n(11) - (2) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((4 + 11) + (11 - 2))"}, {"input": "4 11 2 11\n", "output": "(4) - (11) = -7, left: -7, 2, 11\n(11) / (2) = 11/2, left: 11/2, -7\n(-7) / (11/2) = -14/11, left: -14/11\n(11) - (4) = 7, left: 7, 2, 11\n(11) / (4) = 11/4, left: 11/4, 2, 11\n(11) + (11/4) = 55/4, left: 55/4, 2\n(11/4) / (2) = 11/8, left: 11/8, 11\n(4) + (11) = 15, left: 15, 2, 11\n(15) - (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((4 + 11) - 2))"}, {"input": "4 11 2 11\n", "output": "(2) * (11) = 22, left: 22, 4, 11\n(4) + (22) = 26, left: 26, 11\n(4) * (22) = 88, left: 88, 11\n(11) + (22) = 33, left: 33, 4\n(11) / (2) = 11/2, left: 11/2, 4, 11\n(11/2) / (4) = 11/8, left: 11/8, 11\n(4) * (11/2) = 22, left: 22, 11\n(11) - (2) = 9, left: 9, 4, 11\n(11) + (9) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (11 + (11 - 2)))"}, {"input": "4 11 2 11\n", "output": "(11) - (11) = 0, left: 0, 4, 2\n(11) * (11) = 121, left: 121, 4, 2\n(11) / (11) = 1, left: 1, 4, 2\n(4) / (2) = 2, left: 2, 1\n(11) - (11) = 0, left: 0, 4, 2\n(4) - (0) = 4, left: 4, 2\n(2) / (4) = 1/2, left: 1/2\n(11) + (11) = 22, left: 22, 4, 2\n(4) + (22) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((4 + (11 + 11)) - 2)"}, {"input": "13 13 7 4\n", "output": "(13) + (13) = 26, left: 26, 7, 4\n(7) - (26) = -19, left: -19, 4\n(7) * (26) = 182, left: 182, 4\n(4) + (182) = 186, left: 186\n(13) / (13) = 1, left: 1, 7, 4\n(7) + (4) = 11, left: 11, 1\n(4) - (7) = -3, left: -3, 1\n(-3) - (1) = -4, left: -4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "13 13 7 4\n", "output": "(7) * (4) = 28, left: 28, 13, 13\n(13) * (13) = 169, left: 169, 7, 4\n(13) - (13) = 0, left: 0, 7, 4\n(13) + (13) = 26, left: 26, 7, 4\n(7) * (4) = 28, left: 28, 26\n(4) + (26) = 30, left: 30, 7\n(4) / (26) = 2/13, left: 2/13, 7\n(13) / (13) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "13 13 7 4\n", "output": "(13) * (4) = 52, left: 52, 13, 7\n(4) / (13) = 4/13, left: 4/13, 13, 7\n(13) * (7) = 91, left: 91, 4/13\n(13) * (7) = 91, left: 91, 13, 4\n(91) - (4) = 87, left: 87, 13\n(13) + (7) = 20, left: 20, 13, 4\n(7) - (13) = -6, left: -6, 13, 4\n(13) / (13) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "13 13 7 4\n", "output": "(7) / (13) = 7/13, left: 7/13, 13, 4\n(13) + (4) = 17, left: 17, 7/13\n(13) / (7) = 13/7, left: 13/7, 13, 4\n(4) * (13/7) = 52/7, left: 52/7, 13\n(13) * (13) = 169, left: 169, 7, 4\n(4) - (169) = -165, left: -165, 7\n(13) - (13) = 0, left: 0, 7, 4\n(13) / (13) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "13 13 7 4\n", "output": "(4) / (13) = 4/13, left: 4/13, 13, 7\n(13) + (4) = 17, left: 17, 13, 7\n(4) - (13) = -9, left: -9, 13, 7\n(-9) - (7) = -16, left: -16, 13\n(13) - (4) = 9, left: 9, 13, 7\n(4) / (13) = 4/13, left: 4/13, 13, 7\n(13) + (4) = 17, left: 17, 13, 7\n(13) / (13) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "2 10 10 4\n", "output": "(2) - (10) = -8, left: -8, 10, 4\n(10) * (-8) = -80, left: -80, 4\n(4) + (-80) = -76, left: -76\n(4) / (10) = 2/5, left: 2/5, 2, 10\n(2) + (2/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "2 10 10 4\n", "output": "(10) / (4) = 5/2, left: 5/2, 2, 10\n(2) / (10) = 1/5, left: 1/5, 5/2\n(4) / (10) = 2/5, left: 2/5, 2, 10\n(2/5) / (2) = 1/5, left: 1/5, 10\n(2) + (2/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "2 10 10 4\n", "output": "(10) / (4) = 5/2, left: 5/2, 2, 10\n(5/2) - (10) = -15/2, left: -15/2, 2\n(10) * (4) = 40, left: 40, 2, 10\n(4) / (10) = 2/5, left: 2/5, 2, 10\n(2) + (2/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "2 10 10 4\n", "output": "(10) / (10) = 1, left: 1, 2, 4\n(10) * (10) = 100, left: 100, 2, 4\n(100) - (4) = 96, left: 96, 2\n(4) / (10) = 2/5, left: 2/5, 2, 10\n(2) + (2/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "2 10 10 4\n", "output": "(2) * (10) = 20, left: 20, 10, 4\n(10) * (20) = 200, left: 200, 4\n(10) / (10) = 1, left: 1, 2, 4\n(10) * (10) = 100, left: 100, 2, 4\n(100) - (4) = 96, left: 96, 2\n(10) + (4) = 14, left: 14, 2, 10\n(4) - (10) = -6, left: -6, 2, 10\n(4) / (10) = 2/5, left: 2/5, 2, 10\n(2) + (2/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "2 10 10 4\n", "output": "(10) / (4) = 5/2, left: 5/2, 2, 10\n(5/2) - (2) = 1/2, left: 1/2, 10\n(10) * (4) = 40, left: 40, 2, 10\n(10) + (4) = 14, left: 14, 2, 10\n(10) - (14) = -4, left: -4, 2\n(2) / (-4) = -1/2, left: -1/2\n(2) - (10) = -8, left: -8, 14\n(4) / (10) = 2/5, left: 2/5, 2, 10\n(2) + (2/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "2 10 10 4\n", "output": "(2) * (10) = 20, left: 20, 10, 4\n(10) - (20) = -10, left: -10, 4\n(4) - (20) = -16, left: -16, 10\n(2) + (10) = 12, left: 12, 10, 4\n(10) - (2) = 8, left: 8, 10, 4\n(4) * (8) = 32, left: 32, 10\n(10) / (8) = 5/4, left: 5/4, 4\n(4) / (10) = 2/5, left: 2/5, 2, 10\n(2) + (2/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "2 10 10 4\n", "output": "(10) * (4) = 40, left: 40, 2, 10\n(2) * (10) = 20, left: 20, 40\n(40) - (10) = 30, left: 30, 2\n(30) / (2) = 15, left: 15\n(2) * (40) = 80, left: 80, 10\n(10) / (4) = 5/2, left: 5/2, 2, 10\n(4) / (10) = 2/5, left: 2/5, 2, 10\n(2/5) - (2) = -8/5, left: -8/5, 10\n(2) + (2/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "2 10 10 4\n", "output": "(10) / (10) = 1, left: 1, 2, 4\n(10) - (10) = 0, left: 0, 2, 4\n(2) / (10) = 1/5, left: 1/5, 10, 4\n(10) / (2) = 5, left: 5, 10, 4\n(4) - (10) = -6, left: -6, 5\n(5) + (-6) = -1, left: -1\n(10) - (4) = 6, left: 6, 2, 10\n(4) / (10) = 2/5, left: 2/5, 2, 10\n(2) + (2/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "11 5 10 9\n", "output": "(5) * (9) = 45, left: 45, 11, 10\n(45) / (10) = 9/2, left: 9/2, 11\n(9/2) - (11) = -13/2, left: -13/2\n(10) + (45) = 55, left: 55, 11\n(45) - (10) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((5 * 9) - 10) - 11)"}, {"input": "11 5 10 9\n", "output": "(10) - (11) = -1, left: -1, 5, 9\n(5) + (9) = 14, left: 14, -1\n(11) + (10) = 21, left: 21, 5, 9\n(5) * (21) = 105, left: 105, 9\n(5) * (9) = 45, left: 45, 21\n(45) - (21) = 24, left: 24\nreach 24! expression: ((5 * 9) - (11 + 10))"}, {"input": "11 5 10 9\n", "output": "(5) * (10) = 50, left: 50, 11, 9\n(11) / (9) = 11/9, left: 11/9, 50\n(10) - (11) = -1, left: -1, 5, 9\n(11) + (10) = 21, left: 21, 5, 9\n(5) * (9) = 45, left: 45, 21\n(45) - (21) = 24, left: 24\nreach 24! expression: ((5 * 9) - (11 + 10))"}, {"input": "11 5 10 9\n", "output": "(10) / (5) = 2, left: 2, 11, 9\n(5) * (10) = 50, left: 50, 11, 9\n(11) * (9) = 99, left: 99, 50\n(99) - (50) = 49, left: 49\n(11) * (10) = 110, left: 110, 5, 9\n(11) - (10) = 1, left: 1, 5, 9\n(1) - (9) = -8, left: -8, 5\n(11) + (10) = 21, left: 21, 5, 9\n(5) * (9) = 45, left: 45, 21\n(45) - (21) = 24, left: 24\nreach 24! expression: ((5 * 9) - (11 + 10))"}, {"input": "11 5 10 9\n", "output": "(5) * (9) = 45, left: 45, 11, 10\n(10) - (45) = -35, left: -35, 11\n(-35) - (11) = -46, left: -46\n(11) * (-35) = -385, left: -385\n(10) / (45) = 2/9, left: 2/9, 11\n(11) * (2/9) = 22/9, left: 22/9\n(45) / (10) = 9/2, left: 9/2, 11\n(45) - (10) = 35, left: 35, 11\n(35) / (11) = 35/11, left: 35/11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((5 * 9) - 10) - 11)"}, {"input": "11 5 10 9\n", "output": "(11) - (5) = 6, left: 6, 10, 9\n(5) - (11) = -6, left: -6, 10, 9\n(10) * (9) = 90, left: 90, -6\n(11) / (9) = 11/9, left: 11/9, 5, 10\n(11) * (9) = 99, left: 99, 5, 10\n(9) / (5) = 9/5, left: 9/5, 11, 10\n(9/5) - (11) = -46/5, left: -46/5, 10\n(5) * (9) = 45, left: 45, 11, 10\n(45) - (11) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: (((5 * 9) - 11) - 10)"}, {"input": "11 5 10 9\n", "output": "(10) - (11) = -1, left: -1, 5, 9\n(9) / (5) = 9/5, left: 9/5, -1\n(9) + (-1) = 8, left: 8, 5\n(9) / (-1) = -9, left: -9, 5\n(11) + (10) = 21, left: 21, 5, 9\n(5) - (21) = -16, left: -16, 9\n(9) / (-16) = -9/16, left: -9/16\n(5) + (9) = 14, left: 14, 21\n(5) * (9) = 45, left: 45, 21\n(45) - (21) = 24, left: 24\nreach 24! expression: ((5 * 9) - (11 + 10))"}, {"input": "11 5 10 9\n", "output": "(10) + (9) = 19, left: 19, 11, 5\n(10) * (9) = 90, left: 90, 11, 5\n(90) - (5) = 85, left: 85, 11\n(9) - (10) = -1, left: -1, 11, 5\n(9) / (10) = 9/10, left: 9/10, 11, 5\n(5) - (9) = -4, left: -4, 11, 10\n(5) * (9) = 45, left: 45, 11, 10\n(10) / (45) = 2/9, left: 2/9, 11\n(45) - (10) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((5 * 9) - 10) - 11)"}, {"input": "1 2 6 9\n", "output": "(1) * (2) = 2, left: 2, 6, 9\n(6) - (9) = -3, left: -3, 2\n(2) + (-3) = -1, left: -1\n(2) / (-3) = -2/3, left: -2/3\n(9) / (6) = 3/2, left: 3/2, 2\n(9) - (6) = 3, left: 3, 2\n(6) / (2) = 3, left: 3, 9\n(2) / (9) = 2/9, left: 2/9, 6\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 * 2)))"}, {"input": "1 2 6 9\n", "output": "(2) - (1) = 1, left: 1, 6, 9\n(6) * (9) = 54, left: 54, 1\n(1) / (6) = 1/6, left: 1/6, 9\n(1) - (9) = -8, left: -8, 6\n(1) / (2) = 1/2, left: 1/2, 6, 9\n(9) - (6) = 3, left: 3, 1/2\n(1/2) * (3) = 3/2, left: 3/2\n(1/2) + (3) = 7/2, left: 7/2\n(9) / (1/2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 / (1 / 2)))"}, {"input": "1 2 6 9\n", "output": "(6) - (9) = -3, left: -3, 1, 2\n(6) + (9) = 15, left: 15, 1, 2\n(6) / (9) = 2/3, left: 2/3, 1, 2\n(1) + (2) = 3, left: 3, 2/3\n(2) / (6) = 1/3, left: 1/3, 1, 9\n(1) * (9) = 9, left: 9, 1/3\n(9) - (1/3) = 26/3, left: 26/3\n(9) / (1) = 9, left: 9, 1/3\n(9) - (1) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((9 - 1) / (2 / 6))"}, {"input": "1 2 6 9\n", "output": "(6) / (2) = 3, left: 3, 1, 9\n(3) - (9) = -6, left: -6, 1\n(-6) / (1) = -6, left: -6\n(9) * (3) = 27, left: 27, 1\n(3) / (9) = 1/3, left: 1/3, 1\n(1/3) - (1) = -2/3, left: -2/3\n(1) * (3) = 3, left: 3, 9\n(1) * (9) = 9, left: 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 / 2) * (9 - 1))"}, {"input": "1 2 6 9\n", "output": "(6) - (1) = 5, left: 5, 2, 9\n(9) + (5) = 14, left: 14, 2\n(14) / (2) = 7, left: 7\n(2) * (9) = 18, left: 18, 5\n(1) + (6) = 7, left: 7, 2, 9\n(7) - (9) = -2, left: -2, 2\n(-2) / (2) = -1, left: -1\n(6) / (1) = 6, left: 6, 2, 9\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((6 / 1) + (2 * 9))"}, {"input": "1 2 6 9\n", "output": "(6) / (2) = 3, left: 3, 1, 9\n(3) - (9) = -6, left: -6, 1\n(9) + (3) = 12, left: 12, 1\n(3) - (1) = 2, left: 2, 9\n(3) / (1) = 3, left: 3, 9\n(1) + (3) = 4, left: 4, 9\n(9) - (4) = 5, left: 5\n(1) * (3) = 3, left: 3, 9\n(3) - (9) = -6, left: -6\n(9) / (1) = 9, left: 9, 3\n(1) + (9) = 10, left: 10, 3\n(3) * (10) = 30, left: 30\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 / 2) * (9 - 1))"}, {"input": "1 2 6 9\n", "output": "(6) - (1) = 5, left: 5, 2, 9\n(1) + (6) = 7, left: 7, 2, 9\n(2) * (7) = 14, left: 14, 9\n(7) - (2) = 5, left: 5, 9\n(9) * (5) = 45, left: 45\n(9) / (7) = 9/7, left: 9/7, 2\n(9) + (7) = 16, left: 16, 2\n(2) - (16) = -14, left: -14\n(9) - (7) = 2, left: 2, 2\n(6) / (1) = 6, left: 6, 2, 9\n(2) + (6) = 8, left: 8, 9\n(2) / (9) = 2/9, left: 2/9, 6\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((6 / 1) + (2 * 9))"}, {"input": "3 1 9 8\n", "output": "(3) / (9) = 1/3, left: 1/3, 1, 8\n(1/3) - (8) = -23/3, left: -23/3, 1\n(1) / (-23/3) = -3/23, left: -3/23\n(1) + (-23/3) = -20/3, left: -20/3\n(8) / (1/3) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (8 / (3 / 9)))"}, {"input": "3 1 9 8\n", "output": "(3) * (8) = 24, left: 24, 1, 9\n(24) / (1) = 24, left: 24, 9\n(1) - (24) = -23, left: -23, 9\n(9) / (24) = 3/8, left: 3/8, 1\n(9) * (24) = 216, left: 216, 1\n(9) + (24) = 33, left: 33, 1\n(8) / (3) = 8/3, left: 8/3, 1, 9\n(1) - (8/3) = -5/3, left: -5/3, 9\n(1) / (8/3) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: (9 / (1 / (8 / 3)))"}, {"input": "3 1 9 8\n", "output": "(3) + (9) = 12, left: 12, 1, 8\n(1) * (8) = 8, left: 8, 12\n(12) / (8) = 3/2, left: 3/2\n(9) - (3) = 6, left: 6, 1, 8\n(1) / (8) = 1/8, left: 1/8, 6\n(3) * (9) = 27, left: 27, 1, 8\n(3) - (9) = -6, left: -6, 1, 8\n(9) / (3) = 3, left: 3, 1, 8\n(1) / (3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (1 / (9 / 3)))"}, {"input": "3 1 9 8\n", "output": "(3) / (9) = 1/3, left: 1/3, 1, 8\n(1/3) - (8) = -23/3, left: -23/3, 1\n(8) - (1/3) = 23/3, left: 23/3, 1\n(1) / (23/3) = 3/23, left: 3/23\n(1) * (23/3) = 23/3, left: 23/3\n(23/3) / (1) = 23/3, left: 23/3\n(8) * (1/3) = 8/3, left: 8/3, 1\n(1) - (8/3) = -5/3, left: -5/3\n(8) / (1/3) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (8 / (3 / 9)))"}, {"input": "3 1 9 8\n", "output": "(3) + (9) = 12, left: 12, 1, 8\n(1) - (12) = -11, left: -11, 8\n(8) - (12) = -4, left: -4, 1\n(9) - (3) = 6, left: 6, 1, 8\n(8) - (1) = 7, left: 7, 6\n(1) / (6) = 1/6, left: 1/6, 8\n(3) * (9) = 27, left: 27, 1, 8\n(27) / (8) = 27/8, left: 27/8, 1\n(27) - (1) = 26, left: 26, 8\n(3) - (9) = -6, left: -6, 1, 8\n(1) / (8) = 1/8, left: 1/8, -6\n(9) / (3) = 3, left: 3, 1, 8\n(1) / (3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (1 / (9 / 3)))"}, {"input": "6 3 5 10\n", "output": "(6) + (5) = 11, left: 11, 3, 10\n(3) + (11) = 14, left: 14, 10\n(14) / (10) = 7/5, left: 7/5\n(10) * (14) = 140, left: 140\n(10) - (14) = -4, left: -4\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (3 + (6 + 5)))"}, {"input": "6 3 5 10\n", "output": "(10) / (6) = 5/3, left: 5/3, 3, 5\n(3) * (5) = 15, left: 15, 5/3\n(5/3) / (15) = 1/9, left: 1/9\n(5) / (3) = 5/3, left: 5/3, 5/3\n(3) - (5/3) = 4/3, left: 4/3, 5\n(6) / (10) = 3/5, left: 3/5, 3, 5\n(5) + (3/5) = 28/5, left: 28/5, 3\n(6) + (10) = 16, left: 16, 3, 5\n(3) + (5) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((6 + 10) + (3 + 5))"}, {"input": "6 3 5 10\n", "output": "(6) - (3) = 3, left: 3, 5, 10\n(5) + (10) = 15, left: 15, 3\n(3) / (6) = 1/2, left: 1/2, 5, 10\n(6) * (3) = 18, left: 18, 5, 10\n(6) / (3) = 2, left: 2, 5, 10\n(3) - (6) = -3, left: -3, 5, 10\n(5) + (10) = 15, left: 15, -3\n(6) + (3) = 9, left: 9, 5, 10\n(10) + (9) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (10 + (6 + 3)))"}, {"input": "6 3 5 10\n", "output": "(10) - (6) = 4, left: 4, 3, 5\n(3) * (4) = 12, left: 12, 5\n(4) - (5) = -1, left: -1, 3\n(6) / (10) = 3/5, left: 3/5, 3, 5\n(3/5) - (5) = -22/5, left: -22/5, 3\n(6) * (10) = 60, left: 60, 3, 5\n(5) * (60) = 300, left: 300, 3\n(6) + (10) = 16, left: 16, 3, 5\n(3) + (16) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (3 + (6 + 10)))"}, {"input": "6 3 5 10\n", "output": "(3) * (10) = 30, left: 30, 6, 5\n(6) - (30) = -24, left: -24, 5\n(5) * (-24) = -120, left: -120\n(6) + (5) = 11, left: 11, 30\n(30) - (5) = 25, left: 25, 6\n(3) + (10) = 13, left: 13, 6, 5\n(13) / (6) = 13/6, left: 13/6, 5\n(6) * (13) = 78, left: 78, 5\n(6) + (13) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (6 + (3 + 10)))"}, {"input": "6 3 5 10\n", "output": "(6) + (5) = 11, left: 11, 3, 10\n(3) + (11) = 14, left: 14, 10\n(14) / (10) = 7/5, left: 7/5\n(10) * (14) = 140, left: 140\n(10) - (14) = -4, left: -4\n(10) / (14) = 5/7, left: 5/7\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (3 + (6 + 5)))"}, {"input": "6 3 5 10\n", "output": "(6) + (5) = 11, left: 11, 3, 10\n(3) + (11) = 14, left: 14, 10\n(14) / (10) = 7/5, left: 7/5\n(10) * (14) = 140, left: 140\n(10) - (14) = -4, left: -4\n(10) / (14) = 5/7, left: 5/7\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (3 + (6 + 5)))"}, {"input": "6 3 5 10\n", "output": "(6) + (5) = 11, left: 11, 3, 10\n(3) + (11) = 14, left: 14, 10\n(14) / (10) = 7/5, left: 7/5\n(10) * (14) = 140, left: 140\n(10) - (14) = -4, left: -4\n(10) / (14) = 5/7, left: 5/7\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (3 + (6 + 5)))"}, {"input": "5 9 6 3\n", "output": "(5) - (9) = -4, left: -4, 6, 3\n(3) / (-4) = -3/4, left: -3/4, 6\n(6) / (-3/4) = -8, left: -8\n(6) * (-4) = -24, left: -24, 3\n(5) * (9) = 45, left: 45, 6, 3\n(6) / (45) = 2/15, left: 2/15, 3\n(2/15) - (3) = -43/15, left: -43/15\n(5) + (9) = 14, left: 14, 6, 3\n(14) - (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 + 9) - 6))"}, {"input": "5 9 6 3\n", "output": "(5) - (9) = -4, left: -4, 6, 3\n(6) + (3) = 9, left: 9, -4\n(6) * (3) = 18, left: 18, -4\n(5) / (9) = 5/9, left: 5/9, 6, 3\n(9) / (5) = 9/5, left: 9/5, 6, 3\n(6) + (9/5) = 39/5, left: 39/5, 3\n(6) + (3) = 9, left: 9, 9/5\n(5) + (9) = 14, left: 14, 6, 3\n(14) - (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 + 9) - 6))"}, {"input": "5 9 6 3\n", "output": "(5) - (9) = -4, left: -4, 6, 3\n(-4) - (3) = -7, left: -7, 6\n(6) * (-7) = -42, left: -42\n(5) * (9) = 45, left: 45, 6, 3\n(6) - (45) = -39, left: -39, 3\n(3) - (6) = -3, left: -3, 45\n(5) + (9) = 14, left: 14, 6, 3\n(6) + (14) = 20, left: 20, 3\n(14) - (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 + 9) - 6))"}, {"input": "5 9 6 3\n", "output": "(9) / (6) = 3/2, left: 3/2, 5, 3\n(5) * (3) = 15, left: 15, 3/2\n(6) / (9) = 2/3, left: 2/3, 5, 3\n(2/3) - (3) = -7/3, left: -7/3, 5\n(9) * (6) = 54, left: 54, 5, 3\n(5) - (54) = -49, left: -49, 3\n(3) - (-49) = 52, left: 52\n(9) - (6) = 3, left: 3, 5, 3\n(5) + (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 + (9 - 6)))"}, {"input": "5 9 6 3\n", "output": "(9) - (3) = 6, left: 6, 5, 6\n(5) + (6) = 11, left: 11, 6\n(6) * (11) = 66, left: 66\n(6) / (11) = 6/11, left: 6/11\n(5) - (6) = -1, left: -1, 6\n(6) / (-1) = -6, left: -6\n(6) / (5) = 6/5, left: 6/5, 6\n(6) * (6/5) = 36/5, left: 36/5\n(5) * (6) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((5 * (9 - 3)) - 6)"}, {"input": "5 9 6 3\n", "output": "(9) / (6) = 3/2, left: 3/2, 5, 3\n(3) - (5) = -2, left: -2, 3/2\n(6) / (9) = 2/3, left: 2/3, 5, 3\n(9) + (6) = 15, left: 15, 5, 3\n(5) / (15) = 1/3, left: 1/3, 3\n(3) * (1/3) = 1, left: 1\n(5) - (3) = 2, left: 2, 15\n(9) * (6) = 54, left: 54, 5, 3\n(3) + (54) = 57, left: 57, 5\n(5) + (57) = 62, left: 62\n(9) - (6) = 3, left: 3, 5, 3\n(5) + (3) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 + (9 - 6)))"}, {"input": "7 4 6 7\n", "output": "(6) - (7) = -1, left: -1, 4, 7\n(7) + (-1) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(6) / (4) = 3/2, left: 3/2\n(4) + (6) = 10, left: 10\n(4) / (6) = 2/3, left: 2/3\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 + (6 - 7)))"}, {"input": "7 4 6 7\n", "output": "(7) - (4) = 3, left: 3, 7, 6\n(7) + (3) = 10, left: 10, 6\n(6) * (10) = 60, left: 60\n(6) - (10) = -4, left: -4\n(7) * (3) = 21, left: 21, 6\n(3) - (7) = -4, left: -4, 6\n(-4) - (6) = -10, left: -10\n(7) - (3) = 4, left: 4, 6\n(4) - (6) = -2, left: -2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (7 - 4)))"}, {"input": "7 4 6 7\n", "output": "(7) * (4) = 28, left: 28, 6, 7\n(7) - (28) = -21, left: -21, 6\n(-21) - (6) = -27, left: -27\n(6) / (-21) = -2/7, left: -2/7\n(6) - (-21) = 27, left: 27\n(-21) / (6) = -7/2, left: -7/2\n(28) / (7) = 4, left: 4, 6\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((7 * 4) / 7))"}, {"input": "7 4 6 7\n", "output": "(6) - (7) = -1, left: -1, 4, 7\n(7) + (-1) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(6) / (4) = 3/2, left: 3/2\n(4) + (6) = 10, left: 10\n(4) / (6) = 2/3, left: 2/3\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 + (6 - 7)))"}, {"input": "7 4 6 7\n", "output": "(7) - (4) = 3, left: 3, 7, 6\n(7) + (3) = 10, left: 10, 6\n(10) - (6) = 4, left: 4\n(6) * (10) = 60, left: 60\n(6) + (10) = 16, left: 16\n(6) - (10) = -4, left: -4\n(7) * (3) = 21, left: 21, 6\n(21) - (6) = 15, left: 15\n(6) + (21) = 27, left: 27\n(3) - (7) = -4, left: -4, 6\n(6) - (-4) = 10, left: 10\n(7) - (3) = 4, left: 4, 6\n(4) - (6) = -2, left: -2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (7 - 4)))"}, {"input": "7 4 6 7\n", "output": "(6) - (7) = -1, left: -1, 4, 7\n(7) + (-1) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(6) / (4) = 3/2, left: 3/2\n(4) + (6) = 10, left: 10\n(4) / (6) = 2/3, left: 2/3\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 + (6 - 7)))"}, {"input": "2 2 3 3\n", "output": "(3) * (3) = 9, left: 9, 2, 2\n(9) / (2) = 9/2, left: 9/2, 2\n(3) - (3) = 0, left: 0, 2, 2\n(0) / (2) = 0, left: 0, 2\n(2) * (0) = 0, left: 0, 2\n(2) + (2) = 4, left: 4, 0\n(3) - (3) = 0, left: 0, 2, 2\n(3) + (3) = 6, left: 6, 2, 2\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 * (3 + 3)))"}, {"input": "2 2 3 3\n", "output": "(3) - (3) = 0, left: 0, 2, 2\n(2) * (2) = 4, left: 4, 0\n(2) - (0) = 2, left: 2, 2\n(2) * (2) = 4, left: 4\n(0) - (2) = -2, left: -2, 2\n(-2) - (2) = -4, left: -4\n(3) + (3) = 6, left: 6, 2, 2\n(6) - (2) = 4, left: 4, 2\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 * (3 + 3)))"}, {"input": "2 2 3 3\n", "output": "(2) - (3) = -1, left: -1, 2, 3\n(-1) - (2) = -3, left: -3, 3\n(3) / (2) = 3/2, left: 3/2, 2, 3\n(3/2) - (2) = -1/2, left: -1/2, 3\n(3) - (2) = 1, left: 1, 2, 3\n(2) * (3) = 6, left: 6, 2, 3\n(6) / (3) = 2, left: 2, 2\n(2) * (6) = 12, left: 12, 3\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (2 * 3)))"}, {"input": "2 2 3 3\n", "output": "(2) - (2) = 0, left: 0, 3, 3\n(3) * (0) = 0, left: 0, 3\n(0) / (3) = 0, left: 0, 3\n(2) / (2) = 1, left: 1, 3, 3\n(3) + (1) = 4, left: 4, 3\n(2) + (2) = 4, left: 4, 3, 3\n(4) - (3) = 1, left: 1, 3\n(3) / (1) = 3, left: 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 + 2) * (3 + 3))"}, {"input": "2 2 3 3\n", "output": "(2) * (2) = 4, left: 4, 3, 3\n(4) - (3) = 1, left: 1, 3\n(1) / (3) = 1/3, left: 1/3\n(3) - (4) = -1, left: -1, 3\n(3) / (3) = 1, left: 1, 4\n(4) + (1) = 5, left: 5\n(3) / (3) = 1, left: 1, 4\n(3) * (3) = 9, left: 9, 4\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 * 2) * (3 + 3))"}, {"input": "2 2 3 3\n", "output": "(2) - (2) = 0, left: 0, 3, 3\n(3) - (0) = 3, left: 3, 3\n(3) + (3) = 6, left: 6\n(3) * (3) = 9, left: 9, 0\n(2) - (2) = 0, left: 0, 3, 3\n(0) / (3) = 0, left: 0, 3\n(3) - (3) = 0, left: 0, 0\n(2) / (2) = 1, left: 1, 3, 3\n(2) + (2) = 4, left: 4, 3, 3\n(3) - (4) = -1, left: -1, 3\n(3) * (3) = 9, left: 9, 4\n(4) * (9) = 36, left: 36\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 + 2) * (3 + 3))"}, {"input": "2 2 3 3\n", "output": "(2) - (3) = -1, left: -1, 2, 3\n(3) / (2) = 3/2, left: 3/2, 2, 3\n(3) / (2) = 3/2, left: 3/2, 3/2\n(3/2) / (3/2) = 1, left: 1\n(2) - (3/2) = 1/2, left: 1/2, 3\n(3) - (2) = 1, left: 1, 2, 3\n(2) / (3) = 2/3, left: 2/3, 1\n(2/3) / (1) = 2/3, left: 2/3\n(2) + (1) = 3, left: 3, 3\n(2) + (3) = 5, left: 5, 2, 3\n(2) * (3) = 6, left: 6, 2, 3\n(3) - (6) = -3, left: -3, 2\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (2 * 3)))"}, {"input": "2 2 3 3\n", "output": "(3) * (3) = 9, left: 9, 2, 2\n(2) / (2) = 1, left: 1, 9\n(3) - (3) = 0, left: 0, 2, 2\n(2) * (0) = 0, left: 0, 2\n(2) * (0) = 0, left: 0\n(2) - (0) = 2, left: 2, 2\n(3) - (3) = 0, left: 0, 2, 2\n(2) - (0) = 2, left: 2, 2\n(2) + (0) = 2, left: 2, 2\n(3) + (3) = 6, left: 6, 2, 2\n(6) - (2) = 4, left: 4, 2\n(2) + (4) = 6, left: 6\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 * (3 + 3)))"}, {"input": "2 2 3 3\n", "output": "(3) - (3) = 0, left: 0, 2, 2\n(2) / (2) = 1, left: 1, 0\n(0) + (1) = 1, left: 1\n(2) / (2) = 1, left: 1, 0\n(2) + (2) = 4, left: 4, 0\n(0) / (2) = 0, left: 0, 2\n(2) - (0) = 2, left: 2, 2\n(2) + (0) = 2, left: 2, 2\n(3) + (3) = 6, left: 6, 2, 2\n(6) - (2) = 4, left: 4, 2\n(2) / (6) = 1/3, left: 1/3, 2\n(2) / (1/3) = 6, left: 6\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 * (3 + 3)))"}, {"input": "10 2 3 7\n", "output": "(3) / (10) = 3/10, left: 3/10, 2, 7\n(2) + (3/10) = 23/10, left: 23/10, 7\n(3) - (10) = -7, left: -7, 2, 7\n(2) * (7) = 14, left: 14, -7\n(10) / (3) = 10/3, left: 10/3, 2, 7\n(10/3) - (2) = 4/3, left: 4/3, 7\n(4/3) - (7) = -17/3, left: -17/3\n(3) - (7) = -4, left: -4, 10, 2\n(10) * (2) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((10 * 2) - (3 - 7))"}, {"input": "10 2 3 7\n", "output": "(7) / (3) = 7/3, left: 7/3, 10, 2\n(2) * (7/3) = 14/3, left: 14/3, 10\n(2) / (7/3) = 6/7, left: 6/7, 10\n(10) * (2) = 20, left: 20, 7/3\n(3) + (7) = 10, left: 10, 10, 2\n(10) + (10) = 20, left: 20, 2\n(3) - (7) = -4, left: -4, 10, 2\n(2) - (-4) = 6, left: 6, 10\n(10) * (2) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((10 * 2) - (3 - 7))"}, {"input": "10 2 3 7\n", "output": "(2) / (10) = 1/5, left: 1/5, 3, 7\n(3) * (1/5) = 3/5, left: 3/5, 7\n(3/5) - (7) = -32/5, left: -32/5\n(10) - (2) = 8, left: 8, 3, 7\n(3) - (7) = -4, left: -4, 8\n(10) / (2) = 5, left: 5, 3, 7\n(7) / (3) = 7/3, left: 7/3, 5\n(10) * (2) = 20, left: 20, 3, 7\n(3) - (20) = -17, left: -17, 7\n(7) - (-17) = 24, left: 24\nreach 24! expression: (7 - (3 - (10 * 2)))"}, {"input": "10 2 3 7\n", "output": "(7) - (2) = 5, left: 5, 10, 3\n(2) * (7) = 14, left: 14, 10, 3\n(10) / (14) = 5/7, left: 5/7, 3\n(3) - (2) = 1, left: 1, 10, 7\n(7) / (1) = 7, left: 7, 10\n(2) / (3) = 2/3, left: 2/3, 10, 7\n(2/3) - (10) = -28/3, left: -28/3, 7\n(10) * (2) = 20, left: 20, 3, 7\n(20) - (3) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((10 * 2) - 3))"}, {"input": "10 2 3 7\n", "output": "(10) + (3) = 13, left: 13, 2, 7\n(7) * (13) = 91, left: 91, 2\n(13) / (7) = 13/7, left: 13/7, 2\n(2) * (13/7) = 26/7, left: 26/7\n(10) - (3) = 7, left: 7, 2, 7\n(2) + (3) = 5, left: 5, 10, 7\n(3) - (2) = 1, left: 1, 10, 7\n(3) - (7) = -4, left: -4, 10, 2\n(10) * (2) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((10 * 2) - (3 - 7))"}, {"input": "13 9 11 10\n", "output": "(13) * (10) = 130, left: 130, 9, 11\n(10) / (13) = 10/13, left: 10/13, 9, 11\n(9) + (11) = 20, left: 20, 10/13\n(13) - (10) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (13 - 10)) - 9)"}, {"input": "13 9 11 10\n", "output": "(13) * (10) = 130, left: 130, 9, 11\n(130) - (11) = 119, left: 119, 9\n(10) / (13) = 10/13, left: 10/13, 9, 11\n(13) - (10) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (13 - 10)) - 9)"}, {"input": "13 9 11 10\n", "output": "(9) - (13) = -4, left: -4, 11, 10\n(11) / (10) = 11/10, left: 11/10, 13, 9\n(13) - (11/10) = 119/10, left: 119/10, 9\n(13) - (10) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (13 - 10)) - 9)"}, {"input": "13 9 11 10\n", "output": "(13) + (11) = 24, left: 24, 9, 10\n(24) - (9) = 15, left: 15, 10\n(10) / (24) = 5/12, left: 5/12, 9\n(24) / (10) = 12/5, left: 12/5, 9\n(10) - (9) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (10 - 9))"}, {"input": "13 9 11 10\n", "output": "(11) - (13) = -2, left: -2, 9, 10\n(10) - (-2) = 12, left: 12, 9\n(13) * (11) = 143, left: 143, 9, 10\n(13) + (11) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (10 - 9))"}, {"input": "13 9 11 10\n", "output": "(13) / (10) = 13/10, left: 13/10, 9, 11\n(13) * (10) = 130, left: 130, 9, 11\n(9) * (130) = 1170, left: 1170, 11\n(10) / (13) = 10/13, left: 10/13, 9, 11\n(9) + (10/13) = 127/13, left: 127/13, 11\n(13) - (10) = 3, left: 3, 9, 11\n(11) - (9) = 2, left: 2, 3\n(2) / (3) = 2/3, left: 2/3\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (13 - 10)) - 9)"}, {"input": "13 9 11 10\n", "output": "(13) + (11) = 24, left: 24, 9, 10\n(9) - (24) = -15, left: -15, 10\n(24) / (9) = 8/3, left: 8/3, 10\n(9) * (24) = 216, left: 216, 10\n(10) - (216) = -206, left: -206\n(10) - (24) = -14, left: -14, 9\n(10) * (24) = 240, left: 240, 9\n(9) - (10) = -1, left: -1, 24\n(10) - (9) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (10 - 9))"}, {"input": "13 9 11 10\n", "output": "(10) - (13) = -3, left: -3, 9, 11\n(13) * (10) = 130, left: 130, 9, 11\n(10) / (13) = 10/13, left: 10/13, 9, 11\n(13) / (10) = 13/10, left: 13/10, 9, 11\n(13) + (10) = 23, left: 23, 9, 11\n(11) / (9) = 11/9, left: 11/9, 23\n(11) - (9) = 2, left: 2, 23\n(13) - (10) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (13 - 10)) - 9)"}, {"input": "13 9 11 10\n", "output": "(11) * (10) = 110, left: 110, 13, 9\n(11) / (10) = 11/10, left: 11/10, 13, 9\n(11) + (10) = 21, left: 21, 13, 9\n(21) / (13) = 21/13, left: 21/13, 9\n(11) - (13) = -2, left: -2, 9, 10\n(11) / (13) = 11/13, left: 11/13, 9, 10\n(11/13) - (9) = -106/13, left: -106/13, 10\n(13) + (11) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (10 - 9))"}, {"input": "13 9 11 10\n", "output": "(13) * (9) = 117, left: 117, 11, 10\n(13) + (9) = 22, left: 22, 11, 10\n(10) / (11) = 10/11, left: 10/11, 22\n(13) - (9) = 4, left: 4, 11, 10\n(10) + (4) = 14, left: 14, 11\n(10) - (11) = -1, left: -1, 13, 9\n(11) - (10) = 1, left: 1, 13, 9\n(13) - (10) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (13 - 10)) - 9)"}, {"input": "10 4 2 11\n", "output": "(11) / (4) = 11/4, left: 11/4, 10, 2\n(10) * (2) = 20, left: 20, 11/4\n(10) + (11/4) = 51/4, left: 51/4, 2\n(4) - (11) = -7, left: -7, 10, 2\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (4 - 11)))"}, {"input": "10 4 2 11\n", "output": "(4) / (11) = 4/11, left: 4/11, 10, 2\n(4/11) - (2) = -18/11, left: -18/11, 10\n(4/11) - (10) = -106/11, left: -106/11, 2\n(4) - (11) = -7, left: -7, 10, 2\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (4 - 11)))"}, {"input": "10 4 2 11\n", "output": "(2) + (11) = 13, left: 13, 10, 4\n(13) - (4) = 9, left: 9, 10\n(2) / (11) = 2/11, left: 2/11, 10, 4\n(4) - (10) = -6, left: -6, 2, 11\n(2) * (11) = 22, left: 22, -6\n(2) - (4) = -2, left: -2, 10, 11\n(2) / (4) = 1/2, left: 1/2, 10, 11\n(10) / (2) = 5, left: 5, 4, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (10 / 2)))"}, {"input": "10 4 2 11\n", "output": "(4) / (2) = 2, left: 2, 10, 11\n(4) - (2) = 2, left: 2, 10, 11\n(2) / (4) = 1/2, left: 1/2, 10, 11\n(11) / (1/2) = 22, left: 22, 10\n(10) / (22) = 5/11, left: 5/11\n(4) * (2) = 8, left: 8, 10, 11\n(8) / (10) = 4/5, left: 4/5, 11\n(10) / (2) = 5, left: 5, 4, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (10 / 2)))"}, {"input": "10 4 2 11\n", "output": "(10) + (11) = 21, left: 21, 4, 2\n(10) - (11) = -1, left: -1, 4, 2\n(10) * (11) = 110, left: 110, 4, 2\n(10) - (4) = 6, left: 6, 2, 11\n(10) * (4) = 40, left: 40, 2, 11\n(2) - (4) = -2, left: -2, 10, 11\n(4) / (2) = 2, left: 2, 10, 11\n(4) - (11) = -7, left: -7, 10, 2\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (4 - 11)))"}, {"input": "10 4 2 11\n", "output": "(11) / (4) = 11/4, left: 11/4, 10, 2\n(11/4) - (2) = 3/4, left: 3/4, 10\n(2) - (10) = -8, left: -8, 11/4\n(10) / (2) = 5, left: 5, 11/4\n(10) / (11/4) = 40/11, left: 40/11, 2\n(4) / (11) = 4/11, left: 4/11, 10, 2\n(10) + (2) = 12, left: 12, 4/11\n(4) - (11) = -7, left: -7, 10, 2\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (4 - 11)))"}, {"input": "10 4 2 11\n", "output": "(4) / (11) = 4/11, left: 4/11, 10, 2\n(10) + (4/11) = 114/11, left: 114/11, 2\n(4/11) / (10) = 2/55, left: 2/55, 2\n(2) / (2/55) = 55, left: 55\n(2) - (2/55) = 108/55, left: 108/55\n(10) - (2) = 8, left: 8, 4/11\n(4) - (11) = -7, left: -7, 10, 2\n(-7) - (2) = -9, left: -9, 10\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (4 - 11)))"}, {"input": "7 3 10 11\n", "output": "(11) / (3) = 11/3, left: 11/3, 7, 10\n(7) / (10) = 7/10, left: 7/10, 11/3\n(7/10) - (11/3) = -89/30, left: -89/30\n(3) - (11) = -8, left: -8, 7, 10\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((3 - 11) * (7 - 10))"}, {"input": "7 3 10 11\n", "output": "(7) + (10) = 17, left: 17, 3, 11\n(11) * (17) = 187, left: 187, 3\n(11) / (17) = 11/17, left: 11/17, 3\n(7) - (10) = -3, left: -3, 3, 11\n(3) - (11) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((7 - 10) * (3 - 11))"}, {"input": "7 3 10 11\n", "output": "(7) - (11) = -4, left: -4, 3, 10\n(3) / (-4) = -3/4, left: -3/4, 10\n(7) + (11) = 18, left: 18, 3, 10\n(3) + (10) = 13, left: 13, 18\n(18) - (10) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((7 + 11) - 10))"}, {"input": "7 3 10 11\n", "output": "(7) - (3) = 4, left: 4, 10, 11\n(10) / (11) = 10/11, left: 10/11, 4\n(7) / (3) = 7/3, left: 7/3, 10, 11\n(3) / (7) = 3/7, left: 3/7, 10, 11\n(10) - (11) = -1, left: -1, 3/7\n(3) - (7) = -4, left: -4, 10, 11\n(7) * (3) = 21, left: 21, 10, 11\n(11) - (10) = 1, left: 1, 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (11 - 10)))"}, {"input": "7 3 10 11\n", "output": "(7) - (11) = -4, left: -4, 3, 10\n(10) / (3) = 10/3, left: 10/3, -4\n(3) - (10) = -7, left: -7, -4\n(10) - (3) = 7, left: 7, -4\n(7) / (-4) = -7/4, left: -7/4\n(7) + (11) = 18, left: 18, 3, 10\n(3) * (10) = 30, left: 30, 18\n(10) - (3) = 7, left: 7, 18\n(18) - (10) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((7 + 11) - 10))"}, {"input": "7 3 10 11\n", "output": "(7) + (10) = 17, left: 17, 3, 11\n(17) - (3) = 14, left: 14, 11\n(3) / (17) = 3/17, left: 3/17, 11\n(11) + (17) = 28, left: 28, 3\n(28) / (3) = 28/3, left: 28/3\n(3) * (11) = 33, left: 33, 17\n(17) * (33) = 561, left: 561\n(7) - (10) = -3, left: -3, 3, 11\n(3) - (11) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((7 - 10) * (3 - 11))"}, {"input": "7 3 10 11\n", "output": "(10) * (11) = 110, left: 110, 7, 3\n(110) - (3) = 107, left: 107, 7\n(3) - (7) = -4, left: -4, 110\n(3) / (7) = 3/7, left: 3/7, 110\n(7) / (3) = 7/3, left: 7/3, 110\n(11) - (10) = 1, left: 1, 7, 3\n(3) + (1) = 4, left: 4, 7\n(3) * (1) = 3, left: 3, 7\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (11 - 10)))"}, {"input": "7 3 10 11\n", "output": "(11) / (3) = 11/3, left: 11/3, 7, 10\n(10) - (7) = 3, left: 3, 11/3\n(3) / (11) = 3/11, left: 3/11, 7, 10\n(7) / (3/11) = 77/3, left: 77/3, 10\n(10) - (3/11) = 107/11, left: 107/11, 7\n(3/11) - (10) = -107/11, left: -107/11, 7\n(3) - (11) = -8, left: -8, 7, 10\n(10) / (-8) = -5/4, left: -5/4, 7\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((3 - 11) * (7 - 10))"}, {"input": "4 1 5 13\n", "output": "(4) - (13) = -9, left: -9, 1, 5\n(1) + (5) = 6, left: 6, 4, 13\n(13) / (6) = 13/6, left: 13/6, 4\n(13/6) / (4) = 13/24, left: 13/24\n(5) - (1) = 4, left: 4, 4, 13\n(4) + (1) = 5, left: 5, 5, 13\n(1) / (4) = 1/4, left: 1/4, 5, 13\n(1) - (4) = -3, left: -3, 5, 13\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((1 - 4) * (5 - 13))"}, {"input": "4 1 5 13\n", "output": "(4) - (13) = -9, left: -9, 1, 5\n(4) * (13) = 52, left: 52, 1, 5\n(5) + (52) = 57, left: 57, 1\n(5) * (52) = 260, left: 260, 1\n(4) + (13) = 17, left: 17, 1, 5\n(13) - (4) = 9, left: 9, 1, 5\n(1) / (4) = 1/4, left: 1/4, 5, 13\n(4) - (1) = 3, left: 3, 5, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((4 - 1) * (13 - 5))"}, {"input": "4 1 5 13\n", "output": "(4) / (1) = 4, left: 4, 5, 13\n(13) + (4) = 17, left: 17, 5\n(4) + (1) = 5, left: 5, 5, 13\n(13) - (5) = 8, left: 8, 5\n(5) + (5) = 10, left: 10, 13\n(10) - (13) = -3, left: -3\n(5) / (5) = 1, left: 1, 13\n(1) - (4) = -3, left: -3, 5, 13\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((1 - 4) * (5 - 13))"}, {"input": "4 1 5 13\n", "output": "(1) - (13) = -12, left: -12, 4, 5\n(1) + (5) = 6, left: 6, 4, 13\n(13) / (4) = 13/4, left: 13/4, 6\n(6) + (13/4) = 37/4, left: 37/4\n(4) + (6) = 10, left: 10, 13\n(10) - (13) = -3, left: -3\n(4) * (5) = 20, left: 20, 1, 13\n(1) - (4) = -3, left: -3, 5, 13\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((1 - 4) * (5 - 13))"}, {"input": "4 1 5 13\n", "output": "(4) - (5) = -1, left: -1, 1, 13\n(13) + (-1) = 12, left: 12, 1\n(4) + (5) = 9, left: 9, 1, 13\n(13) / (9) = 13/9, left: 13/9, 1\n(9) / (13) = 9/13, left: 9/13, 1\n(4) / (13) = 4/13, left: 4/13, 1, 5\n(5) - (13) = -8, left: -8, 4, 1\n(1) - (-8) = 9, left: 9, 4\n(1) - (4) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (1 - 4))"}, {"input": "4 1 5 13\n", "output": "(4) + (13) = 17, left: 17, 1, 5\n(4) * (13) = 52, left: 52, 1, 5\n(1) + (13) = 14, left: 14, 4, 5\n(4) / (5) = 4/5, left: 4/5, 14\n(13) / (1) = 13, left: 13, 4, 5\n(1) - (13) = -12, left: -12, 4, 5\n(1) * (13) = 13, left: 13, 4, 5\n(4) + (5) = 9, left: 9, 1, 13\n(5) / (4) = 5/4, left: 5/4, 1, 13\n(1) / (4) = 1/4, left: 1/4, 5, 13\n(4) + (1) = 5, left: 5, 5, 13\n(1) - (4) = -3, left: -3, 5, 13\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((1 - 4) * (5 - 13))"}, {"input": "2 5 1 12\n", "output": "(2) / (12) = 1/6, left: 1/6, 5, 1\n(5) + (1/6) = 31/6, left: 31/6, 1\n(5) - (1/6) = 29/6, left: 29/6, 1\n(5) * (1/6) = 5/6, left: 5/6, 1\n(5) - (1) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((5 - 1) / (2 / 12))"}, {"input": "2 5 1 12\n", "output": "(2) + (12) = 14, left: 14, 5, 1\n(12) - (2) = 10, left: 10, 5, 1\n(10) / (1) = 10, left: 10, 5\n(2) * (12) = 24, left: 24, 5, 1\n(24) / (1) = 24, left: 24, 5\n(5) * (24) = 120, left: 120\n(1) * (24) = 24, left: 24, 5\n(2) / (12) = 1/6, left: 1/6, 5, 1\n(5) - (1) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((5 - 1) / (2 / 12))"}, {"input": "2 5 1 12\n", "output": "(2) / (12) = 1/6, left: 1/6, 5, 1\n(5) + (1/6) = 31/6, left: 31/6, 1\n(31/6) - (1) = 25/6, left: 25/6\n(1/6) / (5) = 1/30, left: 1/30, 1\n(1/6) - (5) = -29/6, left: -29/6, 1\n(5) * (1/6) = 5/6, left: 5/6, 1\n(5) + (1) = 6, left: 6, 1/6\n(1/6) - (6) = -35/6, left: -35/6\n(5) - (1) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((5 - 1) / (2 / 12))"}, {"input": "2 5 1 12\n", "output": "(2) + (12) = 14, left: 14, 5, 1\n(5) + (14) = 19, left: 19, 1\n(14) - (5) = 9, left: 9, 1\n(1) - (14) = -13, left: -13, 5\n(5) * (-13) = -65, left: -65\n(12) / (2) = 6, left: 6, 5, 1\n(5) / (6) = 5/6, left: 5/6, 1\n(1) * (5/6) = 5/6, left: 5/6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((12 / 2) * (5 - 1))"}, {"input": "2 5 1 12\n", "output": "(1) - (5) = -4, left: -4, 2, 12\n(2) - (12) = -10, left: -10, -4\n(12) * (-4) = -48, left: -48, 2\n(1) / (5) = 1/5, left: 1/5, 2, 12\n(2) / (12) = 1/6, left: 1/6, 1/5\n(2) + (12) = 14, left: 14, 1/5\n(5) + (1) = 6, left: 6, 2, 12\n(2) + (12) = 14, left: 14, 6\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (5 + 1)))"}, {"input": "2 5 1 12\n", "output": "(5) * (12) = 60, left: 60, 2, 1\n(1) * (12) = 12, left: 12, 2, 5\n(12) - (1) = 11, left: 11, 2, 5\n(11) / (2) = 11/2, left: 11/2, 5\n(12) / (1) = 12, left: 12, 2, 5\n(1) + (12) = 13, left: 13, 2, 5\n(2) - (13) = -11, left: -11, 5\n(2) + (1) = 3, left: 3, 5, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (2 + 1)))"}, {"input": "6 10 2 3\n", "output": "(10) / (3) = 10/3, left: 10/3, 6, 2\n(10) + (3) = 13, left: 13, 6, 2\n(13) - (2) = 11, left: 11, 6\n(3) / (10) = 3/10, left: 3/10, 6, 2\n(3) - (10) = -7, left: -7, 6, 2\n(6) / (2) = 3, left: 3, -7\n(-7) / (3) = -7/3, left: -7/3\n(10) - (6) = 4, left: 4, 2, 3\n(2) * (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((10 - 6) * (2 * 3))"}, {"input": "6 10 2 3\n", "output": "(10) / (6) = 5/3, left: 5/3, 2, 3\n(6) / (10) = 3/5, left: 3/5, 2, 3\n(6) * (10) = 60, left: 60, 2, 3\n(60) / (3) = 20, left: 20, 2\n(2) * (3) = 6, left: 6, 60\n(6) - (10) = -4, left: -4, 2, 3\n(2) - (3) = -1, left: -1, -4\n(10) - (6) = 4, left: 4, 2, 3\n(2) * (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((10 - 6) * (2 * 3))"}, {"input": "6 10 2 3\n", "output": "(2) - (10) = -8, left: -8, 6, 3\n(6) * (3) = 18, left: 18, -8\n(6) - (3) = 3, left: 3, -8\n(3) - (-8) = 11, left: 11\n(6) / (3) = 2, left: 2, -8\n(6) + (3) = 9, left: 9, -8\n(9) - (-8) = 17, left: 17\n(3) - (6) = -3, left: -3, -8\n(-8) - (-3) = -5, left: -5\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((2 - 10) * (3 - 6))"}, {"input": "6 10 2 3\n", "output": "(6) * (10) = 60, left: 60, 2, 3\n(2) + (60) = 62, left: 62, 3\n(2) * (60) = 120, left: 120, 3\n(2) - (3) = -1, left: -1, 60\n(3) * (60) = 180, left: 180, 2\n(3) - (60) = -57, left: -57, 2\n(10) - (6) = 4, left: 4, 2, 3\n(4) - (3) = 1, left: 1, 2\n(3) * (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 * (10 - 6)))"}, {"input": "6 10 2 3\n", "output": "(2) - (3) = -1, left: -1, 6, 10\n(-1) / (10) = -1/10, left: -1/10, 6\n(10) + (-1) = 9, left: 9, 6\n(6) + (10) = 16, left: 16, -1\n(6) * (10) = 60, left: 60, -1\n(3) - (2) = 1, left: 1, 6, 10\n(6) * (1) = 6, left: 6, 10\n(2) * (3) = 6, left: 6, 6, 10\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (10 - 6))"}, {"input": "3 13 13 8\n", "output": "(13) * (13) = 169, left: 169, 3, 8\n(169) / (3) = 169/3, left: 169/3, 8\n(3) * (169) = 507, left: 507, 8\n(13) / (13) = 1, left: 1, 3, 8\n(3) * (8) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (13 / 13))"}, {"input": "3 13 13 8\n", "output": "(8) / (3) = 8/3, left: 8/3, 13, 13\n(13) - (8/3) = 31/3, left: 31/3, 13\n(3) + (8) = 11, left: 11, 13, 13\n(3) * (8) = 24, left: 24, 13, 13\n(13) / (24) = 13/24, left: 13/24, 13\n(13) / (13/24) = 24, left: 24\nreach 24! expression: (13 / (13 / (3 * 8)))"}, {"input": "3 13 13 8\n", "output": "(8) - (13) = -5, left: -5, 3, 13\n(13) / (3) = 13/3, left: 13/3, -5\n(-5) / (13) = -5/13, left: -5/13, 3\n(3) * (-5/13) = -15/13, left: -15/13\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (8 - 13)))"}, {"input": "3 13 13 8\n", "output": "(8) - (13) = -5, left: -5, 3, 13\n(3) + (-5) = -2, left: -2, 13\n(13) / (3) = 13/3, left: 13/3, -5\n(-5) * (13/3) = -65/3, left: -65/3\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (8 - 13)))"}, {"input": "3 13 13 8\n", "output": "(8) - (13) = -5, left: -5, 3, 13\n(13) / (-5) = -13/5, left: -13/5, 3\n(3) - (-13/5) = 28/5, left: 28/5\n(-5) - (13) = -18, left: -18, 3\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (8 - 13)))"}, {"input": "3 13 13 8\n", "output": "(13) * (13) = 169, left: 169, 3, 8\n(3) - (8) = -5, left: -5, 169\n(-5) / (169) = -5/169, left: -5/169\n(8) - (3) = 5, left: 5, 169\n(8) * (169) = 1352, left: 1352, 3\n(3) / (1352) = 3/1352, left: 3/1352\n(13) / (13) = 1, left: 1, 3, 8\n(3) / (8) = 3/8, left: 3/8, 1\n(3) * (8) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (13 / 13))"}, {"input": "3 13 13 8\n", "output": "(8) - (13) = -5, left: -5, 3, 13\n(13) / (-5) = -13/5, left: -13/5, 3\n(13) - (-5) = 18, left: 18, 3\n(3) + (18) = 21, left: 21\n(-5) - (13) = -18, left: -18, 3\n(3) + (-18) = -15, left: -15\n(-5) / (13) = -5/13, left: -5/13, 3\n(3) * (-5/13) = -15/13, left: -15/13\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (8 - 13)))"}, {"input": "3 13 13 8\n", "output": "(8) - (13) = -5, left: -5, 3, 13\n(-5) / (3) = -5/3, left: -5/3, 13\n(3) * (-5) = -15, left: -15, 13\n(3) * (13) = 39, left: 39, -5\n(-5) / (39) = -5/39, left: -5/39\n(3) / (13) = 3/13, left: 3/13, -5\n(13) * (-5) = -65, left: -65, 3\n(-5) / (13) = -5/13, left: -5/13, 3\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (8 - 13)))"}, {"input": "3 13 13 8\n", "output": "(8) - (13) = -5, left: -5, 3, 13\n(3) / (-5) = -3/5, left: -3/5, 13\n(-5) - (3) = -8, left: -8, 13\n(3) - (-5) = 8, left: 8, 13\n(13) - (3) = 10, left: 10, -5\n(13) * (-5) = -65, left: -65, 3\n(-65) / (3) = -65/3, left: -65/3\n(-5) / (13) = -5/13, left: -5/13, 3\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (8 - 13)))"}, {"input": "3 13 13 8\n", "output": "(8) / (3) = 8/3, left: 8/3, 13, 13\n(8/3) - (13) = -31/3, left: -31/3, 13\n(13) + (13) = 26, left: 26, 8/3\n(8/3) + (26) = 86/3, left: 86/3\n(3) + (8) = 11, left: 11, 13, 13\n(13) / (11) = 13/11, left: 13/11, 13\n(11) / (13) = 11/13, left: 11/13, 13\n(3) * (8) = 24, left: 24, 13, 13\n(13) / (24) = 13/24, left: 13/24, 13\n(13) / (13/24) = 24, left: 24\nreach 24! expression: (13 / (13 / (3 * 8)))"}, {"input": "11 8 8 1\n", "output": "(11) * (1) = 11, left: 11, 8, 8\n(8) / (11) = 8/11, left: 8/11, 8\n(8) / (8/11) = 11, left: 11\n(11) / (8) = 11/8, left: 11/8, 8\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 * 1) - 8))"}, {"input": "11 8 8 1\n", "output": "(11) * (1) = 11, left: 11, 8, 8\n(8) / (11) = 8/11, left: 8/11, 8\n(8) / (8/11) = 11, left: 11\n(8) + (11) = 19, left: 19, 8\n(8) * (19) = 152, left: 152\n(11) / (8) = 11/8, left: 11/8, 8\n(8) / (11/8) = 64/11, left: 64/11\n(8) - (11) = -3, left: -3, 8\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 * 1) - 8))"}, {"input": "11 8 8 1\n", "output": "(1) / (11) = 1/11, left: 1/11, 8, 8\n(8) + (8) = 16, left: 16, 1/11\n(11) + (1) = 12, left: 12, 8, 8\n(8) / (8) = 1, left: 1, 12\n(8) * (8) = 64, left: 64, 12\n(12) / (8) = 3/2, left: 3/2, 8\n(12) / (8) = 3/2, left: 3/2, 8\n(11) / (1) = 11, left: 11, 8, 8\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 / 1) - 8))"}, {"input": "11 8 8 1\n", "output": "(11) / (8) = 11/8, left: 11/8, 8, 1\n(8) * (1) = 8, left: 8, 11/8\n(11) + (8) = 19, left: 19, 8, 1\n(11) * (8) = 88, left: 88, 8, 1\n(1) / (88) = 1/88, left: 1/88, 8\n(8) / (11) = 8/11, left: 8/11, 8, 1\n(11) - (8) = 3, left: 3, 8, 1\n(1) / (8) = 1/8, left: 1/8, 3\n(3) * (1/8) = 3/8, left: 3/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((11 - 8) / (1 / 8))"}, {"input": "11 8 8 1\n", "output": "(8) / (8) = 1, left: 1, 11, 1\n(1) / (1) = 1, left: 1, 11\n(8) + (8) = 16, left: 16, 11, 1\n(16) / (11) = 16/11, left: 16/11, 1\n(8) * (8) = 64, left: 64, 11, 1\n(8) / (11) = 8/11, left: 8/11, 8, 1\n(8) - (11) = -3, left: -3, 8, 1\n(11) - (8) = 3, left: 3, 8, 1\n(8) / (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((11 - 8) * (8 / 1))"}, {"input": "11 8 8 1\n", "output": "(8) - (1) = 7, left: 7, 11, 8\n(1) - (8) = -7, left: -7, 11, 8\n(8) / (-7) = -8/7, left: -8/7, 11\n(11) + (-8/7) = 69/7, left: 69/7\n(8) + (1) = 9, left: 9, 11, 8\n(11) + (8) = 19, left: 19, 9\n(8) * (1) = 8, left: 8, 11, 8\n(11) / (8) = 11/8, left: 11/8, 8\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (11 - (8 * 1)))"}, {"input": "6 2 8 9\n", "output": "(9) / (8) = 9/8, left: 9/8, 6, 2\n(8) + (9) = 17, left: 17, 6, 2\n(9) - (8) = 1, left: 1, 6, 2\n(8) / (9) = 8/9, left: 8/9, 6, 2\n(2) * (8/9) = 16/9, left: 16/9, 6\n(8) - (9) = -1, left: -1, 6, 2\n(2) - (-1) = 3, left: 3, 6\n(8) * (9) = 72, left: 72, 6, 2\n(72) / (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((8 * 9) / 6))"}, {"input": "6 2 8 9\n", "output": "(8) - (2) = 6, left: 6, 6, 9\n(6) + (6) = 12, left: 12, 9\n(6) * (9) = 54, left: 54, 6\n(9) - (6) = 3, left: 3, 6\n(6) / (9) = 2/3, left: 2/3, 6\n(2) * (8) = 16, left: 16, 6, 9\n(16) - (6) = 10, left: 10, 9\n(6) + (16) = 22, left: 22, 9\n(6) / (16) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: (9 / (6 / (2 * 8)))"}, {"input": "6 2 8 9\n", "output": "(6) * (2) = 12, left: 12, 8, 9\n(12) / (9) = 4/3, left: 4/3, 8\n(8) - (4/3) = 20/3, left: 20/3\n(8) + (4/3) = 28/3, left: 28/3\n(4/3) - (8) = -20/3, left: -20/3\n(9) + (12) = 21, left: 21, 8\n(21) / (8) = 21/8, left: 21/8\n(8) + (21) = 29, left: 29\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((6 * 2) - 9))"}, {"input": "6 2 8 9\n", "output": "(2) - (9) = -7, left: -7, 6, 8\n(-7) - (6) = -13, left: -13, 8\n(6) * (-7) = -42, left: -42, 8\n(8) + (-42) = -34, left: -34\n(6) + (-7) = -1, left: -1, 8\n(-7) / (8) = -7/8, left: -7/8, 6\n(6) / (8) = 3/4, left: 3/4, -7\n(2) * (9) = 18, left: 18, 6, 8\n(8) / (6) = 4/3, left: 4/3, 18\n(18) * (4/3) = 24, left: 24\nreach 24! expression: ((2 * 9) * (8 / 6))"}, {"input": "6 2 8 9\n", "output": "(2) * (9) = 18, left: 18, 6, 8\n(6) + (18) = 24, left: 24, 8\n(24) - (8) = 16, left: 16\n(8) * (24) = 192, left: 192\n(24) / (8) = 3, left: 3\n(8) / (24) = 1/3, left: 1/3\n(8) - (24) = -16, left: -16\n(18) / (6) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 * 9) / 6))"}, {"input": "6 2 8 9\n", "output": "(2) * (9) = 18, left: 18, 6, 8\n(6) + (18) = 24, left: 24, 8\n(24) - (8) = 16, left: 16\n(8) + (24) = 32, left: 32\n(8) * (24) = 192, left: 192\n(24) / (8) = 3, left: 3\n(8) / (24) = 1/3, left: 1/3\n(8) - (24) = -16, left: -16\n(18) / (6) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(3) - (8) = -5, left: -5\n(8) + (3) = 11, left: 11\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 * 9) / 6))"}, {"input": "6 2 8 9\n", "output": "(2) * (9) = 18, left: 18, 6, 8\n(6) + (18) = 24, left: 24, 8\n(24) - (8) = 16, left: 16\n(8) + (24) = 32, left: 32\n(8) * (24) = 192, left: 192\n(24) / (8) = 3, left: 3\n(8) / (24) = 1/3, left: 1/3\n(8) - (24) = -16, left: -16\n(18) / (6) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(3) - (8) = -5, left: -5\n(8) + (3) = 11, left: 11\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 * 9) / 6))"}, {"input": "3 11 8 2\n", "output": "(3) / (11) = 3/11, left: 3/11, 8, 2\n(2) - (8) = -6, left: -6, 3/11\n(8) * (3/11) = 24/11, left: 24/11, 2\n(3) - (11) = -8, left: -8, 8, 2\n(2) * (-8) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (2 * (3 - 11)))"}, {"input": "3 11 8 2\n", "output": "(3) + (8) = 11, left: 11, 11, 2\n(11) - (11) = 0, left: 0, 2\n(2) - (0) = 2, left: 2\n(2) + (0) = 2, left: 2\n(11) + (11) = 22, left: 22, 2\n(2) * (22) = 44, left: 44\n(2) / (22) = 1/11, left: 1/11\n(22) / (2) = 11, left: 11\n(22) - (2) = 20, left: 20\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 + (3 + 8)))"}, {"input": "3 11 8 2\n", "output": "(3) / (11) = 3/11, left: 3/11, 8, 2\n(8) / (2) = 4, left: 4, 3/11\n(4) / (3/11) = 44/3, left: 44/3\n(8) + (3/11) = 91/11, left: 91/11, 2\n(2) / (3/11) = 22/3, left: 22/3, 8\n(2) + (3/11) = 25/11, left: 25/11, 8\n(3/11) - (2) = -19/11, left: -19/11, 8\n(3) - (11) = -8, left: -8, 8, 2\n(2) * (-8) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (2 * (3 - 11)))"}, {"input": "3 11 8 2\n", "output": "(2) / (3) = 2/3, left: 2/3, 11, 8\n(2) - (3) = -1, left: -1, 11, 8\n(8) / (11) = 8/11, left: 8/11, -1\n(-1) - (8/11) = -19/11, left: -19/11\n(11) - (8) = 3, left: 3, -1\n(-1) / (8) = -1/8, left: -1/8, 11\n(-1) - (8) = -9, left: -9, 11\n(3) + (2) = 5, left: 5, 11, 8\n(11) + (5) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (11 + (3 + 2)))"}, {"input": "3 11 8 2\n", "output": "(3) * (11) = 33, left: 33, 8, 2\n(8) - (33) = -25, left: -25, 2\n(11) / (3) = 11/3, left: 11/3, 8, 2\n(8) + (2) = 10, left: 10, 11/3\n(8) / (2) = 4, left: 4, 11/3\n(11/3) - (2) = 5/3, left: 5/3, 8\n(3) - (11) = -8, left: -8, 8, 2\n(2) + (-8) = -6, left: -6, 8\n(2) * (-8) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (2 * (3 - 11)))"}, {"input": "3 11 8 2\n", "output": "(11) / (8) = 11/8, left: 11/8, 3, 2\n(3) + (11/8) = 35/8, left: 35/8, 2\n(11) - (8) = 3, left: 3, 3, 2\n(11) * (8) = 88, left: 88, 3, 2\n(2) / (88) = 1/44, left: 1/44, 3\n(2) * (88) = 176, left: 176, 3\n(11) + (8) = 19, left: 19, 3, 2\n(19) / (2) = 19/2, left: 19/2, 3\n(2) + (19) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (2 + (11 + 8)))"}, {"input": "12 3 1 7\n", "output": "(12) * (1) = 12, left: 12, 3, 7\n(3) - (7) = -4, left: -4, 12, 1\n(1) - (3) = -2, left: -2, 12, 7\n(3) / (1) = 3, left: 3, 12, 7\n(3) / (7) = 3/7, left: 3/7, 12\n(12) - (3) = 9, left: 9, 1, 7\n(7) - (1) = 6, left: 6, 9\n(3) / (12) = 1/4, left: 1/4, 1, 7\n(7) - (1) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((7 - 1) / (3 / 12))"}, {"input": "12 3 1 7\n", "output": "(12) + (1) = 13, left: 13, 3, 7\n(1) / (12) = 1/12, left: 1/12, 3, 7\n(1) - (12) = -11, left: -11, 3, 7\n(3) * (7) = 21, left: 21, -11\n(3) + (1) = 4, left: 4, 12, 7\n(12) + (3) = 15, left: 15, 1, 7\n(1) + (7) = 8, left: 8, 15\n(12) / (3) = 4, left: 4, 1, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((12 / 3) * (7 - 1))"}, {"input": "12 3 1 7\n", "output": "(12) * (7) = 84, left: 84, 3, 1\n(12) - (7) = 5, left: 5, 3, 1\n(12) + (1) = 13, left: 13, 3, 7\n(13) / (7) = 13/7, left: 13/7, 3\n(12) - (1) = 11, left: 11, 3, 7\n(3) * (11) = 33, left: 33, 7\n(1) / (7) = 1/7, left: 1/7, 12, 3\n(7) - (1) = 6, left: 6, 12, 3\n(12) * (6) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 * (7 - 1)) / 3)"}, {"input": "12 3 1 7\n", "output": "(3) / (1) = 3, left: 3, 12, 7\n(1) / (12) = 1/12, left: 1/12, 3, 7\n(3) / (7) = 3/7, left: 3/7, 1/12\n(1/12) + (3/7) = 43/84, left: 43/84\n(12) - (1) = 11, left: 11, 3, 7\n(12) * (7) = 84, left: 84, 3, 1\n(84) / (1) = 84, left: 84, 3\n(7) - (1) = 6, left: 6, 12, 3\n(6) / (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 - 1) / 3))"}, {"input": "12 3 1 7\n", "output": "(3) + (7) = 10, left: 10, 12, 1\n(12) * (1) = 12, left: 12, 10\n(3) * (7) = 21, left: 21, 12, 1\n(1) / (21) = 1/21, left: 1/21, 12\n(1/21) / (12) = 1/252, left: 1/252\n(3) - (7) = -4, left: -4, 12, 1\n(1) / (-4) = -1/4, left: -1/4, 12\n(3) / (12) = 1/4, left: 1/4, 1, 7\n(7) - (1) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((7 - 1) / (3 / 12))"}, {"input": "12 3 1 7\n", "output": "(1) / (12) = 1/12, left: 1/12, 3, 7\n(3) * (1) = 3, left: 3, 12, 7\n(7) + (3) = 10, left: 10, 12\n(1) - (3) = -2, left: -2, 12, 7\n(7) - (-2) = 9, left: 9, 12\n(7) / (3) = 7/3, left: 7/3, 12, 1\n(1) * (7/3) = 7/3, left: 7/3, 12\n(1) / (12) = 1/12, left: 1/12, 7/3\n(7) - (3) = 4, left: 4, 12, 1\n(12) - (3) = 9, left: 9, 1, 7\n(1) * (7) = 7, left: 7, 9\n(12) / (3) = 4, left: 4, 1, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((12 / 3) * (7 - 1))"}, {"input": "12 3 1 7\n", "output": "(3) * (1) = 3, left: 3, 12, 7\n(3) - (1) = 2, left: 2, 12, 7\n(7) / (2) = 7/2, left: 7/2, 12\n(12) * (7/2) = 42, left: 42\n(3) / (1) = 3, left: 3, 12, 7\n(1) / (12) = 1/12, left: 1/12, 3, 7\n(3) + (7) = 10, left: 10, 1/12\n(1/12) - (7) = -83/12, left: -83/12, 3\n(7) - (12) = -5, left: -5, 3, 1\n(12) - (7) = 5, left: 5, 3, 1\n(1) - (7) = -6, left: -6, 12, 3\n(7) - (1) = 6, left: 6, 12, 3\n(6) / (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 - 1) / 3))"}, {"input": "8 3 9 11\n", "output": "(9) / (3) = 3, left: 3, 8, 11\n(8) + (11) = 19, left: 19, 3\n(3) / (19) = 3/19, left: 3/19\n(9) - (3) = 6, left: 6, 8, 11\n(8) + (11) = 19, left: 19, 6\n(8) * (11) = 88, left: 88, 6\n(88) / (6) = 44/3, left: 44/3\n(3) * (9) = 27, left: 27, 8, 11\n(8) + (27) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((8 + (3 * 9)) - 11)"}, {"input": "8 3 9 11\n", "output": "(3) + (11) = 14, left: 14, 8, 9\n(11) - (3) = 8, left: 8, 8, 9\n(9) / (8) = 9/8, left: 9/8, 8\n(8) - (8) = 0, left: 0, 9\n(8) * (9) = 72, left: 72, 3, 11\n(8) - (9) = -1, left: -1, 3, 11\n(8) / (9) = 8/9, left: 8/9, 3, 11\n(8) - (11) = -3, left: -3, 3, 9\n(3) * (9) = 27, left: 27, -3\n(-3) + (27) = 24, left: 24\nreach 24! expression: ((8 - 11) + (3 * 9))"}, {"input": "8 3 9 11\n", "output": "(11) - (8) = 3, left: 3, 3, 9\n(9) * (3) = 27, left: 27, 3\n(3) * (27) = 81, left: 81\n(3) - (27) = -24, left: -24\n(3) + (27) = 30, left: 30\n(3) / (27) = 1/9, left: 1/9\n(27) / (3) = 9, left: 9\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * (11 - 8)) - 3)"}, {"input": "8 3 9 11\n", "output": "(3) + (11) = 14, left: 14, 8, 9\n(3) * (11) = 33, left: 33, 8, 9\n(11) - (3) = 8, left: 8, 8, 9\n(8) - (3) = 5, left: 5, 9, 11\n(9) + (5) = 14, left: 14, 11\n(8) / (3) = 8/3, left: 8/3, 9, 11\n(8) * (3) = 24, left: 24, 9, 11\n(3) * (9) = 27, left: 27, 8, 11\n(11) - (8) = 3, left: 3, 27\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * 9) - (11 - 8))"}, {"input": "8 3 9 11\n", "output": "(3) - (8) = -5, left: -5, 9, 11\n(8) / (3) = 8/3, left: 8/3, 9, 11\n(8/3) - (11) = -25/3, left: -25/3, 9\n(-25/3) / (9) = -25/27, left: -25/27\n(11) - (9) = 2, left: 2, 8/3\n(8) + (3) = 11, left: 11, 9, 11\n(8) / (11) = 8/11, left: 8/11, 3, 9\n(8) - (11) = -3, left: -3, 3, 9\n(3) * (9) = 27, left: 27, -3\n(-3) + (27) = 24, left: 24\nreach 24! expression: ((8 - 11) + (3 * 9))"}, {"input": "8 3 9 11\n", "output": "(11) - (8) = 3, left: 3, 3, 9\n(9) * (3) = 27, left: 27, 3\n(3) * (27) = 81, left: 81\n(3) - (27) = -24, left: -24\n(3) + (27) = 30, left: 30\n(3) / (27) = 1/9, left: 1/9\n(27) / (3) = 9, left: 9\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * (11 - 8)) - 3)"}, {"input": "8 3 9 11\n", "output": "(11) - (8) = 3, left: 3, 3, 9\n(9) * (3) = 27, left: 27, 3\n(3) * (27) = 81, left: 81\n(3) - (27) = -24, left: -24\n(3) + (27) = 30, left: 30\n(3) / (27) = 1/9, left: 1/9\n(27) / (3) = 9, left: 9\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * (11 - 8)) - 3)"}, {"input": "9 1 13 11\n", "output": "(9) / (11) = 9/11, left: 9/11, 1, 13\n(13) + (9/11) = 152/11, left: 152/11, 1\n(9) - (11) = -2, left: -2, 1, 13\n(-2) - (1) = -3, left: -3, 13\n(1) - (13) = -12, left: -12, -2\n(-2) * (-12) = 24, left: 24\nreach 24! expression: ((9 - 11) * (1 - 13))"}, {"input": "9 1 13 11\n", "output": "(1) * (13) = 13, left: 13, 9, 11\n(11) / (13) = 11/13, left: 11/13, 9\n(13) / (1) = 13, left: 13, 9, 11\n(1) - (13) = -12, left: -12, 9, 11\n(9) - (11) = -2, left: -2, -12\n(-12) * (-2) = 24, left: 24\nreach 24! expression: ((1 - 13) * (9 - 11))"}, {"input": "9 1 13 11\n", "output": "(13) * (11) = 143, left: 143, 9, 1\n(1) - (11) = -10, left: -10, 9, 13\n(1) + (11) = 12, left: 12, 9, 13\n(9) + (13) = 22, left: 22, 1, 11\n(13) - (9) = 4, left: 4, 1, 11\n(11) + (4) = 15, left: 15, 1\n(1) - (15) = -14, left: -14\n(9) - (11) = -2, left: -2, 1, 13\n(1) - (13) = -12, left: -12, -2\n(-2) * (-12) = 24, left: 24\nreach 24! expression: ((9 - 11) * (1 - 13))"}, {"input": "9 1 13 11\n", "output": "(1) * (13) = 13, left: 13, 9, 11\n(11) + (13) = 24, left: 24, 9\n(11) - (13) = -2, left: -2, 9\n(13) / (1) = 13, left: 13, 9, 11\n(9) * (11) = 99, left: 99, 13\n(9) / (11) = 9/11, left: 9/11, 13\n(1) - (13) = -12, left: -12, 9, 11\n(11) / (9) = 11/9, left: 11/9, -12\n(9) - (11) = -2, left: -2, -12\n(-12) * (-2) = 24, left: 24\nreach 24! expression: ((1 - 13) * (9 - 11))"}, {"input": "9 1 13 11\n", "output": "(9) / (1) = 9, left: 9, 13, 11\n(9) - (1) = 8, left: 8, 13, 11\n(9) + (1) = 10, left: 10, 13, 11\n(11) / (13) = 11/13, left: 11/13, 10\n(1) - (9) = -8, left: -8, 13, 11\n(-8) - (13) = -21, left: -21, 11\n(13) - (11) = 2, left: 2, -8\n(11) - (9) = 2, left: 2, 1, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (13 - 1))"}, {"input": "9 1 13 11\n", "output": "(9) / (11) = 9/11, left: 9/11, 1, 13\n(1) / (9/11) = 11/9, left: 11/9, 13\n(13) + (11/9) = 128/9, left: 128/9\n(9) - (11) = -2, left: -2, 1, 13\n(-2) / (13) = -2/13, left: -2/13, 1\n(1) + (-2/13) = 11/13, left: 11/13\n(13) + (-2) = 11, left: 11, 1\n(1) + (13) = 14, left: 14, -2\n(1) - (13) = -12, left: -12, -2\n(-2) * (-12) = 24, left: 24\nreach 24! expression: ((9 - 11) * (1 - 13))"}, {"input": "9 1 13 11\n", "output": "(13) * (11) = 143, left: 143, 9, 1\n(143) - (1) = 142, left: 142, 9\n(1) / (143) = 1/143, left: 1/143, 9\n(9) * (1) = 9, left: 9, 143\n(13) - (11) = 2, left: 2, 9, 1\n(11) - (9) = 2, left: 2, 1, 13\n(13) / (1) = 13, left: 13, 2\n(2) / (13) = 2/13, left: 2/13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((11 - 9) * (13 - 1))"}, {"input": "3 5 2 5\n", "output": "(5) * (5) = 25, left: 25, 3, 2\n(3) / (25) = 3/25, left: 3/25, 2\n(3/25) / (2) = 3/50, left: 3/50\n(2) / (3/25) = 50/3, left: 50/3\n(3) - (25) = -22, left: -22, 2\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (3 - (5 * 5)))"}, {"input": "3 5 2 5\n", "output": "(3) * (5) = 15, left: 15, 5, 2\n(5) * (15) = 75, left: 75, 2\n(15) / (5) = 3, left: 3, 2\n(2) - (5) = -3, left: -3, 15\n(3) - (5) = -2, left: -2, 5, 2\n(5) + (2) = 7, left: 7, -2\n(-2) / (7) = -2/7, left: -2/7\n(3) + (5) = 8, left: 8, 5, 2\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((3 + 5) * (5 - 2))"}, {"input": "3 5 2 5\n", "output": "(3) + (2) = 5, left: 5, 5, 5\n(5) + (5) = 10, left: 10, 5\n(5) / (5) = 1, left: 1, 5\n(5) + (5) = 10, left: 10, 5\n(5) / (10) = 1/2, left: 1/2\n(5) / (5) = 1, left: 1, 5\n(5) - (1) = 4, left: 4\n(3) - (2) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 - 2))"}, {"input": "3 5 2 5\n", "output": "(5) * (5) = 25, left: 25, 3, 2\n(3) / (25) = 3/25, left: 3/25, 2\n(2) + (3/25) = 53/25, left: 53/25\n(3/25) / (2) = 3/50, left: 3/50\n(2) - (3/25) = 47/25, left: 47/25\n(2) * (3/25) = 6/25, left: 6/25\n(3/25) - (2) = -47/25, left: -47/25\n(3) - (25) = -22, left: -22, 2\n(-22) / (2) = -11, left: -11\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (3 - (5 * 5)))"}, {"input": "3 5 2 5\n", "output": "(5) - (5) = 0, left: 0, 3, 2\n(0) / (2) = 0, left: 0, 3\n(5) - (5) = 0, left: 0, 3, 2\n(2) + (0) = 2, left: 2, 3\n(2) * (0) = 0, left: 0, 3\n(5) + (5) = 10, left: 10, 3, 2\n(2) / (3) = 2/3, left: 2/3, 10\n(2/3) / (10) = 1/15, left: 1/15\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 + 5) - 2))"}, {"input": "3 5 2 5\n", "output": "(2) + (5) = 7, left: 7, 3, 5\n(7) / (3) = 7/3, left: 7/3, 5\n(2) * (5) = 10, left: 10, 3, 5\n(5) - (10) = -5, left: -5, 3\n(5) - (3) = 2, left: 2, 10\n(5) / (3) = 5/3, left: 5/3, 10\n(3) - (5) = -2, left: -2, 10\n(5) - (2) = 3, left: 3, 3, 5\n(3) + (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((5 - 2) * (3 + 5))"}, {"input": "3 5 2 5\n", "output": "(5) - (5) = 0, left: 0, 3, 2\n(0) / (3) = 0, left: 0, 2\n(2) + (0) = 2, left: 2, 3\n(0) / (2) = 0, left: 0, 3\n(5) - (5) = 0, left: 0, 3, 2\n(2) * (0) = 0, left: 0, 3\n(0) - (2) = -2, left: -2, 3\n(3) + (0) = 3, left: 3, 2\n(3) + (2) = 5, left: 5, 0\n(0) / (5) = 0, left: 0\n(5) + (5) = 10, left: 10, 3, 2\n(2) * (10) = 20, left: 20, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 + 5) - 2))"}, {"input": "3 5 2 5\n", "output": "(3) * (5) = 15, left: 15, 5, 2\n(3) - (5) = -2, left: -2, 5, 2\n(-2) - (2) = -4, left: -4, 5\n(5) - (2) = 3, left: 3, -2\n(5) * (-2) = -10, left: -10, 2\n(-2) - (5) = -7, left: -7, 2\n(2) / (-7) = -2/7, left: -2/7\n(5) + (-2) = 3, left: 3, 2\n(3) + (5) = 8, left: 8, 5, 2\n(5) / (8) = 5/8, left: 5/8, 2\n(8) - (5) = 3, left: 3, 2\n(2) / (3) = 2/3, left: 2/3\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((3 + 5) * (5 - 2))"}, {"input": "3 5 2 5\n", "output": "(3) + (2) = 5, left: 5, 5, 5\n(5) / (5) = 1, left: 1, 5\n(5) - (5) = 0, left: 0, 5\n(5) * (5) = 25, left: 25, 5\n(5) + (25) = 30, left: 30\n(5) / (5) = 1, left: 1, 5\n(5) / (5) = 1, left: 1, 5\n(5) - (5) = 0, left: 0, 5\n(5) - (5) = 0, left: 0, 5\n(5) * (5) = 25, left: 25, 5\n(5) / (5) = 1, left: 1, 5\n(3) - (2) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 - 2))"}, {"input": "3 5 2 5\n", "output": "(5) * (5) = 25, left: 25, 3, 2\n(3) / (25) = 3/25, left: 3/25, 2\n(2) + (3/25) = 53/25, left: 53/25\n(3/25) / (2) = 3/50, left: 3/50\n(2) / (3/25) = 50/3, left: 50/3\n(2) - (3/25) = 47/25, left: 47/25\n(2) * (3/25) = 6/25, left: 6/25\n(3/25) - (2) = -47/25, left: -47/25\n(3) - (25) = -22, left: -22, 2\n(-22) / (2) = -11, left: -11\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (3 - (5 * 5)))"}, {"input": "3 5 2 5\n", "output": "(5) * (5) = 25, left: 25, 3, 2\n(3) / (25) = 3/25, left: 3/25, 2\n(2) + (3/25) = 53/25, left: 53/25\n(3/25) / (2) = 3/50, left: 3/50\n(2) / (3/25) = 50/3, left: 50/3\n(2) - (3/25) = 47/25, left: 47/25\n(2) * (3/25) = 6/25, left: 6/25\n(3/25) - (2) = -47/25, left: -47/25\n(3) - (25) = -22, left: -22, 2\n(-22) / (2) = -11, left: -11\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (3 - (5 * 5)))"}, {"input": "12 12 12 12\n", "output": "(12) - (12) = 0, left: 0, 12, 12\n(0) / (12) = 0, left: 0, 12\n(12) + (0) = 12, left: 12\n(0) / (12) = 0, left: 0\n(12) - (0) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (12 - (12 - 12)))"}, {"input": "12 12 12 12\n", "output": "(12) * (12) = 144, left: 144, 12, 12\n(12) - (12) = 0, left: 0, 144\n(12) / (12) = 1, left: 1, 144\n(12) + (144) = 156, left: 156, 12\n(144) / (12) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((12 * 12) / 12))"}, {"input": "12 12 12 12\n", "output": "(12) * (12) = 144, left: 144, 12, 12\n(12) / (12) = 1, left: 1, 144\n(144) * (1) = 144, left: 144\n(12) / (144) = 1/12, left: 1/12, 12\n(144) / (12) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((12 * 12) / 12))"}, {"input": "12 12 12 12\n", "output": "(12) + (12) = 24, left: 24, 12, 12\n(12) / (24) = 1/2, left: 1/2, 12\n(1/2) / (12) = 1/24, left: 1/24\n(12) + (1/2) = 25/2, left: 25/2\n(12) * (1/2) = 6, left: 6\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (12 / (12 + 12)))"}, {"input": "12 12 12 12\n", "output": "(12) - (12) = 0, left: 0, 12, 12\n(0) / (12) = 0, left: 0, 12\n(0) / (12) = 0, left: 0\n(12) * (0) = 0, left: 0, 12\n(12) - (0) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (12 - (12 - 12)))"}, {"input": "12 12 12 12\n", "output": "(12) + (12) = 24, left: 24, 12, 12\n(12) / (24) = 1/2, left: 1/2, 12\n(1/2) - (12) = -23/2, left: -23/2\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) + (1/2) = 25/2, left: 25/2\n(12) * (1/2) = 6, left: 6\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (12 / (12 + 12)))"}, {"input": "12 12 12 12\n", "output": "(12) * (12) = 144, left: 144, 12, 12\n(12) / (12) = 1, left: 1, 144\n(1) - (144) = -143, left: -143\n(12) - (12) = 0, left: 0, 144\n(144) - (0) = 144, left: 144\n(0) / (144) = 0, left: 0\n(144) - (12) = 132, left: 132, 12\n(132) / (12) = 11, left: 11\n(144) / (12) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((12 * 12) / 12))"}, {"input": "12 12 12 12\n", "output": "(12) - (12) = 0, left: 0, 12, 12\n(0) / (12) = 0, left: 0, 12\n(12) - (0) = 12, left: 12\n(0) - (12) = -12, left: -12\n(0) / (12) = 0, left: 0\n(12) * (0) = 0, left: 0, 12\n(12) - (0) = 12, left: 12, 12\n(12) * (12) = 144, left: 144\n(12) - (12) = 0, left: 0\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (12 - (12 - 12)))"}, {"input": "12 12 12 12\n", "output": "(12) - (12) = 0, left: 0, 12, 12\n(12) * (0) = 0, left: 0, 12\n(0) - (12) = -12, left: -12\n(12) + (0) = 12, left: 12\n(0) / (12) = 0, left: 0, 12\n(0) - (12) = -12, left: -12\n(12) - (0) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) - (12) = 0, left: 0\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (12 - (12 - 12)))"}, {"input": "12 12 12 12\n", "output": "(12) * (12) = 144, left: 144, 12, 12\n(12) / (12) = 1, left: 1, 144\n(12) * (12) = 144, left: 144, 144\n(12) / (12) = 1, left: 1, 144\n(144) - (1) = 143, left: 143\n(12) - (12) = 0, left: 0, 144\n(0) - (144) = -144, left: -144\n(12) * (144) = 1728, left: 1728, 12\n(144) / (12) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((12 * 12) / 12))"}, {"input": "12 12 12 12\n", "output": "(12) + (12) = 24, left: 24, 12, 12\n(12) / (24) = 1/2, left: 1/2, 12\n(1/2) - (12) = -23/2, left: -23/2\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) + (1/2) = 25/2, left: 25/2\n(12) * (1/2) = 6, left: 6\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (12 / (12 + 12)))"}, {"input": "12 12 12 12\n", "output": "(12) + (12) = 24, left: 24, 12, 12\n(12) / (24) = 1/2, left: 1/2, 12\n(1/2) - (12) = -23/2, left: -23/2\n(12) - (1/2) = 23/2, left: 23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) + (1/2) = 25/2, left: 25/2\n(12) * (1/2) = 6, left: 6\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (12 / (12 + 12)))"}, {"input": "3 12 11 9\n", "output": "(12) - (9) = 3, left: 3, 3, 11\n(3) - (11) = -8, left: -8, 3\n(-8) - (3) = -11, left: -11\n(11) * (3) = 33, left: 33, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (12 - 9)))"}, {"input": "3 12 11 9\n", "output": "(3) - (11) = -8, left: -8, 12, 9\n(-8) / (12) = -2/3, left: -2/3, 9\n(9) * (-8) = -72, left: -72, 12\n(12) / (-72) = -1/6, left: -1/6\n(9) - (12) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((3 - 11) * (9 - 12))"}, {"input": "3 12 11 9\n", "output": "(9) / (12) = 3/4, left: 3/4, 3, 11\n(3) - (11) = -8, left: -8, 3/4\n(-8) - (3/4) = -35/4, left: -35/4\n(12) - (9) = 3, left: 3, 3, 11\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (12 - 9)))"}, {"input": "3 12 11 9\n", "output": "(9) / (3) = 3, left: 3, 12, 11\n(3) + (9) = 12, left: 12, 12, 11\n(12) / (11) = 12/11, left: 12/11, 12\n(9) - (3) = 6, left: 6, 12, 11\n(11) - (12) = -1, left: -1, 6\n(3) * (9) = 27, left: 27, 12, 11\n(12) - (27) = -15, left: -15, 11\n(9) - (12) = -3, left: -3, 3, 11\n(11) + (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 + (9 - 12)))"}, {"input": "3 12 11 9\n", "output": "(12) - (11) = 1, left: 1, 3, 9\n(3) * (1) = 3, left: 3, 9\n(9) * (3) = 27, left: 27\n(3) - (1) = 2, left: 2, 9\n(3) / (1) = 3, left: 3, 9\n(3) - (9) = -6, left: -6\n(1) / (3) = 1/3, left: 1/3, 9\n(3) + (1) = 4, left: 4, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (12 - 11)))"}, {"input": "3 12 11 9\n", "output": "(12) - (9) = 3, left: 3, 3, 11\n(3) / (11) = 3/11, left: 3/11, 3\n(3/11) - (3) = -30/11, left: -30/11\n(3) + (3/11) = 36/11, left: 36/11\n(3) - (11) = -8, left: -8, 3\n(3) / (-8) = -3/8, left: -3/8\n(11) * (3) = 33, left: 33, 3\n(11) - (3) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (12 - 9)))"}, {"input": "3 12 11 9\n", "output": "(3) - (11) = -8, left: -8, 12, 9\n(12) / (-8) = -3/2, left: -3/2, 9\n(12) - (-8) = 20, left: 20, 9\n(9) * (-8) = -72, left: -72, 12\n(12) / (-72) = -1/6, left: -1/6\n(9) / (-8) = -9/8, left: -9/8, 12\n(-9/8) - (12) = -105/8, left: -105/8\n(9) - (-8) = 17, left: 17, 12\n(9) - (12) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((3 - 11) * (9 - 12))"}, {"input": "3 12 11 9\n", "output": "(9) / (12) = 3/4, left: 3/4, 3, 11\n(3) - (11) = -8, left: -8, 3/4\n(11) / (3) = 11/3, left: 11/3, 3/4\n(3) - (3/4) = 9/4, left: 9/4, 11\n(3/4) - (3) = -9/4, left: -9/4, 11\n(11) - (3/4) = 41/4, left: 41/4, 3\n(3/4) - (11) = -41/4, left: -41/4, 3\n(12) - (9) = 3, left: 3, 3, 11\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (12 - 9)))"}, {"input": "3 7 9 5\n", "output": "(9) - (7) = 2, left: 2, 3, 5\n(2) / (5) = 2/5, left: 2/5, 3\n(9) / (7) = 9/7, left: 9/7, 3, 5\n(3) - (9/7) = 12/7, left: 12/7, 5\n(7) / (9) = 7/9, left: 7/9, 3, 5\n(7) - (9) = -2, left: -2, 3, 5\n(3) * (-2) = -6, left: -6, 5\n(7) + (9) = 16, left: 16, 3, 5\n(5) + (16) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (5 + (7 + 9)))"}, {"input": "3 7 9 5\n", "output": "(7) * (9) = 63, left: 63, 3, 5\n(7) / (9) = 7/9, left: 7/9, 3, 5\n(9) / (7) = 9/7, left: 9/7, 3, 5\n(5) / (9/7) = 35/9, left: 35/9, 3\n(9/7) - (3) = -12/7, left: -12/7, 5\n(5) / (3) = 5/3, left: 5/3, 9/7\n(3) * (5) = 15, left: 15, 9/7\n(7) + (9) = 16, left: 16, 3, 5\n(3) + (5) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((7 + 9) + (3 + 5))"}, {"input": "3 7 9 5\n", "output": "(5) / (9) = 5/9, left: 5/9, 3, 7\n(3) - (5/9) = 22/9, left: 22/9, 7\n(22/9) - (7) = -41/9, left: -41/9\n(9) - (5) = 4, left: 4, 3, 7\n(3) + (7) = 10, left: 10, 4\n(3) - (4) = -1, left: -1, 7\n(9) + (5) = 14, left: 14, 3, 7\n(3) - (14) = -11, left: -11, 7\n(3) + (14) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (3 + (9 + 5)))"}, {"input": "3 7 9 5\n", "output": "(3) * (7) = 21, left: 21, 9, 5\n(21) / (5) = 21/5, left: 21/5, 9\n(9) + (21) = 30, left: 30, 5\n(5) - (30) = -25, left: -25\n(9) - (21) = -12, left: -12, 5\n(5) - (9) = -4, left: -4, 21\n(9) / (5) = 9/5, left: 9/5, 21\n(9) + (5) = 14, left: 14, 21\n(9) * (5) = 45, left: 45, 21\n(45) - (21) = 24, left: 24\nreach 24! expression: ((9 * 5) - (3 * 7))"}, {"input": "3 7 9 5\n", "output": "(9) - (7) = 2, left: 2, 3, 5\n(5) * (2) = 10, left: 10, 3\n(3) - (5) = -2, left: -2, 2\n(9) / (7) = 9/7, left: 9/7, 3, 5\n(5) * (9/7) = 45/7, left: 45/7, 3\n(7) / (9) = 7/9, left: 7/9, 3, 5\n(7) * (9) = 63, left: 63, 3, 5\n(7) - (9) = -2, left: -2, 3, 5\n(3) * (-2) = -6, left: -6, 5\n(-6) - (5) = -11, left: -11\n(3) + (-2) = 1, left: 1, 5\n(7) + (9) = 16, left: 16, 3, 5\n(5) + (16) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (5 + (7 + 9)))"}, {"input": "11 1 7 7\n", "output": "(1) - (11) = -10, left: -10, 7, 7\n(7) - (7) = 0, left: 0, -10\n(0) - (-10) = 10, left: 10\n(0) / (-10) = 0, left: 0\n(7) + (7) = 14, left: 14, -10\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((7 + 7) - (1 - 11))"}, {"input": "11 1 7 7\n", "output": "(1) - (11) = -10, left: -10, 7, 7\n(7) - (7) = 0, left: 0, -10\n(-10) - (0) = -10, left: -10\n(-10) + (0) = -10, left: -10\n(-10) * (0) = 0, left: 0\n(0) - (-10) = 10, left: 10\n(0) / (-10) = 0, left: 0\n(7) + (7) = 14, left: 14, -10\n(-10) * (14) = -140, left: -140\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((7 + 7) - (1 - 11))"}, {"input": "11 1 7 7\n", "output": "(7) * (7) = 49, left: 49, 11, 1\n(11) * (1) = 11, left: 11, 49\n(11) / (49) = 11/49, left: 11/49\n(1) / (49) = 1/49, left: 1/49, 11\n(1) + (49) = 50, left: 50, 11\n(11) + (49) = 60, left: 60, 1\n(7) + (7) = 14, left: 14, 11, 1\n(11) + (14) = 25, left: 25, 1\n(25) / (1) = 25, left: 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((11 + (7 + 7)) - 1)"}, {"input": "11 1 7 7\n", "output": "(7) * (7) = 49, left: 49, 11, 1\n(1) + (49) = 50, left: 50, 11\n(50) / (11) = 50/11, left: 50/11\n(7) / (7) = 1, left: 1, 11, 1\n(7) - (7) = 0, left: 0, 11, 1\n(1) - (0) = 1, left: 1, 11\n(11) / (1) = 11, left: 11\n(7) + (7) = 14, left: 14, 11, 1\n(14) - (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((7 + 7) - 1))"}, {"input": "11 1 7 7\n", "output": "(11) + (1) = 12, left: 12, 7, 7\n(12) / (7) = 12/7, left: 12/7, 7\n(12/7) - (7) = -37/7, left: -37/7\n(7) - (12) = -5, left: -5, 7\n(7) / (7) = 1, left: 1, 12\n(7) - (7) = 0, left: 0, 12\n(0) / (12) = 0, left: 0\n(1) - (11) = -10, left: -10, 7, 7\n(7) + (7) = 14, left: 14, -10\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((7 + 7) - (1 - 11))"}, {"input": "11 1 7 7\n", "output": "(11) * (7) = 77, left: 77, 1, 7\n(77) - (1) = 76, left: 76, 7\n(1) + (7) = 8, left: 8, 77\n(7) - (1) = 6, left: 6, 77\n(77) - (7) = 70, left: 70, 1\n(7) - (77) = -70, left: -70, 1\n(-70) - (1) = -71, left: -71\n(11) - (7) = 4, left: 4, 1, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((11 - 7) * (7 - 1))"}, {"input": "11 1 7 7\n", "output": "(1) - (11) = -10, left: -10, 7, 7\n(7) - (7) = 0, left: 0, -10\n(-10) - (0) = -10, left: -10\n(-10) + (0) = -10, left: -10\n(-10) * (0) = 0, left: 0\n(0) - (-10) = 10, left: 10\n(0) / (-10) = 0, left: 0\n(7) + (7) = 14, left: 14, -10\n(-10) / (14) = -5/7, left: -5/7\n(-10) * (14) = -140, left: -140\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((7 + 7) - (1 - 11))"}, {"input": "11 1 7 7\n", "output": "(1) - (11) = -10, left: -10, 7, 7\n(7) - (7) = 0, left: 0, -10\n(-10) - (0) = -10, left: -10\n(-10) + (0) = -10, left: -10\n(-10) * (0) = 0, left: 0\n(0) - (-10) = 10, left: 10\n(0) / (-10) = 0, left: 0\n(7) + (7) = 14, left: 14, -10\n(-10) / (14) = -5/7, left: -5/7\n(-10) * (14) = -140, left: -140\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((7 + 7) - (1 - 11))"}, {"input": "1 11 5 3\n", "output": "(1) + (3) = 4, left: 4, 11, 5\n(11) / (4) = 11/4, left: 11/4, 5\n(5) / (4) = 5/4, left: 5/4, 11\n(11) * (5/4) = 55/4, left: 55/4\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((1 + 3) * (11 - 5))"}, {"input": "1 11 5 3\n", "output": "(5) - (3) = 2, left: 2, 1, 11\n(11) - (2) = 9, left: 9, 1\n(11) / (1) = 11, left: 11, 2\n(2) + (11) = 13, left: 13\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (1 + 11))"}, {"input": "1 11 5 3\n", "output": "(5) - (3) = 2, left: 2, 1, 11\n(1) - (2) = -1, left: -1, 11\n(2) / (1) = 2, left: 2, 11\n(2) - (11) = -9, left: -9, 1\n(11) * (2) = 22, left: 22, 1\n(11) + (2) = 13, left: 13, 1\n(13) / (1) = 13, left: 13\n(1) - (11) = -10, left: -10, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (1 + 11))"}, {"input": "1 11 5 3\n", "output": "(5) * (3) = 15, left: 15, 1, 11\n(5) + (3) = 8, left: 8, 1, 11\n(1) * (11) = 11, left: 11, 8\n(3) / (5) = 3/5, left: 3/5, 1, 11\n(3/5) / (1) = 3/5, left: 3/5, 11\n(3/5) / (11) = 3/55, left: 3/55\n(5) - (3) = 2, left: 2, 1, 11\n(2) / (11) = 2/11, left: 2/11, 1\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (1 + 11))"}, {"input": "1 11 5 3\n", "output": "(11) - (1) = 10, left: 10, 5, 3\n(3) * (10) = 30, left: 30, 5\n(10) / (5) = 2, left: 2, 3\n(2) / (3) = 2/3, left: 2/3\n(1) * (11) = 11, left: 11, 5, 3\n(5) / (3) = 5/3, left: 5/3, 11\n(5) + (3) = 8, left: 8, 11\n(1) + (11) = 12, left: 12, 5, 3\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (5 - 3))"}, {"input": "1 11 5 3\n", "output": "(1) + (3) = 4, left: 4, 11, 5\n(11) * (4) = 44, left: 44, 5\n(11) / (4) = 11/4, left: 11/4, 5\n(11) * (5) = 55, left: 55, 4\n(4) * (55) = 220, left: 220\n(5) - (11) = -6, left: -6, 4\n(5) / (11) = 5/11, left: 5/11, 4\n(5/11) - (4) = -39/11, left: -39/11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((1 + 3) * (11 - 5))"}, {"input": "1 11 5 3\n", "output": "(1) + (3) = 4, left: 4, 11, 5\n(11) + (4) = 15, left: 15, 5\n(11) - (4) = 7, left: 7, 5\n(5) / (4) = 5/4, left: 5/4, 11\n(5) + (4) = 9, left: 9, 11\n(11) * (9) = 99, left: 99\n(5) - (4) = 1, left: 1, 11\n(11) + (1) = 12, left: 12\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((1 + 3) * (11 - 5))"}, {"input": "8 10 4 11\n", "output": "(10) * (11) = 110, left: 110, 8, 4\n(110) / (8) = 55/4, left: 55/4, 4\n(11) / (10) = 11/10, left: 11/10, 8, 4\n(10) - (11) = -1, left: -1, 8, 4\n(4) + (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 + (10 - 11)))"}, {"input": "8 10 4 11\n", "output": "(10) * (11) = 110, left: 110, 8, 4\n(8) / (110) = 4/55, left: 4/55, 4\n(11) / (10) = 11/10, left: 11/10, 8, 4\n(4) * (11/10) = 22/5, left: 22/5, 8\n(4) + (11/10) = 51/10, left: 51/10, 8\n(10) - (11) = -1, left: -1, 8, 4\n(-1) - (4) = -5, left: -5, 8\n(-5) - (8) = -13, left: -13\n(4) + (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 + (10 - 11)))"}, {"input": "8 10 4 11\n", "output": "(4) / (11) = 4/11, left: 4/11, 8, 10\n(10) + (4/11) = 114/11, left: 114/11, 8\n(4) * (11) = 44, left: 44, 8, 10\n(11) / (4) = 11/4, left: 11/4, 8, 10\n(4) - (11) = -7, left: -7, 8, 10\n(8) - (10) = -2, left: -2, -7\n(-7) - (8) = -15, left: -15, 10\n(-15) - (10) = -25, left: -25\n(10) + (-7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 + (4 - 11)))"}, {"input": "8 10 4 11\n", "output": "(8) * (10) = 80, left: 80, 4, 11\n(10) - (8) = 2, left: 2, 4, 11\n(8) / (10) = 4/5, left: 4/5, 4, 11\n(4) - (4/5) = 16/5, left: 16/5, 11\n(10) / (4) = 5/2, left: 5/2, 8, 11\n(8) * (5/2) = 20, left: 20, 11\n(5/2) / (11) = 5/22, left: 5/22, 8\n(10) + (4) = 14, left: 14, 8, 11\n(14) - (11) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 + 4) - 11))"}, {"input": "8 10 4 11\n", "output": "(10) - (8) = 2, left: 2, 4, 11\n(2) - (4) = -2, left: -2, 11\n(8) - (11) = -3, left: -3, 10, 4\n(10) - (4) = 6, left: 6, -3\n(10) / (11) = 10/11, left: 10/11, 8, 4\n(10) + (11) = 21, left: 21, 8, 4\n(21) - (8) = 13, left: 13, 4\n(10) - (11) = -1, left: -1, 8, 4\n(4) + (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 + (10 - 11)))"}, {"input": "8 10 4 11\n", "output": "(8) - (11) = -3, left: -3, 10, 4\n(8) + (11) = 19, left: 19, 10, 4\n(19) / (10) = 19/10, left: 19/10, 4\n(19/10) / (4) = 19/40, left: 19/40\n(8) + (10) = 18, left: 18, 4, 11\n(11) - (4) = 7, left: 7, 18\n(10) / (11) = 10/11, left: 10/11, 8, 4\n(10) - (11) = -1, left: -1, 8, 4\n(4) + (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 + (10 - 11)))"}, {"input": "7 2 11 8\n", "output": "(7) / (8) = 7/8, left: 7/8, 2, 11\n(7/8) - (2) = -9/8, left: -9/8, 11\n(11) - (7/8) = 81/8, left: 81/8, 2\n(7) + (8) = 15, left: 15, 2, 11\n(11) + (15) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((11 + (7 + 8)) - 2)"}, {"input": "7 2 11 8\n", "output": "(11) - (2) = 9, left: 9, 7, 8\n(9) - (8) = 1, left: 1, 7\n(7) + (1) = 8, left: 8\n(7) - (1) = 6, left: 6\n(8) - (9) = -1, left: -1, 7\n(-1) - (7) = -8, left: -8\n(8) * (9) = 72, left: 72, 7\n(72) / (7) = 72/7, left: 72/7\n(8) + (9) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (8 + (11 - 2)))"}, {"input": "7 2 11 8\n", "output": "(7) - (2) = 5, left: 5, 11, 8\n(5) / (8) = 5/8, left: 5/8, 11\n(5) - (8) = -3, left: -3, 11\n(11) + (-3) = 8, left: 8\n(8) - (5) = 3, left: 3, 11\n(8) * (5) = 40, left: 40, 11\n(11) + (40) = 51, left: 51\n(8) + (5) = 13, left: 13, 11\n(11) / (13) = 11/13, left: 11/13\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (8 + (7 - 2)))"}, {"input": "7 2 11 8\n", "output": "(11) * (8) = 88, left: 88, 7, 2\n(8) - (11) = -3, left: -3, 7, 2\n(2) / (-3) = -2/3, left: -2/3, 7\n(2) * (-3) = -6, left: -6, 7\n(-3) - (7) = -10, left: -10, 2\n(11) / (8) = 11/8, left: 11/8, 7, 2\n(11) + (8) = 19, left: 19, 7, 2\n(2) + (19) = 21, left: 21, 7\n(19) - (2) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((11 + 8) - 2))"}, {"input": "7 2 11 8\n", "output": "(8) / (7) = 8/7, left: 8/7, 2, 11\n(2) + (11) = 13, left: 13, 8/7\n(11) * (8/7) = 88/7, left: 88/7, 2\n(7) / (8) = 7/8, left: 7/8, 2, 11\n(2) * (7/8) = 7/4, left: 7/4, 11\n(11) + (7/8) = 95/8, left: 95/8, 2\n(7/8) / (11) = 7/88, left: 7/88, 2\n(7) + (8) = 15, left: 15, 2, 11\n(11) + (15) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((11 + (7 + 8)) - 2)"}, {"input": "7 2 11 8\n", "output": "(7) * (8) = 56, left: 56, 2, 11\n(56) / (2) = 28, left: 28, 11\n(28) / (11) = 28/11, left: 28/11\n(8) / (7) = 8/7, left: 8/7, 2, 11\n(7) / (8) = 7/8, left: 7/8, 2, 11\n(2) / (11) = 2/11, left: 2/11, 7/8\n(7/8) + (2/11) = 93/88, left: 93/88\n(7) + (8) = 15, left: 15, 2, 11\n(11) + (15) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((11 + (7 + 8)) - 2)"}, {"input": "9 10 12 1\n", "output": "(12) - (1) = 11, left: 11, 9, 10\n(12) + (1) = 13, left: 13, 9, 10\n(10) - (13) = -3, left: -3, 9\n(10) / (13) = 10/13, left: 10/13, 9\n(1) - (12) = -11, left: -11, 9, 10\n(9) - (-11) = 20, left: 20, 10\n(12) * (1) = 12, left: 12, 9, 10\n(1) - (9) = -8, left: -8, 10, 12\n(10) + (-8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 + (1 - 9)))"}, {"input": "9 10 12 1\n", "output": "(10) * (12) = 120, left: 120, 9, 1\n(10) + (12) = 22, left: 22, 9, 1\n(22) / (1) = 22, left: 22, 9\n(9) / (22) = 9/22, left: 9/22\n(12) - (10) = 2, left: 2, 9, 1\n(10) / (12) = 5/6, left: 5/6, 9, 1\n(9) - (1) = 8, left: 8, 5/6\n(1) - (9) = -8, left: -8, 10, 12\n(10) + (-8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 + (1 - 9)))"}, {"input": "9 10 12 1\n", "output": "(10) / (1) = 10, left: 10, 9, 12\n(12) * (10) = 120, left: 120, 9\n(9) / (120) = 3/40, left: 3/40\n(10) * (1) = 10, left: 10, 9, 12\n(9) + (12) = 21, left: 21, 10\n(21) / (10) = 21/10, left: 21/10\n(10) + (1) = 11, left: 11, 9, 12\n(12) + (11) = 23, left: 23, 9\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 1) - 9))"}, {"input": "9 10 12 1\n", "output": "(10) - (12) = -2, left: -2, 9, 1\n(9) * (-2) = -18, left: -18, 1\n(-18) - (1) = -19, left: -19\n(9) / (1) = 9, left: 9, 10, 12\n(9) / (10) = 9/10, left: 9/10, 12\n(12) / (9/10) = 40/3, left: 40/3\n(10) * (12) = 120, left: 120, 9\n(1) - (9) = -8, left: -8, 10, 12\n(10) + (-8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 + (1 - 9)))"}, {"input": "9 10 12 1\n", "output": "(9) - (12) = -3, left: -3, 10, 1\n(12) / (9) = 4/3, left: 4/3, 10, 1\n(9) / (12) = 3/4, left: 3/4, 10, 1\n(12) - (9) = 3, left: 3, 10, 1\n(1) / (3) = 1/3, left: 1/3, 10\n(9) + (12) = 21, left: 21, 10, 1\n(9) / (10) = 9/10, left: 9/10, 12, 1\n(10) - (9) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (10 - 9)))"}, {"input": "2 7 10 10\n", "output": "(7) * (10) = 70, left: 70, 2, 10\n(2) + (10) = 12, left: 12, 70\n(10) - (2) = 8, left: 8, 70\n(10) - (7) = 3, left: 3, 2, 10\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((10 - 7) * (10 - 2))"}, {"input": "2 7 10 10\n", "output": "(7) - (10) = -3, left: -3, 2, 10\n(-3) - (2) = -5, left: -5, 10\n(-5) / (10) = -1/2, left: -1/2\n(2) + (-3) = -1, left: -1, 10\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((7 - 10) * (2 - 10))"}, {"input": "2 7 10 10\n", "output": "(10) - (7) = 3, left: 3, 2, 10\n(10) + (3) = 13, left: 13, 2\n(2) - (13) = -11, left: -11\n(3) - (10) = -7, left: -7, 2\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((10 - 7) * (10 - 2))"}, {"input": "2 7 10 10\n", "output": "(10) / (7) = 10/7, left: 10/7, 2, 10\n(7) / (10) = 7/10, left: 7/10, 2, 10\n(7/10) - (2) = -13/10, left: -13/10, 10\n(10) * (-13/10) = -13, left: -13\n(10) / (2) = 5, left: 5, 7/10\n(7) - (10) = -3, left: -3, 2, 10\n(-3) / (2) = -3/2, left: -3/2, 10\n(10) / (-3/2) = -20/3, left: -20/3\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((7 - 10) * (2 - 10))"}, {"input": "2 7 10 10\n", "output": "(10) / (10) = 1, left: 1, 2, 7\n(7) - (2) = 5, left: 5, 1\n(10) - (10) = 0, left: 0, 2, 7\n(7) + (0) = 7, left: 7, 2\n(7) - (2) = 5, left: 5, 10, 10\n(5) / (10) = 1/2, left: 1/2, 10\n(2) * (7) = 14, left: 14, 10, 10\n(7) - (10) = -3, left: -3, 2, 10\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((7 - 10) * (2 - 10))"}, {"input": "2 7 10 10\n", "output": "(7) * (10) = 70, left: 70, 2, 10\n(2) - (10) = -8, left: -8, 70\n(10) - (7) = 3, left: 3, 2, 10\n(3) / (2) = 3/2, left: 3/2, 10\n(3/2) / (10) = 3/20, left: 3/20\n(10) - (3) = 7, left: 7, 2\n(2) + (10) = 12, left: 12, 3\n(3) * (12) = 36, left: 36\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((10 - 7) * (10 - 2))"}, {"input": "2 7 10 10\n", "output": "(10) - (10) = 0, left: 0, 2, 7\n(10) / (10) = 1, left: 1, 2, 7\n(2) * (7) = 14, left: 14, 1\n(1) / (14) = 1/14, left: 1/14\n(7) * (10) = 70, left: 70, 2, 10\n(70) - (2) = 68, left: 68, 10\n(70) - (10) = 60, left: 60, 2\n(7) + (10) = 17, left: 17, 2, 10\n(2) * (17) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((2 * (7 + 10)) - 10)"}, {"input": "2 7 10 10\n", "output": "(10) - (7) = 3, left: 3, 2, 10\n(10) / (3) = 10/3, left: 10/3, 2\n(2) + (10/3) = 16/3, left: 16/3\n(3) / (10) = 3/10, left: 3/10, 2\n(10) + (3) = 13, left: 13, 2\n(3) - (10) = -7, left: -7, 2\n(10) - (3) = 7, left: 7, 2\n(2) / (10) = 1/5, left: 1/5, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((10 - 7) * (10 - 2))"}, {"input": "2 12 9 9\n", "output": "(12) / (9) = 4/3, left: 4/3, 2, 9\n(9) + (4/3) = 31/3, left: 31/3, 2\n(31/3) / (2) = 31/6, left: 31/6\n(9) - (4/3) = 23/3, left: 23/3, 2\n(9) * (4/3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 * (12 / 9)))"}, {"input": "2 12 9 9\n", "output": "(2) * (9) = 18, left: 18, 12, 9\n(9) / (12) = 3/4, left: 3/4, 18\n(3/4) / (18) = 1/24, left: 1/24\n(3/4) - (18) = -69/4, left: -69/4\n(18) + (3/4) = 75/4, left: 75/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((2 * 9) / (9 / 12))"}, {"input": "2 12 9 9\n", "output": "(12) + (9) = 21, left: 21, 2, 9\n(21) - (2) = 19, left: 19, 9\n(2) + (21) = 23, left: 23, 9\n(9) - (21) = -12, left: -12, 2\n(21) - (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((12 + 9) - 9))"}, {"input": "2 12 9 9\n", "output": "(2) - (9) = -7, left: -7, 12, 9\n(12) * (9) = 108, left: 108, -7\n(9) - (12) = -3, left: -3, -7\n(-7) / (-3) = 7/3, left: 7/3\n(12) / (9) = 4/3, left: 4/3, -7\n(4/3) / (-7) = -4/21, left: -4/21\n(-7) - (9) = -16, left: -16, 12\n(12) / (-16) = -3/4, left: -3/4\n(9) + (-7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (9 + (2 - 9)))"}, {"input": "2 12 9 9\n", "output": "(12) + (9) = 21, left: 21, 2, 9\n(2) * (21) = 42, left: 42, 9\n(2) + (9) = 11, left: 11, 21\n(2) - (9) = -7, left: -7, 21\n(9) / (2) = 9/2, left: 9/2, 21\n(2) / (9) = 2/9, left: 2/9, 21\n(9) - (21) = -12, left: -12, 2\n(21) - (9) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((12 + 9) - 9))"}, {"input": "2 12 9 9\n", "output": "(12) / (9) = 4/3, left: 4/3, 2, 9\n(9) + (4/3) = 31/3, left: 31/3, 2\n(9) - (4/3) = 23/3, left: 23/3, 2\n(2) - (23/3) = -17/3, left: -17/3\n(2) + (23/3) = 29/3, left: 29/3\n(4/3) - (9) = -23/3, left: -23/3, 2\n(2) * (-23/3) = -46/3, left: -46/3\n(9) * (4/3) = 12, left: 12, 2\n(12) / (2) = 6, left: 6\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 * (12 / 9)))"}, {"input": "2 12 9 9\n", "output": "(2) * (9) = 18, left: 18, 12, 9\n(9) / (12) = 3/4, left: 3/4, 18\n(3/4) / (18) = 1/24, left: 1/24\n(3/4) - (18) = -69/4, left: -69/4\n(18) - (3/4) = 69/4, left: 69/4\n(18) + (3/4) = 75/4, left: 75/4\n(18) * (3/4) = 27/2, left: 27/2\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((2 * 9) / (9 / 12))"}, {"input": "2 12 9 9\n", "output": "(2) * (9) = 18, left: 18, 12, 9\n(9) / (12) = 3/4, left: 3/4, 18\n(3/4) / (18) = 1/24, left: 1/24\n(3/4) - (18) = -69/4, left: -69/4\n(18) - (3/4) = 69/4, left: 69/4\n(18) + (3/4) = 75/4, left: 75/4\n(18) * (3/4) = 27/2, left: 27/2\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((2 * 9) / (9 / 12))"}, {"input": "2 12 9 9\n", "output": "(2) * (9) = 18, left: 18, 12, 9\n(9) / (12) = 3/4, left: 3/4, 18\n(3/4) / (18) = 1/24, left: 1/24\n(3/4) - (18) = -69/4, left: -69/4\n(18) - (3/4) = 69/4, left: 69/4\n(18) + (3/4) = 75/4, left: 75/4\n(18) * (3/4) = 27/2, left: 27/2\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((2 * 9) / (9 / 12))"}, {"input": "9 5 8 1\n", "output": "(5) / (8) = 5/8, left: 5/8, 9, 1\n(1) / (9) = 1/9, left: 1/9, 5/8\n(5/8) - (1) = -3/8, left: -3/8, 9\n(5/8) / (1) = 5/8, left: 5/8, 9\n(1) - (5/8) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: (9 / (1 - (5 / 8)))"}, {"input": "9 5 8 1\n", "output": "(5) / (8) = 5/8, left: 5/8, 9, 1\n(1) - (9) = -8, left: -8, 5/8\n(9) * (1) = 9, left: 9, 5/8\n(9) - (5/8) = 67/8, left: 67/8\n(9) - (1) = 8, left: 8, 5/8\n(1) * (5/8) = 5/8, left: 5/8, 9\n(5/8) / (1) = 5/8, left: 5/8, 9\n(1) - (5/8) = 3/8, left: 3/8, 9\n(9) - (3/8) = 69/8, left: 69/8\n(9) / (3/8) = 24, left: 24\nreach 24! expression: (9 / (1 - (5 / 8)))"}, {"input": "9 5 8 1\n", "output": "(9) * (1) = 9, left: 9, 5, 8\n(9) / (5) = 9/5, left: 9/5, 8\n(5) * (8) = 40, left: 40, 9\n(8) / (5) = 8/5, left: 8/5, 9\n(9) / (8/5) = 45/8, left: 45/8\n(5) - (8) = -3, left: -3, 9\n(9) - (1) = 8, left: 8, 5, 8\n(8) / (5) = 8/5, left: 8/5, 8\n(8) - (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 1) - 5))"}, {"input": "9 5 8 1\n", "output": "(9) / (5) = 9/5, left: 9/5, 8, 1\n(8) + (1) = 9, left: 9, 9/5\n(9) * (5) = 45, left: 45, 8, 1\n(8) - (45) = -37, left: -37, 1\n(5) / (9) = 5/9, left: 5/9, 8, 1\n(9) + (5) = 14, left: 14, 8, 1\n(14) - (1) = 13, left: 13, 8\n(9) - (5) = 4, left: 4, 8, 1\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 5) - 1))"}, {"input": "9 5 8 1\n", "output": "(8) * (1) = 8, left: 8, 9, 5\n(5) - (8) = -3, left: -3, 9\n(1) / (8) = 1/8, left: 1/8, 9, 5\n(9) / (8) = 9/8, left: 9/8, 5, 1\n(5) - (1) = 4, left: 4, 9/8\n(8) - (9) = -1, left: -1, 5, 1\n(5) + (-1) = 4, left: 4, 1\n(5) - (8) = -3, left: -3, 9, 1\n(1) - (9) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((5 - 8) * (1 - 9))"}, {"input": "9 5 8 1\n", "output": "(8) * (1) = 8, left: 8, 9, 5\n(5) / (9) = 5/9, left: 5/9, 8\n(8) - (1) = 7, left: 7, 9, 5\n(9) / (7) = 9/7, left: 9/7, 5\n(8) / (1) = 8, left: 8, 9, 5\n(9) * (5) = 45, left: 45, 8\n(1) / (8) = 1/8, left: 1/8, 9, 5\n(9) + (8) = 17, left: 17, 5, 1\n(9) - (8) = 1, left: 1, 5, 1\n(9) * (8) = 72, left: 72, 5, 1\n(8) - (9) = -1, left: -1, 5, 1\n(5) - (8) = -3, left: -3, 9, 1\n(1) - (9) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((5 - 8) * (1 - 9))"}, {"input": "9 5 8 1\n", "output": "(9) * (1) = 9, left: 9, 5, 8\n(5) / (9) = 5/9, left: 5/9, 8\n(5) * (9) = 45, left: 45, 8\n(8) + (9) = 17, left: 17, 5\n(9) - (8) = 1, left: 1, 5\n(1) / (5) = 1/5, left: 1/5\n(8) * (9) = 72, left: 72, 5\n(8) - (9) = -1, left: -1, 5\n(5) + (-1) = 4, left: 4\n(5) * (8) = 40, left: 40, 9\n(8) - (5) = 3, left: 3, 9\n(9) - (1) = 8, left: 8, 5, 8\n(8) - (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 1) - 5))"}, {"input": "4 5 9 1\n", "output": "(5) / (4) = 5/4, left: 5/4, 9, 1\n(5) - (4) = 1, left: 1, 9, 1\n(4) * (5) = 20, left: 20, 9, 1\n(1) - (5) = -4, left: -4, 4, 9\n(4) - (-4) = 8, left: 8, 9\n(5) / (1) = 5, left: 5, 4, 9\n(9) / (4) = 9/4, left: 9/4, 5\n(1) - (4) = -3, left: -3, 5, 9\n(5) * (-3) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 * (1 - 4)))"}, {"input": "4 5 9 1\n", "output": "(9) / (4) = 9/4, left: 9/4, 5, 1\n(1) - (5) = -4, left: -4, 9/4\n(4) + (9) = 13, left: 13, 5, 1\n(5) * (13) = 65, left: 65, 1\n(1) / (65) = 1/65, left: 1/65\n(4) - (9) = -5, left: -5, 5, 1\n(9) - (4) = 5, left: 5, 5, 1\n(1) + (5) = 6, left: 6, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (9 - 4)) - 1)"}, {"input": "4 5 9 1\n", "output": "(5) / (9) = 5/9, left: 5/9, 4, 1\n(9) - (5) = 4, left: 4, 4, 1\n(1) + (4) = 5, left: 5, 4\n(4) / (9) = 4/9, left: 4/9, 5, 1\n(4) - (9) = -5, left: -5, 5, 1\n(1) / (-5) = -1/5, left: -1/5, 5\n(9) - (4) = 5, left: 5, 5, 1\n(1) / (5) = 1/5, left: 1/5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (9 - 4)) - 1)"}, {"input": "4 5 9 1\n", "output": "(9) / (5) = 9/5, left: 9/5, 4, 1\n(5) + (9) = 14, left: 14, 4, 1\n(9) * (1) = 9, left: 9, 4, 5\n(9) / (4) = 9/4, left: 9/4, 5\n(9) + (1) = 10, left: 10, 4, 5\n(4) - (1) = 3, left: 3, 5, 9\n(9) / (3) = 3, left: 3, 5\n(5) / (3) = 5/3, left: 5/3, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (4 - 1)))"}, {"input": "4 5 9 1\n", "output": "(5) - (9) = -4, left: -4, 4, 1\n(1) / (4) = 1/4, left: 1/4, -4\n(5) / (9) = 5/9, left: 5/9, 4, 1\n(4) + (1) = 5, left: 5, 5/9\n(5) + (9) = 14, left: 14, 4, 1\n(9) - (5) = 4, left: 4, 4, 1\n(5) * (9) = 45, left: 45, 4, 1\n(9) - (4) = 5, left: 5, 5, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (9 - 4)) - 1)"}, {"input": "4 5 9 1\n", "output": "(4) - (5) = -1, left: -1, 9, 1\n(9) - (-1) = 10, left: 10, 1\n(10) - (1) = 9, left: 9\n(5) / (4) = 5/4, left: 5/4, 9, 1\n(1) - (9) = -8, left: -8, 5/4\n(4) * (5) = 20, left: 20, 9, 1\n(20) / (9) = 20/9, left: 20/9, 1\n(5) * (1) = 5, left: 5, 4, 9\n(5) / (1) = 5, left: 5, 4, 9\n(9) - (4) = 5, left: 5, 5\n(1) / (4) = 1/4, left: 1/4, 5, 9\n(1) - (4) = -3, left: -3, 5, 9\n(5) * (-3) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 * (1 - 4)))"}, {"input": "4 5 9 1\n", "output": "(5) * (9) = 45, left: 45, 4, 1\n(9) - (5) = 4, left: 4, 4, 1\n(4) - (4) = 0, left: 0, 1\n(5) - (9) = -4, left: -4, 4, 1\n(1) / (9) = 1/9, left: 1/9, 4, 5\n(9) - (1) = 8, left: 8, 4, 5\n(9) + (1) = 10, left: 10, 4, 5\n(4) + (5) = 9, left: 9, 10\n(10) + (9) = 19, left: 19\n(1) - (9) = -8, left: -8, 4, 5\n(4) / (1) = 4, left: 4, 5, 9\n(4) - (1) = 3, left: 3, 5, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (4 - 1)))"}, {"input": "4 5 9 1\n", "output": "(5) + (9) = 14, left: 14, 4, 1\n(5) / (9) = 5/9, left: 5/9, 4, 1\n(4) - (1) = 3, left: 3, 5/9\n(4) + (1) = 5, left: 5, 5/9\n(5) - (9) = -4, left: -4, 4, 1\n(1) + (-4) = -3, left: -3, 4\n(-3) - (4) = -7, left: -7\n(5) * (9) = 45, left: 45, 4, 1\n(4) - (9) = -5, left: -5, 5, 1\n(9) / (4) = 9/4, left: 9/4, 5, 1\n(5) / (1) = 5, left: 5, 9/4\n(9) - (4) = 5, left: 5, 5, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (9 - 4)) - 1)"}, {"input": "4 5 9 1\n", "output": "(9) / (4) = 9/4, left: 9/4, 5, 1\n(1) - (9/4) = -5/4, left: -5/4, 5\n(5) - (1) = 4, left: 4, 9/4\n(4) * (9) = 36, left: 36, 5, 1\n(36) - (1) = 35, left: 35, 5\n(4) + (9) = 13, left: 13, 5, 1\n(4) - (9) = -5, left: -5, 5, 1\n(-5) / (1) = -5, left: -5, 5\n(9) - (4) = 5, left: 5, 5, 1\n(1) * (5) = 5, left: 5, 5\n(5) * (5) = 25, left: 25\n(5) / (5) = 1, left: 1, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (9 - 4)) - 1)"}, {"input": "8 4 13 5\n", "output": "(4) / (8) = 1/2, left: 1/2, 13, 5\n(5) - (1/2) = 9/2, left: 9/2, 13\n(1/2) / (5) = 1/10, left: 1/10, 13\n(8) * (4) = 32, left: 32, 13, 5\n(5) + (32) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((5 + (8 * 4)) - 13)"}, {"input": "8 4 13 5\n", "output": "(4) * (13) = 52, left: 52, 8, 5\n(4) - (13) = -9, left: -9, 8, 5\n(5) / (8) = 5/8, left: 5/8, -9\n(8) / (5) = 8/5, left: 8/5, 4, 13\n(8/5) / (13) = 8/65, left: 8/65, 4\n(4) / (8/65) = 65/2, left: 65/2\n(5) - (8) = -3, left: -3, 4, 13\n(5) - (13) = -8, left: -8, 8, 4\n(8) * (4) = 32, left: 32, -8\n(-8) + (32) = 24, left: 24\nreach 24! expression: ((5 - 13) + (8 * 4))"}, {"input": "8 4 13 5\n", "output": "(5) - (13) = -8, left: -8, 8, 4\n(8) + (-8) = 0, left: 0, 4\n(0) - (4) = -4, left: -4\n(4) - (-8) = 12, left: 12, 8\n(8) + (12) = 20, left: 20\n(4) + (-8) = -4, left: -4, 8\n(8) * (-4) = -32, left: -32\n(8) * (4) = 32, left: 32, -8\n(32) - (-8) = 40, left: 40\n(-8) + (32) = 24, left: 24\nreach 24! expression: ((5 - 13) + (8 * 4))"}, {"input": "8 4 13 5\n", "output": "(8) - (4) = 4, left: 4, 13, 5\n(4) - (5) = -1, left: -1, 13\n(4) - (8) = -4, left: -4, 13, 5\n(8) / (4) = 2, left: 2, 13, 5\n(13) * (5) = 65, left: 65, 2\n(65) - (2) = 63, left: 63\n(4) / (8) = 1/2, left: 1/2, 13, 5\n(8) * (4) = 32, left: 32, 13, 5\n(5) + (32) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((5 + (8 * 4)) - 13)"}, {"input": "8 4 13 5\n", "output": "(8) * (13) = 104, left: 104, 4, 5\n(4) * (104) = 416, left: 416, 5\n(8) - (13) = -5, left: -5, 4, 5\n(5) - (4) = 1, left: 1, -5\n(4) - (5) = -1, left: -1, 8, 13\n(4) / (5) = 4/5, left: 4/5, 8, 13\n(8) / (13) = 8/13, left: 8/13, 4/5\n(8) * (4) = 32, left: 32, 13, 5\n(5) + (32) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((5 + (8 * 4)) - 13)"}, {"input": "8 4 13 5\n", "output": "(4) - (13) = -9, left: -9, 8, 5\n(8) / (13) = 8/13, left: 8/13, 4, 5\n(5) - (4) = 1, left: 1, 8/13\n(8) + (13) = 21, left: 21, 4, 5\n(4) * (5) = 20, left: 20, 8, 13\n(13) / (20) = 13/20, left: 13/20, 8\n(5) - (8) = -3, left: -3, 4, 13\n(13) - (5) = 8, left: 8, 8, 4\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * 4) - (13 - 5))"}, {"input": "8 4 13 5\n", "output": "(13) - (4) = 9, left: 9, 8, 5\n(4) * (13) = 52, left: 52, 8, 5\n(4) - (13) = -9, left: -9, 8, 5\n(4) / (13) = 4/13, left: 4/13, 8, 5\n(8) * (5) = 40, left: 40, 4, 13\n(8) - (5) = 3, left: 3, 4, 13\n(4) - (3) = 1, left: 1, 13\n(8) + (5) = 13, left: 13, 4, 13\n(13) * (5) = 65, left: 65, 8, 4\n(8) / (4) = 2, left: 2, 65\n(4) * (65) = 260, left: 260, 8\n(5) - (13) = -8, left: -8, 8, 4\n(8) * (4) = 32, left: 32, -8\n(-8) + (32) = 24, left: 24\nreach 24! expression: ((5 - 13) + (8 * 4))"}, {"input": "12 10 7 12\n", "output": "(12) * (10) = 120, left: 120, 7, 12\n(12) - (120) = -108, left: -108, 7\n(7) + (-108) = -101, left: -101\n(12) - (7) = 5, left: 5, 120\n(120) * (5) = 600, left: 600\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (12 - 7))"}, {"input": "12 10 7 12\n", "output": "(7) + (12) = 19, left: 19, 12, 10\n(10) - (19) = -9, left: -9, 12\n(7) / (12) = 7/12, left: 7/12, 12, 10\n(12) - (7) = 5, left: 5, 12, 10\n(5) / (12) = 5/12, left: 5/12, 10\n(10) / (5/12) = 24, left: 24\nreach 24! expression: (10 / ((12 - 7) / 12))"}, {"input": "12 10 7 12\n", "output": "(12) / (7) = 12/7, left: 12/7, 10, 12\n(12/7) / (10) = 6/35, left: 6/35, 12\n(7) / (12) = 7/12, left: 7/12, 10, 12\n(12) - (7) = 5, left: 5, 10, 12\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (12 / (12 - 7)))"}, {"input": "12 10 7 12\n", "output": "(12) / (12) = 1, left: 1, 10, 7\n(12) - (12) = 0, left: 0, 10, 7\n(7) + (0) = 7, left: 7, 10\n(10) * (12) = 120, left: 120, 12, 7\n(12) - (7) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (12 - 7))"}, {"input": "12 10 7 12\n", "output": "(12) / (10) = 6/5, left: 6/5, 7, 12\n(12) - (10) = 2, left: 2, 7, 12\n(2) - (7) = -5, left: -5, 12\n(12) * (10) = 120, left: 120, 7, 12\n(12) - (7) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (12 - 7))"}, {"input": "12 10 7 12\n", "output": "(12) * (10) = 120, left: 120, 7, 12\n(12) - (120) = -108, left: -108, 7\n(12) / (120) = 1/10, left: 1/10, 7\n(120) / (12) = 10, left: 10, 7\n(12) * (120) = 1440, left: 1440, 7\n(7) * (12) = 84, left: 84, 120\n(120) * (84) = 10080, left: 10080\n(12) - (7) = 5, left: 5, 120\n(120) * (5) = 600, left: 600\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (12 - 7))"}, {"input": "12 10 7 12\n", "output": "(12) / (10) = 6/5, left: 6/5, 7, 12\n(7) / (6/5) = 35/6, left: 35/6, 12\n(12) - (10) = 2, left: 2, 7, 12\n(12) * (2) = 24, left: 24, 7\n(10) - (12) = -2, left: -2, 7, 12\n(12) * (-2) = -24, left: -24, 7\n(12) * (10) = 120, left: 120, 7, 12\n(7) / (12) = 7/12, left: 7/12, 120\n(12) - (7) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (12 - 7))"}, {"input": "12 10 7 12\n", "output": "(12) - (12) = 0, left: 0, 10, 7\n(12) - (12) = 0, left: 0, 10, 7\n(12) * (12) = 144, left: 144, 10, 7\n(10) - (144) = -134, left: -134, 7\n(12) / (10) = 6/5, left: 6/5, 12, 7\n(10) + (12) = 22, left: 22, 12, 7\n(12) + (7) = 19, left: 19, 22\n(10) * (12) = 120, left: 120, 12, 7\n(12) - (7) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (12 - 7))"}, {"input": "12 10 7 12\n", "output": "(7) + (12) = 19, left: 19, 12, 10\n(19) / (12) = 19/12, left: 19/12, 10\n(10) / (19) = 10/19, left: 10/19, 12\n(10/19) - (12) = -218/19, left: -218/19\n(7) / (12) = 7/12, left: 7/12, 12, 10\n(10) * (7/12) = 35/6, left: 35/6, 12\n(10) / (12) = 5/6, left: 5/6, 7/12\n(12) - (7) = 5, left: 5, 12, 10\n(5) / (12) = 5/12, left: 5/12, 10\n(10) / (5/12) = 24, left: 24\nreach 24! expression: (10 / ((12 - 7) / 12))"}, {"input": "12 10 7 12\n", "output": "(12) / (7) = 12/7, left: 12/7, 10, 12\n(7) - (12) = -5, left: -5, 10, 12\n(7) / (12) = 7/12, left: 7/12, 10, 12\n(7/12) - (10) = -113/12, left: -113/12, 12\n(12) - (-113/12) = 257/12, left: 257/12\n(12) * (7) = 84, left: 84, 10, 12\n(12) - (10) = 2, left: 2, 84\n(12) - (7) = 5, left: 5, 10, 12\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (12 / (12 - 7)))"}, {"input": "7 4 12 9\n", "output": "(4) / (12) = 1/3, left: 1/3, 7, 9\n(1/3) - (9) = -26/3, left: -26/3, 7\n(1/3) / (9) = 1/27, left: 1/27, 7\n(4) - (12) = -8, left: -8, 7, 9\n(9) - (-8) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (9 - (4 - 12)))"}, {"input": "7 4 12 9\n", "output": "(12) * (9) = 108, left: 108, 7, 4\n(7) - (108) = -101, left: -101, 4\n(4) / (-101) = -4/101, left: -4/101\n(12) + (9) = 21, left: 21, 7, 4\n(4) - (7) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((12 + 9) - (4 - 7))"}, {"input": "7 4 12 9\n", "output": "(4) * (12) = 48, left: 48, 7, 9\n(7) + (48) = 55, left: 55, 9\n(7) / (48) = 7/48, left: 7/48, 9\n(7/48) - (9) = -425/48, left: -425/48\n(9) - (7) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 * 12) / (9 - 7))"}, {"input": "7 4 12 9\n", "output": "(12) * (9) = 108, left: 108, 7, 4\n(108) / (4) = 27, left: 27, 7\n(7) - (4) = 3, left: 3, 108\n(3) / (108) = 1/36, left: 1/36\n(108) / (7) = 108/7, left: 108/7, 4\n(4) - (108/7) = -80/7, left: -80/7\n(108/7) - (4) = 80/7, left: 80/7\n(12) + (9) = 21, left: 21, 7, 4\n(4) - (7) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((12 + 9) - (4 - 7))"}, {"input": "7 4 12 9\n", "output": "(7) + (9) = 16, left: 16, 4, 12\n(12) - (16) = -4, left: -4, 4\n(16) / (12) = 4/3, left: 4/3, 4\n(12) / (16) = 3/4, left: 3/4, 4\n(3/4) / (4) = 3/16, left: 3/16\n(16) - (12) = 4, left: 4, 4\n(12) * (16) = 192, left: 192, 4\n(4) - (192) = -188, left: -188\n(12) + (16) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((12 + (7 + 9)) - 4)"}, {"input": "7 4 12 9\n", "output": "(4) * (12) = 48, left: 48, 7, 9\n(7) * (48) = 336, left: 336, 9\n(7) + (48) = 55, left: 55, 9\n(48) / (7) = 48/7, left: 48/7, 9\n(9) / (48/7) = 21/16, left: 21/16\n(48) - (7) = 41, left: 41, 9\n(9) * (41) = 369, left: 369\n(7) + (9) = 16, left: 16, 48\n(9) - (7) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 * 12) / (9 - 7))"}, {"input": "7 4 12 9\n", "output": "(7) - (9) = -2, left: -2, 4, 12\n(4) - (-2) = 6, left: 6, 12\n(12) / (6) = 2, left: 2\n(12) + (6) = 18, left: 18\n(-2) - (4) = -6, left: -6, 12\n(-6) / (12) = -1/2, left: -1/2\n(12) - (-6) = 18, left: 18\n(4) + (-2) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (4 + (7 - 9)))"}, {"input": "7 4 12 9\n", "output": "(4) / (12) = 1/3, left: 1/3, 7, 9\n(1/3) - (9) = -26/3, left: -26/3, 7\n(7) - (-26/3) = 47/3, left: 47/3\n(7) * (9) = 63, left: 63, 1/3\n(9) / (7) = 9/7, left: 9/7, 1/3\n(9) - (7) = 2, left: 2, 1/3\n(1/3) / (7) = 1/21, left: 1/21, 9\n(4) - (12) = -8, left: -8, 7, 9\n(9) - (-8) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (9 - (4 - 12)))"}, {"input": "13 10 11 7\n", "output": "(10) + (11) = 21, left: 21, 13, 7\n(10) * (11) = 110, left: 110, 13, 7\n(13) - (11) = 2, left: 2, 10, 7\n(2) - (10) = -8, left: -8, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (13 - 11)))"}, {"input": "13 10 11 7\n", "output": "(13) - (11) = 2, left: 2, 10, 7\n(2) / (7) = 2/7, left: 2/7, 10\n(7) / (2) = 7/2, left: 7/2, 10\n(10) - (7/2) = 13/2, left: 13/2\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (13 - 11)))"}, {"input": "13 10 11 7\n", "output": "(13) + (7) = 20, left: 20, 10, 11\n(11) - (10) = 1, left: 1, 20\n(13) / (11) = 13/11, left: 13/11, 10, 7\n(11) - (13) = -2, left: -2, 10, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (11 - 13)))"}, {"input": "13 10 11 7\n", "output": "(7) - (13) = -6, left: -6, 10, 11\n(10) * (-6) = -60, left: -60, 11\n(10) / (13) = 10/13, left: 10/13, 11, 7\n(13) - (11) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (13 - 11)))"}, {"input": "13 10 11 7\n", "output": "(10) + (11) = 21, left: 21, 13, 7\n(11) / (10) = 11/10, left: 11/10, 13, 7\n(13) + (11/10) = 141/10, left: 141/10, 7\n(7) * (141/10) = 987/10, left: 987/10\n(11/10) / (7) = 11/70, left: 11/70, 13\n(10) / (11) = 10/11, left: 10/11, 13, 7\n(13) - (11) = 2, left: 2, 10, 7\n(7) - (2) = 5, left: 5, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (13 - 11)))"}, {"input": "13 10 11 7\n", "output": "(10) * (7) = 70, left: 70, 13, 11\n(11) / (13) = 11/13, left: 11/13, 70\n(7) - (10) = -3, left: -3, 13, 11\n(10) + (7) = 17, left: 17, 13, 11\n(10) - (13) = -3, left: -3, 11, 7\n(11) + (-3) = 8, left: 8, 7\n(13) - (10) = 3, left: 3, 11, 7\n(11) - (13) = -2, left: -2, 10, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (11 - 13)))"}, {"input": "13 10 11 7\n", "output": "(10) - (13) = -3, left: -3, 11, 7\n(13) / (10) = 13/10, left: 13/10, 11, 7\n(13/10) / (7) = 13/70, left: 13/70, 11\n(7) - (13) = -6, left: -6, 10, 11\n(11) - (10) = 1, left: 1, -6\n(13) + (7) = 20, left: 20, 10, 11\n(13) * (11) = 143, left: 143, 10, 7\n(11) - (13) = -2, left: -2, 10, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (11 - 13)))"}, {"input": "13 10 11 7\n", "output": "(13) - (11) = 2, left: 2, 10, 7\n(7) - (2) = 5, left: 5, 10\n(2) - (7) = -5, left: -5, 10\n(-5) / (10) = -1/2, left: -1/2\n(2) / (7) = 2/7, left: 2/7, 10\n(10) + (2/7) = 72/7, left: 72/7\n(7) / (2) = 7/2, left: 7/2, 10\n(7/2) / (10) = 7/20, left: 7/20\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (13 - 11)))"}, {"input": "13 10 11 7\n", "output": "(10) - (11) = -1, left: -1, 13, 7\n(7) - (13) = -6, left: -6, 10, 11\n(7) / (13) = 7/13, left: 7/13, 10, 11\n(10) * (11) = 110, left: 110, 7/13\n(10) + (7) = 17, left: 17, 13, 11\n(17) - (13) = 4, left: 4, 11\n(13) * (17) = 221, left: 221, 11\n(13) - (11) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (13 - 11)))"}, {"input": "5 6 6 12\n", "output": "(6) * (6) = 36, left: 36, 5, 12\n(5) / (36) = 5/36, left: 5/36, 12\n(5) * (36) = 180, left: 180, 12\n(5) - (12) = -7, left: -7, 36\n(5) * (12) = 60, left: 60, 36\n(60) - (36) = 24, left: 24\nreach 24! expression: ((5 * 12) - (6 * 6))"}, {"input": "5 6 6 12\n", "output": "(6) * (6) = 36, left: 36, 5, 12\n(5) / (36) = 5/36, left: 5/36, 12\n(12) / (5/36) = 432/5, left: 432/5\n(5) + (36) = 41, left: 41, 12\n(41) / (12) = 41/12, left: 41/12\n(12) - (41) = -29, left: -29\n(5) + (12) = 17, left: 17, 36\n(5) * (12) = 60, left: 60, 36\n(60) / (36) = 5/3, left: 5/3\n(60) - (36) = 24, left: 24\nreach 24! expression: ((5 * 12) - (6 * 6))"}, {"input": "5 6 6 12\n", "output": "(6) - (12) = -6, left: -6, 5, 6\n(-6) - (6) = -12, left: -12, 5\n(-6) / (6) = -1, left: -1, 5\n(5) * (-1) = -5, left: -5\n(6) - (5) = 1, left: 1, -6\n(1) - (-6) = 7, left: 7\n(6) / (5) = 6/5, left: 6/5, -6\n(5) + (6) = 11, left: 11, -6\n(5) * (6) = 30, left: 30, -6\n(-6) + (30) = 24, left: 24\nreach 24! expression: ((6 - 12) + (5 * 6))"}, {"input": "5 6 6 12\n", "output": "(12) - (5) = 7, left: 7, 6, 6\n(6) * (7) = 42, left: 42, 6\n(5) + (12) = 17, left: 17, 6, 6\n(6) / (6) = 1, left: 1, 17\n(5) - (12) = -7, left: -7, 6, 6\n(6) * (6) = 36, left: 36, -7\n(6) - (-7) = 13, left: 13, 6\n(5) * (12) = 60, left: 60, 6, 6\n(6) * (6) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((5 * 12) - (6 * 6))"}, {"input": "5 6 6 12\n", "output": "(6) / (6) = 1, left: 1, 5, 12\n(5) * (12) = 60, left: 60, 1\n(1) - (5) = -4, left: -4, 12\n(12) - (-4) = 16, left: 16\n(12) + (-4) = 8, left: 8\n(6) * (6) = 36, left: 36, 5, 12\n(12) - (36) = -24, left: -24, 5\n(5) / (12) = 5/12, left: 5/12, 36\n(5) * (12) = 60, left: 60, 36\n(60) - (36) = 24, left: 24\nreach 24! expression: ((5 * 12) - (6 * 6))"}, {"input": "5 6 6 12\n", "output": "(6) + (12) = 18, left: 18, 5, 6\n(5) / (6) = 5/6, left: 5/6, 18\n(12) / (6) = 2, left: 2, 5, 6\n(6) / (12) = 1/2, left: 1/2, 5, 6\n(5) * (1/2) = 5/2, left: 5/2, 6\n(6) * (12) = 72, left: 72, 5, 6\n(5) / (6) = 5/6, left: 5/6, 72\n(6) - (12) = -6, left: -6, 5, 6\n(5) * (6) = 30, left: 30, -6\n(-6) + (30) = 24, left: 24\nreach 24! expression: ((6 - 12) + (5 * 6))"}, {"input": "12 13 6 3\n", "output": "(13) / (12) = 13/12, left: 13/12, 6, 3\n(13/12) - (6) = -59/12, left: -59/12, 3\n(13) - (12) = 1, left: 1, 6, 3\n(3) - (6) = -3, left: -3, 1\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (13 - 12)))"}, {"input": "12 13 6 3\n", "output": "(13) * (3) = 39, left: 39, 12, 6\n(6) - (12) = -6, left: -6, 39\n(39) + (-6) = 33, left: 33\n(13) + (3) = 16, left: 16, 12, 6\n(16) - (12) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 + 3) - 12))"}, {"input": "12 13 6 3\n", "output": "(12) * (13) = 156, left: 156, 6, 3\n(6) * (156) = 936, left: 936, 3\n(6) - (3) = 3, left: 3, 156\n(12) - (13) = -1, left: -1, 6, 3\n(3) - (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (12 - 13)))"}, {"input": "12 13 6 3\n", "output": "(13) + (3) = 16, left: 16, 12, 6\n(12) - (16) = -4, left: -4, 6\n(-4) - (6) = -10, left: -10\n(12) + (16) = 28, left: 28, 6\n(16) - (12) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 + 3) - 12))"}, {"input": "12 13 6 3\n", "output": "(6) - (12) = -6, left: -6, 13, 3\n(3) * (-6) = -18, left: -18, 13\n(12) * (6) = 72, left: 72, 13, 3\n(72) - (13) = 59, left: 59, 3\n(12) + (6) = 18, left: 18, 13, 3\n(18) / (3) = 6, left: 6, 13\n(12) - (6) = 6, left: 6, 13, 3\n(12) - (3) = 9, left: 9, 13, 6\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (12 - 3)))"}, {"input": "12 13 6 3\n", "output": "(12) * (13) = 156, left: 156, 6, 3\n(6) + (156) = 162, left: 162, 3\n(6) - (3) = 3, left: 3, 156\n(6) + (3) = 9, left: 9, 156\n(12) - (13) = -1, left: -1, 6, 3\n(3) / (6) = 1/2, left: 1/2, -1\n(-1) * (1/2) = -1/2, left: -1/2\n(3) * (-1) = -3, left: -3, 6\n(3) - (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (12 - 13)))"}, {"input": "12 13 6 3\n", "output": "(13) * (3) = 39, left: 39, 12, 6\n(39) - (6) = 33, left: 33, 12\n(3) / (13) = 3/13, left: 3/13, 12, 6\n(3/13) / (12) = 1/52, left: 1/52, 6\n(13) + (3) = 16, left: 16, 12, 6\n(6) / (16) = 3/8, left: 3/8, 12\n(12) / (3/8) = 32, left: 32\n(16) - (12) = 4, left: 4, 6\n(6) + (4) = 10, left: 10\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 + 3) - 12))"}, {"input": "12 13 6 3\n", "output": "(13) / (12) = 13/12, left: 13/12, 6, 3\n(3) * (13/12) = 13/4, left: 13/4, 6\n(6) + (13/4) = 37/4, left: 37/4\n(6) * (3) = 18, left: 18, 13/12\n(6) - (3) = 3, left: 3, 13/12\n(3) / (6) = 1/2, left: 1/2, 13/12\n(13) - (12) = 1, left: 1, 6, 3\n(1) - (6) = -5, left: -5, 3\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (13 - 12)))"}, {"input": "12 13 6 3\n", "output": "(13) + (3) = 16, left: 16, 12, 6\n(12) - (16) = -4, left: -4, 6\n(6) + (-4) = 2, left: 2\n(6) * (-4) = -24, left: -24\n(6) - (-4) = 10, left: 10\n(12) + (16) = 28, left: 28, 6\n(6) / (28) = 3/14, left: 3/14\n(28) / (6) = 14/3, left: 14/3\n(16) - (12) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 + 3) - 12))"}, {"input": "11 8 1 9\n", "output": "(8) * (1) = 8, left: 8, 11, 9\n(9) / (11) = 9/11, left: 9/11, 8\n(1) - (8) = -7, left: -7, 11, 9\n(1) / (8) = 1/8, left: 1/8, 11, 9\n(11) / (1/8) = 88, left: 88, 9\n(8) / (1) = 8, left: 8, 11, 9\n(8) - (1) = 7, left: 7, 11, 9\n(11) / (8) = 11/8, left: 11/8, 1, 9\n(11/8) - (1) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: (9 / ((11 / 8) - 1))"}, {"input": "11 8 1 9\n", "output": "(9) - (8) = 1, left: 1, 11, 1\n(8) - (9) = -1, left: -1, 11, 1\n(1) - (-1) = 2, left: 2, 11\n(11) / (-1) = -11, left: -11, 1\n(8) + (9) = 17, left: 17, 11, 1\n(17) / (1) = 17, left: 17, 11\n(11) * (17) = 187, left: 187\n(11) - (9) = 2, left: 2, 8, 1\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (11 - 9)))"}, {"input": "11 8 1 9\n", "output": "(1) / (9) = 1/9, left: 1/9, 11, 8\n(1) * (9) = 9, left: 9, 11, 8\n(11) / (9) = 11/9, left: 11/9, 8\n(9) / (1) = 9, left: 9, 11, 8\n(8) * (9) = 72, left: 72, 11\n(11) + (8) = 19, left: 19, 9\n(1) + (9) = 10, left: 10, 11, 8\n(9) - (1) = 8, left: 8, 11, 8\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (11 - (9 - 1)))"}, {"input": "11 8 1 9\n", "output": "(8) + (9) = 17, left: 17, 11, 1\n(17) - (11) = 6, left: 6, 1\n(8) - (9) = -1, left: -1, 11, 1\n(11) * (-1) = -11, left: -11, 1\n(8) * (9) = 72, left: 72, 11, 1\n(9) / (8) = 9/8, left: 9/8, 11, 1\n(1) - (11) = -10, left: -10, 9/8\n(9) - (11) = -2, left: -2, 8, 1\n(1) - (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 - (9 - 11)))"}, {"input": "11 8 1 9\n", "output": "(11) + (1) = 12, left: 12, 8, 9\n(8) + (12) = 20, left: 20, 9\n(9) + (20) = 29, left: 29\n(8) * (12) = 96, left: 96, 9\n(8) / (12) = 2/3, left: 2/3, 9\n(9) / (2/3) = 27/2, left: 27/2\n(9) * (2/3) = 6, left: 6\n(9) / (12) = 3/4, left: 3/4, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 + 1) - 9))"}, {"input": "11 8 1 9\n", "output": "(8) / (9) = 8/9, left: 8/9, 11, 1\n(1) * (8/9) = 8/9, left: 8/9, 11\n(11) * (8/9) = 88/9, left: 88/9\n(8) + (9) = 17, left: 17, 11, 1\n(1) - (17) = -16, left: -16, 11\n(1) + (17) = 18, left: 18, 11\n(8) - (9) = -1, left: -1, 11, 1\n(8) * (9) = 72, left: 72, 11, 1\n(9) - (8) = 1, left: 1, 11, 1\n(1) - (1) = 0, left: 0, 11\n(9) / (8) = 9/8, left: 9/8, 11, 1\n(9) - (11) = -2, left: -2, 8, 1\n(1) - (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 - (9 - 11)))"}, {"input": "11 8 1 9\n", "output": "(9) / (8) = 9/8, left: 9/8, 11, 1\n(9) - (8) = 1, left: 1, 11, 1\n(1) - (1) = 0, left: 0, 11\n(8) * (9) = 72, left: 72, 11, 1\n(1) * (72) = 72, left: 72, 11\n(8) - (9) = -1, left: -1, 11, 1\n(-1) - (11) = -12, left: -12, 1\n(8) + (9) = 17, left: 17, 11, 1\n(1) / (17) = 1/17, left: 1/17, 11\n(1/17) / (11) = 1/187, left: 1/187\n(8) / (9) = 8/9, left: 8/9, 11, 1\n(11) - (9) = 2, left: 2, 8, 1\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (11 - 9)))"}, {"input": "6 7 6 5\n", "output": "(7) + (6) = 13, left: 13, 6, 5\n(13) / (6) = 13/6, left: 13/6, 5\n(6) / (13) = 6/13, left: 6/13, 5\n(5) / (6/13) = 65/6, left: 65/6\n(6) + (13) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (6 + (7 + 6)))"}, {"input": "6 7 6 5\n", "output": "(7) + (5) = 12, left: 12, 6, 6\n(12) / (6) = 2, left: 2, 6\n(2) / (6) = 1/3, left: 1/3\n(6) - (2) = 4, left: 4\n(6) + (2) = 8, left: 8\n(6) * (2) = 12, left: 12\n(6) / (2) = 3, left: 3\n(2) - (6) = -4, left: -4\n(6) + (12) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 + (7 + 5)))"}, {"input": "6 7 6 5\n", "output": "(6) / (5) = 6/5, left: 6/5, 7, 6\n(7) / (6) = 7/6, left: 7/6, 6/5\n(7) + (6) = 13, left: 13, 6/5\n(5) - (6) = -1, left: -1, 7, 6\n(7) + (-1) = 6, left: 6, 6\n(6) - (5) = 1, left: 1, 7, 6\n(6) + (5) = 11, left: 11, 7, 6\n(11) / (7) = 11/7, left: 11/7, 6\n(11) - (7) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((6 + 5) - 7))"}, {"input": "6 7 6 5\n", "output": "(7) + (6) = 13, left: 13, 6, 5\n(13) / (6) = 13/6, left: 13/6, 5\n(13/6) / (5) = 13/30, left: 13/30\n(6) / (13) = 6/13, left: 6/13, 5\n(5) * (6/13) = 30/13, left: 30/13\n(5) + (6/13) = 71/13, left: 71/13\n(5) - (6/13) = 59/13, left: 59/13\n(5) / (6/13) = 65/6, left: 65/6\n(6) + (13) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (6 + (7 + 6)))"}, {"input": "6 7 6 5\n", "output": "(6) / (7) = 6/7, left: 6/7, 6, 5\n(6) + (6/7) = 48/7, left: 48/7, 5\n(6) - (5) = 1, left: 1, 6/7\n(5) / (6/7) = 35/6, left: 35/6, 6\n(5) + (6/7) = 41/7, left: 41/7, 6\n(6) - (41/7) = 1/7, left: 1/7\n(7) - (6) = 1, left: 1, 6, 5\n(1) / (5) = 1/5, left: 1/5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (7 - 6)))"}, {"input": "6 7 6 5\n", "output": "(6) - (5) = 1, left: 1, 7, 6\n(7) * (6) = 42, left: 42, 1\n(7) - (6) = 1, left: 1, 1\n(6) * (1) = 6, left: 6, 7\n(7) + (1) = 8, left: 8, 6\n(6) + (8) = 14, left: 14\n(7) / (1) = 7, left: 7, 6\n(6) + (5) = 11, left: 11, 7, 6\n(6) + (11) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (6 + (6 + 5)))"}, {"input": "6 7 6 5\n", "output": "(7) + (5) = 12, left: 12, 6, 6\n(12) / (6) = 2, left: 2, 6\n(2) / (6) = 1/3, left: 1/3\n(6) - (2) = 4, left: 4\n(6) + (2) = 8, left: 8\n(6) * (2) = 12, left: 12\n(6) / (2) = 3, left: 3\n(2) - (6) = -4, left: -4\n(6) + (12) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 + (7 + 5)))"}, {"input": "6 7 6 5\n", "output": "(6) - (5) = 1, left: 1, 7, 6\n(7) * (6) = 42, left: 42, 1\n(6) - (7) = -1, left: -1, 1\n(1) - (6) = -5, left: -5, 7\n(-5) - (7) = -12, left: -12\n(6) * (1) = 6, left: 6, 7\n(6) + (1) = 7, left: 7, 7\n(1) - (7) = -6, left: -6, 6\n(6) + (5) = 11, left: 11, 7, 6\n(6) * (11) = 66, left: 66, 7\n(11) - (6) = 5, left: 5, 7\n(7) + (5) = 12, left: 12\n(6) + (11) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (6 + (6 + 5)))"}, {"input": "6 7 6 5\n", "output": "(6) / (5) = 6/5, left: 6/5, 7, 6\n(7) - (6) = 1, left: 1, 6/5\n(6/5) / (7) = 6/35, left: 6/35, 6\n(7) + (6/5) = 41/5, left: 41/5, 6\n(5) - (6) = -1, left: -1, 7, 6\n(7) - (-1) = 8, left: 8, 6\n(6) * (5) = 30, left: 30, 7, 6\n(6) - (30) = -24, left: -24, 7\n(7) * (30) = 210, left: 210, 6\n(6) - (5) = 1, left: 1, 7, 6\n(6) / (7) = 6/7, left: 6/7, 1\n(6) + (5) = 11, left: 11, 7, 6\n(11) - (7) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((6 + 5) - 7))"}, {"input": "6 7 6 5\n", "output": "(7) + (5) = 12, left: 12, 6, 6\n(12) / (6) = 2, left: 2, 6\n(2) / (6) = 1/3, left: 1/3\n(6) - (2) = 4, left: 4\n(6) + (2) = 8, left: 8\n(6) * (2) = 12, left: 12\n(6) / (2) = 3, left: 3\n(2) - (6) = -4, left: -4\n(6) + (12) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 + (7 + 5)))"}, {"input": "2 12 8 13\n", "output": "(12) - (2) = 10, left: 10, 8, 13\n(8) - (13) = -5, left: -5, 10\n(8) + (13) = 21, left: 21, 10\n(21) - (10) = 11, left: 11\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (12 - 2)))"}, {"input": "2 12 8 13\n", "output": "(12) - (2) = 10, left: 10, 8, 13\n(13) * (10) = 130, left: 130, 8\n(130) / (8) = 65/4, left: 65/4\n(13) - (10) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (12 - 2)))"}, {"input": "2 12 8 13\n", "output": "(12) - (2) = 10, left: 10, 8, 13\n(13) * (10) = 130, left: 130, 8\n(130) - (8) = 122, left: 122\n(130) / (8) = 65/4, left: 65/4\n(13) / (10) = 13/10, left: 13/10, 8\n(8) - (13/10) = 67/10, left: 67/10\n(10) - (13) = -3, left: -3, 8\n(-3) / (8) = -3/8, left: -3/8\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (12 - 2)))"}, {"input": "2 12 8 13\n", "output": "(2) - (8) = -6, left: -6, 12, 13\n(13) + (-6) = 7, left: 7, 12\n(2) * (8) = 16, left: 16, 12, 13\n(2) / (8) = 1/4, left: 1/4, 12, 13\n(8) + (13) = 21, left: 21, 2, 12\n(2) * (12) = 24, left: 24, 21\n(12) / (2) = 6, left: 6, 21\n(2) - (12) = -10, left: -10, 8, 13\n(13) + (-10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 + (2 - 12)))"}, {"input": "2 12 8 13\n", "output": "(12) / (8) = 3/2, left: 3/2, 2, 13\n(8) / (12) = 2/3, left: 2/3, 2, 13\n(2) * (2/3) = 4/3, left: 4/3, 13\n(12) + (8) = 20, left: 20, 2, 13\n(12) - (8) = 4, left: 4, 2, 13\n(2) / (4) = 1/2, left: 1/2, 13\n(12) - (13) = -1, left: -1, 2, 8\n(2) + (8) = 10, left: 10, -1\n(2) - (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 - (12 - 13)))"}, {"input": "2 12 8 13\n", "output": "(12) / (8) = 3/2, left: 3/2, 2, 13\n(13) / (3/2) = 26/3, left: 26/3, 2\n(12) - (8) = 4, left: 4, 2, 13\n(8) / (12) = 2/3, left: 2/3, 2, 13\n(2) - (2/3) = 4/3, left: 4/3, 13\n(12) + (8) = 20, left: 20, 2, 13\n(12) + (13) = 25, left: 25, 2, 8\n(12) - (13) = -1, left: -1, 2, 8\n(2) - (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 - (12 - 13)))"}, {"input": "2 12 8 13\n", "output": "(12) - (2) = 10, left: 10, 8, 13\n(8) - (13) = -5, left: -5, 10\n(8) + (13) = 21, left: 21, 10\n(10) / (8) = 5/4, left: 5/4, 13\n(8) / (10) = 4/5, left: 4/5, 13\n(10) / (13) = 10/13, left: 10/13, 8\n(13) + (10) = 23, left: 23, 8\n(23) - (8) = 15, left: 15\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (12 - 2)))"}, {"input": "2 12 12 8\n", "output": "(12) * (12) = 144, left: 144, 2, 8\n(144) - (8) = 136, left: 136, 2\n(8) + (144) = 152, left: 152, 2\n(2) * (8) = 16, left: 16, 144\n(8) - (2) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (8 - 2))"}, {"input": "2 12 12 8\n", "output": "(12) / (8) = 3/2, left: 3/2, 2, 12\n(12) / (3/2) = 8, left: 8, 2\n(3/2) / (12) = 1/8, left: 1/8, 2\n(2) * (3/2) = 3, left: 3, 12\n(2) - (3/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 - (12 / 8)))"}, {"input": "2 12 12 8\n", "output": "(12) * (8) = 96, left: 96, 2, 12\n(12) / (2) = 6, left: 6, 96\n(96) / (2) = 48, left: 48, 12\n(12) / (8) = 3/2, left: 3/2, 2, 12\n(2) - (3/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 - (12 / 8)))"}, {"input": "2 12 12 8\n", "output": "(12) * (12) = 144, left: 144, 2, 8\n(8) / (144) = 1/18, left: 1/18, 2\n(2) * (1/18) = 1/9, left: 1/9\n(8) - (144) = -136, left: -136, 2\n(2) - (8) = -6, left: -6, 144\n(144) - (-6) = 150, left: 150\n(2) * (8) = 16, left: 16, 144\n(2) + (8) = 10, left: 10, 144\n(8) - (2) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (8 - 2))"}, {"input": "2 12 12 8\n", "output": "(8) - (12) = -4, left: -4, 2, 12\n(12) + (8) = 20, left: 20, 2, 12\n(2) * (12) = 24, left: 24, 20\n(8) / (12) = 2/3, left: 2/3, 2, 12\n(12) + (2/3) = 38/3, left: 38/3, 2\n(2) / (38/3) = 3/19, left: 3/19\n(2/3) - (12) = -34/3, left: -34/3, 2\n(12) - (8) = 4, left: 4, 2, 12\n(2) / (4) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 / (12 - 8)))"}, {"input": "2 12 12 8\n", "output": "(8) / (12) = 2/3, left: 2/3, 2, 12\n(2) / (2/3) = 3, left: 3, 12\n(3) - (12) = -9, left: -9\n(12) * (8) = 96, left: 96, 2, 12\n(12) + (96) = 108, left: 108, 2\n(12) / (8) = 3/2, left: 3/2, 2, 12\n(12) / (3/2) = 8, left: 8, 2\n(2) / (3/2) = 4/3, left: 4/3, 12\n(2) - (3/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 - (12 / 8)))"}, {"input": "2 12 12 8\n", "output": "(8) - (12) = -4, left: -4, 2, 12\n(-4) - (12) = -16, left: -16, 2\n(2) - (12) = -10, left: -10, -4\n(12) * (8) = 96, left: 96, 2, 12\n(2) - (12) = -10, left: -10, 96\n(2) / (12) = 1/6, left: 1/6, 96\n(12) - (2) = 10, left: 10, 96\n(12) - (8) = 4, left: 4, 2, 12\n(12) * (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * (12 - 8)) / 2)"}, {"input": "2 12 12 8\n", "output": "(12) / (8) = 3/2, left: 3/2, 2, 12\n(12) / (3/2) = 8, left: 8, 2\n(12) - (3/2) = 21/2, left: 21/2, 2\n(3/2) / (12) = 1/8, left: 1/8, 2\n(3/2) - (12) = -21/2, left: -21/2, 2\n(2) * (3/2) = 3, left: 3, 12\n(12) * (3) = 36, left: 36\n(2) + (3/2) = 7/2, left: 7/2, 12\n(2) - (3/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 - (12 / 8)))"}, {"input": "9 12 7 3\n", "output": "(12) + (3) = 15, left: 15, 9, 7\n(12) / (3) = 4, left: 4, 9, 7\n(3) / (12) = 1/4, left: 1/4, 9, 7\n(7) / (1/4) = 28, left: 28, 9\n(12) * (3) = 36, left: 36, 9, 7\n(12) * (7) = 84, left: 84, 9, 3\n(9) * (84) = 756, left: 756, 3\n(12) - (7) = 5, left: 5, 9, 3\n(3) * (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (3 * (12 - 7)))"}, {"input": "9 12 7 3\n", "output": "(9) * (3) = 27, left: 27, 12, 7\n(3) - (9) = -6, left: -6, 12, 7\n(12) * (-6) = -72, left: -72, 7\n(9) / (3) = 3, left: 3, 12, 7\n(3) - (7) = -4, left: -4, 12\n(12) / (7) = 12/7, left: 12/7, 3\n(3) / (9) = 1/3, left: 1/3, 12, 7\n(9) - (12) = -3, left: -3, 7, 3\n(7) * (3) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((7 * 3) - (9 - 12))"}, {"input": "9 12 7 3\n", "output": "(12) + (7) = 19, left: 19, 9, 3\n(3) - (9) = -6, left: -6, 19\n(3) * (19) = 57, left: 57, 9\n(19) / (3) = 19/3, left: 19/3, 9\n(9) - (19) = -10, left: -10, 3\n(7) - (12) = -5, left: -5, 9, 3\n(9) - (-5) = 14, left: 14, 3\n(3) / (14) = 3/14, left: 3/14\n(3) * (-5) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (3 * (7 - 12)))"}, {"input": "9 12 7 3\n", "output": "(3) / (7) = 3/7, left: 3/7, 9, 12\n(7) / (3) = 7/3, left: 7/3, 9, 12\n(9) - (12) = -3, left: -3, 7/3\n(9) * (7/3) = 21, left: 21, 12\n(12) - (21) = -9, left: -9\n(7/3) / (9) = 7/27, left: 7/27, 12\n(7/3) - (9) = -20/3, left: -20/3, 12\n(7) - (3) = 4, left: 4, 9, 12\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (7 - 3)) - 12)"}, {"input": "9 12 7 3\n", "output": "(9) - (7) = 2, left: 2, 12, 3\n(12) + (3) = 15, left: 15, 9, 7\n(3) - (12) = -9, left: -9, 9, 7\n(-9) - (7) = -16, left: -16, 9\n(12) * (3) = 36, left: 36, 9, 7\n(12) - (3) = 9, left: 9, 9, 7\n(9) / (9) = 1, left: 1, 7\n(9) - (12) = -3, left: -3, 7, 3\n(7) * (3) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((7 * 3) - (9 - 12))"}, {"input": "9 12 7 3\n", "output": "(9) - (7) = 2, left: 2, 12, 3\n(9) / (7) = 9/7, left: 9/7, 12, 3\n(9) * (7) = 63, left: 63, 12, 3\n(7) - (9) = -2, left: -2, 12, 3\n(3) * (-2) = -6, left: -6, 12\n(12) / (3) = 4, left: 4, 9, 7\n(12) + (3) = 15, left: 15, 9, 7\n(3) / (12) = 1/4, left: 1/4, 9, 7\n(12) * (3) = 36, left: 36, 9, 7\n(7) * (36) = 252, left: 252, 9\n(12) - (3) = 9, left: 9, 9, 7\n(9) - (12) = -3, left: -3, 7, 3\n(7) * (3) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((7 * 3) - (9 - 12))"}, {"input": "1 3 4 13\n", "output": "(3) * (4) = 12, left: 12, 1, 13\n(1) / (13) = 1/13, left: 1/13, 12\n(1/13) - (12) = -155/13, left: -155/13\n(12) * (1/13) = 12/13, left: 12/13\n(13) - (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((3 * 4) + (13 - 1))"}, {"input": "1 3 4 13\n", "output": "(3) * (4) = 12, left: 12, 1, 13\n(1) - (13) = -12, left: -12, 12\n(12) + (-12) = 0, left: 0\n(-12) - (12) = -24, left: -24\n(-12) / (12) = -1, left: -1\n(12) - (-12) = 24, left: 24\nreach 24! expression: ((3 * 4) - (1 - 13))"}, {"input": "1 3 4 13\n", "output": "(1) - (13) = -12, left: -12, 3, 4\n(4) - (3) = 1, left: 1, -12\n(3) + (4) = 7, left: 7, -12\n(-12) - (7) = -19, left: -19\n(3) * (4) = 12, left: 12, -12\n(12) - (-12) = 24, left: 24\nreach 24! expression: ((3 * 4) - (1 - 13))"}, {"input": "1 3 4 13\n", "output": "(13) / (4) = 13/4, left: 13/4, 1, 3\n(13/4) / (1) = 13/4, left: 13/4, 3\n(13/4) / (3) = 13/12, left: 13/12, 1\n(4) + (13) = 17, left: 17, 1, 3\n(13) - (4) = 9, left: 9, 1, 3\n(3) / (9) = 1/3, left: 1/3, 1\n(1/3) / (1) = 1/3, left: 1/3\n(3) * (9) = 27, left: 27, 1\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((13 - 4) - 1))"}, {"input": "1 3 4 13\n", "output": "(3) * (4) = 12, left: 12, 1, 13\n(1) - (13) = -12, left: -12, 12\n(12) + (-12) = 0, left: 0\n(-12) - (12) = -24, left: -24\n(12) / (-12) = -1, left: -1\n(-12) / (12) = -1, left: -1\n(12) - (-12) = 24, left: 24\nreach 24! expression: ((3 * 4) - (1 - 13))"}, {"input": "1 3 4 13\n", "output": "(1) - (13) = -12, left: -12, 3, 4\n(4) - (3) = 1, left: 1, -12\n(-12) + (1) = -11, left: -11\n(-12) * (1) = -12, left: -12\n(3) + (4) = 7, left: 7, -12\n(-12) + (7) = -5, left: -5\n(7) - (-12) = 19, left: 19\n(3) * (4) = 12, left: 12, -12\n(12) / (-12) = -1, left: -1\n(12) - (-12) = 24, left: 24\nreach 24! expression: ((3 * 4) - (1 - 13))"}, {"input": "1 3 4 13\n", "output": "(1) / (4) = 1/4, left: 1/4, 3, 13\n(3) / (13) = 3/13, left: 3/13, 1/4\n(4) - (1) = 3, left: 3, 3, 13\n(3) / (13) = 3/13, left: 3/13, 3\n(1) - (4) = -3, left: -3, 3, 13\n(4) / (1) = 4, left: 4, 3, 13\n(4) / (3) = 4/3, left: 4/3, 13\n(1) + (4) = 5, left: 5, 3, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 - (1 + 4)))"}, {"input": "1 3 4 13\n", "output": "(3) * (4) = 12, left: 12, 1, 13\n(1) / (13) = 1/13, left: 1/13, 12\n(1/13) / (12) = 1/156, left: 1/156\n(12) / (1/13) = 156, left: 156\n(12) + (1/13) = 157/13, left: 157/13\n(12) * (1/13) = 12/13, left: 12/13\n(13) - (1) = 12, left: 12, 12\n(12) - (12) = 0, left: 0\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: ((3 * 4) + (13 - 1))"}, {"input": "1 3 4 13\n", "output": "(3) * (4) = 12, left: 12, 1, 13\n(1) - (13) = -12, left: -12, 12\n(12) + (-12) = 0, left: 0\n(-12) - (12) = -24, left: -24\n(12) / (-12) = -1, left: -1\n(-12) / (12) = -1, left: -1\n(12) - (-12) = 24, left: 24\nreach 24! expression: ((3 * 4) - (1 - 13))"}, {"input": "1 3 4 13\n", "output": "(3) * (4) = 12, left: 12, 1, 13\n(1) - (13) = -12, left: -12, 12\n(12) + (-12) = 0, left: 0\n(-12) - (12) = -24, left: -24\n(12) / (-12) = -1, left: -1\n(-12) / (12) = -1, left: -1\n(12) - (-12) = 24, left: 24\nreach 24! expression: ((3 * 4) - (1 - 13))"}, {"input": "10 6 6 6\n", "output": "(10) * (6) = 60, left: 60, 6, 6\n(6) * (60) = 360, left: 360, 6\n(60) / (6) = 10, left: 10, 6\n(10) / (6) = 5/3, left: 5/3\n(6) * (6) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "10 6 6 6\n", "output": "(6) * (6) = 36, left: 36, 10, 6\n(6) + (36) = 42, left: 42, 10\n(10) + (36) = 46, left: 46, 6\n(36) / (10) = 18/5, left: 18/5, 6\n(10) * (6) = 60, left: 60, 36\n(60) - (36) = 24, left: 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "10 6 6 6\n", "output": "(10) * (6) = 60, left: 60, 6, 6\n(60) / (6) = 10, left: 10, 6\n(6) * (10) = 60, left: 60\n(6) / (60) = 1/10, left: 1/10, 6\n(60) - (6) = 54, left: 54, 6\n(6) / (54) = 1/9, left: 1/9\n(6) / (60) = 1/10, left: 1/10, 6\n(6) * (60) = 360, left: 360, 6\n(6) * (6) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "10 6 6 6\n", "output": "(6) / (6) = 1, left: 1, 10, 6\n(6) / (10) = 3/5, left: 3/5, 1\n(6) + (6) = 12, left: 12, 10, 6\n(6) - (10) = -4, left: -4, 12\n(6) - (6) = 0, left: 0, 10, 6\n(10) * (6) = 60, left: 60, 0\n(6) * (6) = 36, left: 36, 10, 6\n(36) - (6) = 30, left: 30, 10\n(10) * (6) = 60, left: 60, 36\n(60) - (36) = 24, left: 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "10 6 6 6\n", "output": "(6) - (6) = 0, left: 0, 10, 6\n(6) * (0) = 0, left: 0, 10\n(0) / (10) = 0, left: 0, 6\n(10) + (0) = 10, left: 10, 6\n(10) - (6) = 4, left: 4\n(6) * (6) = 36, left: 36, 10, 6\n(10) - (6) = 4, left: 4, 36\n(36) * (4) = 144, left: 144\n(10) * (6) = 60, left: 60, 36\n(60) - (36) = 24, left: 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "10 6 6 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 6, 6\n(3/5) / (6) = 1/10, left: 1/10, 6\n(10) / (6) = 5/3, left: 5/3, 6, 6\n(10) - (6) = 4, left: 4, 6, 6\n(6) * (6) = 36, left: 36, 4\n(4) / (36) = 1/9, left: 1/9\n(10) * (6) = 60, left: 60, 6, 6\n(6) / (6) = 1, left: 1, 60\n(6) * (6) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "10 6 6 6\n", "output": "(6) * (6) = 36, left: 36, 10, 6\n(36) / (6) = 6, left: 6, 10\n(10) + (6) = 16, left: 16\n(6) * (36) = 216, left: 216, 10\n(10) * (216) = 2160, left: 2160\n(6) / (36) = 1/6, left: 1/6, 10\n(10) + (36) = 46, left: 46, 6\n(36) / (10) = 18/5, left: 18/5, 6\n(10) * (6) = 60, left: 60, 36\n(60) - (36) = 24, left: 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "3 2 13 2\n", "output": "(2) - (13) = -11, left: -11, 3, 2\n(-11) / (2) = -11/2, left: -11/2, 3\n(3) - (-11/2) = 17/2, left: 17/2\n(13) + (2) = 15, left: 15, 3, 2\n(15) - (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((13 + 2) - 3))"}, {"input": "3 2 13 2\n", "output": "(2) - (13) = -11, left: -11, 3, 2\n(2) + (-11) = -9, left: -9, 3\n(13) * (2) = 26, left: 26, 3, 2\n(26) - (2) = 24, left: 24, 3\n(3) / (24) = 1/8, left: 1/8\n(13) - (2) = 11, left: 11, 3, 2\n(3) - (2) = 1, left: 1, 11\n(13) + (2) = 15, left: 15, 3, 2\n(15) - (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((13 + 2) - 3))"}, {"input": "3 2 13 2\n", "output": "(2) - (3) = -1, left: -1, 2, 13\n(13) - (-1) = 14, left: 14, 2\n(2) * (14) = 28, left: 28\n(14) - (2) = 12, left: 12\n(-1) - (13) = -14, left: -14, 2\n(2) * (-14) = -28, left: -28\n(13) * (-1) = -13, left: -13, 2\n(2) - (-13) = 15, left: 15\n(13) + (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 + (2 - 3)))"}, {"input": "3 2 13 2\n", "output": "(3) * (2) = 6, left: 6, 2, 13\n(2) - (13) = -11, left: -11, 6\n(-11) / (6) = -11/6, left: -11/6\n(2) / (3) = 2/3, left: 2/3, 2, 13\n(13) + (2/3) = 41/3, left: 41/3, 2\n(2) - (3) = -1, left: -1, 2, 13\n(-1) / (13) = -1/13, left: -1/13, 2\n(13) - (-1) = 14, left: 14, 2\n(13) + (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 + (2 - 3)))"}, {"input": "3 2 13 2\n", "output": "(3) - (2) = 1, left: 1, 13, 2\n(1) / (2) = 1/2, left: 1/2, 13\n(2) - (1) = 1, left: 1, 13\n(1) - (13) = -12, left: -12\n(1) - (2) = -1, left: -1, 13\n(2) + (1) = 3, left: 3, 13\n(13) * (2) = 26, left: 26, 1\n(13) - (2) = 11, left: 11, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (3 - 2)))"}, {"input": "11 13 6 5\n", "output": "(5) / (6) = 5/6, left: 5/6, 11, 13\n(6) * (5) = 30, left: 30, 11, 13\n(13) / (11) = 13/11, left: 13/11, 30\n(6) - (5) = 1, left: 1, 11, 13\n(13) * (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 * (6 - 5)))"}, {"input": "11 13 6 5\n", "output": "(6) * (5) = 30, left: 30, 11, 13\n(30) / (11) = 30/11, left: 30/11, 13\n(13) * (30/11) = 390/11, left: 390/11\n(6) - (5) = 1, left: 1, 11, 13\n(11) / (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (11 / (6 - 5)))"}, {"input": "11 13 6 5\n", "output": "(13) + (5) = 18, left: 18, 11, 6\n(5) / (13) = 5/13, left: 5/13, 11, 6\n(13) / (5) = 13/5, left: 13/5, 11, 6\n(13/5) - (6) = -17/5, left: -17/5, 11\n(11) * (-17/5) = -187/5, left: -187/5\n(11) * (5) = 55, left: 55, 13, 6\n(13) - (6) = 7, left: 7, 55\n(6) - (5) = 1, left: 1, 11, 13\n(11) + (13) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((11 + 13) / (6 - 5))"}, {"input": "11 13 6 5\n", "output": "(6) / (11) = 6/11, left: 6/11, 13, 5\n(11) / (6) = 11/6, left: 11/6, 13, 5\n(11/6) / (5) = 11/30, left: 11/30, 13\n(13) - (5) = 8, left: 8, 11/6\n(6) - (11) = -5, left: -5, 13, 5\n(6) + (5) = 11, left: 11, 11, 13\n(11) * (13) = 143, left: 143, 11\n(6) - (5) = 1, left: 1, 11, 13\n(11) / (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (11 / (6 - 5)))"}, {"input": "11 13 6 5\n", "output": "(6) + (5) = 11, left: 11, 11, 13\n(11) - (11) = 0, left: 0, 13\n(11) * (11) = 121, left: 121, 13\n(11) / (11) = 1, left: 1, 13\n(11) - (13) = -2, left: -2, 11\n(13) / (11) = 13/11, left: 13/11, 11\n(11) / (13) = 11/13, left: 11/13, 11\n(5) - (6) = -1, left: -1, 11, 13\n(11) / (-1) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (11 / (5 - 6)))"}, {"input": "11 13 6 5\n", "output": "(5) / (13) = 5/13, left: 5/13, 11, 6\n(11) - (5/13) = 138/13, left: 138/13, 6\n(13) + (5) = 18, left: 18, 11, 6\n(11) + (6) = 17, left: 17, 18\n(13) - (5) = 8, left: 8, 11, 6\n(5) - (13) = -8, left: -8, 11, 6\n(6) / (11) = 6/11, left: 6/11, -8\n(5) - (6) = -1, left: -1, 11, 13\n(13) / (-1) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (13 / (5 - 6)))"}, {"input": "11 13 6 5\n", "output": "(6) + (5) = 11, left: 11, 11, 13\n(11) / (11) = 1, left: 1, 13\n(11) / (13) = 11/13, left: 11/13, 11\n(5) / (6) = 5/6, left: 5/6, 11, 13\n(11) * (13) = 143, left: 143, 5/6\n(6) * (5) = 30, left: 30, 11, 13\n(13) / (30) = 13/30, left: 13/30, 11\n(6) - (5) = 1, left: 1, 11, 13\n(13) * (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 * (6 - 5)))"}, {"input": "5 10 11 7\n", "output": "(5) / (10) = 1/2, left: 1/2, 11, 7\n(11) * (1/2) = 11/2, left: 11/2, 7\n(5) + (10) = 15, left: 15, 11, 7\n(10) - (5) = 5, left: 5, 11, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "5 10 11 7\n", "output": "(5) * (7) = 35, left: 35, 10, 11\n(10) / (11) = 10/11, left: 10/11, 35\n(10) / (5) = 2, left: 2, 11, 7\n(10) - (5) = 5, left: 5, 11, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "5 10 11 7\n", "output": "(11) - (5) = 6, left: 6, 10, 7\n(10) + (7) = 17, left: 17, 5, 11\n(10) * (7) = 70, left: 70, 5, 11\n(5) - (7) = -2, left: -2, 10, 11\n(7) / (11) = 7/11, left: 7/11, 5, 10\n(11) * (7) = 77, left: 77, 5, 10\n(10) / (5) = 2, left: 2, 11, 7\n(10) - (5) = 5, left: 5, 11, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "5 10 11 7\n", "output": "(11) - (5) = 6, left: 6, 10, 7\n(5) + (11) = 16, left: 16, 10, 7\n(7) - (16) = -9, left: -9, 10\n(-9) - (10) = -19, left: -19\n(5) - (11) = -6, left: -6, 10, 7\n(-6) - (7) = -13, left: -13, 10\n(10) + (-6) = 4, left: 4, 7\n(10) - (5) = 5, left: 5, 11, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "5 10 11 7\n", "output": "(5) + (7) = 12, left: 12, 10, 11\n(7) / (5) = 7/5, left: 7/5, 10, 11\n(5) * (7) = 35, left: 35, 10, 11\n(10) - (11) = -1, left: -1, 35\n(35) - (-1) = 36, left: 36\n(5) + (10) = 15, left: 15, 11, 7\n(10) - (5) = 5, left: 5, 11, 7\n(5) / (7) = 5/7, left: 5/7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "5 10 11 7\n", "output": "(10) / (5) = 2, left: 2, 11, 7\n(5) + (10) = 15, left: 15, 11, 7\n(7) - (11) = -4, left: -4, 15\n(5) * (10) = 50, left: 50, 11, 7\n(50) - (7) = 43, left: 43, 11\n(11) / (7) = 11/7, left: 11/7, 50\n(10) - (5) = 5, left: 5, 11, 7\n(11) / (5) = 11/5, left: 11/5, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "5 10 11 7\n", "output": "(11) * (7) = 77, left: 77, 5, 10\n(10) + (11) = 21, left: 21, 5, 7\n(10) + (7) = 17, left: 17, 5, 11\n(7) / (10) = 7/10, left: 7/10, 5, 11\n(5) / (11) = 5/11, left: 5/11, 7/10\n(10) / (5) = 2, left: 2, 11, 7\n(5) - (10) = -5, left: -5, 11, 7\n(10) - (5) = 5, left: 5, 11, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "8 8 9 7\n", "output": "(8) / (7) = 8/7, left: 8/7, 8, 9\n(8) + (7) = 15, left: 15, 8, 9\n(9) / (15) = 3/5, left: 3/5, 8\n(7) - (8) = -1, left: -1, 8, 9\n(8) - (7) = 1, left: 1, 8, 9\n(8) - (1) = 7, left: 7, 9\n(9) * (7) = 63, left: 63, 8, 8\n(7) - (9) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (7 - 9)))"}, {"input": "8 8 9 7\n", "output": "(9) / (8) = 9/8, left: 9/8, 8, 7\n(9) - (8) = 1, left: 1, 8, 7\n(8) / (7) = 8/7, left: 8/7, 8, 9\n(8/7) - (9) = -55/7, left: -55/7, 8\n(7) - (8) = -1, left: -1, 8, 9\n(9) + (-1) = 8, left: 8, 8\n(9) - (8) = 1, left: 1, 8, 7\n(9) - (7) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (9 - 7)))"}, {"input": "8 8 9 7\n", "output": "(8) * (9) = 72, left: 72, 8, 7\n(7) / (72) = 7/72, left: 7/72, 8\n(8) + (7) = 15, left: 15, 8, 9\n(8) - (15) = -7, left: -7, 9\n(7) / (8) = 7/8, left: 7/8, 8, 9\n(9) + (7) = 16, left: 16, 8, 8\n(8) + (8) = 16, left: 16, 16\n(7) - (9) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (7 - 9)))"}, {"input": "8 8 9 7\n", "output": "(8) * (7) = 56, left: 56, 8, 9\n(8) - (7) = 1, left: 1, 8, 9\n(7) - (8) = -1, left: -1, 8, 9\n(8) + (7) = 15, left: 15, 8, 9\n(8) * (9) = 72, left: 72, 8, 7\n(8) + (9) = 17, left: 17, 8, 7\n(9) - (8) = 1, left: 1, 8, 7\n(9) - (7) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (9 - 7)))"}, {"input": "8 8 9 7\n", "output": "(8) / (7) = 8/7, left: 8/7, 8, 9\n(7) - (8) = -1, left: -1, 8, 9\n(8) / (8) = 1, left: 1, 9, 7\n(8) - (8) = 0, left: 0, 9, 7\n(8) / (9) = 8/9, left: 8/9, 8, 7\n(9) / (8) = 9/8, left: 9/8, 8, 7\n(7) * (9/8) = 63/8, left: 63/8, 8\n(7) - (9) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (7 - 9)))"}, {"input": "8 8 9 7\n", "output": "(8) * (7) = 56, left: 56, 8, 9\n(8) + (7) = 15, left: 15, 8, 9\n(8) - (9) = -1, left: -1, 15\n(8) - (7) = 1, left: 1, 8, 9\n(7) / (8) = 7/8, left: 7/8, 8, 9\n(7) / (9) = 7/9, left: 7/9, 8, 8\n(7/9) - (8) = -65/9, left: -65/9, 8\n(8) * (-65/9) = -520/9, left: -520/9\n(9) * (7) = 63, left: 63, 8, 8\n(8) - (8) = 0, left: 0, 63\n(8) / (8) = 1, left: 1, 63\n(7) - (9) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (7 - 9)))"}, {"input": "8 8 9 7\n", "output": "(8) * (8) = 64, left: 64, 9, 7\n(7) / (64) = 7/64, left: 7/64, 9\n(7) - (9) = -2, left: -2, 64\n(8) / (8) = 1, left: 1, 9, 7\n(8) - (8) = 0, left: 0, 9, 7\n(8) - (9) = -1, left: -1, 8, 7\n(7) / (-1) = -7, left: -7, 8\n(8) * (9) = 72, left: 72, 8, 7\n(7) - (8) = -1, left: -1, 8, 9\n(8) + (7) = 15, left: 15, 8, 9\n(15) / (9) = 5/3, left: 5/3, 8\n(7) - (9) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (7 - 9)))"}, {"input": "8 8 9 7\n", "output": "(8) + (9) = 17, left: 17, 8, 7\n(17) / (8) = 17/8, left: 17/8, 7\n(8) * (9) = 72, left: 72, 8, 7\n(8) - (8) = 0, left: 0, 9, 7\n(8) / (8) = 1, left: 1, 9, 7\n(9) * (1) = 9, left: 9, 7\n(1) - (9) = -8, left: -8, 7\n(8) / (7) = 8/7, left: 8/7, 8, 9\n(8) * (7) = 56, left: 56, 8, 9\n(8) - (9) = -1, left: -1, 56\n(9) + (7) = 16, left: 16, 8, 8\n(9) - (7) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (9 - 7)))"}, {"input": "8 8 9 7\n", "output": "(7) - (8) = -1, left: -1, 8, 9\n(8) + (7) = 15, left: 15, 8, 9\n(8) + (7) = 15, left: 15, 8, 9\n(9) * (15) = 135, left: 135, 8\n(8) + (8) = 16, left: 16, 9, 7\n(7) * (16) = 112, left: 112, 9\n(8) * (8) = 64, left: 64, 9, 7\n(9) - (8) = 1, left: 1, 8, 7\n(9) / (8) = 9/8, left: 9/8, 8, 7\n(8) - (9) = -1, left: -1, 8, 7\n(-1) / (7) = -1/7, left: -1/7, 8\n(7) - (9) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (7 - 9)))"}, {"input": "8 8 9 7\n", "output": "(8) + (7) = 15, left: 15, 8, 9\n(9) - (8) = 1, left: 1, 15\n(8) * (9) = 72, left: 72, 8, 7\n(7) - (8) = -1, left: -1, 8, 9\n(8) - (8) = 0, left: 0, 9, 7\n(8) - (8) = 0, left: 0, 9, 7\n(9) * (7) = 63, left: 63, 0\n(0) / (9) = 0, left: 0, 7\n(8) + (8) = 16, left: 16, 9, 7\n(9) + (7) = 16, left: 16, 16\n(9) * (7) = 63, left: 63, 16\n(9) - (7) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (9 - 7)))"}, {"input": "6 8 13 3\n", "output": "(3) - (8) = -5, left: -5, 6, 13\n(6) + (13) = 19, left: 19, -5\n(-5) + (19) = 14, left: 14\n(-5) / (19) = -5/19, left: -5/19\n(-5) * (19) = -95, left: -95\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((6 + 13) - (3 - 8))"}, {"input": "6 8 13 3\n", "output": "(6) + (8) = 14, left: 14, 13, 3\n(3) - (13) = -10, left: -10, 14\n(-10) - (14) = -24, left: -24\n(-10) / (14) = -5/7, left: -5/7\n(14) * (-10) = -140, left: -140\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((6 + 8) - (3 - 13))"}, {"input": "6 8 13 3\n", "output": "(6) + (8) = 14, left: 14, 13, 3\n(3) - (13) = -10, left: -10, 14\n(14) / (-10) = -7/5, left: -7/5\n(-10) - (14) = -24, left: -24\n(-10) / (14) = -5/7, left: -5/7\n(14) * (-10) = -140, left: -140\n(14) + (-10) = 4, left: 4\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((6 + 8) - (3 - 13))"}, {"input": "6 8 13 3\n", "output": "(6) / (13) = 6/13, left: 6/13, 8, 3\n(8) + (6/13) = 110/13, left: 110/13, 3\n(6/13) / (3) = 2/13, left: 2/13, 8\n(13) - (6) = 7, left: 7, 8, 3\n(3) - (7) = -4, left: -4, 8\n(6) * (13) = 78, left: 78, 8, 3\n(6) + (13) = 19, left: 19, 8, 3\n(3) / (19) = 3/19, left: 3/19, 8\n(3) - (19) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (3 - (6 + 13)))"}, {"input": "6 8 13 3\n", "output": "(3) / (13) = 3/13, left: 3/13, 6, 8\n(8) - (6) = 2, left: 2, 3/13\n(8) / (6) = 4/3, left: 4/3, 3/13\n(6) / (3/13) = 26, left: 26, 8\n(8) / (26) = 4/13, left: 4/13\n(13) + (3) = 16, left: 16, 6, 8\n(8) - (6) = 2, left: 2, 16\n(13) - (3) = 10, left: 10, 6, 8\n(6) + (10) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (6 + (13 - 3)))"}, {"input": "6 8 13 3\n", "output": "(13) - (6) = 7, left: 7, 8, 3\n(8) * (7) = 56, left: 56, 3\n(6) / (13) = 6/13, left: 6/13, 8, 3\n(3) + (6/13) = 45/13, left: 45/13, 8\n(6) - (13) = -7, left: -7, 8, 3\n(8) - (3) = 5, left: 5, -7\n(-7) / (5) = -7/5, left: -7/5\n(6) + (13) = 19, left: 19, 8, 3\n(3) - (8) = -5, left: -5, 19\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((6 + 13) - (3 - 8))"}, {"input": "6 8 13 3\n", "output": "(3) - (8) = -5, left: -5, 6, 13\n(6) + (13) = 19, left: 19, -5\n(-5) + (19) = 14, left: 14\n(-5) / (19) = -5/19, left: -5/19\n(19) / (-5) = -19/5, left: -19/5\n(-5) * (19) = -95, left: -95\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((6 + 13) - (3 - 8))"}, {"input": "6 8 13 3\n", "output": "(6) + (8) = 14, left: 14, 13, 3\n(3) - (13) = -10, left: -10, 14\n(14) / (-10) = -7/5, left: -7/5\n(-10) - (14) = -24, left: -24\n(-10) / (14) = -5/7, left: -5/7\n(14) * (-10) = -140, left: -140\n(14) + (-10) = 4, left: 4\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((6 + 8) - (3 - 13))"}, {"input": "6 8 13 3\n", "output": "(3) - (8) = -5, left: -5, 6, 13\n(6) + (13) = 19, left: 19, -5\n(-5) + (19) = 14, left: 14\n(-5) / (19) = -5/19, left: -5/19\n(19) / (-5) = -19/5, left: -19/5\n(-5) * (19) = -95, left: -95\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((6 + 13) - (3 - 8))"}, {"input": "6 8 13 3\n", "output": "(6) + (8) = 14, left: 14, 13, 3\n(3) - (13) = -10, left: -10, 14\n(14) / (-10) = -7/5, left: -7/5\n(-10) - (14) = -24, left: -24\n(-10) / (14) = -5/7, left: -5/7\n(14) * (-10) = -140, left: -140\n(14) + (-10) = 4, left: 4\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((6 + 8) - (3 - 13))"}, {"input": "6 8 13 3\n", "output": "(3) - (8) = -5, left: -5, 6, 13\n(6) + (13) = 19, left: 19, -5\n(-5) + (19) = 14, left: 14\n(-5) / (19) = -5/19, left: -5/19\n(19) / (-5) = -19/5, left: -19/5\n(-5) * (19) = -95, left: -95\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((6 + 13) - (3 - 8))"}, {"input": "10 4 4 3\n", "output": "(4) / (3) = 4/3, left: 4/3, 10, 4\n(3) / (4) = 3/4, left: 3/4, 10, 4\n(4) - (10) = -6, left: -6, 4, 3\n(3) - (4) = -1, left: -1, 10, 4\n(4) / (3) = 4/3, left: 4/3, 10, 4\n(4) * (3) = 12, left: 12, 10, 4\n(3) / (10) = 3/10, left: 3/10, 4, 4\n(10) - (3) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(4) - (3) = 1, left: 1, 10, 4\n(4) - (10) = -6, left: -6, 1\n(3) - (4) = -1, left: -1, 10, 4\n(4) * (3) = 12, left: 12, 10, 4\n(4) - (10) = -6, left: -6, 4, 3\n(4) + (-6) = -2, left: -2, 3\n(10) * (4) = 40, left: 40, 4, 3\n(10) - (3) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(3) / (10) = 3/10, left: 3/10, 4, 4\n(4) + (3/10) = 43/10, left: 43/10, 4\n(4) + (3/10) = 43/10, left: 43/10, 4\n(3/10) / (4) = 3/40, left: 3/40, 4\n(10) + (3) = 13, left: 13, 4, 4\n(4) - (4) = 0, left: 0, 13\n(10) - (3) = 7, left: 7, 4, 4\n(7) - (4) = 3, left: 3, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(4) / (3) = 4/3, left: 4/3, 10, 4\n(10) * (4) = 40, left: 40, 4, 3\n(10) + (4) = 14, left: 14, 4, 3\n(3) * (14) = 42, left: 42, 4\n(10) - (4) = 6, left: 6, 4, 3\n(3) - (6) = -3, left: -3, 4\n(10) * (3) = 30, left: 30, 4, 4\n(10) - (3) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(3) - (10) = -7, left: -7, 4, 4\n(10) * (3) = 30, left: 30, 4, 4\n(4) - (30) = -26, left: -26, 4\n(4) + (-26) = -22, left: -22\n(30) - (4) = 26, left: 26, 4\n(26) - (4) = 22, left: 22\n(10) / (3) = 10/3, left: 10/3, 4, 4\n(10) - (3) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(3) - (4) = -1, left: -1, 10, 4\n(4) + (3) = 7, left: 7, 10, 4\n(4) / (7) = 4/7, left: 4/7, 10\n(10) - (4) = 6, left: 6, 4, 3\n(4) + (3) = 7, left: 7, 10, 4\n(10) + (7) = 17, left: 17, 4\n(4) - (3) = 1, left: 1, 10, 4\n(4) * (1) = 4, left: 4, 10\n(4) / (3) = 4/3, left: 4/3, 10, 4\n(10) / (3) = 10/3, left: 10/3, 4, 4\n(4) * (4) = 16, left: 16, 10/3\n(10) - (3) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(4) - (10) = -6, left: -6, 4, 3\n(10) - (4) = 6, left: 6, 4, 3\n(3) - (6) = -3, left: -3, 4\n(4) - (3) = 1, left: 1, 10, 4\n(4) - (10) = -6, left: -6, 1\n(10) / (1) = 10, left: 10, 4\n(4) - (10) = -6, left: -6\n(10) * (4) = 40, left: 40, 4, 3\n(10) + (4) = 14, left: 14, 4, 3\n(3) - (4) = -1, left: -1, 10, 4\n(10) / (4) = 5/2, left: 5/2, -1\n(10) - (3) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(4) - (3) = 1, left: 1, 10, 4\n(1) - (4) = -3, left: -3, 10\n(4) + (3) = 7, left: 7, 10, 4\n(4) * (3) = 12, left: 12, 10, 4\n(3) / (4) = 3/4, left: 3/4, 10, 4\n(4) - (10) = -6, left: -6, 4, 3\n(10) * (4) = 40, left: 40, 4, 3\n(10) + (4) = 14, left: 14, 4, 3\n(4) / (10) = 2/5, left: 2/5, 4, 3\n(2/5) - (4) = -18/5, left: -18/5, 3\n(-18/5) / (3) = -6/5, left: -6/5\n(10) - (3) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "3 8 1 7\n", "output": "(8) + (1) = 9, left: 9, 3, 7\n(8) - (1) = 7, left: 7, 3, 7\n(7) / (3) = 7/3, left: 7/3, 7\n(3) / (8) = 3/8, left: 3/8, 1, 7\n(3/8) - (1) = -5/8, left: -5/8, 7\n(3) * (8) = 24, left: 24, 1, 7\n(3) * (7) = 21, left: 21, 8, 1\n(7) - (3) = 4, left: 4, 8, 1\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 - 3) - 1))"}, {"input": "3 8 1 7\n", "output": "(7) / (1) = 7, left: 7, 3, 8\n(1) / (7) = 1/7, left: 1/7, 3, 8\n(8) / (1/7) = 56, left: 56, 3\n(1) - (7) = -6, left: -6, 3, 8\n(3) + (8) = 11, left: 11, -6\n(-6) / (11) = -6/11, left: -6/11\n(1) + (7) = 8, left: 8, 3, 8\n(7) - (1) = 6, left: 6, 3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 - 1) - 3))"}, {"input": "3 8 1 7\n", "output": "(1) - (7) = -6, left: -6, 3, 8\n(8) / (-6) = -4/3, left: -4/3, 3\n(8) * (-6) = -48, left: -48, 3\n(3) + (-6) = -3, left: -3, 8\n(7) - (1) = 6, left: 6, 3, 8\n(3) / (8) = 3/8, left: 3/8, 6\n(8) + (6) = 14, left: 14, 3\n(3) - (6) = -3, left: -3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 - 1) - 3))"}, {"input": "3 8 1 7\n", "output": "(1) - (8) = -7, left: -7, 3, 7\n(-7) / (3) = -7/3, left: -7/3, 7\n(8) - (1) = 7, left: 7, 3, 7\n(7) - (3) = 4, left: 4, 7\n(4) - (7) = -3, left: -3\n(1) / (7) = 1/7, left: 1/7, 3, 8\n(3) / (8) = 3/8, left: 3/8, 1/7\n(7) - (1) = 6, left: 6, 3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 - 1) - 3))"}, {"input": "3 8 1 7\n", "output": "(8) - (1) = 7, left: 7, 3, 7\n(1) / (8) = 1/8, left: 1/8, 3, 7\n(3) * (1/8) = 3/8, left: 3/8, 7\n(7) / (3/8) = 56/3, left: 56/3\n(3) * (1) = 3, left: 3, 8, 7\n(8) / (3) = 8/3, left: 8/3, 7\n(3) + (1) = 4, left: 4, 8, 7\n(4) / (7) = 4/7, left: 4/7, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (3 + 1)))"}, {"input": "3 8 1 7\n", "output": "(8) + (1) = 9, left: 9, 3, 7\n(1) - (8) = -7, left: -7, 3, 7\n(7) / (3) = 7/3, left: 7/3, -7\n(8) * (1) = 8, left: 8, 3, 7\n(8) / (1) = 8, left: 8, 3, 7\n(8) - (3) = 5, left: 5, 1, 7\n(3) + (8) = 11, left: 11, 1, 7\n(3) - (8) = -5, left: -5, 1, 7\n(7) - (-5) = 12, left: 12, 1\n(7) / (3) = 7/3, left: 7/3, 8, 1\n(3) + (7) = 10, left: 10, 8, 1\n(7) - (3) = 4, left: 4, 8, 1\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 - 3) - 1))"}, {"input": "3 8 1 7\n", "output": "(8) * (1) = 8, left: 8, 3, 7\n(8) / (3) = 8/3, left: 8/3, 7\n(1) - (8) = -7, left: -7, 3, 7\n(-7) / (3) = -7/3, left: -7/3, 7\n(1) / (8) = 1/8, left: 1/8, 3, 7\n(3) - (1/8) = 23/8, left: 23/8, 7\n(8) + (1) = 9, left: 9, 3, 7\n(3) + (9) = 12, left: 12, 7\n(7) + (12) = 19, left: 19\n(3) * (1) = 3, left: 3, 8, 7\n(3) - (1) = 2, left: 2, 8, 7\n(3) + (1) = 4, left: 4, 8, 7\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (3 + 1)))"}, {"input": "3 8 1 7\n", "output": "(1) / (7) = 1/7, left: 1/7, 3, 8\n(3) + (1/7) = 22/7, left: 22/7, 8\n(3) * (1/7) = 3/7, left: 3/7, 8\n(8) + (3/7) = 59/7, left: 59/7\n(1) - (7) = -6, left: -6, 3, 8\n(8) + (-6) = 2, left: 2, 3\n(1) + (7) = 8, left: 8, 3, 8\n(1) * (7) = 7, left: 7, 3, 8\n(8) * (7) = 56, left: 56, 3\n(7) - (1) = 6, left: 6, 3, 8\n(3) - (8) = -5, left: -5, 6\n(3) * (8) = 24, left: 24, 6\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 - 1) - 3))"}, {"input": "3 8 1 7\n", "output": "(8) + (1) = 9, left: 9, 3, 7\n(1) / (8) = 1/8, left: 1/8, 3, 7\n(3) + (8) = 11, left: 11, 1, 7\n(1) + (7) = 8, left: 8, 11\n(8) / (3) = 8/3, left: 8/3, 1, 7\n(1) + (7) = 8, left: 8, 8/3\n(3) / (8) = 3/8, left: 3/8, 1, 7\n(1) + (7) = 8, left: 8, 3/8\n(1) + (3/8) = 11/8, left: 11/8, 7\n(1) * (7) = 7, left: 7, 3, 8\n(7) - (1) = 6, left: 6, 3, 8\n(8) + (6) = 14, left: 14, 3\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 - 1) - 3))"}, {"input": "3 8 1 7\n", "output": "(1) - (7) = -6, left: -6, 3, 8\n(8) - (-6) = 14, left: 14, 3\n(8) - (3) = 5, left: 5, -6\n(3) * (-6) = -18, left: -18, 8\n(-18) / (8) = -9/4, left: -9/4\n(7) - (1) = 6, left: 6, 3, 8\n(3) + (8) = 11, left: 11, 6\n(8) - (6) = 2, left: 2, 3\n(2) - (3) = -1, left: -1\n(3) - (6) = -3, left: -3, 8\n(-3) - (8) = -11, left: -11\n(6) / (3) = 2, left: 2, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 - 1) - 3))"}, {"input": "5 7 5 10\n", "output": "(5) / (5) = 1, left: 1, 7, 10\n(5) / (5) = 1, left: 1, 7, 10\n(10) * (1) = 10, left: 10, 7\n(5) - (5) = 0, left: 0, 7, 10\n(5) + (5) = 10, left: 10, 7, 10\n(10) - (5) = 5, left: 5, 7, 5\n(7) - (5) = 2, left: 2, 5\n(5) / (10) = 1/2, left: 1/2, 7, 5\n(7) + (5) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((7 + 5) / (5 / 10))"}, {"input": "5 7 5 10\n", "output": "(5) - (5) = 0, left: 0, 7, 10\n(10) / (7) = 10/7, left: 10/7, 0\n(5) / (5) = 1, left: 1, 7, 10\n(7) * (1) = 7, left: 7, 10\n(5) / (5) = 1, left: 1, 7, 10\n(5) + (5) = 10, left: 10, 7, 10\n(5) * (5) = 25, left: 25, 7, 10\n(10) / (5) = 2, left: 2, 5, 7\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (5 + 7))"}, {"input": "5 7 5 10\n", "output": "(5) / (7) = 5/7, left: 5/7, 5, 10\n(5) * (5/7) = 25/7, left: 25/7, 10\n(7) / (5) = 7/5, left: 7/5, 5, 10\n(7) - (5) = 2, left: 2, 5, 10\n(5) - (7) = -2, left: -2, 5, 10\n(5) - (-2) = 7, left: 7, 10\n(7) + (5) = 12, left: 12, 5, 10\n(10) - (12) = -2, left: -2, 5\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (7 + 5)) / 5)"}, {"input": "5 7 5 10\n", "output": "(5) * (10) = 50, left: 50, 5, 7\n(5) + (10) = 15, left: 15, 5, 7\n(7) * (15) = 105, left: 105, 5\n(7) + (15) = 22, left: 22, 5\n(5) * (22) = 110, left: 110\n(10) - (5) = 5, left: 5, 5, 7\n(7) - (5) = 2, left: 2, 5\n(10) / (5) = 2, left: 2, 5, 7\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (5 + 7))"}, {"input": "5 7 5 10\n", "output": "(5) * (5) = 25, left: 25, 7, 10\n(10) / (7) = 10/7, left: 10/7, 5, 5\n(10) - (7) = 3, left: 3, 5, 5\n(3) - (5) = -2, left: -2, 5\n(7) * (10) = 70, left: 70, 5, 5\n(70) - (5) = 65, left: 65, 5\n(5) / (70) = 1/14, left: 1/14, 5\n(10) / (5) = 2, left: 2, 5, 7\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (5 + 7))"}, {"input": "10 1 12 11\n", "output": "(11) - (10) = 1, left: 1, 1, 12\n(12) * (1) = 12, left: 12, 1\n(1) - (1) = 0, left: 0, 12\n(1) * (1) = 1, left: 1, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 - 10)))"}, {"input": "10 1 12 11\n", "output": "(12) / (11) = 12/11, left: 12/11, 10, 1\n(11) / (1) = 11, left: 11, 10, 12\n(1) - (11) = -10, left: -10, 10, 12\n(1) + (11) = 12, left: 12, 10, 12\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (12 - 10))"}, {"input": "10 1 12 11\n", "output": "(1) + (11) = 12, left: 12, 10, 12\n(10) * (12) = 120, left: 120, 12\n(120) / (12) = 10, left: 10\n(12) - (10) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((1 + 11) - 10))"}, {"input": "10 1 12 11\n", "output": "(11) / (12) = 11/12, left: 11/12, 10, 1\n(11/12) - (1) = -1/12, left: -1/12, 10\n(12) + (11) = 23, left: 23, 10, 1\n(12) - (10) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((12 - 10) * (1 + 11))"}, {"input": "10 1 12 11\n", "output": "(11) / (12) = 11/12, left: 11/12, 10, 1\n(12) - (11) = 1, left: 1, 10, 1\n(12) / (11) = 12/11, left: 12/11, 10, 1\n(10) / (1) = 10, left: 10, 12/11\n(1) / (11) = 1/11, left: 1/11, 10, 12\n(11) / (1) = 11, left: 11, 10, 12\n(1) - (11) = -10, left: -10, 10, 12\n(1) + (11) = 12, left: 12, 10, 12\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (12 - 10))"}, {"input": "10 1 12 11\n", "output": "(1) + (11) = 12, left: 12, 10, 12\n(10) * (12) = 120, left: 120, 12\n(12) + (120) = 132, left: 132\n(10) + (12) = 22, left: 22, 12\n(22) / (12) = 11/6, left: 11/6\n(10) / (12) = 5/6, left: 5/6, 12\n(12) * (5/6) = 10, left: 10\n(12) - (10) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((1 + 11) - 10))"}, {"input": "10 1 12 11\n", "output": "(1) - (12) = -11, left: -11, 10, 11\n(1) + (12) = 13, left: 13, 10, 11\n(10) + (1) = 11, left: 11, 12, 11\n(11) / (12) = 11/12, left: 11/12, 11\n(10) / (1) = 10, left: 10, 12, 11\n(12) * (11) = 132, left: 132, 10\n(10) - (132) = -122, left: -122\n(1) - (10) = -9, left: -9, 12, 11\n(11) + (-9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (11 + (1 - 10)))"}, {"input": "10 1 12 11\n", "output": "(11) - (12) = -1, left: -1, 10, 1\n(12) - (11) = 1, left: 1, 10, 1\n(10) + (1) = 11, left: 11, 1\n(12) + (11) = 23, left: 23, 10, 1\n(1) / (10) = 1/10, left: 1/10, 23\n(10) + (12) = 22, left: 22, 1, 11\n(10) - (12) = -2, left: -2, 1, 11\n(12) - (10) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((12 - 10) * (1 + 11))"}, {"input": "10 1 12 11\n", "output": "(11) - (10) = 1, left: 1, 1, 12\n(1) - (12) = -11, left: -11, 1\n(1) / (12) = 1/12, left: 1/12, 1\n(12) * (1) = 12, left: 12, 1\n(1) / (12) = 1/12, left: 1/12\n(1) / (1) = 1, left: 1, 12\n(1) * (1) = 1, left: 1, 12\n(12) * (1) = 12, left: 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 - 10)))"}, {"input": "5 6 10 4\n", "output": "(5) * (6) = 30, left: 30, 10, 4\n(4) - (30) = -26, left: -26, 10\n(10) - (-26) = 36, left: 36\n(30) / (4) = 15/2, left: 15/2, 10\n(4) + (30) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((4 + (5 * 6)) - 10)"}, {"input": "5 6 10 4\n", "output": "(6) - (10) = -4, left: -4, 5, 4\n(-4) / (5) = -4/5, left: -4/5, 4\n(-4/5) / (4) = -1/5, left: -1/5\n(5) - (-4) = 9, left: 9, 4\n(-4) - (5) = -9, left: -9, 4\n(-9) / (4) = -9/4, left: -9/4\n(4) / (-9) = -4/9, left: -4/9\n(-9) - (4) = -13, left: -13\n(5) * (-4) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (5 * (6 - 10)))"}, {"input": "5 6 10 4\n", "output": "(5) * (6) = 30, left: 30, 10, 4\n(4) - (30) = -26, left: -26, 10\n(-26) - (10) = -36, left: -36\n(30) / (4) = 15/2, left: 15/2, 10\n(4) / (30) = 2/15, left: 2/15, 10\n(2/15) / (10) = 1/75, left: 1/75\n(10) * (2/15) = 4/3, left: 4/3\n(4) + (30) = 34, left: 34, 10\n(10) * (34) = 340, left: 340\n(34) - (10) = 24, left: 24\nreach 24! expression: ((4 + (5 * 6)) - 10)"}, {"input": "5 6 10 4\n", "output": "(5) / (6) = 5/6, left: 5/6, 10, 4\n(10) - (4) = 6, left: 6, 5/6\n(5) - (6) = -1, left: -1, 10, 4\n(4) - (10) = -6, left: -6, -1\n(-6) - (-1) = -5, left: -5\n(10) * (-1) = -10, left: -10, 4\n(-1) / (10) = -1/10, left: -1/10, 4\n(5) * (6) = 30, left: 30, 10, 4\n(10) - (30) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (10 - (5 * 6)))"}, {"input": "5 6 10 4\n", "output": "(5) - (4) = 1, left: 1, 6, 10\n(5) + (4) = 9, left: 9, 6, 10\n(6) / (9) = 2/3, left: 2/3, 10\n(10) + (2/3) = 32/3, left: 32/3\n(6) + (9) = 15, left: 15, 10\n(4) - (5) = -1, left: -1, 6, 10\n(6) - (10) = -4, left: -4, -1\n(5) * (4) = 20, left: 20, 6, 10\n(10) + (20) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 + (5 * 4)) - 6)"}, {"input": "5 6 10 4\n", "output": "(4) - (5) = -1, left: -1, 6, 10\n(5) + (4) = 9, left: 9, 6, 10\n(10) - (6) = 4, left: 4, 9\n(5) / (4) = 5/4, left: 5/4, 6, 10\n(4) / (5) = 4/5, left: 4/5, 6, 10\n(6) - (10) = -4, left: -4, 4/5\n(5) - (4) = 1, left: 1, 6, 10\n(5) * (4) = 20, left: 20, 6, 10\n(10) - (6) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((5 * 4) + (10 - 6))"}, {"input": "10 5 1 3\n", "output": "(5) / (1) = 5, left: 5, 10, 3\n(3) + (5) = 8, left: 8, 10\n(5) * (1) = 5, left: 5, 10, 3\n(5) - (3) = 2, left: 2, 10\n(5) + (1) = 6, left: 6, 10, 3\n(6) - (10) = -4, left: -4, 3\n(-4) / (3) = -4/3, left: -4/3\n(3) - (10) = -7, left: -7, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (5 + 1))"}, {"input": "10 5 1 3\n", "output": "(3) - (1) = 2, left: 2, 10, 5\n(5) - (10) = -5, left: -5, 2\n(5) - (10) = -5, left: -5, 1, 3\n(10) - (5) = 5, left: 5, 1, 3\n(1) - (3) = -2, left: -2, 5\n(10) * (5) = 50, left: 50, 1, 3\n(10) / (5) = 2, left: 2, 1, 3\n(1) - (10) = -9, left: -9, 5, 3\n(5) * (3) = 15, left: 15, -9\n(15) - (-9) = 24, left: 24\nreach 24! expression: ((5 * 3) - (1 - 10))"}, {"input": "10 5 1 3\n", "output": "(5) / (10) = 1/2, left: 1/2, 1, 3\n(10) * (5) = 50, left: 50, 1, 3\n(50) / (1) = 50, left: 50, 3\n(10) / (5) = 2, left: 2, 1, 3\n(10) - (5) = 5, left: 5, 1, 3\n(1) - (5) = -4, left: -4, 10, 3\n(5) / (1) = 5, left: 5, 10, 3\n(5) + (1) = 6, left: 6, 10, 3\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (5 + 1))"}, {"input": "10 5 1 3\n", "output": "(10) / (5) = 2, left: 2, 1, 3\n(1) / (3) = 1/3, left: 1/3, 10, 5\n(5) / (1/3) = 15, left: 15, 10\n(10) - (15) = -5, left: -5\n(1) * (3) = 3, left: 3, 10, 5\n(10) / (5) = 2, left: 2, 3\n(3) - (1) = 2, left: 2, 10, 5\n(5) * (3) = 15, left: 15, 10, 1\n(10) + (15) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((10 + (5 * 3)) - 1)"}, {"input": "10 5 1 3\n", "output": "(10) - (1) = 9, left: 9, 5, 3\n(3) + (9) = 12, left: 12, 5\n(5) / (12) = 5/12, left: 5/12\n(9) / (3) = 3, left: 3, 5\n(3) / (9) = 1/3, left: 1/3, 5\n(3) / (5) = 3/5, left: 3/5, 9\n(5) + (3) = 8, left: 8, 9\n(8) / (9) = 8/9, left: 8/9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((10 - 1) + (5 * 3))"}, {"input": "10 5 1 3\n", "output": "(10) * (5) = 50, left: 50, 1, 3\n(3) + (50) = 53, left: 53, 1\n(10) - (5) = 5, left: 5, 1, 3\n(10) / (5) = 2, left: 2, 1, 3\n(1) + (3) = 4, left: 4, 2\n(4) - (2) = 2, left: 2\n(5) - (10) = -5, left: -5, 1, 3\n(1) - (-5) = 6, left: 6, 3\n(1) + (-5) = -4, left: -4, 3\n(1) / (3) = 1/3, left: 1/3, 10, 5\n(3) / (1) = 3, left: 3, 10, 5\n(5) * (3) = 15, left: 15, 10, 1\n(10) + (15) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((10 + (5 * 3)) - 1)"}, {"input": "10 5 1 3\n", "output": "(1) + (3) = 4, left: 4, 10, 5\n(1) - (3) = -2, left: -2, 10, 5\n(5) + (-2) = 3, left: 3, 10\n(5) / (10) = 1/2, left: 1/2, 1, 3\n(5) - (10) = -5, left: -5, 1, 3\n(10) - (5) = 5, left: 5, 1, 3\n(10) * (5) = 50, left: 50, 1, 3\n(10) / (5) = 2, left: 2, 1, 3\n(1) - (3) = -2, left: -2, 2\n(2) * (-2) = -4, left: -4\n(10) + (5) = 15, left: 15, 1, 3\n(1) - (10) = -9, left: -9, 5, 3\n(5) * (3) = 15, left: 15, -9\n(15) - (-9) = 24, left: 24\nreach 24! expression: ((5 * 3) - (1 - 10))"}, {"input": "9 8 3 6\n", "output": "(9) * (3) = 27, left: 27, 8, 6\n(8) / (6) = 4/3, left: 4/3, 27\n(3) / (9) = 1/3, left: 1/3, 8, 6\n(8) + (1/3) = 25/3, left: 25/3, 6\n(8) - (1/3) = 23/3, left: 23/3, 6\n(9) / (3) = 3, left: 3, 8, 6\n(6) / (8) = 3/4, left: 3/4, 3\n(8) * (6) = 48, left: 48, 3\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (9 / 3)))"}, {"input": "9 8 3 6\n", "output": "(6) - (3) = 3, left: 3, 9, 8\n(9) + (3) = 12, left: 12, 8\n(12) / (8) = 3/2, left: 3/2\n(8) + (12) = 20, left: 20\n(12) - (8) = 4, left: 4\n(8) * (12) = 96, left: 96\n(8) / (12) = 2/3, left: 2/3\n(9) / (3) = 3, left: 3, 8\n(3) / (8) = 3/8, left: 3/8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (6 - 3)))"}, {"input": "9 8 3 6\n", "output": "(6) / (9) = 2/3, left: 2/3, 8, 3\n(8) + (2/3) = 26/3, left: 26/3, 3\n(9) * (6) = 54, left: 54, 8, 3\n(6) / (3) = 2, left: 2, 9, 8\n(3) + (6) = 9, left: 9, 9, 8\n(9) / (9) = 1, left: 1, 8\n(8) * (1) = 8, left: 8\n(6) - (3) = 3, left: 3, 9, 8\n(9) / (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (6 - 3)))"}, {"input": "9 8 3 6\n", "output": "(6) / (9) = 2/3, left: 2/3, 8, 3\n(8) * (3) = 24, left: 24, 2/3\n(2/3) - (8) = -22/3, left: -22/3, 3\n(9) * (6) = 54, left: 54, 8, 3\n(3) - (8) = -5, left: -5, 54\n(9) / (6) = 3/2, left: 3/2, 8, 3\n(6) - (9) = -3, left: -3, 8, 3\n(9) * (8) = 72, left: 72, 3, 6\n(6) - (3) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (6 - 3))"}, {"input": "9 8 3 6\n", "output": "(8) + (3) = 11, left: 11, 9, 6\n(9) * (11) = 99, left: 99, 6\n(3) / (8) = 3/8, left: 3/8, 9, 6\n(8) / (3) = 8/3, left: 8/3, 9, 6\n(9) - (6) = 3, left: 3, 8/3\n(8) - (3) = 5, left: 5, 9, 6\n(6) - (9) = -3, left: -3, 5\n(9) - (6) = 3, left: 3, 5\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (8 - 3)))"}, {"input": "9 8 3 6\n", "output": "(6) / (9) = 2/3, left: 2/3, 8, 3\n(3) / (8) = 3/8, left: 3/8, 2/3\n(9) + (6) = 15, left: 15, 8, 3\n(9) * (6) = 54, left: 54, 8, 3\n(8) / (3) = 8/3, left: 8/3, 54\n(9) / (6) = 3/2, left: 3/2, 8, 3\n(9) - (6) = 3, left: 3, 8, 3\n(3) - (8) = -5, left: -5, 3\n(3) - (3) = 0, left: 0, 8\n(0) - (8) = -8, left: -8\n(6) - (9) = -3, left: -3, 8, 3\n(9) * (8) = 72, left: 72, 3, 6\n(6) - (3) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (6 - 3))"}, {"input": "9 8 3 6\n", "output": "(6) - (3) = 3, left: 3, 9, 8\n(9) + (3) = 12, left: 12, 8\n(8) - (12) = -4, left: -4\n(12) / (8) = 3/2, left: 3/2\n(8) + (12) = 20, left: 20\n(12) - (8) = 4, left: 4\n(8) * (12) = 96, left: 96\n(8) / (12) = 2/3, left: 2/3\n(9) / (3) = 3, left: 3, 8\n(3) / (8) = 3/8, left: 3/8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (6 - 3)))"}, {"input": "9 8 3 6\n", "output": "(9) / (6) = 3/2, left: 3/2, 8, 3\n(3) / (3/2) = 2, left: 2, 8\n(6) - (9) = -3, left: -3, 8, 3\n(-3) / (3) = -1, left: -1, 8\n(9) - (6) = 3, left: 3, 8, 3\n(8) * (3) = 24, left: 24, 3\n(3) / (24) = 1/8, left: 1/8\n(8) + (3) = 11, left: 11, 3\n(9) * (6) = 54, left: 54, 8, 3\n(6) / (3) = 2, left: 2, 9, 8\n(3) / (6) = 1/2, left: 1/2, 9, 8\n(6) - (3) = 3, left: 3, 9, 8\n(9) / (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (6 - 3)))"}, {"input": "9 8 3 6\n", "output": "(6) - (3) = 3, left: 3, 9, 8\n(9) + (3) = 12, left: 12, 8\n(8) - (12) = -4, left: -4\n(12) / (8) = 3/2, left: 3/2\n(8) + (12) = 20, left: 20\n(12) - (8) = 4, left: 4\n(8) * (12) = 96, left: 96\n(8) / (12) = 2/3, left: 2/3\n(9) / (3) = 3, left: 3, 8\n(3) / (8) = 3/8, left: 3/8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (6 - 3)))"}, {"input": "11 12 11 6\n", "output": "(12) / (6) = 2, left: 2, 11, 11\n(11) - (11) = 0, left: 0, 2\n(2) + (0) = 2, left: 2\n(11) + (11) = 22, left: 22, 2\n(22) / (2) = 11, left: 11\n(2) + (22) = 24, left: 24\nreach 24! expression: ((12 / 6) + (11 + 11))"}, {"input": "11 12 11 6\n", "output": "(12) * (6) = 72, left: 72, 11, 11\n(11) / (11) = 1, left: 1, 72\n(11) / (11) = 1, left: 1, 72\n(12) / (6) = 2, left: 2, 11, 11\n(11) + (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (11 + (12 / 6)))"}, {"input": "11 12 11 6\n", "output": "(11) - (6) = 5, left: 5, 12, 11\n(11) + (6) = 17, left: 17, 11, 12\n(11) / (12) = 11/12, left: 11/12, 17\n(11) + (11) = 22, left: 22, 12, 6\n(12) / (6) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 + 11) + (12 / 6))"}, {"input": "11 12 11 6\n", "output": "(11) - (11) = 0, left: 0, 12, 6\n(0) - (12) = -12, left: -12, 6\n(-12) / (6) = -2, left: -2\n(11) + (11) = 22, left: 22, 12, 6\n(12) / (6) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 + 11) + (12 / 6))"}, {"input": "11 12 11 6\n", "output": "(11) / (6) = 11/6, left: 11/6, 12, 11\n(6) - (11) = -5, left: -5, 12, 11\n(11) * (6) = 66, left: 66, 12, 11\n(12) + (66) = 78, left: 78, 11\n(11) + (6) = 17, left: 17, 12, 11\n(11) * (6) = 66, left: 66, 11, 12\n(6) - (11) = -5, left: -5, 11, 12\n(11) + (11) = 22, left: 22, 12, 6\n(12) / (6) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 + 11) + (12 / 6))"}, {"input": "11 12 11 6\n", "output": "(11) - (6) = 5, left: 5, 11, 12\n(6) - (11) = -5, left: -5, 11, 12\n(11) / (12) = 11/12, left: 11/12, -5\n(11) / (6) = 11/6, left: 11/6, 11, 12\n(11) * (12) = 132, left: 132, 11/6\n(11/6) / (12) = 11/72, left: 11/72, 11\n(11) / (12) = 11/12, left: 11/12, 11, 6\n(12) / (6) = 2, left: 2, 11, 11\n(11) + (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (11 + (12 / 6)))"}, {"input": "11 12 11 6\n", "output": "(11) / (11) = 1, left: 1, 12, 6\n(11) - (11) = 0, left: 0, 12, 6\n(12) / (6) = 2, left: 2, 0\n(12) * (0) = 0, left: 0, 6\n(6) + (0) = 6, left: 6\n(11) + (11) = 22, left: 22, 12, 6\n(22) / (12) = 11/6, left: 11/6, 6\n(6) + (22) = 28, left: 28, 12\n(12) / (6) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 + 11) + (12 / 6))"}, {"input": "11 12 11 6\n", "output": "(12) * (6) = 72, left: 72, 11, 11\n(11) + (72) = 83, left: 83, 11\n(11) / (11) = 1, left: 1, 72\n(1) - (72) = -71, left: -71\n(72) - (11) = 61, left: 61, 11\n(11) - (72) = -61, left: -61, 11\n(6) - (12) = -6, left: -6, 11, 11\n(12) / (6) = 2, left: 2, 11, 11\n(11) + (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (11 + (12 / 6)))"}, {"input": "11 12 11 6\n", "output": "(12) / (6) = 2, left: 2, 11, 11\n(11) - (11) = 0, left: 0, 2\n(2) + (0) = 2, left: 2\n(2) - (0) = 2, left: 2\n(0) - (2) = -2, left: -2\n(0) / (2) = 0, left: 0\n(2) * (0) = 0, left: 0\n(11) + (11) = 22, left: 22, 2\n(22) / (2) = 11, left: 11\n(2) + (22) = 24, left: 24\nreach 24! expression: ((12 / 6) + (11 + 11))"}, {"input": "11 12 11 6\n", "output": "(12) / (6) = 2, left: 2, 11, 11\n(11) - (11) = 0, left: 0, 2\n(2) + (0) = 2, left: 2\n(2) - (0) = 2, left: 2\n(0) - (2) = -2, left: -2\n(0) / (2) = 0, left: 0\n(2) * (0) = 0, left: 0\n(11) + (11) = 22, left: 22, 2\n(22) / (2) = 11, left: 11\n(2) + (22) = 24, left: 24\nreach 24! expression: ((12 / 6) + (11 + 11))"}, {"input": "11 12 11 6\n", "output": "(12) / (6) = 2, left: 2, 11, 11\n(11) - (11) = 0, left: 0, 2\n(2) + (0) = 2, left: 2\n(2) - (0) = 2, left: 2\n(0) - (2) = -2, left: -2\n(0) / (2) = 0, left: 0\n(2) * (0) = 0, left: 0\n(11) + (11) = 22, left: 22, 2\n(22) / (2) = 11, left: 11\n(2) + (22) = 24, left: 24\nreach 24! expression: ((12 / 6) + (11 + 11))"}, {"input": "4 12 4 11\n", "output": "(4) / (12) = 1/3, left: 1/3, 4, 11\n(1/3) / (4) = 1/12, left: 1/12, 11\n(11) - (4) = 7, left: 7, 12, 4\n(12) + (11) = 23, left: 23, 4, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "4 12 4 11\n", "output": "(4) / (12) = 1/3, left: 1/3, 4, 11\n(1/3) / (11) = 1/33, left: 1/33, 4\n(4) / (1/33) = 132, left: 132\n(12) - (4) = 8, left: 8, 4, 11\n(4) + (8) = 12, left: 12, 11\n(12) + (4) = 16, left: 16, 4, 11\n(12) - (11) = 1, left: 1, 4, 4\n(12) + (11) = 23, left: 23, 4, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "4 12 4 11\n", "output": "(4) * (12) = 48, left: 48, 4, 11\n(12) - (4) = 8, left: 8, 4, 11\n(4) + (11) = 15, left: 15, 12, 4\n(11) - (12) = -1, left: -1, 4, 4\n(-1) - (4) = -5, left: -5, 4\n(-5) - (4) = -9, left: -9\n(11) / (12) = 11/12, left: 11/12, 4, 4\n(12) + (11) = 23, left: 23, 4, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "4 12 4 11\n", "output": "(12) - (4) = 8, left: 8, 4, 11\n(12) / (4) = 3, left: 3, 4, 11\n(4) - (12) = -8, left: -8, 4, 11\n(12) / (11) = 12/11, left: 12/11, 4, 4\n(4) - (4) = 0, left: 0, 12/11\n(12/11) + (0) = 12/11, left: 12/11\n(11) - (12) = -1, left: -1, 4, 4\n(12) + (11) = 23, left: 23, 4, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "4 12 4 11\n", "output": "(4) * (11) = 44, left: 44, 4, 12\n(11) / (4) = 11/4, left: 11/4, 4, 12\n(4) - (11/4) = 5/4, left: 5/4, 12\n(12) / (4) = 3, left: 3, 4, 11\n(4) + (11) = 15, left: 15, 3\n(4) - (12) = -8, left: -8, 4, 11\n(12) * (11) = 132, left: 132, 4, 4\n(12) + (11) = 23, left: 23, 4, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "4 12 4 11\n", "output": "(12) / (4) = 3, left: 3, 4, 11\n(12) - (4) = 8, left: 8, 4, 11\n(4) + (11) = 15, left: 15, 4, 12\n(12) + (15) = 27, left: 27, 4\n(12) - (4) = 8, left: 8, 4, 11\n(4) / (12) = 1/3, left: 1/3, 4, 11\n(1/3) - (4) = -11/3, left: -11/3, 11\n(4) / (4) = 1, left: 1, 12, 11\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (4 / 4)))"}, {"input": "4 12 4 11\n", "output": "(4) * (12) = 48, left: 48, 4, 11\n(12) / (4) = 3, left: 3, 4, 11\n(12) - (4) = 8, left: 8, 4, 11\n(11) / (8) = 11/8, left: 11/8, 4\n(4) - (12) = -8, left: -8, 4, 11\n(-8) / (11) = -8/11, left: -8/11, 4\n(-8) / (4) = -2, left: -2, 11\n(4) + (11) = 15, left: 15, 4, 12\n(11) - (4) = 7, left: 7, 4, 12\n(12) - (4) = 8, left: 8, 4, 11\n(12) * (4) = 48, left: 48, 4, 11\n(4) / (4) = 1, left: 1, 12, 11\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (4 / 4)))"}, {"input": "4 12 4 11\n", "output": "(12) + (4) = 16, left: 16, 4, 11\n(4) / (12) = 1/3, left: 1/3, 4, 11\n(12) / (4) = 3, left: 3, 4, 11\n(11) - (3) = 8, left: 8, 4\n(4) - (12) = -8, left: -8, 4, 11\n(12) / (4) = 3, left: 3, 4, 11\n(12) - (4) = 8, left: 8, 4, 11\n(4) + (12) = 16, left: 16, 4, 11\n(4) / (12) = 1/3, left: 1/3, 4, 11\n(12) / (11) = 12/11, left: 12/11, 4, 4\n(11) - (12) = -1, left: -1, 4, 4\n(12) + (11) = 23, left: 23, 4, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "4 12 4 11\n", "output": "(11) - (4) = 7, left: 7, 4, 12\n(4) - (11) = -7, left: -7, 4, 12\n(4) + (11) = 15, left: 15, 4, 12\n(12) / (4) = 3, left: 3, 4, 11\n(12) + (4) = 16, left: 16, 4, 11\n(11) - (4) = 7, left: 7, 16\n(12) / (4) = 3, left: 3, 4, 11\n(4) * (12) = 48, left: 48, 4, 11\n(11) + (48) = 59, left: 59, 4\n(4) + (12) = 16, left: 16, 4, 11\n(11) - (12) = -1, left: -1, 4, 4\n(12) + (11) = 23, left: 23, 4, 4\n(4) / (4) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "13 13 3 5\n", "output": "(13) + (5) = 18, left: 18, 13, 3\n(13) * (18) = 234, left: 234, 3\n(234) - (3) = 231, left: 231\n(5) - (13) = -8, left: -8, 13, 3\n(3) - (-8) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (3 - (5 - 13)))"}, {"input": "13 13 3 5\n", "output": "(13) * (3) = 39, left: 39, 13, 5\n(39) - (5) = 34, left: 34, 13\n(13) * (39) = 507, left: 507, 5\n(13) + (3) = 16, left: 16, 13, 5\n(5) - (13) = -8, left: -8, 16\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((13 + 3) - (5 - 13))"}, {"input": "13 13 3 5\n", "output": "(13) - (3) = 10, left: 10, 13, 5\n(13) * (5) = 65, left: 65, 10\n(13) + (3) = 16, left: 16, 13, 5\n(13) + (5) = 18, left: 18, 16\n(5) - (13) = -8, left: -8, 16\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((13 + 3) - (5 - 13))"}, {"input": "13 13 3 5\n", "output": "(5) / (13) = 5/13, left: 5/13, 13, 3\n(13) * (5/13) = 5, left: 5, 3\n(13) - (3) = 10, left: 10, 5/13\n(5) - (13) = -8, left: -8, 13, 3\n(3) - (-8) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (3 - (5 - 13)))"}, {"input": "13 13 3 5\n", "output": "(13) + (3) = 16, left: 16, 13, 5\n(13) * (16) = 208, left: 208, 5\n(5) - (208) = -203, left: -203\n(13) - (16) = -3, left: -3, 5\n(13) + (16) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((13 + (13 + 3)) - 5)"}, {"input": "13 13 3 5\n", "output": "(5) / (13) = 5/13, left: 5/13, 13, 3\n(5/13) / (13) = 5/169, left: 5/169, 3\n(3) + (5/169) = 512/169, left: 512/169\n(3) - (13) = -10, left: -10, 5/13\n(13) / (3) = 13/3, left: 13/3, 5/13\n(3) / (13) = 3/13, left: 3/13, 5/13\n(3) * (5/13) = 15/13, left: 15/13, 13\n(5) - (13) = -8, left: -8, 13, 3\n(3) - (-8) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (3 - (5 - 13)))"}, {"input": "13 13 3 5\n", "output": "(13) + (3) = 16, left: 16, 13, 5\n(13) * (16) = 208, left: 208, 5\n(16) / (13) = 16/13, left: 16/13, 5\n(5) * (16/13) = 80/13, left: 80/13\n(5) - (16/13) = 49/13, left: 49/13\n(13) / (16) = 13/16, left: 13/16, 5\n(13) - (16) = -3, left: -3, 5\n(-3) / (5) = -3/5, left: -3/5\n(13) + (16) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((13 + (13 + 3)) - 5)"}, {"input": "13 13 3 5\n", "output": "(13) * (3) = 39, left: 39, 13, 5\n(13) - (3) = 10, left: 10, 13, 5\n(3) / (13) = 3/13, left: 3/13, 13, 5\n(13) + (5) = 18, left: 18, 3/13\n(18) - (3/13) = 231/13, left: 231/13\n(3/13) - (5) = -62/13, left: -62/13, 13\n(5) - (3/13) = 62/13, left: 62/13, 13\n(13) + (3) = 16, left: 16, 13, 5\n(5) - (13) = -8, left: -8, 16\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((13 + 3) - (5 - 13))"}, {"input": "13 13 3 5\n", "output": "(13) * (3) = 39, left: 39, 13, 5\n(13) - (5) = 8, left: 8, 39\n(5) / (13) = 5/13, left: 5/13, 39\n(13) + (5) = 18, left: 18, 39\n(18) / (39) = 6/13, left: 6/13\n(13) * (39) = 507, left: 507, 5\n(5) / (507) = 5/507, left: 5/507\n(13) + (3) = 16, left: 16, 13, 5\n(5) - (13) = -8, left: -8, 16\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((13 + 3) - (5 - 13))"}, {"input": "13 13 3 5\n", "output": "(13) + (5) = 18, left: 18, 13, 3\n(3) / (18) = 1/6, left: 1/6, 13\n(13) / (5) = 13/5, left: 13/5, 13, 3\n(3) + (13/5) = 28/5, left: 28/5, 13\n(3) / (13/5) = 15/13, left: 15/13, 13\n(5) / (13) = 5/13, left: 5/13, 13, 3\n(13) * (5) = 65, left: 65, 13, 3\n(5) - (13) = -8, left: -8, 13, 3\n(3) - (-8) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (3 - (5 - 13)))"}, {"input": "12 5 4 13\n", "output": "(13) - (5) = 8, left: 8, 12, 4\n(12) / (8) = 3/2, left: 3/2, 4\n(8) / (12) = 2/3, left: 2/3, 4\n(2/3) / (4) = 1/6, left: 1/6\n(12) * (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((12 * (13 - 5)) / 4)"}, {"input": "12 5 4 13\n", "output": "(12) * (5) = 60, left: 60, 4, 13\n(4) - (60) = -56, left: -56, 13\n(13) * (-56) = -728, left: -728\n(12) - (5) = 7, left: 7, 4, 13\n(4) + (13) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: ((12 - 5) + (4 + 13))"}, {"input": "12 5 4 13\n", "output": "(5) - (13) = -8, left: -8, 12, 4\n(4) * (-8) = -32, left: -32, 12\n(-8) - (4) = -12, left: -12, 12\n(-12) / (12) = -1, left: -1\n(-12) - (12) = -24, left: -24\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - ((5 - 13) - 4))"}, {"input": "12 5 4 13\n", "output": "(5) * (13) = 65, left: 65, 12, 4\n(5) / (13) = 5/13, left: 5/13, 12, 4\n(4) + (5/13) = 57/13, left: 57/13, 12\n(5) + (13) = 18, left: 18, 12, 4\n(18) - (12) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((5 + 13) - 12))"}, {"input": "12 5 4 13\n", "output": "(13) - (5) = 8, left: 8, 12, 4\n(12) / (8) = 3/2, left: 3/2, 4\n(4) - (3/2) = 5/2, left: 5/2\n(8) - (12) = -4, left: -4, 4\n(-4) - (4) = -8, left: -8\n(4) / (-4) = -1, left: -1\n(4) + (-4) = 0, left: 0\n(8) / (12) = 2/3, left: 2/3, 4\n(12) * (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((12 * (13 - 5)) / 4)"}, {"input": "12 5 4 13\n", "output": "(13) / (5) = 13/5, left: 13/5, 12, 4\n(4) - (12) = -8, left: -8, 13/5\n(12) / (13/5) = 60/13, left: 60/13, 4\n(5) * (13) = 65, left: 65, 12, 4\n(5) / (13) = 5/13, left: 5/13, 12, 4\n(4) * (5/13) = 20/13, left: 20/13, 12\n(12) / (4) = 3, left: 3, 5/13\n(5) + (13) = 18, left: 18, 12, 4\n(18) - (12) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((5 + 13) - 12))"}, {"input": "12 5 4 13\n", "output": "(12) * (5) = 60, left: 60, 4, 13\n(60) / (13) = 60/13, left: 60/13, 4\n(13) + (60) = 73, left: 73, 4\n(60) / (4) = 15, left: 15, 13\n(60) - (4) = 56, left: 56, 13\n(13) * (56) = 728, left: 728\n(4) * (60) = 240, left: 240, 13\n(12) - (5) = 7, left: 7, 4, 13\n(4) + (13) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: ((12 - 5) + (4 + 13))"}, {"input": "12 5 4 13\n", "output": "(5) - (13) = -8, left: -8, 12, 4\n(4) * (-8) = -32, left: -32, 12\n(12) - (-32) = 44, left: 44\n(12) + (-32) = -20, left: -20\n(-32) / (12) = -8/3, left: -8/3\n(-8) - (4) = -12, left: -12, 12\n(-12) / (12) = -1, left: -1\n(12) * (-12) = -144, left: -144\n(-12) - (12) = -24, left: -24\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - ((5 - 13) - 4))"}, {"input": "3 8 9 4\n", "output": "(9) / (4) = 9/4, left: 9/4, 3, 8\n(9/4) - (3) = -3/4, left: -3/4, 8\n(9) * (4) = 36, left: 36, 3, 8\n(4) / (9) = 4/9, left: 4/9, 3, 8\n(8) - (4/9) = 68/9, left: 68/9, 3\n(68/9) / (3) = 68/27, left: 68/27\n(8) / (4/9) = 18, left: 18, 3\n(9) + (4) = 13, left: 13, 3, 8\n(3) + (13) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (3 + (9 + 4)))"}, {"input": "3 8 9 4\n", "output": "(8) * (9) = 72, left: 72, 3, 4\n(4) / (3) = 4/3, left: 4/3, 72\n(4) - (3) = 1, left: 1, 72\n(4) + (72) = 76, left: 76, 3\n(3) + (72) = 75, left: 75, 4\n(75) - (4) = 71, left: 71\n(3) - (72) = -69, left: -69, 4\n(8) + (9) = 17, left: 17, 3, 4\n(3) + (4) = 7, left: 7, 17\n(17) + (7) = 24, left: 24\nreach 24! expression: ((8 + 9) + (3 + 4))"}, {"input": "3 8 9 4\n", "output": "(3) + (9) = 12, left: 12, 8, 4\n(4) + (12) = 16, left: 16, 8\n(16) / (8) = 2, left: 2\n(16) - (8) = 8, left: 8\n(8) * (16) = 128, left: 128\n(8) / (16) = 1/2, left: 1/2\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 + (3 + 9)))"}, {"input": "3 8 9 4\n", "output": "(8) - (3) = 5, left: 5, 9, 4\n(4) - (9) = -5, left: -5, 5\n(3) / (8) = 3/8, left: 3/8, 9, 4\n(9) + (3/8) = 75/8, left: 75/8, 4\n(9) / (3/8) = 24, left: 24, 4\n(4) + (3/8) = 35/8, left: 35/8, 9\n(4) / (3/8) = 32/3, left: 32/3, 9\n(3) + (8) = 11, left: 11, 9, 4\n(9) + (11) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (9 + (3 + 8)))"}, {"input": "3 8 9 4\n", "output": "(3) + (9) = 12, left: 12, 8, 4\n(4) + (12) = 16, left: 16, 8\n(16) / (8) = 2, left: 2\n(16) - (8) = 8, left: 8\n(8) * (16) = 128, left: 128\n(8) / (16) = 1/2, left: 1/2\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 + (3 + 9)))"}, {"input": "3 8 9 4\n", "output": "(3) + (9) = 12, left: 12, 8, 4\n(4) + (12) = 16, left: 16, 8\n(16) / (8) = 2, left: 2\n(16) - (8) = 8, left: 8\n(8) * (16) = 128, left: 128\n(8) / (16) = 1/2, left: 1/2\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 + (3 + 9)))"}, {"input": "9 3 10 9\n", "output": "(9) / (10) = 9/10, left: 9/10, 3, 9\n(9/10) / (9) = 1/10, left: 1/10, 3\n(9) / (3) = 3, left: 3, 9/10\n(9) - (10) = -1, left: -1, 3, 9\n(9) + (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 + (9 - 10)))"}, {"input": "9 3 10 9\n", "output": "(9) - (10) = -1, left: -1, 3, 9\n(-1) / (9) = -1/9, left: -1/9, 3\n(-1/9) - (3) = -28/9, left: -28/9\n(3) * (-1/9) = -1/3, left: -1/3\n(9) + (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 + (9 - 10)))"}, {"input": "9 3 10 9\n", "output": "(9) / (9) = 1, left: 1, 3, 10\n(3) / (10) = 3/10, left: 3/10, 1\n(1) / (3/10) = 10/3, left: 10/3\n(9) + (9) = 18, left: 18, 3, 10\n(18) - (10) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((9 + 9) - 10))"}, {"input": "9 3 10 9\n", "output": "(9) / (10) = 9/10, left: 9/10, 3, 9\n(9/10) / (9) = 1/10, left: 1/10, 3\n(9) * (9/10) = 81/10, left: 81/10, 3\n(9) - (10) = -1, left: -1, 3, 9\n(9) * (-1) = -9, left: -9, 3\n(-1) / (9) = -1/9, left: -1/9, 3\n(9) / (-1) = -9, left: -9, 3\n(3) / (-9) = -1/3, left: -1/3\n(9) + (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 + (9 - 10)))"}, {"input": "9 3 10 9\n", "output": "(9) * (10) = 90, left: 90, 3, 9\n(9) / (90) = 1/10, left: 1/10, 3\n(9) + (90) = 99, left: 99, 3\n(3) / (99) = 1/33, left: 1/33\n(3) - (90) = -87, left: -87, 9\n(3) + (90) = 93, left: 93, 9\n(3) * (90) = 270, left: 270, 9\n(9) - (10) = -1, left: -1, 3, 9\n(9) + (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 + (9 - 10)))"}, {"input": "9 3 10 9\n", "output": "(9) / (9) = 1, left: 1, 3, 10\n(10) / (3) = 10/3, left: 10/3, 1\n(1) / (10/3) = 3/10, left: 3/10\n(1) / (10) = 1/10, left: 1/10, 3\n(3) * (1/10) = 3/10, left: 3/10\n(1) - (10) = -9, left: -9, 3\n(3) + (-9) = -6, left: -6\n(9) + (9) = 18, left: 18, 3, 10\n(18) - (10) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((9 + 9) - 10))"}, {"input": "9 3 10 9\n", "output": "(9) - (10) = -1, left: -1, 3, 9\n(-1) / (9) = -1/9, left: -1/9, 3\n(-1/9) - (3) = -28/9, left: -28/9\n(-1/9) / (3) = -1/27, left: -1/27\n(3) * (-1/9) = -1/3, left: -1/3\n(3) / (-1/9) = -27, left: -27\n(3) + (-1/9) = 26/9, left: 26/9\n(9) + (-1) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 + (9 - 10)))"}, {"input": "9 3 10 9\n", "output": "(9) / (9) = 1, left: 1, 3, 10\n(3) - (1) = 2, left: 2, 10\n(10) / (3) = 10/3, left: 10/3, 1\n(9) - (9) = 0, left: 0, 3, 10\n(0) - (10) = -10, left: -10, 3\n(9) / (9) = 1, left: 1, 3, 10\n(9) + (9) = 18, left: 18, 3, 10\n(3) - (10) = -7, left: -7, 18\n(18) - (10) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((9 + 9) - 10))"}, {"input": "9 3 10 9\n", "output": "(9) - (10) = -1, left: -1, 3, 9\n(-1) / (9) = -1/9, left: -1/9, 3\n(-1/9) - (3) = -28/9, left: -28/9\n(-1/9) / (3) = -1/27, left: -1/27\n(3) * (-1/9) = -1/3, left: -1/3\n(3) / (-1/9) = -27, left: -27\n(3) - (-1/9) = 28/9, left: 28/9\n(3) + (-1/9) = 26/9, left: 26/9\n(9) + (-1) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 + (9 - 10)))"}, {"input": "9 3 10 9\n", "output": "(9) - (10) = -1, left: -1, 3, 9\n(-1) / (9) = -1/9, left: -1/9, 3\n(-1/9) - (3) = -28/9, left: -28/9\n(-1/9) / (3) = -1/27, left: -1/27\n(3) * (-1/9) = -1/3, left: -1/3\n(3) / (-1/9) = -27, left: -27\n(3) - (-1/9) = 28/9, left: 28/9\n(3) + (-1/9) = 26/9, left: 26/9\n(9) + (-1) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 + (9 - 10)))"}, {"input": "1 4 9 12\n", "output": "(12) / (1) = 12, left: 12, 4, 9\n(9) / (4) = 9/4, left: 9/4, 12\n(9/4) / (12) = 3/16, left: 3/16\n(9) - (4) = 5, left: 5, 12\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * 9) - (12 / 1))"}, {"input": "1 4 9 12\n", "output": "(9) + (12) = 21, left: 21, 1, 4\n(21) - (4) = 17, left: 17, 1\n(17) - (1) = 16, left: 16\n(4) - (21) = -17, left: -17, 1\n(4) + (21) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((4 + (9 + 12)) - 1)"}, {"input": "1 4 9 12\n", "output": "(12) - (1) = 11, left: 11, 4, 9\n(4) * (11) = 44, left: 44, 9\n(44) / (9) = 44/9, left: 44/9\n(44) - (9) = 35, left: 35\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (4 + (12 - 1)))"}, {"input": "1 4 9 12\n", "output": "(12) - (1) = 11, left: 11, 4, 9\n(4) * (11) = 44, left: 44, 9\n(9) - (44) = -35, left: -35\n(9) / (44) = 9/44, left: 9/44\n(44) / (9) = 44/9, left: 44/9\n(9) * (44) = 396, left: 396\n(44) - (9) = 35, left: 35\n(9) + (44) = 53, left: 53\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (4 + (12 - 1)))"}, {"input": "1 4 9 12\n", "output": "(4) - (1) = 3, left: 3, 9, 12\n(12) * (3) = 36, left: 36, 9\n(36) / (9) = 4, left: 4\n(9) / (36) = 1/4, left: 1/4\n(12) - (3) = 9, left: 9, 9\n(9) - (9) = 0, left: 0\n(3) / (12) = 1/4, left: 1/4, 9\n(9) - (1/4) = 35/4, left: 35/4\n(12) + (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (12 + (4 - 1)))"}, {"input": "1 4 9 12\n", "output": "(12) / (1) = 12, left: 12, 4, 9\n(9) / (4) = 9/4, left: 9/4, 12\n(12) * (9/4) = 27, left: 27\n(12) - (9/4) = 39/4, left: 39/4\n(9/4) - (12) = -39/4, left: -39/4\n(9) - (4) = 5, left: 5, 12\n(12) - (5) = 7, left: 7\n(12) / (5) = 12/5, left: 12/5\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * 9) - (12 / 1))"}, {"input": "1 4 9 12\n", "output": "(9) + (12) = 21, left: 21, 1, 4\n(4) / (21) = 4/21, left: 4/21, 1\n(21) - (4) = 17, left: 17, 1\n(17) - (1) = 16, left: 16\n(4) * (21) = 84, left: 84, 1\n(1) * (84) = 84, left: 84\n(4) - (21) = -17, left: -17, 1\n(-17) / (1) = -17, left: -17\n(4) + (21) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((4 + (9 + 12)) - 1)"}, {"input": "1 4 9 12\n", "output": "(12) - (1) = 11, left: 11, 4, 9\n(4) * (11) = 44, left: 44, 9\n(9) - (44) = -35, left: -35\n(9) / (44) = 9/44, left: 9/44\n(44) / (9) = 44/9, left: 44/9\n(9) * (44) = 396, left: 396\n(44) - (9) = 35, left: 35\n(9) + (44) = 53, left: 53\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (4 + (12 - 1)))"}, {"input": "1 4 9 12\n", "output": "(12) - (1) = 11, left: 11, 4, 9\n(4) * (11) = 44, left: 44, 9\n(9) - (44) = -35, left: -35\n(9) / (44) = 9/44, left: 9/44\n(44) / (9) = 44/9, left: 44/9\n(9) * (44) = 396, left: 396\n(44) - (9) = 35, left: 35\n(9) + (44) = 53, left: 53\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (4 + (12 - 1)))"}, {"input": "11 11 3 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 11, 3\n(11/5) / (11) = 1/5, left: 1/5, 3\n(3) / (1/5) = 15, left: 15\n(11) + (5) = 16, left: 16, 11, 3\n(3) - (16) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (3 - (11 + 5)))"}, {"input": "11 11 3 5\n", "output": "(5) / (11) = 5/11, left: 5/11, 11, 3\n(11) + (3) = 14, left: 14, 5/11\n(11) / (3) = 11/3, left: 11/3, 5/11\n(11) + (5) = 16, left: 16, 11, 3\n(16) - (3) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((11 + 5) - 3))"}, {"input": "11 11 3 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 11, 3\n(11) - (11/5) = 44/5, left: 44/5, 3\n(5) - (11) = -6, left: -6, 11, 3\n(11) + (5) = 16, left: 16, 11, 3\n(3) - (11) = -8, left: -8, 16\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((11 + 5) - (3 - 11))"}, {"input": "11 11 3 5\n", "output": "(3) / (11) = 3/11, left: 3/11, 11, 5\n(11) / (3) = 11/3, left: 11/3, 11, 5\n(11) * (11/3) = 121/3, left: 121/3, 5\n(11) - (3) = 8, left: 8, 11, 5\n(11) + (5) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((11 - 3) + (11 + 5))"}, {"input": "11 11 3 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 11, 3\n(11) * (11/5) = 121/5, left: 121/5, 3\n(11/5) - (3) = -4/5, left: -4/5, 11\n(11/5) / (3) = 11/15, left: 11/15, 11\n(3) + (11/5) = 26/5, left: 26/5, 11\n(11) / (26/5) = 55/26, left: 55/26\n(3) / (11/5) = 15/11, left: 15/11, 11\n(11) + (5) = 16, left: 16, 11, 3\n(3) - (16) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (3 - (11 + 5)))"}, {"input": "11 11 3 5\n", "output": "(11) - (5) = 6, left: 6, 11, 3\n(3) - (6) = -3, left: -3, 11\n(11) * (5) = 55, left: 55, 11, 3\n(11) + (55) = 66, left: 66, 3\n(5) / (11) = 5/11, left: 5/11, 11, 3\n(11) - (5/11) = 116/11, left: 116/11, 3\n(3) - (5/11) = 28/11, left: 28/11, 11\n(11) + (5) = 16, left: 16, 11, 3\n(3) - (16) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (3 - (11 + 5)))"}, {"input": "11 11 3 5\n", "output": "(3) / (11) = 3/11, left: 3/11, 11, 5\n(5) - (3/11) = 52/11, left: 52/11, 11\n(5) / (3/11) = 55/3, left: 55/3, 11\n(11) / (55/3) = 3/5, left: 3/5\n(55/3) - (11) = 22/3, left: 22/3\n(11) / (3) = 11/3, left: 11/3, 11, 5\n(5) - (11/3) = 4/3, left: 4/3, 11\n(11) - (3) = 8, left: 8, 11, 5\n(11) + (5) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((11 - 3) + (11 + 5))"}, {"input": "11 11 3 5\n", "output": "(5) / (11) = 5/11, left: 5/11, 11, 3\n(3) * (5/11) = 15/11, left: 15/11, 11\n(15/11) - (11) = -106/11, left: -106/11\n(5) - (11) = -6, left: -6, 11, 3\n(11) + (3) = 14, left: 14, -6\n(-6) + (14) = 8, left: 8\n(3) * (-6) = -18, left: -18, 11\n(11) + (5) = 16, left: 16, 11, 3\n(16) - (3) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((11 + 5) - 3))"}, {"input": "11 11 3 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 11, 3\n(11) - (11/5) = 44/5, left: 44/5, 3\n(11) / (11/5) = 5, left: 5, 3\n(11) - (5) = 6, left: 6, 11, 3\n(11) + (6) = 17, left: 17, 3\n(17) - (3) = 14, left: 14\n(5) / (11) = 5/11, left: 5/11, 11, 3\n(11) + (5) = 16, left: 16, 11, 3\n(3) - (11) = -8, left: -8, 16\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((11 + 5) - (3 - 11))"}, {"input": "12 7 6 8\n", "output": "(6) / (8) = 3/4, left: 3/4, 12, 7\n(7) * (3/4) = 21/4, left: 21/4, 12\n(6) * (8) = 48, left: 48, 12, 7\n(12) * (48) = 576, left: 576, 7\n(7) * (576) = 4032, left: 4032\n(8) - (6) = 2, left: 2, 12, 7\n(7) / (2) = 7/2, left: 7/2, 12\n(6) + (8) = 14, left: 14, 12, 7\n(7) / (14) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (7 / (6 + 8)))"}, {"input": "12 7 6 8\n", "output": "(12) + (8) = 20, left: 20, 7, 6\n(20) / (7) = 20/7, left: 20/7, 6\n(20/7) / (6) = 10/21, left: 10/21\n(8) - (12) = -4, left: -4, 7, 6\n(7) * (6) = 42, left: 42, -4\n(8) / (12) = 2/3, left: 2/3, 7, 6\n(12) - (8) = 4, left: 4, 7, 6\n(12) / (7) = 12/7, left: 12/7, 6, 8\n(6) + (8) = 14, left: 14, 12/7\n(12/7) * (14) = 24, left: 24\nreach 24! expression: ((12 / 7) * (6 + 8))"}, {"input": "12 7 6 8\n", "output": "(12) / (8) = 3/2, left: 3/2, 7, 6\n(6) * (3/2) = 9, left: 9, 7\n(12) - (8) = 4, left: 4, 7, 6\n(6) * (4) = 24, left: 24, 7\n(7) + (24) = 31, left: 31\n(8) / (12) = 2/3, left: 2/3, 7, 6\n(6) * (2/3) = 4, left: 4, 7\n(6) + (8) = 14, left: 14, 12, 7\n(12) / (7) = 12/7, left: 12/7, 14\n(14) * (12/7) = 24, left: 24\nreach 24! expression: ((6 + 8) * (12 / 7))"}, {"input": "12 7 6 8\n", "output": "(12) + (6) = 18, left: 18, 7, 8\n(12) / (6) = 2, left: 2, 7, 8\n(7) - (2) = 5, left: 5, 8\n(12) * (8) = 96, left: 96, 7, 6\n(12) + (7) = 19, left: 19, 6, 8\n(7) - (12) = -5, left: -5, 6, 8\n(6) + (-5) = 1, left: 1, 8\n(12) / (7) = 12/7, left: 12/7, 6, 8\n(6) + (8) = 14, left: 14, 12/7\n(12/7) * (14) = 24, left: 24\nreach 24! expression: ((12 / 7) * (6 + 8))"}, {"input": "12 7 6 8\n", "output": "(7) * (8) = 56, left: 56, 12, 6\n(7) + (8) = 15, left: 15, 12, 6\n(6) * (8) = 48, left: 48, 12, 7\n(8) / (6) = 4/3, left: 4/3, 12, 7\n(6) / (8) = 3/4, left: 3/4, 12, 7\n(12) * (3/4) = 9, left: 9, 7\n(7) - (9) = -2, left: -2\n(6) + (8) = 14, left: 14, 12, 7\n(12) / (7) = 12/7, left: 12/7, 14\n(14) * (12/7) = 24, left: 24\nreach 24! expression: ((6 + 8) * (12 / 7))"}, {"input": "10 12 1 8\n", "output": "(12) - (1) = 11, left: 11, 10, 8\n(10) - (11) = -1, left: -1, 8\n(11) / (8) = 11/8, left: 11/8, 10\n(12) * (1) = 12, left: 12, 10, 8\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((12 * 1) * (10 - 8))"}, {"input": "10 12 1 8\n", "output": "(10) * (1) = 10, left: 10, 12, 8\n(8) - (12) = -4, left: -4, 10\n(10) / (8) = 5/4, left: 5/4, 12\n(12) * (5/4) = 15, left: 15\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 * 1) - 8))"}, {"input": "10 12 1 8\n", "output": "(8) / (1) = 8, left: 8, 10, 12\n(10) * (12) = 120, left: 120, 8\n(8) - (12) = -4, left: -4, 10\n(10) - (8) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (8 / 1)))"}, {"input": "10 12 1 8\n", "output": "(10) - (12) = -2, left: -2, 1, 8\n(1) + (8) = 9, left: 9, -2\n(9) - (-2) = 11, left: 11\n(8) - (1) = 7, left: 7, -2\n(-2) * (7) = -14, left: -14\n(1) / (-2) = -1/2, left: -1/2, 8\n(1) * (-2) = -2, left: -2, 8\n(1) + (-2) = -1, left: -1, 8\n(1) - (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 - (10 - 12)))"}, {"input": "10 12 1 8\n", "output": "(8) / (1) = 8, left: 8, 10, 12\n(12) - (10) = 2, left: 2, 8\n(12) - (8) = 4, left: 4, 10\n(12) * (8) = 96, left: 96, 10\n(8) - (12) = -4, left: -4, 10\n(10) / (-4) = -5/2, left: -5/2\n(8) / (10) = 4/5, left: 4/5, 12\n(12) * (4/5) = 48/5, left: 48/5\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (8 / 1)))"}, {"input": "10 12 1 8\n", "output": "(12) - (1) = 11, left: 11, 10, 8\n(10) - (11) = -1, left: -1, 8\n(8) - (10) = -2, left: -2, 11\n(10) + (8) = 18, left: 18, 11\n(10) * (8) = 80, left: 80, 11\n(8) + (11) = 19, left: 19, 10\n(12) * (1) = 12, left: 12, 10, 8\n(10) / (8) = 5/4, left: 5/4, 12\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((12 * 1) * (10 - 8))"}, {"input": "10 12 1 8\n", "output": "(8) - (12) = -4, left: -4, 10, 1\n(8) / (12) = 2/3, left: 2/3, 10, 1\n(10) / (2/3) = 15, left: 15, 1\n(12) + (8) = 20, left: 20, 10, 1\n(20) - (10) = 10, left: 10, 1\n(12) * (8) = 96, left: 96, 10, 1\n(12) / (8) = 3/2, left: 3/2, 10, 1\n(1) - (10) = -9, left: -9, 12, 8\n(12) + (-9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (12 + (1 - 10)))"}, {"input": "10 12 1 8\n", "output": "(10) * (1) = 10, left: 10, 12, 8\n(8) / (12) = 2/3, left: 2/3, 10\n(12) * (8) = 96, left: 96, 10\n(10) + (96) = 106, left: 106\n(8) - (10) = -2, left: -2, 12\n(12) / (-2) = -6, left: -6\n(8) * (10) = 80, left: 80, 12\n(12) - (80) = -68, left: -68\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 * 1) - 8))"}, {"input": "11 8 7 12\n", "output": "(11) + (8) = 19, left: 19, 7, 12\n(7) * (19) = 133, left: 133, 12\n(12) / (133) = 12/133, left: 12/133\n(7) + (19) = 26, left: 26, 12\n(19) - (7) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((11 + 8) - 7))"}, {"input": "11 8 7 12\n", "output": "(7) - (12) = -5, left: -5, 11, 8\n(8) / (11) = 8/11, left: 8/11, -5\n(11) * (8) = 88, left: 88, -5\n(88) - (-5) = 93, left: 93\n(11) + (8) = 19, left: 19, -5\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((11 + 8) - (7 - 12))"}, {"input": "11 8 7 12\n", "output": "(7) / (11) = 7/11, left: 7/11, 8, 12\n(12) - (7/11) = 125/11, left: 125/11, 8\n(12) / (8) = 3/2, left: 3/2, 7/11\n(11) - (7) = 4, left: 4, 8, 12\n(12) / (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (12 / (11 - 7)))"}, {"input": "11 8 7 12\n", "output": "(11) * (7) = 77, left: 77, 8, 12\n(77) / (12) = 77/12, left: 77/12, 8\n(8) - (77) = -69, left: -69, 12\n(7) - (11) = -4, left: -4, 8, 12\n(-4) - (8) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - ((7 - 11) - 8))"}, {"input": "11 8 7 12\n", "output": "(7) - (12) = -5, left: -5, 11, 8\n(11) * (8) = 88, left: 88, -5\n(-5) - (88) = -93, left: -93\n(11) - (8) = 3, left: 3, -5\n(-5) * (3) = -15, left: -15\n(-5) - (3) = -8, left: -8\n(8) - (11) = -3, left: -3, -5\n(-3) - (-5) = 2, left: 2\n(11) + (8) = 19, left: 19, -5\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((11 + 8) - (7 - 12))"}, {"input": "11 8 7 12\n", "output": "(11) * (7) = 77, left: 77, 8, 12\n(12) + (77) = 89, left: 89, 8\n(12) * (77) = 924, left: 924, 8\n(924) - (8) = 916, left: 916\n(8) * (77) = 616, left: 616, 12\n(77) / (8) = 77/8, left: 77/8, 12\n(7) - (11) = -4, left: -4, 8, 12\n(-4) - (8) = -12, left: -12, 12\n(12) * (-12) = -144, left: -144\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - ((7 - 11) - 8))"}, {"input": "11 8 7 12\n", "output": "(11) + (8) = 19, left: 19, 7, 12\n(7) * (19) = 133, left: 133, 12\n(133) / (12) = 133/12, left: 133/12\n(19) / (7) = 19/7, left: 19/7, 12\n(12) - (19/7) = 65/7, left: 65/7\n(7) + (19) = 26, left: 26, 12\n(26) / (12) = 13/6, left: 13/6\n(26) - (12) = 14, left: 14\n(19) - (7) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((11 + 8) - 7))"}, {"input": "11 8 7 12\n", "output": "(8) * (7) = 56, left: 56, 11, 12\n(12) - (56) = -44, left: -44, 11\n(11) / (12) = 11/12, left: 11/12, 56\n(7) / (8) = 7/8, left: 7/8, 11, 12\n(7/8) - (12) = -89/8, left: -89/8, 11\n(11) / (-89/8) = -88/89, left: -88/89\n(8) - (7) = 1, left: 1, 11, 12\n(11) * (1) = 11, left: 11, 12\n(11) + (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (11 + (8 - 7)))"}, {"input": "11 8 7 12\n", "output": "(11) * (7) = 77, left: 77, 8, 12\n(8) + (77) = 85, left: 85, 12\n(7) / (11) = 7/11, left: 7/11, 8, 12\n(8) / (7/11) = 88/7, left: 88/7, 12\n(12) / (88/7) = 21/22, left: 21/22\n(8) * (12) = 96, left: 96, 7/11\n(96) / (7/11) = 1056/7, left: 1056/7\n(11) - (7) = 4, left: 4, 8, 12\n(12) / (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (12 / (11 - 7)))"}, {"input": "1 12 13 6\n", "output": "(6) / (13) = 6/13, left: 6/13, 1, 12\n(6/13) - (12) = -150/13, left: -150/13, 1\n(13) - (12) = 1, left: 1, 1, 6\n(13) - (1) = 12, left: 12, 12, 6\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((13 - 1) * (12 / 6))"}, {"input": "1 12 13 6\n", "output": "(13) * (6) = 78, left: 78, 1, 12\n(1) / (13) = 1/13, left: 1/13, 12, 6\n(12) - (6) = 6, left: 6, 1/13\n(13) - (1) = 12, left: 12, 12, 6\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((13 - 1) / (6 / 12))"}, {"input": "1 12 13 6\n", "output": "(13) + (6) = 19, left: 19, 1, 12\n(6) / (13) = 6/13, left: 6/13, 1, 12\n(12) * (6/13) = 72/13, left: 72/13, 1\n(12) / (6) = 2, left: 2, 1, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((12 / 6) * (13 - 1))"}, {"input": "1 12 13 6\n", "output": "(13) - (1) = 12, left: 12, 12, 6\n(12) + (12) = 24, left: 24, 6\n(12) / (12) = 1, left: 1, 6\n(1) / (6) = 1/6, left: 1/6\n(12) * (12) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * (13 - 1)) / 6)"}, {"input": "1 12 13 6\n", "output": "(13) + (6) = 19, left: 19, 1, 12\n(6) - (13) = -7, left: -7, 1, 12\n(12) * (13) = 156, left: 156, 1, 6\n(156) - (1) = 155, left: 155, 6\n(13) / (1) = 13, left: 13, 12, 6\n(1) - (13) = -12, left: -12, 12, 6\n(-12) - (6) = -18, left: -18, 12\n(13) - (1) = 12, left: 12, 12, 6\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((13 - 1) / (6 / 12))"}, {"input": "1 12 13 6\n", "output": "(6) - (1) = 5, left: 5, 12, 13\n(1) / (6) = 1/6, left: 1/6, 12, 13\n(12) / (13) = 12/13, left: 12/13, 1, 6\n(1) / (6) = 1/6, left: 1/6, 12/13\n(12) - (13) = -1, left: -1, 1, 6\n(1) - (13) = -12, left: -12, 12, 6\n(-12) - (6) = -18, left: -18, 12\n(13) - (1) = 12, left: 12, 12, 6\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((13 - 1) * (12 / 6))"}, {"input": "1 12 13 6\n", "output": "(12) - (1) = 11, left: 11, 13, 6\n(6) * (11) = 66, left: 66, 13\n(13) / (66) = 13/66, left: 13/66\n(13) / (6) = 13/6, left: 13/6, 1, 12\n(13) + (6) = 19, left: 19, 1, 12\n(1) - (19) = -18, left: -18, 12\n(13) - (6) = 7, left: 7, 1, 12\n(13) - (1) = 12, left: 12, 12, 6\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((13 - 1) * (12 / 6))"}, {"input": "1 12 13 6\n", "output": "(13) + (6) = 19, left: 19, 1, 12\n(6) / (13) = 6/13, left: 6/13, 1, 12\n(1) + (6/13) = 19/13, left: 19/13, 12\n(6/13) - (1) = -7/13, left: -7/13, 12\n(12) * (13) = 156, left: 156, 1, 6\n(6) / (156) = 1/26, left: 1/26, 1\n(12) + (13) = 25, left: 25, 1, 6\n(12) / (6) = 2, left: 2, 1, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((12 / 6) * (13 - 1))"}, {"input": "1 12 13 6\n", "output": "(13) - (1) = 12, left: 12, 12, 6\n(12) + (12) = 24, left: 24, 6\n(24) / (6) = 4, left: 4\n(12) / (12) = 1, left: 1, 6\n(12) - (12) = 0, left: 0, 6\n(0) - (6) = -6, left: -6\n(12) - (12) = 0, left: 0, 6\n(0) - (6) = -6, left: -6\n(12) * (12) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * (13 - 1)) / 6)"}, {"input": "9 5 7 4\n", "output": "(9) + (4) = 13, left: 13, 5, 7\n(5) + (7) = 12, left: 12, 13\n(13) / (5) = 13/5, left: 13/5, 7\n(4) / (9) = 4/9, left: 4/9, 5, 7\n(4) - (9) = -5, left: -5, 5, 7\n(7) + (-5) = 2, left: 2, 5\n(9) - (4) = 5, left: 5, 5, 7\n(9) * (4) = 36, left: 36, 5, 7\n(5) + (7) = 12, left: 12, 36\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (5 + 7))"}, {"input": "9 5 7 4\n", "output": "(7) / (9) = 7/9, left: 7/9, 5, 4\n(4) - (5) = -1, left: -1, 7/9\n(5) / (4) = 5/4, left: 5/4, 9, 7\n(5/4) - (9) = -31/4, left: -31/4, 7\n(7) + (-31/4) = -3/4, left: -3/4\n(5) * (4) = 20, left: 20, 9, 7\n(9) * (20) = 180, left: 180, 7\n(7) * (4) = 28, left: 28, 9, 5\n(5) - (9) = -4, left: -4, 28\n(28) + (-4) = 24, left: 24\nreach 24! expression: ((7 * 4) + (5 - 9))"}, {"input": "9 5 7 4\n", "output": "(9) * (5) = 45, left: 45, 7, 4\n(5) / (9) = 5/9, left: 5/9, 7, 4\n(4) + (5/9) = 41/9, left: 41/9, 7\n(4) / (7) = 4/7, left: 4/7, 5/9\n(5/9) - (4/7) = -1/63, left: -1/63\n(7) - (5/9) = 58/9, left: 58/9, 4\n(5) - (9) = -4, left: -4, 7, 4\n(4) - (7) = -3, left: -3, -4\n(7) * (4) = 28, left: 28, -4\n(-4) + (28) = 24, left: 24\nreach 24! expression: ((5 - 9) + (7 * 4))"}, {"input": "9 5 7 4\n", "output": "(7) - (5) = 2, left: 2, 9, 4\n(4) / (2) = 2, left: 2, 9\n(5) * (7) = 35, left: 35, 9, 4\n(9) + (35) = 44, left: 44, 4\n(4) + (44) = 48, left: 48\n(5) + (7) = 12, left: 12, 9, 4\n(9) + (4) = 13, left: 13, 12\n(9) - (4) = 5, left: 5, 12\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (5 + 7))"}, {"input": "9 5 7 4\n", "output": "(9) * (7) = 63, left: 63, 5, 4\n(9) - (7) = 2, left: 2, 5, 4\n(2) - (5) = -3, left: -3, 4\n(7) / (9) = 7/9, left: 7/9, 5, 4\n(9) * (4) = 36, left: 36, 5, 7\n(7) / (36) = 7/36, left: 7/36, 5\n(7) - (36) = -29, left: -29, 5\n(-29) - (5) = -34, left: -34\n(36) - (7) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: (((9 * 4) - 7) - 5)"}, {"input": "9 5 7 4\n", "output": "(9) + (7) = 16, left: 16, 5, 4\n(5) * (4) = 20, left: 20, 16\n(7) - (9) = -2, left: -2, 5, 4\n(4) - (5) = -1, left: -1, 9, 7\n(-1) / (7) = -1/7, left: -1/7, 9\n(5) + (4) = 9, left: 9, 9, 7\n(4) / (5) = 4/5, left: 4/5, 9, 7\n(7) - (9) = -2, left: -2, 4/5\n(5) * (4) = 20, left: 20, 9, 7\n(7) * (20) = 140, left: 140, 9\n(9) / (140) = 9/140, left: 9/140\n(7) * (4) = 28, left: 28, 9, 5\n(5) - (9) = -4, left: -4, 28\n(28) + (-4) = 24, left: 24\nreach 24! expression: ((7 * 4) + (5 - 9))"}, {"input": "9 5 7 4\n", "output": "(9) + (4) = 13, left: 13, 5, 7\n(13) / (7) = 13/7, left: 13/7, 5\n(9) / (4) = 9/4, left: 9/4, 5, 7\n(5) - (7) = -2, left: -2, 9/4\n(4) / (9) = 4/9, left: 4/9, 5, 7\n(4/9) / (5) = 4/45, left: 4/45, 7\n(4) - (9) = -5, left: -5, 5, 7\n(9) - (4) = 5, left: 5, 5, 7\n(7) / (5) = 7/5, left: 7/5, 5\n(5) + (5) = 10, left: 10, 7\n(7) - (10) = -3, left: -3\n(9) * (4) = 36, left: 36, 5, 7\n(5) + (7) = 12, left: 12, 36\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (5 + 7))"}, {"input": "10 3 1 11\n", "output": "(3) / (10) = 3/10, left: 3/10, 1, 11\n(11) / (1) = 11, left: 11, 3/10\n(3) - (10) = -7, left: -7, 1, 11\n(10) + (3) = 13, left: 13, 1, 11\n(11) + (13) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (11 + (10 + 3)))"}, {"input": "10 3 1 11\n", "output": "(1) * (11) = 11, left: 11, 10, 3\n(10) / (3) = 10/3, left: 10/3, 11\n(10/3) / (11) = 10/33, left: 10/33\n(11) + (10/3) = 43/3, left: 43/3\n(10) + (3) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((1 * 11) + (10 + 3))"}, {"input": "10 3 1 11\n", "output": "(11) / (10) = 11/10, left: 11/10, 3, 1\n(11/10) / (3) = 11/30, left: 11/30, 1\n(3) * (1) = 3, left: 3, 11/10\n(10) + (11) = 21, left: 21, 3, 1\n(1) * (21) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (1 * (10 + 11)))"}, {"input": "10 3 1 11\n", "output": "(10) - (1) = 9, left: 9, 3, 11\n(11) / (3) = 11/3, left: 11/3, 9\n(9) - (11/3) = 16/3, left: 16/3\n(11/3) - (9) = -16/3, left: -16/3\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * 11) - (10 - 1))"}, {"input": "10 3 1 11\n", "output": "(3) / (11) = 3/11, left: 3/11, 10, 1\n(3/11) / (1) = 3/11, left: 3/11, 10\n(10) / (1) = 10, left: 10, 3/11\n(3) * (11) = 33, left: 33, 10, 1\n(1) + (33) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((1 + (3 * 11)) - 10)"}, {"input": "10 3 1 11\n", "output": "(3) / (11) = 3/11, left: 3/11, 10, 1\n(3/11) / (1) = 3/11, left: 3/11, 10\n(3/11) - (1) = -8/11, left: -8/11, 10\n(1) + (3/11) = 14/11, left: 14/11, 10\n(10) + (14/11) = 124/11, left: 124/11\n(10) * (3/11) = 30/11, left: 30/11, 1\n(10) - (3/11) = 107/11, left: 107/11, 1\n(3) * (11) = 33, left: 33, 10, 1\n(1) + (33) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((1 + (3 * 11)) - 10)"}, {"input": "10 3 1 11\n", "output": "(3) / (10) = 3/10, left: 3/10, 1, 11\n(1) + (3/10) = 13/10, left: 13/10, 11\n(10) - (3) = 7, left: 7, 1, 11\n(1) + (7) = 8, left: 8, 11\n(10) / (3) = 10/3, left: 10/3, 1, 11\n(10) * (3) = 30, left: 30, 1, 11\n(30) / (1) = 30, left: 30, 11\n(10) + (3) = 13, left: 13, 1, 11\n(11) + (13) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (11 + (10 + 3)))"}, {"input": "10 3 1 11\n", "output": "(11) / (10) = 11/10, left: 11/10, 3, 1\n(11/10) / (1) = 11/10, left: 11/10, 3\n(1) / (11/10) = 10/11, left: 10/11, 3\n(11) - (10) = 1, left: 1, 3, 1\n(10) * (11) = 110, left: 110, 3, 1\n(1) - (110) = -109, left: -109, 3\n(1) + (110) = 111, left: 111, 3\n(10) + (11) = 21, left: 21, 3, 1\n(1) * (21) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (1 * (10 + 11)))"}, {"input": "10 3 1 11\n", "output": "(1) * (11) = 11, left: 11, 10, 3\n(10) / (3) = 10/3, left: 10/3, 11\n(11) * (10/3) = 110/3, left: 110/3\n(11) - (10/3) = 23/3, left: 23/3\n(10/3) / (11) = 10/33, left: 10/33\n(11) + (10/3) = 43/3, left: 43/3\n(11) / (10/3) = 33/10, left: 33/10\n(10/3) - (11) = -23/3, left: -23/3\n(10) + (3) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((1 * 11) + (10 + 3))"}, {"input": "10 3 1 11\n", "output": "(10) - (1) = 9, left: 9, 3, 11\n(3) / (11) = 3/11, left: 3/11, 9\n(3/11) / (9) = 1/33, left: 1/33\n(9) + (3/11) = 102/11, left: 102/11\n(11) / (3) = 11/3, left: 11/3, 9\n(9) + (11/3) = 38/3, left: 38/3\n(9) - (11/3) = 16/3, left: 16/3\n(9) / (11/3) = 27/11, left: 27/11\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * 11) - (10 - 1))"}, {"input": "10 3 1 11\n", "output": "(1) * (11) = 11, left: 11, 10, 3\n(10) / (3) = 10/3, left: 10/3, 11\n(11) * (10/3) = 110/3, left: 110/3\n(11) - (10/3) = 23/3, left: 23/3\n(10/3) / (11) = 10/33, left: 10/33\n(11) + (10/3) = 43/3, left: 43/3\n(11) / (10/3) = 33/10, left: 33/10\n(10/3) - (11) = -23/3, left: -23/3\n(10) + (3) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((1 * 11) + (10 + 3))"}, {"input": "10 3 1 11\n", "output": "(1) * (11) = 11, left: 11, 10, 3\n(10) / (3) = 10/3, left: 10/3, 11\n(11) * (10/3) = 110/3, left: 110/3\n(11) - (10/3) = 23/3, left: 23/3\n(10/3) / (11) = 10/33, left: 10/33\n(11) + (10/3) = 43/3, left: 43/3\n(11) / (10/3) = 33/10, left: 33/10\n(10/3) - (11) = -23/3, left: -23/3\n(10) + (3) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((1 * 11) + (10 + 3))"}, {"input": "12 8 4 3\n", "output": "(12) * (3) = 36, left: 36, 8, 4\n(4) + (36) = 40, left: 40, 8\n(40) - (8) = 32, left: 32\n(40) / (8) = 5, left: 5\n(36) - (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: (((12 * 3) - 4) - 8)"}, {"input": "12 8 4 3\n", "output": "(12) * (3) = 36, left: 36, 8, 4\n(4) + (36) = 40, left: 40, 8\n(8) - (40) = -32, left: -32\n(40) - (8) = 32, left: 32\n(8) + (40) = 48, left: 48\n(40) / (8) = 5, left: 5\n(8) / (40) = 1/5, left: 1/5\n(36) - (4) = 32, left: 32, 8\n(8) * (32) = 256, left: 256\n(32) - (8) = 24, left: 24\nreach 24! expression: (((12 * 3) - 4) - 8)"}, {"input": "12 8 4 3\n", "output": "(12) - (8) = 4, left: 4, 4, 3\n(4) - (3) = 1, left: 1, 4\n(3) + (4) = 7, left: 7, 4\n(4) * (7) = 28, left: 28\n(4) / (7) = 4/7, left: 4/7\n(3) * (4) = 12, left: 12, 4\n(4) * (4) = 16, left: 16, 3\n(3) * (16) = 48, left: 48\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (12 - 8)))"}, {"input": "12 8 4 3\n", "output": "(4) + (3) = 7, left: 7, 12, 8\n(8) * (7) = 56, left: 56, 12\n(8) + (7) = 15, left: 15, 12\n(12) * (8) = 96, left: 96, 7\n(7) / (96) = 7/96, left: 7/96\n(3) - (4) = -1, left: -1, 12, 8\n(4) * (3) = 12, left: 12, 12, 8\n(4) / (3) = 4/3, left: 4/3, 12, 8\n(12) * (4/3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (12 * (4 / 3)))"}, {"input": "12 8 4 3\n", "output": "(12) * (8) = 96, left: 96, 4, 3\n(4) + (3) = 7, left: 7, 96\n(3) + (96) = 99, left: 99, 4\n(8) - (12) = -4, left: -4, 4, 3\n(4) * (3) = 12, left: 12, -4\n(4) - (3) = 1, left: 1, -4\n(3) / (4) = 3/4, left: 3/4, -4\n(-4) - (3/4) = -19/4, left: -19/4\n(4) - (-4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 - (8 - 12)))"}, {"input": "12 8 4 3\n", "output": "(4) + (3) = 7, left: 7, 12, 8\n(7) - (12) = -5, left: -5, 8\n(12) - (7) = 5, left: 5, 8\n(12) + (7) = 19, left: 19, 8\n(12) / (8) = 3/2, left: 3/2, 7\n(12) + (8) = 20, left: 20, 7\n(8) / (12) = 2/3, left: 2/3, 7\n(3) / (4) = 3/4, left: 3/4, 12, 8\n(12) / (3/4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (12 / (3 / 4)))"}, {"input": "12 8 4 3\n", "output": "(12) * (3) = 36, left: 36, 8, 4\n(4) + (36) = 40, left: 40, 8\n(8) - (40) = -32, left: -32\n(40) - (8) = 32, left: 32\n(8) * (40) = 320, left: 320\n(8) + (40) = 48, left: 48\n(40) / (8) = 5, left: 5\n(8) / (40) = 1/5, left: 1/5\n(36) - (4) = 32, left: 32, 8\n(8) * (32) = 256, left: 256\n(32) - (8) = 24, left: 24\nreach 24! expression: (((12 * 3) - 4) - 8)"}, {"input": "12 8 4 3\n", "output": "(12) * (3) = 36, left: 36, 8, 4\n(4) + (36) = 40, left: 40, 8\n(8) - (40) = -32, left: -32\n(40) - (8) = 32, left: 32\n(8) * (40) = 320, left: 320\n(8) + (40) = 48, left: 48\n(40) / (8) = 5, left: 5\n(8) / (40) = 1/5, left: 1/5\n(36) - (4) = 32, left: 32, 8\n(8) * (32) = 256, left: 256\n(32) - (8) = 24, left: 24\nreach 24! expression: (((12 * 3) - 4) - 8)"}, {"input": "1 6 9 6\n", "output": "(6) / (9) = 2/3, left: 2/3, 1, 6\n(1) * (2/3) = 2/3, left: 2/3, 6\n(2/3) / (6) = 1/9, left: 1/9, 1\n(6) - (2/3) = 16/3, left: 16/3, 1\n(1) / (16/3) = 3/16, left: 3/16\n(6) / (2/3) = 9, left: 9, 1\n(6) - (9) = -3, left: -3, 1, 6\n(6) / (-3) = -2, left: -2, 1\n(1) - (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 - (6 - 9)))"}, {"input": "1 6 9 6\n", "output": "(6) - (9) = -3, left: -3, 1, 6\n(6) / (1) = 6, left: 6, -3\n(1) + (6) = 7, left: 7, -3\n(1) / (6) = 1/6, left: 1/6, -3\n(-3) - (1/6) = -19/6, left: -19/6\n(6) - (1) = 5, left: 5, -3\n(-3) / (6) = -1/2, left: -1/2, 1\n(-3) / (1) = -3, left: -3, 6\n(1) - (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 - (6 - 9)))"}, {"input": "1 6 9 6\n", "output": "(6) / (1) = 6, left: 6, 6, 9\n(9) - (6) = 3, left: 3, 6\n(6) + (3) = 9, left: 9\n(1) * (6) = 6, left: 6, 6, 9\n(6) - (1) = 5, left: 5, 6, 9\n(6) + (5) = 11, left: 11, 9\n(9) * (5) = 45, left: 45, 6\n(5) - (9) = -4, left: -4, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (6 - 1)))"}, {"input": "1 6 9 6\n", "output": "(1) - (6) = -5, left: -5, 9, 6\n(6) / (9) = 2/3, left: 2/3, -5\n(-5) / (2/3) = -15/2, left: -15/2\n(9) * (6) = 54, left: 54, -5\n(-5) * (54) = -270, left: -270\n(9) / (6) = 3/2, left: 3/2, -5\n(-5) / (6) = -5/6, left: -5/6, 9\n(6) + (-5) = 1, left: 1, 9\n(9) + (-5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 + (1 - 6)))"}, {"input": "1 6 9 6\n", "output": "(1) + (6) = 7, left: 7, 6, 9\n(9) - (6) = 3, left: 3, 7\n(3) - (7) = -4, left: -4\n(6) - (9) = -3, left: -3, 7\n(-3) - (7) = -10, left: -10\n(7) - (6) = 1, left: 1, 9\n(9) * (1) = 9, left: 9\n(6) - (1) = 5, left: 5, 6, 9\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (6 - 1)))"}, {"input": "1 6 9 6\n", "output": "(6) / (1) = 6, left: 6, 6, 9\n(6) - (6) = 0, left: 0, 9\n(6) + (6) = 12, left: 12, 9\n(9) / (12) = 3/4, left: 3/4\n(6) / (6) = 1, left: 1, 9\n(9) + (6) = 15, left: 15, 6\n(1) * (6) = 6, left: 6, 6, 9\n(6) / (6) = 1, left: 1, 9\n(6) / (9) = 2/3, left: 2/3, 6\n(6) - (1) = 5, left: 5, 6, 9\n(6) - (9) = -3, left: -3, 5\n(6) - (5) = 1, left: 1, 9\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (6 - 1)))"}, {"input": "13 7 3 13\n", "output": "(13) * (13) = 169, left: 169, 7, 3\n(169) - (7) = 162, left: 162, 3\n(3) - (7) = -4, left: -4, 169\n(13) / (13) = 1, left: 1, 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "13 7 3 13\n", "output": "(7) * (3) = 21, left: 21, 13, 13\n(21) / (13) = 21/13, left: 21/13, 13\n(13) / (3) = 13/3, left: 13/3, 13, 7\n(3) / (13) = 3/13, left: 3/13, 13, 7\n(13) + (7) = 20, left: 20, 3, 13\n(3) * (13) = 39, left: 39, 20\n(13) / (7) = 13/7, left: 13/7, 3, 13\n(13) / (13) = 1, left: 1, 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "13 7 3 13\n", "output": "(13) * (13) = 169, left: 169, 7, 3\n(169) - (7) = 162, left: 162, 3\n(7) - (3) = 4, left: 4, 169\n(169) + (4) = 173, left: 173\n(13) - (13) = 0, left: 0, 7, 3\n(7) / (3) = 7/3, left: 7/3, 0\n(0) * (7/3) = 0, left: 0\n(13) / (13) = 1, left: 1, 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "13 7 3 13\n", "output": "(7) - (3) = 4, left: 4, 13, 13\n(13) * (13) = 169, left: 169, 4\n(7) * (3) = 21, left: 21, 13, 13\n(13) - (21) = -8, left: -8, 13\n(7) + (3) = 10, left: 10, 13, 13\n(3) - (7) = -4, left: -4, 13, 13\n(13) / (-4) = -13/4, left: -13/4, 13\n(13) / (13) = 1, left: 1, 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "13 7 3 13\n", "output": "(13) - (7) = 6, left: 6, 13, 3\n(13) / (7) = 13/7, left: 13/7, 13, 3\n(7) * (13) = 91, left: 91, 13, 3\n(7) / (13) = 7/13, left: 7/13, 13, 3\n(13) - (7) = 6, left: 6, 3, 13\n(13) / (3) = 13/3, left: 13/3, 7, 13\n(7) * (3) = 21, left: 21, 13, 13\n(13) / (13) = 1, left: 1, 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "13 7 3 13\n", "output": "(13) + (13) = 26, left: 26, 7, 3\n(3) * (26) = 78, left: 78, 7\n(13) - (13) = 0, left: 0, 7, 3\n(7) + (0) = 7, left: 7, 3\n(7) * (3) = 21, left: 21, 0\n(13) - (13) = 0, left: 0, 7, 3\n(7) * (0) = 0, left: 0, 3\n(13) / (13) = 1, left: 1, 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "5 10 2 7\n", "output": "(5) + (7) = 12, left: 12, 10, 2\n(10) / (2) = 5, left: 5, 12\n(12) / (5) = 12/5, left: 12/5\n(12) + (5) = 17, left: 17\n(10) + (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((5 + 7) + (10 + 2))"}, {"input": "5 10 2 7\n", "output": "(10) - (2) = 8, left: 8, 5, 7\n(8) / (5) = 8/5, left: 8/5, 7\n(7) + (8) = 15, left: 15, 5\n(7) * (8) = 56, left: 56, 5\n(10) / (2) = 5, left: 5, 5, 7\n(5) / (7) = 5/7, left: 5/7, 5\n(7) - (5) = 2, left: 2, 5\n(10) + (2) = 12, left: 12, 5, 7\n(5) + (7) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((10 + 2) + (5 + 7))"}, {"input": "5 10 2 7\n", "output": "(5) - (10) = -5, left: -5, 2, 7\n(7) / (2) = 7/2, left: 7/2, -5\n(2) + (7) = 9, left: 9, -5\n(2) / (7) = 2/7, left: 2/7, -5\n(2/7) / (-5) = -2/35, left: -2/35\n(7) - (2) = 5, left: 5, -5\n(7) / (-5) = -7/5, left: -7/5, 2\n(2) - (-7/5) = 17/5, left: 17/5\n(7) - (-5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 - (5 - 10)))"}, {"input": "5 10 2 7\n", "output": "(5) + (7) = 12, left: 12, 10, 2\n(10) / (2) = 5, left: 5, 12\n(5) - (12) = -7, left: -7\n(12) / (5) = 12/5, left: 12/5\n(12) + (5) = 17, left: 17\n(5) / (12) = 5/12, left: 5/12\n(10) + (2) = 12, left: 12, 12\n(12) * (12) = 144, left: 144\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: ((5 + 7) + (10 + 2))"}, {"input": "5 10 2 7\n", "output": "(2) * (7) = 14, left: 14, 5, 10\n(5) - (14) = -9, left: -9, 10\n(10) - (14) = -4, left: -4, 5\n(7) - (2) = 5, left: 5, 5, 10\n(7) / (2) = 7/2, left: 7/2, 5, 10\n(5) + (7/2) = 17/2, left: 17/2, 10\n(10) + (17/2) = 37/2, left: 37/2\n(2) + (7) = 9, left: 9, 5, 10\n(5) + (10) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((2 + 7) + (5 + 10))"}, {"input": "5 10 2 7\n", "output": "(5) / (7) = 5/7, left: 5/7, 10, 2\n(2) / (5/7) = 14/5, left: 14/5, 10\n(10) / (14/5) = 25/7, left: 25/7\n(2) + (5/7) = 19/7, left: 19/7, 10\n(2) - (5/7) = 9/7, left: 9/7, 10\n(10) * (5/7) = 50/7, left: 50/7, 2\n(2) * (50/7) = 100/7, left: 100/7\n(5) + (7) = 12, left: 12, 10, 2\n(10) + (12) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (10 + (5 + 7)))"}, {"input": "2 8 10 3\n", "output": "(2) + (8) = 10, left: 10, 10, 3\n(10) / (3) = 10/3, left: 10/3, 10\n(3) / (10) = 3/10, left: 3/10, 10\n(2) - (8) = -6, left: -6, 10, 3\n(10) * (3) = 30, left: 30, -6\n(-6) + (30) = 24, left: 24\nreach 24! expression: ((2 - 8) + (10 * 3))"}, {"input": "2 8 10 3\n", "output": "(2) + (8) = 10, left: 10, 10, 3\n(10) - (10) = 0, left: 0, 3\n(10) * (3) = 30, left: 30, 10\n(10) - (3) = 7, left: 7, 10\n(7) / (10) = 7/10, left: 7/10\n(3) - (10) = -7, left: -7, 10\n(3) - (10) = -7, left: -7, 10\n(2) - (8) = -6, left: -6, 10, 3\n(10) * (3) = 30, left: 30, -6\n(-6) + (30) = 24, left: 24\nreach 24! expression: ((2 - 8) + (10 * 3))"}, {"input": "2 8 10 3\n", "output": "(2) / (10) = 1/5, left: 1/5, 8, 3\n(8) + (3) = 11, left: 11, 1/5\n(1/5) - (11) = -54/5, left: -54/5\n(2) * (10) = 20, left: 20, 8, 3\n(2) - (10) = -8, left: -8, 8, 3\n(10) / (2) = 5, left: 5, 8, 3\n(2) / (8) = 1/4, left: 1/4, 10, 3\n(8) - (2) = 6, left: 6, 10, 3\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (8 - 2))"}, {"input": "2 8 10 3\n", "output": "(8) / (3) = 8/3, left: 8/3, 2, 10\n(8) - (3) = 5, left: 5, 2, 10\n(8) * (3) = 24, left: 24, 2, 10\n(2) / (3) = 2/3, left: 2/3, 8, 10\n(2) + (3) = 5, left: 5, 8, 10\n(10) - (8) = 2, left: 2, 5\n(10) * (5) = 50, left: 50, 8\n(2) * (3) = 6, left: 6, 8, 10\n(10) + (6) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (10 + (2 * 3)))"}, {"input": "2 8 10 3\n", "output": "(10) / (8) = 5/4, left: 5/4, 2, 3\n(5/4) - (3) = -7/4, left: -7/4, 2\n(-7/4) - (2) = -15/4, left: -15/4\n(8) * (10) = 80, left: 80, 2, 3\n(3) / (80) = 3/80, left: 3/80, 2\n(2) * (3/80) = 3/40, left: 3/40\n(2) * (80) = 160, left: 160, 3\n(8) + (10) = 18, left: 18, 2, 3\n(2) * (3) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((8 + 10) + (2 * 3))"}, {"input": "2 8 10 3\n", "output": "(10) - (3) = 7, left: 7, 2, 8\n(7) - (8) = -1, left: -1, 2\n(10) + (3) = 13, left: 13, 2, 8\n(8) - (2) = 6, left: 6, 13\n(2) - (13) = -11, left: -11, 8\n(13) / (2) = 13/2, left: 13/2, 8\n(8) + (13) = 21, left: 21, 2\n(10) * (3) = 30, left: 30, 2, 8\n(8) - (2) = 6, left: 6, 30\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (8 - 2))"}, {"input": "8 9 8 6\n", "output": "(8) * (6) = 48, left: 48, 8, 9\n(8) + (9) = 17, left: 17, 48\n(48) / (17) = 48/17, left: 48/17\n(9) - (8) = 1, left: 1, 48\n(8) * (9) = 72, left: 72, 48\n(72) - (48) = 24, left: 24\nreach 24! expression: ((8 * 9) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) * (6) = 48, left: 48, 8, 9\n(9) / (8) = 9/8, left: 9/8, 48\n(48) + (9/8) = 393/8, left: 393/8\n(8) - (9) = -1, left: -1, 48\n(8) + (9) = 17, left: 17, 48\n(17) / (48) = 17/48, left: 17/48\n(9) - (8) = 1, left: 1, 48\n(1) - (48) = -47, left: -47\n(8) * (9) = 72, left: 72, 48\n(72) - (48) = 24, left: 24\nreach 24! expression: ((8 * 9) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) + (6) = 14, left: 14, 9, 8\n(8) - (9) = -1, left: -1, 14\n(8) / (6) = 4/3, left: 4/3, 9, 8\n(4/3) - (8) = -20/3, left: -20/3, 9\n(9) + (4/3) = 31/3, left: 31/3, 8\n(6) - (8) = -2, left: -2, 9, 8\n(-2) - (9) = -11, left: -11, 8\n(8) * (6) = 48, left: 48, 9, 8\n(9) * (8) = 72, left: 72, 48\n(72) - (48) = 24, left: 24\nreach 24! expression: ((9 * 8) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) - (6) = 2, left: 2, 9, 8\n(9) / (2) = 9/2, left: 9/2, 8\n(8) * (2) = 16, left: 16, 9\n(9) / (8) = 9/8, left: 9/8, 2\n(8) + (6) = 14, left: 14, 9, 8\n(8) * (6) = 48, left: 48, 9, 8\n(9) + (48) = 57, left: 57, 8\n(8) * (57) = 456, left: 456\n(9) * (8) = 72, left: 72, 48\n(72) - (48) = 24, left: 24\nreach 24! expression: ((9 * 8) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) / (8) = 1, left: 1, 9, 6\n(8) * (8) = 64, left: 64, 9, 6\n(6) / (9) = 2/3, left: 2/3, 64\n(8) - (8) = 0, left: 0, 9, 6\n(6) - (9) = -3, left: -3, 0\n(8) / (8) = 1, left: 1, 9, 6\n(6) - (1) = 5, left: 5, 9\n(8) + (8) = 16, left: 16, 9, 6\n(6) / (16) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: (9 / (6 / (8 + 8)))"}, {"input": "8 9 8 6\n", "output": "(9) / (8) = 9/8, left: 9/8, 8, 6\n(6) / (8) = 3/4, left: 3/4, 9/8\n(8) + (9) = 17, left: 17, 8, 6\n(17) - (6) = 11, left: 11, 8\n(17) - (8) = 9, left: 9, 6\n(8) - (17) = -9, left: -9, 6\n(8) * (9) = 72, left: 72, 8, 6\n(8) + (72) = 80, left: 80, 6\n(8) * (6) = 48, left: 48, 72\n(72) - (48) = 24, left: 24\nreach 24! expression: ((8 * 9) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) - (6) = 2, left: 2, 9, 8\n(2) - (9) = -7, left: -7, 8\n(8) - (-7) = 15, left: 15\n(8) / (2) = 4, left: 4, 9\n(8) + (2) = 10, left: 10, 9\n(8) + (6) = 14, left: 14, 9, 8\n(8) * (6) = 48, left: 48, 9, 8\n(9) + (48) = 57, left: 57, 8\n(8) - (57) = -49, left: -49\n(8) * (48) = 384, left: 384, 9\n(48) - (8) = 40, left: 40, 9\n(8) / (48) = 1/6, left: 1/6, 9\n(9) * (8) = 72, left: 72, 48\n(72) - (48) = 24, left: 24\nreach 24! expression: ((9 * 8) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) - (6) = 2, left: 2, 9, 8\n(9) - (2) = 7, left: 7, 8\n(8) + (6) = 14, left: 14, 9, 8\n(9) * (8) = 72, left: 72, 14\n(14) - (9) = 5, left: 5, 8\n(6) / (8) = 3/4, left: 3/4, 9, 8\n(9) - (8) = 1, left: 1, 3/4\n(8) / (6) = 4/3, left: 4/3, 9, 8\n(9) / (8) = 9/8, left: 9/8, 4/3\n(6) - (8) = -2, left: -2, 9, 8\n(8) - (9) = -1, left: -1, -2\n(8) * (6) = 48, left: 48, 9, 8\n(9) * (8) = 72, left: 72, 48\n(72) - (48) = 24, left: 24\nreach 24! expression: ((9 * 8) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) / (8) = 1, left: 1, 9, 6\n(1) - (9) = -8, left: -8, 6\n(6) - (-8) = 14, left: 14\n(6) - (1) = 5, left: 5, 9\n(6) * (1) = 6, left: 6, 9\n(8) * (8) = 64, left: 64, 9, 6\n(8) - (8) = 0, left: 0, 9, 6\n(9) / (6) = 3/2, left: 3/2, 0\n(6) - (9) = -3, left: -3, 0\n(8) / (8) = 1, left: 1, 9, 6\n(8) + (8) = 16, left: 16, 9, 6\n(6) + (16) = 22, left: 22, 9\n(6) / (16) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: (9 / (6 / (8 + 8)))"}, {"input": "9 10 12 7\n", "output": "(7) / (10) = 7/10, left: 7/10, 9, 12\n(10) / (7) = 10/7, left: 10/7, 9, 12\n(10/7) - (9) = -53/7, left: -53/7, 12\n(10) - (7) = 3, left: 3, 9, 12\n(9) + (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (10 - 7)))"}, {"input": "9 10 12 7\n", "output": "(7) - (12) = -5, left: -5, 9, 10\n(9) - (10) = -1, left: -1, -5\n(-5) - (-1) = -4, left: -4\n(9) / (10) = 9/10, left: 9/10, -5\n(9) + (10) = 19, left: 19, -5\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((9 + 10) - (7 - 12))"}, {"input": "9 10 12 7\n", "output": "(12) / (10) = 6/5, left: 6/5, 9, 7\n(9) - (7) = 2, left: 2, 6/5\n(10) * (12) = 120, left: 120, 9, 7\n(10) + (12) = 22, left: 22, 9, 7\n(7) - (22) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (7 - (10 + 12)))"}, {"input": "9 10 12 7\n", "output": "(12) * (7) = 84, left: 84, 9, 10\n(10) / (84) = 5/42, left: 5/42, 9\n(9) / (10) = 9/10, left: 9/10, 84\n(7) - (12) = -5, left: -5, 9, 10\n(9) + (10) = 19, left: 19, -5\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((9 + 10) - (7 - 12))"}, {"input": "9 10 12 7\n", "output": "(7) / (10) = 7/10, left: 7/10, 9, 12\n(12) + (7/10) = 127/10, left: 127/10, 9\n(127/10) - (9) = 37/10, left: 37/10\n(10) / (7) = 10/7, left: 10/7, 9, 12\n(10/7) / (12) = 5/42, left: 5/42, 9\n(10) * (7) = 70, left: 70, 9, 12\n(12) / (9) = 4/3, left: 4/3, 70\n(10) - (7) = 3, left: 3, 9, 12\n(9) + (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (10 - 7)))"}, {"input": "9 10 12 7\n", "output": "(12) / (10) = 6/5, left: 6/5, 9, 7\n(9) - (6/5) = 39/5, left: 39/5, 7\n(7) * (39/5) = 273/5, left: 273/5\n(10) * (12) = 120, left: 120, 9, 7\n(120) - (9) = 111, left: 111, 7\n(7) + (120) = 127, left: 127, 9\n(9) - (7) = 2, left: 2, 120\n(10) + (12) = 22, left: 22, 9, 7\n(7) - (22) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (7 - (10 + 12)))"}, {"input": "9 10 12 7\n", "output": "(7) - (12) = -5, left: -5, 9, 10\n(10) - (9) = 1, left: 1, -5\n(1) - (-5) = 6, left: 6\n(9) - (10) = -1, left: -1, -5\n(-5) / (-1) = 5, left: 5\n(9) / (10) = 9/10, left: 9/10, -5\n(9) + (10) = 19, left: 19, -5\n(-5) * (19) = -95, left: -95\n(19) / (-5) = -19/5, left: -19/5\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((9 + 10) - (7 - 12))"}, {"input": "9 10 12 7\n", "output": "(12) * (7) = 84, left: 84, 9, 10\n(10) / (84) = 5/42, left: 5/42, 9\n(9) - (10) = -1, left: -1, 84\n(9) + (10) = 19, left: 19, 84\n(9) - (84) = -75, left: -75, 10\n(-75) - (10) = -85, left: -85\n(9) * (84) = 756, left: 756, 10\n(7) - (12) = -5, left: -5, 9, 10\n(9) + (10) = 19, left: 19, -5\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((9 + 10) - (7 - 12))"}, {"input": "9 10 12 7\n", "output": "(12) * (7) = 84, left: 84, 9, 10\n(9) / (10) = 9/10, left: 9/10, 84\n(7) / (12) = 7/12, left: 7/12, 9, 10\n(10) * (7/12) = 35/6, left: 35/6, 9\n(9) * (35/6) = 105/2, left: 105/2\n(10) / (7/12) = 120/7, left: 120/7, 9\n(9) * (7/12) = 21/4, left: 21/4, 10\n(7) - (12) = -5, left: -5, 9, 10\n(-5) - (9) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((7 - 12) - 9))"}, {"input": "10 10 5 13\n", "output": "(10) * (13) = 130, left: 130, 10, 5\n(10) + (130) = 140, left: 140, 5\n(140) - (5) = 135, left: 135\n(10) - (130) = -120, left: -120, 5\n(130) - (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "10 10 5 13\n", "output": "(10) - (13) = -3, left: -3, 10, 5\n(10) + (13) = 23, left: 23, 10, 5\n(10) / (5) = 2, left: 2, 23\n(10) * (13) = 130, left: 130, 10, 5\n(130) - (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "10 10 5 13\n", "output": "(10) / (10) = 1, left: 1, 5, 13\n(10) + (13) = 23, left: 23, 10, 5\n(10) - (5) = 5, left: 5, 23\n(10) * (13) = 130, left: 130, 10, 5\n(130) - (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "10 10 5 13\n", "output": "(10) + (5) = 15, left: 15, 10, 13\n(10) - (5) = 5, left: 5, 10, 13\n(13) - (10) = 3, left: 3, 10, 5\n(10) * (13) = 130, left: 130, 10, 5\n(130) - (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "10 10 5 13\n", "output": "(10) - (13) = -3, left: -3, 10, 5\n(10) + (-3) = 7, left: 7, 5\n(10) * (13) = 130, left: 130, 10, 5\n(10) / (5) = 2, left: 2, 130\n(130) - (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "10 10 5 13\n", "output": "(10) * (13) = 130, left: 130, 10, 5\n(130) / (10) = 13, left: 13, 5\n(5) - (13) = -8, left: -8\n(13) - (5) = 8, left: 8\n(10) + (130) = 140, left: 140, 5\n(5) * (140) = 700, left: 700\n(5) + (140) = 145, left: 145\n(10) - (130) = -120, left: -120, 5\n(130) - (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "10 10 5 13\n", "output": "(10) + (10) = 20, left: 20, 5, 13\n(20) / (13) = 20/13, left: 20/13, 5\n(10) + (13) = 23, left: 23, 10, 5\n(10) / (23) = 10/23, left: 10/23, 5\n(10) - (5) = 5, left: 5, 23\n(13) / (10) = 13/10, left: 13/10, 10, 5\n(10) / (13) = 10/13, left: 10/13, 10, 5\n(10) * (13) = 130, left: 130, 10, 5\n(130) - (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "10 10 5 13\n", "output": "(10) + (5) = 15, left: 15, 10, 13\n(10) / (5) = 2, left: 2, 10, 13\n(13) - (2) = 11, left: 11, 10\n(10) / (11) = 10/11, left: 10/11\n(10) - (5) = 5, left: 5, 10, 13\n(13) + (5) = 18, left: 18, 10\n(10) / (13) = 10/13, left: 10/13, 10, 5\n(10) * (13) = 130, left: 130, 10, 5\n(130) - (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "10 10 5 13\n", "output": "(10) - (13) = -3, left: -3, 10, 5\n(10) / (-3) = -10/3, left: -10/3, 5\n(5) * (-3) = -15, left: -15, 10\n(10) * (-15) = -150, left: -150\n(5) - (10) = -5, left: -5, -3\n(10) + (13) = 23, left: 23, 10, 5\n(10) * (23) = 230, left: 230, 5\n(10) * (13) = 130, left: 130, 10, 5\n(130) - (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "10 10 5 13\n", "output": "(10) - (13) = -3, left: -3, 10, 5\n(-3) - (10) = -13, left: -13, 5\n(10) + (-3) = 7, left: 7, 5\n(10) / (13) = 10/13, left: 10/13, 10, 5\n(10) * (13) = 130, left: 130, 10, 5\n(10) + (130) = 140, left: 140, 5\n(10) / (130) = 1/13, left: 1/13, 5\n(5) * (1/13) = 5/13, left: 5/13\n(130) - (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "13 10 3 4\n", "output": "(13) + (10) = 23, left: 23, 3, 4\n(3) + (23) = 26, left: 26, 4\n(4) + (26) = 30, left: 30\n(23) - (3) = 20, left: 20, 4\n(20) / (4) = 5, left: 5\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((13 + 10) - 3))"}, {"input": "13 10 3 4\n", "output": "(3) + (4) = 7, left: 7, 13, 10\n(13) - (7) = 6, left: 6, 10\n(13) / (7) = 13/7, left: 13/7, 10\n(3) - (4) = -1, left: -1, 13, 10\n(13) + (10) = 23, left: 23, -1\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((13 + 10) - (3 - 4))"}, {"input": "13 10 3 4\n", "output": "(13) * (4) = 52, left: 52, 10, 3\n(52) - (3) = 49, left: 49, 10\n(52) - (10) = 42, left: 42, 3\n(13) + (4) = 17, left: 17, 10, 3\n(3) - (10) = -7, left: -7, 17\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((13 + 4) - (3 - 10))"}, {"input": "13 10 3 4\n", "output": "(13) + (10) = 23, left: 23, 3, 4\n(3) * (23) = 69, left: 69, 4\n(69) / (4) = 69/4, left: 69/4\n(69) - (4) = 65, left: 65\n(23) - (3) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((13 + 10) - 3))"}, {"input": "13 10 3 4\n", "output": "(13) + (10) = 23, left: 23, 3, 4\n(3) * (23) = 69, left: 69, 4\n(69) / (4) = 69/4, left: 69/4\n(4) / (69) = 4/69, left: 4/69\n(4) + (69) = 73, left: 73\n(4) * (69) = 276, left: 276\n(4) - (69) = -65, left: -65\n(23) - (3) = 20, left: 20, 4\n(4) * (20) = 80, left: 80\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((13 + 10) - 3))"}, {"input": "13 10 3 4\n", "output": "(13) - (4) = 9, left: 9, 10, 3\n(3) / (9) = 1/3, left: 1/3, 10\n(13) * (4) = 52, left: 52, 10, 3\n(52) / (3) = 52/3, left: 52/3, 10\n(10) + (3) = 13, left: 13, 52\n(10) * (3) = 30, left: 30, 52\n(13) + (4) = 17, left: 17, 10, 3\n(10) - (3) = 7, left: 7, 17\n(7) / (17) = 7/17, left: 7/17\n(17) + (7) = 24, left: 24\nreach 24! expression: ((13 + 4) + (10 - 3))"}, {"input": "13 10 3 4\n", "output": "(13) * (4) = 52, left: 52, 10, 3\n(3) - (10) = -7, left: -7, 52\n(10) + (3) = 13, left: 13, 52\n(10) * (3) = 30, left: 30, 52\n(52) / (30) = 26/15, left: 26/15\n(52) / (10) = 26/5, left: 26/5, 3\n(3) * (26/5) = 78/5, left: 78/5\n(13) + (4) = 17, left: 17, 10, 3\n(3) - (10) = -7, left: -7, 17\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((13 + 4) - (3 - 10))"}, {"input": "13 10 3 4\n", "output": "(3) + (4) = 7, left: 7, 13, 10\n(13) / (10) = 13/10, left: 13/10, 7\n(10) + (7) = 17, left: 17, 13\n(13) - (7) = 6, left: 6, 10\n(7) / (13) = 7/13, left: 7/13, 10\n(13) * (7) = 91, left: 91, 10\n(91) - (10) = 81, left: 81\n(3) - (4) = -1, left: -1, 13, 10\n(13) + (10) = 23, left: 23, -1\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((13 + 10) - (3 - 4))"}, {"input": "13 10 3 4\n", "output": "(13) + (10) = 23, left: 23, 3, 4\n(3) + (23) = 26, left: 26, 4\n(4) * (26) = 104, left: 104\n(26) - (4) = 22, left: 22\n(4) / (26) = 2/13, left: 2/13\n(4) - (26) = -22, left: -22\n(23) - (3) = 20, left: 20, 4\n(20) - (4) = 16, left: 16\n(4) - (20) = -16, left: -16\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((13 + 10) - 3))"}, {"input": "13 10 3 4\n", "output": "(13) + (10) = 23, left: 23, 3, 4\n(3) * (23) = 69, left: 69, 4\n(69) / (4) = 69/4, left: 69/4\n(4) / (69) = 4/69, left: 4/69\n(4) + (69) = 73, left: 73\n(69) - (4) = 65, left: 65\n(4) * (69) = 276, left: 276\n(4) - (69) = -65, left: -65\n(23) - (3) = 20, left: 20, 4\n(4) * (20) = 80, left: 80\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((13 + 10) - 3))"}, {"input": "13 10 3 4\n", "output": "(13) + (10) = 23, left: 23, 3, 4\n(3) * (23) = 69, left: 69, 4\n(69) / (4) = 69/4, left: 69/4\n(4) / (69) = 4/69, left: 4/69\n(4) + (69) = 73, left: 73\n(69) - (4) = 65, left: 65\n(4) * (69) = 276, left: 276\n(4) - (69) = -65, left: -65\n(23) - (3) = 20, left: 20, 4\n(4) * (20) = 80, left: 80\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((13 + 10) - 3))"}, {"input": "9 2 10 13\n", "output": "(13) - (9) = 4, left: 4, 2, 10\n(4) / (10) = 2/5, left: 2/5, 2\n(2) - (2/5) = 8/5, left: 8/5\n(2) + (10) = 12, left: 12, 4\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((13 - 9) + (2 * 10))"}, {"input": "9 2 10 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 9, 10\n(9) * (10) = 90, left: 90, 2/13\n(2) + (13) = 15, left: 15, 9, 10\n(2) * (10) = 20, left: 20, 9, 13\n(13) - (9) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((2 * 10) + (13 - 9))"}, {"input": "9 2 10 13\n", "output": "(2) - (13) = -11, left: -11, 9, 10\n(9) - (-11) = 20, left: 20, 10\n(2) / (13) = 2/13, left: 2/13, 9, 10\n(2/13) - (10) = -128/13, left: -128/13, 9\n(2/13) / (10) = 1/65, left: 1/65, 9\n(2) + (13) = 15, left: 15, 9, 10\n(13) / (2) = 13/2, left: 13/2, 9, 10\n(2) * (10) = 20, left: 20, 9, 13\n(13) - (9) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((2 * 10) + (13 - 9))"}, {"input": "9 2 10 13\n", "output": "(9) + (2) = 11, left: 11, 10, 13\n(10) / (11) = 10/11, left: 10/11, 13\n(9) / (2) = 9/2, left: 9/2, 10, 13\n(2) / (9) = 2/9, left: 2/9, 10, 13\n(2) / (13) = 2/13, left: 2/13, 9, 10\n(9) + (10) = 19, left: 19, 2/13\n(13) / (10) = 13/10, left: 13/10, 9, 2\n(13) - (10) = 3, left: 3, 9, 2\n(9) + (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 + (13 - 10)))"}, {"input": "9 2 10 13\n", "output": "(2) - (13) = -11, left: -11, 9, 10\n(9) + (-11) = -2, left: -2, 10\n(9) + (10) = 19, left: 19, -11\n(2) + (13) = 15, left: 15, 9, 10\n(9) + (15) = 24, left: 24, 10\n(9) - (10) = -1, left: -1, 2, 13\n(13) / (-1) = -13, left: -13, 2\n(13) * (-1) = -13, left: -13, 2\n(13) + (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 + (9 - 10)))"}, {"input": "9 2 10 13\n", "output": "(2) - (13) = -11, left: -11, 9, 10\n(-11) - (10) = -21, left: -21, 9\n(2) + (13) = 15, left: 15, 9, 10\n(2) * (13) = 26, left: 26, 9, 10\n(9) / (10) = 9/10, left: 9/10, 26\n(10) + (26) = 36, left: 36, 9\n(13) - (2) = 11, left: 11, 9, 10\n(10) - (9) = 1, left: 1, 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (10 - 9)))"}, {"input": "9 2 10 13\n", "output": "(13) - (9) = 4, left: 4, 2, 10\n(10) - (4) = 6, left: 6, 2\n(4) / (10) = 2/5, left: 2/5, 2\n(10) * (4) = 40, left: 40, 2\n(2) / (10) = 1/5, left: 1/5, 4\n(2) - (10) = -8, left: -8, 4\n(10) / (2) = 5, left: 5, 4\n(4) / (5) = 4/5, left: 4/5\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((13 - 9) + (2 * 10))"}, {"input": "13 5 2 7\n", "output": "(13) + (2) = 15, left: 15, 5, 7\n(5) * (7) = 35, left: 35, 15\n(15) * (35) = 525, left: 525\n(13) - (2) = 11, left: 11, 5, 7\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (13 - 2))"}, {"input": "13 5 2 7\n", "output": "(13) / (2) = 13/2, left: 13/2, 5, 7\n(2) - (13) = -11, left: -11, 5, 7\n(-11) / (5) = -11/5, left: -11/5, 7\n(5) / (-11) = -5/11, left: -5/11, 7\n(5) * (7) = 35, left: 35, -11\n(-11) + (35) = 24, left: 24\nreach 24! expression: ((2 - 13) + (5 * 7))"}, {"input": "13 5 2 7\n", "output": "(13) + (2) = 15, left: 15, 5, 7\n(15) - (5) = 10, left: 10, 7\n(5) / (15) = 1/3, left: 1/3, 7\n(7) * (15) = 105, left: 105, 5\n(7) / (5) = 7/5, left: 7/5, 15\n(13) - (2) = 11, left: 11, 5, 7\n(11) - (5) = 6, left: 6, 7\n(7) - (6) = 1, left: 1\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (13 - 2))"}, {"input": "13 5 2 7\n", "output": "(13) * (7) = 91, left: 91, 5, 2\n(91) / (2) = 91/2, left: 91/2, 5\n(13) + (7) = 20, left: 20, 5, 2\n(5) / (20) = 1/4, left: 1/4, 2\n(7) / (13) = 7/13, left: 7/13, 5, 2\n(2) / (7/13) = 26/7, left: 26/7, 5\n(13) - (2) = 11, left: 11, 5, 7\n(7) / (5) = 7/5, left: 7/5, 11\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (13 - 2))"}, {"input": "13 5 2 7\n", "output": "(5) + (2) = 7, left: 7, 13, 7\n(7) - (13) = -6, left: -6, 7\n(5) - (2) = 3, left: 3, 13, 7\n(13) * (5) = 65, left: 65, 2, 7\n(2) + (65) = 67, left: 67, 7\n(13) / (5) = 13/5, left: 13/5, 2, 7\n(2) / (13) = 2/13, left: 2/13, 5, 7\n(2) - (13) = -11, left: -11, 5, 7\n(5) * (7) = 35, left: 35, -11\n(-11) + (35) = 24, left: 24\nreach 24! expression: ((2 - 13) + (5 * 7))"}, {"input": "13 5 2 7\n", "output": "(13) / (2) = 13/2, left: 13/2, 5, 7\n(5) * (7) = 35, left: 35, 13/2\n(13/2) + (35) = 83/2, left: 83/2\n(5) / (7) = 5/7, left: 5/7, 13/2\n(7) - (13/2) = 1/2, left: 1/2, 5\n(2) - (13) = -11, left: -11, 5, 7\n(-11) - (5) = -16, left: -16, 7\n(5) - (7) = -2, left: -2, -11\n(5) * (7) = 35, left: 35, -11\n(-11) + (35) = 24, left: 24\nreach 24! expression: ((2 - 13) + (5 * 7))"}, {"input": "13 5 2 7\n", "output": "(13) * (5) = 65, left: 65, 2, 7\n(5) - (13) = -8, left: -8, 2, 7\n(7) / (2) = 7/2, left: 7/2, -8\n(13) - (5) = 8, left: 8, 2, 7\n(8) - (2) = 6, left: 6, 7\n(2) / (7) = 2/7, left: 2/7, 8\n(2) / (13) = 2/13, left: 2/13, 5, 7\n(13) - (2) = 11, left: 11, 5, 7\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (13 - 2))"}, {"input": "13 5 2 7\n", "output": "(5) + (2) = 7, left: 7, 13, 7\n(5) * (2) = 10, left: 10, 13, 7\n(13) / (7) = 13/7, left: 13/7, 10\n(5) / (2) = 5/2, left: 5/2, 13, 7\n(2) - (5) = -3, left: -3, 13, 7\n(13) * (-3) = -39, left: -39, 7\n(5) / (13) = 5/13, left: 5/13, 2, 7\n(13) * (5) = 65, left: 65, 2, 7\n(13) + (5) = 18, left: 18, 2, 7\n(13) / (5) = 13/5, left: 13/5, 2, 7\n(2) - (13) = -11, left: -11, 5, 7\n(5) - (7) = -2, left: -2, -11\n(5) * (7) = 35, left: 35, -11\n(-11) + (35) = 24, left: 24\nreach 24! expression: ((2 - 13) + (5 * 7))"}, {"input": "10 6 8 6\n", "output": "(6) - (10) = -4, left: -4, 6, 8\n(6) / (8) = 3/4, left: 3/4, -4\n(3/4) / (-4) = -3/16, left: -3/16\n(6) - (-4) = 10, left: 10, 8\n(8) + (-4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 + (6 - 10)))"}, {"input": "10 6 8 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 6, 8\n(8) / (3/5) = 40/3, left: 40/3, 6\n(8) + (3/5) = 43/5, left: 43/5, 6\n(8) * (3/5) = 24/5, left: 24/5, 6\n(6) * (3/5) = 18/5, left: 18/5, 8\n(6) / (8) = 3/4, left: 3/4, 3/5\n(6) - (8) = -2, left: -2, 3/5\n(6) - (10) = -4, left: -4, 6, 8\n(8) + (-4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 + (6 - 10)))"}, {"input": "10 6 8 6\n", "output": "(10) - (6) = 4, left: 4, 6, 8\n(4) / (6) = 2/3, left: 2/3, 8\n(6) - (4) = 2, left: 2, 8\n(8) * (4) = 32, left: 32, 6\n(6) * (32) = 192, left: 192\n(4) - (8) = -4, left: -4, 6\n(8) / (4) = 2, left: 2, 6\n(6) / (2) = 3, left: 3\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 - (10 - 6)))"}, {"input": "10 6 8 6\n", "output": "(10) * (6) = 60, left: 60, 6, 8\n(10) + (6) = 16, left: 16, 6, 8\n(8) * (16) = 128, left: 128, 6\n(6) / (10) = 3/5, left: 3/5, 6, 8\n(8) * (3/5) = 24/5, left: 24/5, 6\n(6) + (24/5) = 54/5, left: 54/5\n(8) - (6) = 2, left: 2, 3/5\n(10) - (6) = 4, left: 4, 6, 8\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 - (10 - 6)))"}, {"input": "10 6 8 6\n", "output": "(6) - (10) = -4, left: -4, 6, 8\n(6) + (8) = 14, left: 14, -4\n(-4) * (14) = -56, left: -56\n(6) / (-4) = -3/2, left: -3/2, 8\n(-4) - (6) = -10, left: -10, 8\n(6) * (-4) = -24, left: -24, 8\n(6) + (-4) = 2, left: 2, 8\n(8) * (-4) = -32, left: -32, 6\n(8) + (-4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 + (6 - 10)))"}, {"input": "10 6 8 6\n", "output": "(10) - (6) = 4, left: 4, 8, 6\n(8) * (4) = 32, left: 32, 6\n(32) / (6) = 16/3, left: 16/3\n(8) / (4) = 2, left: 2, 6\n(6) - (2) = 4, left: 4\n(2) / (6) = 1/3, left: 1/3\n(8) + (4) = 12, left: 12, 6\n(6) + (12) = 18, left: 18\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 - (10 - 6)))"}, {"input": "9 3 9 12\n", "output": "(9) / (12) = 3/4, left: 3/4, 9, 3\n(3) / (9) = 1/3, left: 1/3, 3/4\n(1/3) - (3/4) = -5/12, left: -5/12\n(12) - (9) = 3, left: 3, 9, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * (12 - 9)) - 3)"}, {"input": "9 3 9 12\n", "output": "(12) - (9) = 3, left: 3, 9, 3\n(3) + (3) = 6, left: 6, 9\n(3) * (3) = 9, left: 9, 9\n(3) / (3) = 1, left: 1, 9\n(9) / (3) = 3, left: 3, 3\n(3) + (3) = 6, left: 6\n(3) / (9) = 1/3, left: 1/3, 3\n(9) * (3) = 27, left: 27, 3\n(3) - (27) = -24, left: -24\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (12 - 9))"}, {"input": "9 3 9 12\n", "output": "(12) - (9) = 3, left: 3, 9, 3\n(3) / (3) = 1, left: 1, 9\n(9) - (1) = 8, left: 8\n(9) * (1) = 9, left: 9\n(3) + (3) = 6, left: 6, 9\n(3) - (9) = -6, left: -6, 3\n(-6) / (3) = -2, left: -2\n(3) / (9) = 1/3, left: 1/3, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * (12 - 9)) - 3)"}, {"input": "9 3 9 12\n", "output": "(9) / (12) = 3/4, left: 3/4, 9, 3\n(3) + (3/4) = 15/4, left: 15/4, 9\n(12) / (9) = 4/3, left: 4/3, 9, 3\n(3) / (4/3) = 9/4, left: 9/4, 9\n(9) * (12) = 108, left: 108, 9, 3\n(108) - (9) = 99, left: 99, 3\n(12) - (9) = 3, left: 3, 9, 3\n(9) - (3) = 6, left: 6, 3\n(9) * (3) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * (12 - 9)) - 3)"}, {"input": "9 3 9 12\n", "output": "(9) * (3) = 27, left: 27, 9, 12\n(12) - (27) = -15, left: -15, 9\n(-15) - (9) = -24, left: -24\n(9) * (-15) = -135, left: -135\n(9) / (-15) = -3/5, left: -3/5\n(9) + (-15) = -6, left: -6\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (12 - (9 * 3)))"}, {"input": "9 3 9 12\n", "output": "(9) * (3) = 27, left: 27, 9, 12\n(12) - (27) = -15, left: -15, 9\n(-15) - (9) = -24, left: -24\n(9) * (-15) = -135, left: -135\n(9) / (-15) = -3/5, left: -3/5\n(9) + (-15) = -6, left: -6\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (12 - (9 * 3)))"}, {"input": "9 3 9 12\n", "output": "(9) * (3) = 27, left: 27, 9, 12\n(12) - (27) = -15, left: -15, 9\n(-15) - (9) = -24, left: -24\n(9) * (-15) = -135, left: -135\n(9) / (-15) = -3/5, left: -3/5\n(9) + (-15) = -6, left: -6\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (12 - (9 * 3)))"}, {"input": "10 13 2 11\n", "output": "(2) / (10) = 1/5, left: 1/5, 13, 11\n(1/5) / (11) = 1/55, left: 1/55, 13\n(10) + (2) = 12, left: 12, 13, 11\n(13) / (12) = 13/12, left: 13/12, 11\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((10 + 2) * (13 - 11))"}, {"input": "10 13 2 11\n", "output": "(2) / (11) = 2/11, left: 2/11, 10, 13\n(2) + (11) = 13, left: 13, 10, 13\n(13) / (11) = 13/11, left: 13/11, 10, 2\n(13) - (11) = 2, left: 2, 10, 2\n(10) + (2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 + (13 - 11)))"}, {"input": "10 13 2 11\n", "output": "(10) + (11) = 21, left: 21, 13, 2\n(10) * (11) = 110, left: 110, 13, 2\n(13) / (2) = 13/2, left: 13/2, 110\n(11) - (10) = 1, left: 1, 13, 2\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (11 - 10)))"}, {"input": "10 13 2 11\n", "output": "(10) / (13) = 10/13, left: 10/13, 2, 11\n(13) - (10) = 3, left: 3, 2, 11\n(3) / (11) = 3/11, left: 3/11, 2\n(10) + (13) = 23, left: 23, 2, 11\n(23) - (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((10 + 13) - 11))"}, {"input": "10 13 2 11\n", "output": "(11) - (13) = -2, left: -2, 10, 2\n(-2) / (2) = -1, left: -1, 10\n(-1) - (10) = -11, left: -11\n(2) + (-2) = 0, left: 0, 10\n(10) - (-2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 - (11 - 13)))"}, {"input": "10 13 2 11\n", "output": "(11) - (13) = -2, left: -2, 10, 2\n(-2) / (2) = -1, left: -1, 10\n(2) + (-2) = 0, left: 0, 10\n(10) * (0) = 0, left: 0\n(0) / (10) = 0, left: 0\n(0) - (10) = -10, left: -10\n(2) * (-2) = -4, left: -4, 10\n(10) * (-4) = -40, left: -40\n(10) - (-2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 - (11 - 13)))"}, {"input": "10 13 2 11\n", "output": "(10) + (11) = 21, left: 21, 13, 2\n(2) / (21) = 2/21, left: 2/21, 13\n(10) * (11) = 110, left: 110, 13, 2\n(2) - (13) = -11, left: -11, 110\n(10) / (11) = 10/11, left: 10/11, 13, 2\n(2) - (10/11) = 12/11, left: 12/11, 13\n(11) - (10) = 1, left: 1, 13, 2\n(2) * (1) = 2, left: 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (11 - 10)))"}, {"input": "10 13 2 11\n", "output": "(13) - (10) = 3, left: 3, 2, 11\n(11) + (3) = 14, left: 14, 2\n(3) - (11) = -8, left: -8, 2\n(10) - (13) = -3, left: -3, 2, 11\n(10) + (13) = 23, left: 23, 2, 11\n(11) + (23) = 34, left: 34, 2\n(23) / (11) = 23/11, left: 23/11, 2\n(2) * (23/11) = 46/11, left: 46/11\n(23) - (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((10 + 13) - 11))"}, {"input": "10 13 2 11\n", "output": "(11) / (2) = 11/2, left: 11/2, 10, 13\n(13) - (11/2) = 15/2, left: 15/2, 10\n(11) / (13) = 11/13, left: 11/13, 10, 2\n(11/13) - (2) = -15/13, left: -15/13, 10\n(13) / (11) = 13/11, left: 13/11, 10, 2\n(2) * (13/11) = 26/11, left: 26/11, 10\n(13/11) - (2) = -9/11, left: -9/11, 10\n(13) - (11) = 2, left: 2, 10, 2\n(10) + (2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 + (13 - 11)))"}, {"input": "10 13 2 11\n", "output": "(2) / (10) = 1/5, left: 1/5, 13, 11\n(1/5) / (13) = 1/65, left: 1/65, 11\n(13) - (11) = 2, left: 2, 1/5\n(13) + (11) = 24, left: 24, 1/5\n(1/5) - (24) = -119/5, left: -119/5\n(11) + (1/5) = 56/5, left: 56/5, 13\n(1/5) - (11) = -54/5, left: -54/5, 13\n(10) + (2) = 12, left: 12, 13, 11\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((10 + 2) * (13 - 11))"}, {"input": "6 10 1 2\n", "output": "(1) / (10) = 1/10, left: 1/10, 6, 2\n(6) / (1/10) = 60, left: 60, 2\n(1/10) / (2) = 1/20, left: 1/20, 6\n(1) - (10) = -9, left: -9, 6, 2\n(2) * (-9) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (2 * (1 - 10)))"}, {"input": "6 10 1 2\n", "output": "(1) + (2) = 3, left: 3, 6, 10\n(6) + (10) = 16, left: 16, 3\n(10) - (6) = 4, left: 4, 3\n(4) - (3) = 1, left: 1\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (1 + 2)) - 6)"}, {"input": "6 10 1 2\n", "output": "(1) + (2) = 3, left: 3, 6, 10\n(6) * (10) = 60, left: 60, 3\n(10) - (6) = 4, left: 4, 3\n(3) - (10) = -7, left: -7, 6\n(3) / (10) = 3/10, left: 3/10, 6\n(10) + (3) = 13, left: 13, 6\n(10) / (3) = 10/3, left: 10/3, 6\n(6) / (10/3) = 9/5, left: 9/5\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (1 + 2)) - 6)"}, {"input": "6 10 1 2\n", "output": "(6) / (1) = 6, left: 6, 10, 2\n(10) * (6) = 60, left: 60, 2\n(6) - (1) = 5, left: 5, 10, 2\n(10) - (5) = 5, left: 5, 2\n(1) / (6) = 1/6, left: 1/6, 10, 2\n(10) + (1/6) = 61/6, left: 61/6, 2\n(1) - (6) = -5, left: -5, 10, 2\n(6) + (1) = 7, left: 7, 10, 2\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (6 + 1)))"}, {"input": "6 10 1 2\n", "output": "(1) * (2) = 2, left: 2, 6, 10\n(10) - (2) = 8, left: 8, 6\n(10) * (2) = 20, left: 20, 6\n(6) + (10) = 16, left: 16, 2\n(6) / (2) = 3, left: 3, 10\n(2) / (1) = 2, left: 2, 6, 10\n(6) / (2) = 3, left: 3, 10\n(1) + (2) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (1 + 2)) - 6)"}, {"input": "6 10 1 2\n", "output": "(10) / (2) = 5, left: 5, 6, 1\n(6) * (5) = 30, left: 30, 1\n(6) - (5) = 1, left: 1, 1\n(1) * (5) = 5, left: 5, 6\n(5) / (1) = 5, left: 5, 6\n(6) / (5) = 6/5, left: 6/5\n(1) / (5) = 1/5, left: 1/5, 6\n(1) + (5) = 6, left: 6, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((10 / 2) - 1))"}, {"input": "6 10 1 2\n", "output": "(1) / (10) = 1/10, left: 1/10, 6, 2\n(6) * (2) = 12, left: 12, 1/10\n(2) / (6) = 1/3, left: 1/3, 1/10\n(1/10) + (1/3) = 13/30, left: 13/30\n(2) + (1/10) = 21/10, left: 21/10, 6\n(1) - (10) = -9, left: -9, 6, 2\n(6) - (-9) = 15, left: 15, 2\n(6) + (-9) = -3, left: -3, 2\n(2) * (-9) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (2 * (1 - 10)))"}, {"input": "10 9 6 9\n", "output": "(10) * (9) = 90, left: 90, 6, 9\n(9) + (90) = 99, left: 99, 6\n(6) + (99) = 105, left: 105\n(90) - (9) = 81, left: 81, 6\n(90) / (6) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((10 * 9) / 6))"}, {"input": "10 9 6 9\n", "output": "(9) / (6) = 3/2, left: 3/2, 10, 9\n(9) * (3/2) = 27/2, left: 27/2, 10\n(9) / (3/2) = 6, left: 6, 10\n(6) / (10) = 3/5, left: 3/5\n(10) * (3/2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 * (9 / 6)))"}, {"input": "10 9 6 9\n", "output": "(9) + (9) = 18, left: 18, 10, 6\n(9) * (9) = 81, left: 81, 10, 6\n(10) / (81) = 10/81, left: 10/81, 6\n(6) + (10/81) = 496/81, left: 496/81\n(9) - (9) = 0, left: 0, 10, 6\n(6) + (0) = 6, left: 6, 10\n(9) / (9) = 1, left: 1, 10, 6\n(9) / (6) = 3/2, left: 3/2, 10, 9\n(10) * (3/2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 * (9 / 6)))"}, {"input": "10 9 6 9\n", "output": "(9) - (9) = 0, left: 0, 10, 6\n(9) / (9) = 1, left: 1, 10, 6\n(1) / (10) = 1/10, left: 1/10, 6\n(9) * (9) = 81, left: 81, 10, 6\n(9) / (9) = 1, left: 1, 10, 6\n(1) / (6) = 1/6, left: 1/6, 10\n(10) + (6) = 16, left: 16, 9, 9\n(10) / (6) = 5/3, left: 5/3, 9, 9\n(9) * (5/3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (9 * (10 / 6)))"}, {"input": "10 9 6 9\n", "output": "(10) * (9) = 90, left: 90, 6, 9\n(9) + (90) = 99, left: 99, 6\n(6) * (99) = 594, left: 594\n(6) + (99) = 105, left: 105\n(9) - (90) = -81, left: -81, 6\n(90) - (9) = 81, left: 81, 6\n(81) - (6) = 75, left: 75\n(6) - (81) = -75, left: -75\n(90) / (6) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((10 * 9) / 6))"}, {"input": "10 9 6 9\n", "output": "(9) - (6) = 3, left: 3, 10, 9\n(9) - (3) = 6, left: 6, 10\n(3) - (9) = -6, left: -6, 10\n(9) / (3) = 3, left: 3, 10\n(6) + (9) = 15, left: 15, 10, 9\n(10) + (15) = 25, left: 25, 9\n(6) / (9) = 2/3, left: 2/3, 10, 9\n(2/3) / (10) = 1/15, left: 1/15, 9\n(10) / (2/3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 / (6 / 9)))"}, {"input": "10 9 6 9\n", "output": "(9) / (6) = 3/2, left: 3/2, 10, 9\n(9) * (3/2) = 27/2, left: 27/2, 10\n(9) / (3/2) = 6, left: 6, 10\n(10) / (9) = 10/9, left: 10/9, 3/2\n(10) * (9) = 90, left: 90, 3/2\n(10) - (9) = 1, left: 1, 3/2\n(3/2) * (1) = 3/2, left: 3/2\n(10) - (3/2) = 17/2, left: 17/2, 9\n(10) * (3/2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 * (9 / 6)))"}, {"input": "10 9 6 9\n", "output": "(9) - (9) = 0, left: 0, 10, 6\n(10) + (6) = 16, left: 16, 0\n(6) / (10) = 3/5, left: 3/5, 0\n(10) - (0) = 10, left: 10, 6\n(10) - (6) = 4, left: 4\n(9) + (9) = 18, left: 18, 10, 6\n(9) * (9) = 81, left: 81, 10, 6\n(9) - (9) = 0, left: 0, 10, 6\n(10) - (6) = 4, left: 4, 0\n(9) / (9) = 1, left: 1, 10, 6\n(9) / (9) = 1, left: 1, 10, 6\n(9) / (6) = 3/2, left: 3/2, 10, 9\n(10) * (3/2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 * (9 / 6)))"}, {"input": "10 9 6 9\n", "output": "(9) - (9) = 0, left: 0, 10, 6\n(6) + (0) = 6, left: 6, 10\n(9) * (9) = 81, left: 81, 10, 6\n(10) + (81) = 91, left: 91, 6\n(91) - (6) = 85, left: 85\n(9) / (9) = 1, left: 1, 10, 6\n(1) / (6) = 1/6, left: 1/6, 10\n(9) - (9) = 0, left: 0, 10, 6\n(0) / (6) = 0, left: 0, 10\n(10) + (6) = 16, left: 16, 9, 9\n(9) / (16) = 9/16, left: 9/16, 9\n(10) / (6) = 5/3, left: 5/3, 9, 9\n(9) * (5/3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (9 * (10 / 6)))"}, {"input": "7 8 8 11\n", "output": "(7) + (8) = 15, left: 15, 8, 11\n(15) - (8) = 7, left: 7, 11\n(11) / (7) = 11/7, left: 11/7\n(8) * (11) = 88, left: 88, 7, 8\n(88) - (7) = 81, left: 81, 8\n(8) + (8) = 16, left: 16, 7, 11\n(7) / (16) = 7/16, left: 7/16, 11\n(11) - (7) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(8) / (11) = 8/11, left: 8/11, 7, 8\n(11) / (8) = 11/8, left: 11/8, 7, 8\n(7) + (8) = 15, left: 15, 11/8\n(11) / (8) = 11/8, left: 11/8, 7, 8\n(11/8) / (7) = 11/56, left: 11/56, 8\n(11/8) / (8) = 11/64, left: 11/64, 7\n(7) / (8) = 7/8, left: 7/8, 8, 11\n(11) - (7) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(11) - (7) = 4, left: 4, 8, 8\n(8) - (4) = 4, left: 4, 8\n(8) * (4) = 32, left: 32\n(8) / (4) = 2, left: 2\n(4) - (8) = -4, left: -4, 8\n(8) * (-4) = -32, left: -32\n(8) / (4) = 2, left: 2, 8\n(8) - (2) = 6, left: 6\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(8) / (8) = 1, left: 1, 7, 11\n(8) + (11) = 19, left: 19, 7, 8\n(7) * (19) = 133, left: 133, 8\n(8) * (11) = 88, left: 88, 7, 8\n(88) - (7) = 81, left: 81, 8\n(8) / (81) = 8/81, left: 8/81\n(11) / (8) = 11/8, left: 11/8, 7, 8\n(11) - (7) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(7) / (8) = 7/8, left: 7/8, 8, 11\n(8) + (11) = 19, left: 19, 7, 8\n(8) - (7) = 1, left: 1, 8, 11\n(7) - (8) = -1, left: -1, 8, 11\n(11) / (7) = 11/7, left: 11/7, 8, 8\n(8) / (8) = 1, left: 1, 11/7\n(7) * (11) = 77, left: 77, 8, 8\n(11) - (7) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(8) / (8) = 1, left: 1, 7, 11\n(11) - (1) = 10, left: 10, 7\n(8) + (8) = 16, left: 16, 7, 11\n(8) + (11) = 19, left: 19, 7, 8\n(11) / (8) = 11/8, left: 11/8, 7, 8\n(7) - (8) = -1, left: -1, 11/8\n(8) - (11) = -3, left: -3, 7, 8\n(11) / (8) = 11/8, left: 11/8, 7, 8\n(7) * (11) = 77, left: 77, 8, 8\n(8) / (77) = 8/77, left: 8/77, 8\n(7) + (11) = 18, left: 18, 8, 8\n(11) - (7) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(8) + (11) = 19, left: 19, 7, 8\n(7) / (19) = 7/19, left: 7/19, 8\n(8) * (11) = 88, left: 88, 7, 8\n(8) - (11) = -3, left: -3, 7, 8\n(11) - (8) = 3, left: 3, 7, 8\n(8) - (3) = 5, left: 5, 7\n(11) / (8) = 11/8, left: 11/8, 7, 8\n(8) / (7) = 8/7, left: 8/7, 8, 11\n(7) - (8) = -1, left: -1, 8, 11\n(7) + (11) = 18, left: 18, 8, 8\n(8) + (8) = 16, left: 16, 18\n(11) - (7) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(7) * (8) = 56, left: 56, 8, 11\n(8) * (11) = 88, left: 88, 56\n(7) + (8) = 15, left: 15, 8, 11\n(8) - (7) = 1, left: 1, 8, 11\n(7) * (8) = 56, left: 56, 8, 11\n(11) - (8) = 3, left: 3, 7, 8\n(8) / (8) = 1, left: 1, 7, 11\n(1) - (7) = -6, left: -6, 11\n(11) - (-6) = 17, left: 17\n(8) - (8) = 0, left: 0, 7, 11\n(8) * (8) = 64, left: 64, 7, 11\n(11) - (7) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(7) - (8) = -1, left: -1, 8, 11\n(8) + (11) = 19, left: 19, -1\n(11) + (-1) = 10, left: 10, 8\n(7) / (8) = 7/8, left: 7/8, 8, 11\n(8) - (7) = 1, left: 1, 8, 11\n(7) + (8) = 15, left: 15, 8, 11\n(7) * (8) = 56, left: 56, 8, 11\n(8) / (7) = 8/7, left: 8/7, 8, 11\n(11) / (7) = 11/7, left: 11/7, 8, 8\n(7) + (11) = 18, left: 18, 8, 8\n(8) * (8) = 64, left: 64, 18\n(11) - (7) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "4 6 7 2\n", "output": "(6) + (2) = 8, left: 8, 4, 7\n(8) - (7) = 1, left: 1, 4\n(7) - (8) = -1, left: -1, 4\n(8) / (7) = 8/7, left: 8/7, 4\n(4) / (8/7) = 7/2, left: 7/2\n(7) + (8) = 15, left: 15, 4\n(4) + (15) = 19, left: 19\n(4) + (7) = 11, left: 11, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((6 + 2) * (7 - 4))"}, {"input": "4 6 7 2\n", "output": "(7) * (2) = 14, left: 14, 4, 6\n(14) - (6) = 8, left: 8, 4\n(4) / (8) = 1/2, left: 1/2\n(6) / (14) = 3/7, left: 3/7, 4\n(3/7) - (4) = -25/7, left: -25/7\n(4) * (3/7) = 12/7, left: 12/7\n(6) + (14) = 20, left: 20, 4\n(4) - (20) = -16, left: -16\n(20) - (4) = 16, left: 16\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (6 + (7 * 2)))"}, {"input": "4 6 7 2\n", "output": "(2) - (4) = -2, left: -2, 6, 7\n(7) / (6) = 7/6, left: 7/6, -2\n(-2) - (7/6) = -19/6, left: -19/6\n(2) / (4) = 1/2, left: 1/2, 6, 7\n(7) * (1/2) = 7/2, left: 7/2, 6\n(4) / (2) = 2, left: 2, 6, 7\n(7) - (6) = 1, left: 1, 2\n(6) - (2) = 4, left: 4, 4, 7\n(7) * (4) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((7 * (6 - 2)) - 4)"}, {"input": "4 6 7 2\n", "output": "(7) - (4) = 3, left: 3, 6, 2\n(3) - (2) = 1, left: 1, 6\n(3) / (6) = 1/2, left: 1/2, 2\n(1/2) - (2) = -3/2, left: -3/2\n(6) * (3) = 18, left: 18, 2\n(2) - (6) = -4, left: -4, 3\n(-4) - (3) = -7, left: -7\n(6) + (2) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: ((7 - 4) * (6 + 2))"}, {"input": "4 6 7 2\n", "output": "(2) - (4) = -2, left: -2, 6, 7\n(4) * (2) = 8, left: 8, 6, 7\n(7) + (8) = 15, left: 15, 6\n(15) - (6) = 9, left: 9\n(4) - (2) = 2, left: 2, 6, 7\n(7) * (2) = 14, left: 14, 6\n(4) + (2) = 6, left: 6, 6, 7\n(6) / (7) = 6/7, left: 6/7, 6\n(4) / (2) = 2, left: 2, 6, 7\n(7) - (6) = 1, left: 1, 2\n(2) / (7) = 2/7, left: 2/7, 6\n(6) - (2) = 4, left: 4, 4, 7\n(7) * (4) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((7 * (6 - 2)) - 4)"}, {"input": "11 4 11 7\n", "output": "(11) - (11) = 0, left: 0, 4, 7\n(0) / (4) = 0, left: 0, 7\n(4) + (0) = 4, left: 4, 7\n(11) / (11) = 1, left: 1, 4, 7\n(7) - (4) = 3, left: 3, 1\n(3) - (1) = 2, left: 2\n(4) * (1) = 4, left: 4, 7\n(1) / (7) = 1/7, left: 1/7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "11 4 11 7\n", "output": "(7) - (11) = -4, left: -4, 4, 11\n(11) / (7) = 11/7, left: 11/7, 4, 11\n(7) / (4) = 7/4, left: 7/4, 11, 11\n(7/4) - (11) = -37/4, left: -37/4, 11\n(4) * (7) = 28, left: 28, 11, 11\n(11) / (11) = 1, left: 1, 28\n(11) - (11) = 0, left: 0, 4, 7\n(11) / (11) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "11 4 11 7\n", "output": "(7) / (11) = 7/11, left: 7/11, 11, 4\n(11) / (4) = 11/4, left: 11/4, 11, 7\n(11) - (7) = 4, left: 4, 4, 11\n(11) / (4) = 11/4, left: 11/4, 4\n(11) * (11) = 121, left: 121, 4, 7\n(4) + (121) = 125, left: 125, 7\n(11) - (11) = 0, left: 0, 4, 7\n(11) / (11) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "11 4 11 7\n", "output": "(11) * (4) = 44, left: 44, 11, 7\n(4) * (11) = 44, left: 44, 11, 7\n(11) / (7) = 11/7, left: 11/7, 4, 11\n(4) - (11/7) = 17/7, left: 17/7, 11\n(4) - (7) = -3, left: -3, 11, 11\n(11) - (11) = 0, left: 0, -3\n(11) - (-3) = 14, left: 14, 11\n(11) / (11) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "11 4 11 7\n", "output": "(4) / (11) = 4/11, left: 4/11, 11, 7\n(4) * (7) = 28, left: 28, 11, 11\n(11) - (28) = -17, left: -17, 11\n(7) - (4) = 3, left: 3, 11, 11\n(11) + (11) = 22, left: 22, 4, 7\n(11) * (11) = 121, left: 121, 4, 7\n(7) * (121) = 847, left: 847, 4\n(11) / (11) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "6 12 4 11\n", "output": "(6) / (4) = 3/2, left: 3/2, 12, 11\n(11) * (3/2) = 33/2, left: 33/2, 12\n(6) - (4) = 2, left: 2, 12, 11\n(6) * (4) = 24, left: 24, 12, 11\n(12) - (11) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * 4) / (12 - 11))"}, {"input": "6 12 4 11\n", "output": "(6) / (4) = 3/2, left: 3/2, 12, 11\n(4) - (6) = -2, left: -2, 12, 11\n(12) / (11) = 12/11, left: 12/11, -2\n(-2) / (12/11) = -11/6, left: -11/6\n(6) + (4) = 10, left: 10, 12, 11\n(11) - (10) = 1, left: 1, 12\n(6) * (4) = 24, left: 24, 12, 11\n(11) - (24) = -13, left: -13, 12\n(12) - (11) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * 4) / (12 - 11))"}, {"input": "6 12 4 11\n", "output": "(12) - (4) = 8, left: 8, 6, 11\n(4) / (12) = 1/3, left: 1/3, 6, 11\n(4) + (11) = 15, left: 15, 6, 12\n(6) * (11) = 66, left: 66, 12, 4\n(11) - (6) = 5, left: 5, 12, 4\n(6) + (11) = 17, left: 17, 12, 4\n(4) / (17) = 4/17, left: 4/17, 12\n(6) * (4) = 24, left: 24, 12, 11\n(12) - (11) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((6 * 4) * (12 - 11))"}, {"input": "6 12 4 11\n", "output": "(6) * (12) = 72, left: 72, 4, 11\n(11) * (72) = 792, left: 792, 4\n(6) - (12) = -6, left: -6, 4, 11\n(6) + (12) = 18, left: 18, 4, 11\n(11) - (18) = -7, left: -7, 4\n(12) - (6) = 6, left: 6, 4, 11\n(4) + (11) = 15, left: 15, 6\n(12) - (11) = 1, left: 1, 6, 4\n(6) * (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (6 * (12 - 11)))"}, {"input": "6 12 4 11\n", "output": "(12) + (4) = 16, left: 16, 6, 11\n(6) - (16) = -10, left: -10, 11\n(4) + (11) = 15, left: 15, 6, 12\n(6) + (12) = 18, left: 18, 4, 11\n(11) - (18) = -7, left: -7, 4\n(6) + (4) = 10, left: 10, 12, 11\n(11) + (10) = 21, left: 21, 12\n(6) * (4) = 24, left: 24, 12, 11\n(12) - (11) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * 4) / (12 - 11))"}, {"input": "6 12 4 11\n", "output": "(4) / (12) = 1/3, left: 1/3, 6, 11\n(6) + (11) = 17, left: 17, 1/3\n(12) * (4) = 48, left: 48, 6, 11\n(48) - (11) = 37, left: 37, 6\n(11) / (48) = 11/48, left: 11/48, 6\n(12) - (4) = 8, left: 8, 6, 11\n(8) / (6) = 4/3, left: 4/3, 11\n(12) - (11) = 1, left: 1, 6, 4\n(6) / (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (6 / (12 - 11)))"}, {"input": "13 7 5 1\n", "output": "(13) / (7) = 13/7, left: 13/7, 5, 1\n(13/7) / (1) = 13/7, left: 13/7, 5\n(5) + (13/7) = 48/7, left: 48/7, 1\n(7) - (13) = -6, left: -6, 5, 1\n(1) - (5) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((7 - 13) * (1 - 5))"}, {"input": "13 7 5 1\n", "output": "(13) + (5) = 18, left: 18, 7, 1\n(7) * (18) = 126, left: 126, 1\n(126) / (1) = 126, left: 126\n(1) / (126) = 1/126, left: 1/126\n(7) + (18) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((7 + (13 + 5)) - 1)"}, {"input": "13 7 5 1\n", "output": "(5) - (7) = -2, left: -2, 13, 1\n(13) - (1) = 12, left: 12, -2\n(1) / (13) = 1/13, left: 1/13, -2\n(1/13) / (-2) = -1/26, left: -1/26\n(1) - (13) = -12, left: -12, -2\n(-2) * (-12) = 24, left: 24\nreach 24! expression: ((5 - 7) * (1 - 13))"}, {"input": "13 7 5 1\n", "output": "(5) / (1) = 5, left: 5, 13, 7\n(7) - (5) = 2, left: 2, 13\n(13) - (2) = 11, left: 11\n(7) / (5) = 7/5, left: 7/5, 13\n(5) / (13) = 5/13, left: 5/13, 7\n(13) / (5) = 13/5, left: 13/5, 7\n(7) / (13) = 7/13, left: 7/13, 5\n(1) - (5) = -4, left: -4, 13, 7\n(-4) - (7) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((1 - 5) - 7))"}, {"input": "13 7 5 1\n", "output": "(5) - (7) = -2, left: -2, 13, 1\n(13) - (1) = 12, left: 12, -2\n(-2) / (12) = -1/6, left: -1/6\n(13) * (1) = 13, left: 13, -2\n(-2) / (13) = -2/13, left: -2/13\n(1) / (13) = 1/13, left: 1/13, -2\n(-2) - (1/13) = -27/13, left: -27/13\n(1/13) - (-2) = 27/13, left: 27/13\n(1) - (13) = -12, left: -12, -2\n(-2) * (-12) = 24, left: 24\nreach 24! expression: ((5 - 7) * (1 - 13))"}, {"input": "13 7 5 1\n", "output": "(1) / (5) = 1/5, left: 1/5, 13, 7\n(1/5) - (13) = -64/5, left: -64/5, 7\n(7) - (-64/5) = 99/5, left: 99/5\n(7) / (13) = 7/13, left: 7/13, 1/5\n(13) + (7) = 20, left: 20, 1/5\n(5) / (1) = 5, left: 5, 13, 7\n(5) + (1) = 6, left: 6, 13, 7\n(5) - (1) = 4, left: 4, 13, 7\n(13) - (7) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((5 - 1) * (13 - 7))"}, {"input": "13 7 5 1\n", "output": "(13) / (7) = 13/7, left: 13/7, 5, 1\n(13/7) - (1) = 6/7, left: 6/7, 5\n(1) - (13/7) = -6/7, left: -6/7, 5\n(13/7) / (1) = 13/7, left: 13/7, 5\n(5) * (13/7) = 65/7, left: 65/7, 1\n(13/7) - (5) = -22/7, left: -22/7, 1\n(7) - (13) = -6, left: -6, 5, 1\n(-6) / (5) = -6/5, left: -6/5, 1\n(1) - (5) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((7 - 13) * (1 - 5))"}, {"input": "13 7 5 1\n", "output": "(13) + (5) = 18, left: 18, 7, 1\n(7) * (18) = 126, left: 126, 1\n(1) * (126) = 126, left: 126\n(126) - (1) = 125, left: 125\n(126) / (1) = 126, left: 126\n(1) / (126) = 1/126, left: 1/126\n(1) - (126) = -125, left: -125\n(7) + (18) = 25, left: 25, 1\n(25) / (1) = 25, left: 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((7 + (13 + 5)) - 1)"}, {"input": "13 7 5 1\n", "output": "(13) + (5) = 18, left: 18, 7, 1\n(7) * (18) = 126, left: 126, 1\n(1) * (126) = 126, left: 126\n(126) - (1) = 125, left: 125\n(126) / (1) = 126, left: 126\n(1) / (126) = 1/126, left: 1/126\n(1) - (126) = -125, left: -125\n(1) + (126) = 127, left: 127\n(7) + (18) = 25, left: 25, 1\n(25) / (1) = 25, left: 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((7 + (13 + 5)) - 1)"}, {"input": "13 7 5 1\n", "output": "(13) + (5) = 18, left: 18, 7, 1\n(7) * (18) = 126, left: 126, 1\n(1) * (126) = 126, left: 126\n(126) - (1) = 125, left: 125\n(126) / (1) = 126, left: 126\n(1) / (126) = 1/126, left: 1/126\n(1) - (126) = -125, left: -125\n(1) + (126) = 127, left: 127\n(7) + (18) = 25, left: 25, 1\n(25) / (1) = 25, left: 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((7 + (13 + 5)) - 1)"}, {"input": "2 2 11 4\n", "output": "(11) / (4) = 11/4, left: 11/4, 2, 2\n(2) - (11/4) = -3/4, left: -3/4, 2\n(11) * (4) = 44, left: 44, 2, 2\n(2) / (44) = 1/22, left: 1/22, 2\n(44) / (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((11 * 4) / 2))"}, {"input": "2 2 11 4\n", "output": "(2) / (4) = 1/2, left: 1/2, 2, 11\n(11) * (1/2) = 11/2, left: 11/2, 2\n(11) / (1/2) = 22, left: 22, 2\n(22) / (2) = 11, left: 11\n(2) - (22) = -20, left: -20\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 / (2 / 4)))"}, {"input": "2 2 11 4\n", "output": "(2) - (2) = 0, left: 0, 11, 4\n(2) + (2) = 4, left: 4, 11, 4\n(4) / (4) = 1, left: 1, 11\n(4) - (11) = -7, left: -7, 2, 2\n(-7) - (2) = -9, left: -9, 2\n(2) - (2) = 0, left: 0, -7\n(11) + (4) = 15, left: 15, 2, 2\n(11) * (4) = 44, left: 44, 2, 2\n(44) / (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((11 * 4) / 2))"}, {"input": "2 2 11 4\n", "output": "(11) / (4) = 11/4, left: 11/4, 2, 2\n(11/4) - (2) = 3/4, left: 3/4, 2\n(11/4) / (2) = 11/8, left: 11/8, 2\n(11/8) / (2) = 11/16, left: 11/16\n(2) + (2) = 4, left: 4, 11/4\n(2) / (2) = 1, left: 1, 11/4\n(2) - (2) = 0, left: 0, 11/4\n(11) * (4) = 44, left: 44, 2, 2\n(44) / (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((11 * 4) / 2))"}, {"input": "2 2 11 4\n", "output": "(2) / (4) = 1/2, left: 1/2, 2, 11\n(11) * (1/2) = 11/2, left: 11/2, 2\n(11/2) - (2) = 7/2, left: 7/2\n(11/2) / (2) = 11/4, left: 11/4\n(2) + (11/2) = 15/2, left: 15/2\n(2) / (11/2) = 4/11, left: 4/11\n(11) / (1/2) = 22, left: 22, 2\n(2) / (22) = 1/11, left: 1/11\n(2) - (22) = -20, left: -20\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 / (2 / 4)))"}, {"input": "2 2 11 4\n", "output": "(2) - (4) = -2, left: -2, 2, 11\n(11) + (-2) = 9, left: 9, 2\n(9) - (2) = 7, left: 7\n(2) + (9) = 11, left: 11\n(2) * (9) = 18, left: 18\n(9) / (2) = 9/2, left: 9/2\n(2) - (9) = -7, left: -7\n(11) * (-2) = -22, left: -22, 2\n(2) / (-22) = -1/11, left: -1/11\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (11 * (2 - 4)))"}, {"input": "2 2 11 4\n", "output": "(2) - (2) = 0, left: 0, 11, 4\n(2) * (2) = 4, left: 4, 11, 4\n(4) * (4) = 16, left: 16, 11\n(2) / (2) = 1, left: 1, 11, 4\n(1) / (4) = 1/4, left: 1/4, 11\n(2) + (2) = 4, left: 4, 11, 4\n(2) - (2) = 0, left: 0, 11, 4\n(4) - (2) = 2, left: 2, 2, 11\n(11) * (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 * (4 - 2)))"}, {"input": "2 2 11 4\n", "output": "(2) - (2) = 0, left: 0, 11, 4\n(2) - (2) = 0, left: 0, 11, 4\n(0) - (11) = -11, left: -11, 4\n(0) - (4) = -4, left: -4, 11\n(11) * (-4) = -44, left: -44\n(2) / (2) = 1, left: 1, 11, 4\n(2) * (2) = 4, left: 4, 11, 4\n(2) + (2) = 4, left: 4, 11, 4\n(4) - (11) = -7, left: -7, 2, 2\n(4) / (11) = 4/11, left: 4/11, 2, 2\n(2) / (4/11) = 11/2, left: 11/2, 2\n(11) * (4) = 44, left: 44, 2, 2\n(44) / (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((11 * 4) / 2))"}, {"input": "2 2 11 4\n", "output": "(2) / (2) = 1, left: 1, 11, 4\n(11) + (1) = 12, left: 12, 4\n(2) * (2) = 4, left: 4, 11, 4\n(4) / (4) = 1, left: 1, 11\n(2) / (2) = 1, left: 1, 11, 4\n(11) / (4) = 11/4, left: 11/4, 1\n(2) + (2) = 4, left: 4, 11, 4\n(4) * (4) = 16, left: 16, 11\n(2) - (2) = 0, left: 0, 11, 4\n(4) - (2) = 2, left: 2, 2, 11\n(2) * (2) = 4, left: 4, 11\n(4) / (11) = 4/11, left: 4/11\n(11) * (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 * (4 - 2)))"}, {"input": "3 12 2 1\n", "output": "(3) / (12) = 1/4, left: 1/4, 2, 1\n(12) / (3) = 4, left: 4, 2, 1\n(2) / (4) = 1/2, left: 1/2, 1\n(3) + (12) = 15, left: 15, 2, 1\n(3) * (12) = 36, left: 36, 2, 1\n(36) - (1) = 35, left: 35, 2\n(2) * (1) = 2, left: 2, 36\n(3) + (1) = 4, left: 4, 12, 2\n(12) * (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * (3 + 1)) / 2)"}, {"input": "3 12 2 1\n", "output": "(12) - (3) = 9, left: 9, 2, 1\n(3) + (12) = 15, left: 15, 2, 1\n(15) / (2) = 15/2, left: 15/2, 1\n(3) - (12) = -9, left: -9, 2, 1\n(1) / (-9) = -1/9, left: -1/9, 2\n(2) * (-1/9) = -2/9, left: -2/9\n(1) / (2) = 1/2, left: 1/2, -9\n(2) - (3) = -1, left: -1, 12, 1\n(1) - (-1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 - (2 - 3)))"}, {"input": "3 12 2 1\n", "output": "(2) * (1) = 2, left: 2, 3, 12\n(12) - (3) = 9, left: 9, 2\n(2) + (1) = 3, left: 3, 3, 12\n(12) - (3) = 9, left: 9, 3\n(3) + (3) = 6, left: 6, 12\n(2) / (1) = 2, left: 2, 3, 12\n(2) - (12) = -10, left: -10, 3\n(1) - (2) = -1, left: -1, 3, 12\n(3) + (-1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 + (1 - 2)))"}, {"input": "3 12 2 1\n", "output": "(3) / (1) = 3, left: 3, 12, 2\n(1) - (3) = -2, left: -2, 12, 2\n(3) * (1) = 3, left: 3, 12, 2\n(12) / (2) = 6, left: 6, 3\n(1) / (3) = 1/3, left: 1/3, 12, 2\n(12) + (1/3) = 37/3, left: 37/3, 2\n(1/3) / (12) = 1/36, left: 1/36, 2\n(3) + (1) = 4, left: 4, 12, 2\n(12) * (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * (3 + 1)) / 2)"}, {"input": "3 12 2 1\n", "output": "(1) / (3) = 1/3, left: 1/3, 12, 2\n(3) - (1) = 2, left: 2, 12, 2\n(12) - (2) = 10, left: 10, 2\n(12) / (2) = 6, left: 6, 2\n(1) - (3) = -2, left: -2, 12, 2\n(12) - (2) = 10, left: 10, -2\n(3) * (1) = 3, left: 3, 12, 2\n(3) + (1) = 4, left: 4, 12, 2\n(12) * (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * (3 + 1)) / 2)"}, {"input": "3 12 2 1\n", "output": "(12) - (3) = 9, left: 9, 2, 1\n(3) + (12) = 15, left: 15, 2, 1\n(3) - (12) = -9, left: -9, 2, 1\n(2) / (-9) = -2/9, left: -2/9, 1\n(1) * (-2/9) = -2/9, left: -2/9\n(12) / (3) = 4, left: 4, 2, 1\n(1) * (4) = 4, left: 4, 2\n(2) * (4) = 8, left: 8, 1\n(1) * (8) = 8, left: 8\n(3) * (12) = 36, left: 36, 2, 1\n(2) * (36) = 72, left: 72, 1\n(2) - (3) = -1, left: -1, 12, 1\n(1) - (-1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 - (2 - 3)))"}, {"input": "3 12 2 1\n", "output": "(1) / (3) = 1/3, left: 1/3, 12, 2\n(3) - (1) = 2, left: 2, 12, 2\n(12) / (2) = 6, left: 6, 2\n(1) - (3) = -2, left: -2, 12, 2\n(3) * (1) = 3, left: 3, 12, 2\n(2) / (12) = 1/6, left: 1/6, 3\n(3) / (1) = 3, left: 3, 12, 2\n(2) / (12) = 1/6, left: 1/6, 3\n(2) * (3) = 6, left: 6, 12\n(3) + (1) = 4, left: 4, 12, 2\n(12) - (4) = 8, left: 8, 2\n(2) * (8) = 16, left: 16\n(12) * (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * (3 + 1)) / 2)"}, {"input": "3 12 2 1\n", "output": "(1) / (2) = 1/2, left: 1/2, 3, 12\n(2) * (1) = 2, left: 2, 3, 12\n(2) + (1) = 3, left: 3, 3, 12\n(12) - (3) = 9, left: 9, 3\n(3) + (3) = 6, left: 6, 12\n(2) / (1) = 2, left: 2, 3, 12\n(12) * (2) = 24, left: 24, 3\n(12) + (2) = 14, left: 14, 3\n(12) / (2) = 6, left: 6, 3\n(12) / (3) = 4, left: 4, 2\n(4) - (2) = 2, left: 2\n(1) - (2) = -1, left: -1, 3, 12\n(3) + (-1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 + (1 - 2)))"}, {"input": "8 2 3 4\n", "output": "(3) / (8) = 3/8, left: 3/8, 2, 4\n(4) / (2) = 2, left: 2, 3/8\n(8) / (3) = 8/3, left: 8/3, 2, 4\n(8/3) / (2) = 4/3, left: 4/3, 4\n(2) - (4) = -2, left: -2, 8, 3\n(8) / (-2) = -4, left: -4, 3\n(-2) / (8) = -1/4, left: -1/4, 3\n(2) + (4) = 6, left: 6, 8, 3\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 + 4) - 3))"}, {"input": "8 2 3 4\n", "output": "(2) * (4) = 8, left: 8, 8, 3\n(2) - (4) = -2, left: -2, 8, 3\n(4) - (2) = 2, left: 2, 8, 3\n(8) + (3) = 11, left: 11, 2\n(2) - (8) = -6, left: -6, 3\n(-6) - (3) = -9, left: -9\n(2) + (4) = 6, left: 6, 8, 3\n(6) / (3) = 2, left: 2, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 + 4) - 3))"}, {"input": "8 2 3 4\n", "output": "(3) - (2) = 1, left: 1, 8, 4\n(4) / (1) = 4, left: 4, 8\n(4) - (8) = -4, left: -4\n(8) - (4) = 4, left: 4\n(4) / (8) = 1/2, left: 1/2\n(4) * (1) = 4, left: 4, 8\n(4) - (8) = -4, left: -4\n(8) + (4) = 12, left: 12\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (3 - 2)))"}, {"input": "8 2 3 4\n", "output": "(8) + (2) = 10, left: 10, 3, 4\n(3) + (4) = 7, left: 7, 10\n(3) - (4) = -1, left: -1, 10\n(10) / (4) = 5/2, left: 5/2, 3\n(4) / (10) = 2/5, left: 2/5, 3\n(10) - (4) = 6, left: 6, 3\n(3) / (6) = 1/2, left: 1/2\n(8) / (2) = 4, left: 4, 3, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (8 / 2)))"}, {"input": "8 2 3 4\n", "output": "(3) * (4) = 12, left: 12, 8, 2\n(3) + (4) = 7, left: 7, 8, 2\n(2) * (7) = 14, left: 14, 8\n(2) / (7) = 2/7, left: 2/7, 8\n(2) + (7) = 9, left: 9, 8\n(8) * (9) = 72, left: 72\n(7) - (8) = -1, left: -1, 2\n(4) - (3) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (4 - 3)))"}, {"input": "8 2 3 4\n", "output": "(3) - (2) = 1, left: 1, 8, 4\n(4) / (1) = 4, left: 4, 8\n(8) * (4) = 32, left: 32\n(8) / (4) = 2, left: 2\n(4) - (8) = -4, left: -4\n(8) - (4) = 4, left: 4\n(8) + (4) = 12, left: 12\n(4) * (1) = 4, left: 4, 8\n(8) - (4) = 4, left: 4\n(4) - (8) = -4, left: -4\n(8) + (4) = 12, left: 12\n(8) * (4) = 32, left: 32\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (3 - 2)))"}, {"input": "8 2 3 4\n", "output": "(2) * (4) = 8, left: 8, 8, 3\n(8) / (3) = 8/3, left: 8/3, 8\n(2) - (4) = -2, left: -2, 8, 3\n(3) / (8) = 3/8, left: 3/8, -2\n(4) - (2) = 2, left: 2, 8, 3\n(8) - (2) = 6, left: 6, 3\n(6) / (3) = 2, left: 2\n(8) + (2) = 10, left: 10, 3\n(2) + (4) = 6, left: 6, 8, 3\n(8) - (3) = 5, left: 5, 6\n(8) + (6) = 14, left: 14, 3\n(3) - (14) = -11, left: -11\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 + 4) - 3))"}, {"input": "8 2 3 4\n", "output": "(8) * (3) = 24, left: 24, 2, 4\n(2) + (24) = 26, left: 26, 4\n(3) / (8) = 3/8, left: 3/8, 2, 4\n(4) * (3/8) = 3/2, left: 3/2, 2\n(8) / (3) = 8/3, left: 8/3, 2, 4\n(2) + (4) = 6, left: 6, 8/3\n(8) + (3) = 11, left: 11, 2, 4\n(2) - (4) = -2, left: -2, 8, 3\n(4) / (2) = 2, left: 2, 8, 3\n(3) * (2) = 6, left: 6, 8\n(3) - (8) = -5, left: -5, 2\n(2) + (4) = 6, left: 6, 8, 3\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 + 4) - 3))"}, {"input": "1 2 11 3\n", "output": "(3) / (11) = 3/11, left: 3/11, 1, 2\n(3/11) - (2) = -19/11, left: -19/11, 1\n(3) - (11) = -8, left: -8, 1, 2\n(11) / (3) = 11/3, left: 11/3, 1, 2\n(1) - (2) = -1, left: -1, 11/3\n(11) * (3) = 33, left: 33, 1, 2\n(1) * (33) = 33, left: 33, 2\n(11) - (3) = 8, left: 8, 1, 2\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((11 - 3) * (1 + 2))"}, {"input": "1 2 11 3\n", "output": "(3) - (2) = 1, left: 1, 1, 11\n(2) + (3) = 5, left: 5, 1, 11\n(11) * (5) = 55, left: 55, 1\n(1) + (55) = 56, left: 56\n(2) / (3) = 2/3, left: 2/3, 1, 11\n(2/3) / (1) = 2/3, left: 2/3, 11\n(2/3) / (11) = 2/33, left: 2/33, 1\n(11) - (3) = 8, left: 8, 1, 2\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((11 - 3) * (1 + 2))"}, {"input": "1 2 11 3\n", "output": "(1) * (3) = 3, left: 3, 2, 11\n(3) / (11) = 3/11, left: 3/11, 2\n(3) / (1) = 3, left: 3, 2, 11\n(11) - (3) = 8, left: 8, 2\n(11) - (2) = 9, left: 9, 3\n(1) + (3) = 4, left: 4, 2, 11\n(2) / (11) = 2/11, left: 2/11, 4\n(1) - (3) = -2, left: -2, 2, 11\n(11) * (-2) = -22, left: -22, 2\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (11 * (1 - 3)))"}, {"input": "1 2 11 3\n", "output": "(1) - (3) = -2, left: -2, 2, 11\n(11) + (-2) = 9, left: 9, 2\n(9) - (2) = 7, left: 7\n(2) / (9) = 2/9, left: 2/9\n(2) - (9) = -7, left: -7\n(2) + (9) = 11, left: 11\n(9) / (2) = 9/2, left: 9/2\n(2) * (9) = 18, left: 18\n(11) * (-2) = -22, left: -22, 2\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (11 * (1 - 3)))"}, {"input": "1 2 11 3\n", "output": "(2) - (1) = 1, left: 1, 11, 3\n(1) / (11) = 1/11, left: 1/11, 3\n(3) * (1/11) = 3/11, left: 3/11\n(2) / (1) = 2, left: 2, 11, 3\n(1) / (2) = 1/2, left: 1/2, 11, 3\n(1/2) / (3) = 1/6, left: 1/6, 11\n(1) * (2) = 2, left: 2, 11, 3\n(1) + (2) = 3, left: 3, 11, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (1 + 2)))"}, {"input": "1 2 11 3\n", "output": "(2) - (1) = 1, left: 1, 11, 3\n(11) + (1) = 12, left: 12, 3\n(11) / (1) = 11, left: 11, 3\n(2) / (1) = 2, left: 2, 11, 3\n(1) / (2) = 1/2, left: 1/2, 11, 3\n(11) / (1/2) = 22, left: 22, 3\n(3) - (22) = -19, left: -19\n(1) - (2) = -1, left: -1, 11, 3\n(1) * (2) = 2, left: 2, 11, 3\n(11) - (3) = 8, left: 8, 2\n(1) + (2) = 3, left: 3, 11, 3\n(11) + (3) = 14, left: 14, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (1 + 2)))"}, {"input": "1 2 11 3\n", "output": "(1) - (3) = -2, left: -2, 2, 11\n(11) + (-2) = 9, left: 9, 2\n(9) - (2) = 7, left: 7\n(2) / (9) = 2/9, left: 2/9\n(2) - (9) = -7, left: -7\n(2) + (9) = 11, left: 11\n(9) / (2) = 9/2, left: 9/2\n(2) * (9) = 18, left: 18\n(11) * (-2) = -22, left: -22, 2\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (11 * (1 - 3)))"}, {"input": "1 2 11 3\n", "output": "(1) - (3) = -2, left: -2, 2, 11\n(11) + (-2) = 9, left: 9, 2\n(9) - (2) = 7, left: 7\n(2) / (9) = 2/9, left: 2/9\n(2) - (9) = -7, left: -7\n(2) + (9) = 11, left: 11\n(9) / (2) = 9/2, left: 9/2\n(2) * (9) = 18, left: 18\n(11) * (-2) = -22, left: -22, 2\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (11 * (1 - 3)))"}, {"input": "2 6 9 5\n", "output": "(2) - (5) = -3, left: -3, 6, 9\n(9) - (6) = 3, left: 3, -3\n(-3) / (3) = -1, left: -1\n(9) / (6) = 3/2, left: 3/2, -3\n(-3) / (3/2) = -2, left: -2\n(2) / (5) = 2/5, left: 2/5, 6, 9\n(9) / (2/5) = 45/2, left: 45/2, 6\n(9) - (2/5) = 43/5, left: 43/5, 6\n(6) / (2/5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (6 / (2 / 5)))"}, {"input": "2 6 9 5\n", "output": "(2) * (5) = 10, left: 10, 6, 9\n(5) - (2) = 3, left: 3, 6, 9\n(6) / (3) = 2, left: 2, 9\n(3) / (9) = 1/3, left: 1/3, 6\n(9) * (3) = 27, left: 27, 6\n(2) + (5) = 7, left: 7, 6, 9\n(5) / (2) = 5/2, left: 5/2, 6, 9\n(9) - (6) = 3, left: 3, 5/2\n(6) * (5/2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (6 * (5 / 2)))"}, {"input": "2 6 9 5\n", "output": "(6) - (2) = 4, left: 4, 9, 5\n(5) - (9) = -4, left: -4, 4\n(9) - (5) = 4, left: 4, 4\n(4) - (4) = 0, left: 0\n(5) / (9) = 5/9, left: 5/9, 4\n(4) - (5) = -1, left: -1, 9\n(4) / (5) = 4/5, left: 4/5, 9\n(2) / (6) = 1/3, left: 1/3, 9, 5\n(5) / (1/3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 / (2 / 6)))"}, {"input": "2 6 9 5\n", "output": "(9) * (5) = 45, left: 45, 2, 6\n(6) / (45) = 2/15, left: 2/15, 2\n(2) * (6) = 12, left: 12, 45\n(5) / (9) = 5/9, left: 5/9, 2, 6\n(2) + (5/9) = 23/9, left: 23/9, 6\n(9) - (5) = 4, left: 4, 2, 6\n(6) - (9) = -3, left: -3, 2, 5\n(5) / (2) = 5/2, left: 5/2, 6, 9\n(6) * (5/2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (6 * (5 / 2)))"}, {"input": "2 6 9 5\n", "output": "(5) - (6) = -1, left: -1, 2, 9\n(6) + (5) = 11, left: 11, 2, 9\n(2) - (9) = -7, left: -7, 11\n(6) / (5) = 6/5, left: 6/5, 2, 9\n(2) * (6/5) = 12/5, left: 12/5, 9\n(5) / (6) = 5/6, left: 5/6, 2, 9\n(6) * (5) = 30, left: 30, 2, 9\n(2) + (9) = 11, left: 11, 30\n(30) / (2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((6 * 5) / 2))"}, {"input": "2 6 9 5\n", "output": "(9) / (5) = 9/5, left: 9/5, 2, 6\n(2) / (9/5) = 10/9, left: 10/9, 6\n(5) - (9) = -4, left: -4, 2, 6\n(9) - (5) = 4, left: 4, 2, 6\n(6) - (9) = -3, left: -3, 2, 5\n(9) / (6) = 3/2, left: 3/2, 2, 5\n(2) * (9) = 18, left: 18, 6, 5\n(9) - (2) = 7, left: 7, 6, 5\n(6) / (5) = 6/5, left: 6/5, 7\n(5) - (2) = 3, left: 3, 6, 9\n(9) - (3) = 6, left: 6, 6\n(5) / (2) = 5/2, left: 5/2, 6, 9\n(6) * (5/2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (6 * (5 / 2)))"}, {"input": "6 1 2 12\n", "output": "(6) / (1) = 6, left: 6, 2, 12\n(2) * (12) = 24, left: 24, 6\n(6) / (24) = 1/4, left: 1/4\n(2) / (6) = 1/3, left: 1/3, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (6 / 1)))"}, {"input": "6 1 2 12\n", "output": "(12) - (2) = 10, left: 10, 6, 1\n(6) / (1) = 6, left: 6, 10\n(1) / (6) = 1/6, left: 1/6, 10\n(1/6) - (10) = -59/6, left: -59/6\n(12) / (2) = 6, left: 6, 6, 1\n(2) + (12) = 14, left: 14, 6, 1\n(6) + (1) = 7, left: 7, 2, 12\n(6) / (1) = 6, left: 6, 2, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (6 / 1)))"}, {"input": "6 1 2 12\n", "output": "(2) / (6) = 1/3, left: 1/3, 1, 12\n(12) * (1/3) = 4, left: 4, 1\n(12) + (1/3) = 37/3, left: 37/3, 1\n(1) - (37/3) = -34/3, left: -34/3\n(12) / (1) = 12, left: 12, 1/3\n(1) * (1/3) = 1/3, left: 1/3, 12\n(2) - (6) = -4, left: -4, 1, 12\n(6) / (2) = 3, left: 3, 1, 12\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((6 / 2) - 1))"}, {"input": "6 1 2 12\n", "output": "(2) + (12) = 14, left: 14, 6, 1\n(6) / (1) = 6, left: 6, 14\n(6) - (1) = 5, left: 5, 14\n(6) * (14) = 84, left: 84, 1\n(12) / (2) = 6, left: 6, 6, 1\n(12) - (1) = 11, left: 11, 6, 2\n(2) - (6) = -4, left: -4, 11\n(12) / (1) = 12, left: 12, 6, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((12 / 1) + (6 * 2))"}, {"input": "6 1 2 12\n", "output": "(6) / (1) = 6, left: 6, 2, 12\n(2) - (12) = -10, left: -10, 6\n(12) - (2) = 10, left: 10, 6\n(12) / (2) = 6, left: 6, 6\n(2) / (12) = 1/6, left: 1/6, 6\n(6) + (1/6) = 37/6, left: 37/6\n(6) / (12) = 1/2, left: 1/2, 2\n(12) / (6) = 2, left: 2, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (6 / 1)))"}, {"input": "6 1 2 12\n", "output": "(1) * (2) = 2, left: 2, 6, 12\n(12) + (2) = 14, left: 14, 6\n(12) - (2) = 10, left: 10, 6\n(6) + (10) = 16, left: 16\n(12) / (2) = 6, left: 6, 6\n(2) - (12) = -10, left: -10, 6\n(6) / (-10) = -3/5, left: -3/5\n(6) - (-10) = 16, left: 16\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (1 * 2)))"}, {"input": "6 1 2 12\n", "output": "(12) - (2) = 10, left: 10, 6, 1\n(10) - (6) = 4, left: 4, 1\n(2) * (12) = 24, left: 24, 6, 1\n(6) * (1) = 6, left: 6, 24\n(12) / (2) = 6, left: 6, 6, 1\n(2) / (12) = 1/6, left: 1/6, 6, 1\n(2) - (12) = -10, left: -10, 6, 1\n(-10) - (1) = -11, left: -11, 6\n(2) + (12) = 14, left: 14, 6, 1\n(6) + (1) = 7, left: 7, 2, 12\n(2) + (12) = 14, left: 14, 7\n(6) / (1) = 6, left: 6, 2, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (6 / 1)))"}, {"input": "10 4 7 4\n", "output": "(10) * (4) = 40, left: 40, 4, 7\n(4) / (10) = 2/5, left: 2/5, 7, 4\n(4) * (2/5) = 8/5, left: 8/5, 7\n(4) * (7) = 28, left: 28, 10, 4\n(4) - (7) = -3, left: -3, 10, 4\n(10) * (4) = 40, left: 40, -3\n(-3) - (40) = -43, left: -43\n(4) + (4) = 8, left: 8, 10, 7\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (10 - 7))"}, {"input": "10 4 7 4\n", "output": "(7) / (4) = 7/4, left: 7/4, 10, 4\n(4) - (7) = -3, left: -3, 10, 4\n(4) - (-3) = 7, left: 7, 10\n(7) + (4) = 11, left: 11, 10, 4\n(10) - (4) = 6, left: 6, 11\n(10) - (7) = 3, left: 3, 4, 4\n(4) + (3) = 7, left: 7, 4\n(4) / (4) = 1, left: 1, 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((10 - 7) * (4 + 4))"}, {"input": "10 4 7 4\n", "output": "(7) / (10) = 7/10, left: 7/10, 4, 4\n(10) + (7) = 17, left: 17, 4, 4\n(4) - (4) = 0, left: 0, 17\n(0) / (17) = 0, left: 0\n(10) * (7) = 70, left: 70, 4, 4\n(4) + (70) = 74, left: 74, 4\n(7) - (10) = -3, left: -3, 4, 4\n(10) - (7) = 3, left: 3, 4, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((10 - 7) * (4 + 4))"}, {"input": "10 4 7 4\n", "output": "(4) / (7) = 4/7, left: 4/7, 10, 4\n(4) - (4/7) = 24/7, left: 24/7, 10\n(4) - (7) = -3, left: -3, 10, 4\n(7) * (4) = 28, left: 28, 10, 4\n(7) / (4) = 7/4, left: 7/4, 10, 4\n(7) / (4) = 7/4, left: 7/4, 10, 4\n(4) + (4) = 8, left: 8, 10, 7\n(7) + (8) = 15, left: 15, 10\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (10 - 7))"}, {"input": "10 4 7 4\n", "output": "(7) - (4) = 3, left: 3, 10, 4\n(3) / (4) = 3/4, left: 3/4, 10\n(4) / (7) = 4/7, left: 4/7, 10, 4\n(7) / (4) = 7/4, left: 7/4, 10, 4\n(10) * (4) = 40, left: 40, 7/4\n(7/4) / (10) = 7/40, left: 7/40, 4\n(7) + (4) = 11, left: 11, 10, 4\n(4) + (4) = 8, left: 8, 10, 7\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (10 - 7))"}, {"input": "10 4 7 4\n", "output": "(7) - (4) = 3, left: 3, 10, 4\n(10) + (4) = 14, left: 14, 3\n(7) + (4) = 11, left: 11, 10, 4\n(7) * (4) = 28, left: 28, 10, 4\n(10) + (28) = 38, left: 38, 4\n(4) * (28) = 112, left: 112, 10\n(4) * (7) = 28, left: 28, 10, 4\n(7) / (4) = 7/4, left: 7/4, 10, 4\n(10) * (7/4) = 35/2, left: 35/2, 4\n(7) - (4) = 3, left: 3, 10, 4\n(4) / (4) = 1, left: 1, 10, 7\n(4) + (4) = 8, left: 8, 10, 7\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (10 - 7))"}, {"input": "10 4 7 4\n", "output": "(10) - (4) = 6, left: 6, 4, 7\n(4) / (10) = 2/5, left: 2/5, 4, 7\n(10) + (4) = 14, left: 14, 7, 4\n(4) / (10) = 2/5, left: 2/5, 7, 4\n(7) / (4) = 7/4, left: 7/4, 2/5\n(10) / (4) = 5/2, left: 5/2, 7, 4\n(7) - (4) = 3, left: 3, 10, 4\n(4) * (3) = 12, left: 12, 10\n(4) / (7) = 4/7, left: 4/7, 10, 4\n(7) / (4) = 7/4, left: 7/4, 10, 4\n(4) + (4) = 8, left: 8, 10, 7\n(10) + (8) = 18, left: 18, 7\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (10 - 7))"}, {"input": "5 10 3 10\n", "output": "(10) - (3) = 7, left: 7, 5, 10\n(10) / (7) = 10/7, left: 10/7, 5\n(10) * (3) = 30, left: 30, 5, 10\n(10) - (10) = 0, left: 0, 5, 3\n(10) / (10) = 1, left: 1, 5, 3\n(10) * (10) = 100, left: 100, 5, 3\n(5) / (3) = 5/3, left: 5/3, 100\n(10) / (5) = 2, left: 2, 10, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "5 10 3 10\n", "output": "(10) - (10) = 0, left: 0, 5, 3\n(10) / (10) = 1, left: 1, 5, 3\n(10) - (3) = 7, left: 7, 5, 10\n(3) + (10) = 13, left: 13, 5, 10\n(3) - (10) = -7, left: -7, 5, 10\n(3) - (10) = -7, left: -7, 5, 10\n(5) - (10) = -5, left: -5, 10, 3\n(10) / (5) = 2, left: 2, 10, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "5 10 3 10\n", "output": "(3) / (10) = 3/10, left: 3/10, 5, 10\n(3/10) / (5) = 3/50, left: 3/50, 10\n(3) - (10) = -7, left: -7, 5, 10\n(-7) / (5) = -7/5, left: -7/5, 10\n(5) / (10) = 1/2, left: 1/2, 3, 10\n(3) / (1/2) = 6, left: 6, 10\n(10) * (6) = 60, left: 60\n(10) / (5) = 2, left: 2, 3, 10\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "5 10 3 10\n", "output": "(5) / (10) = 1/2, left: 1/2, 10, 3\n(1/2) / (3) = 1/6, left: 1/6, 10\n(10) - (5) = 5, left: 5, 10, 3\n(5) / (10) = 1/2, left: 1/2, 3\n(3) * (5) = 15, left: 15, 10\n(15) / (10) = 3/2, left: 3/2\n(5) - (10) = -5, left: -5, 10, 3\n(10) / (5) = 2, left: 2, 10, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "5 10 3 10\n", "output": "(3) - (5) = -2, left: -2, 10, 10\n(5) - (3) = 2, left: 2, 10, 10\n(10) - (2) = 8, left: 8, 10\n(3) - (10) = -7, left: -7, 5, 10\n(5) + (10) = 15, left: 15, -7\n(3) / (10) = 3/10, left: 3/10, 5, 10\n(5) / (10) = 1/2, left: 1/2, 10, 3\n(10) / (5) = 2, left: 2, 10, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "6 9 6 12\n", "output": "(6) + (12) = 18, left: 18, 9, 6\n(9) / (18) = 1/2, left: 1/2, 6\n(6) - (18) = -12, left: -12, 9\n(9) + (-12) = -3, left: -3\n(12) - (6) = 6, left: 6, 9, 6\n(9) * (6) = 54, left: 54, 6\n(6) * (12) = 72, left: 72, 9, 6\n(6) + (72) = 78, left: 78, 9\n(9) - (6) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((6 * 12) / (9 - 6))"}, {"input": "6 9 6 12\n", "output": "(6) - (9) = -3, left: -3, 6, 12\n(-3) - (12) = -15, left: -15, 6\n(6) / (12) = 1/2, left: 1/2, -3\n(6) + (-3) = 3, left: 3, 12\n(6) - (-3) = 9, left: 9, 12\n(6) * (-3) = -18, left: -18, 12\n(-3) - (6) = -9, left: -9, 12\n(6) / (9) = 2/3, left: 2/3, 6, 12\n(12) / (2/3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (12 / (6 / 9)))"}, {"input": "6 9 6 12\n", "output": "(6) - (12) = -6, left: -6, 6, 9\n(6) / (-6) = -1, left: -1, 9\n(6) - (9) = -3, left: -3, -6\n(-6) / (-3) = 2, left: 2\n(6) / (12) = 1/2, left: 1/2, 6, 9\n(6) / (9) = 2/3, left: 2/3, 1/2\n(9) - (6) = 3, left: 3, 1/2\n(3) - (1/2) = 5/2, left: 5/2\n(9) / (1/2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 / (6 / 12)))"}, {"input": "6 9 6 12\n", "output": "(12) / (9) = 4/3, left: 4/3, 6, 6\n(6) + (4/3) = 22/3, left: 22/3, 6\n(6) - (6) = 0, left: 0, 4/3\n(0) - (4/3) = -4/3, left: -4/3\n(6) * (4/3) = 8, left: 8, 6\n(8) / (6) = 4/3, left: 4/3\n(6) - (4/3) = 14/3, left: 14/3, 6\n(9) - (12) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (9 - 12)))"}, {"input": "10 12 1 5\n", "output": "(5) / (10) = 1/2, left: 1/2, 12, 1\n(12) + (1/2) = 25/2, left: 25/2, 1\n(1) * (25/2) = 25/2, left: 25/2\n(1/2) - (12) = -23/2, left: -23/2, 1\n(1/2) / (12) = 1/24, left: 1/24, 1\n(1) / (1/24) = 24, left: 24\nreach 24! expression: (1 / ((5 / 10) / 12))"}, {"input": "10 12 1 5\n", "output": "(10) + (1) = 11, left: 11, 12, 5\n(12) + (11) = 23, left: 23, 5\n(10) - (1) = 9, left: 9, 12, 5\n(1) / (10) = 1/10, left: 1/10, 12, 5\n(12) / (5) = 12/5, left: 12/5, 1/10\n(12/5) / (1/10) = 24, left: 24\nreach 24! expression: ((12 / 5) / (1 / 10))"}, {"input": "10 12 1 5\n", "output": "(10) + (12) = 22, left: 22, 1, 5\n(5) - (22) = -17, left: -17, 1\n(12) / (10) = 6/5, left: 6/5, 1, 5\n(10) * (12) = 120, left: 120, 1, 5\n(120) / (5) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * ((10 * 12) / 5))"}, {"input": "10 12 1 5\n", "output": "(10) + (12) = 22, left: 22, 1, 5\n(22) - (1) = 21, left: 21, 5\n(5) + (21) = 26, left: 26\n(12) - (10) = 2, left: 2, 1, 5\n(1) / (2) = 1/2, left: 1/2, 5\n(10) * (12) = 120, left: 120, 1, 5\n(5) - (120) = -115, left: -115, 1\n(-115) - (1) = -116, left: -116\n(120) / (5) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * ((10 * 12) / 5))"}, {"input": "10 12 1 5\n", "output": "(5) / (10) = 1/2, left: 1/2, 12, 1\n(12) * (1/2) = 6, left: 6, 1\n(1) - (6) = -5, left: -5\n(12) + (1/2) = 25/2, left: 25/2, 1\n(1) + (25/2) = 27/2, left: 27/2\n(1/2) - (12) = -23/2, left: -23/2, 1\n(1) / (-23/2) = -2/23, left: -2/23\n(1) + (-23/2) = -21/2, left: -21/2\n(1/2) / (12) = 1/24, left: 1/24, 1\n(1) / (1/24) = 24, left: 24\nreach 24! expression: (1 / ((5 / 10) / 12))"}, {"input": "10 12 1 5\n", "output": "(10) + (5) = 15, left: 15, 12, 1\n(1) * (15) = 15, left: 15, 12\n(1) - (15) = -14, left: -14, 12\n(10) * (5) = 50, left: 50, 12, 1\n(12) / (50) = 6/25, left: 6/25, 1\n(10) - (5) = 5, left: 5, 12, 1\n(1) / (5) = 1/5, left: 1/5, 12\n(5) / (10) = 1/2, left: 1/2, 12, 1\n(1) * (1/2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (1 * (5 / 10)))"}, {"input": "10 12 1 5\n", "output": "(5) - (10) = -5, left: -5, 12, 1\n(10) - (5) = 5, left: 5, 12, 1\n(10) * (5) = 50, left: 50, 12, 1\n(12) / (50) = 6/25, left: 6/25, 1\n(1) / (6/25) = 25/6, left: 25/6\n(12) / (1) = 12, left: 12, 50\n(10) / (5) = 2, left: 2, 12, 1\n(1) - (2) = -1, left: -1, 12\n(1) * (2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 * (10 / 5)))"}, {"input": "10 12 1 5\n", "output": "(10) + (1) = 11, left: 11, 12, 5\n(10) - (1) = 9, left: 9, 12, 5\n(12) / (9) = 4/3, left: 4/3, 5\n(4/3) - (5) = -11/3, left: -11/3\n(12) - (5) = 7, left: 7, 9\n(1) - (10) = -9, left: -9, 12, 5\n(-9) / (5) = -9/5, left: -9/5, 12\n(1) / (10) = 1/10, left: 1/10, 12, 5\n(12) / (5) = 12/5, left: 12/5, 1/10\n(12/5) / (1/10) = 24, left: 24\nreach 24! expression: ((12 / 5) / (1 / 10))"}, {"input": "11 1 9 5\n", "output": "(9) + (5) = 14, left: 14, 11, 1\n(11) * (14) = 154, left: 154, 1\n(14) / (11) = 14/11, left: 14/11, 1\n(14) - (11) = 3, left: 3, 1\n(11) + (14) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((11 + (9 + 5)) - 1)"}, {"input": "11 1 9 5\n", "output": "(11) * (1) = 11, left: 11, 9, 5\n(5) / (11) = 5/11, left: 5/11, 9\n(5/11) - (9) = -94/11, left: -94/11\n(11) - (1) = 10, left: 10, 9, 5\n(9) + (10) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (9 + (11 - 1)))"}, {"input": "11 1 9 5\n", "output": "(11) * (1) = 11, left: 11, 9, 5\n(9) / (11) = 9/11, left: 9/11, 5\n(5) / (11) = 5/11, left: 5/11, 9\n(9) - (5/11) = 94/11, left: 94/11\n(5) * (11) = 55, left: 55, 9\n(11) - (5) = 6, left: 6, 9\n(9) - (6) = 3, left: 3\n(11) - (1) = 10, left: 10, 9, 5\n(9) + (10) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (9 + (11 - 1)))"}, {"input": "11 1 9 5\n", "output": "(1) * (9) = 9, left: 9, 11, 5\n(11) + (9) = 20, left: 20, 5\n(1) / (9) = 1/9, left: 1/9, 11, 5\n(11) / (5) = 11/5, left: 11/5, 1/9\n(11) * (1/9) = 11/9, left: 11/9, 5\n(5) / (1/9) = 45, left: 45, 11\n(45) - (11) = 34, left: 34\n(1) - (9) = -8, left: -8, 11, 5\n(-8) - (5) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - ((1 - 9) - 5))"}, {"input": "11 1 9 5\n", "output": "(9) + (5) = 14, left: 14, 11, 1\n(11) * (14) = 154, left: 154, 1\n(1) * (154) = 154, left: 154\n(1) + (154) = 155, left: 155\n(11) - (14) = -3, left: -3, 1\n(1) / (-3) = -1/3, left: -1/3\n(11) / (14) = 11/14, left: 11/14, 1\n(14) / (11) = 14/11, left: 14/11, 1\n(11) + (14) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((11 + (9 + 5)) - 1)"}, {"input": "11 1 9 5\n", "output": "(1) / (11) = 1/11, left: 1/11, 9, 5\n(5) + (1/11) = 56/11, left: 56/11, 9\n(9) - (56/11) = 43/11, left: 43/11\n(11) / (1) = 11, left: 11, 9, 5\n(5) - (11) = -6, left: -6, 9\n(9) / (11) = 9/11, left: 9/11, 5\n(9) / (5) = 9/5, left: 9/5, 11\n(1) - (11) = -10, left: -10, 9, 5\n(-10) - (9) = -19, left: -19, 5\n(5) - (-19) = 24, left: 24\nreach 24! expression: (5 - ((1 - 11) - 9))"}, {"input": "11 1 9 5\n", "output": "(9) / (5) = 9/5, left: 9/5, 11, 1\n(11) * (1) = 11, left: 11, 9/5\n(1) - (11) = -10, left: -10, 9/5\n(9/5) / (11) = 9/55, left: 9/55, 1\n(5) / (9) = 5/9, left: 5/9, 11, 1\n(5) - (9) = -4, left: -4, 11, 1\n(1) + (-4) = -3, left: -3, 11\n(9) + (5) = 14, left: 14, 11, 1\n(11) + (14) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((11 + (9 + 5)) - 1)"}, {"input": "2 1 11 7\n", "output": "(2) / (7) = 2/7, left: 2/7, 1, 11\n(11) - (1) = 10, left: 10, 2/7\n(1) * (2/7) = 2/7, left: 2/7, 11\n(2) * (7) = 14, left: 14, 1, 11\n(1) - (14) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (1 - (2 * 7)))"}, {"input": "2 1 11 7\n", "output": "(1) / (11) = 1/11, left: 1/11, 2, 7\n(7) - (1/11) = 76/11, left: 76/11, 2\n(7) * (1/11) = 7/11, left: 7/11, 2\n(11) - (1) = 10, left: 10, 2, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((11 - 1) + (2 * 7))"}, {"input": "2 1 11 7\n", "output": "(1) / (11) = 1/11, left: 1/11, 2, 7\n(7) - (2) = 5, left: 5, 1/11\n(2) + (7) = 9, left: 9, 1/11\n(1/11) - (9) = -98/11, left: -98/11\n(2) - (1/11) = 21/11, left: 21/11, 7\n(1/11) - (7) = -76/11, left: -76/11, 2\n(7) + (1/11) = 78/11, left: 78/11, 2\n(11) - (1) = 10, left: 10, 2, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((11 - 1) + (2 * 7))"}, {"input": "2 1 11 7\n", "output": "(1) + (7) = 8, left: 8, 2, 11\n(2) - (8) = -6, left: -6, 11\n(-6) / (11) = -6/11, left: -6/11\n(7) / (1) = 7, left: 7, 2, 11\n(2) / (7) = 2/7, left: 2/7, 1, 11\n(2/7) / (11) = 2/77, left: 2/77, 1\n(7) - (2) = 5, left: 5, 1, 11\n(2) * (7) = 14, left: 14, 1, 11\n(1) - (11) = -10, left: -10, 14\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((2 * 7) - (1 - 11))"}, {"input": "2 1 11 7\n", "output": "(11) - (7) = 4, left: 4, 2, 1\n(2) / (1) = 2, left: 2, 4\n(4) - (1) = 3, left: 3, 2\n(11) / (7) = 11/7, left: 11/7, 2, 1\n(1) * (11/7) = 11/7, left: 11/7, 2\n(11) * (7) = 77, left: 77, 2, 1\n(2) - (1) = 1, left: 1, 77\n(2) * (7) = 14, left: 14, 1, 11\n(11) + (14) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((11 + (2 * 7)) - 1)"}, {"input": "2 1 11 7\n", "output": "(2) / (7) = 2/7, left: 2/7, 1, 11\n(1) / (11) = 1/11, left: 1/11, 2/7\n(2/7) / (1/11) = 22/7, left: 22/7\n(1) * (11) = 11, left: 11, 2/7\n(1) / (2/7) = 7/2, left: 7/2, 11\n(1) - (2/7) = 5/7, left: 5/7, 11\n(11) - (2/7) = 75/7, left: 75/7, 1\n(2) * (7) = 14, left: 14, 1, 11\n(1) - (14) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (1 - (2 * 7)))"}, {"input": "2 1 11 7\n", "output": "(7) / (2) = 7/2, left: 7/2, 1, 11\n(2) - (7) = -5, left: -5, 1, 11\n(1) + (11) = 12, left: 12, -5\n(7) - (2) = 5, left: 5, 1, 11\n(1) * (11) = 11, left: 11, 5\n(2) + (7) = 9, left: 9, 1, 11\n(11) - (1) = 10, left: 10, 9\n(2) * (7) = 14, left: 14, 1, 11\n(14) - (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((2 * 7) - 1))"}, {"input": "2 1 11 7\n", "output": "(11) - (7) = 4, left: 4, 2, 1\n(2) + (1) = 3, left: 3, 4\n(4) - (1) = 3, left: 3, 2\n(1) * (4) = 4, left: 4, 2\n(7) - (11) = -4, left: -4, 2, 1\n(1) - (2) = -1, left: -1, -4\n(11) + (7) = 18, left: 18, 2, 1\n(11) / (7) = 11/7, left: 11/7, 2, 1\n(11) * (7) = 77, left: 77, 2, 1\n(7) / (2) = 7/2, left: 7/2, 1, 11\n(1) - (7/2) = -5/2, left: -5/2, 11\n(2) * (7) = 14, left: 14, 1, 11\n(11) + (14) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((11 + (2 * 7)) - 1)"}, {"input": "4 1 10 4\n", "output": "(1) - (10) = -9, left: -9, 4, 4\n(-9) - (4) = -13, left: -13, 4\n(4) / (-9) = -4/9, left: -4/9, 4\n(1) / (10) = 1/10, left: 1/10, 4, 4\n(4) * (4) = 16, left: 16, 1/10\n(4) * (1/10) = 2/5, left: 2/5, 4\n(4) - (2/5) = 18/5, left: 18/5\n(10) / (1) = 10, left: 10, 4, 4\n(10) - (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((10 / 1) - 4))"}, {"input": "4 1 10 4\n", "output": "(10) / (1) = 10, left: 10, 4, 4\n(4) / (10) = 2/5, left: 2/5, 4\n(4) * (2/5) = 8/5, left: 8/5\n(4) * (10) = 40, left: 40, 4\n(4) - (10) = -6, left: -6, 4\n(4) * (-6) = -24, left: -24\n(10) / (4) = 5/2, left: 5/2, 4\n(4) / (5/2) = 8/5, left: 8/5\n(10) - (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((10 / 1) - 4))"}, {"input": "4 1 10 4\n", "output": "(4) / (10) = 2/5, left: 2/5, 1, 4\n(4) + (2/5) = 22/5, left: 22/5, 1\n(22/5) / (1) = 22/5, left: 22/5\n(1) + (22/5) = 27/5, left: 27/5\n(2/5) / (1) = 2/5, left: 2/5, 4\n(4) * (10) = 40, left: 40, 1, 4\n(4) + (10) = 14, left: 14, 1, 4\n(10) - (4) = 6, left: 6, 1, 4\n(4) / (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((10 - 4) * (4 / 1))"}, {"input": "4 1 10 4\n", "output": "(10) * (4) = 40, left: 40, 4, 1\n(4) + (1) = 5, left: 5, 40\n(40) - (1) = 39, left: 39, 4\n(4) + (40) = 44, left: 44, 1\n(4) / (10) = 2/5, left: 2/5, 4, 1\n(10) + (4) = 14, left: 14, 4, 1\n(4) - (14) = -10, left: -10, 1\n(10) - (4) = 6, left: 6, 4, 1\n(4) * (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((10 - 4) * (4 * 1))"}, {"input": "4 1 10 4\n", "output": "(4) + (1) = 5, left: 5, 10, 4\n(10) + (5) = 15, left: 15, 4\n(10) / (4) = 5/2, left: 5/2, 5\n(4) - (10) = -6, left: -6, 5\n(10) * (4) = 40, left: 40, 5\n(1) / (4) = 1/4, left: 1/4, 10, 4\n(10) / (1/4) = 40, left: 40, 4\n(10) / (4) = 5/2, left: 5/2, 1/4\n(10) - (4) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((10 - 4) / (1 / 4))"}, {"input": "7 8 13 9\n", "output": "(8) - (13) = -5, left: -5, 7, 9\n(9) / (7) = 9/7, left: 9/7, -5\n(8) / (13) = 8/13, left: 8/13, 7, 9\n(8/13) / (7) = 8/91, left: 8/91, 9\n(9) + (8/91) = 827/91, left: 827/91\n(8) * (13) = 104, left: 104, 7, 9\n(8) - (9) = -1, left: -1, 7, 13\n(7) + (9) = 16, left: 16, 8, 13\n(16) - (13) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 9) - 13))"}, {"input": "7 8 13 9\n", "output": "(7) * (9) = 63, left: 63, 8, 13\n(63) / (8) = 63/8, left: 63/8, 13\n(13) - (63) = -50, left: -50, 8\n(9) / (7) = 9/7, left: 9/7, 8, 13\n(9/7) / (13) = 9/91, left: 9/91, 8\n(9) - (7) = 2, left: 2, 8, 13\n(8) - (2) = 6, left: 6, 13\n(7) + (9) = 16, left: 16, 8, 13\n(16) - (13) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 9) - 13))"}, {"input": "7 8 13 9\n", "output": "(7) - (13) = -6, left: -6, 8, 9\n(8) * (9) = 72, left: 72, -6\n(8) - (9) = -1, left: -1, -6\n(-6) * (-1) = 6, left: 6\n(9) / (8) = 9/8, left: 9/8, -6\n(9) / (-6) = -3/2, left: -3/2, 8\n(9) * (-6) = -54, left: -54, 8\n(8) * (-54) = -432, left: -432\n(9) + (-6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 + (7 - 13)))"}, {"input": "7 8 13 9\n", "output": "(13) / (8) = 13/8, left: 13/8, 7, 9\n(13) - (8) = 5, left: 5, 7, 9\n(7) - (5) = 2, left: 2, 9\n(8) / (13) = 8/13, left: 8/13, 7, 9\n(9) - (8/13) = 109/13, left: 109/13, 7\n(109/13) - (7) = 18/13, left: 18/13\n(7) * (9) = 63, left: 63, 8/13\n(13) - (9) = 4, left: 4, 7, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (13 - 9)))"}, {"input": "7 8 13 9\n", "output": "(7) * (9) = 63, left: 63, 8, 13\n(8) / (63) = 8/63, left: 8/63, 13\n(7) / (9) = 7/9, left: 7/9, 8, 13\n(8) + (13) = 21, left: 21, 7/9\n(7/9) - (13) = -110/9, left: -110/9, 8\n(7) + (9) = 16, left: 16, 8, 13\n(8) - (16) = -8, left: -8, 13\n(8) * (16) = 128, left: 128, 13\n(16) - (13) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 9) - 13))"}, {"input": "7 8 13 9\n", "output": "(7) + (8) = 15, left: 15, 13, 9\n(7) - (8) = -1, left: -1, 13, 9\n(13) / (9) = 13/9, left: 13/9, -1\n(8) + (13) = 21, left: 21, 7, 9\n(7) + (9) = 16, left: 16, 21\n(13) / (8) = 13/8, left: 13/8, 7, 9\n(8) - (13) = -5, left: -5, 7, 9\n(7) + (-5) = 2, left: 2, 9\n(13) - (8) = 5, left: 5, 7, 9\n(8) + (9) = 17, left: 17, 7, 13\n(8) / (9) = 8/9, left: 8/9, 7, 13\n(7) + (9) = 16, left: 16, 8, 13\n(16) - (13) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 9) - 13))"}, {"input": "7 3 3 1\n", "output": "(3) - (7) = -4, left: -4, 3, 1\n(-4) - (1) = -5, left: -5, 3\n(3) / (1) = 3, left: 3, -4\n(-4) / (3) = -4/3, left: -4/3\n(3) - (-4) = 7, left: 7, 1\n(1) - (7) = -6, left: -6\n(7) / (3) = 7/3, left: 7/3, 3, 1\n(7) * (3) = 21, left: 21, 3, 1\n(3) + (21) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 + (7 * 3)) / 1)"}, {"input": "7 3 3 1\n", "output": "(3) / (1) = 3, left: 3, 7, 3\n(3) / (7) = 3/7, left: 3/7, 3\n(3/7) - (3) = -18/7, left: -18/7\n(3) / (3/7) = 7, left: 7\n(3) - (3/7) = 18/7, left: 18/7\n(3) * (3/7) = 9/7, left: 9/7\n(7) + (3) = 10, left: 10, 3\n(7) * (3) = 21, left: 21, 3\n(21) / (3) = 7, left: 7\n(3) + (21) = 24, left: 24\nreach 24! expression: ((3 / 1) + (7 * 3))"}, {"input": "7 3 3 1\n", "output": "(7) - (3) = 4, left: 4, 3, 1\n(1) / (4) = 1/4, left: 1/4, 3\n(1) * (4) = 4, left: 4, 3\n(3) / (4) = 3/4, left: 3/4\n(7) / (3) = 7/3, left: 7/3, 3, 1\n(3) / (1) = 3, left: 3, 7/3\n(3) / (7/3) = 9/7, left: 9/7, 1\n(7) * (3) = 21, left: 21, 3, 1\n(21) / (1) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + ((7 * 3) / 1))"}, {"input": "7 3 3 1\n", "output": "(7) * (1) = 7, left: 7, 3, 3\n(3) / (3) = 1, left: 1, 7\n(3) + (3) = 6, left: 6, 7\n(3) / (3) = 1, left: 1, 7\n(3) / (7) = 3/7, left: 3/7, 3\n(3) + (3/7) = 24/7, left: 24/7\n(7) - (3) = 4, left: 4, 3\n(3) - (4) = -1, left: -1\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 * (7 * 1)))"}, {"input": "12 5 7 12\n", "output": "(5) + (12) = 17, left: 17, 12, 7\n(5) / (12) = 5/12, left: 5/12, 12, 7\n(7) * (5/12) = 35/12, left: 35/12, 12\n(5) * (12) = 60, left: 60, 12, 7\n(12) * (7) = 84, left: 84, 60\n(84) - (60) = 24, left: 24\nreach 24! expression: ((12 * 7) - (5 * 12))"}, {"input": "12 5 7 12\n", "output": "(5) / (12) = 5/12, left: 5/12, 7, 12\n(12) * (5) = 60, left: 60, 7, 12\n(12) - (60) = -48, left: -48, 7\n(60) - (12) = 48, left: 48, 7\n(7) * (12) = 84, left: 84, 60\n(84) - (60) = 24, left: 24\nreach 24! expression: ((7 * 12) - (12 * 5))"}, {"input": "12 5 7 12\n", "output": "(12) * (12) = 144, left: 144, 5, 7\n(12) - (12) = 0, left: 0, 5, 7\n(5) + (7) = 12, left: 12, 0\n(7) * (12) = 84, left: 84, 12, 5\n(12) * (5) = 60, left: 60, 84\n(84) - (60) = 24, left: 24\nreach 24! expression: ((7 * 12) - (12 * 5))"}, {"input": "12 5 7 12\n", "output": "(5) / (12) = 5/12, left: 5/12, 12, 7\n(5/12) / (7) = 5/84, left: 5/84, 12\n(12) - (5) = 7, left: 7, 12, 7\n(5) * (12) = 60, left: 60, 12, 7\n(12) * (7) = 84, left: 84, 60\n(84) - (60) = 24, left: 24\nreach 24! expression: ((12 * 7) - (5 * 12))"}, {"input": "12 5 7 12\n", "output": "(12) * (12) = 144, left: 144, 5, 7\n(12) / (12) = 1, left: 1, 5, 7\n(12) / (12) = 1, left: 1, 5, 7\n(5) / (1) = 5, left: 5, 7\n(12) - (12) = 0, left: 0, 5, 7\n(7) + (12) = 19, left: 19, 12, 5\n(5) / (12) = 5/12, left: 5/12, 19\n(7) * (12) = 84, left: 84, 12, 5\n(12) * (5) = 60, left: 60, 84\n(84) - (60) = 24, left: 24\nreach 24! expression: ((7 * 12) - (12 * 5))"}, {"input": "12 5 7 12\n", "output": "(5) - (7) = -2, left: -2, 12, 12\n(5) * (7) = 35, left: 35, 12, 12\n(7) - (5) = 2, left: 2, 12, 12\n(12) / (7) = 12/7, left: 12/7, 12, 5\n(7) - (12) = -5, left: -5, 12, 5\n(12) - (7) = 5, left: 5, 12, 5\n(5) / (5) = 1, left: 1, 12\n(7) * (12) = 84, left: 84, 12, 5\n(12) * (5) = 60, left: 60, 84\n(84) - (60) = 24, left: 24\nreach 24! expression: ((7 * 12) - (12 * 5))"}, {"input": "12 5 7 12\n", "output": "(12) + (12) = 24, left: 24, 5, 7\n(12) / (12) = 1, left: 1, 5, 7\n(12) / (5) = 12/5, left: 12/5, 12, 7\n(12) + (7) = 19, left: 19, 12/5\n(12/5) - (19) = -83/5, left: -83/5\n(5) - (12) = -7, left: -7, 12, 7\n(-7) - (12) = -19, left: -19, 7\n(5) * (12) = 60, left: 60, 12, 7\n(12) * (7) = 84, left: 84, 60\n(84) - (60) = 24, left: 24\nreach 24! expression: ((12 * 7) - (5 * 12))"}, {"input": "12 5 7 12\n", "output": "(12) - (5) = 7, left: 7, 12, 7\n(12) * (7) = 84, left: 84, 7\n(5) + (12) = 17, left: 17, 12, 7\n(12) / (17) = 12/17, left: 12/17, 7\n(5) / (12) = 5/12, left: 5/12, 12, 7\n(12) + (7) = 19, left: 19, 5/12\n(5/12) / (19) = 5/228, left: 5/228\n(5) * (12) = 60, left: 60, 12, 7\n(12) * (7) = 84, left: 84, 60\n(84) - (60) = 24, left: 24\nreach 24! expression: ((12 * 7) - (5 * 12))"}, {"input": "12 5 7 12\n", "output": "(5) / (12) = 5/12, left: 5/12, 7, 12\n(12) - (5/12) = 139/12, left: 139/12, 7\n(12) * (5) = 60, left: 60, 7, 12\n(7) - (60) = -53, left: -53, 12\n(7) / (60) = 7/60, left: 7/60, 12\n(12) / (60) = 1/5, left: 1/5, 7\n(7) * (1/5) = 7/5, left: 7/5\n(7) / (12) = 7/12, left: 7/12, 60\n(7) * (12) = 84, left: 84, 60\n(84) - (60) = 24, left: 24\nreach 24! expression: ((7 * 12) - (12 * 5))"}, {"input": "9 13 2 11\n", "output": "(2) + (11) = 13, left: 13, 9, 13\n(9) - (13) = -4, left: -4, 13\n(13) - (-4) = 17, left: 17\n(13) * (2) = 26, left: 26, 9, 11\n(9) + (26) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((9 + (13 * 2)) - 11)"}, {"input": "9 13 2 11\n", "output": "(11) - (2) = 9, left: 9, 9, 13\n(2) / (11) = 2/11, left: 2/11, 9, 13\n(13) + (2/11) = 145/11, left: 145/11, 9\n(13) * (2) = 26, left: 26, 9, 11\n(26) - (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((13 * 2) - 11))"}, {"input": "9 13 2 11\n", "output": "(2) * (11) = 22, left: 22, 9, 13\n(13) - (22) = -9, left: -9, 9\n(11) - (2) = 9, left: 9, 9, 13\n(9) - (9) = 0, left: 0, 13\n(2) / (13) = 2/13, left: 2/13, 9, 11\n(2) - (13) = -11, left: -11, 9, 11\n(13) + (2) = 15, left: 15, 9, 11\n(13) * (2) = 26, left: 26, 9, 11\n(9) + (26) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((9 + (13 * 2)) - 11)"}, {"input": "9 13 2 11\n", "output": "(11) / (13) = 11/13, left: 11/13, 9, 2\n(2) * (11) = 22, left: 22, 9, 13\n(9) * (13) = 117, left: 117, 22\n(22) + (117) = 139, left: 139\n(9) / (13) = 9/13, left: 9/13, 2, 11\n(9) - (2) = 7, left: 7, 13, 11\n(11) * (7) = 77, left: 77, 13\n(9) - (11) = -2, left: -2, 13, 2\n(13) * (2) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((9 - 11) + (13 * 2))"}, {"input": "9 13 2 11\n", "output": "(9) - (13) = -4, left: -4, 2, 11\n(13) / (9) = 13/9, left: 13/9, 2, 11\n(11) + (13/9) = 112/9, left: 112/9, 2\n(2) * (11) = 22, left: 22, 9, 13\n(2) - (11) = -9, left: -9, 9, 13\n(13) - (-9) = 22, left: 22, 9\n(11) - (2) = 9, left: 9, 9, 13\n(13) * (2) = 26, left: 26, 9, 11\n(26) - (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((13 * 2) - 11))"}, {"input": "9 13 2 11\n", "output": "(9) * (13) = 117, left: 117, 2, 11\n(13) - (9) = 4, left: 4, 2, 11\n(13) / (9) = 13/9, left: 13/9, 2, 11\n(9) / (13) = 9/13, left: 9/13, 2, 11\n(9) + (13) = 22, left: 22, 2, 11\n(22) / (11) = 2, left: 2, 2\n(9) * (11) = 99, left: 99, 13, 2\n(11) - (9) = 2, left: 2, 13, 2\n(13) * (2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * 2) - (11 - 9))"}, {"input": "9 13 2 11\n", "output": "(9) + (2) = 11, left: 11, 13, 11\n(9) / (2) = 9/2, left: 9/2, 13, 11\n(9/2) - (11) = -13/2, left: -13/2, 13\n(11) + (9/2) = 31/2, left: 31/2, 13\n(11) / (13) = 11/13, left: 11/13, 9/2\n(9) - (2) = 7, left: 7, 13, 11\n(9) * (2) = 18, left: 18, 13, 11\n(13) * (2) = 26, left: 26, 9, 11\n(9) + (26) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((9 + (13 * 2)) - 11)"}, {"input": "2 8 1 13\n", "output": "(8) + (13) = 21, left: 21, 2, 1\n(1) - (2) = -1, left: -1, 21\n(21) / (-1) = -21, left: -21\n(-1) - (21) = -22, left: -22\n(2) + (1) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((8 + 13) + (2 + 1))"}, {"input": "2 8 1 13\n", "output": "(8) + (13) = 21, left: 21, 2, 1\n(1) - (2) = -1, left: -1, 21\n(21) / (-1) = -21, left: -21\n(21) * (-1) = -21, left: -21\n(-1) - (21) = -22, left: -22\n(-1) / (21) = -1/21, left: -1/21\n(21) + (-1) = 20, left: 20\n(2) + (1) = 3, left: 3, 21\n(3) - (21) = -18, left: -18\n(21) + (3) = 24, left: 24\nreach 24! expression: ((8 + 13) + (2 + 1))"}, {"input": "2 8 1 13\n", "output": "(1) - (2) = -1, left: -1, 8, 13\n(13) * (-1) = -13, left: -13, 8\n(-1) / (13) = -1/13, left: -1/13, 8\n(2) / (1) = 2, left: 2, 8, 13\n(13) - (2) = 11, left: 11, 8\n(13) / (8) = 13/8, left: 13/8, 2\n(8) - (13) = -5, left: -5, 2\n(2) + (1) = 3, left: 3, 8, 13\n(8) + (13) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((2 + 1) + (8 + 13))"}, {"input": "2 8 1 13\n", "output": "(2) / (1) = 2, left: 2, 8, 13\n(13) / (8) = 13/8, left: 13/8, 2\n(1) / (2) = 1/2, left: 1/2, 8, 13\n(1/2) / (8) = 1/16, left: 1/16, 13\n(13) * (1/2) = 13/2, left: 13/2, 8\n(13/2) / (8) = 13/16, left: 13/16\n(1) - (2) = -1, left: -1, 8, 13\n(2) + (1) = 3, left: 3, 8, 13\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (13 + (2 + 1)))"}, {"input": "2 8 1 13\n", "output": "(13) - (8) = 5, left: 5, 2, 1\n(1) - (2) = -1, left: -1, 5\n(-1) / (5) = -1/5, left: -1/5\n(8) + (13) = 21, left: 21, 2, 1\n(2) - (1) = 1, left: 1, 21\n(1) - (2) = -1, left: -1, 21\n(21) - (-1) = 22, left: 22\n(2) / (1) = 2, left: 2, 21\n(2) + (1) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((8 + 13) + (2 + 1))"}, {"input": "2 8 1 13\n", "output": "(13) / (2) = 13/2, left: 13/2, 8, 1\n(8) + (1) = 9, left: 9, 13/2\n(1) / (8) = 1/8, left: 1/8, 13/2\n(2) * (13) = 26, left: 26, 8, 1\n(13) - (2) = 11, left: 11, 8, 1\n(8) - (11) = -3, left: -3, 1\n(11) - (1) = 10, left: 10, 8\n(2) + (13) = 15, left: 15, 8, 1\n(8) + (1) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((2 + 13) + (8 + 1))"}, {"input": "2 8 1 13\n", "output": "(8) + (13) = 21, left: 21, 2, 1\n(1) - (2) = -1, left: -1, 21\n(21) / (-1) = -21, left: -21\n(21) - (-1) = 22, left: 22\n(21) * (-1) = -21, left: -21\n(-1) - (21) = -22, left: -22\n(-1) / (21) = -1/21, left: -1/21\n(21) + (-1) = 20, left: 20\n(2) + (1) = 3, left: 3, 21\n(3) - (21) = -18, left: -18\n(21) + (3) = 24, left: 24\nreach 24! expression: ((8 + 13) + (2 + 1))"}, {"input": "2 8 1 13\n", "output": "(8) + (13) = 21, left: 21, 2, 1\n(1) - (2) = -1, left: -1, 21\n(21) / (-1) = -21, left: -21\n(21) - (-1) = 22, left: 22\n(21) * (-1) = -21, left: -21\n(-1) - (21) = -22, left: -22\n(-1) / (21) = -1/21, left: -1/21\n(21) + (-1) = 20, left: 20\n(2) + (1) = 3, left: 3, 21\n(3) - (21) = -18, left: -18\n(21) + (3) = 24, left: 24\nreach 24! expression: ((8 + 13) + (2 + 1))"}, {"input": "11 1 5 12\n", "output": "(1) + (12) = 13, left: 13, 11, 5\n(12) - (1) = 11, left: 11, 11, 5\n(11) * (12) = 132, left: 132, 1, 5\n(11) - (1) = 10, left: 10, 5, 12\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: ((11 - 1) * (12 / 5))"}, {"input": "11 1 5 12\n", "output": "(11) - (1) = 10, left: 10, 5, 12\n(5) + (10) = 15, left: 15, 12\n(15) - (12) = 3, left: 3\n(10) / (5) = 2, left: 2, 12\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 1) / 5))"}, {"input": "11 1 5 12\n", "output": "(12) / (11) = 12/11, left: 12/11, 1, 5\n(12) / (1) = 12, left: 12, 11, 5\n(11) + (1) = 12, left: 12, 5, 12\n(11) - (1) = 10, left: 10, 5, 12\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: ((11 - 1) * (12 / 5))"}, {"input": "11 1 5 12\n", "output": "(11) - (12) = -1, left: -1, 1, 5\n(1) - (5) = -4, left: -4, -1\n(-1) + (-4) = -5, left: -5\n(11) - (1) = 10, left: 10, 5, 12\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (5 / (11 - 1)))"}, {"input": "11 1 5 12\n", "output": "(12) / (1) = 12, left: 12, 11, 5\n(12) / (11) = 12/11, left: 12/11, 1, 5\n(5) / (12/11) = 55/12, left: 55/12, 1\n(11) + (12) = 23, left: 23, 1, 5\n(11) / (12) = 11/12, left: 11/12, 1, 5\n(11/12) / (5) = 11/60, left: 11/60, 1\n(11) - (12) = -1, left: -1, 1, 5\n(11) - (1) = 10, left: 10, 5, 12\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: ((11 - 1) * (12 / 5))"}, {"input": "11 1 5 12\n", "output": "(11) - (5) = 6, left: 6, 1, 12\n(1) + (12) = 13, left: 13, 11, 5\n(11) / (13) = 11/13, left: 11/13, 5\n(12) / (1) = 12, left: 12, 11, 5\n(11) * (5) = 55, left: 55, 12\n(1) * (12) = 12, left: 12, 11, 5\n(11) - (12) = -1, left: -1, 1, 5\n(11) - (1) = 10, left: 10, 5, 12\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (5 / (11 - 1)))"}, {"input": "11 1 5 12\n", "output": "(11) - (1) = 10, left: 10, 5, 12\n(5) + (10) = 15, left: 15, 12\n(12) * (15) = 180, left: 180\n(12) + (15) = 27, left: 27\n(15) - (12) = 3, left: 3\n(12) - (15) = -3, left: -3\n(10) / (5) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 1) / 5))"}, {"input": "11 1 5 12\n", "output": "(1) - (12) = -11, left: -11, 11, 5\n(1) + (12) = 13, left: 13, 11, 5\n(11) + (5) = 16, left: 16, 1, 12\n(16) / (12) = 4/3, left: 4/3, 1\n(11) * (5) = 55, left: 55, 1, 12\n(1) + (55) = 56, left: 56, 12\n(11) - (5) = 6, left: 6, 1, 12\n(11) - (1) = 10, left: 10, 5, 12\n(12) * (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * (11 - 1)) / 5)"}, {"input": "11 1 5 12\n", "output": "(11) * (12) = 132, left: 132, 1, 5\n(12) - (1) = 11, left: 11, 11, 5\n(1) - (12) = -11, left: -11, 11, 5\n(11) * (5) = 55, left: 55, -11\n(1) * (12) = 12, left: 12, 11, 5\n(11) + (1) = 12, left: 12, 5, 12\n(11) * (1) = 11, left: 11, 5, 12\n(11) - (1) = 10, left: 10, 5, 12\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: ((11 - 1) * (12 / 5))"}, {"input": "1 4 5 11\n", "output": "(1) + (5) = 6, left: 6, 4, 11\n(11) * (6) = 66, left: 66, 4\n(4) - (66) = -62, left: -62\n(4) - (6) = -2, left: -2, 11\n(11) * (-2) = -22, left: -22\n(4) * (11) = 44, left: 44, 6\n(6) - (44) = -38, left: -38\n(1) * (5) = 5, left: 5, 4, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (1 * 5)))"}, {"input": "1 4 5 11\n", "output": "(1) + (11) = 12, left: 12, 4, 5\n(12) - (5) = 7, left: 7, 4\n(4) * (5) = 20, left: 20, 12\n(11) - (1) = 10, left: 10, 4, 5\n(10) / (5) = 2, left: 2, 4\n(2) / (4) = 1/2, left: 1/2\n(1) * (11) = 11, left: 11, 4, 5\n(4) * (11) = 44, left: 44, 5\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((1 * 11) - 5))"}, {"input": "1 4 5 11\n", "output": "(1) + (5) = 6, left: 6, 4, 11\n(6) / (11) = 6/11, left: 6/11, 4\n(4) - (6/11) = 38/11, left: 38/11\n(4) * (6) = 24, left: 24, 11\n(6) - (4) = 2, left: 2, 11\n(1) * (5) = 5, left: 5, 4, 11\n(5) / (11) = 5/11, left: 5/11, 4\n(5/11) / (4) = 5/44, left: 5/44\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (1 * 5)))"}, {"input": "1 4 5 11\n", "output": "(5) / (1) = 5, left: 5, 4, 11\n(11) + (5) = 16, left: 16, 4\n(11) * (5) = 55, left: 55, 4\n(55) / (4) = 55/4, left: 55/4\n(4) - (55) = -51, left: -51\n(4) * (55) = 220, left: 220\n(11) / (5) = 11/5, left: 11/5, 4\n(4) + (11/5) = 31/5, left: 31/5\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (5 / 1)))"}, {"input": "8 9 6 9\n", "output": "(8) - (9) = -1, left: -1, 9, 6\n(6) * (-1) = -6, left: -6, 9\n(9) / (8) = 9/8, left: 9/8, 9, 6\n(8) / (9) = 8/9, left: 8/9, 9, 6\n(6) / (9) = 2/3, left: 2/3, 8/9\n(8) * (9) = 72, left: 72, 9, 6\n(9) + (72) = 81, left: 81, 6\n(6) + (81) = 87, left: 87\n(9) - (6) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "8 9 6 9\n", "output": "(8) - (9) = -1, left: -1, 9, 6\n(8) + (9) = 17, left: 17, 9, 6\n(17) / (9) = 17/9, left: 17/9, 6\n(9) / (8) = 9/8, left: 9/8, 9, 6\n(6) / (9/8) = 16/3, left: 16/3, 9\n(9/8) - (6) = -39/8, left: -39/8, 9\n(9) + (6) = 15, left: 15, 9/8\n(8) * (9) = 72, left: 72, 9, 6\n(9) - (6) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "8 9 6 9\n", "output": "(9) / (9) = 1, left: 1, 8, 6\n(8) + (1) = 9, left: 9, 6\n(8) * (1) = 8, left: 8, 6\n(9) * (9) = 81, left: 81, 8, 6\n(8) / (6) = 4/3, left: 4/3, 81\n(9) + (9) = 18, left: 18, 8, 6\n(18) - (8) = 10, left: 10, 6\n(6) / (10) = 3/5, left: 3/5\n(8) * (18) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((8 * (9 + 9)) / 6)"}, {"input": "8 9 6 9\n", "output": "(8) - (9) = -1, left: -1, 6, 9\n(6) + (9) = 15, left: 15, -1\n(9) - (6) = 3, left: 3, -1\n(-1) + (3) = 2, left: 2\n(9) - (8) = 1, left: 1, 6, 9\n(9) - (1) = 8, left: 8, 6\n(9) * (1) = 9, left: 9, 6\n(8) * (9) = 72, left: 72, 6, 9\n(9) - (6) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "8 9 6 9\n", "output": "(9) - (8) = 1, left: 1, 6, 9\n(9) / (6) = 3/2, left: 3/2, 1\n(1) / (3/2) = 2/3, left: 2/3\n(1) - (9) = -8, left: -8, 6\n(8) / (9) = 8/9, left: 8/9, 6, 9\n(8/9) - (6) = -46/9, left: -46/9, 9\n(8) * (9) = 72, left: 72, 6, 9\n(72) / (6) = 12, left: 12, 9\n(9) - (6) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "8 9 6 9\n", "output": "(8) - (9) = -1, left: -1, 6, 9\n(6) / (9) = 2/3, left: 2/3, -1\n(6) - (-1) = 7, left: 7, 9\n(6) * (-1) = -6, left: -6, 9\n(-1) - (9) = -10, left: -10, 6\n(-1) / (9) = -1/9, left: -1/9, 6\n(9) - (8) = 1, left: 1, 6, 9\n(9) + (1) = 10, left: 10, 6\n(6) * (10) = 60, left: 60\n(1) / (9) = 1/9, left: 1/9, 6\n(9) / (1) = 9, left: 9, 6\n(8) * (9) = 72, left: 72, 6, 9\n(9) - (6) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "13 3 2 11\n", "output": "(3) - (11) = -8, left: -8, 13, 2\n(13) * (-8) = -104, left: -104, 2\n(2) * (-104) = -208, left: -208\n(13) + (11) = 24, left: 24, 3, 2\n(3) - (2) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (3 - 2))"}, {"input": "13 3 2 11\n", "output": "(13) + (3) = 16, left: 16, 2, 11\n(3) / (13) = 3/13, left: 3/13, 2, 11\n(2) / (3/13) = 26/3, left: 26/3, 11\n(2) - (3) = -1, left: -1, 13, 11\n(11) / (-1) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (11 / (2 - 3)))"}, {"input": "13 3 2 11\n", "output": "(11) / (3) = 11/3, left: 11/3, 13, 2\n(2) / (11/3) = 6/11, left: 6/11, 13\n(3) - (11) = -8, left: -8, 13, 2\n(13) + (-8) = 5, left: 5, 2\n(11) - (3) = 8, left: 8, 13, 2\n(11) - (13) = -2, left: -2, 3, 2\n(2) * (-2) = -4, left: -4, 3\n(13) + (11) = 24, left: 24, 3, 2\n(3) - (2) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (3 - 2))"}, {"input": "13 3 2 11\n", "output": "(3) + (2) = 5, left: 5, 13, 11\n(11) - (13) = -2, left: -2, 5\n(11) - (5) = 6, left: 6, 13\n(11) + (5) = 16, left: 16, 13\n(13) + (5) = 18, left: 18, 11\n(3) * (2) = 6, left: 6, 13, 11\n(6) - (13) = -7, left: -7, 11\n(3) - (2) = 1, left: 1, 13, 11\n(13) / (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 / (3 - 2)))"}, {"input": "13 3 2 11\n", "output": "(13) * (11) = 143, left: 143, 3, 2\n(3) / (2) = 3/2, left: 3/2, 143\n(143) - (3) = 140, left: 140, 2\n(13) - (11) = 2, left: 2, 3, 2\n(13) + (11) = 24, left: 24, 3, 2\n(2) - (3) = -1, left: -1, 24\n(3) / (2) = 3/2, left: 3/2, 24\n(24) * (3/2) = 36, left: 36\n(3) - (2) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (3 - 2))"}, {"input": "13 3 2 11\n", "output": "(3) * (11) = 33, left: 33, 13, 2\n(13) * (2) = 26, left: 26, 3, 11\n(3) * (26) = 78, left: 78, 11\n(13) + (3) = 16, left: 16, 2, 11\n(11) / (16) = 11/16, left: 11/16, 2\n(13) * (3) = 39, left: 39, 2, 11\n(2) - (11) = -9, left: -9, 13, 3\n(2) - (3) = -1, left: -1, 13, 11\n(11) / (-1) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (11 / (2 - 3)))"}, {"input": "13 3 2 11\n", "output": "(3) - (11) = -8, left: -8, 13, 2\n(3) / (11) = 3/11, left: 3/11, 13, 2\n(3/11) - (2) = -19/11, left: -19/11, 13\n(3) - (13) = -10, left: -10, 2, 11\n(13) / (3) = 13/3, left: 13/3, 2, 11\n(13) + (11) = 24, left: 24, 3, 2\n(2) + (24) = 26, left: 26, 3\n(3) * (24) = 72, left: 72, 2\n(3) - (2) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (3 - 2))"}, {"input": "3 6 1 13\n", "output": "(6) + (13) = 19, left: 19, 3, 1\n(1) / (19) = 1/19, left: 1/19, 3\n(6) / (13) = 6/13, left: 6/13, 3, 1\n(1) - (6/13) = 7/13, left: 7/13, 3\n(13) / (6) = 13/6, left: 13/6, 3, 1\n(3) + (13/6) = 31/6, left: 31/6, 1\n(13/6) - (1) = 7/6, left: 7/6, 3\n(13) - (6) = 7, left: 7, 3, 1\n(1) + (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 + (13 - 6)))"}, {"input": "3 6 1 13\n", "output": "(1) - (6) = -5, left: -5, 3, 13\n(3) * (-5) = -15, left: -15, 13\n(-5) - (3) = -8, left: -8, 13\n(13) - (-8) = 21, left: 21\n(3) + (-5) = -2, left: -2, 13\n(3) / (-5) = -3/5, left: -3/5, 13\n(13) - (-5) = 18, left: 18, 3\n(-5) - (13) = -18, left: -18, 3\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (1 - 6)))"}, {"input": "3 6 1 13\n", "output": "(1) - (3) = -2, left: -2, 6, 13\n(3) + (1) = 4, left: 4, 6, 13\n(1) / (3) = 1/3, left: 1/3, 6, 13\n(6) / (13) = 6/13, left: 6/13, 1/3\n(3) - (1) = 2, left: 2, 6, 13\n(3) / (1) = 3, left: 3, 6, 13\n(13) - (6) = 7, left: 7, 3\n(6) - (13) = -7, left: -7, 3, 1\n(1) - (-7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 - (6 - 13)))"}, {"input": "3 6 1 13\n", "output": "(3) + (13) = 16, left: 16, 6, 1\n(13) / (3) = 13/3, left: 13/3, 6, 1\n(1) / (6) = 1/6, left: 1/6, 13/3\n(3) * (13) = 39, left: 39, 6, 1\n(13) - (3) = 10, left: 10, 6, 1\n(3) * (6) = 18, left: 18, 1, 13\n(6) / (3) = 2, left: 2, 1, 13\n(13) - (2) = 11, left: 11, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 / 3) * (13 - 1))"}, {"input": "3 6 1 13\n", "output": "(6) - (1) = 5, left: 5, 3, 13\n(13) + (5) = 18, left: 18, 3\n(5) - (13) = -8, left: -8, 3\n(13) / (5) = 13/5, left: 13/5, 3\n(13/5) / (3) = 13/15, left: 13/15\n(3) + (13/5) = 28/5, left: 28/5\n(13) * (5) = 65, left: 65, 3\n(3) / (65) = 3/65, left: 3/65\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 - (6 - 1)))"}, {"input": "3 6 1 13\n", "output": "(1) - (3) = -2, left: -2, 6, 13\n(13) + (-2) = 11, left: 11, 6\n(6) - (11) = -5, left: -5\n(3) + (1) = 4, left: 4, 6, 13\n(1) / (3) = 1/3, left: 1/3, 6, 13\n(6) + (13) = 19, left: 19, 1/3\n(6) * (13) = 78, left: 78, 1/3\n(3) - (1) = 2, left: 2, 6, 13\n(13) - (2) = 11, left: 11, 6\n(3) / (1) = 3, left: 3, 6, 13\n(13) + (3) = 16, left: 16, 6\n(6) - (13) = -7, left: -7, 3, 1\n(1) - (-7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 - (6 - 13)))"}, {"input": "7 8 6 4\n", "output": "(7) * (4) = 28, left: 28, 8, 6\n(8) - (6) = 2, left: 2, 28\n(28) / (6) = 14/3, left: 14/3, 8\n(8) / (14/3) = 12/7, left: 12/7\n(8) / (28) = 2/7, left: 2/7, 6\n(6) + (2/7) = 44/7, left: 44/7\n(8) + (28) = 36, left: 36, 6\n(7) - (4) = 3, left: 3, 8, 6\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (7 - 4)))"}, {"input": "7 8 6 4\n", "output": "(8) + (6) = 14, left: 14, 7, 4\n(4) - (7) = -3, left: -3, 14\n(8) * (6) = 48, left: 48, 7, 4\n(4) * (48) = 192, left: 192, 7\n(6) - (8) = -2, left: -2, 7, 4\n(8) / (6) = 4/3, left: 4/3, 7, 4\n(4/3) - (7) = -17/3, left: -17/3, 4\n(7) - (4) = 3, left: 3, 8, 6\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (7 - 4)))"}, {"input": "7 8 6 4\n", "output": "(4) - (7) = -3, left: -3, 8, 6\n(8) / (6) = 4/3, left: 4/3, -3\n(8) + (6) = 14, left: 14, -3\n(6) / (8) = 3/4, left: 3/4, -3\n(3/4) / (-3) = -1/4, left: -1/4\n(6) - (8) = -2, left: -2, -3\n(-3) / (6) = -1/2, left: -1/2, 8\n(6) + (-3) = 3, left: 3, 8\n(8) / (3) = 8/3, left: 8/3\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 + (4 - 7)))"}, {"input": "7 8 6 4\n", "output": "(7) / (4) = 7/4, left: 7/4, 8, 6\n(8) + (6) = 14, left: 14, 7/4\n(7/4) + (14) = 63/4, left: 63/4\n(7/4) / (6) = 7/24, left: 7/24, 8\n(7) + (4) = 11, left: 11, 8, 6\n(7) * (4) = 28, left: 28, 8, 6\n(6) * (28) = 168, left: 168, 8\n(7) - (4) = 3, left: 3, 8, 6\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (7 - 4)))"}, {"input": "7 8 6 4\n", "output": "(7) / (6) = 7/6, left: 7/6, 8, 4\n(4) - (8) = -4, left: -4, 7/6\n(-4) / (7/6) = -24/7, left: -24/7\n(8) * (7/6) = 28/3, left: 28/3, 4\n(4) - (7/6) = 17/6, left: 17/6, 8\n(6) - (7) = -1, left: -1, 8, 4\n(4) * (-1) = -4, left: -4, 8\n(8) + (-4) = 4, left: 4\n(4) + (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 + (6 - 7)))"}, {"input": "7 8 6 4\n", "output": "(8) + (6) = 14, left: 14, 7, 4\n(4) * (14) = 56, left: 56, 7\n(8) - (6) = 2, left: 2, 7, 4\n(4) * (2) = 8, left: 8, 7\n(4) / (2) = 2, left: 2, 7\n(7) - (4) = 3, left: 3, 2\n(8) * (6) = 48, left: 48, 7, 4\n(7) - (48) = -41, left: -41, 4\n(6) - (8) = -2, left: -2, 7, 4\n(8) / (6) = 4/3, left: 4/3, 7, 4\n(4) - (4/3) = 8/3, left: 8/3, 7\n(7) - (4) = 3, left: 3, 8, 6\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (7 - 4)))"}, {"input": "13 3 11 3\n", "output": "(13) + (3) = 16, left: 16, 11, 3\n(11) / (16) = 11/16, left: 11/16, 3\n(11) * (16) = 176, left: 176, 3\n(3) - (176) = -173, left: -173\n(11) + (16) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((11 + (13 + 3)) - 3)"}, {"input": "13 3 11 3\n", "output": "(3) + (11) = 14, left: 14, 13, 3\n(14) - (13) = 1, left: 1, 3\n(13) - (14) = -1, left: -1, 3\n(3) - (-1) = 4, left: 4\n(13) + (14) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((13 + (3 + 11)) - 3)"}, {"input": "13 3 11 3\n", "output": "(3) / (11) = 3/11, left: 3/11, 13, 3\n(3/11) / (13) = 3/143, left: 3/143, 3\n(3/11) / (3) = 1/11, left: 1/11, 13\n(13) - (1/11) = 142/11, left: 142/11\n(3) / (3/11) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (3 / (3 / 11)))"}, {"input": "13 3 11 3\n", "output": "(3) / (13) = 3/13, left: 3/13, 3, 11\n(3) + (3/13) = 42/13, left: 42/13, 11\n(42/13) - (11) = -101/13, left: -101/13\n(3) / (3/13) = 13, left: 13, 11\n(11) / (13) = 11/13, left: 11/13\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (3 / (3 / 13)))"}, {"input": "13 3 11 3\n", "output": "(3) / (13) = 3/13, left: 3/13, 3, 11\n(3) + (3/13) = 42/13, left: 42/13, 11\n(11) + (42/13) = 185/13, left: 185/13\n(11) - (42/13) = 101/13, left: 101/13\n(11) * (42/13) = 462/13, left: 462/13\n(42/13) / (11) = 42/143, left: 42/143\n(3) / (3/13) = 13, left: 13, 11\n(11) - (13) = -2, left: -2\n(11) / (13) = 11/13, left: 11/13\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (3 / (3 / 13)))"}, {"input": "13 3 11 3\n", "output": "(3) / (11) = 3/11, left: 3/11, 13, 3\n(3) / (13) = 3/13, left: 3/13, 3/11\n(3) - (13) = -10, left: -10, 3/11\n(13) + (3) = 16, left: 16, 3/11\n(3/11) * (16) = 48/11, left: 48/11\n(13) + (3/11) = 146/11, left: 146/11, 3\n(3) * (146/11) = 438/11, left: 438/11\n(3) * (3/11) = 9/11, left: 9/11, 13\n(3) / (3/11) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (3 / (3 / 11)))"}, {"input": "13 3 11 3\n", "output": "(3) + (11) = 14, left: 14, 13, 3\n(13) * (14) = 182, left: 182, 3\n(3) * (182) = 546, left: 546\n(3) + (182) = 185, left: 185\n(14) - (13) = 1, left: 1, 3\n(3) - (1) = 2, left: 2\n(14) / (13) = 14/13, left: 14/13, 3\n(13) / (14) = 13/14, left: 13/14, 3\n(13) + (14) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((13 + (3 + 11)) - 3)"}, {"input": "13 3 11 3\n", "output": "(13) + (3) = 16, left: 16, 11, 3\n(11) / (16) = 11/16, left: 11/16, 3\n(3) * (11/16) = 33/16, left: 33/16\n(3) - (11/16) = 37/16, left: 37/16\n(3) + (11/16) = 59/16, left: 59/16\n(11) * (16) = 176, left: 176, 3\n(3) / (176) = 3/176, left: 3/176\n(16) / (11) = 16/11, left: 16/11, 3\n(11) + (16) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((11 + (13 + 3)) - 3)"}, {"input": "11 2 7 7\n", "output": "(2) / (11) = 2/11, left: 2/11, 7, 7\n(7) + (2/11) = 79/11, left: 79/11, 7\n(7) / (79/11) = 77/79, left: 77/79\n(7) / (7) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (7 / 7)))"}, {"input": "11 2 7 7\n", "output": "(2) - (11) = -9, left: -9, 7, 7\n(-9) / (7) = -9/7, left: -9/7, 7\n(11) - (2) = 9, left: 9, 7, 7\n(11) / (2) = 11/2, left: 11/2, 7, 7\n(2) / (11) = 2/11, left: 2/11, 7, 7\n(7) * (7) = 49, left: 49, 2/11\n(7) / (7) = 1, left: 1, 11, 2\n(2) / (11) = 2/11, left: 2/11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (7 / 7)))"}, {"input": "11 2 7 7\n", "output": "(11) / (7) = 11/7, left: 11/7, 2, 7\n(11) - (7) = 4, left: 4, 2, 7\n(11) + (7) = 18, left: 18, 2, 7\n(7) - (2) = 5, left: 5, 18\n(11) * (7) = 77, left: 77, 2, 7\n(7) - (11) = -4, left: -4, 2, 7\n(11) / (7) = 11/7, left: 11/7, 2, 7\n(7) - (2) = 5, left: 5, 11, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (7 - 2)) - 11)"}, {"input": "11 2 7 7\n", "output": "(2) * (7) = 14, left: 14, 11, 7\n(11) - (14) = -3, left: -3, 7\n(7) / (2) = 7/2, left: 7/2, 11, 7\n(7) - (2) = 5, left: 5, 11, 7\n(11) * (5) = 55, left: 55, 7\n(11) / (5) = 11/5, left: 11/5, 7\n(5) - (11) = -6, left: -6, 7\n(5) - (7) = -2, left: -2, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (7 - 2)) - 11)"}, {"input": "11 2 7 7\n", "output": "(2) / (7) = 2/7, left: 2/7, 11, 7\n(2/7) - (11) = -75/7, left: -75/7, 7\n(-75/7) / (7) = -75/49, left: -75/49\n(11) / (7) = 11/7, left: 11/7, 2/7\n(11) - (7) = 4, left: 4, 2/7\n(2) * (7) = 14, left: 14, 11, 7\n(7) - (2) = 5, left: 5, 11, 7\n(5) / (7) = 5/7, left: 5/7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (7 - 2)) - 11)"}, {"input": "11 2 7 7\n", "output": "(7) - (7) = 0, left: 0, 11, 2\n(11) * (2) = 22, left: 22, 0\n(2) * (0) = 0, left: 0, 11\n(7) * (7) = 49, left: 49, 11, 2\n(11) - (2) = 9, left: 9, 49\n(7) + (7) = 14, left: 14, 11, 2\n(14) / (11) = 14/11, left: 14/11, 2\n(7) / (7) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (7 / 7)))"}, {"input": "9 13 8 1\n", "output": "(13) - (1) = 12, left: 12, 9, 8\n(9) - (8) = 1, left: 1, 12\n(9) / (8) = 9/8, left: 9/8, 12\n(12) + (9/8) = 105/8, left: 105/8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 1) - 9))"}, {"input": "9 13 8 1\n", "output": "(13) - (1) = 12, left: 12, 9, 8\n(8) / (9) = 8/9, left: 8/9, 12\n(9) - (8) = 1, left: 1, 12\n(12) / (1) = 12, left: 12\n(9) + (8) = 17, left: 17, 12\n(9) / (8) = 9/8, left: 9/8, 12\n(12) * (9/8) = 27/2, left: 27/2\n(9/8) - (12) = -87/8, left: -87/8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 1) - 9))"}, {"input": "9 13 8 1\n", "output": "(9) * (1) = 9, left: 9, 13, 8\n(9) - (1) = 8, left: 8, 13, 8\n(1) - (9) = -8, left: -8, 13, 8\n(13) + (-8) = 5, left: 5, 8\n(8) + (5) = 13, left: 13\n(9) / (1) = 9, left: 9, 13, 8\n(9) - (8) = 1, left: 1, 13\n(9) + (1) = 10, left: 10, 13, 8\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (9 + 1)))"}, {"input": "9 13 8 1\n", "output": "(8) - (13) = -5, left: -5, 9, 1\n(9) / (-5) = -9/5, left: -9/5, 1\n(9) * (-5) = -45, left: -45, 1\n(8) / (13) = 8/13, left: 8/13, 9, 1\n(8/13) / (1) = 8/13, left: 8/13, 9\n(9) + (8/13) = 125/13, left: 125/13, 1\n(1) - (9) = -8, left: -8, 13, 8\n(9) + (1) = 10, left: 10, 13, 8\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (9 + 1)))"}, {"input": "9 13 8 1\n", "output": "(13) * (8) = 104, left: 104, 9, 1\n(8) - (13) = -5, left: -5, 9, 1\n(13) - (8) = 5, left: 5, 9, 1\n(9) / (1) = 9, left: 9, 5\n(13) / (8) = 13/8, left: 13/8, 9, 1\n(13/8) / (1) = 13/8, left: 13/8, 9\n(9) + (1) = 10, left: 10, 13, 8\n(10) / (8) = 5/4, left: 5/4, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (9 + 1)))"}, {"input": "9 13 8 1\n", "output": "(8) / (1) = 8, left: 8, 9, 13\n(9) - (13) = -4, left: -4, 8\n(8) * (1) = 8, left: 8, 9, 13\n(13) / (8) = 13/8, left: 13/8, 9\n(1) - (13) = -12, left: -12, 9, 8\n(13) * (1) = 13, left: 13, 9, 8\n(8) - (9) = -1, left: -1, 13\n(13) - (1) = 12, left: 12, 9, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 1) - 9))"}, {"input": "9 13 8 1\n", "output": "(8) - (13) = -5, left: -5, 9, 1\n(1) / (9) = 1/9, left: 1/9, -5\n(13) + (8) = 21, left: 21, 9, 1\n(1) + (21) = 22, left: 22, 9\n(9) - (22) = -13, left: -13\n(13) / (8) = 13/8, left: 13/8, 9, 1\n(9) * (1) = 9, left: 9, 13, 8\n(1) - (9) = -8, left: -8, 13, 8\n(13) + (-8) = 5, left: 5, 8\n(8) + (5) = 13, left: 13\n(9) + (1) = 10, left: 10, 13, 8\n(8) - (10) = -2, left: -2, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (9 + 1)))"}, {"input": "13 4 6 3\n", "output": "(3) - (6) = -3, left: -3, 13, 4\n(6) + (3) = 9, left: 9, 13, 4\n(4) + (3) = 7, left: 7, 13, 6\n(13) / (6) = 13/6, left: 13/6, 7\n(3) / (4) = 3/4, left: 3/4, 13, 6\n(3) - (4) = -1, left: -1, 13, 6\n(13) - (6) = 7, left: 7, -1\n(13) + (3) = 16, left: 16, 4, 6\n(6) * (16) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((6 * (13 + 3)) / 4)"}, {"input": "13 4 6 3\n", "output": "(13) - (3) = 10, left: 10, 4, 6\n(3) / (13) = 3/13, left: 3/13, 4, 6\n(4) * (3/13) = 12/13, left: 12/13, 6\n(6) + (12/13) = 90/13, left: 90/13\n(13) / (3) = 13/3, left: 13/3, 4, 6\n(4) / (6) = 2/3, left: 2/3, 13/3\n(4) * (6) = 24, left: 24, 13/3\n(13) + (3) = 16, left: 16, 4, 6\n(6) * (16) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((6 * (13 + 3)) / 4)"}, {"input": "13 4 6 3\n", "output": "(13) - (6) = 7, left: 7, 4, 3\n(7) - (3) = 4, left: 4, 4\n(13) + (6) = 19, left: 19, 4, 3\n(6) - (13) = -7, left: -7, 4, 3\n(4) - (3) = 1, left: 1, -7\n(-7) * (1) = -7, left: -7\n(13) / (4) = 13/4, left: 13/4, 6, 3\n(6) / (3) = 2, left: 2, 13/4\n(13/4) - (3) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((13 / 4) - 3))"}, {"input": "13 4 6 3\n", "output": "(6) - (3) = 3, left: 3, 13, 4\n(13) / (3) = 13/3, left: 13/3, 4\n(6) + (3) = 9, left: 9, 13, 4\n(13) - (4) = 9, left: 9, 9\n(3) - (6) = -3, left: -3, 13, 4\n(4) + (-3) = 1, left: 1, 13\n(-3) - (4) = -7, left: -7, 13\n(6) / (4) = 3/2, left: 3/2, 13, 3\n(13) + (3) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((6 / 4) * (13 + 3))"}, {"input": "13 4 6 3\n", "output": "(6) * (3) = 18, left: 18, 13, 4\n(6) / (3) = 2, left: 2, 13, 4\n(2) / (13) = 2/13, left: 2/13, 4\n(3) / (6) = 1/2, left: 1/2, 13, 4\n(4) / (1/2) = 8, left: 8, 13\n(4) - (6) = -2, left: -2, 13, 3\n(6) - (4) = 2, left: 2, 13, 3\n(4) / (6) = 2/3, left: 2/3, 13, 3\n(13) + (3) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((13 + 3) / (4 / 6))"}, {"input": "13 4 6 3\n", "output": "(6) - (3) = 3, left: 3, 13, 4\n(13) - (4) = 9, left: 9, 3\n(3) - (6) = -3, left: -3, 13, 4\n(6) / (3) = 2, left: 2, 13, 4\n(4) * (3) = 12, left: 12, 13, 6\n(6) + (12) = 18, left: 18, 13\n(4) / (3) = 4/3, left: 4/3, 13, 6\n(3) / (4) = 3/4, left: 3/4, 13, 6\n(4) - (3) = 1, left: 1, 13, 6\n(1) - (6) = -5, left: -5, 13\n(13) - (3) = 10, left: 10, 4, 6\n(13) + (3) = 16, left: 16, 4, 6\n(6) * (16) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((6 * (13 + 3)) / 4)"}, {"input": "13 4 6 3\n", "output": "(3) - (6) = -3, left: -3, 13, 4\n(13) + (-3) = 10, left: 10, 4\n(6) / (3) = 2, left: 2, 13, 4\n(2) / (13) = 2/13, left: 2/13, 4\n(6) + (3) = 9, left: 9, 13, 4\n(4) + (9) = 13, left: 13, 13\n(13) / (13) = 1, left: 1\n(3) / (6) = 1/2, left: 1/2, 13, 4\n(6) - (3) = 3, left: 3, 13, 4\n(3) / (13) = 3/13, left: 3/13, 4\n(6) - (4) = 2, left: 2, 13, 3\n(4) / (6) = 2/3, left: 2/3, 13, 3\n(13) + (3) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((13 + 3) / (4 / 6))"}, {"input": "6 2 3 5\n", "output": "(2) - (3) = -1, left: -1, 6, 5\n(-1) - (6) = -7, left: -7, 5\n(5) / (-7) = -5/7, left: -5/7\n(6) / (-1) = -6, left: -6, 5\n(-6) / (5) = -6/5, left: -6/5\n(-1) / (6) = -1/6, left: -1/6, 5\n(-1) / (5) = -1/5, left: -1/5, 6\n(5) - (-1) = 6, left: 6, 6\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (2 - 3)))"}, {"input": "6 2 3 5\n", "output": "(2) * (3) = 6, left: 6, 6, 5\n(6) - (6) = 0, left: 0, 5\n(6) / (6) = 1, left: 1, 5\n(5) / (1) = 5, left: 5\n(5) + (1) = 6, left: 6\n(6) / (5) = 6/5, left: 6/5, 6\n(6) + (5) = 11, left: 11, 6\n(11) - (6) = 5, left: 5\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (2 * 3))"}, {"input": "6 2 3 5\n", "output": "(5) / (3) = 5/3, left: 5/3, 6, 2\n(6) - (5/3) = 13/3, left: 13/3, 2\n(5/3) - (6) = -13/3, left: -13/3, 2\n(5/3) / (2) = 5/6, left: 5/6, 6\n(2) + (5/3) = 11/3, left: 11/3, 6\n(2) / (5/3) = 6/5, left: 6/5, 6\n(6) / (6/5) = 5, left: 5\n(3) + (5) = 8, left: 8, 6, 2\n(2) / (6) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((3 + 5) / (2 / 6))"}, {"input": "6 2 3 5\n", "output": "(5) - (6) = -1, left: -1, 2, 3\n(2) + (-1) = 1, left: 1, 3\n(3) + (1) = 4, left: 4\n(3) - (-1) = 4, left: 4, 2\n(2) / (3) = 2/3, left: 2/3, -1\n(6) * (5) = 30, left: 30, 2, 3\n(3) + (30) = 33, left: 33, 2\n(30) / (2) = 15, left: 15, 3\n(2) * (3) = 6, left: 6, 30\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (2 * 3))"}, {"input": "6 2 3 5\n", "output": "(6) / (5) = 6/5, left: 6/5, 2, 3\n(3) / (2) = 3/2, left: 3/2, 6/5\n(2) * (3) = 6, left: 6, 6/5\n(2) / (3) = 2/3, left: 2/3, 6/5\n(6/5) - (2) = -4/5, left: -4/5, 3\n(6) * (5) = 30, left: 30, 2, 3\n(30) - (3) = 27, left: 27, 2\n(2) / (27) = 2/27, left: 2/27\n(2) * (3) = 6, left: 6, 30\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (2 * 3))"}, {"input": "6 2 3 5\n", "output": "(6) - (5) = 1, left: 1, 2, 3\n(1) / (3) = 1/3, left: 1/3, 2\n(2) - (3) = -1, left: -1, 1\n(2) * (3) = 6, left: 6, 1\n(6) + (5) = 11, left: 11, 2, 3\n(2) + (3) = 5, left: 5, 11\n(11) - (5) = 6, left: 6\n(11) / (3) = 11/3, left: 11/3, 2\n(6) / (5) = 6/5, left: 6/5, 2, 3\n(5) - (6) = -1, left: -1, 2, 3\n(3) / (2) = 3/2, left: 3/2, -1\n(6) * (5) = 30, left: 30, 2, 3\n(2) * (3) = 6, left: 6, 30\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (2 * 3))"}, {"input": "8 5 11 1\n", "output": "(11) / (8) = 11/8, left: 11/8, 5, 1\n(1) - (11/8) = -3/8, left: -3/8, 5\n(5) / (1) = 5, left: 5, 11/8\n(8) + (11) = 19, left: 19, 5, 1\n(1) * (19) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (1 * (8 + 11)))"}, {"input": "8 5 11 1\n", "output": "(5) / (8) = 5/8, left: 5/8, 11, 1\n(5/8) / (1) = 5/8, left: 5/8, 11\n(11) + (1) = 12, left: 12, 5/8\n(8) + (5) = 13, left: 13, 11, 1\n(11) / (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((8 + 5) + (11 / 1))"}, {"input": "8 5 11 1\n", "output": "(11) - (5) = 6, left: 6, 8, 1\n(1) - (8) = -7, left: -7, 6\n(6) + (-7) = -1, left: -1\n(1) / (8) = 1/8, left: 1/8, 6\n(5) / (11) = 5/11, left: 5/11, 8, 1\n(8) - (5/11) = 83/11, left: 83/11, 1\n(5) + (11) = 16, left: 16, 8, 1\n(1) - (8) = -7, left: -7, 16\n(8) * (1) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((5 + 11) + (8 * 1))"}, {"input": "8 5 11 1\n", "output": "(5) / (8) = 5/8, left: 5/8, 11, 1\n(11) - (5/8) = 83/8, left: 83/8, 1\n(1) / (5/8) = 8/5, left: 8/5, 11\n(8/5) - (11) = -47/5, left: -47/5\n(1) + (5/8) = 13/8, left: 13/8, 11\n(11) + (1) = 12, left: 12, 5/8\n(5/8) + (12) = 101/8, left: 101/8\n(8) + (5) = 13, left: 13, 11, 1\n(11) / (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((8 + 5) + (11 / 1))"}, {"input": "8 5 11 1\n", "output": "(11) / (8) = 11/8, left: 11/8, 5, 1\n(11/8) - (5) = -29/8, left: -29/8, 1\n(5) + (11/8) = 51/8, left: 51/8, 1\n(1) / (5) = 1/5, left: 1/5, 11/8\n(5) * (1) = 5, left: 5, 11/8\n(5) / (11/8) = 40/11, left: 40/11\n(8) + (11) = 19, left: 19, 5, 1\n(1) + (19) = 20, left: 20, 5\n(1) * (19) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (1 * (8 + 11)))"}, {"input": "8 5 11 1\n", "output": "(1) - (11) = -10, left: -10, 8, 5\n(-10) / (5) = -2, left: -2, 8\n(8) / (5) = 8/5, left: 8/5, -10\n(8/5) / (-10) = -4/25, left: -4/25\n(8) - (-10) = 18, left: 18, 5\n(8) / (-10) = -4/5, left: -4/5, 5\n(11) - (1) = 10, left: 10, 8, 5\n(11) / (1) = 11, left: 11, 8, 5\n(5) + (11) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (5 + (11 / 1)))"}, {"input": "8 5 11 1\n", "output": "(1) / (11) = 1/11, left: 1/11, 8, 5\n(8) * (5) = 40, left: 40, 1/11\n(8) + (5) = 13, left: 13, 1/11\n(8) * (1/11) = 8/11, left: 8/11, 5\n(1) - (11) = -10, left: -10, 8, 5\n(5) / (-10) = -1/2, left: -1/2, 8\n(11) * (1) = 11, left: 11, 8, 5\n(11) - (8) = 3, left: 3, 5\n(8) + (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (8 + (11 * 1)))"}, {"input": "3 10 6 3\n", "output": "(3) + (6) = 9, left: 9, 10, 3\n(10) / (9) = 10/9, left: 10/9, 3\n(3) / (6) = 1/2, left: 1/2, 10, 3\n(3) - (1/2) = 5/2, left: 5/2, 10\n(10) * (5/2) = 25, left: 25\n(6) - (3) = 3, left: 3, 10, 3\n(10) + (3) = 13, left: 13, 3\n(3) * (6) = 18, left: 18, 10, 3\n(18) - (10) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 6) - 10))"}, {"input": "3 10 6 3\n", "output": "(3) / (6) = 1/2, left: 1/2, 3, 10\n(10) / (1/2) = 20, left: 20, 3\n(10) + (1/2) = 21/2, left: 21/2, 3\n(3) - (10) = -7, left: -7, 1/2\n(3) * (1/2) = 3/2, left: 3/2, 10\n(6) / (3) = 2, left: 2, 3, 10\n(10) * (2) = 20, left: 20, 3\n(3) - (20) = -17, left: -17\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (6 / 3)))"}, {"input": "3 10 6 3\n", "output": "(3) - (10) = -7, left: -7, 3, 6\n(6) + (-7) = -1, left: -1, 3\n(10) / (3) = 10/3, left: 10/3, 3, 6\n(3) / (6) = 1/2, left: 1/2, 10/3\n(3) / (10) = 3/10, left: 3/10, 3, 6\n(10) - (3) = 7, left: 7, 3, 6\n(3) + (7) = 10, left: 10, 6\n(6) - (10) = -4, left: -4\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((10 - 3) - 3))"}, {"input": "3 10 6 3\n", "output": "(3) + (10) = 13, left: 13, 6, 3\n(3) * (10) = 30, left: 30, 6, 3\n(6) + (3) = 9, left: 9, 30\n(10) / (3) = 10/3, left: 10/3, 6, 3\n(10/3) / (6) = 5/9, left: 5/9, 3\n(3) / (10) = 3/10, left: 3/10, 6, 3\n(6) + (3) = 9, left: 9, 3/10\n(10) - (3) = 7, left: 7, 6, 3\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((10 - 3) - 3))"}, {"input": "3 10 6 3\n", "output": "(10) + (6) = 16, left: 16, 3, 3\n(3) + (16) = 19, left: 19, 3\n(10) * (6) = 60, left: 60, 3, 3\n(3) - (3) = 0, left: 0, 60\n(60) + (0) = 60, left: 60\n(6) - (10) = -4, left: -4, 3, 3\n(-4) / (3) = -4/3, left: -4/3, 3\n(10) - (6) = 4, left: 4, 3, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((10 - 6) * (3 + 3))"}, {"input": "13 5 10 13\n", "output": "(13) + (10) = 23, left: 23, 5, 13\n(23) / (5) = 23/5, left: 23/5, 13\n(5) / (13) = 5/13, left: 5/13, 23\n(13) - (10) = 3, left: 3, 5, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((13 - 10) * (13 - 5))"}, {"input": "13 5 10 13\n", "output": "(5) * (13) = 65, left: 65, 13, 10\n(5) / (13) = 5/13, left: 5/13, 13, 10\n(13) / (5) = 13/5, left: 13/5, 13, 10\n(13) - (5) = 8, left: 8, 13, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((13 - 5) * (13 - 10))"}, {"input": "13 5 10 13\n", "output": "(13) + (13) = 26, left: 26, 5, 10\n(5) - (26) = -21, left: -21, 10\n(5) / (26) = 5/26, left: 5/26, 10\n(10) * (5/26) = 25/13, left: 25/13\n(5) * (10) = 50, left: 50, 26\n(50) - (26) = 24, left: 24\nreach 24! expression: ((5 * 10) - (13 + 13))"}, {"input": "13 5 10 13\n", "output": "(13) / (10) = 13/10, left: 13/10, 13, 5\n(13/10) / (13) = 1/10, left: 1/10, 5\n(10) / (13) = 10/13, left: 10/13, 13, 5\n(13) - (10) = 3, left: 3, 13, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((13 - 10) * (13 - 5))"}, {"input": "13 5 10 13\n", "output": "(5) * (13) = 65, left: 65, 13, 10\n(10) * (65) = 650, left: 650, 13\n(13) + (10) = 23, left: 23, 65\n(13) - (5) = 8, left: 8, 13, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((13 - 5) * (13 - 10))"}, {"input": "13 5 10 13\n", "output": "(5) * (13) = 65, left: 65, 13, 10\n(10) - (65) = -55, left: -55, 13\n(5) / (13) = 5/13, left: 5/13, 13, 10\n(13) + (5/13) = 174/13, left: 174/13, 10\n(13) / (5) = 13/5, left: 13/5, 13, 10\n(10) - (13) = -3, left: -3, 13/5\n(13) - (5) = 8, left: 8, 13, 10\n(10) - (8) = 2, left: 2, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((13 - 5) * (13 - 10))"}, {"input": "13 5 10 13\n", "output": "(13) + (10) = 23, left: 23, 5, 13\n(13) - (5) = 8, left: 8, 23\n(8) / (23) = 8/23, left: 8/23\n(23) / (13) = 23/13, left: 23/13, 5\n(13) - (10) = 3, left: 3, 5, 13\n(13) / (5) = 13/5, left: 13/5, 3\n(5) * (13) = 65, left: 65, 3\n(5) - (13) = -8, left: -8, 3\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((13 - 10) * (13 - 5))"}, {"input": "13 5 10 13\n", "output": "(5) * (13) = 65, left: 65, 13, 10\n(13) + (10) = 23, left: 23, 65\n(13) - (10) = 3, left: 3, 65\n(3) / (65) = 3/65, left: 3/65\n(65) / (13) = 5, left: 5, 10\n(13) - (5) = 8, left: 8, 13, 10\n(10) / (13) = 10/13, left: 10/13, 8\n(13) / (10) = 13/10, left: 13/10, 8\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((13 - 5) * (13 - 10))"}, {"input": "13 5 10 13\n", "output": "(13) / (10) = 13/10, left: 13/10, 13, 5\n(13) - (5) = 8, left: 8, 13/10\n(5) - (13) = -8, left: -8, 13/10\n(10) / (13) = 10/13, left: 10/13, 13, 5\n(10/13) - (13) = -159/13, left: -159/13, 5\n(10/13) - (5) = -55/13, left: -55/13, 13\n(13) * (-55/13) = -55, left: -55\n(13) - (10) = 3, left: 3, 13, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((13 - 10) * (13 - 5))"}, {"input": "13 5 10 13\n", "output": "(13) + (13) = 26, left: 26, 5, 10\n(26) - (5) = 21, left: 21, 10\n(21) / (10) = 21/10, left: 21/10\n(5) / (26) = 5/26, left: 5/26, 10\n(10) * (26) = 260, left: 260, 5\n(10) - (26) = -16, left: -16, 5\n(10) + (26) = 36, left: 36, 5\n(10) - (5) = 5, left: 5, 26\n(5) * (10) = 50, left: 50, 26\n(50) - (26) = 24, left: 24\nreach 24! expression: ((5 * 10) - (13 + 13))"}, {"input": "6 5 12 7\n", "output": "(6) / (7) = 6/7, left: 6/7, 5, 12\n(7) / (6) = 7/6, left: 7/6, 5, 12\n(5) - (7/6) = 23/6, left: 23/6, 12\n(12) - (23/6) = 49/6, left: 49/6\n(7) - (6) = 1, left: 1, 5, 12\n(12) * (1) = 12, left: 12, 5\n(12) / (5) = 12/5, left: 12/5, 1\n(7) - (5) = 2, left: 2, 6, 12\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (7 - 5)))"}, {"input": "6 5 12 7\n", "output": "(5) - (6) = -1, left: -1, 12, 7\n(7) - (-1) = 8, left: 8, 12\n(6) - (5) = 1, left: 1, 12, 7\n(1) / (7) = 1/7, left: 1/7, 12\n(6) * (5) = 30, left: 30, 12, 7\n(5) / (7) = 5/7, left: 5/7, 6, 12\n(7) / (5) = 7/5, left: 7/5, 6, 12\n(5) - (7) = -2, left: -2, 6, 12\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (5 - 7)))"}, {"input": "6 5 12 7\n", "output": "(5) / (6) = 5/6, left: 5/6, 12, 7\n(6) - (5) = 1, left: 1, 12, 7\n(12) / (1) = 12, left: 12, 7\n(7) / (6) = 7/6, left: 7/6, 5, 12\n(5) - (7/6) = 23/6, left: 23/6, 12\n(7) - (5) = 2, left: 2, 6, 12\n(12) + (2) = 14, left: 14, 6\n(6) * (14) = 84, left: 84\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (7 - 5)))"}, {"input": "6 5 12 7\n", "output": "(6) - (7) = -1, left: -1, 5, 12\n(5) / (-1) = -5, left: -5, 12\n(7) / (6) = 7/6, left: 7/6, 5, 12\n(5) * (7/6) = 35/6, left: 35/6, 12\n(6) - (12) = -6, left: -6, 5, 7\n(5) + (7) = 12, left: 12, -6\n(12) - (6) = 6, left: 6, 5, 7\n(6) / (12) = 1/2, left: 1/2, 5, 7\n(5) + (7) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((5 + 7) / (6 / 12))"}, {"input": "6 5 12 7\n", "output": "(12) - (5) = 7, left: 7, 6, 7\n(12) / (5) = 12/5, left: 12/5, 6, 7\n(7) + (12/5) = 47/5, left: 47/5, 6\n(7) / (6) = 7/6, left: 7/6, 5, 12\n(12) * (7/6) = 14, left: 14, 5\n(5) * (14) = 70, left: 70\n(7) / (5) = 7/5, left: 7/5, 6, 12\n(5) + (7) = 12, left: 12, 6, 12\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (12 / 6))"}, {"input": "6 5 12 7\n", "output": "(12) - (5) = 7, left: 7, 6, 7\n(7) / (7) = 1, left: 1, 6\n(6) + (1) = 7, left: 7\n(5) / (12) = 5/12, left: 5/12, 6, 7\n(12) / (5) = 12/5, left: 12/5, 6, 7\n(6) + (7) = 13, left: 13, 5, 12\n(6) - (7) = -1, left: -1, 5, 12\n(12) * (-1) = -12, left: -12, 5\n(6) / (7) = 6/7, left: 6/7, 5, 12\n(7) / (5) = 7/5, left: 7/5, 6, 12\n(6) + (12) = 18, left: 18, 7/5\n(5) + (7) = 12, left: 12, 6, 12\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (12 / 6))"}, {"input": "6 5 12 7\n", "output": "(6) + (5) = 11, left: 11, 12, 7\n(12) * (11) = 132, left: 132, 7\n(5) - (6) = -1, left: -1, 12, 7\n(-1) / (7) = -1/7, left: -1/7, 12\n(6) * (5) = 30, left: 30, 12, 7\n(7) / (30) = 7/30, left: 7/30, 12\n(6) - (5) = 1, left: 1, 12, 7\n(12) - (1) = 11, left: 11, 7\n(7) - (6) = 1, left: 1, 5, 12\n(1) - (12) = -11, left: -11, 5\n(7) / (6) = 7/6, left: 7/6, 5, 12\n(7) - (5) = 2, left: 2, 6, 12\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (7 - 5)))"}, {"input": "12 7 5 4\n", "output": "(4) / (7) = 4/7, left: 4/7, 12, 5\n(12) + (5) = 17, left: 17, 4/7\n(17) - (4/7) = 115/7, left: 115/7\n(7) - (4) = 3, left: 3, 12, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (7 - 4)))"}, {"input": "12 7 5 4\n", "output": "(7) - (12) = -5, left: -5, 5, 4\n(4) / (-5) = -4/5, left: -4/5, 5\n(12) * (7) = 84, left: 84, 5, 4\n(12) / (7) = 12/7, left: 12/7, 5, 4\n(12/7) / (4) = 3/7, left: 3/7, 5\n(12) + (7) = 19, left: 19, 5, 4\n(7) * (4) = 28, left: 28, 12, 5\n(4) - (7) = -3, left: -3, 12, 5\n(5) + (-3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 + (4 - 7)))"}, {"input": "12 7 5 4\n", "output": "(7) * (4) = 28, left: 28, 12, 5\n(5) - (28) = -23, left: -23, 12\n(7) / (4) = 7/4, left: 7/4, 12, 5\n(5) - (12) = -7, left: -7, 7/4\n(4) / (7) = 4/7, left: 4/7, 12, 5\n(5) / (4/7) = 35/4, left: 35/4, 12\n(5) + (4/7) = 39/7, left: 39/7, 12\n(7) - (4) = 3, left: 3, 12, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (7 - 4)))"}, {"input": "12 7 5 4\n", "output": "(5) - (12) = -7, left: -7, 7, 4\n(7) - (-7) = 14, left: 14, 4\n(12) + (5) = 17, left: 17, 7, 4\n(4) / (7) = 4/7, left: 4/7, 17\n(7) + (4) = 11, left: 11, 12, 5\n(5) + (11) = 16, left: 16, 12\n(7) / (4) = 7/4, left: 7/4, 12, 5\n(7) - (4) = 3, left: 3, 12, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (7 - 4)))"}, {"input": "12 7 5 4\n", "output": "(7) * (4) = 28, left: 28, 12, 5\n(28) / (12) = 7/3, left: 7/3, 5\n(7) + (4) = 11, left: 11, 12, 5\n(12) * (5) = 60, left: 60, 11\n(7) / (4) = 7/4, left: 7/4, 12, 5\n(5) / (12) = 5/12, left: 5/12, 7/4\n(7) - (4) = 3, left: 3, 12, 5\n(5) + (3) = 8, left: 8, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (7 - 4)))"}, {"input": "12 7 5 4\n", "output": "(7) + (5) = 12, left: 12, 12, 4\n(4) + (12) = 16, left: 16, 12\n(12) / (16) = 3/4, left: 3/4\n(12) / (4) = 3, left: 3, 12\n(12) + (3) = 15, left: 15\n(12) * (12) = 144, left: 144, 4\n(12) / (12) = 1, left: 1, 4\n(7) - (5) = 2, left: 2, 12, 4\n(12) * (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (7 - 5))"}, {"input": "12 7 5 4\n", "output": "(7) - (12) = -5, left: -5, 5, 4\n(5) - (-5) = 10, left: 10, 4\n(12) * (7) = 84, left: 84, 5, 4\n(4) - (5) = -1, left: -1, 84\n(12) / (7) = 12/7, left: 12/7, 5, 4\n(12) - (7) = 5, left: 5, 5, 4\n(4) / (5) = 4/5, left: 4/5, 5\n(12) + (7) = 19, left: 19, 5, 4\n(7) * (4) = 28, left: 28, 12, 5\n(28) / (12) = 7/3, left: 7/3, 5\n(7) + (4) = 11, left: 11, 12, 5\n(4) - (7) = -3, left: -3, 12, 5\n(5) + (-3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 + (4 - 7)))"}, {"input": "8 3 5 1\n", "output": "(3) / (1) = 3, left: 3, 8, 5\n(3) - (8) = -5, left: -5, 5\n(-5) - (5) = -10, left: -10\n(3) - (1) = 2, left: 2, 8, 5\n(2) / (8) = 1/4, left: 1/4, 5\n(8) * (2) = 16, left: 16, 5\n(5) + (2) = 7, left: 7, 8\n(5) / (2) = 5/2, left: 5/2, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (3 - 1)))"}, {"input": "8 3 5 1\n", "output": "(3) + (1) = 4, left: 4, 8, 5\n(3) / (1) = 3, left: 3, 8, 5\n(8) / (3) = 8/3, left: 8/3, 5\n(5) + (8/3) = 23/3, left: 23/3\n(3) / (5) = 3/5, left: 3/5, 8\n(5) - (3) = 2, left: 2, 8\n(3) - (1) = 2, left: 2, 8, 5\n(5) + (2) = 7, left: 7, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (3 - 1)))"}, {"input": "8 3 5 1\n", "output": "(8) * (5) = 40, left: 40, 3, 1\n(5) - (8) = -3, left: -3, 3, 1\n(8) + (5) = 13, left: 13, 3, 1\n(5) / (8) = 5/8, left: 5/8, 3, 1\n(8) / (5) = 8/5, left: 8/5, 3, 1\n(8) - (5) = 3, left: 3, 3, 1\n(1) * (3) = 3, left: 3, 3\n(3) - (1) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (3 - 1)))"}, {"input": "8 3 5 1\n", "output": "(8) * (1) = 8, left: 8, 3, 5\n(8) / (5) = 8/5, left: 8/5, 3\n(5) * (8) = 40, left: 40, 3\n(1) - (8) = -7, left: -7, 3, 5\n(3) + (-7) = -4, left: -4, 5\n(8) - (1) = 7, left: 7, 3, 5\n(5) / (3) = 5/3, left: 5/3, 7\n(8) + (1) = 9, left: 9, 3, 5\n(3) * (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((8 + 1) + (3 * 5))"}, {"input": "8 3 5 1\n", "output": "(8) / (3) = 8/3, left: 8/3, 5, 1\n(5) / (8/3) = 15/8, left: 15/8, 1\n(3) / (8) = 3/8, left: 3/8, 5, 1\n(1) - (5) = -4, left: -4, 3/8\n(3/8) - (-4) = 35/8, left: 35/8\n(8) * (3) = 24, left: 24, 5, 1\n(5) / (1) = 5, left: 5, 24\n(8) - (3) = 5, left: 5, 5, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (8 - 3)) - 1)"}, {"input": "8 3 5 1\n", "output": "(8) / (3) = 8/3, left: 8/3, 5, 1\n(3) / (8) = 3/8, left: 3/8, 5, 1\n(3) - (8) = -5, left: -5, 5, 1\n(5) / (1) = 5, left: 5, -5\n(5) / (-5) = -1, left: -1, 1\n(-1) / (1) = -1, left: -1\n(8) * (3) = 24, left: 24, 5, 1\n(8) - (3) = 5, left: 5, 5, 1\n(1) - (5) = -4, left: -4, 5\n(5) + (1) = 6, left: 6, 5\n(5) / (6) = 5/6, left: 5/6\n(5) * (1) = 5, left: 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (8 - 3)) - 1)"}, {"input": "8 3 5 1\n", "output": "(8) * (5) = 40, left: 40, 3, 1\n(1) + (40) = 41, left: 41, 3\n(5) - (8) = -3, left: -3, 3, 1\n(1) - (3) = -2, left: -2, -3\n(8) + (5) = 13, left: 13, 3, 1\n(8) / (5) = 8/5, left: 8/5, 3, 1\n(1) / (3) = 1/3, left: 1/3, 8/5\n(8) - (5) = 3, left: 3, 3, 1\n(1) - (3) = -2, left: -2, 3\n(3) - (1) = 2, left: 2, 8, 5\n(8) + (2) = 10, left: 10, 5\n(5) * (2) = 10, left: 10, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (3 - 1)))"}, {"input": "13 9 13 3\n", "output": "(9) / (13) = 9/13, left: 9/13, 13, 3\n(13) * (9/13) = 9, left: 9, 3\n(3) / (9) = 1/3, left: 1/3\n(13) / (13) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "13 9 13 3\n", "output": "(3) - (13) = -10, left: -10, 13, 9\n(13) - (9) = 4, left: 4, -10\n(13) * (3) = 39, left: 39, 13, 9\n(13) / (39) = 1/3, left: 1/3, 9\n(13) * (13) = 169, left: 169, 9, 3\n(13) + (13) = 26, left: 26, 9, 3\n(9) + (3) = 12, left: 12, 26\n(13) / (13) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "13 9 13 3\n", "output": "(3) - (13) = -10, left: -10, 9, 13\n(13) * (3) = 39, left: 39, 9, 13\n(13) / (39) = 1/3, left: 1/3, 9\n(13) - (3) = 10, left: 10, 9, 13\n(13) + (3) = 16, left: 16, 9, 13\n(9) * (13) = 117, left: 117, 16\n(3) / (13) = 3/13, left: 3/13, 9, 13\n(13) / (13) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "13 9 13 3\n", "output": "(13) + (3) = 16, left: 16, 9, 13\n(9) + (13) = 22, left: 22, 13, 3\n(13) + (9) = 22, left: 22, 13, 3\n(3) - (22) = -19, left: -19, 13\n(3) * (22) = 66, left: 66, 13\n(22) - (13) = 9, left: 9, 3\n(9) / (13) = 9/13, left: 9/13, 13, 3\n(13) / (13) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "13 9 13 3\n", "output": "(13) + (3) = 16, left: 16, 9, 13\n(13) - (16) = -3, left: -3, 9\n(13) * (9) = 117, left: 117, 13, 3\n(117) - (13) = 104, left: 104, 3\n(9) - (13) = -4, left: -4, 13, 3\n(13) + (13) = 26, left: 26, 9, 3\n(26) / (9) = 26/9, left: 26/9, 3\n(13) / (13) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "13 9 13 3\n", "output": "(9) - (3) = 6, left: 6, 13, 13\n(13) / (13) = 1, left: 1, 6\n(1) - (6) = -5, left: -5\n(3) - (9) = -6, left: -6, 13, 13\n(13) + (3) = 16, left: 16, 9, 13\n(13) * (3) = 39, left: 39, 13, 9\n(9) / (13) = 9/13, left: 9/13, 39\n(13) / (13) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "13 9 13 3\n", "output": "(9) - (3) = 6, left: 6, 13, 13\n(3) - (9) = -6, left: -6, 13, 13\n(9) + (3) = 12, left: 12, 13, 13\n(3) - (13) = -10, left: -10, 9, 13\n(13) - (9) = 4, left: 4, 13, 3\n(13) * (4) = 52, left: 52, 3\n(13) + (9) = 22, left: 22, 13, 3\n(13) + (22) = 35, left: 35, 3\n(13) * (9) = 117, left: 117, 13, 3\n(13) - (13) = 0, left: 0, 9, 3\n(0) - (3) = -3, left: -3, 9\n(13) / (13) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "3 12 9 5\n", "output": "(12) / (9) = 4/3, left: 4/3, 3, 5\n(5) / (3) = 5/3, left: 5/3, 4/3\n(3) * (4/3) = 4, left: 4, 5\n(3) - (4/3) = 5/3, left: 5/3, 5\n(5) - (4/3) = 11/3, left: 11/3, 3\n(9) - (12) = -3, left: -3, 3, 5\n(3) / (-3) = -1, left: -1, 5\n(3) * (-3) = -9, left: -9, 5\n(5) - (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 - (9 - 12)))"}, {"input": "3 12 9 5\n", "output": "(9) + (5) = 14, left: 14, 3, 12\n(3) / (14) = 3/14, left: 3/14, 12\n(3) + (12) = 15, left: 15, 14\n(14) + (15) = 29, left: 29\n(12) / (3) = 4, left: 4, 14\n(9) - (5) = 4, left: 4, 3, 12\n(3) - (4) = -1, left: -1, 12\n(4) / (3) = 4/3, left: 4/3, 12\n(3) * (4) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (3 * (9 - 5)))"}, {"input": "3 12 9 5\n", "output": "(12) - (5) = 7, left: 7, 3, 9\n(7) / (3) = 7/3, left: 7/3, 9\n(3) - (7) = -4, left: -4, 9\n(5) / (12) = 5/12, left: 5/12, 3, 9\n(12) + (5) = 17, left: 17, 3, 9\n(3) * (9) = 27, left: 27, 17\n(9) - (17) = -8, left: -8, 3\n(-8) - (3) = -11, left: -11\n(17) - (9) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((12 + 5) - 9))"}, {"input": "3 12 9 5\n", "output": "(9) - (3) = 6, left: 6, 12, 5\n(3) - (9) = -6, left: -6, 12, 5\n(3) + (9) = 12, left: 12, 12, 5\n(12) / (5) = 12/5, left: 12/5, 12\n(5) * (12) = 60, left: 60, 12\n(3) * (9) = 27, left: 27, 12, 5\n(5) * (27) = 135, left: 135, 12\n(9) / (3) = 3, left: 3, 12, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (9 / 3)))"}, {"input": "3 12 9 5\n", "output": "(3) * (5) = 15, left: 15, 12, 9\n(12) * (9) = 108, left: 108, 15\n(108) / (15) = 36/5, left: 36/5\n(5) - (3) = 2, left: 2, 12, 9\n(9) / (12) = 3/4, left: 3/4, 2\n(12) / (9) = 4/3, left: 4/3, 2\n(12) / (2) = 6, left: 6, 9\n(3) + (5) = 8, left: 8, 12, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((3 + 5) * (12 - 9))"}, {"input": "3 9 6 13\n", "output": "(9) + (6) = 15, left: 15, 3, 13\n(15) / (13) = 15/13, left: 15/13, 3\n(15/13) / (3) = 5/13, left: 5/13\n(13) / (3) = 13/3, left: 13/3, 15\n(3) * (13) = 39, left: 39, 15\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (9 + 6))"}, {"input": "3 9 6 13\n", "output": "(13) / (6) = 13/6, left: 13/6, 3, 9\n(13/6) / (3) = 13/18, left: 13/18, 9\n(6) * (13) = 78, left: 78, 3, 9\n(9) / (78) = 3/26, left: 3/26, 3\n(6) + (13) = 19, left: 19, 3, 9\n(13) - (6) = 7, left: 7, 3, 9\n(3) - (13) = -10, left: -10, 9, 6\n(3) + (13) = 16, left: 16, 9, 6\n(6) / (16) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: (9 / (6 / (3 + 13)))"}, {"input": "3 9 6 13\n", "output": "(13) / (9) = 13/9, left: 13/9, 3, 6\n(6) / (3) = 2, left: 2, 13/9\n(13) - (9) = 4, left: 4, 3, 6\n(3) + (6) = 9, left: 9, 4\n(6) / (3) = 2, left: 2, 4\n(9) + (13) = 22, left: 22, 3, 6\n(3) * (22) = 66, left: 66, 6\n(3) - (6) = -3, left: -3, 22\n(6) / (3) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((9 + 13) + (6 / 3))"}, {"input": "3 9 6 13\n", "output": "(9) + (6) = 15, left: 15, 3, 13\n(3) / (15) = 1/5, left: 1/5, 13\n(3) + (15) = 18, left: 18, 13\n(13) + (18) = 31, left: 31\n(13) - (15) = -2, left: -2, 3\n(3) * (-2) = -6, left: -6\n(13) / (3) = 13/3, left: 13/3, 15\n(3) - (13) = -10, left: -10, 15\n(3) * (13) = 39, left: 39, 15\n(39) - (15) = 24, left: 24\nreach 24! expression: ((3 * 13) - (9 + 6))"}, {"input": "3 9 6 13\n", "output": "(6) / (13) = 6/13, left: 6/13, 3, 9\n(3) - (9) = -6, left: -6, 6/13\n(6) * (13) = 78, left: 78, 3, 9\n(13) / (6) = 13/6, left: 13/6, 3, 9\n(3) / (9) = 1/3, left: 1/3, 6, 13\n(1/3) / (6) = 1/18, left: 1/18, 13\n(3) / (6) = 1/2, left: 1/2, 9, 13\n(6) / (3) = 2, left: 2, 9, 13\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((6 / 3) + (9 + 13))"}, {"input": "3 9 6 13\n", "output": "(13) - (3) = 10, left: 10, 9, 6\n(6) / (10) = 3/5, left: 3/5, 9\n(10) - (6) = 4, left: 4, 9\n(6) / (9) = 2/3, left: 2/3, 10\n(9) / (6) = 3/2, left: 3/2, 10\n(9) * (10) = 90, left: 90, 6\n(6) - (90) = -84, left: -84\n(3) + (13) = 16, left: 16, 9, 6\n(9) * (16) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((9 * (3 + 13)) / 6)"}, {"input": "8 10 12 6\n", "output": "(12) / (6) = 2, left: 2, 8, 10\n(8) / (10) = 4/5, left: 4/5, 2\n(4/5) - (2) = -6/5, left: -6/5\n(12) - (6) = 6, left: 6, 8, 10\n(8) + (6) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (8 + (12 - 6)))"}, {"input": "8 10 12 6\n", "output": "(12) - (6) = 6, left: 6, 8, 10\n(8) / (6) = 4/3, left: 4/3, 10\n(6) - (8) = -2, left: -2, 10\n(10) / (-2) = -5, left: -5\n(8) + (6) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (8 + (12 - 6)))"}, {"input": "8 10 12 6\n", "output": "(10) * (6) = 60, left: 60, 8, 12\n(12) * (60) = 720, left: 720, 8\n(10) + (6) = 16, left: 16, 8, 12\n(8) - (16) = -8, left: -8, 12\n(16) / (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 6) / 8))"}, {"input": "8 10 12 6\n", "output": "(10) * (6) = 60, left: 60, 8, 12\n(60) / (12) = 5, left: 5, 8\n(8) * (12) = 96, left: 96, 60\n(12) - (8) = 4, left: 4, 60\n(10) + (6) = 16, left: 16, 8, 12\n(8) + (16) = 24, left: 24, 12\n(8) - (16) = -8, left: -8, 12\n(-8) - (12) = -20, left: -20\n(16) / (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 6) / 8))"}, {"input": "8 10 12 6\n", "output": "(8) * (10) = 80, left: 80, 12, 6\n(12) + (80) = 92, left: 92, 6\n(80) / (6) = 40/3, left: 40/3, 12\n(6) + (80) = 86, left: 86, 12\n(8) / (10) = 4/5, left: 4/5, 12, 6\n(6) - (4/5) = 26/5, left: 26/5, 12\n(12) * (6) = 72, left: 72, 4/5\n(8) - (10) = -2, left: -2, 12, 6\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (8 - 10)))"}, {"input": "8 10 12 6\n", "output": "(10) - (12) = -2, left: -2, 8, 6\n(6) + (-2) = 4, left: 4, 8\n(6) / (-2) = -3, left: -3, 8\n(10) / (12) = 5/6, left: 5/6, 8, 6\n(8) * (6) = 48, left: 48, 5/6\n(10) * (12) = 120, left: 120, 8, 6\n(8) - (6) = 2, left: 2, 120\n(12) - (10) = 2, left: 2, 8, 6\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (12 - 10))"}, {"input": "8 10 12 6\n", "output": "(12) / (6) = 2, left: 2, 8, 10\n(10) / (8) = 5/4, left: 5/4, 2\n(2) - (8) = -6, left: -6, 10\n(8) - (2) = 6, left: 6, 10\n(2) / (10) = 1/5, left: 1/5, 8\n(10) / (2) = 5, left: 5, 8\n(8) + (5) = 13, left: 13\n(12) - (6) = 6, left: 6, 8, 10\n(8) + (6) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (8 + (12 - 6)))"}, {"input": "8 10 12 6\n", "output": "(12) - (6) = 6, left: 6, 8, 10\n(8) / (6) = 4/3, left: 4/3, 10\n(10) + (4/3) = 34/3, left: 34/3\n(6) - (8) = -2, left: -2, 10\n(10) + (-2) = 8, left: 8\n(8) + (6) = 14, left: 14, 10\n(10) - (14) = -4, left: -4\n(14) / (10) = 7/5, left: 7/5\n(10) / (14) = 5/7, left: 5/7\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (8 + (12 - 6)))"}, {"input": "7 5 1 4\n", "output": "(5) + (4) = 9, left: 9, 7, 1\n(7) - (1) = 6, left: 6, 9\n(4) / (7) = 4/7, left: 4/7, 5, 1\n(4/7) - (5) = -31/7, left: -31/7, 1\n(7) + (4) = 11, left: 11, 5, 1\n(7) - (4) = 3, left: 3, 5, 1\n(5) / (1) = 5, left: 5, 3\n(7) * (4) = 28, left: 28, 5, 1\n(5) - (28) = -23, left: -23, 1\n(1) - (-23) = 24, left: 24\nreach 24! expression: (1 - (5 - (7 * 4)))"}, {"input": "7 5 1 4\n", "output": "(4) - (1) = 3, left: 3, 7, 5\n(5) - (7) = -2, left: -2, 3\n(1) * (4) = 4, left: 4, 7, 5\n(4) / (1) = 4, left: 4, 7, 5\n(4) - (5) = -1, left: -1, 7\n(4) / (5) = 4/5, left: 4/5, 7, 1\n(4) / (7) = 4/7, left: 4/7, 5, 1\n(7) * (4) = 28, left: 28, 5, 1\n(1) - (5) = -4, left: -4, 28\n(28) + (-4) = 24, left: 24\nreach 24! expression: ((7 * 4) + (1 - 5))"}, {"input": "7 5 1 4\n", "output": "(5) / (4) = 5/4, left: 5/4, 7, 1\n(4) - (5) = -1, left: -1, 7, 1\n(7) - (1) = 6, left: 6, -1\n(-1) + (6) = 5, left: 5\n(7) / (1) = 7, left: 7, -1\n(5) * (4) = 20, left: 20, 7, 1\n(4) - (7) = -3, left: -3, 5, 1\n(7) * (4) = 28, left: 28, 5, 1\n(1) + (28) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((1 + (7 * 4)) - 5)"}, {"input": "7 5 1 4\n", "output": "(5) / (4) = 5/4, left: 5/4, 7, 1\n(7) + (1) = 8, left: 8, 5/4\n(4) - (1) = 3, left: 3, 7, 5\n(1) * (4) = 4, left: 4, 7, 5\n(7) * (5) = 35, left: 35, 1, 4\n(7) - (4) = 3, left: 3, 5, 1\n(7) / (4) = 7/4, left: 7/4, 5, 1\n(7) * (4) = 28, left: 28, 5, 1\n(1) + (28) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((1 + (7 * 4)) - 5)"}, {"input": "7 5 1 4\n", "output": "(5) + (4) = 9, left: 9, 7, 1\n(1) * (9) = 9, left: 9, 7\n(5) - (4) = 1, left: 1, 7, 1\n(1) + (1) = 2, left: 2, 7\n(4) - (5) = -1, left: -1, 7, 1\n(7) / (-1) = -7, left: -7, 1\n(1) + (4) = 5, left: 5, 7, 5\n(7) * (4) = 28, left: 28, 5, 1\n(1) + (28) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((1 + (7 * 4)) - 5)"}, {"input": "7 5 1 4\n", "output": "(1) - (4) = -3, left: -3, 7, 5\n(-3) - (5) = -8, left: -8, 7\n(4) / (1) = 4, left: 4, 7, 5\n(5) / (4) = 5/4, left: 5/4, 7, 1\n(7) * (1) = 7, left: 7, 5/4\n(7) - (5/4) = 23/4, left: 23/4\n(5) + (4) = 9, left: 9, 7, 1\n(1) + (9) = 10, left: 10, 7\n(4) - (7) = -3, left: -3, 5, 1\n(-3) / (1) = -3, left: -3, 5\n(1) * (-3) = -3, left: -3, 5\n(7) * (4) = 28, left: 28, 5, 1\n(1) - (5) = -4, left: -4, 28\n(28) + (-4) = 24, left: 24\nreach 24! expression: ((7 * 4) + (1 - 5))"}, {"input": "7 5 1 4\n", "output": "(5) - (4) = 1, left: 1, 7, 1\n(5) + (4) = 9, left: 9, 7, 1\n(7) / (1) = 7, left: 7, 9\n(9) - (7) = 2, left: 2\n(5) / (4) = 5/4, left: 5/4, 7, 1\n(5) * (4) = 20, left: 20, 7, 1\n(20) / (7) = 20/7, left: 20/7, 1\n(4) - (5) = -1, left: -1, 7, 1\n(4) / (5) = 4/5, left: 4/5, 7, 1\n(7) / (4) = 7/4, left: 7/4, 5, 1\n(7/4) / (5) = 7/20, left: 7/20, 1\n(7) * (4) = 28, left: 28, 5, 1\n(5) - (28) = -23, left: -23, 1\n(1) - (-23) = 24, left: 24\nreach 24! expression: (1 - (5 - (7 * 4)))"}, {"input": "7 5 1 4\n", "output": "(4) - (5) = -1, left: -1, 7, 1\n(7) / (-1) = -7, left: -7, 1\n(7) * (-1) = -7, left: -7, 1\n(1) - (-1) = 2, left: 2, 7\n(1) + (4) = 5, left: 5, 7, 5\n(4) / (1) = 4, left: 4, 7, 5\n(5) + (4) = 9, left: 9, 7\n(1) - (4) = -3, left: -3, 7, 5\n(7) - (5) = 2, left: 2, 1, 4\n(4) - (2) = 2, left: 2, 1\n(7) + (5) = 12, left: 12, 1, 4\n(7) * (4) = 28, left: 28, 5, 1\n(1) + (28) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((1 + (7 * 4)) - 5)"}, {"input": "7 5 1 4\n", "output": "(5) / (4) = 5/4, left: 5/4, 7, 1\n(5/4) / (1) = 5/4, left: 5/4, 7\n(5) + (4) = 9, left: 9, 7, 1\n(4) - (5) = -1, left: -1, 7, 1\n(7) - (-1) = 8, left: 8, 1\n(5) * (4) = 20, left: 20, 7, 1\n(7) + (4) = 11, left: 11, 5, 1\n(7) / (4) = 7/4, left: 7/4, 5, 1\n(5) - (7/4) = 13/4, left: 13/4, 1\n(1) + (7/4) = 11/4, left: 11/4, 5\n(5) + (1) = 6, left: 6, 7/4\n(7) * (4) = 28, left: 28, 5, 1\n(1) + (28) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((1 + (7 * 4)) - 5)"}, {"input": "7 5 1 4\n", "output": "(5) * (4) = 20, left: 20, 7, 1\n(1) * (20) = 20, left: 20, 7\n(7) / (1) = 7, left: 7, 20\n(4) - (5) = -1, left: -1, 7, 1\n(1) / (4) = 1/4, left: 1/4, 7, 5\n(4) / (1) = 4, left: 4, 7, 5\n(7) - (5) = 2, left: 2, 4\n(1) - (4) = -3, left: -3, 7, 5\n(7) / (5) = 7/5, left: 7/5, -3\n(7) / (4) = 7/4, left: 7/4, 5, 1\n(7/4) - (5) = -13/4, left: -13/4, 1\n(7) * (4) = 28, left: 28, 5, 1\n(1) + (28) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((1 + (7 * 4)) - 5)"}, {"input": "5 2 9 2\n", "output": "(5) - (2) = 3, left: 3, 9, 2\n(2) - (9) = -7, left: -7, 3\n(2) / (9) = 2/9, left: 2/9, 3\n(3) / (2) = 3/2, left: 3/2, 9\n(3) - (2) = 1, left: 1, 9\n(1) - (9) = -8, left: -8\n(2) * (3) = 6, left: 6, 9\n(2) - (3) = -1, left: -1, 9\n(9) + (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 + (5 - 2)))"}, {"input": "5 2 9 2\n", "output": "(5) + (2) = 7, left: 7, 2, 9\n(9) / (2) = 9/2, left: 9/2, 7\n(7) - (9/2) = 5/2, left: 5/2\n(2) + (9) = 11, left: 11, 7\n(2) * (7) = 14, left: 14, 9\n(14) / (9) = 14/9, left: 14/9\n(2) - (5) = -3, left: -3, 2, 9\n(-3) / (2) = -3/2, left: -3/2, 9\n(9) - (-3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 - (2 - 5)))"}, {"input": "5 2 9 2\n", "output": "(5) + (9) = 14, left: 14, 2, 2\n(2) - (2) = 0, left: 0, 14\n(2) - (2) = 0, left: 0, 14\n(2) / (14) = 1/7, left: 1/7, 2\n(14) / (2) = 7, left: 7, 2\n(2) + (7) = 9, left: 9\n(2) * (14) = 28, left: 28, 2\n(14) - (2) = 12, left: 12, 2\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((5 + 9) - 2))"}, {"input": "5 2 9 2\n", "output": "(2) - (5) = -3, left: -3, 9, 2\n(-3) - (9) = -12, left: -12, 2\n(2) * (-12) = -24, left: -24\n(2) + (-12) = -10, left: -10\n(-3) / (9) = -1/3, left: -1/3, 2\n(9) + (-3) = 6, left: 6, 2\n(6) / (2) = 3, left: 3\n(9) - (-3) = 12, left: 12, 2\n(2) / (12) = 1/6, left: 1/6\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 - (2 - 5)))"}, {"input": "5 2 9 2\n", "output": "(9) - (2) = 7, left: 7, 5, 2\n(5) * (7) = 35, left: 35, 2\n(2) + (35) = 37, left: 37\n(7) / (5) = 7/5, left: 7/5, 2\n(2) * (7/5) = 14/5, left: 14/5\n(2) + (7/5) = 17/5, left: 17/5\n(5) / (7) = 5/7, left: 5/7, 2\n(5) + (7) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (5 + (9 - 2)))"}, {"input": "5 3 8 2\n", "output": "(3) + (8) = 11, left: 11, 5, 2\n(3) * (8) = 24, left: 24, 5, 2\n(8) / (3) = 8/3, left: 8/3, 5, 2\n(8) / (2) = 4, left: 4, 5, 3\n(8) - (2) = 6, left: 6, 5, 3\n(5) * (3) = 15, left: 15, 6\n(8) + (2) = 10, left: 10, 5, 3\n(8) * (2) = 16, left: 16, 5, 3\n(3) + (16) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (3 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(2) - (3) = -1, left: -1, 5, 8\n(8) / (-1) = -8, left: -8, 5\n(3) - (2) = 1, left: 1, 5, 8\n(3) * (2) = 6, left: 6, 5, 8\n(8) - (5) = 3, left: 3, 6\n(8) / (2) = 4, left: 4, 5, 3\n(3) / (5) = 3/5, left: 3/5, 4\n(8) * (2) = 16, left: 16, 5, 3\n(5) + (16) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (5 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(2) / (8) = 1/4, left: 1/4, 5, 3\n(1/4) - (3) = -11/4, left: -11/4, 5\n(8) / (2) = 4, left: 4, 5, 3\n(5) - (3) = 2, left: 2, 4\n(8) - (2) = 6, left: 6, 5, 3\n(5) - (3) = 2, left: 2, 6\n(3) - (6) = -3, left: -3, 5\n(8) * (2) = 16, left: 16, 5, 3\n(5) + (16) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (5 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(3) - (8) = -5, left: -5, 5, 2\n(2) * (-5) = -10, left: -10, 5\n(5) + (2) = 7, left: 7, 3, 8\n(8) - (5) = 3, left: 3, 3, 2\n(3) * (3) = 9, left: 9, 2\n(2) + (3) = 5, left: 5, 3\n(8) + (2) = 10, left: 10, 5, 3\n(8) * (2) = 16, left: 16, 5, 3\n(5) + (3) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((8 * 2) + (5 + 3))"}, {"input": "5 3 8 2\n", "output": "(8) - (2) = 6, left: 6, 5, 3\n(5) / (6) = 5/6, left: 5/6, 3\n(8) / (2) = 4, left: 4, 5, 3\n(4) / (5) = 4/5, left: 4/5, 3\n(3) - (4) = -1, left: -1, 5\n(-1) - (5) = -6, left: -6\n(8) + (2) = 10, left: 10, 5, 3\n(8) * (2) = 16, left: 16, 5, 3\n(3) + (16) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (3 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(3) - (8) = -5, left: -5, 5, 2\n(-5) / (2) = -5/2, left: -5/2, 5\n(8) / (3) = 8/3, left: 8/3, 5, 2\n(2) - (8/3) = -2/3, left: -2/3, 5\n(3) / (8) = 3/8, left: 3/8, 5, 2\n(3/8) - (5) = -37/8, left: -37/8, 2\n(2) * (-37/8) = -37/4, left: -37/4\n(8) - (2) = 6, left: 6, 5, 3\n(8) + (2) = 10, left: 10, 5, 3\n(5) + (10) = 15, left: 15, 3\n(5) - (10) = -5, left: -5, 3\n(8) * (2) = 16, left: 16, 5, 3\n(3) + (16) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (3 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(2) - (3) = -1, left: -1, 5, 8\n(3) - (2) = 1, left: 1, 5, 8\n(2) / (3) = 2/3, left: 2/3, 5, 8\n(3) + (2) = 5, left: 5, 5, 8\n(8) - (5) = 3, left: 3, 5\n(3) * (2) = 6, left: 6, 5, 8\n(3) / (2) = 3/2, left: 3/2, 5, 8\n(2) - (8) = -6, left: -6, 5, 3\n(3) + (-6) = -3, left: -3, 5\n(8) / (2) = 4, left: 4, 5, 3\n(4) - (5) = -1, left: -1, 3\n(8) * (2) = 16, left: 16, 5, 3\n(5) + (16) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (5 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(2) - (8) = -6, left: -6, 5, 3\n(3) / (5) = 3/5, left: 3/5, -6\n(5) * (3) = 15, left: 15, -6\n(2) / (8) = 1/4, left: 1/4, 5, 3\n(1/4) - (3) = -11/4, left: -11/4, 5\n(8) / (2) = 4, left: 4, 5, 3\n(3) / (4) = 3/4, left: 3/4, 5\n(8) - (2) = 6, left: 6, 5, 3\n(5) * (6) = 30, left: 30, 3\n(5) + (6) = 11, left: 11, 3\n(8) * (2) = 16, left: 16, 5, 3\n(5) - (16) = -11, left: -11, 3\n(5) + (16) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (5 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(2) - (3) = -1, left: -1, 5, 8\n(3) + (2) = 5, left: 5, 5, 8\n(8) - (3) = 5, left: 5, 5, 2\n(2) * (5) = 10, left: 10, 5\n(5) + (2) = 7, left: 7, 3, 8\n(2) - (5) = -3, left: -3, 3, 8\n(5) * (8) = 40, left: 40, 3, 2\n(5) + (8) = 13, left: 13, 3, 2\n(8) - (2) = 6, left: 6, 5, 3\n(5) - (6) = -1, left: -1, 3\n(3) / (-1) = -3, left: -3\n(8) * (2) = 16, left: 16, 5, 3\n(5) + (3) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((8 * 2) + (5 + 3))"}, {"input": "5 3 8 2\n", "output": "(8) - (2) = 6, left: 6, 5, 3\n(8) / (2) = 4, left: 4, 5, 3\n(4) - (5) = -1, left: -1, 3\n(3) + (4) = 7, left: 7, 5\n(7) - (5) = 2, left: 2\n(3) - (4) = -1, left: -1, 5\n(8) + (2) = 10, left: 10, 5, 3\n(5) - (10) = -5, left: -5, 3\n(3) * (-5) = -15, left: -15\n(5) + (3) = 8, left: 8, 10\n(3) - (10) = -7, left: -7, 5\n(8) * (2) = 16, left: 16, 5, 3\n(3) + (16) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (3 + (8 * 2)))"}, {"input": "10 12 9 6\n", "output": "(10) - (6) = 4, left: 4, 12, 9\n(4) / (12) = 1/3, left: 1/3, 9\n(9) + (1/3) = 28/3, left: 28/3\n(9) / (12) = 3/4, left: 3/4, 4\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (10 - 6)) - 12)"}, {"input": "10 12 9 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 12, 9\n(9) / (12) = 3/4, left: 3/4, 3/5\n(3/4) / (3/5) = 5/4, left: 5/4\n(10) - (6) = 4, left: 4, 12, 9\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (10 - 6)) - 12)"}, {"input": "10 12 9 6\n", "output": "(9) / (6) = 3/2, left: 3/2, 10, 12\n(3/2) / (10) = 3/20, left: 3/20, 12\n(12) * (3/20) = 9/5, left: 9/5\n(12) * (6) = 72, left: 72, 10, 9\n(72) / (10) = 36/5, left: 36/5, 9\n(12) + (6) = 18, left: 18, 10, 9\n(10) * (9) = 90, left: 90, 12, 6\n(10) - (12) = -2, left: -2, 9, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (10 - 12)))"}, {"input": "10 12 9 6\n", "output": "(9) * (6) = 54, left: 54, 10, 12\n(10) / (12) = 5/6, left: 5/6, 54\n(6) - (9) = -3, left: -3, 10, 12\n(10) * (-3) = -30, left: -30, 12\n(6) / (9) = 2/3, left: 2/3, 10, 12\n(9) + (6) = 15, left: 15, 10, 12\n(10) / (6) = 5/3, left: 5/3, 12, 9\n(10) - (6) = 4, left: 4, 12, 9\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (10 - 6)) - 12)"}, {"input": "10 12 9 6\n", "output": "(10) - (6) = 4, left: 4, 12, 9\n(12) * (4) = 48, left: 48, 9\n(4) / (12) = 1/3, left: 1/3, 9\n(4) - (12) = -8, left: -8, 9\n(12) - (4) = 8, left: 8, 9\n(9) * (8) = 72, left: 72\n(9) + (8) = 17, left: 17\n(12) / (9) = 4/3, left: 4/3, 4\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (10 - 6)) - 12)"}, {"input": "10 12 9 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 12, 9\n(12) / (3/5) = 20, left: 20, 9\n(9) / (3/5) = 15, left: 15, 12\n(10) - (6) = 4, left: 4, 12, 9\n(12) * (9) = 108, left: 108, 4\n(9) / (12) = 3/4, left: 3/4, 4\n(12) - (9) = 3, left: 3, 4\n(3) - (4) = -1, left: -1\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (10 - 6)) - 12)"}, {"input": "7 8 13 11\n", "output": "(7) + (8) = 15, left: 15, 13, 11\n(11) / (13) = 11/13, left: 11/13, 15\n(15) - (13) = 2, left: 2, 11\n(8) - (7) = 1, left: 1, 13, 11\n(13) / (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 / (8 - 7)))"}, {"input": "7 8 13 11\n", "output": "(7) / (8) = 7/8, left: 7/8, 13, 11\n(13) - (11) = 2, left: 2, 7/8\n(13) / (7/8) = 104/7, left: 104/7, 11\n(8) - (7) = 1, left: 1, 13, 11\n(13) + (11) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (8 - 7))"}, {"input": "7 8 13 11\n", "output": "(11) / (7) = 11/7, left: 11/7, 8, 13\n(11) - (7) = 4, left: 4, 8, 13\n(8) / (4) = 2, left: 2, 13\n(7) - (11) = -4, left: -4, 8, 13\n(7) / (11) = 7/11, left: 7/11, 8, 13\n(7) + (11) = 18, left: 18, 8, 13\n(18) - (8) = 10, left: 10, 13\n(13) - (8) = 5, left: 5, 7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (13 - 8)) - 11)"}, {"input": "7 8 13 11\n", "output": "(8) + (11) = 19, left: 19, 7, 13\n(7) * (13) = 91, left: 91, 19\n(19) - (91) = -72, left: -72\n(8) * (11) = 88, left: 88, 7, 13\n(8) / (11) = 8/11, left: 8/11, 7, 13\n(8) - (11) = -3, left: -3, 7, 13\n(11) - (8) = 3, left: 3, 7, 13\n(7) - (8) = -1, left: -1, 13, 11\n(11) * (-1) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (11 * (7 - 8)))"}, {"input": "7 8 13 11\n", "output": "(7) + (8) = 15, left: 15, 13, 11\n(13) - (11) = 2, left: 2, 15\n(13) + (11) = 24, left: 24, 15\n(7) / (8) = 7/8, left: 7/8, 13, 11\n(7/8) / (11) = 7/88, left: 7/88, 13\n(13) * (7/88) = 91/88, left: 91/88\n(13) * (7/8) = 91/8, left: 91/8, 11\n(8) - (7) = 1, left: 1, 13, 11\n(13) + (11) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (8 - 7))"}, {"input": "7 8 13 11\n", "output": "(7) + (8) = 15, left: 15, 13, 11\n(11) - (13) = -2, left: -2, 15\n(15) - (-2) = 17, left: 17\n(13) + (11) = 24, left: 24, 15\n(13) / (15) = 13/15, left: 13/15, 11\n(11) - (13/15) = 152/15, left: 152/15\n(13) + (15) = 28, left: 28, 11\n(8) - (7) = 1, left: 1, 13, 11\n(13) / (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 / (8 - 7)))"}, {"input": "7 8 13 11\n", "output": "(11) - (7) = 4, left: 4, 8, 13\n(13) * (4) = 52, left: 52, 8\n(8) - (13) = -5, left: -5, 4\n(11) / (7) = 11/7, left: 11/7, 8, 13\n(8) / (13) = 8/13, left: 8/13, 11/7\n(7) * (11) = 77, left: 77, 8, 13\n(8) / (11) = 8/11, left: 8/11, 7, 13\n(13) + (11) = 24, left: 24, 7, 8\n(8) - (7) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (8 - 7))"}, {"input": "4 5 2 1\n", "output": "(2) * (1) = 2, left: 2, 4, 5\n(2) - (5) = -3, left: -3, 4\n(4) / (-3) = -4/3, left: -4/3\n(4) + (5) = 9, left: 9, 2\n(4) - (5) = -1, left: -1, 2\n(4) - (2) = 2, left: 2, 5\n(4) / (2) = 2, left: 2, 5\n(2) - (1) = 1, left: 1, 4, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (2 - 1)))"}, {"input": "4 5 2 1\n", "output": "(5) * (2) = 10, left: 10, 4, 1\n(4) * (1) = 4, left: 4, 10\n(2) - (5) = -3, left: -3, 4, 1\n(1) + (-3) = -2, left: -2, 4\n(5) - (2) = 3, left: 3, 4, 1\n(4) - (3) = 1, left: 1, 1\n(1) * (3) = 3, left: 3, 4\n(5) + (2) = 7, left: 7, 4, 1\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((5 + 2) - 1))"}, {"input": "4 5 2 1\n", "output": "(5) * (1) = 5, left: 5, 4, 2\n(4) / (5) = 4/5, left: 4/5, 2\n(1) / (5) = 1/5, left: 1/5, 4, 2\n(4) / (2) = 2, left: 2, 1/5\n(1/5) - (2) = -9/5, left: -9/5, 4\n(5) + (1) = 6, left: 6, 4, 2\n(5) / (1) = 5, left: 5, 4, 2\n(5) - (1) = 4, left: 4, 4, 2\n(2) + (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 + (5 - 1)))"}, {"input": "4 5 2 1\n", "output": "(5) / (4) = 5/4, left: 5/4, 2, 1\n(2) / (1) = 2, left: 2, 5/4\n(5) - (4) = 1, left: 1, 2, 1\n(4) / (5) = 4/5, left: 4/5, 2, 1\n(1) / (2) = 1/2, left: 1/2, 4/5\n(4) + (5) = 9, left: 9, 2, 1\n(4) - (5) = -1, left: -1, 2, 1\n(5) - (1) = 4, left: 4, 4, 2\n(2) + (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 + (5 - 1)))"}, {"input": "4 5 2 1\n", "output": "(5) * (1) = 5, left: 5, 4, 2\n(4) + (5) = 9, left: 9, 2\n(5) - (4) = 1, left: 1, 2\n(4) - (5) = -1, left: -1, 2\n(1) - (5) = -4, left: -4, 4, 2\n(-4) / (4) = -1, left: -1, 2\n(2) / (-1) = -2, left: -2\n(2) - (4) = -2, left: -2, -4\n(2) - (-4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 - (1 - 5)))"}, {"input": "4 5 2 1\n", "output": "(5) / (4) = 5/4, left: 5/4, 2, 1\n(4) * (5) = 20, left: 20, 2, 1\n(5) - (4) = 1, left: 1, 2, 1\n(2) - (1) = 1, left: 1, 1\n(4) / (5) = 4/5, left: 4/5, 2, 1\n(1) - (2) = -1, left: -1, 4/5\n(4/5) / (-1) = -4/5, left: -4/5\n(4) - (5) = -1, left: -1, 2, 1\n(2) - (-1) = 3, left: 3, 1\n(5) - (1) = 4, left: 4, 4, 2\n(2) * (4) = 8, left: 8, 4\n(8) - (4) = 4, left: 4\n(2) + (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 + (5 - 1)))"}, {"input": "4 5 2 1\n", "output": "(5) * (1) = 5, left: 5, 4, 2\n(4) / (2) = 2, left: 2, 5\n(5) / (2) = 5/2, left: 5/2\n(1) / (5) = 1/5, left: 1/5, 4, 2\n(2) - (4) = -2, left: -2, 1/5\n(5) + (1) = 6, left: 6, 4, 2\n(4) + (2) = 6, left: 6, 6\n(5) / (1) = 5, left: 5, 4, 2\n(4) - (2) = 2, left: 2, 5\n(5) / (4) = 5/4, left: 5/4, 2\n(5) - (1) = 4, left: 4, 4, 2\n(4) / (2) = 2, left: 2, 4\n(2) + (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (2 + (5 - 1)))"}, {"input": "4 5 2 1\n", "output": "(5) * (2) = 10, left: 10, 4, 1\n(10) - (4) = 6, left: 6, 1\n(2) - (5) = -3, left: -3, 4, 1\n(1) - (-3) = 4, left: 4, 4\n(4) * (4) = 16, left: 16\n(5) / (2) = 5/2, left: 5/2, 4, 1\n(4) - (5/2) = 3/2, left: 3/2, 1\n(5/2) / (1) = 5/2, left: 5/2, 4\n(2) / (5) = 2/5, left: 2/5, 4, 1\n(4) - (1) = 3, left: 3, 2/5\n(5) - (2) = 3, left: 3, 4, 1\n(5) + (2) = 7, left: 7, 4, 1\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((5 + 2) - 1))"}, {"input": "2 8 1 9\n", "output": "(2) - (8) = -6, left: -6, 1, 9\n(1) + (9) = 10, left: 10, -6\n(10) / (-6) = -5/3, left: -5/3\n(8) - (2) = 6, left: 6, 1, 9\n(6) / (9) = 2/3, left: 2/3, 1\n(2/3) / (1) = 2/3, left: 2/3\n(6) - (1) = 5, left: 5, 9\n(2) * (8) = 16, left: 16, 1, 9\n(9) - (1) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((2 * 8) + (9 - 1))"}, {"input": "2 8 1 9\n", "output": "(2) * (1) = 2, left: 2, 8, 9\n(2) - (8) = -6, left: -6, 9\n(1) / (2) = 1/2, left: 1/2, 8, 9\n(8) / (1/2) = 16, left: 16, 9\n(1) - (2) = -1, left: -1, 8, 9\n(9) / (-1) = -9, left: -9, 8\n(8) - (-9) = 17, left: 17\n(2) + (1) = 3, left: 3, 8, 9\n(9) / (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (2 + 1)))"}, {"input": "2 8 1 9\n", "output": "(8) / (1) = 8, left: 8, 2, 9\n(8) * (1) = 8, left: 8, 2, 9\n(8) + (1) = 9, left: 9, 2, 9\n(1) / (8) = 1/8, left: 1/8, 2, 9\n(9) / (1/8) = 72, left: 72, 2\n(1) - (2) = -1, left: -1, 8, 9\n(8) + (9) = 17, left: 17, -1\n(2) + (1) = 3, left: 3, 8, 9\n(8) / (3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (8 / (2 + 1)))"}, {"input": "2 8 1 9\n", "output": "(8) / (9) = 8/9, left: 8/9, 2, 1\n(1) * (8/9) = 8/9, left: 8/9, 2\n(8) - (9) = -1, left: -1, 2, 1\n(-1) - (1) = -2, left: -2, 2\n(-1) / (2) = -1/2, left: -1/2, 1\n(9) - (8) = 1, left: 1, 2, 1\n(8) * (9) = 72, left: 72, 2, 1\n(1) / (2) = 1/2, left: 1/2, 72\n(2) + (1) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((8 * 9) / (2 + 1))"}, {"input": "2 8 1 9\n", "output": "(9) / (1) = 9, left: 9, 2, 8\n(8) / (9) = 8/9, left: 8/9, 2\n(2) - (8/9) = 10/9, left: 10/9\n(9) / (8) = 9/8, left: 9/8, 2\n(8) - (2) = 6, left: 6, 9\n(9) - (1) = 8, left: 8, 2, 8\n(8) - (2) = 6, left: 6, 8\n(8) + (6) = 14, left: 14\n(2) * (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (2 * (9 - 1)))"}, {"input": "2 8 1 9\n", "output": "(2) - (8) = -6, left: -6, 1, 9\n(1) + (-6) = -5, left: -5, 9\n(-6) / (1) = -6, left: -6, 9\n(9) / (-6) = -3/2, left: -3/2\n(9) + (-6) = 3, left: 3, 1\n(8) - (2) = 6, left: 6, 1, 9\n(1) - (6) = -5, left: -5, 9\n(9) * (-5) = -45, left: -45\n(1) + (6) = 7, left: 7, 9\n(1) / (6) = 1/6, left: 1/6, 9\n(8) / (2) = 4, left: 4, 1, 9\n(2) * (8) = 16, left: 16, 1, 9\n(9) - (1) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((2 * 8) + (9 - 1))"}, {"input": "2 8 1 9\n", "output": "(2) * (1) = 2, left: 2, 8, 9\n(9) - (8) = 1, left: 1, 2\n(2) / (9) = 2/9, left: 2/9, 8\n(1) / (2) = 1/2, left: 1/2, 8, 9\n(8) + (9) = 17, left: 17, 1/2\n(9) + (1/2) = 19/2, left: 19/2, 8\n(2) - (1) = 1, left: 1, 8, 9\n(9) + (1) = 10, left: 10, 8\n(8) / (10) = 4/5, left: 4/5\n(1) - (2) = -1, left: -1, 8, 9\n(8) / (-1) = -8, left: -8, 9\n(2) + (1) = 3, left: 3, 8, 9\n(9) / (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (2 + 1)))"}, {"input": "2 8 1 9\n", "output": "(8) / (1) = 8, left: 8, 2, 9\n(9) - (8) = 1, left: 1, 2\n(8) - (1) = 7, left: 7, 2, 9\n(7) / (9) = 7/9, left: 7/9, 2\n(1) - (8) = -7, left: -7, 2, 9\n(2) / (9) = 2/9, left: 2/9, -7\n(1) / (8) = 1/8, left: 1/8, 2, 9\n(2) * (1) = 2, left: 2, 8, 9\n(8) / (9) = 8/9, left: 8/9, 2\n(1) - (2) = -1, left: -1, 8, 9\n(1) / (2) = 1/2, left: 1/2, 8, 9\n(2) + (1) = 3, left: 3, 8, 9\n(8) / (3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (8 / (2 + 1)))"}, {"input": "2 8 1 9\n", "output": "(8) / (9) = 8/9, left: 8/9, 2, 1\n(8/9) - (2) = -10/9, left: -10/9, 1\n(-10/9) - (1) = -19/9, left: -19/9\n(8) - (9) = -1, left: -1, 2, 1\n(9) - (8) = 1, left: 1, 2, 1\n(2) + (1) = 3, left: 3, 1\n(1) + (3) = 4, left: 4\n(2) * (1) = 2, left: 2, 1\n(1) / (1) = 1, left: 1, 2\n(1) / (1) = 1, left: 1, 2\n(2) / (1) = 2, left: 2\n(8) * (9) = 72, left: 72, 2, 1\n(2) + (1) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((8 * 9) / (2 + 1))"}, {"input": "2 8 1 10\n", "output": "(8) / (1) = 8, left: 8, 2, 10\n(8) / (10) = 4/5, left: 4/5, 2\n(2) - (10) = -8, left: -8, 8\n(8) * (1) = 8, left: 8, 2, 10\n(10) + (8) = 18, left: 18, 2\n(2) + (18) = 20, left: 20\n(8) - (10) = -2, left: -2, 2\n(1) - (8) = -7, left: -7, 2, 10\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "2 8 1 10\n", "output": "(2) - (10) = -8, left: -8, 8, 1\n(2) * (10) = 20, left: 20, 8, 1\n(1) / (2) = 1/2, left: 1/2, 8, 10\n(8) - (1/2) = 15/2, left: 15/2, 10\n(1) - (2) = -1, left: -1, 8, 10\n(-1) - (8) = -9, left: -9, 10\n(2) * (1) = 2, left: 2, 8, 10\n(1) - (8) = -7, left: -7, 2, 10\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "2 8 1 10\n", "output": "(10) / (8) = 5/4, left: 5/4, 2, 1\n(2) * (5/4) = 5/2, left: 5/2, 1\n(8) - (10) = -2, left: -2, 2, 1\n(8) * (10) = 80, left: 80, 2, 1\n(8) * (1) = 8, left: 8, 2, 10\n(8) / (1) = 8, left: 8, 2, 10\n(2) * (10) = 20, left: 20, 8\n(8) - (1) = 7, left: 7, 2, 10\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (8 - 1)))"}, {"input": "2 8 1 10\n", "output": "(10) / (1) = 10, left: 10, 2, 8\n(8) * (10) = 80, left: 80, 2\n(8) + (10) = 18, left: 18, 2, 1\n(2) + (18) = 20, left: 20, 1\n(8) / (2) = 4, left: 4, 1, 10\n(8) + (1) = 9, left: 9, 2, 10\n(2) / (10) = 1/5, left: 1/5, 9\n(1) - (8) = -7, left: -7, 2, 10\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "2 8 1 10\n", "output": "(2) * (10) = 20, left: 20, 8, 1\n(10) / (2) = 5, left: 5, 8, 1\n(5) - (1) = 4, left: 4, 8\n(8) / (10) = 4/5, left: 4/5, 2, 1\n(2) + (1) = 3, left: 3, 4/5\n(2) / (1) = 2, left: 2, 8, 10\n(8) * (2) = 16, left: 16, 10\n(1) - (8) = -7, left: -7, 2, 10\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "2 8 1 10\n", "output": "(2) - (10) = -8, left: -8, 8, 1\n(10) - (2) = 8, left: 8, 8, 1\n(8) - (1) = 7, left: 7, 8\n(10) / (2) = 5, left: 5, 8, 1\n(10) / (8) = 5/4, left: 5/4, 2, 1\n(1) - (2) = -1, left: -1, 8, 10\n(1) / (2) = 1/2, left: 1/2, 8, 10\n(2) - (1) = 1, left: 1, 8, 10\n(1) - (10) = -9, left: -9, 8\n(8) * (1) = 8, left: 8, 2, 10\n(1) / (8) = 1/8, left: 1/8, 2, 10\n(1) - (8) = -7, left: -7, 2, 10\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "2 8 1 10\n", "output": "(1) - (10) = -9, left: -9, 2, 8\n(2) - (-9) = 11, left: 11, 8\n(8) / (10) = 4/5, left: 4/5, 2, 1\n(10) / (8) = 5/4, left: 5/4, 2, 1\n(5/4) / (1) = 5/4, left: 5/4, 2\n(8) + (10) = 18, left: 18, 2, 1\n(10) / (2) = 5, left: 5, 8, 1\n(2) + (8) = 10, left: 10, 1, 10\n(10) / (1) = 10, left: 10, 10\n(1) / (2) = 1/2, left: 1/2, 8, 10\n(1) - (2) = -1, left: -1, 8, 10\n(1) - (8) = -7, left: -7, 2, 10\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "2 8 1 10\n", "output": "(10) / (8) = 5/4, left: 5/4, 2, 1\n(2) / (5/4) = 8/5, left: 8/5, 1\n(8) * (10) = 80, left: 80, 2, 1\n(8) + (10) = 18, left: 18, 2, 1\n(2) - (10) = -8, left: -8, 8, 1\n(-8) / (8) = -1, left: -1, 1\n(2) + (10) = 12, left: 12, 8, 1\n(2) * (10) = 20, left: 20, 8, 1\n(8) * (1) = 8, left: 8, 2, 10\n(8) / (1) = 8, left: 8, 2, 10\n(8) - (1) = 7, left: 7, 2, 10\n(2) / (10) = 1/5, left: 1/5, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (8 - 1)))"}, {"input": "2 8 1 10\n", "output": "(10) / (2) = 5, left: 5, 8, 1\n(8) + (5) = 13, left: 13, 1\n(1) - (13) = -12, left: -12\n(2) * (10) = 20, left: 20, 8, 1\n(1) / (2) = 1/2, left: 1/2, 8, 10\n(1) - (2) = -1, left: -1, 8, 10\n(2) - (1) = 1, left: 1, 8, 10\n(8) + (10) = 18, left: 18, 1\n(1) / (10) = 1/10, left: 1/10, 8\n(8) * (1) = 8, left: 8, 2, 10\n(2) * (10) = 20, left: 20, 8\n(1) - (8) = -7, left: -7, 2, 10\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "10 9 11 3\n", "output": "(10) * (9) = 90, left: 90, 11, 3\n(9) / (10) = 9/10, left: 9/10, 11, 3\n(11) + (3) = 14, left: 14, 9/10\n(10) + (9) = 19, left: 19, 11, 3\n(19) - (11) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((10 + 9) - 11))"}, {"input": "10 9 11 3\n", "output": "(9) / (10) = 9/10, left: 9/10, 11, 3\n(9/10) / (11) = 9/110, left: 9/110, 3\n(10) / (9) = 10/9, left: 10/9, 11, 3\n(10) + (9) = 19, left: 19, 11, 3\n(19) - (11) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((10 + 9) - 11))"}, {"input": "10 9 11 3\n", "output": "(10) - (3) = 7, left: 7, 9, 11\n(7) - (9) = -2, left: -2, 11\n(11) * (3) = 33, left: 33, 10, 9\n(10) * (9) = 90, left: 90, 33\n(3) - (11) = -8, left: -8, 10, 9\n(10) - (-8) = 18, left: 18, 9\n(11) + (3) = 14, left: 14, 10, 9\n(11) - (9) = 2, left: 2, 10, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (11 - 9)))"}, {"input": "10 9 11 3\n", "output": "(10) - (9) = 1, left: 1, 11, 3\n(11) + (3) = 14, left: 14, 1\n(1) / (14) = 1/14, left: 1/14\n(10) * (9) = 90, left: 90, 11, 3\n(90) / (11) = 90/11, left: 90/11, 3\n(9) / (10) = 9/10, left: 9/10, 11, 3\n(11) + (3) = 14, left: 14, 9/10\n(10) + (9) = 19, left: 19, 11, 3\n(19) - (11) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((10 + 9) - 11))"}, {"input": "10 9 11 3\n", "output": "(10) + (3) = 13, left: 13, 9, 11\n(11) - (13) = -2, left: -2, 9\n(11) + (13) = 24, left: 24, 9\n(10) - (3) = 7, left: 7, 9, 11\n(3) - (10) = -7, left: -7, 9, 11\n(-7) / (9) = -7/9, left: -7/9, 11\n(9) - (11) = -2, left: -2, -7\n(10) - (11) = -1, left: -1, 9, 3\n(9) + (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 + (10 - 11)))"}, {"input": "10 9 11 3\n", "output": "(10) - (9) = 1, left: 1, 11, 3\n(9) - (10) = -1, left: -1, 11, 3\n(3) / (-1) = -3, left: -3, 11\n(9) / (10) = 9/10, left: 9/10, 11, 3\n(10) / (9) = 10/9, left: 10/9, 11, 3\n(11) - (10/9) = 89/9, left: 89/9, 3\n(89/9) - (3) = 62/9, left: 62/9\n(10) + (9) = 19, left: 19, 11, 3\n(19) - (11) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((10 + 9) - 11))"}, {"input": "10 9 11 3\n", "output": "(10) - (9) = 1, left: 1, 11, 3\n(3) - (11) = -8, left: -8, 1\n(11) / (3) = 11/3, left: 11/3, 1\n(10) / (9) = 10/9, left: 10/9, 11, 3\n(9) / (10) = 9/10, left: 9/10, 11, 3\n(9/10) - (11) = -101/10, left: -101/10, 3\n(9/10) / (3) = 3/10, left: 3/10, 11\n(10) + (9) = 19, left: 19, 11, 3\n(19) - (11) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((10 + 9) - 11))"}, {"input": "2 2 12 9\n", "output": "(12) * (9) = 108, left: 108, 2, 2\n(2) / (2) = 1, left: 1, 108\n(9) / (12) = 3/4, left: 3/4, 2, 2\n(12) - (9) = 3, left: 3, 2, 2\n(2) / (3) = 2/3, left: 2/3, 2\n(2) - (9) = -7, left: -7, 2, 12\n(9) - (2) = 7, left: 7, 2, 12\n(2) * (9) = 18, left: 18, 2, 12\n(2) * (18) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((2 * (2 * 9)) - 12)"}, {"input": "2 2 12 9\n", "output": "(2) + (9) = 11, left: 11, 2, 12\n(2) * (12) = 24, left: 24, 11\n(11) / (24) = 11/24, left: 11/24\n(2) - (9) = -7, left: -7, 2, 12\n(2) - (-7) = 9, left: 9, 12\n(-7) / (12) = -7/12, left: -7/12, 2\n(12) - (-7) = 19, left: 19, 2\n(2) * (9) = 18, left: 18, 2, 12\n(2) * (18) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((2 * (2 * 9)) - 12)"}, {"input": "2 2 12 9\n", "output": "(2) - (2) = 0, left: 0, 12, 9\n(9) * (0) = 0, left: 0, 12\n(0) - (12) = -12, left: -12\n(2) - (2) = 0, left: 0, 12, 9\n(2) / (2) = 1, left: 1, 12, 9\n(9) + (1) = 10, left: 10, 12\n(1) / (12) = 1/12, left: 1/12, 9\n(2) * (2) = 4, left: 4, 12, 9\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (2 * 2)) - 12)"}, {"input": "2 2 12 9\n", "output": "(9) / (12) = 3/4, left: 3/4, 2, 2\n(2) / (3/4) = 8/3, left: 8/3, 2\n(12) - (9) = 3, left: 3, 2, 2\n(2) / (2) = 1, left: 1, 3\n(2) - (12) = -10, left: -10, 2, 9\n(2) * (9) = 18, left: 18, -10\n(12) - (2) = 10, left: 10, 2, 9\n(12) / (2) = 6, left: 6, 2, 9\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((12 / 2) + (2 * 9))"}, {"input": "2 2 12 9\n", "output": "(2) - (2) = 0, left: 0, 12, 9\n(12) + (0) = 12, left: 12, 9\n(9) * (12) = 108, left: 108\n(2) / (2) = 1, left: 1, 12, 9\n(12) + (1) = 13, left: 13, 9\n(9) - (1) = 8, left: 8, 12\n(2) + (2) = 4, left: 4, 12, 9\n(9) - (12) = -3, left: -3, 4\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (2 + 2)) - 12)"}, {"input": "2 2 12 9\n", "output": "(2) - (2) = 0, left: 0, 12, 9\n(2) - (2) = 0, left: 0, 12, 9\n(0) / (12) = 0, left: 0, 9\n(0) / (9) = 0, left: 0, 12\n(2) / (2) = 1, left: 1, 12, 9\n(1) - (12) = -11, left: -11, 9\n(9) - (-11) = 20, left: 20\n(9) - (1) = 8, left: 8, 12\n(2) / (2) = 1, left: 1, 12, 9\n(12) / (1) = 12, left: 12, 9\n(2) * (2) = 4, left: 4, 12, 9\n(12) * (9) = 108, left: 108, 4\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (2 * 2)) - 12)"}, {"input": "2 12 6 2\n", "output": "(2) / (12) = 1/6, left: 1/6, 2, 6\n(6) * (1/6) = 1, left: 1, 2\n(6) / (2) = 3, left: 3, 1/6\n(2) * (6) = 12, left: 12, 1/6\n(6) - (2) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((6 - 2) / (2 / 12))"}, {"input": "2 12 6 2\n", "output": "(6) - (2) = 4, left: 4, 12, 2\n(2) / (12) = 1/6, left: 1/6, 4\n(4) + (1/6) = 25/6, left: 25/6\n(1/6) - (4) = -23/6, left: -23/6\n(1/6) / (4) = 1/24, left: 1/24\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((6 - 2) / (2 / 12))"}, {"input": "2 12 6 2\n", "output": "(12) / (2) = 6, left: 6, 6, 2\n(6) - (2) = 4, left: 4, 6\n(6) + (4) = 10, left: 10\n(4) - (6) = -2, left: -2\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: ((12 / 2) * (6 - 2))"}, {"input": "2 12 6 2\n", "output": "(6) - (2) = 4, left: 4, 12, 2\n(2) / (12) = 1/6, left: 1/6, 4\n(4) + (1/6) = 25/6, left: 25/6\n(1/6) - (4) = -23/6, left: -23/6\n(1/6) / (4) = 1/24, left: 1/24\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((6 - 2) / (2 / 12))"}, {"input": "2 12 6 2\n", "output": "(12) / (2) = 6, left: 6, 6, 2\n(6) / (2) = 3, left: 3, 6\n(6) - (3) = 3, left: 3\n(6) + (3) = 9, left: 9\n(3) - (6) = -3, left: -3\n(6) / (3) = 2, left: 2\n(2) - (6) = -4, left: -4, 6\n(6) - (-4) = 10, left: 10\n(6) - (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((12 / 2) - 2))"}, {"input": "2 12 6 2\n", "output": "(2) / (12) = 1/6, left: 1/6, 2, 6\n(1/6) / (6) = 1/36, left: 1/36, 2\n(1/6) - (6) = -35/6, left: -35/6, 2\n(6) * (1/6) = 1, left: 1, 2\n(1) - (2) = -1, left: -1\n(2) / (6) = 1/3, left: 1/3, 1/6\n(6) / (2) = 3, left: 3, 1/6\n(1/6) + (3) = 19/6, left: 19/6\n(6) - (2) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((6 - 2) / (2 / 12))"}, {"input": "2 12 6 2\n", "output": "(6) / (2) = 3, left: 3, 12, 2\n(12) - (2) = 10, left: 10, 3\n(2) * (6) = 12, left: 12, 12, 2\n(2) / (12) = 1/6, left: 1/6, 12\n(12) - (1/6) = 71/6, left: 71/6\n(2) - (6) = -4, left: -4, 12, 2\n(2) / (6) = 1/3, left: 1/3, 12, 2\n(6) - (2) = 4, left: 4, 12, 2\n(4) / (2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((6 - 2) / 2))"}, {"input": "2 12 6 2\n", "output": "(12) / (2) = 6, left: 6, 6, 2\n(6) - (2) = 4, left: 4, 6\n(4) / (6) = 2/3, left: 2/3\n(6) - (4) = 2, left: 2\n(6) + (4) = 10, left: 10\n(4) - (6) = -2, left: -2\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: ((12 / 2) * (6 - 2))"}, {"input": "2 12 6 2\n", "output": "(6) - (2) = 4, left: 4, 12, 2\n(2) / (12) = 1/6, left: 1/6, 4\n(4) + (1/6) = 25/6, left: 25/6\n(1/6) - (4) = -23/6, left: -23/6\n(1/6) / (4) = 1/24, left: 1/24\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((6 - 2) / (2 / 12))"}, {"input": "2 12 6 2\n", "output": "(12) / (2) = 6, left: 6, 6, 2\n(6) - (2) = 4, left: 4, 6\n(4) / (6) = 2/3, left: 2/3\n(6) - (4) = 2, left: 2\n(6) + (4) = 10, left: 10\n(4) - (6) = -2, left: -2\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: ((12 / 2) * (6 - 2))"}, {"input": "2 12 6 2\n", "output": "(6) - (2) = 4, left: 4, 12, 2\n(2) / (12) = 1/6, left: 1/6, 4\n(4) + (1/6) = 25/6, left: 25/6\n(1/6) - (4) = -23/6, left: -23/6\n(1/6) / (4) = 1/24, left: 1/24\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((6 - 2) / (2 / 12))"}, {"input": "2 12 6 2\n", "output": "(12) / (2) = 6, left: 6, 6, 2\n(6) - (2) = 4, left: 4, 6\n(4) / (6) = 2/3, left: 2/3\n(6) - (4) = 2, left: 2\n(6) + (4) = 10, left: 10\n(4) - (6) = -2, left: -2\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: ((12 / 2) * (6 - 2))"}, {"input": "1 7 1 5\n", "output": "(7) * (5) = 35, left: 35, 1, 1\n(1) * (35) = 35, left: 35, 1\n(1) + (1) = 2, left: 2, 35\n(35) / (1) = 35, left: 35, 1\n(1) * (35) = 35, left: 35, 1\n(5) / (7) = 5/7, left: 5/7, 1, 1\n(1) + (5/7) = 12/7, left: 12/7, 1\n(7) + (5) = 12, left: 12, 1, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((7 + 5) * (1 + 1))"}, {"input": "1 7 1 5\n", "output": "(1) - (1) = 0, left: 0, 7, 5\n(7) * (5) = 35, left: 35, 0\n(35) - (0) = 35, left: 35\n(7) - (5) = 2, left: 2, 0\n(2) - (0) = 2, left: 2\n(5) + (0) = 5, left: 5, 7\n(5) / (7) = 5/7, left: 5/7\n(1) + (1) = 2, left: 2, 7, 5\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((1 + 1) * (7 + 5))"}, {"input": "1 7 1 5\n", "output": "(5) / (1) = 5, left: 5, 1, 7\n(1) / (5) = 1/5, left: 1/5, 1, 7\n(1/5) - (7) = -34/5, left: -34/5, 1\n(7) / (1) = 7, left: 7, 1/5\n(1/5) - (1) = -4/5, left: -4/5, 7\n(1) * (5) = 5, left: 5, 1, 7\n(1) + (5) = 6, left: 6, 1, 7\n(5) - (1) = 4, left: 4, 1, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((5 - 1) * (7 - 1))"}, {"input": "1 7 1 5\n", "output": "(7) / (5) = 7/5, left: 7/5, 1, 1\n(1) + (7/5) = 12/5, left: 12/5, 1\n(1) * (7/5) = 7/5, left: 7/5, 1\n(1) - (7/5) = -2/5, left: -2/5, 1\n(7) + (5) = 12, left: 12, 1, 1\n(12) - (1) = 11, left: 11, 1\n(1) / (1) = 1, left: 1, 12\n(1) - (1) = 0, left: 0, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((7 + 5) * (1 + 1))"}, {"input": "1 7 1 5\n", "output": "(1) * (1) = 1, left: 1, 7, 5\n(5) - (7) = -2, left: -2, 1\n(1) / (5) = 1/5, left: 1/5, 7\n(7) * (1/5) = 7/5, left: 7/5\n(5) * (1) = 5, left: 5, 7\n(7) + (5) = 12, left: 12\n(1) + (1) = 2, left: 2, 7, 5\n(5) / (7) = 5/7, left: 5/7, 2\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((1 + 1) * (7 + 5))"}, {"input": "1 7 1 5\n", "output": "(5) / (1) = 5, left: 5, 1, 7\n(7) - (1) = 6, left: 6, 5\n(1) / (5) = 1/5, left: 1/5, 1, 7\n(7) - (1/5) = 34/5, left: 34/5, 1\n(1) * (5) = 5, left: 5, 1, 7\n(7) - (5) = 2, left: 2, 1\n(7) * (5) = 35, left: 35, 1\n(1) + (5) = 6, left: 6, 1, 7\n(1) * (7) = 7, left: 7, 6\n(6) / (1) = 6, left: 6, 7\n(7) + (6) = 13, left: 13, 1\n(5) - (1) = 4, left: 4, 1, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((5 - 1) * (7 - 1))"}, {"input": "10 2 2 4\n", "output": "(10) - (2) = 8, left: 8, 2, 4\n(4) * (8) = 32, left: 32, 2\n(4) - (8) = -4, left: -4, 2\n(2) / (-4) = -1/2, left: -1/2\n(2) - (-4) = 6, left: 6\n(-4) / (2) = -2, left: -2\n(2) + (-4) = -2, left: -2\n(4) / (8) = 1/2, left: 1/2, 2\n(4) + (8) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (4 + (10 - 2)))"}, {"input": "10 2 2 4\n", "output": "(10) + (4) = 14, left: 14, 2, 2\n(14) / (2) = 7, left: 7, 2\n(7) / (2) = 7/2, left: 7/2\n(2) * (14) = 28, left: 28, 2\n(2) * (28) = 56, left: 56\n(28) / (2) = 14, left: 14\n(14) - (2) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) / (12) = 1/6, left: 1/6\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((10 + 4) - 2))"}, {"input": "10 2 2 4\n", "output": "(10) / (2) = 5, left: 5, 2, 4\n(5) - (2) = 3, left: 3, 4\n(4) - (5) = -1, left: -1, 2\n(2) - (4) = -2, left: -2, 5\n(5) / (-2) = -5/2, left: -5/2\n(2) * (4) = 8, left: 8, 5\n(10) - (2) = 8, left: 8, 2, 4\n(2) * (4) = 8, left: 8, 8\n(4) + (8) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (4 + (10 - 2)))"}, {"input": "10 2 2 4\n", "output": "(2) * (4) = 8, left: 8, 10, 2\n(10) / (8) = 5/4, left: 5/4, 2\n(5/4) / (2) = 5/8, left: 5/8\n(10) + (2) = 12, left: 12, 8\n(12) - (8) = 4, left: 4\n(10) - (2) = 8, left: 8, 8\n(2) / (10) = 1/5, left: 1/5, 8\n(2) - (4) = -2, left: -2, 10, 2\n(10) - (-2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 - (2 - 4)))"}, {"input": "10 2 2 4\n", "output": "(10) * (2) = 20, left: 20, 2, 4\n(2) + (4) = 6, left: 6, 20\n(20) + (6) = 26, left: 26\n(20) - (4) = 16, left: 16, 2\n(20) / (2) = 10, left: 10, 4\n(2) - (20) = -18, left: -18, 4\n(20) - (2) = 18, left: 18, 4\n(10) + (2) = 12, left: 12, 2, 4\n(4) * (12) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 * (10 + 2)) / 2)"}, {"input": "8 5 5 12\n", "output": "(8) - (5) = 3, left: 3, 5, 12\n(12) - (3) = 9, left: 9, 5\n(12) * (3) = 36, left: 36, 5\n(36) / (5) = 36/5, left: 36/5\n(3) / (12) = 1/4, left: 1/4, 5\n(5) + (3) = 8, left: 8, 12\n(12) - (8) = 4, left: 4\n(12) + (8) = 20, left: 20\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (8 - 5)))"}, {"input": "8 5 5 12\n", "output": "(5) + (12) = 17, left: 17, 8, 5\n(5) * (12) = 60, left: 60, 8, 5\n(8) - (60) = -52, left: -52, 5\n(12) - (5) = 7, left: 7, 8, 5\n(8) / (5) = 8/5, left: 8/5, 7\n(12) / (5) = 12/5, left: 12/5, 8, 5\n(5) + (12/5) = 37/5, left: 37/5, 8\n(8) - (5) = 3, left: 3, 5, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (8 - 5)))"}, {"input": "8 5 5 12\n", "output": "(5) - (8) = -3, left: -3, 5, 12\n(12) + (-3) = 9, left: 9, 5\n(12) / (-3) = -4, left: -4, 5\n(12) - (-3) = 15, left: 15, 5\n(5) * (12) = 60, left: 60, -3\n(12) - (5) = 7, left: 7, -3\n(5) / (-3) = -5/3, left: -5/3, 12\n(12) - (-5/3) = 41/3, left: 41/3\n(5) + (-3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 + (5 - 8)))"}, {"input": "8 5 5 12\n", "output": "(12) / (5) = 12/5, left: 12/5, 8, 5\n(12/5) / (8) = 3/10, left: 3/10, 5\n(12/5) / (5) = 12/25, left: 12/25, 8\n(5) + (12) = 17, left: 17, 8, 5\n(5) * (12) = 60, left: 60, 8, 5\n(8) - (60) = -52, left: -52, 5\n(5) / (8) = 5/8, left: 5/8, 5, 12\n(8) - (5) = 3, left: 3, 5, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (8 - 5)))"}, {"input": "8 5 5 12\n", "output": "(5) / (12) = 5/12, left: 5/12, 8, 5\n(8) - (5) = 3, left: 3, 5/12\n(5) + (12) = 17, left: 17, 8, 5\n(5) * (12) = 60, left: 60, 8, 5\n(5) - (5) = 0, left: 0, 8, 12\n(0) / (12) = 0, left: 0, 8\n(5) - (5) = 0, left: 0, 8, 12\n(5) + (5) = 10, left: 10, 8, 12\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((5 + 5) - 8))"}, {"input": "8 3 6 6\n", "output": "(6) / (8) = 3/4, left: 3/4, 3, 6\n(3/4) - (6) = -21/4, left: -21/4, 3\n(-21/4) - (3) = -33/4, left: -33/4\n(6) - (3/4) = 21/4, left: 21/4, 3\n(3/4) / (6) = 1/8, left: 1/8, 3\n(3) / (1/8) = 24, left: 24\nreach 24! expression: (3 / ((6 / 8) / 6))"}, {"input": "8 3 6 6\n", "output": "(6) / (8) = 3/4, left: 3/4, 3, 6\n(3/4) - (6) = -21/4, left: -21/4, 3\n(3) - (-21/4) = 33/4, left: 33/4\n(6) - (3/4) = 21/4, left: 21/4, 3\n(3) / (21/4) = 4/7, left: 4/7\n(21/4) / (3) = 7/4, left: 7/4\n(3) - (21/4) = -9/4, left: -9/4\n(3/4) / (6) = 1/8, left: 1/8, 3\n(1/8) / (3) = 1/24, left: 1/24\n(3) / (1/8) = 24, left: 24\nreach 24! expression: (3 / ((6 / 8) / 6))"}, {"input": "8 3 6 6\n", "output": "(8) * (6) = 48, left: 48, 3, 6\n(48) / (6) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) + (8) = 11, left: 11\n(3) - (8) = -5, left: -5\n(8) - (3) = 5, left: 5\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((8 * 6) / 6))"}, {"input": "8 3 6 6\n", "output": "(3) * (6) = 18, left: 18, 8, 6\n(18) - (8) = 10, left: 10, 6\n(6) * (10) = 60, left: 60\n(8) / (18) = 4/9, left: 4/9, 6\n(18) / (8) = 9/4, left: 9/4, 6\n(8) + (18) = 26, left: 26, 6\n(8) - (18) = -10, left: -10, 6\n(6) * (-10) = -60, left: -60\n(8) * (18) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((8 * (3 * 6)) / 6)"}, {"input": "8 3 6 6\n", "output": "(3) / (8) = 3/8, left: 3/8, 6, 6\n(8) / (3) = 8/3, left: 8/3, 6, 6\n(6) / (8/3) = 9/4, left: 9/4, 6\n(6) - (6) = 0, left: 0, 8/3\n(8) + (3) = 11, left: 11, 6, 6\n(6) * (6) = 36, left: 36, 11\n(36) - (11) = 25, left: 25\n(8) * (3) = 24, left: 24, 6, 6\n(6) * (24) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((6 * (8 * 3)) / 6)"}, {"input": "8 3 6 6\n", "output": "(6) - (6) = 0, left: 0, 8, 3\n(0) - (3) = -3, left: -3, 8\n(8) - (-3) = 11, left: 11\n(3) * (0) = 0, left: 0, 8\n(8) - (0) = 8, left: 8\n(0) / (8) = 0, left: 0\n(3) + (0) = 3, left: 3, 8\n(8) + (3) = 11, left: 11\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (3 + (6 - 6)))"}, {"input": "8 3 6 6\n", "output": "(6) - (6) = 0, left: 0, 8, 3\n(0) - (3) = -3, left: -3, 8\n(8) * (-3) = -24, left: -24\n(8) / (-3) = -8/3, left: -8/3\n(3) * (0) = 0, left: 0, 8\n(0) - (8) = -8, left: -8\n(8) - (0) = 8, left: 8\n(8) * (0) = 0, left: 0\n(3) + (0) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(8) + (3) = 11, left: 11\n(8) / (3) = 8/3, left: 8/3\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (3 + (6 - 6)))"}, {"input": "8 3 6 6\n", "output": "(8) * (6) = 48, left: 48, 3, 6\n(48) / (6) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) + (8) = 11, left: 11\n(3) - (8) = -5, left: -5\n(8) - (3) = 5, left: 5\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((8 * 6) / 6))"}, {"input": "8 3 6 6\n", "output": "(8) * (6) = 48, left: 48, 3, 6\n(48) / (6) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) + (8) = 11, left: 11\n(3) - (8) = -5, left: -5\n(8) - (3) = 5, left: 5\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((8 * 6) / 6))"}, {"input": "2 10 3 2\n", "output": "(2) + (2) = 4, left: 4, 10, 3\n(4) - (3) = 1, left: 1, 10\n(2) / (2) = 1, left: 1, 10, 3\n(2) - (3) = -1, left: -1, 2, 10\n(10) * (-1) = -10, left: -10, 2\n(2) / (10) = 1/5, left: 1/5, -1\n(3) / (2) = 3/2, left: 3/2, 2, 10\n(10) + (3) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(2) / (2) = 1, left: 1, 10, 3\n(1) - (10) = -9, left: -9, 3\n(-9) - (3) = -12, left: -12\n(10) + (3) = 13, left: 13, 1\n(10) * (2) = 20, left: 20, 2, 3\n(2) + (10) = 12, left: 12, 3, 2\n(3) - (2) = 1, left: 1, 12\n(10) + (3) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(10) + (2) = 12, left: 12, 2, 3\n(2) - (10) = -8, left: -8, 2, 3\n(10) - (2) = 8, left: 8, 2, 3\n(10) * (2) = 20, left: 20, 2, 3\n(10) / (3) = 10/3, left: 10/3, 2, 2\n(3) / (10) = 3/10, left: 3/10, 2, 2\n(3/10) - (2) = -17/10, left: -17/10, 2\n(10) + (3) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(2) / (10) = 1/5, left: 1/5, 2, 3\n(2) * (3) = 6, left: 6, 10, 2\n(6) / (2) = 3, left: 3, 10\n(10) / (3) = 10/3, left: 10/3\n(2) / (3) = 2/3, left: 2/3, 10, 2\n(2/3) - (10) = -28/3, left: -28/3, 2\n(2) + (3) = 5, left: 5, 10, 2\n(10) + (3) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(2) / (2) = 1, left: 1, 10, 3\n(2) / (10) = 1/5, left: 1/5, 3, 2\n(2) + (3) = 5, left: 5, 10, 2\n(10) / (2) = 5, left: 5, 5\n(3) - (2) = 1, left: 1, 10, 2\n(3) * (2) = 6, left: 6, 2, 10\n(2) - (3) = -1, left: -1, 2, 10\n(10) + (3) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(10) - (2) = 8, left: 8, 2, 3\n(3) + (8) = 11, left: 11, 2\n(2) - (11) = -9, left: -9\n(10) / (2) = 5, left: 5, 2, 3\n(3) / (2) = 3/2, left: 3/2, 5\n(10) - (2) = 8, left: 8, 3, 2\n(2) + (8) = 10, left: 10, 3\n(2) - (10) = -8, left: -8, 3, 2\n(2) + (10) = 12, left: 12, 3, 2\n(3) / (2) = 3/2, left: 3/2, 10, 2\n(2) + (3) = 5, left: 5, 10, 2\n(10) + (3) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(2) / (2) = 1, left: 1, 10, 3\n(2) + (2) = 4, left: 4, 10, 3\n(10) / (4) = 5/2, left: 5/2, 3\n(3) - (5/2) = 1/2, left: 1/2\n(2) - (2) = 0, left: 0, 10, 3\n(3) - (10) = -7, left: -7, 0\n(2) / (2) = 1, left: 1, 10, 3\n(3) + (2) = 5, left: 5, 2, 10\n(2) - (3) = -1, left: -1, 2, 10\n(-1) / (2) = -1/2, left: -1/2, 10\n(2) / (3) = 2/3, left: 2/3, 2, 10\n(10) + (3) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(10) - (2) = 8, left: 8, 3, 2\n(3) - (8) = -5, left: -5, 2\n(2) + (10) = 12, left: 12, 3, 2\n(3) + (12) = 15, left: 15, 2\n(2) - (3) = -1, left: -1, 12\n(2) - (10) = -8, left: -8, 2, 3\n(2) - (3) = -1, left: -1, 10, 2\n(2) - (10) = -8, left: -8, -1\n(2) * (3) = 6, left: 6, 10, 2\n(3) + (2) = 5, left: 5, 2, 10\n(10) * (3) = 30, left: 30, 2, 2\n(10) + (3) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "6 13 6 12\n", "output": "(6) / (6) = 1, left: 1, 13, 12\n(13) - (12) = 1, left: 1, 1\n(13) + (12) = 25, left: 25, 1\n(1) / (25) = 1/25, left: 1/25\n(1) * (25) = 25, left: 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (6 / 6))"}, {"input": "6 13 6 12\n", "output": "(13) - (6) = 7, left: 7, 6, 12\n(6) * (12) = 72, left: 72, 13, 6\n(12) / (6) = 2, left: 2, 13, 6\n(13) * (6) = 78, left: 78, 2\n(2) - (78) = -76, left: -76\n(6) - (12) = -6, left: -6, 6, 13\n(6) / (12) = 1/2, left: 1/2, 6, 13\n(13) + (12) = 25, left: 25, 6, 6\n(6) / (6) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (6 / 6))"}, {"input": "6 13 6 12\n", "output": "(6) / (13) = 6/13, left: 6/13, 6, 12\n(13) - (6) = 7, left: 7, 6, 12\n(13) / (6) = 13/6, left: 13/6, 6, 12\n(6) * (12) = 72, left: 72, 13/6\n(6) * (13) = 78, left: 78, 6, 12\n(6) + (6) = 12, left: 12, 13, 12\n(12) / (12) = 1, left: 1, 13\n(6) / (6) = 1, left: 1, 13, 12\n(13) + (12) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (6 / 6))"}, {"input": "6 13 6 12\n", "output": "(6) / (6) = 1, left: 1, 13, 12\n(13) - (12) = 1, left: 1, 1\n(1) / (1) = 1, left: 1\n(1) - (1) = 0, left: 0\n(13) + (12) = 25, left: 25, 1\n(1) + (25) = 26, left: 26\n(25) / (1) = 25, left: 25\n(1) / (25) = 1/25, left: 1/25\n(1) * (25) = 25, left: 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (6 / 6))"}, {"input": "6 13 6 12\n", "output": "(6) - (13) = -7, left: -7, 6, 12\n(6) / (12) = 1/2, left: 1/2, -7\n(13) - (6) = 7, left: 7, 6, 12\n(6) + (12) = 18, left: 18, 6, 13\n(18) / (13) = 18/13, left: 18/13, 6\n(6) * (12) = 72, left: 72, 6, 13\n(6) + (6) = 12, left: 12, 13, 12\n(6) / (6) = 1, left: 1, 13, 12\n(13) + (12) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (6 / 6))"}, {"input": "6 13 6 12\n", "output": "(13) - (6) = 7, left: 7, 6, 12\n(6) + (13) = 19, left: 19, 6, 12\n(6) + (12) = 18, left: 18, 19\n(12) / (6) = 2, left: 2, 19\n(6) - (13) = -7, left: -7, 6, 12\n(6) / (13) = 6/13, left: 6/13, 6, 12\n(6) / (6) = 1, left: 1, 13, 12\n(1) / (12) = 1/12, left: 1/12, 13\n(1) - (12) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((6 / 6) - 12))"}, {"input": "3 5 2 7\n", "output": "(5) / (3) = 5/3, left: 5/3, 2, 7\n(5/3) - (7) = -16/3, left: -16/3, 2\n(5) - (3) = 2, left: 2, 2, 7\n(7) + (2) = 9, left: 9, 2\n(3) / (5) = 3/5, left: 3/5, 2, 7\n(7) / (3/5) = 35/3, left: 35/3, 2\n(3) + (5) = 8, left: 8, 2, 7\n(3) * (5) = 15, left: 15, 2, 7\n(7) + (15) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (7 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(5) * (7) = 35, left: 35, 3, 2\n(2) * (35) = 70, left: 70, 3\n(5) / (7) = 5/7, left: 5/7, 3, 2\n(3) * (5/7) = 15/7, left: 15/7, 2\n(5) - (7) = -2, left: -2, 3, 2\n(2) - (3) = -1, left: -1, -2\n(3) / (2) = 3/2, left: 3/2, -2\n(3) * (5) = 15, left: 15, 2, 7\n(7) + (15) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (7 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(3) * (5) = 15, left: 15, 2, 7\n(2) * (15) = 30, left: 30, 7\n(30) / (7) = 30/7, left: 30/7\n(30) - (7) = 23, left: 23\n(7) + (30) = 37, left: 37\n(7) / (30) = 7/30, left: 7/30\n(7) * (30) = 210, left: 210\n(7) - (30) = -23, left: -23\n(2) + (15) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (2 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(3) + (7) = 10, left: 10, 5, 2\n(10) / (5) = 2, left: 2, 2\n(10) - (5) = 5, left: 5, 2\n(3) - (7) = -4, left: -4, 5, 2\n(5) * (2) = 10, left: 10, -4\n(-4) + (10) = 6, left: 6\n(7) / (3) = 7/3, left: 7/3, 5, 2\n(3) * (7) = 21, left: 21, 5, 2\n(21) - (2) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((3 * 7) - 2))"}, {"input": "3 5 2 7\n", "output": "(3) / (2) = 3/2, left: 3/2, 5, 7\n(3/2) - (5) = -7/2, left: -7/2, 7\n(7) / (-7/2) = -2, left: -2\n(3) + (2) = 5, left: 5, 5, 7\n(5) / (7) = 5/7, left: 5/7, 3, 2\n(7) / (2) = 7/2, left: 7/2, 3, 5\n(7/2) - (5) = -3/2, left: -3/2, 3\n(2) + (7) = 9, left: 9, 3, 5\n(3) * (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((2 + 7) + (3 * 5))"}, {"input": "3 5 2 7\n", "output": "(3) * (5) = 15, left: 15, 2, 7\n(2) * (15) = 30, left: 30, 7\n(30) / (7) = 30/7, left: 30/7\n(30) - (7) = 23, left: 23\n(7) + (30) = 37, left: 37\n(7) / (30) = 7/30, left: 7/30\n(7) * (30) = 210, left: 210\n(7) - (30) = -23, left: -23\n(2) + (15) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (2 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(3) * (2) = 6, left: 6, 5, 7\n(3) - (2) = 1, left: 1, 5, 7\n(7) * (1) = 7, left: 7, 5\n(7) + (1) = 8, left: 8, 5\n(5) * (8) = 40, left: 40\n(2) - (3) = -1, left: -1, 5, 7\n(5) / (7) = 5/7, left: 5/7, 3, 2\n(7) - (5) = 2, left: 2, 3, 2\n(3) + (2) = 5, left: 5, 2\n(5) - (7) = -2, left: -2, 3, 2\n(7) / (2) = 7/2, left: 7/2, 3, 5\n(2) + (7) = 9, left: 9, 3, 5\n(3) * (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((2 + 7) + (3 * 5))"}, {"input": "3 5 2 7\n", "output": "(5) / (3) = 5/3, left: 5/3, 2, 7\n(2) + (7) = 9, left: 9, 5/3\n(5/3) + (9) = 32/3, left: 32/3\n(5) - (3) = 2, left: 2, 2, 7\n(7) + (2) = 9, left: 9, 2\n(3) / (5) = 3/5, left: 3/5, 2, 7\n(3) + (5) = 8, left: 8, 2, 7\n(2) + (7) = 9, left: 9, 8\n(2) - (8) = -6, left: -6, 7\n(7) / (8) = 7/8, left: 7/8, 2\n(2) + (7/8) = 23/8, left: 23/8\n(3) * (5) = 15, left: 15, 2, 7\n(7) + (15) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (7 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(7) - (5) = 2, left: 2, 3, 2\n(2) / (3) = 2/3, left: 2/3, 2\n(2/3) - (2) = -4/3, left: -4/3\n(3) + (2) = 5, left: 5, 2\n(5) * (7) = 35, left: 35, 3, 2\n(5) / (7) = 5/7, left: 5/7, 3, 2\n(5/7) / (2) = 5/14, left: 5/14, 3\n(7) / (5) = 7/5, left: 7/5, 3, 2\n(7/5) - (3) = -8/5, left: -8/5, 2\n(5) - (7) = -2, left: -2, 3, 2\n(-2) / (2) = -1, left: -1, 3\n(3) * (5) = 15, left: 15, 2, 7\n(7) + (15) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (7 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(3) * (5) = 15, left: 15, 2, 7\n(2) * (15) = 30, left: 30, 7\n(30) / (7) = 30/7, left: 30/7\n(30) - (7) = 23, left: 23\n(7) + (30) = 37, left: 37\n(7) / (30) = 7/30, left: 7/30\n(7) * (30) = 210, left: 210\n(7) - (30) = -23, left: -23\n(2) + (15) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (2 + (3 * 5)))"}, {"input": "3 11 2 2\n", "output": "(3) - (2) = 1, left: 1, 11, 2\n(2) - (1) = 1, left: 1, 11\n(11) + (1) = 12, left: 12\n(2) + (1) = 3, left: 3, 11\n(11) - (3) = 8, left: 8\n(3) - (11) = -8, left: -8\n(2) * (1) = 2, left: 2, 11\n(1) / (11) = 1/11, left: 1/11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (3 - 2)))"}, {"input": "3 11 2 2\n", "output": "(3) + (2) = 5, left: 5, 11, 2\n(5) - (11) = -6, left: -6, 2\n(3) * (2) = 6, left: 6, 11, 2\n(2) - (6) = -4, left: -4, 11\n(2) - (3) = -1, left: -1, 11, 2\n(2) / (11) = 2/11, left: 2/11, -1\n(2/11) / (-1) = -2/11, left: -2/11\n(2/11) - (-1) = 13/11, left: 13/11\n(11) - (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 - (2 - 3)))"}, {"input": "3 11 2 2\n", "output": "(3) + (11) = 14, left: 14, 2, 2\n(2) - (14) = -12, left: -12, 2\n(-12) - (2) = -14, left: -14\n(2) * (-12) = -24, left: -24\n(2) + (-12) = -10, left: -10\n(2) / (-12) = -1/6, left: -1/6\n(-12) / (2) = -6, left: -6\n(14) - (2) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((3 + 11) - 2))"}, {"input": "3 11 2 2\n", "output": "(2) / (2) = 1, left: 1, 3, 11\n(2) / (2) = 1, left: 1, 3, 11\n(2) - (2) = 0, left: 0, 3, 11\n(3) / (2) = 3/2, left: 3/2, 11, 2\n(3) + (2) = 5, left: 5, 11, 2\n(11) / (5) = 11/5, left: 11/5, 2\n(3) * (2) = 6, left: 6, 11, 2\n(2) - (3) = -1, left: -1, 11, 2\n(11) - (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 - (2 - 3)))"}, {"input": "3 11 2 2\n", "output": "(2) * (2) = 4, left: 4, 3, 11\n(2) / (2) = 1, left: 1, 3, 11\n(2) - (2) = 0, left: 0, 3, 11\n(0) - (3) = -3, left: -3, 11\n(3) * (2) = 6, left: 6, 11, 2\n(6) / (2) = 3, left: 3, 11\n(11) / (3) = 11/3, left: 11/3\n(2) - (3) = -1, left: -1, 11, 2\n(11) - (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 - (2 - 3)))"}, {"input": "3 11 2 2\n", "output": "(3) + (11) = 14, left: 14, 2, 2\n(2) - (14) = -12, left: -12, 2\n(-12) - (2) = -14, left: -14\n(2) - (-12) = 14, left: 14\n(2) * (-12) = -24, left: -24\n(2) + (-12) = -10, left: -10\n(2) / (-12) = -1/6, left: -1/6\n(-12) / (2) = -6, left: -6\n(14) - (2) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((3 + 11) - 2))"}, {"input": "3 11 2 2\n", "output": "(2) * (2) = 4, left: 4, 3, 11\n(2) / (2) = 1, left: 1, 3, 11\n(2) + (2) = 4, left: 4, 3, 11\n(2) / (2) = 1, left: 1, 3, 11\n(2) - (2) = 0, left: 0, 3, 11\n(11) * (0) = 0, left: 0, 3\n(3) - (0) = 3, left: 3\n(2) - (2) = 0, left: 0, 3, 11\n(3) * (0) = 0, left: 0, 11\n(3) * (2) = 6, left: 6, 11, 2\n(2) / (6) = 1/3, left: 1/3, 11\n(2) - (3) = -1, left: -1, 11, 2\n(11) - (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 - (2 - 3)))"}, {"input": "3 11 2 2\n", "output": "(2) / (2) = 1, left: 1, 3, 11\n(1) / (3) = 1/3, left: 1/3, 11\n(2) / (2) = 1, left: 1, 3, 11\n(2) * (2) = 4, left: 4, 3, 11\n(3) + (11) = 14, left: 14, 4\n(4) * (14) = 56, left: 56\n(3) / (2) = 3/2, left: 3/2, 11, 2\n(2) / (3) = 2/3, left: 2/3, 11, 2\n(11) + (2) = 13, left: 13, 2/3\n(3) + (2) = 5, left: 5, 11, 2\n(3) * (2) = 6, left: 6, 11, 2\n(2) - (3) = -1, left: -1, 11, 2\n(11) - (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 - (2 - 3)))"}, {"input": "3 11 2 2\n", "output": "(3) + (11) = 14, left: 14, 2, 2\n(2) - (14) = -12, left: -12, 2\n(-12) - (2) = -14, left: -14\n(2) - (-12) = 14, left: 14\n(2) * (-12) = -24, left: -24\n(2) + (-12) = -10, left: -10\n(2) / (-12) = -1/6, left: -1/6\n(-12) / (2) = -6, left: -6\n(14) - (2) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((3 + 11) - 2))"}, {"input": "12 2 9 10\n", "output": "(12) / (2) = 6, left: 6, 9, 10\n(12) - (2) = 10, left: 10, 9, 10\n(9) / (10) = 9/10, left: 9/10, 10\n(12) * (2) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 * 2) * (10 - 9))"}, {"input": "12 2 9 10\n", "output": "(12) + (10) = 22, left: 22, 2, 9\n(12) / (10) = 6/5, left: 6/5, 2, 9\n(10) / (12) = 5/6, left: 5/6, 2, 9\n(9) + (5/6) = 59/6, left: 59/6, 2\n(12) - (10) = 2, left: 2, 2, 9\n(9) / (10) = 9/10, left: 9/10, 12, 2\n(12) / (2) = 6, left: 6, 9/10\n(10) - (9) = 1, left: 1, 12, 2\n(2) / (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (2 / (10 - 9)))"}, {"input": "12 2 9 10\n", "output": "(12) / (2) = 6, left: 6, 9, 10\n(2) - (12) = -10, left: -10, 9, 10\n(-10) / (9) = -10/9, left: -10/9, 10\n(12) + (2) = 14, left: 14, 9, 10\n(2) / (12) = 1/6, left: 1/6, 9, 10\n(9) - (1/6) = 53/6, left: 53/6, 10\n(53/6) / (10) = 53/60, left: 53/60\n(12) * (2) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 * 2) * (10 - 9))"}, {"input": "12 2 9 10\n", "output": "(12) / (2) = 6, left: 6, 9, 10\n(9) * (6) = 54, left: 54, 10\n(9) + (6) = 15, left: 15, 10\n(10) - (6) = 4, left: 4, 9\n(9) + (4) = 13, left: 13\n(10) / (6) = 5/3, left: 5/3, 9\n(12) - (2) = 10, left: 10, 9, 10\n(12) * (2) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 * 2) / (10 - 9))"}, {"input": "12 2 9 10\n", "output": "(10) - (12) = -2, left: -2, 2, 9\n(12) + (10) = 22, left: 22, 2, 9\n(10) / (12) = 5/6, left: 5/6, 2, 9\n(5/6) - (2) = -7/6, left: -7/6, 9\n(12) - (10) = 2, left: 2, 2, 9\n(12) + (2) = 14, left: 14, 9, 10\n(9) + (14) = 23, left: 23, 10\n(12) * (2) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 * 2) * (10 - 9))"}, {"input": "12 2 9 10\n", "output": "(10) - (12) = -2, left: -2, 2, 9\n(12) * (10) = 120, left: 120, 2, 9\n(9) - (120) = -111, left: -111, 2\n(2) / (12) = 1/6, left: 1/6, 9, 10\n(12) / (2) = 6, left: 6, 9, 10\n(9) - (6) = 3, left: 3, 10\n(10) + (3) = 13, left: 13\n(12) * (2) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 * 2) / (10 - 9))"}, {"input": "4 3 8 5\n", "output": "(4) - (8) = -4, left: -4, 3, 5\n(3) * (5) = 15, left: 15, -4\n(4) / (8) = 1/2, left: 1/2, 3, 5\n(5) + (1/2) = 11/2, left: 11/2, 3\n(8) - (4) = 4, left: 4, 3, 5\n(3) * (5) = 15, left: 15, 4\n(5) / (4) = 5/4, left: 5/4, 3\n(4) * (8) = 32, left: 32, 3, 5\n(32) - (5) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: (((4 * 8) - 5) - 3)"}, {"input": "4 3 8 5\n", "output": "(8) - (3) = 5, left: 5, 4, 5\n(5) + (5) = 10, left: 10, 4\n(4) * (5) = 20, left: 20, 5\n(4) - (5) = -1, left: -1, 5\n(8) / (3) = 8/3, left: 8/3, 4, 5\n(4) + (8/3) = 20/3, left: 20/3, 5\n(5) / (4) = 5/4, left: 5/4, 8/3\n(5/4) - (8/3) = -17/12, left: -17/12\n(4) + (5) = 9, left: 9, 8/3\n(8/3) * (9) = 24, left: 24\nreach 24! expression: ((8 / 3) * (4 + 5))"}, {"input": "4 3 8 5\n", "output": "(8) - (4) = 4, left: 4, 3, 5\n(5) / (4) = 5/4, left: 5/4, 3\n(3) / (5/4) = 12/5, left: 12/5\n(4) - (8) = -4, left: -4, 3, 5\n(5) - (-4) = 9, left: 9, 3\n(4) + (8) = 12, left: 12, 3, 5\n(12) - (3) = 9, left: 9, 5\n(5) * (12) = 60, left: 60, 3\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((4 + 8) * (5 - 3))"}, {"input": "4 3 8 5\n", "output": "(8) / (4) = 2, left: 2, 3, 5\n(3) - (5) = -2, left: -2, 2\n(-2) / (2) = -1, left: -1\n(3) + (5) = 8, left: 8, 2\n(4) * (8) = 32, left: 32, 3, 5\n(3) * (5) = 15, left: 15, 32\n(15) / (32) = 15/32, left: 15/32\n(3) / (5) = 3/5, left: 3/5, 32\n(3) + (5) = 8, left: 8, 32\n(32) - (8) = 24, left: 24\nreach 24! expression: ((4 * 8) - (3 + 5))"}, {"input": "4 3 8 5\n", "output": "(5) - (3) = 2, left: 2, 4, 8\n(2) / (4) = 1/2, left: 1/2, 8\n(8) * (1/2) = 4, left: 4\n(4) * (2) = 8, left: 8, 8\n(4) + (2) = 6, left: 6, 8\n(6) - (8) = -2, left: -2\n(8) * (6) = 48, left: 48\n(4) + (8) = 12, left: 12, 2\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (4 + 8))"}, {"input": "4 3 8 5\n", "output": "(8) - (4) = 4, left: 4, 3, 5\n(4) / (5) = 4/5, left: 4/5, 3\n(8) / (4) = 2, left: 2, 3, 5\n(3) / (2) = 3/2, left: 3/2, 5\n(2) - (5) = -3, left: -3, 3\n(4) - (8) = -4, left: -4, 3, 5\n(3) + (-4) = -1, left: -1, 5\n(4) + (8) = 12, left: 12, 3, 5\n(3) - (12) = -9, left: -9, 5\n(3) * (12) = 36, left: 36, 5\n(5) / (3) = 5/3, left: 5/3, 12\n(12) - (5/3) = 31/3, left: 31/3\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((4 + 8) * (5 - 3))"}, {"input": "2 9 9 3\n", "output": "(2) * (9) = 18, left: 18, 9, 3\n(3) / (18) = 1/6, left: 1/6, 9\n(1/6) - (9) = -53/6, left: -53/6\n(1/6) / (9) = 1/54, left: 1/54\n(9) + (1/6) = 55/6, left: 55/6\n(9) / (1/6) = 54, left: 54\n(18) - (3) = 15, left: 15, 9\n(15) - (9) = 6, left: 6\n(9) * (15) = 135, left: 135\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((2 * 9) - 3))"}, {"input": "2 9 9 3\n", "output": "(9) - (2) = 7, left: 7, 9, 3\n(3) / (7) = 3/7, left: 3/7, 9\n(9) / (3/7) = 21, left: 21\n(9) * (3) = 27, left: 27, 7\n(3) / (9) = 1/3, left: 1/3, 7\n(1/3) / (7) = 1/21, left: 1/21\n(9) / (7) = 9/7, left: 9/7, 3\n(2) * (9) = 18, left: 18, 9, 3\n(3) - (9) = -6, left: -6, 18\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((2 * 9) - (3 - 9))"}, {"input": "2 9 9 3\n", "output": "(9) - (3) = 6, left: 6, 2, 9\n(6) / (2) = 3, left: 3, 9\n(6) - (2) = 4, left: 4, 9\n(2) - (6) = -4, left: -4, 9\n(2) + (6) = 8, left: 8, 9\n(9) - (6) = 3, left: 3, 2\n(2) + (3) = 5, left: 5\n(9) - (2) = 7, left: 7, 6\n(2) * (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((9 - 3) + (2 * 9))"}, {"input": "2 9 9 3\n", "output": "(3) - (2) = 1, left: 1, 9, 9\n(9) / (9) = 1, left: 1, 1\n(9) + (9) = 18, left: 18, 1\n(9) - (1) = 8, left: 8, 9\n(9) + (1) = 10, left: 10, 9\n(1) - (9) = -8, left: -8, 9\n(2) * (3) = 6, left: 6, 9, 9\n(9) * (6) = 54, left: 54, 9\n(9) + (6) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (9 + (2 * 3)))"}, {"input": "2 9 9 3\n", "output": "(2) - (9) = -7, left: -7, 9, 3\n(9) * (-7) = -63, left: -63, 3\n(9) / (-7) = -9/7, left: -9/7, 3\n(3) + (-9/7) = 12/7, left: 12/7\n(9) + (-7) = 2, left: 2, 3\n(2) + (9) = 11, left: 11, 9, 3\n(3) - (9) = -6, left: -6, 11\n(9) * (11) = 99, left: 99, 3\n(3) * (11) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((3 * (2 + 9)) - 9)"}, {"input": "2 9 9 3\n", "output": "(3) - (2) = 1, left: 1, 9, 9\n(9) / (1) = 9, left: 9, 9\n(9) + (1) = 10, left: 10, 9\n(9) - (10) = -1, left: -1\n(9) - (1) = 8, left: 8, 9\n(9) + (1) = 10, left: 10, 9\n(10) / (9) = 10/9, left: 10/9\n(1) / (9) = 1/9, left: 1/9, 9\n(2) * (3) = 6, left: 6, 9, 9\n(9) / (6) = 3/2, left: 3/2, 9\n(9) - (3/2) = 15/2, left: 15/2\n(9) * (6) = 54, left: 54, 9\n(9) + (6) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (9 + (2 * 3)))"}, {"input": "9 5 6 9\n", "output": "(9) / (5) = 9/5, left: 9/5, 6, 9\n(9) / (9/5) = 5, left: 5, 6\n(6) - (5) = 1, left: 1\n(9) + (5) = 14, left: 14, 6, 9\n(5) / (9) = 5/9, left: 5/9, 6, 9\n(6) * (5/9) = 10/3, left: 10/3, 9\n(9) / (10/3) = 27/10, left: 27/10\n(9) - (6) = 3, left: 3, 9, 5\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (9 - 6)))"}, {"input": "9 5 6 9\n", "output": "(5) * (6) = 30, left: 30, 9, 9\n(5) - (6) = -1, left: -1, 9, 9\n(6) - (5) = 1, left: 1, 9, 9\n(9) - (1) = 8, left: 8, 9\n(6) / (5) = 6/5, left: 6/5, 9, 9\n(9) - (9) = 0, left: 0, 6/5\n(5) + (6) = 11, left: 11, 9, 9\n(9) / (9) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (9 / 9)))"}, {"input": "9 5 6 9\n", "output": "(9) + (9) = 18, left: 18, 5, 6\n(5) + (18) = 23, left: 23, 6\n(23) - (6) = 17, left: 17\n(5) * (18) = 90, left: 90, 6\n(18) / (6) = 3, left: 3, 5\n(3) - (5) = -2, left: -2\n(9) / (9) = 1, left: 1, 5, 6\n(5) / (1) = 5, left: 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (9 / 9)))"}, {"input": "9 5 6 9\n", "output": "(6) / (9) = 2/3, left: 2/3, 9, 5\n(5) - (9) = -4, left: -4, 2/3\n(-4) - (2/3) = -14/3, left: -14/3\n(5) / (2/3) = 15/2, left: 15/2, 9\n(2/3) / (5) = 2/15, left: 2/15, 9\n(6) - (9) = -3, left: -3, 9, 5\n(9) / (-3) = -3, left: -3, 5\n(5) + (-3) = 2, left: 2, 9\n(5) * (-3) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 * (6 - 9)))"}, {"input": "9 5 6 9\n", "output": "(5) + (6) = 11, left: 11, 9, 9\n(9) - (11) = -2, left: -2, 9\n(5) / (6) = 5/6, left: 5/6, 9, 9\n(6) / (5) = 6/5, left: 6/5, 9, 9\n(6) - (5) = 1, left: 1, 9, 9\n(1) - (9) = -8, left: -8, 9\n(9) - (6) = 3, left: 3, 9, 5\n(9) + (5) = 14, left: 14, 3\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (9 - 6)))"}, {"input": "9 5 6 9\n", "output": "(5) * (6) = 30, left: 30, 9, 9\n(6) - (5) = 1, left: 1, 9, 9\n(9) - (9) = 0, left: 0, 1\n(6) / (5) = 6/5, left: 6/5, 9, 9\n(9) - (6/5) = 39/5, left: 39/5, 9\n(6/5) / (9) = 2/15, left: 2/15, 9\n(6/5) / (9) = 2/15, left: 2/15, 9\n(5) / (6) = 5/6, left: 5/6, 9, 9\n(5) + (6) = 11, left: 11, 9, 9\n(9) - (9) = 0, left: 0, 11\n(0) / (11) = 0, left: 0\n(9) / (9) = 1, left: 1, 5, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (9 / 9)))"}, {"input": "9 5 6 9\n", "output": "(9) / (5) = 9/5, left: 9/5, 6, 9\n(9) - (5) = 4, left: 4, 6, 9\n(9) - (4) = 5, left: 5, 6\n(5) / (9) = 5/9, left: 5/9, 6, 9\n(9) * (5) = 45, left: 45, 6, 9\n(45) / (6) = 15/2, left: 15/2, 9\n(6) / (45) = 2/15, left: 2/15, 9\n(6) / (9) = 2/3, left: 2/3, 9, 5\n(2/3) - (5) = -13/3, left: -13/3, 9\n(9) - (6) = 3, left: 3, 9, 5\n(9) - (5) = 4, left: 4, 3\n(5) - (9) = -4, left: -4, 3\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (9 - 6)))"}, {"input": "8 3 6 3\n", "output": "(3) - (6) = -3, left: -3, 8, 3\n(8) * (3) = 24, left: 24, -3\n(-3) / (24) = -1/8, left: -1/8\n(6) / (3) = 2, left: 2, 8, 3\n(3) - (8) = -5, left: -5, 2\n(3) * (2) = 6, left: 6, 8\n(3) / (6) = 1/2, left: 1/2, 8, 3\n(6) + (3) = 9, left: 9, 8, 3\n(3) / (8) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: ((6 + 3) / (3 / 8))"}, {"input": "8 3 6 3\n", "output": "(6) / (8) = 3/4, left: 3/4, 3, 3\n(3) / (3) = 1, left: 1, 3/4\n(8) * (6) = 48, left: 48, 3, 3\n(8) / (6) = 4/3, left: 4/3, 3, 3\n(8) - (6) = 2, left: 2, 3, 3\n(6) - (8) = -2, left: -2, 3, 3\n(3) - (8) = -5, left: -5, 3, 6\n(3) / (8) = 3/8, left: 3/8, 3, 6\n(3) + (6) = 9, left: 9, 3/8\n(9) / (3/8) = 24, left: 24\nreach 24! expression: ((3 + 6) / (3 / 8))"}, {"input": "8 3 6 3\n", "output": "(8) / (6) = 4/3, left: 4/3, 3, 3\n(6) / (8) = 3/4, left: 3/4, 3, 3\n(8) + (6) = 14, left: 14, 3, 3\n(3) / (14) = 3/14, left: 3/14, 3\n(8) - (6) = 2, left: 2, 3, 3\n(8) * (6) = 48, left: 48, 3, 3\n(48) / (3) = 16, left: 16, 3\n(6) + (3) = 9, left: 9, 8, 3\n(8) * (9) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((8 * (6 + 3)) / 3)"}, {"input": "8 3 6 3\n", "output": "(3) + (3) = 6, left: 6, 8, 6\n(6) - (6) = 0, left: 0, 8\n(3) - (3) = 0, left: 0, 8, 6\n(3) - (3) = 0, left: 0, 8, 6\n(8) - (0) = 8, left: 8, 6\n(8) / (6) = 4/3, left: 4/3, 0\n(4/3) - (0) = 4/3, left: 4/3\n(3) * (3) = 9, left: 9, 8, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((3 * 3) - 6))"}, {"input": "8 3 6 3\n", "output": "(8) + (3) = 11, left: 11, 3, 6\n(8) * (3) = 24, left: 24, 3, 6\n(8) - (3) = 5, left: 5, 3, 6\n(3) + (5) = 8, left: 8, 6\n(6) - (3) = 3, left: 3, 5\n(3) - (8) = -5, left: -5, 3, 6\n(-5) - (3) = -8, left: -8, 6\n(8) / (3) = 8/3, left: 8/3, 3, 6\n(3) + (6) = 9, left: 9, 8/3\n(8/3) * (9) = 24, left: 24\nreach 24! expression: ((8 / 3) * (3 + 6))"}, {"input": "8 3 6 3\n", "output": "(8) / (6) = 4/3, left: 4/3, 3, 3\n(6) - (8) = -2, left: -2, 3, 3\n(3) + (-2) = 1, left: 1, 3\n(3) + (-2) = 1, left: 1, 3\n(8) + (6) = 14, left: 14, 3, 3\n(8) - (6) = 2, left: 2, 3, 3\n(2) - (3) = -1, left: -1, 3\n(3) + (2) = 5, left: 5, 3\n(2) / (3) = 2/3, left: 2/3, 3\n(3) / (2/3) = 9/2, left: 9/2\n(8) * (6) = 48, left: 48, 3, 3\n(6) + (3) = 9, left: 9, 8, 3\n(8) * (9) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((8 * (6 + 3)) / 3)"}, {"input": "8 3 6 3\n", "output": "(8) + (3) = 11, left: 11, 3, 6\n(6) - (3) = 3, left: 3, 11\n(11) - (6) = 5, left: 5, 3\n(8) * (3) = 24, left: 24, 3, 6\n(24) / (3) = 8, left: 8, 6\n(3) + (24) = 27, left: 27, 6\n(3) * (6) = 18, left: 18, 24\n(8) - (3) = 5, left: 5, 3, 6\n(5) - (6) = -1, left: -1, 3\n(3) - (8) = -5, left: -5, 3, 6\n(6) * (-5) = -30, left: -30, 3\n(8) / (3) = 8/3, left: 8/3, 3, 6\n(3) + (6) = 9, left: 9, 8/3\n(8/3) * (9) = 24, left: 24\nreach 24! expression: ((8 / 3) * (3 + 6))"}, {"input": "8 3 6 3\n", "output": "(3) + (3) = 6, left: 6, 8, 6\n(6) - (8) = -2, left: -2, 6\n(6) / (-2) = -3, left: -3\n(-2) - (6) = -8, left: -8\n(8) * (6) = 48, left: 48, 6\n(3) - (3) = 0, left: 0, 8, 6\n(8) - (0) = 8, left: 8, 6\n(6) / (8) = 3/4, left: 3/4, 0\n(3) - (3) = 0, left: 0, 8, 6\n(6) - (8) = -2, left: -2, 0\n(0) * (-2) = 0, left: 0\n(3) * (3) = 9, left: 9, 8, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((3 * 3) - 6))"}, {"input": "8 3 6 3\n", "output": "(6) - (3) = 3, left: 3, 8, 3\n(3) - (8) = -5, left: -5, 3\n(3) - (6) = -3, left: -3, 8, 3\n(8) / (3) = 8/3, left: 8/3, -3\n(8) * (-3) = -24, left: -24, 3\n(6) / (3) = 2, left: 2, 8, 3\n(3) / (8) = 3/8, left: 3/8, 2\n(8) - (2) = 6, left: 6, 3\n(3) + (6) = 9, left: 9\n(3) - (2) = 1, left: 1, 8\n(3) / (6) = 1/2, left: 1/2, 8, 3\n(6) + (3) = 9, left: 9, 8, 3\n(3) / (8) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: ((6 + 3) / (3 / 8))"}, {"input": "8 3 6 3\n", "output": "(6) / (8) = 3/4, left: 3/4, 3, 3\n(3) + (3/4) = 15/4, left: 15/4, 3\n(8) + (6) = 14, left: 14, 3, 3\n(3) - (14) = -11, left: -11, 3\n(8) * (6) = 48, left: 48, 3, 3\n(3) - (3) = 0, left: 0, 48\n(3) / (3) = 1, left: 1, 48\n(6) - (8) = -2, left: -2, 3, 3\n(3) - (8) = -5, left: -5, 3, 6\n(3) + (6) = 9, left: 9, -5\n(6) / (-5) = -6/5, left: -6/5, 3\n(3) / (8) = 3/8, left: 3/8, 3, 6\n(3) + (6) = 9, left: 9, 3/8\n(9) / (3/8) = 24, left: 24\nreach 24! expression: ((3 + 6) / (3 / 8))"}, {"input": "5 1 2 2\n", "output": "(5) / (1) = 5, left: 5, 2, 2\n(2) / (2) = 1, left: 1, 5\n(5) / (1) = 5, left: 5\n(2) * (2) = 4, left: 4, 5\n(5) - (4) = 1, left: 1\n(5) / (2) = 5/2, left: 5/2, 2\n(5) + (1) = 6, left: 6, 2, 2\n(2) - (6) = -4, left: -4, 2\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 * (5 + 1)))"}, {"input": "5 1 2 2\n", "output": "(2) / (1) = 2, left: 2, 5, 2\n(1) - (2) = -1, left: -1, 5, 2\n(1) * (2) = 2, left: 2, 5, 2\n(5) / (2) = 5/2, left: 5/2, 2\n(2) - (1) = 1, left: 1, 5, 2\n(1) / (5) = 1/5, left: 1/5, 2, 2\n(2) * (1/5) = 2/5, left: 2/5, 2\n(5) + (1) = 6, left: 6, 2, 2\n(2) * (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (2 * 2))"}, {"input": "5 1 2 2\n", "output": "(2) * (2) = 4, left: 4, 5, 1\n(5) / (4) = 5/4, left: 5/4, 1\n(5/4) / (1) = 5/4, left: 5/4\n(4) / (5) = 4/5, left: 4/5, 1\n(1) / (4/5) = 5/4, left: 5/4\n(5) - (4) = 1, left: 1, 1\n(5) + (4) = 9, left: 9, 1\n(1) - (5) = -4, left: -4, 4\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 * 2) * (5 + 1))"}, {"input": "5 1 2 2\n", "output": "(2) / (1) = 2, left: 2, 5, 2\n(2) - (1) = 1, left: 1, 5, 2\n(1) + (2) = 3, left: 3, 5, 2\n(5) + (2) = 7, left: 7, 1, 2\n(2) / (5) = 2/5, left: 2/5, 1, 2\n(1) - (2/5) = 3/5, left: 3/5, 2\n(5) * (2) = 10, left: 10, 1, 2\n(2) + (2) = 4, left: 4, 5, 1\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 + 2) * (5 + 1))"}, {"input": "5 1 2 2\n", "output": "(1) + (2) = 3, left: 3, 5, 2\n(5) / (2) = 5/2, left: 5/2, 1, 2\n(5/2) - (1) = 3/2, left: 3/2, 2\n(2) / (3/2) = 4/3, left: 4/3\n(5) + (2) = 7, left: 7, 1, 2\n(5) * (2) = 10, left: 10, 1, 2\n(5) / (2) = 5/2, left: 5/2, 1, 2\n(5) + (1) = 6, left: 6, 2, 2\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 * (5 + 1)))"}, {"input": "5 1 2 2\n", "output": "(1) - (2) = -1, left: -1, 5, 2\n(1) + (2) = 3, left: 3, 5, 2\n(5) - (3) = 2, left: 2, 2\n(2) / (1) = 2, left: 2, 5, 2\n(5) + (2) = 7, left: 7, 2\n(5) / (2) = 5/2, left: 5/2, 1, 2\n(5) * (2) = 10, left: 10, 1, 2\n(2) / (5) = 2/5, left: 2/5, 1, 2\n(5) / (2) = 5/2, left: 5/2, 1, 2\n(1) / (5) = 1/5, left: 1/5, 2, 2\n(1/5) - (2) = -9/5, left: -9/5, 2\n(5) + (1) = 6, left: 6, 2, 2\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 * (5 + 1)))"}, {"input": "5 1 2 2\n", "output": "(5) / (1) = 5, left: 5, 2, 2\n(2) - (2) = 0, left: 0, 5\n(5) + (0) = 5, left: 5\n(5) / (2) = 5/2, left: 5/2, 2\n(2) * (5) = 10, left: 10, 2\n(2) / (5) = 2/5, left: 2/5, 2\n(2) + (2/5) = 12/5, left: 12/5\n(2) * (5) = 10, left: 10, 2\n(10) / (2) = 5, left: 5\n(5) + (1) = 6, left: 6, 2, 2\n(2) - (6) = -4, left: -4, 2\n(6) / (2) = 3, left: 3, 2\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 * (5 + 1)))"}, {"input": "5 1 2 2\n", "output": "(1) - (2) = -1, left: -1, 5, 2\n(2) - (1) = 1, left: 1, 5, 2\n(5) + (1) = 6, left: 6, 2\n(2) - (1) = 1, left: 1, 5, 2\n(1) / (2) = 1/2, left: 1/2, 5, 2\n(1) + (2) = 3, left: 3, 5, 2\n(3) - (2) = 1, left: 1, 5\n(5) * (2) = 10, left: 10, 1, 2\n(2) / (5) = 2/5, left: 2/5, 1, 2\n(2) - (2) = 0, left: 0, 5, 1\n(1) / (5) = 1/5, left: 1/5, 0\n(2) + (2) = 4, left: 4, 5, 1\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 + 2) * (5 + 1))"}, {"input": "5 1 2 2\n", "output": "(1) - (2) = -1, left: -1, 5, 2\n(-1) / (5) = -1/5, left: -1/5, 2\n(2) + (-1/5) = 9/5, left: 9/5\n(2) - (1) = 1, left: 1, 5, 2\n(1) + (2) = 3, left: 3, 5, 2\n(5) + (2) = 7, left: 7, 3\n(1) - (5) = -4, left: -4, 2, 2\n(-4) - (2) = -6, left: -6, 2\n(2) * (-4) = -8, left: -8, 2\n(2) / (-8) = -1/4, left: -1/4\n(1) / (5) = 1/5, left: 1/5, 2, 2\n(5) + (1) = 6, left: 6, 2, 2\n(2) * (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (2 * 2))"}, {"input": "5 8 2 2\n", "output": "(5) * (2) = 10, left: 10, 8, 2\n(10) / (2) = 5, left: 5, 8\n(5) / (2) = 5/2, left: 5/2, 8, 2\n(8) - (2) = 6, left: 6, 5/2\n(2) / (5) = 2/5, left: 2/5, 8, 2\n(8) - (5) = 3, left: 3, 2, 2\n(2) - (2) = 0, left: 0, 3\n(5) + (8) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(8) + (2) = 10, left: 10, 5, 2\n(5) + (10) = 15, left: 15, 2\n(8) * (2) = 16, left: 16, 5, 2\n(5) + (16) = 21, left: 21, 2\n(2) / (5) = 2/5, left: 2/5, 8, 2\n(8) / (5) = 8/5, left: 8/5, 2, 2\n(5) / (8) = 5/8, left: 5/8, 2, 2\n(5) + (8) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(2) / (8) = 1/4, left: 1/4, 5, 2\n(8) - (2) = 6, left: 6, 5, 2\n(8) / (2) = 4, left: 4, 5, 2\n(4) - (2) = 2, left: 2, 5\n(2) - (8) = -6, left: -6, 5, 2\n(8) * (2) = 16, left: 16, 5, 2\n(5) - (2) = 3, left: 3, 16\n(5) + (8) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(2) - (8) = -6, left: -6, 5, 2\n(5) * (2) = 10, left: 10, 8, 2\n(2) / (5) = 2/5, left: 2/5, 8, 2\n(2/5) - (8) = -38/5, left: -38/5, 2\n(5) / (2) = 5/2, left: 5/2, 8, 2\n(2) - (5) = -3, left: -3, 8, 2\n(5) - (2) = 3, left: 3, 8, 2\n(5) + (8) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(2) - (8) = -6, left: -6, 5, 2\n(8) + (2) = 10, left: 10, 5, 2\n(5) - (10) = -5, left: -5, 2\n(2) - (-5) = 7, left: 7\n(8) * (2) = 16, left: 16, 5, 2\n(5) / (8) = 5/8, left: 5/8, 2, 2\n(5) * (8) = 40, left: 40, 2, 2\n(5) + (8) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(8) - (2) = 6, left: 6, 5, 2\n(8) + (2) = 10, left: 10, 5, 2\n(10) / (2) = 5, left: 5, 5\n(5) * (2) = 10, left: 10, 10\n(10) * (10) = 100, left: 100\n(8) / (2) = 4, left: 4, 5, 2\n(2) - (5) = -3, left: -3, 4\n(2) + (4) = 6, left: 6, 5\n(2) - (8) = -6, left: -6, 5, 2\n(8) * (2) = 16, left: 16, 5, 2\n(5) * (2) = 10, left: 10, 16\n(5) + (8) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(5) * (2) = 10, left: 10, 8, 2\n(2) * (10) = 20, left: 20, 8\n(5) / (2) = 5/2, left: 5/2, 8, 2\n(2) - (8) = -6, left: -6, 5/2\n(-6) - (5/2) = -17/2, left: -17/2\n(2) - (5) = -3, left: -3, 8, 2\n(8) - (-3) = 11, left: 11, 2\n(5) - (2) = 3, left: 3, 8, 2\n(3) - (2) = 1, left: 1, 8\n(5) / (8) = 5/8, left: 5/8, 2, 2\n(8) - (5) = 3, left: 3, 2, 2\n(5) + (8) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(8) + (2) = 10, left: 10, 5, 2\n(5) - (10) = -5, left: -5, 2\n(2) + (-5) = -3, left: -3\n(2) / (5) = 2/5, left: 2/5, 8, 2\n(2) - (5) = -3, left: -3, 8, 2\n(2) - (8) = -6, left: -6, 5, 2\n(8) + (2) = 10, left: 10, 5, 2\n(8) - (2) = 6, left: 6, 5, 2\n(5) - (8) = -3, left: -3, 2, 2\n(5) / (8) = 5/8, left: 5/8, 2, 2\n(5/8) - (2) = -11/8, left: -11/8, 2\n(5) + (8) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(5) * (2) = 10, left: 10, 8, 2\n(10) - (8) = 2, left: 2, 2\n(2) / (5) = 2/5, left: 2/5, 8, 2\n(2) * (2/5) = 4/5, left: 4/5, 8\n(5) - (2) = 3, left: 3, 8, 2\n(3) / (8) = 3/8, left: 3/8, 2\n(2) - (5) = -3, left: -3, 8, 2\n(5) * (2) = 10, left: 10, 8, 2\n(8) - (5) = 3, left: 3, 2, 2\n(2) - (3) = -1, left: -1, 2\n(2) / (3) = 2/3, left: 2/3, 2\n(5) + (8) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(2) - (8) = -6, left: -6, 5, 2\n(5) + (-6) = -1, left: -1, 2\n(2) * (-1) = -2, left: -2\n(8) + (2) = 10, left: 10, 5, 2\n(5) - (10) = -5, left: -5, 2\n(2) - (-5) = 7, left: 7\n(2) / (8) = 1/4, left: 1/4, 5, 2\n(8) / (5) = 8/5, left: 8/5, 2, 2\n(5) * (8) = 40, left: 40, 2, 2\n(2) / (2) = 1, left: 1, 40\n(40) * (1) = 40, left: 40\n(5) + (8) = 13, left: 13, 2, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "3 13 2 5\n", "output": "(2) / (5) = 2/5, left: 2/5, 3, 13\n(13) - (2/5) = 63/5, left: 63/5, 3\n(2) - (5) = -3, left: -3, 3, 13\n(2) * (5) = 10, left: 10, 3, 13\n(5) / (2) = 5/2, left: 5/2, 3, 13\n(2) / (13) = 2/13, left: 2/13, 3, 5\n(3) - (5) = -2, left: -2, 2/13\n(13) * (2) = 26, left: 26, 3, 5\n(3) + (26) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((3 + (13 * 2)) - 5)"}, {"input": "3 13 2 5\n", "output": "(3) / (13) = 3/13, left: 3/13, 2, 5\n(5) - (2) = 3, left: 3, 3, 13\n(2) - (5) = -3, left: -3, 3, 13\n(13) * (-3) = -39, left: -39, 3\n(3) - (-3) = 6, left: 6, 13\n(3) / (2) = 3/2, left: 3/2, 13, 5\n(5) * (3/2) = 15/2, left: 15/2, 13\n(3) * (2) = 6, left: 6, 13, 5\n(13) + (5) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((3 * 2) + (13 + 5))"}, {"input": "3 13 2 5\n", "output": "(3) * (5) = 15, left: 15, 13, 2\n(13) * (15) = 195, left: 195, 2\n(13) - (2) = 11, left: 11, 15\n(2) / (13) = 2/13, left: 2/13, 15\n(13) + (2) = 15, left: 15, 15\n(2) * (15) = 30, left: 30, 13\n(3) - (5) = -2, left: -2, 13, 2\n(2) * (-2) = -4, left: -4, 13\n(13) * (2) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((3 - 5) + (13 * 2))"}, {"input": "3 13 2 5\n", "output": "(3) + (5) = 8, left: 8, 13, 2\n(13) - (8) = 5, left: 5, 2\n(13) / (8) = 13/8, left: 13/8, 2\n(5) / (3) = 5/3, left: 5/3, 13, 2\n(13) - (5/3) = 34/3, left: 34/3, 2\n(13) / (2) = 13/2, left: 13/2, 5/3\n(5) - (3) = 2, left: 2, 13, 2\n(2) / (2) = 1, left: 1, 13\n(13) * (2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * 2) - (5 - 3))"}, {"input": "3 13 2 5\n", "output": "(13) * (5) = 65, left: 65, 3, 2\n(2) * (65) = 130, left: 130, 3\n(13) - (5) = 8, left: 8, 3, 2\n(3) - (2) = 1, left: 1, 8\n(13) / (5) = 13/5, left: 13/5, 3, 2\n(5) - (13) = -8, left: -8, 3, 2\n(13) + (5) = 18, left: 18, 3, 2\n(2) * (18) = 36, left: 36, 3\n(3) * (2) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((13 + 5) + (3 * 2))"}, {"input": "7 8 6 2\n", "output": "(8) / (6) = 4/3, left: 4/3, 7, 2\n(8) + (6) = 14, left: 14, 7, 2\n(7) + (2) = 9, left: 9, 14\n(6) / (8) = 3/4, left: 3/4, 7, 2\n(6) - (8) = -2, left: -2, 7, 2\n(7) / (2) = 7/2, left: 7/2, -2\n(8) - (6) = 2, left: 2, 7, 2\n(6) - (7) = -1, left: -1, 8, 2\n(2) - (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 - (6 - 7)))"}, {"input": "7 8 6 2\n", "output": "(7) / (8) = 7/8, left: 7/8, 6, 2\n(2) * (7/8) = 7/4, left: 7/4, 6\n(7/8) / (2) = 7/16, left: 7/16, 6\n(2) / (7/8) = 16/7, left: 16/7, 6\n(7/8) - (2) = -9/8, left: -9/8, 6\n(6) + (2) = 8, left: 8, 7/8\n(6) + (7/8) = 55/8, left: 55/8, 2\n(7) + (8) = 15, left: 15, 6, 2\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (7 + 8)) - 6)"}, {"input": "7 8 6 2\n", "output": "(2) / (7) = 2/7, left: 2/7, 8, 6\n(6) - (2/7) = 40/7, left: 40/7, 8\n(7) - (2) = 5, left: 5, 8, 6\n(8) - (6) = 2, left: 2, 5\n(7) * (2) = 14, left: 14, 8, 6\n(8) - (14) = -6, left: -6, 6\n(6) * (-6) = -36, left: -36\n(7) + (2) = 9, left: 9, 8, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 2) - 6))"}, {"input": "7 8 6 2\n", "output": "(2) / (8) = 1/4, left: 1/4, 7, 6\n(8) * (2) = 16, left: 16, 7, 6\n(2) - (8) = -6, left: -6, 7, 6\n(-6) / (7) = -6/7, left: -6/7, 6\n(8) + (2) = 10, left: 10, 7, 6\n(7) - (6) = 1, left: 1, 10\n(6) * (2) = 12, left: 12, 7, 8\n(2) - (6) = -4, left: -4, 7, 8\n(7) + (-4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 + (2 - 6)))"}, {"input": "7 8 6 2\n", "output": "(7) / (6) = 7/6, left: 7/6, 8, 2\n(2) * (7/6) = 7/3, left: 7/3, 8\n(2) - (8) = -6, left: -6, 7/6\n(7/6) / (-6) = -7/36, left: -7/36\n(6) / (7) = 6/7, left: 6/7, 8, 2\n(2) - (6/7) = 8/7, left: 8/7, 8\n(7) * (6) = 42, left: 42, 8, 2\n(6) - (7) = -1, left: -1, 8, 2\n(2) - (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 - (6 - 7)))"}, {"input": "7 8 6 2\n", "output": "(2) / (8) = 1/4, left: 1/4, 7, 6\n(7) / (1/4) = 28, left: 28, 6\n(6) * (28) = 168, left: 168\n(8) / (2) = 4, left: 4, 7, 6\n(2) - (8) = -6, left: -6, 7, 6\n(7) - (-6) = 13, left: 13, 6\n(2) / (6) = 1/3, left: 1/3, 7, 8\n(7) * (8) = 56, left: 56, 1/3\n(56) / (1/3) = 168, left: 168\n(7) + (1/3) = 22/3, left: 22/3, 8\n(2) - (6) = -4, left: -4, 7, 8\n(8) / (-4) = -2, left: -2, 7\n(7) + (-4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 + (2 - 6)))"}, {"input": "7 8 6 2\n", "output": "(8) * (6) = 48, left: 48, 7, 2\n(7) + (2) = 9, left: 9, 48\n(8) / (6) = 4/3, left: 4/3, 7, 2\n(8) + (6) = 14, left: 14, 7, 2\n(2) / (14) = 1/7, left: 1/7, 7\n(6) / (8) = 3/4, left: 3/4, 7, 2\n(6) - (8) = -2, left: -2, 7, 2\n(7) + (2) = 9, left: 9, -2\n(7) - (-2) = 9, left: 9, 2\n(8) - (6) = 2, left: 2, 7, 2\n(6) - (7) = -1, left: -1, 8, 2\n(2) + (-1) = 1, left: 1, 8\n(2) - (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 - (6 - 7)))"}, {"input": "1 9 13 3\n", "output": "(3) - (1) = 2, left: 2, 9, 13\n(13) - (9) = 4, left: 4, 2\n(2) + (4) = 6, left: 6\n(9) + (13) = 22, left: 22, 2\n(22) / (2) = 11, left: 11\n(2) + (22) = 24, left: 24\nreach 24! expression: ((3 - 1) + (9 + 13))"}, {"input": "1 9 13 3\n", "output": "(1) - (9) = -8, left: -8, 13, 3\n(-8) - (3) = -11, left: -11, 13\n(13) + (-11) = 2, left: 2\n(-11) - (13) = -24, left: -24\n(-11) / (13) = -11/13, left: -11/13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((1 - 9) - 3))"}, {"input": "1 9 13 3\n", "output": "(9) / (13) = 9/13, left: 9/13, 1, 3\n(3) / (1) = 3, left: 3, 9/13\n(13) - (9) = 4, left: 4, 1, 3\n(13) / (9) = 13/9, left: 13/9, 1, 3\n(13/9) - (3) = -14/9, left: -14/9, 1\n(9) - (13) = -4, left: -4, 1, 3\n(-4) / (1) = -4, left: -4, 3\n(9) + (13) = 22, left: 22, 1, 3\n(22) - (1) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + ((9 + 13) - 1))"}, {"input": "1 9 13 3\n", "output": "(1) + (9) = 10, left: 10, 13, 3\n(1) / (9) = 1/9, left: 1/9, 13, 3\n(13) / (1/9) = 117, left: 117, 3\n(9) / (1) = 9, left: 9, 13, 3\n(3) - (9) = -6, left: -6, 13\n(1) * (9) = 9, left: 9, 13, 3\n(13) - (3) = 10, left: 10, 9\n(9) - (1) = 8, left: 8, 13, 3\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((9 - 1) + (13 + 3))"}, {"input": "1 9 13 3\n", "output": "(3) - (1) = 2, left: 2, 9, 13\n(13) - (9) = 4, left: 4, 2\n(2) * (4) = 8, left: 8\n(2) - (4) = -2, left: -2\n(9) * (13) = 117, left: 117, 2\n(2) + (117) = 119, left: 119\n(9) / (13) = 9/13, left: 9/13, 2\n(9) + (13) = 22, left: 22, 2\n(22) / (2) = 11, left: 11\n(2) + (22) = 24, left: 24\nreach 24! expression: ((3 - 1) + (9 + 13))"}, {"input": "1 9 13 3\n", "output": "(1) - (9) = -8, left: -8, 13, 3\n(-8) - (3) = -11, left: -11, 13\n(13) * (-11) = -143, left: -143\n(13) + (-11) = 2, left: 2\n(-11) - (13) = -24, left: -24\n(13) / (-11) = -13/11, left: -13/11\n(-11) / (13) = -11/13, left: -11/13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((1 - 9) - 3))"}, {"input": "1 9 13 3\n", "output": "(1) / (3) = 1/3, left: 1/3, 9, 13\n(1) * (3) = 3, left: 3, 9, 13\n(9) * (13) = 117, left: 117, 3\n(117) - (3) = 114, left: 114\n(13) - (3) = 10, left: 10, 9\n(9) / (10) = 9/10, left: 9/10\n(3) / (1) = 3, left: 3, 9, 13\n(1) - (3) = -2, left: -2, 9, 13\n(-2) - (13) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - ((1 - 3) - 13))"}, {"input": "1 9 13 3\n", "output": "(1) - (9) = -8, left: -8, 13, 3\n(-8) - (3) = -11, left: -11, 13\n(13) * (-11) = -143, left: -143\n(13) + (-11) = 2, left: 2\n(-11) - (13) = -24, left: -24\n(13) / (-11) = -13/11, left: -13/11\n(-11) / (13) = -11/13, left: -11/13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((1 - 9) - 3))"}, {"input": "1 9 13 3\n", "output": "(1) - (9) = -8, left: -8, 13, 3\n(-8) - (3) = -11, left: -11, 13\n(13) * (-11) = -143, left: -143\n(13) + (-11) = 2, left: 2\n(-11) - (13) = -24, left: -24\n(13) / (-11) = -13/11, left: -13/11\n(-11) / (13) = -11/13, left: -11/13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((1 - 9) - 3))"}, {"input": "9 1 6 7\n", "output": "(1) + (7) = 8, left: 8, 9, 6\n(6) / (9) = 2/3, left: 2/3, 8\n(8) / (2/3) = 12, left: 12\n(8) - (2/3) = 22/3, left: 22/3\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "9 1 6 7\n", "output": "(9) - (6) = 3, left: 3, 1, 7\n(1) + (7) = 8, left: 8, 3\n(3) - (8) = -5, left: -5\n(3) / (8) = 3/8, left: 3/8\n(8) - (3) = 5, left: 5\n(3) + (8) = 11, left: 11\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((9 - 6) * (1 + 7))"}, {"input": "9 1 6 7\n", "output": "(1) * (7) = 7, left: 7, 9, 6\n(9) - (6) = 3, left: 3, 7\n(1) / (7) = 1/7, left: 1/7, 9, 6\n(6) - (1/7) = 41/7, left: 41/7, 9\n(6) - (9) = -3, left: -3, 1/7\n(1/7) * (-3) = -3/7, left: -3/7\n(1) + (7) = 8, left: 8, 9, 6\n(6) * (8) = 48, left: 48, 9\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "9 1 6 7\n", "output": "(1) + (7) = 8, left: 8, 9, 6\n(6) / (9) = 2/3, left: 2/3, 8\n(8) / (2/3) = 12, left: 12\n(2/3) / (8) = 1/12, left: 1/12\n(8) * (2/3) = 16/3, left: 16/3\n(2/3) - (8) = -22/3, left: -22/3\n(8) + (2/3) = 26/3, left: 26/3\n(9) - (6) = 3, left: 3, 8\n(3) / (8) = 3/8, left: 3/8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "9 1 6 7\n", "output": "(9) - (1) = 8, left: 8, 6, 7\n(1) - (9) = -8, left: -8, 6, 7\n(6) + (7) = 13, left: 13, -8\n(1) + (6) = 7, left: 7, 9, 7\n(1) / (6) = 1/6, left: 1/6, 9, 7\n(6) - (1) = 5, left: 5, 9, 7\n(7) / (1) = 7, left: 7, 9, 6\n(1) + (7) = 8, left: 8, 9, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "9 1 6 7\n", "output": "(6) + (7) = 13, left: 13, 9, 1\n(6) / (7) = 6/7, left: 6/7, 9, 1\n(6/7) / (1) = 6/7, left: 6/7, 9\n(6/7) / (9) = 2/21, left: 2/21\n(1) * (7) = 7, left: 7, 9, 6\n(7) / (6) = 7/6, left: 7/6, 9\n(9) * (7/6) = 21/2, left: 21/2\n(1) + (7) = 8, left: 8, 9, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "9 1 6 7\n", "output": "(9) - (6) = 3, left: 3, 1, 7\n(1) + (7) = 8, left: 8, 3\n(3) - (8) = -5, left: -5\n(3) / (8) = 3/8, left: 3/8\n(8) - (3) = 5, left: 5\n(3) + (8) = 11, left: 11\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((9 - 6) * (1 + 7))"}, {"input": "9 1 6 7\n", "output": "(1) / (9) = 1/9, left: 1/9, 6, 7\n(7) + (1/9) = 64/9, left: 64/9, 6\n(64/9) - (6) = 10/9, left: 10/9\n(9) / (1) = 9, left: 9, 6, 7\n(6) / (7) = 6/7, left: 6/7, 9\n(1) + (6) = 7, left: 7, 9, 7\n(1) / (6) = 1/6, left: 1/6, 9, 7\n(7) * (1/6) = 7/6, left: 7/6, 9\n(9) * (7/6) = 21/2, left: 21/2\n(6) / (1) = 6, left: 6, 9, 7\n(7) / (1) = 7, left: 7, 9, 6\n(1) + (7) = 8, left: 8, 9, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "9 1 6 7\n", "output": "(7) / (6) = 7/6, left: 7/6, 9, 1\n(9) / (1) = 9, left: 9, 7/6\n(7) - (6) = 1, left: 1, 9, 1\n(1) * (1) = 1, left: 1, 9\n(6) / (7) = 6/7, left: 6/7, 9, 1\n(1) - (7) = -6, left: -6, 9, 6\n(1) / (7) = 1/7, left: 1/7, 9, 6\n(6) / (9) = 2/3, left: 2/3, 1/7\n(7) - (1) = 6, left: 6, 9, 6\n(6) / (9) = 2/3, left: 2/3, 6\n(1) * (7) = 7, left: 7, 9, 6\n(1) + (7) = 8, left: 8, 9, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "9 1 6 7\n", "output": "(9) - (6) = 3, left: 3, 1, 7\n(1) + (7) = 8, left: 8, 3\n(3) - (8) = -5, left: -5\n(3) / (8) = 3/8, left: 3/8\n(8) - (3) = 5, left: 5\n(3) + (8) = 11, left: 11\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((9 - 6) * (1 + 7))"}, {"input": "8 8 5 4\n", "output": "(5) / (4) = 5/4, left: 5/4, 8, 8\n(8) + (5) = 13, left: 13, 8, 4\n(8) / (5) = 8/5, left: 8/5, 8, 4\n(4) * (8/5) = 32/5, left: 32/5, 8\n(8/5) - (8) = -32/5, left: -32/5, 4\n(8) * (5) = 40, left: 40, 8, 4\n(5) / (8) = 5/8, left: 5/8, 8, 4\n(8) / (4) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(5) - (8) = -3, left: -3, 8, 4\n(8) / (5) = 8/5, left: 8/5, 8, 4\n(8) - (5) = 3, left: 3, 8, 4\n(8) * (5) = 40, left: 40, 8, 4\n(5) / (8) = 5/8, left: 5/8, 8, 4\n(5/8) - (8) = -59/8, left: -59/8, 4\n(4) - (8) = -4, left: -4, 8, 5\n(8) / (4) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(5) - (4) = 1, left: 1, 8, 8\n(5) * (4) = 20, left: 20, 8, 8\n(20) / (8) = 5/2, left: 5/2, 8\n(8) - (5) = 3, left: 3, 8, 4\n(4) + (3) = 7, left: 7, 8\n(8) * (5) = 40, left: 40, 8, 4\n(8) - (4) = 4, left: 4, 8, 5\n(8) / (4) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(4) / (8) = 1/2, left: 1/2, 8, 5\n(8) - (4) = 4, left: 4, 8, 5\n(4) / (8) = 1/2, left: 1/2, 5\n(8) - (5) = 3, left: 3, 4\n(5) / (8) = 5/8, left: 5/8, 4\n(4) - (8) = -4, left: -4, 8, 5\n(-4) / (5) = -4/5, left: -4/5, 8\n(8) / (4) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(5) * (4) = 20, left: 20, 8, 8\n(4) / (5) = 4/5, left: 4/5, 8, 8\n(8) - (4/5) = 36/5, left: 36/5, 8\n(5) - (4) = 1, left: 1, 8, 8\n(5) + (4) = 9, left: 9, 8, 8\n(4) / (8) = 1/2, left: 1/2, 8, 5\n(8) + (5) = 13, left: 13, 1/2\n(8) / (4) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(4) / (5) = 4/5, left: 4/5, 8, 8\n(8) - (4/5) = 36/5, left: 36/5, 8\n(5) / (4) = 5/4, left: 5/4, 8, 8\n(8) + (8) = 16, left: 16, 5/4\n(5) - (4) = 1, left: 1, 8, 8\n(8) / (1) = 8, left: 8, 8\n(5) + (4) = 9, left: 9, 8, 8\n(8) / (8) = 1, left: 1, 9\n(4) / (8) = 1/2, left: 1/2, 8, 5\n(5) - (1/2) = 9/2, left: 9/2, 8\n(8) - (4) = 4, left: 4, 8, 5\n(8) / (4) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(4) - (5) = -1, left: -1, 8, 8\n(5) - (4) = 1, left: 1, 8, 8\n(8) + (5) = 13, left: 13, 8, 4\n(8) / (5) = 8/5, left: 8/5, 8, 4\n(8) + (4) = 12, left: 12, 8/5\n(8) - (5) = 3, left: 3, 8, 4\n(5) - (8) = -3, left: -3, 8, 4\n(8) / (-3) = -8/3, left: -8/3, 4\n(8) * (-3) = -24, left: -24, 4\n(8) * (4) = 32, left: 32, 8, 5\n(5) * (32) = 160, left: 160, 8\n(8) / (4) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(8) / (5) = 8/5, left: 8/5, 8, 4\n(8) - (8/5) = 32/5, left: 32/5, 4\n(8) - (5) = 3, left: 3, 8, 4\n(4) * (3) = 12, left: 12, 8\n(8) / (12) = 2/3, left: 2/3\n(8) + (5) = 13, left: 13, 8, 4\n(5) / (8) = 5/8, left: 5/8, 8, 4\n(8) / (4) = 2, left: 2, 5/8\n(5/8) * (2) = 5/4, left: 5/4\n(4) - (8) = -4, left: -4, 8, 5\n(5) * (-4) = -20, left: -20, 8\n(8) / (4) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(4) / (8) = 1/2, left: 1/2, 8, 5\n(5) + (1/2) = 11/2, left: 11/2, 8\n(8) + (11/2) = 27/2, left: 27/2\n(8) - (4) = 4, left: 4, 8, 5\n(5) + (4) = 9, left: 9, 8\n(5) / (4) = 5/4, left: 5/4, 8\n(4) - (8) = -4, left: -4, 8, 5\n(8) * (-4) = -32, left: -32, 5\n(-4) / (8) = -1/2, left: -1/2, 5\n(8) / (5) = 8/5, left: 8/5, -4\n(-4) / (5) = -4/5, left: -4/5, 8\n(8) / (4) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(5) - (4) = 1, left: 1, 8, 8\n(5) * (4) = 20, left: 20, 8, 8\n(4) - (5) = -1, left: -1, 8, 8\n(5) / (8) = 5/8, left: 5/8, 8, 4\n(8) - (5) = 3, left: 3, 8, 4\n(8) / (3) = 8/3, left: 8/3, 4\n(8) * (5) = 40, left: 40, 8, 4\n(8) - (4) = 4, left: 4, 8, 5\n(4) - (8) = -4, left: -4, 5\n(5) / (-4) = -5/4, left: -5/4\n(8) / (4) = 2, left: 2, 8, 5\n(8) + (5) = 13, left: 13, 2\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "10 12 12 10\n", "output": "(10) - (12) = -2, left: -2, 12, 10\n(10) + (-2) = 8, left: 8, 12\n(8) / (12) = 2/3, left: 2/3\n(12) - (8) = 4, left: 4\n(-2) - (10) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - ((10 - 12) - 10))"}, {"input": "10 12 12 10\n", "output": "(12) / (10) = 6/5, left: 6/5, 12, 10\n(10) - (12) = -2, left: -2, 6/5\n(12) + (10) = 22, left: 22, 6/5\n(10) - (6/5) = 44/5, left: 44/5, 12\n(10) * (6/5) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (10 * (12 / 10)))"}, {"input": "10 12 12 10\n", "output": "(12) / (10) = 6/5, left: 6/5, 10, 12\n(10) - (6/5) = 44/5, left: 44/5, 12\n(44/5) - (12) = -16/5, left: -16/5\n(10) / (6/5) = 25/3, left: 25/3, 12\n(10) * (6/5) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (10 * (12 / 10)))"}, {"input": "10 12 12 10\n", "output": "(12) + (10) = 22, left: 22, 10, 12\n(10) * (12) = 120, left: 120, 22\n(22) - (120) = -98, left: -98\n(10) + (12) = 22, left: 22, 22\n(10) - (12) = -2, left: -2, 22\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((12 + 10) - (10 - 12))"}, {"input": "10 12 12 10\n", "output": "(12) * (12) = 144, left: 144, 10, 10\n(12) / (12) = 1, left: 1, 10, 10\n(10) / (10) = 1, left: 1, 1\n(12) + (12) = 24, left: 24, 10, 10\n(10) + (24) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((10 + (12 + 12)) - 10)"}, {"input": "10 12 12 10\n", "output": "(12) / (10) = 6/5, left: 6/5, 12, 10\n(10) - (12) = -2, left: -2, 6/5\n(-2) / (6/5) = -5/3, left: -5/3\n(12) + (10) = 22, left: 22, 6/5\n(10) / (6/5) = 25/3, left: 25/3, 12\n(12) * (25/3) = 100, left: 100\n(25/3) - (12) = -11/3, left: -11/3\n(10) - (6/5) = 44/5, left: 44/5, 12\n(10) * (6/5) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (10 * (12 / 10)))"}, {"input": "10 12 12 10\n", "output": "(12) - (12) = 0, left: 0, 10, 10\n(0) / (10) = 0, left: 0, 10\n(12) * (12) = 144, left: 144, 10, 10\n(10) / (10) = 1, left: 1, 144\n(12) / (12) = 1, left: 1, 10, 10\n(1) / (10) = 1/10, left: 1/10, 10\n(10) * (1/10) = 1, left: 1\n(12) + (12) = 24, left: 24, 10, 10\n(10) + (24) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((10 + (12 + 12)) - 10)"}, {"input": "10 12 12 10\n", "output": "(12) / (10) = 6/5, left: 6/5, 10, 12\n(6/5) - (10) = -44/5, left: -44/5, 12\n(12) / (-44/5) = -15/11, left: -15/11\n(-44/5) / (12) = -11/15, left: -11/15\n(10) / (6/5) = 25/3, left: 25/3, 12\n(10) + (6/5) = 56/5, left: 56/5, 12\n(12) * (56/5) = 672/5, left: 672/5\n(12) - (56/5) = 4/5, left: 4/5\n(10) * (6/5) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (10 * (12 / 10)))"}, {"input": "10 12 12 10\n", "output": "(10) - (12) = -2, left: -2, 12, 10\n(10) + (-2) = 8, left: 8, 12\n(8) - (12) = -4, left: -4\n(12) / (8) = 3/2, left: 3/2\n(12) + (8) = 20, left: 20\n(12) - (8) = 4, left: 4\n(-2) - (10) = -12, left: -12, 12\n(12) + (-12) = 0, left: 0\n(12) / (-12) = -1, left: -1\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - ((10 - 12) - 10))"}, {"input": "10 12 12 10\n", "output": "(12) + (10) = 22, left: 22, 10, 12\n(10) * (12) = 120, left: 120, 22\n(22) * (120) = 2640, left: 2640\n(10) + (12) = 22, left: 22, 22\n(22) / (22) = 1, left: 1\n(22) - (22) = 0, left: 0\n(22) + (22) = 44, left: 44\n(10) - (12) = -2, left: -2, 22\n(22) * (-2) = -44, left: -44\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((12 + 10) - (10 - 12))"}, {"input": "13 13 12 6\n", "output": "(12) / (13) = 12/13, left: 12/13, 13, 6\n(13) - (12/13) = 157/13, left: 157/13, 6\n(13) - (12) = 1, left: 1, 13, 6\n(12) / (6) = 2, left: 2, 13, 13\n(2) - (13) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((12 / 6) - 13))"}, {"input": "13 13 12 6\n", "output": "(13) / (12) = 13/12, left: 13/12, 13, 6\n(13) - (13/12) = 143/12, left: 143/12, 6\n(12) - (13) = -1, left: -1, 13, 6\n(12) / (6) = 2, left: 2, 13, 13\n(2) - (13) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((12 / 6) - 13))"}, {"input": "13 13 12 6\n", "output": "(13) + (13) = 26, left: 26, 12, 6\n(6) - (26) = -20, left: -20, 12\n(6) / (26) = 3/13, left: 3/13, 12\n(6) - (12) = -6, left: -6, 26\n(12) / (6) = 2, left: 2, 26\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + 13) - (12 / 6))"}, {"input": "13 13 12 6\n", "output": "(12) / (13) = 12/13, left: 12/13, 13, 6\n(13) * (12) = 156, left: 156, 13, 6\n(156) - (6) = 150, left: 150, 13\n(6) - (13) = -7, left: -7, 13, 12\n(6) / (13) = 6/13, left: 6/13, 13, 12\n(12) - (6/13) = 150/13, left: 150/13, 13\n(13) * (6) = 78, left: 78, 13, 12\n(12) / (6) = 2, left: 2, 13, 13\n(2) - (13) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((12 / 6) - 13))"}, {"input": "13 13 12 6\n", "output": "(6) / (13) = 6/13, left: 6/13, 13, 12\n(13) * (6) = 78, left: 78, 13, 12\n(12) / (13) = 12/13, left: 12/13, 13, 6\n(13) / (12) = 13/12, left: 13/12, 13, 6\n(6) - (13) = -7, left: -7, 13/12\n(-7) - (13/12) = -97/12, left: -97/12\n(13) - (12) = 1, left: 1, 13, 6\n(12) / (6) = 2, left: 2, 13, 13\n(2) - (13) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((12 / 6) - 13))"}, {"input": "13 13 12 6\n", "output": "(13) + (13) = 26, left: 26, 12, 6\n(6) + (26) = 32, left: 32, 12\n(12) - (32) = -20, left: -20\n(6) - (26) = -20, left: -20, 12\n(26) / (6) = 13/3, left: 13/3, 12\n(6) / (26) = 3/13, left: 3/13, 12\n(3/13) / (12) = 1/52, left: 1/52\n(6) / (12) = 1/2, left: 1/2, 26\n(12) / (6) = 2, left: 2, 26\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + 13) - (12 / 6))"}, {"input": "13 13 12 6\n", "output": "(12) + (6) = 18, left: 18, 13, 13\n(13) - (13) = 0, left: 0, 18\n(12) - (6) = 6, left: 6, 13, 13\n(13) + (6) = 19, left: 19, 13\n(13) * (19) = 247, left: 247\n(6) - (12) = -6, left: -6, 13, 13\n(6) / (12) = 1/2, left: 1/2, 13, 13\n(12) / (6) = 2, left: 2, 13, 13\n(13) - (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (13 - (12 / 6)))"}, {"input": "13 13 12 6\n", "output": "(12) * (6) = 72, left: 72, 13, 13\n(13) / (72) = 13/72, left: 13/72, 13\n(12) - (6) = 6, left: 6, 13, 13\n(13) + (6) = 19, left: 19, 13\n(12) + (6) = 18, left: 18, 13, 13\n(13) + (18) = 31, left: 31, 13\n(6) - (12) = -6, left: -6, 13, 13\n(12) / (6) = 2, left: 2, 13, 13\n(13) + (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + 13) - (12 / 6))"}, {"input": "5 10 12 4\n", "output": "(10) * (12) = 120, left: 120, 5, 4\n(4) * (120) = 480, left: 480, 5\n(5) / (480) = 1/96, left: 1/96\n(10) / (12) = 5/6, left: 5/6, 5, 4\n(5/6) / (4) = 5/24, left: 5/24, 5\n(5) / (5/24) = 24, left: 24\nreach 24! expression: (5 / ((10 / 12) / 4))"}, {"input": "5 10 12 4\n", "output": "(12) * (4) = 48, left: 48, 5, 10\n(5) / (48) = 5/48, left: 5/48, 10\n(5) + (48) = 53, left: 53, 10\n(10) - (53) = -43, left: -43\n(5) * (48) = 240, left: 240, 10\n(240) / (10) = 24, left: 24\nreach 24! expression: ((5 * (12 * 4)) / 10)"}, {"input": "5 10 12 4\n", "output": "(10) + (12) = 22, left: 22, 5, 4\n(4) / (22) = 2/11, left: 2/11, 5\n(10) - (12) = -2, left: -2, 5, 4\n(12) / (10) = 6/5, left: 6/5, 5, 4\n(5) * (4) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (5 * 4))"}, {"input": "5 10 12 4\n", "output": "(12) * (4) = 48, left: 48, 5, 10\n(5) - (10) = -5, left: -5, 48\n(10) / (5) = 2, left: 2, 48\n(48) * (2) = 96, left: 96\n(48) - (2) = 46, left: 46\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (10 / 5))"}, {"input": "5 10 12 4\n", "output": "(12) - (4) = 8, left: 8, 5, 10\n(5) - (10) = -5, left: -5, 8\n(5) + (8) = 13, left: 13, 10\n(13) / (10) = 13/10, left: 13/10\n(5) * (8) = 40, left: 40, 10\n(4) - (12) = -8, left: -8, 5, 10\n(5) - (10) = -5, left: -5, -8\n(12) * (4) = 48, left: 48, 5, 10\n(10) / (48) = 5/24, left: 5/24, 5\n(5) / (5/24) = 24, left: 24\nreach 24! expression: (5 / (10 / (12 * 4)))"}, {"input": "5 10 12 4\n", "output": "(10) + (12) = 22, left: 22, 5, 4\n(10) - (12) = -2, left: -2, 5, 4\n(-2) - (4) = -6, left: -6, 5\n(5) + (-2) = 3, left: 3, 4\n(-2) - (5) = -7, left: -7, 4\n(-7) - (4) = -11, left: -11\n(12) / (10) = 6/5, left: 6/5, 5, 4\n(5) / (4) = 5/4, left: 5/4, 6/5\n(5) * (4) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (5 * 4))"}, {"input": "5 10 12 4\n", "output": "(12) * (4) = 48, left: 48, 5, 10\n(5) - (10) = -5, left: -5, 48\n(48) - (-5) = 53, left: 53\n(-5) - (48) = -53, left: -53\n(-5) / (48) = -5/48, left: -5/48\n(10) / (5) = 2, left: 2, 48\n(2) / (48) = 1/24, left: 1/24\n(48) * (2) = 96, left: 96\n(48) + (2) = 50, left: 50\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (10 / 5))"}, {"input": "5 10 12 4\n", "output": "(10) * (12) = 120, left: 120, 5, 4\n(5) + (4) = 9, left: 9, 120\n(120) / (5) = 24, left: 24, 4\n(120) - (4) = 116, left: 116, 5\n(4) + (120) = 124, left: 124, 5\n(4) * (120) = 480, left: 480, 5\n(5) * (480) = 2400, left: 2400\n(10) / (12) = 5/6, left: 5/6, 5, 4\n(5/6) / (4) = 5/24, left: 5/24, 5\n(5) / (5/24) = 24, left: 24\nreach 24! expression: (5 / ((10 / 12) / 4))"}, {"input": "5 10 12 4\n", "output": "(12) * (4) = 48, left: 48, 5, 10\n(48) - (5) = 43, left: 43, 10\n(10) / (43) = 10/43, left: 10/43\n(5) / (48) = 5/48, left: 5/48, 10\n(5/48) - (10) = -475/48, left: -475/48\n(5) + (48) = 53, left: 53, 10\n(48) / (5) = 48/5, left: 48/5, 10\n(48/5) - (10) = -2/5, left: -2/5\n(5) * (48) = 240, left: 240, 10\n(240) / (10) = 24, left: 24\nreach 24! expression: ((5 * (12 * 4)) / 10)"}, {"input": "2 4 3 1\n", "output": "(4) - (3) = 1, left: 1, 2, 1\n(2) - (1) = 1, left: 1, 1\n(3) / (4) = 3/4, left: 3/4, 2, 1\n(2) + (1) = 3, left: 3, 3/4\n(3/4) - (3) = -9/4, left: -9/4\n(1) / (2) = 1/2, left: 1/2, 3/4\n(2) * (1) = 2, left: 2, 3/4\n(4) * (3) = 12, left: 12, 2, 1\n(1) * (12) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 * (4 * 3)))"}, {"input": "2 4 3 1\n", "output": "(4) + (3) = 7, left: 7, 2, 1\n(3) / (4) = 3/4, left: 3/4, 2, 1\n(2) - (1) = 1, left: 1, 3/4\n(3) - (4) = -1, left: -1, 2, 1\n(-1) / (2) = -1/2, left: -1/2, 1\n(2) - (1) = 1, left: 1, -1\n(2) * (1) = 2, left: 2, -1\n(4) * (3) = 12, left: 12, 2, 1\n(1) * (12) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 * (4 * 3)))"}, {"input": "2 4 3 1\n", "output": "(1) - (3) = -2, left: -2, 2, 4\n(4) - (2) = 2, left: 2, -2\n(-2) / (2) = -1, left: -1\n(4) * (-2) = -8, left: -8, 2\n(3) - (1) = 2, left: 2, 2, 4\n(4) + (2) = 6, left: 6, 2\n(2) * (2) = 4, left: 4, 4\n(3) / (1) = 3, left: 3, 2, 4\n(2) * (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((3 / 1) * (2 * 4))"}, {"input": "2 4 3 1\n", "output": "(3) - (2) = 1, left: 1, 4, 1\n(4) - (1) = 3, left: 3, 1\n(4) + (1) = 5, left: 5, 1\n(1) + (1) = 2, left: 2, 4\n(2) * (3) = 6, left: 6, 4, 1\n(4) / (6) = 2/3, left: 2/3, 1\n(6) / (4) = 3/2, left: 3/2, 1\n(4) - (6) = -2, left: -2, 1\n(4) * (6) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((4 * (2 * 3)) / 1)"}, {"input": "2 4 3 1\n", "output": "(4) * (3) = 12, left: 12, 2, 1\n(2) / (12) = 1/6, left: 1/6, 1\n(2) + (12) = 14, left: 14, 1\n(1) * (14) = 14, left: 14\n(1) + (14) = 15, left: 15\n(1) / (14) = 1/14, left: 1/14\n(12) - (2) = 10, left: 10, 1\n(1) - (10) = -9, left: -9\n(2) * (12) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (2 * (4 * 3)))"}, {"input": "2 4 3 1\n", "output": "(3) - (2) = 1, left: 1, 4, 1\n(1) / (4) = 1/4, left: 1/4, 1\n(1) - (4) = -3, left: -3, 1\n(-3) / (1) = -3, left: -3\n(1) / (4) = 1/4, left: 1/4, 1\n(1) - (1/4) = 3/4, left: 3/4\n(1) - (1) = 0, left: 0, 4\n(0) - (4) = -4, left: -4\n(1) - (1) = 0, left: 0, 4\n(1) * (1) = 1, left: 1, 4\n(4) / (1) = 4, left: 4\n(2) * (3) = 6, left: 6, 4, 1\n(4) * (6) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((4 * (2 * 3)) / 1)"}, {"input": "2 4 3 1\n", "output": "(4) + (3) = 7, left: 7, 2, 1\n(7) / (1) = 7, left: 7, 2\n(2) - (7) = -5, left: -5\n(2) - (7) = -5, left: -5, 1\n(3) / (4) = 3/4, left: 3/4, 2, 1\n(2) * (3/4) = 3/2, left: 3/2, 1\n(1) - (2) = -1, left: -1, 3/4\n(3) - (4) = -1, left: -1, 2, 1\n(2) + (-1) = 1, left: 1, 1\n(1) + (1) = 2, left: 2\n(2) + (1) = 3, left: 3, -1\n(4) * (3) = 12, left: 12, 2, 1\n(1) * (12) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 * (4 * 3)))"}, {"input": "2 4 3 1\n", "output": "(1) - (3) = -2, left: -2, 2, 4\n(2) - (4) = -2, left: -2, -2\n(2) / (-2) = -1, left: -1, 4\n(2) + (-2) = 0, left: 0, 4\n(2) - (-2) = 4, left: 4, 4\n(3) - (1) = 2, left: 2, 2, 4\n(2) / (4) = 1/2, left: 1/2, 2\n(2) + (4) = 6, left: 6, 2\n(2) - (4) = -2, left: -2, 2\n(2) / (2) = 1, left: 1, 4\n(2) + (2) = 4, left: 4, 4\n(3) / (1) = 3, left: 3, 2, 4\n(2) * (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((3 / 1) * (2 * 4))"}, {"input": "9 5 10 10\n", "output": "(10) / (9) = 10/9, left: 10/9, 5, 10\n(5) - (10) = -5, left: -5, 10/9\n(10/9) - (5) = -35/9, left: -35/9, 10\n(9) + (10) = 19, left: 19, 5, 10\n(10) + (19) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((10 + (9 + 10)) - 5)"}, {"input": "9 5 10 10\n", "output": "(9) + (10) = 19, left: 19, 5, 10\n(10) - (19) = -9, left: -9, 5\n(10) / (19) = 10/19, left: 10/19, 5\n(10/19) / (5) = 2/19, left: 2/19\n(10) + (19) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((10 + (9 + 10)) - 5)"}, {"input": "9 5 10 10\n", "output": "(10) * (10) = 100, left: 100, 9, 5\n(9) / (100) = 9/100, left: 9/100, 5\n(100) / (5) = 20, left: 20, 9\n(10) + (10) = 20, left: 20, 9, 5\n(5) - (20) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 - (10 + 10)))"}, {"input": "9 5 10 10\n", "output": "(9) + (10) = 19, left: 19, 5, 10\n(10) - (19) = -9, left: -9, 5\n(10) * (19) = 190, left: 190, 5\n(10) / (19) = 10/19, left: 10/19, 5\n(19) - (10) = 9, left: 9, 5\n(9) / (5) = 9/5, left: 9/5\n(5) - (9) = -4, left: -4\n(10) + (19) = 29, left: 29, 5\n(5) * (29) = 145, left: 145\n(29) - (5) = 24, left: 24\nreach 24! expression: ((10 + (9 + 10)) - 5)"}, {"input": "9 5 10 10\n", "output": "(10) - (10) = 0, left: 0, 9, 5\n(0) - (5) = -5, left: -5, 9\n(10) / (10) = 1, left: 1, 9, 5\n(5) / (9) = 5/9, left: 5/9, 1\n(10) * (10) = 100, left: 100, 9, 5\n(5) - (9) = -4, left: -4, 100\n(5) + (100) = 105, left: 105, 9\n(10) + (10) = 20, left: 20, 9, 5\n(5) - (20) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 - (10 + 10)))"}, {"input": "9 5 10 10\n", "output": "(10) / (9) = 10/9, left: 10/9, 5, 10\n(5) * (10) = 50, left: 50, 10/9\n(5) / (10) = 1/2, left: 1/2, 10/9\n(10/9) * (1/2) = 5/9, left: 5/9\n(1/2) / (10/9) = 9/20, left: 9/20\n(9) + (10) = 19, left: 19, 5, 10\n(10) * (19) = 190, left: 190, 5\n(190) / (5) = 38, left: 38\n(10) + (19) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((10 + (9 + 10)) - 5)"}, {"input": "9 5 10 10\n", "output": "(5) * (10) = 50, left: 50, 9, 10\n(5) + (10) = 15, left: 15, 9, 10\n(10) + (15) = 25, left: 25, 9\n(9) / (10) = 9/10, left: 9/10, 15\n(10) / (5) = 2, left: 2, 9, 10\n(9) * (2) = 18, left: 18, 10\n(10) - (2) = 8, left: 8, 9\n(10) - (5) = 5, left: 5, 9, 10\n(9) + (5) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (9 + (10 - 5)))"}, {"input": "6 1 13 9\n", "output": "(13) / (1) = 13, left: 13, 6, 9\n(9) - (6) = 3, left: 3, 13\n(9) / (13) = 9/13, left: 9/13, 6\n(6) + (9/13) = 87/13, left: 87/13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 / 1) - 9))"}, {"input": "6 1 13 9\n", "output": "(9) / (6) = 3/2, left: 3/2, 1, 13\n(3/2) / (1) = 3/2, left: 3/2, 13\n(1) - (3/2) = -1/2, left: -1/2, 13\n(1) / (6) = 1/6, left: 1/6, 13, 9\n(13) - (9) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((13 - 9) / (1 / 6))"}, {"input": "6 1 13 9\n", "output": "(13) / (1) = 13, left: 13, 6, 9\n(6) + (9) = 15, left: 15, 13\n(13) / (15) = 13/15, left: 13/15\n(6) * (9) = 54, left: 54, 13\n(13) / (6) = 13/6, left: 13/6, 9\n(9) - (13/6) = 41/6, left: 41/6\n(9) / (13) = 9/13, left: 9/13, 6\n(6) / (9/13) = 26/3, left: 26/3\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 / 1) - 9))"}, {"input": "6 1 13 9\n", "output": "(6) + (13) = 19, left: 19, 1, 9\n(9) - (1) = 8, left: 8, 19\n(6) - (13) = -7, left: -7, 1, 9\n(6) * (13) = 78, left: 78, 1, 9\n(1) / (78) = 1/78, left: 1/78, 9\n(13) / (6) = 13/6, left: 13/6, 1, 9\n(9) + (13/6) = 67/6, left: 67/6, 1\n(1) * (9) = 9, left: 9, 6, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (1 * 9)))"}, {"input": "6 1 13 9\n", "output": "(6) - (9) = -3, left: -3, 1, 13\n(1) / (-3) = -1/3, left: -1/3, 13\n(6) / (9) = 2/3, left: 2/3, 1, 13\n(6) + (9) = 15, left: 15, 1, 13\n(9) / (6) = 3/2, left: 3/2, 1, 13\n(3/2) - (1) = 1/2, left: 1/2, 13\n(6) + (1) = 7, left: 7, 13, 9\n(1) / (6) = 1/6, left: 1/6, 13, 9\n(13) - (9) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((13 - 9) / (1 / 6))"}, {"input": "6 1 13 9\n", "output": "(13) / (6) = 13/6, left: 13/6, 1, 9\n(6) + (13) = 19, left: 19, 1, 9\n(6) - (9) = -3, left: -3, 1, 13\n(9) / (6) = 3/2, left: 3/2, 1, 13\n(3/2) / (13) = 3/26, left: 3/26, 1\n(9) - (6) = 3, left: 3, 1, 13\n(3) / (1) = 3, left: 3, 13\n(1) * (9) = 9, left: 9, 6, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (1 * 9)))"}, {"input": "6 1 13 9\n", "output": "(6) * (13) = 78, left: 78, 1, 9\n(1) + (78) = 79, left: 79, 9\n(9) - (79) = -70, left: -70\n(13) - (6) = 7, left: 7, 1, 9\n(6) + (13) = 19, left: 19, 1, 9\n(1) - (19) = -18, left: -18, 9\n(13) / (6) = 13/6, left: 13/6, 1, 9\n(6) / (1) = 6, left: 6, 13, 9\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((6 / 1) * (13 - 9))"}, {"input": "12 9 1 9\n", "output": "(1) - (9) = -8, left: -8, 12, 9\n(12) - (-8) = 20, left: 20, 9\n(12) / (-8) = -3/2, left: -3/2, 9\n(12) / (9) = 4/3, left: 4/3, -8\n(9) - (12) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (9 - 12))"}, {"input": "12 9 1 9\n", "output": "(9) / (12) = 3/4, left: 3/4, 9, 1\n(9) + (1) = 10, left: 10, 3/4\n(3/4) - (9) = -33/4, left: -33/4, 1\n(1) - (-33/4) = 37/4, left: 37/4\n(3/4) / (1) = 3/4, left: 3/4, 9\n(9) / (3/4) = 12, left: 12\n(9) - (12) = -3, left: -3, 9, 1\n(9) + (1) = 10, left: 10, -3\n(1) - (9) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((9 - 12) * (1 - 9))"}, {"input": "12 9 1 9\n", "output": "(9) / (12) = 3/4, left: 3/4, 1, 9\n(3/4) / (9) = 1/12, left: 1/12, 1\n(9) - (1) = 8, left: 8, 3/4\n(8) / (3/4) = 32/3, left: 32/3\n(1) + (9) = 10, left: 10, 3/4\n(3/4) - (10) = -37/4, left: -37/4\n(12) - (9) = 3, left: 3, 1, 9\n(1) * (9) = 9, left: 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((12 - 9) * (9 - 1))"}, {"input": "12 9 1 9\n", "output": "(1) - (9) = -8, left: -8, 12, 9\n(-8) - (12) = -20, left: -20, 9\n(12) + (-8) = 4, left: 4, 9\n(-8) / (9) = -8/9, left: -8/9, 12\n(-8/9) / (12) = -2/27, left: -2/27\n(12) + (9) = 21, left: 21, -8\n(12) - (9) = 3, left: 3, -8\n(9) / (12) = 3/4, left: 3/4, -8\n(9) - (12) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (9 - 12))"}, {"input": "12 9 1 9\n", "output": "(12) * (1) = 12, left: 12, 9, 9\n(9) * (12) = 108, left: 108, 9\n(12) + (1) = 13, left: 13, 9, 9\n(9) / (13) = 9/13, left: 9/13, 9\n(1) - (12) = -11, left: -11, 9, 9\n(9) / (-11) = -9/11, left: -9/11, 9\n(12) - (9) = 3, left: 3, 9, 1\n(9) + (1) = 10, left: 10, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((12 - 9) * (9 - 1))"}, {"input": "12 9 1 9\n", "output": "(1) + (9) = 10, left: 10, 12, 9\n(12) * (10) = 120, left: 120, 9\n(12) - (10) = 2, left: 2, 9\n(2) / (9) = 2/9, left: 2/9\n(9) / (10) = 9/10, left: 9/10, 12\n(9) / (12) = 3/4, left: 3/4, 10\n(10) + (3/4) = 43/4, left: 43/4\n(1) - (9) = -8, left: -8, 12, 9\n(9) - (12) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (9 - 12))"}, {"input": "4 3 4 4\n", "output": "(4) / (4) = 1, left: 1, 4, 3\n(4) * (4) = 16, left: 16, 4, 3\n(3) - (4) = -1, left: -1, 16\n(4) / (3) = 4/3, left: 4/3, 16\n(4) - (4) = 0, left: 0, 4, 3\n(3) / (4) = 3/4, left: 3/4, 4, 4\n(3) * (4) = 12, left: 12, 4, 4\n(3) + (4) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) / (4) = 1, left: 1, 4, 3\n(4) / (4) = 1, left: 1, 4, 3\n(4) - (4) = 0, left: 0, 4, 3\n(3) * (0) = 0, left: 0, 4\n(0) - (4) = -4, left: -4\n(4) / (3) = 4/3, left: 4/3, 4, 4\n(4) * (4/3) = 16/3, left: 16/3, 4\n(3) + (4) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) * (4) = 16, left: 16, 3, 4\n(16) - (4) = 12, left: 12, 3\n(4) + (4) = 8, left: 8, 3, 4\n(4) - (4) = 0, left: 0, 3, 4\n(3) / (4) = 3/4, left: 3/4, 4, 4\n(3) * (4) = 12, left: 12, 4, 4\n(4) / (3) = 4/3, left: 4/3, 4, 4\n(3) + (4) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) * (3) = 12, left: 12, 4, 4\n(4) - (3) = 1, left: 1, 4, 4\n(4) / (3) = 4/3, left: 4/3, 4, 4\n(4) * (4/3) = 16/3, left: 16/3, 4\n(4) + (3) = 7, left: 7, 4, 4\n(4) + (4) = 8, left: 8, 7\n(7) - (4) = 3, left: 3, 4\n(3) - (4) = -1, left: -1\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (4 + 3)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) + (4) = 8, left: 8, 3, 4\n(4) / (4) = 1, left: 1, 3, 4\n(3) / (4) = 3/4, left: 3/4, 4, 4\n(3/4) - (4) = -13/4, left: -13/4, 4\n(4) - (3/4) = 13/4, left: 13/4, 4\n(3) - (4) = -1, left: -1, 4, 4\n(3) + (4) = 7, left: 7, 4, 4\n(4) + (7) = 11, left: 11, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) / (4) = 1, left: 1, 4, 3\n(1) / (3) = 1/3, left: 1/3, 4\n(4) * (4) = 16, left: 16, 4, 3\n(4) + (16) = 20, left: 20, 3\n(3) + (20) = 23, left: 23\n(4) + (4) = 8, left: 8, 4, 3\n(4) - (4) = 0, left: 0, 4, 3\n(3) - (0) = 3, left: 3, 4\n(3) / (4) = 3/4, left: 3/4, 4, 4\n(3/4) - (4) = -13/4, left: -13/4, 4\n(-13/4) - (4) = -29/4, left: -29/4\n(3) + (4) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) * (3) = 12, left: 12, 4, 4\n(4) * (12) = 48, left: 48, 4\n(4) - (12) = -8, left: -8, 4\n(12) - (4) = 8, left: 8, 4\n(8) - (4) = 4, left: 4\n(4) - (3) = 1, left: 1, 4, 4\n(4) + (1) = 5, left: 5, 4\n(4) / (3) = 4/3, left: 4/3, 4, 4\n(4) + (4/3) = 16/3, left: 16/3, 4\n(4/3) - (4) = -8/3, left: -8/3, 4\n(4) + (3) = 7, left: 7, 4, 4\n(4) / (4) = 1, left: 1, 7\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (4 + 3)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) * (4) = 16, left: 16, 4, 3\n(4) / (4) = 1, left: 1, 4, 3\n(4) / (4) = 1, left: 1, 4, 3\n(4) - (4) = 0, left: 0, 4, 3\n(3) - (0) = 3, left: 3, 4\n(3) / (4) = 3/4, left: 3/4\n(3) / (4) = 3/4, left: 3/4, 4, 4\n(4) + (3/4) = 19/4, left: 19/4, 4\n(3) * (4) = 12, left: 12, 4, 4\n(12) - (4) = 8, left: 8, 4\n(3) - (4) = -1, left: -1, 4, 4\n(3) + (4) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) / (4) = 1, left: 1, 3, 4\n(1) - (3) = -2, left: -2, 4\n(4) + (4) = 8, left: 8, 3, 4\n(4) / (4) = 1, left: 1, 3, 4\n(4) - (4) = 0, left: 0, 3, 4\n(3) / (4) = 3/4, left: 3/4, 4, 4\n(4) + (3/4) = 19/4, left: 19/4, 4\n(4) * (3/4) = 3, left: 3, 4\n(3) * (4) = 12, left: 12, 4, 4\n(4) - (4) = 0, left: 0, 12\n(0) / (12) = 0, left: 0\n(3) + (4) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) / (4) = 1, left: 1, 3, 4\n(3) + (4) = 7, left: 7, 1\n(4) * (4) = 16, left: 16, 3, 4\n(4) - (16) = -12, left: -12, 3\n(16) / (4) = 4, left: 4, 3\n(4) - (4) = 0, left: 0, 3, 4\n(4) + (4) = 8, left: 8, 3, 4\n(4) / (8) = 1/2, left: 1/2, 3\n(4) / (4) = 1, left: 1, 3, 4\n(3) / (4) = 3/4, left: 3/4, 4, 4\n(3) + (4) = 7, left: 7, 4, 4\n(4) - (7) = -3, left: -3, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "7 6 3 3\n", "output": "(3) - (3) = 0, left: 0, 7, 6\n(7) + (6) = 13, left: 13, 0\n(3) + (3) = 6, left: 6, 7, 6\n(6) - (7) = -1, left: -1, 3, 3\n(3) / (3) = 1, left: 1, -1\n(6) / (7) = 6/7, left: 6/7, 3, 3\n(6) / (3) = 2, left: 2, 7, 3\n(3) - (6) = -3, left: -3, 7, 3\n(7) * (3) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((7 * 3) - (3 - 6))"}, {"input": "7 6 3 3\n", "output": "(6) / (3) = 2, left: 2, 7, 3\n(3) / (2) = 3/2, left: 3/2, 7\n(7) * (2) = 14, left: 14, 3\n(14) - (3) = 11, left: 11\n(6) + (3) = 9, left: 9, 7, 3\n(7) * (9) = 63, left: 63, 3\n(6) - (3) = 3, left: 3, 7, 3\n(3) + (3) = 6, left: 6, 7\n(7) * (3) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((6 - 3) + (7 * 3))"}, {"input": "7 6 3 3\n", "output": "(3) / (6) = 1/2, left: 1/2, 7, 3\n(1/2) - (7) = -13/2, left: -13/2, 3\n(7) - (3) = 4, left: 4, 1/2\n(3) / (1/2) = 6, left: 6, 7\n(1/2) - (3) = -5/2, left: -5/2, 7\n(1/2) / (3) = 1/6, left: 1/6, 7\n(3) - (6) = -3, left: -3, 7, 3\n(-3) - (7) = -10, left: -10, 3\n(7) * (-3) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (7 * (3 - 6)))"}, {"input": "7 6 3 3\n", "output": "(6) / (3) = 2, left: 2, 7, 3\n(3) + (2) = 5, left: 5, 7\n(7) / (3) = 7/3, left: 7/3, 2\n(2) + (7/3) = 13/3, left: 13/3\n(3) / (6) = 1/2, left: 1/2, 7, 3\n(1/2) / (7) = 1/14, left: 1/14, 3\n(1/14) - (3) = -41/14, left: -41/14\n(3) - (6) = -3, left: -3, 7, 3\n(7) * (3) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((7 * 3) - (3 - 6))"}, {"input": "7 6 3 3\n", "output": "(3) - (7) = -4, left: -4, 6, 3\n(6) / (3) = 2, left: 2, -4\n(2) / (-4) = -1/2, left: -1/2\n(6) + (3) = 9, left: 9, -4\n(-4) + (9) = 5, left: 5\n(3) + (-4) = -1, left: -1, 6\n(7) * (3) = 21, left: 21, 6, 3\n(6) * (21) = 126, left: 126, 3\n(6) + (21) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((6 + (7 * 3)) - 3)"}, {"input": "7 6 3 3\n", "output": "(3) * (3) = 9, left: 9, 7, 6\n(3) / (3) = 1, left: 1, 7, 6\n(1) / (7) = 1/7, left: 1/7, 6\n(3) + (3) = 6, left: 6, 7, 6\n(7) + (6) = 13, left: 13, 6\n(7) + (6) = 13, left: 13, 3, 3\n(3) * (13) = 39, left: 39, 3\n(7) - (6) = 1, left: 1, 3, 3\n(3) / (3) = 1, left: 1, 1\n(7) / (6) = 7/6, left: 7/6, 3, 3\n(7) * (6) = 42, left: 42, 3, 3\n(3) - (6) = -3, left: -3, 7, 3\n(7) * (3) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((7 * 3) - (3 - 6))"}, {"input": "13 12 1 1\n", "output": "(12) - (1) = 11, left: 11, 13, 1\n(11) / (13) = 11/13, left: 11/13, 1\n(1) + (11/13) = 24/13, left: 24/13\n(11) - (13) = -2, left: -2, 1\n(13) + (11) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + (12 - 1)) / 1)"}, {"input": "13 12 1 1\n", "output": "(12) - (1) = 11, left: 11, 13, 1\n(13) * (1) = 13, left: 13, 11\n(11) / (13) = 11/13, left: 11/13\n(11) * (13) = 143, left: 143\n(13) / (11) = 13/11, left: 13/11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((12 - 1) + (13 * 1))"}, {"input": "13 12 1 1\n", "output": "(1) / (12) = 1/12, left: 1/12, 13, 1\n(13) + (1/12) = 157/12, left: 157/12, 1\n(1) + (157/12) = 169/12, left: 169/12\n(12) * (1) = 12, left: 12, 13, 1\n(12) - (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((12 * 1) - 1))"}, {"input": "13 12 1 1\n", "output": "(1) - (13) = -12, left: -12, 12, 1\n(12) / (-12) = -1, left: -1, 1\n(12) + (-12) = 0, left: 0, 1\n(0) - (1) = -1, left: -1\n(12) - (-12) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 - (1 - 13)) / 1)"}, {"input": "13 12 1 1\n", "output": "(13) - (12) = 1, left: 1, 1, 1\n(1) / (1) = 1, left: 1, 1\n(1) * (1) = 1, left: 1, 1\n(1) - (1) = 0, left: 0\n(1) / (1) = 1, left: 1, 1\n(1) + (1) = 2, left: 2, 1\n(2) - (1) = 1, left: 1\n(13) + (12) = 25, left: 25, 1, 1\n(25) / (1) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: (((13 + 12) / 1) - 1)"}, {"input": "13 12 1 1\n", "output": "(12) - (1) = 11, left: 11, 13, 1\n(13) / (11) = 13/11, left: 13/11, 1\n(13/11) / (1) = 13/11, left: 13/11\n(1) * (13/11) = 13/11, left: 13/11\n(1) / (13/11) = 11/13, left: 11/13\n(11) - (13) = -2, left: -2, 1\n(-2) / (1) = -2, left: -2\n(1) * (-2) = -2, left: -2\n(13) + (11) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + (12 - 1)) / 1)"}, {"input": "13 12 1 1\n", "output": "(1) - (13) = -12, left: -12, 12, 1\n(12) * (-12) = -144, left: -144, 1\n(-12) / (12) = -1, left: -1, 1\n(1) / (-1) = -1, left: -1\n(12) / (-12) = -1, left: -1, 1\n(1) * (-1) = -1, left: -1\n(12) + (-12) = 0, left: 0, 1\n(0) / (1) = 0, left: 0\n(12) - (-12) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 - (1 - 13)) / 1)"}, {"input": "13 12 1 1\n", "output": "(12) - (1) = 11, left: 11, 13, 1\n(13) * (1) = 13, left: 13, 11\n(13) - (11) = 2, left: 2\n(11) / (13) = 11/13, left: 11/13\n(11) - (13) = -2, left: -2\n(11) * (13) = 143, left: 143\n(13) / (11) = 13/11, left: 13/11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((12 - 1) + (13 * 1))"}, {"input": "13 12 1 1\n", "output": "(1) / (12) = 1/12, left: 1/12, 13, 1\n(13) - (1/12) = 155/12, left: 155/12, 1\n(1) - (155/12) = -143/12, left: -143/12\n(1) * (1/12) = 1/12, left: 1/12, 13\n(13) - (1) = 12, left: 12, 1/12\n(1/12) + (12) = 145/12, left: 145/12\n(1) / (13) = 1/13, left: 1/13, 1/12\n(12) * (1) = 12, left: 12, 13, 1\n(12) - (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((12 * 1) - 1))"}, {"input": "13 12 1 1\n", "output": "(12) - (1) = 11, left: 11, 13, 1\n(13) * (1) = 13, left: 13, 11\n(13) - (11) = 2, left: 2\n(11) / (13) = 11/13, left: 11/13\n(11) - (13) = -2, left: -2\n(11) * (13) = 143, left: 143\n(13) / (11) = 13/11, left: 13/11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((12 - 1) + (13 * 1))"}, {"input": "13 12 1 1\n", "output": "(12) - (1) = 11, left: 11, 13, 1\n(13) * (1) = 13, left: 13, 11\n(13) - (11) = 2, left: 2\n(11) / (13) = 11/13, left: 11/13\n(11) - (13) = -2, left: -2\n(11) * (13) = 143, left: 143\n(13) / (11) = 13/11, left: 13/11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((12 - 1) + (13 * 1))"}, {"input": "5 7 3 1\n", "output": "(7) / (5) = 7/5, left: 7/5, 3, 1\n(3) * (7/5) = 21/5, left: 21/5, 1\n(3) + (1) = 4, left: 4, 7/5\n(1) - (3) = -2, left: -2, 7/5\n(5) / (7) = 5/7, left: 5/7, 3, 1\n(3) + (5/7) = 26/7, left: 26/7, 1\n(3) * (5/7) = 15/7, left: 15/7, 1\n(5) + (7) = 12, left: 12, 3, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (3 - 1))"}, {"input": "5 7 3 1\n", "output": "(7) * (3) = 21, left: 21, 5, 1\n(21) / (5) = 21/5, left: 21/5, 1\n(21) - (5) = 16, left: 16, 1\n(1) / (16) = 1/16, left: 1/16\n(1) - (5) = -4, left: -4, 21\n(21) + (-4) = 17, left: 17\n(7) / (3) = 7/3, left: 7/3, 5, 1\n(7) - (3) = 4, left: 4, 5, 1\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((7 - 3) * (5 + 1))"}, {"input": "5 7 3 1\n", "output": "(7) - (5) = 2, left: 2, 3, 1\n(5) - (7) = -2, left: -2, 3, 1\n(3) * (-2) = -6, left: -6, 1\n(1) * (-2) = -2, left: -2, 3\n(5) * (7) = 35, left: 35, 3, 1\n(3) + (1) = 4, left: 4, 35\n(1) + (35) = 36, left: 36, 3\n(5) + (7) = 12, left: 12, 3, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (3 - 1))"}, {"input": "5 7 3 1\n", "output": "(5) + (3) = 8, left: 8, 7, 1\n(1) - (8) = -7, left: -7, 7\n(3) - (5) = -2, left: -2, 7, 1\n(1) - (-2) = 3, left: 3, 7\n(5) / (3) = 5/3, left: 5/3, 7, 1\n(5/3) / (7) = 5/21, left: 5/21, 1\n(5) / (7) = 5/7, left: 5/7, 3, 1\n(5) + (7) = 12, left: 12, 3, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (3 - 1))"}, {"input": "5 7 3 1\n", "output": "(1) / (5) = 1/5, left: 1/5, 7, 3\n(7) * (1/5) = 7/5, left: 7/5, 3\n(7) / (1/5) = 35, left: 35, 3\n(3) - (35) = -32, left: -32\n(3) / (7) = 3/7, left: 3/7, 1/5\n(3) + (1/5) = 16/5, left: 16/5, 7\n(3) * (1/5) = 3/5, left: 3/5, 7\n(5) + (1) = 6, left: 6, 7, 3\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (7 - 3))"}, {"input": "5 7 3 1\n", "output": "(7) - (5) = 2, left: 2, 3, 1\n(3) + (2) = 5, left: 5, 1\n(5) - (7) = -2, left: -2, 3, 1\n(1) / (-2) = -1/2, left: -1/2, 3\n(3) * (-1/2) = -3/2, left: -3/2\n(1) - (3) = -2, left: -2, -2\n(5) * (7) = 35, left: 35, 3, 1\n(1) - (35) = -34, left: -34, 3\n(1) + (35) = 36, left: 36, 3\n(35) / (3) = 35/3, left: 35/3, 1\n(5) + (7) = 12, left: 12, 3, 1\n(3) - (12) = -9, left: -9, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (3 - 1))"}, {"input": "5 7 3 1\n", "output": "(5) + (3) = 8, left: 8, 7, 1\n(7) + (8) = 15, left: 15, 1\n(5) - (3) = 2, left: 2, 7, 1\n(5) * (3) = 15, left: 15, 7, 1\n(3) - (5) = -2, left: -2, 7, 1\n(-2) / (7) = -2/7, left: -2/7, 1\n(5) / (3) = 5/3, left: 5/3, 7, 1\n(5/3) - (7) = -16/3, left: -16/3, 1\n(7) / (1) = 7, left: 7, 5/3\n(5) / (7) = 5/7, left: 5/7, 3, 1\n(5/7) - (1) = -2/7, left: -2/7, 3\n(5) + (7) = 12, left: 12, 3, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (3 - 1))"}, {"input": "3 2 12 6\n", "output": "(3) / (2) = 3/2, left: 3/2, 12, 6\n(3/2) - (6) = -9/2, left: -9/2, 12\n(-9/2) / (12) = -3/8, left: -3/8\n(12) + (3/2) = 27/2, left: 27/2, 6\n(12) * (3/2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (12 * (3 / 2)))"}, {"input": "3 2 12 6\n", "output": "(12) / (2) = 6, left: 6, 3, 6\n(3) - (6) = -3, left: -3, 6\n(-3) - (6) = -9, left: -9\n(3) * (6) = 18, left: 18, 6\n(18) / (6) = 3, left: 3\n(6) + (18) = 24, left: 24\nreach 24! expression: ((12 / 2) + (3 * 6))"}, {"input": "3 2 12 6\n", "output": "(12) / (2) = 6, left: 6, 3, 6\n(3) - (6) = -3, left: -3, 6\n(6) + (-3) = 3, left: 3\n(6) - (-3) = 9, left: 9\n(3) + (6) = 9, left: 9, 6\n(9) / (6) = 3/2, left: 3/2\n(9) - (6) = 3, left: 3\n(6) - (3) = 3, left: 3, 6\n(3) * (6) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((12 / 2) + (3 * 6))"}, {"input": "3 2 12 6\n", "output": "(3) / (2) = 3/2, left: 3/2, 12, 6\n(6) / (3/2) = 4, left: 4, 12\n(6) * (3/2) = 9, left: 9, 12\n(9) / (12) = 3/4, left: 3/4\n(6) / (12) = 1/2, left: 1/2, 3/2\n(12) - (6) = 6, left: 6, 3/2\n(6) - (12) = -6, left: -6, 3/2\n(3/2) / (-6) = -1/4, left: -1/4\n(12) * (3/2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (12 * (3 / 2)))"}, {"input": "3 2 12 6\n", "output": "(12) - (6) = 6, left: 6, 3, 2\n(2) / (6) = 1/3, left: 1/3, 3\n(6) - (2) = 4, left: 4, 3\n(6) / (2) = 3, left: 3, 3\n(3) - (3) = 0, left: 0\n(2) - (6) = -4, left: -4, 3\n(3) / (-4) = -3/4, left: -3/4\n(2) + (6) = 8, left: 8, 3\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (12 - 6)))"}, {"input": "3 2 12 6\n", "output": "(2) - (12) = -10, left: -10, 3, 6\n(6) - (-10) = 16, left: 16, 3\n(3) - (16) = -13, left: -13\n(3) / (-10) = -3/10, left: -3/10, 6\n(12) - (2) = 10, left: 10, 3, 6\n(6) - (3) = 3, left: 3, 10\n(10) - (3) = 7, left: 7, 6\n(3) + (10) = 13, left: 13, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (12 - 2)) - 6)"}, {"input": "3 2 12 6\n", "output": "(2) / (6) = 1/3, left: 1/3, 3, 12\n(12) / (3) = 4, left: 4, 1/3\n(6) / (2) = 3, left: 3, 3, 12\n(12) * (3) = 36, left: 36, 3\n(3) * (36) = 108, left: 108\n(6) - (2) = 4, left: 4, 3, 12\n(3) + (12) = 15, left: 15, 4\n(3) - (12) = -9, left: -9, 4\n(3) * (4) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (3 * (6 - 2)))"}, {"input": "2 6 6 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 6, 2\n(6) * (2) = 12, left: 12, 1/3\n(2) - (6) = -4, left: -4, 1/3\n(1/3) - (-4) = 13/3, left: 13/3\n(6) + (2) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((6 + 2) / (2 / 6))"}, {"input": "2 6 6 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 6, 2\n(2) / (1/3) = 6, left: 6, 6\n(6) / (2) = 3, left: 3, 1/3\n(2) - (6) = -4, left: -4, 1/3\n(6) + (2) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((6 + 2) / (2 / 6))"}, {"input": "2 6 6 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 6, 2\n(1/3) - (6) = -17/3, left: -17/3, 2\n(2) + (-17/3) = -11/3, left: -11/3\n(6) / (1/3) = 18, left: 18, 2\n(2) - (1/3) = 5/3, left: 5/3, 6\n(2) - (6) = -4, left: -4, 1/3\n(2) / (6) = 1/3, left: 1/3, 1/3\n(1/3) - (1/3) = 0, left: 0\n(6) + (2) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((6 + 2) / (2 / 6))"}, {"input": "2 6 6 2\n", "output": "(6) + (2) = 8, left: 8, 2, 6\n(6) - (8) = -2, left: -2, 2\n(2) - (-2) = 4, left: 4\n(2) * (-2) = -4, left: -4\n(8) - (6) = 2, left: 2, 2\n(2) / (2) = 1, left: 1\n(2) - (2) = 0, left: 0\n(6) * (8) = 48, left: 48, 2\n(2) / (48) = 1/24, left: 1/24\n(48) / (2) = 24, left: 24\nreach 24! expression: ((6 * (6 + 2)) / 2)"}, {"input": "2 6 6 2\n", "output": "(2) / (2) = 1, left: 1, 6, 6\n(6) / (6) = 1, left: 1, 1\n(2) - (2) = 0, left: 0, 6, 6\n(6) - (6) = 0, left: 0, 0\n(0) - (6) = -6, left: -6, 6\n(2) * (2) = 4, left: 4, 6, 6\n(6) / (4) = 3/2, left: 3/2, 6\n(6) * (2) = 12, left: 12, 2, 6\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((6 * 2) + (2 * 6))"}, {"input": "2 6 6 2\n", "output": "(6) / (2) = 3, left: 3, 2, 6\n(2) - (6) = -4, left: -4, 3\n(6) - (2) = 4, left: 4, 3\n(3) * (4) = 12, left: 12\n(3) + (4) = 7, left: 7\n(2) / (6) = 1/3, left: 1/3, 3\n(3) * (1/3) = 1, left: 1\n(2) + (6) = 8, left: 8, 3\n(8) - (3) = 5, left: 5\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 / 2) * (2 + 6))"}, {"input": "2 6 6 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 6, 2\n(6) * (2) = 12, left: 12, 1/3\n(1/3) * (12) = 4, left: 4\n(6) / (2) = 3, left: 3, 1/3\n(6) - (2) = 4, left: 4, 1/3\n(2) / (6) = 1/3, left: 1/3, 1/3\n(2) - (6) = -4, left: -4, 1/3\n(1/3) * (-4) = -4/3, left: -4/3\n(6) + (2) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((6 + 2) / (2 / 6))"}, {"input": "2 6 6 2\n", "output": "(2) * (2) = 4, left: 4, 6, 6\n(6) + (4) = 10, left: 10, 6\n(2) + (2) = 4, left: 4, 6, 6\n(6) - (6) = 0, left: 0, 4\n(2) - (2) = 0, left: 0, 6, 6\n(2) / (2) = 1, left: 1, 6, 6\n(6) * (6) = 36, left: 36, 1\n(1) - (36) = -35, left: -35\n(6) / (6) = 1, left: 1, 1\n(6) / (1) = 6, left: 6, 6\n(6) * (2) = 12, left: 12, 2, 6\n(12) / (6) = 2, left: 2, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((6 * 2) + (2 * 6))"}, {"input": "2 6 6 2\n", "output": "(6) + (2) = 8, left: 8, 2, 6\n(6) - (8) = -2, left: -2, 2\n(2) - (-2) = 4, left: 4\n(2) + (-2) = 0, left: 0\n(2) * (-2) = -4, left: -4\n(8) - (6) = 2, left: 2, 2\n(2) / (2) = 1, left: 1\n(2) / (2) = 1, left: 1\n(2) * (2) = 4, left: 4\n(2) - (2) = 0, left: 0\n(6) * (8) = 48, left: 48, 2\n(2) * (48) = 96, left: 96\n(2) + (48) = 50, left: 50\n(48) / (2) = 24, left: 24\nreach 24! expression: ((6 * (6 + 2)) / 2)"}, {"input": "11 4 2 3\n", "output": "(4) / (11) = 4/11, left: 4/11, 2, 3\n(11) / (4) = 11/4, left: 11/4, 2, 3\n(2) / (3) = 2/3, left: 2/3, 11/4\n(11) + (4) = 15, left: 15, 2, 3\n(15) - (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 4) - 3))"}, {"input": "11 4 2 3\n", "output": "(11) + (4) = 15, left: 15, 2, 3\n(3) * (15) = 45, left: 45, 2\n(3) / (15) = 1/5, left: 1/5, 2\n(2) / (1/5) = 10, left: 10\n(15) - (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 4) - 3))"}, {"input": "11 4 2 3\n", "output": "(4) + (3) = 7, left: 7, 11, 2\n(2) * (7) = 14, left: 14, 11\n(4) / (3) = 4/3, left: 4/3, 11, 2\n(2) - (11) = -9, left: -9, 4/3\n(4) * (3) = 12, left: 12, 11, 2\n(11) + (2) = 13, left: 13, 12\n(12) / (2) = 6, left: 6, 11\n(4) - (3) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (4 - 3)))"}, {"input": "11 4 2 3\n", "output": "(11) + (4) = 15, left: 15, 2, 3\n(3) * (15) = 45, left: 45, 2\n(45) / (2) = 45/2, left: 45/2\n(3) / (15) = 1/5, left: 1/5, 2\n(2) * (1/5) = 2/5, left: 2/5\n(3) - (15) = -12, left: -12, 2\n(3) + (15) = 18, left: 18, 2\n(2) + (18) = 20, left: 20\n(15) - (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 4) - 3))"}, {"input": "11 4 2 3\n", "output": "(4) / (2) = 2, left: 2, 11, 3\n(2) / (4) = 1/2, left: 1/2, 11, 3\n(4) - (2) = 2, left: 2, 11, 3\n(2) - (11) = -9, left: -9, 3\n(3) / (-9) = -1/3, left: -1/3\n(4) + (2) = 6, left: 6, 11, 3\n(11) * (6) = 66, left: 66, 3\n(11) - (2) = 9, left: 9, 4, 3\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((11 - 2) - 3))"}, {"input": "11 4 2 3\n", "output": "(4) / (11) = 4/11, left: 4/11, 2, 3\n(11) - (4) = 7, left: 7, 2, 3\n(2) / (3) = 2/3, left: 2/3, 7\n(4) - (11) = -7, left: -7, 2, 3\n(2) - (3) = -1, left: -1, -7\n(11) * (4) = 44, left: 44, 2, 3\n(11) / (4) = 11/4, left: 11/4, 2, 3\n(11) + (4) = 15, left: 15, 2, 3\n(15) - (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 4) - 3))"}, {"input": "11 4 2 3\n", "output": "(4) - (11) = -7, left: -7, 2, 3\n(4) / (11) = 4/11, left: 4/11, 2, 3\n(11) * (4) = 44, left: 44, 2, 3\n(2) + (3) = 5, left: 5, 44\n(2) * (3) = 6, left: 6, 44\n(44) / (6) = 22/3, left: 22/3\n(11) + (4) = 15, left: 15, 2, 3\n(15) - (2) = 13, left: 13, 3\n(15) - (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 4) - 3))"}, {"input": "11 4 2 3\n", "output": "(4) / (2) = 2, left: 2, 11, 3\n(3) * (2) = 6, left: 6, 11\n(11) + (2) = 13, left: 13, 3\n(2) - (4) = -2, left: -2, 11, 3\n(-2) / (11) = -2/11, left: -2/11, 3\n(4) + (2) = 6, left: 6, 11, 3\n(6) - (3) = 3, left: 3, 11\n(11) + (3) = 14, left: 14, 6\n(4) * (2) = 8, left: 8, 11, 3\n(8) / (11) = 8/11, left: 8/11, 3\n(2) - (11) = -9, left: -9, 4, 3\n(11) - (2) = 9, left: 9, 4, 3\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((11 - 2) - 3))"}, {"input": "4 5 7 8\n", "output": "(4) * (8) = 32, left: 32, 5, 7\n(7) - (5) = 2, left: 2, 32\n(2) - (32) = -30, left: -30\n(5) / (7) = 5/7, left: 5/7, 32\n(7) - (32) = -25, left: -25, 5\n(8) / (4) = 2, left: 2, 5, 7\n(5) - (7) = -2, left: -2, 2\n(7) / (5) = 7/5, left: 7/5, 2\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((8 / 4) * (5 + 7))"}, {"input": "4 5 7 8\n", "output": "(5) / (4) = 5/4, left: 5/4, 7, 8\n(4) - (5) = -1, left: -1, 7, 8\n(-1) - (8) = -9, left: -9, 7\n(4) * (5) = 20, left: 20, 7, 8\n(20) / (7) = 20/7, left: 20/7, 8\n(8) - (7) = 1, left: 1, 20\n(8) + (20) = 28, left: 28, 7\n(4) + (5) = 9, left: 9, 7, 8\n(7) + (9) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (7 + (4 + 5)))"}, {"input": "4 5 7 8\n", "output": "(8) - (7) = 1, left: 1, 4, 5\n(4) / (5) = 4/5, left: 4/5, 1\n(1) / (4/5) = 5/4, left: 5/4\n(4) - (1) = 3, left: 3, 5\n(5) / (3) = 5/3, left: 5/3\n(4) / (1) = 4, left: 4, 5\n(4) - (5) = -1, left: -1\n(4) + (1) = 5, left: 5, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (8 - 7)))"}, {"input": "4 5 7 8\n", "output": "(8) / (5) = 8/5, left: 8/5, 4, 7\n(7) + (8/5) = 43/5, left: 43/5, 4\n(4) / (7) = 4/7, left: 4/7, 8/5\n(4) + (7) = 11, left: 11, 8/5\n(4) / (8/5) = 5/2, left: 5/2, 7\n(4) - (8/5) = 12/5, left: 12/5, 7\n(8/5) / (4) = 2/5, left: 2/5, 7\n(5) + (8) = 13, left: 13, 4, 7\n(4) + (13) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (4 + (5 + 8)))"}, {"input": "4 5 7 8\n", "output": "(4) - (5) = -1, left: -1, 7, 8\n(-1) - (7) = -8, left: -8, 8\n(8) - (-8) = 16, left: 16\n(-1) / (8) = -1/8, left: -1/8, 7\n(7) / (-1/8) = -56, left: -56\n(4) * (5) = 20, left: 20, 7, 8\n(7) * (8) = 56, left: 56, 20\n(8) - (20) = -12, left: -12, 7\n(4) / (5) = 4/5, left: 4/5, 7, 8\n(5) - (4) = 1, left: 1, 7, 8\n(7) / (1) = 7, left: 7, 8\n(4) + (5) = 9, left: 9, 7, 8\n(7) + (9) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (7 + (4 + 5)))"}, {"input": "5 4 1 3\n", "output": "(4) + (3) = 7, left: 7, 5, 1\n(3) - (4) = -1, left: -1, 5, 1\n(4) - (3) = 1, left: 1, 5, 1\n(1) + (1) = 2, left: 2, 5\n(4) * (3) = 12, left: 12, 5, 1\n(5) / (1) = 5, left: 5, 12\n(1) * (3) = 3, left: 3, 5, 4\n(1) + (3) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((1 + 3) + (5 * 4))"}, {"input": "5 4 1 3\n", "output": "(3) / (1) = 3, left: 3, 5, 4\n(1) / (3) = 1/3, left: 1/3, 5, 4\n(1) - (3) = -2, left: -2, 5, 4\n(5) - (-2) = 7, left: 7, 4\n(4) + (7) = 11, left: 11\n(3) - (1) = 2, left: 2, 5, 4\n(4) * (2) = 8, left: 8, 5\n(1) + (3) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((1 + 3) + (5 * 4))"}, {"input": "5 4 1 3\n", "output": "(1) * (3) = 3, left: 3, 5, 4\n(4) + (3) = 7, left: 7, 5\n(1) - (3) = -2, left: -2, 5, 4\n(1) / (3) = 1/3, left: 1/3, 5, 4\n(5) / (4) = 5/4, left: 5/4, 1/3\n(4) / (1/3) = 12, left: 12, 5\n(1) + (3) = 4, left: 4, 5, 4\n(5) - (4) = 1, left: 1, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 * (1 + 3)))"}, {"input": "5 4 1 3\n", "output": "(3) / (4) = 3/4, left: 3/4, 5, 1\n(3/4) - (1) = -1/4, left: -1/4, 5\n(4) - (3) = 1, left: 1, 5, 1\n(5) * (1) = 5, left: 5, 1\n(5) / (1) = 5, left: 5\n(4) * (3) = 12, left: 12, 5, 1\n(3) - (4) = -1, left: -1, 5, 1\n(5) + (3) = 8, left: 8, 4, 1\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((5 + 3) * (4 - 1))"}, {"input": "5 4 1 3\n", "output": "(5) * (3) = 15, left: 15, 4, 1\n(4) / (1) = 4, left: 4, 15\n(5) - (3) = 2, left: 2, 4, 1\n(4) * (2) = 8, left: 8, 1\n(3) / (5) = 3/5, left: 3/5, 4, 1\n(1) - (3/5) = 2/5, left: 2/5, 4\n(5) + (3) = 8, left: 8, 4, 1\n(4) - (8) = -4, left: -4, 1\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((5 + 3) * (4 - 1))"}, {"input": "5 4 1 3\n", "output": "(3) / (4) = 3/4, left: 3/4, 5, 1\n(3/4) / (1) = 3/4, left: 3/4, 5\n(3) - (4) = -1, left: -1, 5, 1\n(5) * (-1) = -5, left: -5, 1\n(1) / (5) = 1/5, left: 1/5, -1\n(4) - (3) = 1, left: 1, 5, 1\n(1) * (3) = 3, left: 3, 5, 4\n(5) * (3) = 15, left: 15, 4\n(4) / (3) = 4/3, left: 4/3, 5\n(3) / (1) = 3, left: 3, 5, 4\n(5) * (4) = 20, left: 20, 3\n(1) + (3) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((1 + 3) + (5 * 4))"}, {"input": "5 4 1 3\n", "output": "(3) / (1) = 3, left: 3, 5, 4\n(1) / (3) = 1/3, left: 1/3, 5, 4\n(4) - (5) = -1, left: -1, 1/3\n(5) / (1/3) = 15, left: 15, 4\n(1) - (3) = -2, left: -2, 5, 4\n(5) / (-2) = -5/2, left: -5/2, 4\n(4) + (-5/2) = 3/2, left: 3/2\n(-2) / (4) = -1/2, left: -1/2, 5\n(3) - (1) = 2, left: 2, 5, 4\n(4) + (2) = 6, left: 6, 5\n(5) * (2) = 10, left: 10, 4\n(1) + (3) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((1 + 3) + (5 * 4))"}, {"input": "5 4 1 3\n", "output": "(3) / (1) = 3, left: 3, 5, 4\n(1) * (3) = 3, left: 3, 5, 4\n(5) + (3) = 8, left: 8, 4\n(1) - (3) = -2, left: -2, 5, 4\n(4) * (-2) = -8, left: -8, 5\n(5) - (-8) = 13, left: 13\n(5) + (4) = 9, left: 9, -2\n(1) / (3) = 1/3, left: 1/3, 5, 4\n(4) / (1/3) = 12, left: 12, 5\n(4) * (1/3) = 4/3, left: 4/3, 5\n(1) + (3) = 4, left: 4, 5, 4\n(5) - (4) = 1, left: 1, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 * (1 + 3)))"}, {"input": "5 4 1 3\n", "output": "(3) / (4) = 3/4, left: 3/4, 5, 1\n(4) + (3) = 7, left: 7, 5, 1\n(5) * (1) = 5, left: 5, 7\n(7) * (5) = 35, left: 35\n(4) / (3) = 4/3, left: 4/3, 5, 1\n(5) + (4/3) = 19/3, left: 19/3, 1\n(4) * (3) = 12, left: 12, 5, 1\n(5) * (3) = 15, left: 15, 4, 1\n(4) - (15) = -11, left: -11, 1\n(1) * (-11) = -11, left: -11\n(4) / (1) = 4, left: 4, 15\n(5) + (3) = 8, left: 8, 4, 1\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((5 + 3) * (4 - 1))"}, {"input": "1 1 2 10\n", "output": "(1) / (10) = 1/10, left: 1/10, 1, 2\n(1) + (1/10) = 11/10, left: 11/10, 2\n(10) - (1) = 9, left: 9, 1, 2\n(10) / (1) = 10, left: 10, 1, 2\n(2) + (10) = 12, left: 12, 1\n(10) / (1) = 10, left: 10, 2\n(1) + (10) = 11, left: 11, 1, 2\n(2) / (11) = 2/11, left: 2/11, 1\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (1 + 10)))"}, {"input": "1 1 2 10\n", "output": "(1) * (2) = 2, left: 2, 1, 10\n(2) / (1) = 2, left: 2, 1, 10\n(2) - (1) = 1, left: 1, 1, 10\n(1) + (2) = 3, left: 3, 1, 10\n(10) / (1) = 10, left: 10, 1, 2\n(1) + (10) = 11, left: 11, 2\n(1) / (10) = 1/10, left: 1/10, 1, 2\n(1) + (10) = 11, left: 11, 1, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (1 + 10)))"}, {"input": "1 1 2 10\n", "output": "(1) - (1) = 0, left: 0, 2, 10\n(2) + (10) = 12, left: 12, 0\n(0) * (12) = 0, left: 0\n(1) / (1) = 1, left: 1, 2, 10\n(2) + (10) = 12, left: 12, 1\n(1) - (12) = -11, left: -11\n(1) * (1) = 1, left: 1, 2, 10\n(1) + (1) = 2, left: 2, 2, 10\n(10) + (2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 + (1 + 1)))"}, {"input": "1 1 2 10\n", "output": "(10) - (1) = 9, left: 9, 1, 2\n(1) / (9) = 1/9, left: 1/9, 2\n(2) + (9) = 11, left: 11, 1\n(10) / (1) = 10, left: 10, 1, 2\n(1) / (10) = 1/10, left: 1/10, 2\n(2) * (1/10) = 1/5, left: 1/5\n(1) * (10) = 10, left: 10, 1, 2\n(1) + (10) = 11, left: 11, 1, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (1 + 10)))"}, {"input": "1 1 2 10\n", "output": "(1) * (10) = 10, left: 10, 1, 2\n(10) - (2) = 8, left: 8, 1\n(2) * (10) = 20, left: 20, 1\n(1) / (2) = 1/2, left: 1/2, 10\n(1) + (10) = 11, left: 11, 1, 2\n(11) / (2) = 11/2, left: 11/2, 1\n(2) / (1) = 2, left: 2, 11\n(11) * (2) = 22, left: 22\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (1 + 10)))"}, {"input": "1 1 2 10\n", "output": "(1) * (2) = 2, left: 2, 1, 10\n(1) / (2) = 1/2, left: 1/2, 1, 10\n(10) - (1) = 9, left: 9, 1/2\n(2) / (1) = 2, left: 2, 1, 10\n(2) / (1) = 2, left: 2, 1, 10\n(10) - (1) = 9, left: 9, 2\n(2) - (1) = 1, left: 1, 1, 10\n(1) * (2) = 2, left: 2, 1, 10\n(10) / (1) = 10, left: 10, 1, 2\n(1) / (10) = 1/10, left: 1/10, 1, 2\n(1) / (2) = 1/2, left: 1/2, 1/10\n(1) + (10) = 11, left: 11, 1, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (1 + 10)))"}, {"input": "4 3 3 4\n", "output": "(4) - (4) = 0, left: 0, 3, 3\n(3) - (0) = 3, left: 3, 3\n(3) / (3) = 1, left: 1\n(3) + (0) = 3, left: 3, 3\n(4) + (4) = 8, left: 8, 3, 3\n(3) * (3) = 9, left: 9, 8\n(8) * (9) = 72, left: 72\n(3) * (4) = 12, left: 12, 4, 3\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((3 * 4) + (4 * 3))"}, {"input": "4 3 3 4\n", "output": "(4) / (4) = 1, left: 1, 3, 3\n(4) - (4) = 0, left: 0, 3, 3\n(3) * (0) = 0, left: 0, 3\n(3) * (3) = 9, left: 9, 4, 4\n(3) / (3) = 1, left: 1, 4, 4\n(4) / (3) = 4/3, left: 4/3, 3, 4\n(4) / (3) = 4/3, left: 4/3, 4/3\n(4) * (3) = 12, left: 12, 3, 4\n(3) * (4) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((4 * 3) + (3 * 4))"}, {"input": "4 3 3 4\n", "output": "(3) / (4) = 3/4, left: 3/4, 3, 4\n(3) / (4) = 3/4, left: 3/4, 3/4\n(4) / (3) = 4/3, left: 4/3, 3, 4\n(3) * (4) = 12, left: 12, 4/3\n(4) - (3) = 1, left: 1, 3, 4\n(4) + (3) = 7, left: 7, 3, 4\n(4) / (3) = 4/3, left: 4/3, 7\n(4) * (3) = 12, left: 12, 3, 4\n(3) * (4) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((4 * 3) + (3 * 4))"}, {"input": "4 3 3 4\n", "output": "(4) / (3) = 4/3, left: 4/3, 4, 3\n(4) + (3) = 7, left: 7, 4/3\n(3) + (4) = 7, left: 7, 4, 3\n(4) / (3) = 4/3, left: 4/3, 7\n(3) / (4) = 3/4, left: 3/4, 4, 3\n(3) / (4) = 3/4, left: 3/4, 3/4\n(3) * (4) = 12, left: 12, 4, 3\n(4) + (12) = 16, left: 16, 3\n(12) - (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 4) - 4))"}, {"input": "4 3 3 4\n", "output": "(4) + (3) = 7, left: 7, 3, 4\n(4) - (3) = 1, left: 1, 3, 4\n(4) - (1) = 3, left: 3, 3\n(4) / (3) = 4/3, left: 4/3, 3, 4\n(4) * (4/3) = 16/3, left: 16/3, 3\n(3) - (4) = -1, left: -1, 3, 4\n(3) / (4) = 3/4, left: 3/4, 3, 4\n(4) * (3) = 12, left: 12, 3, 4\n(3) * (4) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((4 * 3) + (3 * 4))"}, {"input": "4 3 3 4\n", "output": "(4) * (4) = 16, left: 16, 3, 3\n(3) / (3) = 1, left: 1, 16\n(4) - (4) = 0, left: 0, 3, 3\n(3) - (0) = 3, left: 3, 3\n(3) * (3) = 9, left: 9, 4, 4\n(4) / (9) = 4/9, left: 4/9, 4\n(4) - (4/9) = 32/9, left: 32/9\n(3) / (3) = 1, left: 1, 4, 4\n(4) / (1) = 4, left: 4, 4\n(4) - (3) = 1, left: 1, 3, 4\n(3) - (4) = -1, left: -1, 3, 4\n(4) * (3) = 12, left: 12, 3, 4\n(3) * (4) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((4 * 3) + (3 * 4))"}, {"input": "4 3 3 4\n", "output": "(4) / (4) = 1, left: 1, 3, 3\n(3) + (1) = 4, left: 4, 3\n(4) + (4) = 8, left: 8, 3, 3\n(3) / (4) = 3/4, left: 3/4, 4, 3\n(4) / (3/4) = 16/3, left: 16/3, 3\n(3) - (4) = -1, left: -1, 4, 3\n(3) / (-1) = -3, left: -3, 4\n(4) + (-3) = 1, left: 1\n(4) / (-1) = -4, left: -4, 3\n(3) * (4) = 12, left: 12, 4, 3\n(3) * (12) = 36, left: 36, 4\n(4) + (3) = 7, left: 7, 12\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((3 * 4) + (4 * 3))"}, {"input": "4 3 3 4\n", "output": "(4) / (3) = 4/3, left: 4/3, 4, 3\n(4/3) - (3) = -5/3, left: -5/3, 4\n(3) + (4) = 7, left: 7, 4, 3\n(3) / (7) = 3/7, left: 3/7, 4\n(4) + (3) = 7, left: 7, 7\n(3) - (4) = -1, left: -1, 4, 3\n(3) - (-1) = 4, left: 4, 4\n(4) - (3) = 1, left: 1, 4, 3\n(4) * (1) = 4, left: 4, 3\n(3) / (4) = 3/4, left: 3/4, 4, 3\n(3/4) - (4) = -13/4, left: -13/4, 3\n(3) * (4) = 12, left: 12, 4, 3\n(12) - (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 4) - 4))"}, {"input": "4 3 3 4\n", "output": "(3) / (4) = 3/4, left: 3/4, 3, 4\n(3/4) / (3) = 1/4, left: 1/4, 4\n(4) + (3/4) = 19/4, left: 19/4, 3\n(4) / (3) = 4/3, left: 4/3, 3, 4\n(4) - (3) = 1, left: 1, 3, 4\n(4) + (3) = 7, left: 7, 3, 4\n(3) * (7) = 21, left: 21, 4\n(4) + (21) = 25, left: 25\n(3) - (7) = -4, left: -4, 4\n(4) / (7) = 4/7, left: 4/7, 3\n(7) - (4) = 3, left: 3, 3\n(4) * (3) = 12, left: 12, 3, 4\n(3) * (4) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((4 * 3) + (3 * 4))"}, {"input": "3 1 3 3\n", "output": "(3) * (3) = 9, left: 9, 3, 1\n(9) / (1) = 9, left: 9, 3\n(9) - (3) = 6, left: 6\n(3) / (9) = 1/3, left: 1/3\n(3) - (9) = -6, left: -6\n(9) / (3) = 3, left: 3\n(3) + (9) = 12, left: 12\n(9) - (1) = 8, left: 8, 3\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 3) - 1))"}, {"input": "3 1 3 3\n", "output": "(3) / (3) = 1, left: 1, 1, 3\n(1) / (3) = 1/3, left: 1/3, 1\n(1) - (3) = -2, left: -2, 1\n(1) - (1) = 0, left: 0, 3\n(3) + (3) = 6, left: 6, 1, 3\n(3) - (1) = 2, left: 2, 6\n(1) * (3) = 3, left: 3, 6\n(6) / (3) = 2, left: 2\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (1 + 3))"}, {"input": "3 1 3 3\n", "output": "(1) / (3) = 1/3, left: 1/3, 3, 3\n(3) * (1/3) = 1, left: 1, 3\n(3) - (3) = 0, left: 0, 1/3\n(3) * (1) = 3, left: 3, 3, 3\n(3) + (3) = 6, left: 6, 3\n(3) / (6) = 1/2, left: 1/2\n(3) + (1) = 4, left: 4, 3, 3\n(4) - (3) = 1, left: 1, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((3 + 1) * (3 + 3))"}, {"input": "3 1 3 3\n", "output": "(3) * (1) = 3, left: 3, 3, 3\n(3) / (3) = 1, left: 1, 3\n(3) / (1) = 3, left: 3\n(3) * (3) = 9, left: 9, 3\n(3) * (9) = 27, left: 27\n(1) / (3) = 1/3, left: 1/3, 3, 3\n(3) - (1) = 2, left: 2, 3, 3\n(3) + (1) = 4, left: 4, 3, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((3 + 1) * (3 + 3))"}, {"input": "3 1 3 3\n", "output": "(3) + (3) = 6, left: 6, 3, 1\n(3) / (6) = 1/2, left: 1/2, 1\n(1) + (1/2) = 3/2, left: 3/2\n(3) - (6) = -3, left: -3, 1\n(1) - (-3) = 4, left: 4\n(3) * (6) = 18, left: 18, 1\n(3) / (1) = 3, left: 3, 6\n(6) / (3) = 2, left: 2\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (3 + 1))"}, {"input": "3 1 3 3\n", "output": "(3) * (3) = 9, left: 9, 3, 1\n(9) / (1) = 9, left: 9, 3\n(9) - (3) = 6, left: 6\n(3) / (9) = 1/3, left: 1/3\n(3) - (9) = -6, left: -6\n(9) / (3) = 3, left: 3\n(3) * (9) = 27, left: 27\n(3) + (9) = 12, left: 12\n(9) - (1) = 8, left: 8, 3\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 3) - 1))"}, {"input": "3 1 3 3\n", "output": "(1) / (3) = 1/3, left: 1/3, 3, 3\n(3) - (1/3) = 8/3, left: 8/3, 3\n(3) * (1) = 3, left: 3, 3, 3\n(3) + (3) = 6, left: 6, 3\n(3) * (3) = 9, left: 9, 3\n(3) / (3) = 1, left: 1, 3\n(1) - (3) = -2, left: -2\n(3) - (3) = 0, left: 0, 3\n(3) - (3) = 0, left: 0, 3\n(3) + (1) = 4, left: 4, 3, 3\n(3) + (4) = 7, left: 7, 3\n(3) + (7) = 10, left: 10\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((3 + 1) * (3 + 3))"}, {"input": "3 1 3 3\n", "output": "(3) * (1) = 3, left: 3, 3, 3\n(1) / (3) = 1/3, left: 1/3, 3, 3\n(3) / (1/3) = 9, left: 9, 3\n(3) * (9) = 27, left: 27\n(3) / (1) = 3, left: 3, 3, 3\n(3) - (3) = 0, left: 0, 3\n(3) - (1) = 2, left: 2, 3, 3\n(3) * (3) = 9, left: 9, 2\n(2) - (3) = -1, left: -1, 3\n(3) + (1) = 4, left: 4, 3, 3\n(4) / (3) = 4/3, left: 4/3, 3\n(3) / (3) = 1, left: 1, 4\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((3 + 1) * (3 + 3))"}, {"input": "3 1 3 3\n", "output": "(3) * (3) = 9, left: 9, 3, 1\n(9) / (1) = 9, left: 9, 3\n(9) - (3) = 6, left: 6\n(3) / (9) = 1/3, left: 1/3\n(3) - (9) = -6, left: -6\n(9) / (3) = 3, left: 3\n(3) * (9) = 27, left: 27\n(3) + (9) = 12, left: 12\n(9) - (1) = 8, left: 8, 3\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 3) - 1))"}, {"input": "8 2 3 9\n", "output": "(3) / (8) = 3/8, left: 3/8, 2, 9\n(3/8) - (2) = -13/8, left: -13/8, 9\n(8) - (3) = 5, left: 5, 2, 9\n(3) - (8) = -5, left: -5, 2, 9\n(9) - (2) = 7, left: 7, -5\n(8) + (3) = 11, left: 11, 2, 9\n(2) + (9) = 11, left: 11, 11\n(2) / (8) = 1/4, left: 1/4, 3, 9\n(9) - (3) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((9 - 3) / (2 / 8))"}, {"input": "8 2 3 9\n", "output": "(8) * (3) = 24, left: 24, 2, 9\n(3) - (8) = -5, left: -5, 2, 9\n(8) + (3) = 11, left: 11, 2, 9\n(2) - (8) = -6, left: -6, 3, 9\n(-6) - (9) = -15, left: -15, 3\n(8) - (2) = 6, left: 6, 3, 9\n(9) + (6) = 15, left: 15, 3\n(8) / (2) = 4, left: 4, 3, 9\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 / 2) * (9 - 3))"}, {"input": "8 2 3 9\n", "output": "(3) / (9) = 1/3, left: 1/3, 8, 2\n(8) - (2) = 6, left: 6, 1/3\n(8) / (2) = 4, left: 4, 1/3\n(8) / (1/3) = 24, left: 24, 2\n(8) + (1/3) = 25/3, left: 25/3, 2\n(2) / (25/3) = 6/25, left: 6/25\n(2) / (1/3) = 6, left: 6, 8\n(9) - (3) = 6, left: 6, 8, 2\n(6) / (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 3) / 2))"}, {"input": "8 2 3 9\n", "output": "(9) - (3) = 6, left: 6, 8, 2\n(8) / (6) = 4/3, left: 4/3, 2\n(4/3) / (2) = 2/3, left: 2/3\n(2) / (4/3) = 3/2, left: 3/2\n(2) - (4/3) = 2/3, left: 2/3\n(8) - (6) = 2, left: 2, 2\n(2) / (2) = 1, left: 1\n(2) + (2) = 4, left: 4\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * (9 - 3)) / 2)"}, {"input": "8 2 3 9\n", "output": "(8) / (2) = 4, left: 4, 3, 9\n(9) * (4) = 36, left: 36, 3\n(3) + (36) = 39, left: 39\n(9) + (4) = 13, left: 13, 3\n(3) / (13) = 3/13, left: 3/13\n(13) / (3) = 13/3, left: 13/3\n(4) - (9) = -5, left: -5, 3\n(4) / (9) = 4/9, left: 4/9, 3\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 / 2) * (9 - 3))"}, {"input": "8 2 3 9\n", "output": "(8) * (3) = 24, left: 24, 2, 9\n(3) / (8) = 3/8, left: 3/8, 2, 9\n(9) - (2) = 7, left: 7, 3/8\n(2) + (3/8) = 19/8, left: 19/8, 9\n(8) - (3) = 5, left: 5, 2, 9\n(8) / (3) = 8/3, left: 8/3, 2, 9\n(2) + (9) = 11, left: 11, 8/3\n(3) - (8) = -5, left: -5, 2, 9\n(8) + (3) = 11, left: 11, 2, 9\n(8) - (2) = 6, left: 6, 3, 9\n(9) - (6) = 3, left: 3, 3\n(8) / (2) = 4, left: 4, 3, 9\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 / 2) * (9 - 3))"}, {"input": "3 1 12 12\n", "output": "(1) * (12) = 12, left: 12, 3, 12\n(3) / (12) = 1/4, left: 1/4, 12\n(12) - (3) = 9, left: 9, 12\n(3) + (12) = 15, left: 15, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * (1 * 12)) - 12)"}, {"input": "3 1 12 12\n", "output": "(1) / (3) = 1/3, left: 1/3, 12, 12\n(12) * (1/3) = 4, left: 4, 12\n(12) * (4) = 48, left: 48\n(12) / (1/3) = 36, left: 36, 12\n(12) / (36) = 1/3, left: 1/3\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 / (1 / 3)) - 12)"}, {"input": "3 1 12 12\n", "output": "(1) / (12) = 1/12, left: 1/12, 3, 12\n(3) - (1/12) = 35/12, left: 35/12, 12\n(12) / (35/12) = 144/35, left: 144/35\n(35/12) / (12) = 35/144, left: 35/144\n(3) / (1/12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 / (1 / 12)) - 12)"}, {"input": "3 1 12 12\n", "output": "(3) + (12) = 15, left: 15, 1, 12\n(1) / (12) = 1/12, left: 1/12, 15\n(1) - (15) = -14, left: -14, 12\n(3) * (12) = 36, left: 36, 1, 12\n(36) - (12) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: (((3 * 12) - 12) / 1)"}, {"input": "3 1 12 12\n", "output": "(3) - (12) = -9, left: -9, 1, 12\n(12) + (-9) = 3, left: 3, 1\n(-9) - (1) = -10, left: -10, 12\n(12) / (-10) = -6/5, left: -6/5\n(3) / (12) = 1/4, left: 1/4, 1, 12\n(12) / (3) = 4, left: 4, 1, 12\n(1) * (4) = 4, left: 4, 12\n(3) * (12) = 36, left: 36, 1, 12\n(12) / (1) = 12, left: 12, 36\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * 12) - (12 / 1))"}, {"input": "3 1 12 12\n", "output": "(1) / (12) = 1/12, left: 1/12, 3, 12\n(3) - (1/12) = 35/12, left: 35/12, 12\n(12) - (35/12) = 109/12, left: 109/12\n(35/12) - (12) = -109/12, left: -109/12\n(12) * (35/12) = 35, left: 35\n(35/12) / (12) = 35/144, left: 35/144\n(1/12) - (3) = -35/12, left: -35/12, 12\n(12) * (-35/12) = -35, left: -35\n(3) / (1/12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 / (1 / 12)) - 12)"}, {"input": "3 1 12 12\n", "output": "(1) / (3) = 1/3, left: 1/3, 12, 12\n(12) * (1/3) = 4, left: 4, 12\n(4) / (12) = 1/3, left: 1/3\n(12) * (4) = 48, left: 48\n(12) / (4) = 3, left: 3\n(12) + (4) = 16, left: 16\n(12) / (1/3) = 36, left: 36, 12\n(36) / (12) = 3, left: 3\n(12) - (36) = -24, left: -24\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 / (1 / 3)) - 12)"}, {"input": "3 1 12 12\n", "output": "(1) * (12) = 12, left: 12, 3, 12\n(3) / (12) = 1/4, left: 1/4, 12\n(12) * (1/4) = 3, left: 3\n(3) - (12) = -9, left: -9, 12\n(3) + (12) = 15, left: 15, 12\n(15) - (12) = 3, left: 3\n(12) - (15) = -3, left: -3\n(12) / (3) = 4, left: 4, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * (1 * 12)) - 12)"}, {"input": "3 1 12 12\n", "output": "(12) - (3) = 9, left: 9, 1, 12\n(1) * (9) = 9, left: 9, 12\n(1) + (12) = 13, left: 13, 9\n(3) + (12) = 15, left: 15, 1, 12\n(15) / (1) = 15, left: 15, 12\n(1) - (15) = -14, left: -14, 12\n(-14) - (12) = -26, left: -26\n(3) * (12) = 36, left: 36, 1, 12\n(36) - (12) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: (((3 * 12) - 12) / 1)"}, {"input": "10 3 4 10\n", "output": "(10) / (3) = 10/3, left: 10/3, 10, 4\n(4) - (10) = -6, left: -6, 10/3\n(3) + (10) = 13, left: 13, 10, 4\n(3) * (10) = 30, left: 30, 10, 4\n(4) + (30) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((4 + (3 * 10)) - 10)"}, {"input": "10 3 4 10\n", "output": "(10) * (4) = 40, left: 40, 3, 10\n(3) * (40) = 120, left: 120, 10\n(10) - (4) = 6, left: 6, 3, 10\n(6) - (3) = 3, left: 3, 10\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * 10) - (10 - 4))"}, {"input": "10 3 4 10\n", "output": "(10) / (10) = 1, left: 1, 3, 4\n(10) * (10) = 100, left: 100, 3, 4\n(10) - (10) = 0, left: 0, 3, 4\n(4) + (10) = 14, left: 14, 10, 3\n(10) + (14) = 24, left: 24, 3\n(4) * (10) = 40, left: 40, 10, 3\n(4) / (10) = 2/5, left: 2/5, 10, 3\n(10) - (4) = 6, left: 6, 10, 3\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (10 - 4))"}, {"input": "10 3 4 10\n", "output": "(3) - (10) = -7, left: -7, 4, 10\n(10) * (-7) = -70, left: -70, 4\n(4) * (-70) = -280, left: -280\n(10) + (3) = 13, left: 13, 4, 10\n(10) / (13) = 10/13, left: 10/13, 4\n(3) / (10) = 3/10, left: 3/10, 4, 10\n(4) / (10) = 2/5, left: 2/5, 3/10\n(10) * (3) = 30, left: 30, 4, 10\n(10) - (30) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (10 - (10 * 3)))"}, {"input": "10 3 4 10\n", "output": "(10) / (4) = 5/2, left: 5/2, 3, 10\n(3) / (5/2) = 6/5, left: 6/5, 10\n(10) * (4) = 40, left: 40, 3, 10\n(10) + (4) = 14, left: 14, 3, 10\n(3) * (10) = 30, left: 30, 14\n(10) - (4) = 6, left: 6, 3, 10\n(6) - (3) = 3, left: 3, 10\n(10) * (3) = 30, left: 30\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * 10) - (10 - 4))"}, {"input": "10 3 4 10\n", "output": "(10) / (3) = 10/3, left: 10/3, 10, 4\n(10/3) / (4) = 5/6, left: 5/6, 10\n(4) * (10/3) = 40/3, left: 40/3, 10\n(10) + (4) = 14, left: 14, 10/3\n(3) + (10) = 13, left: 13, 10, 4\n(10) + (4) = 14, left: 14, 13\n(13) / (14) = 13/14, left: 13/14\n(3) * (10) = 30, left: 30, 10, 4\n(4) + (30) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((4 + (3 * 10)) - 10)"}, {"input": "10 3 4 10\n", "output": "(10) * (10) = 100, left: 100, 3, 4\n(10) / (10) = 1, left: 1, 3, 4\n(10) - (10) = 0, left: 0, 3, 4\n(0) / (3) = 0, left: 0, 4\n(4) + (0) = 4, left: 4, 3\n(10) + (10) = 20, left: 20, 3, 4\n(10) - (10) = 0, left: 0, 3, 4\n(3) * (10) = 30, left: 30, 10, 4\n(30) - (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((3 * 10) - 10))"}, {"input": "3 11 7 5\n", "output": "(3) * (5) = 15, left: 15, 11, 7\n(11) * (15) = 165, left: 165, 7\n(3) + (5) = 8, left: 8, 11, 7\n(7) + (5) = 12, left: 12, 3, 11\n(7) * (5) = 35, left: 35, 3, 11\n(7) / (5) = 7/5, left: 7/5, 3, 11\n(3) * (11) = 33, left: 33, 7/5\n(3) - (7) = -4, left: -4, 11, 5\n(5) - (11) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((3 - 7) * (5 - 11))"}, {"input": "3 11 7 5\n", "output": "(11) - (5) = 6, left: 6, 3, 7\n(3) - (6) = -3, left: -3, 7\n(6) - (3) = 3, left: 3, 7\n(3) - (7) = -4, left: -4\n(7) - (6) = 1, left: 1, 3\n(3) * (1) = 3, left: 3\n(7) * (6) = 42, left: 42, 3\n(3) * (7) = 21, left: 21, 6\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((11 - 5) * (7 - 3))"}, {"input": "3 11 7 5\n", "output": "(7) / (5) = 7/5, left: 7/5, 3, 11\n(3) / (7/5) = 15/7, left: 15/7, 11\n(5) - (7) = -2, left: -2, 3, 11\n(7) + (5) = 12, left: 12, 3, 11\n(3) + (11) = 14, left: 14, 12\n(3) * (7) = 21, left: 21, 11, 5\n(5) * (21) = 105, left: 105, 11\n(3) - (7) = -4, left: -4, 11, 5\n(5) - (11) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((3 - 7) * (5 - 11))"}, {"input": "3 11 7 5\n", "output": "(11) - (5) = 6, left: 6, 3, 7\n(6) / (3) = 2, left: 2, 7\n(2) - (7) = -5, left: -5\n(3) * (6) = 18, left: 18, 7\n(6) - (7) = -1, left: -1, 3\n(3) / (-1) = -3, left: -3\n(7) - (6) = 1, left: 1, 3\n(7) / (3) = 7/3, left: 7/3, 6\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((11 - 5) * (7 - 3))"}, {"input": "3 11 7 5\n", "output": "(3) + (5) = 8, left: 8, 11, 7\n(11) * (7) = 77, left: 77, 8\n(3) - (5) = -2, left: -2, 11, 7\n(5) - (3) = 2, left: 2, 11, 7\n(11) - (2) = 9, left: 9, 7\n(3) / (5) = 3/5, left: 3/5, 11, 7\n(7) / (3) = 7/3, left: 7/3, 11, 5\n(7) - (3) = 4, left: 4, 11, 5\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((7 - 3) * (11 - 5))"}, {"input": "11 10 11 2\n", "output": "(10) * (11) = 110, left: 110, 11, 2\n(2) * (110) = 220, left: 220, 11\n(11) - (10) = 1, left: 1, 11, 2\n(1) - (11) = -10, left: -10, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 - 10)))"}, {"input": "11 10 11 2\n", "output": "(10) / (11) = 10/11, left: 10/11, 11, 2\n(11) - (10/11) = 111/11, left: 111/11, 2\n(11) - (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 - 10)))"}, {"input": "11 10 11 2\n", "output": "(11) * (2) = 22, left: 22, 10, 11\n(10) / (22) = 5/11, left: 5/11, 11\n(11) - (10) = 1, left: 1, 11, 2\n(2) / (11) = 2/11, left: 2/11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 - 10)))"}, {"input": "11 10 11 2\n", "output": "(10) / (2) = 5, left: 5, 11, 11\n(11) * (5) = 55, left: 55, 11\n(11) / (10) = 11/10, left: 11/10, 11, 2\n(10) - (11) = -1, left: -1, 11, 2\n(11) - (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 - (10 - 11)))"}, {"input": "11 10 11 2\n", "output": "(10) / (2) = 5, left: 5, 11, 11\n(2) - (10) = -8, left: -8, 11, 11\n(11) + (-8) = 3, left: 3, 11\n(11) + (11) = 22, left: 22, 10, 2\n(22) - (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 11) - 10))"}, {"input": "11 10 11 2\n", "output": "(11) - (2) = 9, left: 9, 10, 11\n(10) + (9) = 19, left: 19, 11\n(10) / (9) = 10/9, left: 10/9, 11\n(11) + (2) = 13, left: 13, 10, 11\n(11) * (13) = 143, left: 143, 10\n(2) - (11) = -9, left: -9, 10, 11\n(11) / (2) = 11/2, left: 11/2, 10, 11\n(11) - (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 - 10)))"}, {"input": "11 10 11 2\n", "output": "(10) / (11) = 10/11, left: 10/11, 11, 2\n(11) + (10/11) = 131/11, left: 131/11, 2\n(131/11) / (2) = 131/22, left: 131/22\n(10/11) / (2) = 5/11, left: 5/11, 11\n(2) * (10/11) = 20/11, left: 20/11, 11\n(11) / (20/11) = 121/20, left: 121/20\n(2) / (11) = 2/11, left: 2/11, 10/11\n(11) - (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 - 10)))"}, {"input": "11 10 11 2\n", "output": "(2) / (10) = 1/5, left: 1/5, 11, 11\n(10) - (2) = 8, left: 8, 11, 11\n(10) / (2) = 5, left: 5, 11, 11\n(10) + (2) = 12, left: 12, 11, 11\n(11) + (11) = 22, left: 22, 12\n(11) - (11) = 0, left: 0, 10, 2\n(0) - (2) = -2, left: -2, 10\n(11) + (11) = 22, left: 22, 10, 2\n(22) - (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((11 + 11) - 10))"}, {"input": "11 10 11 2\n", "output": "(10) * (11) = 110, left: 110, 11, 2\n(11) - (2) = 9, left: 9, 110\n(110) * (9) = 990, left: 990\n(110) / (2) = 55, left: 55, 11\n(55) / (11) = 5, left: 5\n(11) + (110) = 121, left: 121, 2\n(2) * (121) = 242, left: 242\n(11) - (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (11 - 10)))"}, {"input": "11 10 11 2\n", "output": "(2) - (10) = -8, left: -8, 11, 11\n(11) * (11) = 121, left: 121, -8\n(10) + (2) = 12, left: 12, 11, 11\n(11) - (2) = 9, left: 9, 10, 11\n(2) / (11) = 2/11, left: 2/11, 10, 11\n(2/11) - (10) = -108/11, left: -108/11, 11\n(11) / (10) = 11/10, left: 11/10, 11, 2\n(10) - (11) = -1, left: -1, 11, 2\n(11) - (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 - (10 - 11)))"}, {"input": "9 6 5 4\n", "output": "(4) / (5) = 4/5, left: 4/5, 9, 6\n(4/5) / (6) = 2/15, left: 2/15, 9\n(6) - (4/5) = 26/5, left: 26/5, 9\n(9) * (4/5) = 36/5, left: 36/5, 6\n(4/5) / (9) = 4/45, left: 4/45, 6\n(6) - (9) = -3, left: -3, 4/5\n(9) * (6) = 54, left: 54, 4/5\n(5) + (4) = 9, left: 9, 9, 6\n(9) + (6) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((5 + 4) + (9 + 6))"}, {"input": "9 6 5 4\n", "output": "(9) - (4) = 5, left: 5, 6, 5\n(5) - (6) = -1, left: -1, 5\n(5) - (5) = 0, left: 0, 6\n(6) * (0) = 0, left: 0\n(5) + (5) = 10, left: 10, 6\n(9) / (4) = 9/4, left: 9/4, 6, 5\n(6) - (5) = 1, left: 1, 9/4\n(9) + (4) = 13, left: 13, 6, 5\n(6) + (5) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((9 + 4) + (6 + 5))"}, {"input": "9 6 5 4\n", "output": "(9) - (4) = 5, left: 5, 6, 5\n(6) - (5) = 1, left: 1, 5\n(6) + (5) = 11, left: 11, 5\n(4) / (9) = 4/9, left: 4/9, 6, 5\n(6) / (5) = 6/5, left: 6/5, 4/9\n(4) - (9) = -5, left: -5, 6, 5\n(6) + (5) = 11, left: 11, -5\n(9) + (4) = 13, left: 13, 6, 5\n(6) + (13) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (6 + (9 + 4)))"}, {"input": "9 6 5 4\n", "output": "(9) + (5) = 14, left: 14, 6, 4\n(4) * (14) = 56, left: 56, 6\n(6) - (56) = -50, left: -50\n(6) * (56) = 336, left: 336\n(14) - (4) = 10, left: 10, 6\n(4) / (14) = 2/7, left: 2/7, 6\n(4) - (14) = -10, left: -10, 6\n(6) - (-10) = 16, left: 16\n(4) + (14) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (4 + (9 + 5)))"}, {"input": "3 6 9 7\n", "output": "(3) * (9) = 27, left: 27, 6, 7\n(3) + (9) = 12, left: 12, 6, 7\n(7) - (6) = 1, left: 1, 12\n(7) / (6) = 7/6, left: 7/6, 12\n(3) - (9) = -6, left: -6, 6, 7\n(9) - (3) = 6, left: 6, 6, 7\n(9) / (3) = 3, left: 3, 6, 7\n(6) - (7) = -1, left: -1, 3\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (9 / 3)))"}, {"input": "3 6 9 7\n", "output": "(3) / (7) = 3/7, left: 3/7, 6, 9\n(3/7) / (6) = 1/14, left: 1/14, 9\n(9) * (1/14) = 9/14, left: 9/14\n(9) - (1/14) = 125/14, left: 125/14\n(6) / (9) = 2/3, left: 2/3, 3/7\n(9) * (3/7) = 27/7, left: 27/7, 6\n(3/7) - (9) = -60/7, left: -60/7, 6\n(3) * (7) = 21, left: 21, 6, 9\n(6) - (9) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((3 * 7) - (6 - 9))"}, {"input": "3 6 9 7\n", "output": "(7) / (9) = 7/9, left: 7/9, 3, 6\n(3) * (7/9) = 7/3, left: 7/3, 6\n(9) + (7) = 16, left: 16, 3, 6\n(6) * (16) = 96, left: 96, 3\n(9) / (7) = 9/7, left: 9/7, 3, 6\n(3) - (6) = -3, left: -3, 9/7\n(-3) - (9/7) = -30/7, left: -30/7\n(7) - (9) = -2, left: -2, 3, 6\n(6) - (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 - (7 - 9)))"}, {"input": "3 6 9 7\n", "output": "(9) - (3) = 6, left: 6, 6, 7\n(6) / (7) = 6/7, left: 6/7, 6\n(3) + (9) = 12, left: 12, 6, 7\n(6) - (7) = -1, left: -1, 12\n(3) * (9) = 27, left: 27, 6, 7\n(3) - (9) = -6, left: -6, 6, 7\n(7) + (-6) = 1, left: 1, 6\n(9) / (3) = 3, left: 3, 6, 7\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (9 / 3)))"}, {"input": "3 6 9 7\n", "output": "(3) - (7) = -4, left: -4, 6, 9\n(9) - (-4) = 13, left: 13, 6\n(6) + (-4) = 2, left: 2, 9\n(6) * (9) = 54, left: 54, -4\n(54) / (-4) = -27/2, left: -27/2\n(6) + (9) = 15, left: 15, -4\n(9) - (6) = 3, left: 3, -4\n(3) * (7) = 21, left: 21, 6, 9\n(21) - (6) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((3 * 7) - 6))"}, {"input": "3 6 9 7\n", "output": "(9) - (3) = 6, left: 6, 6, 7\n(3) + (9) = 12, left: 12, 6, 7\n(7) - (6) = 1, left: 1, 12\n(3) * (9) = 27, left: 27, 6, 7\n(6) - (7) = -1, left: -1, 27\n(27) / (-1) = -27, left: -27\n(3) - (9) = -6, left: -6, 6, 7\n(6) - (7) = -1, left: -1, -6\n(-6) - (6) = -12, left: -12, 7\n(6) * (-6) = -36, left: -36, 7\n(9) / (3) = 3, left: 3, 6, 7\n(3) - (7) = -4, left: -4, 6\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (9 / 3)))"}, {"input": "3 6 9 7\n", "output": "(3) * (9) = 27, left: 27, 6, 7\n(6) - (7) = -1, left: -1, 27\n(27) - (-1) = 28, left: 28\n(6) / (7) = 6/7, left: 6/7, 27\n(3) + (9) = 12, left: 12, 6, 7\n(12) / (7) = 12/7, left: 12/7, 6\n(3) / (9) = 1/3, left: 1/3, 6, 7\n(6) + (1/3) = 19/3, left: 19/3, 7\n(9) - (3) = 6, left: 6, 6, 7\n(7) - (6) = 1, left: 1, 6\n(9) / (3) = 3, left: 3, 6, 7\n(7) / (6) = 7/6, left: 7/6, 3\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (9 / 3)))"}, {"input": "12 5 2 10\n", "output": "(5) + (2) = 7, left: 7, 12, 10\n(10) / (7) = 10/7, left: 10/7, 12\n(12) / (10/7) = 42/5, left: 42/5\n(12) - (5) = 7, left: 7, 2, 10\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (12 - 5)))"}, {"input": "12 5 2 10\n", "output": "(12) - (5) = 7, left: 7, 2, 10\n(7) / (10) = 7/10, left: 7/10, 2\n(2) / (7) = 2/7, left: 2/7, 10\n(2/7) - (10) = -68/7, left: -68/7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (12 - 5)))"}, {"input": "12 5 2 10\n", "output": "(5) - (2) = 3, left: 3, 12, 10\n(12) / (3) = 4, left: 4, 10\n(10) / (12) = 5/6, left: 5/6, 3\n(5) + (2) = 7, left: 7, 12, 10\n(12) + (10) = 22, left: 22, 7\n(22) - (7) = 15, left: 15\n(2) - (5) = -3, left: -3, 12, 10\n(12) - (5) = 7, left: 7, 2, 10\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (12 - 5)))"}, {"input": "12 5 2 10\n", "output": "(2) + (10) = 12, left: 12, 12, 5\n(12) * (12) = 144, left: 144, 5\n(10) - (2) = 8, left: 8, 12, 5\n(5) / (2) = 5/2, left: 5/2, 12, 10\n(5) + (2) = 7, left: 7, 12, 10\n(5) - (2) = 3, left: 3, 12, 10\n(12) * (10) = 120, left: 120, 3\n(12) - (5) = 7, left: 7, 2, 10\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (12 - 5)))"}, {"input": "12 5 2 10\n", "output": "(2) - (10) = -8, left: -8, 12, 5\n(-8) - (5) = -13, left: -13, 12\n(5) - (10) = -5, left: -5, 12, 2\n(2) / (12) = 1/6, left: 1/6, -5\n(2) / (-5) = -2/5, left: -2/5, 12\n(2) - (5) = -3, left: -3, 12, 10\n(12) + (10) = 22, left: 22, -3\n(12) + (5) = 17, left: 17, 2, 10\n(2) * (17) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((2 * (12 + 5)) - 10)"}, {"input": "12 5 2 10\n", "output": "(10) / (5) = 2, left: 2, 12, 2\n(5) * (10) = 50, left: 50, 12, 2\n(2) + (50) = 52, left: 52, 12\n(50) / (12) = 25/6, left: 25/6, 2\n(10) / (2) = 5, left: 5, 12, 5\n(12) - (5) = 7, left: 7, 5\n(2) * (10) = 20, left: 20, 12, 5\n(5) - (12) = -7, left: -7, 2, 10\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (5 - 12)))"}, {"input": "12 5 2 10\n", "output": "(12) - (5) = 7, left: 7, 2, 10\n(2) - (10) = -8, left: -8, 7\n(7) - (10) = -3, left: -3, 2\n(-3) / (2) = -3/2, left: -3/2\n(2) / (7) = 2/7, left: 2/7, 10\n(2/7) - (10) = -68/7, left: -68/7\n(7) - (2) = 5, left: 5, 10\n(5) / (10) = 1/2, left: 1/2\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (12 - 5)))"}, {"input": "13 13 4 2\n", "output": "(13) / (2) = 13/2, left: 13/2, 13, 4\n(13/2) / (4) = 13/8, left: 13/8, 13\n(13) + (13/8) = 117/8, left: 117/8\n(13) + (2) = 15, left: 15, 13, 4\n(13) - (4) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((13 + 2) + (13 - 4))"}, {"input": "13 13 4 2\n", "output": "(2) - (13) = -11, left: -11, 13, 4\n(13) * (4) = 52, left: 52, -11\n(52) / (-11) = -52/11, left: -52/11\n(13) + (2) = 15, left: 15, 13, 4\n(15) - (4) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((13 + 2) - 4))"}, {"input": "13 13 4 2\n", "output": "(13) / (2) = 13/2, left: 13/2, 13, 4\n(4) / (13) = 4/13, left: 4/13, 13/2\n(2) / (13) = 2/13, left: 2/13, 13, 4\n(13) + (2) = 15, left: 15, 13, 4\n(13) - (4) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((13 + 2) + (13 - 4))"}, {"input": "13 13 4 2\n", "output": "(13) * (13) = 169, left: 169, 4, 2\n(4) * (2) = 8, left: 8, 169\n(8) - (169) = -161, left: -161\n(13) + (13) = 26, left: 26, 4, 2\n(26) - (4) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((13 + 13) - 4))"}, {"input": "13 13 4 2\n", "output": "(13) + (13) = 26, left: 26, 4, 2\n(26) / (2) = 13, left: 13, 4\n(2) * (26) = 52, left: 52, 4\n(4) * (52) = 208, left: 208\n(2) + (26) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 + (13 + 13)) - 4)"}, {"input": "13 13 4 2\n", "output": "(13) - (2) = 11, left: 11, 13, 4\n(4) * (11) = 44, left: 44, 13\n(2) / (13) = 2/13, left: 2/13, 13, 4\n(4) / (2/13) = 26, left: 26, 13\n(13) + (4) = 17, left: 17, 2/13\n(13) / (2) = 13/2, left: 13/2, 13, 4\n(13) + (13/2) = 39/2, left: 39/2, 4\n(13) + (2) = 15, left: 15, 13, 4\n(13) - (4) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((13 + 2) + (13 - 4))"}, {"input": "13 13 4 2\n", "output": "(13) / (2) = 13/2, left: 13/2, 13, 4\n(13) * (2) = 26, left: 26, 13, 4\n(13) * (4) = 52, left: 52, 26\n(4) / (26) = 2/13, left: 2/13, 13\n(2) / (13) = 2/13, left: 2/13, 13, 4\n(4) - (2/13) = 50/13, left: 50/13, 13\n(13) + (2) = 15, left: 15, 13, 4\n(13) / (4) = 13/4, left: 13/4, 15\n(13) - (4) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((13 + 2) + (13 - 4))"}, {"input": "13 13 4 2\n", "output": "(13) + (13) = 26, left: 26, 4, 2\n(26) / (2) = 13, left: 13, 4\n(2) * (26) = 52, left: 52, 4\n(2) - (26) = -24, left: -24, 4\n(4) - (-24) = 28, left: 28\n(-24) - (4) = -28, left: -28\n(-24) / (4) = -6, left: -6\n(2) + (26) = 28, left: 28, 4\n(4) + (28) = 32, left: 32\n(28) - (4) = 24, left: 24\nreach 24! expression: ((2 + (13 + 13)) - 4)"}, {"input": "13 13 4 2\n", "output": "(13) * (13) = 169, left: 169, 4, 2\n(2) - (4) = -2, left: -2, 169\n(169) / (-2) = -169/2, left: -169/2\n(4) - (169) = -165, left: -165, 2\n(13) + (13) = 26, left: 26, 4, 2\n(26) / (4) = 13/2, left: 13/2, 2\n(13/2) - (2) = 9/2, left: 9/2\n(4) + (26) = 30, left: 30, 2\n(26) - (4) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((13 + 13) - 4))"}, {"input": "13 13 4 2\n", "output": "(2) - (13) = -11, left: -11, 13, 4\n(4) / (13) = 4/13, left: 4/13, -11\n(4) - (-11) = 15, left: 15, 13\n(13) - (-11) = 24, left: 24, 4\n(4) / (24) = 1/6, left: 1/6\n(-11) / (13) = -11/13, left: -11/13, 4\n(13) / (-11) = -13/11, left: -13/11, 4\n(13) + (2) = 15, left: 15, 13, 4\n(15) - (4) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((13 + 2) - 4))"}, {"input": "12 12 9 4\n", "output": "(4) / (12) = 1/3, left: 1/3, 12, 9\n(1/3) - (9) = -26/3, left: -26/3, 12\n(9) * (1/3) = 3, left: 3, 12\n(12) / (4) = 3, left: 3, 12, 9\n(9) + (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (12 / 4)))"}, {"input": "12 12 9 4\n", "output": "(12) - (4) = 8, left: 8, 12, 9\n(8) - (9) = -1, left: -1, 12\n(-1) / (12) = -1/12, left: -1/12\n(12) - (9) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: ((12 - 4) * (12 - 9))"}, {"input": "12 12 9 4\n", "output": "(12) - (4) = 8, left: 8, 12, 9\n(12) / (9) = 4/3, left: 4/3, 8\n(4/3) / (8) = 1/6, left: 1/6\n(12) * (9) = 108, left: 108, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((12 - 4) * (12 - 9))"}, {"input": "12 12 9 4\n", "output": "(9) / (4) = 9/4, left: 9/4, 12, 12\n(12) * (12) = 144, left: 144, 9/4\n(4) / (9) = 4/9, left: 4/9, 12, 12\n(4/9) - (12) = -104/9, left: -104/9, 12\n(4) - (9) = -5, left: -5, 12, 12\n(9) - (4) = 5, left: 5, 12, 12\n(12) / (12) = 1, left: 1, 5\n(12) - (4) = 8, left: 8, 12, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((12 - 4) * (12 - 9))"}, {"input": "12 12 9 4\n", "output": "(12) - (4) = 8, left: 8, 12, 9\n(9) + (8) = 17, left: 17, 12\n(17) / (12) = 17/12, left: 17/12\n(8) - (9) = -1, left: -1, 12\n(9) - (8) = 1, left: 1, 12\n(12) / (1) = 12, left: 12\n(9) / (8) = 9/8, left: 9/8, 12\n(9) * (8) = 72, left: 72, 12\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((12 - 4) * (12 - 9))"}, {"input": "12 12 9 4\n", "output": "(4) / (12) = 1/3, left: 1/3, 12, 9\n(9) / (12) = 3/4, left: 3/4, 1/3\n(9) + (1/3) = 28/3, left: 28/3, 12\n(12) * (4) = 48, left: 48, 12, 9\n(9) - (12) = -3, left: -3, 48\n(-3) / (48) = -1/16, left: -1/16\n(48) / (9) = 16/3, left: 16/3, 12\n(12) / (4) = 3, left: 3, 12, 9\n(9) + (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (12 / 4)))"}, {"input": "12 12 9 4\n", "output": "(12) - (4) = 8, left: 8, 12, 9\n(12) / (9) = 4/3, left: 4/3, 8\n(4/3) / (8) = 1/6, left: 1/6\n(8) + (4/3) = 28/3, left: 28/3\n(9) / (12) = 3/4, left: 3/4, 8\n(3/4) - (8) = -29/4, left: -29/4\n(8) - (3/4) = 29/4, left: 29/4\n(12) * (9) = 108, left: 108, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((12 - 4) * (12 - 9))"}, {"input": "12 12 9 4\n", "output": "(12) + (12) = 24, left: 24, 9, 4\n(24) / (4) = 6, left: 6, 9\n(12) - (12) = 0, left: 0, 9, 4\n(0) - (9) = -9, left: -9, 4\n(12) / (12) = 1, left: 1, 9, 4\n(1) - (9) = -8, left: -8, 4\n(9) / (12) = 3/4, left: 3/4, 12, 4\n(12) + (9) = 21, left: 21, 12, 4\n(12) / (4) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((12 + 9) + (12 / 4))"}, {"input": "2 2 12 7\n", "output": "(2) * (7) = 14, left: 14, 2, 12\n(12) / (2) = 6, left: 6, 14\n(14) - (6) = 8, left: 8\n(12) - (2) = 10, left: 10, 14\n(14) * (10) = 140, left: 140\n(14) + (10) = 24, left: 24\nreach 24! expression: ((2 * 7) + (12 - 2))"}, {"input": "2 2 12 7\n", "output": "(2) + (2) = 4, left: 4, 12, 7\n(4) / (12) = 1/3, left: 1/3, 7\n(7) * (1/3) = 7/3, left: 7/3\n(2) / (2) = 1, left: 1, 12, 7\n(2) * (12) = 24, left: 24, 2, 7\n(2) - (24) = -22, left: -22, 7\n(-22) / (7) = -22/7, left: -22/7\n(2) - (12) = -10, left: -10, 2, 7\n(2) * (7) = 14, left: 14, -10\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((2 * 7) - (2 - 12))"}, {"input": "2 2 12 7\n", "output": "(12) * (7) = 84, left: 84, 2, 2\n(2) + (84) = 86, left: 86, 2\n(7) / (12) = 7/12, left: 7/12, 2, 2\n(2) - (2) = 0, left: 0, 12, 7\n(12) * (7) = 84, left: 84, 0\n(2) + (2) = 4, left: 4, 12, 7\n(7) - (2) = 5, left: 5, 2, 12\n(2) * (7) = 14, left: 14, 2, 12\n(12) + (14) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((12 + (2 * 7)) - 2)"}, {"input": "2 2 12 7\n", "output": "(2) - (2) = 0, left: 0, 12, 7\n(2) / (2) = 1, left: 1, 12, 7\n(7) / (1) = 7, left: 7, 12\n(2) * (2) = 4, left: 4, 12, 7\n(4) / (7) = 4/7, left: 4/7, 12\n(2) / (2) = 1, left: 1, 12, 7\n(1) / (12) = 1/12, left: 1/12, 7\n(2) - (12) = -10, left: -10, 2, 7\n(2) * (7) = 14, left: 14, -10\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((2 * 7) - (2 - 12))"}, {"input": "2 2 12 7\n", "output": "(2) * (7) = 14, left: 14, 2, 12\n(12) / (2) = 6, left: 6, 14\n(6) - (14) = -8, left: -8\n(14) * (6) = 84, left: 84\n(2) * (12) = 24, left: 24, 14\n(14) + (24) = 38, left: 38\n(24) / (14) = 12/7, left: 12/7\n(12) - (2) = 10, left: 10, 14\n(10) / (14) = 5/7, left: 5/7\n(14) + (10) = 24, left: 24\nreach 24! expression: ((2 * 7) + (12 - 2))"}, {"input": "2 2 12 7\n", "output": "(7) - (2) = 5, left: 5, 2, 12\n(2) / (12) = 1/6, left: 1/6, 5\n(7) / (2) = 7/2, left: 7/2, 2, 12\n(2) / (7) = 2/7, left: 2/7, 2, 12\n(2/7) / (2) = 1/7, left: 1/7, 12\n(2) - (12) = -10, left: -10, 2/7\n(12) - (2) = 10, left: 10, 2/7\n(2) * (7) = 14, left: 14, 2, 12\n(2) - (12) = -10, left: -10, 14\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((2 * 7) - (2 - 12))"}, {"input": "2 2 12 7\n", "output": "(2) / (2) = 1, left: 1, 12, 7\n(2) * (2) = 4, left: 4, 12, 7\n(12) * (7) = 84, left: 84, 4\n(12) - (4) = 8, left: 8, 7\n(8) - (7) = 1, left: 1\n(2) - (2) = 0, left: 0, 12, 7\n(2) / (2) = 1, left: 1, 12, 7\n(2) * (12) = 24, left: 24, 2, 7\n(2) / (12) = 1/6, left: 1/6, 2, 7\n(2) - (1/6) = 11/6, left: 11/6, 7\n(2) - (12) = -10, left: -10, 2, 7\n(2) / (-10) = -1/5, left: -1/5, 7\n(2) * (7) = 14, left: 14, -10\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((2 * 7) - (2 - 12))"}, {"input": "2 2 12 7\n", "output": "(12) + (7) = 19, left: 19, 2, 2\n(2) + (2) = 4, left: 4, 19\n(12) * (7) = 84, left: 84, 2, 2\n(7) - (12) = -5, left: -5, 2, 2\n(2) - (2) = 0, left: 0, 12, 7\n(2) + (2) = 4, left: 4, 12, 7\n(2) / (2) = 1, left: 1, 12, 7\n(7) - (1) = 6, left: 6, 12\n(7) - (2) = 5, left: 5, 2, 12\n(12) + (5) = 17, left: 17, 2\n(2) - (12) = -10, left: -10, 5\n(2) * (7) = 14, left: 14, 2, 12\n(12) + (14) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((12 + (2 * 7)) - 2)"}, {"input": "12 4 10 12\n", "output": "(4) - (10) = -6, left: -6, 12, 12\n(12) - (12) = 0, left: 0, -6\n(4) * (10) = 40, left: 40, 12, 12\n(4) + (10) = 14, left: 14, 12, 12\n(14) - (12) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 + 10) - 12))"}, {"input": "12 4 10 12\n", "output": "(4) * (12) = 48, left: 48, 12, 10\n(10) * (48) = 480, left: 480, 12\n(10) / (48) = 5/24, left: 5/24, 12\n(12) * (5/24) = 5/2, left: 5/2\n(12) - (10) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 * 12) / (12 - 10))"}, {"input": "12 4 10 12\n", "output": "(12) / (4) = 3, left: 3, 10, 12\n(12) / (10) = 6/5, left: 6/5, 3\n(6/5) / (3) = 2/5, left: 2/5\n(12) * (4) = 48, left: 48, 10, 12\n(12) - (10) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (12 - 10))"}, {"input": "12 4 10 12\n", "output": "(10) + (12) = 22, left: 22, 12, 4\n(4) / (12) = 1/3, left: 1/3, 22\n(10) / (12) = 5/6, left: 5/6, 12, 4\n(12) - (10) = 2, left: 2, 12, 4\n(12) * (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (12 - 10))"}, {"input": "12 4 10 12\n", "output": "(12) - (4) = 8, left: 8, 10, 12\n(10) / (12) = 5/6, left: 5/6, 8\n(10) - (12) = -2, left: -2, 8\n(10) - (8) = 2, left: 2, 12\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (12 - 4)))"}, {"input": "12 4 10 12\n", "output": "(4) - (10) = -6, left: -6, 12, 12\n(12) / (-6) = -2, left: -2, 12\n(12) - (-6) = 18, left: 18, 12\n(12) / (-6) = -2, left: -2, 12\n(4) * (10) = 40, left: 40, 12, 12\n(12) / (40) = 3/10, left: 3/10, 12\n(3/10) / (12) = 1/40, left: 1/40\n(4) + (10) = 14, left: 14, 12, 12\n(14) - (12) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 + 10) - 12))"}, {"input": "12 4 10 12\n", "output": "(4) * (12) = 48, left: 48, 12, 10\n(48) - (10) = 38, left: 38, 12\n(12) + (48) = 60, left: 60, 10\n(60) - (10) = 50, left: 50\n(48) - (12) = 36, left: 36, 10\n(12) + (10) = 22, left: 22, 48\n(10) - (12) = -2, left: -2, 48\n(12) - (10) = 2, left: 2, 48\n(2) - (48) = -46, left: -46\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 * 12) / (12 - 10))"}, {"input": "12 4 10 12\n", "output": "(12) - (4) = 8, left: 8, 10, 12\n(12) / (10) = 6/5, left: 6/5, 8\n(8) + (6/5) = 46/5, left: 46/5\n(10) * (12) = 120, left: 120, 8\n(10) * (8) = 80, left: 80, 12\n(12) + (80) = 92, left: 92\n(10) + (8) = 18, left: 18, 12\n(12) - (18) = -6, left: -6\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (12 - 4)))"}, {"input": "12 4 10 12\n", "output": "(10) + (12) = 22, left: 22, 12, 4\n(4) - (12) = -8, left: -8, 22\n(10) / (12) = 5/6, left: 5/6, 12, 4\n(12) + (4) = 16, left: 16, 5/6\n(4) - (12) = -8, left: -8, 5/6\n(12) - (10) = 2, left: 2, 12, 4\n(4) / (12) = 1/3, left: 1/3, 2\n(2) / (1/3) = 6, left: 6\n(12) * (4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (12 - 10))"}, {"input": "12 4 10 12\n", "output": "(12) / (4) = 3, left: 3, 10, 12\n(12) / (10) = 6/5, left: 6/5, 3\n(12) * (3) = 36, left: 36, 10\n(10) + (36) = 46, left: 46\n(12) / (3) = 4, left: 4, 10\n(12) * (4) = 48, left: 48, 10, 12\n(10) + (12) = 22, left: 22, 48\n(48) / (22) = 24/11, left: 24/11\n(12) - (10) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (12 - 10))"}, {"input": "4 10 1 2\n", "output": "(10) + (2) = 12, left: 12, 4, 1\n(1) / (4) = 1/4, left: 1/4, 12\n(12) - (1/4) = 47/4, left: 47/4\n(10) / (2) = 5, left: 5, 4, 1\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (10 / 2)))"}, {"input": "4 10 1 2\n", "output": "(10) * (2) = 20, left: 20, 4, 1\n(1) - (4) = -3, left: -3, 20\n(-3) / (20) = -3/20, left: -3/20\n(4) / (1) = 4, left: 4, 20\n(4) - (20) = -16, left: -16\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 * 2) + (4 / 1))"}, {"input": "4 10 1 2\n", "output": "(2) / (10) = 1/5, left: 1/5, 4, 1\n(4) / (1/5) = 20, left: 20, 1\n(1) + (1/5) = 6/5, left: 6/5, 4\n(4) * (6/5) = 24/5, left: 24/5\n(4) - (1) = 3, left: 3, 1/5\n(10) - (2) = 8, left: 8, 4, 1\n(4) - (8) = -4, left: -4, 1\n(1) / (-4) = -1/4, left: -1/4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((10 - 2) * (4 - 1))"}, {"input": "4 10 1 2\n", "output": "(10) - (4) = 6, left: 6, 1, 2\n(2) * (6) = 12, left: 12, 1\n(4) / (10) = 2/5, left: 2/5, 1, 2\n(4) + (10) = 14, left: 14, 1, 2\n(1) * (14) = 14, left: 14, 2\n(14) - (2) = 12, left: 12\n(1) / (2) = 1/2, left: 1/2, 14\n(10) * (2) = 20, left: 20, 4, 1\n(1) * (20) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (1 * (10 * 2)))"}, {"input": "4 10 1 2\n", "output": "(10) * (2) = 20, left: 20, 4, 1\n(1) - (4) = -3, left: -3, 20\n(20) - (-3) = 23, left: 23\n(-3) / (20) = -3/20, left: -3/20\n(20) / (-3) = -20/3, left: -20/3\n(20) * (-3) = -60, left: -60\n(4) / (1) = 4, left: 4, 20\n(20) * (4) = 80, left: 80\n(4) - (20) = -16, left: -16\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 * 2) + (4 / 1))"}, {"input": "4 10 1 2\n", "output": "(4) + (10) = 14, left: 14, 1, 2\n(2) - (14) = -12, left: -12, 1\n(14) / (2) = 7, left: 7, 1\n(4) - (10) = -6, left: -6, 1, 2\n(2) - (1) = 1, left: 1, -6\n(1) / (-6) = -1/6, left: -1/6\n(1) - (10) = -9, left: -9, 4, 2\n(10) * (1) = 10, left: 10, 4, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 * (10 * 1)))"}, {"input": "4 10 1 2\n", "output": "(10) + (2) = 12, left: 12, 4, 1\n(4) + (1) = 5, left: 5, 12\n(1) * (12) = 12, left: 12, 4\n(1) / (12) = 1/12, left: 1/12, 4\n(1/12) - (4) = -47/12, left: -47/12\n(10) / (2) = 5, left: 5, 4, 1\n(4) * (1) = 4, left: 4, 5\n(4) / (1) = 4, left: 4, 5\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (10 / 2)))"}, {"input": "4 10 1 2\n", "output": "(10) * (2) = 20, left: 20, 4, 1\n(1) - (4) = -3, left: -3, 20\n(20) - (-3) = 23, left: 23\n(20) + (-3) = 17, left: 17\n(-3) - (20) = -23, left: -23\n(-3) / (20) = -3/20, left: -3/20\n(20) / (-3) = -20/3, left: -20/3\n(20) * (-3) = -60, left: -60\n(4) / (1) = 4, left: 4, 20\n(20) * (4) = 80, left: 80\n(4) - (20) = -16, left: -16\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 * 2) + (4 / 1))"}, {"input": "4 10 1 2\n", "output": "(10) * (2) = 20, left: 20, 4, 1\n(1) - (4) = -3, left: -3, 20\n(20) - (-3) = 23, left: 23\n(20) + (-3) = 17, left: 17\n(-3) - (20) = -23, left: -23\n(-3) / (20) = -3/20, left: -3/20\n(20) / (-3) = -20/3, left: -20/3\n(20) * (-3) = -60, left: -60\n(4) / (1) = 4, left: 4, 20\n(20) * (4) = 80, left: 80\n(4) - (20) = -16, left: -16\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 * 2) + (4 / 1))"}, {"input": "6 6 6 6\n", "output": "(6) * (6) = 36, left: 36, 6, 6\n(6) * (6) = 36, left: 36, 36\n(36) + (36) = 72, left: 72\n(6) + (6) = 12, left: 12, 36\n(36) / (12) = 3, left: 3\n(36) - (12) = 24, left: 24\nreach 24! expression: ((6 * 6) - (6 + 6))"}, {"input": "6 6 6 6\n", "output": "(6) + (6) = 12, left: 12, 6, 6\n(6) - (12) = -6, left: -6, 6\n(-6) - (6) = -12, left: -12\n(6) * (12) = 72, left: 72, 6\n(72) / (6) = 12, left: 12\n(12) / (6) = 2, left: 2, 6\n(6) / (2) = 3, left: 3\n(6) - (2) = 4, left: 4\n(6) + (12) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 + (6 + 6)))"}, {"input": "6 6 6 6\n", "output": "(6) - (6) = 0, left: 0, 6, 6\n(0) / (6) = 0, left: 0, 6\n(6) + (6) = 12, left: 12, 0\n(0) - (12) = -12, left: -12\n(6) / (6) = 1, left: 1, 6, 6\n(6) / (6) = 1, left: 1, 1\n(1) / (6) = 1/6, left: 1/6, 6\n(6) * (6) = 36, left: 36, 6, 6\n(36) - (6) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: (((6 * 6) - 6) - 6)"}, {"input": "6 6 6 6\n", "output": "(6) * (6) = 36, left: 36, 6, 6\n(6) / (36) = 1/6, left: 1/6, 6\n(6) * (36) = 216, left: 216, 6\n(36) / (6) = 6, left: 6, 6\n(6) * (6) = 36, left: 36\n(6) / (6) = 1, left: 1\n(6) - (36) = -30, left: -30, 6\n(6) + (36) = 42, left: 42, 6\n(36) - (6) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: (((6 * 6) - 6) - 6)"}, {"input": "6 6 6 6\n", "output": "(6) * (6) = 36, left: 36, 6, 6\n(6) * (6) = 36, left: 36, 36\n(36) - (36) = 0, left: 0\n(36) / (36) = 1, left: 1\n(36) + (36) = 72, left: 72\n(36) * (36) = 1296, left: 1296\n(36) / (36) = 1, left: 1\n(6) + (6) = 12, left: 12, 36\n(36) / (12) = 3, left: 3\n(36) - (12) = 24, left: 24\nreach 24! expression: ((6 * 6) - (6 + 6))"}, {"input": "6 6 6 6\n", "output": "(6) - (6) = 0, left: 0, 6, 6\n(6) * (0) = 0, left: 0, 6\n(6) * (6) = 36, left: 36, 0\n(0) * (36) = 0, left: 0\n(6) / (6) = 1, left: 1, 0\n(6) / (6) = 1, left: 1, 6, 6\n(6) * (1) = 6, left: 6, 6\n(6) + (6) = 12, left: 12, 6, 6\n(6) + (12) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 + (6 + 6)))"}, {"input": "6 6 6 6\n", "output": "(6) - (6) = 0, left: 0, 6, 6\n(6) * (6) = 36, left: 36, 0\n(36) - (0) = 36, left: 36\n(6) / (6) = 1, left: 1, 6, 6\n(6) - (6) = 0, left: 0, 1\n(6) + (1) = 7, left: 7, 6\n(6) / (1) = 6, left: 6, 6\n(1) - (6) = -5, left: -5, 6\n(6) - (-5) = 11, left: 11\n(6) * (1) = 6, left: 6, 6\n(6) * (6) = 36, left: 36, 6, 6\n(6) * (36) = 216, left: 216, 6\n(36) - (6) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: (((6 * 6) - 6) - 6)"}, {"input": "6 6 6 6\n", "output": "(6) - (6) = 0, left: 0, 6, 6\n(0) - (6) = -6, left: -6, 6\n(0) / (6) = 0, left: 0, 6\n(6) - (6) = 0, left: 0, 0\n(6) / (6) = 1, left: 1, 6, 6\n(6) - (1) = 5, left: 5, 6\n(6) * (1) = 6, left: 6, 6\n(6) * (1) = 6, left: 6, 6\n(6) - (6) = 0, left: 0\n(1) / (6) = 1/6, left: 1/6, 6\n(6) + (6) = 12, left: 12, 1\n(6) + (6) = 12, left: 12, 6, 6\n(6) + (12) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 + (6 + 6)))"}, {"input": "8 9 11 5\n", "output": "(8) + (5) = 13, left: 13, 9, 11\n(13) - (9) = 4, left: 4, 11\n(8) * (5) = 40, left: 40, 9, 11\n(5) - (8) = -3, left: -3, 9, 11\n(9) / (11) = 9/11, left: 9/11, -3\n(11) / (9) = 11/9, left: 11/9, -3\n(11/9) - (-3) = 38/9, left: 38/9\n(8) - (5) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (8 - 5)) - 9)"}, {"input": "8 9 11 5\n", "output": "(5) - (8) = -3, left: -3, 9, 11\n(9) + (11) = 20, left: 20, -3\n(-3) + (20) = 17, left: 17\n(9) / (-3) = -3, left: -3, 11\n(11) - (-3) = 14, left: 14\n(8) * (5) = 40, left: 40, 9, 11\n(9) / (11) = 9/11, left: 9/11, 40\n(8) - (5) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (8 - 5)) - 9)"}, {"input": "8 9 11 5\n", "output": "(9) / (11) = 9/11, left: 9/11, 8, 5\n(8) / (5) = 8/5, left: 8/5, 9/11\n(9) * (11) = 99, left: 99, 8, 5\n(8) - (99) = -91, left: -91, 5\n(8) / (5) = 8/5, left: 8/5, 99\n(11) / (9) = 11/9, left: 11/9, 8, 5\n(9) + (11) = 20, left: 20, 8, 5\n(11) - (9) = 2, left: 2, 8, 5\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (11 - 9)))"}, {"input": "8 9 11 5\n", "output": "(11) - (8) = 3, left: 3, 9, 5\n(5) / (3) = 5/3, left: 5/3, 9\n(9) + (5/3) = 32/3, left: 32/3\n(5) - (3) = 2, left: 2, 9\n(2) - (9) = -7, left: -7\n(5) + (3) = 8, left: 8, 9\n(8) / (9) = 8/9, left: 8/9\n(3) / (5) = 3/5, left: 3/5, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (11 - 8)))"}, {"input": "2 5 8 10\n", "output": "(5) / (2) = 5/2, left: 5/2, 8, 10\n(8) * (10) = 80, left: 80, 5/2\n(5/2) / (80) = 1/32, left: 1/32\n(8) / (10) = 4/5, left: 4/5, 5/2\n(2) - (5) = -3, left: -3, 8, 10\n(10) / (-3) = -10/3, left: -10/3, 8\n(10) - (8) = 2, left: 2, -3\n(2) + (5) = 7, left: 7, 8, 10\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 - (2 + 5)))"}, {"input": "2 5 8 10\n", "output": "(5) + (8) = 13, left: 13, 2, 10\n(2) - (10) = -8, left: -8, 13\n(13) + (-8) = 5, left: 5\n(5) - (8) = -3, left: -3, 2, 10\n(-3) - (10) = -13, left: -13, 2\n(2) * (-13) = -26, left: -26\n(2) * (-3) = -6, left: -6, 10\n(10) + (-6) = 4, left: 4\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((5 - 8) * (2 - 10))"}, {"input": "2 5 8 10\n", "output": "(5) - (10) = -5, left: -5, 2, 8\n(8) - (-5) = 13, left: 13, 2\n(5) * (10) = 50, left: 50, 2, 8\n(10) / (5) = 2, left: 2, 2, 8\n(5) + (10) = 15, left: 15, 2, 8\n(2) / (15) = 2/15, left: 2/15, 8\n(8) + (2/15) = 122/15, left: 122/15\n(10) - (5) = 5, left: 5, 2, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 - 5) - 2))"}, {"input": "2 5 8 10\n", "output": "(2) + (8) = 10, left: 10, 5, 10\n(2) * (8) = 16, left: 16, 5, 10\n(10) - (5) = 5, left: 5, 16\n(2) - (8) = -6, left: -6, 5, 10\n(8) / (2) = 4, left: 4, 5, 10\n(10) - (8) = 2, left: 2, 2, 5\n(2) - (10) = -8, left: -8, 5, 8\n(8) - (5) = 3, left: 3, -8\n(5) - (8) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((2 - 10) * (5 - 8))"}, {"input": "2 5 8 10\n", "output": "(5) + (10) = 15, left: 15, 2, 8\n(8) - (2) = 6, left: 6, 15\n(5) - (10) = -5, left: -5, 2, 8\n(10) / (5) = 2, left: 2, 2, 8\n(2) / (2) = 1, left: 1, 8\n(5) / (10) = 1/2, left: 1/2, 2, 8\n(5) * (10) = 50, left: 50, 2, 8\n(10) - (5) = 5, left: 5, 2, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 - 5) - 2))"}, {"input": "3 5 5 9\n", "output": "(9) / (5) = 9/5, left: 9/5, 3, 5\n(3) / (5) = 3/5, left: 3/5, 9/5\n(5) / (3) = 5/3, left: 5/3, 9/5\n(3) - (9/5) = 6/5, left: 6/5, 5\n(3) + (9/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (3 + (9 / 5)))"}, {"input": "3 5 5 9\n", "output": "(9) / (5) = 9/5, left: 9/5, 3, 5\n(3) * (5) = 15, left: 15, 9/5\n(15) - (9/5) = 66/5, left: 66/5\n(9/5) / (15) = 3/25, left: 3/25\n(5) - (3) = 2, left: 2, 9/5\n(9/5) - (2) = -1/5, left: -1/5\n(3) + (5) = 8, left: 8, 9/5\n(8) - (9/5) = 31/5, left: 31/5\n(3) + (9/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (3 + (9 / 5)))"}, {"input": "3 5 5 9\n", "output": "(3) * (9) = 27, left: 27, 5, 5\n(3) + (9) = 12, left: 12, 5, 5\n(3) / (9) = 1/3, left: 1/3, 5, 5\n(3) - (9) = -6, left: -6, 5, 5\n(3) - (5) = -2, left: -2, 5, 9\n(3) / (5) = 3/5, left: 3/5, 5, 9\n(5) + (5) = 10, left: 10, 3, 9\n(5) / (5) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "3 5 5 9\n", "output": "(3) / (9) = 1/3, left: 1/3, 5, 5\n(3) * (9) = 27, left: 27, 5, 5\n(5) - (5) = 0, left: 0, 27\n(9) - (3) = 6, left: 6, 5, 5\n(6) - (5) = 1, left: 1, 5\n(5) / (5) = 1, left: 1, 6\n(5) - (5) = 0, left: 0, 3, 9\n(5) / (5) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "3 5 5 9\n", "output": "(5) / (5) = 1, left: 1, 3, 9\n(3) + (9) = 12, left: 12, 1\n(1) / (12) = 1/12, left: 1/12\n(3) * (9) = 27, left: 27, 1\n(3) / (9) = 1/3, left: 1/3, 1\n(9) + (1) = 10, left: 10, 3\n(9) * (1) = 9, left: 9, 3\n(9) / (1) = 9, left: 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "3 5 5 9\n", "output": "(3) * (5) = 15, left: 15, 5, 9\n(3) - (5) = -2, left: -2, 5, 9\n(-2) / (9) = -2/9, left: -2/9, 5\n(-2) / (5) = -2/5, left: -2/5, 9\n(5) - (3) = 2, left: 2, 5, 9\n(5) + (9) = 14, left: 14, 2\n(3) / (5) = 3/5, left: 3/5, 5, 9\n(5) / (5) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "3 5 5 9\n", "output": "(9) / (3) = 3, left: 3, 5, 5\n(3) - (9) = -6, left: -6, 5, 5\n(5) - (-6) = 11, left: 11, 5\n(11) / (5) = 11/5, left: 11/5\n(3) - (5) = -2, left: -2, 5, 9\n(9) / (5) = 9/5, left: 9/5, -2\n(3) * (5) = 15, left: 15, 5, 9\n(5) - (3) = 2, left: 2, 5, 9\n(5) / (3) = 5/3, left: 5/3, 5, 9\n(9) * (5/3) = 15, left: 15, 5\n(5) + (5) = 10, left: 10, 3, 9\n(5) / (5) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "3 5 5 9\n", "output": "(3) * (9) = 27, left: 27, 5, 5\n(5) / (5) = 1, left: 1, 27\n(3) + (9) = 12, left: 12, 5, 5\n(5) - (12) = -7, left: -7, 5\n(3) - (9) = -6, left: -6, 5, 5\n(5) * (5) = 25, left: 25, -6\n(5) + (5) = 10, left: 10, -6\n(5) + (5) = 10, left: 10, 3, 9\n(3) / (9) = 1/3, left: 1/3, 10\n(5) - (5) = 0, left: 0, 3, 9\n(3) / (9) = 1/3, left: 1/3, 0\n(5) / (5) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "3 5 5 9\n", "output": "(5) / (3) = 5/3, left: 5/3, 5, 9\n(9) - (5/3) = 22/3, left: 22/3, 5\n(5) + (5/3) = 20/3, left: 20/3, 9\n(3) * (5) = 15, left: 15, 5, 9\n(5) * (15) = 75, left: 75, 9\n(3) - (5) = -2, left: -2, 5, 9\n(9) * (-2) = -18, left: -18, 5\n(9) / (5) = 9/5, left: 9/5, -2\n(3) + (5) = 8, left: 8, 5, 9\n(5) - (3) = 2, left: 2, 5, 9\n(3) / (5) = 3/5, left: 3/5, 5, 9\n(5) / (5) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "13 3 2 13\n", "output": "(13) - (13) = 0, left: 0, 3, 2\n(2) * (13) = 26, left: 26, 13, 3\n(3) - (13) = -10, left: -10, 26\n(2) + (13) = 15, left: 15, 13, 3\n(13) * (3) = 39, left: 39, 15\n(39) - (15) = 24, left: 24\nreach 24! expression: ((13 * 3) - (2 + 13))"}, {"input": "13 3 2 13\n", "output": "(13) + (3) = 16, left: 16, 2, 13\n(13) / (3) = 13/3, left: 13/3, 2, 13\n(2) - (13/3) = -7/3, left: -7/3, 13\n(13) * (3) = 39, left: 39, 2, 13\n(39) - (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 3) - 13) - 2)"}, {"input": "13 3 2 13\n", "output": "(13) + (3) = 16, left: 16, 2, 13\n(2) / (16) = 1/8, left: 1/8, 13\n(3) / (13) = 3/13, left: 3/13, 2, 13\n(13) * (3) = 39, left: 39, 2, 13\n(39) - (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 3) - 13) - 2)"}, {"input": "13 3 2 13\n", "output": "(13) / (3) = 13/3, left: 13/3, 2, 13\n(3) / (13) = 3/13, left: 3/13, 2, 13\n(2) * (3/13) = 6/13, left: 6/13, 13\n(3) - (13) = -10, left: -10, 2, 13\n(-10) - (13) = -23, left: -23, 2\n(2) * (-23) = -46, left: -46\n(13) * (3) = 39, left: 39, 2, 13\n(39) / (13) = 3, left: 3, 2\n(39) - (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 3) - 13) - 2)"}, {"input": "13 3 2 13\n", "output": "(13) + (3) = 16, left: 16, 2, 13\n(16) - (13) = 3, left: 3, 2\n(3) / (13) = 3/13, left: 3/13, 2, 13\n(3/13) - (13) = -166/13, left: -166/13, 2\n(13) / (3) = 13/3, left: 13/3, 2, 13\n(2) + (13/3) = 19/3, left: 19/3, 13\n(3) - (13) = -10, left: -10, 2, 13\n(13) * (3) = 39, left: 39, 2, 13\n(39) - (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 3) - 13) - 2)"}, {"input": "13 3 2 13\n", "output": "(13) - (13) = 0, left: 0, 3, 2\n(13) - (13) = 0, left: 0, 3, 2\n(13) * (13) = 169, left: 169, 3, 2\n(3) + (2) = 5, left: 5, 169\n(13) / (13) = 1, left: 1, 3, 2\n(3) / (1) = 3, left: 3, 2\n(3) - (13) = -10, left: -10, 2, 13\n(13) * (3) = 39, left: 39, 2, 13\n(39) - (2) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: (((13 * 3) - 2) - 13)"}, {"input": "13 3 2 13\n", "output": "(13) / (13) = 1, left: 1, 3, 2\n(3) / (1) = 3, left: 3, 2\n(13) - (13) = 0, left: 0, 3, 2\n(13) + (13) = 26, left: 26, 3, 2\n(2) / (3) = 2/3, left: 2/3, 26\n(13) - (2) = 11, left: 11, 13, 3\n(2) + (13) = 15, left: 15, 13, 3\n(15) - (3) = 12, left: 12, 13\n(13) * (3) = 39, left: 39, 15\n(39) - (15) = 24, left: 24\nreach 24! expression: ((13 * 3) - (2 + 13))"}, {"input": "13 3 2 13\n", "output": "(13) / (13) = 1, left: 1, 3, 2\n(13) / (13) = 1, left: 1, 3, 2\n(1) - (3) = -2, left: -2, 2\n(2) + (-2) = 0, left: 0\n(13) * (13) = 169, left: 169, 3, 2\n(13) / (3) = 13/3, left: 13/3, 2, 13\n(13) / (13/3) = 3, left: 3, 2\n(13) * (3) = 39, left: 39, 2, 13\n(39) - (2) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: (((13 * 3) - 2) - 13)"}, {"input": "3 7 7 9\n", "output": "(3) - (9) = -6, left: -6, 7, 7\n(3) * (9) = 27, left: 27, 7, 7\n(7) / (3) = 7/3, left: 7/3, 7, 9\n(3) / (7) = 3/7, left: 3/7, 7, 9\n(3/7) / (7) = 3/49, left: 3/49, 9\n(3) + (7) = 10, left: 10, 7, 9\n(3) / (7) = 3/7, left: 3/7, 7, 9\n(7) / (7) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(9) - (7) = 2, left: 2, 3, 7\n(7) / (9) = 7/9, left: 7/9, 3, 7\n(9) / (3) = 3, left: 3, 7, 7\n(9) - (7) = 2, left: 2, 3, 7\n(7) - (3) = 4, left: 4, 7, 9\n(3) * (7) = 21, left: 21, 7, 9\n(7) * (9) = 63, left: 63, 21\n(7) / (7) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(7) / (3) = 7/3, left: 7/3, 7, 9\n(9) - (7) = 2, left: 2, 3, 7\n(9) / (3) = 3, left: 3, 7, 7\n(7) - (9) = -2, left: -2, 3, 7\n(7) / (9) = 7/9, left: 7/9, 3, 7\n(3) - (7) = -4, left: -4, 7/9\n(9) / (7) = 9/7, left: 9/7, 3, 7\n(7) / (7) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(9) / (7) = 9/7, left: 9/7, 3, 7\n(3) - (9/7) = 12/7, left: 12/7, 7\n(9) - (7) = 2, left: 2, 3, 7\n(2) / (7) = 2/7, left: 2/7, 3\n(7) * (7) = 49, left: 49, 3, 9\n(7) - (7) = 0, left: 0, 3, 9\n(3) - (9) = -6, left: -6, 0\n(7) / (7) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(7) / (7) = 1, left: 1, 3, 9\n(1) - (9) = -8, left: -8, 3\n(-8) / (3) = -8/3, left: -8/3\n(3) / (-8) = -3/8, left: -3/8\n(9) / (1) = 9, left: 9, 3\n(9) / (3) = 3, left: 3\n(3) / (9) = 1/3, left: 1/3\n(1) / (9) = 1/9, left: 1/9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(3) - (7) = -4, left: -4, 7, 9\n(7) / (3) = 7/3, left: 7/3, 7, 9\n(9) - (7/3) = 20/3, left: 20/3, 7\n(3) / (7) = 3/7, left: 3/7, 7, 9\n(7) * (9) = 63, left: 63, 3, 7\n(7) / (63) = 1/9, left: 1/9, 3\n(3) * (1/9) = 1/3, left: 1/3\n(9) - (7) = 2, left: 2, 3, 7\n(7) * (7) = 49, left: 49, 3, 9\n(3) / (49) = 3/49, left: 3/49, 9\n(7) - (7) = 0, left: 0, 3, 9\n(7) / (7) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(3) * (7) = 21, left: 21, 7, 9\n(21) - (9) = 12, left: 12, 7\n(9) / (3) = 3, left: 3, 7, 7\n(3) + (9) = 12, left: 12, 7, 7\n(7) * (12) = 84, left: 84, 7\n(7) + (9) = 16, left: 16, 3, 7\n(7) + (16) = 23, left: 23, 3\n(3) + (23) = 26, left: 26\n(3) - (7) = -4, left: -4, 7, 9\n(7) / (-4) = -7/4, left: -7/4, 9\n(7) - (3) = 4, left: 4, 7, 9\n(7) / (7) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(3) - (9) = -6, left: -6, 7, 7\n(3) + (9) = 12, left: 12, 7, 7\n(3) * (9) = 27, left: 27, 7, 7\n(7) * (27) = 189, left: 189, 7\n(9) - (3) = 6, left: 6, 7, 7\n(3) / (7) = 3/7, left: 3/7, 7, 9\n(7) - (3) = 4, left: 4, 7, 9\n(7) * (4) = 28, left: 28, 9\n(3) + (7) = 10, left: 10, 7, 9\n(3) / (7) = 3/7, left: 3/7, 7, 9\n(9) / (3/7) = 21, left: 21, 7\n(7) / (7) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(3) - (7) = -4, left: -4, 7, 9\n(9) - (7) = 2, left: 2, 3, 7\n(7) + (9) = 16, left: 16, 3, 7\n(7) * (9) = 63, left: 63, 3, 7\n(3) * (7) = 21, left: 21, 63\n(3) + (9) = 12, left: 12, 7, 7\n(3) - (9) = -6, left: -6, 7, 7\n(7) - (-6) = 13, left: 13, 7\n(7) * (9) = 63, left: 63, 3, 7\n(7) + (63) = 70, left: 70, 3\n(3) + (7) = 10, left: 10, 63\n(7) / (7) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "2 6 11 5\n", "output": "(2) + (11) = 13, left: 13, 6, 5\n(13) / (6) = 13/6, left: 13/6, 5\n(6) * (13) = 78, left: 78, 5\n(78) - (5) = 73, left: 73\n(6) + (13) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (6 + (2 + 11)))"}, {"input": "2 6 11 5\n", "output": "(11) + (5) = 16, left: 16, 2, 6\n(6) - (2) = 4, left: 4, 16\n(16) * (4) = 64, left: 64\n(2) / (6) = 1/3, left: 1/3, 16\n(2) + (6) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((11 + 5) + (2 + 6))"}, {"input": "2 6 11 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 2, 6\n(6) / (2) = 3, left: 3, 11/5\n(6) * (11/5) = 66/5, left: 66/5, 2\n(11) + (5) = 16, left: 16, 2, 6\n(6) + (16) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (6 + (11 + 5)))"}, {"input": "2 6 11 5\n", "output": "(2) - (6) = -4, left: -4, 11, 5\n(11) + (5) = 16, left: 16, -4\n(-4) - (16) = -20, left: -20\n(11) / (5) = 11/5, left: 11/5, -4\n(5) - (11) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((2 - 6) * (5 - 11))"}, {"input": "2 6 11 5\n", "output": "(2) + (11) = 13, left: 13, 6, 5\n(13) / (6) = 13/6, left: 13/6, 5\n(5) * (13/6) = 65/6, left: 65/6\n(6) * (13) = 78, left: 78, 5\n(5) - (78) = -73, left: -73\n(5) * (78) = 390, left: 390\n(5) + (78) = 83, left: 83\n(6) + (13) = 19, left: 19, 5\n(5) - (19) = -14, left: -14\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (6 + (2 + 11)))"}, {"input": "2 6 11 5\n", "output": "(11) + (5) = 16, left: 16, 2, 6\n(6) - (2) = 4, left: 4, 16\n(6) / (2) = 3, left: 3, 16\n(16) * (3) = 48, left: 48\n(16) - (3) = 13, left: 13\n(2) / (6) = 1/3, left: 1/3, 16\n(16) / (1/3) = 48, left: 48\n(1/3) - (16) = -47/3, left: -47/3\n(2) + (6) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((11 + 5) + (2 + 6))"}, {"input": "2 6 11 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 2, 6\n(6) / (11/5) = 30/11, left: 30/11, 2\n(11/5) / (6) = 11/30, left: 11/30, 2\n(6) + (11/5) = 41/5, left: 41/5, 2\n(11/5) - (6) = -19/5, left: -19/5, 2\n(11/5) - (2) = 1/5, left: 1/5, 6\n(2) - (11/5) = -1/5, left: -1/5, 6\n(11) + (5) = 16, left: 16, 2, 6\n(6) + (16) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (6 + (11 + 5)))"}, {"input": "2 6 11 5\n", "output": "(6) * (11) = 66, left: 66, 2, 5\n(2) + (66) = 68, left: 68, 5\n(66) - (5) = 61, left: 61, 2\n(66) / (5) = 66/5, left: 66/5, 2\n(2) * (66/5) = 132/5, left: 132/5\n(5) + (66) = 71, left: 71, 2\n(71) - (2) = 69, left: 69\n(6) + (11) = 17, left: 17, 2, 5\n(2) + (17) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (2 + (6 + 11)))"}, {"input": "2 6 11 5\n", "output": "(2) - (6) = -4, left: -4, 11, 5\n(5) * (-4) = -20, left: -20, 11\n(11) - (-20) = 31, left: 31\n(-4) - (5) = -9, left: -9, 11\n(5) - (-4) = 9, left: 9, 11\n(5) + (-4) = 1, left: 1, 11\n(1) / (11) = 1/11, left: 1/11\n(5) / (11) = 5/11, left: 5/11, -4\n(5) - (11) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((2 - 6) * (5 - 11))"}, {"input": "13 8 5 9\n", "output": "(5) / (8) = 5/8, left: 5/8, 13, 9\n(9) / (13) = 9/13, left: 9/13, 5/8\n(13) + (8) = 21, left: 21, 5, 9\n(5) / (21) = 5/21, left: 5/21, 9\n(5) * (9) = 45, left: 45, 21\n(45) - (21) = 24, left: 24\nreach 24! expression: ((5 * 9) - (13 + 8))"}, {"input": "13 8 5 9\n", "output": "(5) + (9) = 14, left: 14, 13, 8\n(8) + (14) = 22, left: 22, 13\n(13) * (22) = 286, left: 286\n(13) - (8) = 5, left: 5, 14\n(5) / (9) = 5/9, left: 5/9, 13, 8\n(8) * (5/9) = 40/9, left: 40/9, 13\n(9) / (5) = 9/5, left: 9/5, 13, 8\n(5) * (9) = 45, left: 45, 13, 8\n(45) - (8) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: (((5 * 9) - 8) - 13)"}, {"input": "13 8 5 9\n", "output": "(8) / (13) = 8/13, left: 8/13, 5, 9\n(13) - (8) = 5, left: 5, 5, 9\n(5) / (5) = 1, left: 1, 9\n(8) - (13) = -5, left: -5, 5, 9\n(5) * (9) = 45, left: 45, -5\n(-5) * (45) = -225, left: -225\n(13) + (8) = 21, left: 21, 5, 9\n(5) / (21) = 5/21, left: 5/21, 9\n(5) * (9) = 45, left: 45, 21\n(45) - (21) = 24, left: 24\nreach 24! expression: ((5 * 9) - (13 + 8))"}, {"input": "13 8 5 9\n", "output": "(9) - (13) = -4, left: -4, 8, 5\n(-4) / (5) = -4/5, left: -4/5, 8\n(13) - (9) = 4, left: 4, 8, 5\n(8) + (5) = 13, left: 13, 4\n(13) / (9) = 13/9, left: 13/9, 8, 5\n(13) * (9) = 117, left: 117, 8, 5\n(8) - (5) = 3, left: 3, 117\n(13) + (8) = 21, left: 21, 5, 9\n(5) * (9) = 45, left: 45, 21\n(45) - (21) = 24, left: 24\nreach 24! expression: ((5 * 9) - (13 + 8))"}, {"input": "13 8 5 9\n", "output": "(13) + (9) = 22, left: 22, 8, 5\n(8) - (5) = 3, left: 3, 13, 9\n(13) + (9) = 22, left: 22, 3\n(5) / (8) = 5/8, left: 5/8, 13, 9\n(5) - (8) = -3, left: -3, 13, 9\n(-3) / (9) = -1/3, left: -1/3, 13\n(13) + (8) = 21, left: 21, 5, 9\n(9) * (21) = 189, left: 189, 5\n(5) * (9) = 45, left: 45, 21\n(45) - (21) = 24, left: 24\nreach 24! expression: ((5 * 9) - (13 + 8))"}, {"input": "13 8 5 9\n", "output": "(9) / (8) = 9/8, left: 9/8, 13, 5\n(8) / (9) = 8/9, left: 8/9, 13, 5\n(8/9) - (13) = -109/9, left: -109/9, 5\n(13) + (9) = 22, left: 22, 8, 5\n(9) - (5) = 4, left: 4, 13, 8\n(5) / (9) = 5/9, left: 5/9, 13, 8\n(13) + (5/9) = 122/9, left: 122/9, 8\n(5) * (9) = 45, left: 45, 13, 8\n(45) - (13) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: (((5 * 9) - 13) - 8)"}, {"input": "13 8 5 9\n", "output": "(13) + (9) = 22, left: 22, 8, 5\n(9) - (13) = -4, left: -4, 8, 5\n(8) - (-4) = 12, left: 12, 5\n(8) / (5) = 8/5, left: 8/5, 13, 9\n(13) + (8/5) = 73/5, left: 73/5, 9\n(8) - (5) = 3, left: 3, 13, 9\n(3) / (9) = 1/3, left: 1/3, 13\n(8) * (5) = 40, left: 40, 13, 9\n(8) + (5) = 13, left: 13, 13, 9\n(5) - (8) = -3, left: -3, 13, 9\n(9) * (-3) = -27, left: -27, 13\n(13) + (8) = 21, left: 21, 5, 9\n(5) * (9) = 45, left: 45, 21\n(45) - (21) = 24, left: 24\nreach 24! expression: ((5 * 9) - (13 + 8))"}, {"input": "1 3 9 1\n", "output": "(1) * (1) = 1, left: 1, 3, 9\n(9) / (3) = 3, left: 3, 1\n(1) / (3) = 1/3, left: 1/3\n(3) - (1) = 2, left: 2\n(3) * (9) = 27, left: 27, 1\n(1) - (9) = -8, left: -8, 3\n(1) / (9) = 1/9, left: 1/9, 3\n(3) - (1/9) = 26/9, left: 26/9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (1 * 1)))"}, {"input": "1 3 9 1\n", "output": "(1) - (3) = -2, left: -2, 9, 1\n(3) / (1) = 3, left: 3, 9, 1\n(9) / (3) = 3, left: 3, 1\n(9) + (3) = 12, left: 12, 1\n(1) * (3) = 3, left: 3, 9\n(3) / (9) = 1/3, left: 1/3\n(9) + (1) = 10, left: 10, 3\n(10) / (3) = 10/3, left: 10/3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((3 / 1) * (9 - 1))"}, {"input": "1 3 9 1\n", "output": "(1) + (1) = 2, left: 2, 3, 9\n(3) * (9) = 27, left: 27, 2\n(2) + (27) = 29, left: 29\n(2) * (27) = 54, left: 54\n(2) - (27) = -25, left: -25\n(27) - (2) = 25, left: 25\n(2) / (27) = 2/27, left: 2/27\n(3) + (9) = 12, left: 12, 2\n(2) / (12) = 1/6, left: 1/6\n(2) * (12) = 24, left: 24\nreach 24! expression: ((1 + 1) * (3 + 9))"}, {"input": "1 3 9 1\n", "output": "(3) / (9) = 1/3, left: 1/3, 1, 1\n(1) / (1/3) = 3, left: 3, 1\n(3) - (9) = -6, left: -6, 1, 1\n(-6) / (1) = -6, left: -6, 1\n(-6) - (1) = -7, left: -7, 1\n(1) - (1) = 0, left: 0, -6\n(1) + (1) = 2, left: 2, -6\n(3) + (9) = 12, left: 12, 1, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 + 9) * (1 + 1))"}, {"input": "1 3 9 1\n", "output": "(1) + (9) = 10, left: 10, 3, 1\n(1) - (10) = -9, left: -9, 3\n(1) + (10) = 11, left: 11, 3\n(3) / (1) = 3, left: 3, 10\n(10) / (3) = 10/3, left: 10/3\n(1) * (9) = 9, left: 9, 3, 1\n(3) - (9) = -6, left: -6, 1\n(9) / (1) = 9, left: 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((1 * 9) - 1))"}, {"input": "1 3 9 1\n", "output": "(1) + (1) = 2, left: 2, 3, 9\n(3) * (9) = 27, left: 27, 2\n(2) + (27) = 29, left: 29\n(2) * (27) = 54, left: 54\n(27) / (2) = 27/2, left: 27/2\n(2) - (27) = -25, left: -25\n(27) - (2) = 25, left: 25\n(2) / (27) = 2/27, left: 2/27\n(3) + (9) = 12, left: 12, 2\n(2) / (12) = 1/6, left: 1/6\n(2) * (12) = 24, left: 24\nreach 24! expression: ((1 + 1) * (3 + 9))"}, {"input": "1 3 9 1\n", "output": "(3) / (9) = 1/3, left: 1/3, 1, 1\n(1) - (1/3) = 2/3, left: 2/3, 1\n(3) - (9) = -6, left: -6, 1, 1\n(1) + (-6) = -5, left: -5, 1\n(1) * (-5) = -5, left: -5\n(9) / (3) = 3, left: 3, 1, 1\n(1) * (1) = 1, left: 1, 3\n(3) * (1) = 3, left: 3\n(1) - (1) = 0, left: 0, 3\n(1) / (1) = 1, left: 1, 3\n(3) + (9) = 12, left: 12, 1, 1\n(12) / (1) = 12, left: 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 + 9) * (1 + 1))"}, {"input": "1 3 9 1\n", "output": "(1) + (1) = 2, left: 2, 3, 9\n(3) * (9) = 27, left: 27, 2\n(2) + (27) = 29, left: 29\n(2) * (27) = 54, left: 54\n(27) / (2) = 27/2, left: 27/2\n(2) - (27) = -25, left: -25\n(27) - (2) = 25, left: 25\n(2) / (27) = 2/27, left: 2/27\n(3) + (9) = 12, left: 12, 2\n(2) / (12) = 1/6, left: 1/6\n(2) * (12) = 24, left: 24\nreach 24! expression: ((1 + 1) * (3 + 9))"}, {"input": "2 8 1 5\n", "output": "(2) / (5) = 2/5, left: 2/5, 8, 1\n(8) + (2/5) = 42/5, left: 42/5, 1\n(2) * (5) = 10, left: 10, 8, 1\n(1) + (10) = 11, left: 11, 8\n(8) - (11) = -3, left: -3\n(2) - (5) = -3, left: -3, 8, 1\n(2) + (5) = 7, left: 7, 8, 1\n(5) - (2) = 3, left: 3, 8, 1\n(8) * (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((5 - 2) * (8 * 1))"}, {"input": "2 8 1 5\n", "output": "(8) / (2) = 4, left: 4, 1, 5\n(1) / (5) = 1/5, left: 1/5, 4\n(5) - (1) = 4, left: 4, 4\n(1) - (5) = -4, left: -4, 4\n(1) * (5) = 5, left: 5, 4\n(5) - (4) = 1, left: 1\n(4) + (5) = 9, left: 9\n(5) / (1) = 5, left: 5, 4\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 / 2) * (1 + 5))"}, {"input": "2 8 1 5\n", "output": "(8) - (1) = 7, left: 7, 2, 5\n(5) / (7) = 5/7, left: 5/7, 2\n(2) / (5/7) = 14/5, left: 14/5\n(5/7) / (2) = 5/14, left: 5/14\n(2) * (5/7) = 10/7, left: 10/7\n(5) - (7) = -2, left: -2, 2\n(-2) - (2) = -4, left: -4\n(2) - (-2) = 4, left: 4\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (5 + (8 - 1)))"}, {"input": "2 8 1 5\n", "output": "(8) * (5) = 40, left: 40, 2, 1\n(1) / (40) = 1/40, left: 1/40, 2\n(8) - (5) = 3, left: 3, 2, 1\n(2) - (1) = 1, left: 1, 3\n(1) / (3) = 1/3, left: 1/3, 2\n(5) - (8) = -3, left: -3, 2, 1\n(2) - (-3) = 5, left: 5, 1\n(8) + (5) = 13, left: 13, 2, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((8 + 5) - 1))"}, {"input": "2 8 1 5\n", "output": "(1) * (5) = 5, left: 5, 2, 8\n(2) - (5) = -3, left: -3, 8\n(8) * (-3) = -24, left: -24\n(8) / (-3) = -8/3, left: -8/3\n(8) + (-3) = 5, left: 5\n(8) - (-3) = 11, left: 11\n(-3) / (8) = -3/8, left: -3/8\n(5) - (2) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((1 * 5) - 2))"}, {"input": "3 9 7 3\n", "output": "(3) / (7) = 3/7, left: 3/7, 3, 9\n(3/7) / (9) = 1/21, left: 1/21, 3\n(9) - (3/7) = 60/7, left: 60/7, 3\n(3/7) - (9) = -60/7, left: -60/7, 3\n(9) / (3/7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (9 / (3 / 7)))"}, {"input": "3 9 7 3\n", "output": "(3) - (3) = 0, left: 0, 9, 7\n(9) + (7) = 16, left: 16, 0\n(3) + (3) = 6, left: 6, 9, 7\n(3) * (3) = 9, left: 9, 9, 7\n(9) / (7) = 9/7, left: 9/7, 9\n(9) - (9) = 0, left: 0, 7\n(7) - (9) = -2, left: -2, 3, 3\n(9) * (7) = 63, left: 63, 3, 3\n(63) / (3) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + ((9 * 7) / 3))"}, {"input": "3 9 7 3\n", "output": "(7) + (3) = 10, left: 10, 3, 9\n(3) - (9) = -6, left: -6, 10\n(10) - (3) = 7, left: 7, 9\n(10) - (9) = 1, left: 1, 3\n(9) * (10) = 90, left: 90, 3\n(7) - (3) = 4, left: 4, 3, 9\n(9) / (4) = 9/4, left: 9/4, 3\n(4) - (9) = -5, left: -5, 3\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((7 - 3) * (9 - 3))"}, {"input": "3 9 7 3\n", "output": "(3) / (7) = 3/7, left: 3/7, 3, 9\n(3) / (3/7) = 7, left: 7, 9\n(3/7) / (3) = 1/7, left: 1/7, 9\n(3) - (3/7) = 18/7, left: 18/7, 9\n(3) + (3/7) = 24/7, left: 24/7, 9\n(3) * (3/7) = 9/7, left: 9/7, 9\n(9/7) / (9) = 1/7, left: 1/7\n(3/7) - (9) = -60/7, left: -60/7, 3\n(9) / (3/7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (9 / (3 / 7)))"}, {"input": "3 9 7 3\n", "output": "(3) / (9) = 1/3, left: 1/3, 7, 3\n(7) - (3) = 4, left: 4, 1/3\n(7) + (3) = 10, left: 10, 1/3\n(3) / (7) = 3/7, left: 3/7, 1/3\n(1/3) + (3/7) = 16/21, left: 16/21\n(1/3) - (3) = -8/3, left: -8/3, 7\n(-8/3) - (7) = -29/3, left: -29/3\n(3) + (1/3) = 10/3, left: 10/3, 7\n(7) / (1/3) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (7 / (3 / 9)))"}, {"input": "3 9 7 3\n", "output": "(3) / (7) = 3/7, left: 3/7, 3, 9\n(9) / (3) = 3, left: 3, 3/7\n(3) - (9) = -6, left: -6, 3/7\n(3/7) + (-6) = -39/7, left: -39/7\n(3) / (9) = 1/3, left: 1/3, 3/7\n(3) + (9) = 12, left: 12, 3/7\n(3/7) - (9) = -60/7, left: -60/7, 3\n(3) - (-60/7) = 81/7, left: 81/7\n(9) / (3/7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (9 / (3 / 7)))"}, {"input": "3 9 7 3\n", "output": "(3) - (3) = 0, left: 0, 9, 7\n(9) * (0) = 0, left: 0, 7\n(3) - (3) = 0, left: 0, 9, 7\n(9) * (7) = 63, left: 63, 0\n(3) * (3) = 9, left: 9, 9, 7\n(7) * (9) = 63, left: 63, 9\n(9) / (7) = 9/7, left: 9/7, 9\n(3) / (3) = 1, left: 1, 9, 7\n(7) + (1) = 8, left: 8, 9\n(9) / (7) = 9/7, left: 9/7, 3, 3\n(3) * (9/7) = 27/7, left: 27/7, 3\n(9) * (7) = 63, left: 63, 3, 3\n(63) / (3) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + ((9 * 7) / 3))"}, {"input": "6 10 7 1\n", "output": "(6) * (7) = 42, left: 42, 10, 1\n(10) / (42) = 5/21, left: 5/21, 1\n(1) + (5/21) = 26/21, left: 26/21\n(6) + (7) = 13, left: 13, 10, 1\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((6 + 7) + (10 + 1))"}, {"input": "6 10 7 1\n", "output": "(7) / (6) = 7/6, left: 7/6, 10, 1\n(10) - (7/6) = 53/6, left: 53/6, 1\n(1) * (7/6) = 7/6, left: 7/6, 10\n(6) + (7) = 13, left: 13, 10, 1\n(10) + (13) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (10 + (6 + 7)))"}, {"input": "6 10 7 1\n", "output": "(7) - (1) = 6, left: 6, 6, 10\n(6) / (10) = 3/5, left: 3/5, 6\n(6) * (10) = 60, left: 60, 6\n(10) - (6) = 4, left: 4, 6\n(6) - (4) = 2, left: 2\n(6) * (4) = 24, left: 24\nreach 24! expression: ((7 - 1) * (10 - 6))"}, {"input": "6 10 7 1\n", "output": "(1) / (6) = 1/6, left: 1/6, 10, 7\n(10) / (1/6) = 60, left: 60, 7\n(7) + (1/6) = 43/6, left: 43/6, 10\n(6) + (1) = 7, left: 7, 10, 7\n(10) + (7) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: ((6 + 1) + (10 + 7))"}, {"input": "6 10 7 1\n", "output": "(7) / (6) = 7/6, left: 7/6, 10, 1\n(1) - (10) = -9, left: -9, 7/6\n(10) - (1) = 9, left: 9, 7/6\n(7/6) - (9) = -47/6, left: -47/6\n(10) + (7/6) = 67/6, left: 67/6, 1\n(7) - (6) = 1, left: 1, 10, 1\n(10) / (1) = 10, left: 10, 1\n(6) + (7) = 13, left: 13, 10, 1\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((6 + 7) + (10 + 1))"}, {"input": "6 10 7 1\n", "output": "(7) - (1) = 6, left: 6, 6, 10\n(6) / (10) = 3/5, left: 3/5, 6\n(3/5) / (6) = 1/10, left: 1/10\n(6) * (10) = 60, left: 60, 6\n(6) - (60) = -54, left: -54\n(6) * (60) = 360, left: 360\n(6) - (10) = -4, left: -4, 6\n(6) - (-4) = 10, left: 10\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((7 - 1) * (10 - 6))"}, {"input": "6 10 7 1\n", "output": "(6) - (1) = 5, left: 5, 10, 7\n(6) * (1) = 6, left: 6, 10, 7\n(6) - (10) = -4, left: -4, 7\n(6) / (7) = 6/7, left: 6/7, 10\n(1) - (6) = -5, left: -5, 10, 7\n(1) / (6) = 1/6, left: 1/6, 10, 7\n(10) / (7) = 10/7, left: 10/7, 1/6\n(6) + (1) = 7, left: 7, 10, 7\n(10) + (7) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: ((6 + 1) + (10 + 7))"}, {"input": "6 10 7 1\n", "output": "(7) + (1) = 8, left: 8, 6, 10\n(10) / (8) = 5/4, left: 5/4, 6\n(5/4) - (6) = -19/4, left: -19/4\n(8) / (10) = 4/5, left: 4/5, 6\n(6) * (4/5) = 24/5, left: 24/5\n(10) * (8) = 80, left: 80, 6\n(10) - (8) = 2, left: 2, 6\n(10) + (8) = 18, left: 18, 6\n(6) * (18) = 108, left: 108\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (10 + (7 + 1)))"}, {"input": "6 10 7 1\n", "output": "(7) / (6) = 7/6, left: 7/6, 10, 1\n(7/6) / (1) = 7/6, left: 7/6, 10\n(10) + (7/6) = 67/6, left: 67/6\n(6) * (7) = 42, left: 42, 10, 1\n(1) + (42) = 43, left: 43, 10\n(10) / (43) = 10/43, left: 10/43\n(6) + (7) = 13, left: 13, 10, 1\n(13) - (10) = 3, left: 3, 1\n(10) + (13) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (10 + (6 + 7)))"}, {"input": "10 8 7 10\n", "output": "(8) * (10) = 80, left: 80, 10, 7\n(7) + (80) = 87, left: 87, 10\n(8) - (10) = -2, left: -2, 10, 7\n(10) + (7) = 17, left: 17, -2\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (8 - 10)))"}, {"input": "10 8 7 10\n", "output": "(8) * (10) = 80, left: 80, 10, 7\n(80) / (7) = 80/7, left: 80/7, 10\n(10) + (80/7) = 150/7, left: 150/7\n(10) - (8) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (10 - 8)))"}, {"input": "10 8 7 10\n", "output": "(8) * (10) = 80, left: 80, 10, 7\n(10) + (7) = 17, left: 17, 80\n(17) - (80) = -63, left: -63\n(10) / (7) = 10/7, left: 10/7, 80\n(10) * (80) = 800, left: 800, 7\n(7) / (80) = 7/80, left: 7/80, 10\n(80) / (7) = 80/7, left: 80/7, 10\n(10) - (8) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (10 - 8)))"}, {"input": "10 8 7 10\n", "output": "(10) * (8) = 80, left: 80, 7, 10\n(80) / (10) = 8, left: 8, 7\n(7) * (8) = 56, left: 56\n(10) + (80) = 90, left: 90, 7\n(10) - (8) = 2, left: 2, 7, 10\n(10) * (2) = 20, left: 20, 7\n(10) + (2) = 12, left: 12, 7\n(7) / (2) = 7/2, left: 7/2, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (10 - 8)))"}, {"input": "10 8 7 10\n", "output": "(7) - (10) = -3, left: -3, 8, 10\n(7) * (10) = 70, left: 70, 10, 8\n(10) / (8) = 5/4, left: 5/4, 70\n(70) + (5/4) = 285/4, left: 285/4\n(7) / (8) = 7/8, left: 7/8, 10, 10\n(8) / (7) = 8/7, left: 8/7, 10, 10\n(8/7) - (10) = -62/7, left: -62/7, 10\n(8) - (10) = -2, left: -2, 10, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (8 - 10)))"}, {"input": "10 8 7 10\n", "output": "(8) * (10) = 80, left: 80, 10, 7\n(80) - (7) = 73, left: 73, 10\n(80) - (10) = 70, left: 70, 7\n(7) / (70) = 1/10, left: 1/10\n(8) - (10) = -2, left: -2, 10, 7\n(10) * (7) = 70, left: 70, -2\n(-2) / (70) = -1/35, left: -1/35\n(7) / (10) = 7/10, left: 7/10, -2\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (8 - 10)))"}, {"input": "10 8 7 10\n", "output": "(7) - (10) = -3, left: -3, 8, 10\n(8) - (10) = -2, left: -2, -3\n(10) * (7) = 70, left: 70, 8, 10\n(10) + (7) = 17, left: 17, 8, 10\n(8) * (10) = 80, left: 80, 17\n(10) / (10) = 1, left: 1, 8, 7\n(10) / (8) = 5/4, left: 5/4, 10, 7\n(8) - (10) = -2, left: -2, 10, 7\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (8 - 10)))"}, {"input": "13 4 3 11\n", "output": "(3) + (11) = 14, left: 14, 13, 4\n(13) / (14) = 13/14, left: 13/14, 4\n(11) - (3) = 8, left: 8, 13, 4\n(3) * (11) = 33, left: 33, 13, 4\n(33) - (13) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((3 * 11) - 13))"}, {"input": "13 4 3 11\n", "output": "(3) / (13) = 3/13, left: 3/13, 4, 11\n(13) * (3) = 39, left: 39, 4, 11\n(4) * (39) = 156, left: 156, 11\n(11) * (156) = 1716, left: 1716\n(39) - (4) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((13 * 3) - 4) - 11)"}, {"input": "13 4 3 11\n", "output": "(4) + (3) = 7, left: 7, 13, 11\n(13) * (11) = 143, left: 143, 7\n(7) * (143) = 1001, left: 1001\n(4) * (3) = 12, left: 12, 13, 11\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((4 * 3) * (13 - 11))"}, {"input": "13 4 3 11\n", "output": "(13) + (3) = 16, left: 16, 4, 11\n(11) - (4) = 7, left: 7, 16\n(13) / (3) = 13/3, left: 13/3, 4, 11\n(13) * (3) = 39, left: 39, 4, 11\n(39) - (4) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((13 * 3) - 4) - 11)"}, {"input": "13 4 3 11\n", "output": "(3) / (11) = 3/11, left: 3/11, 13, 4\n(4) - (13) = -9, left: -9, 3/11\n(11) - (3) = 8, left: 8, 13, 4\n(3) * (11) = 33, left: 33, 13, 4\n(4) + (33) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((4 + (3 * 11)) - 13)"}, {"input": "13 4 3 11\n", "output": "(3) / (11) = 3/11, left: 3/11, 13, 4\n(4) - (3/11) = 41/11, left: 41/11, 13\n(13) - (41/11) = 102/11, left: 102/11\n(3/11) - (13) = -140/11, left: -140/11, 4\n(11) - (3) = 8, left: 8, 13, 4\n(11) / (3) = 11/3, left: 11/3, 13, 4\n(13) / (4) = 13/4, left: 13/4, 11/3\n(3) * (11) = 33, left: 33, 13, 4\n(33) - (13) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((3 * 11) - 13))"}, {"input": "13 4 3 11\n", "output": "(3) / (11) = 3/11, left: 3/11, 13, 4\n(13) / (4) = 13/4, left: 13/4, 3/11\n(11) - (3) = 8, left: 8, 13, 4\n(4) + (8) = 12, left: 12, 13\n(13) / (12) = 13/12, left: 13/12\n(13) - (4) = 9, left: 9, 8\n(13) * (4) = 52, left: 52, 8\n(3) * (11) = 33, left: 33, 13, 4\n(4) + (33) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((4 + (3 * 11)) - 13)"}, {"input": "13 4 3 11\n", "output": "(13) + (3) = 16, left: 16, 4, 11\n(4) - (16) = -12, left: -12, 11\n(13) - (3) = 10, left: 10, 4, 11\n(4) - (11) = -7, left: -7, 10\n(13) / (3) = 13/3, left: 13/3, 4, 11\n(3) - (13) = -10, left: -10, 4, 11\n(-10) - (4) = -14, left: -14, 11\n(13) * (3) = 39, left: 39, 4, 11\n(39) - (4) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((13 * 3) - 4) - 11)"}, {"input": "13 4 3 11\n", "output": "(4) + (3) = 7, left: 7, 13, 11\n(7) - (13) = -6, left: -6, 11\n(13) * (7) = 91, left: 91, 11\n(11) - (91) = -80, left: -80\n(13) / (7) = 13/7, left: 13/7, 11\n(11) * (13/7) = 143/7, left: 143/7\n(11) / (7) = 11/7, left: 11/7, 13\n(4) * (3) = 12, left: 12, 13, 11\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((4 * 3) * (13 - 11))"}, {"input": "13 4 3 11\n", "output": "(3) / (13) = 3/13, left: 3/13, 4, 11\n(3/13) - (4) = -49/13, left: -49/13, 11\n(11) - (3/13) = 140/13, left: 140/13, 4\n(4) - (140/13) = -88/13, left: -88/13\n(11) * (3/13) = 33/13, left: 33/13, 4\n(11) / (3/13) = 143/3, left: 143/3, 4\n(13) * (3) = 39, left: 39, 4, 11\n(4) / (39) = 4/39, left: 4/39, 11\n(39) - (4) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((13 * 3) - 4) - 11)"}, {"input": "9 12 8 9\n", "output": "(12) / (9) = 4/3, left: 4/3, 9, 8\n(9) - (4/3) = 23/3, left: 23/3, 8\n(8) * (23/3) = 184/3, left: 184/3\n(9) / (12) = 3/4, left: 3/4, 9, 8\n(8) + (3/4) = 35/4, left: 35/4, 9\n(12) + (9) = 21, left: 21, 9, 8\n(21) - (9) = 12, left: 12, 8\n(12) - (9) = 3, left: 3, 9, 8\n(3) / (9) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((12 - 9) / 9))"}, {"input": "9 12 8 9\n", "output": "(12) + (9) = 21, left: 21, 9, 8\n(12) * (9) = 108, left: 108, 9, 8\n(8) / (108) = 2/27, left: 2/27, 9\n(2/27) - (9) = -241/27, left: -241/27\n(9) + (2/27) = 245/27, left: 245/27\n(9) * (108) = 972, left: 972, 8\n(9) / (12) = 3/4, left: 3/4, 9, 8\n(12) - (9) = 3, left: 3, 9, 8\n(9) / (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 / (12 - 9)))"}, {"input": "9 12 8 9\n", "output": "(12) / (9) = 4/3, left: 4/3, 8, 9\n(8) / (9) = 8/9, left: 8/9, 4/3\n(9) / (12) = 3/4, left: 3/4, 8, 9\n(9) / (3/4) = 12, left: 12, 8\n(9) + (12) = 21, left: 21, 8, 9\n(8) * (21) = 168, left: 168, 9\n(9) * (168) = 1512, left: 1512\n(12) - (9) = 3, left: 3, 8, 9\n(8) / (3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (8 / (12 - 9)))"}, {"input": "9 12 8 9\n", "output": "(8) - (12) = -4, left: -4, 9, 9\n(9) / (9) = 1, left: 1, -4\n(-4) - (1) = -5, left: -5\n(12) * (8) = 96, left: 96, 9, 9\n(12) - (8) = 4, left: 4, 9, 9\n(9) * (9) = 81, left: 81, 4\n(9) - (9) = 0, left: 0, 4\n(9) * (8) = 72, left: 72, 12, 9\n(12) - (9) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (12 - 9))"}, {"input": "9 12 8 9\n", "output": "(9) * (9) = 81, left: 81, 12, 8\n(9) + (9) = 18, left: 18, 12, 8\n(18) / (8) = 9/4, left: 9/4, 12\n(9) - (9) = 0, left: 0, 12, 8\n(12) + (8) = 20, left: 20, 0\n(9) - (9) = 0, left: 0, 12, 8\n(8) - (12) = -4, left: -4, 0\n(8) * (9) = 72, left: 72, 9, 12\n(12) - (9) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((8 * 9) / (12 - 9))"}, {"input": "10 7 5 9\n", "output": "(7) / (10) = 7/10, left: 7/10, 5, 9\n(5) / (9) = 5/9, left: 5/9, 7/10\n(7/10) / (9) = 7/90, left: 7/90, 5\n(10) - (7) = 3, left: 3, 5, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (10 - 7)))"}, {"input": "10 7 5 9\n", "output": "(10) + (9) = 19, left: 19, 7, 5\n(10) * (9) = 90, left: 90, 7, 5\n(7) * (5) = 35, left: 35, 90\n(9) - (10) = -1, left: -1, 7, 5\n(9) / (7) = 9/7, left: 9/7, 10, 5\n(7) / (5) = 7/5, left: 7/5, 10, 9\n(7) * (5) = 35, left: 35, 10, 9\n(7) - (10) = -3, left: -3, 5, 9\n(5) * (-3) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 * (7 - 10)))"}, {"input": "10 7 5 9\n", "output": "(7) / (10) = 7/10, left: 7/10, 5, 9\n(9) / (5) = 9/5, left: 9/5, 7/10\n(5) / (7/10) = 50/7, left: 50/7, 9\n(10) + (7) = 17, left: 17, 5, 9\n(17) / (9) = 17/9, left: 17/9, 5\n(10) / (7) = 10/7, left: 10/7, 5, 9\n(9) - (5) = 4, left: 4, 10/7\n(10) - (7) = 3, left: 3, 5, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (10 - 7)))"}, {"input": "10 7 5 9\n", "output": "(10) * (5) = 50, left: 50, 7, 9\n(10) - (5) = 5, left: 5, 7, 9\n(9) * (5) = 45, left: 45, 7\n(7) * (9) = 63, left: 63, 10, 5\n(9) - (7) = 2, left: 2, 10, 5\n(2) - (5) = -3, left: -3, 10\n(7) + (9) = 16, left: 16, 10, 5\n(7) - (10) = -3, left: -3, 5, 9\n(5) * (-3) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 * (7 - 10)))"}, {"input": "10 7 5 9\n", "output": "(5) * (9) = 45, left: 45, 10, 7\n(7) / (5) = 7/5, left: 7/5, 10, 9\n(10) * (5) = 50, left: 50, 7, 9\n(10) + (5) = 15, left: 15, 7, 9\n(7) * (15) = 105, left: 105, 9\n(10) / (5) = 2, left: 2, 7, 9\n(10) / (7) = 10/7, left: 10/7, 5, 9\n(10) - (7) = 3, left: 3, 5, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (10 - 7)))"}, {"input": "10 7 5 9\n", "output": "(7) + (5) = 12, left: 12, 10, 9\n(12) / (9) = 4/3, left: 4/3, 10\n(5) - (7) = -2, left: -2, 10, 9\n(10) * (-2) = -20, left: -20, 9\n(9) / (7) = 9/7, left: 9/7, 10, 5\n(7) / (10) = 7/10, left: 7/10, 5, 9\n(5) - (7/10) = 43/10, left: 43/10, 9\n(10) - (7) = 3, left: 3, 5, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (10 - 7)))"}, {"input": "10 7 5 9\n", "output": "(7) + (5) = 12, left: 12, 10, 9\n(5) / (7) = 5/7, left: 5/7, 10, 9\n(7) - (5) = 2, left: 2, 10, 9\n(9) / (10) = 9/10, left: 9/10, 2\n(2) - (9) = -7, left: -7, 10\n(7) * (5) = 35, left: 35, 10, 9\n(7) / (9) = 7/9, left: 7/9, 10, 5\n(9) / (7) = 9/7, left: 9/7, 10, 5\n(7) * (9) = 63, left: 63, 10, 5\n(10) * (7) = 70, left: 70, 5, 9\n(7) / (10) = 7/10, left: 7/10, 5, 9\n(10) - (7) = 3, left: 3, 5, 9\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 * (10 - 7)))"}, {"input": "10 7 5 9\n", "output": "(10) / (5) = 2, left: 2, 7, 9\n(9) / (7) = 9/7, left: 9/7, 2\n(9/7) - (2) = -5/7, left: -5/7\n(5) / (10) = 1/2, left: 1/2, 7, 9\n(5) - (10) = -5, left: -5, 7, 9\n(10) - (5) = 5, left: 5, 7, 9\n(9) / (5) = 9/5, left: 9/5, 7\n(9) / (7) = 9/7, left: 9/7, 10, 5\n(7) - (9) = -2, left: -2, 10, 5\n(7) - (10) = -3, left: -3, 5, 9\n(-3) - (5) = -8, left: -8, 9\n(9) / (-8) = -9/8, left: -9/8\n(5) * (-3) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 * (7 - 10)))"}, {"input": "10 7 5 9\n", "output": "(10) * (9) = 90, left: 90, 7, 5\n(7) + (5) = 12, left: 12, 90\n(10) - (9) = 1, left: 1, 7, 5\n(9) - (10) = -1, left: -1, 7, 5\n(9) - (7) = 2, left: 2, 10, 5\n(10) / (2) = 5, left: 5, 5\n(9) / (7) = 9/7, left: 9/7, 10, 5\n(7) * (9) = 63, left: 63, 10, 5\n(5) / (10) = 1/2, left: 1/2, 7, 9\n(7) / (5) = 7/5, left: 7/5, 10, 9\n(7) - (5) = 2, left: 2, 10, 9\n(7) - (10) = -3, left: -3, 5, 9\n(5) * (-3) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (5 * (7 - 10)))"}, {"input": "10 10 11 4\n", "output": "(10) * (11) = 110, left: 110, 10, 4\n(11) / (10) = 11/10, left: 11/10, 10, 4\n(10) * (4) = 40, left: 40, 11/10\n(11) * (4) = 44, left: 44, 10, 10\n(10) + (10) = 20, left: 20, 44\n(44) - (20) = 24, left: 24\nreach 24! expression: ((11 * 4) - (10 + 10))"}, {"input": "10 10 11 4\n", "output": "(10) + (4) = 14, left: 14, 10, 11\n(4) / (10) = 2/5, left: 2/5, 10, 11\n(11) / (2/5) = 55/2, left: 55/2, 10\n(10) + (10) = 20, left: 20, 11, 4\n(11) * (4) = 44, left: 44, 20\n(44) - (20) = 24, left: 24\nreach 24! expression: ((11 * 4) - (10 + 10))"}, {"input": "10 10 11 4\n", "output": "(10) + (4) = 14, left: 14, 10, 11\n(10) - (14) = -4, left: -4, 11\n(10) - (4) = 6, left: 6, 10, 11\n(11) * (4) = 44, left: 44, 10, 10\n(44) - (10) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: (((11 * 4) - 10) - 10)"}, {"input": "10 10 11 4\n", "output": "(10) + (4) = 14, left: 14, 10, 11\n(14) - (10) = 4, left: 4, 11\n(10) - (4) = 6, left: 6, 10, 11\n(11) * (4) = 44, left: 44, 10, 10\n(44) - (10) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: (((11 * 4) - 10) - 10)"}, {"input": "10 10 11 4\n", "output": "(4) / (10) = 2/5, left: 2/5, 10, 11\n(10) - (11) = -1, left: -1, 2/5\n(10) * (4) = 40, left: 40, 10, 11\n(11) * (4) = 44, left: 44, 10, 10\n(44) - (10) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: (((11 * 4) - 10) - 10)"}, {"input": "10 10 11 4\n", "output": "(4) / (10) = 2/5, left: 2/5, 10, 11\n(10) - (4) = 6, left: 6, 10, 11\n(10) - (11) = -1, left: -1, 10, 4\n(11) / (10) = 11/10, left: 11/10, 10, 4\n(10) + (11/10) = 111/10, left: 111/10, 4\n(4) - (11) = -7, left: -7, 10, 10\n(-7) - (10) = -17, left: -17, 10\n(11) * (4) = 44, left: 44, 10, 10\n(44) - (10) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: (((11 * 4) - 10) - 10)"}, {"input": "10 10 11 4\n", "output": "(10) + (4) = 14, left: 14, 10, 11\n(10) + (11) = 21, left: 21, 14\n(10) / (11) = 10/11, left: 10/11, 14\n(10) - (4) = 6, left: 6, 10, 11\n(4) - (10) = -6, left: -6, 10, 11\n(11) - (4) = 7, left: 7, 10, 10\n(10) + (7) = 17, left: 17, 10\n(11) * (4) = 44, left: 44, 10, 10\n(44) - (10) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: (((11 * 4) - 10) - 10)"}, {"input": "10 10 11 4\n", "output": "(10) + (4) = 14, left: 14, 10, 11\n(10) - (4) = 6, left: 6, 10, 11\n(10) / (4) = 5/2, left: 5/2, 10, 11\n(11) + (5/2) = 27/2, left: 27/2, 10\n(10) / (10) = 1, left: 1, 11, 4\n(10) / (10) = 1, left: 1, 11, 4\n(10) * (10) = 100, left: 100, 11, 4\n(10) + (10) = 20, left: 20, 11, 4\n(11) * (4) = 44, left: 44, 20\n(44) - (20) = 24, left: 24\nreach 24! expression: ((11 * 4) - (10 + 10))"}, {"input": "10 10 11 4\n", "output": "(10) / (4) = 5/2, left: 5/2, 10, 11\n(10) - (4) = 6, left: 6, 10, 11\n(4) - (10) = -6, left: -6, 10, 11\n(11) / (10) = 11/10, left: 11/10, 10, 4\n(10) / (11) = 10/11, left: 10/11, 10, 4\n(10) * (4) = 40, left: 40, 10, 11\n(4) - (11) = -7, left: -7, 10, 10\n(11) * (4) = 44, left: 44, 10, 10\n(44) - (10) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: (((11 * 4) - 10) - 10)"}, {"input": "10 10 11 4\n", "output": "(10) - (11) = -1, left: -1, 10, 4\n(10) - (4) = 6, left: 6, -1\n(10) * (11) = 110, left: 110, 10, 4\n(10) * (4) = 40, left: 40, 110\n(11) / (10) = 11/10, left: 11/10, 10, 4\n(11) - (10) = 1, left: 1, 10, 4\n(10) - (4) = 6, left: 6, 1\n(11) * (4) = 44, left: 44, 10, 10\n(10) + (10) = 20, left: 20, 44\n(44) - (20) = 24, left: 24\nreach 24! expression: ((11 * 4) - (10 + 10))"}, {"input": "4 9 3 7\n", "output": "(9) + (7) = 16, left: 16, 4, 3\n(3) * (16) = 48, left: 48, 4\n(7) / (9) = 7/9, left: 7/9, 4, 3\n(9) * (7) = 63, left: 63, 4, 3\n(3) - (63) = -60, left: -60, 4\n(7) - (9) = -2, left: -2, 4, 3\n(4) * (-2) = -8, left: -8, 3\n(9) - (7) = 2, left: 2, 4, 3\n(4) * (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((9 - 7) * (4 * 3))"}, {"input": "4 9 3 7\n", "output": "(9) * (7) = 63, left: 63, 4, 3\n(63) / (4) = 63/4, left: 63/4, 3\n(7) / (9) = 7/9, left: 7/9, 4, 3\n(4) + (7/9) = 43/9, left: 43/9, 3\n(9) + (7) = 16, left: 16, 4, 3\n(4) * (3) = 12, left: 12, 16\n(3) / (16) = 3/16, left: 3/16, 4\n(9) - (7) = 2, left: 2, 4, 3\n(3) * (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 * (9 - 7)))"}, {"input": "4 9 3 7\n", "output": "(4) + (9) = 13, left: 13, 3, 7\n(4) / (9) = 4/9, left: 4/9, 3, 7\n(3) / (4/9) = 27/4, left: 27/4, 7\n(3) - (7) = -4, left: -4, 4/9\n(4) - (9) = -5, left: -5, 3, 7\n(4) * (9) = 36, left: 36, 3, 7\n(3) + (36) = 39, left: 39, 7\n(9) - (7) = 2, left: 2, 4, 3\n(4) * (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 * (9 - 7)))"}, {"input": "4 9 3 7\n", "output": "(9) - (4) = 5, left: 5, 3, 7\n(3) / (5) = 3/5, left: 3/5, 7\n(3/5) - (7) = -32/5, left: -32/5\n(4) * (9) = 36, left: 36, 3, 7\n(7) / (3) = 7/3, left: 7/3, 36\n(9) / (4) = 9/4, left: 9/4, 3, 7\n(4) / (9) = 4/9, left: 4/9, 3, 7\n(9) * (3) = 27, left: 27, 4, 7\n(4) + (27) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((4 + (9 * 3)) - 7)"}, {"input": "4 9 3 7\n", "output": "(3) * (7) = 21, left: 21, 4, 9\n(9) + (21) = 30, left: 30, 4\n(30) - (4) = 26, left: 26\n(3) - (7) = -4, left: -4, 4, 9\n(4) * (-4) = -16, left: -16, 9\n(-4) / (4) = -1, left: -1, 9\n(3) / (7) = 3/7, left: 3/7, 4, 9\n(4) - (7) = -3, left: -3, 9, 3\n(9) * (3) = 27, left: 27, -3\n(-3) + (27) = 24, left: 24\nreach 24! expression: ((4 - 7) + (9 * 3))"}, {"input": "4 9 3 7\n", "output": "(9) / (4) = 9/4, left: 9/4, 3, 7\n(7) + (9/4) = 37/4, left: 37/4, 3\n(4) + (9) = 13, left: 13, 3, 7\n(4) / (9) = 4/9, left: 4/9, 3, 7\n(3) / (7) = 3/7, left: 3/7, 4/9\n(4) - (9) = -5, left: -5, 3, 7\n(7) * (-5) = -35, left: -35, 3\n(-5) - (7) = -12, left: -12, 3\n(4) * (9) = 36, left: 36, 3, 7\n(3) + (36) = 39, left: 39, 7\n(9) - (4) = 5, left: 5, 3, 7\n(9) - (7) = 2, left: 2, 4, 3\n(4) * (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 * (9 - 7)))"}, {"input": "4 9 3 7\n", "output": "(9) + (7) = 16, left: 16, 4, 3\n(16) / (3) = 16/3, left: 16/3, 4\n(4) - (16/3) = -4/3, left: -4/3\n(7) / (9) = 7/9, left: 7/9, 4, 3\n(3) - (4) = -1, left: -1, 7/9\n(9) * (7) = 63, left: 63, 4, 3\n(3) - (4) = -1, left: -1, 63\n(7) - (9) = -2, left: -2, 4, 3\n(3) / (-2) = -3/2, left: -3/2, 4\n(3) + (-2) = 1, left: 1, 4\n(1) - (4) = -3, left: -3\n(9) - (7) = 2, left: 2, 4, 3\n(4) * (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((9 - 7) * (4 * 3))"}, {"input": "1 12 4 10\n", "output": "(10) - (12) = -2, left: -2, 1, 4\n(1) / (-2) = -1/2, left: -1/2, 4\n(1) + (4) = 5, left: 5, -2\n(10) / (12) = 5/6, left: 5/6, 1, 4\n(1) - (5/6) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / (1 - (10 / 12)))"}, {"input": "1 12 4 10\n", "output": "(1) / (4) = 1/4, left: 1/4, 12, 10\n(10) - (12) = -2, left: -2, 1/4\n(12) * (1/4) = 3, left: 3, 10\n(1) + (4) = 5, left: 5, 12, 10\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((1 + 4) / 10))"}, {"input": "1 12 4 10\n", "output": "(4) - (10) = -6, left: -6, 1, 12\n(12) / (1) = 12, left: 12, -6\n(-6) / (12) = -1/2, left: -1/2\n(10) / (4) = 5/2, left: 5/2, 1, 12\n(4) + (10) = 14, left: 14, 1, 12\n(1) - (12) = -11, left: -11, 14\n(1) / (4) = 1/4, left: 1/4, 12, 10\n(1) + (4) = 5, left: 5, 12, 10\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (12 / (1 + 4)))"}, {"input": "1 12 4 10\n", "output": "(10) / (4) = 5/2, left: 5/2, 1, 12\n(5/2) - (1) = 3/2, left: 3/2, 12\n(10) - (4) = 6, left: 6, 1, 12\n(12) + (4) = 16, left: 16, 1, 10\n(10) / (16) = 5/8, left: 5/8, 1\n(4) - (12) = -8, left: -8, 1, 10\n(1) + (12) = 13, left: 13, 4, 10\n(10) / (12) = 5/6, left: 5/6, 1, 4\n(1) - (5/6) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / (1 - (10 / 12)))"}, {"input": "1 12 4 10\n", "output": "(1) / (4) = 1/4, left: 1/4, 12, 10\n(10) - (12) = -2, left: -2, 1/4\n(12) + (10) = 22, left: 22, 1/4\n(10) / (1/4) = 40, left: 40, 12\n(1/4) / (10) = 1/40, left: 1/40, 12\n(12) * (1/40) = 3/10, left: 3/10\n(1) + (4) = 5, left: 5, 12, 10\n(10) * (5) = 50, left: 50, 12\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((1 + 4) / 10))"}, {"input": "1 12 4 10\n", "output": "(10) - (12) = -2, left: -2, 1, 4\n(4) - (-2) = 6, left: 6, 1\n(4) / (-2) = -2, left: -2, 1\n(-2) - (1) = -3, left: -3, 4\n(1) - (-2) = 3, left: 3, 4\n(1) / (4) = 1/4, left: 1/4, -2\n(10) / (12) = 5/6, left: 5/6, 1, 4\n(5/6) / (1) = 5/6, left: 5/6, 4\n(1) - (5/6) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / (1 - (10 / 12)))"}, {"input": "1 12 4 10\n", "output": "(1) * (12) = 12, left: 12, 4, 10\n(4) + (10) = 14, left: 14, 1, 12\n(4) - (1) = 3, left: 3, 12, 10\n(10) * (3) = 30, left: 30, 12\n(4) / (1) = 4, left: 4, 12, 10\n(12) - (4) = 8, left: 8, 10\n(8) / (10) = 4/5, left: 4/5\n(1) + (4) = 5, left: 5, 12, 10\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 / (1 + 4)))"}, {"input": "1 12 4 10\n", "output": "(12) / (1) = 12, left: 12, 4, 10\n(1) - (12) = -11, left: -11, 4, 10\n(1) / (12) = 1/12, left: 1/12, 4, 10\n(1) * (12) = 12, left: 12, 4, 10\n(10) / (4) = 5/2, left: 5/2, 1, 12\n(4) - (10) = -6, left: -6, 1, 12\n(1) + (-6) = -5, left: -5, 12\n(10) - (4) = 6, left: 6, 1, 12\n(1) * (6) = 6, left: 6, 12\n(4) - (1) = 3, left: 3, 12, 10\n(4) / (1) = 4, left: 4, 12, 10\n(1) + (4) = 5, left: 5, 12, 10\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 / (1 + 4)))"}, {"input": "10 9 8 12\n", "output": "(12) / (8) = 3/2, left: 3/2, 10, 9\n(9) * (3/2) = 27/2, left: 27/2, 10\n(9) + (3/2) = 21/2, left: 21/2, 10\n(3/2) - (9) = -15/2, left: -15/2, 10\n(10) * (3/2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 * (12 / 8)))"}, {"input": "10 9 8 12\n", "output": "(9) + (12) = 21, left: 21, 10, 8\n(9) - (12) = -3, left: -3, 10, 8\n(-3) / (8) = -3/8, left: -3/8, 10\n(9) / (12) = 3/4, left: 3/4, 10, 8\n(10) + (8) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((10 + 8) / (9 / 12))"}, {"input": "10 9 8 12\n", "output": "(8) - (12) = -4, left: -4, 10, 9\n(-4) / (10) = -2/5, left: -2/5, 9\n(-4) - (9) = -13, left: -13, 10\n(-4) / (9) = -4/9, left: -4/9, 10\n(8) + (12) = 20, left: 20, 10, 9\n(9) * (20) = 180, left: 180, 10\n(12) / (8) = 3/2, left: 3/2, 10, 9\n(9) / (10) = 9/10, left: 9/10, 3/2\n(10) * (3/2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 * (12 / 8)))"}, {"input": "10 9 8 12\n", "output": "(12) / (8) = 3/2, left: 3/2, 10, 9\n(3/2) / (9) = 1/6, left: 1/6, 10\n(10) / (1/6) = 60, left: 60\n(9) + (3/2) = 21/2, left: 21/2, 10\n(9) / (3/2) = 6, left: 6, 10\n(10) - (6) = 4, left: 4\n(6) - (10) = -4, left: -4\n(3/2) - (9) = -15/2, left: -15/2, 10\n(10) * (3/2) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 * (12 / 8)))"}, {"input": "10 9 8 12\n", "output": "(12) - (9) = 3, left: 3, 10, 8\n(3) / (10) = 3/10, left: 3/10, 8\n(8) + (3) = 11, left: 11, 10\n(9) * (12) = 108, left: 108, 10, 8\n(10) / (8) = 5/4, left: 5/4, 108\n(9) + (12) = 21, left: 21, 10, 8\n(9) - (12) = -3, left: -3, 10, 8\n(9) / (12) = 3/4, left: 3/4, 10, 8\n(10) + (8) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((10 + 8) / (9 / 12))"}, {"input": "10 9 8 12\n", "output": "(10) + (9) = 19, left: 19, 8, 12\n(8) - (19) = -11, left: -11, 12\n(10) / (9) = 10/9, left: 10/9, 8, 12\n(10) * (9) = 90, left: 90, 8, 12\n(90) / (8) = 45/4, left: 45/4, 12\n(10) - (9) = 1, left: 1, 8, 12\n(10) + (12) = 22, left: 22, 9, 8\n(10) * (12) = 120, left: 120, 9, 8\n(120) / (8) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((10 * 12) / 8))"}, {"input": "10 9 8 12\n", "output": "(8) - (10) = -2, left: -2, 9, 12\n(9) - (-2) = 11, left: 11, 12\n(9) / (12) = 3/4, left: 3/4, -2\n(12) - (-2) = 14, left: 14, 9\n(10) - (8) = 2, left: 2, 9, 12\n(2) - (12) = -10, left: -10, 9\n(9) - (12) = -3, left: -3, 2\n(10) + (8) = 18, left: 18, 9, 12\n(18) / (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 8) / 9))"}, {"input": "8 4 4 13\n", "output": "(13) - (4) = 9, left: 9, 8, 4\n(8) + (4) = 12, left: 12, 9\n(8) / (4) = 2, left: 2, 4, 13\n(4) * (13) = 52, left: 52, 2\n(8) - (4) = 4, left: 4, 4, 13\n(8) / (13) = 8/13, left: 8/13, 4, 4\n(8) * (13) = 104, left: 104, 4, 4\n(13) - (8) = 5, left: 5, 4, 4\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (13 - 8)))"}, {"input": "8 4 4 13\n", "output": "(13) - (4) = 9, left: 9, 8, 4\n(13) / (4) = 13/4, left: 13/4, 8, 4\n(8) / (4) = 2, left: 2, 13/4\n(4) + (13) = 17, left: 17, 8, 4\n(4) / (13) = 4/13, left: 4/13, 8, 4\n(8) + (4) = 12, left: 12, 4/13\n(4) - (4/13) = 48/13, left: 48/13, 8\n(13) - (8) = 5, left: 5, 4, 4\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (13 - 8)))"}, {"input": "8 4 4 13\n", "output": "(8) * (13) = 104, left: 104, 4, 4\n(4) - (104) = -100, left: -100, 4\n(13) / (8) = 13/8, left: 13/8, 4, 4\n(8) + (13) = 21, left: 21, 4, 4\n(4) + (21) = 25, left: 25, 4\n(25) - (4) = 21, left: 21\n(8) - (13) = -5, left: -5, 4, 4\n(4) - (4) = 0, left: 0, -5\n(4) * (-5) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (4 * (8 - 13)))"}, {"input": "8 4 4 13\n", "output": "(8) * (13) = 104, left: 104, 4, 4\n(104) / (4) = 26, left: 26, 4\n(8) + (13) = 21, left: 21, 4, 4\n(4) / (4) = 1, left: 1, 21\n(13) / (8) = 13/8, left: 13/8, 4, 4\n(13/8) / (4) = 13/32, left: 13/32, 4\n(4) + (4) = 8, left: 8, 13/8\n(8) - (13) = -5, left: -5, 4, 4\n(4) * (-5) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (4 * (8 - 13)))"}, {"input": "8 4 4 13\n", "output": "(8) / (4) = 2, left: 2, 4, 13\n(4) - (13) = -9, left: -9, 8, 4\n(13) / (4) = 13/4, left: 13/4, 8, 4\n(8) - (13/4) = 19/4, left: 19/4, 4\n(4) / (13) = 4/13, left: 4/13, 8, 4\n(13) - (4) = 9, left: 9, 8, 4\n(8) / (13) = 8/13, left: 8/13, 4, 4\n(13) - (8) = 5, left: 5, 4, 4\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (13 - 8)))"}, {"input": "9 10 10 2\n", "output": "(2) - (10) = -8, left: -8, 9, 10\n(-8) / (9) = -8/9, left: -8/9, 10\n(9) - (-8) = 17, left: 17, 10\n(10) / (2) = 5, left: 5, 9, 10\n(9) + (10) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((10 / 2) + (9 + 10))"}, {"input": "9 10 10 2\n", "output": "(2) / (10) = 1/5, left: 1/5, 9, 10\n(1/5) - (9) = -44/5, left: -44/5, 10\n(10) - (2) = 8, left: 8, 9, 10\n(10) / (2) = 5, left: 5, 9, 10\n(9) + (10) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((10 / 2) + (9 + 10))"}, {"input": "9 10 10 2\n", "output": "(2) / (9) = 2/9, left: 2/9, 10, 10\n(10) / (2/9) = 45, left: 45, 10\n(9) - (2) = 7, left: 7, 10, 10\n(10) + (7) = 17, left: 17, 10\n(9) - (10) = -1, left: -1, 10, 2\n(10) - (9) = 1, left: 1, 10, 2\n(9) * (10) = 90, left: 90, 10, 2\n(9) + (10) = 19, left: 19, 10, 2\n(10) / (2) = 5, left: 5, 19\n(19) + (5) = 24, left: 24\nreach 24! expression: ((9 + 10) + (10 / 2))"}, {"input": "9 10 10 2\n", "output": "(10) - (9) = 1, left: 1, 10, 2\n(10) + (2) = 12, left: 12, 1\n(1) / (10) = 1/10, left: 1/10, 2\n(9) * (10) = 90, left: 90, 10, 2\n(2) / (90) = 1/45, left: 1/45, 10\n(1/45) - (10) = -449/45, left: -449/45\n(2) / (10) = 1/5, left: 1/5, 90\n(9) + (10) = 19, left: 19, 10, 2\n(10) / (2) = 5, left: 5, 19\n(19) + (5) = 24, left: 24\nreach 24! expression: ((9 + 10) + (10 / 2))"}, {"input": "9 10 10 2\n", "output": "(2) - (10) = -8, left: -8, 9, 10\n(9) / (10) = 9/10, left: 9/10, -8\n(10) - (9) = 1, left: 1, -8\n(10) - (-8) = 18, left: 18, 9\n(-8) / (9) = -8/9, left: -8/9, 10\n(-8) - (9) = -17, left: -17, 10\n(10) / (2) = 5, left: 5, 9, 10\n(10) - (9) = 1, left: 1, 5\n(9) + (10) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((10 / 2) + (9 + 10))"}, {"input": "9 10 10 2\n", "output": "(2) / (10) = 1/5, left: 1/5, 9, 10\n(10) - (2) = 8, left: 8, 9, 10\n(9) / (8) = 9/8, left: 9/8, 10\n(10) * (2) = 20, left: 20, 9, 10\n(9) + (10) = 19, left: 19, 20\n(9) / (20) = 9/20, left: 9/20, 10\n(10) / (2) = 5, left: 5, 9, 10\n(10) / (9) = 10/9, left: 10/9, 5\n(9) + (10) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((10 / 2) + (9 + 10))"}, {"input": "9 10 10 2\n", "output": "(10) * (2) = 20, left: 20, 9, 10\n(9) / (10) = 9/10, left: 9/10, 20\n(9) / (20) = 9/20, left: 9/20, 10\n(10) - (2) = 8, left: 8, 9, 10\n(9) + (8) = 17, left: 17, 10\n(10) / (9) = 10/9, left: 10/9, 8\n(10) - (9) = 1, left: 1, 8\n(10) / (2) = 5, left: 5, 9, 10\n(10) + (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 + (10 / 2)))"}, {"input": "13 1 8 11\n", "output": "(1) / (13) = 1/13, left: 1/13, 8, 11\n(13) + (1) = 14, left: 14, 8, 11\n(8) / (14) = 4/7, left: 4/7, 11\n(4/7) / (11) = 4/77, left: 4/77\n(14) - (11) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 + 1) - 11))"}, {"input": "13 1 8 11\n", "output": "(13) + (8) = 21, left: 21, 1, 11\n(13) / (8) = 13/8, left: 13/8, 1, 11\n(1) + (13/8) = 21/8, left: 21/8, 11\n(1) - (11) = -10, left: -10, 13, 8\n(13) + (-10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 + (1 - 11)))"}, {"input": "13 1 8 11\n", "output": "(13) - (8) = 5, left: 5, 1, 11\n(8) / (13) = 8/13, left: 8/13, 1, 11\n(1) + (8/13) = 21/13, left: 21/13, 11\n(8) - (13) = -5, left: -5, 1, 11\n(-5) - (1) = -6, left: -6, 11\n(13) + (1) = 14, left: 14, 8, 11\n(14) / (8) = 7/4, left: 7/4, 11\n(14) - (11) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 + 1) - 11))"}, {"input": "13 1 8 11\n", "output": "(8) / (1) = 8, left: 8, 13, 11\n(11) + (8) = 19, left: 19, 13\n(13) / (19) = 13/19, left: 13/19\n(1) - (8) = -7, left: -7, 13, 11\n(13) / (-7) = -13/7, left: -13/7, 11\n(13) * (8) = 104, left: 104, 1, 11\n(8) - (13) = -5, left: -5, 1, 11\n(11) - (13) = -2, left: -2, 1, 8\n(1) - (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 - (11 - 13)))"}, {"input": "13 1 8 11\n", "output": "(8) - (11) = -3, left: -3, 13, 1\n(13) - (1) = 12, left: 12, -3\n(8) + (11) = 19, left: 19, 13, 1\n(8) * (11) = 88, left: 88, 13, 1\n(11) - (8) = 3, left: 3, 13, 1\n(13) + (1) = 14, left: 14, 3\n(8) / (11) = 8/11, left: 8/11, 13, 1\n(13) - (11) = 2, left: 2, 1, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (13 - 11)))"}, {"input": "13 1 8 11\n", "output": "(13) - (8) = 5, left: 5, 1, 11\n(13) * (8) = 104, left: 104, 1, 11\n(11) - (1) = 10, left: 10, 104\n(13) / (8) = 13/8, left: 13/8, 1, 11\n(1) - (13/8) = -5/8, left: -5/8, 11\n(1) + (11) = 12, left: 12, 13/8\n(8) - (13) = -5, left: -5, 1, 11\n(1) - (11) = -10, left: -10, 13, 8\n(13) + (-10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 + (1 - 11)))"}, {"input": "13 1 8 11\n", "output": "(13) / (1) = 13, left: 13, 8, 11\n(1) / (13) = 1/13, left: 1/13, 8, 11\n(13) - (1) = 12, left: 12, 8, 11\n(12) / (8) = 3/2, left: 3/2, 11\n(11) * (3/2) = 33/2, left: 33/2\n(1) - (13) = -12, left: -12, 8, 11\n(11) - (8) = 3, left: 3, -12\n(13) + (1) = 14, left: 14, 8, 11\n(14) - (11) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 + 1) - 11))"}, {"input": "2 6 12 11\n", "output": "(12) / (11) = 12/11, left: 12/11, 2, 6\n(11) / (12) = 11/12, left: 11/12, 2, 6\n(2) - (6) = -4, left: -4, 11/12\n(12) * (11) = 132, left: 132, 2, 6\n(132) / (6) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((12 * 11) / 6))"}, {"input": "2 6 12 11\n", "output": "(11) - (2) = 9, left: 9, 6, 12\n(6) - (12) = -6, left: -6, 9\n(9) - (12) = -3, left: -3, 6\n(2) * (11) = 22, left: 22, 6, 12\n(12) / (6) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((2 * 11) + (12 / 6))"}, {"input": "2 6 12 11\n", "output": "(11) - (2) = 9, left: 9, 6, 12\n(6) - (9) = -3, left: -3, 12\n(-3) / (12) = -1/4, left: -1/4\n(2) * (11) = 22, left: 22, 6, 12\n(12) / (6) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((2 * 11) + (12 / 6))"}, {"input": "2 6 12 11\n", "output": "(11) - (12) = -1, left: -1, 2, 6\n(6) / (2) = 3, left: 3, -1\n(3) / (-1) = -3, left: -3\n(2) + (-1) = 1, left: 1, 6\n(-1) / (6) = -1/6, left: -1/6, 2\n(11) / (12) = 11/12, left: 11/12, 2, 6\n(6) / (11/12) = 72/11, left: 72/11, 2\n(12) * (11) = 132, left: 132, 2, 6\n(132) / (6) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((12 * 11) / 6))"}, {"input": "2 6 12 11\n", "output": "(11) - (2) = 9, left: 9, 6, 12\n(6) / (12) = 1/2, left: 1/2, 9\n(2) / (11) = 2/11, left: 2/11, 6, 12\n(6) / (2/11) = 33, left: 33, 12\n(6) + (12) = 18, left: 18, 2/11\n(2) * (11) = 22, left: 22, 6, 12\n(22) - (12) = 10, left: 10, 6\n(6) + (12) = 18, left: 18, 22\n(12) / (6) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((2 * 11) + (12 / 6))"}, {"input": "2 6 12 11\n", "output": "(11) - (2) = 9, left: 9, 6, 12\n(6) + (9) = 15, left: 15, 12\n(9) / (6) = 3/2, left: 3/2, 12\n(6) + (12) = 18, left: 18, 9\n(6) / (12) = 1/2, left: 1/2, 9\n(9) * (1/2) = 9/2, left: 9/2\n(2) * (11) = 22, left: 22, 6, 12\n(22) / (6) = 11/3, left: 11/3, 12\n(12) / (6) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((2 * 11) + (12 / 6))"}, {"input": "2 6 12 11\n", "output": "(2) * (12) = 24, left: 24, 6, 11\n(6) * (11) = 66, left: 66, 24\n(12) - (2) = 10, left: 10, 6, 11\n(6) + (11) = 17, left: 17, 10\n(11) - (10) = 1, left: 1, 6\n(6) * (1) = 6, left: 6\n(2) / (12) = 1/6, left: 1/6, 6, 11\n(6) / (11) = 6/11, left: 6/11, 2, 12\n(12) / (6/11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (12 / (6 / 11)))"}, {"input": "2 6 12 11\n", "output": "(2) - (6) = -4, left: -4, 12, 11\n(12) * (11) = 132, left: 132, -4\n(11) / (12) = 11/12, left: 11/12, -4\n(2) / (6) = 1/3, left: 1/3, 12, 11\n(11) + (1/3) = 34/3, left: 34/3, 12\n(6) * (12) = 72, left: 72, 2, 11\n(12) - (6) = 6, left: 6, 2, 11\n(6) / (12) = 1/2, left: 1/2, 2, 11\n(11) / (1/2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 / (6 / 12)))"}, {"input": "11 2 6 3\n", "output": "(11) * (6) = 66, left: 66, 2, 3\n(2) * (66) = 132, left: 132, 3\n(66) - (2) = 64, left: 64, 3\n(3) - (64) = -61, left: -61\n(66) / (3) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((11 * 6) / 3))"}, {"input": "11 2 6 3\n", "output": "(2) + (3) = 5, left: 5, 11, 6\n(6) / (11) = 6/11, left: 6/11, 5\n(11) * (5) = 55, left: 55, 6\n(2) / (3) = 2/3, left: 2/3, 11, 6\n(3) / (2) = 3/2, left: 3/2, 11, 6\n(6) - (3) = 3, left: 3, 11, 2\n(3) - (6) = -3, left: -3, 11, 2\n(3) / (6) = 1/2, left: 1/2, 11, 2\n(11) / (1/2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 / (3 / 6)))"}, {"input": "11 2 6 3\n", "output": "(11) + (6) = 17, left: 17, 2, 3\n(3) - (2) = 1, left: 1, 17\n(3) + (17) = 20, left: 20, 2\n(17) / (2) = 17/2, left: 17/2, 3\n(11) * (6) = 66, left: 66, 2, 3\n(3) / (2) = 3/2, left: 3/2, 66\n(2) * (3) = 6, left: 6, 66\n(3) * (66) = 198, left: 198, 2\n(66) / (3) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((11 * 6) / 3))"}, {"input": "11 2 6 3\n", "output": "(11) + (2) = 13, left: 13, 6, 3\n(6) / (3) = 2, left: 2, 13\n(2) / (13) = 2/13, left: 2/13\n(11) - (2) = 9, left: 9, 6, 3\n(11) / (2) = 11/2, left: 11/2, 6, 3\n(3) / (6) = 1/2, left: 1/2, 11/2\n(3) * (11/2) = 33/2, left: 33/2, 6\n(11) * (2) = 22, left: 22, 6, 3\n(6) / (3) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 * 2) + (6 / 3))"}, {"input": "11 2 6 3\n", "output": "(3) - (2) = 1, left: 1, 11, 6\n(6) - (1) = 5, left: 5, 11\n(2) - (3) = -1, left: -1, 11, 6\n(2) * (3) = 6, left: 6, 11, 6\n(6) / (11) = 6/11, left: 6/11, 6\n(11) + (6) = 17, left: 17, 6\n(6) - (17) = -11, left: -11\n(6) / (3) = 2, left: 2, 11, 2\n(11) * (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((6 / 3) + (11 * 2))"}, {"input": "11 2 6 3\n", "output": "(6) / (11) = 6/11, left: 6/11, 2, 3\n(11) - (6) = 5, left: 5, 2, 3\n(2) / (3) = 2/3, left: 2/3, 5\n(2) - (5) = -3, left: -3, 3\n(11) / (6) = 11/6, left: 11/6, 2, 3\n(6) - (11) = -5, left: -5, 2, 3\n(-5) - (3) = -8, left: -8, 2\n(11) * (6) = 66, left: 66, 2, 3\n(66) / (3) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + ((11 * 6) / 3))"}, {"input": "8 5 12 9\n", "output": "(5) - (12) = -7, left: -7, 8, 9\n(9) / (8) = 9/8, left: 9/8, -7\n(-7) * (9/8) = -63/8, left: -63/8\n(8) - (9) = -1, left: -1, -7\n(8) + (9) = 17, left: 17, -7\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((8 + 9) - (5 - 12))"}, {"input": "8 5 12 9\n", "output": "(12) - (5) = 7, left: 7, 8, 9\n(9) / (7) = 9/7, left: 9/7, 8\n(9/7) - (8) = -47/7, left: -47/7\n(9) + (7) = 16, left: 16, 8\n(8) / (16) = 1/2, left: 1/2\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (9 + (12 - 5)))"}, {"input": "8 5 12 9\n", "output": "(8) / (5) = 8/5, left: 8/5, 12, 9\n(9) / (12) = 3/4, left: 3/4, 8/5\n(12) * (8/5) = 96/5, left: 96/5, 9\n(5) - (8) = -3, left: -3, 12, 9\n(12) + (9) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((12 + 9) - (5 - 8))"}, {"input": "8 5 12 9\n", "output": "(9) / (8) = 9/8, left: 9/8, 5, 12\n(9/8) / (5) = 9/40, left: 9/40, 12\n(9/8) - (12) = -87/8, left: -87/8, 5\n(8) + (9) = 17, left: 17, 5, 12\n(12) + (17) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((12 + (8 + 9)) - 5)"}, {"input": "8 5 12 9\n", "output": "(9) / (8) = 9/8, left: 9/8, 5, 12\n(12) / (9/8) = 32/3, left: 32/3, 5\n(9/8) - (12) = -87/8, left: -87/8, 5\n(9/8) / (12) = 3/32, left: 3/32, 5\n(5) + (3/32) = 163/32, left: 163/32\n(5) + (12) = 17, left: 17, 9/8\n(8) + (9) = 17, left: 17, 5, 12\n(12) - (17) = -5, left: -5, 5\n(12) + (17) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((12 + (8 + 9)) - 5)"}, {"input": "8 5 12 9\n", "output": "(8) / (5) = 8/5, left: 8/5, 12, 9\n(12) / (8/5) = 15/2, left: 15/2, 9\n(8/5) / (9) = 8/45, left: 8/45, 12\n(12) / (8/45) = 135/2, left: 135/2\n(5) - (8) = -3, left: -3, 12, 9\n(9) / (12) = 3/4, left: 3/4, -3\n(-3) / (3/4) = -4, left: -4\n(12) / (9) = 4/3, left: 4/3, -3\n(12) + (9) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((12 + 9) - (5 - 8))"}, {"input": "8 5 12 9\n", "output": "(12) - (9) = 3, left: 3, 8, 5\n(8) + (5) = 13, left: 13, 3\n(5) * (3) = 15, left: 15, 8\n(15) / (8) = 15/8, left: 15/8\n(5) / (3) = 5/3, left: 5/3, 8\n(5/3) / (8) = 5/24, left: 5/24\n(3) - (8) = -5, left: -5, 5\n(12) + (9) = 21, left: 21, 8, 5\n(5) - (8) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((12 + 9) - (5 - 8))"}, {"input": "8 5 12 9\n", "output": "(12) - (5) = 7, left: 7, 8, 9\n(9) / (7) = 9/7, left: 9/7, 8\n(8) * (9/7) = 72/7, left: 72/7\n(9/7) / (8) = 9/56, left: 9/56\n(9) + (7) = 16, left: 16, 8\n(8) * (16) = 128, left: 128\n(16) / (8) = 2, left: 2\n(16) - (8) = 8, left: 8\n(8) / (16) = 1/2, left: 1/2\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (9 + (12 - 5)))"}, {"input": "8 5 12 9\n", "output": "(5) - (12) = -7, left: -7, 8, 9\n(9) / (8) = 9/8, left: 9/8, -7\n(9/8) / (-7) = -9/56, left: -9/56\n(-7) / (9/8) = -56/9, left: -56/9\n(8) - (9) = -1, left: -1, -7\n(-7) * (-1) = 7, left: 7\n(-7) / (-1) = 7, left: 7\n(-7) - (-1) = -6, left: -6\n(8) + (9) = 17, left: 17, -7\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((8 + 9) - (5 - 12))"}, {"input": "6 4 4 1\n", "output": "(6) / (4) = 3/2, left: 3/2, 4, 1\n(4) + (3/2) = 11/2, left: 11/2, 1\n(6) + (4) = 10, left: 10, 4, 1\n(4) / (4) = 1, left: 1, 6, 1\n(6) + (1) = 7, left: 7, 1\n(4) * (4) = 16, left: 16, 6, 1\n(4) / (6) = 2/3, left: 2/3, 4, 1\n(6) + (1) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (6 + 1)) - 4)"}, {"input": "6 4 4 1\n", "output": "(6) + (4) = 10, left: 10, 4, 1\n(6) * (4) = 24, left: 24, 4, 1\n(4) - (1) = 3, left: 3, 6, 4\n(1) - (4) = -3, left: -3, 6, 4\n(4) * (-3) = -12, left: -12, 6\n(4) * (1) = 4, left: 4, 6, 4\n(4) + (1) = 5, left: 5, 6, 4\n(6) + (1) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (6 + 1)) - 4)"}, {"input": "6 4 4 1\n", "output": "(6) - (4) = 2, left: 2, 4, 1\n(1) / (4) = 1/4, left: 1/4, 2\n(6) + (4) = 10, left: 10, 4, 1\n(4) / (6) = 2/3, left: 2/3, 4, 1\n(4) / (1) = 4, left: 4, 2/3\n(6) * (1) = 6, left: 6, 4, 4\n(4) - (4) = 0, left: 0, 6\n(6) - (1) = 5, left: 5, 4, 4\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (6 - 1)))"}, {"input": "6 4 4 1\n", "output": "(6) / (1) = 6, left: 6, 4, 4\n(4) + (6) = 10, left: 10, 4\n(4) * (4) = 16, left: 16, 6\n(4) + (6) = 10, left: 10, 4\n(4) * (6) = 24, left: 24, 4\n(24) / (4) = 6, left: 6\n(6) - (1) = 5, left: 5, 4, 4\n(4) / (5) = 4/5, left: 4/5, 4\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (6 - 1)))"}, {"input": "6 4 4 1\n", "output": "(6) - (4) = 2, left: 2, 4, 1\n(2) - (1) = 1, left: 1, 4\n(4) / (6) = 2/3, left: 2/3, 4, 1\n(4) / (2/3) = 6, left: 6, 1\n(1) / (4) = 1/4, left: 1/4, 2/3\n(1) / (4) = 1/4, left: 1/4, 6, 4\n(4) * (1) = 4, left: 4, 6, 4\n(1) - (6) = -5, left: -5, 4, 4\n(4) * (-5) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (4 * (1 - 6)))"}, {"input": "6 4 4 1\n", "output": "(6) - (4) = 2, left: 2, 4, 1\n(4) - (6) = -2, left: -2, 4, 1\n(6) * (4) = 24, left: 24, 4, 1\n(4) - (24) = -20, left: -20, 1\n(4) - (1) = 3, left: 3, 6, 4\n(4) * (1) = 4, left: 4, 6, 4\n(6) * (4) = 24, left: 24, 4\n(4) / (1) = 4, left: 4, 6, 4\n(6) / (4) = 3/2, left: 3/2, 4\n(4) - (1) = 3, left: 3, 6, 4\n(4) + (1) = 5, left: 5, 6, 4\n(6) + (1) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (6 + 1)) - 4)"}, {"input": "6 4 4 1\n", "output": "(6) * (4) = 24, left: 24, 4, 1\n(4) - (1) = 3, left: 3, 24\n(24) + (3) = 27, left: 27\n(6) - (4) = 2, left: 2, 4, 1\n(6) + (4) = 10, left: 10, 4, 1\n(4) - (6) = -2, left: -2, 4, 1\n(4) / (1) = 4, left: 4, -2\n(4) / (-2) = -2, left: -2\n(4) / (6) = 2/3, left: 2/3, 4, 1\n(6) * (1) = 6, left: 6, 4, 4\n(4) - (6) = -2, left: -2, 4\n(6) - (1) = 5, left: 5, 4, 4\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (6 - 1)))"}, {"input": "6 4 4 1\n", "output": "(4) - (6) = -2, left: -2, 4, 1\n(4) * (1) = 4, left: 4, -2\n(-2) / (1) = -2, left: -2, 4\n(6) + (4) = 10, left: 10, 4, 1\n(10) - (1) = 9, left: 9, 4\n(1) / (4) = 1/4, left: 1/4, 6, 4\n(1) - (4) = -3, left: -3, 6, 4\n(6) / (-3) = -2, left: -2, 4\n(4) / (1) = 4, left: 4, 6, 4\n(6) / (1) = 6, left: 6, 4, 4\n(4) * (6) = 24, left: 24, 4\n(1) - (6) = -5, left: -5, 4, 4\n(4) * (-5) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (4 * (1 - 6)))"}, {"input": "6 4 4 1\n", "output": "(4) - (6) = -2, left: -2, 4, 1\n(6) * (4) = 24, left: 24, 4, 1\n(6) + (4) = 10, left: 10, 4, 1\n(1) - (4) = -3, left: -3, 6, 4\n(4) / (1) = 4, left: 4, 6, 4\n(6) / (4) = 3/2, left: 3/2, 4\n(4) / (3/2) = 8/3, left: 8/3\n(4) / (1) = 4, left: 4, 6, 4\n(4) / (6) = 2/3, left: 2/3, 4\n(4) - (4) = 0, left: 0, 6, 1\n(0) / (1) = 0, left: 0, 6\n(6) + (1) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (6 + 1)) - 4)"}, {"input": "6 4 4 1\n", "output": "(6) / (1) = 6, left: 6, 4, 4\n(4) * (6) = 24, left: 24, 4\n(4) + (4) = 8, left: 8, 6\n(4) * (4) = 16, left: 16, 6\n(4) / (4) = 1, left: 1, 6\n(4) - (6) = -2, left: -2, 4\n(4) - (-2) = 6, left: 6\n(6) - (1) = 5, left: 5, 4, 4\n(4) - (4) = 0, left: 0, 5\n(4) + (4) = 8, left: 8, 5\n(5) / (8) = 5/8, left: 5/8\n(4) - (4) = 0, left: 0, 5\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (6 - 1)))"}, {"input": "12 6 2 6\n", "output": "(6) / (2) = 3, left: 3, 12, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) + (1/2) = 25/2, left: 25/2\n(1/2) - (12) = -23/2, left: -23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 / 2) / 6))"}, {"input": "12 6 2 6\n", "output": "(6) / (6) = 1, left: 1, 12, 2\n(12) - (1) = 11, left: 11, 2\n(1) - (12) = -11, left: -11, 2\n(2) / (-11) = -2/11, left: -2/11\n(1) / (12) = 1/12, left: 1/12, 2\n(2) / (1/12) = 24, left: 24\nreach 24! expression: (2 / ((6 / 6) / 12))"}, {"input": "12 6 2 6\n", "output": "(6) / (2) = 3, left: 3, 12, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) + (1/2) = 25/2, left: 25/2\n(1/2) - (12) = -23/2, left: -23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 / 2) / 6))"}, {"input": "12 6 2 6\n", "output": "(6) + (6) = 12, left: 12, 12, 2\n(12) + (2) = 14, left: 14, 12\n(12) * (14) = 168, left: 168\n(2) - (12) = -10, left: -10, 12\n(2) * (12) = 24, left: 24, 12\n(12) + (12) = 24, left: 24, 2\n(6) - (6) = 0, left: 0, 12, 2\n(0) - (12) = -12, left: -12, 2\n(12) + (0) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (12 + (6 - 6)))"}, {"input": "12 6 2 6\n", "output": "(6) - (12) = -6, left: -6, 2, 6\n(2) - (-6) = 8, left: 8, 6\n(-6) - (2) = -8, left: -8, 6\n(-8) / (6) = -4/3, left: -4/3\n(2) + (-6) = -4, left: -4, 6\n(-6) / (2) = -3, left: -3, 6\n(2) * (-6) = -12, left: -12, 6\n(6) * (-12) = -72, left: -72\n(2) - (6) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((6 - 12) * (2 - 6))"}, {"input": "12 6 2 6\n", "output": "(6) / (6) = 1, left: 1, 12, 2\n(12) - (1) = 11, left: 11, 2\n(2) * (11) = 22, left: 22\n(11) / (2) = 11/2, left: 11/2\n(11) - (2) = 9, left: 9\n(1) - (12) = -11, left: -11, 2\n(2) / (-11) = -2/11, left: -2/11\n(1) / (12) = 1/12, left: 1/12, 2\n(2) - (1/12) = 23/12, left: 23/12\n(2) / (1/12) = 24, left: 24\nreach 24! expression: (2 / ((6 / 6) / 12))"}, {"input": "12 6 2 6\n", "output": "(2) + (6) = 8, left: 8, 12, 6\n(6) / (8) = 3/4, left: 3/4, 12\n(3/4) - (12) = -45/4, left: -45/4\n(6) + (8) = 14, left: 14, 12\n(12) + (14) = 26, left: 26\n(6) * (8) = 48, left: 48, 12\n(48) - (12) = 36, left: 36\n(8) - (6) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((2 + 6) - 6))"}, {"input": "12 6 2 6\n", "output": "(6) / (2) = 3, left: 3, 12, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) + (1/2) = 25/2, left: 25/2\n(1/2) - (12) = -23/2, left: -23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 / 2) / 6))"}, {"input": "12 6 2 6\n", "output": "(6) / (2) = 3, left: 3, 12, 6\n(3) / (6) = 1/2, left: 1/2, 12\n(12) + (1/2) = 25/2, left: 25/2\n(1/2) - (12) = -23/2, left: -23/2\n(1/2) / (12) = 1/24, left: 1/24\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((6 / 2) / 6))"}, {"input": "6 5 10 1\n", "output": "(6) - (10) = -4, left: -4, 5, 1\n(-4) - (1) = -5, left: -5, 5\n(6) * (10) = 60, left: 60, 5, 1\n(1) * (60) = 60, left: 60, 5\n(5) * (60) = 300, left: 300, 1\n(10) - (6) = 4, left: 4, 5, 1\n(5) / (1) = 5, left: 5, 4\n(1) - (5) = -4, left: -4, 4\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((10 - 6) * (5 + 1))"}, {"input": "6 5 10 1\n", "output": "(5) + (1) = 6, left: 6, 6, 10\n(6) / (6) = 1, left: 1, 10\n(6) * (6) = 36, left: 36, 10\n(6) + (6) = 12, left: 12, 10\n(12) - (10) = 2, left: 2\n(6) - (6) = 0, left: 0, 10\n(6) / (6) = 1, left: 1, 10\n(10) + (6) = 16, left: 16, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (10 - (5 + 1)))"}, {"input": "6 5 10 1\n", "output": "(6) - (10) = -4, left: -4, 5, 1\n(5) - (-4) = 9, left: 9, 1\n(10) / (6) = 5/3, left: 5/3, 5, 1\n(5/3) / (1) = 5/3, left: 5/3, 5\n(6) / (10) = 3/5, left: 3/5, 5, 1\n(3/5) - (1) = -2/5, left: -2/5, 5\n(3/5) / (1) = 3/5, left: 3/5, 5\n(10) - (6) = 4, left: 4, 5, 1\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((10 - 6) * (5 + 1))"}, {"input": "6 5 10 1\n", "output": "(6) * (5) = 30, left: 30, 10, 1\n(10) * (30) = 300, left: 300, 1\n(5) - (6) = -1, left: -1, 10, 1\n(1) / (-1) = -1, left: -1, 10\n(6) / (10) = 3/5, left: 3/5, 5, 1\n(1) - (3/5) = 2/5, left: 2/5, 5\n(6) + (10) = 16, left: 16, 5, 1\n(10) - (6) = 4, left: 4, 5, 1\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((10 - 6) * (5 + 1))"}, {"input": "6 5 10 1\n", "output": "(6) - (1) = 5, left: 5, 5, 10\n(1) - (6) = -5, left: -5, 5, 10\n(5) - (-5) = 10, left: 10, 10\n(6) / (1) = 6, left: 6, 5, 10\n(1) / (6) = 1/6, left: 1/6, 5, 10\n(10) + (1) = 11, left: 11, 6, 5\n(10) / (1) = 10, left: 10, 6, 5\n(10) - (1) = 9, left: 9, 6, 5\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((10 - 1) - 5))"}, {"input": "5 12 6 8\n", "output": "(6) - (12) = -6, left: -6, 5, 8\n(8) * (-6) = -48, left: -48, 5\n(-6) / (8) = -3/4, left: -3/4, 5\n(12) + (6) = 18, left: 18, 5, 8\n(5) * (18) = 90, left: 90, 8\n(12) / (6) = 2, left: 2, 5, 8\n(8) / (5) = 8/5, left: 8/5, 2\n(5) * (8) = 40, left: 40, 2\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (12 / 6)))"}, {"input": "5 12 6 8\n", "output": "(5) / (12) = 5/12, left: 5/12, 6, 8\n(5/12) / (8) = 5/96, left: 5/96, 6\n(12) - (5) = 7, left: 7, 6, 8\n(5) - (12) = -7, left: -7, 6, 8\n(5) + (8) = 13, left: 13, 12, 6\n(12) + (6) = 18, left: 18, 13\n(5) - (8) = -3, left: -3, 12, 6\n(8) - (5) = 3, left: 3, 12, 6\n(3) / (12) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((8 - 5) / 12))"}, {"input": "5 12 6 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 12, 6\n(5) - (8) = -3, left: -3, 12, 6\n(12) + (-3) = 9, left: 9, 6\n(-3) - (12) = -15, left: -15, 6\n(6) + (-3) = 3, left: 3, 12\n(12) / (3) = 4, left: 4\n(12) * (6) = 72, left: 72, -3\n(8) - (5) = 3, left: 3, 12, 6\n(12) / (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (12 / (8 - 5)))"}, {"input": "5 12 6 8\n", "output": "(8) - (6) = 2, left: 2, 5, 12\n(12) / (2) = 6, left: 6, 5\n(6) / (8) = 3/4, left: 3/4, 5, 12\n(3/4) / (12) = 1/16, left: 1/16, 5\n(6) - (8) = -2, left: -2, 5, 12\n(6) + (8) = 14, left: 14, 5, 12\n(14) / (12) = 7/6, left: 7/6, 5\n(12) + (8) = 20, left: 20, 5, 6\n(20) / (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((12 + 8) / 5))"}, {"input": "5 12 6 8\n", "output": "(12) + (6) = 18, left: 18, 5, 8\n(5) + (18) = 23, left: 23, 8\n(6) - (12) = -6, left: -6, 5, 8\n(6) / (12) = 1/2, left: 1/2, 5, 8\n(8) * (1/2) = 4, left: 4, 5\n(5) - (8) = -3, left: -3, 1/2\n(12) - (6) = 6, left: 6, 5, 8\n(12) / (6) = 2, left: 2, 5, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 - (12 / 6)))"}, {"input": "8 8 1 3\n", "output": "(8) / (3) = 8/3, left: 8/3, 8, 1\n(1) + (8/3) = 11/3, left: 11/3, 8\n(8) / (1) = 8, left: 8, 8/3\n(8) - (8/3) = 16/3, left: 16/3\n(8) + (1) = 9, left: 9, 8/3\n(8/3) * (9) = 24, left: 24\nreach 24! expression: ((8 / 3) * (8 + 1))"}, {"input": "8 8 1 3\n", "output": "(3) / (8) = 3/8, left: 3/8, 8, 1\n(1) + (3/8) = 11/8, left: 11/8, 8\n(8) * (3/8) = 3, left: 3, 1\n(8) * (1) = 8, left: 8, 3/8\n(8) + (1) = 9, left: 9, 3/8\n(9) / (3/8) = 24, left: 24\nreach 24! expression: ((8 + 1) / (3 / 8))"}, {"input": "8 8 1 3\n", "output": "(8) - (3) = 5, left: 5, 8, 1\n(5) - (1) = 4, left: 4, 8\n(5) / (1) = 5, left: 5, 8\n(3) - (8) = -5, left: -5, 8, 1\n(-5) - (8) = -13, left: -13, 1\n(8) + (3) = 11, left: 11, 8, 1\n(8) / (11) = 8/11, left: 8/11, 1\n(8) / (3) = 8/3, left: 8/3, 8, 1\n(8) + (1) = 9, left: 9, 8/3\n(8/3) * (9) = 24, left: 24\nreach 24! expression: ((8 / 3) * (8 + 1))"}, {"input": "8 8 1 3\n", "output": "(8) / (3) = 8/3, left: 8/3, 8, 1\n(1) + (8/3) = 11/3, left: 11/3, 8\n(8/3) - (1) = 5/3, left: 5/3, 8\n(1) * (8/3) = 8/3, left: 8/3, 8\n(1) / (8/3) = 3/8, left: 3/8, 8\n(8) / (1) = 8, left: 8, 8/3\n(1) / (8) = 1/8, left: 1/8, 8/3\n(1/8) - (8/3) = -61/24, left: -61/24\n(8) + (1) = 9, left: 9, 8/3\n(8/3) * (9) = 24, left: 24\nreach 24! expression: ((8 / 3) * (8 + 1))"}, {"input": "8 8 1 3\n", "output": "(8) / (8) = 1, left: 1, 1, 3\n(8) * (8) = 64, left: 64, 1, 3\n(64) - (1) = 63, left: 63, 3\n(8) - (8) = 0, left: 0, 1, 3\n(0) / (3) = 0, left: 0, 1\n(8) * (3) = 24, left: 24, 8, 1\n(3) / (8) = 3/8, left: 3/8, 8, 1\n(8) / (3/8) = 64/3, left: 64/3, 1\n(8) + (1) = 9, left: 9, 3/8\n(9) / (3/8) = 24, left: 24\nreach 24! expression: ((8 + 1) / (3 / 8))"}, {"input": "8 8 1 3\n", "output": "(3) - (8) = -5, left: -5, 8, 1\n(8) / (-5) = -8/5, left: -8/5, 1\n(1) + (-5) = -4, left: -4, 8\n(1) * (-5) = -5, left: -5, 8\n(1) / (8) = 1/8, left: 1/8, -5\n(3) / (8) = 3/8, left: 3/8, 8, 1\n(8) + (3/8) = 67/8, left: 67/8, 1\n(8) * (1) = 8, left: 8, 3/8\n(8) + (1) = 9, left: 9, 3/8\n(9) / (3/8) = 24, left: 24\nreach 24! expression: ((8 + 1) / (3 / 8))"}, {"input": "8 8 1 3\n", "output": "(8) - (8) = 0, left: 0, 1, 3\n(0) / (1) = 0, left: 0, 3\n(0) / (3) = 0, left: 0\n(8) / (1) = 8, left: 8, 8, 3\n(1) / (8) = 1/8, left: 1/8, 8, 3\n(1) - (8) = -7, left: -7, 8, 3\n(8) - (-7) = 15, left: 15, 3\n(8) + (1) = 9, left: 9, 8, 3\n(3) / (8) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: ((8 + 1) / (3 / 8))"}, {"input": "8 8 1 3\n", "output": "(8) / (8) = 1, left: 1, 1, 3\n(8) + (8) = 16, left: 16, 1, 3\n(1) * (16) = 16, left: 16, 3\n(8) - (8) = 0, left: 0, 1, 3\n(8) * (8) = 64, left: 64, 1, 3\n(1) - (64) = -63, left: -63, 3\n(8) / (1) = 8, left: 8, 8, 3\n(8) - (8) = 0, left: 0, 3\n(0) - (3) = -3, left: -3\n(8) - (1) = 7, left: 7, 8, 3\n(7) - (8) = -1, left: -1, 3\n(8) + (1) = 9, left: 9, 8, 3\n(3) / (8) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: ((8 + 1) / (3 / 8))"}, {"input": "2 2 3 2\n", "output": "(2) + (3) = 5, left: 5, 2, 2\n(5) - (2) = 3, left: 3, 2\n(2) + (3) = 5, left: 5\n(2) * (5) = 10, left: 10, 2\n(2) / (3) = 2/3, left: 2/3, 2, 2\n(2/3) - (2) = -4/3, left: -4/3, 2\n(2) * (2/3) = 4/3, left: 4/3, 2\n(2) * (3) = 6, left: 6, 2, 2\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 * (2 * 3)))"}, {"input": "2 2 3 2\n", "output": "(3) - (2) = 1, left: 1, 2, 2\n(3) / (2) = 3/2, left: 3/2, 2, 2\n(2) / (3/2) = 4/3, left: 4/3, 2\n(2) / (3/2) = 4/3, left: 4/3, 2\n(2) / (3) = 2/3, left: 2/3, 2, 2\n(2) - (3) = -1, left: -1, 2, 2\n(2) / (-1) = -2, left: -2, 2\n(2) * (3) = 6, left: 6, 2, 2\n(2) * (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (2 * 2))"}, {"input": "2 2 3 2\n", "output": "(2) * (2) = 4, left: 4, 2, 3\n(2) / (3) = 2/3, left: 2/3, 4\n(4) * (2/3) = 8/3, left: 8/3\n(3) / (2) = 3/2, left: 3/2, 4\n(3/2) / (4) = 3/8, left: 3/8\n(2) + (3) = 5, left: 5, 4\n(2) * (3) = 6, left: 6, 4\n(4) - (6) = -2, left: -2\n(4) + (6) = 10, left: 10\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 * 2) * (2 * 3))"}, {"input": "2 2 3 2\n", "output": "(3) + (2) = 5, left: 5, 2, 2\n(5) / (2) = 5/2, left: 5/2, 2\n(2) - (5/2) = -1/2, left: -1/2\n(3) / (2) = 3/2, left: 3/2, 2, 2\n(3/2) / (2) = 3/4, left: 3/4, 2\n(3) * (2) = 6, left: 6, 2, 2\n(2) / (6) = 1/3, left: 1/3, 2\n(2) * (1/3) = 2/3, left: 2/3\n(2) * (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 * (3 * 2)))"}, {"input": "2 2 3 2\n", "output": "(2) - (2) = 0, left: 0, 3, 2\n(0) / (3) = 0, left: 0, 2\n(2) - (2) = 0, left: 0, 3, 2\n(2) * (0) = 0, left: 0, 3\n(2) / (2) = 1, left: 1, 3, 2\n(1) / (3) = 1/3, left: 1/3, 2\n(1) / (2) = 1/2, left: 1/2, 3\n(2) * (2) = 4, left: 4, 3, 2\n(3) * (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 * (2 * 2)))"}, {"input": "2 2 3 2\n", "output": "(3) - (2) = 1, left: 1, 2, 2\n(2) - (1) = 1, left: 1, 2\n(1) / (2) = 1/2, left: 1/2, 2\n(3) / (2) = 3/2, left: 3/2, 2, 2\n(2) / (2) = 1, left: 1, 3/2\n(2) * (3/2) = 3, left: 3, 2\n(2) / (3) = 2/3, left: 2/3, 2, 2\n(2) * (2/3) = 4/3, left: 4/3, 2\n(2) + (4/3) = 10/3, left: 10/3\n(2) - (3) = -1, left: -1, 2, 2\n(2) * (-1) = -2, left: -2, 2\n(2) * (3) = 6, left: 6, 2, 2\n(2) * (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (2 * 2))"}, {"input": "2 2 3 2\n", "output": "(2) - (2) = 0, left: 0, 3, 2\n(3) * (0) = 0, left: 0, 2\n(0) / (3) = 0, left: 0, 2\n(2) * (0) = 0, left: 0\n(3) - (0) = 3, left: 3, 2\n(2) / (3) = 2/3, left: 2/3\n(2) - (2) = 0, left: 0, 3, 2\n(0) - (3) = -3, left: -3, 2\n(2) / (2) = 1, left: 1, 3, 2\n(1) / (2) = 1/2, left: 1/2, 3\n(2) * (2) = 4, left: 4, 3, 2\n(4) - (3) = 1, left: 1, 2\n(3) * (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 * (2 * 2)))"}, {"input": "8 4 9 6\n", "output": "(4) * (6) = 24, left: 24, 8, 9\n(9) / (24) = 3/8, left: 3/8, 8\n(3/8) / (8) = 3/64, left: 3/64\n(9) + (24) = 33, left: 33, 8\n(9) * (24) = 216, left: 216, 8\n(8) + (24) = 32, left: 32, 9\n(9) - (32) = -23, left: -23\n(8) + (9) = 17, left: 17, 24\n(9) - (8) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((4 * 6) / (9 - 8))"}, {"input": "8 4 9 6\n", "output": "(9) - (6) = 3, left: 3, 8, 4\n(6) - (9) = -3, left: -3, 8, 4\n(9) + (6) = 15, left: 15, 8, 4\n(9) / (6) = 3/2, left: 3/2, 8, 4\n(3/2) / (4) = 3/8, left: 3/8, 8\n(8) * (4) = 32, left: 32, 9, 6\n(9) * (6) = 54, left: 54, 32\n(8) / (4) = 2, left: 2, 9, 6\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (8 / 4)))"}, {"input": "8 4 9 6\n", "output": "(8) - (4) = 4, left: 4, 9, 6\n(9) / (4) = 9/4, left: 9/4, 6\n(9/4) / (6) = 3/8, left: 3/8\n(9) * (6) = 54, left: 54, 4\n(4) - (54) = -50, left: -50\n(6) * (4) = 24, left: 24, 9\n(4) / (8) = 1/2, left: 1/2, 9, 6\n(6) - (9) = -3, left: -3, 1/2\n(9) / (1/2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 / (4 / 8)))"}, {"input": "8 4 9 6\n", "output": "(8) + (9) = 17, left: 17, 4, 6\n(4) * (17) = 68, left: 68, 6\n(8) / (9) = 8/9, left: 8/9, 4, 6\n(4) - (8/9) = 28/9, left: 28/9, 6\n(28/9) / (6) = 14/27, left: 14/27\n(9) - (8) = 1, left: 1, 4, 6\n(4) + (6) = 10, left: 10, 1\n(1) / (10) = 1/10, left: 1/10\n(4) * (6) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((9 - 8) * (4 * 6))"}, {"input": "8 4 9 6\n", "output": "(4) + (6) = 10, left: 10, 8, 9\n(6) / (4) = 3/2, left: 3/2, 8, 9\n(8) + (9) = 17, left: 17, 3/2\n(17) / (3/2) = 34/3, left: 34/3\n(6) - (4) = 2, left: 2, 8, 9\n(9) * (2) = 18, left: 18, 8\n(4) - (6) = -2, left: -2, 8, 9\n(4) * (6) = 24, left: 24, 8, 9\n(9) - (8) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((4 * 6) / (9 - 8))"}, {"input": "8 4 9 6\n", "output": "(9) - (6) = 3, left: 3, 8, 4\n(9) + (6) = 15, left: 15, 8, 4\n(9) / (6) = 3/2, left: 3/2, 8, 4\n(4) + (3/2) = 11/2, left: 11/2, 8\n(9) * (6) = 54, left: 54, 8, 4\n(8) - (4) = 4, left: 4, 54\n(8) * (4) = 32, left: 32, 9, 6\n(6) * (32) = 192, left: 192, 9\n(8) - (4) = 4, left: 4, 9, 6\n(6) + (4) = 10, left: 10, 9\n(4) / (6) = 2/3, left: 2/3, 9\n(8) / (4) = 2, left: 2, 9, 6\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (8 / 4)))"}, {"input": "5 13 10 1\n", "output": "(1) / (10) = 1/10, left: 1/10, 5, 13\n(13) * (10) = 130, left: 130, 5, 1\n(13) / (10) = 13/10, left: 13/10, 5, 1\n(5) / (10) = 1/2, left: 1/2, 13, 1\n(13) - (1) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((13 - 1) / (5 / 10))"}, {"input": "5 13 10 1\n", "output": "(13) + (10) = 23, left: 23, 5, 1\n(13) / (10) = 13/10, left: 13/10, 5, 1\n(5) - (1) = 4, left: 4, 13/10\n(10) / (5) = 2, left: 2, 13, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (13 - 1))"}, {"input": "5 13 10 1\n", "output": "(5) - (13) = -8, left: -8, 10, 1\n(10) / (1) = 10, left: 10, 5, 13\n(10) - (5) = 5, left: 5, 13\n(1) - (10) = -9, left: -9, 5, 13\n(5) * (13) = 65, left: 65, -9\n(10) - (13) = -3, left: -3, 5, 1\n(10) - (5) = 5, left: 5, 13, 1\n(5) / (10) = 1/2, left: 1/2, 13, 1\n(13) - (1) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((13 - 1) / (5 / 10))"}, {"input": "5 13 10 1\n", "output": "(10) / (1) = 10, left: 10, 5, 13\n(10) - (1) = 9, left: 9, 5, 13\n(5) + (13) = 18, left: 18, 9\n(1) / (10) = 1/10, left: 1/10, 5, 13\n(13) - (10) = 3, left: 3, 5, 1\n(5) + (10) = 15, left: 15, 13, 1\n(13) + (1) = 14, left: 14, 15\n(10) / (5) = 2, left: 2, 13, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (13 - 1))"}, {"input": "5 13 10 1\n", "output": "(5) * (1) = 5, left: 5, 13, 10\n(1) / (5) = 1/5, left: 1/5, 13, 10\n(10) + (1/5) = 51/5, left: 51/5, 13\n(13) / (5) = 13/5, left: 13/5, 10, 1\n(5) / (13) = 5/13, left: 5/13, 10, 1\n(5) - (13) = -8, left: -8, 10, 1\n(5) + (13) = 18, left: 18, 10, 1\n(13) - (1) = 12, left: 12, 5, 10\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (13 - 1)) / 5)"}, {"input": "5 13 10 1\n", "output": "(5) * (13) = 65, left: 65, 10, 1\n(5) / (13) = 5/13, left: 5/13, 10, 1\n(13) / (5) = 13/5, left: 13/5, 10, 1\n(1) / (13/5) = 5/13, left: 5/13, 10\n(10) * (5/13) = 50/13, left: 50/13\n(10) - (5) = 5, left: 5, 13, 1\n(5) * (10) = 50, left: 50, 13, 1\n(10) / (5) = 2, left: 2, 13, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (13 - 1))"}, {"input": "5 13 10 1\n", "output": "(1) / (10) = 1/10, left: 1/10, 5, 13\n(5) + (1/10) = 51/10, left: 51/10, 13\n(5) + (13) = 18, left: 18, 10, 1\n(5) / (1) = 5, left: 5, 13, 10\n(13) / (5) = 13/5, left: 13/5, 10\n(10) * (13/5) = 26, left: 26\n(1) - (5) = -4, left: -4, 13, 10\n(10) / (5) = 2, left: 2, 13, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (13 - 1))"}, {"input": "4 5 6 1\n", "output": "(5) - (4) = 1, left: 1, 6, 1\n(4) * (5) = 20, left: 20, 6, 1\n(6) * (20) = 120, left: 120, 1\n(4) - (5) = -1, left: -1, 6, 1\n(-1) - (6) = -7, left: -7, 1\n(4) + (5) = 9, left: 9, 6, 1\n(6) * (9) = 54, left: 54, 1\n(5) / (4) = 5/4, left: 5/4, 6, 1\n(5/4) - (1) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 4) - 1))"}, {"input": "4 5 6 1\n", "output": "(5) - (6) = -1, left: -1, 4, 1\n(6) / (5) = 6/5, left: 6/5, 4, 1\n(1) + (6/5) = 11/5, left: 11/5, 4\n(5) + (6) = 11, left: 11, 4, 1\n(4) * (1) = 4, left: 4, 11\n(6) - (5) = 1, left: 1, 4, 1\n(5) / (6) = 5/6, left: 5/6, 4, 1\n(5/6) - (4) = -19/6, left: -19/6, 1\n(1) - (5/6) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / (1 - (5 / 6)))"}, {"input": "4 5 6 1\n", "output": "(1) / (6) = 1/6, left: 1/6, 4, 5\n(6) / (1) = 6, left: 6, 4, 5\n(5) / (4) = 5/4, left: 5/4, 6\n(1) - (6) = -5, left: -5, 4, 5\n(5) - (1) = 4, left: 4, 4, 6\n(5) + (1) = 6, left: 6, 4, 6\n(5) / (1) = 5, left: 5, 4, 6\n(5) / (4) = 5/4, left: 5/4, 6, 1\n(5/4) - (1) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 4) - 1))"}, {"input": "4 5 6 1\n", "output": "(6) - (5) = 1, left: 1, 4, 1\n(1) / (1) = 1, left: 1, 4\n(4) * (1) = 4, left: 4\n(5) + (6) = 11, left: 11, 4, 1\n(11) / (1) = 11, left: 11, 4\n(5) * (6) = 30, left: 30, 4, 1\n(5) / (6) = 5/6, left: 5/6, 4, 1\n(1) * (5/6) = 5/6, left: 5/6, 4\n(1) - (5/6) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / (1 - (5 / 6)))"}, {"input": "4 5 6 1\n", "output": "(4) - (6) = -2, left: -2, 5, 1\n(1) * (-2) = -2, left: -2, 5\n(6) / (4) = 3/2, left: 3/2, 5, 1\n(5) / (1) = 5, left: 5, 3/2\n(5) + (3/2) = 13/2, left: 13/2, 1\n(4) * (6) = 24, left: 24, 5, 1\n(5) / (24) = 5/24, left: 5/24, 1\n(5) / (4) = 5/4, left: 5/4, 6, 1\n(5/4) - (1) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 4) - 1))"}, {"input": "4 5 6 1\n", "output": "(5) - (4) = 1, left: 1, 6, 1\n(6) - (1) = 5, left: 5, 1\n(1) - (5) = -4, left: -4\n(4) / (5) = 4/5, left: 4/5, 6, 1\n(6) - (1) = 5, left: 5, 4/5\n(4) * (5) = 20, left: 20, 6, 1\n(6) / (1) = 6, left: 6, 20\n(4) + (5) = 9, left: 9, 6, 1\n(1) / (6) = 1/6, left: 1/6, 9\n(6) + (1) = 7, left: 7, 9\n(9) / (1) = 9, left: 9, 6\n(5) / (4) = 5/4, left: 5/4, 6, 1\n(5/4) - (1) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 4) - 1))"}, {"input": "4 5 6 1\n", "output": "(6) / (5) = 6/5, left: 6/5, 4, 1\n(4) * (6/5) = 24/5, left: 24/5, 1\n(5) * (6) = 30, left: 30, 4, 1\n(30) / (1) = 30, left: 30, 4\n(5) + (6) = 11, left: 11, 4, 1\n(1) + (11) = 12, left: 12, 4\n(4) + (1) = 5, left: 5, 11\n(4) / (1) = 4, left: 4, 11\n(6) - (5) = 1, left: 1, 4, 1\n(1) / (1) = 1, left: 1, 4\n(5) / (6) = 5/6, left: 5/6, 4, 1\n(4) - (5/6) = 19/6, left: 19/6, 1\n(1) - (5/6) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / (1 - (5 / 6)))"}, {"input": "4 5 6 1\n", "output": "(6) - (4) = 2, left: 2, 5, 1\n(5) / (2) = 5/2, left: 5/2, 1\n(4) - (6) = -2, left: -2, 5, 1\n(4) + (6) = 10, left: 10, 5, 1\n(5) * (1) = 5, left: 5, 10\n(4) / (6) = 2/3, left: 2/3, 5, 1\n(4) * (6) = 24, left: 24, 5, 1\n(24) / (5) = 24/5, left: 24/5, 1\n(4) / (5) = 4/5, left: 4/5, 6, 1\n(1) / (4/5) = 5/4, left: 5/4, 6\n(5/4) - (6) = -19/4, left: -19/4\n(5) / (4) = 5/4, left: 5/4, 6, 1\n(5/4) - (1) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 4) - 1))"}, {"input": "4 5 6 1\n", "output": "(6) - (1) = 5, left: 5, 4, 5\n(6) + (1) = 7, left: 7, 4, 5\n(6) * (1) = 6, left: 6, 4, 5\n(1) / (5) = 1/5, left: 1/5, 4, 6\n(4) - (6) = -2, left: -2, 1/5\n(6) / (4) = 3/2, left: 3/2, 1/5\n(3/2) / (1/5) = 15/2, left: 15/2\n(5) * (1) = 5, left: 5, 4, 6\n(5) / (4) = 5/4, left: 5/4, 6\n(4) + (5) = 9, left: 9, 6, 1\n(5) / (4) = 5/4, left: 5/4, 6, 1\n(6) / (1) = 6, left: 6, 5/4\n(5/4) - (1) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 4) - 1))"}, {"input": "4 5 6 1\n", "output": "(6) - (5) = 1, left: 1, 4, 1\n(4) * (1) = 4, left: 4, 1\n(5) + (6) = 11, left: 11, 4, 1\n(11) / (1) = 11, left: 11, 4\n(1) / (11) = 1/11, left: 1/11, 4\n(4) / (1) = 4, left: 4, 11\n(11) * (4) = 44, left: 44\n(5) - (6) = -1, left: -1, 4, 1\n(4) / (-1) = -4, left: -4, 1\n(4) / (1) = 4, left: 4, -1\n(1) * (-1) = -1, left: -1, 4\n(5) / (6) = 5/6, left: 5/6, 4, 1\n(1) - (5/6) = 1/6, left: 1/6, 4\n(4) / (1/6) = 24, left: 24\nreach 24! expression: (4 / (1 - (5 / 6)))"}, {"input": "10 8 6 9\n", "output": "(9) - (6) = 3, left: 3, 10, 8\n(6) / (9) = 2/3, left: 2/3, 10, 8\n(2/3) / (8) = 1/12, left: 1/12, 10\n(10) / (9) = 10/9, left: 10/9, 8, 6\n(8) - (10/9) = 62/9, left: 62/9, 6\n(9) - (10) = -1, left: -1, 8, 6\n(10) - (9) = 1, left: 1, 8, 6\n(10) - (8) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (10 - 8)))"}, {"input": "10 8 6 9\n", "output": "(8) / (10) = 4/5, left: 4/5, 6, 9\n(9) + (4/5) = 49/5, left: 49/5, 6\n(9) / (4/5) = 45/4, left: 45/4, 6\n(6) + (4/5) = 34/5, left: 34/5, 9\n(10) + (8) = 18, left: 18, 6, 9\n(10) - (8) = 2, left: 2, 6, 9\n(9) / (6) = 3/2, left: 3/2, 2\n(6) - (2) = 4, left: 4, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (10 - 8)))"}, {"input": "10 8 6 9\n", "output": "(6) * (9) = 54, left: 54, 10, 8\n(6) / (9) = 2/3, left: 2/3, 10, 8\n(10) * (8) = 80, left: 80, 6, 9\n(10) + (8) = 18, left: 18, 6, 9\n(18) / (6) = 3, left: 3, 9\n(6) + (18) = 24, left: 24, 9\n(8) - (10) = -2, left: -2, 6, 9\n(9) - (6) = 3, left: 3, -2\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (8 - 10)))"}, {"input": "10 8 6 9\n", "output": "(6) / (10) = 3/5, left: 3/5, 8, 9\n(8) / (9) = 8/9, left: 8/9, 3/5\n(10) * (6) = 60, left: 60, 8, 9\n(10) - (6) = 4, left: 4, 8, 9\n(4) - (9) = -5, left: -5, 8\n(10) / (9) = 10/9, left: 10/9, 8, 6\n(9) - (10) = -1, left: -1, 8, 6\n(10) - (8) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (10 - 8)))"}, {"input": "10 8 6 9\n", "output": "(8) / (10) = 4/5, left: 4/5, 6, 9\n(6) + (4/5) = 34/5, left: 34/5, 9\n(6) - (4/5) = 26/5, left: 26/5, 9\n(10) + (8) = 18, left: 18, 6, 9\n(9) - (18) = -9, left: -9, 6\n(6) / (9) = 2/3, left: 2/3, 18\n(18) / (2/3) = 27, left: 27\n(10) - (8) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (10 - 8)))"}, {"input": "10 8 6 9\n", "output": "(6) * (9) = 54, left: 54, 10, 8\n(6) / (9) = 2/3, left: 2/3, 10, 8\n(9) / (10) = 9/10, left: 9/10, 8, 6\n(10) + (9) = 19, left: 19, 8, 6\n(19) / (8) = 19/8, left: 19/8, 6\n(8) * (6) = 48, left: 48, 10, 9\n(10) + (9) = 19, left: 19, 48\n(8) + (9) = 17, left: 17, 10, 6\n(10) / (6) = 5/3, left: 5/3, 8, 9\n(10) * (6) = 60, left: 60, 8, 9\n(8) - (9) = -1, left: -1, 60\n(10) - (8) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (10 - 8)))"}, {"input": "8 7 9 12\n", "output": "(12) / (7) = 12/7, left: 12/7, 8, 9\n(8) * (9) = 72, left: 72, 12/7\n(7) - (12) = -5, left: -5, 8, 9\n(8) / (7) = 8/7, left: 8/7, 9, 12\n(9) + (12) = 21, left: 21, 8/7\n(8/7) * (21) = 24, left: 24\nreach 24! expression: ((8 / 7) * (9 + 12))"}, {"input": "8 7 9 12\n", "output": "(9) / (7) = 9/7, left: 9/7, 8, 12\n(12) + (9/7) = 93/7, left: 93/7, 8\n(8) - (93/7) = -37/7, left: -37/7\n(9/7) / (12) = 3/28, left: 3/28, 8\n(9/7) - (8) = -47/7, left: -47/7, 12\n(9) - (7) = 2, left: 2, 8, 12\n(2) / (12) = 1/6, left: 1/6, 8\n(7) + (9) = 16, left: 16, 8, 12\n(12) * (16) = 192, left: 192, 8\n(192) / (8) = 24, left: 24\nreach 24! expression: ((12 * (7 + 9)) / 8)"}, {"input": "8 7 9 12\n", "output": "(12) - (7) = 5, left: 5, 8, 9\n(5) - (8) = -3, left: -3, 9\n(7) + (12) = 19, left: 19, 8, 9\n(8) * (19) = 152, left: 152, 9\n(9) - (152) = -143, left: -143\n(12) / (7) = 12/7, left: 12/7, 8, 9\n(7) - (12) = -5, left: -5, 8, 9\n(8) / (7) = 8/7, left: 8/7, 9, 12\n(9) + (12) = 21, left: 21, 8/7\n(8/7) * (21) = 24, left: 24\nreach 24! expression: ((8 / 7) * (9 + 12))"}, {"input": "8 7 9 12\n", "output": "(7) * (9) = 63, left: 63, 8, 12\n(8) * (63) = 504, left: 504, 12\n(9) / (7) = 9/7, left: 9/7, 8, 12\n(7) - (9) = -2, left: -2, 8, 12\n(7) / (9) = 7/9, left: 7/9, 8, 12\n(8) / (12) = 2/3, left: 2/3, 7/9\n(7/9) - (8) = -65/9, left: -65/9, 12\n(7) + (9) = 16, left: 16, 8, 12\n(12) * (16) = 192, left: 192, 8\n(192) / (8) = 24, left: 24\nreach 24! expression: ((12 * (7 + 9)) / 8)"}, {"input": "8 7 9 12\n", "output": "(9) - (8) = 1, left: 1, 7, 12\n(7) + (12) = 19, left: 19, 1\n(8) - (9) = -1, left: -1, 7, 12\n(12) * (-1) = -12, left: -12, 7\n(8) / (9) = 8/9, left: 8/9, 7, 12\n(7) * (12) = 84, left: 84, 8/9\n(8) * (12) = 96, left: 96, 7, 9\n(8) / (12) = 2/3, left: 2/3, 7, 9\n(7) + (9) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((7 + 9) / (8 / 12))"}, {"input": "8 7 9 12\n", "output": "(12) - (8) = 4, left: 4, 7, 9\n(9) - (7) = 2, left: 2, 4\n(9) / (7) = 9/7, left: 9/7, 4\n(7) / (9) = 7/9, left: 7/9, 4\n(9) - (4) = 5, left: 5, 7\n(12) / (8) = 3/2, left: 3/2, 7, 9\n(7) + (3/2) = 17/2, left: 17/2, 9\n(9) - (7) = 2, left: 2, 3/2\n(7) + (9) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((12 / 8) * (7 + 9))"}, {"input": "11 7 12 7\n", "output": "(12) / (11) = 12/11, left: 12/11, 7, 7\n(7) - (7) = 0, left: 0, 12/11\n(7) * (7) = 49, left: 49, 12/11\n(11) + (12) = 23, left: 23, 7, 7\n(7) / (7) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((11 + 12) + (7 / 7))"}, {"input": "11 7 12 7\n", "output": "(7) - (12) = -5, left: -5, 11, 7\n(7) - (11) = -4, left: -4, -5\n(-5) / (11) = -5/11, left: -5/11, 7\n(-5/11) - (7) = -82/11, left: -82/11\n(12) / (7) = 12/7, left: 12/7, 11, 7\n(12) - (7) = 5, left: 5, 11, 7\n(11) / (5) = 11/5, left: 11/5, 7\n(11) - (5) = 6, left: 6, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (12 - 7)) - 11)"}, {"input": "11 7 12 7\n", "output": "(7) / (11) = 7/11, left: 7/11, 12, 7\n(11) / (7) = 11/7, left: 11/7, 12, 7\n(11) + (7) = 18, left: 18, 12, 7\n(7) - (7) = 0, left: 0, 11, 12\n(11) * (0) = 0, left: 0, 12\n(7) * (7) = 49, left: 49, 11, 12\n(7) + (7) = 14, left: 14, 11, 12\n(7) / (7) = 1, left: 1, 11, 12\n(11) + (12) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: ((7 / 7) + (11 + 12))"}, {"input": "11 7 12 7\n", "output": "(11) * (7) = 77, left: 77, 7, 12\n(12) / (7) = 12/7, left: 12/7, 77\n(11) - (7) = 4, left: 4, 7, 12\n(11) - (12) = -1, left: -1, 7, 7\n(7) / (7) = 1, left: 1, -1\n(12) / (11) = 12/11, left: 12/11, 7, 7\n(7) + (12/11) = 89/11, left: 89/11, 7\n(11) + (12) = 23, left: 23, 7, 7\n(7) / (7) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((11 + 12) + (7 / 7))"}, {"input": "11 7 12 7\n", "output": "(7) - (7) = 0, left: 0, 11, 12\n(11) + (0) = 11, left: 11, 12\n(0) - (11) = -11, left: -11, 12\n(-11) / (12) = -11/12, left: -11/12\n(11) - (0) = 11, left: 11, 12\n(12) / (11) = 12/11, left: 12/11\n(11) / (12) = 11/12, left: 11/12\n(7) / (7) = 1, left: 1, 11, 12\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (7 / 7)))"}, {"input": "11 7 12 7\n", "output": "(11) / (7) = 11/7, left: 11/7, 12, 7\n(11/7) - (12) = -73/7, left: -73/7, 7\n(11) / (7) = 11/7, left: 11/7, 7, 12\n(7) - (12) = -5, left: -5, 11, 7\n(7) - (11) = -4, left: -4, -5\n(-4) / (-5) = 4/5, left: 4/5\n(7) * (12) = 84, left: 84, 11, 7\n(12) - (7) = 5, left: 5, 11, 7\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (12 - 7)) - 11)"}, {"input": "11 1 8 7\n", "output": "(11) - (7) = 4, left: 4, 1, 8\n(1) - (4) = -3, left: -3, 8\n(8) + (-3) = 5, left: 5\n(8) / (-3) = -8/3, left: -8/3\n(8) * (-3) = -24, left: -24\n(-3) - (8) = -11, left: -11\n(8) - (-3) = 11, left: 11\n(4) - (1) = 3, left: 3, 8\n(8) + (3) = 11, left: 11\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 - 7) - 1))"}, {"input": "11 1 8 7\n", "output": "(11) * (8) = 88, left: 88, 1, 7\n(1) * (7) = 7, left: 7, 88\n(1) / (88) = 1/88, left: 1/88, 7\n(7) + (88) = 95, left: 95, 1\n(11) / (8) = 11/8, left: 11/8, 1, 7\n(1) - (11/8) = -3/8, left: -3/8, 7\n(11) - (8) = 3, left: 3, 1, 7\n(7) * (3) = 21, left: 21, 1\n(1) + (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((11 - 8) * (1 + 7))"}, {"input": "11 1 8 7\n", "output": "(11) - (8) = 3, left: 3, 1, 7\n(3) - (1) = 2, left: 2, 7\n(7) + (2) = 9, left: 9\n(1) * (3) = 3, left: 3, 7\n(3) / (7) = 3/7, left: 3/7\n(7) - (3) = 4, left: 4, 1\n(4) - (1) = 3, left: 3\n(1) / (7) = 1/7, left: 1/7, 3\n(1) + (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((11 - 8) * (1 + 7))"}, {"input": "11 1 8 7\n", "output": "(11) / (7) = 11/7, left: 11/7, 1, 8\n(7) - (11) = -4, left: -4, 1, 8\n(1) / (8) = 1/8, left: 1/8, -4\n(1) + (8) = 9, left: 9, -4\n(1) + (-4) = -3, left: -3, 8\n(11) + (7) = 18, left: 18, 1, 8\n(1) - (8) = -7, left: -7, 18\n(11) - (7) = 4, left: 4, 1, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 - 7) - 1))"}, {"input": "11 1 8 7\n", "output": "(1) * (8) = 8, left: 8, 11, 7\n(7) + (8) = 15, left: 15, 11\n(1) + (8) = 9, left: 9, 11, 7\n(1) - (8) = -7, left: -7, 11, 7\n(8) - (1) = 7, left: 7, 11, 7\n(1) - (11) = -10, left: -10, 8, 7\n(11) - (1) = 10, left: 10, 8, 7\n(10) - (8) = 2, left: 2, 7\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 - 1) - 7))"}, {"input": "11 1 8 7\n", "output": "(11) - (7) = 4, left: 4, 1, 8\n(1) - (4) = -3, left: -3, 8\n(8) + (-3) = 5, left: 5\n(8) / (-3) = -8/3, left: -8/3\n(-3) / (8) = -3/8, left: -3/8\n(8) * (-3) = -24, left: -24\n(-3) - (8) = -11, left: -11\n(8) - (-3) = 11, left: 11\n(4) - (1) = 3, left: 3, 8\n(8) + (3) = 11, left: 11\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 - 7) - 1))"}, {"input": "11 1 8 7\n", "output": "(11) - (7) = 4, left: 4, 1, 8\n(1) - (4) = -3, left: -3, 8\n(8) + (-3) = 5, left: 5\n(8) / (-3) = -8/3, left: -8/3\n(-3) / (8) = -3/8, left: -3/8\n(8) * (-3) = -24, left: -24\n(-3) - (8) = -11, left: -11\n(8) - (-3) = 11, left: 11\n(4) - (1) = 3, left: 3, 8\n(8) + (3) = 11, left: 11\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 - 7) - 1))"}, {"input": "13 4 4 7\n", "output": "(4) - (4) = 0, left: 0, 13, 7\n(0) - (13) = -13, left: -13, 7\n(4) / (4) = 1, left: 1, 13, 7\n(13) - (7) = 6, left: 6, 4, 4\n(13) + (7) = 20, left: 20, 4, 4\n(4) - (4) = 0, left: 0, 20\n(4) + (7) = 11, left: 11, 13, 4\n(4) * (7) = 28, left: 28, 13, 4\n(13) * (4) = 52, left: 52, 28\n(52) - (28) = 24, left: 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "13 4 4 7\n", "output": "(4) - (7) = -3, left: -3, 13, 4\n(13) + (4) = 17, left: 17, -3\n(17) - (-3) = 20, left: 20\n(4) / (7) = 4/7, left: 4/7, 13, 4\n(4) / (4/7) = 7, left: 7, 13\n(13) - (7) = 6, left: 6\n(13) / (4/7) = 91/4, left: 91/4, 4\n(4) * (7) = 28, left: 28, 13, 4\n(13) * (4) = 52, left: 52, 28\n(52) - (28) = 24, left: 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "13 4 4 7\n", "output": "(4) - (4) = 0, left: 0, 13, 7\n(4) / (4) = 1, left: 1, 13, 7\n(4) * (4) = 16, left: 16, 13, 7\n(13) - (16) = -3, left: -3, 7\n(4) - (7) = -3, left: -3, 13, 4\n(4) + (7) = 11, left: 11, 13, 4\n(4) * (7) = 28, left: 28, 13, 4\n(28) - (13) = 15, left: 15, 4\n(13) * (4) = 52, left: 52, 28\n(52) - (28) = 24, left: 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "13 4 4 7\n", "output": "(7) / (4) = 7/4, left: 7/4, 13, 4\n(13) - (4) = 9, left: 9, 7/4\n(13) * (4) = 52, left: 52, 7/4\n(7/4) + (52) = 215/4, left: 215/4\n(4) - (7) = -3, left: -3, 13, 4\n(4) - (13) = -9, left: -9, -3\n(13) / (-3) = -13/3, left: -13/3, 4\n(4) * (7) = 28, left: 28, 13, 4\n(13) * (4) = 52, left: 52, 28\n(52) - (28) = 24, left: 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "13 4 4 7\n", "output": "(13) - (7) = 6, left: 6, 4, 4\n(4) + (6) = 10, left: 10, 4\n(6) / (4) = 3/2, left: 3/2, 4\n(13) + (7) = 20, left: 20, 4, 4\n(7) / (13) = 7/13, left: 7/13, 4, 4\n(4) * (4) = 16, left: 16, 13, 7\n(4) - (4) = 0, left: 0, 13, 7\n(4) * (7) = 28, left: 28, 13, 4\n(13) * (4) = 52, left: 52, 28\n(52) - (28) = 24, left: 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "13 4 4 7\n", "output": "(13) - (7) = 6, left: 6, 4, 4\n(13) / (7) = 13/7, left: 13/7, 4, 4\n(7) - (13) = -6, left: -6, 4, 4\n(4) / (4) = 1, left: 1, 13, 7\n(4) / (4) = 1, left: 1, 13, 7\n(4) * (4) = 16, left: 16, 13, 7\n(13) - (7) = 6, left: 6, 16\n(4) + (4) = 8, left: 8, 13, 7\n(13) - (7) = 6, left: 6, 8\n(4) - (4) = 0, left: 0, 13, 7\n(13) * (0) = 0, left: 0, 7\n(4) * (7) = 28, left: 28, 13, 4\n(13) * (4) = 52, left: 52, 28\n(52) - (28) = 24, left: 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "3 4 10 8\n", "output": "(8) - (3) = 5, left: 5, 4, 10\n(8) / (3) = 8/3, left: 8/3, 4, 10\n(8/3) - (10) = -22/3, left: -22/3, 4\n(3) / (8) = 3/8, left: 3/8, 4, 10\n(3) + (8) = 11, left: 11, 4, 10\n(4) - (10) = -6, left: -6, 3, 8\n(10) / (4) = 5/2, left: 5/2, 3, 8\n(10) - (4) = 6, left: 6, 3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 - 4) - 3))"}, {"input": "3 4 10 8\n", "output": "(3) * (8) = 24, left: 24, 4, 10\n(10) / (24) = 5/12, left: 5/12, 4\n(24) - (4) = 20, left: 20, 10\n(3) - (8) = -5, left: -5, 4, 10\n(3) + (8) = 11, left: 11, 4, 10\n(11) - (10) = 1, left: 1, 4\n(8) / (3) = 8/3, left: 8/3, 4, 10\n(3) * (4) = 12, left: 12, 10, 8\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 * 4) * (10 - 8))"}, {"input": "3 4 10 8\n", "output": "(10) - (3) = 7, left: 7, 4, 8\n(7) - (8) = -1, left: -1, 4\n(4) * (-1) = -4, left: -4\n(8) - (4) = 4, left: 4, 7\n(4) * (8) = 32, left: 32, 7\n(4) - (8) = -4, left: -4, 7\n(8) / (4) = 2, left: 2, 7\n(7) - (2) = 5, left: 5\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 - 3) - 4))"}, {"input": "3 4 10 8\n", "output": "(8) / (4) = 2, left: 2, 3, 10\n(2) - (3) = -1, left: -1, 10\n(3) * (2) = 6, left: 6, 10\n(10) - (6) = 4, left: 4\n(2) - (10) = -8, left: -8, 3\n(3) / (-8) = -3/8, left: -3/8\n(10) + (2) = 12, left: 12, 3\n(12) / (3) = 4, left: 4\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (8 / 4)))"}, {"input": "3 4 10 8\n", "output": "(3) * (10) = 30, left: 30, 4, 8\n(8) - (30) = -22, left: -22, 4\n(3) + (10) = 13, left: 13, 4, 8\n(13) - (4) = 9, left: 9, 8\n(4) + (13) = 17, left: 17, 8\n(8) / (17) = 8/17, left: 8/17\n(10) / (3) = 10/3, left: 10/3, 4, 8\n(10) - (3) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 - 3) - 4))"}, {"input": "3 6 13 11\n", "output": "(11) / (13) = 11/13, left: 11/13, 3, 6\n(11/13) / (3) = 11/39, left: 11/39, 6\n(6) * (11/39) = 22/13, left: 22/13\n(13) - (11) = 2, left: 2, 3, 6\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (13 - 11)))"}, {"input": "3 6 13 11\n", "output": "(11) - (6) = 5, left: 5, 3, 13\n(3) * (13) = 39, left: 39, 5\n(39) / (5) = 39/5, left: 39/5\n(5) - (3) = 2, left: 2, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 - (11 - 6)))"}, {"input": "3 6 13 11\n", "output": "(11) / (6) = 11/6, left: 11/6, 3, 13\n(3) / (11/6) = 18/11, left: 18/11, 13\n(6) - (11) = -5, left: -5, 3, 13\n(3) + (-5) = -2, left: -2, 13\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (6 - 11)))"}, {"input": "3 6 13 11\n", "output": "(11) / (6) = 11/6, left: 11/6, 3, 13\n(11/6) / (13) = 11/78, left: 11/78, 3\n(11/6) - (13) = -67/6, left: -67/6, 3\n(13) * (11/6) = 143/6, left: 143/6, 3\n(13) - (3) = 10, left: 10, 11/6\n(6) - (11) = -5, left: -5, 3, 13\n(3) + (-5) = -2, left: -2, 13\n(13) * (-5) = -65, left: -65, 3\n(13) + (-5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 + (6 - 11)))"}, {"input": "3 6 13 11\n", "output": "(13) / (3) = 13/3, left: 13/3, 6, 11\n(13) - (3) = 10, left: 10, 6, 11\n(11) + (10) = 21, left: 21, 6\n(3) + (13) = 16, left: 16, 6, 11\n(3) - (13) = -10, left: -10, 6, 11\n(11) / (13) = 11/13, left: 11/13, 3, 6\n(11) - (13) = -2, left: -2, 3, 6\n(6) + (-2) = 4, left: 4, 3\n(6) - (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 - (11 - 13)))"}, {"input": "3 6 13 11\n", "output": "(11) / (13) = 11/13, left: 11/13, 3, 6\n(11/13) / (3) = 11/39, left: 11/39, 6\n(6) - (11/13) = 67/13, left: 67/13, 3\n(3) + (6) = 9, left: 9, 11/13\n(13) / (11) = 13/11, left: 13/11, 3, 6\n(13/11) / (6) = 13/66, left: 13/66, 3\n(3) * (13/11) = 39/11, left: 39/11, 6\n(13) - (11) = 2, left: 2, 3, 6\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (13 - 11)))"}, {"input": "3 6 13 11\n", "output": "(6) / (3) = 2, left: 2, 13, 11\n(13) * (11) = 143, left: 143, 2\n(3) - (6) = -3, left: -3, 13, 11\n(3) * (6) = 18, left: 18, 13, 11\n(6) - (3) = 3, left: 3, 13, 11\n(13) * (11) = 143, left: 143, 3, 6\n(3) / (143) = 3/143, left: 3/143, 6\n(11) - (13) = -2, left: -2, 3, 6\n(6) - (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 - (11 - 13)))"}, {"input": "3 6 13 11\n", "output": "(11) - (6) = 5, left: 5, 3, 13\n(13) - (3) = 10, left: 10, 5\n(3) + (13) = 16, left: 16, 5\n(3) * (13) = 39, left: 39, 5\n(13) / (3) = 13/3, left: 13/3, 5\n(3) / (5) = 3/5, left: 3/5, 13\n(3/5) - (13) = -62/5, left: -62/5\n(5) / (3) = 5/3, left: 5/3, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 - (11 - 6)))"}, {"input": "9 12 10 12\n", "output": "(9) + (12) = 21, left: 21, 12, 10\n(12) - (21) = -9, left: -9, 10\n(12) / (12) = 1, left: 1, 9, 10\n(12) + (12) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (10 - 9))"}, {"input": "9 12 10 12\n", "output": "(12) - (10) = 2, left: 2, 9, 12\n(2) - (12) = -10, left: -10, 9\n(9) * (12) = 108, left: 108, 12, 10\n(10) - (9) = 1, left: 1, 12, 12\n(12) / (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (12 / (10 - 9)))"}, {"input": "9 12 10 12\n", "output": "(12) - (9) = 3, left: 3, 12, 10\n(12) / (10) = 6/5, left: 6/5, 3\n(10) - (12) = -2, left: -2, 9, 12\n(12) + (12) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (10 - 9))"}, {"input": "9 12 10 12\n", "output": "(9) + (12) = 21, left: 21, 10, 12\n(12) - (9) = 3, left: 3, 10, 12\n(10) / (3) = 10/3, left: 10/3, 12\n(9) - (10) = -1, left: -1, 12, 12\n(12) / (-1) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (12 / (9 - 10)))"}, {"input": "9 12 10 12\n", "output": "(9) / (12) = 3/4, left: 3/4, 12, 10\n(10) * (3/4) = 15/2, left: 15/2, 12\n(9) - (12) = -3, left: -3, 12, 10\n(9) * (12) = 108, left: 108, 12, 10\n(10) / (12) = 5/6, left: 5/6, 108\n(12) - (9) = 3, left: 3, 12, 10\n(12) - (12) = 0, left: 0, 9, 10\n(12) + (12) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (10 - 9))"}, {"input": "9 12 10 12\n", "output": "(10) / (12) = 5/6, left: 5/6, 9, 12\n(12) - (10) = 2, left: 2, 9, 12\n(10) + (12) = 22, left: 22, 9, 12\n(22) / (9) = 22/9, left: 22/9, 12\n(12) * (10) = 120, left: 120, 9, 12\n(120) / (12) = 10, left: 10, 9\n(10) - (12) = -2, left: -2, 9, 12\n(9) - (10) = -1, left: -1, 12, 12\n(12) * (-1) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (12 * (9 - 10)))"}, {"input": "9 12 10 12\n", "output": "(9) * (12) = 108, left: 108, 12, 10\n(12) / (9) = 4/3, left: 4/3, 12, 10\n(12) + (10) = 22, left: 22, 9, 12\n(12) * (10) = 120, left: 120, 9, 12\n(12) / (9) = 4/3, left: 4/3, 120\n(12) / (10) = 6/5, left: 6/5, 9, 12\n(12) * (12) = 144, left: 144, 9, 10\n(12) + (12) = 24, left: 24, 9, 10\n(10) - (9) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (10 - 9))"}, {"input": "9 12 10 12\n", "output": "(12) / (9) = 4/3, left: 4/3, 10, 12\n(10) * (12) = 120, left: 120, 9, 12\n(10) + (12) = 22, left: 22, 9, 12\n(12) * (22) = 264, left: 264, 9\n(12) / (10) = 6/5, left: 6/5, 9, 12\n(12) * (6/5) = 72/5, left: 72/5, 9\n(72/5) / (9) = 8/5, left: 8/5\n(9) - (10) = -1, left: -1, 12, 12\n(12) / (-1) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (12 / (9 - 10)))"}, {"input": "9 12 10 12\n", "output": "(12) - (10) = 2, left: 2, 9, 12\n(10) / (12) = 5/6, left: 5/6, 9, 12\n(12) / (10) = 6/5, left: 6/5, 9, 12\n(6/5) - (9) = -39/5, left: -39/5, 12\n(9) - (12) = -3, left: -3, 12, 10\n(-3) - (10) = -13, left: -13, 12\n(12) / (-13) = -12/13, left: -12/13\n(10) - (9) = 1, left: 1, 12, 12\n(12) / (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (12 / (10 - 9)))"}, {"input": "5 5 4 7\n", "output": "(5) * (7) = 35, left: 35, 5, 4\n(5) * (4) = 20, left: 20, 35\n(5) / (4) = 5/4, left: 5/4, 5, 7\n(5) - (5/4) = 15/4, left: 15/4, 7\n(5) - (4) = 1, left: 1, 5, 7\n(5) / (1) = 5, left: 5, 7\n(5) * (4) = 20, left: 20, 5, 7\n(5) / (5) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) * (7) = 35, left: 35, 5, 4\n(7) - (5) = 2, left: 2, 5, 4\n(4) * (7) = 28, left: 28, 5, 5\n(4) / (5) = 4/5, left: 4/5, 5, 7\n(5) * (5) = 25, left: 25, 4, 7\n(4) + (25) = 29, left: 29, 7\n(5) - (5) = 0, left: 0, 4, 7\n(5) / (5) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) + (7) = 12, left: 12, 5, 4\n(5) * (4) = 20, left: 20, 12\n(7) / (5) = 7/5, left: 7/5, 5, 4\n(5) / (4) = 5/4, left: 5/4, 5, 7\n(4) / (5) = 4/5, left: 4/5, 5, 7\n(5) * (4) = 20, left: 20, 5, 7\n(7) - (5) = 2, left: 2, 20\n(5) / (5) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) / (7) = 5/7, left: 5/7, 5, 4\n(5) - (7) = -2, left: -2, 5, 4\n(7) - (5) = 2, left: 2, 5, 4\n(4) + (2) = 6, left: 6, 5\n(4) - (2) = 2, left: 2, 5\n(5) - (5) = 0, left: 0, 4, 7\n(4) - (0) = 4, left: 4, 7\n(5) / (5) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(4) - (5) = -1, left: -1, 5, 7\n(5) - (-1) = 6, left: 6, 7\n(5) / (4) = 5/4, left: 5/4, 5, 7\n(5/4) - (7) = -23/4, left: -23/4, 5\n(7) / (5) = 7/5, left: 7/5, 5, 4\n(5) - (7) = -2, left: -2, 5, 4\n(4) - (7) = -3, left: -3, 5, 5\n(5) / (5) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) + (4) = 9, left: 9, 5, 7\n(7) * (9) = 63, left: 63, 5\n(63) / (5) = 63/5, left: 63/5\n(5) + (4) = 9, left: 9, 5, 7\n(7) / (5) = 7/5, left: 7/5, 5, 4\n(5) / (7) = 5/7, left: 5/7, 5, 4\n(5) * (7) = 35, left: 35, 5, 4\n(4) * (35) = 140, left: 140, 5\n(7) / (4) = 7/4, left: 7/4, 5, 5\n(5) + (7/4) = 27/4, left: 27/4, 5\n(5) - (27/4) = -7/4, left: -7/4\n(5) / (5) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) + (7) = 12, left: 12, 5, 4\n(4) - (12) = -8, left: -8, 5\n(7) / (5) = 7/5, left: 7/5, 5, 4\n(4) - (5) = -1, left: -1, 7/5\n(5) / (7) = 5/7, left: 5/7, 5, 4\n(5) + (4) = 9, left: 9, 5, 7\n(5) - (4) = 1, left: 1, 5, 7\n(4) - (5) = -1, left: -1, 5, 7\n(5) - (5) = 0, left: 0, 4, 7\n(5) - (5) = 0, left: 0, 4, 7\n(5) / (5) = 1, left: 1, 4, 7\n(4) / (1) = 4, left: 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) / (7) = 5/7, left: 5/7, 5, 4\n(5) + (5/7) = 40/7, left: 40/7, 4\n(5) / (4) = 5/4, left: 5/4, 5/7\n(5) + (7) = 12, left: 12, 5, 4\n(5) + (4) = 9, left: 9, 12\n(5) - (7) = -2, left: -2, 5, 4\n(4) * (-2) = -8, left: -8, 5\n(7) / (5) = 7/5, left: 7/5, 5, 4\n(5) + (7/5) = 32/5, left: 32/5, 4\n(7) - (5) = 2, left: 2, 5, 4\n(5) * (7) = 35, left: 35, 5, 4\n(5) / (5) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) - (7) = -2, left: -2, 5, 4\n(4) - (5) = -1, left: -1, 5, 7\n(4) + (7) = 11, left: 11, 5, 5\n(5) * (5) = 25, left: 25, 11\n(11) - (25) = -14, left: -14\n(7) / (4) = 7/4, left: 7/4, 5, 5\n(5) / (4) = 5/4, left: 5/4, 5, 7\n(4) - (5) = -1, left: -1, 5, 7\n(5) + (5) = 10, left: 10, 4, 7\n(5) - (5) = 0, left: 0, 4, 7\n(4) * (0) = 0, left: 0, 7\n(5) / (5) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) * (4) = 20, left: 20, 5, 7\n(5) + (20) = 25, left: 25, 7\n(5) / (4) = 5/4, left: 5/4, 5, 7\n(5/4) / (7) = 5/28, left: 5/28, 5\n(7) / (5) = 7/5, left: 7/5, 5, 4\n(5) + (4) = 9, left: 9, 7/5\n(4) - (5) = -1, left: -1, 7/5\n(5) + (7) = 12, left: 12, 5, 4\n(7) / (4) = 7/4, left: 7/4, 5, 5\n(5) - (5) = 0, left: 0, 4, 7\n(5) * (5) = 25, left: 25, 4, 7\n(5) / (5) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 2 5 13\n", "output": "(2) - (5) = -3, left: -3, 5, 13\n(13) / (5) = 13/5, left: 13/5, -3\n(-3) / (13/5) = -15/13, left: -15/13\n(5) + (13) = 18, left: 18, -3\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((2 - 5) * (5 - 13))"}, {"input": "5 2 5 13\n", "output": "(2) - (5) = -3, left: -3, 5, 13\n(5) / (-3) = -5/3, left: -5/3, 13\n(-3) - (13) = -16, left: -16, 5\n(-3) / (13) = -3/13, left: -3/13, 5\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((2 - 5) * (5 - 13))"}, {"input": "5 2 5 13\n", "output": "(2) - (5) = -3, left: -3, 5, 13\n(5) / (13) = 5/13, left: 5/13, -3\n(13) / (5) = 13/5, left: 13/5, -3\n(-3) - (13/5) = -28/5, left: -28/5\n(5) * (13) = 65, left: 65, -3\n(13) - (5) = 8, left: 8, -3\n(8) / (-3) = -8/3, left: -8/3\n(5) - (13) = -8, left: -8, -3\n(-3) + (-8) = -11, left: -11\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((2 - 5) * (5 - 13))"}, {"input": "5 2 5 13\n", "output": "(2) - (5) = -3, left: -3, 5, 13\n(5) / (-3) = -5/3, left: -5/3, 13\n(13) * (-5/3) = -65/3, left: -65/3\n(-3) / (5) = -3/5, left: -3/5, 13\n(13) - (-3) = 16, left: 16, 5\n(13) + (-3) = 10, left: 10, 5\n(13) - (5) = 8, left: 8, -3\n(-3) * (8) = -24, left: -24\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((2 - 5) * (5 - 13))"}, {"input": "5 2 5 13\n", "output": "(5) - (13) = -8, left: -8, 5, 2\n(5) / (-8) = -5/8, left: -5/8, 2\n(5) - (-8) = 13, left: 13, 2\n(13) - (2) = 11, left: 11\n(2) / (-8) = -1/4, left: -1/4, 5\n(5) / (-1/4) = -20, left: -20\n(-8) / (2) = -4, left: -4, 5\n(-8) - (2) = -10, left: -10, 5\n(2) - (5) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (2 - 5))"}, {"input": "5 2 5 13\n", "output": "(5) * (13) = 65, left: 65, 5, 2\n(5) / (65) = 1/13, left: 1/13, 2\n(2) - (1/13) = 25/13, left: 25/13\n(2) + (65) = 67, left: 67, 5\n(5) + (2) = 7, left: 7, 65\n(2) - (5) = -3, left: -3, 65\n(5) / (2) = 5/2, left: 5/2, 65\n(13) - (5) = 8, left: 8, 5, 2\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((13 - 5) * (5 - 2))"}, {"input": "5 2 5 13\n", "output": "(5) + (2) = 7, left: 7, 5, 13\n(13) / (5) = 13/5, left: 13/5, 7\n(13) / (7) = 13/7, left: 13/7, 5\n(5) * (2) = 10, left: 10, 5, 13\n(13) - (10) = 3, left: 3, 5\n(13) + (10) = 23, left: 23, 5\n(5) - (2) = 3, left: 3, 5, 13\n(5) * (3) = 15, left: 15, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((5 - 2) * (13 - 5))"}, {"input": "9 9 6 12\n", "output": "(9) + (12) = 21, left: 21, 9, 6\n(21) / (9) = 7/3, left: 7/3, 6\n(7/3) / (6) = 7/18, left: 7/18\n(9) / (21) = 3/7, left: 3/7, 6\n(9) + (21) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((9 + (9 + 12)) - 6)"}, {"input": "9 9 6 12\n", "output": "(9) - (9) = 0, left: 0, 6, 12\n(6) * (12) = 72, left: 72, 0\n(9) / (9) = 1, left: 1, 6, 12\n(6) + (12) = 18, left: 18, 1\n(9) - (9) = 0, left: 0, 6, 12\n(6) * (0) = 0, left: 0, 12\n(12) + (0) = 12, left: 12\n(9) + (9) = 18, left: 18, 6, 12\n(6) - (18) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 - (9 + 9)))"}, {"input": "9 9 6 12\n", "output": "(9) + (12) = 21, left: 21, 9, 6\n(21) / (9) = 7/3, left: 7/3, 6\n(6) - (7/3) = 11/3, left: 11/3\n(7/3) - (6) = -11/3, left: -11/3\n(6) + (7/3) = 25/3, left: 25/3\n(9) / (21) = 3/7, left: 3/7, 6\n(3/7) - (6) = -39/7, left: -39/7\n(3/7) / (6) = 1/14, left: 1/14\n(9) + (21) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((9 + (9 + 12)) - 6)"}, {"input": "9 9 6 12\n", "output": "(9) * (12) = 108, left: 108, 9, 6\n(12) / (9) = 4/3, left: 4/3, 9, 6\n(9) / (4/3) = 27/4, left: 27/4, 6\n(6) / (27/4) = 8/9, left: 8/9\n(9) + (6) = 15, left: 15, 4/3\n(6) * (4/3) = 8, left: 8, 9\n(9) / (12) = 3/4, left: 3/4, 9, 6\n(9) + (12) = 21, left: 21, 9, 6\n(9) + (21) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((9 + (9 + 12)) - 6)"}, {"input": "9 9 6 12\n", "output": "(6) * (12) = 72, left: 72, 9, 9\n(9) / (72) = 1/8, left: 1/8, 9\n(9) - (9) = 0, left: 0, 72\n(9) / (9) = 1, left: 1, 72\n(72) + (1) = 73, left: 73\n(6) / (12) = 1/2, left: 1/2, 9, 9\n(12) - (6) = 6, left: 6, 9, 9\n(6) - (9) = -3, left: -3, 9\n(9) + (6) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (9 + (12 - 6)))"}, {"input": "9 9 6 12\n", "output": "(12) / (9) = 4/3, left: 4/3, 9, 6\n(9) - (4/3) = 23/3, left: 23/3, 6\n(12) - (9) = 3, left: 3, 9, 6\n(9) + (3) = 12, left: 12, 6\n(9) / (12) = 3/4, left: 3/4, 9, 6\n(6) - (9) = -3, left: -3, 3/4\n(3/4) * (-3) = -9/4, left: -9/4\n(9) + (12) = 21, left: 21, 9, 6\n(21) - (6) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + ((9 + 12) - 6))"}, {"input": "12 3 8 6\n", "output": "(8) - (6) = 2, left: 2, 12, 3\n(8) * (6) = 48, left: 48, 12, 3\n(3) / (48) = 1/16, left: 1/16, 12\n(12) * (1/16) = 3/4, left: 3/4\n(12) / (6) = 2, left: 2, 3, 8\n(8) / (2) = 4, left: 4, 3\n(6) - (12) = -6, left: -6, 3, 8\n(12) - (6) = 6, left: 6, 3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 6) - 3))"}, {"input": "12 3 8 6\n", "output": "(12) * (8) = 96, left: 96, 3, 6\n(3) * (6) = 18, left: 18, 96\n(12) / (8) = 3/2, left: 3/2, 3, 6\n(6) - (8) = -2, left: -2, 12, 3\n(12) + (3) = 15, left: 15, -2\n(8) / (6) = 4/3, left: 4/3, 12, 3\n(12) / (3) = 4, left: 4, 4/3\n(12) / (3) = 4, left: 4, 8, 6\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 - (12 / 3)))"}, {"input": "12 3 8 6\n", "output": "(12) + (8) = 20, left: 20, 3, 6\n(12) - (8) = 4, left: 4, 3, 6\n(6) + (4) = 10, left: 10, 3\n(6) - (3) = 3, left: 3, 12, 8\n(6) / (3) = 2, left: 2, 12, 8\n(3) / (6) = 1/2, left: 1/2, 12, 8\n(8) * (1/2) = 4, left: 4, 12\n(3) + (6) = 9, left: 9, 12, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (12 - (3 + 6)))"}, {"input": "12 3 8 6\n", "output": "(12) + (3) = 15, left: 15, 8, 6\n(8) - (15) = -7, left: -7, 6\n(-7) - (6) = -13, left: -13\n(15) / (6) = 5/2, left: 5/2, 8\n(12) * (3) = 36, left: 36, 8, 6\n(6) * (36) = 216, left: 216, 8\n(12) / (3) = 4, left: 4, 8, 6\n(8) * (6) = 48, left: 48, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 - (12 / 3)))"}, {"input": "12 3 8 6\n", "output": "(3) - (12) = -9, left: -9, 8, 6\n(8) * (-9) = -72, left: -72, 6\n(8) - (6) = 2, left: 2, -9\n(-9) / (6) = -3/2, left: -3/2, 8\n(-3/2) - (8) = -19/2, left: -19/2\n(6) * (-9) = -54, left: -54, 8\n(12) * (3) = 36, left: 36, 8, 6\n(12) - (3) = 9, left: 9, 8, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 3) - 6))"}, {"input": "12 3 8 6\n", "output": "(8) / (12) = 2/3, left: 2/3, 3, 6\n(12) + (8) = 20, left: 20, 3, 6\n(3) / (6) = 1/2, left: 1/2, 20\n(8) - (12) = -4, left: -4, 3, 6\n(3) + (-4) = -1, left: -1, 6\n(12) - (8) = 4, left: 4, 3, 6\n(3) / (4) = 3/4, left: 3/4, 6\n(6) - (3) = 3, left: 3, 12, 8\n(12) * (3) = 36, left: 36, 8\n(3) / (6) = 1/2, left: 1/2, 12, 8\n(12) - (8) = 4, left: 4, 1/2\n(3) + (6) = 9, left: 9, 12, 8\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (12 - (3 + 6)))"}, {"input": "12 3 8 6\n", "output": "(6) - (8) = -2, left: -2, 12, 3\n(8) - (6) = 2, left: 2, 12, 3\n(8) / (6) = 4/3, left: 4/3, 12, 3\n(6) - (12) = -6, left: -6, 3, 8\n(6) / (12) = 1/2, left: 1/2, 3, 8\n(12) + (6) = 18, left: 18, 3, 8\n(18) - (3) = 15, left: 15, 8\n(18) - (8) = 10, left: 10, 3\n(8) * (18) = 144, left: 144, 3\n(3) - (144) = -141, left: -141\n(12) * (6) = 72, left: 72, 3, 8\n(12) - (6) = 6, left: 6, 3, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 6) - 3))"}, {"input": "1 7 1 10\n", "output": "(1) + (10) = 11, left: 11, 1, 7\n(1) / (10) = 1/10, left: 1/10, 1, 7\n(1) + (1/10) = 11/10, left: 11/10, 7\n(1) - (7) = -6, left: -6, 1, 10\n(1) - (7) = -6, left: -6, 1, 10\n(1) * (7) = 7, left: 7, 1, 10\n(1) + (1) = 2, left: 2, 7, 10\n(2) / (7) = 2/7, left: 2/7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(7) + (1) = 8, left: 8, 1, 10\n(8) / (1) = 8, left: 8, 10\n(7) - (10) = -3, left: -3, 1, 1\n(1) - (10) = -9, left: -9, 1, 7\n(10) - (1) = 9, left: 9, 7, 1\n(1) / (1) = 1, left: 1, 7, 10\n(7) + (10) = 17, left: 17, 1\n(1) + (1) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(1) / (7) = 1/7, left: 1/7, 1, 10\n(1) * (7) = 7, left: 7, 1, 10\n(1) - (1) = 0, left: 0, 7, 10\n(0) - (7) = -7, left: -7, 10\n(10) + (-7) = 3, left: 3\n(1) / (1) = 1, left: 1, 7, 10\n(10) + (1) = 11, left: 11, 7\n(1) + (1) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(7) / (10) = 7/10, left: 7/10, 1, 1\n(1) - (10) = -9, left: -9, 1, 7\n(1) * (10) = 10, left: 10, 1, 7\n(1) - (10) = -9, left: -9, 7\n(7) * (-9) = -63, left: -63\n(10) - (1) = 9, left: 9, 1, 7\n(7) * (1) = 7, left: 7, 1, 10\n(1) + (1) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(1) - (7) = -6, left: -6, 1, 10\n(1) / (7) = 1/7, left: 1/7, 1, 10\n(7) - (1) = 6, left: 6, 1, 10\n(7) * (1) = 7, left: 7, 1, 10\n(10) / (1) = 10, left: 10, 7\n(1) / (1) = 1, left: 1, 7, 10\n(10) / (7) = 10/7, left: 10/7, 1\n(1) + (1) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(1) / (7) = 1/7, left: 1/7, 1, 10\n(10) - (1/7) = 69/7, left: 69/7, 1\n(7) / (1) = 7, left: 7, 1, 10\n(7) - (1) = 6, left: 6, 1, 10\n(7) + (1) = 8, left: 8, 1, 10\n(10) - (1) = 9, left: 9, 8\n(9) - (8) = 1, left: 1\n(7) * (1) = 7, left: 7, 1, 10\n(10) - (1) = 9, left: 9, 7\n(1) / (1) = 1, left: 1, 7, 10\n(1) + (1) = 2, left: 2, 7, 10\n(7) + (2) = 9, left: 9, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(1) - (10) = -9, left: -9, 1, 7\n(1) / (-9) = -1/9, left: -1/9, 7\n(7) - (-1/9) = 64/9, left: 64/9\n(1) / (10) = 1/10, left: 1/10, 1, 7\n(1) - (1/10) = 9/10, left: 9/10, 7\n(10) - (1) = 9, left: 9, 1, 7\n(7) * (1) = 7, left: 7, 1, 10\n(7) - (1) = 6, left: 6, 10\n(1) - (7) = -6, left: -6, 1, 10\n(1) - (10) = -9, left: -9, -6\n(1) * (7) = 7, left: 7, 1, 10\n(1) + (1) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(7) - (10) = -3, left: -3, 1, 1\n(1) / (1) = 1, left: 1, -3\n(10) / (7) = 10/7, left: 10/7, 1, 1\n(7) * (10) = 70, left: 70, 1, 1\n(10) - (7) = 3, left: 3, 1, 1\n(1) - (10) = -9, left: -9, 1, 7\n(7) * (-9) = -63, left: -63, 1\n(-63) - (1) = -64, left: -64\n(-9) / (7) = -9/7, left: -9/7, 1\n(7) / (1) = 7, left: 7, 1, 10\n(7) * (1) = 7, left: 7, 1, 10\n(1) + (1) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(7) - (1) = 6, left: 6, 1, 10\n(1) - (7) = -6, left: -6, 1, 10\n(1) / (-6) = -1/6, left: -1/6, 10\n(7) - (10) = -3, left: -3, 1, 1\n(10) / (7) = 10/7, left: 10/7, 1, 1\n(7) / (10) = 7/10, left: 7/10, 1, 1\n(1) + (7/10) = 17/10, left: 17/10, 1\n(10) - (7) = 3, left: 3, 1, 1\n(10) / (1) = 10, left: 10, 1, 7\n(1) + (10) = 11, left: 11, 1, 7\n(1) / (10) = 1/10, left: 1/10, 7, 1\n(1) + (1) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "4 3 11 6\n", "output": "(11) + (6) = 17, left: 17, 4, 3\n(3) - (4) = -1, left: -1, 17\n(4) / (3) = 4/3, left: 4/3, 17\n(17) / (4/3) = 51/4, left: 51/4\n(4) + (3) = 7, left: 7, 17\n(17) + (7) = 24, left: 24\nreach 24! expression: ((11 + 6) + (4 + 3))"}, {"input": "4 3 11 6\n", "output": "(11) / (3) = 11/3, left: 11/3, 4, 6\n(3) + (11) = 14, left: 14, 4, 6\n(6) / (14) = 3/7, left: 3/7, 4\n(4) * (3/7) = 12/7, left: 12/7\n(6) + (14) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (6 + (3 + 11)))"}, {"input": "4 3 11 6\n", "output": "(11) / (3) = 11/3, left: 11/3, 4, 6\n(4) / (6) = 2/3, left: 2/3, 11/3\n(4) / (11/3) = 12/11, left: 12/11, 6\n(4) * (11/3) = 44/3, left: 44/3, 6\n(6) - (11/3) = 7/3, left: 7/3, 4\n(3) + (11) = 14, left: 14, 4, 6\n(6) - (14) = -8, left: -8, 4\n(4) - (-8) = 12, left: 12\n(6) + (14) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (6 + (3 + 11)))"}, {"input": "4 3 11 6\n", "output": "(11) / (3) = 11/3, left: 11/3, 4, 6\n(11/3) / (6) = 11/18, left: 11/18, 4\n(4) + (11/3) = 23/3, left: 23/3, 6\n(11/3) / (4) = 11/12, left: 11/12, 6\n(3) * (11) = 33, left: 33, 4, 6\n(33) - (6) = 27, left: 27, 4\n(4) - (33) = -29, left: -29, 6\n(3) + (11) = 14, left: 14, 4, 6\n(4) + (6) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((3 + 11) + (4 + 6))"}, {"input": "4 3 11 6\n", "output": "(6) - (3) = 3, left: 3, 4, 11\n(6) / (3) = 2, left: 2, 4, 11\n(4) + (11) = 15, left: 15, 2\n(3) / (6) = 1/2, left: 1/2, 4, 11\n(11) / (4) = 11/4, left: 11/4, 1/2\n(4) * (11) = 44, left: 44, 1/2\n(1/2) / (4) = 1/8, left: 1/8, 11\n(3) + (6) = 9, left: 9, 4, 11\n(4) + (9) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (4 + (3 + 6)))"}, {"input": "4 3 11 6\n", "output": "(6) / (3) = 2, left: 2, 4, 11\n(4) * (2) = 8, left: 8, 11\n(11) * (8) = 88, left: 88\n(6) - (3) = 3, left: 3, 4, 11\n(3) / (6) = 1/2, left: 1/2, 4, 11\n(3) * (6) = 18, left: 18, 4, 11\n(18) - (11) = 7, left: 7, 4\n(3) + (6) = 9, left: 9, 4, 11\n(4) + (11) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((3 + 6) + (4 + 11))"}, {"input": "4 3 11 6\n", "output": "(11) + (6) = 17, left: 17, 4, 3\n(3) - (4) = -1, left: -1, 17\n(17) * (-1) = -17, left: -17\n(4) - (3) = 1, left: 1, 17\n(17) + (1) = 18, left: 18\n(3) / (4) = 3/4, left: 3/4, 17\n(17) * (3/4) = 51/4, left: 51/4\n(4) / (3) = 4/3, left: 4/3, 17\n(4) + (3) = 7, left: 7, 17\n(17) + (7) = 24, left: 24\nreach 24! expression: ((11 + 6) + (4 + 3))"}, {"input": "11 3 3 3\n", "output": "(11) * (3) = 33, left: 33, 3, 3\n(3) - (33) = -30, left: -30, 3\n(3) * (33) = 99, left: 99, 3\n(33) - (3) = 30, left: 30, 3\n(3) * (3) = 9, left: 9, 33\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "11 3 3 3\n", "output": "(11) + (3) = 14, left: 14, 3, 3\n(3) - (14) = -11, left: -11, 3\n(11) / (3) = 11/3, left: 11/3, 3, 3\n(11/3) - (3) = 2/3, left: 2/3, 3\n(11) - (3) = 8, left: 8, 3, 3\n(3) + (8) = 11, left: 11, 3\n(8) / (3) = 8/3, left: 8/3, 3\n(11) * (3) = 33, left: 33, 3, 3\n(3) * (3) = 9, left: 9, 33\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "11 3 3 3\n", "output": "(3) - (11) = -8, left: -8, 3, 3\n(3) * (3) = 9, left: 9, -8\n(9) - (-8) = 17, left: 17\n(11) + (3) = 14, left: 14, 3, 3\n(11) / (3) = 11/3, left: 11/3, 3, 3\n(11) - (3) = 8, left: 8, 3, 3\n(3) + (3) = 6, left: 6, 8\n(11) * (3) = 33, left: 33, 3, 3\n(3) * (3) = 9, left: 9, 33\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "11 3 3 3\n", "output": "(11) * (3) = 33, left: 33, 3, 3\n(3) * (33) = 99, left: 99, 3\n(3) - (33) = -30, left: -30, 3\n(3) * (33) = 99, left: 99, 3\n(33) - (3) = 30, left: 30, 3\n(3) / (30) = 1/10, left: 1/10\n(3) - (30) = -27, left: -27\n(3) + (33) = 36, left: 36, 3\n(3) * (3) = 9, left: 9, 33\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "11 3 3 3\n", "output": "(3) - (3) = 0, left: 0, 11, 3\n(3) / (3) = 1, left: 1, 11, 3\n(3) + (3) = 6, left: 6, 11, 3\n(11) * (6) = 66, left: 66, 3\n(3) - (6) = -3, left: -3, 11\n(11) - (-3) = 14, left: 14\n(3) * (3) = 9, left: 9, 11, 3\n(9) - (11) = -2, left: -2, 3\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "11 3 3 3\n", "output": "(3) * (3) = 9, left: 9, 11, 3\n(11) + (9) = 20, left: 20, 3\n(11) / (9) = 11/9, left: 11/9, 3\n(11) * (9) = 99, left: 99, 3\n(9) / (11) = 9/11, left: 9/11, 3\n(3) - (9/11) = 24/11, left: 24/11\n(11) - (3) = 8, left: 8, 9\n(11) * (3) = 33, left: 33, 9\n(9) + (33) = 42, left: 42\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "2 12 3 3\n", "output": "(2) / (3) = 2/3, left: 2/3, 12, 3\n(12) + (2/3) = 38/3, left: 38/3, 3\n(38/3) - (3) = 29/3, left: 29/3\n(12) * (2/3) = 8, left: 8, 3\n(8) - (3) = 5, left: 5\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (12 * (2 / 3)))"}, {"input": "2 12 3 3\n", "output": "(3) / (2) = 3/2, left: 3/2, 12, 3\n(3/2) - (3) = -3/2, left: -3/2, 12\n(12) / (-3/2) = -8, left: -8\n(3) / (3/2) = 2, left: 2, 12\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 / (3 / 2)))"}, {"input": "2 12 3 3\n", "output": "(12) + (3) = 15, left: 15, 2, 3\n(15) / (2) = 15/2, left: 15/2, 3\n(2) * (15) = 30, left: 30, 3\n(15) / (3) = 5, left: 5, 2\n(15) - (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((12 + 3) - 3))"}, {"input": "2 12 3 3\n", "output": "(3) / (2) = 3/2, left: 3/2, 12, 3\n(3/2) - (3) = -3/2, left: -3/2, 12\n(12) * (-3/2) = -18, left: -18\n(12) - (-3/2) = 27/2, left: 27/2\n(-3/2) / (12) = -1/8, left: -1/8\n(12) + (-3/2) = 21/2, left: 21/2\n(3) / (3/2) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(12) / (2) = 6, left: 6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 / (3 / 2)))"}, {"input": "2 12 3 3\n", "output": "(2) / (3) = 2/3, left: 2/3, 12, 3\n(12) + (2/3) = 38/3, left: 38/3, 3\n(3) * (38/3) = 38, left: 38\n(3) - (38/3) = -29/3, left: -29/3\n(38/3) - (3) = 29/3, left: 29/3\n(12) * (2/3) = 8, left: 8, 3\n(3) - (8) = -5, left: -5\n(3) / (8) = 3/8, left: 3/8\n(8) - (3) = 5, left: 5\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (12 * (2 / 3)))"}, {"input": "2 12 3 3\n", "output": "(3) - (12) = -9, left: -9, 2, 3\n(-9) / (3) = -3, left: -3, 2\n(2) + (-3) = -1, left: -1\n(-3) / (2) = -3/2, left: -3/2\n(-9) - (3) = -12, left: -12, 2\n(2) / (-12) = -1/6, left: -1/6\n(2) + (-12) = -10, left: -10\n(-12) - (2) = -14, left: -14\n(3) - (-9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 - (3 - 12)))"}, {"input": "2 12 3 3\n", "output": "(3) - (2) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(2) / (12) = 1/6, left: 1/6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (3 - 2)))"}, {"input": "2 12 3 3\n", "output": "(12) + (3) = 15, left: 15, 2, 3\n(2) * (3) = 6, left: 6, 15\n(6) - (15) = -9, left: -9\n(15) / (6) = 5/2, left: 5/2\n(2) + (3) = 5, left: 5, 15\n(15) + (5) = 20, left: 20\n(3) + (15) = 18, left: 18, 2\n(2) * (18) = 36, left: 36\n(15) - (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((12 + 3) - 3))"}, {"input": "2 12 3 3\n", "output": "(3) - (2) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(2) / (12) = 1/6, left: 1/6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (3 - 2)))"}, {"input": "2 12 3 3\n", "output": "(3) - (2) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) + (2) = 14, left: 14\n(12) / (2) = 6, left: 6\n(12) - (2) = 10, left: 10\n(2) / (12) = 1/6, left: 1/6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (3 - 2)))"}, {"input": "12 4 11 7\n", "output": "(12) - (11) = 1, left: 1, 4, 7\n(1) - (7) = -6, left: -6, 4\n(4) + (-6) = -2, left: -2\n(4) - (-6) = 10, left: 10\n(7) * (1) = 7, left: 7, 4\n(4) - (7) = -3, left: -3\n(4) + (7) = 11, left: 11\n(7) - (1) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (12 - 11)))"}, {"input": "12 4 11 7\n", "output": "(4) - (12) = -8, left: -8, 11, 7\n(7) - (4) = 3, left: 3, 12, 11\n(4) + (7) = 11, left: 11, 12, 11\n(4) - (11) = -7, left: -7, 12, 7\n(12) * (7) = 84, left: 84, -7\n(-7) * (84) = -588, left: -588\n(11) + (7) = 18, left: 18, 12, 4\n(18) / (12) = 3/2, left: 3/2, 4\n(18) - (12) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((11 + 7) - 12))"}, {"input": "12 4 11 7\n", "output": "(4) - (7) = -3, left: -3, 12, 11\n(4) + (7) = 11, left: 11, 12, 11\n(4) - (12) = -8, left: -8, 11, 7\n(12) / (4) = 3, left: 3, 11, 7\n(12) * (4) = 48, left: 48, 11, 7\n(48) / (11) = 48/11, left: 48/11, 7\n(7) * (48/11) = 336/11, left: 336/11\n(11) + (7) = 18, left: 18, 12, 4\n(18) - (12) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((11 + 7) - 12))"}, {"input": "12 4 11 7\n", "output": "(12) - (11) = 1, left: 1, 4, 7\n(7) / (1) = 7, left: 7, 4\n(4) + (7) = 11, left: 11\n(4) / (7) = 4/7, left: 4/7\n(7) - (4) = 3, left: 3\n(7) / (4) = 7/4, left: 7/4\n(4) * (7) = 28, left: 28\n(7) - (1) = 6, left: 6, 4\n(4) / (6) = 2/3, left: 2/3\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (12 - 11)))"}, {"input": "12 4 11 7\n", "output": "(7) - (4) = 3, left: 3, 12, 11\n(11) + (3) = 14, left: 14, 12\n(4) + (7) = 11, left: 11, 12, 11\n(12) / (11) = 12/11, left: 12/11, 11\n(7) / (4) = 7/4, left: 7/4, 12, 11\n(4) * (7) = 28, left: 28, 12, 11\n(11) - (12) = -1, left: -1, 28\n(7) - (12) = -5, left: -5, 4, 11\n(11) + (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (7 - 12)))"}, {"input": "12 4 11 7\n", "output": "(12) - (11) = 1, left: 1, 4, 7\n(7) / (1) = 7, left: 7, 4\n(4) + (7) = 11, left: 11\n(4) / (7) = 4/7, left: 4/7\n(7) - (4) = 3, left: 3\n(7) / (4) = 7/4, left: 7/4\n(4) * (7) = 28, left: 28\n(4) - (7) = -3, left: -3\n(7) - (1) = 6, left: 6, 4\n(4) / (6) = 2/3, left: 2/3\n(4) - (6) = -2, left: -2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (12 - 11)))"}, {"input": "12 4 11 7\n", "output": "(12) - (11) = 1, left: 1, 4, 7\n(7) / (1) = 7, left: 7, 4\n(4) + (7) = 11, left: 11\n(4) / (7) = 4/7, left: 4/7\n(7) - (4) = 3, left: 3\n(7) / (4) = 7/4, left: 7/4\n(4) * (7) = 28, left: 28\n(4) - (7) = -3, left: -3\n(7) - (1) = 6, left: 6, 4\n(4) / (6) = 2/3, left: 2/3\n(4) - (6) = -2, left: -2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (12 - 11)))"}, {"input": "1 11 6 6\n", "output": "(1) + (6) = 7, left: 7, 11, 6\n(6) / (11) = 6/11, left: 6/11, 7\n(6/11) / (7) = 6/77, left: 6/77\n(7) + (6/11) = 83/11, left: 83/11\n(11) + (6) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: ((1 + 6) + (11 + 6))"}, {"input": "1 11 6 6\n", "output": "(11) + (6) = 17, left: 17, 1, 6\n(17) - (6) = 11, left: 11, 1\n(17) / (6) = 17/6, left: 17/6, 1\n(6) - (17) = -11, left: -11, 1\n(6) + (17) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (6 + (11 + 6)))"}, {"input": "1 11 6 6\n", "output": "(11) / (1) = 11, left: 11, 6, 6\n(6) * (6) = 36, left: 36, 11\n(1) - (11) = -10, left: -10, 6, 6\n(6) / (-10) = -3/5, left: -3/5, 6\n(1) * (11) = 11, left: 11, 6, 6\n(11) / (6) = 11/6, left: 11/6, 6\n(6) * (11) = 66, left: 66, 6\n(1) + (11) = 12, left: 12, 6, 6\n(6) + (12) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 + (1 + 11)))"}, {"input": "1 11 6 6\n", "output": "(1) + (6) = 7, left: 7, 11, 6\n(6) / (11) = 6/11, left: 6/11, 7\n(11) - (6) = 5, left: 5, 7\n(7) - (5) = 2, left: 2\n(7) / (5) = 7/5, left: 7/5\n(11) / (6) = 11/6, left: 11/6, 7\n(6) - (11) = -5, left: -5, 7\n(11) + (6) = 17, left: 17, 7\n(7) * (17) = 119, left: 119\n(7) + (17) = 24, left: 24\nreach 24! expression: ((1 + 6) + (11 + 6))"}, {"input": "1 11 6 6\n", "output": "(6) - (6) = 0, left: 0, 1, 11\n(0) - (1) = -1, left: -1, 11\n(1) + (11) = 12, left: 12, 0\n(6) / (6) = 1, left: 1, 1, 11\n(1) - (1) = 0, left: 0, 11\n(1) / (1) = 1, left: 1, 11\n(1) + (11) = 12, left: 12, 1\n(6) + (6) = 12, left: 12, 1, 11\n(1) + (11) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((6 + 6) + (1 + 11))"}, {"input": "1 11 6 6\n", "output": "(11) + (6) = 17, left: 17, 1, 6\n(6) * (17) = 102, left: 102, 1\n(102) - (1) = 101, left: 101\n(17) / (6) = 17/6, left: 17/6, 1\n(1) - (17/6) = -11/6, left: -11/6\n(6) - (17) = -11, left: -11, 1\n(-11) - (1) = -12, left: -12\n(6) + (17) = 23, left: 23, 1\n(23) / (1) = 23, left: 23\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (6 + (11 + 6)))"}, {"input": "1 11 6 6\n", "output": "(6) / (1) = 6, left: 6, 11, 6\n(11) * (6) = 66, left: 66, 6\n(1) - (6) = -5, left: -5, 11, 6\n(6) - (-5) = 11, left: 11, 11\n(1) / (6) = 1/6, left: 1/6, 11, 6\n(1) * (6) = 6, left: 6, 11, 6\n(6) / (6) = 1, left: 1, 11\n(1) + (6) = 7, left: 7, 11, 6\n(11) + (6) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: ((1 + 6) + (11 + 6))"}, {"input": "7 6 11 2\n", "output": "(7) * (11) = 77, left: 77, 6, 2\n(2) / (77) = 2/77, left: 2/77, 6\n(6) / (2) = 3, left: 3, 77\n(77) / (6) = 77/6, left: 77/6, 2\n(6) + (77) = 83, left: 83, 2\n(7) + (11) = 18, left: 18, 6, 2\n(2) * (18) = 36, left: 36, 6\n(2) + (18) = 20, left: 20, 6\n(18) - (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((7 + 11) - 6))"}, {"input": "7 6 11 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 7, 11\n(6) + (2) = 8, left: 8, 7, 11\n(11) - (7) = 4, left: 4, 8\n(6) / (2) = 3, left: 3, 7, 11\n(6) * (2) = 12, left: 12, 7, 11\n(6) - (2) = 4, left: 4, 7, 11\n(6) + (11) = 17, left: 17, 7, 2\n(11) - (6) = 5, left: 5, 7, 2\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (11 - 6)))"}, {"input": "7 6 11 2\n", "output": "(6) - (11) = -5, left: -5, 7, 2\n(7) + (-5) = 2, left: 2, 2\n(2) / (2) = 1, left: 1\n(2) + (2) = 4, left: 4\n(2) - (2) = 0, left: 0\n(2) - (2) = 0, left: 0\n(7) - (-5) = 12, left: 12, 2\n(2) + (12) = 14, left: 14\n(12) / (2) = 6, left: 6\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 - (6 - 11)))"}, {"input": "7 6 11 2\n", "output": "(6) * (2) = 12, left: 12, 7, 11\n(11) + (12) = 23, left: 23, 7\n(6) + (2) = 8, left: 8, 7, 11\n(6) / (2) = 3, left: 3, 7, 11\n(3) - (11) = -8, left: -8, 7\n(2) / (6) = 1/3, left: 1/3, 7, 11\n(7) * (1/3) = 7/3, left: 7/3, 11\n(7) - (6) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (7 - 6)))"}, {"input": "7 6 11 2\n", "output": "(11) - (6) = 5, left: 5, 7, 2\n(7) - (2) = 5, left: 5, 5\n(5) - (5) = 0, left: 0\n(2) / (7) = 2/7, left: 2/7, 5\n(5) + (2/7) = 37/7, left: 37/7\n(7) / (5) = 7/5, left: 7/5, 2\n(7/5) / (2) = 7/10, left: 7/10\n(2) + (7/5) = 17/5, left: 17/5\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (11 - 6)))"}, {"input": "5 9 3 4\n", "output": "(3) / (9) = 1/3, left: 1/3, 5, 4\n(9) * (3) = 27, left: 27, 5, 4\n(4) / (27) = 4/27, left: 4/27, 5\n(5) * (9) = 45, left: 45, 3, 4\n(5) / (9) = 5/9, left: 5/9, 3, 4\n(4) / (5/9) = 36/5, left: 36/5, 3\n(9) - (5) = 4, left: 4, 3, 4\n(4) - (4) = 0, left: 0, 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (9 - 5)))"}, {"input": "5 9 3 4\n", "output": "(9) + (3) = 12, left: 12, 5, 4\n(4) - (12) = -8, left: -8, 5\n(3) / (9) = 1/3, left: 1/3, 5, 4\n(1/3) - (5) = -14/3, left: -14/3, 4\n(4) / (3) = 4/3, left: 4/3, 5, 9\n(3) - (4) = -1, left: -1, 5, 9\n(5) / (-1) = -5, left: -5, 9\n(5) * (3) = 15, left: 15, 9, 4\n(15) - (9) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((5 * 3) - 9))"}, {"input": "5 9 3 4\n", "output": "(9) / (5) = 9/5, left: 9/5, 3, 4\n(9/5) - (3) = -6/5, left: -6/5, 4\n(3) / (4) = 3/4, left: 3/4, 9/5\n(4) / (9/5) = 20/9, left: 20/9, 3\n(9/5) / (4) = 9/20, left: 9/20, 3\n(5) - (9) = -4, left: -4, 3, 4\n(4) * (-4) = -16, left: -16, 3\n(3) - (-16) = 19, left: 19\n(4) - (-4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 - (5 - 9)))"}, {"input": "5 9 3 4\n", "output": "(9) / (4) = 9/4, left: 9/4, 5, 3\n(4) - (9) = -5, left: -5, 5, 3\n(4) / (9) = 4/9, left: 4/9, 5, 3\n(5) * (4/9) = 20/9, left: 20/9, 3\n(5) + (3) = 8, left: 8, 4/9\n(4/9) / (3) = 4/27, left: 4/27, 5\n(9) + (4) = 13, left: 13, 5, 3\n(3) * (13) = 39, left: 39, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((9 + 4) - 5))"}, {"input": "5 9 3 4\n", "output": "(9) / (4) = 9/4, left: 9/4, 5, 3\n(3) - (9/4) = 3/4, left: 3/4, 5\n(9) - (4) = 5, left: 5, 5, 3\n(3) * (5) = 15, left: 15, 5\n(3) / (5) = 3/5, left: 3/5, 5\n(3) / (5) = 3/5, left: 3/5, 5\n(5) + (5) = 10, left: 10, 3\n(9) + (4) = 13, left: 13, 5, 3\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((9 + 4) - 5))"}, {"input": "5 9 3 4\n", "output": "(9) / (5) = 9/5, left: 9/5, 3, 4\n(3) * (9/5) = 27/5, left: 27/5, 4\n(3) / (9/5) = 5/3, left: 5/3, 4\n(9/5) / (4) = 9/20, left: 9/20, 3\n(5) - (9) = -4, left: -4, 3, 4\n(4) * (-4) = -16, left: -16, 3\n(4) / (-4) = -1, left: -1, 3\n(3) * (-1) = -3, left: -3\n(3) - (-1) = 4, left: 4\n(-4) / (4) = -1, left: -1, 3\n(3) + (-1) = 2, left: 2\n(4) - (-4) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 - (5 - 9)))"}, {"input": "5 9 3 4\n", "output": "(9) + (3) = 12, left: 12, 5, 4\n(9) / (3) = 3, left: 3, 5, 4\n(3) - (9) = -6, left: -6, 5, 4\n(5) + (-6) = -1, left: -1, 4\n(4) + (-1) = 3, left: 3\n(5) * (4) = 20, left: 20, -6\n(5) / (9) = 5/9, left: 5/9, 3, 4\n(4) / (5/9) = 36/5, left: 36/5, 3\n(5/9) - (3) = -22/9, left: -22/9, 4\n(4) - (3) = 1, left: 1, 5/9\n(5/9) / (1) = 5/9, left: 5/9\n(9) - (5) = 4, left: 4, 3, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (9 - 5)))"}, {"input": "5 9 3 4\n", "output": "(3) / (9) = 1/3, left: 1/3, 5, 4\n(5) - (4) = 1, left: 1, 1/3\n(3) / (5) = 3/5, left: 3/5, 9, 4\n(9) * (3/5) = 27/5, left: 27/5, 4\n(5) - (3) = 2, left: 2, 9, 4\n(9) / (2) = 9/2, left: 9/2, 4\n(9/2) / (4) = 9/8, left: 9/8\n(9) - (4) = 5, left: 5, 2\n(3) - (5) = -2, left: -2, 9, 4\n(-2) - (9) = -11, left: -11, 4\n(5) / (3) = 5/3, left: 5/3, 9, 4\n(5) * (3) = 15, left: 15, 9, 4\n(15) - (9) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((5 * 3) - 9))"}, {"input": "5 9 3 4\n", "output": "(9) / (4) = 9/4, left: 9/4, 5, 3\n(5) - (9/4) = 11/4, left: 11/4, 3\n(5) * (9/4) = 45/4, left: 45/4, 3\n(9) - (4) = 5, left: 5, 5, 3\n(3) - (5) = -2, left: -2, 5\n(3) / (5) = 3/5, left: 3/5, 5\n(5) / (5) = 1, left: 1, 3\n(5) - (5) = 0, left: 0, 3\n(3) + (0) = 3, left: 3\n(5) * (5) = 25, left: 25, 3\n(5) + (5) = 10, left: 10, 3\n(9) + (4) = 13, left: 13, 5, 3\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((9 + 4) - 5))"}, {"input": "7 7 3 10\n", "output": "(10) - (7) = 3, left: 3, 7, 3\n(7) / (3) = 7/3, left: 7/3, 3\n(7) + (3) = 10, left: 10, 3\n(3) - (7) = -4, left: -4, 3\n(7) * (3) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((10 - 7) + (7 * 3))"}, {"input": "7 7 3 10\n", "output": "(3) / (7) = 3/7, left: 3/7, 7, 10\n(3/7) - (10) = -67/7, left: -67/7, 7\n(3/7) / (10) = 3/70, left: 3/70, 7\n(3) - (7) = -4, left: -4, 7, 10\n(-4) / (7) = -4/7, left: -4/7, 10\n(7) / (3) = 7/3, left: 7/3, 7, 10\n(10) / (7/3) = 30/7, left: 30/7, 7\n(7) * (3) = 21, left: 21, 7, 10\n(10) - (7) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((7 * 3) + (10 - 7))"}, {"input": "7 7 3 10\n", "output": "(3) / (7) = 3/7, left: 3/7, 7, 10\n(7) / (10) = 7/10, left: 7/10, 3/7\n(3/7) + (7/10) = 79/70, left: 79/70\n(3) - (7) = -4, left: -4, 7, 10\n(7) / (3) = 7/3, left: 7/3, 7, 10\n(7) - (10) = -3, left: -3, 7/3\n(7) * (3) = 21, left: 21, 7, 10\n(21) - (10) = 11, left: 11, 7\n(10) + (21) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((10 + (7 * 3)) - 7)"}, {"input": "7 7 3 10\n", "output": "(7) / (7) = 1, left: 1, 3, 10\n(7) - (7) = 0, left: 0, 3, 10\n(3) + (10) = 13, left: 13, 0\n(3) - (10) = -7, left: -7, 7, 7\n(3) / (10) = 3/10, left: 3/10, 7, 7\n(3) / (7) = 3/7, left: 3/7, 7, 10\n(7) + (3/7) = 52/7, left: 52/7, 10\n(7) * (3) = 21, left: 21, 7, 10\n(7) - (21) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 - (7 * 3)))"}, {"input": "7 7 3 10\n", "output": "(10) - (7) = 3, left: 3, 7, 3\n(7) - (3) = 4, left: 4, 3\n(3) / (4) = 3/4, left: 3/4\n(3) + (4) = 7, left: 7\n(3) / (7) = 3/7, left: 3/7, 3\n(3) / (3/7) = 7, left: 7\n(3) - (7) = -4, left: -4, 3\n(3) / (-4) = -3/4, left: -3/4\n(7) * (3) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((10 - 7) + (7 * 3))"}, {"input": "7 7 3 10\n", "output": "(7) / (7) = 1, left: 1, 3, 10\n(3) + (1) = 4, left: 4, 10\n(7) * (7) = 49, left: 49, 3, 10\n(7) + (7) = 14, left: 14, 3, 10\n(10) - (3) = 7, left: 7, 14\n(10) / (3) = 10/3, left: 10/3, 7, 7\n(10) - (3) = 7, left: 7, 7, 7\n(7) * (3) = 21, left: 21, 7, 10\n(7) - (10) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((7 * 3) - (7 - 10))"}, {"input": "7 7 3 10\n", "output": "(7) + (7) = 14, left: 14, 3, 10\n(7) / (7) = 1, left: 1, 3, 10\n(7) * (7) = 49, left: 49, 3, 10\n(3) + (10) = 13, left: 13, 7, 7\n(7) * (7) = 49, left: 49, 13\n(10) / (3) = 10/3, left: 10/3, 7, 7\n(3) - (10) = -7, left: -7, 7, 7\n(10) - (3) = 7, left: 7, 7, 7\n(7) * (7) = 49, left: 49, 7\n(3) / (10) = 3/10, left: 3/10, 7, 7\n(7) - (7) = 0, left: 0, 3/10\n(7) * (3) = 21, left: 21, 7, 10\n(7) - (21) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 - (7 * 3)))"}, {"input": "12 9 12 12\n", "output": "(9) / (12) = 3/4, left: 3/4, 12, 12\n(9) - (12) = -3, left: -3, 12, 12\n(12) + (12) = 24, left: 24, -3\n(12) - (9) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 9 12 12\n", "output": "(12) / (12) = 1, left: 1, 9, 12\n(12) - (9) = 3, left: 3, 1\n(12) - (12) = 0, left: 0, 9, 12\n(12) - (9) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 9 12 12\n", "output": "(12) / (12) = 1, left: 1, 9, 12\n(9) - (1) = 8, left: 8, 12\n(8) - (12) = -4, left: -4\n(12) / (12) = 1, left: 1, 9, 12\n(1) - (9) = -8, left: -8, 12\n(12) / (9) = 4/3, left: 4/3, 1\n(1) * (4/3) = 4/3, left: 4/3\n(12) - (9) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 9 12 12\n", "output": "(12) / (12) = 1, left: 1, 12, 9\n(12) - (12) = 0, left: 0, 12, 9\n(0) / (9) = 0, left: 0, 12\n(12) * (12) = 144, left: 144, 12, 9\n(12) + (12) = 24, left: 24, 12, 9\n(9) + (12) = 21, left: 21, 12, 12\n(12) + (12) = 24, left: 24, 21\n(12) - (9) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 9 12 12\n", "output": "(12) / (12) = 1, left: 1, 9, 12\n(12) - (1) = 11, left: 11, 9\n(12) - (12) = 0, left: 0, 9, 12\n(9) / (12) = 3/4, left: 3/4, 0\n(9) / (12) = 3/4, left: 3/4, 12, 12\n(3/4) / (12) = 1/16, left: 1/16, 12\n(9) - (12) = -3, left: -3, 12, 12\n(12) - (9) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 9 12 12\n", "output": "(12) / (12) = 1, left: 1, 9, 12\n(12) / (12) = 1, left: 1, 9, 12\n(9) + (1) = 10, left: 10, 12\n(12) + (12) = 24, left: 24, 9, 12\n(12) - (12) = 0, left: 0, 9, 12\n(12) + (12) = 24, left: 24, 9, 12\n(12) / (24) = 1/2, left: 1/2, 9\n(12) - (9) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 9 12 12\n", "output": "(9) / (12) = 3/4, left: 3/4, 12, 12\n(12) - (12) = 0, left: 0, 3/4\n(9) - (12) = -3, left: -3, 12, 12\n(-3) - (12) = -15, left: -15, 12\n(12) / (9) = 4/3, left: 4/3, 12, 12\n(12) * (12) = 144, left: 144, 4/3\n(12) - (9) = 3, left: 3, 12, 12\n(12) * (12) = 144, left: 144, 3\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 8 8 3\n", "output": "(3) / (12) = 1/4, left: 1/4, 8, 8\n(8) - (8) = 0, left: 0, 1/4\n(1/4) - (0) = 1/4, left: 1/4\n(8) + (8) = 16, left: 16, 1/4\n(8) / (1/4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 / (3 / 12)) - 8)"}, {"input": "12 8 8 3\n", "output": "(3) / (12) = 1/4, left: 1/4, 8, 8\n(8) - (8) = 0, left: 0, 1/4\n(1/4) - (8) = -31/4, left: -31/4, 8\n(8) * (-31/4) = -62, left: -62\n(8) - (1/4) = 31/4, left: 31/4, 8\n(8) + (1/4) = 33/4, left: 33/4, 8\n(8) - (33/4) = -1/4, left: -1/4\n(8) * (1/4) = 2, left: 2, 8\n(8) / (1/4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 / (3 / 12)) - 8)"}, {"input": "12 8 8 3\n", "output": "(12) + (3) = 15, left: 15, 8, 8\n(3) - (12) = -9, left: -9, 8, 8\n(8) / (-9) = -8/9, left: -8/9, 8\n(8) + (8) = 16, left: 16, -9\n(3) / (12) = 1/4, left: 1/4, 8, 8\n(8) / (8) = 1, left: 1, 1/4\n(8) + (8) = 16, left: 16, 1/4\n(1/4) - (16) = -63/4, left: -63/4\n(8) / (1/4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 / (3 / 12)) - 8)"}, {"input": "12 8 8 3\n", "output": "(8) * (8) = 64, left: 64, 12, 3\n(64) / (3) = 64/3, left: 64/3, 12\n(3) + (64) = 67, left: 67, 12\n(8) + (8) = 16, left: 16, 12, 3\n(16) - (3) = 13, left: 13, 12\n(8) - (8) = 0, left: 0, 12, 3\n(12) + (3) = 15, left: 15, 0\n(8) / (8) = 1, left: 1, 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (8 / 8)))"}, {"input": "12 8 8 3\n", "output": "(8) / (12) = 2/3, left: 2/3, 8, 3\n(3) * (2/3) = 2, left: 2, 8\n(8) + (3) = 11, left: 11, 2/3\n(12) + (8) = 20, left: 20, 8, 3\n(20) - (8) = 12, left: 12, 3\n(8) * (3) = 24, left: 24, 20\n(12) - (8) = 4, left: 4, 8, 3\n(12) * (8) = 96, left: 96, 8, 3\n(96) / (3) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: (((12 * 8) / 3) - 8)"}, {"input": "12 8 8 3\n", "output": "(8) / (12) = 2/3, left: 2/3, 8, 3\n(3) - (2/3) = 7/3, left: 7/3, 8\n(12) - (8) = 4, left: 4, 8, 3\n(8) - (12) = -4, left: -4, 8, 3\n(-4) - (3) = -7, left: -7, 8\n(3) + (-4) = -1, left: -1, 8\n(8) + (3) = 11, left: 11, -4\n(12) * (8) = 96, left: 96, 8, 3\n(96) / (3) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: (((12 * 8) / 3) - 8)"}, {"input": "2 5 13 10\n", "output": "(5) / (10) = 1/2, left: 1/2, 2, 13\n(2) * (1/2) = 1, left: 1, 13\n(2) / (1/2) = 4, left: 4, 13\n(1/2) / (13) = 1/26, left: 1/26, 2\n(13) / (1/2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 / (5 / 10)) - 2)"}, {"input": "2 5 13 10\n", "output": "(10) - (2) = 8, left: 8, 5, 13\n(8) / (13) = 8/13, left: 8/13, 5\n(8/13) - (5) = -57/13, left: -57/13\n(13) * (10) = 130, left: 130, 2, 5\n(130) / (5) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 10) / 5) - 2)"}, {"input": "2 5 13 10\n", "output": "(2) + (5) = 7, left: 7, 13, 10\n(2) / (5) = 2/5, left: 2/5, 13, 10\n(13) + (2/5) = 67/5, left: 67/5, 10\n(13) * (10) = 130, left: 130, 2, 5\n(130) / (5) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 10) / 5) - 2)"}, {"input": "2 5 13 10\n", "output": "(2) - (10) = -8, left: -8, 5, 13\n(10) / (2) = 5, left: 5, 5, 13\n(5) / (13) = 5/13, left: 5/13, 5\n(2) / (10) = 1/5, left: 1/5, 5, 13\n(10) - (2) = 8, left: 8, 5, 13\n(10) - (13) = -3, left: -3, 2, 5\n(13) / (10) = 13/10, left: 13/10, 2, 5\n(13) * (10) = 130, left: 130, 2, 5\n(130) / (5) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 10) / 5) - 2)"}, {"input": "2 5 13 10\n", "output": "(5) / (10) = 1/2, left: 1/2, 2, 13\n(1/2) - (2) = -3/2, left: -3/2, 13\n(1/2) / (2) = 1/4, left: 1/4, 13\n(13) / (2) = 13/2, left: 13/2, 1/2\n(1/2) - (13/2) = -6, left: -6\n(13) - (2) = 11, left: 11, 1/2\n(1/2) + (11) = 23/2, left: 23/2\n(1/2) / (13) = 1/26, left: 1/26, 2\n(13) / (1/2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 / (5 / 10)) - 2)"}, {"input": "2 5 13 10\n", "output": "(5) - (2) = 3, left: 3, 13, 10\n(3) / (10) = 3/10, left: 3/10, 13\n(13) - (3/10) = 127/10, left: 127/10\n(2) - (5) = -3, left: -3, 13, 10\n(5) / (2) = 5/2, left: 5/2, 13, 10\n(5/2) - (13) = -21/2, left: -21/2, 10\n(13) / (10) = 13/10, left: 13/10, 5/2\n(5) * (10) = 50, left: 50, 2, 13\n(2) * (13) = 26, left: 26, 50\n(50) - (26) = 24, left: 24\nreach 24! expression: ((5 * 10) - (2 * 13))"}, {"input": "2 5 13 10\n", "output": "(5) - (2) = 3, left: 3, 13, 10\n(2) - (5) = -3, left: -3, 13, 10\n(5) / (2) = 5/2, left: 5/2, 13, 10\n(2) * (5) = 10, left: 10, 13, 10\n(2) + (10) = 12, left: 12, 5, 13\n(10) - (2) = 8, left: 8, 5, 13\n(5) / (13) = 5/13, left: 5/13, 2, 10\n(10) + (5/13) = 135/13, left: 135/13, 2\n(10) / (5/13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((10 / (5 / 13)) - 2)"}, {"input": "2 5 13 10\n", "output": "(5) / (2) = 5/2, left: 5/2, 13, 10\n(10) + (5/2) = 25/2, left: 25/2, 13\n(2) + (5) = 7, left: 7, 13, 10\n(10) - (7) = 3, left: 3, 13\n(2) / (5) = 2/5, left: 2/5, 13, 10\n(2) - (5) = -3, left: -3, 13, 10\n(13) - (-3) = 16, left: 16, 10\n(13) * (10) = 130, left: 130, 2, 5\n(130) / (5) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((13 * 10) / 5) - 2)"}, {"input": "5 3 1 3\n", "output": "(5) - (1) = 4, left: 4, 3, 3\n(3) - (3) = 0, left: 0, 4\n(4) - (0) = 4, left: 4\n(0) / (4) = 0, left: 0\n(4) * (0) = 0, left: 0\n(3) - (3) = 0, left: 0, 4\n(0) - (4) = -4, left: -4\n(3) + (3) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(4) * (6) = 24, left: 24\nreach 24! expression: ((5 - 1) * (3 + 3))"}, {"input": "5 3 1 3\n", "output": "(1) * (3) = 3, left: 3, 5, 3\n(3) / (3) = 1, left: 1, 5\n(3) * (3) = 9, left: 9, 5\n(3) - (3) = 0, left: 0, 5\n(5) - (0) = 5, left: 5\n(5) / (3) = 5/3, left: 5/3, 3\n(5/3) / (3) = 5/9, left: 5/9\n(5) + (3) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 + (1 * 3)))"}, {"input": "5 3 1 3\n", "output": "(3) / (3) = 1, left: 1, 5, 1\n(5) * (1) = 5, left: 5, 1\n(3) - (3) = 0, left: 0, 5, 1\n(5) / (1) = 5, left: 5, 0\n(3) - (3) = 0, left: 0, 5, 1\n(3) * (3) = 9, left: 9, 5, 1\n(3) + (3) = 6, left: 6, 5, 1\n(5) + (1) = 6, left: 6, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (5 - 1))"}, {"input": "5 3 1 3\n", "output": "(5) * (1) = 5, left: 5, 3, 3\n(3) * (3) = 9, left: 9, 5\n(9) - (5) = 4, left: 4\n(3) - (3) = 0, left: 0, 5\n(3) + (3) = 6, left: 6, 5\n(3) / (3) = 1, left: 1, 5\n(5) / (1) = 5, left: 5\n(3) - (3) = 0, left: 0, 5\n(3) + (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (3 + (5 * 1)))"}, {"input": "5 3 1 3\n", "output": "(5) * (1) = 5, left: 5, 3, 3\n(3) / (5) = 3/5, left: 3/5, 3\n(3/5) - (3) = -12/5, left: -12/5\n(5) - (3) = 2, left: 2, 3\n(3) * (5) = 15, left: 15, 3\n(5) / (3) = 5/3, left: 5/3, 3\n(5/3) - (3) = -4/3, left: -4/3\n(3) - (5/3) = 4/3, left: 4/3\n(3) + (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (3 + (5 * 1)))"}, {"input": "5 3 1 3\n", "output": "(3) / (3) = 1, left: 1, 5, 1\n(3) - (3) = 0, left: 0, 5, 1\n(5) - (1) = 4, left: 4, 0\n(3) - (3) = 0, left: 0, 5, 1\n(3) * (3) = 9, left: 9, 5, 1\n(1) / (5) = 1/5, left: 1/5, 9\n(9) - (1/5) = 44/5, left: 44/5\n(5) / (1) = 5, left: 5, 9\n(9) - (5) = 4, left: 4, 1\n(3) + (3) = 6, left: 6, 5, 1\n(1) / (5) = 1/5, left: 1/5, 6\n(5) + (1) = 6, left: 6, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (5 - 1))"}, {"input": "4 4 12 9\n", "output": "(4) - (9) = -5, left: -5, 4, 12\n(4) * (4) = 16, left: 16, 12, 9\n(4) - (4) = 0, left: 0, 12, 9\n(9) * (0) = 0, left: 0, 12\n(4) - (4) = 0, left: 0, 12, 9\n(12) * (9) = 108, left: 108, 0\n(0) / (108) = 0, left: 0\n(4) + (4) = 8, left: 8, 12, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (12 - 9))"}, {"input": "4 4 12 9\n", "output": "(12) / (9) = 4/3, left: 4/3, 4, 4\n(4) + (4) = 8, left: 8, 4/3\n(4) / (4) = 1, left: 1, 4/3\n(12) + (9) = 21, left: 21, 4, 4\n(9) / (12) = 3/4, left: 3/4, 4, 4\n(3/4) / (4) = 3/16, left: 3/16, 4\n(4) - (4) = 0, left: 0, 3/4\n(12) - (9) = 3, left: 3, 4, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((12 - 9) * (4 + 4))"}, {"input": "4 4 12 9\n", "output": "(4) * (12) = 48, left: 48, 4, 9\n(4) - (9) = -5, left: -5, 48\n(4) + (12) = 16, left: 16, 4, 9\n(9) + (16) = 25, left: 25, 4\n(4) * (9) = 36, left: 36, 16\n(12) / (4) = 3, left: 3, 4, 9\n(4) / (3) = 4/3, left: 4/3, 9\n(9) - (4/3) = 23/3, left: 23/3\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (12 / 4)))"}, {"input": "4 4 12 9\n", "output": "(4) + (9) = 13, left: 13, 4, 12\n(9) / (4) = 9/4, left: 9/4, 4, 12\n(4) + (12) = 16, left: 16, 9/4\n(4) - (9) = -5, left: -5, 4, 12\n(4) * (12) = 48, left: 48, 4, 9\n(4) / (12) = 1/3, left: 1/3, 4, 9\n(4) + (1/3) = 13/3, left: 13/3, 9\n(12) / (4) = 3, left: 3, 4, 9\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (12 / 4)))"}, {"input": "4 4 12 9\n", "output": "(4) - (4) = 0, left: 0, 12, 9\n(12) - (0) = 12, left: 12, 9\n(9) - (12) = -3, left: -3\n(4) * (4) = 16, left: 16, 12, 9\n(9) / (16) = 9/16, left: 9/16, 12\n(16) - (12) = 4, left: 4, 9\n(4) / (4) = 1, left: 1, 12, 9\n(4) + (4) = 8, left: 8, 12, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (12 - 9))"}, {"input": "4 4 12 9\n", "output": "(4) / (9) = 4/9, left: 4/9, 4, 12\n(9) - (4) = 5, left: 5, 4, 12\n(4) / (12) = 1/3, left: 1/3, 5\n(4) + (12) = 16, left: 16, 5\n(4) - (9) = -5, left: -5, 4, 12\n(4) * (4) = 16, left: 16, 12, 9\n(9) / (16) = 9/16, left: 9/16, 12\n(16) - (9) = 7, left: 7, 12\n(4) / (4) = 1, left: 1, 12, 9\n(9) / (1) = 9, left: 9, 12\n(4) - (4) = 0, left: 0, 12, 9\n(4) + (4) = 8, left: 8, 12, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (12 - 9))"}, {"input": "4 4 12 9\n", "output": "(4) + (9) = 13, left: 13, 4, 12\n(4) - (9) = -5, left: -5, 4, 12\n(9) - (4) = 5, left: 5, 4, 12\n(4) - (12) = -8, left: -8, 5\n(4) * (12) = 48, left: 48, 4, 9\n(4) - (12) = -8, left: -8, 4, 9\n(4) / (12) = 1/3, left: 1/3, 4, 9\n(9) + (1/3) = 28/3, left: 28/3, 4\n(12) - (4) = 8, left: 8, 4, 9\n(8) - (9) = -1, left: -1, 4\n(8) / (9) = 8/9, left: 8/9, 4\n(12) / (4) = 3, left: 3, 4, 9\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (12 / 4)))"}, {"input": "4 4 12 9\n", "output": "(4) - (4) = 0, left: 0, 12, 9\n(0) - (12) = -12, left: -12, 9\n(4) - (4) = 0, left: 0, 12, 9\n(0) - (12) = -12, left: -12, 9\n(0) / (12) = 0, left: 0, 9\n(4) * (4) = 16, left: 16, 12, 9\n(16) - (9) = 7, left: 7, 12\n(12) / (16) = 3/4, left: 3/4, 9\n(4) / (4) = 1, left: 1, 12, 9\n(12) - (1) = 11, left: 11, 9\n(9) / (1) = 9, left: 9, 12\n(4) + (4) = 8, left: 8, 12, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (12 - 9))"}, {"input": "9 6 4 4\n", "output": "(4) + (4) = 8, left: 8, 9, 6\n(6) / (9) = 2/3, left: 2/3, 8\n(8) - (2/3) = 22/3, left: 22/3\n(8) * (2/3) = 16/3, left: 16/3\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (9 - 6))"}, {"input": "9 6 4 4\n", "output": "(4) / (6) = 2/3, left: 2/3, 9, 4\n(9) + (4) = 13, left: 13, 2/3\n(13) - (2/3) = 37/3, left: 37/3\n(9) / (4) = 9/4, left: 9/4, 2/3\n(9) * (4) = 36, left: 36, 2/3\n(2/3) * (36) = 24, left: 24\nreach 24! expression: ((4 / 6) * (9 * 4))"}, {"input": "9 6 4 4\n", "output": "(6) - (4) = 2, left: 2, 9, 4\n(4) + (2) = 6, left: 6, 9\n(9) - (6) = 3, left: 3\n(2) / (9) = 2/9, left: 2/9, 4\n(6) * (4) = 24, left: 24, 9, 4\n(4) / (24) = 1/6, left: 1/6, 9\n(4) + (24) = 28, left: 28, 9\n(4) / (6) = 2/3, left: 2/3, 9, 4\n(4) * (2/3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (4 * (4 / 6)))"}, {"input": "9 6 4 4\n", "output": "(9) - (4) = 5, left: 5, 6, 4\n(4) / (9) = 4/9, left: 4/9, 6, 4\n(6) / (4) = 3/2, left: 3/2, 4/9\n(3/2) - (4/9) = 19/18, left: 19/18\n(4) - (9) = -5, left: -5, 6, 4\n(6) + (4) = 10, left: 10, -5\n(-5) - (10) = -15, left: -15\n(9) * (4) = 36, left: 36, 6, 4\n(36) / (6) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((9 * 4) / 6))"}, {"input": "9 6 4 4\n", "output": "(4) - (9) = -5, left: -5, 6, 4\n(6) * (-5) = -30, left: -30, 4\n(-5) / (6) = -5/6, left: -5/6, 4\n(4) - (-5) = 9, left: 9, 6\n(4) * (-5) = -20, left: -20, 6\n(-5) / (4) = -5/4, left: -5/4, 6\n(6) + (-5/4) = 19/4, left: 19/4\n(9) * (4) = 36, left: 36, 6, 4\n(6) / (4) = 3/2, left: 3/2, 36\n(36) / (3/2) = 24, left: 24\nreach 24! expression: ((9 * 4) / (6 / 4))"}, {"input": "9 6 4 4\n", "output": "(4) + (4) = 8, left: 8, 9, 6\n(6) / (9) = 2/3, left: 2/3, 8\n(8) + (2/3) = 26/3, left: 26/3\n(8) / (2/3) = 12, left: 12\n(8) * (2/3) = 16/3, left: 16/3\n(2/3) / (8) = 1/12, left: 1/12\n(9) - (6) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(8) - (3) = 5, left: 5\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (9 - 6))"}, {"input": "9 6 4 4\n", "output": "(4) / (6) = 2/3, left: 2/3, 9, 4\n(9) + (4) = 13, left: 13, 2/3\n(9) / (4) = 9/4, left: 9/4, 2/3\n(4) - (9) = -5, left: -5, 2/3\n(2/3) - (-5) = 17/3, left: 17/3\n(9) - (4) = 5, left: 5, 2/3\n(5) / (2/3) = 15/2, left: 15/2\n(9) * (4) = 36, left: 36, 2/3\n(36) / (2/3) = 54, left: 54\n(2/3) * (36) = 24, left: 24\nreach 24! expression: ((4 / 6) * (9 * 4))"}, {"input": "9 6 4 4\n", "output": "(4) + (4) = 8, left: 8, 9, 6\n(6) / (9) = 2/3, left: 2/3, 8\n(2/3) - (8) = -22/3, left: -22/3\n(8) - (2/3) = 22/3, left: 22/3\n(8) + (2/3) = 26/3, left: 26/3\n(8) / (2/3) = 12, left: 12\n(8) * (2/3) = 16/3, left: 16/3\n(2/3) / (8) = 1/12, left: 1/12\n(9) - (6) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(8) - (3) = 5, left: 5\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (9 - 6))"}, {"input": "9 6 4 4\n", "output": "(4) + (4) = 8, left: 8, 9, 6\n(6) / (9) = 2/3, left: 2/3, 8\n(2/3) - (8) = -22/3, left: -22/3\n(8) - (2/3) = 22/3, left: 22/3\n(8) + (2/3) = 26/3, left: 26/3\n(8) / (2/3) = 12, left: 12\n(8) * (2/3) = 16/3, left: 16/3\n(2/3) / (8) = 1/12, left: 1/12\n(9) - (6) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(8) - (3) = 5, left: 5\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (9 - 6))"}, {"input": "4 8 4 11\n", "output": "(4) * (4) = 16, left: 16, 8, 11\n(8) - (16) = -8, left: -8, 11\n(11) - (16) = -5, left: -5, 8\n(4) - (4) = 0, left: 0, 8, 11\n(8) * (0) = 0, left: 0, 11\n(8) + (11) = 19, left: 19, 0\n(0) * (19) = 0, left: 0\n(4) + (4) = 8, left: 8, 8, 11\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (11 - (4 + 4)))"}, {"input": "4 8 4 11\n", "output": "(8) / (4) = 2, left: 2, 4, 11\n(11) - (4) = 7, left: 7, 2\n(2) - (7) = -5, left: -5\n(4) - (4) = 0, left: 0, 8, 11\n(4) / (4) = 1, left: 1, 8, 11\n(11) / (8) = 11/8, left: 11/8, 1\n(1) - (11/8) = -3/8, left: -3/8\n(4) + (4) = 8, left: 8, 8, 11\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (11 - 8))"}, {"input": "4 8 4 11\n", "output": "(8) - (4) = 4, left: 4, 4, 11\n(11) - (4) = 7, left: 7, 4\n(8) + (4) = 12, left: 12, 4, 11\n(8) - (4) = 4, left: 4, 4, 11\n(4) / (8) = 1/2, left: 1/2, 4, 11\n(4) * (8) = 32, left: 32, 4, 11\n(8) * (11) = 88, left: 88, 4, 4\n(11) - (8) = 3, left: 3, 4, 4\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((11 - 8) * (4 + 4))"}, {"input": "4 8 4 11\n", "output": "(4) * (11) = 44, left: 44, 8, 4\n(4) - (11) = -7, left: -7, 8, 4\n(4) + (-7) = -3, left: -3, 8\n(8) / (4) = 2, left: 2, -7\n(8) + (-7) = 1, left: 1, 4\n(4) * (1) = 4, left: 4\n(11) - (4) = 7, left: 7, 8, 4\n(7) - (8) = -1, left: -1, 4\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 - 4) - 4))"}, {"input": "4 8 4 11\n", "output": "(11) / (4) = 11/4, left: 11/4, 4, 8\n(4) / (11) = 4/11, left: 4/11, 4, 8\n(8) + (4/11) = 92/11, left: 92/11, 4\n(4) - (11) = -7, left: -7, 4, 8\n(4) + (-7) = -3, left: -3, 8\n(8) / (4) = 2, left: 2, -7\n(4) + (11) = 15, left: 15, 4, 8\n(11) - (4) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 - 4) - 4))"}, {"input": "4 8 4 11\n", "output": "(4) - (8) = -4, left: -4, 4, 11\n(4) + (-4) = 0, left: 0, 11\n(4) * (8) = 32, left: 32, 4, 11\n(4) + (8) = 12, left: 12, 4, 11\n(4) / (8) = 1/2, left: 1/2, 4, 11\n(1/2) / (11) = 1/22, left: 1/22, 4\n(4) - (1/22) = 87/22, left: 87/22\n(8) / (4) = 2, left: 2, 4, 11\n(4) / (4) = 1, left: 1, 8, 11\n(8) + (1) = 9, left: 9, 11\n(4) / (4) = 1, left: 1, 8, 11\n(4) + (4) = 8, left: 8, 8, 11\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (11 - 8))"}, {"input": "6 6 2 5\n", "output": "(6) - (5) = 1, left: 1, 6, 2\n(6) * (5) = 30, left: 30, 6, 2\n(2) / (30) = 1/15, left: 1/15, 6\n(6) / (1/15) = 90, left: 90\n(6) / (5) = 6/5, left: 6/5, 6, 2\n(5) - (6) = -1, left: -1, 6, 2\n(6) * (5) = 30, left: 30, 6, 2\n(2) - (5) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(6) + (2) = 8, left: 8, 6, 5\n(6) * (8) = 48, left: 48, 5\n(6) / (5) = 6/5, left: 6/5, 6, 2\n(6) * (6/5) = 36/5, left: 36/5, 2\n(6) - (5) = 1, left: 1, 6, 2\n(2) - (6) = -4, left: -4, 1\n(6) + (5) = 11, left: 11, 6, 2\n(5) - (2) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (5 - 2)))"}, {"input": "6 6 2 5\n", "output": "(6) + (2) = 8, left: 8, 6, 5\n(6) + (8) = 14, left: 14, 5\n(2) - (6) = -4, left: -4, 6, 5\n(6) / (5) = 6/5, left: 6/5, -4\n(6) + (2) = 8, left: 8, 6, 5\n(5) * (8) = 40, left: 40, 6\n(2) - (6) = -4, left: -4, 6, 5\n(2) - (5) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(6) / (2) = 3, left: 3, 6, 5\n(6) - (2) = 4, left: 4, 6, 5\n(4) - (6) = -2, left: -2, 5\n(6) * (2) = 12, left: 12, 6, 5\n(2) - (6) = -4, left: -4, 6, 5\n(6) * (5) = 30, left: 30, 6, 2\n(6) + (5) = 11, left: 11, 6, 2\n(2) - (5) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(6) / (5) = 6/5, left: 6/5, 6, 2\n(2) - (6/5) = 4/5, left: 4/5, 6\n(5) - (6) = -1, left: -1, 6, 2\n(6) - (5) = 1, left: 1, 6, 2\n(5) / (6) = 5/6, left: 5/6, 6, 2\n(6) * (5) = 30, left: 30, 6, 2\n(2) + (30) = 32, left: 32, 6\n(2) - (5) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(6) + (5) = 11, left: 11, 6, 2\n(6) * (2) = 12, left: 12, 11\n(11) + (12) = 23, left: 23\n(6) / (5) = 6/5, left: 6/5, 6, 2\n(6/5) / (6) = 1/5, left: 1/5, 2\n(2) + (6/5) = 16/5, left: 16/5, 6\n(5) - (6) = -1, left: -1, 6, 2\n(5) / (6) = 5/6, left: 5/6, 6, 2\n(6) * (5) = 30, left: 30, 6, 2\n(2) * (30) = 60, left: 60, 6\n(2) / (6) = 1/3, left: 1/3, 30\n(2) - (5) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(6) * (5) = 30, left: 30, 6, 2\n(5) / (6) = 5/6, left: 5/6, 6, 2\n(6) * (2) = 12, left: 12, 5/6\n(5) - (6) = -1, left: -1, 6, 2\n(6) / (-1) = -6, left: -6, 2\n(6) - (5) = 1, left: 1, 6, 2\n(5) / (6) = 5/6, left: 5/6, 6, 2\n(2) / (5/6) = 12/5, left: 12/5, 6\n(6) * (5) = 30, left: 30, 6, 2\n(2) / (5) = 2/5, left: 2/5, 6, 6\n(5) / (2) = 5/2, left: 5/2, 6, 6\n(2) - (5) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(6) - (2) = 4, left: 4, 6, 5\n(4) / (5) = 4/5, left: 4/5, 6\n(2) / (6) = 1/3, left: 1/3, 6, 5\n(2) / (6) = 1/3, left: 1/3, 6, 5\n(6) / (5) = 6/5, left: 6/5, 1/3\n(6) * (2) = 12, left: 12, 6, 5\n(6) - (2) = 4, left: 4, 6, 5\n(5) / (6) = 5/6, left: 5/6, 6, 2\n(6) / (5) = 6/5, left: 6/5, 6, 2\n(6/5) - (2) = -4/5, left: -4/5, 6\n(6) - (5) = 1, left: 1, 6, 2\n(2) - (5) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(6) + (2) = 8, left: 8, 6, 5\n(2) - (6) = -4, left: -4, 6, 5\n(6) / (2) = 3, left: 3, 6, 5\n(6) - (2) = 4, left: 4, 6, 5\n(6) / (4) = 3/2, left: 3/2, 5\n(6) * (2) = 12, left: 12, 6, 5\n(6) * (5) = 30, left: 30, 12\n(6) - (2) = 4, left: 4, 6, 5\n(2) / (6) = 1/3, left: 1/3, 6, 5\n(5) - (6) = -1, left: -1, 1/3\n(2) - (5) = -3, left: -3, 6, 6\n(6) + (6) = 12, left: 12, -3\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(6) - (6) = 0, left: 0, 2, 5\n(2) - (0) = 2, left: 2, 5\n(2) - (6) = -4, left: -4, 6, 5\n(6) / (2) = 3, left: 3, 6, 5\n(3) - (6) = -3, left: -3, 5\n(6) - (2) = 4, left: 4, 6, 5\n(6) + (2) = 8, left: 8, 6, 5\n(5) - (6) = -1, left: -1, 6, 2\n(6) * (5) = 30, left: 30, 6, 2\n(6) - (5) = 1, left: 1, 6, 2\n(5) / (6) = 5/6, left: 5/6, 6, 2\n(5) - (2) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (5 - 2)))"}, {"input": "13 2 1 5\n", "output": "(2) - (5) = -3, left: -3, 13, 1\n(13) - (-3) = 16, left: 16, 1\n(2) + (5) = 7, left: 7, 13, 1\n(2) / (5) = 2/5, left: 2/5, 13, 1\n(13) - (2/5) = 63/5, left: 63/5, 1\n(5) / (2) = 5/2, left: 5/2, 13, 1\n(13) * (1) = 13, left: 13, 5/2\n(2) * (5) = 10, left: 10, 13, 1\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((2 * 5) + (13 + 1))"}, {"input": "13 2 1 5\n", "output": "(2) - (5) = -3, left: -3, 13, 1\n(-3) / (1) = -3, left: -3, 13\n(13) / (-3) = -13/3, left: -13/3, 1\n(13) - (-3) = 16, left: 16, 1\n(-3) - (13) = -16, left: -16, 1\n(1) - (13) = -12, left: -12, -3\n(5) - (2) = 3, left: 3, 13, 1\n(2) * (5) = 10, left: 10, 13, 1\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((2 * 5) + (13 + 1))"}, {"input": "13 2 1 5\n", "output": "(1) / (2) = 1/2, left: 1/2, 13, 5\n(5) - (1/2) = 9/2, left: 9/2, 13\n(13) - (9/2) = 17/2, left: 17/2\n(2) / (1) = 2, left: 2, 13, 5\n(5) - (2) = 3, left: 3, 13\n(1) - (2) = -1, left: -1, 13, 5\n(-1) / (13) = -1/13, left: -1/13, 5\n(2) + (1) = 3, left: 3, 13, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((2 + 1) * (13 - 5))"}, {"input": "13 2 1 5\n", "output": "(5) - (1) = 4, left: 4, 13, 2\n(2) * (4) = 8, left: 8, 13\n(1) - (5) = -4, left: -4, 13, 2\n(-4) - (2) = -6, left: -6, 13\n(2) / (-4) = -1/2, left: -1/2, 13\n(13) + (-1/2) = 25/2, left: 25/2\n(2) * (1) = 2, left: 2, 13, 5\n(2) + (1) = 3, left: 3, 13, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((2 + 1) * (13 - 5))"}, {"input": "13 2 1 5\n", "output": "(13) - (2) = 11, left: 11, 1, 5\n(11) - (1) = 10, left: 10, 5\n(13) + (2) = 15, left: 15, 1, 5\n(5) - (1) = 4, left: 4, 15\n(2) / (13) = 2/13, left: 2/13, 1, 5\n(2/13) - (5) = -63/13, left: -63/13, 1\n(2) - (13) = -11, left: -11, 1, 5\n(2) * (5) = 10, left: 10, 13, 1\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((2 * 5) + (13 + 1))"}, {"input": "11 9 3 13\n", "output": "(13) / (3) = 13/3, left: 13/3, 11, 9\n(13/3) - (9) = -14/3, left: -14/3, 11\n(3) - (13) = -10, left: -10, 11, 9\n(9) + (3) = 12, left: 12, 11, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((9 + 3) * (13 - 11))"}, {"input": "11 9 3 13\n", "output": "(9) * (3) = 27, left: 27, 11, 13\n(13) / (27) = 13/27, left: 13/27, 11\n(3) / (9) = 1/3, left: 1/3, 11, 13\n(9) + (3) = 12, left: 12, 11, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((9 + 3) * (13 - 11))"}, {"input": "11 9 3 13\n", "output": "(11) - (3) = 8, left: 8, 9, 13\n(13) - (8) = 5, left: 5, 9\n(3) / (11) = 3/11, left: 3/11, 9, 13\n(11) * (3) = 33, left: 33, 9, 13\n(9) * (13) = 117, left: 117, 11, 3\n(13) - (9) = 4, left: 4, 11, 3\n(9) - (13) = -4, left: -4, 11, 3\n(13) - (11) = 2, left: 2, 9, 3\n(9) + (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (9 + 3))"}, {"input": "11 9 3 13\n", "output": "(3) - (13) = -10, left: -10, 11, 9\n(9) / (11) = 9/11, left: 9/11, -10\n(3) * (13) = 39, left: 39, 11, 9\n(3) / (13) = 3/13, left: 3/13, 11, 9\n(9) / (3/13) = 39, left: 39, 11\n(3/13) / (11) = 3/143, left: 3/143, 9\n(3) / (9) = 1/3, left: 1/3, 11, 13\n(9) + (3) = 12, left: 12, 11, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((9 + 3) * (13 - 11))"}, {"input": "11 9 3 13\n", "output": "(9) - (13) = -4, left: -4, 11, 3\n(13) - (9) = 4, left: 4, 11, 3\n(9) / (11) = 9/11, left: 9/11, 3, 13\n(3) / (13) = 3/13, left: 3/13, 11, 9\n(3) * (13) = 39, left: 39, 11, 9\n(3) + (13) = 16, left: 16, 11, 9\n(11) + (16) = 27, left: 27, 9\n(9) + (3) = 12, left: 12, 11, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((9 + 3) * (13 - 11))"}, {"input": "11 9 3 13\n", "output": "(3) / (13) = 3/13, left: 3/13, 11, 9\n(13) - (3) = 10, left: 10, 11, 9\n(9) - (11) = -2, left: -2, 10\n(3) / (9) = 1/3, left: 1/3, 11, 13\n(11) / (1/3) = 33, left: 33, 13\n(9) * (3) = 27, left: 27, 11, 13\n(27) - (13) = 14, left: 14, 11\n(9) + (3) = 12, left: 12, 11, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((9 + 3) * (13 - 11))"}, {"input": "11 9 3 13\n", "output": "(9) / (11) = 9/11, left: 9/11, 3, 13\n(11) / (9) = 11/9, left: 11/9, 3, 13\n(11) * (9) = 99, left: 99, 3, 13\n(13) - (3) = 10, left: 10, 99\n(9) - (3) = 6, left: 6, 11, 13\n(3) - (9) = -6, left: -6, 11, 13\n(-6) / (13) = -6/13, left: -6/13, 11\n(9) + (3) = 12, left: 12, 11, 13\n(13) - (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((9 + 3) * (13 - 11))"}, {"input": "7 11 7 13\n", "output": "(11) / (7) = 11/7, left: 11/7, 7, 13\n(13) - (7) = 6, left: 6, 11/7\n(7) - (13) = -6, left: -6, 11/7\n(7) / (13) = 7/13, left: 7/13, 11/7\n(7) * (11/7) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (7 * (11 / 7)))"}, {"input": "7 11 7 13\n", "output": "(13) / (11) = 13/11, left: 13/11, 7, 7\n(7) * (13/11) = 91/11, left: 91/11, 7\n(13) - (11) = 2, left: 2, 7, 7\n(11) + (13) = 24, left: 24, 7, 7\n(24) - (7) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((11 + 13) - 7))"}, {"input": "7 11 7 13\n", "output": "(11) - (7) = 4, left: 4, 7, 13\n(13) - (7) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(6) / (4) = 3/2, left: 3/2\n(4) * (6) = 24, left: 24\nreach 24! expression: ((11 - 7) * (13 - 7))"}, {"input": "7 11 7 13\n", "output": "(7) / (13) = 7/13, left: 7/13, 7, 11\n(7) * (7/13) = 49/13, left: 49/13, 11\n(49/13) / (11) = 49/143, left: 49/143\n(7/13) - (7) = -84/13, left: -84/13, 11\n(7) / (7/13) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (7 / (7 / 13)))"}, {"input": "7 11 7 13\n", "output": "(11) / (7) = 11/7, left: 11/7, 7, 13\n(11/7) - (13) = -80/7, left: -80/7, 7\n(13) / (11/7) = 91/11, left: 91/11, 7\n(7) + (91/11) = 168/11, left: 168/11\n(7) * (11/7) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (7 * (11 / 7)))"}, {"input": "7 11 7 13\n", "output": "(7) / (13) = 7/13, left: 7/13, 7, 11\n(7) * (7/13) = 49/13, left: 49/13, 11\n(11) * (49/13) = 539/13, left: 539/13\n(7/13) - (7) = -84/13, left: -84/13, 11\n(11) + (-84/13) = 59/13, left: 59/13\n(11) - (-84/13) = 227/13, left: 227/13\n(7) / (7/13) = 13, left: 13, 11\n(11) - (13) = -2, left: -2\n(13) / (11) = 13/11, left: 13/11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (7 / (7 / 13)))"}, {"input": "7 11 7 13\n", "output": "(11) / (7) = 11/7, left: 11/7, 7, 13\n(13) * (11/7) = 143/7, left: 143/7, 7\n(143/7) / (7) = 143/49, left: 143/49\n(13) - (11/7) = 80/7, left: 80/7, 7\n(7) / (80/7) = 49/80, left: 49/80\n(11/7) - (13) = -80/7, left: -80/7, 7\n(7) + (-80/7) = -31/7, left: -31/7\n(13) / (11/7) = 91/11, left: 91/11, 7\n(7) * (11/7) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (7 * (11 / 7)))"}, {"input": "7 11 7 13\n", "output": "(11) - (7) = 4, left: 4, 7, 13\n(13) - (7) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(6) / (4) = 3/2, left: 3/2\n(4) * (6) = 24, left: 24\nreach 24! expression: ((11 - 7) * (13 - 7))"}, {"input": "7 11 7 13\n", "output": "(11) / (7) = 11/7, left: 11/7, 7, 13\n(13) - (7) = 6, left: 6, 11/7\n(13) / (7) = 13/7, left: 13/7, 11/7\n(11/7) - (13/7) = -2/7, left: -2/7\n(7) + (13) = 20, left: 20, 11/7\n(7) / (13) = 7/13, left: 7/13, 11/7\n(7) * (13) = 91, left: 91, 11/7\n(11/7) - (91) = -626/7, left: -626/7\n(7) * (11/7) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (7 * (11 / 7)))"}, {"input": "7 11 7 13\n", "output": "(13) / (11) = 13/11, left: 13/11, 7, 7\n(13) - (11) = 2, left: 2, 7, 7\n(7) * (7) = 49, left: 49, 2\n(11) * (13) = 143, left: 143, 7, 7\n(7) - (143) = -136, left: -136, 7\n(11) - (13) = -2, left: -2, 7, 7\n(-2) - (7) = -9, left: -9, 7\n(11) + (13) = 24, left: 24, 7, 7\n(24) - (7) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((11 + 13) - 7))"}, {"input": "7 11 7 13\n", "output": "(11) - (7) = 4, left: 4, 7, 13\n(13) - (7) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(6) / (4) = 3/2, left: 3/2\n(4) * (6) = 24, left: 24\nreach 24! expression: ((11 - 7) * (13 - 7))"}, {"input": "7 11 7 13\n", "output": "(11) - (7) = 4, left: 4, 7, 13\n(13) - (7) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(4) - (6) = -2, left: -2\n(6) / (4) = 3/2, left: 3/2\n(4) * (6) = 24, left: 24\nreach 24! expression: ((11 - 7) * (13 - 7))"}, {"input": "6 11 3 9\n", "output": "(6) / (11) = 6/11, left: 6/11, 3, 9\n(6/11) - (3) = -27/11, left: -27/11, 9\n(9) - (6/11) = 93/11, left: 93/11, 3\n(6) + (11) = 17, left: 17, 3, 9\n(17) - (9) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((6 + 11) - 9))"}, {"input": "6 11 3 9\n", "output": "(6) / (11) = 6/11, left: 6/11, 3, 9\n(9) / (3) = 3, left: 3, 6/11\n(3) * (6/11) = 18/11, left: 18/11, 9\n(3) - (6/11) = 27/11, left: 27/11, 9\n(6) + (11) = 17, left: 17, 3, 9\n(3) + (17) = 20, left: 20, 9\n(20) / (9) = 20/9, left: 20/9\n(17) / (3) = 17/3, left: 17/3, 9\n(17) - (9) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((6 + 11) - 9))"}, {"input": "6 11 3 9\n", "output": "(11) + (9) = 20, left: 20, 6, 3\n(6) * (3) = 18, left: 18, 20\n(20) + (18) = 38, left: 38\n(11) * (9) = 99, left: 99, 6, 3\n(6) / (99) = 2/33, left: 2/33, 3\n(11) / (9) = 11/9, left: 11/9, 6, 3\n(9) / (11) = 9/11, left: 9/11, 6, 3\n(11) - (9) = 2, left: 2, 6, 3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (11 - 9)))"}, {"input": "6 11 3 9\n", "output": "(3) / (11) = 3/11, left: 3/11, 6, 9\n(9) * (3/11) = 27/11, left: 27/11, 6\n(6) + (27/11) = 93/11, left: 93/11\n(9) / (3/11) = 33, left: 33, 6\n(3/11) / (9) = 1/33, left: 1/33, 6\n(6) * (1/33) = 2/11, left: 2/11\n(9) / (6) = 3/2, left: 3/2, 3/11\n(3) - (11) = -8, left: -8, 6, 9\n(6) - (9) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((3 - 11) * (6 - 9))"}, {"input": "6 11 3 9\n", "output": "(6) / (9) = 2/3, left: 2/3, 11, 3\n(3) - (2/3) = 7/3, left: 7/3, 11\n(2/3) / (3) = 2/9, left: 2/9, 11\n(2/3) - (3) = -7/3, left: -7/3, 11\n(-7/3) - (11) = -40/3, left: -40/3\n(11) * (3) = 33, left: 33, 2/3\n(2/3) - (33) = -97/3, left: -97/3\n(6) - (9) = -3, left: -3, 11, 3\n(11) + (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 + (6 - 9)))"}, {"input": "6 11 3 9\n", "output": "(6) * (9) = 54, left: 54, 11, 3\n(11) - (3) = 8, left: 8, 54\n(54) - (3) = 51, left: 51, 11\n(3) * (54) = 162, left: 162, 11\n(11) + (162) = 173, left: 173\n(54) - (11) = 43, left: 43, 3\n(9) - (6) = 3, left: 3, 11, 3\n(3) - (11) = -8, left: -8, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((9 - 6) * (11 - 3))"}, {"input": "7 4 4 5\n", "output": "(4) * (5) = 20, left: 20, 7, 4\n(4) - (7) = -3, left: -3, 20\n(4) + (5) = 9, left: 9, 7, 4\n(9) - (7) = 2, left: 2, 4\n(7) - (9) = -2, left: -2, 4\n(4) + (9) = 13, left: 13, 7\n(4) / (7) = 4/7, left: 4/7, 9\n(5) - (4) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 - 4)))"}, {"input": "7 4 4 5\n", "output": "(7) * (4) = 28, left: 28, 4, 5\n(28) - (5) = 23, left: 23, 4\n(4) - (7) = -3, left: -3, 4, 5\n(7) + (4) = 11, left: 11, 4, 5\n(4) + (5) = 9, left: 9, 11\n(4) / (11) = 4/11, left: 4/11, 5\n(5) / (11) = 5/11, left: 5/11, 4\n(4) * (5/11) = 20/11, left: 20/11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((7 + 4) - 5))"}, {"input": "7 4 4 5\n", "output": "(4) / (7) = 4/7, left: 4/7, 4, 5\n(4) * (5) = 20, left: 20, 4/7\n(4/7) + (20) = 144/7, left: 144/7\n(5) + (4/7) = 39/7, left: 39/7, 4\n(7) - (4) = 3, left: 3, 4, 5\n(5) - (3) = 2, left: 2, 4\n(5) * (3) = 15, left: 15, 4\n(7) + (4) = 11, left: 11, 4, 5\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((7 + 4) - 5))"}, {"input": "7 4 4 5\n", "output": "(4) / (5) = 4/5, left: 4/5, 7, 4\n(7) * (4) = 28, left: 28, 4/5\n(4) - (7) = -3, left: -3, 4/5\n(7) - (4) = 3, left: 3, 4/5\n(5) / (4) = 5/4, left: 5/4, 7, 4\n(4) + (5/4) = 21/4, left: 21/4, 7\n(4) + (5) = 9, left: 9, 7, 4\n(5) - (4) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (5 - 4)))"}, {"input": "7 4 4 5\n", "output": "(4) + (4) = 8, left: 8, 7, 5\n(4) / (4) = 1, left: 1, 7, 5\n(1) - (7) = -6, left: -6, 5\n(5) + (-6) = -1, left: -1\n(4) - (4) = 0, left: 0, 7, 5\n(0) / (5) = 0, left: 0, 7\n(7) / (4) = 7/4, left: 7/4, 4, 5\n(7) + (4) = 11, left: 11, 4, 5\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((7 + 4) - 5))"}, {"input": "7 4 4 5\n", "output": "(4) + (4) = 8, left: 8, 7, 5\n(4) / (4) = 1, left: 1, 7, 5\n(7) + (5) = 12, left: 12, 1\n(4) / (4) = 1, left: 1, 7, 5\n(5) * (1) = 5, left: 5, 7\n(4) - (4) = 0, left: 0, 7, 5\n(7) - (0) = 7, left: 7, 5\n(4) - (7) = -3, left: -3, 4, 5\n(7) * (4) = 28, left: 28, 4, 5\n(28) - (5) = 23, left: 23, 4\n(7) - (4) = 3, left: 3, 4, 5\n(7) + (4) = 11, left: 11, 4, 5\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((7 + 4) - 5))"}, {"input": "8 2 2 12\n", "output": "(2) / (8) = 1/4, left: 1/4, 2, 12\n(12) - (2) = 10, left: 10, 1/4\n(1/4) / (10) = 1/40, left: 1/40\n(12) / (2) = 6, left: 6, 1/4\n(1/4) + (6) = 25/4, left: 25/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((12 / 2) / (2 / 8))"}, {"input": "8 2 2 12\n", "output": "(2) / (8) = 1/4, left: 1/4, 2, 12\n(12) - (2) = 10, left: 10, 1/4\n(1/4) / (10) = 1/40, left: 1/40\n(1/4) - (10) = -39/4, left: -39/4\n(1/4) + (10) = 41/4, left: 41/4\n(12) / (2) = 6, left: 6, 1/4\n(1/4) + (6) = 25/4, left: 25/4\n(6) - (1/4) = 23/4, left: 23/4\n(1/4) - (6) = -23/4, left: -23/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((12 / 2) / (2 / 8))"}, {"input": "8 2 2 12\n", "output": "(2) * (12) = 24, left: 24, 8, 2\n(24) - (8) = 16, left: 16, 2\n(2) * (16) = 32, left: 32\n(8) + (2) = 10, left: 10, 24\n(12) - (2) = 10, left: 10, 8, 2\n(10) / (8) = 5/4, left: 5/4, 2\n(2) - (12) = -10, left: -10, 8, 2\n(2) + (12) = 14, left: 14, 8, 2\n(8) + (14) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (8 + (2 + 12)))"}, {"input": "8 2 2 12\n", "output": "(8) * (2) = 16, left: 16, 2, 12\n(2) - (12) = -10, left: -10, 16\n(2) + (12) = 14, left: 14, 16\n(12) - (16) = -4, left: -4, 2\n(16) - (12) = 4, left: 4, 2\n(4) - (2) = 2, left: 2\n(2) - (16) = -14, left: -14, 12\n(2) - (8) = -6, left: -6, 2, 12\n(2) * (-6) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 * (2 - 8)))"}, {"input": "8 2 2 12\n", "output": "(2) - (12) = -10, left: -10, 8, 2\n(2) - (-10) = 12, left: 12, 8\n(8) * (-10) = -80, left: -80, 2\n(-10) - (8) = -18, left: -18, 2\n(2) - (8) = -6, left: -6, -10\n(-10) - (-6) = -4, left: -4\n(2) / (8) = 1/4, left: 1/4, -10\n(2) + (12) = 14, left: 14, 8, 2\n(2) + (14) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (2 + (2 + 12)))"}, {"input": "3 11 10 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 3, 10\n(6/11) / (3) = 2/11, left: 2/11, 10\n(11) / (6) = 11/6, left: 11/6, 3, 10\n(11) + (6) = 17, left: 17, 3, 10\n(3) - (10) = -7, left: -7, 17\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((11 + 6) - (3 - 10))"}, {"input": "3 11 10 6\n", "output": "(10) - (11) = -1, left: -1, 3, 6\n(-1) - (3) = -4, left: -4, 6\n(6) - (-4) = 10, left: 10\n(6) / (-4) = -3/2, left: -3/2\n(3) - (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (10 - 11)))"}, {"input": "3 11 10 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 3, 10\n(3) * (10) = 30, left: 30, 6/11\n(3) - (10) = -7, left: -7, 6/11\n(11) + (6) = 17, left: 17, 3, 10\n(17) - (3) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((11 + 6) - 3))"}, {"input": "3 11 10 6\n", "output": "(3) / (6) = 1/2, left: 1/2, 11, 10\n(3) + (6) = 9, left: 9, 11, 10\n(9) - (10) = -1, left: -1, 11\n(9) / (10) = 9/10, left: 9/10, 11\n(11) + (10) = 21, left: 21, 9\n(6) / (3) = 2, left: 2, 11, 10\n(10) + (2) = 12, left: 12, 11\n(3) - (6) = -3, left: -3, 11, 10\n(11) - (-3) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (11 - (3 - 6)))"}, {"input": "3 11 10 6\n", "output": "(10) - (11) = -1, left: -1, 3, 6\n(-1) / (3) = -1/3, left: -1/3, 6\n(-1/3) / (6) = -1/18, left: -1/18\n(-1) - (3) = -4, left: -4, 6\n(-4) / (6) = -2/3, left: -2/3\n(-4) - (6) = -10, left: -10\n(3) + (-1) = 2, left: 2, 6\n(2) / (6) = 1/3, left: 1/3\n(3) - (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (10 - 11)))"}, {"input": "3 11 10 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 3, 10\n(6/11) / (10) = 3/55, left: 3/55, 3\n(3) + (10) = 13, left: 13, 6/11\n(3) * (10) = 30, left: 30, 6/11\n(3) * (6/11) = 18/11, left: 18/11, 10\n(3) + (6/11) = 39/11, left: 39/11, 10\n(10) * (39/11) = 390/11, left: 390/11\n(11) + (6) = 17, left: 17, 3, 10\n(17) - (3) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((11 + 6) - 3))"}, {"input": "3 11 10 6\n", "output": "(6) - (11) = -5, left: -5, 3, 10\n(11) / (6) = 11/6, left: 11/6, 3, 10\n(6) / (11) = 6/11, left: 6/11, 3, 10\n(3) * (10) = 30, left: 30, 6/11\n(11) * (6) = 66, left: 66, 3, 10\n(11) - (6) = 5, left: 5, 3, 10\n(3) / (5) = 3/5, left: 3/5, 10\n(11) + (6) = 17, left: 17, 3, 10\n(17) - (3) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((11 + 6) - 3))"}, {"input": "3 11 10 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 3, 10\n(10) / (6/11) = 55/3, left: 55/3, 3\n(55/3) / (3) = 55/9, left: 55/9\n(3) * (10) = 30, left: 30, 6/11\n(11) / (6) = 11/6, left: 11/6, 3, 10\n(10) * (11/6) = 55/3, left: 55/3, 3\n(11) - (6) = 5, left: 5, 3, 10\n(11) + (6) = 17, left: 17, 3, 10\n(3) - (10) = -7, left: -7, 17\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((11 + 6) - (3 - 10))"}, {"input": "12 2 10 1\n", "output": "(1) / (2) = 1/2, left: 1/2, 12, 10\n(10) - (1/2) = 19/2, left: 19/2, 12\n(12) - (10) = 2, left: 2, 1/2\n(2) * (1) = 2, left: 2, 12, 10\n(10) + (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (10 + (2 * 1)))"}, {"input": "12 2 10 1\n", "output": "(12) * (2) = 24, left: 24, 10, 1\n(10) * (1) = 10, left: 10, 24\n(24) / (10) = 12/5, left: 12/5, 1\n(12) + (2) = 14, left: 14, 10, 1\n(14) / (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((12 + 2) / 1))"}, {"input": "12 2 10 1\n", "output": "(12) - (2) = 10, left: 10, 10, 1\n(1) / (10) = 1/10, left: 1/10, 10\n(12) * (2) = 24, left: 24, 10, 1\n(12) + (2) = 14, left: 14, 10, 1\n(10) * (1) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((12 + 2) + (10 * 1))"}, {"input": "12 2 10 1\n", "output": "(10) / (2) = 5, left: 5, 12, 1\n(12) * (1) = 12, left: 12, 5\n(10) - (2) = 8, left: 8, 12, 1\n(2) * (10) = 20, left: 20, 12, 1\n(2) - (10) = -8, left: -8, 12, 1\n(1) * (-8) = -8, left: -8, 12\n(12) / (-8) = -3/2, left: -3/2\n(2) + (10) = 12, left: 12, 12, 1\n(12) / (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((2 + 10) + (12 / 1))"}, {"input": "12 2 10 1\n", "output": "(12) / (2) = 6, left: 6, 10, 1\n(10) + (1) = 11, left: 11, 6\n(6) - (1) = 5, left: 5, 10\n(1) - (6) = -5, left: -5, 10\n(2) / (12) = 1/6, left: 1/6, 10, 1\n(1/6) / (1) = 1/6, left: 1/6, 10\n(10) - (1/6) = 59/6, left: 59/6\n(12) + (2) = 14, left: 14, 10, 1\n(10) * (1) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((12 + 2) + (10 * 1))"}, {"input": "12 2 10 1\n", "output": "(12) * (2) = 24, left: 24, 10, 1\n(10) - (1) = 9, left: 9, 24\n(1) - (10) = -9, left: -9, 24\n(1) - (24) = -23, left: -23, 10\n(10) - (24) = -14, left: -14, 1\n(10) + (24) = 34, left: 34, 1\n(1) * (34) = 34, left: 34\n(12) + (2) = 14, left: 14, 10, 1\n(14) / (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((12 + 2) / 1))"}, {"input": "12 2 10 1\n", "output": "(1) - (2) = -1, left: -1, 12, 10\n(2) + (1) = 3, left: 3, 12, 10\n(3) - (10) = -7, left: -7, 12\n(-7) - (12) = -19, left: -19\n(1) / (2) = 1/2, left: 1/2, 12, 10\n(10) / (1/2) = 20, left: 20, 12\n(10) - (1/2) = 19/2, left: 19/2, 12\n(2) * (1) = 2, left: 2, 12, 10\n(10) + (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (10 + (2 * 1)))"}, {"input": "12 2 10 1\n", "output": "(2) / (10) = 1/5, left: 1/5, 12, 1\n(12) - (1) = 11, left: 11, 1/5\n(11) - (1/5) = 54/5, left: 54/5\n(1) + (1/5) = 6/5, left: 6/5, 12\n(10) - (2) = 8, left: 8, 12, 1\n(1) + (8) = 9, left: 9, 12\n(8) / (12) = 2/3, left: 2/3, 1\n(2) + (10) = 12, left: 12, 12, 1\n(12) + (12) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (12 + (2 + 10)))"}, {"input": "1 1 8 4\n", "output": "(1) / (8) = 1/8, left: 1/8, 1, 4\n(4) + (1/8) = 33/8, left: 33/8, 1\n(4) * (1/8) = 1/2, left: 1/2, 1\n(4) - (1/8) = 31/8, left: 31/8, 1\n(4) - (1) = 3, left: 3, 1/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((4 - 1) / (1 / 8))"}, {"input": "1 1 8 4\n", "output": "(8) + (4) = 12, left: 12, 1, 1\n(1) - (1) = 0, left: 0, 12\n(0) / (12) = 0, left: 0\n(1) * (1) = 1, left: 1, 12\n(12) / (1) = 12, left: 12\n(1) / (12) = 1/12, left: 1/12\n(12) - (1) = 11, left: 11\n(1) + (1) = 2, left: 2, 12\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: ((8 + 4) * (1 + 1))"}, {"input": "1 1 8 4\n", "output": "(1) / (8) = 1/8, left: 1/8, 1, 4\n(4) + (1/8) = 33/8, left: 33/8, 1\n(33/8) - (1) = 25/8, left: 25/8\n(4) * (1/8) = 1/2, left: 1/2, 1\n(1/8) / (4) = 1/32, left: 1/32, 1\n(1/8) - (4) = -31/8, left: -31/8, 1\n(4) - (1/8) = 31/8, left: 31/8, 1\n(1) - (31/8) = -23/8, left: -23/8\n(4) - (1) = 3, left: 3, 1/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((4 - 1) / (1 / 8))"}, {"input": "1 1 8 4\n", "output": "(8) - (1) = 7, left: 7, 1, 4\n(4) - (7) = -3, left: -3, 1\n(1) + (-3) = -2, left: -2\n(1) - (-3) = 4, left: 4\n(4) / (7) = 4/7, left: 4/7, 1\n(1) - (7) = -6, left: -6, 4\n(4) / (-6) = -2/3, left: -2/3\n(7) - (1) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((8 - 1) - 1))"}, {"input": "1 1 8 4\n", "output": "(4) / (8) = 1/2, left: 1/2, 1, 1\n(8) - (4) = 4, left: 4, 1, 1\n(1) / (4) = 1/4, left: 1/4, 1\n(1) - (1/4) = 3/4, left: 3/4\n(8) * (4) = 32, left: 32, 1, 1\n(1) - (32) = -31, left: -31, 1\n(1) / (1) = 1, left: 1, 32\n(8) + (4) = 12, left: 12, 1, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((8 + 4) * (1 + 1))"}, {"input": "1 1 8 4\n", "output": "(1) * (4) = 4, left: 4, 1, 8\n(1) - (8) = -7, left: -7, 4\n(1) + (8) = 9, left: 9, 4\n(9) - (4) = 5, left: 5\n(8) - (4) = 4, left: 4, 1\n(8) * (4) = 32, left: 32, 1\n(1) * (4) = 4, left: 4, 8\n(4) - (8) = -4, left: -4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((1 * 4) - 1))"}, {"input": "2 6 10 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 2, 6\n(3/5) - (2) = -7/5, left: -7/5, 6\n(6) - (3/5) = 27/5, left: 27/5, 2\n(27/5) / (2) = 27/10, left: 27/10\n(10) / (6) = 5/3, left: 5/3, 2, 6\n(2) + (5/3) = 11/3, left: 11/3, 6\n(6) - (10) = -4, left: -4, 2, 6\n(6) + (10) = 16, left: 16, 2, 6\n(6) + (16) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (6 + (6 + 10)))"}, {"input": "2 6 10 6\n", "output": "(6) / (2) = 3, left: 3, 10, 6\n(3) - (6) = -3, left: -3, 10\n(6) * (3) = 18, left: 18, 10\n(6) - (3) = 3, left: 3, 10\n(3) / (10) = 3/10, left: 3/10, 6\n(10) / (3) = 10/3, left: 10/3, 6\n(3) - (10) = -7, left: -7, 6\n(10) + (3) = 13, left: 13, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (6 / 2)) - 6)"}, {"input": "2 6 10 6\n", "output": "(6) / (6) = 1, left: 1, 2, 10\n(10) - (1) = 9, left: 9, 2\n(6) - (6) = 0, left: 0, 2, 10\n(10) - (0) = 10, left: 10, 2\n(6) / (6) = 1, left: 1, 2, 10\n(1) - (2) = -1, left: -1, 10\n(6) * (6) = 36, left: 36, 2, 10\n(2) / (36) = 1/18, left: 1/18, 10\n(36) - (2) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: (((6 * 6) - 2) - 10)"}, {"input": "2 6 10 6\n", "output": "(6) - (10) = -4, left: -4, 2, 6\n(2) * (-4) = -8, left: -8, 6\n(10) - (6) = 4, left: 4, 2, 6\n(2) - (6) = -4, left: -4, 4\n(6) - (2) = 4, left: 4, 4\n(10) / (6) = 5/3, left: 5/3, 2, 6\n(2) + (5/3) = 11/3, left: 11/3, 6\n(10) * (6) = 60, left: 60, 2, 6\n(60) / (2) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: (((10 * 6) / 2) - 6)"}, {"input": "2 6 10 6\n", "output": "(2) - (6) = -4, left: -4, 10, 6\n(10) - (6) = 4, left: 4, -4\n(10) - (-4) = 14, left: 14, 6\n(6) * (14) = 84, left: 84\n(6) / (2) = 3, left: 3, 10, 6\n(10) + (6) = 16, left: 16, 3\n(3) - (16) = -13, left: -13\n(3) - (10) = -7, left: -7, 6\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (6 / 2)) - 6)"}, {"input": "9 12 12 5\n", "output": "(12) / (5) = 12/5, left: 12/5, 9, 12\n(9) * (12/5) = 108/5, left: 108/5, 12\n(5) / (12) = 5/12, left: 5/12, 9, 12\n(12) - (5) = 7, left: 7, 9, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (9 - (12 - 5)))"}, {"input": "9 12 12 5\n", "output": "(9) + (5) = 14, left: 14, 12, 12\n(12) * (12) = 144, left: 144, 14\n(12) - (12) = 0, left: 0, 14\n(12) + (14) = 26, left: 26, 12\n(14) - (12) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 + 5) - 12))"}, {"input": "9 12 12 5\n", "output": "(12) / (5) = 12/5, left: 12/5, 9, 12\n(9) * (12) = 108, left: 108, 12/5\n(12) - (5) = 7, left: 7, 9, 12\n(9) * (12) = 108, left: 108, 7\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (9 - (12 - 5)))"}, {"input": "9 12 12 5\n", "output": "(5) - (9) = -4, left: -4, 12, 12\n(12) * (-4) = -48, left: -48, 12\n(12) - (-4) = 16, left: 16, 12\n(9) - (5) = 4, left: 4, 12, 12\n(12) / (12) = 1, left: 1, 4\n(9) * (5) = 45, left: 45, 12, 12\n(9) + (5) = 14, left: 14, 12, 12\n(12) / (12) = 1, left: 1, 14\n(14) - (12) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 + 5) - 12))"}, {"input": "9 12 12 5\n", "output": "(12) / (5) = 12/5, left: 12/5, 9, 12\n(9) * (12/5) = 108/5, left: 108/5, 12\n(12/5) - (12) = -48/5, left: -48/5, 9\n(9) + (12) = 21, left: 21, 12/5\n(12/5) / (21) = 4/35, left: 4/35\n(12) - (9) = 3, left: 3, 12/5\n(12) - (5) = 7, left: 7, 9, 12\n(12) + (7) = 19, left: 19, 9\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (9 - (12 - 5)))"}, {"input": "9 12 12 5\n", "output": "(9) + (5) = 14, left: 14, 12, 12\n(12) / (12) = 1, left: 1, 14\n(14) / (1) = 14, left: 14\n(12) * (12) = 144, left: 144, 14\n(12) - (12) = 0, left: 0, 14\n(12) / (12) = 1, left: 1, 14\n(12) + (12) = 24, left: 24, 14\n(12) / (14) = 6/7, left: 6/7, 12\n(14) - (12) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((9 + 5) - 12))"}, {"input": "9 12 12 5\n", "output": "(12) / (5) = 12/5, left: 12/5, 9, 12\n(12) + (12/5) = 72/5, left: 72/5, 9\n(9) / (72/5) = 5/8, left: 5/8\n(5) / (12) = 5/12, left: 5/12, 9, 12\n(12) - (9) = 3, left: 3, 5/12\n(9) / (5/12) = 108/5, left: 108/5, 12\n(5/12) - (12) = -139/12, left: -139/12, 9\n(12) - (5) = 7, left: 7, 9, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (9 - (12 - 5)))"}, {"input": "9 12 12 5\n", "output": "(12) / (12) = 1, left: 1, 9, 5\n(5) - (9) = -4, left: -4, 1\n(12) + (12) = 24, left: 24, 9, 5\n(24) - (5) = 19, left: 19, 9\n(12) - (12) = 0, left: 0, 9, 5\n(0) - (9) = -9, left: -9, 5\n(12) * (12) = 144, left: 144, 9, 5\n(9) - (12) = -3, left: -3, 12, 5\n(5) + (-3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 + (9 - 12)))"}, {"input": "3 3 4 1\n", "output": "(3) - (1) = 2, left: 2, 3, 4\n(3) - (4) = -1, left: -1, 2\n(2) + (-1) = 1, left: 1\n(4) / (3) = 4/3, left: 4/3, 2\n(2) / (4/3) = 3/2, left: 3/2\n(4/3) - (2) = -2/3, left: -2/3\n(3) * (4) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) / (12) = 1/6, left: 1/6\n(2) * (12) = 24, left: 24\nreach 24! expression: ((3 - 1) * (3 * 4))"}, {"input": "3 3 4 1\n", "output": "(3) / (4) = 3/4, left: 3/4, 3, 1\n(1) + (3/4) = 7/4, left: 7/4, 3\n(3) + (1) = 4, left: 4, 3/4\n(3/4) - (4) = -13/4, left: -13/4\n(1) / (3) = 1/3, left: 1/3, 3/4\n(3/4) * (1/3) = 1/4, left: 1/4\n(3) + (4) = 7, left: 7, 3, 1\n(7) / (1) = 7, left: 7, 3\n(1) + (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 + (3 + 4)))"}, {"input": "3 3 4 1\n", "output": "(3) * (1) = 3, left: 3, 3, 4\n(3) / (4) = 3/4, left: 3/4, 3\n(3) * (4) = 12, left: 12, 3\n(3) + (12) = 15, left: 15\n(4) / (3) = 4/3, left: 4/3, 3\n(3) + (4) = 7, left: 7, 3\n(3) * (3) = 9, left: 9, 4\n(4) + (9) = 13, left: 13\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 + (3 * 1)))"}, {"input": "3 3 4 1\n", "output": "(3) - (3) = 0, left: 0, 4, 1\n(0) / (1) = 0, left: 0, 4\n(4) / (1) = 4, left: 4, 0\n(0) + (4) = 4, left: 4\n(1) - (4) = -3, left: -3, 0\n(3) * (3) = 9, left: 9, 4, 1\n(1) / (9) = 1/9, left: 1/9, 4\n(3) + (3) = 6, left: 6, 4, 1\n(4) * (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (4 * 1))"}, {"input": "3 3 4 1\n", "output": "(3) / (3) = 1, left: 1, 4, 1\n(1) - (4) = -3, left: -3, 1\n(3) / (3) = 1, left: 1, 4, 1\n(3) * (3) = 9, left: 9, 4, 1\n(4) + (1) = 5, left: 5, 9\n(4) / (1) = 4, left: 4, 9\n(4) * (9) = 36, left: 36, 1\n(3) + (3) = 6, left: 6, 4, 1\n(4) * (6) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (4 * (3 + 3)))"}, {"input": "3 3 4 1\n", "output": "(3) / (3) = 1, left: 1, 4, 1\n(4) * (1) = 4, left: 4, 1\n(4) / (1) = 4, left: 4, 1\n(3) / (3) = 1, left: 1, 4, 1\n(4) + (1) = 5, left: 5, 1\n(1) - (1) = 0, left: 0, 4\n(3) * (3) = 9, left: 9, 4, 1\n(9) - (4) = 5, left: 5, 1\n(5) - (1) = 4, left: 4\n(4) / (9) = 4/9, left: 4/9, 1\n(1) + (4/9) = 13/9, left: 13/9\n(3) + (3) = 6, left: 6, 4, 1\n(4) * (6) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (4 * (3 + 3)))"}, {"input": "3 3 4 1\n", "output": "(3) - (3) = 0, left: 0, 4, 1\n(1) * (0) = 0, left: 0, 4\n(4) - (0) = 4, left: 4, 1\n(4) + (0) = 4, left: 4, 1\n(4) / (1) = 4, left: 4\n(4) - (1) = 3, left: 3, 0\n(4) / (1) = 4, left: 4, 0\n(3) * (3) = 9, left: 9, 4, 1\n(9) / (1) = 9, left: 9, 4\n(4) - (9) = -5, left: -5, 1\n(1) + (-5) = -4, left: -4\n(3) + (3) = 6, left: 6, 4, 1\n(4) * (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (4 * 1))"}, {"input": "12 7 10 6\n", "output": "(12) + (10) = 22, left: 22, 7, 6\n(6) / (22) = 3/11, left: 3/11, 7\n(12) - (7) = 5, left: 5, 10, 6\n(12) * (7) = 84, left: 84, 10, 6\n(10) * (6) = 60, left: 60, 84\n(84) - (60) = 24, left: 24\nreach 24! expression: ((12 * 7) - (10 * 6))"}, {"input": "12 7 10 6\n", "output": "(6) / (12) = 1/2, left: 1/2, 7, 10\n(10) / (7) = 10/7, left: 10/7, 1/2\n(1/2) / (10/7) = 7/20, left: 7/20\n(10) - (7) = 3, left: 3, 1/2\n(7) / (1/2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 / (6 / 12)))"}, {"input": "12 7 10 6\n", "output": "(12) / (10) = 6/5, left: 6/5, 7, 6\n(12) * (10) = 120, left: 120, 7, 6\n(10) / (12) = 5/6, left: 5/6, 7, 6\n(10) * (6) = 60, left: 60, 12, 7\n(12) * (7) = 84, left: 84, 60\n(84) - (60) = 24, left: 24\nreach 24! expression: ((12 * 7) - (10 * 6))"}, {"input": "12 7 10 6\n", "output": "(12) * (7) = 84, left: 84, 10, 6\n(6) * (84) = 504, left: 504, 10\n(10) - (504) = -494, left: -494\n(6) - (84) = -78, left: -78, 10\n(84) / (6) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((12 * 7) / 6))"}, {"input": "12 7 10 6\n", "output": "(7) / (6) = 7/6, left: 7/6, 12, 10\n(10) * (7/6) = 35/3, left: 35/3, 12\n(10) - (7/6) = 53/6, left: 53/6, 12\n(7/6) / (10) = 7/60, left: 7/60, 12\n(12) * (7/6) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (12 * (7 / 6)))"}, {"input": "12 7 10 6\n", "output": "(6) / (12) = 1/2, left: 1/2, 7, 10\n(10) - (7) = 3, left: 3, 1/2\n(3) - (1/2) = 5/2, left: 5/2\n(10) * (1/2) = 5, left: 5, 7\n(10) / (1/2) = 20, left: 20, 7\n(20) / (7) = 20/7, left: 20/7\n(10) + (1/2) = 21/2, left: 21/2, 7\n(1/2) - (10) = -19/2, left: -19/2, 7\n(7) / (1/2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 / (6 / 12)))"}, {"input": "12 7 10 6\n", "output": "(12) * (7) = 84, left: 84, 10, 6\n(6) * (84) = 504, left: 504, 10\n(6) - (84) = -78, left: -78, 10\n(10) / (-78) = -5/39, left: -5/39\n(10) - (-78) = 88, left: 88\n(10) * (-78) = -780, left: -780\n(84) - (6) = 78, left: 78, 10\n(10) * (78) = 780, left: 780\n(84) / (6) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((12 * 7) / 6))"}, {"input": "12 7 10 6\n", "output": "(7) / (6) = 7/6, left: 7/6, 12, 10\n(10) * (7/6) = 35/3, left: 35/3, 12\n(10) - (7/6) = 53/6, left: 53/6, 12\n(12) / (53/6) = 72/53, left: 72/53\n(7/6) - (10) = -53/6, left: -53/6, 12\n(12) / (-53/6) = -72/53, left: -72/53\n(12) * (-53/6) = -106, left: -106\n(10) / (7/6) = 60/7, left: 60/7, 12\n(12) * (7/6) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (12 * (7 / 6)))"}, {"input": "12 7 10 6\n", "output": "(10) - (12) = -2, left: -2, 7, 6\n(12) / (10) = 6/5, left: 6/5, 7, 6\n(12) * (10) = 120, left: 120, 7, 6\n(12) + (10) = 22, left: 22, 7, 6\n(22) - (6) = 16, left: 16, 7\n(7) + (22) = 29, left: 29, 6\n(10) / (12) = 5/6, left: 5/6, 7, 6\n(10) * (6) = 60, left: 60, 12, 7\n(12) * (7) = 84, left: 84, 60\n(84) - (60) = 24, left: 24\nreach 24! expression: ((12 * 7) - (10 * 6))"}, {"input": "12 7 10 6\n", "output": "(10) - (12) = -2, left: -2, 7, 6\n(7) * (6) = 42, left: 42, -2\n(12) / (10) = 6/5, left: 6/5, 7, 6\n(6/5) - (7) = -29/5, left: -29/5, 6\n(6) / (-29/5) = -30/29, left: -30/29\n(7) / (12) = 7/12, left: 7/12, 10, 6\n(10) - (6) = 4, left: 4, 7/12\n(12) * (7) = 84, left: 84, 10, 6\n(10) * (6) = 60, left: 60, 84\n(84) - (60) = 24, left: 24\nreach 24! expression: ((12 * 7) - (10 * 6))"}, {"input": "3 2 7 3\n", "output": "(3) / (2) = 3/2, left: 3/2, 7, 3\n(7) - (3/2) = 11/2, left: 11/2, 3\n(2) / (3) = 2/3, left: 2/3, 7, 3\n(3) * (2/3) = 2, left: 2, 7\n(3) + (2) = 5, left: 5, 7, 3\n(5) - (7) = -2, left: -2, 3\n(3) / (5) = 3/5, left: 3/5, 7\n(3) - (2) = 1, left: 1, 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (3 - 2)))"}, {"input": "3 2 7 3\n", "output": "(7) / (2) = 7/2, left: 7/2, 3, 3\n(3) - (3) = 0, left: 0, 7/2\n(3) - (3) = 0, left: 0, 7/2\n(7/2) / (3) = 7/6, left: 7/6, 3\n(3) - (7/2) = -1/2, left: -1/2, 3\n(-1/2) - (3) = -7/2, left: -7/2\n(3) * (7/2) = 21/2, left: 21/2, 3\n(2) + (7) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (2 + 7)) - 3)"}, {"input": "3 2 7 3\n", "output": "(3) / (7) = 3/7, left: 3/7, 2, 3\n(3) - (7) = -4, left: -4, 2, 3\n(7) / (3) = 7/3, left: 7/3, 2, 3\n(3) + (7) = 10, left: 10, 2, 3\n(2) / (3) = 2/3, left: 2/3, 10\n(3) * (10) = 30, left: 30, 2\n(2) + (10) = 12, left: 12, 3\n(3) / (12) = 1/4, left: 1/4\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 + 7) - 2))"}, {"input": "3 2 7 3\n", "output": "(2) / (3) = 2/3, left: 2/3, 3, 7\n(7) + (2/3) = 23/3, left: 23/3, 3\n(3) + (7) = 10, left: 10, 2/3\n(2) + (3) = 5, left: 5, 3, 7\n(3) - (7) = -4, left: -4, 5\n(7) / (3) = 7/3, left: 7/3, 5\n(2) - (3) = -1, left: -1, 3, 7\n(7) + (-1) = 6, left: 6, 3\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (2 - 3)))"}, {"input": "3 2 7 3\n", "output": "(2) - (3) = -1, left: -1, 3, 7\n(7) - (3) = 4, left: 4, -1\n(4) - (-1) = 5, left: 5\n(7) / (3) = 7/3, left: 7/3, -1\n(3) + (7) = 10, left: 10, -1\n(-1) + (10) = 9, left: 9\n(3) * (7) = 21, left: 21, -1\n(-1) - (21) = -22, left: -22\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (2 - 3)))"}, {"input": "4 8 9 10\n", "output": "(9) / (4) = 9/4, left: 9/4, 8, 10\n(9/4) / (8) = 9/32, left: 9/32, 10\n(10) * (9/32) = 45/16, left: 45/16\n(4) + (9) = 13, left: 13, 8, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((4 + 9) - 10))"}, {"input": "4 8 9 10\n", "output": "(8) * (10) = 80, left: 80, 4, 9\n(8) + (10) = 18, left: 18, 4, 9\n(4) + (18) = 22, left: 22, 9\n(9) * (22) = 198, left: 198\n(10) / (8) = 5/4, left: 5/4, 4, 9\n(4) - (9) = -5, left: -5, 8, 10\n(10) - (-5) = 15, left: 15, 8\n(4) + (9) = 13, left: 13, 8, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((4 + 9) - 10))"}, {"input": "4 8 9 10\n", "output": "(10) - (9) = 1, left: 1, 4, 8\n(4) / (1) = 4, left: 4, 8\n(8) + (4) = 12, left: 12\n(8) * (4) = 32, left: 32\n(4) + (1) = 5, left: 5, 8\n(8) + (5) = 13, left: 13\n(1) / (4) = 1/4, left: 1/4, 8\n(4) - (1) = 3, left: 3, 8\n(8) + (3) = 11, left: 11\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (10 - 9)))"}, {"input": "4 8 9 10\n", "output": "(8) - (10) = -2, left: -2, 4, 9\n(9) / (-2) = -9/2, left: -9/2, 4\n(8) + (9) = 17, left: 17, 4, 10\n(10) - (4) = 6, left: 6, 17\n(8) - (9) = -1, left: -1, 4, 10\n(8) / (9) = 8/9, left: 8/9, 4, 10\n(9) / (8) = 9/8, left: 9/8, 4, 10\n(4) + (9) = 13, left: 13, 8, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((4 + 9) - 10))"}, {"input": "4 8 9 10\n", "output": "(8) + (10) = 18, left: 18, 4, 9\n(8) - (10) = -2, left: -2, 4, 9\n(10) - (8) = 2, left: 2, 4, 9\n(9) / (4) = 9/4, left: 9/4, 8, 10\n(4) / (9) = 4/9, left: 4/9, 8, 10\n(10) / (8) = 5/4, left: 5/4, 4/9\n(4) * (9) = 36, left: 36, 8, 10\n(4) + (9) = 13, left: 13, 8, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((4 + 9) - 10))"}, {"input": "4 8 9 10\n", "output": "(10) / (4) = 5/2, left: 5/2, 8, 9\n(9) - (8) = 1, left: 1, 5/2\n(5/2) + (1) = 7/2, left: 7/2\n(4) * (10) = 40, left: 40, 8, 9\n(40) / (8) = 5, left: 5, 9\n(9) / (8) = 9/8, left: 9/8, 40\n(40) * (9/8) = 45, left: 45\n(10) - (4) = 6, left: 6, 8, 9\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 - (10 - 4)))"}, {"input": "4 8 9 10\n", "output": "(8) + (10) = 18, left: 18, 4, 9\n(4) - (18) = -14, left: -14, 9\n(10) - (8) = 2, left: 2, 4, 9\n(8) - (10) = -2, left: -2, 4, 9\n(4) * (9) = 36, left: 36, -2\n(36) - (-2) = 38, left: 38\n(10) / (8) = 5/4, left: 5/4, 4, 9\n(8) - (9) = -1, left: -1, 4, 10\n(8) / (9) = 8/9, left: 8/9, 4, 10\n(4) - (10) = -6, left: -6, 8/9\n(9) / (8) = 9/8, left: 9/8, 4, 10\n(4) + (9) = 13, left: 13, 8, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((4 + 9) - 10))"}, {"input": "8 2 5 5\n", "output": "(5) - (8) = -3, left: -3, 2, 5\n(8) / (5) = 8/5, left: 8/5, 2, 5\n(5) / (8/5) = 25/8, left: 25/8, 2\n(5) + (5) = 10, left: 10, 8, 2\n(5) - (5) = 0, left: 0, 8, 2\n(0) - (8) = -8, left: -8, 2\n(-8) / (2) = -4, left: -4\n(5) / (5) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(2) - (8) = -6, left: -6, 5, 5\n(5) + (5) = 10, left: 10, -6\n(8) * (2) = 16, left: 16, 5, 5\n(8) / (2) = 4, left: 4, 5, 5\n(8) - (2) = 6, left: 6, 5, 5\n(5) + (5) = 10, left: 10, 8, 2\n(8) * (10) = 80, left: 80, 2\n(5) / (5) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(2) / (5) = 2/5, left: 2/5, 8, 5\n(2) * (5) = 10, left: 10, 8, 5\n(2) + (5) = 7, left: 7, 8, 5\n(5) - (5) = 0, left: 0, 8, 2\n(2) - (0) = 2, left: 2, 8\n(5) + (5) = 10, left: 10, 8, 2\n(5) / (5) = 1, left: 1, 8, 2\n(2) - (8) = -6, left: -6, 1\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(8) * (5) = 40, left: 40, 2, 5\n(8) / (2) = 4, left: 4, 5, 5\n(5) * (4) = 20, left: 20, 5\n(8) * (2) = 16, left: 16, 5, 5\n(2) - (5) = -3, left: -3, 8, 5\n(5) * (-3) = -15, left: -15, 8\n(5) / (2) = 5/2, left: 5/2, 8, 5\n(5) / (5) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(5) - (2) = 3, left: 3, 8, 5\n(3) / (8) = 3/8, left: 3/8, 5\n(3/8) / (5) = 3/40, left: 3/40\n(5) / (2) = 5/2, left: 5/2, 8, 5\n(8) / (5) = 8/5, left: 8/5, 2, 5\n(2) - (5) = -3, left: -3, 8/5\n(2) - (8/5) = 2/5, left: 2/5, 5\n(5) / (5) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(2) / (5) = 2/5, left: 2/5, 8, 5\n(5) - (8) = -3, left: -3, 2, 5\n(8) + (5) = 13, left: 13, 2, 5\n(5) - (13) = -8, left: -8, 2\n(8) * (5) = 40, left: 40, 2, 5\n(2) + (40) = 42, left: 42, 5\n(5) - (8) = -3, left: -3, 2, 5\n(8) / (5) = 8/5, left: 8/5, 2, 5\n(8) + (5) = 13, left: 13, 2, 5\n(5) * (13) = 65, left: 65, 2\n(65) - (2) = 63, left: 63\n(5) / (5) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(5) - (2) = 3, left: 3, 8, 5\n(3) - (8) = -5, left: -5, 5\n(2) - (5) = -3, left: -3, 8, 5\n(8) * (5) = 40, left: 40, -3\n(-3) + (40) = 37, left: 37\n(2) + (5) = 7, left: 7, 8, 5\n(7) - (5) = 2, left: 2, 8\n(5) - (8) = -3, left: -3, 2, 5\n(8) + (5) = 13, left: 13, 2, 5\n(5) + (13) = 18, left: 18, 2\n(2) + (13) = 15, left: 15, 5\n(5) / (5) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(2) + (5) = 7, left: 7, 8, 5\n(5) * (7) = 35, left: 35, 8\n(2) + (5) = 7, left: 7, 8, 5\n(2) - (5) = -3, left: -3, 8, 5\n(8) + (-3) = 5, left: 5, 5\n(2) / (5) = 2/5, left: 2/5, 8, 5\n(5) - (2) = 3, left: 3, 8, 5\n(8) * (3) = 24, left: 24, 5\n(5) / (2) = 5/2, left: 5/2, 8, 5\n(5) + (5) = 10, left: 10, 8, 2\n(10) - (8) = 2, left: 2, 2\n(5) / (5) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(2) - (8) = -6, left: -6, 5, 5\n(5) - (-6) = 11, left: 11, 5\n(-6) / (5) = -6/5, left: -6/5, 5\n(8) * (2) = 16, left: 16, 5, 5\n(5) + (5) = 10, left: 10, 16\n(16) / (5) = 16/5, left: 16/5, 5\n(8) + (2) = 10, left: 10, 5, 5\n(5) * (10) = 50, left: 50, 5\n(8) - (2) = 6, left: 6, 5, 5\n(2) / (8) = 1/4, left: 1/4, 5, 5\n(5) - (1/4) = 19/4, left: 19/4, 5\n(5) / (5) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(8) / (5) = 8/5, left: 8/5, 2, 5\n(2) - (5) = -3, left: -3, 8/5\n(8) / (2) = 4, left: 4, 5, 5\n(8) + (2) = 10, left: 10, 5, 5\n(2) + (5) = 7, left: 7, 8, 5\n(2) / (5) = 2/5, left: 2/5, 8, 5\n(5) - (2) = 3, left: 3, 8, 5\n(2) / (5) = 2/5, left: 2/5, 8, 5\n(8) - (5) = 3, left: 3, 2, 5\n(5) / (5) = 1, left: 1, 8, 2\n(8) / (2) = 4, left: 4, 1\n(1) / (4) = 1/4, left: 1/4\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "7 7 8 11\n", "output": "(7) + (7) = 14, left: 14, 8, 11\n(14) / (11) = 14/11, left: 14/11, 8\n(8) - (14/11) = 74/11, left: 74/11\n(14) - (11) = 3, left: 3, 8\n(3) / (8) = 3/8, left: 3/8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 7) - 11))"}, {"input": "7 7 8 11\n", "output": "(8) / (11) = 8/11, left: 8/11, 7, 7\n(8) + (11) = 19, left: 19, 7, 7\n(7) - (7) = 0, left: 0, 19\n(19) * (0) = 0, left: 0\n(8) - (11) = -3, left: -3, 7, 7\n(-3) - (7) = -10, left: -10, 7\n(11) / (8) = 11/8, left: 11/8, 7, 7\n(11) - (7) = 4, left: 4, 7, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (11 - 7)))"}, {"input": "7 7 8 11\n", "output": "(7) + (7) = 14, left: 14, 8, 11\n(14) / (11) = 14/11, left: 14/11, 8\n(8) * (14/11) = 112/11, left: 112/11\n(14/11) - (8) = -74/11, left: -74/11\n(14/11) / (8) = 7/44, left: 7/44\n(8) - (14/11) = 74/11, left: 74/11\n(14) - (11) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(3) - (8) = -5, left: -5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 7) - 11))"}, {"input": "7 7 8 11\n", "output": "(7) - (7) = 0, left: 0, 8, 11\n(0) - (8) = -8, left: -8, 11\n(7) - (7) = 0, left: 0, 8, 11\n(11) - (8) = 3, left: 3, 0\n(0) - (3) = -3, left: -3\n(7) + (7) = 14, left: 14, 8, 11\n(8) - (14) = -6, left: -6, 11\n(11) / (-6) = -11/6, left: -11/6\n(14) - (11) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 7) - 11))"}, {"input": "7 7 8 11\n", "output": "(7) - (7) = 0, left: 0, 8, 11\n(7) * (7) = 49, left: 49, 8, 11\n(7) / (7) = 1, left: 1, 8, 11\n(7) / (7) = 1, left: 1, 8, 11\n(11) * (1) = 11, left: 11, 8\n(11) / (8) = 11/8, left: 11/8\n(11) - (1) = 10, left: 10, 8\n(7) + (7) = 14, left: 14, 8, 11\n(14) - (11) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((7 + 7) - 11))"}, {"input": "7 7 8 11\n", "output": "(11) - (7) = 4, left: 4, 7, 8\n(8) / (4) = 2, left: 2, 7\n(7) + (4) = 11, left: 11, 8\n(11) - (8) = 3, left: 3\n(8) - (11) = -3, left: -3\n(4) / (7) = 4/7, left: 4/7, 8\n(4/7) - (8) = -52/7, left: -52/7\n(7) * (4) = 28, left: 28, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (11 - 7)))"}, {"input": "7 7 8 11\n", "output": "(8) / (11) = 8/11, left: 8/11, 7, 7\n(11) - (8) = 3, left: 3, 7, 7\n(8) + (11) = 19, left: 19, 7, 7\n(8) - (11) = -3, left: -3, 7, 7\n(11) / (8) = 11/8, left: 11/8, 7, 7\n(7) + (11/8) = 67/8, left: 67/8, 7\n(7) / (7) = 1, left: 1, 11/8\n(8) * (11) = 88, left: 88, 7, 7\n(7) + (11) = 18, left: 18, 7, 8\n(8) + (18) = 26, left: 26, 7\n(11) - (7) = 4, left: 4, 7, 8\n(4) - (7) = -3, left: -3, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (11 - 7)))"}, {"input": "1 12 5 3\n", "output": "(5) / (3) = 5/3, left: 5/3, 1, 12\n(1) * (12) = 12, left: 12, 5/3\n(1) / (5/3) = 3/5, left: 3/5, 12\n(5) - (3) = 2, left: 2, 1, 12\n(12) / (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (12 / 1))"}, {"input": "1 12 5 3\n", "output": "(12) / (3) = 4, left: 4, 1, 5\n(5) / (1) = 5, left: 5, 4\n(1) * (5) = 5, left: 5, 4\n(4) / (5) = 4/5, left: 4/5\n(5) - (4) = 1, left: 1\n(1) / (5) = 1/5, left: 1/5, 4\n(4) + (1/5) = 21/5, left: 21/5\n(4) * (1/5) = 4/5, left: 4/5\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((12 / 3) * (1 + 5))"}, {"input": "1 12 5 3\n", "output": "(12) - (5) = 7, left: 7, 1, 3\n(1) * (7) = 7, left: 7, 3\n(3) / (7) = 3/7, left: 3/7\n(7) - (1) = 6, left: 6, 3\n(3) * (6) = 18, left: 18\n(1) / (7) = 1/7, left: 1/7, 3\n(3) + (1/7) = 22/7, left: 22/7\n(1) + (7) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 + (12 - 5)))"}, {"input": "1 12 5 3\n", "output": "(5) / (12) = 5/12, left: 5/12, 1, 3\n(3) * (5/12) = 5/4, left: 5/4, 1\n(1) / (3) = 1/3, left: 1/3, 5/12\n(12) * (5) = 60, left: 60, 1, 3\n(60) / (1) = 60, left: 60, 3\n(12) - (5) = 7, left: 7, 1, 3\n(3) - (7) = -4, left: -4, 1\n(7) - (3) = 4, left: 4, 1\n(1) + (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 + (12 - 5)))"}, {"input": "1 12 5 3\n", "output": "(5) / (3) = 5/3, left: 5/3, 1, 12\n(1) * (12) = 12, left: 12, 5/3\n(1) + (5/3) = 8/3, left: 8/3, 12\n(1) - (5/3) = -2/3, left: -2/3, 12\n(5/3) / (12) = 5/36, left: 5/36, 1\n(12) - (5/3) = 31/3, left: 31/3, 1\n(5) - (3) = 2, left: 2, 1, 12\n(1) - (12) = -11, left: -11, 2\n(12) / (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (12 / 1))"}, {"input": "1 9 2 7\n", "output": "(1) - (2) = -1, left: -1, 9, 7\n(2) / (1) = 2, left: 2, 9, 7\n(2) - (9) = -7, left: -7, 1, 7\n(9) - (2) = 7, left: 7, 1, 7\n(1) + (7) = 8, left: 8, 7\n(9) / (2) = 9/2, left: 9/2, 1, 7\n(7) - (1) = 6, left: 6, 9/2\n(9) * (2) = 18, left: 18, 1, 7\n(7) + (18) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((7 + (9 * 2)) - 1)"}, {"input": "1 9 2 7\n", "output": "(9) - (1) = 8, left: 8, 2, 7\n(8) / (2) = 4, left: 4, 7\n(2) * (7) = 14, left: 14, 8\n(1) / (9) = 1/9, left: 1/9, 2, 7\n(1/9) / (7) = 1/63, left: 1/63, 2\n(9) / (1) = 9, left: 9, 2, 7\n(9) / (2) = 9/2, left: 9/2, 7\n(1) + (9) = 10, left: 10, 2, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "1 9 2 7\n", "output": "(1) + (2) = 3, left: 3, 9, 7\n(2) - (1) = 1, left: 1, 9, 7\n(9) - (1) = 8, left: 8, 7\n(1) * (9) = 9, left: 9, 2, 7\n(7) / (2) = 7/2, left: 7/2, 9\n(1) - (9) = -8, left: -8, 2, 7\n(7) - (2) = 5, left: 5, -8\n(1) + (9) = 10, left: 10, 2, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "1 9 2 7\n", "output": "(1) + (9) = 10, left: 10, 2, 7\n(7) - (10) = -3, left: -3, 2\n(2) * (-3) = -6, left: -6\n(10) / (7) = 10/7, left: 10/7, 2\n(2) - (10) = -8, left: -8, 7\n(10) / (2) = 5, left: 5, 7\n(2) * (10) = 20, left: 20, 7\n(2) + (7) = 9, left: 9, 10\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "1 9 2 7\n", "output": "(9) / (7) = 9/7, left: 9/7, 1, 2\n(1) / (2) = 1/2, left: 1/2, 9/7\n(1) - (2) = -1, left: -1, 9/7\n(2) / (1) = 2, left: 2, 9, 7\n(2) - (1) = 1, left: 1, 9, 7\n(1) / (7) = 1/7, left: 1/7, 9\n(1) * (9) = 9, left: 9, 2, 7\n(1) + (9) = 10, left: 10, 2, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "1 9 2 7\n", "output": "(1) - (2) = -1, left: -1, 9, 7\n(7) * (-1) = -7, left: -7, 9\n(-7) / (9) = -7/9, left: -7/9\n(7) + (-1) = 6, left: 6, 9\n(1) * (2) = 2, left: 2, 9, 7\n(1) + (2) = 3, left: 3, 9, 7\n(9) + (7) = 16, left: 16, 3\n(9) - (2) = 7, left: 7, 1, 7\n(2) / (9) = 2/9, left: 2/9, 1, 7\n(9) * (2) = 18, left: 18, 1, 7\n(18) / (7) = 18/7, left: 18/7, 1\n(1) * (18/7) = 18/7, left: 18/7\n(7) + (18) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((7 + (9 * 2)) - 1)"}, {"input": "1 9 2 7\n", "output": "(1) / (2) = 1/2, left: 1/2, 9, 7\n(1) - (2) = -1, left: -1, 9, 7\n(9) / (7) = 9/7, left: 9/7, -1\n(1) + (2) = 3, left: 3, 9, 7\n(9) * (3) = 27, left: 27, 7\n(1) * (2) = 2, left: 2, 9, 7\n(2) / (1) = 2, left: 2, 9, 7\n(7) - (9) = -2, left: -2, 2\n(9) - (1) = 8, left: 8, 2, 7\n(7) * (8) = 56, left: 56, 2\n(1) * (9) = 9, left: 9, 2, 7\n(1) + (9) = 10, left: 10, 2, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "1 9 2 7\n", "output": "(1) * (2) = 2, left: 2, 9, 7\n(9) / (2) = 9/2, left: 9/2, 7\n(9) + (2) = 11, left: 11, 7\n(1) + (2) = 3, left: 3, 9, 7\n(3) / (9) = 1/3, left: 1/3, 7\n(2) - (1) = 1, left: 1, 9, 7\n(7) - (9) = -2, left: -2, 1\n(1) / (2) = 1/2, left: 1/2, 9, 7\n(7) * (1/2) = 7/2, left: 7/2, 9\n(1) * (9) = 9, left: 9, 2, 7\n(2) - (9) = -7, left: -7, 7\n(1) + (9) = 10, left: 10, 2, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "1 9 2 7\n", "output": "(9) - (1) = 8, left: 8, 2, 7\n(1) - (9) = -8, left: -8, 2, 7\n(2) / (7) = 2/7, left: 2/7, -8\n(-8) / (2) = -4, left: -4, 7\n(1) / (9) = 1/9, left: 1/9, 2, 7\n(7) - (1/9) = 62/9, left: 62/9, 2\n(1) * (9) = 9, left: 9, 2, 7\n(2) + (7) = 9, left: 9, 9\n(2) - (9) = -7, left: -7, 7\n(-7) - (7) = -14, left: -14\n(9) - (2) = 7, left: 7, 7\n(1) + (9) = 10, left: 10, 2, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "10 3 10 8\n", "output": "(10) * (8) = 80, left: 80, 10, 3\n(3) + (80) = 83, left: 83, 10\n(80) - (3) = 77, left: 77, 10\n(10) * (77) = 770, left: 770\n(3) * (80) = 240, left: 240, 10\n(240) / (10) = 24, left: 24\nreach 24! expression: ((3 * (10 * 8)) / 10)"}, {"input": "10 3 10 8\n", "output": "(3) - (10) = -7, left: -7, 10, 8\n(10) - (8) = 2, left: 2, -7\n(8) - (10) = -2, left: -2, -7\n(8) / (-7) = -8/7, left: -8/7, 10\n(10) + (-7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 + (3 - 10)))"}, {"input": "10 3 10 8\n", "output": "(10) / (10) = 1, left: 1, 3, 8\n(1) / (8) = 1/8, left: 1/8, 3\n(1/8) - (3) = -23/8, left: -23/8\n(3) - (1/8) = 23/8, left: 23/8\n(3) + (1/8) = 25/8, left: 25/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: (3 / ((10 / 10) / 8))"}, {"input": "10 3 10 8\n", "output": "(3) - (8) = -5, left: -5, 10, 10\n(10) * (-5) = -50, left: -50, 10\n(10) / (10) = 1, left: 1, -5\n(3) * (8) = 24, left: 24, 10, 10\n(10) / (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (10 / 10))"}, {"input": "10 3 10 8\n", "output": "(10) * (8) = 80, left: 80, 10, 3\n(3) + (80) = 83, left: 83, 10\n(10) - (83) = -73, left: -73\n(83) - (10) = 73, left: 73\n(3) / (80) = 3/80, left: 3/80, 10\n(3/80) - (10) = -797/80, left: -797/80\n(10) - (3/80) = 797/80, left: 797/80\n(3) * (80) = 240, left: 240, 10\n(10) - (240) = -230, left: -230\n(240) / (10) = 24, left: 24\nreach 24! expression: ((3 * (10 * 8)) / 10)"}, {"input": "10 3 10 8\n", "output": "(3) - (10) = -7, left: -7, 10, 8\n(10) * (8) = 80, left: 80, -7\n(8) / (10) = 4/5, left: 4/5, -7\n(10) + (8) = 18, left: 18, -7\n(8) * (-7) = -56, left: -56, 10\n(10) / (-56) = -5/28, left: -5/28\n(10) + (-56) = -46, left: -46\n(-7) - (10) = -17, left: -17, 8\n(10) + (-7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 + (3 - 10)))"}, {"input": "10 3 10 8\n", "output": "(3) - (8) = -5, left: -5, 10, 10\n(10) + (-5) = 5, left: 5, 10\n(-5) / (10) = -1/2, left: -1/2, 10\n(10) / (-1/2) = -20, left: -20\n(10) * (-5) = -50, left: -50, 10\n(10) + (10) = 20, left: 20, -5\n(10) * (10) = 100, left: 100, -5\n(3) * (8) = 24, left: 24, 10, 10\n(10) / (10) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (10 / 10))"}, {"input": "10 3 10 8\n", "output": "(3) / (8) = 3/8, left: 3/8, 10, 10\n(3/8) - (10) = -77/8, left: -77/8, 10\n(3) - (8) = -5, left: -5, 10, 10\n(-5) / (10) = -1/2, left: -1/2, 10\n(10) / (10) = 1, left: 1, -5\n(8) - (3) = 5, left: 5, 10, 10\n(10) + (10) = 20, left: 20, 5\n(3) * (8) = 24, left: 24, 10, 10\n(10) - (10) = 0, left: 0, 24\n(24) - (0) = 24, left: 24\nreach 24! expression: ((3 * 8) - (10 - 10))"}, {"input": "10 3 10 8\n", "output": "(10) / (10) = 1, left: 1, 3, 8\n(1) / (8) = 1/8, left: 1/8, 3\n(1/8) / (3) = 1/24, left: 1/24\n(1/8) - (3) = -23/8, left: -23/8\n(3) - (1/8) = 23/8, left: 23/8\n(3) + (1/8) = 25/8, left: 25/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: (3 / ((10 / 10) / 8))"}, {"input": "10 3 10 8\n", "output": "(10) / (10) = 1, left: 1, 3, 8\n(1) / (8) = 1/8, left: 1/8, 3\n(1/8) / (3) = 1/24, left: 1/24\n(1/8) - (3) = -23/8, left: -23/8\n(3) - (1/8) = 23/8, left: 23/8\n(3) + (1/8) = 25/8, left: 25/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: (3 / ((10 / 10) / 8))"}, {"input": "10 3 10 8\n", "output": "(10) / (10) = 1, left: 1, 3, 8\n(1) / (8) = 1/8, left: 1/8, 3\n(1/8) / (3) = 1/24, left: 1/24\n(1/8) - (3) = -23/8, left: -23/8\n(3) - (1/8) = 23/8, left: 23/8\n(3) + (1/8) = 25/8, left: 25/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: (3 / ((10 / 10) / 8))"}, {"input": "6 2 9 6\n", "output": "(6) - (2) = 4, left: 4, 9, 6\n(6) / (9) = 2/3, left: 2/3, 4\n(4) / (2/3) = 6, left: 6\n(6) / (2) = 3, left: 3, 9, 6\n(9) + (3) = 12, left: 12, 6\n(6) - (12) = -6, left: -6\n(6) - (3) = 3, left: 3, 9\n(6) + (2) = 8, left: 8, 9, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((6 + 2) * (9 - 6))"}, {"input": "6 2 9 6\n", "output": "(6) * (9) = 54, left: 54, 2, 6\n(2) * (54) = 108, left: 108, 6\n(2) - (54) = -52, left: -52, 6\n(54) / (2) = 27, left: 27, 6\n(27) / (6) = 9/2, left: 9/2\n(2) / (6) = 1/3, left: 1/3, 54\n(2) + (6) = 8, left: 8, 54\n(6) - (2) = 4, left: 4, 54\n(54) - (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: (((6 * 9) - 6) / 2)"}, {"input": "6 2 9 6\n", "output": "(6) / (9) = 2/3, left: 2/3, 6, 2\n(2) - (2/3) = 4/3, left: 4/3, 6\n(2/3) / (2) = 1/3, left: 1/3, 6\n(9) / (6) = 3/2, left: 3/2, 6, 2\n(2) / (6) = 1/3, left: 1/3, 3/2\n(6) / (3/2) = 4, left: 4, 2\n(4) / (2) = 2, left: 2\n(9) + (6) = 15, left: 15, 6, 2\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (9 + 6)) - 6)"}, {"input": "6 2 9 6\n", "output": "(6) + (2) = 8, left: 8, 9, 6\n(9) / (8) = 9/8, left: 9/8, 6\n(8) - (9) = -1, left: -1, 6\n(9) - (8) = 1, left: 1, 6\n(6) - (1) = 5, left: 5\n(9) / (6) = 3/2, left: 3/2, 8\n(8) + (3/2) = 19/2, left: 19/2\n(6) - (9) = -3, left: -3, 8\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((6 + 2) * (9 - 6))"}, {"input": "6 2 9 6\n", "output": "(6) / (2) = 3, left: 3, 9, 6\n(6) / (9) = 2/3, left: 2/3, 3\n(2) / (6) = 1/3, left: 1/3, 9, 6\n(9) / (1/3) = 27, left: 27, 6\n(6) * (2) = 12, left: 12, 9, 6\n(12) - (9) = 3, left: 3, 6\n(3) - (6) = -3, left: -3\n(6) + (2) = 8, left: 8, 9, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((6 + 2) * (9 - 6))"}, {"input": "6 2 9 6\n", "output": "(6) / (2) = 3, left: 3, 9, 6\n(9) - (3) = 6, left: 6, 6\n(9) - (6) = 3, left: 3, 3\n(3) - (3) = 0, left: 0\n(2) / (6) = 1/3, left: 1/3, 9, 6\n(9) * (6) = 54, left: 54, 1/3\n(9) * (1/3) = 3, left: 3, 6\n(6) * (2) = 12, left: 12, 9, 6\n(9) + (6) = 15, left: 15, 12\n(6) / (12) = 1/2, left: 1/2, 9\n(6) + (2) = 8, left: 8, 9, 6\n(6) - (9) = -3, left: -3, 8\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((6 + 2) * (9 - 6))"}, {"input": "6 2 9 6\n", "output": "(6) - (2) = 4, left: 4, 9, 6\n(9) * (6) = 54, left: 54, 4\n(54) - (4) = 50, left: 50\n(4) - (9) = -5, left: -5, 6\n(-5) / (6) = -5/6, left: -5/6\n(4) / (9) = 4/9, left: 4/9, 6\n(2) / (6) = 1/3, left: 1/3, 9, 6\n(6) / (2) = 3, left: 3, 9, 6\n(6) - (9) = -3, left: -3, 3\n(6) / (3) = 2, left: 2, 9\n(6) + (2) = 8, left: 8, 9, 6\n(9) / (6) = 3/2, left: 3/2, 8\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((6 + 2) * (9 - 6))"}, {"input": "2 4 5 3\n", "output": "(5) / (4) = 5/4, left: 5/4, 2, 3\n(4) * (5) = 20, left: 20, 2, 3\n(20) / (2) = 10, left: 10, 3\n(4) - (5) = -1, left: -1, 2, 3\n(-1) - (3) = -4, left: -4, 2\n(3) + (-1) = 2, left: 2, 2\n(4) / (5) = 4/5, left: 4/5, 2, 3\n(4) + (5) = 9, left: 9, 2, 3\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 + (4 + 5)))"}, {"input": "2 4 5 3\n", "output": "(2) + (3) = 5, left: 5, 4, 5\n(4) + (5) = 9, left: 9, 5\n(4) / (5) = 4/5, left: 4/5, 5\n(4/5) - (5) = -21/5, left: -21/5\n(4) / (5) = 4/5, left: 4/5, 5\n(4/5) / (5) = 4/25, left: 4/25\n(4) * (5) = 20, left: 20, 5\n(2) - (3) = -1, left: -1, 4, 5\n(5) - (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 - (2 - 3)))"}, {"input": "2 4 5 3\n", "output": "(4) / (2) = 2, left: 2, 5, 3\n(2) - (4) = -2, left: -2, 5, 3\n(2) * (4) = 8, left: 8, 5, 3\n(3) / (5) = 3/5, left: 3/5, 8\n(4) - (2) = 2, left: 2, 5, 3\n(2) / (3) = 2/3, left: 2/3, 4, 5\n(5) - (4) = 1, left: 1, 2/3\n(3) - (2) = 1, left: 1, 4, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (3 - 2)))"}, {"input": "2 4 5 3\n", "output": "(5) / (4) = 5/4, left: 5/4, 2, 3\n(2) * (5/4) = 5/2, left: 5/2, 3\n(4) + (5) = 9, left: 9, 2, 3\n(2) - (9) = -7, left: -7, 3\n(2) / (3) = 2/3, left: 2/3, 9\n(3) - (2) = 1, left: 1, 9\n(3) / (2) = 3/2, left: 3/2, 9\n(3/2) / (9) = 1/6, left: 1/6\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 + (4 + 5)))"}, {"input": "2 4 5 3\n", "output": "(2) / (5) = 2/5, left: 2/5, 4, 3\n(3) + (2/5) = 17/5, left: 17/5, 4\n(4) - (2/5) = 18/5, left: 18/5, 3\n(2) * (5) = 10, left: 10, 4, 3\n(4) / (10) = 2/5, left: 2/5, 3\n(2) + (5) = 7, left: 7, 4, 3\n(4) / (7) = 4/7, left: 4/7, 3\n(5) - (2) = 3, left: 3, 4, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 + (5 - 2)))"}, {"input": "2 4 5 3\n", "output": "(2) - (4) = -2, left: -2, 5, 3\n(3) * (-2) = -6, left: -6, 5\n(2) * (4) = 8, left: 8, 5, 3\n(3) / (5) = 3/5, left: 3/5, 8\n(4) - (2) = 2, left: 2, 5, 3\n(3) / (2) = 3/2, left: 3/2, 4, 5\n(4) * (3/2) = 6, left: 6, 5\n(5) - (6) = -1, left: -1\n(2) + (3) = 5, left: 5, 4, 5\n(2) / (3) = 2/3, left: 2/3, 4, 5\n(4) * (2/3) = 8/3, left: 8/3, 5\n(3) - (2) = 1, left: 1, 4, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (3 - 2)))"}, {"input": "2 4 5 3\n", "output": "(2) + (3) = 5, left: 5, 4, 5\n(4) + (5) = 9, left: 9, 5\n(9) / (5) = 9/5, left: 9/5\n(4) * (5) = 20, left: 20, 5\n(20) - (5) = 15, left: 15\n(5) - (5) = 0, left: 0, 4\n(5) / (5) = 1, left: 1, 4\n(5) - (4) = 1, left: 1, 5\n(5) - (1) = 4, left: 4\n(2) - (3) = -1, left: -1, 4, 5\n(5) * (-1) = -5, left: -5, 4\n(4) - (-5) = 9, left: 9\n(5) - (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 - (2 - 3)))"}, {"input": "10 1 13 1\n", "output": "(13) - (10) = 3, left: 3, 1, 1\n(10) / (13) = 10/13, left: 10/13, 1, 1\n(1) - (10/13) = 3/13, left: 3/13, 1\n(10) + (13) = 23, left: 23, 1, 1\n(1) * (23) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (1 * (10 + 13)))"}, {"input": "10 1 13 1\n", "output": "(10) - (1) = 9, left: 9, 13, 1\n(1) - (10) = -9, left: -9, 13, 1\n(10) / (1) = 10, left: 10, 13, 1\n(1) - (13) = -12, left: -12, 10\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((10 / 1) + (13 + 1))"}, {"input": "10 1 13 1\n", "output": "(13) + (1) = 14, left: 14, 10, 1\n(10) * (14) = 140, left: 140, 1\n(10) / (14) = 5/7, left: 5/7, 1\n(1) - (5/7) = 2/7, left: 2/7\n(10) + (14) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (10 + (13 + 1)))"}, {"input": "10 1 13 1\n", "output": "(1) * (1) = 1, left: 1, 10, 13\n(1) - (10) = -9, left: -9, 13\n(10) + (1) = 11, left: 11, 13\n(11) - (13) = -2, left: -2\n(13) * (11) = 143, left: 143\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (1 * 1)))"}, {"input": "10 1 13 1\n", "output": "(1) - (10) = -9, left: -9, 13, 1\n(1) + (-9) = -8, left: -8, 13\n(1) - (-9) = 10, left: 10, 13\n(1) - (13) = -12, left: -12, -9\n(13) + (-9) = 4, left: 4, 1\n(1) - (4) = -3, left: -3\n(-9) - (13) = -22, left: -22, 1\n(10) / (1) = 10, left: 10, 13, 1\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((10 / 1) + (13 + 1))"}, {"input": "10 1 13 1\n", "output": "(13) - (10) = 3, left: 3, 1, 1\n(10) - (13) = -3, left: -3, 1, 1\n(1) - (-3) = 4, left: 4, 1\n(13) / (10) = 13/10, left: 13/10, 1, 1\n(1) / (13/10) = 10/13, left: 10/13, 1\n(10) / (13) = 10/13, left: 10/13, 1, 1\n(1) * (1) = 1, left: 1, 10/13\n(10) + (13) = 23, left: 23, 1, 1\n(1) * (23) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (1 * (10 + 13)))"}, {"input": "10 1 13 1\n", "output": "(13) + (1) = 14, left: 14, 10, 1\n(14) - (10) = 4, left: 4, 1\n(1) + (4) = 5, left: 5\n(10) * (14) = 140, left: 140, 1\n(1) * (140) = 140, left: 140\n(10) - (14) = -4, left: -4, 1\n(10) / (14) = 5/7, left: 5/7, 1\n(5/7) / (1) = 5/7, left: 5/7\n(10) + (14) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (10 + (13 + 1)))"}, {"input": "10 1 13 1\n", "output": "(1) * (1) = 1, left: 1, 10, 13\n(1) / (10) = 1/10, left: 1/10, 13\n(1) - (10) = -9, left: -9, 13\n(-9) - (13) = -22, left: -22\n(10) / (1) = 10, left: 10, 13\n(13) - (10) = 3, left: 3\n(13) + (10) = 23, left: 23\n(10) + (1) = 11, left: 11, 13\n(11) / (13) = 11/13, left: 11/13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (1 * 1)))"}, {"input": "6 2 3 13\n", "output": "(3) / (13) = 3/13, left: 3/13, 6, 2\n(2) / (3/13) = 26/3, left: 26/3, 6\n(3/13) - (2) = -23/13, left: -23/13, 6\n(2) + (3/13) = 29/13, left: 29/13, 6\n(6) / (3/13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((6 / (3 / 13)) - 2)"}, {"input": "6 2 3 13\n", "output": "(3) - (6) = -3, left: -3, 2, 13\n(2) - (13) = -11, left: -11, -3\n(-3) / (2) = -3/2, left: -3/2, 13\n(3) / (6) = 1/2, left: 1/2, 2, 13\n(2) * (13) = 26, left: 26, 1/2\n(2) + (13) = 15, left: 15, 1/2\n(2) - (1/2) = 3/2, left: 3/2, 13\n(3/2) - (13) = -23/2, left: -23/2\n(13) / (1/2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 / (3 / 6)) - 2)"}, {"input": "6 2 3 13\n", "output": "(3) / (13) = 3/13, left: 3/13, 6, 2\n(2) * (3/13) = 6/13, left: 6/13, 6\n(2) - (6) = -4, left: -4, 3/13\n(6) * (2) = 12, left: 12, 3/13\n(3/13) / (12) = 1/52, left: 1/52\n(2) / (6) = 1/3, left: 1/3, 3/13\n(6) + (3/13) = 81/13, left: 81/13, 2\n(6) / (3/13) = 26, left: 26, 2\n(26) / (2) = 13, left: 13\n(26) - (2) = 24, left: 24\nreach 24! expression: ((6 / (3 / 13)) - 2)"}, {"input": "6 2 3 13\n", "output": "(13) / (6) = 13/6, left: 13/6, 2, 3\n(3) / (13/6) = 18/13, left: 18/13, 2\n(2) + (13/6) = 25/6, left: 25/6, 3\n(6) - (13) = -7, left: -7, 2, 3\n(2) * (3) = 6, left: 6, -7\n(6) / (13) = 6/13, left: 6/13, 2, 3\n(6/13) - (3) = -33/13, left: -33/13, 2\n(6) + (13) = 19, left: 19, 2, 3\n(2) + (19) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (2 + (6 + 13)))"}, {"input": "6 2 3 13\n", "output": "(2) - (6) = -4, left: -4, 3, 13\n(2) / (6) = 1/3, left: 1/3, 3, 13\n(13) * (1/3) = 13/3, left: 13/3, 3\n(3) * (1/3) = 1, left: 1, 13\n(6) * (2) = 12, left: 12, 3, 13\n(13) / (12) = 13/12, left: 13/12, 3\n(6) / (2) = 3, left: 3, 3, 13\n(6) + (2) = 8, left: 8, 3, 13\n(3) + (8) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (3 + (6 + 2)))"}, {"input": "6 2 3 13\n", "output": "(6) - (2) = 4, left: 4, 3, 13\n(13) / (4) = 13/4, left: 13/4, 3\n(3) / (4) = 3/4, left: 3/4, 13\n(13) * (3/4) = 39/4, left: 39/4\n(2) - (6) = -4, left: -4, 3, 13\n(13) / (3) = 13/3, left: 13/3, -4\n(3) + (-4) = -1, left: -1, 13\n(6) + (2) = 8, left: 8, 3, 13\n(3) + (8) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (3 + (6 + 2)))"}, {"input": "5 2 2 3\n", "output": "(5) / (3) = 5/3, left: 5/3, 2, 2\n(2) - (5/3) = 1/3, left: 1/3, 2\n(2) - (1/3) = 5/3, left: 5/3\n(2) / (3) = 2/3, left: 2/3, 5, 2\n(5) + (2) = 7, left: 7, 2/3\n(2) - (3) = -1, left: -1, 5, 2\n(2) * (3) = 6, left: 6, 5, 2\n(5) * (2) = 10, left: 10, 2, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(2) - (2) = 0, left: 0, 5, 3\n(5) / (3) = 5/3, left: 5/3, 0\n(5) - (3) = 2, left: 2, 2, 2\n(2) / (2) = 1, left: 1, 2\n(3) - (5) = -2, left: -2, 2, 2\n(5) - (2) = 3, left: 3, 2, 3\n(3) - (2) = 1, left: 1, 3\n(5) * (2) = 10, left: 10, 2, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(5) - (2) = 3, left: 3, 2, 3\n(2) - (5) = -3, left: -3, 2, 3\n(3) - (2) = 1, left: 1, -3\n(5) / (2) = 5/2, left: 5/2, 2, 3\n(3) - (5/2) = 1/2, left: 1/2, 2\n(2) / (5) = 2/5, left: 2/5, 2, 3\n(3) - (2/5) = 13/5, left: 13/5, 2\n(5) * (2) = 10, left: 10, 2, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(2) / (5) = 2/5, left: 2/5, 2, 3\n(2/5) / (3) = 2/15, left: 2/15, 2\n(5) / (2) = 5/2, left: 5/2, 2, 3\n(2) / (5/2) = 4/5, left: 4/5, 3\n(5) * (2) = 10, left: 10, 2, 3\n(10) / (2) = 5, left: 5, 3\n(2) + (10) = 12, left: 12, 3\n(3) / (12) = 1/4, left: 1/4\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(2) / (2) = 1, left: 1, 5, 3\n(5) + (1) = 6, left: 6, 3\n(5) + (2) = 7, left: 7, 2, 3\n(5) - (2) = 3, left: 3, 2, 3\n(2) + (3) = 5, left: 5, 3\n(2) - (5) = -3, left: -3, 2, 3\n(3) * (-3) = -9, left: -9, 2\n(5) * (2) = 10, left: 10, 2, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(3) - (2) = 1, left: 1, 5, 2\n(2) - (3) = -1, left: -1, 5, 2\n(2) * (3) = 6, left: 6, 5, 2\n(2) / (2) = 1, left: 1, 5, 3\n(5) / (1) = 5, left: 5, 3\n(3) - (5) = -2, left: -2\n(5) + (3) = 8, left: 8, 2, 2\n(3) - (5) = -2, left: -2, 2, 2\n(5) - (2) = 3, left: 3, 2, 3\n(3) - (2) = 1, left: 1, 3\n(5) / (2) = 5/2, left: 5/2, 2, 3\n(5) * (2) = 10, left: 10, 2, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(2) + (2) = 4, left: 4, 5, 3\n(3) / (2) = 3/2, left: 3/2, 5, 2\n(2) - (5) = -3, left: -3, 3/2\n(3) - (2) = 1, left: 1, 5, 2\n(2) / (3) = 2/3, left: 2/3, 5, 2\n(2) - (2/3) = 4/3, left: 4/3, 5\n(2) - (3) = -1, left: -1, 5, 2\n(5) / (2) = 5/2, left: 5/2, -1\n(5) / (2) = 5/2, left: 5/2, 2, 3\n(2) - (5) = -3, left: -3, 2, 3\n(2) + (-3) = -1, left: -1, 3\n(5) * (2) = 10, left: 10, 2, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(3) / (5) = 3/5, left: 3/5, 2, 2\n(2) * (3) = 6, left: 6, 5, 2\n(2) - (3) = -1, left: -1, 5, 2\n(5) + (2) = 7, left: 7, -1\n(2) * (3) = 6, left: 6, 5, 2\n(3) / (2) = 3/2, left: 3/2, 5, 2\n(3/2) - (5) = -7/2, left: -7/2, 2\n(2) + (3) = 5, left: 5, 5, 2\n(5) - (5) = 0, left: 0, 2\n(0) / (2) = 0, left: 0\n(5) + (2) = 7, left: 7, 2, 3\n(5) * (2) = 10, left: 10, 2, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "6 8 2 2\n", "output": "(8) - (2) = 6, left: 6, 6, 2\n(6) - (2) = 4, left: 4, 6\n(4) - (6) = -2, left: -2\n(4) / (6) = 2/3, left: 2/3\n(6) / (4) = 3/2, left: 3/2\n(6) + (4) = 10, left: 10\n(6) - (4) = 2, left: 2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((8 - 2) - 2))"}, {"input": "6 8 2 2\n", "output": "(8) * (2) = 16, left: 16, 6, 2\n(2) / (6) = 1/3, left: 1/3, 16\n(6) * (2) = 12, left: 12, 16\n(16) * (12) = 192, left: 192\n(6) / (2) = 3, left: 3, 16\n(16) + (3) = 19, left: 19\n(3) / (16) = 3/16, left: 3/16\n(2) - (6) = -4, left: -4, 16\n(6) + (2) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((8 * 2) + (6 + 2))"}, {"input": "6 8 2 2\n", "output": "(6) + (2) = 8, left: 8, 8, 2\n(2) - (8) = -6, left: -6, 8\n(8) - (-6) = 14, left: 14\n(8) / (-6) = -4/3, left: -4/3\n(2) + (8) = 10, left: 10, 8\n(8) - (10) = -2, left: -2\n(10) - (8) = 2, left: 2\n(2) * (8) = 16, left: 16, 8\n(16) - (8) = 8, left: 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (2 * (6 + 2)))"}, {"input": "6 8 2 2\n", "output": "(2) * (2) = 4, left: 4, 6, 8\n(4) / (6) = 2/3, left: 2/3, 8\n(6) - (4) = 2, left: 2, 8\n(6) + (4) = 10, left: 10, 8\n(6) + (8) = 14, left: 14, 4\n(14) - (4) = 10, left: 10\n(4) / (8) = 1/2, left: 1/2, 6\n(1/2) / (6) = 1/12, left: 1/12\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 - (2 * 2)))"}, {"input": "6 8 2 2\n", "output": "(8) - (2) = 6, left: 6, 6, 2\n(6) - (2) = 4, left: 4, 6\n(4) - (6) = -2, left: -2\n(4) / (6) = 2/3, left: 2/3\n(6) / (4) = 3/2, left: 3/2\n(6) + (4) = 10, left: 10\n(6) - (4) = 2, left: 2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((8 - 2) - 2))"}, {"input": "6 8 2 2\n", "output": "(6) + (2) = 8, left: 8, 8, 2\n(2) - (8) = -6, left: -6, 8\n(-6) - (8) = -14, left: -14\n(8) - (-6) = 14, left: 14\n(8) / (-6) = -4/3, left: -4/3\n(8) * (-6) = -48, left: -48\n(8) + (-6) = 2, left: 2\n(2) + (8) = 10, left: 10, 8\n(8) - (10) = -2, left: -2\n(10) - (8) = 2, left: 2\n(8) + (10) = 18, left: 18\n(10) / (8) = 5/4, left: 5/4\n(2) * (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (2 * (6 + 2)))"}, {"input": "6 8 2 2\n", "output": "(8) - (2) = 6, left: 6, 6, 2\n(6) - (2) = 4, left: 4, 6\n(4) - (6) = -2, left: -2\n(4) / (6) = 2/3, left: 2/3\n(6) / (4) = 3/2, left: 3/2\n(6) + (4) = 10, left: 10\n(6) - (4) = 2, left: 2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((8 - 2) - 2))"}, {"input": "12 11 2 7\n", "output": "(7) / (11) = 7/11, left: 7/11, 12, 2\n(12) * (7/11) = 84/11, left: 84/11, 2\n(12) / (2) = 6, left: 6, 7/11\n(11) + (7) = 18, left: 18, 12, 2\n(12) / (2) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((11 + 7) + (12 / 2))"}, {"input": "12 11 2 7\n", "output": "(12) / (7) = 12/7, left: 12/7, 11, 2\n(11) / (12/7) = 77/12, left: 77/12, 2\n(12) + (7) = 19, left: 19, 11, 2\n(11) - (2) = 9, left: 9, 12, 7\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 2) - 7))"}, {"input": "12 11 2 7\n", "output": "(11) - (7) = 4, left: 4, 12, 2\n(2) * (4) = 8, left: 8, 12\n(8) / (12) = 2/3, left: 2/3\n(2) / (4) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 / (11 - 7)))"}, {"input": "12 11 2 7\n", "output": "(11) - (7) = 4, left: 4, 12, 2\n(2) * (4) = 8, left: 8, 12\n(8) / (12) = 2/3, left: 2/3\n(8) - (12) = -4, left: -4\n(12) / (8) = 3/2, left: 3/2\n(2) / (4) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(12) * (1/2) = 6, left: 6\n(12) + (1/2) = 25/2, left: 25/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 / (11 - 7)))"}, {"input": "12 11 2 7\n", "output": "(12) / (7) = 12/7, left: 12/7, 11, 2\n(12) + (7) = 19, left: 19, 11, 2\n(12) * (7) = 84, left: 84, 11, 2\n(7) - (12) = -5, left: -5, 11, 2\n(2) - (11) = -9, left: -9, 12, 7\n(-9) / (12) = -3/4, left: -3/4, 7\n(7) / (-3/4) = -28/3, left: -28/3\n(11) - (2) = 9, left: 9, 12, 7\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 2) - 7))"}, {"input": "12 11 2 7\n", "output": "(7) - (2) = 5, left: 5, 12, 11\n(2) * (7) = 14, left: 14, 12, 11\n(12) / (14) = 6/7, left: 6/7, 11\n(12) - (11) = 1, left: 1, 14\n(11) / (12) = 11/12, left: 11/12, 14\n(11) - (14) = -3, left: -3, 12\n(-3) - (12) = -15, left: -15\n(2) + (7) = 9, left: 9, 12, 11\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (11 - (2 + 7)))"}, {"input": "12 11 2 7\n", "output": "(12) / (7) = 12/7, left: 12/7, 11, 2\n(12) - (7) = 5, left: 5, 11, 2\n(2) / (5) = 2/5, left: 2/5, 11\n(7) - (12) = -5, left: -5, 11, 2\n(2) / (11) = 2/11, left: 2/11, -5\n(12) - (11) = 1, left: 1, 2, 7\n(12) * (11) = 132, left: 132, 2, 7\n(11) - (2) = 9, left: 9, 12, 7\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 2) - 7))"}, {"input": "12 11 2 7\n", "output": "(7) / (11) = 7/11, left: 7/11, 12, 2\n(7/11) / (12) = 7/132, left: 7/132, 2\n(2) - (12) = -10, left: -10, 7/11\n(2) - (7/11) = 15/11, left: 15/11, 12\n(2) * (7/11) = 14/11, left: 14/11, 12\n(12) - (14/11) = 118/11, left: 118/11\n(11) + (7) = 18, left: 18, 12, 2\n(2) / (12) = 1/6, left: 1/6, 18\n(12) / (2) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((11 + 7) + (12 / 2))"}, {"input": "9 12 6 4\n", "output": "(12) + (4) = 16, left: 16, 9, 6\n(9) - (6) = 3, left: 3, 16\n(16) - (3) = 13, left: 13\n(9) / (6) = 3/2, left: 3/2, 16\n(16) + (3/2) = 35/2, left: 35/2\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((12 + 4) * (9 / 6))"}, {"input": "9 12 6 4\n", "output": "(12) + (4) = 16, left: 16, 9, 6\n(9) - (6) = 3, left: 3, 16\n(16) * (3) = 48, left: 48\n(3) - (16) = -13, left: -13\n(16) / (3) = 16/3, left: 16/3\n(3) / (16) = 3/16, left: 3/16\n(9) / (6) = 3/2, left: 3/2, 16\n(16) - (3/2) = 29/2, left: 29/2\n(16) + (3/2) = 35/2, left: 35/2\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((12 + 4) * (9 / 6))"}, {"input": "9 12 6 4\n", "output": "(9) * (6) = 54, left: 54, 12, 4\n(12) * (4) = 48, left: 48, 54\n(4) - (12) = -8, left: -8, 54\n(54) - (-8) = 62, left: 62\n(4) / (54) = 2/27, left: 2/27, 12\n(54) / (4) = 27/2, left: 27/2, 12\n(54) / (12) = 9/2, left: 9/2, 4\n(6) - (9) = -3, left: -3, 12, 4\n(4) * (-3) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (4 * (6 - 9)))"}, {"input": "9 12 6 4\n", "output": "(12) - (6) = 6, left: 6, 9, 4\n(12) + (6) = 18, left: 18, 9, 4\n(9) + (18) = 27, left: 27, 4\n(4) * (27) = 108, left: 108\n(12) / (4) = 3, left: 3, 9, 6\n(3) / (9) = 1/3, left: 1/3, 6\n(9) - (6) = 3, left: 3, 3\n(12) + (4) = 16, left: 16, 9, 6\n(9) * (16) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((9 * (12 + 4)) / 6)"}, {"input": "9 12 6 4\n", "output": "(9) - (4) = 5, left: 5, 12, 6\n(9) + (4) = 13, left: 13, 12, 6\n(4) - (9) = -5, left: -5, 12, 6\n(-5) / (6) = -5/6, left: -5/6, 12\n(9) / (4) = 9/4, left: 9/4, 12, 6\n(9) * (4) = 36, left: 36, 12, 6\n(12) * (36) = 432, left: 432, 6\n(12) + (4) = 16, left: 16, 9, 6\n(9) * (16) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((9 * (12 + 4)) / 6)"}, {"input": "9 12 6 4\n", "output": "(12) - (6) = 6, left: 6, 9, 4\n(6) / (12) = 1/2, left: 1/2, 9, 4\n(6) - (12) = -6, left: -6, 9, 4\n(12) / (6) = 2, left: 2, 9, 4\n(12) + (6) = 18, left: 18, 9, 4\n(9) * (6) = 54, left: 54, 12, 4\n(4) - (54) = -50, left: -50, 12\n(6) - (9) = -3, left: -3, 12, 4\n(4) - (12) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((6 - 9) * (4 - 12))"}, {"input": "10 6 5 6\n", "output": "(10) * (6) = 60, left: 60, 6, 5\n(10) - (6) = 4, left: 4, 6, 5\n(6) - (5) = 1, left: 1, 4\n(10) / (6) = 5/3, left: 5/3, 6, 5\n(6) + (5/3) = 23/3, left: 23/3, 5\n(5/3) / (6) = 5/18, left: 5/18, 5\n(10) + (6) = 16, left: 16, 6, 5\n(6) + (6) = 12, left: 12, 10, 5\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * ((6 + 6) / 5))"}, {"input": "10 6 5 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 6, 5\n(3/5) / (6) = 1/10, left: 1/10, 5\n(5) * (1/10) = 1/2, left: 1/2\n(5) / (6) = 5/6, left: 5/6, 10, 6\n(5) * (6) = 30, left: 30, 10, 6\n(6) / (5) = 6/5, left: 6/5, 10, 6\n(6/5) / (6) = 1/5, left: 1/5, 10\n(10) - (5) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (10 - 5)) - 6)"}, {"input": "10 6 5 6\n", "output": "(6) - (6) = 0, left: 0, 10, 5\n(10) - (5) = 5, left: 5, 0\n(5) * (0) = 0, left: 0, 10\n(10) + (0) = 10, left: 10\n(6) * (6) = 36, left: 36, 10, 5\n(6) - (6) = 0, left: 0, 10, 5\n(10) + (5) = 15, left: 15, 0\n(6) + (6) = 12, left: 12, 10, 5\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * ((6 + 6) / 5))"}, {"input": "10 6 5 6\n", "output": "(10) * (5) = 50, left: 50, 6, 6\n(50) / (6) = 25/3, left: 25/3, 6\n(6) * (50) = 300, left: 300, 6\n(300) - (6) = 294, left: 294\n(50) / (6) = 25/3, left: 25/3, 6\n(6) - (50) = -44, left: -44, 6\n(6) + (6) = 12, left: 12, 50\n(10) / (5) = 2, left: 2, 6, 6\n(6) + (6) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 / 5) * (6 + 6))"}, {"input": "10 6 5 6\n", "output": "(6) * (6) = 36, left: 36, 10, 5\n(10) + (36) = 46, left: 46, 5\n(5) * (46) = 230, left: 230\n(10) * (36) = 360, left: 360, 5\n(5) - (36) = -31, left: -31, 10\n(10) - (5) = 5, left: 5, 36\n(5) - (10) = -5, left: -5, 36\n(6) + (6) = 12, left: 12, 10, 5\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((6 + 6) / (5 / 10))"}, {"input": "10 6 5 6\n", "output": "(10) - (6) = 4, left: 4, 6, 5\n(6) / (10) = 3/5, left: 3/5, 6, 5\n(3/5) - (6) = -27/5, left: -27/5, 5\n(10) * (6) = 60, left: 60, 6, 5\n(5) + (6) = 11, left: 11, 10, 6\n(5) * (6) = 30, left: 30, 10, 6\n(6) / (10) = 3/5, left: 3/5, 30\n(30) - (10) = 20, left: 20, 6\n(6) / (5) = 6/5, left: 6/5, 10, 6\n(6) - (5) = 1, left: 1, 10, 6\n(6) - (1) = 5, left: 5, 10\n(10) - (5) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (10 - 5)) - 6)"}, {"input": "4 8 5 9\n", "output": "(9) - (4) = 5, left: 5, 8, 5\n(9) / (4) = 9/4, left: 9/4, 8, 5\n(5) / (8) = 5/8, left: 5/8, 9/4\n(4) - (5) = -1, left: -1, 8, 9\n(-1) - (9) = -10, left: -10, 8\n(4) / (5) = 4/5, left: 4/5, 8, 9\n(8) * (5) = 40, left: 40, 4, 9\n(5) - (8) = -3, left: -3, 4, 9\n(9) + (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 + (5 - 8)))"}, {"input": "4 8 5 9\n", "output": "(8) / (9) = 8/9, left: 8/9, 4, 5\n(4) - (5) = -1, left: -1, 8/9\n(5) * (8/9) = 40/9, left: 40/9, 4\n(8) * (9) = 72, left: 72, 4, 5\n(72) / (5) = 72/5, left: 72/5, 4\n(72/5) / (4) = 18/5, left: 18/5\n(9) - (8) = 1, left: 1, 4, 5\n(4) + (5) = 9, left: 9, 1\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (9 - 8)))"}, {"input": "4 8 5 9\n", "output": "(4) * (5) = 20, left: 20, 8, 9\n(20) / (9) = 20/9, left: 20/9, 8\n(5) / (4) = 5/4, left: 5/4, 8, 9\n(5/4) - (9) = -31/4, left: -31/4, 8\n(5) - (4) = 1, left: 1, 8, 9\n(8) / (9) = 8/9, left: 8/9, 4, 5\n(4) * (5) = 20, left: 20, 8/9\n(8) - (9) = -1, left: -1, 4, 5\n(5) - (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 - (8 - 9)))"}, {"input": "4 8 5 9\n", "output": "(4) / (9) = 4/9, left: 4/9, 8, 5\n(9) - (4) = 5, left: 5, 8, 5\n(5) / (8) = 5/8, left: 5/8, 5\n(9) / (4) = 9/4, left: 9/4, 8, 5\n(8) / (5) = 8/5, left: 8/5, 9/4\n(9) - (8) = 1, left: 1, 4, 5\n(1) - (4) = -3, left: -3, 5\n(1) / (5) = 1/5, left: 1/5, 4\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (9 - 8)))"}, {"input": "4 8 5 9\n", "output": "(5) / (8) = 5/8, left: 5/8, 4, 9\n(4) + (9) = 13, left: 13, 5/8\n(9) / (4) = 9/4, left: 9/4, 5/8\n(9) - (4) = 5, left: 5, 5/8\n(5/8) / (5) = 1/8, left: 1/8\n(5/8) - (4) = -27/8, left: -27/8, 9\n(5/8) / (9) = 5/72, left: 5/72, 4\n(8) - (5) = 3, left: 3, 4, 9\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (8 - 5)))"}, {"input": "4 8 5 9\n", "output": "(8) - (4) = 4, left: 4, 5, 9\n(4) / (8) = 1/2, left: 1/2, 5, 9\n(4) * (8) = 32, left: 32, 5, 9\n(9) - (4) = 5, left: 5, 8, 5\n(5) - (8) = -3, left: -3, 5\n(-3) / (5) = -3/5, left: -3/5\n(8) / (5) = 8/5, left: 8/5, 5\n(5) - (4) = 1, left: 1, 8, 9\n(4) / (5) = 4/5, left: 4/5, 8, 9\n(5) / (8) = 5/8, left: 5/8, 4, 9\n(4) + (5/8) = 37/8, left: 37/8, 9\n(5) - (8) = -3, left: -3, 4, 9\n(9) + (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 + (5 - 8)))"}, {"input": "4 8 5 9\n", "output": "(4) - (9) = -5, left: -5, 8, 5\n(5) / (8) = 5/8, left: 5/8, -5\n(5) - (8) = -3, left: -3, -5\n(4) / (9) = 4/9, left: 4/9, 8, 5\n(5) * (4/9) = 20/9, left: 20/9, 8\n(9) - (4) = 5, left: 5, 8, 5\n(8) * (5) = 40, left: 40, 5\n(5) * (40) = 200, left: 200\n(4) + (9) = 13, left: 13, 8, 5\n(5) + (13) = 18, left: 18, 8\n(4) * (9) = 36, left: 36, 8, 5\n(9) - (8) = 1, left: 1, 4, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (9 - 8)))"}, {"input": "4 8 5 9\n", "output": "(4) * (5) = 20, left: 20, 8, 9\n(9) / (8) = 9/8, left: 9/8, 20\n(4) + (5) = 9, left: 9, 8, 9\n(8) + (9) = 17, left: 17, 9\n(9) / (17) = 9/17, left: 9/17\n(8) - (9) = -1, left: -1, 9\n(5) / (4) = 5/4, left: 5/4, 8, 9\n(8) * (9) = 72, left: 72, 5/4\n(4) / (5) = 4/5, left: 4/5, 8, 9\n(8) - (9) = -1, left: -1, 4/5\n(8) / (9) = 8/9, left: 8/9, 4, 5\n(8) - (9) = -1, left: -1, 4, 5\n(5) - (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 - (8 - 9)))"}, {"input": "11 10 13 3\n", "output": "(10) - (3) = 7, left: 7, 11, 13\n(3) / (10) = 3/10, left: 3/10, 11, 13\n(3) / (11) = 3/11, left: 3/11, 10, 13\n(11) - (3) = 8, left: 8, 10, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((11 - 3) * (13 - 10))"}, {"input": "11 10 13 3\n", "output": "(13) - (3) = 10, left: 10, 11, 10\n(13) / (3) = 13/3, left: 13/3, 11, 10\n(13/3) - (10) = -17/3, left: -17/3, 11\n(10) - (13) = -3, left: -3, 11, 3\n(11) + (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 + (10 - 13)))"}, {"input": "11 10 13 3\n", "output": "(10) - (11) = -1, left: -1, 13, 3\n(-1) - (13) = -14, left: -14, 3\n(-14) / (3) = -14/3, left: -14/3\n(11) + (10) = 21, left: 21, 13, 3\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((11 + 10) - 13))"}, {"input": "11 10 13 3\n", "output": "(11) * (3) = 33, left: 33, 10, 13\n(13) * (33) = 429, left: 429, 10\n(3) - (11) = -8, left: -8, 10, 13\n(-8) / (13) = -8/13, left: -8/13, 10\n(10) - (13) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((3 - 11) * (10 - 13))"}, {"input": "11 10 13 3\n", "output": "(3) - (13) = -10, left: -10, 11, 10\n(11) * (-10) = -110, left: -110, 10\n(13) / (3) = 13/3, left: 13/3, 11, 10\n(11) / (13/3) = 33/13, left: 33/13, 10\n(13) - (3) = 10, left: 10, 11, 10\n(11) / (10) = 11/10, left: 11/10, 10\n(10) - (11/10) = 89/10, left: 89/10\n(11) - (3) = 8, left: 8, 10, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((11 - 3) * (13 - 10))"}, {"input": "11 10 13 3\n", "output": "(10) - (11) = -1, left: -1, 13, 3\n(13) / (-1) = -13, left: -13, 3\n(10) / (11) = 10/11, left: 10/11, 13, 3\n(3) / (13) = 3/13, left: 3/13, 10/11\n(10/11) - (3) = -23/11, left: -23/11, 13\n(11) * (10) = 110, left: 110, 13, 3\n(11) + (10) = 21, left: 21, 13, 3\n(3) / (21) = 1/7, left: 1/7, 13\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((11 + 10) - 13))"}, {"input": "11 10 13 3\n", "output": "(13) - (3) = 10, left: 10, 11, 10\n(13) + (3) = 16, left: 16, 11, 10\n(13) / (3) = 13/3, left: 13/3, 11, 10\n(13) * (3) = 39, left: 39, 11, 10\n(10) - (39) = -29, left: -29, 11\n(3) / (13) = 3/13, left: 3/13, 11, 10\n(10) - (3/13) = 127/13, left: 127/13, 11\n(10) - (13) = -3, left: -3, 11, 3\n(11) + (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 + (10 - 13)))"}, {"input": "11 10 13 3\n", "output": "(10) - (3) = 7, left: 7, 11, 13\n(7) / (11) = 7/11, left: 7/11, 13\n(10) + (3) = 13, left: 13, 11, 13\n(11) + (13) = 24, left: 24, 13\n(3) / (10) = 3/10, left: 3/10, 11, 13\n(13) - (3/10) = 127/10, left: 127/10, 11\n(10) * (3) = 30, left: 30, 11, 13\n(13) - (10) = 3, left: 3, 11, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (13 - 10)))"}, {"input": "11 10 13 3\n", "output": "(11) * (3) = 33, left: 33, 10, 13\n(13) - (33) = -20, left: -20, 10\n(10) / (33) = 10/33, left: 10/33, 13\n(3) - (11) = -8, left: -8, 10, 13\n(10) - (-8) = 18, left: 18, 13\n(10) / (-8) = -5/4, left: -5/4, 13\n(13) - (-8) = 21, left: 21, 10\n(21) / (10) = 21/10, left: 21/10\n(10) - (13) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((3 - 11) * (10 - 13))"}, {"input": "7 6 13 3\n", "output": "(7) / (13) = 7/13, left: 7/13, 6, 3\n(3) - (7/13) = 32/13, left: 32/13, 6\n(6) - (32/13) = 46/13, left: 46/13\n(7) + (13) = 20, left: 20, 6, 3\n(3) / (20) = 3/20, left: 3/20, 6\n(20) - (3) = 17, left: 17, 6\n(6) * (20) = 120, left: 120, 3\n(7) - (13) = -6, left: -6, 6, 3\n(3) * (-6) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (3 * (7 - 13)))"}, {"input": "7 6 13 3\n", "output": "(13) - (6) = 7, left: 7, 7, 3\n(3) - (7) = -4, left: -4, 6, 13\n(6) * (-4) = -24, left: -24, 13\n(7) - (3) = 4, left: 4, 6, 13\n(13) - (6) = 7, left: 7, 4\n(4) - (6) = -2, left: -2, 13\n(7) / (13) = 7/13, left: 7/13, 6, 3\n(7) - (13) = -6, left: -6, 6, 3\n(6) * (3) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((6 * 3) - (7 - 13))"}, {"input": "7 6 13 3\n", "output": "(6) + (3) = 9, left: 9, 7, 13\n(13) - (9) = 4, left: 4, 7\n(6) - (3) = 3, left: 3, 7, 13\n(13) - (7) = 6, left: 6, 3\n(6) / (3) = 2, left: 2, 7, 13\n(7) - (13) = -6, left: -6, 2\n(3) - (6) = -3, left: -3, 7, 13\n(6) * (3) = 18, left: 18, 7, 13\n(7) - (18) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (7 - (6 * 3)))"}, {"input": "7 6 13 3\n", "output": "(6) * (13) = 78, left: 78, 7, 3\n(6) + (13) = 19, left: 19, 7, 3\n(3) / (19) = 3/19, left: 3/19, 7\n(7) / (6) = 7/6, left: 7/6, 13, 3\n(6) / (7) = 6/7, left: 6/7, 13, 3\n(3) / (13) = 3/13, left: 3/13, 7, 6\n(7) + (6) = 13, left: 13, 3/13\n(6) * (3) = 18, left: 18, 7, 13\n(13) - (7) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((6 * 3) + (13 - 7))"}, {"input": "7 6 13 3\n", "output": "(7) - (13) = -6, left: -6, 6, 3\n(3) * (-6) = -18, left: -18, 6\n(6) + (-18) = -12, left: -12\n(-18) / (6) = -3, left: -3\n(6) * (-18) = -108, left: -108\n(-18) - (6) = -24, left: -24\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (3 * (7 - 13)))"}, {"input": "7 6 13 3\n", "output": "(7) - (3) = 4, left: 4, 6, 13\n(3) - (7) = -4, left: -4, 6, 13\n(-4) - (13) = -17, left: -17, 6\n(6) * (13) = 78, left: 78, 7, 3\n(13) / (6) = 13/6, left: 13/6, 7, 3\n(7) - (6) = 1, left: 1, 13, 3\n(13) / (3) = 13/3, left: 13/3, 7, 6\n(7) * (13/3) = 91/3, left: 91/3, 6\n(6) - (3) = 3, left: 3, 7, 13\n(3) - (7) = -4, left: -4, 13\n(13) - (-4) = 17, left: 17\n(6) * (3) = 18, left: 18, 7, 13\n(13) - (7) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((6 * 3) + (13 - 7))"}, {"input": "7 6 13 3\n", "output": "(7) - (13) = -6, left: -6, 6, 3\n(3) * (-6) = -18, left: -18, 6\n(6) + (-18) = -12, left: -12\n(-18) / (6) = -3, left: -3\n(6) * (-18) = -108, left: -108\n(-18) - (6) = -24, left: -24\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (3 * (7 - 13)))"}, {"input": "7 6 13 3\n", "output": "(7) - (13) = -6, left: -6, 6, 3\n(3) * (-6) = -18, left: -18, 6\n(6) + (-18) = -12, left: -12\n(-18) / (6) = -3, left: -3\n(6) * (-18) = -108, left: -108\n(-18) - (6) = -24, left: -24\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (3 * (7 - 13)))"}, {"input": "1 1 1 8\n", "output": "(1) * (8) = 8, left: 8, 1, 1\n(1) + (8) = 9, left: 9, 1\n(8) - (1) = 7, left: 7, 1, 1\n(1) + (7) = 8, left: 8, 1\n(8) / (1) = 8, left: 8\n(8) / (1) = 8, left: 8, 1, 1\n(1) - (1) = 0, left: 0, 8\n(1) + (1) = 2, left: 2, 1, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(8) - (1) = 7, left: 7, 1, 1\n(1) / (8) = 1/8, left: 1/8, 1, 1\n(1) + (1/8) = 9/8, left: 9/8, 1\n(1) * (8) = 8, left: 8, 1, 1\n(1) * (1) = 1, left: 1, 8\n(1) * (1) = 1, left: 1, 1, 8\n(8) - (1) = 7, left: 7, 1\n(1) + (1) = 2, left: 2, 1, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(1) + (8) = 9, left: 9, 1, 1\n(1) - (8) = -7, left: -7, 1, 1\n(1) * (8) = 8, left: 8, 1, 1\n(1) + (8) = 9, left: 9, 1\n(1) + (8) = 9, left: 9, 1, 1\n(9) - (1) = 8, left: 8, 1\n(1) / (8) = 1/8, left: 1/8, 1, 1\n(1) + (1) = 2, left: 2, 1, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(8) - (1) = 7, left: 7, 1, 1\n(1) - (8) = -7, left: -7, 1, 1\n(1) / (8) = 1/8, left: 1/8, 1, 1\n(1) / (1) = 1, left: 1, 1, 8\n(8) / (1) = 8, left: 8, 1\n(1) - (1) = 0, left: 0, 1, 8\n(1) / (1) = 1, left: 1, 1, 8\n(1) + (1) = 2, left: 2, 1, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(1) / (8) = 1/8, left: 1/8, 1, 1\n(1) + (8) = 9, left: 9, 1, 1\n(1) * (1) = 1, left: 1, 9\n(1) / (1) = 1, left: 1, 1, 8\n(8) + (1) = 9, left: 9, 1\n(1) * (1) = 1, left: 1, 1, 8\n(1) + (1) = 2, left: 2, 1, 8\n(1) * (2) = 2, left: 2, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(1) * (8) = 8, left: 8, 1, 1\n(1) - (1) = 0, left: 0, 8\n(8) - (1) = 7, left: 7, 1, 1\n(1) - (1) = 0, left: 0, 7\n(8) / (1) = 8, left: 8, 1, 1\n(1) + (8) = 9, left: 9, 1\n(1) * (9) = 9, left: 9\n(1) - (8) = -7, left: -7, 1, 1\n(1) - (1) = 0, left: 0, 1, 8\n(0) - (8) = -8, left: -8, 1\n(1) * (1) = 1, left: 1, 1, 8\n(1) + (1) = 2, left: 2, 1, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(8) - (1) = 7, left: 7, 1, 1\n(1) + (8) = 9, left: 9, 1, 1\n(8) / (1) = 8, left: 8, 1, 1\n(8) / (1) = 8, left: 8, 1, 1\n(1) * (1) = 1, left: 1, 8\n(1) * (8) = 8, left: 8, 1, 1\n(1) / (8) = 1/8, left: 1/8, 1\n(1) / (8) = 1/8, left: 1/8, 1, 1\n(8) - (1) = 7, left: 7, 1, 1\n(1) / (1) = 1, left: 1, 1, 8\n(1) / (1) = 1, left: 1, 1, 8\n(1) + (1) = 2, left: 2, 1, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(8) - (1) = 7, left: 7, 1, 1\n(1) * (7) = 7, left: 7, 1\n(7) - (1) = 6, left: 6\n(1) + (8) = 9, left: 9, 1, 1\n(9) / (1) = 9, left: 9, 1\n(1) - (1) = 0, left: 0, 9\n(8) / (1) = 8, left: 8, 1, 1\n(1) + (1) = 2, left: 2, 8\n(1) / (8) = 1/8, left: 1/8, 1, 1\n(1/8) / (1) = 1/8, left: 1/8, 1\n(1) + (1) = 2, left: 2, 1, 8\n(8) * (2) = 16, left: 16, 1\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(1) * (8) = 8, left: 8, 1, 1\n(1) - (8) = -7, left: -7, 1, 1\n(1) + (8) = 9, left: 9, 1, 1\n(1) - (1) = 0, left: 0, 1, 8\n(1) + (8) = 9, left: 9, 0\n(1) - (1) = 0, left: 0, 1, 8\n(1) + (0) = 1, left: 1, 8\n(1) / (8) = 1/8, left: 1/8\n(1) / (1) = 1, left: 1, 1, 8\n(1) * (1) = 1, left: 1, 8\n(1) / (1) = 1, left: 1, 1, 8\n(1) + (1) = 2, left: 2, 1, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(8) / (1) = 8, left: 8, 1, 1\n(8) - (1) = 7, left: 7, 1, 1\n(1) * (8) = 8, left: 8, 1, 1\n(1) * (8) = 8, left: 8, 1\n(8) / (1) = 8, left: 8, 1, 1\n(1) * (8) = 8, left: 8, 1, 1\n(8) - (1) = 7, left: 7, 1\n(1) - (8) = -7, left: -7, 1, 1\n(1) / (8) = 1/8, left: 1/8, 1, 1\n(1/8) - (1) = -7/8, left: -7/8, 1\n(1) - (1) = 0, left: 0, 1/8\n(1) + (1) = 2, left: 2, 1, 8\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "13 7 11 6\n", "output": "(7) * (6) = 42, left: 42, 13, 11\n(11) / (13) = 11/13, left: 11/13, 42\n(11) + (42) = 53, left: 53, 13\n(6) - (7) = -1, left: -1, 13, 11\n(11) / (-1) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (11 / (6 - 7)))"}, {"input": "13 7 11 6\n", "output": "(11) / (7) = 11/7, left: 11/7, 13, 6\n(13) / (11/7) = 91/11, left: 91/11, 6\n(13) - (6) = 7, left: 7, 7, 11\n(6) - (7) = -1, left: -1, 13, 11\n(13) * (-1) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (13 * (6 - 7)))"}, {"input": "13 7 11 6\n", "output": "(13) + (11) = 24, left: 24, 7, 6\n(6) - (24) = -18, left: -18, 7\n(6) - (7) = -1, left: -1, 24\n(24) + (-1) = 23, left: 23\n(7) - (6) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (7 - 6))"}, {"input": "13 7 11 6\n", "output": "(6) / (13) = 6/13, left: 6/13, 7, 11\n(6) / (11) = 6/11, left: 6/11, 13, 7\n(11) * (6) = 66, left: 66, 13, 7\n(7) - (13) = -6, left: -6, 66\n(11) - (6) = 5, left: 5, 13, 7\n(13) - (5) = 8, left: 8, 7\n(7) / (6) = 7/6, left: 7/6, 13, 11\n(7) - (6) = 1, left: 1, 13, 11\n(13) / (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 / (7 - 6)))"}, {"input": "13 7 11 6\n", "output": "(7) + (6) = 13, left: 13, 13, 11\n(11) - (13) = -2, left: -2, 13\n(13) + (-2) = 11, left: 11\n(13) / (13) = 1, left: 1, 11\n(11) / (13) = 11/13, left: 11/13, 13\n(7) * (6) = 42, left: 42, 13, 11\n(11) - (42) = -31, left: -31, 13\n(6) - (7) = -1, left: -1, 13, 11\n(11) / (-1) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - (11 / (6 - 7)))"}, {"input": "13 7 11 6\n", "output": "(13) - (6) = 7, left: 7, 7, 11\n(6) - (11) = -5, left: -5, 13, 7\n(13) - (7) = 6, left: 6, 11, 6\n(11) / (6) = 11/6, left: 11/6, 6\n(6) / (11/6) = 36/11, left: 36/11\n(11) - (13) = -2, left: -2, 7, 6\n(13) / (11) = 13/11, left: 13/11, 7, 6\n(13) + (11) = 24, left: 24, 7, 6\n(7) - (6) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((13 + 11) * (7 - 6))"}, {"input": "13 7 11 6\n", "output": "(13) + (11) = 24, left: 24, 7, 6\n(24) - (6) = 18, left: 18, 7\n(7) - (18) = -11, left: -11\n(6) - (24) = -18, left: -18, 7\n(6) / (24) = 1/4, left: 1/4, 7\n(24) / (6) = 4, left: 4, 7\n(6) / (7) = 6/7, left: 6/7, 24\n(7) + (6) = 13, left: 13, 24\n(7) - (6) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((13 + 11) / (7 - 6))"}, {"input": "13 7 11 6\n", "output": "(7) / (11) = 7/11, left: 7/11, 13, 6\n(7) + (11) = 18, left: 18, 13, 6\n(13) + (6) = 19, left: 19, 7, 11\n(19) / (7) = 19/7, left: 19/7, 11\n(13) / (6) = 13/6, left: 13/6, 7, 11\n(7) + (13/6) = 55/6, left: 55/6, 11\n(11) - (55/6) = 11/6, left: 11/6\n(6) - (7) = -1, left: -1, 13, 11\n(13) * (-1) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (13 * (6 - 7)))"}, {"input": "5 6 3 6\n", "output": "(6) + (6) = 12, left: 12, 5, 3\n(5) / (3) = 5/3, left: 5/3, 12\n(12) + (5/3) = 41/3, left: 41/3\n(5) + (3) = 8, left: 8, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 + 6) * (5 - 3))"}, {"input": "5 6 3 6\n", "output": "(6) - (5) = 1, left: 1, 6, 3\n(6) * (3) = 18, left: 18, 1\n(6) + (1) = 7, left: 7, 3\n(3) * (7) = 21, left: 21\n(6) / (1) = 6, left: 6, 3\n(3) - (6) = -3, left: -3\n(1) - (3) = -2, left: -2, 6\n(3) / (1) = 3, left: 3, 6\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (6 - 5)))"}, {"input": "5 6 3 6\n", "output": "(6) / (5) = 6/5, left: 6/5, 3, 6\n(3) - (6/5) = 9/5, left: 9/5, 6\n(6/5) / (3) = 2/5, left: 2/5, 6\n(6/5) - (6) = -24/5, left: -24/5, 3\n(5) - (6) = -1, left: -1, 3, 6\n(3) - (6) = -3, left: -3, -1\n(3) * (-1) = -3, left: -3, 6\n(6) / (-3) = -2, left: -2\n(3) - (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (5 - 6)))"}, {"input": "5 6 3 6\n", "output": "(6) - (3) = 3, left: 3, 5, 6\n(3) / (6) = 1/2, left: 1/2, 5, 6\n(6) - (5) = 1, left: 1, 1/2\n(5) * (1/2) = 5/2, left: 5/2, 6\n(6) + (5/2) = 17/2, left: 17/2\n(6) + (3) = 9, left: 9, 5, 6\n(9) / (6) = 3/2, left: 3/2, 5\n(6) + (9) = 15, left: 15, 5\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((6 + 3) - 5))"}, {"input": "5 6 3 6\n", "output": "(6) / (5) = 6/5, left: 6/5, 6, 3\n(3) - (6) = -3, left: -3, 6/5\n(6/5) / (6) = 1/5, left: 1/5, 3\n(5) * (6) = 30, left: 30, 6, 3\n(6) + (30) = 36, left: 36, 3\n(5) / (6) = 5/6, left: 5/6, 6, 3\n(6) / (3) = 2, left: 2, 5/6\n(5) - (6) = -1, left: -1, 6, 3\n(3) - (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (5 - 6)))"}, {"input": "5 6 3 6\n", "output": "(6) + (6) = 12, left: 12, 5, 3\n(12) - (5) = 7, left: 7, 3\n(7) - (3) = 4, left: 4\n(5) - (12) = -7, left: -7, 3\n(5) * (12) = 60, left: 60, 3\n(3) * (60) = 180, left: 180\n(5) / (12) = 5/12, left: 5/12, 3\n(5) - (3) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 + 6) * (5 - 3))"}, {"input": "5 6 3 6\n", "output": "(6) - (5) = 1, left: 1, 6, 3\n(6) + (3) = 9, left: 9, 1\n(9) / (1) = 9, left: 9\n(6) + (1) = 7, left: 7, 3\n(6) - (1) = 5, left: 5, 3\n(6) / (1) = 6, left: 6, 3\n(1) - (6) = -5, left: -5, 3\n(3) + (-5) = -2, left: -2\n(1) - (3) = -2, left: -2, 6\n(-2) - (6) = -8, left: -8\n(3) * (1) = 3, left: 3, 6\n(3) - (6) = -3, left: -3\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (6 - 5)))"}, {"input": "1 11 2 1\n", "output": "(1) * (11) = 11, left: 11, 2, 1\n(2) / (11) = 2/11, left: 2/11, 1\n(1) - (2/11) = 9/11, left: 9/11\n(11) - (1) = 10, left: 10, 2\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (1 * 11)))"}, {"input": "1 11 2 1\n", "output": "(11) / (2) = 11/2, left: 11/2, 1, 1\n(1) * (11/2) = 11/2, left: 11/2, 1\n(11/2) / (1) = 11/2, left: 11/2, 1\n(11) * (2) = 22, left: 22, 1, 1\n(1) + (22) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (1 + (11 * 2)))"}, {"input": "1 11 2 1\n", "output": "(1) + (2) = 3, left: 3, 11, 1\n(11) * (1) = 11, left: 11, 3\n(1) / (2) = 1/2, left: 1/2, 11, 1\n(1) - (11) = -10, left: -10, 1/2\n(11) + (1) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((11 + 1) / (1 / 2))"}, {"input": "1 11 2 1\n", "output": "(1) - (11) = -10, left: -10, 2, 1\n(-10) - (1) = -11, left: -11, 2\n(2) * (1) = 2, left: 2, -10\n(2) / (-10) = -1/5, left: -1/5\n(1) * (11) = 11, left: 11, 2, 1\n(11) / (1) = 11, left: 11, 2\n(1) * (11) = 11, left: 11, 2\n(11) - (2) = 9, left: 9\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (1 * 11)))"}, {"input": "1 11 2 1\n", "output": "(1) * (11) = 11, left: 11, 2, 1\n(1) / (2) = 1/2, left: 1/2, 11\n(11) + (1/2) = 23/2, left: 23/2\n(11) / (2) = 11/2, left: 11/2, 1\n(2) * (11) = 22, left: 22, 1\n(2) / (11) = 2/11, left: 2/11, 1\n(11) - (1) = 10, left: 10, 2\n(2) + (10) = 12, left: 12\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (1 + (1 * 11)))"}, {"input": "1 11 2 1\n", "output": "(1) + (2) = 3, left: 3, 11, 1\n(11) + (3) = 14, left: 14, 1\n(3) - (11) = -8, left: -8, 1\n(1) / (3) = 1/3, left: 1/3, 11\n(1/3) - (11) = -32/3, left: -32/3\n(1) / (2) = 1/2, left: 1/2, 11, 1\n(1) / (11) = 1/11, left: 1/11, 1/2\n(1/2) + (1/11) = 13/22, left: 13/22\n(11) + (1) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((11 + 1) / (1 / 2))"}, {"input": "1 11 2 1\n", "output": "(11) / (2) = 11/2, left: 11/2, 1, 1\n(1) * (11/2) = 11/2, left: 11/2, 1\n(1) / (1) = 1, left: 1, 11/2\n(1) * (1) = 1, left: 1, 11/2\n(1) - (11/2) = -9/2, left: -9/2, 1\n(1) * (11/2) = 11/2, left: 11/2, 1\n(11) * (2) = 22, left: 22, 1, 1\n(1) / (22) = 1/22, left: 1/22, 1\n(1) + (22) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (1 + (11 * 2)))"}, {"input": "1 11 2 1\n", "output": "(1) + (1) = 2, left: 2, 11, 2\n(2) / (2) = 1, left: 1, 11\n(2) + (2) = 4, left: 4, 11\n(2) / (2) = 1, left: 1, 11\n(11) + (1) = 12, left: 12\n(2) - (11) = -9, left: -9, 2\n(-9) - (2) = -11, left: -11\n(11) * (2) = 22, left: 22, 2\n(22) - (2) = 20, left: 20\n(2) + (22) = 24, left: 24\nreach 24! expression: ((1 + 1) + (11 * 2))"}, {"input": "2 9 9 4\n", "output": "(4) - (9) = -5, left: -5, 2, 9\n(9) / (4) = 9/4, left: 9/4, 2, 9\n(9) / (9/4) = 4, left: 4, 2\n(9) - (9/4) = 27/4, left: 27/4, 2\n(9/4) / (2) = 9/8, left: 9/8, 9\n(2) * (9) = 18, left: 18, 9/4\n(9) * (4) = 36, left: 36, 2, 9\n(9) + (4) = 13, left: 13, 2, 9\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (9 + (9 + 4)))"}, {"input": "2 9 9 4\n", "output": "(4) / (9) = 4/9, left: 4/9, 2, 9\n(9) - (2) = 7, left: 7, 4/9\n(9) / (4/9) = 81/4, left: 81/4, 2\n(9) - (4) = 5, left: 5, 2, 9\n(9) / (5) = 9/5, left: 9/5, 2\n(9) * (5) = 45, left: 45, 2\n(2) / (5) = 2/5, left: 2/5, 9\n(9) + (4) = 13, left: 13, 2, 9\n(2) + (13) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (2 + (9 + 4)))"}, {"input": "2 9 9 4\n", "output": "(9) + (9) = 18, left: 18, 2, 4\n(18) - (2) = 16, left: 16, 4\n(16) - (4) = 12, left: 12\n(4) * (16) = 64, left: 64\n(2) - (18) = -16, left: -16, 4\n(4) + (-16) = -12, left: -12\n(18) / (2) = 9, left: 9, 4\n(4) * (9) = 36, left: 36\n(2) + (18) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (2 + (9 + 9)))"}, {"input": "2 9 9 4\n", "output": "(4) - (9) = -5, left: -5, 2, 9\n(2) * (-5) = -10, left: -10, 9\n(9) - (4) = 5, left: 5, 2, 9\n(4) / (9) = 4/9, left: 4/9, 2, 9\n(9) / (4) = 9/4, left: 9/4, 2, 9\n(2) * (9) = 18, left: 18, 9/4\n(2) / (9) = 2/9, left: 2/9, 9/4\n(9) + (4) = 13, left: 13, 2, 9\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (9 + (9 + 4)))"}, {"input": "2 9 9 4\n", "output": "(9) / (4) = 9/4, left: 9/4, 2, 9\n(9/4) / (2) = 9/8, left: 9/8, 9\n(9) / (9/8) = 8, left: 8\n(9) / (2) = 9/2, left: 9/2, 9/4\n(9/4) / (9) = 1/4, left: 1/4, 2\n(9) + (4) = 13, left: 13, 2, 9\n(2) - (13) = -11, left: -11, 9\n(13) / (2) = 13/2, left: 13/2, 9\n(2) + (13) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (2 + (9 + 4)))"}, {"input": "2 9 9 4\n", "output": "(9) - (4) = 5, left: 5, 2, 9\n(9) - (2) = 7, left: 7, 5\n(2) * (9) = 18, left: 18, 5\n(2) - (5) = -3, left: -3, 9\n(2) + (5) = 7, left: 7, 9\n(2) * (5) = 10, left: 10, 9\n(4) / (9) = 4/9, left: 4/9, 2, 9\n(9) * (4/9) = 4, left: 4, 2\n(2) * (9) = 18, left: 18, 4/9\n(9) / (4) = 9/4, left: 9/4, 2, 9\n(9/4) - (9) = -27/4, left: -27/4, 2\n(9) + (4) = 13, left: 13, 2, 9\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (9 + (9 + 4)))"}, {"input": "6 3 6 4\n", "output": "(6) * (4) = 24, left: 24, 6, 3\n(3) + (24) = 27, left: 27, 6\n(24) / (6) = 4, left: 4, 3\n(4) / (6) = 2/3, left: 2/3, 6, 3\n(2/3) - (3) = -7/3, left: -7/3, 6\n(6) / (-7/3) = -18/7, left: -18/7\n(3) / (2/3) = 9/2, left: 9/2, 6\n(6) + (4) = 10, left: 10, 6, 3\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (6 + 4)) - 6)"}, {"input": "6 3 6 4\n", "output": "(6) - (4) = 2, left: 2, 6, 3\n(6) * (2) = 12, left: 12, 3\n(3) + (12) = 15, left: 15\n(3) * (12) = 36, left: 36\n(2) / (6) = 1/3, left: 1/3, 3\n(1/3) - (3) = -8/3, left: -8/3\n(6) - (2) = 4, left: 4, 3\n(4) / (3) = 4/3, left: 4/3\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (6 - 4)))"}, {"input": "6 3 6 4\n", "output": "(6) + (6) = 12, left: 12, 3, 4\n(3) * (12) = 36, left: 36, 4\n(4) / (36) = 1/9, left: 1/9\n(3) - (12) = -9, left: -9, 4\n(-9) - (4) = -13, left: -13\n(4) * (12) = 48, left: 48, 3\n(4) / (12) = 1/3, left: 1/3, 3\n(4) - (12) = -8, left: -8, 3\n(12) - (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((6 + 6) - 4))"}, {"input": "6 3 6 4\n", "output": "(4) / (3) = 4/3, left: 4/3, 6, 6\n(6) * (4/3) = 8, left: 8, 6\n(3) - (4) = -1, left: -1, 6, 6\n(6) - (6) = 0, left: 0, -1\n(3) + (4) = 7, left: 7, 6, 6\n(6) + (7) = 13, left: 13, 6\n(6) - (13) = -7, left: -7\n(3) * (4) = 12, left: 12, 6, 6\n(6) + (12) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 + (3 * 4)))"}, {"input": "6 3 6 4\n", "output": "(6) - (6) = 0, left: 0, 3, 4\n(4) / (3) = 4/3, left: 4/3, 0\n(0) / (4/3) = 0, left: 0\n(6) - (6) = 0, left: 0, 3, 4\n(6) / (6) = 1, left: 1, 3, 4\n(1) / (4) = 1/4, left: 1/4, 3\n(3) + (1/4) = 13/4, left: 13/4\n(6) + (6) = 12, left: 12, 3, 4\n(12) - (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((6 + 6) - 4))"}, {"input": "5 13 10 4\n", "output": "(5) + (4) = 9, left: 9, 13, 10\n(13) / (10) = 13/10, left: 13/10, 9\n(9) * (13/10) = 117/10, left: 117/10\n(5) - (4) = 1, left: 1, 13, 10\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (5 - 4)))"}, {"input": "5 13 10 4\n", "output": "(13) / (4) = 13/4, left: 13/4, 5, 10\n(5) - (13/4) = 7/4, left: 7/4, 10\n(13/4) / (10) = 13/40, left: 13/40, 5\n(4) - (13) = -9, left: -9, 5, 10\n(10) - (-9) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (10 - (4 - 13)))"}, {"input": "5 13 10 4\n", "output": "(10) / (13) = 10/13, left: 10/13, 5, 4\n(4) * (10/13) = 40/13, left: 40/13, 5\n(4) / (5) = 4/5, left: 4/5, 10/13\n(10) - (13) = -3, left: -3, 5, 4\n(4) * (-3) = -12, left: -12, 5\n(5) + (-3) = 2, left: 2, 4\n(-3) / (5) = -3/5, left: -3/5, 4\n(13) + (10) = 23, left: 23, 5, 4\n(5) + (23) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((5 + (13 + 10)) - 4)"}, {"input": "5 13 10 4\n", "output": "(13) / (4) = 13/4, left: 13/4, 5, 10\n(5) + (10) = 15, left: 15, 13/4\n(13/4) + (15) = 73/4, left: 73/4\n(4) - (13) = -9, left: -9, 5, 10\n(10) / (-9) = -10/9, left: -10/9, 5\n(5) - (-10/9) = 55/9, left: 55/9\n(-9) / (10) = -9/10, left: -9/10, 5\n(5) / (-9/10) = -50/9, left: -50/9\n(10) - (-9) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (10 - (4 - 13)))"}, {"input": "5 13 10 4\n", "output": "(5) - (10) = -5, left: -5, 13, 4\n(13) - (4) = 9, left: 9, -5\n(5) / (10) = 1/2, left: 1/2, 13, 4\n(5) * (10) = 50, left: 50, 13, 4\n(4) / (50) = 2/25, left: 2/25, 13\n(2/25) / (13) = 2/325, left: 2/325\n(10) / (5) = 2, left: 2, 13, 4\n(5) + (10) = 15, left: 15, 13, 4\n(15) - (4) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((5 + 10) - 4))"}, {"input": "5 13 10 4\n", "output": "(5) + (4) = 9, left: 9, 13, 10\n(13) / (9) = 13/9, left: 13/9, 10\n(13) + (9) = 22, left: 22, 10\n(10) * (9) = 90, left: 90, 13\n(9) - (10) = -1, left: -1, 13\n(13) / (10) = 13/10, left: 13/10, 9\n(9) + (13/10) = 103/10, left: 103/10\n(5) - (4) = 1, left: 1, 13, 10\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (5 - 4)))"}, {"input": "5 13 10 4\n", "output": "(4) / (13) = 4/13, left: 4/13, 5, 10\n(10) / (4/13) = 65/2, left: 65/2, 5\n(13) / (4) = 13/4, left: 13/4, 5, 10\n(10) - (13/4) = 27/4, left: 27/4, 5\n(5) * (27/4) = 135/4, left: 135/4\n(10) - (5) = 5, left: 5, 13/4\n(5) / (13/4) = 20/13, left: 20/13\n(4) - (13) = -9, left: -9, 5, 10\n(5) - (-9) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (5 - (4 - 13)))"}, {"input": "3 12 2 12\n", "output": "(3) / (12) = 1/4, left: 1/4, 12, 2\n(12) + (1/4) = 49/4, left: 49/4, 2\n(49/4) - (2) = 41/4, left: 41/4\n(2) - (49/4) = -41/4, left: -41/4\n(12) / (1/4) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 / (3 / 12)) / 2)"}, {"input": "3 12 2 12\n", "output": "(3) * (12) = 36, left: 36, 12, 2\n(2) + (36) = 38, left: 38, 12\n(2) / (12) = 1/6, left: 1/6, 36\n(12) / (36) = 1/3, left: 1/3, 2\n(12) + (36) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 + (3 * 12)) / 2)"}, {"input": "3 12 2 12\n", "output": "(3) / (2) = 3/2, left: 3/2, 12, 12\n(12) + (3/2) = 27/2, left: 27/2, 12\n(12) / (3/2) = 8, left: 8, 12\n(3) * (2) = 6, left: 6, 12, 12\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (12 / (3 * 2)))"}, {"input": "3 12 2 12\n", "output": "(12) - (3) = 9, left: 9, 2, 12\n(12) / (9) = 4/3, left: 4/3, 2\n(9) - (12) = -3, left: -3, 2\n(9) / (12) = 3/4, left: 3/4, 2\n(2) - (3/4) = 5/4, left: 5/4\n(12) - (9) = 3, left: 3, 2\n(3) * (12) = 36, left: 36, 2, 12\n(12) / (2) = 6, left: 6, 36\n(12) + (36) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 + (3 * 12)) / 2)"}, {"input": "3 12 2 12\n", "output": "(3) / (2) = 3/2, left: 3/2, 12, 12\n(12) + (3/2) = 27/2, left: 27/2, 12\n(12) - (3/2) = 21/2, left: 21/2, 12\n(21/2) - (12) = -3/2, left: -3/2\n(3/2) / (12) = 1/8, left: 1/8, 12\n(12) / (3/2) = 8, left: 8, 12\n(3) * (2) = 6, left: 6, 12, 12\n(6) - (12) = -6, left: -6, 12\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (12 / (3 * 2)))"}, {"input": "3 12 2 12\n", "output": "(3) * (12) = 36, left: 36, 12, 2\n(2) - (36) = -34, left: -34, 12\n(2) / (36) = 1/18, left: 1/18, 12\n(12) / (1/18) = 216, left: 216\n(12) * (2) = 24, left: 24, 36\n(12) - (2) = 10, left: 10, 36\n(2) - (12) = -10, left: -10, 36\n(12) * (36) = 432, left: 432, 2\n(12) + (36) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 + (3 * 12)) / 2)"}, {"input": "3 12 2 12\n", "output": "(3) / (12) = 1/4, left: 1/4, 12, 2\n(1/4) - (12) = -47/4, left: -47/4, 2\n(-47/4) / (2) = -47/8, left: -47/8\n(2) + (-47/4) = -39/4, left: -39/4\n(12) + (1/4) = 49/4, left: 49/4, 2\n(2) - (49/4) = -41/4, left: -41/4\n(2) * (49/4) = 49/2, left: 49/2\n(12) / (1/4) = 48, left: 48, 2\n(2) / (48) = 1/24, left: 1/24\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 / (3 / 12)) / 2)"}, {"input": "7 2 9 3\n", "output": "(2) - (7) = -5, left: -5, 9, 3\n(9) / (3) = 3, left: 3, -5\n(-5) * (3) = -15, left: -15\n(9) + (-5) = 4, left: 4, 3\n(4) / (3) = 4/3, left: 4/3\n(-5) - (9) = -14, left: -14, 3\n(9) / (-5) = -9/5, left: -9/5, 3\n(-9/5) / (3) = -3/5, left: -3/5\n(3) * (-5) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (3 * (2 - 7)))"}, {"input": "7 2 9 3\n", "output": "(9) - (7) = 2, left: 2, 2, 3\n(7) / (9) = 7/9, left: 7/9, 2, 3\n(9) / (7) = 9/7, left: 9/7, 2, 3\n(9/7) / (3) = 3/7, left: 3/7, 2\n(7) - (9) = -2, left: -2, 2, 3\n(-2) / (3) = -2/3, left: -2/3, 2\n(7) * (9) = 63, left: 63, 2, 3\n(7) + (9) = 16, left: 16, 2, 3\n(3) / (2) = 3/2, left: 3/2, 16\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((7 + 9) * (3 / 2))"}, {"input": "7 2 9 3\n", "output": "(7) + (3) = 10, left: 10, 2, 9\n(2) / (10) = 1/5, left: 1/5, 9\n(7) - (3) = 4, left: 4, 2, 9\n(9) * (4) = 36, left: 36, 2\n(2) + (36) = 38, left: 38\n(9) / (4) = 9/4, left: 9/4, 2\n(7) * (3) = 21, left: 21, 2, 9\n(21) / (2) = 21/2, left: 21/2, 9\n(21) - (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((7 * 3) - 9))"}, {"input": "7 2 9 3\n", "output": "(7) / (2) = 7/2, left: 7/2, 9, 3\n(9) + (3) = 12, left: 12, 7/2\n(7) + (2) = 9, left: 9, 9, 3\n(9) - (9) = 0, left: 0, 3\n(9) - (3) = 6, left: 6, 9\n(2) - (7) = -5, left: -5, 9, 3\n(3) / (9) = 1/3, left: 1/3, -5\n(9) * (3) = 27, left: 27, -5\n(3) * (-5) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (3 * (2 - 7)))"}, {"input": "7 2 9 3\n", "output": "(7) - (9) = -2, left: -2, 2, 3\n(2) / (3) = 2/3, left: 2/3, -2\n(2) * (-2) = -4, left: -4, 3\n(3) * (-4) = -12, left: -12\n(-2) - (3) = -5, left: -5, 2\n(2) + (-5) = -3, left: -3\n(-2) / (3) = -2/3, left: -2/3, 2\n(7) + (9) = 16, left: 16, 2, 3\n(3) / (2) = 3/2, left: 3/2, 16\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((7 + 9) * (3 / 2))"}, {"input": "7 2 9 3\n", "output": "(7) / (2) = 7/2, left: 7/2, 9, 3\n(9) - (3) = 6, left: 6, 7/2\n(7/2) / (9) = 7/18, left: 7/18, 3\n(7) + (2) = 9, left: 9, 9, 3\n(9) / (3) = 3, left: 3, 9\n(3) - (9) = -6, left: -6\n(9) * (3) = 27, left: 27, 9\n(9) - (9) = 0, left: 0, 3\n(9) * (9) = 81, left: 81, 3\n(7) * (2) = 14, left: 14, 9, 3\n(3) - (9) = -6, left: -6, 14\n(2) - (7) = -5, left: -5, 9, 3\n(3) * (-5) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - (3 * (2 - 7)))"}, {"input": "7 2 9 3\n", "output": "(7) / (3) = 7/3, left: 7/3, 2, 9\n(9) - (7/3) = 20/3, left: 20/3, 2\n(7) + (3) = 10, left: 10, 2, 9\n(3) - (7) = -4, left: -4, 2, 9\n(7) - (3) = 4, left: 4, 2, 9\n(2) - (4) = -2, left: -2, 9\n(9) / (-2) = -9/2, left: -9/2\n(9) / (4) = 9/4, left: 9/4, 2\n(9) - (2) = 7, left: 7, 4\n(2) + (9) = 11, left: 11, 4\n(11) / (4) = 11/4, left: 11/4\n(7) * (3) = 21, left: 21, 2, 9\n(21) - (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((7 * 3) - 9))"}, {"input": "9 10 4 2\n", "output": "(10) - (4) = 6, left: 6, 9, 2\n(9) / (2) = 9/2, left: 9/2, 6\n(9) - (2) = 7, left: 7, 6\n(6) * (7) = 42, left: 42\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((10 - 4) + (9 * 2))"}, {"input": "9 10 4 2\n", "output": "(4) - (10) = -6, left: -6, 9, 2\n(-6) - (9) = -15, left: -15, 2\n(9) + (-6) = 3, left: 3, 2\n(3) - (2) = 1, left: 1\n(9) - (2) = 7, left: 7, -6\n(-6) * (7) = -42, left: -42\n(2) - (9) = -7, left: -7, -6\n(9) + (2) = 11, left: 11, -6\n(9) * (2) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((9 * 2) - (4 - 10))"}, {"input": "9 10 4 2\n", "output": "(10) - (9) = 1, left: 1, 4, 2\n(4) - (1) = 3, left: 3, 2\n(9) * (10) = 90, left: 90, 4, 2\n(9) - (10) = -1, left: -1, 4, 2\n(10) / (9) = 10/9, left: 10/9, 4, 2\n(4) / (10/9) = 18/5, left: 18/5, 2\n(9) + (10) = 19, left: 19, 4, 2\n(4) - (10) = -6, left: -6, 9, 2\n(9) * (2) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((9 * 2) - (4 - 10))"}, {"input": "9 10 4 2\n", "output": "(9) / (4) = 9/4, left: 9/4, 10, 2\n(10) - (9/4) = 31/4, left: 31/4, 2\n(2) / (9/4) = 8/9, left: 8/9, 10\n(4) - (9) = -5, left: -5, 10, 2\n(2) - (-5) = 7, left: 7, 10\n(10) * (7) = 70, left: 70\n(2) * (-5) = -10, left: -10, 10\n(9) * (4) = 36, left: 36, 10, 2\n(36) - (2) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: (((9 * 4) - 2) - 10)"}, {"input": "9 10 4 2\n", "output": "(10) - (4) = 6, left: 6, 9, 2\n(2) / (9) = 2/9, left: 2/9, 6\n(2/9) / (6) = 1/27, left: 1/27\n(6) - (2/9) = 52/9, left: 52/9\n(9) / (2) = 9/2, left: 9/2, 6\n(9/2) / (6) = 3/4, left: 3/4\n(9) - (2) = 7, left: 7, 6\n(6) - (7) = -1, left: -1\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((10 - 4) + (9 * 2))"}, {"input": "9 10 4 2\n", "output": "(10) / (2) = 5, left: 5, 9, 4\n(4) * (5) = 20, left: 20, 9\n(9) - (20) = -11, left: -11\n(4) / (9) = 4/9, left: 4/9, 5\n(9) * (4) = 36, left: 36, 5\n(5) - (9) = -4, left: -4, 4\n(10) + (2) = 12, left: 12, 9, 4\n(9) + (4) = 13, left: 13, 12\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (10 + 2))"}, {"input": "5 4 12 8\n", "output": "(12) / (5) = 12/5, left: 12/5, 4, 8\n(8) + (12/5) = 52/5, left: 52/5, 4\n(4) + (52/5) = 72/5, left: 72/5\n(12) - (5) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 5) - 4))"}, {"input": "5 4 12 8\n", "output": "(12) / (8) = 3/2, left: 3/2, 5, 4\n(4) - (3/2) = 5/2, left: 5/2, 5\n(4) * (3/2) = 6, left: 6, 5\n(6) - (5) = 1, left: 1\n(5) + (3/2) = 13/2, left: 13/2, 4\n(5) - (4) = 1, left: 1, 3/2\n(4) / (5) = 4/5, left: 4/5, 3/2\n(12) - (8) = 4, left: 4, 5, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 * (12 - 8)))"}, {"input": "5 4 12 8\n", "output": "(5) / (4) = 5/4, left: 5/4, 12, 8\n(5/4) / (8) = 5/32, left: 5/32, 12\n(4) / (5) = 4/5, left: 4/5, 12, 8\n(4/5) - (8) = -36/5, left: -36/5, 12\n(12) - (4/5) = 56/5, left: 56/5, 8\n(5) + (4) = 9, left: 9, 12, 8\n(12) / (9) = 4/3, left: 4/3, 8\n(4/3) - (8) = -20/3, left: -20/3\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (12 - (5 + 4)))"}, {"input": "5 4 12 8\n", "output": "(8) / (4) = 2, left: 2, 5, 12\n(5) - (12) = -7, left: -7, 2\n(4) / (8) = 1/2, left: 1/2, 5, 12\n(12) / (5) = 12/5, left: 12/5, 1/2\n(4) - (8) = -4, left: -4, 5, 12\n(4) * (8) = 32, left: 32, 5, 12\n(5) / (32) = 5/32, left: 5/32, 12\n(12) - (5) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 5) - 4))"}, {"input": "5 4 12 8\n", "output": "(4) * (8) = 32, left: 32, 5, 12\n(32) - (5) = 27, left: 27, 12\n(8) / (4) = 2, left: 2, 5, 12\n(8) - (4) = 4, left: 4, 5, 12\n(5) + (12) = 17, left: 17, 4\n(5) / (12) = 5/12, left: 5/12, 4, 8\n(4) - (5/12) = 43/12, left: 43/12, 8\n(12) - (5) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 5) - 4))"}, {"input": "5 4 12 8\n", "output": "(12) - (8) = 4, left: 4, 5, 4\n(4) - (4) = 0, left: 0, 5\n(5) + (0) = 5, left: 5\n(4) - (4) = 0, left: 0, 5\n(0) / (5) = 0, left: 0\n(4) / (4) = 1, left: 1, 5\n(5) + (1) = 6, left: 6\n(4) - (5) = -1, left: -1, 4\n(5) * (4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 * (12 - 8)))"}, {"input": "5 4 12 8\n", "output": "(4) / (8) = 1/2, left: 1/2, 5, 12\n(8) - (4) = 4, left: 4, 5, 12\n(4) - (5) = -1, left: -1, 12\n(12) + (-1) = 11, left: 11\n(4) - (8) = -4, left: -4, 5, 12\n(12) / (-4) = -3, left: -3, 5\n(4) + (8) = 12, left: 12, 5, 12\n(12) / (5) = 12/5, left: 12/5, 4, 8\n(5) + (12) = 17, left: 17, 4, 8\n(4) * (8) = 32, left: 32, 17\n(5) - (12) = -7, left: -7, 4, 8\n(12) - (5) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 5) - 4))"}, {"input": "5 4 12 8\n", "output": "(4) - (8) = -4, left: -4, 5, 12\n(5) + (12) = 17, left: 17, -4\n(4) + (8) = 12, left: 12, 5, 12\n(12) + (12) = 24, left: 24, 5\n(4) * (8) = 32, left: 32, 5, 12\n(8) / (4) = 2, left: 2, 5, 12\n(4) / (8) = 1/2, left: 1/2, 5, 12\n(12) - (1/2) = 23/2, left: 23/2, 5\n(8) - (4) = 4, left: 4, 5, 12\n(5) * (4) = 20, left: 20, 12\n(5) / (12) = 5/12, left: 5/12, 4, 8\n(12) - (5) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 5) - 4))"}, {"input": "12 12 12 10\n", "output": "(10) / (12) = 5/6, left: 5/6, 12, 12\n(12) - (10) = 2, left: 2, 12, 12\n(12) + (10) = 22, left: 22, 12, 12\n(12) * (10) = 120, left: 120, 12, 12\n(12) * (12) = 144, left: 144, 120\n(144) - (120) = 24, left: 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 12 10\n", "output": "(12) - (12) = 0, left: 0, 12, 10\n(12) + (12) = 24, left: 24, 12, 10\n(24) / (12) = 2, left: 2, 10\n(12) * (12) = 144, left: 144, 12, 10\n(12) * (10) = 120, left: 120, 144\n(144) - (120) = 24, left: 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 12 10\n", "output": "(12) / (12) = 1, left: 1, 12, 10\n(12) / (10) = 6/5, left: 6/5, 1\n(1) - (6/5) = -1/5, left: -1/5\n(12) * (12) = 144, left: 144, 12, 10\n(12) * (10) = 120, left: 120, 144\n(144) - (120) = 24, left: 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 12 10\n", "output": "(12) / (10) = 6/5, left: 6/5, 12, 12\n(12) - (10) = 2, left: 2, 12, 12\n(12) * (2) = 24, left: 24, 12\n(12) * (10) = 120, left: 120, 12, 12\n(12) * (12) = 144, left: 144, 120\n(144) - (120) = 24, left: 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 12 10\n", "output": "(12) + (12) = 24, left: 24, 12, 10\n(12) + (24) = 36, left: 36, 10\n(24) - (12) = 12, left: 12, 10\n(12) * (12) = 144, left: 144, 12, 10\n(12) * (10) = 120, left: 120, 144\n(144) - (120) = 24, left: 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 12 10\n", "output": "(12) / (12) = 1, left: 1, 12, 10\n(10) + (1) = 11, left: 11, 12\n(12) - (10) = 2, left: 2, 1\n(12) / (10) = 6/5, left: 6/5, 1\n(12) - (1) = 11, left: 11, 10\n(12) + (1) = 13, left: 13, 10\n(12) * (12) = 144, left: 144, 12, 10\n(12) + (10) = 22, left: 22, 144\n(12) * (10) = 120, left: 120, 144\n(144) - (120) = 24, left: 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 12 10\n", "output": "(12) - (12) = 0, left: 0, 12, 10\n(12) - (10) = 2, left: 2, 0\n(0) - (10) = -10, left: -10, 12\n(12) * (12) = 144, left: 144, 12, 10\n(10) + (144) = 154, left: 154, 12\n(10) - (12) = -2, left: -2, 144\n(144) + (-2) = 142, left: 142\n(10) / (12) = 5/6, left: 5/6, 144\n(12) * (10) = 120, left: 120, 144\n(144) - (120) = 24, left: 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 12 10\n", "output": "(12) / (12) = 1, left: 1, 12, 10\n(12) / (10) = 6/5, left: 6/5, 1\n(12) + (12) = 24, left: 24, 12, 10\n(10) - (24) = -14, left: -14, 12\n(12) + (-14) = -2, left: -2\n(12) / (10) = 6/5, left: 6/5, 24\n(12) - (12) = 0, left: 0, 12, 10\n(12) * (12) = 144, left: 144, 12, 10\n(12) * (10) = 120, left: 120, 144\n(144) - (120) = 24, left: 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 12 10\n", "output": "(10) / (12) = 5/6, left: 5/6, 12, 12\n(12) / (10) = 6/5, left: 6/5, 12, 12\n(12) - (10) = 2, left: 2, 12, 12\n(12) + (10) = 22, left: 22, 12, 12\n(12) * (22) = 264, left: 264, 12\n(10) - (12) = -2, left: -2, 12, 12\n(12) + (12) = 24, left: 24, -2\n(12) * (10) = 120, left: 120, 12, 12\n(12) * (12) = 144, left: 144, 120\n(144) - (120) = 24, left: 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 12 10\n", "output": "(12) / (10) = 6/5, left: 6/5, 12, 12\n(12) + (10) = 22, left: 22, 12, 12\n(22) / (12) = 11/6, left: 11/6, 12\n(12) * (22) = 264, left: 264, 12\n(12) - (10) = 2, left: 2, 12, 12\n(12) / (2) = 6, left: 6, 12\n(2) - (12) = -10, left: -10, 12\n(12) * (10) = 120, left: 120, 12, 12\n(12) * (12) = 144, left: 144, 120\n(144) - (120) = 24, left: 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 1 12\n", "output": "(12) + (12) = 24, left: 24, 1, 12\n(12) / (12) = 1, left: 1, 1, 12\n(12) + (1) = 13, left: 13, 1\n(1) + (13) = 14, left: 14\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "12 12 1 12\n", "output": "(12) / (12) = 1, left: 1, 1, 12\n(12) + (1) = 13, left: 13, 1\n(12) / (1) = 12, left: 12, 1\n(1) * (12) = 12, left: 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "12 12 1 12\n", "output": "(12) * (12) = 144, left: 144, 1, 12\n(144) / (12) = 12, left: 12, 1\n(12) + (12) = 24, left: 24, 1, 12\n(12) / (12) = 1, left: 1, 1, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "12 12 1 12\n", "output": "(1) * (12) = 12, left: 12, 12, 12\n(12) / (12) = 1, left: 1, 12\n(12) + (12) = 24, left: 24, 12, 1\n(12) / (12) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "12 12 1 12\n", "output": "(12) + (12) = 24, left: 24, 1, 12\n(12) * (24) = 288, left: 288, 1\n(288) - (1) = 287, left: 287\n(12) - (1) = 11, left: 11, 24\n(1) / (24) = 1/24, left: 1/24, 12\n(1) + (24) = 25, left: 25, 12\n(12) - (25) = -13, left: -13\n(12) / (12) = 1, left: 1, 1, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "12 12 1 12\n", "output": "(12) * (12) = 144, left: 144, 1, 12\n(1) / (144) = 1/144, left: 1/144, 12\n(12) + (12) = 24, left: 24, 1, 12\n(1) * (12) = 12, left: 12, 24\n(12) - (1) = 11, left: 11, 24\n(1) - (12) = -11, left: -11, 24\n(12) - (12) = 0, left: 0, 1, 12\n(12) / (12) = 1, left: 1, 1, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "12 12 1 12\n", "output": "(12) + (1) = 13, left: 13, 12, 12\n(12) - (1) = 11, left: 11, 12, 12\n(1) - (12) = -11, left: -11, 12, 12\n(12) * (-11) = -132, left: -132, 12\n(-132) / (12) = -11, left: -11\n(12) + (12) = 24, left: 24, 12, 1\n(12) * (1) = 12, left: 12, 24\n(12) / (12) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "12 12 1 12\n", "output": "(1) / (12) = 1/12, left: 1/12, 12, 12\n(12) + (1/12) = 145/12, left: 145/12, 12\n(12) - (1/12) = 143/12, left: 143/12, 12\n(1) + (12) = 13, left: 13, 12, 12\n(12) / (12) = 1, left: 1, 13\n(13) + (1) = 14, left: 14\n(12) - (12) = 0, left: 0, 12, 1\n(12) / (12) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "12 12 1 12\n", "output": "(12) / (12) = 1, left: 1, 1, 12\n(1) + (12) = 13, left: 13, 1\n(1) * (13) = 13, left: 13\n(12) + (1) = 13, left: 13, 1\n(1) - (12) = -11, left: -11, 1\n(-11) - (1) = -12, left: -12\n(12) * (1) = 12, left: 12, 1\n(1) * (12) = 12, left: 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "5 5 10 10\n", "output": "(5) / (10) = 1/2, left: 1/2, 5, 10\n(5) * (10) = 50, left: 50, 5, 10\n(5) / (50) = 1/10, left: 1/10, 10\n(5) * (5) = 25, left: 25, 10, 10\n(10) / (10) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "5 5 10 10\n", "output": "(10) - (5) = 5, left: 5, 5, 10\n(5) + (10) = 15, left: 15, 5\n(5) / (10) = 1/2, left: 1/2, 5, 10\n(1/2) - (5) = -9/2, left: -9/2, 10\n(5) * (10) = 50, left: 50, 5, 10\n(5) + (10) = 15, left: 15, 5, 10\n(10) - (10) = 0, left: 0, 5, 5\n(10) / (10) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "5 5 10 10\n", "output": "(5) * (10) = 50, left: 50, 5, 10\n(10) - (5) = 5, left: 5, 5, 10\n(5) + (10) = 15, left: 15, 5, 10\n(10) / (5) = 2, left: 2, 5, 10\n(5) * (10) = 50, left: 50, 5, 10\n(50) - (10) = 40, left: 40, 5\n(10) + (10) = 20, left: 20, 5, 5\n(10) / (10) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "5 5 10 10\n", "output": "(10) / (5) = 2, left: 2, 5, 10\n(10) + (2) = 12, left: 12, 5\n(12) / (5) = 12/5, left: 12/5\n(5) + (10) = 15, left: 15, 5, 10\n(5) - (15) = -10, left: -10, 10\n(10) / (5) = 2, left: 2, 5, 10\n(10) - (5) = 5, left: 5, 5, 10\n(10) / (10) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "5 5 10 10\n", "output": "(5) - (10) = -5, left: -5, 5, 10\n(10) - (5) = 5, left: 5, 5, 10\n(5) + (10) = 15, left: 15, 5, 10\n(5) / (15) = 1/3, left: 1/3, 10\n(1/3) - (10) = -29/3, left: -29/3\n(5) / (10) = 1/2, left: 1/2, 5, 10\n(5) * (10) = 50, left: 50, 5, 10\n(5) * (5) = 25, left: 25, 10, 10\n(10) / (10) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "5 5 10 10\n", "output": "(5) / (5) = 1, left: 1, 10, 10\n(10) - (1) = 9, left: 9, 10\n(10) / (9) = 10/9, left: 10/9\n(5) + (5) = 10, left: 10, 10, 10\n(5) - (5) = 0, left: 0, 10, 10\n(10) + (0) = 10, left: 10, 10\n(10) - (10) = 0, left: 0\n(5) * (5) = 25, left: 25, 10, 10\n(10) / (10) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "6 10 6 12\n", "output": "(10) - (6) = 4, left: 4, 6, 12\n(6) + (4) = 10, left: 10, 12\n(4) / (6) = 2/3, left: 2/3, 12\n(12) / (2/3) = 18, left: 18\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (6 - (10 - 6)))"}, {"input": "6 10 6 12\n", "output": "(6) - (10) = -4, left: -4, 6, 12\n(6) - (-4) = 10, left: 10, 12\n(12) * (10) = 120, left: 120\n(6) * (-4) = -24, left: -24, 12\n(6) + (-4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (6 + (6 - 10)))"}, {"input": "6 10 6 12\n", "output": "(10) * (6) = 60, left: 60, 6, 12\n(6) + (60) = 66, left: 66, 12\n(10) + (6) = 16, left: 16, 6, 12\n(12) / (16) = 3/4, left: 3/4, 6\n(16) - (12) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((10 + 6) - 12))"}, {"input": "6 10 6 12\n", "output": "(6) - (6) = 0, left: 0, 10, 12\n(12) / (10) = 6/5, left: 6/5, 0\n(0) + (6/5) = 6/5, left: 6/5\n(10) / (12) = 5/6, left: 5/6, 0\n(0) * (5/6) = 0, left: 0\n(10) - (12) = -2, left: -2, 0\n(10) + (12) = 22, left: 22, 0\n(6) + (6) = 12, left: 12, 10, 12\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((6 + 6) - 10))"}, {"input": "6 10 6 12\n", "output": "(6) - (10) = -4, left: -4, 6, 12\n(6) - (-4) = 10, left: 10, 12\n(6) / (-4) = -3/2, left: -3/2, 12\n(-3/2) - (12) = -27/2, left: -27/2\n(12) + (-3/2) = 21/2, left: 21/2\n(6) * (-4) = -24, left: -24, 12\n(12) - (-24) = 36, left: 36\n(12) * (-24) = -288, left: -288\n(6) + (-4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (6 + (6 - 10)))"}, {"input": "6 10 6 12\n", "output": "(10) - (6) = 4, left: 4, 6, 12\n(6) + (4) = 10, left: 10, 12\n(12) * (10) = 120, left: 120\n(10) - (12) = -2, left: -2\n(12) - (10) = 2, left: 2\n(4) / (6) = 2/3, left: 2/3, 12\n(12) - (2/3) = 34/3, left: 34/3\n(2/3) - (12) = -34/3, left: -34/3\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (6 - (10 - 6)))"}, {"input": "6 10 6 12\n", "output": "(6) - (6) = 0, left: 0, 10, 12\n(12) / (10) = 6/5, left: 6/5, 0\n(6) / (6) = 1, left: 1, 10, 12\n(1) - (12) = -11, left: -11, 10\n(6) * (6) = 36, left: 36, 10, 12\n(12) + (36) = 48, left: 48, 10\n(36) / (12) = 3, left: 3, 10\n(6) + (6) = 12, left: 12, 10, 12\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((6 + 6) - 10))"}, {"input": "6 10 6 12\n", "output": "(10) * (6) = 60, left: 60, 6, 12\n(12) - (6) = 6, left: 6, 60\n(60) - (6) = 54, left: 54, 12\n(6) - (60) = -54, left: -54, 12\n(12) * (-54) = -648, left: -648\n(60) / (12) = 5, left: 5, 6\n(10) + (6) = 16, left: 16, 6, 12\n(12) - (16) = -4, left: -4, 6\n(16) - (12) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((10 + 6) - 12))"}, {"input": "6 3 6 11\n", "output": "(3) / (6) = 1/2, left: 1/2, 6, 11\n(6) + (3) = 9, left: 9, 6, 11\n(6) - (3) = 3, left: 3, 6, 11\n(11) / (3) = 11/3, left: 11/3, 6, 6\n(3) * (11) = 33, left: 33, 6, 6\n(11) / (6) = 11/6, left: 11/6, 3, 6\n(6) / (11/6) = 36/11, left: 36/11, 3\n(6) * (11) = 66, left: 66, 3, 6\n(6) + (66) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) / (6) = 1, left: 1, 3, 11\n(3) * (11) = 33, left: 33, 1\n(1) - (11) = -10, left: -10, 3\n(6) - (6) = 0, left: 0, 3, 11\n(11) / (3) = 11/3, left: 11/3, 0\n(11) - (3) = 8, left: 8, 0\n(6) * (11) = 66, left: 66, 3, 6\n(3) / (66) = 1/22, left: 1/22, 6\n(6) + (66) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) + (6) = 12, left: 12, 3, 11\n(6) * (6) = 36, left: 36, 3, 11\n(6) / (6) = 1, left: 1, 3, 11\n(3) / (6) = 1/2, left: 1/2, 6, 11\n(1/2) / (11) = 1/22, left: 1/22, 6\n(6) - (3) = 3, left: 3, 6, 11\n(6) + (3) = 9, left: 9, 6, 11\n(6) * (11) = 66, left: 66, 6, 3\n(6) + (66) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) - (6) = 0, left: 0, 3, 11\n(6) / (6) = 1, left: 1, 3, 11\n(3) * (1) = 3, left: 3, 11\n(3) - (6) = -3, left: -3, 6, 11\n(11) - (-3) = 14, left: 14, 6\n(6) / (3) = 2, left: 2, 6, 11\n(6) * (3) = 18, left: 18, 6, 11\n(6) * (11) = 66, left: 66, 6, 3\n(6) + (66) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) / (3) = 2, left: 2, 6, 11\n(3) - (6) = -3, left: -3, 6, 11\n(6) / (11) = 6/11, left: 6/11, -3\n(6) + (3) = 9, left: 9, 6, 11\n(11) + (9) = 20, left: 20, 6\n(6) + (20) = 26, left: 26\n(6) - (3) = 3, left: 3, 6, 11\n(3) - (11) = -8, left: -8, 6, 6\n(6) * (-8) = -48, left: -48, 6\n(-8) - (6) = -14, left: -14, 6\n(11) - (6) = 5, left: 5, 3, 6\n(6) * (11) = 66, left: 66, 3, 6\n(6) + (66) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) / (6) = 1, left: 1, 3, 11\n(11) + (1) = 12, left: 12, 3\n(6) + (6) = 12, left: 12, 3, 11\n(3) / (12) = 1/4, left: 1/4, 11\n(3) - (6) = -3, left: -3, 6, 11\n(6) * (3) = 18, left: 18, 6, 11\n(6) - (18) = -12, left: -12, 11\n(18) / (11) = 18/11, left: 18/11, 6\n(6) + (3) = 9, left: 9, 6, 11\n(6) - (9) = -3, left: -3, 11\n(11) + (-3) = 8, left: 8\n(6) * (11) = 66, left: 66, 6, 3\n(6) + (66) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) - (6) = 0, left: 0, 3, 11\n(3) - (0) = 3, left: 3, 11\n(11) + (3) = 14, left: 14\n(6) / (6) = 1, left: 1, 3, 11\n(6) - (3) = 3, left: 3, 6, 11\n(6) + (3) = 9, left: 9, 6, 11\n(9) - (6) = 3, left: 3, 11\n(6) / (11) = 6/11, left: 6/11, 6, 3\n(11) / (6) = 11/6, left: 11/6, 6, 3\n(3) - (11/6) = 7/6, left: 7/6, 6\n(6) * (11) = 66, left: 66, 6, 3\n(66) - (6) = 60, left: 60, 3\n(6) + (66) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 8 11 1\n", "output": "(11) - (1) = 10, left: 10, 6, 8\n(6) / (8) = 3/4, left: 3/4, 10\n(3/4) - (10) = -37/4, left: -37/4\n(6) * (8) = 48, left: 48, 10\n(6) + (8) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((11 - 1) + (6 + 8))"}, {"input": "6 8 11 1\n", "output": "(8) / (11) = 8/11, left: 8/11, 6, 1\n(8/11) / (6) = 4/33, left: 4/33, 1\n(1) / (8/11) = 11/8, left: 11/8, 6\n(11) - (8) = 3, left: 3, 6, 1\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (11 - 8)))"}, {"input": "6 8 11 1\n", "output": "(6) * (1) = 6, left: 6, 8, 11\n(8) + (6) = 14, left: 14, 11\n(11) * (14) = 154, left: 154\n(1) / (6) = 1/6, left: 1/6, 8, 11\n(11) * (1/6) = 11/6, left: 11/6, 8\n(6) / (1) = 6, left: 6, 8, 11\n(8) - (11) = -3, left: -3, 6\n(6) - (1) = 5, left: 5, 8, 11\n(8) + (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((6 - 1) + (8 + 11))"}, {"input": "6 8 11 1\n", "output": "(6) * (11) = 66, left: 66, 8, 1\n(11) / (6) = 11/6, left: 11/6, 8, 1\n(1) * (11/6) = 11/6, left: 11/6, 8\n(8) + (1) = 9, left: 9, 11/6\n(6) / (11) = 6/11, left: 6/11, 8, 1\n(8) - (6/11) = 82/11, left: 82/11, 1\n(6/11) - (8) = -82/11, left: -82/11, 1\n(6) + (11) = 17, left: 17, 8, 1\n(1) - (8) = -7, left: -7, 17\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((6 + 11) - (1 - 8))"}, {"input": "6 8 11 1\n", "output": "(11) * (1) = 11, left: 11, 6, 8\n(8) - (11) = -3, left: -3, 6\n(11) / (6) = 11/6, left: 11/6, 8\n(11) - (6) = 5, left: 5, 8\n(11) / (1) = 11, left: 11, 6, 8\n(11) - (8) = 3, left: 3, 6\n(11) / (6) = 11/6, left: 11/6, 8\n(11) + (1) = 12, left: 12, 6, 8\n(12) - (8) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((11 + 1) - 8))"}, {"input": "6 8 11 1\n", "output": "(11) - (1) = 10, left: 10, 6, 8\n(6) * (8) = 48, left: 48, 10\n(48) / (10) = 24/5, left: 24/5\n(10) - (48) = -38, left: -38\n(6) - (8) = -2, left: -2, 10\n(-2) - (10) = -12, left: -12\n(10) + (-2) = 8, left: 8\n(8) - (6) = 2, left: 2, 10\n(6) + (8) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((11 - 1) + (6 + 8))"}, {"input": "6 8 11 1\n", "output": "(8) / (11) = 8/11, left: 8/11, 6, 1\n(6) + (8/11) = 74/11, left: 74/11, 1\n(1) - (6) = -5, left: -5, 8/11\n(6) + (1) = 7, left: 7, 8/11\n(11) - (8) = 3, left: 3, 6, 1\n(3) / (1) = 3, left: 3, 6\n(3) - (6) = -3, left: -3\n(1) / (3) = 1/3, left: 1/3, 6\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (11 - 8)))"}, {"input": "8 11 6 2\n", "output": "(6) - (8) = -2, left: -2, 11, 2\n(11) + (2) = 13, left: 13, -2\n(-2) + (13) = 11, left: 11\n(-2) / (13) = -2/13, left: -2/13\n(11) * (2) = 22, left: 22, -2\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((11 * 2) - (6 - 8))"}, {"input": "8 11 6 2\n", "output": "(8) / (11) = 8/11, left: 8/11, 6, 2\n(2) + (8/11) = 30/11, left: 30/11, 6\n(8/11) / (2) = 4/11, left: 4/11, 6\n(11) - (8) = 3, left: 3, 6, 2\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((11 - 8) * (6 + 2))"}, {"input": "8 11 6 2\n", "output": "(2) / (8) = 1/4, left: 1/4, 11, 6\n(2) - (8) = -6, left: -6, 11, 6\n(2) - (11) = -9, left: -9, 8, 6\n(11) + (2) = 13, left: 13, 8, 6\n(8) - (6) = 2, left: 2, 13\n(2) / (11) = 2/11, left: 2/11, 8, 6\n(8) + (2/11) = 90/11, left: 90/11, 6\n(11) * (2) = 22, left: 22, 8, 6\n(6) - (8) = -2, left: -2, 22\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((11 * 2) - (6 - 8))"}, {"input": "8 11 6 2\n", "output": "(6) / (2) = 3, left: 3, 8, 11\n(3) - (11) = -8, left: -8, 8\n(6) * (2) = 12, left: 12, 8, 11\n(12) - (8) = 4, left: 4, 11\n(6) - (2) = 4, left: 4, 8, 11\n(4) - (11) = -7, left: -7, 8\n(8) + (-7) = 1, left: 1\n(6) + (2) = 8, left: 8, 8, 11\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (11 - (6 + 2)))"}, {"input": "8 11 6 2\n", "output": "(8) / (11) = 8/11, left: 8/11, 6, 2\n(6) + (8/11) = 74/11, left: 74/11, 2\n(74/11) / (2) = 37/11, left: 37/11\n(8) * (11) = 88, left: 88, 6, 2\n(8) - (11) = -3, left: -3, 6, 2\n(2) * (-3) = -6, left: -6, 6\n(11) / (8) = 11/8, left: 11/8, 6, 2\n(11) - (8) = 3, left: 3, 6, 2\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((11 - 8) * (6 + 2))"}, {"input": "8 11 6 2\n", "output": "(6) - (8) = -2, left: -2, 11, 2\n(-2) / (2) = -1, left: -1, 11\n(-1) - (11) = -12, left: -12\n(2) + (-2) = 0, left: 0, 11\n(-2) - (2) = -4, left: -4, 11\n(11) * (-4) = -44, left: -44\n(2) * (-2) = -4, left: -4, 11\n(2) - (-2) = 4, left: 4, 11\n(11) * (2) = 22, left: 22, -2\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((11 * 2) - (6 - 8))"}, {"input": "8 11 6 2\n", "output": "(6) - (8) = -2, left: -2, 11, 2\n(11) + (2) = 13, left: 13, -2\n(13) - (-2) = 15, left: 15\n(-2) - (13) = -15, left: -15\n(-2) + (13) = 11, left: 11\n(-2) / (13) = -2/13, left: -2/13\n(11) * (2) = 22, left: 22, -2\n(22) / (-2) = -11, left: -11\n(-2) / (22) = -1/11, left: -1/11\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((11 * 2) - (6 - 8))"}, {"input": "8 11 6 2\n", "output": "(6) - (8) = -2, left: -2, 11, 2\n(11) + (2) = 13, left: 13, -2\n(13) - (-2) = 15, left: 15\n(-2) - (13) = -15, left: -15\n(-2) * (13) = -26, left: -26\n(13) / (-2) = -13/2, left: -13/2\n(-2) + (13) = 11, left: 11\n(-2) / (13) = -2/13, left: -2/13\n(11) * (2) = 22, left: 22, -2\n(22) / (-2) = -11, left: -11\n(-2) / (22) = -1/11, left: -1/11\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((11 * 2) - (6 - 8))"}, {"input": "8 11 6 2\n", "output": "(6) - (8) = -2, left: -2, 11, 2\n(11) + (2) = 13, left: 13, -2\n(13) - (-2) = 15, left: 15\n(-2) - (13) = -15, left: -15\n(-2) * (13) = -26, left: -26\n(13) / (-2) = -13/2, left: -13/2\n(-2) + (13) = 11, left: 11\n(-2) / (13) = -2/13, left: -2/13\n(11) * (2) = 22, left: 22, -2\n(22) / (-2) = -11, left: -11\n(-2) / (22) = -1/11, left: -1/11\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((11 * 2) - (6 - 8))"}, {"input": "3 7 9 8\n", "output": "(7) / (9) = 7/9, left: 7/9, 3, 8\n(8) + (7/9) = 79/9, left: 79/9, 3\n(9) / (7) = 9/7, left: 9/7, 3, 8\n(3) - (8) = -5, left: -5, 9/7\n(9) - (7) = 2, left: 2, 3, 8\n(3) * (2) = 6, left: 6, 8\n(8) - (3) = 5, left: 5, 2\n(7) + (9) = 16, left: 16, 3, 8\n(16) - (8) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((7 + 9) - 8))"}, {"input": "3 7 9 8\n", "output": "(3) - (8) = -5, left: -5, 7, 9\n(9) / (7) = 9/7, left: 9/7, -5\n(8) - (3) = 5, left: 5, 7, 9\n(7) * (9) = 63, left: 63, 5\n(3) * (9) = 27, left: 27, 7, 8\n(7) / (8) = 7/8, left: 7/8, 27\n(27) - (7) = 20, left: 20, 8\n(8) - (7) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (8 - 7)))"}, {"input": "3 7 9 8\n", "output": "(8) / (9) = 8/9, left: 8/9, 3, 7\n(7) - (8/9) = 55/9, left: 55/9, 3\n(7) + (8/9) = 71/9, left: 71/9, 3\n(3) + (7) = 10, left: 10, 8/9\n(9) + (8) = 17, left: 17, 3, 7\n(7) * (17) = 119, left: 119, 3\n(9) - (8) = 1, left: 1, 3, 7\n(7) * (1) = 7, left: 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (9 - 8)))"}, {"input": "3 7 9 8\n", "output": "(9) - (7) = 2, left: 2, 3, 8\n(3) + (2) = 5, left: 5, 8\n(9) / (7) = 9/7, left: 9/7, 3, 8\n(3) * (9/7) = 27/7, left: 27/7, 8\n(8) + (27/7) = 83/7, left: 83/7\n(3) / (8) = 3/8, left: 3/8, 9/7\n(7) * (9) = 63, left: 63, 3, 8\n(7) + (9) = 16, left: 16, 3, 8\n(16) - (8) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((7 + 9) - 8))"}, {"input": "3 7 9 8\n", "output": "(7) - (8) = -1, left: -1, 3, 9\n(3) / (-1) = -3, left: -3, 9\n(3) + (-1) = 2, left: 2, 9\n(3) * (9) = 27, left: 27, -1\n(9) - (3) = 6, left: 6, -1\n(3) - (9) = -6, left: -6, -1\n(-1) / (9) = -1/9, left: -1/9, 3\n(9) / (-1) = -9, left: -9, 3\n(9) + (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 + (7 - 8)))"}, {"input": "3 7 9 8\n", "output": "(8) / (9) = 8/9, left: 8/9, 3, 7\n(9) * (8) = 72, left: 72, 3, 7\n(3) / (72) = 1/24, left: 1/24, 7\n(7) - (72) = -65, left: -65, 3\n(3) + (-65) = -62, left: -62\n(72) - (7) = 65, left: 65, 3\n(9) + (8) = 17, left: 17, 3, 7\n(7) + (17) = 24, left: 24, 3\n(3) / (24) = 1/8, left: 1/8\n(17) - (7) = 10, left: 10, 3\n(3) / (7) = 3/7, left: 3/7, 17\n(9) - (8) = 1, left: 1, 3, 7\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (9 - 8)))"}, {"input": "3 7 9 8\n", "output": "(8) / (3) = 8/3, left: 8/3, 7, 9\n(3) * (9) = 27, left: 27, 7, 8\n(3) - (9) = -6, left: -6, 7, 8\n(7) + (8) = 15, left: 15, -6\n(9) / (3) = 3, left: 3, 7, 8\n(3) / (7) = 3/7, left: 3/7, 8\n(3/7) - (8) = -53/7, left: -53/7\n(9) - (3) = 6, left: 6, 7, 8\n(8) - (6) = 2, left: 2, 7\n(7) + (2) = 9, left: 9\n(3) / (9) = 1/3, left: 1/3, 7, 8\n(8) - (7) = 1, left: 1, 3, 9\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (8 - 7)))"}, {"input": "7 1 10 12\n", "output": "(7) + (1) = 8, left: 8, 10, 12\n(8) / (12) = 2/3, left: 2/3, 10\n(12) + (8) = 20, left: 20, 10\n(10) - (12) = -2, left: -2, 8\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (7 + 1)))"}, {"input": "7 1 10 12\n", "output": "(10) - (12) = -2, left: -2, 7, 1\n(1) * (-2) = -2, left: -2, 7\n(12) - (10) = 2, left: 2, 7, 1\n(12) / (10) = 6/5, left: 6/5, 7, 1\n(10) / (12) = 5/6, left: 5/6, 7, 1\n(10) + (12) = 22, left: 22, 7, 1\n(22) - (1) = 21, left: 21, 7\n(7) + (1) = 8, left: 8, 10, 12\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (7 + 1)))"}, {"input": "7 1 10 12\n", "output": "(7) - (1) = 6, left: 6, 10, 12\n(1) - (7) = -6, left: -6, 10, 12\n(10) / (12) = 5/6, left: 5/6, -6\n(1) / (7) = 1/7, left: 1/7, 10, 12\n(10) * (1/7) = 10/7, left: 10/7, 12\n(7) * (1) = 7, left: 7, 10, 12\n(12) / (7) = 12/7, left: 12/7, 10\n(7) + (1) = 8, left: 8, 10, 12\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (7 + 1)))"}, {"input": "7 1 10 12\n", "output": "(10) / (12) = 5/6, left: 5/6, 7, 1\n(10) + (12) = 22, left: 22, 7, 1\n(7) + (22) = 29, left: 29, 1\n(12) / (10) = 6/5, left: 6/5, 7, 1\n(7) / (1) = 7, left: 7, 6/5\n(6/5) / (7) = 6/35, left: 6/35\n(1) * (10) = 10, left: 10, 7, 12\n(10) - (1) = 9, left: 9, 7, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 - 1) - 7))"}, {"input": "7 1 10 12\n", "output": "(7) + (1) = 8, left: 8, 10, 12\n(12) / (8) = 3/2, left: 3/2, 10\n(10) * (3/2) = 15, left: 15\n(12) + (8) = 20, left: 20, 10\n(20) / (10) = 2, left: 2\n(12) * (8) = 96, left: 96, 10\n(10) + (8) = 18, left: 18, 12\n(18) - (12) = 6, left: 6\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (7 + 1)))"}, {"input": "7 1 10 12\n", "output": "(10) / (12) = 5/6, left: 5/6, 7, 1\n(7) * (10) = 70, left: 70, 1, 12\n(1) * (70) = 70, left: 70, 12\n(7) - (10) = -3, left: -3, 1, 12\n(1) * (12) = 12, left: 12, -3\n(10) / (7) = 10/7, left: 10/7, 1, 12\n(12) * (10/7) = 120/7, left: 120/7, 1\n(10) - (7) = 3, left: 3, 1, 12\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 - 7) - 1))"}, {"input": "1 8 13 5\n", "output": "(1) / (5) = 1/5, left: 1/5, 8, 13\n(8) + (1/5) = 41/5, left: 41/5, 13\n(1) * (5) = 5, left: 5, 8, 13\n(5) / (13) = 5/13, left: 5/13, 8\n(1) - (5) = -4, left: -4, 8, 13\n(13) + (5) = 18, left: 18, 1, 8\n(1) * (18) = 18, left: 18, 8\n(13) - (8) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(1) / (8) = 1/8, left: 1/8, 13, 5\n(8) / (1) = 8, left: 8, 13, 5\n(5) * (8) = 40, left: 40, 13\n(8) / (13) = 8/13, left: 8/13, 5\n(1) - (13) = -12, left: -12, 8, 5\n(13) / (1) = 13, left: 13, 8, 5\n(13) - (5) = 8, left: 8, 1, 8\n(13) - (8) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(13) / (5) = 13/5, left: 13/5, 1, 8\n(5) - (13) = -8, left: -8, 1, 8\n(8) * (5) = 40, left: 40, 1, 13\n(1) / (40) = 1/40, left: 1/40, 13\n(5) - (8) = -3, left: -3, 1, 13\n(5) / (8) = 5/8, left: 5/8, 1, 13\n(8) + (5) = 13, left: 13, 1, 13\n(13) - (8) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(1) + (13) = 14, left: 14, 8, 5\n(1) / (8) = 1/8, left: 1/8, 13, 5\n(5) + (1/8) = 41/8, left: 41/8, 13\n(1) - (5) = -4, left: -4, 8, 13\n(8) / (-4) = -2, left: -2, 13\n(8) - (13) = -5, left: -5, 1, 5\n(8) * (13) = 104, left: 104, 1, 5\n(13) - (8) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(5) / (8) = 5/8, left: 5/8, 1, 13\n(5) - (8) = -3, left: -3, 1, 13\n(1) + (5) = 6, left: 6, 8, 13\n(8) + (13) = 21, left: 21, 6\n(1) * (5) = 5, left: 5, 8, 13\n(13) - (5) = 8, left: 8, 8\n(5) / (13) = 5/13, left: 5/13, 1, 8\n(13) - (8) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(13) - (1) = 12, left: 12, 8, 5\n(1) - (13) = -12, left: -12, 8, 5\n(8) - (5) = 3, left: 3, -12\n(13) / (1) = 13, left: 13, 8, 5\n(5) - (8) = -3, left: -3, 13\n(5) / (8) = 5/8, left: 5/8, 1, 13\n(1) + (13) = 14, left: 14, 5/8\n(5) - (1) = 4, left: 4, 8, 13\n(8) + (4) = 12, left: 12, 13\n(13) / (5) = 13/5, left: 13/5, 1, 8\n(13) - (5) = 8, left: 8, 1, 8\n(13) - (8) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(1) / (5) = 1/5, left: 1/5, 8, 13\n(13) - (8) = 5, left: 5, 1/5\n(1) - (5) = -4, left: -4, 8, 13\n(1) * (5) = 5, left: 5, 8, 13\n(8) - (5) = 3, left: 3, 13\n(1) - (8) = -7, left: -7, 13, 5\n(8) - (1) = 7, left: 7, 13, 5\n(1) + (8) = 9, left: 9, 13, 5\n(5) - (13) = -8, left: -8, 1, 8\n(1) + (-8) = -7, left: -7, 8\n(13) / (5) = 13/5, left: 13/5, 1, 8\n(13) - (8) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(1) - (13) = -12, left: -12, 8, 5\n(5) - (8) = -3, left: -3, -12\n(13) / (1) = 13, left: 13, 8, 5\n(1) / (13) = 1/13, left: 1/13, 8, 5\n(8) / (1/13) = 104, left: 104, 5\n(1) + (8) = 9, left: 9, 13, 5\n(13) / (5) = 13/5, left: 13/5, 1, 8\n(5) / (13) = 5/13, left: 5/13, 1, 8\n(1) - (5) = -4, left: -4, 8, 13\n(5) - (1) = 4, left: 4, 8, 13\n(4) / (8) = 1/2, left: 1/2, 13\n(13) - (8) = 5, left: 5, 1, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "11 11 1 2\n", "output": "(1) - (2) = -1, left: -1, 11, 11\n(11) + (-1) = 10, left: 10, 11\n(11) / (10) = 11/10, left: 11/10\n(1) * (2) = 2, left: 2, 11, 11\n(11) + (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((1 * 2) + (11 + 11))"}, {"input": "11 11 1 2\n", "output": "(11) * (2) = 22, left: 22, 11, 1\n(11) / (1) = 11, left: 11, 22\n(11) - (2) = 9, left: 9, 11, 1\n(11) + (2) = 13, left: 13, 11, 1\n(11) / (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((11 + 2) + (11 / 1))"}, {"input": "11 11 1 2\n", "output": "(2) / (11) = 2/11, left: 2/11, 11, 1\n(11) * (2) = 22, left: 22, 11, 1\n(11) * (1) = 11, left: 11, 22\n(11) + (2) = 13, left: 13, 11, 1\n(11) + (13) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (11 + (11 + 2)))"}, {"input": "11 11 1 2\n", "output": "(1) * (2) = 2, left: 2, 11, 11\n(11) - (11) = 0, left: 0, 2\n(11) / (11) = 1, left: 1, 2\n(1) / (2) = 1/2, left: 1/2\n(11) + (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((1 * 2) + (11 + 11))"}, {"input": "11 11 1 2\n", "output": "(1) * (2) = 2, left: 2, 11, 11\n(11) - (11) = 0, left: 0, 2\n(2) + (0) = 2, left: 2\n(2) - (0) = 2, left: 2\n(11) / (11) = 1, left: 1, 2\n(1) / (2) = 1/2, left: 1/2\n(2) - (1) = 1, left: 1\n(11) * (11) = 121, left: 121, 2\n(11) + (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((1 * 2) + (11 + 11))"}, {"input": "11 11 1 2\n", "output": "(2) - (11) = -9, left: -9, 11, 1\n(-9) / (11) = -9/11, left: -9/11, 1\n(11) / (1) = 11, left: 11, -9\n(2) / (11) = 2/11, left: 2/11, 11, 1\n(11) * (2) = 22, left: 22, 11, 1\n(11) - (22) = -11, left: -11, 1\n(11) - (2) = 9, left: 9, 11, 1\n(11) + (2) = 13, left: 13, 11, 1\n(11) / (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((11 + 2) + (11 / 1))"}, {"input": "11 11 1 2\n", "output": "(11) - (2) = 9, left: 9, 11, 1\n(9) / (11) = 9/11, left: 9/11, 1\n(9) - (11) = -2, left: -2, 1\n(11) - (1) = 10, left: 10, 9\n(11) * (2) = 22, left: 22, 11, 1\n(22) / (1) = 22, left: 22, 11\n(1) + (22) = 23, left: 23, 11\n(11) + (2) = 13, left: 13, 11, 1\n(11) + (13) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((11 + (11 + 2)) / 1)"}, {"input": "11 11 1 2\n", "output": "(1) - (2) = -1, left: -1, 11, 11\n(11) - (11) = 0, left: 0, -1\n(-1) + (0) = -1, left: -1\n(11) / (11) = 1, left: 1, -1\n(-1) - (11) = -12, left: -12, 11\n(11) + (-1) = 10, left: 10, 11\n(-1) / (11) = -1/11, left: -1/11, 11\n(1) * (2) = 2, left: 2, 11, 11\n(11) + (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((1 * 2) + (11 + 11))"}, {"input": "11 11 1 2\n", "output": "(11) - (2) = 9, left: 9, 11, 1\n(9) - (11) = -2, left: -2, 1\n(1) / (-2) = -1/2, left: -1/2\n(2) / (11) = 2/11, left: 2/11, 11, 1\n(11) * (2) = 22, left: 22, 11, 1\n(1) / (22) = 1/22, left: 1/22, 11\n(11) / (2) = 11/2, left: 11/2, 11, 1\n(11) + (2) = 13, left: 13, 11, 1\n(11) + (13) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (11 + (11 + 2)))"}, {"input": "13 4 12 11\n", "output": "(12) * (11) = 132, left: 132, 13, 4\n(11) - (12) = -1, left: -1, 13, 4\n(12) / (11) = 12/11, left: 12/11, 13, 4\n(4) * (12) = 48, left: 48, 13, 11\n(48) - (11) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: (((4 * 12) - 11) - 13)"}, {"input": "13 4 12 11\n", "output": "(13) + (12) = 25, left: 25, 4, 11\n(11) / (25) = 11/25, left: 11/25, 4\n(13) * (12) = 156, left: 156, 4, 11\n(13) + (11) = 24, left: 24, 4, 12\n(4) * (12) = 48, left: 48, 24\n(48) - (24) = 24, left: 24\nreach 24! expression: ((4 * 12) - (13 + 11))"}, {"input": "13 4 12 11\n", "output": "(4) * (12) = 48, left: 48, 13, 11\n(11) * (48) = 528, left: 528, 13\n(13) / (528) = 13/528, left: 13/528\n(48) / (11) = 48/11, left: 48/11, 13\n(48) - (11) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: (((4 * 12) - 11) - 13)"}, {"input": "13 4 12 11\n", "output": "(12) - (13) = -1, left: -1, 4, 11\n(13) - (12) = 1, left: 1, 4, 11\n(4) * (11) = 44, left: 44, 1\n(4) * (12) = 48, left: 48, 13, 11\n(13) - (11) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 * 12) / (13 - 11))"}, {"input": "13 4 12 11\n", "output": "(12) - (13) = -1, left: -1, 4, 11\n(11) / (13) = 11/13, left: 11/13, 4, 12\n(4) / (11/13) = 52/11, left: 52/11, 12\n(13) + (11) = 24, left: 24, 4, 12\n(4) * (12) = 48, left: 48, 24\n(48) - (24) = 24, left: 24\nreach 24! expression: ((4 * 12) - (13 + 11))"}, {"input": "13 4 12 11\n", "output": "(4) * (12) = 48, left: 48, 13, 11\n(11) * (48) = 528, left: 528, 13\n(13) * (528) = 6864, left: 6864\n(11) / (48) = 11/48, left: 11/48, 13\n(13) - (11/48) = 613/48, left: 613/48\n(11/48) / (13) = 11/624, left: 11/624\n(48) / (11) = 48/11, left: 48/11, 13\n(13) * (48/11) = 624/11, left: 624/11\n(48) - (11) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: (((4 * 12) - 11) - 13)"}, {"input": "13 4 12 11\n", "output": "(12) + (11) = 23, left: 23, 13, 4\n(13) * (4) = 52, left: 52, 23\n(12) - (11) = 1, left: 1, 13, 4\n(11) - (12) = -1, left: -1, 13, 4\n(4) - (-1) = 5, left: 5, 13\n(4) / (12) = 1/3, left: 1/3, 13, 11\n(11) - (1/3) = 32/3, left: 32/3, 13\n(4) * (12) = 48, left: 48, 13, 11\n(48) - (11) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: (((4 * 12) - 11) - 13)"}, {"input": "13 4 12 11\n", "output": "(13) + (12) = 25, left: 25, 4, 11\n(4) + (25) = 29, left: 29, 11\n(13) * (12) = 156, left: 156, 4, 11\n(4) - (12) = -8, left: -8, 13, 11\n(13) + (-8) = 5, left: 5, 11\n(4) / (12) = 1/3, left: 1/3, 13, 11\n(4) * (12) = 48, left: 48, 13, 11\n(11) - (13) = -2, left: -2, 48\n(13) - (11) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 * 12) / (13 - 11))"}, {"input": "13 4 12 11\n", "output": "(12) - (13) = -1, left: -1, 4, 11\n(4) + (11) = 15, left: 15, -1\n(13) * (12) = 156, left: 156, 4, 11\n(4) + (156) = 160, left: 160, 11\n(11) + (160) = 171, left: 171\n(13) - (12) = 1, left: 1, 4, 11\n(11) - (4) = 7, left: 7, 1\n(13) + (11) = 24, left: 24, 4, 12\n(4) * (12) = 48, left: 48, 24\n(48) - (24) = 24, left: 24\nreach 24! expression: ((4 * 12) - (13 + 11))"}, {"input": "13 4 12 11\n", "output": "(12) - (13) = -1, left: -1, 4, 11\n(4) + (11) = 15, left: 15, -1\n(12) / (13) = 12/13, left: 12/13, 4, 11\n(4) - (11) = -7, left: -7, 12/13\n(13) - (12) = 1, left: 1, 4, 11\n(4) * (11) = 44, left: 44, 1\n(13) * (11) = 143, left: 143, 4, 12\n(13) + (11) = 24, left: 24, 4, 12\n(4) * (12) = 48, left: 48, 24\n(48) - (24) = 24, left: 24\nreach 24! expression: ((4 * 12) - (13 + 11))"}, {"input": "3 6 7 7\n", "output": "(3) - (7) = -4, left: -4, 6, 7\n(7) / (3) = 7/3, left: 7/3, 6, 7\n(6) * (7/3) = 14, left: 14, 7\n(7) - (3) = 4, left: 4, 6, 7\n(7) - (4) = 3, left: 3, 6\n(3) / (7) = 3/7, left: 3/7, 6, 7\n(3/7) - (7) = -46/7, left: -46/7, 6\n(7) + (7) = 14, left: 14, 3, 6\n(14) - (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((7 + 7) - 6))"}, {"input": "3 6 7 7\n", "output": "(3) - (7) = -4, left: -4, 6, 7\n(-4) / (6) = -2/3, left: -2/3, 7\n(7) - (3) = 4, left: 4, 6, 7\n(7) / (3) = 7/3, left: 7/3, 6, 7\n(7) / (3) = 7/3, left: 7/3, 6, 7\n(7) / (7/3) = 3, left: 3, 6\n(6) - (3) = 3, left: 3\n(6) - (7) = -1, left: -1, 3, 7\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (6 - 7)))"}, {"input": "3 6 7 7\n", "output": "(6) - (7) = -1, left: -1, 3, 7\n(3) / (7) = 3/7, left: 3/7, -1\n(-1) - (3/7) = -10/7, left: -10/7\n(3) * (7) = 21, left: 21, -1\n(21) - (-1) = 22, left: 22\n(3) - (7) = -4, left: -4, -1\n(7) + (-1) = 6, left: 6, 3\n(3) + (6) = 9, left: 9\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (6 - 7)))"}, {"input": "3 6 7 7\n", "output": "(7) / (3) = 7/3, left: 7/3, 6, 7\n(7) - (7/3) = 14/3, left: 14/3, 6\n(3) - (7) = -4, left: -4, 6, 7\n(7) + (-4) = 3, left: 3, 6\n(3) * (7) = 21, left: 21, 6, 7\n(7) / (6) = 7/6, left: 7/6, 3, 7\n(6) - (7) = -1, left: -1, 3, 7\n(3) / (-1) = -3, left: -3, 7\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (6 - 7)))"}, {"input": "3 6 7 7\n", "output": "(7) / (7) = 1, left: 1, 3, 6\n(1) / (6) = 1/6, left: 1/6, 3\n(3) - (1/6) = 17/6, left: 17/6\n(6) - (1) = 5, left: 5, 3\n(1) - (3) = -2, left: -2, 6\n(6) - (-2) = 8, left: 8\n(-2) / (6) = -1/3, left: -1/3\n(3) + (1) = 4, left: 4, 6\n(6) - (4) = 2, left: 2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (7 / 7)))"}, {"input": "3 6 7 7\n", "output": "(3) / (7) = 3/7, left: 3/7, 6, 7\n(6) / (3/7) = 14, left: 14, 7\n(3) + (7) = 10, left: 10, 6, 7\n(3) - (7) = -4, left: -4, 6, 7\n(-4) - (6) = -10, left: -10, 7\n(3) * (7) = 21, left: 21, 6, 7\n(6) / (21) = 2/7, left: 2/7, 7\n(3) / (7) = 3/7, left: 3/7, 6, 7\n(3) + (7) = 10, left: 10, 6, 7\n(6) - (7) = -1, left: -1, 10\n(-1) - (10) = -11, left: -11\n(6) - (7) = -1, left: -1, 3, 7\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (6 - 7)))"}, {"input": "3 6 7 7\n", "output": "(7) / (7) = 1, left: 1, 3, 6\n(1) / (6) = 1/6, left: 1/6, 3\n(6) + (1) = 7, left: 7, 3\n(3) / (7) = 3/7, left: 3/7\n(3) - (1) = 2, left: 2, 6\n(6) + (2) = 8, left: 8\n(3) * (1) = 3, left: 3, 6\n(6) + (3) = 9, left: 9\n(6) * (3) = 18, left: 18\n(3) / (1) = 3, left: 3, 6\n(6) + (3) = 9, left: 9\n(1) / (3) = 1/3, left: 1/3, 6\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (7 / 7)))"}, {"input": "3 6 7 7\n", "output": "(7) / (3) = 7/3, left: 7/3, 6, 7\n(6) - (7/3) = 11/3, left: 11/3, 7\n(3) / (7) = 3/7, left: 3/7, 6, 7\n(6) + (7) = 13, left: 13, 3/7\n(3) - (7) = -4, left: -4, 6, 7\n(7) * (-4) = -28, left: -28, 6\n(7) - (3) = 4, left: 4, 6, 7\n(6) + (4) = 10, left: 10, 7\n(6) - (4) = 2, left: 2, 7\n(3) + (7) = 10, left: 10, 6, 7\n(6) - (7) = -1, left: -1, 3, 7\n(-1) / (7) = -1/7, left: -1/7, 3\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (6 - 7)))"}, {"input": "3 6 7 7\n", "output": "(3) - (7) = -4, left: -4, 6, 7\n(-4) - (6) = -10, left: -10, 7\n(7) * (-4) = -28, left: -28, 6\n(3) * (7) = 21, left: 21, 6, 7\n(7) / (3) = 7/3, left: 7/3, 6, 7\n(6) - (7/3) = 11/3, left: 11/3, 7\n(7) - (3) = 4, left: 4, 6, 7\n(6) * (4) = 24, left: 24, 7\n(3) + (7) = 10, left: 10, 6, 7\n(7) / (10) = 7/10, left: 7/10, 6\n(7) / (6) = 7/6, left: 7/6, 10\n(7) + (7) = 14, left: 14, 3, 6\n(14) - (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((7 + 7) - 6))"}, {"input": "7 6 1 4\n", "output": "(1) / (7) = 1/7, left: 1/7, 6, 4\n(4) / (6) = 2/3, left: 2/3, 1/7\n(4) - (1/7) = 27/7, left: 27/7, 6\n(27/7) - (6) = -15/7, left: -15/7\n(6) * (1/7) = 6/7, left: 6/7, 4\n(4) * (6/7) = 24/7, left: 24/7\n(7) + (1) = 8, left: 8, 6, 4\n(4) + (8) = 12, left: 12, 6\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((7 + 1) - 4))"}, {"input": "7 6 1 4\n", "output": "(1) / (4) = 1/4, left: 1/4, 7, 6\n(6) / (7) = 6/7, left: 6/7, 1/4\n(1) + (4) = 5, left: 5, 7, 6\n(7) * (6) = 42, left: 42, 5\n(5) - (42) = -37, left: -37\n(7) - (6) = 1, left: 1, 5\n(7) / (6) = 7/6, left: 7/6, 5\n(1) - (4) = -3, left: -3, 7, 6\n(7) + (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 + (1 - 4)))"}, {"input": "7 6 1 4\n", "output": "(1) * (4) = 4, left: 4, 7, 6\n(4) - (6) = -2, left: -2, 7\n(6) * (4) = 24, left: 24, 7\n(6) - (7) = -1, left: -1, 4\n(4) - (-1) = 5, left: 5\n(4) - (1) = 3, left: 3, 7, 6\n(6) * (3) = 18, left: 18, 7\n(6) - (3) = 3, left: 3, 7\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (4 - 1)))"}, {"input": "7 6 1 4\n", "output": "(1) * (4) = 4, left: 4, 7, 6\n(4) - (6) = -2, left: -2, 7\n(4) - (7) = -3, left: -3, 6\n(6) - (-3) = 9, left: 9\n(1) - (4) = -3, left: -3, 7, 6\n(-3) / (7) = -3/7, left: -3/7, 6\n(7) / (-3) = -7/3, left: -7/3, 6\n(6) / (-7/3) = -18/7, left: -18/7\n(7) + (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 + (1 - 4)))"}, {"input": "7 6 1 4\n", "output": "(4) / (7) = 4/7, left: 4/7, 6, 1\n(1) + (4/7) = 11/7, left: 11/7, 6\n(1) / (4/7) = 7/4, left: 7/4, 6\n(7) * (4) = 28, left: 28, 6, 1\n(6) * (28) = 168, left: 168, 1\n(7) / (4) = 7/4, left: 7/4, 6, 1\n(7) + (4) = 11, left: 11, 6, 1\n(4) - (7) = -3, left: -3, 6, 1\n(1) - (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 - (4 - 7)))"}, {"input": "7 6 1 4\n", "output": "(1) / (4) = 1/4, left: 1/4, 7, 6\n(6) - (1/4) = 23/4, left: 23/4, 7\n(7) - (6) = 1, left: 1, 1/4\n(1) + (4) = 5, left: 5, 7, 6\n(7) - (6) = 1, left: 1, 5\n(7) - (5) = 2, left: 2, 6\n(6) * (2) = 12, left: 12\n(5) / (7) = 5/7, left: 5/7, 6\n(7) / (5) = 7/5, left: 7/5, 6\n(6) + (5) = 11, left: 11, 7\n(1) - (4) = -3, left: -3, 7, 6\n(7) + (-3) = 4, left: 4, 6\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 + (1 - 4)))"}, {"input": "7 4 10 10\n", "output": "(10) / (10) = 1, left: 1, 7, 4\n(7) * (4) = 28, left: 28, 1\n(1) / (7) = 1/7, left: 1/7, 4\n(4) / (1/7) = 28, left: 28\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "7 4 10 10\n", "output": "(7) + (10) = 17, left: 17, 4, 10\n(17) - (4) = 13, left: 13, 10\n(10) * (13) = 130, left: 130\n(10) / (10) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "7 4 10 10\n", "output": "(7) / (10) = 7/10, left: 7/10, 4, 10\n(7) + (4) = 11, left: 11, 10, 10\n(4) + (10) = 14, left: 14, 7, 10\n(14) - (10) = 4, left: 4, 7\n(4) / (10) = 2/5, left: 2/5, 7, 10\n(7) * (2/5) = 14/5, left: 14/5, 10\n(10) - (4) = 6, left: 6, 7, 10\n(10) / (10) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "7 4 10 10\n", "output": "(10) / (10) = 1, left: 1, 7, 4\n(4) + (1) = 5, left: 5, 7\n(7) * (5) = 35, left: 35\n(1) / (4) = 1/4, left: 1/4, 7\n(4) / (7) = 4/7, left: 4/7, 1\n(4) - (7) = -3, left: -3, 1\n(1) - (7) = -6, left: -6, 4\n(1) / (7) = 1/7, left: 1/7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "7 4 10 10\n", "output": "(4) * (10) = 40, left: 40, 7, 10\n(4) - (10) = -6, left: -6, 7, 10\n(4) + (10) = 14, left: 14, 7, 10\n(10) / (7) = 10/7, left: 10/7, 14\n(7) * (10) = 70, left: 70, 4, 10\n(4) + (70) = 74, left: 74, 10\n(7) + (10) = 17, left: 17, 4, 10\n(10) / (10) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "7 4 10 10\n", "output": "(4) * (10) = 40, left: 40, 7, 10\n(7) - (10) = -3, left: -3, 40\n(40) / (-3) = -40/3, left: -40/3\n(4) * (10) = 40, left: 40, 7, 10\n(7) * (10) = 70, left: 70, 4, 10\n(70) - (4) = 66, left: 66, 10\n(7) / (10) = 7/10, left: 7/10, 4, 10\n(10) / (10) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "7 4 10 10\n", "output": "(10) - (7) = 3, left: 3, 4, 10\n(7) + (10) = 17, left: 17, 4, 10\n(7) / (10) = 7/10, left: 7/10, 4, 10\n(4) / (7/10) = 40/7, left: 40/7, 10\n(4) - (10) = -6, left: -6, 7, 10\n(10) - (10) = 0, left: 0, 7, 4\n(4) + (0) = 4, left: 4, 7\n(10) / (10) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "5 13 13 7\n", "output": "(7) / (13) = 7/13, left: 7/13, 5, 13\n(13) * (7) = 91, left: 91, 5, 13\n(91) / (5) = 91/5, left: 91/5, 13\n(13) - (7) = 6, left: 6, 5, 13\n(5) + (13) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((13 - 7) + (5 + 13))"}, {"input": "5 13 13 7\n", "output": "(13) - (5) = 8, left: 8, 13, 7\n(8) - (13) = -5, left: -5, 7\n(7) / (8) = 7/8, left: 7/8, 13\n(5) + (13) = 18, left: 18, 13, 7\n(7) - (13) = -6, left: -6, 18\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((5 + 13) - (7 - 13))"}, {"input": "5 13 13 7\n", "output": "(7) / (13) = 7/13, left: 7/13, 5, 13\n(13) - (5) = 8, left: 8, 7/13\n(13) / (7/13) = 169/7, left: 169/7, 5\n(7) - (13) = -6, left: -6, 5, 13\n(-6) - (5) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((7 - 13) - 5))"}, {"input": "5 13 13 7\n", "output": "(5) * (13) = 65, left: 65, 13, 7\n(13) * (65) = 845, left: 845, 7\n(13) / (5) = 13/5, left: 13/5, 13, 7\n(5) + (13) = 18, left: 18, 13, 7\n(13) + (18) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((13 + (5 + 13)) - 7)"}, {"input": "5 13 13 7\n", "output": "(13) * (7) = 91, left: 91, 5, 13\n(5) / (91) = 5/91, left: 5/91, 13\n(91) / (5) = 91/5, left: 91/5, 13\n(91) - (5) = 86, left: 86, 13\n(91) / (13) = 7, left: 7, 5\n(13) / (91) = 1/7, left: 1/7, 5\n(13) - (7) = 6, left: 6, 5, 13\n(13) * (6) = 78, left: 78, 5\n(13) + (6) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (13 + (13 - 7)))"}, {"input": "5 13 13 7\n", "output": "(7) / (13) = 7/13, left: 7/13, 5, 13\n(13) + (7/13) = 176/13, left: 176/13, 5\n(13) / (5) = 13/5, left: 13/5, 7/13\n(13) * (7) = 91, left: 91, 5, 13\n(5) + (91) = 96, left: 96, 13\n(13) * (96) = 1248, left: 1248\n(5) + (13) = 18, left: 18, 91\n(13) - (7) = 6, left: 6, 5, 13\n(5) + (13) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((13 - 7) + (5 + 13))"}, {"input": "5 13 13 7\n", "output": "(7) / (13) = 7/13, left: 7/13, 5, 13\n(7/13) / (5) = 7/65, left: 7/65, 13\n(7/65) / (13) = 7/845, left: 7/845\n(5) / (13) = 5/13, left: 5/13, 7/13\n(7/13) / (13) = 7/169, left: 7/169, 5\n(13) * (7/13) = 7, left: 7, 5\n(7) - (13) = -6, left: -6, 5, 13\n(5) / (-6) = -5/6, left: -5/6, 13\n(-6) - (5) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((7 - 13) - 5))"}, {"input": "5 13 13 7\n", "output": "(5) * (13) = 65, left: 65, 13, 7\n(13) / (65) = 1/5, left: 1/5, 7\n(13) / (5) = 13/5, left: 13/5, 13, 7\n(7) / (13/5) = 35/13, left: 35/13, 13\n(7) - (13) = -6, left: -6, 13/5\n(7) / (13) = 7/13, left: 7/13, 13/5\n(5) + (13) = 18, left: 18, 13, 7\n(13) - (18) = -5, left: -5, 7\n(13) + (18) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((13 + (5 + 13)) - 7)"}, {"input": "5 13 13 7\n", "output": "(13) - (5) = 8, left: 8, 13, 7\n(7) + (8) = 15, left: 15, 13\n(7) - (8) = -1, left: -1, 13\n(13) - (7) = 6, left: 6, 8\n(13) / (7) = 13/7, left: 13/7, 8\n(8) - (13/7) = 43/7, left: 43/7\n(5) + (13) = 18, left: 18, 13, 7\n(13) * (7) = 91, left: 91, 18\n(7) - (13) = -6, left: -6, 18\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((5 + 13) - (7 - 13))"}, {"input": "8 4 12 6\n", "output": "(8) * (4) = 32, left: 32, 12, 6\n(32) - (12) = 20, left: 20, 6\n(12) / (32) = 3/8, left: 3/8, 6\n(6) - (12) = -6, left: -6, 32\n(8) / (4) = 2, left: 2, 12, 6\n(12) + (2) = 14, left: 14, 6\n(6) / (12) = 1/2, left: 1/2, 2\n(12) * (6) = 72, left: 72, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (8 / 4)))"}, {"input": "8 4 12 6\n", "output": "(4) + (12) = 16, left: 16, 8, 6\n(6) / (8) = 3/4, left: 3/4, 16\n(4) / (12) = 1/3, left: 1/3, 8, 6\n(8) - (6) = 2, left: 2, 1/3\n(6) - (8) = -2, left: -2, 1/3\n(1/3) / (6) = 1/18, left: 1/18, 8\n(12) / (4) = 3, left: 3, 8, 6\n(6) / (3) = 2, left: 2, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (12 / 4)))"}, {"input": "8 4 12 6\n", "output": "(12) / (4) = 3, left: 3, 8, 6\n(6) / (3) = 2, left: 2, 8\n(2) - (8) = -6, left: -6\n(8) - (2) = 6, left: 6\n(2) / (8) = 1/4, left: 1/4\n(8) * (2) = 16, left: 16\n(8) + (2) = 10, left: 10\n(6) - (3) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (12 / 4)))"}, {"input": "8 4 12 6\n", "output": "(6) - (12) = -6, left: -6, 8, 4\n(8) + (-6) = 2, left: 2, 4\n(4) * (2) = 8, left: 8\n(4) + (-6) = -2, left: -2, 8\n(4) * (-6) = -24, left: -24, 8\n(8) / (-24) = -1/3, left: -1/3\n(8) + (4) = 12, left: 12, -6\n(-6) / (12) = -1/2, left: -1/2\n(4) - (8) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((6 - 12) * (4 - 8))"}, {"input": "8 4 12 6\n", "output": "(6) / (8) = 3/4, left: 3/4, 4, 12\n(4) + (12) = 16, left: 16, 3/4\n(12) - (4) = 8, left: 8, 3/4\n(4) * (3/4) = 3, left: 3, 12\n(4) / (3/4) = 16/3, left: 16/3, 12\n(4) + (3/4) = 19/4, left: 19/4, 12\n(3/4) - (12) = -45/4, left: -45/4, 4\n(6) - (8) = -2, left: -2, 4, 12\n(4) + (-2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (4 + (6 - 8)))"}, {"input": "8 4 12 6\n", "output": "(12) / (4) = 3, left: 3, 8, 6\n(6) / (3) = 2, left: 2, 8\n(2) - (8) = -6, left: -6\n(8) - (2) = 6, left: 6\n(2) / (8) = 1/4, left: 1/4\n(8) * (2) = 16, left: 16\n(8) / (2) = 4, left: 4\n(8) + (2) = 10, left: 10\n(6) - (3) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(3) / (8) = 3/8, left: 3/8\n(8) - (3) = 5, left: 5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (12 / 4)))"}, {"input": "8 4 12 6\n", "output": "(12) / (4) = 3, left: 3, 8, 6\n(6) / (3) = 2, left: 2, 8\n(2) - (8) = -6, left: -6\n(8) - (2) = 6, left: 6\n(2) / (8) = 1/4, left: 1/4\n(8) * (2) = 16, left: 16\n(8) / (2) = 4, left: 4\n(8) + (2) = 10, left: 10\n(6) - (3) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(3) / (8) = 3/8, left: 3/8\n(8) - (3) = 5, left: 5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (12 / 4)))"}, {"input": "8 7 3 2\n", "output": "(3) - (7) = -4, left: -4, 8, 2\n(2) / (8) = 1/4, left: 1/4, -4\n(1/4) - (-4) = 17/4, left: 17/4\n(8) * (2) = 16, left: 16, -4\n(2) - (8) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((3 - 7) * (2 - 8))"}, {"input": "8 7 3 2\n", "output": "(8) + (2) = 10, left: 10, 7, 3\n(10) / (7) = 10/7, left: 10/7, 3\n(8) / (2) = 4, left: 4, 7, 3\n(4) - (3) = 1, left: 1, 7\n(7) * (1) = 7, left: 7\n(3) * (4) = 12, left: 12, 7\n(2) - (8) = -6, left: -6, 7, 3\n(7) * (3) = 21, left: 21, -6\n(3) - (7) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((2 - 8) * (3 - 7))"}, {"input": "8 7 3 2\n", "output": "(3) * (2) = 6, left: 6, 8, 7\n(6) - (8) = -2, left: -2, 7\n(2) - (3) = -1, left: -1, 8, 7\n(8) / (-1) = -8, left: -8, 7\n(7) + (-1) = 6, left: 6, 8\n(3) + (2) = 5, left: 5, 8, 7\n(8) * (5) = 40, left: 40, 7\n(7) - (3) = 4, left: 4, 8, 2\n(8) - (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((7 - 3) * (8 - 2))"}, {"input": "8 7 3 2\n", "output": "(3) - (8) = -5, left: -5, 7, 2\n(7) / (2) = 7/2, left: 7/2, -5\n(7) - (2) = 5, left: 5, -5\n(-5) * (5) = -25, left: -25\n(2) + (-5) = -3, left: -3, 7\n(7) - (-3) = 10, left: 10\n(-5) - (2) = -7, left: -7, 7\n(7) + (-7) = 0, left: 0\n(7) - (-5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 - (3 - 8)))"}, {"input": "8 7 3 2\n", "output": "(3) - (7) = -4, left: -4, 8, 2\n(2) / (8) = 1/4, left: 1/4, -4\n(-4) * (1/4) = -1, left: -1\n(1/4) - (-4) = 17/4, left: 17/4\n(8) * (2) = 16, left: 16, -4\n(-4) - (16) = -20, left: -20\n(-4) + (16) = 12, left: 12\n(2) - (8) = -6, left: -6, -4\n(-4) - (-6) = 2, left: 2\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((3 - 7) * (2 - 8))"}, {"input": "8 7 3 2\n", "output": "(7) + (3) = 10, left: 10, 8, 2\n(8) + (2) = 10, left: 10, 10\n(10) / (2) = 5, left: 5, 8\n(7) / (3) = 7/3, left: 7/3, 8, 2\n(8) + (7/3) = 31/3, left: 31/3, 2\n(2) + (31/3) = 37/3, left: 37/3\n(7/3) / (2) = 7/6, left: 7/6, 8\n(8) / (7/6) = 48/7, left: 48/7\n(7/3) - (2) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((7 / 3) - 2))"}, {"input": "8 7 3 2\n", "output": "(3) * (2) = 6, left: 6, 8, 7\n(7) * (6) = 42, left: 42, 8\n(8) / (6) = 4/3, left: 4/3, 7\n(3) - (2) = 1, left: 1, 8, 7\n(7) - (8) = -1, left: -1, 1\n(7) / (8) = 7/8, left: 7/8, 1\n(8) - (1) = 7, left: 7, 7\n(3) + (2) = 5, left: 5, 8, 7\n(8) / (7) = 8/7, left: 8/7, 5\n(7) / (5) = 7/5, left: 7/5, 8\n(7) - (3) = 4, left: 4, 8, 2\n(2) + (4) = 6, left: 6, 8\n(8) - (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((7 - 3) * (8 - 2))"}, {"input": "10 2 10 3\n", "output": "(10) - (3) = 7, left: 7, 10, 2\n(7) - (10) = -3, left: -3, 2\n(2) - (-3) = 5, left: 5\n(10) * (2) = 20, left: 20, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (10 - 3)))"}, {"input": "10 2 10 3\n", "output": "(10) / (3) = 10/3, left: 10/3, 2, 10\n(10) * (10/3) = 100/3, left: 100/3, 2\n(10) * (3) = 30, left: 30, 2, 10\n(3) / (10) = 3/10, left: 3/10, 2, 10\n(10) + (3) = 13, left: 13, 2, 10\n(10) - (13) = -3, left: -3, 2\n(3) - (10) = -7, left: -7, 2, 10\n(10) - (2) = 8, left: 8, -7\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (3 - 10)))"}, {"input": "10 2 10 3\n", "output": "(3) - (2) = 1, left: 1, 10, 10\n(2) + (3) = 5, left: 5, 10, 10\n(2) - (3) = -1, left: -1, 10, 10\n(10) + (2) = 12, left: 12, 10, 3\n(10) - (12) = -2, left: -2, 3\n(10) / (2) = 5, left: 5, 10, 3\n(10) + (3) = 13, left: 13, 10, 2\n(10) - (3) = 7, left: 7, 10, 2\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (10 - 3)))"}, {"input": "10 2 10 3\n", "output": "(10) - (3) = 7, left: 7, 10, 2\n(7) / (10) = 7/10, left: 7/10, 2\n(10) - (7) = 3, left: 3, 2\n(2) - (3) = -1, left: -1\n(10) * (2) = 20, left: 20, 7\n(10) + (2) = 12, left: 12, 7\n(12) - (7) = 5, left: 5\n(10) - (2) = 8, left: 8, 7\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (10 - 3)))"}, {"input": "10 2 10 3\n", "output": "(10) + (10) = 20, left: 20, 2, 3\n(10) * (10) = 100, left: 100, 2, 3\n(2) * (10) = 20, left: 20, 10, 3\n(2) + (3) = 5, left: 5, 10, 10\n(10) * (2) = 20, left: 20, 10, 3\n(2) / (10) = 1/5, left: 1/5, 10, 3\n(1/5) - (3) = -14/5, left: -14/5, 10\n(3) - (10) = -7, left: -7, 10, 2\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (3 - 10)))"}, {"input": "10 2 10 3\n", "output": "(2) - (10) = -8, left: -8, 10, 3\n(10) - (2) = 8, left: 8, 10, 3\n(3) + (8) = 11, left: 11, 10\n(3) / (10) = 3/10, left: 3/10, 10, 2\n(10) + (3) = 13, left: 13, 10, 2\n(10) + (2) = 12, left: 12, 13\n(13) * (12) = 156, left: 156\n(3) - (10) = -7, left: -7, 10, 2\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (3 - 10)))"}, {"input": "13 7 12 8\n", "output": "(7) - (12) = -5, left: -5, 13, 8\n(12) / (7) = 12/7, left: 12/7, 13, 8\n(8) - (13) = -5, left: -5, 12/7\n(7) + (12) = 19, left: 19, 13, 8\n(19) - (8) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((7 + 12) - 8))"}, {"input": "13 7 12 8\n", "output": "(7) + (8) = 15, left: 15, 13, 12\n(13) * (15) = 195, left: 195, 12\n(12) / (195) = 4/65, left: 4/65\n(12) - (195) = -183, left: -183\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 + 8) - 13))"}, {"input": "13 7 12 8\n", "output": "(12) - (8) = 4, left: 4, 13, 7\n(4) - (13) = -9, left: -9, 7\n(13) / (4) = 13/4, left: 13/4, 7\n(13/4) - (7) = -15/4, left: -15/4\n(13) + (4) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (13 + (12 - 8)))"}, {"input": "13 7 12 8\n", "output": "(13) - (8) = 5, left: 5, 7, 12\n(12) / (5) = 12/5, left: 12/5, 7\n(12) - (5) = 7, left: 7, 7\n(5) - (12) = -7, left: -7, 7\n(12) + (5) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (12 + (13 - 8)))"}, {"input": "13 7 12 8\n", "output": "(8) / (7) = 8/7, left: 8/7, 13, 12\n(13) / (12) = 13/12, left: 13/12, 8/7\n(8) - (7) = 1, left: 1, 13, 12\n(1) / (12) = 1/12, left: 1/12, 13\n(12) - (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (12 - (8 - 7)))"}, {"input": "13 7 12 8\n", "output": "(13) - (8) = 5, left: 5, 7, 12\n(12) / (5) = 12/5, left: 12/5, 7\n(7) + (12/5) = 47/5, left: 47/5\n(12) - (5) = 7, left: 7, 7\n(7) - (7) = 0, left: 0\n(5) - (12) = -7, left: -7, 7\n(5) / (12) = 5/12, left: 5/12, 7\n(7) + (5/12) = 89/12, left: 89/12\n(12) + (5) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (12 + (13 - 8)))"}, {"input": "13 7 12 8\n", "output": "(7) + (8) = 15, left: 15, 13, 12\n(13) * (15) = 195, left: 195, 12\n(195) / (12) = 65/4, left: 65/4\n(12) + (195) = 207, left: 207\n(12) - (195) = -183, left: -183\n(195) - (12) = 183, left: 183\n(12) * (195) = 2340, left: 2340\n(15) - (13) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 + 8) - 13))"}, {"input": "13 7 12 8\n", "output": "(12) - (8) = 4, left: 4, 13, 7\n(4) - (13) = -9, left: -9, 7\n(-9) - (7) = -16, left: -16\n(13) / (4) = 13/4, left: 13/4, 7\n(13/4) - (7) = -15/4, left: -15/4\n(7) / (13/4) = 28/13, left: 28/13\n(13) * (4) = 52, left: 52, 7\n(13) - (4) = 9, left: 9, 7\n(13) + (4) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (13 + (12 - 8)))"}, {"input": "13 7 12 8\n", "output": "(12) - (7) = 5, left: 5, 13, 8\n(5) / (8) = 5/8, left: 5/8, 13\n(13) + (8) = 21, left: 21, 5\n(7) - (12) = -5, left: -5, 13, 8\n(12) / (7) = 12/7, left: 12/7, 13, 8\n(8) * (12/7) = 96/7, left: 96/7, 13\n(13) * (96/7) = 1248/7, left: 1248/7\n(7) + (12) = 19, left: 19, 13, 8\n(19) - (8) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((7 + 12) - 8))"}, {"input": "13 7 12 8\n", "output": "(8) / (7) = 8/7, left: 8/7, 13, 12\n(13) / (12) = 13/12, left: 13/12, 8/7\n(13/12) / (8/7) = 91/96, left: 91/96\n(13) - (8/7) = 83/7, left: 83/7, 12\n(8/7) / (13) = 8/91, left: 8/91, 12\n(12) + (8/7) = 92/7, left: 92/7, 13\n(8/7) / (12) = 2/21, left: 2/21, 13\n(8) - (7) = 1, left: 1, 13, 12\n(12) - (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (12 - (8 - 7)))"}, {"input": "13 7 12 8\n", "output": "(7) + (8) = 15, left: 15, 13, 12\n(13) * (15) = 195, left: 195, 12\n(12) / (195) = 4/65, left: 4/65\n(195) / (12) = 65/4, left: 65/4\n(12) + (195) = 207, left: 207\n(12) - (195) = -183, left: -183\n(195) - (12) = 183, left: 183\n(12) * (195) = 2340, left: 2340\n(15) - (13) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 + 8) - 13))"}, {"input": "13 7 12 8\n", "output": "(7) + (8) = 15, left: 15, 13, 12\n(13) * (15) = 195, left: 195, 12\n(12) / (195) = 4/65, left: 4/65\n(195) / (12) = 65/4, left: 65/4\n(12) + (195) = 207, left: 207\n(12) - (195) = -183, left: -183\n(195) - (12) = 183, left: 183\n(12) * (195) = 2340, left: 2340\n(15) - (13) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 + 8) - 13))"}, {"input": "8 6 4 1\n", "output": "(6) * (1) = 6, left: 6, 8, 4\n(6) / (8) = 3/4, left: 3/4, 4\n(4) * (6) = 24, left: 24, 8\n(8) - (24) = -16, left: -16\n(8) * (24) = 192, left: 192\n(4) / (8) = 1/2, left: 1/2, 6\n(6) - (1/2) = 11/2, left: 11/2\n(4) - (8) = -4, left: -4, 6\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((6 * 1) * (8 - 4))"}, {"input": "8 6 4 1\n", "output": "(4) - (8) = -4, left: -4, 6, 1\n(1) / (-4) = -1/4, left: -1/4, 6\n(1) - (6) = -5, left: -5, -4\n(8) + (4) = 12, left: 12, 6, 1\n(6) + (1) = 7, left: 7, 12\n(4) / (8) = 1/2, left: 1/2, 6, 1\n(1) - (6) = -5, left: -5, 1/2\n(8) - (4) = 4, left: 4, 6, 1\n(1) / (4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 / (8 - 4)))"}, {"input": "8 6 4 1\n", "output": "(6) / (8) = 3/4, left: 3/4, 4, 1\n(4) + (1) = 5, left: 5, 3/4\n(1) / (3/4) = 4/3, left: 4/3, 4\n(8) * (6) = 48, left: 48, 4, 1\n(8) + (6) = 14, left: 14, 4, 1\n(14) - (4) = 10, left: 10, 1\n(1) * (10) = 10, left: 10\n(1) / (6) = 1/6, left: 1/6, 8, 4\n(8) - (4) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((8 - 4) / (1 / 6))"}, {"input": "8 6 4 1\n", "output": "(8) / (6) = 4/3, left: 4/3, 4, 1\n(1) - (4/3) = -1/3, left: -1/3, 4\n(6) / (8) = 3/4, left: 3/4, 4, 1\n(4) / (3/4) = 16/3, left: 16/3, 1\n(3/4) - (1) = -1/4, left: -1/4, 4\n(8) + (6) = 14, left: 14, 4, 1\n(14) / (4) = 7/2, left: 7/2, 1\n(4) / (6) = 2/3, left: 2/3, 8, 1\n(1) - (2/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (1 - (4 / 6)))"}, {"input": "8 6 4 1\n", "output": "(6) - (4) = 2, left: 2, 8, 1\n(8) + (2) = 10, left: 10, 1\n(8) * (2) = 16, left: 16, 1\n(2) - (8) = -6, left: -6, 1\n(8) * (1) = 8, left: 8, 2\n(1) / (8) = 1/8, left: 1/8, 2\n(1) * (2) = 2, left: 2, 8\n(1) + (2) = 3, left: 3, 8\n(8) / (3) = 8/3, left: 8/3\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 + (6 - 4)))"}, {"input": "8 6 4 1\n", "output": "(6) - (8) = -2, left: -2, 4, 1\n(1) + (-2) = -1, left: -1, 4\n(1) / (-2) = -1/2, left: -1/2, 4\n(6) / (8) = 3/4, left: 3/4, 4, 1\n(8) * (6) = 48, left: 48, 4, 1\n(8) / (6) = 4/3, left: 4/3, 4, 1\n(8) - (6) = 2, left: 2, 4, 1\n(8) + (6) = 14, left: 14, 4, 1\n(1) / (4) = 1/4, left: 1/4, 14\n(14) - (1/4) = 55/4, left: 55/4\n(14) / (4) = 7/2, left: 7/2, 1\n(1) / (6) = 1/6, left: 1/6, 8, 4\n(8) - (4) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((8 - 4) / (1 / 6))"}, {"input": "8 6 4 1\n", "output": "(8) * (6) = 48, left: 48, 4, 1\n(4) / (48) = 1/12, left: 1/12, 1\n(1) - (4) = -3, left: -3, 48\n(-3) - (48) = -51, left: -51\n(8) / (6) = 4/3, left: 4/3, 4, 1\n(1) + (4/3) = 7/3, left: 7/3, 4\n(4) - (1) = 3, left: 3, 4/3\n(6) / (8) = 3/4, left: 3/4, 4, 1\n(8) + (6) = 14, left: 14, 4, 1\n(8) - (6) = 2, left: 2, 4, 1\n(1) / (2) = 1/2, left: 1/2, 4\n(4) / (6) = 2/3, left: 2/3, 8, 1\n(1) - (2/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (1 - (4 / 6)))"}, {"input": "7 3 12 3\n", "output": "(12) + (3) = 15, left: 15, 7, 3\n(7) + (3) = 10, left: 10, 15\n(7) - (3) = 4, left: 4, 15\n(15) * (4) = 60, left: 60\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((12 + 3) - 7))"}, {"input": "7 3 12 3\n", "output": "(7) / (3) = 7/3, left: 7/3, 3, 12\n(3) / (7/3) = 9/7, left: 9/7, 12\n(9/7) / (12) = 3/28, left: 3/28\n(7/3) - (3) = -2/3, left: -2/3, 12\n(3) + (7/3) = 16/3, left: 16/3, 12\n(12) - (3) = 9, left: 9, 7/3\n(7/3) * (9) = 21, left: 21\n(7) - (3) = 4, left: 4, 3, 12\n(12) - (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (12 - (7 - 3)))"}, {"input": "7 3 12 3\n", "output": "(12) / (7) = 12/7, left: 12/7, 3, 3\n(3) * (12/7) = 36/7, left: 36/7, 3\n(36/7) / (3) = 12/7, left: 12/7\n(3) - (12/7) = 9/7, left: 9/7, 3\n(12) - (7) = 5, left: 5, 3, 3\n(5) / (3) = 5/3, left: 5/3, 3\n(3) - (5) = -2, left: -2, 3\n(3) - (-2) = 5, left: 5\n(3) + (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (3 + (12 - 7)))"}, {"input": "7 3 12 3\n", "output": "(3) + (3) = 6, left: 6, 7, 12\n(6) - (12) = -6, left: -6, 7\n(12) - (6) = 6, left: 6, 7\n(3) - (3) = 0, left: 0, 7, 12\n(7) * (0) = 0, left: 0, 12\n(3) - (3) = 0, left: 0, 7, 12\n(7) - (12) = -5, left: -5, 0\n(3) * (3) = 9, left: 9, 7, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 * 3) - 7))"}, {"input": "7 3 12 3\n", "output": "(12) + (3) = 15, left: 15, 7, 3\n(7) + (3) = 10, left: 10, 15\n(3) - (7) = -4, left: -4, 15\n(3) - (15) = -12, left: -12, 7\n(3) + (15) = 18, left: 18, 7\n(7) * (15) = 105, left: 105, 3\n(105) - (3) = 102, left: 102\n(15) / (7) = 15/7, left: 15/7, 3\n(15) - (7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((12 + 3) - 7))"}, {"input": "7 3 12 3\n", "output": "(12) - (7) = 5, left: 5, 3, 3\n(3) - (5) = -2, left: -2, 3\n(3) * (-2) = -6, left: -6\n(-2) - (3) = -5, left: -5\n(5) / (3) = 5/3, left: 5/3, 3\n(5/3) - (3) = -4/3, left: -4/3\n(3) * (5) = 15, left: 15, 3\n(15) - (3) = 12, left: 12\n(3) + (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (3 + (12 - 7)))"}, {"input": "7 3 12 3\n", "output": "(3) / (3) = 1, left: 1, 7, 12\n(12) - (1) = 11, left: 11, 7\n(3) + (3) = 6, left: 6, 7, 12\n(7) + (12) = 19, left: 19, 6\n(6) / (12) = 1/2, left: 1/2, 7\n(3) - (3) = 0, left: 0, 7, 12\n(12) + (0) = 12, left: 12, 7\n(3) / (3) = 1, left: 1, 7, 12\n(7) / (1) = 7, left: 7, 12\n(7) * (12) = 84, left: 84, 1\n(3) * (3) = 9, left: 9, 7, 12\n(7) / (9) = 7/9, left: 7/9, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 * 3) - 7))"}, {"input": "7 10 5 12\n", "output": "(10) + (5) = 15, left: 15, 7, 12\n(15) - (7) = 8, left: 8, 12\n(12) / (7) = 12/7, left: 12/7, 15\n(10) - (5) = 5, left: 5, 7, 12\n(7) + (12) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((10 - 5) + (7 + 12))"}, {"input": "7 10 5 12\n", "output": "(5) + (12) = 17, left: 17, 7, 10\n(10) + (17) = 27, left: 27, 7\n(10) * (17) = 170, left: 170, 7\n(12) - (5) = 7, left: 7, 7, 10\n(7) + (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 + (12 - 5)))"}, {"input": "7 10 5 12\n", "output": "(10) - (5) = 5, left: 5, 7, 12\n(7) + (5) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) / (12) = 1, left: 1\n(12) - (12) = 0, left: 0\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (7 + (10 - 5)))"}, {"input": "7 10 5 12\n", "output": "(7) + (5) = 12, left: 12, 10, 12\n(12) / (12) = 1, left: 1, 10\n(10) + (12) = 22, left: 22, 12\n(12) - (10) = 2, left: 2, 12\n(2) - (12) = -10, left: -10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 + 5) - 10))"}, {"input": "7 10 5 12\n", "output": "(5) / (12) = 5/12, left: 5/12, 7, 10\n(12) - (5) = 7, left: 7, 7, 10\n(10) * (7) = 70, left: 70, 7\n(7) * (70) = 490, left: 490\n(10) + (7) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (10 + (12 - 5)))"}, {"input": "7 10 5 12\n", "output": "(10) + (5) = 15, left: 15, 7, 12\n(15) / (7) = 15/7, left: 15/7, 12\n(7) - (12) = -5, left: -5, 15\n(7) + (12) = 19, left: 19, 15\n(12) - (15) = -3, left: -3, 7\n(7) - (-3) = 10, left: 10\n(10) - (5) = 5, left: 5, 7, 12\n(12) / (7) = 12/7, left: 12/7, 5\n(7) + (12) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((10 - 5) + (7 + 12))"}, {"input": "7 10 5 12\n", "output": "(5) + (12) = 17, left: 17, 7, 10\n(7) / (10) = 7/10, left: 7/10, 17\n(10) / (7) = 10/7, left: 10/7, 17\n(7) * (17) = 119, left: 119, 10\n(7) + (17) = 24, left: 24, 10\n(7) / (17) = 7/17, left: 7/17, 10\n(10) - (7/17) = 163/17, left: 163/17\n(12) - (5) = 7, left: 7, 7, 10\n(7) + (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 + (12 - 5)))"}, {"input": "7 10 5 12\n", "output": "(12) / (5) = 12/5, left: 12/5, 7, 10\n(7) * (12/5) = 84/5, left: 84/5, 10\n(7) * (10) = 70, left: 70, 12/5\n(12/5) / (70) = 6/175, left: 6/175\n(5) / (12) = 5/12, left: 5/12, 7, 10\n(10) + (5/12) = 125/12, left: 125/12, 7\n(10) / (7) = 10/7, left: 10/7, 5/12\n(12) - (5) = 7, left: 7, 7, 10\n(10) + (7) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (10 + (12 - 5)))"}, {"input": "7 10 5 12\n", "output": "(7) + (5) = 12, left: 12, 10, 12\n(12) / (12) = 1, left: 1, 10\n(12) * (12) = 144, left: 144, 10\n(10) * (144) = 1440, left: 1440\n(12) / (12) = 1, left: 1, 10\n(12) + (12) = 24, left: 24, 10\n(12) / (10) = 6/5, left: 6/5, 12\n(6/5) / (12) = 1/10, left: 1/10\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((7 + 5) - 10))"}, {"input": "7 10 5 12\n", "output": "(10) - (5) = 5, left: 5, 7, 12\n(7) + (5) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) / (12) = 1, left: 1\n(12) - (12) = 0, left: 0\n(12) * (12) = 144, left: 144\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (7 + (10 - 5)))"}, {"input": "7 10 5 12\n", "output": "(10) - (5) = 5, left: 5, 7, 12\n(7) + (5) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) / (12) = 1, left: 1\n(12) - (12) = 0, left: 0\n(12) * (12) = 144, left: 144\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (7 + (10 - 5)))"}, {"input": "7 10 5 12\n", "output": "(10) - (5) = 5, left: 5, 7, 12\n(7) + (5) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) / (12) = 1, left: 1\n(12) - (12) = 0, left: 0\n(12) * (12) = 144, left: 144\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (7 + (10 - 5)))"}, {"input": "1 13 13 11\n", "output": "(1) * (11) = 11, left: 11, 13, 13\n(1) / (13) = 1/13, left: 1/13, 13, 11\n(1/13) / (11) = 1/143, left: 1/143, 13\n(1) - (13) = -12, left: -12, 13, 11\n(11) - (13) = -2, left: -2, -12\n(-12) * (-2) = 24, left: 24\nreach 24! expression: ((1 - 13) * (11 - 13))"}, {"input": "1 13 13 11\n", "output": "(13) - (11) = 2, left: 2, 1, 13\n(1) + (2) = 3, left: 3, 13\n(3) - (13) = -10, left: -10\n(1) * (13) = 13, left: 13, 2\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (13 - 1))"}, {"input": "1 13 13 11\n", "output": "(11) / (13) = 11/13, left: 11/13, 1, 13\n(1) - (13) = -12, left: -12, 11/13\n(13) / (1) = 13, left: 13, 11/13\n(1) * (11/13) = 11/13, left: 11/13, 13\n(1) + (11/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (1 + (11 / 13)))"}, {"input": "1 13 13 11\n", "output": "(13) / (11) = 13/11, left: 13/11, 1, 13\n(11) - (13) = -2, left: -2, 1, 13\n(13) - (-2) = 15, left: 15, 1\n(-2) - (1) = -3, left: -3, 13\n(1) - (13) = -12, left: -12, -2\n(-2) * (-12) = 24, left: 24\nreach 24! expression: ((11 - 13) * (1 - 13))"}, {"input": "1 13 13 11\n", "output": "(1) - (13) = -12, left: -12, 13, 11\n(-12) - (11) = -23, left: -23, 13\n(13) + (-23) = -10, left: -10\n(13) - (11) = 2, left: 2, -12\n(11) - (13) = -2, left: -2, -12\n(-12) * (-2) = 24, left: 24\nreach 24! expression: ((1 - 13) * (11 - 13))"}, {"input": "1 13 13 11\n", "output": "(11) - (1) = 10, left: 10, 13, 13\n(13) - (13) = 0, left: 0, 10\n(1) - (11) = -10, left: -10, 13, 13\n(1) / (11) = 1/11, left: 1/11, 13, 13\n(1/11) - (13) = -142/11, left: -142/11, 13\n(1) * (11) = 11, left: 11, 13, 13\n(13) + (13) = 26, left: 26, 11\n(1) - (13) = -12, left: -12, 13, 11\n(11) - (13) = -2, left: -2, -12\n(-12) * (-2) = 24, left: 24\nreach 24! expression: ((1 - 13) * (11 - 13))"}, {"input": "1 13 13 11\n", "output": "(13) / (11) = 13/11, left: 13/11, 1, 13\n(13) - (1) = 12, left: 12, 13/11\n(13) - (13/11) = 130/11, left: 130/11, 1\n(11) - (13) = -2, left: -2, 1, 13\n(1) - (-2) = 3, left: 3, 13\n(13) + (3) = 16, left: 16\n(-2) / (1) = -2, left: -2, 13\n(1) - (13) = -12, left: -12, -2\n(-12) - (-2) = -10, left: -10\n(-2) * (-12) = 24, left: 24\nreach 24! expression: ((11 - 13) * (1 - 13))"}, {"input": "1 13 13 11\n", "output": "(1) - (13) = -12, left: -12, 13, 11\n(-12) - (11) = -23, left: -23, 13\n(-23) - (13) = -36, left: -36\n(11) - (-12) = 23, left: 23, 13\n(11) * (-12) = -132, left: -132, 13\n(-132) / (13) = -132/13, left: -132/13\n(13) * (11) = 143, left: 143, -12\n(-12) - (143) = -155, left: -155\n(11) - (13) = -2, left: -2, -12\n(-12) * (-2) = 24, left: 24\nreach 24! expression: ((1 - 13) * (11 - 13))"}, {"input": "1 13 13 11\n", "output": "(11) / (13) = 11/13, left: 11/13, 1, 13\n(1) + (13) = 14, left: 14, 11/13\n(14) - (11/13) = 171/13, left: 171/13\n(13) - (1) = 12, left: 12, 11/13\n(11/13) + (12) = 167/13, left: 167/13\n(1) * (11/13) = 11/13, left: 11/13, 13\n(13) - (11/13) = 158/13, left: 158/13\n(11/13) - (13) = -158/13, left: -158/13\n(1) + (11/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (1 + (11 / 13)))"}, {"input": "1 13 13 11\n", "output": "(13) - (11) = 2, left: 2, 1, 13\n(1) - (13) = -12, left: -12, 2\n(-12) - (2) = -14, left: -14\n(1) * (13) = 13, left: 13, 2\n(13) - (2) = 11, left: 11\n(1) + (13) = 14, left: 14, 2\n(1) / (13) = 1/13, left: 1/13, 2\n(2) * (1/13) = 2/13, left: 2/13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((13 - 11) * (13 - 1))"}, {"input": "12 10 10 8\n", "output": "(8) / (10) = 4/5, left: 4/5, 12, 10\n(12) / (4/5) = 15, left: 15, 10\n(10) * (8) = 80, left: 80, 12, 10\n(10) - (8) = 2, left: 2, 12, 10\n(12) + (10) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((10 - 8) + (12 + 10))"}, {"input": "12 10 10 8\n", "output": "(8) / (10) = 4/5, left: 4/5, 12, 10\n(12) / (10) = 6/5, left: 6/5, 4/5\n(10) * (8) = 80, left: 80, 12, 10\n(8) - (10) = -2, left: -2, 12, 10\n(10) - (-2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (10 - (8 - 10)))"}, {"input": "12 10 10 8\n", "output": "(12) * (10) = 120, left: 120, 10, 8\n(10) / (12) = 5/6, left: 5/6, 10, 8\n(8) * (5/6) = 20/3, left: 20/3, 10\n(12) + (10) = 22, left: 22, 10, 8\n(8) - (22) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (8 - (12 + 10)))"}, {"input": "12 10 10 8\n", "output": "(10) - (12) = -2, left: -2, 10, 8\n(12) - (10) = 2, left: 2, 10, 8\n(8) * (2) = 16, left: 16, 10\n(12) + (10) = 22, left: 22, 10, 8\n(8) - (10) = -2, left: -2, 22\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((12 + 10) - (8 - 10))"}, {"input": "12 10 10 8\n", "output": "(12) / (10) = 6/5, left: 6/5, 10, 8\n(8) + (6/5) = 46/5, left: 46/5, 10\n(10) / (12) = 5/6, left: 5/6, 10, 8\n(12) + (10) = 22, left: 22, 10, 8\n(10) + (22) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((10 + (12 + 10)) - 8)"}, {"input": "12 10 10 8\n", "output": "(8) / (10) = 4/5, left: 4/5, 12, 10\n(10) * (4/5) = 8, left: 8, 12\n(12) - (10) = 2, left: 2, 4/5\n(10) * (8) = 80, left: 80, 12, 10\n(80) / (12) = 20/3, left: 20/3, 10\n(10) + (8) = 18, left: 18, 12, 10\n(12) * (18) = 216, left: 216, 10\n(8) - (10) = -2, left: -2, 12, 10\n(10) - (-2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (10 - (8 - 10)))"}, {"input": "12 10 10 8\n", "output": "(10) - (12) = -2, left: -2, 10, 8\n(8) + (-2) = 6, left: 6, 10\n(12) / (10) = 6/5, left: 6/5, 10, 8\n(12) * (10) = 120, left: 120, 10, 8\n(8) * (120) = 960, left: 960, 10\n(10) / (12) = 5/6, left: 5/6, 10, 8\n(8) * (5/6) = 20/3, left: 20/3, 10\n(12) + (10) = 22, left: 22, 10, 8\n(8) - (22) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (8 - (12 + 10)))"}, {"input": "12 10 10 8\n", "output": "(10) / (12) = 5/6, left: 5/6, 10, 8\n(10) - (8) = 2, left: 2, 5/6\n(2) - (5/6) = 7/6, left: 7/6\n(12) / (10) = 6/5, left: 6/5, 10, 8\n(12) * (10) = 120, left: 120, 10, 8\n(10) / (8) = 5/4, left: 5/4, 120\n(120) / (5/4) = 96, left: 96\n(12) + (10) = 22, left: 22, 10, 8\n(8) - (10) = -2, left: -2, 22\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((12 + 10) - (8 - 10))"}, {"input": "12 10 10 8\n", "output": "(8) / (10) = 4/5, left: 4/5, 12, 10\n(12) + (4/5) = 64/5, left: 64/5, 10\n(10) / (12) = 5/6, left: 5/6, 4/5\n(10) * (8) = 80, left: 80, 12, 10\n(12) / (80) = 3/20, left: 3/20, 10\n(12) - (10) = 2, left: 2, 80\n(80) / (2) = 40, left: 40\n(10) - (8) = 2, left: 2, 12, 10\n(12) + (10) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((10 - 8) + (12 + 10))"}, {"input": "12 10 10 8\n", "output": "(12) / (10) = 6/5, left: 6/5, 10, 8\n(6/5) - (10) = -44/5, left: -44/5, 8\n(8) - (10) = -2, left: -2, 6/5\n(10) / (12) = 5/6, left: 5/6, 10, 8\n(5/6) / (8) = 5/48, left: 5/48, 10\n(10) - (8) = 2, left: 2, 5/6\n(10) * (5/6) = 25/3, left: 25/3, 8\n(12) + (10) = 22, left: 22, 10, 8\n(10) + (22) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((10 + (12 + 10)) - 8)"}, {"input": "4 3 12 7\n", "output": "(4) * (7) = 28, left: 28, 3, 12\n(12) * (28) = 336, left: 336, 3\n(3) * (336) = 1008, left: 1008\n(3) * (12) = 36, left: 36, 28\n(12) / (3) = 4, left: 4, 28\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * 7) - (12 / 3))"}, {"input": "4 3 12 7\n", "output": "(7) - (3) = 4, left: 4, 4, 12\n(3) / (7) = 3/7, left: 3/7, 4, 12\n(4) * (12) = 48, left: 48, 3/7\n(4) + (12) = 16, left: 16, 3/7\n(12) / (3/7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((12 / (3 / 7)) - 4)"}, {"input": "4 3 12 7\n", "output": "(4) * (7) = 28, left: 28, 3, 12\n(12) * (28) = 336, left: 336, 3\n(3) - (12) = -9, left: -9, 28\n(3) * (12) = 36, left: 36, 28\n(12) / (3) = 4, left: 4, 28\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * 7) - (12 / 3))"}, {"input": "4 3 12 7\n", "output": "(7) - (12) = -5, left: -5, 4, 3\n(12) + (7) = 19, left: 19, 4, 3\n(19) / (3) = 19/3, left: 19/3, 4\n(4) * (19/3) = 76/3, left: 76/3\n(3) + (19) = 22, left: 22, 4\n(12) / (7) = 12/7, left: 12/7, 4, 3\n(3) - (4) = -1, left: -1, 12/7\n(12) * (7) = 84, left: 84, 4, 3\n(84) / (4) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + ((12 * 7) / 4))"}, {"input": "4 3 12 7\n", "output": "(4) * (7) = 28, left: 28, 3, 12\n(12) * (28) = 336, left: 336, 3\n(3) - (336) = -333, left: -333\n(12) / (28) = 3/7, left: 3/7, 3\n(28) - (12) = 16, left: 16, 3\n(16) - (3) = 13, left: 13\n(3) - (12) = -9, left: -9, 28\n(28) - (-9) = 37, left: 37\n(12) / (3) = 4, left: 4, 28\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * 7) - (12 / 3))"}, {"input": "4 3 12 7\n", "output": "(7) - (4) = 3, left: 3, 3, 12\n(3) - (12) = -9, left: -9, 3\n(3) * (3) = 9, left: 9, 12\n(3) / (3) = 1, left: 1, 12\n(4) * (7) = 28, left: 28, 3, 12\n(28) / (3) = 28/3, left: 28/3, 12\n(12) + (28) = 40, left: 40, 3\n(3) + (12) = 15, left: 15, 28\n(12) / (3) = 4, left: 4, 28\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * 7) - (12 / 3))"}, {"input": "4 3 12 7\n", "output": "(7) - (3) = 4, left: 4, 4, 12\n(4) - (12) = -8, left: -8, 4\n(4) / (12) = 1/3, left: 1/3, 4\n(4) + (12) = 16, left: 16, 4\n(12) / (4) = 3, left: 3, 4\n(4) * (3) = 12, left: 12\n(3) / (7) = 3/7, left: 3/7, 4, 12\n(4) - (12) = -8, left: -8, 3/7\n(12) / (3/7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((12 / (3 / 7)) - 4)"}, {"input": "4 3 12 7\n", "output": "(4) - (3) = 1, left: 1, 12, 7\n(3) - (4) = -1, left: -1, 12, 7\n(7) - (12) = -5, left: -5, -1\n(4) * (3) = 12, left: 12, 12, 7\n(12) + (7) = 19, left: 19, 12\n(4) / (3) = 4/3, left: 4/3, 12, 7\n(12) * (7) = 84, left: 84, 4/3\n(3) / (7) = 3/7, left: 3/7, 4, 12\n(12) / (3/7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((12 / (3 / 7)) - 4)"}, {"input": "6 1 4 3\n", "output": "(6) * (3) = 18, left: 18, 1, 4\n(6) / (3) = 2, left: 2, 1, 4\n(1) / (4) = 1/4, left: 1/4, 2\n(6) + (3) = 9, left: 9, 1, 4\n(4) - (9) = -5, left: -5, 1\n(1) / (4) = 1/4, left: 1/4, 9\n(3) - (6) = -3, left: -3, 1, 4\n(3) / (4) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(6) - (3) = 3, left: 3, 1, 4\n(3) - (6) = -3, left: -3, 1, 4\n(1) / (4) = 1/4, left: 1/4, 6, 3\n(4) / (1) = 4, left: 4, 6, 3\n(1) - (3) = -2, left: -2, 6, 4\n(1) - (6) = -5, left: -5, 4, 3\n(4) + (-5) = -1, left: -1, 3\n(3) / (4) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(6) / (1) = 6, left: 6, 4, 3\n(6) * (3) = 18, left: 18, 1, 4\n(18) / (1) = 18, left: 18, 4\n(1) - (4) = -3, left: -3, 6, 3\n(6) / (4) = 3/2, left: 3/2, 1, 3\n(6) + (4) = 10, left: 10, 1, 3\n(4) / (3) = 4/3, left: 4/3, 6, 1\n(3) / (4) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(6) * (4) = 24, left: 24, 1, 3\n(24) - (3) = 21, left: 21, 1\n(4) / (6) = 2/3, left: 2/3, 1, 3\n(6) - (1) = 5, left: 5, 4, 3\n(3) - (5) = -2, left: -2, 4\n(1) / (6) = 1/6, left: 1/6, 4, 3\n(1) - (6) = -5, left: -5, 4, 3\n(3) / (4) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(1) * (3) = 3, left: 3, 6, 4\n(4) / (6) = 2/3, left: 2/3, 1, 3\n(6) - (4) = 2, left: 2, 1, 3\n(4) - (6) = -2, left: -2, 1, 3\n(1) - (6) = -5, left: -5, 4, 3\n(4) / (-5) = -4/5, left: -4/5, 3\n(6) - (1) = 5, left: 5, 4, 3\n(3) / (4) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(3) / (6) = 1/2, left: 1/2, 1, 4\n(4) * (1/2) = 2, left: 2, 1\n(6) * (3) = 18, left: 18, 1, 4\n(1) + (3) = 4, left: 4, 6, 4\n(4) / (6) = 2/3, left: 2/3, 1, 3\n(4) - (6) = -2, left: -2, 1, 3\n(1) / (4) = 1/4, left: 1/4, 6, 3\n(4) / (1) = 4, left: 4, 6, 3\n(4) - (1) = 3, left: 3, 6, 3\n(6) + (1) = 7, left: 7, 4, 3\n(1) / (6) = 1/6, left: 1/6, 4, 3\n(3) / (4) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(1) + (4) = 5, left: 5, 6, 3\n(4) / (1) = 4, left: 4, 6, 3\n(6) - (3) = 3, left: 3, 4\n(1) - (4) = -3, left: -3, 6, 3\n(6) + (4) = 10, left: 10, 1, 3\n(4) / (6) = 2/3, left: 2/3, 1, 3\n(1) / (3) = 1/3, left: 1/3, 6, 4\n(1) * (3) = 3, left: 3, 6, 4\n(6) * (1) = 6, left: 6, 4, 3\n(6) - (1) = 5, left: 5, 4, 3\n(5) / (3) = 5/3, left: 5/3, 4\n(3) / (4) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(6) - (3) = 3, left: 3, 1, 4\n(3) - (6) = -3, left: -3, 1, 4\n(6) / (3) = 2, left: 2, 1, 4\n(4) / (2) = 2, left: 2, 1\n(6) * (3) = 18, left: 18, 1, 4\n(18) / (1) = 18, left: 18, 4\n(1) + (4) = 5, left: 5, 6, 3\n(1) * (4) = 4, left: 4, 6, 3\n(1) + (3) = 4, left: 4, 6, 4\n(4) - (4) = 0, left: 0, 6\n(3) - (1) = 2, left: 2, 6, 4\n(3) / (4) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(6) * (3) = 18, left: 18, 1, 4\n(18) / (1) = 18, left: 18, 4\n(6) / (3) = 2, left: 2, 1, 4\n(6) - (3) = 3, left: 3, 1, 4\n(3) - (4) = -1, left: -1, 1\n(6) + (3) = 9, left: 9, 1, 4\n(3) / (6) = 1/2, left: 1/2, 1, 4\n(1/2) - (4) = -7/2, left: -7/2, 1\n(3) - (6) = -3, left: -3, 1, 4\n(1) / (-3) = -1/3, left: -1/3, 4\n(4) + (3) = 7, left: 7, 6, 1\n(3) / (4) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(6) + (1) = 7, left: 7, 4, 3\n(3) / (7) = 3/7, left: 3/7, 4\n(6) / (1) = 6, left: 6, 4, 3\n(6) + (3) = 9, left: 9, 1, 4\n(9) - (1) = 8, left: 8, 4\n(3) / (6) = 1/2, left: 1/2, 1, 4\n(1) / (4) = 1/4, left: 1/4, 1/2\n(1/2) / (4) = 1/8, left: 1/8, 1\n(6) * (4) = 24, left: 24, 1, 3\n(3) / (1) = 3, left: 3, 24\n(4) - (6) = -2, left: -2, 1, 3\n(3) / (4) = 3/4, left: 3/4, 6, 1\n(1) - (3/4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "13 4 8 8\n", "output": "(8) - (13) = -5, left: -5, 4, 8\n(-5) / (8) = -5/8, left: -5/8, 4\n(13) * (8) = 104, left: 104, 4, 8\n(4) / (8) = 1/2, left: 1/2, 104\n(104) - (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "13 4 8 8\n", "output": "(8) + (8) = 16, left: 16, 13, 4\n(13) / (4) = 13/4, left: 13/4, 16\n(8) - (8) = 0, left: 0, 13, 4\n(13) / (8) = 13/8, left: 13/8, 4, 8\n(8) - (13) = -5, left: -5, 4, 8\n(8) / (13) = 8/13, left: 8/13, 4, 8\n(8) / (8/13) = 13, left: 13, 4\n(13) * (8) = 104, left: 104, 4, 8\n(104) - (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "13 4 8 8\n", "output": "(4) + (8) = 12, left: 12, 13, 8\n(8) / (4) = 2, left: 2, 13, 8\n(13) + (4) = 17, left: 17, 8, 8\n(8) - (4) = 4, left: 4, 13, 8\n(4) / (8) = 1/2, left: 1/2, 13, 8\n(8) - (8) = 0, left: 0, 13, 4\n(13) / (8) = 13/8, left: 13/8, 4, 8\n(13) * (8) = 104, left: 104, 4, 8\n(104) - (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "13 4 8 8\n", "output": "(8) - (13) = -5, left: -5, 4, 8\n(8) + (-5) = 3, left: 3, 4\n(8) - (-5) = 13, left: 13, 4\n(4) * (8) = 32, left: 32, -5\n(32) / (-5) = -32/5, left: -32/5\n(-5) / (4) = -5/4, left: -5/4, 8\n(13) * (8) = 104, left: 104, 4, 8\n(4) + (8) = 12, left: 12, 104\n(104) - (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "13 4 8 8\n", "output": "(4) / (8) = 1/2, left: 1/2, 13, 8\n(13) - (8) = 5, left: 5, 1/2\n(5) - (1/2) = 9/2, left: 9/2\n(4) - (8) = -4, left: -4, 13, 8\n(8) / (13) = 8/13, left: 8/13, 4, 8\n(8) - (4) = 4, left: 4, 8/13\n(13) / (8) = 13/8, left: 13/8, 4, 8\n(13) * (8) = 104, left: 104, 4, 8\n(104) - (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "13 4 8 8\n", "output": "(4) - (8) = -4, left: -4, 13, 8\n(8) - (13) = -5, left: -5, -4\n(13) + (4) = 17, left: 17, 8, 8\n(13) + (8) = 21, left: 21, 4, 8\n(8) - (21) = -13, left: -13, 4\n(13) - (8) = 5, left: 5, 4, 8\n(8) / (5) = 8/5, left: 8/5, 4\n(13) * (8) = 104, left: 104, 4, 8\n(104) - (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "13 4 8 8\n", "output": "(4) + (8) = 12, left: 12, 13, 8\n(8) + (12) = 20, left: 20, 13\n(13) - (12) = 1, left: 1, 8\n(4) - (13) = -9, left: -9, 8, 8\n(8) * (-9) = -72, left: -72, 8\n(13) / (4) = 13/4, left: 13/4, 8, 8\n(13/4) - (8) = -19/4, left: -19/4, 8\n(8) * (8) = 64, left: 64, 13, 4\n(8) - (8) = 0, left: 0, 13, 4\n(8) / (8) = 1, left: 1, 13, 4\n(8) + (8) = 16, left: 16, 13, 4\n(13) * (8) = 104, left: 104, 4, 8\n(104) - (8) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "8 1 6 13\n", "output": "(8) - (6) = 2, left: 2, 1, 13\n(1) / (13) = 1/13, left: 1/13, 2\n(13) / (1) = 13, left: 13, 2\n(1) * (13) = 13, left: 13, 2\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((8 - 6) * (13 - 1))"}, {"input": "8 1 6 13\n", "output": "(6) - (13) = -7, left: -7, 8, 1\n(1) * (-7) = -7, left: -7, 8\n(6) + (13) = 19, left: 19, 8, 1\n(1) + (19) = 20, left: 20, 8\n(6) / (13) = 6/13, left: 6/13, 8, 1\n(6/13) - (1) = -7/13, left: -7/13, 8\n(13) / (6) = 13/6, left: 13/6, 8, 1\n(13) - (1) = 12, left: 12, 8, 6\n(8) - (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((13 - 1) * (8 - 6))"}, {"input": "8 1 6 13\n", "output": "(1) / (8) = 1/8, left: 1/8, 6, 13\n(8) - (1) = 7, left: 7, 6, 13\n(13) / (7) = 13/7, left: 13/7, 6\n(7) / (6) = 7/6, left: 7/6, 13\n(6) + (7) = 13, left: 13, 13\n(13) / (6) = 13/6, left: 13/6, 7\n(8) + (1) = 9, left: 9, 6, 13\n(9) / (13) = 9/13, left: 9/13, 6\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (8 + 1)))"}, {"input": "8 1 6 13\n", "output": "(6) - (1) = 5, left: 5, 8, 13\n(1) - (6) = -5, left: -5, 8, 13\n(1) * (6) = 6, left: 6, 8, 13\n(13) + (6) = 19, left: 19, 8\n(1) + (6) = 7, left: 7, 8, 13\n(6) / (1) = 6, left: 6, 8, 13\n(1) / (6) = 1/6, left: 1/6, 8, 13\n(13) - (8) = 5, left: 5, 1, 6\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 8) - 1))"}, {"input": "8 1 6 13\n", "output": "(8) * (6) = 48, left: 48, 1, 13\n(13) + (48) = 61, left: 61, 1\n(1) * (48) = 48, left: 48, 13\n(6) / (8) = 3/4, left: 3/4, 1, 13\n(13) - (1) = 12, left: 12, 3/4\n(13) + (3/4) = 55/4, left: 55/4, 1\n(6) - (8) = -2, left: -2, 1, 13\n(1) * (-2) = -2, left: -2, 13\n(1) - (13) = -12, left: -12, -2\n(-2) * (-12) = 24, left: 24\nreach 24! expression: ((6 - 8) * (1 - 13))"}, {"input": "8 1 6 13\n", "output": "(8) - (6) = 2, left: 2, 1, 13\n(1) / (13) = 1/13, left: 1/13, 2\n(13) / (1) = 13, left: 13, 2\n(13) / (2) = 13/2, left: 13/2\n(1) * (13) = 13, left: 13, 2\n(2) + (13) = 15, left: 15\n(1) + (13) = 14, left: 14, 2\n(2) + (14) = 16, left: 16\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((8 - 6) * (13 - 1))"}, {"input": "8 1 6 13\n", "output": "(6) - (1) = 5, left: 5, 8, 13\n(8) + (5) = 13, left: 13, 13\n(1) - (6) = -5, left: -5, 8, 13\n(8) - (-5) = 13, left: 13, 13\n(13) + (13) = 26, left: 26\n(1) * (6) = 6, left: 6, 8, 13\n(13) - (6) = 7, left: 7, 8\n(6) / (1) = 6, left: 6, 8, 13\n(6) / (13) = 6/13, left: 6/13, 8\n(13) - (8) = 5, left: 5, 1, 6\n(6) + (5) = 11, left: 11, 1\n(1) - (6) = -5, left: -5, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 8) - 1))"}, {"input": "9 1 13 2\n", "output": "(1) / (2) = 1/2, left: 1/2, 9, 13\n(13) - (1/2) = 25/2, left: 25/2, 9\n(1) * (2) = 2, left: 2, 9, 13\n(9) / (13) = 9/13, left: 9/13, 2\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((1 * 2) + (9 + 13))"}, {"input": "9 1 13 2\n", "output": "(9) / (13) = 9/13, left: 9/13, 1, 2\n(2) / (9/13) = 26/9, left: 26/9, 1\n(2) * (9/13) = 18/13, left: 18/13, 1\n(9) + (13) = 22, left: 22, 1, 2\n(2) / (1) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((9 + 13) + (2 / 1))"}, {"input": "9 1 13 2\n", "output": "(13) + (2) = 15, left: 15, 9, 1\n(1) + (15) = 16, left: 16, 9\n(9) / (16) = 9/16, left: 9/16\n(9) * (16) = 144, left: 144\n(1) * (15) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (1 * (13 + 2)))"}, {"input": "9 1 13 2\n", "output": "(9) / (2) = 9/2, left: 9/2, 1, 13\n(13) * (9/2) = 117/2, left: 117/2, 1\n(9/2) - (1) = 7/2, left: 7/2, 13\n(9) + (2) = 11, left: 11, 1, 13\n(13) + (11) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (13 + (9 + 2)))"}, {"input": "9 1 13 2\n", "output": "(9) / (2) = 9/2, left: 9/2, 1, 13\n(9/2) - (13) = -17/2, left: -17/2, 1\n(1) / (-17/2) = -2/17, left: -2/17\n(13) - (1) = 12, left: 12, 9/2\n(1) / (13) = 1/13, left: 1/13, 9/2\n(1) - (9/2) = -7/2, left: -7/2, 13\n(1) / (9/2) = 2/9, left: 2/9, 13\n(9) + (2) = 11, left: 11, 1, 13\n(13) + (11) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (13 + (9 + 2)))"}, {"input": "9 1 13 2\n", "output": "(13) - (9) = 4, left: 4, 1, 2\n(1) * (2) = 2, left: 2, 4\n(9) / (13) = 9/13, left: 9/13, 1, 2\n(9) * (13) = 117, left: 117, 1, 2\n(1) / (2) = 1/2, left: 1/2, 117\n(1/2) / (117) = 1/234, left: 1/234\n(117) - (2) = 115, left: 115, 1\n(9) + (13) = 22, left: 22, 1, 2\n(2) / (1) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((9 + 13) + (2 / 1))"}, {"input": "9 1 13 2\n", "output": "(9) + (1) = 10, left: 10, 13, 2\n(2) * (10) = 20, left: 20, 13\n(2) - (10) = -8, left: -8, 13\n(2) / (13) = 2/13, left: 2/13, 10\n(2/13) / (10) = 1/65, left: 1/65\n(1) - (9) = -8, left: -8, 13, 2\n(-8) / (2) = -4, left: -4, 13\n(9) / (1) = 9, left: 9, 13, 2\n(13) + (9) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (13 + (9 / 1)))"}, {"input": "9 1 13 2\n", "output": "(1) / (2) = 1/2, left: 1/2, 9, 13\n(9) - (13) = -4, left: -4, 1/2\n(1/2) / (9) = 1/18, left: 1/18, 13\n(1) - (2) = -1, left: -1, 9, 13\n(13) / (9) = 13/9, left: 13/9, -1\n(1) * (2) = 2, left: 2, 9, 13\n(13) / (9) = 13/9, left: 13/9, 2\n(9) * (13) = 117, left: 117, 2\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((1 * 2) + (9 + 13))"}, {"input": "9 1 13 2\n", "output": "(13) + (2) = 15, left: 15, 9, 1\n(1) + (15) = 16, left: 16, 9\n(9) / (16) = 9/16, left: 9/16\n(9) - (16) = -7, left: -7\n(9) * (16) = 144, left: 144\n(9) + (16) = 25, left: 25\n(1) * (15) = 15, left: 15, 9\n(15) - (9) = 6, left: 6\n(9) / (15) = 3/5, left: 3/5\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (1 * (13 + 2)))"}, {"input": "9 1 13 2\n", "output": "(13) + (2) = 15, left: 15, 9, 1\n(1) + (15) = 16, left: 16, 9\n(9) / (16) = 9/16, left: 9/16\n(16) - (9) = 7, left: 7\n(9) - (16) = -7, left: -7\n(16) / (9) = 16/9, left: 16/9\n(9) * (16) = 144, left: 144\n(9) + (16) = 25, left: 25\n(1) * (15) = 15, left: 15, 9\n(15) - (9) = 6, left: 6\n(9) / (15) = 3/5, left: 3/5\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (1 * (13 + 2)))"}, {"input": "9 1 13 2\n", "output": "(13) + (2) = 15, left: 15, 9, 1\n(1) + (15) = 16, left: 16, 9\n(9) / (16) = 9/16, left: 9/16\n(16) - (9) = 7, left: 7\n(9) - (16) = -7, left: -7\n(16) / (9) = 16/9, left: 16/9\n(9) * (16) = 144, left: 144\n(9) + (16) = 25, left: 25\n(1) * (15) = 15, left: 15, 9\n(15) - (9) = 6, left: 6\n(9) / (15) = 3/5, left: 3/5\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (1 * (13 + 2)))"}, {"input": "7 4 6 6\n", "output": "(7) / (6) = 7/6, left: 7/6, 4, 6\n(6) / (4) = 3/2, left: 3/2, 7/6\n(3/2) / (7/6) = 9/7, left: 9/7\n(7) - (6) = 1, left: 1, 4, 6\n(1) / (4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((7 - 6) / 4))"}, {"input": "7 4 6 6\n", "output": "(4) * (6) = 24, left: 24, 7, 6\n(7) / (24) = 7/24, left: 7/24, 6\n(6) + (24) = 30, left: 30, 7\n(24) - (6) = 18, left: 18, 7\n(6) - (24) = -18, left: -18, 7\n(7) + (6) = 13, left: 13, 24\n(24) + (13) = 37, left: 37\n(7) - (6) = 1, left: 1, 24\n(1) - (24) = -23, left: -23\n(24) * (1) = 24, left: 24\nreach 24! expression: ((4 * 6) * (7 - 6))"}, {"input": "7 4 6 6\n", "output": "(7) * (6) = 42, left: 42, 4, 6\n(6) - (42) = -36, left: -36, 4\n(6) * (42) = 252, left: 252, 4\n(4) - (6) = -2, left: -2, 42\n(4) * (6) = 24, left: 24, 42\n(42) - (4) = 38, left: 38, 6\n(4) * (42) = 168, left: 168, 6\n(7) - (6) = 1, left: 1, 4, 6\n(6) / (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (6 / (7 - 6)))"}, {"input": "7 4 6 6\n", "output": "(6) / (6) = 1, left: 1, 7, 4\n(4) / (7) = 4/7, left: 4/7, 1\n(7) - (4) = 3, left: 3, 1\n(4) - (7) = -3, left: -3, 1\n(1) + (-3) = -2, left: -2\n(7) + (4) = 11, left: 11, 1\n(1) / (7) = 1/7, left: 1/7, 4\n(7) * (1) = 7, left: 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (6 / 6)))"}, {"input": "7 4 6 6\n", "output": "(6) / (7) = 6/7, left: 6/7, 4, 6\n(6/7) / (6) = 1/7, left: 1/7, 4\n(4) - (1/7) = 27/7, left: 27/7\n(4) * (6) = 24, left: 24, 6/7\n(7) / (6) = 7/6, left: 7/6, 4, 6\n(6) - (7) = -1, left: -1, 4, 6\n(6) * (-1) = -6, left: -6, 4\n(7) - (6) = 1, left: 1, 4, 6\n(1) / (4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((7 - 6) / 4))"}, {"input": "7 4 6 6\n", "output": "(6) - (6) = 0, left: 0, 7, 4\n(4) + (0) = 4, left: 4, 7\n(4) - (7) = -3, left: -3\n(4) - (0) = 4, left: 4, 7\n(4) - (7) = -3, left: -3, 0\n(4) / (7) = 4/7, left: 4/7, 0\n(4/7) - (0) = 4/7, left: 4/7\n(6) / (6) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (6 / 6)))"}, {"input": "7 4 6 6\n", "output": "(6) * (6) = 36, left: 36, 7, 4\n(4) / (36) = 1/9, left: 1/9, 7\n(6) + (6) = 12, left: 12, 7, 4\n(6) - (6) = 0, left: 0, 7, 4\n(7) + (0) = 7, left: 7, 4\n(0) / (7) = 0, left: 0, 4\n(0) / (4) = 0, left: 0, 7\n(4) * (0) = 0, left: 0, 7\n(4) + (0) = 4, left: 4, 7\n(4) - (0) = 4, left: 4, 7\n(4) / (7) = 4/7, left: 4/7, 0\n(6) / (6) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (6 / 6)))"}, {"input": "11 3 3 9\n", "output": "(11) * (9) = 99, left: 99, 3, 3\n(9) / (11) = 9/11, left: 9/11, 3, 3\n(9/11) / (3) = 3/11, left: 3/11, 3\n(3) / (9) = 1/3, left: 1/3, 11, 3\n(11) - (3) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((11 - 3) / (3 / 9))"}, {"input": "11 3 3 9\n", "output": "(9) - (11) = -2, left: -2, 3, 3\n(3) / (-2) = -3/2, left: -3/2, 3\n(9) / (11) = 9/11, left: 9/11, 3, 3\n(11) - (9) = 2, left: 2, 3, 3\n(3) + (2) = 5, left: 5, 3\n(11) / (9) = 11/9, left: 11/9, 3, 3\n(3) * (11/9) = 11/3, left: 11/3, 3\n(3) / (9) = 1/3, left: 1/3, 11, 3\n(11) - (3) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((11 - 3) / (3 / 9))"}, {"input": "11 3 3 9\n", "output": "(11) - (9) = 2, left: 2, 3, 3\n(9) / (11) = 9/11, left: 9/11, 3, 3\n(3) + (3) = 6, left: 6, 9/11\n(9/11) * (6) = 54/11, left: 54/11\n(11) + (9) = 20, left: 20, 3, 3\n(20) / (3) = 20/3, left: 20/3, 3\n(9) - (11) = -2, left: -2, 3, 3\n(11) - (3) = 8, left: 8, 3, 9\n(8) / (3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * ((11 - 3) / 3))"}, {"input": "11 3 3 9\n", "output": "(11) * (3) = 33, left: 33, 3, 9\n(3) + (9) = 12, left: 12, 33\n(12) / (33) = 4/11, left: 4/11\n(3) - (11) = -8, left: -8, 3, 9\n(11) / (3) = 11/3, left: 11/3, 3, 9\n(9) * (11/3) = 33, left: 33, 3\n(11) + (3) = 14, left: 14, 3, 9\n(11) - (3) = 8, left: 8, 3, 9\n(9) * (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * (11 - 3)) / 3)"}, {"input": "11 3 3 9\n", "output": "(11) + (3) = 14, left: 14, 3, 9\n(3) + (14) = 17, left: 17, 9\n(9) / (17) = 9/17, left: 9/17\n(14) - (3) = 11, left: 11, 9\n(9) / (3) = 3, left: 3, 14\n(3) / (9) = 1/3, left: 1/3, 14\n(9) - (14) = -5, left: -5, 3\n(11) - (3) = 8, left: 8, 3, 9\n(3) / (9) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((11 - 3) / (3 / 9))"}, {"input": "11 3 3 9\n", "output": "(9) - (3) = 6, left: 6, 11, 3\n(11) * (6) = 66, left: 66, 3\n(6) / (11) = 6/11, left: 6/11, 3\n(11) / (3) = 11/3, left: 11/3, 6\n(3) - (11) = -8, left: -8, 6\n(3) / (6) = 1/2, left: 1/2, 11\n(9) / (3) = 3, left: 3, 11, 3\n(3) - (11) = -8, left: -8, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (11 - (9 / 3)))"}, {"input": "9 6 1 10\n", "output": "(6) / (9) = 2/3, left: 2/3, 1, 10\n(10) - (1) = 9, left: 9, 2/3\n(9) + (6) = 15, left: 15, 1, 10\n(1) + (10) = 11, left: 11, 15\n(1) - (10) = -9, left: -9, 15\n(15) - (-9) = 24, left: 24\nreach 24! expression: ((9 + 6) - (1 - 10))"}, {"input": "9 6 1 10\n", "output": "(9) + (6) = 15, left: 15, 1, 10\n(15) / (1) = 15, left: 15, 10\n(10) + (15) = 25, left: 25\n(1) * (15) = 15, left: 15, 10\n(1) - (15) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (1 - (9 + 6)))"}, {"input": "9 6 1 10\n", "output": "(10) - (1) = 9, left: 9, 9, 6\n(9) * (9) = 81, left: 81, 6\n(81) - (6) = 75, left: 75\n(9) - (9) = 0, left: 0, 6\n(0) - (6) = -6, left: -6\n(9) - (9) = 0, left: 0, 6\n(9) / (9) = 1, left: 1, 6\n(6) / (1) = 6, left: 6\n(9) + (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 + (10 - 1)))"}, {"input": "9 6 1 10\n", "output": "(9) * (6) = 54, left: 54, 1, 10\n(1) - (54) = -53, left: -53, 10\n(-53) / (10) = -53/10, left: -53/10\n(54) - (1) = 53, left: 53, 10\n(1) / (54) = 1/54, left: 1/54, 10\n(54) - (10) = 44, left: 44, 1\n(1) * (10) = 10, left: 10, 54\n(9) + (6) = 15, left: 15, 1, 10\n(10) + (15) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((10 + (9 + 6)) - 1)"}, {"input": "9 6 1 10\n", "output": "(6) / (1) = 6, left: 6, 9, 10\n(9) * (6) = 54, left: 54, 10\n(6) + (1) = 7, left: 7, 9, 10\n(7) - (9) = -2, left: -2, 10\n(7) / (9) = 7/9, left: 7/9, 10\n(1) - (6) = -5, left: -5, 9, 10\n(10) / (-5) = -2, left: -2, 9\n(10) * (-5) = -50, left: -50, 9\n(10) - (-5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 - (1 - 6)))"}, {"input": "9 6 1 10\n", "output": "(9) + (6) = 15, left: 15, 1, 10\n(15) / (1) = 15, left: 15, 10\n(10) / (15) = 2/3, left: 2/3\n(1) + (15) = 16, left: 16, 10\n(16) / (10) = 8/5, left: 8/5\n(1) * (15) = 15, left: 15, 10\n(10) + (15) = 25, left: 25\n(15) / (10) = 3/2, left: 3/2\n(1) - (15) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (1 - (9 + 6)))"}, {"input": "9 6 1 10\n", "output": "(6) / (9) = 2/3, left: 2/3, 1, 10\n(1) / (10) = 1/10, left: 1/10, 2/3\n(1) * (10) = 10, left: 10, 2/3\n(10) / (1) = 10, left: 10, 2/3\n(1) + (2/3) = 5/3, left: 5/3, 10\n(5/3) / (10) = 1/6, left: 1/6\n(10) * (5/3) = 50/3, left: 50/3\n(9) + (6) = 15, left: 15, 1, 10\n(1) - (10) = -9, left: -9, 15\n(15) - (-9) = 24, left: 24\nreach 24! expression: ((9 + 6) - (1 - 10))"}, {"input": "11 12 2 5\n", "output": "(12) - (2) = 10, left: 10, 11, 5\n(11) * (2) = 22, left: 22, 12, 5\n(12) * (5) = 60, left: 60, 22\n(11) / (2) = 11/2, left: 11/2, 12, 5\n(11/2) - (5) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((11 / 2) - 5))"}, {"input": "11 12 2 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 12, 2\n(2) / (11/5) = 10/11, left: 10/11, 12\n(10/11) - (12) = -122/11, left: -122/11\n(5) - (11) = -6, left: -6, 12, 2\n(2) * (-6) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 * (5 - 11)))"}, {"input": "11 12 2 5\n", "output": "(11) * (12) = 132, left: 132, 2, 5\n(132) / (2) = 66, left: 66, 5\n(11) / (12) = 11/12, left: 11/12, 2, 5\n(11) / (2) = 11/2, left: 11/2, 12, 5\n(11/2) - (5) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((11 / 2) - 5))"}, {"input": "11 12 2 5\n", "output": "(5) / (11) = 5/11, left: 5/11, 12, 2\n(2) / (12) = 1/6, left: 1/6, 5/11\n(1/6) / (5/11) = 11/30, left: 11/30\n(11) - (5) = 6, left: 6, 12, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (11 - 5)))"}, {"input": "11 12 2 5\n", "output": "(11) + (5) = 16, left: 16, 12, 2\n(12) - (16) = -4, left: -4, 2\n(11) / (5) = 11/5, left: 11/5, 12, 2\n(12) * (2) = 24, left: 24, 11/5\n(5) / (11) = 5/11, left: 5/11, 12, 2\n(12) * (5/11) = 60/11, left: 60/11, 2\n(12) + (5/11) = 137/11, left: 137/11, 2\n(11) - (5) = 6, left: 6, 12, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (11 - 5)))"}, {"input": "11 12 2 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 12, 2\n(12) - (11/5) = 49/5, left: 49/5, 2\n(11/5) - (12) = -49/5, left: -49/5, 2\n(2) - (11/5) = -1/5, left: -1/5, 12\n(12) - (2) = 10, left: 10, 11/5\n(5) - (11) = -6, left: -6, 12, 2\n(12) - (-6) = 18, left: 18, 2\n(12) * (-6) = -72, left: -72, 2\n(2) * (-6) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 * (5 - 11)))"}, {"input": "11 12 2 5\n", "output": "(12) / (5) = 12/5, left: 12/5, 11, 2\n(2) / (5) = 2/5, left: 2/5, 11, 12\n(2) - (5) = -3, left: -3, 11, 12\n(2) / (12) = 1/6, left: 1/6, 11, 5\n(12) * (2) = 24, left: 24, 11, 5\n(2) - (12) = -10, left: -10, 11, 5\n(-10) - (11) = -21, left: -21, 5\n(11) - (5) = 6, left: 6, 12, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (11 - 5)))"}, {"input": "11 12 2 5\n", "output": "(12) - (2) = 10, left: 10, 11, 5\n(12) / (2) = 6, left: 6, 11, 5\n(11) * (2) = 22, left: 22, 12, 5\n(5) * (22) = 110, left: 110, 12\n(2) - (11) = -9, left: -9, 12, 5\n(11) + (2) = 13, left: 13, 12, 5\n(5) - (12) = -7, left: -7, 13\n(11) / (2) = 11/2, left: 11/2, 12, 5\n(11/2) - (5) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((11 / 2) - 5))"}, {"input": "11 12 2 5\n", "output": "(11) + (12) = 23, left: 23, 2, 5\n(5) + (23) = 28, left: 28, 2\n(28) - (2) = 26, left: 26\n(12) - (11) = 1, left: 1, 2, 5\n(2) / (1) = 2, left: 2, 5\n(11) / (12) = 11/12, left: 11/12, 2, 5\n(2) * (5) = 10, left: 10, 11/12\n(11) / (2) = 11/2, left: 11/2, 12, 5\n(11/2) - (5) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((11 / 2) - 5))"}, {"input": "10 13 4 9\n", "output": "(10) - (4) = 6, left: 6, 13, 9\n(6) - (9) = -3, left: -3, 13\n(6) / (13) = 6/13, left: 6/13, 9\n(13) / (6) = 13/6, left: 13/6, 9\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((10 - 4) * (13 - 9))"}, {"input": "10 13 4 9\n", "output": "(9) / (4) = 9/4, left: 9/4, 10, 13\n(13) * (9) = 117, left: 117, 10, 4\n(117) - (4) = 113, left: 113, 10\n(9) - (13) = -4, left: -4, 10, 4\n(4) - (10) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((9 - 13) * (4 - 10))"}, {"input": "10 13 4 9\n", "output": "(4) + (9) = 13, left: 13, 10, 13\n(10) * (13) = 130, left: 130, 13\n(4) - (9) = -5, left: -5, 10, 13\n(9) - (4) = 5, left: 5, 10, 13\n(10) * (13) = 130, left: 130, 5\n(9) / (4) = 9/4, left: 9/4, 10, 13\n(13) - (10) = 3, left: 3, 4, 9\n(4) - (9) = -5, left: -5, 3\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (13 - 10)))"}, {"input": "10 13 4 9\n", "output": "(13) + (4) = 17, left: 17, 10, 9\n(13) - (4) = 9, left: 9, 10, 9\n(13) / (4) = 13/4, left: 13/4, 10, 9\n(9) / (10) = 9/10, left: 9/10, 13/4\n(13/4) * (9/10) = 117/40, left: 117/40\n(4) - (13) = -9, left: -9, 10, 9\n(9) * (-9) = -81, left: -81, 10\n(10) - (13) = -3, left: -3, 4, 9\n(9) + (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 + (10 - 13)))"}, {"input": "10 13 4 9\n", "output": "(13) + (4) = 17, left: 17, 10, 9\n(10) * (9) = 90, left: 90, 17\n(17) / (9) = 17/9, left: 17/9, 10\n(4) / (9) = 4/9, left: 4/9, 10, 13\n(13) / (10) = 13/10, left: 13/10, 4/9\n(9) - (4) = 5, left: 5, 10, 13\n(5) - (10) = -5, left: -5, 13\n(10) - (13) = -3, left: -3, 4, 9\n(9) + (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 + (10 - 13)))"}, {"input": "10 13 4 9\n", "output": "(4) - (9) = -5, left: -5, 10, 13\n(4) + (9) = 13, left: 13, 10, 13\n(13) / (13) = 1, left: 1, 10\n(9) - (4) = 5, left: 5, 10, 13\n(10) - (13) = -3, left: -3, 5\n(4) / (9) = 4/9, left: 4/9, 10, 13\n(9) - (13) = -4, left: -4, 10, 4\n(10) * (4) = 40, left: 40, -4\n(4) - (10) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((9 - 13) * (4 - 10))"}, {"input": "10 13 4 9\n", "output": "(10) - (4) = 6, left: 6, 13, 9\n(9) + (6) = 15, left: 15, 13\n(9) - (6) = 3, left: 3, 13\n(6) / (9) = 2/3, left: 2/3, 13\n(6) - (9) = -3, left: -3, 13\n(6) / (13) = 6/13, left: 6/13, 9\n(13) / (6) = 13/6, left: 13/6, 9\n(13) * (6) = 78, left: 78, 9\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((10 - 4) * (13 - 9))"}, {"input": "6 13 1 5\n", "output": "(6) / (13) = 6/13, left: 6/13, 1, 5\n(1) / (6/13) = 13/6, left: 13/6, 5\n(13) / (6) = 13/6, left: 13/6, 1, 5\n(6) + (13) = 19, left: 19, 1, 5\n(1) * (5) = 5, left: 5, 19\n(19) + (5) = 24, left: 24\nreach 24! expression: ((6 + 13) + (1 * 5))"}, {"input": "6 13 1 5\n", "output": "(1) - (5) = -4, left: -4, 6, 13\n(6) - (13) = -7, left: -7, -4\n(1) / (5) = 1/5, left: 1/5, 6, 13\n(6) + (1/5) = 31/5, left: 31/5, 13\n(6) / (1/5) = 30, left: 30, 13\n(13) - (6) = 7, left: 7, 1/5\n(1) * (5) = 5, left: 5, 6, 13\n(6) - (5) = 1, left: 1, 13\n(6) + (5) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (6 + (1 * 5)))"}, {"input": "6 13 1 5\n", "output": "(6) - (5) = 1, left: 1, 13, 1\n(13) - (1) = 12, left: 12, 1\n(13) / (1) = 13, left: 13, 1\n(1) * (13) = 13, left: 13\n(13) * (1) = 13, left: 13, 1\n(13) + (1) = 14, left: 14, 1\n(1) + (1) = 2, left: 2, 13\n(6) + (5) = 11, left: 11, 13, 1\n(11) / (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((6 + 5) / 1))"}, {"input": "6 13 1 5\n", "output": "(5) / (13) = 5/13, left: 5/13, 6, 1\n(6) + (5/13) = 83/13, left: 83/13, 1\n(1) - (5/13) = 8/13, left: 8/13, 6\n(6) - (8/13) = 70/13, left: 70/13\n(5) - (13) = -8, left: -8, 6, 1\n(6) + (1) = 7, left: 7, -8\n(1) - (6) = -5, left: -5, -8\n(13) + (5) = 18, left: 18, 6, 1\n(1) * (18) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (1 * (13 + 5)))"}, {"input": "6 13 1 5\n", "output": "(5) - (1) = 4, left: 4, 6, 13\n(13) + (4) = 17, left: 17, 6\n(6) * (17) = 102, left: 102\n(13) - (4) = 9, left: 9, 6\n(6) * (9) = 54, left: 54\n(6) / (4) = 3/2, left: 3/2, 13\n(5) / (1) = 5, left: 5, 6, 13\n(13) - (5) = 8, left: 8, 6\n(13) + (5) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (13 + (5 / 1)))"}, {"input": "6 13 1 5\n", "output": "(6) / (13) = 6/13, left: 6/13, 1, 5\n(5) * (6/13) = 30/13, left: 30/13, 1\n(6/13) - (1) = -7/13, left: -7/13, 5\n(6) * (13) = 78, left: 78, 1, 5\n(13) / (6) = 13/6, left: 13/6, 1, 5\n(5) / (13/6) = 30/13, left: 30/13, 1\n(5) - (1) = 4, left: 4, 13/6\n(6) + (13) = 19, left: 19, 1, 5\n(1) * (5) = 5, left: 5, 19\n(19) + (5) = 24, left: 24\nreach 24! expression: ((6 + 13) + (1 * 5))"}, {"input": "9 7 2 8\n", "output": "(9) / (2) = 9/2, left: 9/2, 7, 8\n(9) + (2) = 11, left: 11, 7, 8\n(2) + (8) = 10, left: 10, 9, 7\n(2) - (8) = -6, left: -6, 9, 7\n(8) / (2) = 4, left: 4, 9, 7\n(9) / (7) = 9/7, left: 9/7, 4\n(9) + (7) = 16, left: 16, 2, 8\n(8) / (2) = 4, left: 4, 16\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(9) * (8) = 72, left: 72, 7, 2\n(2) + (72) = 74, left: 74, 7\n(8) - (7) = 1, left: 1, 9, 2\n(9) - (2) = 7, left: 7, 1\n(7) - (8) = -1, left: -1, 9, 2\n(9) / (-1) = -9, left: -9, 2\n(8) / (2) = 4, left: 4, 9, 7\n(9) + (7) = 16, left: 16, 2, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(9) / (7) = 9/7, left: 9/7, 2, 8\n(9/7) / (2) = 9/14, left: 9/14, 8\n(7) / (9) = 7/9, left: 7/9, 2, 8\n(8) - (7/9) = 65/9, left: 65/9, 2\n(2) + (65/9) = 83/9, left: 83/9\n(2) / (7/9) = 18/7, left: 18/7, 8\n(9) + (7) = 16, left: 16, 2, 8\n(16) / (8) = 2, left: 2, 2\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(9) - (7) = 2, left: 2, 2, 8\n(2) * (8) = 16, left: 16, 2\n(2) / (16) = 1/8, left: 1/8\n(2) + (8) = 10, left: 10, 2\n(7) / (9) = 7/9, left: 7/9, 2, 8\n(7) - (9) = -2, left: -2, 2, 8\n(2) + (-2) = 0, left: 0, 8\n(9) + (7) = 16, left: 16, 2, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(7) - (8) = -1, left: -1, 9, 2\n(7) * (8) = 56, left: 56, 9, 2\n(7) / (8) = 7/8, left: 7/8, 9, 2\n(9) * (2) = 18, left: 18, 7/8\n(8) / (7) = 8/7, left: 8/7, 9, 2\n(8/7) - (9) = -55/7, left: -55/7, 2\n(-55/7) - (2) = -69/7, left: -69/7\n(9) + (7) = 16, left: 16, 2, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(7) + (2) = 9, left: 9, 9, 8\n(2) - (7) = -5, left: -5, 9, 8\n(9) - (-5) = 14, left: 14, 8\n(8) - (14) = -6, left: -6\n(7) - (2) = 5, left: 5, 9, 8\n(8) + (5) = 13, left: 13, 9\n(8) - (9) = -1, left: -1, 7, 2\n(8) / (7) = 8/7, left: 8/7, 9, 2\n(9) / (2) = 9/2, left: 9/2, 8/7\n(2) + (8) = 10, left: 10, 9, 7\n(7) * (10) = 70, left: 70, 9\n(9) + (7) = 16, left: 16, 2, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(9) / (7) = 9/7, left: 9/7, 2, 8\n(8) - (2) = 6, left: 6, 9/7\n(2) + (9/7) = 23/7, left: 23/7, 8\n(9) - (7) = 2, left: 2, 2, 8\n(2) * (2) = 4, left: 4, 8\n(8) - (2) = 6, left: 6, 2\n(7) / (9) = 7/9, left: 7/9, 2, 8\n(8) * (7/9) = 56/9, left: 56/9, 2\n(2) - (56/9) = -38/9, left: -38/9\n(9) * (7) = 63, left: 63, 2, 8\n(7) - (9) = -2, left: -2, 2, 8\n(9) + (7) = 16, left: 16, 2, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(9) - (2) = 7, left: 7, 7, 8\n(8) - (7) = 1, left: 1, 7\n(9) + (2) = 11, left: 11, 7, 8\n(8) * (11) = 88, left: 88, 7\n(9) * (2) = 18, left: 18, 7, 8\n(18) / (8) = 9/4, left: 9/4, 7\n(2) + (8) = 10, left: 10, 9, 7\n(8) - (2) = 6, left: 6, 9, 7\n(7) * (6) = 42, left: 42, 9\n(2) - (8) = -6, left: -6, 9, 7\n(8) / (2) = 4, left: 4, 9, 7\n(9) + (7) = 16, left: 16, 2, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(7) * (8) = 56, left: 56, 9, 2\n(8) - (7) = 1, left: 1, 9, 2\n(2) + (1) = 3, left: 3, 9\n(7) / (8) = 7/8, left: 7/8, 9, 2\n(8) / (7) = 8/7, left: 8/7, 9, 2\n(7) + (8) = 15, left: 15, 9, 2\n(9) - (7) = 2, left: 2, 2, 8\n(2) + (8) = 10, left: 10, 2\n(9) + (7) = 16, left: 16, 2, 8\n(2) * (8) = 16, left: 16, 16\n(8) / (2) = 4, left: 4, 16\n(16) - (4) = 12, left: 12\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "4 11 5 4\n", "output": "(4) / (11) = 4/11, left: 4/11, 5, 4\n(11) / (4) = 11/4, left: 11/4, 5, 4\n(5) * (4) = 20, left: 20, 11/4\n(4) * (11) = 44, left: 44, 5, 4\n(5) * (4) = 20, left: 20, 44\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (5 * 4))"}, {"input": "4 11 5 4\n", "output": "(5) * (4) = 20, left: 20, 4, 11\n(4) * (20) = 80, left: 80, 11\n(20) / (4) = 5, left: 5, 11\n(4) * (11) = 44, left: 44, 20\n(44) / (20) = 11/5, left: 11/5\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (5 * 4))"}, {"input": "4 11 5 4\n", "output": "(4) - (4) = 0, left: 0, 11, 5\n(4) - (4) = 0, left: 0, 11, 5\n(11) + (0) = 11, left: 11, 5\n(4) * (4) = 16, left: 16, 11, 5\n(16) - (5) = 11, left: 11, 11\n(4) / (4) = 1, left: 1, 11, 5\n(11) / (5) = 11/5, left: 11/5, 1\n(4) + (4) = 8, left: 8, 11, 5\n(5) + (8) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (5 + (4 + 4)))"}, {"input": "4 11 5 4\n", "output": "(4) * (4) = 16, left: 16, 11, 5\n(5) * (16) = 80, left: 80, 11\n(4) - (4) = 0, left: 0, 11, 5\n(5) - (11) = -6, left: -6, 0\n(11) * (0) = 0, left: 0, 5\n(4) - (4) = 0, left: 0, 11, 5\n(0) - (11) = -11, left: -11, 5\n(4) + (4) = 8, left: 8, 11, 5\n(11) + (8) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (11 + (4 + 4)))"}, {"input": "4 11 5 4\n", "output": "(4) + (11) = 15, left: 15, 5, 4\n(15) - (4) = 11, left: 11, 5\n(4) / (15) = 4/15, left: 4/15, 5\n(5) * (4/15) = 4/3, left: 4/3\n(4/15) - (5) = -71/15, left: -71/15\n(4) * (15) = 60, left: 60, 5\n(5) - (60) = -55, left: -55\n(4) + (15) = 19, left: 19, 5\n(5) / (19) = 5/19, left: 5/19\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (4 + (4 + 11)))"}, {"input": "4 11 5 4\n", "output": "(5) * (4) = 20, left: 20, 4, 11\n(4) * (20) = 80, left: 80, 11\n(20) / (4) = 5, left: 5, 11\n(11) * (5) = 55, left: 55\n(11) + (20) = 31, left: 31, 4\n(20) / (11) = 20/11, left: 20/11, 4\n(11) - (20) = -9, left: -9, 4\n(-9) - (4) = -13, left: -13\n(4) * (11) = 44, left: 44, 20\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (5 * 4))"}, {"input": "4 11 5 4\n", "output": "(4) - (11) = -7, left: -7, 5, 4\n(5) * (4) = 20, left: 20, -7\n(20) - (-7) = 27, left: 27\n(4) - (5) = -1, left: -1, -7\n(4) / (11) = 4/11, left: 4/11, 5, 4\n(11) / (4) = 11/4, left: 11/4, 5, 4\n(4) * (11) = 44, left: 44, 5, 4\n(5) - (44) = -39, left: -39, 4\n(5) * (4) = 20, left: 20, 44\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (5 * 4))"}, {"input": "4 11 5 4\n", "output": "(4) - (4) = 0, left: 0, 11, 5\n(11) * (5) = 55, left: 55, 0\n(4) - (4) = 0, left: 0, 11, 5\n(5) + (0) = 5, left: 5, 11\n(4) * (4) = 16, left: 16, 11, 5\n(5) - (16) = -11, left: -11, 11\n(4) / (4) = 1, left: 1, 11, 5\n(11) / (1) = 11, left: 11, 5\n(11) + (1) = 12, left: 12, 5\n(5) - (12) = -7, left: -7\n(4) / (4) = 1, left: 1, 11, 5\n(4) + (4) = 8, left: 8, 11, 5\n(5) + (8) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (5 + (4 + 4)))"}, {"input": "2 4 9 13\n", "output": "(2) / (9) = 2/9, left: 2/9, 4, 13\n(13) / (4) = 13/4, left: 13/4, 2/9\n(13) - (4) = 9, left: 9, 2/9\n(9) - (2) = 7, left: 7, 4, 13\n(4) + (7) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (4 + (9 - 2)))"}, {"input": "2 4 9 13\n", "output": "(4) * (9) = 36, left: 36, 2, 13\n(2) - (13) = -11, left: -11, 36\n(36) - (13) = 23, left: 23, 2\n(4) + (9) = 13, left: 13, 2, 13\n(2) - (13) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: ((4 + 9) - (2 - 13))"}, {"input": "2 4 9 13\n", "output": "(2) / (9) = 2/9, left: 2/9, 4, 13\n(2/9) - (4) = -34/9, left: -34/9, 13\n(13) / (2/9) = 117/2, left: 117/2, 4\n(2/9) - (13) = -115/9, left: -115/9, 4\n(9) - (2) = 7, left: 7, 4, 13\n(7) - (4) = 3, left: 3, 13\n(3) / (13) = 3/13, left: 3/13\n(7) / (4) = 7/4, left: 7/4, 13\n(4) + (7) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (4 + (9 - 2)))"}, {"input": "2 4 9 13\n", "output": "(4) / (2) = 2, left: 2, 9, 13\n(2) - (9) = -7, left: -7, 13\n(13) / (-7) = -13/7, left: -13/7\n(9) - (2) = 7, left: 7, 13\n(13) * (7) = 91, left: 91\n(2) / (9) = 2/9, left: 2/9, 13\n(13) / (2/9) = 117/2, left: 117/2\n(13) + (2/9) = 119/9, left: 119/9\n(9) + (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (9 + (4 / 2)))"}, {"input": "2 4 9 13\n", "output": "(4) * (9) = 36, left: 36, 2, 13\n(2) * (13) = 26, left: 26, 36\n(13) - (36) = -23, left: -23, 2\n(36) / (2) = 18, left: 18, 13\n(18) / (13) = 18/13, left: 18/13\n(4) + (9) = 13, left: 13, 2, 13\n(13) / (2) = 13/2, left: 13/2, 13\n(2) - (13) = -11, left: -11, 13\n(13) * (-11) = -143, left: -143\n(13) - (-11) = 24, left: 24\nreach 24! expression: ((4 + 9) - (2 - 13))"}, {"input": "2 4 9 13\n", "output": "(2) + (9) = 11, left: 11, 4, 13\n(2) / (9) = 2/9, left: 2/9, 4, 13\n(13) * (2/9) = 26/9, left: 26/9, 4\n(2/9) / (4) = 1/18, left: 1/18, 13\n(2) * (9) = 18, left: 18, 4, 13\n(18) / (4) = 9/2, left: 9/2, 13\n(4) / (13) = 4/13, left: 4/13, 18\n(2) - (9) = -7, left: -7, 4, 13\n(-7) - (13) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - ((2 - 9) - 13))"}, {"input": "2 4 9 13\n", "output": "(4) + (9) = 13, left: 13, 2, 13\n(13) - (13) = 0, left: 0, 2\n(2) - (0) = 2, left: 2\n(2) + (0) = 2, left: 2\n(0) - (2) = -2, left: -2\n(13) / (13) = 1, left: 1, 2\n(1) - (2) = -1, left: -1\n(13) + (13) = 26, left: 26, 2\n(2) * (26) = 52, left: 52\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + (4 + 9)) - 2)"}, {"input": "7 2 9 10\n", "output": "(2) - (7) = -5, left: -5, 9, 10\n(10) / (9) = 10/9, left: 10/9, -5\n(9) * (10) = 90, left: 90, -5\n(10) - (9) = 1, left: 1, -5\n(9) + (10) = 19, left: 19, -5\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((9 + 10) - (2 - 7))"}, {"input": "7 2 9 10\n", "output": "(2) - (10) = -8, left: -8, 7, 9\n(-8) / (7) = -8/7, left: -8/7, 9\n(9) * (-8/7) = -72/7, left: -72/7\n(9) - (-8/7) = 71/7, left: 71/7\n(-8) - (7) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - ((2 - 10) - 7))"}, {"input": "7 2 9 10\n", "output": "(9) - (7) = 2, left: 2, 2, 10\n(2) / (2) = 1, left: 1, 10\n(1) - (10) = -9, left: -9\n(2) * (2) = 4, left: 4, 10\n(10) / (2) = 5, left: 5, 2\n(2) - (10) = -8, left: -8, 2\n(10) - (2) = 8, left: 8, 2\n(2) - (8) = -6, left: -6\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((9 - 7) * (2 + 10))"}, {"input": "7 2 9 10\n", "output": "(2) - (10) = -8, left: -8, 7, 9\n(-8) / (7) = -8/7, left: -8/7, 9\n(-8/7) / (9) = -8/63, left: -8/63\n(9) + (-8/7) = 55/7, left: 55/7\n(7) * (-8) = -56, left: -56, 9\n(-56) / (9) = -56/9, left: -56/9\n(9) + (-56) = -47, left: -47\n(-8) - (7) = -15, left: -15, 9\n(-15) / (9) = -5/3, left: -5/3\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - ((2 - 10) - 7))"}, {"input": "7 2 9 10\n", "output": "(10) - (2) = 8, left: 8, 7, 9\n(8) / (9) = 8/9, left: 8/9, 7\n(7) * (8/9) = 56/9, left: 56/9\n(8/9) / (7) = 8/63, left: 8/63\n(9) - (8) = 1, left: 1, 7\n(9) * (8) = 72, left: 72, 7\n(9) / (8) = 9/8, left: 9/8, 7\n(7) + (9/8) = 65/8, left: 65/8\n(9) + (8) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (9 + (10 - 2)))"}, {"input": "7 2 9 10\n", "output": "(2) / (10) = 1/5, left: 1/5, 7, 9\n(7) - (1/5) = 34/5, left: 34/5, 9\n(9) + (34/5) = 79/5, left: 79/5\n(1/5) / (7) = 1/35, left: 1/35, 9\n(9) / (1/35) = 315, left: 315\n(1/5) - (9) = -44/5, left: -44/5, 7\n(1/5) / (9) = 1/45, left: 1/45, 7\n(2) - (10) = -8, left: -8, 7, 9\n(7) - (-8) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (7 - (2 - 10)))"}, {"input": "7 2 9 10\n", "output": "(2) - (7) = -5, left: -5, 9, 10\n(10) / (9) = 10/9, left: 10/9, -5\n(9) / (10) = 9/10, left: 9/10, -5\n(-5) - (9/10) = -59/10, left: -59/10\n(9) * (10) = 90, left: 90, -5\n(-5) - (90) = -95, left: -95\n(10) - (9) = 1, left: 1, -5\n(-5) - (1) = -6, left: -6\n(9) + (10) = 19, left: 19, -5\n(19) - (-5) = 24, left: 24\nreach 24! expression: ((9 + 10) - (2 - 7))"}, {"input": "8 10 12 3\n", "output": "(8) + (12) = 20, left: 20, 10, 3\n(12) / (10) = 6/5, left: 6/5, 8, 3\n(8) / (6/5) = 20/3, left: 20/3, 3\n(10) * (12) = 120, left: 120, 8, 3\n(8) - (3) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (8 - 3))"}, {"input": "8 10 12 3\n", "output": "(8) * (3) = 24, left: 24, 10, 12\n(8) / (3) = 8/3, left: 8/3, 10, 12\n(10) - (12) = -2, left: -2, 8/3\n(8) - (3) = 5, left: 5, 10, 12\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((8 - 3) / 10))"}, {"input": "8 10 12 3\n", "output": "(3) / (10) = 3/10, left: 3/10, 8, 12\n(8) / (12) = 2/3, left: 2/3, 3/10\n(10) - (3) = 7, left: 7, 8, 12\n(8) / (7) = 8/7, left: 8/7, 12\n(10) / (3) = 10/3, left: 10/3, 8, 12\n(8) + (10/3) = 34/3, left: 34/3, 12\n(8) - (12) = -4, left: -4, 10/3\n(8) - (3) = 5, left: 5, 10, 12\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (8 - 3))"}, {"input": "8 10 12 3\n", "output": "(12) - (8) = 4, left: 4, 10, 3\n(10) * (4) = 40, left: 40, 3\n(10) / (8) = 5/4, left: 5/4, 12, 3\n(10) - (3) = 7, left: 7, 8, 12\n(3) - (12) = -9, left: -9, 8, 10\n(12) + (3) = 15, left: 15, 8, 10\n(10) / (12) = 5/6, left: 5/6, 8, 3\n(10) * (12) = 120, left: 120, 8, 3\n(8) - (3) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (8 - 3))"}, {"input": "8 10 12 3\n", "output": "(10) / (3) = 10/3, left: 10/3, 8, 12\n(12) * (10/3) = 40, left: 40, 8\n(10) - (3) = 7, left: 7, 8, 12\n(8) / (12) = 2/3, left: 2/3, 10, 3\n(3) / (8) = 3/8, left: 3/8, 10, 12\n(10) - (12) = -2, left: -2, 3/8\n(8) / (3) = 8/3, left: 8/3, 10, 12\n(8) - (3) = 5, left: 5, 10, 12\n(5) / (12) = 5/12, left: 5/12, 10\n(10) / (5/12) = 24, left: 24\nreach 24! expression: (10 / ((8 - 3) / 12))"}, {"input": "8 10 12 3\n", "output": "(8) / (12) = 2/3, left: 2/3, 10, 3\n(8) + (12) = 20, left: 20, 10, 3\n(12) - (8) = 4, left: 4, 10, 3\n(4) - (3) = 1, left: 1, 10\n(8) * (12) = 96, left: 96, 10, 3\n(12) + (3) = 15, left: 15, 8, 10\n(10) * (12) = 120, left: 120, 8, 3\n(8) / (3) = 8/3, left: 8/3, 120\n(8) - (3) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * 12) / (8 - 3))"}, {"input": "8 10 12 3\n", "output": "(3) / (8) = 3/8, left: 3/8, 10, 12\n(12) / (3/8) = 32, left: 32, 10\n(8) + (3) = 11, left: 11, 10, 12\n(3) - (8) = -5, left: -5, 10, 12\n(10) * (-5) = -50, left: -50, 12\n(8) * (3) = 24, left: 24, 10, 12\n(8) / (3) = 8/3, left: 8/3, 10, 12\n(8) - (3) = 5, left: 5, 10, 12\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((8 - 3) / 10))"}, {"input": "3 3 10 1\n", "output": "(1) - (3) = -2, left: -2, 3, 10\n(-2) - (10) = -12, left: -12, 3\n(-2) / (10) = -1/5, left: -1/5, 3\n(-1/5) - (3) = -16/5, left: -16/5\n(10) - (-2) = 12, left: 12, 3\n(3) + (12) = 15, left: 15\n(10) + (-2) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 + (1 - 3)))"}, {"input": "3 3 10 1\n", "output": "(3) - (1) = 2, left: 2, 3, 10\n(10) / (2) = 5, left: 5, 3\n(3) * (5) = 15, left: 15\n(10) * (2) = 20, left: 20, 3\n(20) / (3) = 20/3, left: 20/3\n(3) - (20) = -17, left: -17\n(10) - (2) = 8, left: 8, 3\n(3) - (8) = -5, left: -5\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 - (3 - 1)))"}, {"input": "3 3 10 1\n", "output": "(10) / (3) = 10/3, left: 10/3, 3, 1\n(3) / (1) = 3, left: 3, 10/3\n(3) * (10) = 30, left: 30, 3, 1\n(30) - (1) = 29, left: 29, 3\n(3) / (30) = 1/10, left: 1/10, 1\n(3) / (10) = 3/10, left: 3/10, 3, 1\n(1) / (3/10) = 10/3, left: 10/3, 3\n(3) - (10) = -7, left: -7, 3, 1\n(1) - (-7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 - (3 - 10)))"}, {"input": "3 3 10 1\n", "output": "(3) * (1) = 3, left: 3, 3, 10\n(10) + (3) = 13, left: 13, 3\n(3) + (13) = 16, left: 16\n(10) / (3) = 10/3, left: 10/3, 3\n(3) + (10) = 13, left: 13, 3\n(10) - (3) = 7, left: 7, 3\n(1) - (3) = -2, left: -2, 3, 10\n(10) - (-2) = 12, left: 12, 3\n(10) + (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 + (1 - 3)))"}, {"input": "3 3 10 1\n", "output": "(3) - (3) = 0, left: 0, 10, 1\n(3) + (3) = 6, left: 6, 10, 1\n(3) - (3) = 0, left: 0, 10, 1\n(3) / (3) = 1, left: 1, 10, 1\n(10) * (1) = 10, left: 10, 1\n(1) + (10) = 11, left: 11\n(3) / (3) = 1, left: 1, 10, 1\n(3) - (10) = -7, left: -7, 3, 1\n(1) - (-7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 - (3 - 10)))"}, {"input": "3 3 10 1\n", "output": "(3) - (3) = 0, left: 0, 10, 1\n(10) - (0) = 10, left: 10, 1\n(1) + (0) = 1, left: 1, 10\n(10) * (1) = 10, left: 10\n(3) * (3) = 9, left: 9, 10, 1\n(3) + (3) = 6, left: 6, 10, 1\n(1) / (10) = 1/10, left: 1/10, 6\n(10) - (6) = 4, left: 4, 1\n(3) - (3) = 0, left: 0, 10, 1\n(1) + (0) = 1, left: 1, 10\n(3) / (3) = 1, left: 1, 10, 1\n(3) - (10) = -7, left: -7, 3, 1\n(1) - (-7) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (1 - (3 - 10)))"}, {"input": "12 12 8 1\n", "output": "(8) - (12) = -4, left: -4, 12, 1\n(-4) - (1) = -5, left: -5, 12\n(12) - (-4) = 16, left: 16, 1\n(12) / (8) = 3/2, left: 3/2, 12, 1\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "12 12 8 1\n", "output": "(1) - (12) = -11, left: -11, 12, 8\n(12) / (1) = 12, left: 12, 12, 8\n(8) + (12) = 20, left: 20, 12\n(12) / (8) = 3/2, left: 3/2, 12, 1\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "12 12 8 1\n", "output": "(8) / (12) = 2/3, left: 2/3, 12, 1\n(1) - (2/3) = 1/3, left: 1/3, 12\n(12) * (1) = 12, left: 12, 2/3\n(12) / (8) = 3/2, left: 3/2, 12, 1\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "12 12 8 1\n", "output": "(8) + (1) = 9, left: 9, 12, 12\n(8) / (1) = 8, left: 8, 12, 12\n(12) - (12) = 0, left: 0, 8, 1\n(8) * (0) = 0, left: 0, 1\n(12) + (12) = 24, left: 24, 8, 1\n(12) / (12) = 1, left: 1, 8, 1\n(12) * (12) = 144, left: 144, 8, 1\n(12) / (8) = 3/2, left: 3/2, 12, 1\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "12 12 8 1\n", "output": "(12) - (12) = 0, left: 0, 8, 1\n(12) / (12) = 1, left: 1, 8, 1\n(8) - (1) = 7, left: 7, 1\n(1) / (8) = 1/8, left: 1/8, 12, 12\n(8) * (1) = 8, left: 8, 12, 12\n(8) / (12) = 2/3, left: 2/3, 12\n(12) / (12) = 1, left: 1, 8\n(12) / (8) = 3/2, left: 3/2, 12, 1\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "12 12 8 1\n", "output": "(1) / (12) = 1/12, left: 1/12, 12, 8\n(12) / (8) = 3/2, left: 3/2, 1/12\n(12) / (1) = 12, left: 12, 12, 8\n(12) - (1) = 11, left: 11, 12, 8\n(8) - (1) = 7, left: 7, 12, 12\n(8) * (1) = 8, left: 8, 12, 12\n(12) * (8) = 96, left: 96, 12\n(12) / (8) = 3/2, left: 3/2, 12, 1\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "12 12 8 1\n", "output": "(8) / (12) = 2/3, left: 2/3, 12, 1\n(1) - (12) = -11, left: -11, 2/3\n(2/3) / (12) = 1/18, left: 1/18, 1\n(2/3) - (12) = -34/3, left: -34/3, 1\n(12) * (8) = 96, left: 96, 12, 1\n(12) / (8) = 3/2, left: 3/2, 12, 1\n(12) * (1) = 12, left: 12, 3/2\n(1) - (3/2) = -1/2, left: -1/2, 12\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "12 12 8 1\n", "output": "(8) / (12) = 2/3, left: 2/3, 12, 1\n(1) - (2/3) = 1/3, left: 1/3, 12\n(12) + (1/3) = 37/3, left: 37/3\n(8) - (12) = -4, left: -4, 12, 1\n(12) * (-4) = -48, left: -48, 1\n(1) / (-48) = -1/48, left: -1/48\n(12) + (8) = 20, left: 20, 12, 1\n(12) / (8) = 3/2, left: 3/2, 12, 1\n(3/2) - (1) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "11 4 4 6\n", "output": "(4) * (4) = 16, left: 16, 11, 6\n(6) - (16) = -10, left: -10, 11\n(11) - (-10) = 21, left: 21\n(4) - (4) = 0, left: 0, 11, 6\n(6) * (0) = 0, left: 0, 11\n(6) / (4) = 3/2, left: 3/2, 11, 4\n(11) + (4) = 15, left: 15, 4, 6\n(6) - (11) = -5, left: -5, 4, 4\n(4) * (-5) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (4 * (6 - 11)))"}, {"input": "11 4 4 6\n", "output": "(4) * (6) = 24, left: 24, 11, 4\n(4) + (6) = 10, left: 10, 11, 4\n(6) / (4) = 3/2, left: 3/2, 11, 4\n(11) / (3/2) = 22/3, left: 22/3, 4\n(11) - (4) = 7, left: 7, 4, 6\n(6) / (11) = 6/11, left: 6/11, 4, 4\n(4) - (6/11) = 38/11, left: 38/11, 4\n(11) - (6) = 5, left: 5, 4, 4\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (11 - 6)))"}, {"input": "11 4 4 6\n", "output": "(11) / (4) = 11/4, left: 11/4, 4, 6\n(4) / (11) = 4/11, left: 4/11, 4, 6\n(4) - (6) = -2, left: -2, 11, 4\n(11) + (4) = 15, left: 15, -2\n(11) * (4) = 44, left: 44, 4, 6\n(44) / (4) = 11, left: 11, 6\n(11) / (6) = 11/6, left: 11/6, 4, 4\n(11) - (6) = 5, left: 5, 4, 4\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (11 - 6)))"}, {"input": "11 4 4 6\n", "output": "(6) - (11) = -5, left: -5, 4, 4\n(-5) - (4) = -9, left: -9, 4\n(4) + (-9) = -5, left: -5\n(4) - (-9) = 13, left: 13\n(-9) - (4) = -13, left: -13\n(4) * (-9) = -36, left: -36\n(4) * (-5) = -20, left: -20, 4\n(-20) / (4) = -5, left: -5\n(4) * (-20) = -80, left: -80\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (4 * (6 - 11)))"}, {"input": "11 4 4 6\n", "output": "(4) / (11) = 4/11, left: 4/11, 4, 6\n(11) * (4) = 44, left: 44, 4, 6\n(4) - (6) = -2, left: -2, 44\n(4) / (11) = 4/11, left: 4/11, 4, 6\n(11) * (4) = 44, left: 44, 4, 6\n(11) / (4) = 11/4, left: 11/4, 4, 6\n(11) + (4) = 15, left: 15, 4, 6\n(6) - (11) = -5, left: -5, 4, 4\n(4) * (-5) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (4 * (6 - 11)))"}, {"input": "11 4 4 6\n", "output": "(11) - (4) = 7, left: 7, 4, 6\n(7) / (4) = 7/4, left: 7/4, 6\n(11) / (4) = 11/4, left: 11/4, 4, 6\n(4) - (11) = -7, left: -7, 4, 6\n(4) * (6) = 24, left: 24, -7\n(-7) - (24) = -31, left: -31\n(11) + (4) = 15, left: 15, 4, 6\n(6) - (4) = 2, left: 2, 11, 4\n(2) / (4) = 1/2, left: 1/2, 11\n(4) - (6) = -2, left: -2, 11, 4\n(4) - (11) = -7, left: -7, 4, 6\n(11) - (6) = 5, left: 5, 4, 4\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (11 - 6)))"}, {"input": "11 4 4 6\n", "output": "(6) / (4) = 3/2, left: 3/2, 11, 4\n(11) / (4) = 11/4, left: 11/4, 3/2\n(6) / (4) = 3/2, left: 3/2, 11, 4\n(4) * (3/2) = 6, left: 6, 11\n(11) * (4) = 44, left: 44, 4, 6\n(4) - (4) = 0, left: 0, 11, 6\n(4) * (4) = 16, left: 16, 11, 6\n(11) + (16) = 27, left: 27, 6\n(4) / (4) = 1, left: 1, 11, 6\n(6) + (1) = 7, left: 7, 11\n(11) - (4) = 7, left: 7, 4, 6\n(6) - (11) = -5, left: -5, 4, 4\n(4) * (-5) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (4 * (6 - 11)))"}, {"input": "11 4 4 6\n", "output": "(4) - (6) = -2, left: -2, 11, 4\n(11) - (-2) = 13, left: 13, 4\n(4) / (4) = 1, left: 1, 11, 6\n(4) - (4) = 0, left: 0, 11, 6\n(0) / (6) = 0, left: 0, 11\n(4) + (6) = 10, left: 10, 11, 4\n(10) - (4) = 6, left: 6, 11\n(6) / (4) = 3/2, left: 3/2, 11, 4\n(11) * (4) = 44, left: 44, 3/2\n(11) * (4) = 44, left: 44, 4, 6\n(4) - (11) = -7, left: -7, 4, 6\n(6) - (11) = -5, left: -5, 4, 4\n(4) * (-5) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (4 * (6 - 11)))"}, {"input": "5 5 10 11\n", "output": "(5) / (10) = 1/2, left: 1/2, 5, 11\n(5) * (10) = 50, left: 50, 5, 11\n(50) / (11) = 50/11, left: 50/11, 5\n(5) * (5) = 25, left: 25, 10, 11\n(25) - (11) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((5 * 5) - 11))"}, {"input": "5 5 10 11\n", "output": "(10) * (11) = 110, left: 110, 5, 5\n(5) + (110) = 115, left: 115, 5\n(5) * (115) = 575, left: 575\n(11) - (10) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 - 10))"}, {"input": "5 5 10 11\n", "output": "(10) * (11) = 110, left: 110, 5, 5\n(110) / (5) = 22, left: 22, 5\n(5) - (110) = -105, left: -105, 5\n(11) - (10) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 - 10))"}, {"input": "5 5 10 11\n", "output": "(5) - (10) = -5, left: -5, 5, 11\n(-5) / (11) = -5/11, left: -5/11, 5\n(-5) - (5) = -10, left: -10, 11\n(5) * (5) = 25, left: 25, 10, 11\n(10) + (25) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((10 + (5 * 5)) - 11)"}, {"input": "5 5 10 11\n", "output": "(5) / (10) = 1/2, left: 1/2, 5, 11\n(5) + (10) = 15, left: 15, 5, 11\n(10) / (5) = 2, left: 2, 5, 11\n(5) + (2) = 7, left: 7, 11\n(5) - (10) = -5, left: -5, 5, 11\n(5) - (11) = -6, left: -6, -5\n(10) - (5) = 5, left: 5, 5, 11\n(5) * (5) = 25, left: 25, 10, 11\n(10) + (25) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((10 + (5 * 5)) - 11)"}, {"input": "5 5 10 11\n", "output": "(5) - (11) = -6, left: -6, 5, 10\n(5) + (-6) = -1, left: -1, 10\n(5) / (11) = 5/11, left: 5/11, 5, 10\n(10) / (5) = 2, left: 2, 5/11\n(5) * (11) = 55, left: 55, 5, 10\n(5) - (55) = -50, left: -50, 10\n(5) + (11) = 16, left: 16, 5, 10\n(11) - (10) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 - 10))"}, {"input": "5 5 10 11\n", "output": "(10) * (11) = 110, left: 110, 5, 5\n(5) / (5) = 1, left: 1, 110\n(110) - (5) = 105, left: 105, 5\n(105) / (5) = 21, left: 21\n(110) / (5) = 22, left: 22, 5\n(11) - (10) = 1, left: 1, 5, 5\n(1) / (5) = 1/5, left: 1/5, 5\n(5) / (1) = 5, left: 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (11 - 10))"}, {"input": "5 5 10 11\n", "output": "(5) / (5) = 1, left: 1, 10, 11\n(10) / (11) = 10/11, left: 10/11, 1\n(11) * (1) = 11, left: 11, 10\n(5) / (5) = 1, left: 1, 10, 11\n(10) - (1) = 9, left: 9, 11\n(10) + (1) = 11, left: 11, 11\n(10) + (11) = 21, left: 21, 1\n(5) * (5) = 25, left: 25, 10, 11\n(25) - (11) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((5 * 5) - 11))"}, {"input": "5 5 10 11\n", "output": "(10) - (5) = 5, left: 5, 5, 11\n(5) * (11) = 55, left: 55, 5\n(5) + (55) = 60, left: 60\n(11) - (5) = 6, left: 6, 5, 10\n(5) / (11) = 5/11, left: 5/11, 5, 10\n(5) - (10) = -5, left: -5, 5, 11\n(5) / (10) = 1/2, left: 1/2, 5, 11\n(5) * (5) = 25, left: 25, 10, 11\n(25) - (11) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((5 * 5) - 11))"}, {"input": "2 4 12 10\n", "output": "(4) / (10) = 2/5, left: 2/5, 2, 12\n(2/5) / (12) = 1/30, left: 1/30, 2\n(10) - (4) = 6, left: 6, 2, 12\n(6) - (2) = 4, left: 4, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (10 - 4)))"}, {"input": "2 4 12 10\n", "output": "(2) - (12) = -10, left: -10, 4, 10\n(-10) / (4) = -5/2, left: -5/2, 10\n(10) - (-5/2) = 25/2, left: 25/2\n(4) - (-10) = 14, left: 14, 10\n(10) / (14) = 5/7, left: 5/7\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (4 - (2 - 12)))"}, {"input": "2 4 12 10\n", "output": "(4) * (10) = 40, left: 40, 2, 12\n(2) - (12) = -10, left: -10, 40\n(10) / (4) = 5/2, left: 5/2, 2, 12\n(12) - (2) = 10, left: 10, 5/2\n(5/2) - (2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((10 / 4) - 2))"}, {"input": "2 4 12 10\n", "output": "(12) / (10) = 6/5, left: 6/5, 2, 4\n(2) - (6/5) = 4/5, left: 4/5, 4\n(4) - (2) = 2, left: 2, 6/5\n(12) + (10) = 22, left: 22, 2, 4\n(4) + (22) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((4 + (12 + 10)) - 2)"}, {"input": "2 4 12 10\n", "output": "(2) - (12) = -10, left: -10, 4, 10\n(-10) / (4) = -5/2, left: -5/2, 10\n(10) + (-5/2) = 15/2, left: 15/2\n(-5/2) - (10) = -25/2, left: -25/2\n(4) - (-10) = 14, left: 14, 10\n(10) - (14) = -4, left: -4\n(14) / (10) = 7/5, left: 7/5\n(10) / (14) = 5/7, left: 5/7\n(10) * (14) = 140, left: 140\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (4 - (2 - 12)))"}, {"input": "2 4 12 10\n", "output": "(12) / (10) = 6/5, left: 6/5, 2, 4\n(2) * (4) = 8, left: 8, 6/5\n(12) * (10) = 120, left: 120, 2, 4\n(4) - (120) = -116, left: -116, 2\n(120) - (2) = 118, left: 118, 4\n(2) - (120) = -118, left: -118, 4\n(-118) / (4) = -59/2, left: -59/2\n(12) + (10) = 22, left: 22, 2, 4\n(4) + (22) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((4 + (12 + 10)) - 2)"}, {"input": "2 4 12 10\n", "output": "(12) - (10) = 2, left: 2, 2, 4\n(10) / (12) = 5/6, left: 5/6, 2, 4\n(2) / (5/6) = 12/5, left: 12/5, 4\n(12/5) / (4) = 3/5, left: 3/5\n(2) + (4) = 6, left: 6, 5/6\n(12) * (10) = 120, left: 120, 2, 4\n(4) - (2) = 2, left: 2, 120\n(12) + (10) = 22, left: 22, 2, 4\n(4) + (22) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((4 + (12 + 10)) - 2)"}, {"input": "2 4 12 10\n", "output": "(4) * (10) = 40, left: 40, 2, 12\n(2) / (12) = 1/6, left: 1/6, 40\n(40) / (2) = 20, left: 20, 12\n(2) / (40) = 1/20, left: 1/20, 12\n(10) / (4) = 5/2, left: 5/2, 2, 12\n(2) / (12) = 1/6, left: 1/6, 5/2\n(1/6) - (5/2) = -7/3, left: -7/3\n(12) / (2) = 6, left: 6, 5/2\n(5/2) - (2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((10 / 4) - 2))"}, {"input": "2 4 12 10\n", "output": "(4) / (10) = 2/5, left: 2/5, 2, 12\n(2) + (2/5) = 12/5, left: 12/5, 12\n(2/5) / (2) = 1/5, left: 1/5, 12\n(2/5) - (12) = -58/5, left: -58/5, 2\n(12) / (2/5) = 30, left: 30, 2\n(30) / (2) = 15, left: 15\n(10) - (4) = 6, left: 6, 2, 12\n(6) / (2) = 3, left: 3, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (10 - 4)))"}, {"input": "2 12 6 10\n", "output": "(12) + (10) = 22, left: 22, 2, 6\n(2) / (22) = 1/11, left: 1/11, 6\n(10) - (12) = -2, left: -2, 2, 6\n(2) * (6) = 12, left: 12, -2\n(2) - (-2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 - (10 - 12)))"}, {"input": "2 12 6 10\n", "output": "(2) + (10) = 12, left: 12, 12, 6\n(6) + (12) = 18, left: 18, 12\n(6) * (12) = 72, left: 72, 12\n(12) / (6) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((2 + 10) / 6))"}, {"input": "2 12 6 10\n", "output": "(12) - (2) = 10, left: 10, 6, 10\n(6) + (10) = 16, left: 16, 10\n(6) * (10) = 60, left: 60, 10\n(2) + (12) = 14, left: 14, 6, 10\n(14) - (10) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((2 + 12) - 10))"}, {"input": "2 12 6 10\n", "output": "(12) - (2) = 10, left: 10, 6, 10\n(10) / (6) = 5/3, left: 5/3, 10\n(10) * (10) = 100, left: 100, 6\n(10) / (10) = 1, left: 1, 6\n(2) + (12) = 14, left: 14, 6, 10\n(6) / (10) = 3/5, left: 3/5, 14\n(14) / (10) = 7/5, left: 7/5, 6\n(7/5) / (6) = 7/30, left: 7/30\n(14) - (10) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((2 + 12) - 10))"}, {"input": "2 12 6 10\n", "output": "(10) / (12) = 5/6, left: 5/6, 2, 6\n(12) * (10) = 120, left: 120, 2, 6\n(6) * (120) = 720, left: 720, 2\n(720) - (2) = 718, left: 718\n(12) + (10) = 22, left: 22, 2, 6\n(10) - (12) = -2, left: -2, 2, 6\n(6) + (-2) = 4, left: 4, 2\n(6) - (-2) = 8, left: 8, 2\n(2) - (-2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 - (10 - 12)))"}, {"input": "2 12 6 10\n", "output": "(2) + (10) = 12, left: 12, 12, 6\n(6) + (12) = 18, left: 18, 12\n(12) + (18) = 30, left: 30\n(12) - (18) = -6, left: -6\n(12) / (18) = 2/3, left: 2/3\n(12) * (18) = 216, left: 216\n(6) * (12) = 72, left: 72, 12\n(72) - (12) = 60, left: 60\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((2 + 10) / 6))"}, {"input": "2 12 6 10\n", "output": "(12) / (2) = 6, left: 6, 6, 10\n(6) - (10) = -4, left: -4, 6\n(6) * (-4) = -24, left: -24\n(10) * (6) = 60, left: 60, 6\n(6) * (60) = 360, left: 360\n(6) + (60) = 66, left: 66\n(10) - (6) = 4, left: 4, 6\n(4) / (6) = 2/3, left: 2/3\n(6) - (4) = 2, left: 2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (10 - (12 / 2)))"}, {"input": "2 12 6 10\n", "output": "(12) + (10) = 22, left: 22, 2, 6\n(2) - (6) = -4, left: -4, 22\n(2) * (22) = 44, left: 44, 6\n(22) / (2) = 11, left: 11, 6\n(6) / (22) = 3/11, left: 3/11, 2\n(3/11) / (2) = 3/22, left: 3/22\n(10) - (12) = -2, left: -2, 2, 6\n(2) * (6) = 12, left: 12, -2\n(2) - (-2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 - (10 - 12)))"}, {"input": "6 11 1 7\n", "output": "(6) - (1) = 5, left: 5, 11, 7\n(11) / (5) = 11/5, left: 11/5, 7\n(11/5) / (7) = 11/35, left: 11/35\n(5) / (7) = 5/7, left: 5/7, 11\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (6 - 1)) - 11)"}, {"input": "6 11 1 7\n", "output": "(11) + (7) = 18, left: 18, 6, 1\n(1) * (18) = 18, left: 18, 6\n(6) - (18) = -12, left: -12\n(6) / (18) = 1/3, left: 1/3\n(6) * (18) = 108, left: 108\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (1 * (11 + 7)))"}, {"input": "6 11 1 7\n", "output": "(11) * (7) = 77, left: 77, 6, 1\n(77) / (6) = 77/6, left: 77/6, 1\n(6) / (1) = 6, left: 6, 77\n(6) / (77) = 6/77, left: 6/77\n(6) * (1) = 6, left: 6, 77\n(1) + (77) = 78, left: 78, 6\n(6) / (78) = 1/13, left: 1/13\n(11) + (7) = 18, left: 18, 6, 1\n(6) + (18) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (6 + (11 + 7)))"}, {"input": "6 11 1 7\n", "output": "(11) + (7) = 18, left: 18, 6, 1\n(1) * (18) = 18, left: 18, 6\n(6) - (18) = -12, left: -12\n(6) / (18) = 1/3, left: 1/3\n(6) * (18) = 108, left: 108\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (1 * (11 + 7)))"}, {"input": "6 11 1 7\n", "output": "(1) / (11) = 1/11, left: 1/11, 6, 7\n(6) * (7) = 42, left: 42, 1/11\n(1/11) + (42) = 463/11, left: 463/11\n(7) - (1/11) = 76/11, left: 76/11, 6\n(11) - (1) = 10, left: 10, 6, 7\n(6) - (7) = -1, left: -1, 10\n(6) - (10) = -4, left: -4, 7\n(11) / (1) = 11, left: 11, 6, 7\n(11) - (7) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((11 / 1) - 7))"}, {"input": "6 11 1 7\n", "output": "(6) - (1) = 5, left: 5, 11, 7\n(5) / (11) = 5/11, left: 5/11, 7\n(11) * (7) = 77, left: 77, 5\n(11) / (7) = 11/7, left: 11/7, 5\n(7) / (5) = 7/5, left: 7/5, 11\n(7/5) / (11) = 7/55, left: 7/55\n(7) - (5) = 2, left: 2, 11\n(11) + (2) = 13, left: 13\n(7) * (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((7 * (6 - 1)) - 11)"}, {"input": "6 11 1 7\n", "output": "(1) - (7) = -6, left: -6, 6, 11\n(6) * (11) = 66, left: 66, -6\n(-6) - (6) = -12, left: -12, 11\n(11) / (-12) = -11/12, left: -11/12\n(-6) / (6) = -1, left: -1, 11\n(-1) / (11) = -1/11, left: -1/11\n(-6) - (11) = -17, left: -17, 6\n(1) * (7) = 7, left: 7, 6, 11\n(11) + (7) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (11 + (1 * 7)))"}, {"input": "6 11 1 7\n", "output": "(11) + (7) = 18, left: 18, 6, 1\n(1) * (18) = 18, left: 18, 6\n(6) - (18) = -12, left: -12\n(6) / (18) = 1/3, left: 1/3\n(6) * (18) = 108, left: 108\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (1 * (11 + 7)))"}, {"input": "6 11 1 7\n", "output": "(11) + (7) = 18, left: 18, 6, 1\n(1) * (18) = 18, left: 18, 6\n(6) - (18) = -12, left: -12\n(6) / (18) = 1/3, left: 1/3\n(6) * (18) = 108, left: 108\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (1 * (11 + 7)))"}, {"input": "8 4 3 3\n", "output": "(8) / (3) = 8/3, left: 8/3, 4, 3\n(3) + (8/3) = 17/3, left: 17/3, 4\n(4) + (8/3) = 20/3, left: 20/3, 3\n(3) - (8) = -5, left: -5, 4, 3\n(8) - (3) = 5, left: 5, 4, 3\n(3) + (5) = 8, left: 8, 4\n(8) * (3) = 24, left: 24, 4, 3\n(4) + (3) = 7, left: 7, 24\n(4) - (3) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * 3) / (4 - 3))"}, {"input": "8 4 3 3\n", "output": "(3) - (4) = -1, left: -1, 8, 3\n(8) - (3) = 5, left: 5, -1\n(8) - (-1) = 9, left: 9, 3\n(3) / (9) = 1/3, left: 1/3\n(-1) - (3) = -4, left: -4, 8\n(4) - (3) = 1, left: 1, 8, 3\n(3) - (8) = -5, left: -5, 1\n(8) + (3) = 11, left: 11, 1\n(8) * (3) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((4 - 3) * (8 * 3))"}, {"input": "8 4 3 3\n", "output": "(8) + (4) = 12, left: 12, 3, 3\n(12) - (3) = 9, left: 9, 3\n(3) - (12) = -9, left: -9, 3\n(-9) / (3) = -3, left: -3\n(3) * (12) = 36, left: 36, 3\n(3) + (12) = 15, left: 15, 3\n(3) / (15) = 1/5, left: 1/5\n(8) - (4) = 4, left: 4, 3, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 - 4) * (3 + 3))"}, {"input": "8 4 3 3\n", "output": "(8) - (4) = 4, left: 4, 3, 3\n(3) * (4) = 12, left: 12, 3\n(12) / (3) = 4, left: 4\n(3) - (4) = -1, left: -1, 3\n(3) - (-1) = 4, left: 4\n(3) / (4) = 3/4, left: 3/4, 3\n(3) / (3/4) = 4, left: 4\n(4) - (3) = 1, left: 1, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 - 4) * (3 + 3))"}, {"input": "8 4 3 3\n", "output": "(3) / (8) = 3/8, left: 3/8, 4, 3\n(3) - (3/8) = 21/8, left: 21/8, 4\n(3) / (4) = 3/4, left: 3/4, 3/8\n(3/8) + (3/4) = 9/8, left: 9/8\n(8) * (3) = 24, left: 24, 4, 3\n(24) / (3) = 8, left: 8, 4\n(3) + (24) = 27, left: 27, 4\n(27) / (4) = 27/4, left: 27/4\n(4) - (3) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * 3) / (4 - 3))"}, {"input": "8 4 3 3\n", "output": "(3) - (4) = -1, left: -1, 8, 3\n(3) - (8) = -5, left: -5, -1\n(-1) + (-5) = -6, left: -6\n(8) / (3) = 8/3, left: 8/3, -1\n(8) * (-1) = -8, left: -8, 3\n(-1) - (8) = -9, left: -9, 3\n(3) + (-1) = 2, left: 2, 8\n(8) / (2) = 4, left: 4\n(-1) - (3) = -4, left: -4, 8\n(8) * (-4) = -32, left: -32\n(4) - (3) = 1, left: 1, 8, 3\n(8) + (3) = 11, left: 11, 1\n(8) * (3) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((4 - 3) * (8 * 3))"}, {"input": "7 2 3 2\n", "output": "(2) * (3) = 6, left: 6, 7, 2\n(2) + (6) = 8, left: 8, 7\n(2) - (6) = -4, left: -4, 7\n(7) - (-4) = 11, left: 11\n(2) / (3) = 2/3, left: 2/3, 7, 2\n(2) - (2/3) = 4/3, left: 4/3, 7\n(7) - (2) = 5, left: 5, 2/3\n(2) + (3) = 5, left: 5, 7, 2\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (2 + 3)))"}, {"input": "7 2 3 2\n", "output": "(2) - (2) = 0, left: 0, 7, 3\n(3) * (0) = 0, left: 0, 7\n(3) + (0) = 3, left: 3, 7\n(3) - (0) = 3, left: 3, 7\n(7) - (3) = 4, left: 4\n(2) / (2) = 1, left: 1, 7, 3\n(1) - (3) = -2, left: -2, 7\n(-2) - (7) = -9, left: -9\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (2 / 2)))"}, {"input": "7 2 3 2\n", "output": "(2) + (3) = 5, left: 5, 7, 2\n(7) / (2) = 7/2, left: 7/2, 5\n(7/2) - (5) = -3/2, left: -3/2\n(7) - (2) = 5, left: 5, 5\n(2) - (7) = -5, left: -5, 5\n(7) + (2) = 9, left: 9, 5\n(7) * (5) = 35, left: 35, 2\n(5) / (7) = 5/7, left: 5/7, 2\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (2 + 3)))"}, {"input": "7 2 3 2\n", "output": "(2) - (2) = 0, left: 0, 7, 3\n(2) + (2) = 4, left: 4, 7, 3\n(2) - (2) = 0, left: 0, 7, 3\n(7) + (0) = 7, left: 7, 3\n(0) - (7) = -7, left: -7, 3\n(-7) / (3) = -7/3, left: -7/3\n(2) / (2) = 1, left: 1, 7, 3\n(7) * (3) = 21, left: 21, 1\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (2 / 2)))"}, {"input": "7 2 3 2\n", "output": "(7) / (2) = 7/2, left: 7/2, 3, 2\n(2) * (7/2) = 7, left: 7, 3\n(7) / (3) = 7/3, left: 7/3\n(3) * (7/2) = 21/2, left: 21/2, 2\n(7) + (2) = 9, left: 9, 3, 2\n(9) - (2) = 7, left: 7, 3\n(3) + (7) = 10, left: 10\n(9) - (3) = 6, left: 6, 2\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 + (7 + 2)))"}, {"input": "7 2 3 2\n", "output": "(2) - (2) = 0, left: 0, 7, 3\n(3) - (0) = 3, left: 3, 7\n(2) + (2) = 4, left: 4, 7, 3\n(3) + (4) = 7, left: 7, 7\n(7) + (3) = 10, left: 10, 4\n(3) - (7) = -4, left: -4, 4\n(4) * (-4) = -16, left: -16\n(7) / (4) = 7/4, left: 7/4, 3\n(7/4) - (3) = -5/4, left: -5/4\n(2) - (2) = 0, left: 0, 7, 3\n(2) / (2) = 1, left: 1, 7, 3\n(7) * (3) = 21, left: 21, 1\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (2 / 2)))"}, {"input": "7 2 3 2\n", "output": "(2) - (2) = 0, left: 0, 7, 3\n(0) / (7) = 0, left: 0, 3\n(3) - (0) = 3, left: 3\n(7) + (0) = 7, left: 7, 3\n(3) + (0) = 3, left: 3, 7\n(7) * (3) = 21, left: 21\n(3) - (0) = 3, left: 3, 7\n(7) * (3) = 21, left: 21\n(2) / (2) = 1, left: 1, 7, 3\n(3) + (1) = 4, left: 4, 7\n(4) / (7) = 4/7, left: 4/7\n(3) - (1) = 2, left: 2, 7\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (2 / 2)))"}, {"input": "1 11 1 11\n", "output": "(1) - (11) = -10, left: -10, 1, 11\n(-10) - (1) = -11, left: -11, 11\n(11) / (1) = 11, left: 11, 1, 11\n(11) + (1) = 12, left: 12, 1, 11\n(1) + (11) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((11 + 1) + (1 + 11))"}, {"input": "1 11 1 11\n", "output": "(1) + (11) = 12, left: 12, 1, 11\n(11) / (12) = 11/12, left: 11/12, 1\n(11/12) - (1) = -1/12, left: -1/12\n(11) * (12) = 132, left: 132, 1\n(11) + (12) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (11 + (1 + 11)))"}, {"input": "1 11 1 11\n", "output": "(11) / (1) = 11, left: 11, 11, 1\n(11) + (11) = 22, left: 22, 1\n(11) - (11) = 0, left: 0, 1\n(1) + (11) = 12, left: 12, 11, 1\n(11) + (12) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (11 + (1 + 11)))"}, {"input": "1 11 1 11\n", "output": "(1) - (1) = 0, left: 0, 11, 11\n(11) - (11) = 0, left: 0, 0\n(11) - (0) = 11, left: 11, 11\n(0) - (11) = -11, left: -11, 11\n(11) * (0) = 0, left: 0, 11\n(11) - (0) = 11, left: 11, 11\n(11) * (11) = 121, left: 121\n(1) + (1) = 2, left: 2, 11, 11\n(11) + (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (11 + (1 + 1)))"}, {"input": "1 11 1 11\n", "output": "(11) / (1) = 11, left: 11, 11, 1\n(1) / (11) = 1/11, left: 1/11, 11\n(11) - (1) = 10, left: 10, 11\n(1) - (11) = -10, left: -10, 11\n(11) + (11) = 22, left: 22, 1\n(11) * (11) = 121, left: 121, 1\n(121) / (1) = 121, left: 121\n(1) + (11) = 12, left: 12, 11, 1\n(11) + (12) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (11 + (1 + 11)))"}, {"input": "1 11 1 11\n", "output": "(1) + (11) = 12, left: 12, 1, 11\n(11) / (12) = 11/12, left: 11/12, 1\n(1) * (11/12) = 11/12, left: 11/12\n(1) - (11/12) = 1/12, left: 1/12\n(11) * (12) = 132, left: 132, 1\n(132) - (1) = 131, left: 131\n(1) / (132) = 1/132, left: 1/132\n(1) + (132) = 133, left: 133\n(11) + (12) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (11 + (1 + 11)))"}, {"input": "1 11 1 11\n", "output": "(1) / (1) = 1, left: 1, 11, 11\n(11) + (1) = 12, left: 12, 11\n(11) / (1) = 11, left: 11, 11\n(1) / (1) = 1, left: 1, 11, 11\n(11) * (1) = 11, left: 11, 11\n(1) - (1) = 0, left: 0, 11, 11\n(11) - (0) = 11, left: 11, 11\n(1) + (1) = 2, left: 2, 11, 11\n(11) + (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (11 + (1 + 1)))"}, {"input": "1 11 1 11\n", "output": "(11) / (1) = 11, left: 11, 1, 11\n(11) - (1) = 10, left: 10, 11\n(1) / (11) = 1/11, left: 1/11, 1, 11\n(1) * (11) = 11, left: 11, 1/11\n(1/11) - (11) = -120/11, left: -120/11\n(11) * (1) = 11, left: 11, 1, 11\n(11) - (1) = 10, left: 10, 1, 11\n(11) + (1) = 12, left: 12, 1, 11\n(1) + (11) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((11 + 1) + (1 + 11))"}, {"input": "9 6 7 2\n", "output": "(7) / (2) = 7/2, left: 7/2, 9, 6\n(9) / (6) = 3/2, left: 3/2, 7/2\n(9) * (6) = 54, left: 54, 7/2\n(7/2) / (54) = 7/108, left: 7/108\n(6) - (7/2) = 5/2, left: 5/2, 9\n(9) / (7/2) = 18/7, left: 18/7, 6\n(9) + (7/2) = 25/2, left: 25/2, 6\n(7) + (2) = 9, left: 9, 9, 6\n(6) + (9) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (6 + (7 + 2)))"}, {"input": "9 6 7 2\n", "output": "(6) - (9) = -3, left: -3, 7, 2\n(2) + (-3) = -1, left: -1, 7\n(7) / (-3) = -7/3, left: -7/3, 2\n(9) * (6) = 54, left: 54, 7, 2\n(9) / (6) = 3/2, left: 3/2, 7, 2\n(3/2) / (2) = 3/4, left: 3/4, 7\n(9) + (6) = 15, left: 15, 7, 2\n(7) - (2) = 5, left: 5, 15\n(7) + (2) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((9 + 6) + (7 + 2))"}, {"input": "9 6 7 2\n", "output": "(9) / (6) = 3/2, left: 3/2, 7, 2\n(9) - (6) = 3, left: 3, 7, 2\n(7) * (3) = 21, left: 21, 2\n(6) / (9) = 2/3, left: 2/3, 7, 2\n(7) - (2/3) = 19/3, left: 19/3, 2\n(9) * (6) = 54, left: 54, 7, 2\n(6) - (9) = -3, left: -3, 7, 2\n(9) + (6) = 15, left: 15, 7, 2\n(7) + (2) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((9 + 6) + (7 + 2))"}, {"input": "9 6 7 2\n", "output": "(7) * (2) = 14, left: 14, 9, 6\n(14) - (9) = 5, left: 5, 6\n(9) + (14) = 23, left: 23, 6\n(14) / (9) = 14/9, left: 14/9, 6\n(9) + (6) = 15, left: 15, 14\n(7) - (2) = 5, left: 5, 9, 6\n(9) / (5) = 9/5, left: 9/5, 6\n(9) * (5) = 45, left: 45, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (7 - 2)))"}, {"input": "9 6 7 2\n", "output": "(9) * (2) = 18, left: 18, 6, 7\n(6) * (18) = 108, left: 108, 7\n(6) + (18) = 24, left: 24, 7\n(18) - (6) = 12, left: 12, 7\n(6) - (18) = -12, left: -12, 7\n(-12) - (7) = -19, left: -19\n(7) + (18) = 25, left: 25, 6\n(6) - (25) = -19, left: -19\n(6) * (7) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((6 * 7) - (9 * 2))"}, {"input": "13 2 7 2\n", "output": "(2) / (2) = 1, left: 1, 13, 7\n(13) / (7) = 13/7, left: 13/7, 1\n(13) - (1) = 12, left: 12, 7\n(2) / (2) = 1, left: 1, 13, 7\n(7) / (1) = 7, left: 7, 13\n(13) * (1) = 13, left: 13, 7\n(13) / (7) = 13/7, left: 13/7, 1\n(2) * (2) = 4, left: 4, 13, 7\n(13) - (7) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 * 2) * (13 - 7))"}, {"input": "13 2 7 2\n", "output": "(13) * (7) = 91, left: 91, 2, 2\n(2) - (91) = -89, left: -89, 2\n(2) / (-89) = -2/89, left: -2/89\n(2) - (2) = 0, left: 0, 91\n(91) - (0) = 91, left: 91\n(91) / (2) = 91/2, left: 91/2, 2\n(13) + (7) = 20, left: 20, 2, 2\n(2) / (2) = 1, left: 1, 20\n(2) * (2) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((13 + 7) + (2 * 2))"}, {"input": "13 2 7 2\n", "output": "(2) / (2) = 1, left: 1, 13, 7\n(13) - (1) = 12, left: 12, 7\n(13) / (1) = 13, left: 13, 7\n(2) - (2) = 0, left: 0, 13, 7\n(0) - (7) = -7, left: -7, 13\n(7) * (0) = 0, left: 0, 13\n(13) / (7) = 13/7, left: 13/7, 0\n(2) * (2) = 4, left: 4, 13, 7\n(7) + (4) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (7 + (2 * 2)))"}, {"input": "13 2 7 2\n", "output": "(13) * (2) = 26, left: 26, 2, 7\n(2) / (13) = 2/13, left: 2/13, 2, 7\n(7) - (2/13) = 89/13, left: 89/13, 2\n(2) + (2/13) = 28/13, left: 28/13, 7\n(7) + (28/13) = 119/13, left: 119/13\n(2) - (13) = -11, left: -11, 2, 7\n(7) + (-11) = -4, left: -4, 2\n(13) + (2) = 15, left: 15, 2, 7\n(7) + (15) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (7 + (13 + 2)))"}, {"input": "13 2 7 2\n", "output": "(2) / (13) = 2/13, left: 2/13, 7, 2\n(7) + (2/13) = 93/13, left: 93/13, 2\n(13) - (2) = 11, left: 11, 7, 2\n(2) - (13) = -11, left: -11, 7, 2\n(7) + (-11) = -4, left: -4, 2\n(13) * (2) = 26, left: 26, 7, 2\n(13) / (2) = 13/2, left: 13/2, 7, 2\n(13) + (2) = 15, left: 15, 7, 2\n(7) + (15) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (7 + (13 + 2)))"}, {"input": "9 7 10 4\n", "output": "(7) - (9) = -2, left: -2, 10, 4\n(10) / (4) = 5/2, left: 5/2, -2\n(-2) - (5/2) = -9/2, left: -9/2\n(10) + (-2) = 8, left: 8, 4\n(10) * (-2) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (10 * (7 - 9)))"}, {"input": "9 7 10 4\n", "output": "(10) - (7) = 3, left: 3, 9, 4\n(9) * (4) = 36, left: 36, 3\n(3) / (36) = 1/12, left: 1/12\n(9) - (4) = 5, left: 5, 3\n(4) / (9) = 4/9, left: 4/9, 3\n(3) / (4/9) = 27/4, left: 27/4\n(3) - (9) = -6, left: -6, 4\n(4) * (-6) = -24, left: -24\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (10 - 7)))"}, {"input": "9 7 10 4\n", "output": "(7) + (4) = 11, left: 11, 9, 10\n(10) / (9) = 10/9, left: 10/9, 11\n(11) / (10/9) = 99/10, left: 99/10\n(4) - (7) = -3, left: -3, 9, 10\n(9) - (-3) = 12, left: 12, 10\n(12) - (10) = 2, left: 2\n(7) - (4) = 3, left: 3, 9, 10\n(10) * (4) = 40, left: 40, 9, 7\n(40) - (7) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: (((10 * 4) - 7) - 9)"}, {"input": "9 7 10 4\n", "output": "(7) - (9) = -2, left: -2, 10, 4\n(10) - (4) = 6, left: 6, -2\n(6) - (-2) = 8, left: 8\n(10) * (4) = 40, left: 40, -2\n(-2) - (40) = -42, left: -42\n(10) + (4) = 14, left: 14, -2\n(10) + (-2) = 8, left: 8, 4\n(4) - (8) = -4, left: -4\n(10) * (-2) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (10 * (7 - 9)))"}, {"input": "9 7 10 4\n", "output": "(7) - (4) = 3, left: 3, 9, 10\n(10) - (9) = 1, left: 1, 3\n(7) / (4) = 7/4, left: 7/4, 9, 10\n(4) - (7) = -3, left: -3, 9, 10\n(10) + (-3) = 7, left: 7, 9\n(7) + (4) = 11, left: 11, 9, 10\n(9) - (11) = -2, left: -2, 10\n(9) - (10) = -1, left: -1, 7, 4\n(7) + (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 + (9 - 10)))"}, {"input": "9 7 10 4\n", "output": "(9) * (7) = 63, left: 63, 10, 4\n(63) / (10) = 63/10, left: 63/10, 4\n(4) - (63/10) = -23/10, left: -23/10\n(4) - (10) = -6, left: -6, 63\n(4) - (63) = -59, left: -59, 10\n(-59) / (10) = -59/10, left: -59/10\n(4) / (63) = 4/63, left: 4/63, 10\n(9) + (7) = 16, left: 16, 10, 4\n(10) * (4) = 40, left: 40, 16\n(40) - (16) = 24, left: 24\nreach 24! expression: ((10 * 4) - (9 + 7))"}, {"input": "3 13 12 12\n", "output": "(13) - (12) = 1, left: 1, 3, 12\n(3) / (1) = 3, left: 3, 12\n(1) - (3) = -2, left: -2, 12\n(3) - (1) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (13 - 12)))"}, {"input": "3 13 12 12\n", "output": "(13) * (12) = 156, left: 156, 3, 12\n(12) / (13) = 12/13, left: 12/13, 3, 12\n(13) + (12) = 25, left: 25, 3, 12\n(12) - (13) = -1, left: -1, 3, 12\n(3) + (-1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 + (12 - 13)))"}, {"input": "3 13 12 12\n", "output": "(13) / (12) = 13/12, left: 13/12, 3, 12\n(3) / (12) = 1/4, left: 1/4, 13/12\n(13/12) * (1/4) = 13/48, left: 13/48\n(13) - (12) = 1, left: 1, 3, 12\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (13 - 12)))"}, {"input": "3 13 12 12\n", "output": "(3) + (12) = 15, left: 15, 13, 12\n(13) - (12) = 1, left: 1, 15\n(13) / (12) = 13/12, left: 13/12, 15\n(15) / (13) = 15/13, left: 15/13, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 + 12) - 13))"}, {"input": "3 13 12 12\n", "output": "(12) / (3) = 4, left: 4, 13, 12\n(13) - (12) = 1, left: 1, 4\n(3) + (12) = 15, left: 15, 13, 12\n(13) - (12) = 1, left: 1, 15\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 + 12) - 13))"}, {"input": "3 13 12 12\n", "output": "(13) / (12) = 13/12, left: 13/12, 3, 12\n(3) / (13/12) = 36/13, left: 36/13, 12\n(13/12) / (12) = 13/144, left: 13/144, 3\n(13/144) - (3) = -419/144, left: -419/144\n(13) - (12) = 1, left: 1, 3, 12\n(3) * (12) = 36, left: 36, 1\n(3) / (12) = 1/4, left: 1/4, 1\n(12) - (3) = 9, left: 9, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (13 - 12)))"}, {"input": "3 13 12 12\n", "output": "(3) / (12) = 1/4, left: 1/4, 13, 12\n(13) * (12) = 156, left: 156, 1/4\n(12) / (1/4) = 48, left: 48, 13\n(13) - (1/4) = 51/4, left: 51/4, 12\n(12) / (3) = 4, left: 4, 13, 12\n(13) - (12) = 1, left: 1, 4\n(13) / (4) = 13/4, left: 13/4, 12\n(3) + (12) = 15, left: 15, 13, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 + 12) - 13))"}, {"input": "3 13 12 12\n", "output": "(13) - (12) = 1, left: 1, 3, 12\n(3) / (1) = 3, left: 3, 12\n(12) * (3) = 36, left: 36\n(3) - (12) = -9, left: -9\n(12) / (3) = 4, left: 4\n(1) - (3) = -2, left: -2, 12\n(-2) - (12) = -14, left: -14\n(3) - (1) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (13 - 12)))"}, {"input": "3 13 12 12\n", "output": "(13) * (12) = 156, left: 156, 3, 12\n(12) * (156) = 1872, left: 1872, 3\n(12) / (13) = 12/13, left: 12/13, 3, 12\n(3) + (12) = 15, left: 15, 12/13\n(15) / (12/13) = 65/4, left: 65/4\n(13) + (12) = 25, left: 25, 3, 12\n(3) * (25) = 75, left: 75, 12\n(12) - (13) = -1, left: -1, 3, 12\n(3) + (-1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 + (12 - 13)))"}, {"input": "3 13 12 12\n", "output": "(3) + (12) = 15, left: 15, 13, 12\n(12) * (15) = 180, left: 180, 13\n(15) / (12) = 5/4, left: 5/4, 13\n(13) / (5/4) = 52/5, left: 52/5\n(13) - (12) = 1, left: 1, 15\n(13) + (12) = 25, left: 25, 15\n(15) / (25) = 3/5, left: 3/5\n(15) / (13) = 15/13, left: 15/13, 12\n(15) - (13) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 + 12) - 13))"}, {"input": "4 12 8 11\n", "output": "(4) - (11) = -7, left: -7, 12, 8\n(12) + (8) = 20, left: 20, -7\n(4) / (11) = 4/11, left: 4/11, 12, 8\n(4) * (11) = 44, left: 44, 12, 8\n(12) + (8) = 20, left: 20, 44\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (12 + 8))"}, {"input": "4 12 8 11\n", "output": "(8) / (4) = 2, left: 2, 12, 11\n(11) + (2) = 13, left: 13, 12\n(12) / (13) = 12/13, left: 12/13\n(11) - (8) = 3, left: 3, 4, 12\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (4 * (11 - 8)))"}, {"input": "4 12 8 11\n", "output": "(12) * (8) = 96, left: 96, 4, 11\n(8) - (12) = -4, left: -4, 4, 11\n(4) * (11) = 44, left: 44, -4\n(12) + (8) = 20, left: 20, 4, 11\n(4) * (11) = 44, left: 44, 20\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (12 + 8))"}, {"input": "4 12 8 11\n", "output": "(8) + (11) = 19, left: 19, 4, 12\n(8) / (11) = 8/11, left: 8/11, 4, 12\n(12) + (8/11) = 140/11, left: 140/11, 4\n(11) - (8) = 3, left: 3, 4, 12\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (4 * (11 - 8)))"}, {"input": "4 12 8 11\n", "output": "(8) / (11) = 8/11, left: 8/11, 4, 12\n(4) + (12) = 16, left: 16, 8/11\n(11) / (8) = 11/8, left: 11/8, 4, 12\n(11) - (8) = 3, left: 3, 4, 12\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (4 * (11 - 8)))"}, {"input": "4 12 8 11\n", "output": "(4) * (8) = 32, left: 32, 12, 11\n(4) - (8) = -4, left: -4, 12, 11\n(11) / (-4) = -11/4, left: -11/4, 12\n(12) - (11) = 1, left: 1, -4\n(8) / (4) = 2, left: 2, 12, 11\n(8) + (11) = 19, left: 19, 4, 12\n(12) / (4) = 3, left: 3, 19\n(11) - (8) = 3, left: 3, 4, 12\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (4 * (11 - 8)))"}, {"input": "4 12 8 11\n", "output": "(8) + (11) = 19, left: 19, 4, 12\n(4) / (12) = 1/3, left: 1/3, 19\n(19) + (1/3) = 58/3, left: 58/3\n(8) / (11) = 8/11, left: 8/11, 4, 12\n(12) / (4) = 3, left: 3, 8/11\n(8/11) / (12) = 2/33, left: 2/33, 4\n(11) - (8) = 3, left: 3, 4, 12\n(4) + (3) = 7, left: 7, 12\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (4 * (11 - 8)))"}, {"input": "4 12 8 11\n", "output": "(8) / (11) = 8/11, left: 8/11, 4, 12\n(4) / (8/11) = 11/2, left: 11/2, 12\n(12) * (11/2) = 66, left: 66\n(11) / (8) = 11/8, left: 11/8, 4, 12\n(4) * (12) = 48, left: 48, 11/8\n(11/8) / (12) = 11/96, left: 11/96, 4\n(12) * (11/8) = 33/2, left: 33/2, 4\n(11) - (8) = 3, left: 3, 4, 12\n(4) * (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (4 * (11 - 8)))"}, {"input": "4 12 8 11\n", "output": "(4) - (8) = -4, left: -4, 12, 11\n(8) / (4) = 2, left: 2, 12, 11\n(12) - (2) = 10, left: 10, 11\n(4) + (8) = 12, left: 12, 12, 11\n(8) - (12) = -4, left: -4, 4, 11\n(11) / (-4) = -11/4, left: -11/4, 4\n(12) + (8) = 20, left: 20, 4, 11\n(4) - (20) = -16, left: -16, 11\n(4) * (11) = 44, left: 44, 20\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (12 + 8))"}, {"input": "4 12 8 11\n", "output": "(4) - (11) = -7, left: -7, 12, 8\n(12) + (-7) = 5, left: 5, 8\n(8) / (5) = 8/5, left: 8/5\n(12) - (8) = 4, left: 4, -7\n(4) / (11) = 4/11, left: 4/11, 12, 8\n(8) - (12) = -4, left: -4, 4/11\n(8) - (4/11) = 84/11, left: 84/11, 12\n(4) * (11) = 44, left: 44, 12, 8\n(12) + (8) = 20, left: 20, 44\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (12 + 8))"}, {"input": "2 3 13 8\n", "output": "(3) / (13) = 3/13, left: 3/13, 2, 8\n(3/13) - (2) = -23/13, left: -23/13, 8\n(3) + (13) = 16, left: 16, 2, 8\n(8) / (16) = 1/2, left: 1/2, 2\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "2 3 13 8\n", "output": "(13) + (8) = 21, left: 21, 2, 3\n(13) / (8) = 13/8, left: 13/8, 2, 3\n(13) - (8) = 5, left: 5, 2, 3\n(3) - (2) = 1, left: 1, 5\n(2) * (8) = 16, left: 16, 3, 13\n(8) - (2) = 6, left: 6, 3, 13\n(6) - (13) = -7, left: -7, 3\n(3) + (13) = 16, left: 16, 2, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "2 3 13 8\n", "output": "(3) * (13) = 39, left: 39, 2, 8\n(3) - (13) = -10, left: -10, 2, 8\n(2) - (8) = -6, left: -6, -10\n(3) / (13) = 3/13, left: 3/13, 2, 8\n(3/13) / (2) = 3/26, left: 3/26, 8\n(2) + (8) = 10, left: 10, 3/13\n(13) - (3) = 10, left: 10, 2, 8\n(3) + (13) = 16, left: 16, 2, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "2 3 13 8\n", "output": "(3) * (13) = 39, left: 39, 2, 8\n(2) - (8) = -6, left: -6, 39\n(39) / (2) = 39/2, left: 39/2, 8\n(3) - (13) = -10, left: -10, 2, 8\n(13) / (3) = 13/3, left: 13/3, 2, 8\n(2) - (8) = -6, left: -6, 13/3\n(3) / (13) = 3/13, left: 3/13, 2, 8\n(3) + (13) = 16, left: 16, 2, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "2 3 13 8\n", "output": "(3) / (13) = 3/13, left: 3/13, 2, 8\n(2) * (3/13) = 6/13, left: 6/13, 8\n(8) / (2) = 4, left: 4, 3/13\n(3/13) - (8) = -101/13, left: -101/13, 2\n(2) - (-101/13) = 127/13, left: 127/13\n(3) + (13) = 16, left: 16, 2, 8\n(16) / (8) = 2, left: 2, 2\n(2) / (2) = 1, left: 1\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "2 3 13 8\n", "output": "(13) / (8) = 13/8, left: 13/8, 2, 3\n(13) - (8) = 5, left: 5, 2, 3\n(5) / (2) = 5/2, left: 5/2, 3\n(3) / (8) = 3/8, left: 3/8, 2, 13\n(3) - (8) = -5, left: -5, 2, 13\n(8) / (3) = 8/3, left: 8/3, 2, 13\n(2) + (8/3) = 14/3, left: 14/3, 13\n(3) + (13) = 16, left: 16, 2, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "8 8 1 6\n", "output": "(8) + (6) = 14, left: 14, 8, 1\n(8) - (14) = -6, left: -6, 1\n(8) + (14) = 22, left: 22, 1\n(1) / (22) = 1/22, left: 1/22\n(6) - (8) = -2, left: -2, 8, 1\n(-2) - (8) = -10, left: -10, 1\n(-2) / (8) = -1/4, left: -1/4, 1\n(-1/4) / (1) = -1/4, left: -1/4\n(1) - (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 - (6 - 8)))"}, {"input": "8 8 1 6\n", "output": "(8) / (1) = 8, left: 8, 8, 6\n(8) + (6) = 14, left: 14, 8\n(1) - (8) = -7, left: -7, 8, 6\n(8) * (6) = 48, left: 48, -7\n(8) * (1) = 8, left: 8, 8, 6\n(8) - (1) = 7, left: 7, 8, 6\n(6) * (7) = 42, left: 42, 8\n(8) + (1) = 9, left: 9, 8, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((8 + 1) - 6))"}, {"input": "8 8 1 6\n", "output": "(8) / (6) = 4/3, left: 4/3, 8, 1\n(8) - (1) = 7, left: 7, 4/3\n(8) * (4/3) = 32/3, left: 32/3, 1\n(4/3) - (8) = -20/3, left: -20/3, 1\n(1) + (-20/3) = -17/3, left: -17/3\n(4/3) / (8) = 1/6, left: 1/6, 1\n(1) + (1/6) = 7/6, left: 7/6\n(8) / (4/3) = 6, left: 6, 1\n(4/3) - (1) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((8 / 6) - 1))"}, {"input": "8 8 1 6\n", "output": "(6) - (1) = 5, left: 5, 8, 8\n(5) / (8) = 5/8, left: 5/8, 8\n(8) + (5/8) = 69/8, left: 69/8\n(8) - (5/8) = 59/8, left: 59/8\n(8) * (5/8) = 5, left: 5\n(8) * (5) = 40, left: 40, 8\n(40) / (8) = 5, left: 5\n(8) * (40) = 320, left: 320\n(8) - (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (8 - (6 - 1)))"}, {"input": "8 8 1 6\n", "output": "(6) - (1) = 5, left: 5, 8, 8\n(8) / (5) = 8/5, left: 8/5, 8\n(8) * (8/5) = 64/5, left: 64/5\n(8/5) / (8) = 1/5, left: 1/5\n(8) + (5) = 13, left: 13, 8\n(8) * (13) = 104, left: 104\n(8) * (5) = 40, left: 40, 8\n(8) * (40) = 320, left: 320\n(8) - (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (8 - (6 - 1)))"}, {"input": "8 8 1 6\n", "output": "(8) / (1) = 8, left: 8, 8, 6\n(1) - (8) = -7, left: -7, 8, 6\n(-7) - (8) = -15, left: -15, 6\n(-15) / (6) = -5/2, left: -5/2\n(8) * (1) = 8, left: 8, 8, 6\n(8) / (6) = 4/3, left: 4/3, 8\n(8) - (1) = 7, left: 7, 8, 6\n(6) / (8) = 3/4, left: 3/4, 7\n(8) * (6) = 48, left: 48, 7\n(1) / (8) = 1/8, left: 1/8, 8, 6\n(8) * (6) = 48, left: 48, 1/8\n(8) + (1) = 9, left: 9, 8, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((8 + 1) - 6))"}, {"input": "12 9 12 9\n", "output": "(12) - (9) = 3, left: 3, 12, 9\n(9) + (3) = 12, left: 12, 12\n(12) * (12) = 144, left: 144\n(12) - (12) = 0, left: 0\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (12 - 9)))"}, {"input": "12 9 12 9\n", "output": "(9) * (9) = 81, left: 81, 12, 12\n(12) + (12) = 24, left: 24, 81\n(81) - (12) = 69, left: 69, 12\n(9) - (9) = 0, left: 0, 12, 12\n(12) + (12) = 24, left: 24, 0\n(24) - (0) = 24, left: 24\nreach 24! expression: ((12 + 12) - (9 - 9))"}, {"input": "12 9 12 9\n", "output": "(12) / (9) = 4/3, left: 4/3, 12, 9\n(12) - (9) = 3, left: 3, 4/3\n(9) - (12) = -3, left: -3, 4/3\n(9) * (4/3) = 12, left: 12, 12\n(12) - (12) = 0, left: 0\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 * (12 / 9)))"}, {"input": "12 9 12 9\n", "output": "(12) + (9) = 21, left: 21, 9, 12\n(12) * (21) = 252, left: 252, 9\n(12) - (21) = -9, left: -9, 9\n(21) / (12) = 7/4, left: 7/4, 9\n(12) + (21) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((12 + (12 + 9)) - 9)"}, {"input": "12 9 12 9\n", "output": "(9) / (12) = 3/4, left: 3/4, 12, 9\n(3/4) - (9) = -33/4, left: -33/4, 12\n(12) / (-33/4) = -16/11, left: -16/11\n(9) / (3/4) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 / (9 / 12)))"}, {"input": "12 9 12 9\n", "output": "(12) - (9) = 3, left: 3, 12, 9\n(9) + (3) = 12, left: 12, 12\n(12) * (12) = 144, left: 144\n(12) - (12) = 0, left: 0\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (12 - 9)))"}, {"input": "12 9 12 9\n", "output": "(9) / (12) = 3/4, left: 3/4, 12, 9\n(3/4) - (9) = -33/4, left: -33/4, 12\n(-33/4) - (12) = -81/4, left: -81/4\n(12) + (-33/4) = 15/4, left: 15/4\n(12) * (-33/4) = -99, left: -99\n(-33/4) / (12) = -11/16, left: -11/16\n(12) - (-33/4) = 81/4, left: 81/4\n(9) / (3/4) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 / (9 / 12)))"}, {"input": "12 9 12 9\n", "output": "(9) + (9) = 18, left: 18, 12, 12\n(12) / (12) = 1, left: 1, 18\n(18) + (1) = 19, left: 19\n(12) * (12) = 144, left: 144, 18\n(18) / (12) = 3/2, left: 3/2, 12\n(12) - (18) = -6, left: -6, 12\n(12) * (-6) = -72, left: -72\n(9) - (9) = 0, left: 0, 12, 12\n(12) + (12) = 24, left: 24, 0\n(24) - (0) = 24, left: 24\nreach 24! expression: ((12 + 12) - (9 - 9))"}, {"input": "12 9 12 9\n", "output": "(12) / (9) = 4/3, left: 4/3, 12, 9\n(12) + (9) = 21, left: 21, 4/3\n(9) / (12) = 3/4, left: 3/4, 4/3\n(4/3) + (3/4) = 25/12, left: 25/12\n(4/3) - (12) = -32/3, left: -32/3, 9\n(4/3) / (12) = 1/9, left: 1/9, 9\n(9) / (4/3) = 27/4, left: 27/4, 12\n(12) * (27/4) = 81, left: 81\n(9) * (4/3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 * (12 / 9)))"}, {"input": "12 9 12 9\n", "output": "(12) + (9) = 21, left: 21, 9, 12\n(12) * (21) = 252, left: 252, 9\n(12) - (21) = -9, left: -9, 9\n(9) * (-9) = -81, left: -81\n(9) - (-9) = 18, left: 18\n(9) / (-9) = -1, left: -1\n(21) / (12) = 7/4, left: 7/4, 9\n(9) + (7/4) = 43/4, left: 43/4\n(12) + (21) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((12 + (12 + 9)) - 9)"}, {"input": "12 9 12 9\n", "output": "(12) - (9) = 3, left: 3, 12, 9\n(9) + (3) = 12, left: 12, 12\n(12) * (12) = 144, left: 144\n(12) - (12) = 0, left: 0\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (12 - 9)))"}, {"input": "12 9 12 9\n", "output": "(12) - (9) = 3, left: 3, 12, 9\n(9) + (3) = 12, left: 12, 12\n(12) * (12) = 144, left: 144\n(12) - (12) = 0, left: 0\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (12 - 9)))"}, {"input": "5 6 6 8\n", "output": "(6) / (6) = 1, left: 1, 5, 8\n(6) - (6) = 0, left: 0, 5, 8\n(5) * (0) = 0, left: 0, 8\n(6) / (6) = 1, left: 1, 5, 8\n(5) / (8) = 5/8, left: 5/8, 1\n(1) * (5/8) = 5/8, left: 5/8\n(5) * (6) = 30, left: 30, 6, 8\n(8) - (5) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(5) * (8) = 40, left: 40, 6, 6\n(40) - (6) = 34, left: 34, 6\n(6) * (34) = 204, left: 204\n(6) - (40) = -34, left: -34, 6\n(6) - (40) = -34, left: -34, 6\n(40) - (6) = 34, left: 34, 6\n(6) / (6) = 1, left: 1, 40\n(8) - (5) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(5) - (6) = -1, left: -1, 6, 8\n(6) - (5) = 1, left: 1, 6, 8\n(6) - (8) = -2, left: -2, 1\n(6) / (8) = 3/4, left: 3/4, 5, 6\n(8) - (6) = 2, left: 2, 5, 6\n(8) / (5) = 8/5, left: 8/5, 6, 6\n(6) * (8/5) = 48/5, left: 48/5, 6\n(8) - (5) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(5) / (6) = 5/6, left: 5/6, 6, 8\n(8) / (5/6) = 48/5, left: 48/5, 6\n(5) + (6) = 11, left: 11, 6, 8\n(8) + (11) = 19, left: 19, 6\n(5) / (8) = 5/8, left: 5/8, 6, 6\n(6) - (5/8) = 43/8, left: 43/8, 6\n(6) / (6) = 1, left: 1, 5/8\n(8) - (5) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(6) - (6) = 0, left: 0, 5, 8\n(6) / (6) = 1, left: 1, 5, 8\n(8) * (1) = 8, left: 8, 5\n(8) - (6) = 2, left: 2, 5, 6\n(6) - (5) = 1, left: 1, 2\n(5) + (8) = 13, left: 13, 6, 6\n(6) * (13) = 78, left: 78, 6\n(5) - (8) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (5 - 8)))"}, {"input": "5 6 6 8\n", "output": "(6) / (5) = 6/5, left: 6/5, 6, 8\n(6) * (6/5) = 36/5, left: 36/5, 8\n(6) - (5) = 1, left: 1, 6, 8\n(6) / (1) = 6, left: 6, 8\n(5) * (6) = 30, left: 30, 6, 8\n(6) - (6) = 0, left: 0, 5, 8\n(8) - (5) = 3, left: 3, 0\n(6) + (6) = 12, left: 12, 5, 8\n(5) - (12) = -7, left: -7, 8\n(6) - (8) = -2, left: -2, 5, 6\n(8) / (5) = 8/5, left: 8/5, 6, 6\n(5) - (8) = -3, left: -3, 6, 6\n(6) * (-3) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (6 * (5 - 8)))"}, {"input": "5 6 6 8\n", "output": "(5) - (6) = -1, left: -1, 6, 8\n(6) / (8) = 3/4, left: 3/4, -1\n(6) / (5) = 6/5, left: 6/5, 6, 8\n(5) + (6) = 11, left: 11, 6, 8\n(5) * (6) = 30, left: 30, 6, 8\n(6) + (8) = 14, left: 14, 30\n(30) - (14) = 16, left: 16\n(8) * (30) = 240, left: 240, 6\n(5) / (8) = 5/8, left: 5/8, 6, 6\n(5/8) - (6) = -43/8, left: -43/8, 6\n(5) + (8) = 13, left: 13, 6, 6\n(8) - (5) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(6) * (6) = 36, left: 36, 5, 8\n(5) * (8) = 40, left: 40, 36\n(6) + (6) = 12, left: 12, 5, 8\n(6) - (6) = 0, left: 0, 5, 8\n(5) * (0) = 0, left: 0, 8\n(8) * (0) = 0, left: 0, 5\n(6) / (6) = 1, left: 1, 5, 8\n(6) - (5) = 1, left: 1, 6, 8\n(6) / (5) = 6/5, left: 6/5, 6, 8\n(8) - (6/5) = 34/5, left: 34/5, 6\n(8) - (5) = 3, left: 3, 6, 6\n(6) + (6) = 12, left: 12, 3\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(6) / (5) = 6/5, left: 6/5, 6, 8\n(5) + (6) = 11, left: 11, 6, 8\n(11) / (8) = 11/8, left: 11/8, 6\n(5) - (6) = -1, left: -1, 6, 8\n(-1) - (8) = -9, left: -9, 6\n(5) * (6) = 30, left: 30, 6, 8\n(6) / (8) = 3/4, left: 3/4, 5, 6\n(6) - (3/4) = 21/4, left: 21/4, 5\n(6) * (8) = 48, left: 48, 5, 6\n(5) * (8) = 40, left: 40, 6, 6\n(8) / (5) = 8/5, left: 8/5, 6, 6\n(8) - (5) = 3, left: 3, 6, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "8 6 10 4\n", "output": "(6) / (4) = 3/2, left: 3/2, 8, 10\n(8) + (10) = 18, left: 18, 3/2\n(4) / (6) = 2/3, left: 2/3, 8, 10\n(6) + (10) = 16, left: 16, 8, 4\n(10) / (6) = 5/3, left: 5/3, 8, 4\n(4) * (5/3) = 20/3, left: 20/3, 8\n(10) - (6) = 4, left: 4, 8, 4\n(4) - (8) = -4, left: -4, 4\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "8 6 10 4\n", "output": "(4) - (10) = -6, left: -6, 8, 6\n(-6) / (6) = -1, left: -1, 8\n(4) / (10) = 2/5, left: 2/5, 8, 6\n(8) * (2/5) = 16/5, left: 16/5, 6\n(2/5) / (8) = 1/20, left: 1/20, 6\n(10) - (4) = 6, left: 6, 8, 6\n(10) / (6) = 5/3, left: 5/3, 8, 4\n(6) - (10) = -4, left: -4, 8, 4\n(4) * (-4) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (4 * (6 - 10)))"}, {"input": "8 6 10 4\n", "output": "(6) + (4) = 10, left: 10, 8, 10\n(6) * (4) = 24, left: 24, 8, 10\n(4) - (6) = -2, left: -2, 8, 10\n(6) - (4) = 2, left: 2, 8, 10\n(10) / (4) = 5/2, left: 5/2, 8, 6\n(6) * (10) = 60, left: 60, 8, 4\n(4) + (60) = 64, left: 64, 8\n(10) - (6) = 4, left: 4, 8, 4\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "8 6 10 4\n", "output": "(6) / (10) = 3/5, left: 3/5, 8, 4\n(8) / (3/5) = 40/3, left: 40/3, 4\n(4) * (3/5) = 12/5, left: 12/5, 8\n(10) - (6) = 4, left: 4, 8, 4\n(8) * (4) = 32, left: 32, 4\n(4) - (32) = -28, left: -28\n(8) - (4) = 4, left: 4, 4\n(4) / (4) = 1, left: 1, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "8 6 10 4\n", "output": "(4) - (8) = -4, left: -4, 6, 10\n(-4) - (10) = -14, left: -14, 6\n(8) + (4) = 12, left: 12, 6, 10\n(10) - (6) = 4, left: 4, 12\n(4) / (10) = 2/5, left: 2/5, 8, 6\n(6) - (2/5) = 28/5, left: 28/5, 8\n(6) / (4) = 3/2, left: 3/2, 8, 10\n(10) - (6) = 4, left: 4, 8, 4\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "8 6 10 4\n", "output": "(6) + (4) = 10, left: 10, 8, 10\n(6) - (4) = 2, left: 2, 8, 10\n(10) - (2) = 8, left: 8, 8\n(10) / (4) = 5/2, left: 5/2, 8, 6\n(10) + (4) = 14, left: 14, 8, 6\n(8) - (14) = -6, left: -6, 6\n(8) * (14) = 112, left: 112, 6\n(10) - (4) = 6, left: 6, 8, 6\n(8) + (4) = 12, left: 12, 6, 10\n(4) / (8) = 1/2, left: 1/2, 6, 10\n(6) * (10) = 60, left: 60, 8, 4\n(10) - (6) = 4, left: 4, 8, 4\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "8 6 10 4\n", "output": "(8) + (4) = 12, left: 12, 6, 10\n(6) / (10) = 3/5, left: 3/5, 12\n(4) - (10) = -6, left: -6, 8, 6\n(6) + (-6) = 0, left: 0, 8\n(-6) / (8) = -3/4, left: -3/4, 6\n(10) * (4) = 40, left: 40, 8, 6\n(6) * (4) = 24, left: 24, 8, 10\n(6) - (4) = 2, left: 2, 8, 10\n(8) - (10) = -2, left: -2, 2\n(2) + (-2) = 0, left: 0\n(6) * (10) = 60, left: 60, 8, 4\n(10) - (6) = 4, left: 4, 8, 4\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "8 6 10 4\n", "output": "(10) * (4) = 40, left: 40, 8, 6\n(6) - (40) = -34, left: -34, 8\n(4) - (10) = -6, left: -6, 8, 6\n(4) / (10) = 2/5, left: 2/5, 8, 6\n(10) - (4) = 6, left: 6, 8, 6\n(8) / (6) = 4/3, left: 4/3, 6\n(6) / (6) = 1, left: 1, 8\n(6) + (6) = 12, left: 12, 8\n(10) + (4) = 14, left: 14, 8, 6\n(10) / (4) = 5/2, left: 5/2, 8, 6\n(5/2) - (8) = -11/2, left: -11/2, 6\n(6) - (10) = -4, left: -4, 8, 4\n(4) * (-4) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (4 * (6 - 10)))"}, {"input": "6 4 8 2\n", "output": "(4) - (6) = -2, left: -2, 8, 2\n(8) - (2) = 6, left: 6, -2\n(-2) - (6) = -8, left: -8\n(-2) + (6) = 4, left: 4\n(8) * (2) = 16, left: 16, -2\n(2) - (8) = -6, left: -6, -2\n(8) * (-2) = -16, left: -16, 2\n(4) / (6) = 2/3, left: 2/3, 8, 2\n(8) * (2) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((8 * 2) / (4 / 6))"}, {"input": "6 4 8 2\n", "output": "(4) - (2) = 2, left: 2, 6, 8\n(8) - (2) = 6, left: 6, 6\n(6) - (6) = 0, left: 0\n(2) - (8) = -6, left: -6, 6\n(6) * (-6) = -36, left: -36\n(8) * (2) = 16, left: 16, 6\n(6) + (16) = 22, left: 22\n(8) + (2) = 10, left: 10, 6\n(2) / (8) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((4 - 2) / 8))"}, {"input": "6 4 8 2\n", "output": "(6) * (4) = 24, left: 24, 8, 2\n(8) / (2) = 4, left: 4, 24\n(8) + (2) = 10, left: 10, 24\n(8) * (2) = 16, left: 16, 24\n(24) - (8) = 16, left: 16, 2\n(8) - (24) = -16, left: -16, 2\n(24) / (2) = 12, left: 12, 8\n(6) / (4) = 3/2, left: 3/2, 8, 2\n(8) * (2) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((6 / 4) * (8 * 2))"}, {"input": "6 4 8 2\n", "output": "(8) / (2) = 4, left: 4, 6, 4\n(4) - (4) = 0, left: 0, 6\n(6) + (0) = 6, left: 6\n(4) - (4) = 0, left: 0, 6\n(4) + (4) = 8, left: 8, 6\n(8) - (6) = 2, left: 2\n(8) * (2) = 16, left: 16, 6, 4\n(16) / (4) = 4, left: 4, 6\n(6) - (4) = 2, left: 2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((8 * 2) / 4))"}, {"input": "6 4 8 2\n", "output": "(4) + (2) = 6, left: 6, 6, 8\n(2) - (4) = -2, left: -2, 6, 8\n(-2) - (8) = -10, left: -10, 6\n(8) * (-2) = -16, left: -16, 6\n(6) + (-16) = -10, left: -10\n(-2) / (6) = -1/3, left: -1/3, 8\n(4) - (2) = 2, left: 2, 6, 8\n(6) - (2) = 4, left: 4, 8\n(6) / (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 / (4 - 2)))"}, {"input": "6 4 8 2\n", "output": "(8) / (2) = 4, left: 4, 6, 4\n(4) / (4) = 1, left: 1, 6\n(4) + (4) = 8, left: 8, 6\n(6) - (4) = 2, left: 2, 4\n(6) + (4) = 10, left: 10, 4\n(10) / (4) = 5/2, left: 5/2\n(4) / (6) = 2/3, left: 2/3, 4\n(4) - (6) = -2, left: -2, 4\n(-2) / (4) = -1/2, left: -1/2\n(6) * (4) = 24, left: 24, 4\n(6) * (4) = 24, left: 24, 4\n(8) * (2) = 16, left: 16, 6, 4\n(16) / (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((8 * 2) / 4))"}, {"input": "6 4 8 2\n", "output": "(4) + (2) = 6, left: 6, 6, 8\n(6) / (8) = 3/4, left: 3/4, 6\n(6) * (6) = 36, left: 36, 8\n(6) / (6) = 1, left: 1, 8\n(8) / (6) = 4/3, left: 4/3, 6\n(2) - (4) = -2, left: -2, 6, 8\n(-2) - (8) = -10, left: -10, 6\n(8) - (-2) = 10, left: 10, 6\n(8) / (6) = 4/3, left: 4/3, -2\n(6) / (8) = 3/4, left: 3/4, -2\n(4) - (2) = 2, left: 2, 6, 8\n(6) + (2) = 8, left: 8, 8\n(6) / (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 / (4 - 2)))"}, {"input": "5 2 2 12\n", "output": "(2) / (12) = 1/6, left: 1/6, 5, 2\n(1/6) - (5) = -29/6, left: -29/6, 2\n(1/6) / (2) = 1/12, left: 1/12, 5\n(2) + (12) = 14, left: 14, 5, 2\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((2 + 12) + (5 * 2))"}, {"input": "5 2 2 12\n", "output": "(2) / (5) = 2/5, left: 2/5, 2, 12\n(2/5) - (2) = -8/5, left: -8/5, 12\n(12) * (-8/5) = -96/5, left: -96/5\n(5) * (2) = 10, left: 10, 2, 12\n(2) + (10) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 + (5 * 2)))"}, {"input": "5 2 2 12\n", "output": "(2) * (2) = 4, left: 4, 5, 12\n(2) + (2) = 4, left: 4, 5, 12\n(5) / (4) = 5/4, left: 5/4, 12\n(2) - (2) = 0, left: 0, 5, 12\n(2) / (2) = 1, left: 1, 5, 12\n(2) - (5) = -3, left: -3, 2, 12\n(-3) / (12) = -1/4, left: -1/4, 2\n(5) / (2) = 5/2, left: 5/2, 2, 12\n(5/2) - (2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((5 / 2) - 2))"}, {"input": "5 2 2 12\n", "output": "(2) / (12) = 1/6, left: 1/6, 5, 2\n(5) + (1/6) = 31/6, left: 31/6, 2\n(5) - (1/6) = 29/6, left: 29/6, 2\n(2) / (29/6) = 12/29, left: 12/29\n(1/6) - (5) = -29/6, left: -29/6, 2\n(2) + (1/6) = 13/6, left: 13/6, 5\n(13/6) - (5) = -17/6, left: -17/6\n(2) + (12) = 14, left: 14, 5, 2\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((2 + 12) + (5 * 2))"}, {"input": "5 2 2 12\n", "output": "(2) - (5) = -3, left: -3, 2, 12\n(12) / (-3) = -4, left: -4, 2\n(2) - (-4) = 6, left: 6\n(2) / (5) = 2/5, left: 2/5, 2, 12\n(12) / (2/5) = 30, left: 30, 2\n(2) - (30) = -28, left: -28\n(2/5) - (12) = -58/5, left: -58/5, 2\n(5) * (2) = 10, left: 10, 2, 12\n(2) + (10) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 + (5 * 2)))"}, {"input": "5 2 2 12\n", "output": "(5) - (2) = 3, left: 3, 2, 12\n(3) - (2) = 1, left: 1, 12\n(5) + (2) = 7, left: 7, 2, 12\n(2) - (7) = -5, left: -5, 12\n(2) / (5) = 2/5, left: 2/5, 2, 12\n(2) / (2/5) = 5, left: 5, 12\n(12) * (5) = 60, left: 60\n(5) / (2) = 5/2, left: 5/2, 2, 12\n(5/2) - (2) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((5 / 2) - 2))"}, {"input": "5 2 2 12\n", "output": "(2) * (12) = 24, left: 24, 5, 2\n(2) * (24) = 48, left: 48, 5\n(24) / (2) = 12, left: 12, 5\n(24) / (5) = 24/5, left: 24/5, 2\n(2) / (24/5) = 5/12, left: 5/12\n(2) + (12) = 14, left: 14, 5, 2\n(5) - (2) = 3, left: 3, 14\n(14) + (3) = 17, left: 17\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((2 + 12) + (5 * 2))"}, {"input": "13 2 2 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 2, 13\n(2/13) / (13) = 2/169, left: 2/169, 2\n(2) / (13) = 2/13, left: 2/13, 2/13\n(2/13) * (2/13) = 4/169, left: 4/169\n(2) - (2/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "13 2 2 13\n", "output": "(13) - (13) = 0, left: 0, 2, 2\n(0) / (2) = 0, left: 0, 2\n(13) / (13) = 1, left: 1, 2, 2\n(2) / (13) = 2/13, left: 2/13, 13, 2\n(2) - (2/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "13 2 2 13\n", "output": "(13) / (2) = 13/2, left: 13/2, 13, 2\n(13) / (13/2) = 2, left: 2, 2\n(13) * (2) = 26, left: 26, 13/2\n(2) * (13/2) = 13, left: 13, 13\n(13) - (2) = 11, left: 11, 13, 2\n(13) * (11) = 143, left: 143, 2\n(2) + (13) = 15, left: 15, 13, 2\n(2) / (13) = 2/13, left: 2/13, 13, 2\n(2) - (2/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "13 2 2 13\n", "output": "(13) + (13) = 26, left: 26, 2, 2\n(2) + (26) = 28, left: 28, 2\n(2) * (13) = 26, left: 26, 13, 2\n(2) - (13) = -11, left: -11, 26\n(13) / (2) = 13/2, left: 13/2, 13, 2\n(2) - (13) = -11, left: -11, 13/2\n(13) - (2) = 11, left: 11, 13, 2\n(2) / (13) = 2/13, left: 2/13, 13, 2\n(2) - (2/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "13 2 2 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 2, 13\n(13) - (2/13) = 167/13, left: 167/13, 2\n(2/13) - (13) = -167/13, left: -167/13, 2\n(13) / (2) = 13/2, left: 13/2, 2/13\n(2) / (13) = 2/13, left: 2/13, 2/13\n(13) - (2) = 11, left: 11, 2/13\n(2) - (13) = -11, left: -11, 2/13\n(2) + (13) = 15, left: 15, 2/13\n(2) - (2/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "13 2 2 13\n", "output": "(2) / (2) = 1, left: 1, 13, 13\n(1) / (13) = 1/13, left: 1/13, 13\n(2) + (2) = 4, left: 4, 13, 13\n(13) + (4) = 17, left: 17, 13\n(13) / (2) = 13/2, left: 13/2, 2, 13\n(13) + (2) = 15, left: 15, 2, 13\n(2) + (13) = 15, left: 15, 15\n(2) / (13) = 2/13, left: 2/13, 2, 13\n(2) - (2/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "13 2 2 13\n", "output": "(2) * (13) = 26, left: 26, 13, 2\n(13) - (2) = 11, left: 11, 13, 2\n(13) / (2) = 13/2, left: 13/2, 13, 2\n(2) - (13) = -11, left: -11, 13/2\n(2) + (13) = 15, left: 15, 13, 2\n(13) - (2) = 11, left: 11, 15\n(2) - (13) = -11, left: -11, 13, 2\n(2) / (13) = 2/13, left: 2/13, 13, 2\n(2) - (2/13) = 24/13, left: 24/13, 13\n(13) * (24/13) = 24, left: 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "1 12 6 7\n", "output": "(6) - (1) = 5, left: 5, 12, 7\n(12) / (7) = 12/7, left: 12/7, 5\n(12/7) - (5) = -23/7, left: -23/7\n(7) - (12) = -5, left: -5, 5\n(12) + (7) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((6 - 1) + (12 + 7))"}, {"input": "1 12 6 7\n", "output": "(6) - (1) = 5, left: 5, 12, 7\n(12) / (7) = 12/7, left: 12/7, 5\n(7) - (12) = -5, left: -5, 5\n(-5) / (5) = -1, left: -1\n(12) - (7) = 5, left: 5, 5\n(5) * (5) = 25, left: 25\n(7) / (12) = 7/12, left: 7/12, 5\n(7/12) - (5) = -53/12, left: -53/12\n(12) + (7) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((6 - 1) + (12 + 7))"}, {"input": "1 12 6 7\n", "output": "(1) * (6) = 6, left: 6, 12, 7\n(12) * (6) = 72, left: 72, 7\n(6) - (12) = -6, left: -6, 7\n(6) / (12) = 1/2, left: 1/2, 7\n(12) - (6) = 6, left: 6, 7\n(6) / (7) = 6/7, left: 6/7, 12\n(7) - (6) = 1, left: 1, 12\n(6) - (1) = 5, left: 5, 12, 7\n(7) - (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (7 - (6 - 1)))"}, {"input": "1 12 6 7\n", "output": "(1) * (6) = 6, left: 6, 12, 7\n(7) / (6) = 7/6, left: 7/6, 12\n(7) - (6) = 1, left: 1, 12\n(12) + (1) = 13, left: 13\n(7) - (12) = -5, left: -5, 6\n(6) / (12) = 1/2, left: 1/2, 7\n(12) - (6) = 6, left: 6, 7\n(1) - (6) = -5, left: -5, 12, 7\n(7) + (-5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (7 + (1 - 6)))"}, {"input": "1 12 6 7\n", "output": "(12) / (1) = 12, left: 12, 6, 7\n(6) / (12) = 1/2, left: 1/2, 7\n(7) - (1/2) = 13/2, left: 13/2\n(1) / (12) = 1/12, left: 1/12, 6, 7\n(6) + (1/12) = 73/12, left: 73/12, 7\n(1) + (12) = 13, left: 13, 6, 7\n(7) - (6) = 1, left: 1, 13\n(12) - (1) = 11, left: 11, 6, 7\n(7) + (11) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (7 + (12 - 1)))"}, {"input": "1 12 6 7\n", "output": "(1) * (12) = 12, left: 12, 6, 7\n(6) * (12) = 72, left: 72, 7\n(6) - (7) = -1, left: -1, 12\n(1) / (12) = 1/12, left: 1/12, 6, 7\n(6) / (7) = 6/7, left: 6/7, 1/12\n(1/12) - (7) = -83/12, left: -83/12, 6\n(6) + (1/12) = 73/12, left: 73/12, 7\n(1) - (12) = -11, left: -11, 6, 7\n(6) - (-11) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (6 - (1 - 12)))"}, {"input": "2 9 11 6\n", "output": "(9) + (6) = 15, left: 15, 2, 11\n(11) + (15) = 26, left: 26, 2\n(2) / (26) = 1/13, left: 1/13\n(26) / (2) = 13, left: 13\n(2) * (26) = 52, left: 52\n(26) - (2) = 24, left: 24\nreach 24! expression: ((11 + (9 + 6)) - 2)"}, {"input": "2 9 11 6\n", "output": "(2) + (9) = 11, left: 11, 11, 6\n(6) - (11) = -5, left: -5, 11\n(2) / (9) = 2/9, left: 2/9, 11, 6\n(6) - (11) = -5, left: -5, 2/9\n(2/9) / (-5) = -2/45, left: -2/45\n(2) * (9) = 18, left: 18, 11, 6\n(6) / (11) = 6/11, left: 6/11, 18\n(9) - (2) = 7, left: 7, 11, 6\n(6) + (7) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (6 + (9 - 2)))"}, {"input": "2 9 11 6\n", "output": "(9) / (2) = 9/2, left: 9/2, 11, 6\n(6) - (11) = -5, left: -5, 9/2\n(11) * (6) = 66, left: 66, 9/2\n(6) / (11) = 6/11, left: 6/11, 9/2\n(11) / (9/2) = 22/9, left: 22/9, 6\n(9/2) - (11) = -13/2, left: -13/2, 6\n(9/2) - (6) = -3/2, left: -3/2, 11\n(2) - (9) = -7, left: -7, 11, 6\n(11) - (-7) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (11 - (2 - 9)))"}, {"input": "2 9 11 6\n", "output": "(11) - (9) = 2, left: 2, 2, 6\n(2) / (2) = 1, left: 1, 6\n(1) - (6) = -5, left: -5\n(6) / (1) = 6, left: 6\n(1) / (6) = 1/6, left: 1/6\n(6) + (1) = 7, left: 7\n(6) * (1) = 6, left: 6\n(6) - (1) = 5, left: 5\n(2) * (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 * (11 - 9)))"}, {"input": "2 9 11 6\n", "output": "(9) + (6) = 15, left: 15, 2, 11\n(11) + (15) = 26, left: 26, 2\n(2) / (26) = 1/13, left: 1/13\n(26) / (2) = 13, left: 13\n(2) * (26) = 52, left: 52\n(26) - (2) = 24, left: 24\nreach 24! expression: ((11 + (9 + 6)) - 2)"}, {"input": "2 9 11 6\n", "output": "(2) * (11) = 22, left: 22, 9, 6\n(9) / (6) = 3/2, left: 3/2, 22\n(22) - (3/2) = 41/2, left: 41/2\n(9) / (22) = 9/22, left: 9/22, 6\n(22) / (9) = 22/9, left: 22/9, 6\n(6) / (22) = 3/11, left: 3/11, 9\n(22) / (6) = 11/3, left: 11/3, 9\n(2) - (11) = -9, left: -9, 9, 6\n(6) - (-9) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (6 - (2 - 11)))"}, {"input": "2 9 11 6\n", "output": "(11) - (9) = 2, left: 2, 2, 6\n(2) / (2) = 1, left: 1, 6\n(1) - (6) = -5, left: -5\n(6) / (1) = 6, left: 6\n(1) / (6) = 1/6, left: 1/6\n(6) + (1) = 7, left: 7\n(6) * (1) = 6, left: 6\n(6) - (1) = 5, left: 5\n(2) * (2) = 4, left: 4, 6\n(4) - (6) = -2, left: -2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 * (11 - 9)))"}, {"input": "2 9 11 6\n", "output": "(9) + (6) = 15, left: 15, 2, 11\n(11) + (15) = 26, left: 26, 2\n(2) / (26) = 1/13, left: 1/13\n(26) / (2) = 13, left: 13\n(2) * (26) = 52, left: 52\n(26) - (2) = 24, left: 24\nreach 24! expression: ((11 + (9 + 6)) - 2)"}, {"input": "2 9 11 6\n", "output": "(11) - (9) = 2, left: 2, 2, 6\n(2) / (2) = 1, left: 1, 6\n(1) - (6) = -5, left: -5\n(6) / (1) = 6, left: 6\n(1) / (6) = 1/6, left: 1/6\n(6) + (1) = 7, left: 7\n(6) * (1) = 6, left: 6\n(6) - (1) = 5, left: 5\n(2) * (2) = 4, left: 4, 6\n(4) - (6) = -2, left: -2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 * (11 - 9)))"}, {"input": "2 9 11 6\n", "output": "(9) + (6) = 15, left: 15, 2, 11\n(11) + (15) = 26, left: 26, 2\n(2) / (26) = 1/13, left: 1/13\n(26) / (2) = 13, left: 13\n(2) * (26) = 52, left: 52\n(26) - (2) = 24, left: 24\nreach 24! expression: ((11 + (9 + 6)) - 2)"}, {"input": "8 4 1 4\n", "output": "(4) * (4) = 16, left: 16, 8, 1\n(1) / (16) = 1/16, left: 1/16, 8\n(8) * (1/16) = 1/2, left: 1/2\n(8) - (1/16) = 127/16, left: 127/16\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((4 * 4) / 1))"}, {"input": "8 4 1 4\n", "output": "(8) * (4) = 32, left: 32, 1, 4\n(4) / (8) = 1/2, left: 1/2, 1, 4\n(1/2) / (4) = 1/8, left: 1/8, 1\n(1) / (1/8) = 8, left: 8\n(8) + (4) = 12, left: 12, 1, 4\n(1) / (4) = 1/4, left: 1/4, 12\n(1) / (12) = 1/12, left: 1/12, 4\n(1) / (4) = 1/4, left: 1/4, 8, 4\n(4) / (1/4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 / (1 / 4)))"}, {"input": "8 4 1 4\n", "output": "(4) * (4) = 16, left: 16, 8, 1\n(1) / (16) = 1/16, left: 1/16, 8\n(8) / (1/16) = 128, left: 128\n(8) + (1/16) = 129/16, left: 129/16\n(1/16) / (8) = 1/128, left: 1/128\n(8) * (1/16) = 1/2, left: 1/2\n(1/16) - (8) = -127/16, left: -127/16\n(8) - (1/16) = 127/16, left: 127/16\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((4 * 4) / 1))"}, {"input": "8 4 1 4\n", "output": "(4) / (4) = 1, left: 1, 8, 1\n(1) * (1) = 1, left: 1, 8\n(8) / (1) = 8, left: 8, 1\n(1) - (8) = -7, left: -7, 1\n(4) - (4) = 0, left: 0, 8, 1\n(1) + (0) = 1, left: 1, 8\n(1) / (8) = 1/8, left: 1/8\n(4) * (4) = 16, left: 16, 8, 1\n(8) + (16) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (8 + (4 * 4)))"}, {"input": "8 4 1 4\n", "output": "(4) - (8) = -4, left: -4, 4, 1\n(8) + (4) = 12, left: 12, 1, 4\n(4) / (8) = 1/2, left: 1/2, 1, 4\n(4) / (4) = 1, left: 1, 8, 1\n(4) - (4) = 0, left: 0, 8, 1\n(8) - (0) = 8, left: 8, 1\n(4) - (4) = 0, left: 0, 8, 1\n(4) * (4) = 16, left: 16, 8, 1\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((4 * 4) / 1))"}, {"input": "8 4 1 4\n", "output": "(4) * (4) = 16, left: 16, 8, 1\n(1) / (16) = 1/16, left: 1/16, 8\n(8) / (1/16) = 128, left: 128\n(8) + (1/16) = 129/16, left: 129/16\n(1/16) / (8) = 1/128, left: 1/128\n(8) * (1/16) = 1/2, left: 1/2\n(1/16) - (8) = -127/16, left: -127/16\n(8) - (1/16) = 127/16, left: 127/16\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((4 * 4) / 1))"}, {"input": "8 4 1 4\n", "output": "(4) / (4) = 1, left: 1, 8, 1\n(1) / (1) = 1, left: 1, 8\n(1) / (8) = 1/8, left: 1/8, 1\n(1) + (1/8) = 9/8, left: 9/8\n(4) - (4) = 0, left: 0, 8, 1\n(1) * (0) = 0, left: 0, 8\n(8) + (0) = 8, left: 8\n(0) / (1) = 0, left: 0, 8\n(1) - (8) = -7, left: -7, 0\n(4) / (4) = 1, left: 1, 8, 1\n(8) - (1) = 7, left: 7, 1\n(4) * (4) = 16, left: 16, 8, 1\n(8) + (16) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (8 + (4 * 4)))"}, {"input": "8 4 1 4\n", "output": "(8) + (4) = 12, left: 12, 4, 1\n(4) / (8) = 1/2, left: 1/2, 4, 1\n(8) / (4) = 2, left: 2, 4, 1\n(4) + (1) = 5, left: 5, 2\n(4) - (8) = -4, left: -4, 4, 1\n(8) / (4) = 2, left: 2, 1, 4\n(4) / (4) = 1, left: 1, 8, 1\n(4) / (4) = 1, left: 1, 8, 1\n(1) + (1) = 2, left: 2, 8\n(4) - (4) = 0, left: 0, 8, 1\n(8) * (0) = 0, left: 0, 1\n(4) * (4) = 16, left: 16, 8, 1\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((4 * 4) / 1))"}, {"input": "8 4 1 4\n", "output": "(8) * (4) = 32, left: 32, 1, 4\n(4) - (8) = -4, left: -4, 1, 4\n(1) * (-4) = -4, left: -4, 4\n(8) - (4) = 4, left: 4, 1, 4\n(4) - (4) = 0, left: 0, 1\n(4) / (8) = 1/2, left: 1/2, 1, 4\n(4) / (1) = 4, left: 4, 1/2\n(8) + (4) = 12, left: 12, 1, 4\n(1) + (12) = 13, left: 13, 4\n(8) / (4) = 2, left: 2, 1, 4\n(1) + (2) = 3, left: 3, 4\n(1) / (4) = 1/4, left: 1/4, 8, 4\n(4) / (1/4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 / (1 / 4)))"}, {"input": "8 4 1 4\n", "output": "(4) * (4) = 16, left: 16, 8, 1\n(1) / (16) = 1/16, left: 1/16, 8\n(8) / (1/16) = 128, left: 128\n(8) + (1/16) = 129/16, left: 129/16\n(1/16) / (8) = 1/128, left: 1/128\n(8) * (1/16) = 1/2, left: 1/2\n(1/16) - (8) = -127/16, left: -127/16\n(8) - (1/16) = 127/16, left: 127/16\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((4 * 4) / 1))"}, {"input": "10 12 10 11\n", "output": "(12) - (10) = 2, left: 2, 10, 11\n(11) / (10) = 11/10, left: 11/10, 2\n(11) / (12) = 11/12, left: 11/12, 10, 10\n(12) + (11) = 23, left: 23, 10, 10\n(10) / (10) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (10 / 10))"}, {"input": "10 12 10 11\n", "output": "(12) / (10) = 6/5, left: 6/5, 10, 11\n(12) - (10) = 2, left: 2, 10, 11\n(10) / (2) = 5, left: 5, 11\n(10) / (10) = 1, left: 1, 12, 11\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (10 / 10)))"}, {"input": "10 12 10 11\n", "output": "(10) - (10) = 0, left: 0, 12, 11\n(10) / (10) = 1, left: 1, 12, 11\n(12) * (1) = 12, left: 12, 11\n(11) - (12) = -1, left: -1\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (10 / 10)))"}, {"input": "10 12 10 11\n", "output": "(10) - (11) = -1, left: -1, 12, 10\n(12) - (-1) = 13, left: 13, 10\n(10) / (11) = 10/11, left: 10/11, 12, 10\n(10) / (10) = 1, left: 1, 12, 11\n(11) + (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (11 + (10 / 10)))"}, {"input": "10 12 10 11\n", "output": "(12) + (10) = 22, left: 22, 10, 11\n(22) / (10) = 11/5, left: 11/5, 11\n(10) + (10) = 20, left: 20, 12, 11\n(10) / (10) = 1, left: 1, 12, 11\n(12) + (11) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: ((10 / 10) + (12 + 11))"}, {"input": "10 12 10 11\n", "output": "(10) - (11) = -1, left: -1, 12, 10\n(12) - (-1) = 13, left: 13, 10\n(13) - (10) = 3, left: 3\n(10) + (11) = 21, left: 21, 12, 10\n(11) - (10) = 1, left: 1, 12, 10\n(12) - (1) = 11, left: 11, 10\n(11) / (10) = 11/10, left: 11/10, 12, 10\n(10) / (10) = 1, left: 1, 12, 11\n(11) + (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (11 + (10 / 10)))"}, {"input": "10 12 10 11\n", "output": "(10) * (12) = 120, left: 120, 10, 11\n(10) - (11) = -1, left: -1, 120\n(10) + (12) = 22, left: 22, 10, 11\n(12) - (10) = 2, left: 2, 10, 11\n(2) / (10) = 1/5, left: 1/5, 11\n(12) + (10) = 22, left: 22, 10, 11\n(11) - (10) = 1, left: 1, 12, 10\n(10) / (10) = 1, left: 1, 12, 11\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (10 / 10)))"}, {"input": "10 12 10 11\n", "output": "(12) - (10) = 2, left: 2, 10, 11\n(10) - (2) = 8, left: 8, 11\n(12) * (10) = 120, left: 120, 10, 11\n(120) - (10) = 110, left: 110, 11\n(12) + (10) = 22, left: 22, 10, 11\n(11) / (12) = 11/12, left: 11/12, 10, 10\n(10) - (11/12) = 109/12, left: 109/12, 10\n(12) + (11) = 23, left: 23, 10, 10\n(10) / (10) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((12 + 11) + (10 / 10))"}, {"input": "10 12 10 11\n", "output": "(10) - (10) = 0, left: 0, 12, 11\n(0) / (11) = 0, left: 0, 12\n(12) * (0) = 0, left: 0\n(12) + (0) = 12, left: 12, 11\n(12) - (11) = 1, left: 1\n(11) - (12) = -1, left: -1, 0\n(12) / (11) = 12/11, left: 12/11, 0\n(10) / (10) = 1, left: 1, 12, 11\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (10 / 10)))"}, {"input": "10 12 10 11\n", "output": "(10) / (12) = 5/6, left: 5/6, 10, 11\n(11) / (5/6) = 66/5, left: 66/5, 10\n(10) - (5/6) = 55/6, left: 55/6, 11\n(11) - (55/6) = 11/6, left: 11/6\n(12) * (10) = 120, left: 120, 10, 11\n(12) - (10) = 2, left: 2, 10, 11\n(2) / (11) = 2/11, left: 2/11, 10\n(10) / (10) = 1, left: 1, 12, 11\n(12) + (11) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: ((10 / 10) + (12 + 11))"}, {"input": "10 8 7 8\n", "output": "(10) / (8) = 5/4, left: 5/4, 7, 8\n(10) * (8) = 80, left: 80, 7, 8\n(8) / (80) = 1/10, left: 1/10, 7\n(7) / (1/10) = 70, left: 70\n(7) * (8) = 56, left: 56, 80\n(80) - (56) = 24, left: 24\nreach 24! expression: ((10 * 8) - (7 * 8))"}, {"input": "10 8 7 8\n", "output": "(10) - (8) = 2, left: 2, 8, 7\n(10) + (8) = 18, left: 18, 8, 7\n(7) / (18) = 7/18, left: 7/18, 8\n(8) * (7) = 56, left: 56, 18\n(8) / (10) = 4/5, left: 4/5, 8, 7\n(8) / (7) = 8/7, left: 8/7, 4/5\n(10) * (8) = 80, left: 80, 8, 7\n(80) / (8) = 10, left: 10, 7\n(8) * (7) = 56, left: 56, 80\n(80) - (56) = 24, left: 24\nreach 24! expression: ((10 * 8) - (8 * 7))"}, {"input": "10 8 7 8\n", "output": "(10) / (8) = 5/4, left: 5/4, 7, 8\n(8) / (7) = 8/7, left: 8/7, 5/4\n(8/7) / (5/4) = 32/35, left: 32/35\n(7) * (8) = 56, left: 56, 5/4\n(5/4) / (7) = 5/28, left: 5/28, 8\n(5/4) - (7) = -23/4, left: -23/4, 8\n(8) + (5/4) = 37/4, left: 37/4, 7\n(10) * (8) = 80, left: 80, 7, 8\n(7) * (8) = 56, left: 56, 80\n(80) - (56) = 24, left: 24\nreach 24! expression: ((10 * 8) - (7 * 8))"}, {"input": "10 8 7 8\n", "output": "(8) + (8) = 16, left: 16, 10, 7\n(8) / (8) = 1, left: 1, 10, 7\n(8) - (8) = 0, left: 0, 10, 7\n(7) - (0) = 7, left: 7, 10\n(8) - (8) = 0, left: 0, 10, 7\n(8) / (10) = 4/5, left: 4/5, 7, 8\n(7) * (8) = 56, left: 56, 4/5\n(10) * (8) = 80, left: 80, 7, 8\n(7) * (8) = 56, left: 56, 80\n(80) - (56) = 24, left: 24\nreach 24! expression: ((10 * 8) - (7 * 8))"}, {"input": "10 8 7 8\n", "output": "(10) + (8) = 18, left: 18, 8, 7\n(8) - (7) = 1, left: 1, 18\n(10) / (8) = 5/4, left: 5/4, 8, 7\n(8) / (5/4) = 32/5, left: 32/5, 7\n(7) / (8) = 7/8, left: 7/8, 5/4\n(10) * (8) = 80, left: 80, 8, 7\n(7) - (80) = -73, left: -73, 8\n(8) + (80) = 88, left: 88, 7\n(8) * (7) = 56, left: 56, 80\n(80) - (56) = 24, left: 24\nreach 24! expression: ((10 * 8) - (8 * 7))"}, {"input": "10 8 7 8\n", "output": "(8) + (7) = 15, left: 15, 10, 8\n(10) * (8) = 80, left: 80, 15\n(15) - (80) = -65, left: -65\n(7) - (8) = -1, left: -1, 10, 8\n(8) * (7) = 56, left: 56, 10, 8\n(10) * (56) = 560, left: 560, 8\n(10) / (56) = 5/28, left: 5/28, 8\n(5/28) / (8) = 5/224, left: 5/224\n(10) * (8) = 80, left: 80, 56\n(80) - (56) = 24, left: 24\nreach 24! expression: ((10 * 8) - (8 * 7))"}, {"input": "10 8 7 8\n", "output": "(8) + (8) = 16, left: 16, 10, 7\n(10) + (16) = 26, left: 26, 7\n(10) / (16) = 5/8, left: 5/8, 7\n(8) / (8) = 1, left: 1, 10, 7\n(7) / (1) = 7, left: 7, 10\n(8) - (8) = 0, left: 0, 10, 7\n(10) + (0) = 10, left: 10, 7\n(10) / (7) = 10/7, left: 10/7, 0\n(8) * (8) = 64, left: 64, 10, 7\n(10) + (8) = 18, left: 18, 7, 8\n(10) - (8) = 2, left: 2, 7, 8\n(10) * (8) = 80, left: 80, 7, 8\n(7) * (8) = 56, left: 56, 80\n(80) - (56) = 24, left: 24\nreach 24! expression: ((10 * 8) - (7 * 8))"}, {"input": "1 10 3 10\n", "output": "(1) + (10) = 11, left: 11, 10, 3\n(3) / (11) = 3/11, left: 3/11, 10\n(11) / (3) = 11/3, left: 11/3, 10\n(3) * (11) = 33, left: 33, 10\n(3) + (11) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (3 + (1 + 10)))"}, {"input": "1 10 3 10\n", "output": "(10) - (10) = 0, left: 0, 1, 3\n(10) / (10) = 1, left: 1, 1, 3\n(3) + (1) = 4, left: 4, 1\n(10) * (10) = 100, left: 100, 1, 3\n(3) / (100) = 3/100, left: 3/100, 1\n(10) - (10) = 0, left: 0, 1, 3\n(0) / (1) = 0, left: 0, 3\n(10) + (10) = 20, left: 20, 1, 3\n(3) + (20) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (3 + (10 + 10)))"}, {"input": "1 10 3 10\n", "output": "(10) - (1) = 9, left: 9, 10, 3\n(9) - (3) = 6, left: 6, 10\n(10) + (6) = 16, left: 16\n(10) + (3) = 13, left: 13, 9\n(10) * (9) = 90, left: 90, 3\n(1) / (10) = 1/10, left: 1/10, 10, 3\n(10) / (1) = 10, left: 10, 10, 3\n(1) + (10) = 11, left: 11, 10, 3\n(10) + (11) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (10 + (1 + 10)))"}, {"input": "1 10 3 10\n", "output": "(1) + (10) = 11, left: 11, 10, 3\n(3) / (11) = 3/11, left: 3/11, 10\n(10) - (3/11) = 107/11, left: 107/11\n(3) - (11) = -8, left: -8, 10\n(11) / (3) = 11/3, left: 11/3, 10\n(11/3) / (10) = 11/30, left: 11/30\n(11) - (3) = 8, left: 8, 10\n(8) - (10) = -2, left: -2\n(3) + (11) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (3 + (1 + 10)))"}, {"input": "1 10 3 10\n", "output": "(3) - (1) = 2, left: 2, 10, 10\n(2) / (10) = 1/5, left: 1/5, 10\n(3) / (1) = 3, left: 3, 10, 10\n(10) + (10) = 20, left: 20, 3\n(3) * (20) = 60, left: 60\n(10) * (10) = 100, left: 100, 3\n(1) / (3) = 1/3, left: 1/3, 10, 10\n(1) + (3) = 4, left: 4, 10, 10\n(10) + (4) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (10 + (1 + 3)))"}, {"input": "1 10 3 10\n", "output": "(10) - (10) = 0, left: 0, 1, 3\n(0) - (1) = -1, left: -1, 3\n(-1) - (3) = -4, left: -4\n(3) - (0) = 3, left: 3, 1\n(10) / (10) = 1, left: 1, 1, 3\n(3) - (1) = 2, left: 2, 1\n(1) * (1) = 1, left: 1, 3\n(10) + (10) = 20, left: 20, 1, 3\n(1) + (20) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (1 + (10 + 10)))"}, {"input": "11 7 9 10\n", "output": "(11) * (7) = 77, left: 77, 9, 10\n(9) / (7) = 9/7, left: 9/7, 11, 10\n(11) - (10) = 1, left: 1, 9/7\n(7) / (9) = 7/9, left: 7/9, 11, 10\n(9) - (10) = -1, left: -1, 11, 7\n(10) - (9) = 1, left: 1, 11, 7\n(7) + (1) = 8, left: 8, 11\n(10) - (7) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (10 - 7)) - 9)"}, {"input": "11 7 9 10\n", "output": "(9) - (10) = -1, left: -1, 11, 7\n(11) / (-1) = -11, left: -11, 7\n(9) / (10) = 9/10, left: 9/10, 11, 7\n(7) * (9) = 63, left: 63, 11, 10\n(7) / (9) = 7/9, left: 7/9, 11, 10\n(7) - (9) = -2, left: -2, 11, 10\n(11) / (10) = 11/10, left: 11/10, -2\n(10) - (7) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (10 - 7)) - 9)"}, {"input": "11 7 9 10\n", "output": "(9) / (10) = 9/10, left: 9/10, 11, 7\n(10) - (11) = -1, left: -1, 7, 9\n(11) / (10) = 11/10, left: 11/10, 7, 9\n(11) * (10) = 110, left: 110, 7, 9\n(11) - (10) = 1, left: 1, 7, 9\n(7) * (9) = 63, left: 63, 11, 10\n(11) + (63) = 74, left: 74, 10\n(11) - (9) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (11 - 9)))"}, {"input": "11 7 9 10\n", "output": "(11) * (10) = 110, left: 110, 7, 9\n(7) + (110) = 117, left: 117, 9\n(7) - (10) = -3, left: -3, 11, 9\n(9) + (-3) = 6, left: 6, 11\n(11) * (9) = 99, left: 99, -3\n(7) * (10) = 70, left: 70, 11, 9\n(7) / (10) = 7/10, left: 7/10, 11, 9\n(10) - (7) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (10 - 7)) - 9)"}, {"input": "11 7 9 10\n", "output": "(10) / (11) = 10/11, left: 10/11, 7, 9\n(11) - (10) = 1, left: 1, 7, 9\n(11) * (10) = 110, left: 110, 7, 9\n(9) + (110) = 119, left: 119, 7\n(11) - (7) = 4, left: 4, 9, 10\n(10) * (4) = 40, left: 40, 9\n(7) / (11) = 7/11, left: 7/11, 9, 10\n(9) - (11) = -2, left: -2, 7, 10\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (9 - 11)))"}, {"input": "11 7 9 10\n", "output": "(9) + (10) = 19, left: 19, 11, 7\n(9) / (10) = 9/10, left: 9/10, 11, 7\n(9) - (10) = -1, left: -1, 11, 7\n(9) * (10) = 90, left: 90, 11, 7\n(11) / (10) = 11/10, left: 11/10, 7, 9\n(11) * (10) = 110, left: 110, 7, 9\n(9) - (7) = 2, left: 2, 11, 10\n(11) - (10) = 1, left: 1, 2\n(9) / (7) = 9/7, left: 9/7, 11, 10\n(7) * (9) = 63, left: 63, 11, 10\n(7) - (9) = -2, left: -2, 11, 10\n(11) - (9) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (11 - 9)))"}, {"input": "8 12 6 6\n", "output": "(12) / (6) = 2, left: 2, 8, 6\n(6) / (8) = 3/4, left: 3/4, 2\n(3/4) / (2) = 3/8, left: 3/8\n(3/4) - (2) = -5/4, left: -5/4\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (12 / 6))"}, {"input": "8 12 6 6\n", "output": "(12) / (8) = 3/2, left: 3/2, 6, 6\n(6) - (6) = 0, left: 0, 3/2\n(6) + (6) = 12, left: 12, 3/2\n(3/2) - (12) = -21/2, left: -21/2\n(6) * (6) = 36, left: 36, 3/2\n(36) / (3/2) = 24, left: 24\nreach 24! expression: ((6 * 6) / (12 / 8))"}, {"input": "8 12 6 6\n", "output": "(12) / (8) = 3/2, left: 3/2, 6, 6\n(6) - (6) = 0, left: 0, 3/2\n(6) / (6) = 1, left: 1, 3/2\n(3/2) + (1) = 5/2, left: 5/2\n(6) - (6) = 0, left: 0, 3/2\n(3/2) * (0) = 0, left: 0\n(6) + (6) = 12, left: 12, 3/2\n(3/2) / (12) = 1/8, left: 1/8\n(6) * (6) = 36, left: 36, 3/2\n(36) / (3/2) = 24, left: 24\nreach 24! expression: ((6 * 6) / (12 / 8))"}, {"input": "8 12 6 6\n", "output": "(6) - (8) = -2, left: -2, 12, 6\n(12) + (-2) = 10, left: 10, 6\n(12) / (-2) = -6, left: -6, 6\n(6) / (-6) = -1, left: -1\n(12) * (-2) = -24, left: -24, 6\n(-2) / (12) = -1/6, left: -1/6, 6\n(-2) - (12) = -14, left: -14, 6\n(6) - (-14) = 20, left: 20\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (6 - 8)))"}, {"input": "8 12 6 6\n", "output": "(12) / (6) = 2, left: 2, 8, 6\n(6) / (8) = 3/4, left: 3/4, 2\n(3/4) - (2) = -5/4, left: -5/4\n(2) / (3/4) = 8/3, left: 8/3\n(2) + (3/4) = 11/4, left: 11/4\n(2) * (3/4) = 3/2, left: 3/2\n(2) - (3/4) = 5/4, left: 5/4\n(8) * (6) = 48, left: 48, 2\n(48) - (2) = 46, left: 46\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (12 / 6))"}, {"input": "8 12 6 6\n", "output": "(12) - (6) = 6, left: 6, 8, 6\n(6) / (8) = 3/4, left: 3/4, 6\n(8) - (6) = 2, left: 2, 6\n(6) - (8) = -2, left: -2, 6\n(6) * (6) = 36, left: 36, 8\n(8) - (36) = -28, left: -28\n(6) / (6) = 1, left: 1, 8\n(6) / (12) = 1/2, left: 1/2, 8, 6\n(8) * (6) = 48, left: 48, 1/2\n(1/2) * (48) = 24, left: 24\nreach 24! expression: ((6 / 12) * (8 * 6))"}, {"input": "8 12 6 6\n", "output": "(12) / (6) = 2, left: 2, 8, 6\n(6) / (8) = 3/4, left: 3/4, 2\n(3/4) / (2) = 3/8, left: 3/8\n(3/4) - (2) = -5/4, left: -5/4\n(2) / (3/4) = 8/3, left: 8/3\n(2) + (3/4) = 11/4, left: 11/4\n(2) * (3/4) = 3/2, left: 3/2\n(2) - (3/4) = 5/4, left: 5/4\n(8) * (6) = 48, left: 48, 2\n(48) - (2) = 46, left: 46\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (12 / 6))"}, {"input": "8 12 6 6\n", "output": "(12) / (6) = 2, left: 2, 8, 6\n(6) / (8) = 3/4, left: 3/4, 2\n(3/4) / (2) = 3/8, left: 3/8\n(3/4) - (2) = -5/4, left: -5/4\n(2) / (3/4) = 8/3, left: 8/3\n(2) + (3/4) = 11/4, left: 11/4\n(2) * (3/4) = 3/2, left: 3/2\n(2) - (3/4) = 5/4, left: 5/4\n(8) * (6) = 48, left: 48, 2\n(48) - (2) = 46, left: 46\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (12 / 6))"}, {"input": "8 6 7 9\n", "output": "(8) * (6) = 48, left: 48, 7, 9\n(7) - (9) = -2, left: -2, 48\n(48) / (-2) = -24, left: -24\n(9) - (7) = 2, left: 2, 48\n(2) / (48) = 1/24, left: 1/24\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(8) * (6) = 48, left: 48, 7, 9\n(7) - (9) = -2, left: -2, 48\n(48) - (-2) = 50, left: 50\n(48) * (-2) = -96, left: -96\n(-2) - (48) = -50, left: -50\n(-2) / (48) = -1/24, left: -1/24\n(9) - (7) = 2, left: 2, 48\n(48) + (2) = 50, left: 50\n(2) / (48) = 1/24, left: 1/24\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(6) - (7) = -1, left: -1, 8, 9\n(8) - (9) = -1, left: -1, -1\n(7) / (6) = 7/6, left: 7/6, 8, 9\n(9) / (8) = 9/8, left: 9/8, 7/6\n(8) * (9) = 72, left: 72, 7/6\n(7) - (6) = 1, left: 1, 8, 9\n(9) + (1) = 10, left: 10, 8\n(9) - (7) = 2, left: 2, 8, 6\n(2) / (6) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((9 - 7) / 6))"}, {"input": "8 6 7 9\n", "output": "(9) / (7) = 9/7, left: 9/7, 8, 6\n(8) * (6) = 48, left: 48, 9/7\n(8) * (9/7) = 72/7, left: 72/7, 6\n(6) / (72/7) = 7/12, left: 7/12\n(8) / (9/7) = 56/9, left: 56/9, 6\n(6) / (56/9) = 27/28, left: 27/28\n(9) - (7) = 2, left: 2, 8, 6\n(8) + (6) = 14, left: 14, 2\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(9) - (8) = 1, left: 1, 6, 7\n(8) - (9) = -1, left: -1, 6, 7\n(6) / (-1) = -6, left: -6, 7\n(6) / (7) = 6/7, left: 6/7, 8, 9\n(6) - (7) = -1, left: -1, 8, 9\n(9) / (8) = 9/8, left: 9/8, -1\n(9) / (7) = 9/7, left: 9/7, 8, 6\n(9) - (7) = 2, left: 2, 8, 6\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(6) + (9) = 15, left: 15, 8, 7\n(8) / (15) = 8/15, left: 8/15, 7\n(9) / (6) = 3/2, left: 3/2, 8, 7\n(8) - (6) = 2, left: 2, 7, 9\n(9) * (2) = 18, left: 18, 7\n(8) / (6) = 4/3, left: 4/3, 7, 9\n(7) + (4/3) = 25/3, left: 25/3, 9\n(8) * (6) = 48, left: 48, 7, 9\n(9) - (7) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(6) / (9) = 2/3, left: 2/3, 8, 7\n(9) / (6) = 3/2, left: 3/2, 8, 7\n(9) - (6) = 3, left: 3, 8, 7\n(6) - (9) = -3, left: -3, 8, 7\n(8) - (6) = 2, left: 2, 7, 9\n(8) / (6) = 4/3, left: 4/3, 7, 9\n(7) / (9) = 7/9, left: 7/9, 4/3\n(8) + (6) = 14, left: 14, 7, 9\n(7) - (9) = -2, left: -2, 14\n(8) * (6) = 48, left: 48, 7, 9\n(9) * (48) = 432, left: 432, 7\n(7) / (432) = 7/432, left: 7/432\n(9) - (7) = 2, left: 2, 48\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(8) + (9) = 17, left: 17, 6, 7\n(8) / (9) = 8/9, left: 8/9, 6, 7\n(9) - (8) = 1, left: 1, 6, 7\n(1) - (6) = -5, left: -5, 7\n(9) / (8) = 9/8, left: 9/8, 6, 7\n(6) + (9/8) = 57/8, left: 57/8, 7\n(6) / (7) = 6/7, left: 6/7, 8, 9\n(7) / (6) = 7/6, left: 7/6, 8, 9\n(6) + (7) = 13, left: 13, 8, 9\n(9) / (8) = 9/8, left: 9/8, 13\n(13) / (9/8) = 104/9, left: 104/9\n(9) - (7) = 2, left: 2, 8, 6\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(6) - (7) = -1, left: -1, 8, 9\n(9) - (-1) = 10, left: 10, 8\n(7) / (6) = 7/6, left: 7/6, 8, 9\n(6) + (7) = 13, left: 13, 8, 9\n(9) + (13) = 22, left: 22, 8\n(8) + (22) = 30, left: 30\n(6) * (7) = 42, left: 42, 8, 9\n(42) - (9) = 33, left: 33, 8\n(8) - (33) = -25, left: -25\n(7) - (6) = 1, left: 1, 8, 9\n(6) / (7) = 6/7, left: 6/7, 8, 9\n(9) - (7) = 2, left: 2, 8, 6\n(2) / (6) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((9 - 7) / 6))"}, {"input": "3 12 6 9\n", "output": "(3) * (6) = 18, left: 18, 12, 9\n(9) / (12) = 3/4, left: 3/4, 18\n(18) - (3/4) = 69/4, left: 69/4\n(3/4) / (18) = 1/24, left: 1/24\n(18) * (3/4) = 27/2, left: 27/2\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((3 * 6) / (9 / 12))"}, {"input": "3 12 6 9\n", "output": "(6) / (3) = 2, left: 2, 12, 9\n(12) / (2) = 6, left: 6, 9\n(6) / (9) = 2/3, left: 2/3\n(12) - (2) = 10, left: 10, 9\n(10) - (9) = 1, left: 1\n(9) - (2) = 7, left: 7, 12\n(9) / (12) = 3/4, left: 3/4, 2\n(6) - (3) = 3, left: 3, 12, 9\n(9) + (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (6 - 3)))"}, {"input": "3 12 6 9\n", "output": "(9) - (6) = 3, left: 3, 3, 12\n(3) / (3) = 1, left: 1, 12\n(12) * (1) = 12, left: 12\n(3) * (12) = 36, left: 36, 3\n(3) / (36) = 1/12, left: 1/12\n(6) - (9) = -3, left: -3, 3, 12\n(3) * (12) = 36, left: 36, -3\n(6) / (9) = 2/3, left: 2/3, 3, 12\n(3) * (2/3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 * (6 / 9)))"}, {"input": "3 12 6 9\n", "output": "(3) * (6) = 18, left: 18, 12, 9\n(9) / (12) = 3/4, left: 3/4, 18\n(18) - (3/4) = 69/4, left: 69/4\n(3/4) - (18) = -69/4, left: -69/4\n(3/4) / (18) = 1/24, left: 1/24\n(18) * (3/4) = 27/2, left: 27/2\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((3 * 6) / (9 / 12))"}, {"input": "3 12 6 9\n", "output": "(6) - (3) = 3, left: 3, 12, 9\n(12) - (3) = 9, left: 9, 9\n(9) / (9) = 1, left: 1\n(3) / (12) = 1/4, left: 1/4, 9\n(9) / (1/4) = 36, left: 36\n(9) + (1/4) = 37/4, left: 37/4\n(12) * (3) = 36, left: 36, 9\n(9) * (36) = 324, left: 324\n(12) + (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (12 + (6 - 3)))"}, {"input": "3 12 6 9\n", "output": "(3) + (6) = 9, left: 9, 12, 9\n(12) + (9) = 21, left: 21, 9\n(9) * (9) = 81, left: 81, 12\n(6) / (3) = 2, left: 2, 12, 9\n(12) - (9) = 3, left: 3, 2\n(2) * (3) = 6, left: 6\n(9) / (2) = 9/2, left: 9/2, 12\n(3) - (6) = -3, left: -3, 12, 9\n(9) - (-3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 - (3 - 6)))"}, {"input": "3 12 6 9\n", "output": "(3) * (6) = 18, left: 18, 12, 9\n(9) / (12) = 3/4, left: 3/4, 18\n(18) - (3/4) = 69/4, left: 69/4\n(3/4) - (18) = -69/4, left: -69/4\n(3/4) / (18) = 1/24, left: 1/24\n(18) * (3/4) = 27/2, left: 27/2\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((3 * 6) / (9 / 12))"}, {"input": "3 12 6 9\n", "output": "(3) * (6) = 18, left: 18, 12, 9\n(9) / (12) = 3/4, left: 3/4, 18\n(18) - (3/4) = 69/4, left: 69/4\n(3/4) - (18) = -69/4, left: -69/4\n(3/4) / (18) = 1/24, left: 1/24\n(18) * (3/4) = 27/2, left: 27/2\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((3 * 6) / (9 / 12))"}, {"input": "13 1 13 2\n", "output": "(13) - (1) = 12, left: 12, 13, 2\n(13) * (2) = 26, left: 26, 12\n(26) / (12) = 13/6, left: 13/6\n(13) / (1) = 13, left: 13, 13, 2\n(13) + (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + (13 / 1)) - 2)"}, {"input": "13 1 13 2\n", "output": "(2) / (1) = 2, left: 2, 13, 13\n(13) + (2) = 15, left: 15, 13\n(13) / (2) = 13/2, left: 13/2, 13\n(13) * (13/2) = 169/2, left: 169/2\n(2) - (13) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((2 / 1) - 13))"}, {"input": "13 1 13 2\n", "output": "(1) / (2) = 1/2, left: 1/2, 13, 13\n(13) / (13) = 1, left: 1, 1/2\n(13) / (1/2) = 26, left: 26, 13\n(2) / (1) = 2, left: 2, 13, 13\n(13) - (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (13 - (2 / 1)))"}, {"input": "13 1 13 2\n", "output": "(1) / (13) = 1/13, left: 1/13, 13, 2\n(13) - (1) = 12, left: 12, 13, 2\n(13) + (2) = 15, left: 15, 12\n(13) / (1) = 13, left: 13, 13, 2\n(13) - (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((13 / 1) - 2))"}, {"input": "13 1 13 2\n", "output": "(2) / (1) = 2, left: 2, 13, 13\n(13) + (2) = 15, left: 15, 13\n(15) - (13) = 2, left: 2\n(13) / (2) = 13/2, left: 13/2, 13\n(13) * (13/2) = 169/2, left: 169/2\n(13) - (13/2) = 13/2, left: 13/2\n(13/2) - (13) = -13/2, left: -13/2\n(13/2) / (13) = 1/2, left: 1/2\n(2) - (13) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((2 / 1) - 13))"}, {"input": "13 1 13 2\n", "output": "(1) - (13) = -12, left: -12, 13, 2\n(-12) / (2) = -6, left: -6, 13\n(1) / (13) = 1/13, left: 1/13, 13, 2\n(13) / (1/13) = 169, left: 169, 2\n(2) * (1/13) = 2/13, left: 2/13, 13\n(13) - (1) = 12, left: 12, 13, 2\n(2) * (12) = 24, left: 24, 13\n(13) / (1) = 13, left: 13, 13, 2\n(13) - (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((13 / 1) - 2))"}, {"input": "13 1 13 2\n", "output": "(1) / (13) = 1/13, left: 1/13, 13, 2\n(13) + (1) = 14, left: 14, 13, 2\n(13) - (2) = 11, left: 11, 14\n(14) - (2) = 12, left: 12, 13\n(13) - (1) = 12, left: 12, 13, 2\n(2) + (12) = 14, left: 14, 13\n(12) - (13) = -1, left: -1, 2\n(13) / (1) = 13, left: 13, 13, 2\n(13) + (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + (13 / 1)) - 2)"}, {"input": "13 1 13 2\n", "output": "(13) - (1) = 12, left: 12, 13, 2\n(12) / (2) = 6, left: 6, 13\n(13) + (12) = 25, left: 25, 2\n(12) - (13) = -1, left: -1, 2\n(2) - (13) = -11, left: -11, 12\n(13) / (2) = 13/2, left: 13/2, 12\n(13/2) / (12) = 13/24, left: 13/24\n(13) / (1) = 13, left: 13, 13, 2\n(13) + (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + (13 / 1)) - 2)"}, {"input": "13 1 13 2\n", "output": "(1) / (2) = 1/2, left: 1/2, 13, 13\n(13) / (13) = 1, left: 1, 1/2\n(13) - (13) = 0, left: 0, 1/2\n(13) * (13) = 169, left: 169, 1/2\n(169) / (1/2) = 338, left: 338\n(13) + (1/2) = 27/2, left: 27/2, 13\n(1/2) / (13) = 1/26, left: 1/26, 13\n(2) / (1) = 2, left: 2, 13, 13\n(13) - (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (13 - (2 / 1)))"}, {"input": "7 1 5 8\n", "output": "(5) + (8) = 13, left: 13, 7, 1\n(13) - (1) = 12, left: 12, 7\n(7) / (13) = 7/13, left: 7/13, 1\n(7) + (1) = 8, left: 8, 13\n(13) + (8) = 21, left: 21\n(8) - (5) = 3, left: 3, 7, 1\n(1) / (7) = 1/7, left: 1/7, 3\n(1/7) - (3) = -20/7, left: -20/7\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((8 - 5) * (7 + 1))"}, {"input": "7 1 5 8\n", "output": "(7) + (8) = 15, left: 15, 1, 5\n(7) / (8) = 7/8, left: 7/8, 1, 5\n(1) / (5) = 1/5, left: 1/5, 7/8\n(7/8) * (1/5) = 7/40, left: 7/40\n(8) / (7) = 8/7, left: 8/7, 1, 5\n(7) * (8) = 56, left: 56, 1, 5\n(1) / (56) = 1/56, left: 1/56, 5\n(5) - (7) = -2, left: -2, 1, 8\n(1) - (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 - (5 - 7)))"}, {"input": "7 1 5 8\n", "output": "(1) / (5) = 1/5, left: 1/5, 7, 8\n(8) / (7) = 8/7, left: 8/7, 1/5\n(7) - (8) = -1, left: -1, 1/5\n(1/5) * (-1) = -1/5, left: -1/5\n(7) * (1/5) = 7/5, left: 7/5, 8\n(7) - (1/5) = 34/5, left: 34/5, 8\n(8) - (34/5) = 6/5, left: 6/5\n(5) - (1) = 4, left: 4, 7, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (5 - 1)))"}, {"input": "7 1 5 8\n", "output": "(7) - (8) = -1, left: -1, 1, 5\n(5) - (1) = 4, left: 4, -1\n(7) + (8) = 15, left: 15, 1, 5\n(8) / (5) = 8/5, left: 8/5, 7, 1\n(1) / (8/5) = 5/8, left: 5/8, 7\n(5) - (8) = -3, left: -3, 7, 1\n(5) + (8) = 13, left: 13, 7, 1\n(8) - (5) = 3, left: 3, 7, 1\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((8 - 5) * (7 + 1))"}, {"input": "7 1 5 8\n", "output": "(8) / (5) = 8/5, left: 8/5, 7, 1\n(7) + (8/5) = 43/5, left: 43/5, 1\n(1) * (43/5) = 43/5, left: 43/5\n(5) - (8) = -3, left: -3, 7, 1\n(1) + (-3) = -2, left: -2, 7\n(5) * (8) = 40, left: 40, 7, 1\n(5) + (8) = 13, left: 13, 7, 1\n(8) - (5) = 3, left: 3, 7, 1\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((8 - 5) * (7 + 1))"}, {"input": "7 1 5 8\n", "output": "(8) - (7) = 1, left: 1, 1, 5\n(1) / (1) = 1, left: 1, 5\n(7) + (8) = 15, left: 15, 1, 5\n(15) - (1) = 14, left: 14, 5\n(7) / (8) = 7/8, left: 7/8, 1, 5\n(1) / (5) = 1/5, left: 1/5, 7/8\n(7) - (8) = -1, left: -1, 1, 5\n(5) / (1) = 5, left: 5, -1\n(8) / (7) = 8/7, left: 8/7, 1, 5\n(7) * (8) = 56, left: 56, 1, 5\n(5) - (7) = -2, left: -2, 1, 8\n(1) * (8) = 8, left: 8, -2\n(1) - (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 - (5 - 7)))"}, {"input": "7 1 5 8\n", "output": "(7) * (8) = 56, left: 56, 1, 5\n(7) - (8) = -1, left: -1, 1, 5\n(7) / (8) = 7/8, left: 7/8, 1, 5\n(5) * (7/8) = 35/8, left: 35/8, 1\n(8) - (7) = 1, left: 1, 1, 5\n(1) - (5) = -4, left: -4, 1\n(8) / (5) = 8/5, left: 8/5, 7, 1\n(5) - (8) = -3, left: -3, 7, 1\n(5) / (8) = 5/8, left: 5/8, 7, 1\n(5) + (8) = 13, left: 13, 7, 1\n(13) / (1) = 13, left: 13, 7\n(8) - (5) = 3, left: 3, 7, 1\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((8 - 5) * (7 + 1))"}, {"input": "7 1 5 8\n", "output": "(8) / (5) = 8/5, left: 8/5, 7, 1\n(1) - (7) = -6, left: -6, 8/5\n(8/5) - (1) = 3/5, left: 3/5, 7\n(5) - (8) = -3, left: -3, 7, 1\n(5) * (8) = 40, left: 40, 7, 1\n(7) - (1) = 6, left: 6, 40\n(5) + (8) = 13, left: 13, 7, 1\n(13) / (1) = 13, left: 13, 7\n(5) / (8) = 5/8, left: 5/8, 7, 1\n(7) + (1) = 8, left: 8, 5/8\n(8) - (5) = 3, left: 3, 7, 1\n(7) * (1) = 7, left: 7, 3\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((8 - 5) * (7 + 1))"}, {"input": "2 9 2 2\n", "output": "(2) - (9) = -7, left: -7, 2, 2\n(2) * (-7) = -14, left: -14, 2\n(2) - (-7) = 9, left: 9, 2\n(2) / (2) = 1, left: 1, -7\n(9) - (2) = 7, left: 7, 2, 2\n(2) + (9) = 11, left: 11, 2, 2\n(2) + (11) = 13, left: 13, 2\n(2) - (13) = -11, left: -11\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (2 + 9)))"}, {"input": "2 9 2 2\n", "output": "(2) + (9) = 11, left: 11, 2, 2\n(11) / (2) = 11/2, left: 11/2, 2\n(11/2) - (2) = 7/2, left: 7/2\n(2) - (11/2) = -7/2, left: -7/2\n(11) - (2) = 9, left: 9, 2\n(2) / (9) = 2/9, left: 2/9\n(9) - (2) = 7, left: 7\n(9) / (2) = 9/2, left: 9/2\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (2 + 9)))"}, {"input": "2 9 2 2\n", "output": "(9) * (2) = 18, left: 18, 2, 2\n(2) / (2) = 1, left: 1, 18\n(2) / (2) = 1, left: 1, 18\n(1) / (18) = 1/18, left: 1/18\n(9) + (2) = 11, left: 11, 2, 2\n(2) + (11) = 13, left: 13, 2\n(2) + (13) = 15, left: 15\n(11) - (2) = 9, left: 9, 2\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (9 + 2)))"}, {"input": "2 9 2 2\n", "output": "(2) - (2) = 0, left: 0, 2, 9\n(0) - (9) = -9, left: -9, 2\n(2) + (2) = 4, left: 4, 2, 9\n(2) + (9) = 11, left: 11, 4\n(2) - (9) = -7, left: -7, 2, 2\n(2) + (-7) = -5, left: -5, 2\n(9) / (2) = 9/2, left: 9/2, 2, 2\n(9) + (2) = 11, left: 11, 2, 2\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (9 + 2)))"}, {"input": "2 9 2 2\n", "output": "(9) * (2) = 18, left: 18, 2, 2\n(2) * (18) = 36, left: 36, 2\n(2) - (9) = -7, left: -7, 2, 2\n(-7) - (2) = -9, left: -9, 2\n(2) / (9) = 2/9, left: 2/9, 2, 2\n(2) + (2) = 4, left: 4, 2/9\n(2) - (2) = 0, left: 0, 2/9\n(9) + (2) = 11, left: 11, 2, 2\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (9 + 2)))"}, {"input": "2 9 2 2\n", "output": "(9) * (2) = 18, left: 18, 2, 2\n(2) * (18) = 36, left: 36, 2\n(2) - (9) = -7, left: -7, 2, 2\n(-7) / (2) = -7/2, left: -7/2, 2\n(2) * (2) = 4, left: 4, -7\n(2) / (9) = 2/9, left: 2/9, 2, 2\n(2/9) - (2) = -16/9, left: -16/9, 2\n(2) / (2) = 1, left: 1, 2/9\n(9) - (2) = 7, left: 7, 2, 2\n(2) - (2) = 0, left: 0, 7\n(2) * (7) = 14, left: 14, 2\n(9) + (2) = 11, left: 11, 2, 2\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (9 + 2)))"}, {"input": "2 9 2 2\n", "output": "(2) - (9) = -7, left: -7, 2, 2\n(-7) - (2) = -9, left: -9, 2\n(2) + (-7) = -5, left: -5, 2\n(2) + (-5) = -3, left: -3\n(9) - (2) = 7, left: 7, 2, 2\n(7) / (2) = 7/2, left: 7/2, 2\n(7) / (2) = 7/2, left: 7/2, 2\n(2) * (7) = 14, left: 14, 2\n(2) / (7) = 2/7, left: 2/7, 2\n(2) / (2) = 1, left: 1, 7\n(2) + (9) = 11, left: 11, 2, 2\n(2) / (11) = 2/11, left: 2/11, 2\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (2 + 9)))"}, {"input": "2 9 2 2\n", "output": "(2) / (2) = 1, left: 1, 2, 9\n(1) / (9) = 1/9, left: 1/9, 2\n(2) - (2) = 0, left: 0, 2, 9\n(2) / (2) = 1, left: 1, 2, 9\n(9) / (1) = 9, left: 9, 2\n(2) / (9) = 2/9, left: 2/9, 2, 2\n(2) / (2/9) = 9, left: 9, 2\n(9) - (2) = 7, left: 7\n(9) - (2) = 7, left: 7, 2, 2\n(2) - (2) = 0, left: 0, 7\n(9) / (2) = 9/2, left: 9/2, 2, 2\n(9) + (2) = 11, left: 11, 2, 2\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (9 + 2)))"}, {"input": "1 4 4 2\n", "output": "(2) - (4) = -2, left: -2, 1, 4\n(-2) - (1) = -3, left: -3, 4\n(1) * (-2) = -2, left: -2, 4\n(4) * (-2) = -8, left: -8\n(1) - (-2) = 3, left: 3, 4\n(1) / (-2) = -1/2, left: -1/2, 4\n(4) + (2) = 6, left: 6, 1, 4\n(6) / (4) = 3/2, left: 3/2, 1\n(4) * (6) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((4 * (4 + 2)) / 1)"}, {"input": "1 4 4 2\n", "output": "(4) * (2) = 8, left: 8, 1, 4\n(4) / (8) = 1/2, left: 1/2, 1\n(4) * (8) = 32, left: 32, 1\n(8) / (4) = 2, left: 2, 1\n(4) - (8) = -4, left: -4, 1\n(-4) - (1) = -5, left: -5\n(1) + (8) = 9, left: 9, 4\n(1) * (4) = 4, left: 4, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 * 2) * (4 - 1))"}, {"input": "1 4 4 2\n", "output": "(4) - (1) = 3, left: 3, 4, 2\n(4) - (3) = 1, left: 1, 2\n(1) - (2) = -1, left: -1\n(4) / (3) = 4/3, left: 4/3, 2\n(4) + (3) = 7, left: 7, 2\n(7) / (2) = 7/2, left: 7/2\n(2) - (7) = -5, left: -5\n(4) * (3) = 12, left: 12, 2\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (4 * (4 - 1)))"}, {"input": "1 4 4 2\n", "output": "(4) - (4) = 0, left: 0, 1, 2\n(4) * (4) = 16, left: 16, 1, 2\n(2) * (16) = 32, left: 32, 1\n(4) - (4) = 0, left: 0, 1, 2\n(4) / (4) = 1, left: 1, 1, 2\n(1) - (1) = 0, left: 0, 2\n(1) + (2) = 3, left: 3, 1\n(4) + (4) = 8, left: 8, 1, 2\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (1 + 2))"}, {"input": "1 4 4 2\n", "output": "(4) / (2) = 2, left: 2, 1, 4\n(1) - (4) = -3, left: -3, 2\n(1) + (4) = 5, left: 5, 2\n(4) * (2) = 8, left: 8, 1, 4\n(1) + (4) = 5, left: 5, 8\n(8) * (5) = 40, left: 40\n(1) - (4) = -3, left: -3, 8\n(8) * (-3) = -24, left: -24\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 * 2) * (4 - 1))"}, {"input": "1 4 4 2\n", "output": "(4) - (4) = 0, left: 0, 1, 2\n(2) / (1) = 2, left: 2, 0\n(1) * (2) = 2, left: 2, 0\n(1) - (0) = 1, left: 1, 2\n(0) - (2) = -2, left: -2, 1\n(-2) / (1) = -2, left: -2\n(4) * (4) = 16, left: 16, 1, 2\n(4) - (4) = 0, left: 0, 1, 2\n(2) * (0) = 0, left: 0, 1\n(0) - (2) = -2, left: -2, 1\n(4) / (4) = 1, left: 1, 1, 2\n(4) + (4) = 8, left: 8, 1, 2\n(1) + (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((4 + 4) * (1 + 2))"}, {"input": "3 11 4 3\n", "output": "(3) / (4) = 3/4, left: 3/4, 3, 11\n(3) + (3/4) = 15/4, left: 15/4, 11\n(11) * (15/4) = 165/4, left: 165/4\n(11) - (4) = 7, left: 7, 3, 3\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 * (11 - 4)))"}, {"input": "3 11 4 3\n", "output": "(3) / (4) = 3/4, left: 3/4, 11, 3\n(11) * (3) = 33, left: 33, 3, 4\n(3) / (11) = 3/11, left: 3/11, 3, 4\n(4) + (3/11) = 47/11, left: 47/11, 3\n(3) - (4) = -1, left: -1, 3, 11\n(3) - (11) = -8, left: -8, 4, 3\n(3) + (3) = 6, left: 6, 11, 4\n(3) * (3) = 9, left: 9, 11, 4\n(11) + (9) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (11 + (3 * 3)))"}, {"input": "3 11 4 3\n", "output": "(3) - (3) = 0, left: 0, 11, 4\n(11) * (4) = 44, left: 44, 0\n(0) * (44) = 0, left: 0\n(4) * (0) = 0, left: 0, 11\n(0) - (4) = -4, left: -4, 11\n(3) * (3) = 9, left: 9, 11, 4\n(9) / (11) = 9/11, left: 9/11, 4\n(11) * (9) = 99, left: 99, 4\n(11) + (9) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (11 + (3 * 3)))"}, {"input": "3 11 4 3\n", "output": "(3) / (11) = 3/11, left: 3/11, 3, 4\n(4) - (3/11) = 41/11, left: 41/11, 3\n(3) / (11) = 3/11, left: 3/11, 4, 3\n(3) - (11) = -8, left: -8, 4, 3\n(4) - (3) = 1, left: 1, 3, 11\n(4) * (3) = 12, left: 12, 3, 11\n(12) - (11) = 1, left: 1, 3\n(11) - (4) = 7, left: 7, 3, 3\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 * (11 - 4)))"}, {"input": "3 11 4 3\n", "output": "(11) / (3) = 11/3, left: 11/3, 4, 3\n(3) / (4) = 3/4, left: 3/4, 3, 11\n(11) - (3) = 8, left: 8, 3/4\n(4) * (3) = 12, left: 12, 3, 11\n(3) * (4) = 12, left: 12, 11, 3\n(4) - (3) = 1, left: 1, 11, 3\n(3) + (4) = 7, left: 7, 11, 3\n(11) - (4) = 7, left: 7, 3, 3\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 * (11 - 4)))"}, {"input": "3 11 4 3\n", "output": "(4) + (3) = 7, left: 7, 3, 11\n(4) / (3) = 4/3, left: 4/3, 3, 11\n(3) + (4) = 7, left: 7, 11, 3\n(11) / (7) = 11/7, left: 11/7, 3\n(4) / (3) = 4/3, left: 4/3, 11, 3\n(3) + (4/3) = 13/3, left: 13/3, 11\n(4) - (3) = 1, left: 1, 11, 3\n(11) + (4) = 15, left: 15, 3, 3\n(3) * (3) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((11 + 4) + (3 * 3))"}, {"input": "3 11 4 3\n", "output": "(3) - (11) = -8, left: -8, 3, 4\n(3) * (4) = 12, left: 12, -8\n(11) + (3) = 14, left: 14, 3, 4\n(14) / (3) = 14/3, left: 14/3, 4\n(11) - (3) = 8, left: 8, 4, 3\n(3) + (8) = 11, left: 11, 4\n(3) + (11) = 14, left: 14, 4, 3\n(3) / (4) = 3/4, left: 3/4, 14\n(14) / (4) = 7/2, left: 7/2, 3\n(3) + (3) = 6, left: 6, 11, 4\n(3) / (3) = 1, left: 1, 11, 4\n(3) * (3) = 9, left: 9, 11, 4\n(11) + (9) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (11 + (3 * 3)))"}, {"input": "3 11 4 3\n", "output": "(11) * (3) = 33, left: 33, 3, 4\n(11) + (3) = 14, left: 14, 3, 4\n(3) / (11) = 3/11, left: 3/11, 4, 3\n(3) * (11) = 33, left: 33, 4, 3\n(11) / (3) = 11/3, left: 11/3, 4, 3\n(3) - (11) = -8, left: -8, 4, 3\n(4) + (3) = 7, left: 7, 3, 11\n(3) / (4) = 3/4, left: 3/4, 3, 11\n(4) * (3) = 12, left: 12, 3, 11\n(3) / (12) = 1/4, left: 1/4, 11\n(4) / (3) = 4/3, left: 4/3, 3, 11\n(11) - (4) = 7, left: 7, 3, 3\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 * (11 - 4)))"}, {"input": "3 11 4 3\n", "output": "(3) - (11) = -8, left: -8, 4, 3\n(4) + (3) = 7, left: 7, -8\n(3) / (4) = 3/4, left: 3/4, -8\n(11) - (3) = 8, left: 8, 4, 3\n(3) / (11) = 3/11, left: 3/11, 4, 3\n(3) / (4) = 3/4, left: 3/4, 3, 11\n(3) + (3/4) = 15/4, left: 15/4, 11\n(4) - (3) = 1, left: 1, 3, 11\n(3) * (4) = 12, left: 12, 11, 3\n(4) - (3) = 1, left: 1, 11, 3\n(3) * (1) = 3, left: 3, 11\n(11) - (4) = 7, left: 7, 3, 3\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 * (11 - 4)))"}, {"input": "3 11 4 3\n", "output": "(4) / (3) = 4/3, left: 4/3, 3, 11\n(11) - (4/3) = 29/3, left: 29/3, 3\n(3) / (4) = 3/4, left: 3/4, 3, 11\n(3) - (4) = -1, left: -1, 3, 11\n(4) - (3) = 1, left: 1, 3, 11\n(4) * (3) = 12, left: 12, 3, 11\n(11) / (12) = 11/12, left: 11/12, 3\n(3) + (4) = 7, left: 7, 11, 3\n(4) / (3) = 4/3, left: 4/3, 11, 3\n(4) - (3) = 1, left: 1, 11, 3\n(1) - (3) = -2, left: -2, 11\n(11) + (4) = 15, left: 15, 3, 3\n(3) * (3) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((11 + 4) + (3 * 3))"}, {"input": "11 4 10 5\n", "output": "(10) / (4) = 5/2, left: 5/2, 11, 5\n(11) / (5/2) = 22/5, left: 22/5, 5\n(4) - (10) = -6, left: -6, 11, 5\n(4) * (10) = 40, left: 40, 11, 5\n(40) - (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((4 * 10) - 5) - 11)"}, {"input": "11 4 10 5\n", "output": "(5) / (10) = 1/2, left: 1/2, 11, 4\n(11) / (4) = 11/4, left: 11/4, 1/2\n(10) - (5) = 5, left: 5, 11, 4\n(11) * (4) = 44, left: 44, 5\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (10 - 5)))"}, {"input": "11 4 10 5\n", "output": "(4) / (5) = 4/5, left: 4/5, 11, 10\n(10) / (11) = 10/11, left: 10/11, 4/5\n(10) + (5) = 15, left: 15, 11, 4\n(10) - (5) = 5, left: 5, 11, 4\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (10 - 5)))"}, {"input": "11 4 10 5\n", "output": "(4) - (5) = -1, left: -1, 11, 10\n(11) + (10) = 21, left: 21, -1\n(11) * (4) = 44, left: 44, 10, 5\n(10) - (44) = -34, left: -34, 5\n(11) - (4) = 7, left: 7, 10, 5\n(4) - (11) = -7, left: -7, 10, 5\n(5) - (-7) = 12, left: 12, 10\n(10) - (5) = 5, left: 5, 11, 4\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (10 - 5)))"}, {"input": "11 4 10 5\n", "output": "(5) - (10) = -5, left: -5, 11, 4\n(11) - (-5) = 16, left: 16, 4\n(16) / (4) = 4, left: 4\n(4) / (16) = 1/4, left: 1/4\n(16) - (4) = 12, left: 12\n(4) + (16) = 20, left: 20\n(11) + (-5) = 6, left: 6, 4\n(4) - (6) = -2, left: -2\n(4) / (6) = 2/3, left: 2/3\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (5 - 10)))"}, {"input": "11 4 10 5\n", "output": "(11) * (5) = 55, left: 55, 4, 10\n(10) + (55) = 65, left: 65, 4\n(5) - (11) = -6, left: -6, 4, 10\n(4) * (-6) = -24, left: -24, 10\n(11) / (5) = 11/5, left: 11/5, 4, 10\n(11/5) / (10) = 11/50, left: 11/50, 4\n(4) / (11/5) = 20/11, left: 20/11, 10\n(11) + (5) = 16, left: 16, 4, 10\n(4) * (10) = 40, left: 40, 16\n(40) - (16) = 24, left: 24\nreach 24! expression: ((4 * 10) - (11 + 5))"}, {"input": "11 4 10 5\n", "output": "(4) - (10) = -6, left: -6, 11, 5\n(-6) - (5) = -11, left: -11, 11\n(10) - (4) = 6, left: 6, 11, 5\n(6) - (5) = 1, left: 1, 11\n(4) + (10) = 14, left: 14, 11, 5\n(5) - (11) = -6, left: -6, 14\n(4) / (10) = 2/5, left: 2/5, 11, 5\n(4) * (10) = 40, left: 40, 11, 5\n(40) - (5) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((4 * 10) - 5) - 11)"}, {"input": "11 4 10 5\n", "output": "(5) / (10) = 1/2, left: 1/2, 11, 4\n(11) * (4) = 44, left: 44, 1/2\n(10) / (5) = 2, left: 2, 11, 4\n(4) + (2) = 6, left: 6, 11\n(4) * (2) = 8, left: 8, 11\n(10) - (5) = 5, left: 5, 11, 4\n(4) / (11) = 4/11, left: 4/11, 5\n(4/11) - (5) = -51/11, left: -51/11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (10 - 5)))"}, {"input": "2 6 5 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 2, 6\n(6) - (5/8) = 43/8, left: 43/8, 2\n(5) - (8) = -3, left: -3, 2, 6\n(6) - (-3) = 9, left: 9, 2\n(8) / (5) = 8/5, left: 8/5, 2, 6\n(6) / (2) = 3, left: 3, 8/5\n(3) / (8/5) = 15/8, left: 15/8\n(8) - (5) = 3, left: 3, 2, 6\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((8 - 5) * (2 + 6))"}, {"input": "2 6 5 8\n", "output": "(6) + (8) = 14, left: 14, 2, 5\n(2) / (14) = 1/7, left: 1/7, 5\n(1/7) / (5) = 1/35, left: 1/35\n(2) - (14) = -12, left: -12, 5\n(5) - (-12) = 17, left: 17\n(5) / (-12) = -5/12, left: -5/12\n(14) - (2) = 12, left: 12, 5\n(5) * (12) = 60, left: 60\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((6 + 8) + (2 * 5))"}, {"input": "2 6 5 8\n", "output": "(2) / (8) = 1/4, left: 1/4, 6, 5\n(6) + (5) = 11, left: 11, 1/4\n(5) / (6) = 5/6, left: 5/6, 1/4\n(1/4) / (6) = 1/24, left: 1/24, 5\n(5) - (1/24) = 119/24, left: 119/24\n(8) - (2) = 6, left: 6, 6, 5\n(5) / (6) = 5/6, left: 5/6, 6\n(6) + (5) = 11, left: 11, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * 5) - (8 - 2))"}, {"input": "2 6 5 8\n", "output": "(2) / (5) = 2/5, left: 2/5, 6, 8\n(8) / (2/5) = 20, left: 20, 6\n(8) + (2/5) = 42/5, left: 42/5, 6\n(8) - (2/5) = 38/5, left: 38/5, 6\n(6) / (2/5) = 15, left: 15, 8\n(5) - (2) = 3, left: 3, 6, 8\n(8) / (3) = 8/3, left: 8/3, 6\n(3) / (6) = 1/2, left: 1/2, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (5 - 2)))"}, {"input": "2 6 5 8\n", "output": "(2) + (6) = 8, left: 8, 5, 8\n(8) * (8) = 64, left: 64, 5\n(8) - (8) = 0, left: 0, 5\n(8) / (8) = 1, left: 1, 5\n(5) * (1) = 5, left: 5\n(5) - (8) = -3, left: -3, 8\n(8) - (5) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(8) + (3) = 11, left: 11\n(8) * (3) = 24, left: 24\nreach 24! expression: ((2 + 6) * (8 - 5))"}, {"input": "11 6 4 2\n", "output": "(11) + (4) = 15, left: 15, 6, 2\n(15) / (2) = 15/2, left: 15/2, 6\n(2) - (15) = -13, left: -13, 6\n(6) - (-13) = 19, left: 19\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (11 + 4)) - 6)"}, {"input": "11 6 4 2\n", "output": "(11) * (2) = 22, left: 22, 6, 4\n(4) + (22) = 26, left: 26, 6\n(26) - (6) = 20, left: 20\n(6) + (26) = 32, left: 32\n(22) - (4) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + ((11 * 2) - 4))"}, {"input": "11 6 4 2\n", "output": "(11) + (2) = 13, left: 13, 6, 4\n(2) / (11) = 2/11, left: 2/11, 6, 4\n(4) * (2/11) = 8/11, left: 8/11, 6\n(6) / (8/11) = 33/4, left: 33/4\n(6) * (4) = 24, left: 24, 2/11\n(24) / (2/11) = 132, left: 132\n(4) - (6) = -2, left: -2, 2/11\n(11) * (2) = 22, left: 22, 6, 4\n(4) - (22) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (4 - (11 * 2)))"}, {"input": "11 6 4 2\n", "output": "(11) * (2) = 22, left: 22, 6, 4\n(4) + (22) = 26, left: 26, 6\n(26) / (6) = 13/3, left: 13/3\n(26) - (6) = 20, left: 20\n(6) + (26) = 32, left: 32\n(22) - (4) = 18, left: 18, 6\n(6) / (18) = 1/3, left: 1/3\n(6) * (18) = 108, left: 108\n(18) - (6) = 12, left: 12\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + ((11 * 2) - 4))"}, {"input": "11 6 4 2\n", "output": "(11) / (2) = 11/2, left: 11/2, 6, 4\n(11) - (2) = 9, left: 9, 6, 4\n(6) / (9) = 2/3, left: 2/3, 4\n(4) + (9) = 13, left: 13, 6\n(2) - (11) = -9, left: -9, 6, 4\n(6) + (-9) = -3, left: -3, 4\n(11) * (2) = 22, left: 22, 6, 4\n(22) / (6) = 11/3, left: 11/3, 4\n(6) + (22) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((6 + (11 * 2)) - 4)"}, {"input": "11 6 4 2\n", "output": "(4) - (11) = -7, left: -7, 6, 2\n(11) - (4) = 7, left: 7, 6, 2\n(11) * (4) = 44, left: 44, 6, 2\n(6) / (2) = 3, left: 3, 44\n(4) / (11) = 4/11, left: 4/11, 6, 2\n(6) * (2) = 12, left: 12, 4/11\n(11) + (4) = 15, left: 15, 6, 2\n(2) / (6) = 1/3, left: 1/3, 15\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (11 + 4)) - 6)"}, {"input": "11 6 4 2\n", "output": "(11) + (4) = 15, left: 15, 6, 2\n(15) / (2) = 15/2, left: 15/2, 6\n(6) + (15/2) = 27/2, left: 27/2\n(6) * (15/2) = 45, left: 45\n(15/2) / (6) = 5/4, left: 5/4\n(2) - (15) = -13, left: -13, 6\n(6) / (-13) = -6/13, left: -6/13\n(6) * (-13) = -78, left: -78\n(2) * (15) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((2 * (11 + 4)) - 6)"}, {"input": "1 13 3 12\n", "output": "(3) * (12) = 36, left: 36, 1, 13\n(36) - (1) = 35, left: 35, 13\n(35) - (13) = 22, left: 22\n(1) + (36) = 37, left: 37, 13\n(37) / (13) = 37/13, left: 37/13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((1 + (3 * 12)) - 13)"}, {"input": "1 13 3 12\n", "output": "(3) / (12) = 1/4, left: 1/4, 1, 13\n(13) / (1) = 13, left: 13, 1/4\n(3) + (12) = 15, left: 15, 1, 13\n(3) * (12) = 36, left: 36, 1, 13\n(13) - (1) = 12, left: 12, 36\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * 12) - (13 - 1))"}, {"input": "1 13 3 12\n", "output": "(3) / (1) = 3, left: 3, 13, 12\n(12) - (3) = 9, left: 9, 13\n(1) / (12) = 1/12, left: 1/12, 13, 3\n(12) / (1) = 12, left: 12, 13, 3\n(13) - (3) = 10, left: 10, 12\n(3) - (12) = -9, left: -9, 1, 13\n(3) + (12) = 15, left: 15, 1, 13\n(3) * (12) = 36, left: 36, 1, 13\n(1) + (36) = 37, left: 37, 13\n(37) - (13) = 24, left: 24\nreach 24! expression: ((1 + (3 * 12)) - 13)"}, {"input": "1 13 3 12\n", "output": "(3) / (12) = 1/4, left: 1/4, 1, 13\n(13) / (1/4) = 52, left: 52, 1\n(1) / (1/4) = 4, left: 4, 13\n(1) - (1/4) = 3/4, left: 3/4, 13\n(3) + (12) = 15, left: 15, 1, 13\n(1) * (13) = 13, left: 13, 15\n(13) * (15) = 195, left: 195, 1\n(3) * (12) = 36, left: 36, 1, 13\n(13) - (1) = 12, left: 12, 36\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * 12) - (13 - 1))"}, {"input": "1 13 3 12\n", "output": "(3) - (1) = 2, left: 2, 13, 12\n(1) - (3) = -2, left: -2, 13, 12\n(13) / (-2) = -13/2, left: -13/2, 12\n(3) / (1) = 3, left: 3, 13, 12\n(3) / (12) = 1/4, left: 1/4, 1, 13\n(3) + (12) = 15, left: 15, 1, 13\n(12) / (3) = 4, left: 4, 1, 13\n(3) * (12) = 36, left: 36, 1, 13\n(36) - (13) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + ((3 * 12) - 13))"}, {"input": "1 13 3 12\n", "output": "(1) / (12) = 1/12, left: 1/12, 13, 3\n(12) - (1) = 11, left: 11, 13, 3\n(1) * (12) = 12, left: 12, 13, 3\n(1) - (12) = -11, left: -11, 13, 3\n(-11) / (3) = -11/3, left: -11/3, 13\n(1) - (3) = -2, left: -2, 13, 12\n(12) - (13) = -1, left: -1, -2\n(13) - (1) = 12, left: 12, 3, 12\n(3) * (12) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((3 * (13 - 1)) - 12)"}, {"input": "1 13 3 12\n", "output": "(3) * (12) = 36, left: 36, 1, 13\n(36) - (1) = 35, left: 35, 13\n(35) - (13) = 22, left: 22\n(13) - (35) = -22, left: -22\n(13) / (35) = 13/35, left: 13/35\n(35) / (13) = 35/13, left: 35/13\n(13) + (35) = 48, left: 48\n(1) + (36) = 37, left: 37, 13\n(13) - (37) = -24, left: -24\n(37) - (13) = 24, left: 24\nreach 24! expression: ((1 + (3 * 12)) - 13)"}, {"input": "7 3 6 8\n", "output": "(7) - (3) = 4, left: 4, 6, 8\n(6) * (4) = 24, left: 24, 8\n(4) / (6) = 2/3, left: 2/3, 8\n(6) / (4) = 3/2, left: 3/2, 8\n(8) + (3/2) = 19/2, left: 19/2\n(6) * (8) = 48, left: 48, 4\n(4) - (48) = -44, left: -44\n(6) - (8) = -2, left: -2, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 - (7 - 3)))"}, {"input": "7 3 6 8\n", "output": "(3) / (7) = 3/7, left: 3/7, 6, 8\n(3/7) / (8) = 3/56, left: 3/56, 6\n(6) * (8) = 48, left: 48, 3/7\n(3/7) * (48) = 144/7, left: 144/7\n(7) * (3) = 21, left: 21, 6, 8\n(6) / (8) = 3/4, left: 3/4, 21\n(3/4) - (21) = -81/4, left: -81/4\n(3) - (7) = -4, left: -4, 6, 8\n(8) + (-4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 + (3 - 7)))"}, {"input": "7 3 6 8\n", "output": "(7) / (3) = 7/3, left: 7/3, 6, 8\n(8) / (6) = 4/3, left: 4/3, 7/3\n(8) - (6) = 2, left: 2, 7/3\n(3) / (7) = 3/7, left: 3/7, 6, 8\n(8) / (6) = 4/3, left: 4/3, 3/7\n(3) - (7) = -4, left: -4, 6, 8\n(-4) - (6) = -10, left: -10, 8\n(-10) - (8) = -18, left: -18\n(8) + (-4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 + (3 - 7)))"}, {"input": "7 3 6 8\n", "output": "(6) * (8) = 48, left: 48, 7, 3\n(7) * (48) = 336, left: 336, 3\n(48) / (3) = 16, left: 16, 7\n(8) - (6) = 2, left: 2, 7, 3\n(6) - (8) = -2, left: -2, 7, 3\n(3) - (7) = -4, left: -4, -2\n(-4) / (-2) = 2, left: 2\n(6) + (8) = 14, left: 14, 7, 3\n(7) + (3) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((6 + 8) + (7 + 3))"}, {"input": "7 3 6 8\n", "output": "(7) / (8) = 7/8, left: 7/8, 3, 6\n(3) / (7/8) = 24/7, left: 24/7, 6\n(3) * (7/8) = 21/8, left: 21/8, 6\n(3) / (6) = 1/2, left: 1/2, 7/8\n(1/2) / (7/8) = 4/7, left: 4/7\n(3) + (6) = 9, left: 9, 7/8\n(6) - (3) = 3, left: 3, 7/8\n(7) + (8) = 15, left: 15, 3, 6\n(3) + (6) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((7 + 8) + (3 + 6))"}, {"input": "7 3 6 8\n", "output": "(6) * (8) = 48, left: 48, 7, 3\n(7) - (48) = -41, left: -41, 3\n(7) * (3) = 21, left: 21, 48\n(8) - (6) = 2, left: 2, 7, 3\n(7) + (2) = 9, left: 9, 3\n(3) - (7) = -4, left: -4, 2\n(2) * (-4) = -8, left: -8\n(7) * (3) = 21, left: 21, 2\n(2) - (3) = -1, left: -1, 7\n(6) - (8) = -2, left: -2, 7, 3\n(7) - (3) = 4, left: 4, -2\n(6) + (8) = 14, left: 14, 7, 3\n(7) + (3) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((6 + 8) + (7 + 3))"}, {"input": "2 6 10 11\n", "output": "(6) + (11) = 17, left: 17, 2, 10\n(17) - (10) = 7, left: 7, 2\n(2) * (10) = 20, left: 20, 17\n(2) - (17) = -15, left: -15, 10\n(2) * (17) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((2 * (6 + 11)) - 10)"}, {"input": "2 6 10 11\n", "output": "(2) + (6) = 8, left: 8, 10, 11\n(11) - (10) = 1, left: 1, 8\n(6) / (2) = 3, left: 3, 10, 11\n(3) / (11) = 3/11, left: 3/11, 10\n(11) + (3) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (11 + (6 / 2)))"}, {"input": "2 6 10 11\n", "output": "(6) / (10) = 3/5, left: 3/5, 2, 11\n(11) - (3/5) = 52/5, left: 52/5, 2\n(10) - (6) = 4, left: 4, 2, 11\n(6) + (11) = 17, left: 17, 2, 10\n(2) * (17) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((2 * (6 + 11)) - 10)"}, {"input": "2 6 10 11\n", "output": "(6) * (10) = 60, left: 60, 2, 11\n(6) / (10) = 3/5, left: 3/5, 2, 11\n(6) - (10) = -4, left: -4, 2, 11\n(11) - (-4) = 15, left: 15, 2\n(10) / (6) = 5/3, left: 5/3, 2, 11\n(6) + (10) = 16, left: 16, 2, 11\n(11) / (6) = 11/6, left: 11/6, 2, 10\n(6) + (11) = 17, left: 17, 2, 10\n(2) * (17) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((2 * (6 + 11)) - 10)"}, {"input": "2 6 10 11\n", "output": "(6) - (2) = 4, left: 4, 10, 11\n(4) / (10) = 2/5, left: 2/5, 11\n(4) - (10) = -6, left: -6, 11\n(10) / (4) = 5/2, left: 5/2, 11\n(10) * (4) = 40, left: 40, 11\n(2) + (6) = 8, left: 8, 10, 11\n(10) + (11) = 21, left: 21, 8\n(6) / (2) = 3, left: 3, 10, 11\n(11) + (3) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (11 + (6 / 2)))"}, {"input": "2 6 10 11\n", "output": "(6) + (11) = 17, left: 17, 2, 10\n(10) + (17) = 27, left: 27, 2\n(10) - (2) = 8, left: 8, 17\n(17) - (8) = 9, left: 9\n(2) + (10) = 12, left: 12, 17\n(10) / (2) = 5, left: 5, 17\n(17) / (5) = 17/5, left: 17/5\n(2) - (10) = -8, left: -8, 17\n(2) * (17) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((2 * (6 + 11)) - 10)"}, {"input": "2 6 10 11\n", "output": "(10) / (6) = 5/3, left: 5/3, 2, 11\n(6) + (10) = 16, left: 16, 2, 11\n(10) / (2) = 5, left: 5, 6, 11\n(11) / (5) = 11/5, left: 11/5, 6\n(2) - (10) = -8, left: -8, 6, 11\n(6) - (2) = 4, left: 4, 10, 11\n(4) / (10) = 2/5, left: 2/5, 11\n(6) / (2) = 3, left: 3, 10, 11\n(10) + (11) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((6 / 2) + (10 + 11))"}, {"input": "2 6 10 11\n", "output": "(2) * (10) = 20, left: 20, 6, 11\n(10) / (2) = 5, left: 5, 6, 11\n(11) - (5) = 6, left: 6, 6\n(2) - (10) = -8, left: -8, 6, 11\n(-8) - (6) = -14, left: -14, 11\n(6) * (-8) = -48, left: -48, 11\n(6) * (11) = 66, left: 66, -8\n(6) + (11) = 17, left: 17, 2, 10\n(2) * (17) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((2 * (6 + 11)) - 10)"}, {"input": "7 3 5 5\n", "output": "(7) + (5) = 12, left: 12, 3, 5\n(3) + (12) = 15, left: 15, 5\n(5) / (3) = 5/3, left: 5/3, 12\n(3) / (5) = 3/5, left: 3/5, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((7 + 5) * (5 - 3))"}, {"input": "7 3 5 5\n", "output": "(3) - (5) = -2, left: -2, 7, 5\n(5) / (7) = 5/7, left: 5/7, -2\n(5) / (3) = 5/3, left: 5/3, 7, 5\n(7) - (5) = 2, left: 2, 5/3\n(3) + (5) = 8, left: 8, 7, 5\n(7) - (5) = 2, left: 2, 8\n(5) - (3) = 2, left: 2, 7, 5\n(2) / (7) = 2/7, left: 2/7, 5\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (7 + 5))"}, {"input": "7 3 5 5\n", "output": "(5) / (5) = 1, left: 1, 7, 3\n(1) / (7) = 1/7, left: 1/7, 3\n(1/7) / (3) = 1/21, left: 1/21\n(7) - (1) = 6, left: 6, 3\n(3) * (6) = 18, left: 18\n(3) - (6) = -3, left: -3\n(7) / (1) = 7, left: 7, 3\n(3) - (7) = -4, left: -4\n(7) + (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 + (5 / 5)))"}, {"input": "7 3 5 5\n", "output": "(7) + (5) = 12, left: 12, 3, 5\n(3) + (12) = 15, left: 15, 5\n(12) - (3) = 9, left: 9, 5\n(12) / (3) = 4, left: 4, 5\n(5) + (4) = 9, left: 9\n(3) - (12) = -9, left: -9, 5\n(5) / (-9) = -5/9, left: -5/9\n(3) - (5) = -2, left: -2, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((7 + 5) * (5 - 3))"}, {"input": "7 3 5 5\n", "output": "(5) / (7) = 5/7, left: 5/7, 3, 5\n(5) - (5/7) = 30/7, left: 30/7, 3\n(5) - (7) = -2, left: -2, 3, 5\n(3) - (-2) = 5, left: 5, 5\n(7) / (5) = 7/5, left: 7/5, 3, 5\n(7) * (5) = 35, left: 35, 3, 5\n(3) * (35) = 105, left: 105, 5\n(7) + (5) = 12, left: 12, 3, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((7 + 5) * (5 - 3))"}, {"input": "7 3 5 5\n", "output": "(5) / (3) = 5/3, left: 5/3, 7, 5\n(7) - (5) = 2, left: 2, 5/3\n(5/3) / (2) = 5/6, left: 5/6\n(3) * (5) = 15, left: 15, 7, 5\n(5) / (7) = 5/7, left: 5/7, 15\n(15) / (5/7) = 21, left: 21\n(7) + (15) = 22, left: 22, 5\n(5) - (3) = 2, left: 2, 7, 5\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (7 + 5))"}, {"input": "7 3 5 5\n", "output": "(5) / (7) = 5/7, left: 5/7, 3, 5\n(5/7) / (3) = 5/21, left: 5/21, 5\n(5) - (7) = -2, left: -2, 3, 5\n(3) / (5) = 3/5, left: 3/5, -2\n(3) / (-2) = -3/2, left: -3/2, 5\n(7) / (5) = 7/5, left: 7/5, 3, 5\n(5) / (7/5) = 25/7, left: 25/7, 3\n(7) * (5) = 35, left: 35, 3, 5\n(7) - (5) = 2, left: 2, 3, 5\n(3) + (5) = 8, left: 8, 2\n(2) * (8) = 16, left: 16\n(7) + (5) = 12, left: 12, 3, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((7 + 5) * (5 - 3))"}, {"input": "7 3 5 5\n", "output": "(3) * (5) = 15, left: 15, 7, 5\n(15) - (7) = 8, left: 8, 5\n(3) - (5) = -2, left: -2, 7, 5\n(5) / (3) = 5/3, left: 5/3, 7, 5\n(7) * (5/3) = 35/3, left: 35/3, 5\n(5/3) - (7) = -16/3, left: -16/3, 5\n(3) + (5) = 8, left: 8, 7, 5\n(7) + (5) = 12, left: 12, 8\n(5) * (8) = 40, left: 40, 7\n(7) - (40) = -33, left: -33\n(5) - (3) = 2, left: 2, 7, 5\n(7) / (5) = 7/5, left: 7/5, 2\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (7 + 5))"}, {"input": "10 2 2 13\n", "output": "(13) - (10) = 3, left: 3, 2, 2\n(2) + (2) = 4, left: 4, 3\n(2) / (2) = 1, left: 1, 3\n(10) + (13) = 23, left: 23, 2, 2\n(2) / (2) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (2 / 2))"}, {"input": "10 2 2 13\n", "output": "(13) / (10) = 13/10, left: 13/10, 2, 2\n(10) + (13) = 23, left: 23, 2, 2\n(2) + (23) = 25, left: 25, 2\n(2) * (2) = 4, left: 4, 23\n(2) / (2) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (2 / 2))"}, {"input": "10 2 2 13\n", "output": "(2) - (13) = -11, left: -11, 10, 2\n(2) * (13) = 26, left: 26, 10, 2\n(10) * (2) = 20, left: 20, 2, 13\n(10) / (2) = 5, left: 5, 2, 13\n(2) - (10) = -8, left: -8, 2, 13\n(13) / (2) = 13/2, left: 13/2, -8\n(10) + (2) = 12, left: 12, 2, 13\n(10) + (13) = 23, left: 23, 2, 2\n(2) / (2) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (2 / 2))"}, {"input": "10 2 2 13\n", "output": "(10) / (13) = 10/13, left: 10/13, 2, 2\n(2) * (2) = 4, left: 4, 10/13\n(10) - (13) = -3, left: -3, 2, 2\n(2) - (-3) = 5, left: 5, 2\n(13) - (10) = 3, left: 3, 2, 2\n(2) - (3) = -1, left: -1, 2\n(2) / (3) = 2/3, left: 2/3, 2\n(10) + (13) = 23, left: 23, 2, 2\n(2) / (2) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (2 / 2))"}, {"input": "10 2 2 13\n", "output": "(13) / (10) = 13/10, left: 13/10, 2, 2\n(2) - (13/10) = 7/10, left: 7/10, 2\n(2) / (13/10) = 20/13, left: 20/13, 2\n(2) - (2) = 0, left: 0, 13/10\n(10) + (13) = 23, left: 23, 2, 2\n(23) - (2) = 21, left: 21, 2\n(2) + (23) = 25, left: 25, 2\n(2) + (23) = 25, left: 25, 2\n(2) / (2) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (2 / 2))"}, {"input": "10 2 2 13\n", "output": "(2) + (13) = 15, left: 15, 10, 2\n(2) / (10) = 1/5, left: 1/5, 2, 13\n(2) / (1/5) = 10, left: 10, 13\n(2) - (10) = -8, left: -8, 2, 13\n(2) + (13) = 15, left: 15, -8\n(-8) - (15) = -23, left: -23\n(2) - (2) = 0, left: 0, 10, 13\n(2) / (2) = 1, left: 1, 10, 13\n(10) + (13) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: ((2 / 2) + (10 + 13))"}, {"input": "10 2 2 13\n", "output": "(2) - (10) = -8, left: -8, 2, 13\n(-8) / (13) = -8/13, left: -8/13, 2\n(10) + (2) = 12, left: 12, 2, 13\n(13) + (12) = 25, left: 25, 2\n(10) - (2) = 8, left: 8, 2, 13\n(8) / (13) = 8/13, left: 8/13, 2\n(2) / (10) = 1/5, left: 1/5, 2, 13\n(10) + (13) = 23, left: 23, 2, 2\n(2) / (2) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (2 / 2))"}, {"input": "8 3 11 8\n", "output": "(3) / (11) = 3/11, left: 3/11, 8, 8\n(8) - (8) = 0, left: 0, 3/11\n(8) * (3/11) = 24/11, left: 24/11, 8\n(11) - (3) = 8, left: 8, 8, 8\n(8) + (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 + (11 - 3)))"}, {"input": "8 3 11 8\n", "output": "(8) - (3) = 5, left: 5, 8, 11\n(8) + (11) = 19, left: 19, 5\n(5) * (19) = 95, left: 95\n(5) - (19) = -14, left: -14\n(19) - (5) = 14, left: 14\n(5) + (19) = 24, left: 24\nreach 24! expression: ((8 - 3) + (8 + 11))"}, {"input": "8 3 11 8\n", "output": "(3) + (11) = 14, left: 14, 8, 8\n(14) - (8) = 6, left: 6, 8\n(8) - (14) = -6, left: -6, 8\n(14) - (8) = 6, left: 6, 8\n(8) * (8) = 64, left: 64, 14\n(11) - (3) = 8, left: 8, 8, 8\n(8) - (8) = 0, left: 0, 8\n(0) - (8) = -8, left: -8\n(8) + (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 + (11 - 3)))"}, {"input": "8 3 11 8\n", "output": "(11) * (8) = 88, left: 88, 8, 3\n(8) + (3) = 11, left: 11, 88\n(3) / (8) = 3/8, left: 3/8, 88\n(8) - (88) = -80, left: -80, 3\n(11) / (8) = 11/8, left: 11/8, 8, 3\n(3) * (11/8) = 33/8, left: 33/8, 8\n(8) - (11) = -3, left: -3, 8, 3\n(11) + (8) = 19, left: 19, 8, 3\n(3) - (19) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (3 - (11 + 8)))"}, {"input": "8 3 11 8\n", "output": "(3) / (11) = 3/11, left: 3/11, 8, 8\n(8) - (8) = 0, left: 0, 3/11\n(8) + (3/11) = 91/11, left: 91/11, 8\n(8) - (3/11) = 85/11, left: 85/11, 8\n(3/11) - (8) = -85/11, left: -85/11, 8\n(8) * (3/11) = 24/11, left: 24/11, 8\n(11) - (3) = 8, left: 8, 8, 8\n(8) / (8) = 1, left: 1, 8\n(8) + (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 + (11 - 3)))"}, {"input": "8 3 11 8\n", "output": "(8) / (3) = 8/3, left: 8/3, 8, 11\n(3) / (8) = 3/8, left: 3/8, 8, 11\n(3/8) / (11) = 3/88, left: 3/88, 8\n(3) + (8) = 11, left: 11, 8, 11\n(11) / (11) = 1, left: 1, 8\n(11) - (11) = 0, left: 0, 8\n(11) / (8) = 11/8, left: 11/8, 11\n(8) - (3) = 5, left: 5, 8, 11\n(8) + (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: ((8 - 3) + (8 + 11))"}, {"input": "8 3 11 8\n", "output": "(8) - (3) = 5, left: 5, 8, 11\n(8) + (11) = 19, left: 19, 5\n(5) * (19) = 95, left: 95\n(5) - (19) = -14, left: -14\n(19) - (5) = 14, left: 14\n(5) + (19) = 24, left: 24\nreach 24! expression: ((8 - 3) + (8 + 11))"}, {"input": "8 3 11 8\n", "output": "(8) - (3) = 5, left: 5, 8, 11\n(8) + (11) = 19, left: 19, 5\n(5) * (19) = 95, left: 95\n(5) - (19) = -14, left: -14\n(19) - (5) = 14, left: 14\n(5) + (19) = 24, left: 24\nreach 24! expression: ((8 - 3) + (8 + 11))"}, {"input": "8 3 11 8\n", "output": "(8) - (3) = 5, left: 5, 8, 11\n(8) + (11) = 19, left: 19, 5\n(5) * (19) = 95, left: 95\n(5) - (19) = -14, left: -14\n(19) - (5) = 14, left: 14\n(5) + (19) = 24, left: 24\nreach 24! expression: ((8 - 3) + (8 + 11))"}, {"input": "1 13 3 5\n", "output": "(3) - (5) = -2, left: -2, 1, 13\n(1) / (-2) = -1/2, left: -1/2, 13\n(13) / (-1/2) = -26, left: -26\n(13) + (-1/2) = 25/2, left: 25/2\n(1) - (13) = -12, left: -12, -2\n(-2) * (-12) = 24, left: 24\nreach 24! expression: ((3 - 5) * (1 - 13))"}, {"input": "1 13 3 5\n", "output": "(1) / (13) = 1/13, left: 1/13, 3, 5\n(13) - (1) = 12, left: 12, 3, 5\n(3) / (5) = 3/5, left: 3/5, 12\n(12) * (3/5) = 36/5, left: 36/5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((13 - 1) * (5 - 3))"}, {"input": "1 13 3 5\n", "output": "(1) * (5) = 5, left: 5, 13, 3\n(13) + (5) = 18, left: 18, 3\n(3) + (18) = 21, left: 21\n(13) / (5) = 13/5, left: 13/5, 3\n(13/5) - (3) = -2/5, left: -2/5\n(5) / (13) = 5/13, left: 5/13, 3\n(13) * (5) = 65, left: 65, 3\n(65) / (3) = 65/3, left: 65/3\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 - (1 * 5)))"}, {"input": "1 13 3 5\n", "output": "(1) + (13) = 14, left: 14, 3, 5\n(5) + (14) = 19, left: 19, 3\n(19) / (3) = 19/3, left: 19/3\n(3) + (14) = 17, left: 17, 5\n(1) / (13) = 1/13, left: 1/13, 3, 5\n(3) / (1/13) = 39, left: 39, 5\n(1/13) - (3) = -38/13, left: -38/13, 5\n(13) - (1) = 12, left: 12, 3, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((13 - 1) * (5 - 3))"}, {"input": "1 13 3 5\n", "output": "(3) - (5) = -2, left: -2, 1, 13\n(-2) / (13) = -2/13, left: -2/13, 1\n(1) / (-2) = -1/2, left: -1/2, 13\n(13) / (-1/2) = -26, left: -26\n(-2) - (1) = -3, left: -3, 13\n(1) + (13) = 14, left: 14, -2\n(1) / (13) = 1/13, left: 1/13, -2\n(1) * (13) = 13, left: 13, -2\n(1) - (13) = -12, left: -12, -2\n(-2) * (-12) = 24, left: 24\nreach 24! expression: ((3 - 5) * (1 - 13))"}, {"input": "1 13 3 5\n", "output": "(1) - (5) = -4, left: -4, 13, 3\n(13) * (3) = 39, left: 39, -4\n(-4) - (3) = -7, left: -7, 13\n(5) - (1) = 4, left: 4, 13, 3\n(13) - (4) = 9, left: 9, 3\n(3) / (13) = 3/13, left: 3/13, 4\n(3) + (4) = 7, left: 7, 13\n(1) * (5) = 5, left: 5, 13, 3\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 - (1 * 5)))"}, {"input": "1 13 3 5\n", "output": "(1) + (5) = 6, left: 6, 13, 3\n(13) - (6) = 7, left: 7, 3\n(3) / (13) = 3/13, left: 3/13, 6\n(1) * (5) = 5, left: 5, 13, 3\n(5) / (3) = 5/3, left: 5/3, 13\n(5/3) / (13) = 5/39, left: 5/39\n(13) / (3) = 13/3, left: 13/3, 5\n(13) - (3) = 10, left: 10, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 - (1 * 5)))"}, {"input": "8 13 5 5\n", "output": "(5) / (13) = 5/13, left: 5/13, 8, 5\n(8) + (5/13) = 109/13, left: 109/13, 5\n(5) - (13) = -8, left: -8, 8, 5\n(-8) / (8) = -1, left: -1, 5\n(5) - (8) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (5 - 8))"}, {"input": "8 13 5 5\n", "output": "(8) * (5) = 40, left: 40, 13, 5\n(40) / (5) = 8, left: 8, 13\n(13) * (5) = 65, left: 65, 40\n(65) - (40) = 25, left: 25\n(5) / (8) = 5/8, left: 5/8, 13, 5\n(5) / (5/8) = 8, left: 8, 13\n(13) + (8) = 21, left: 21\n(8) - (5) = 3, left: 3, 13, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((8 - 5) * (13 - 5))"}, {"input": "8 13 5 5\n", "output": "(5) / (5) = 1, left: 1, 8, 13\n(13) + (1) = 14, left: 14, 8\n(8) + (1) = 9, left: 9, 13\n(13) - (9) = 4, left: 4\n(5) * (5) = 25, left: 25, 8, 13\n(25) / (13) = 25/13, left: 25/13, 8\n(5) + (5) = 10, left: 10, 8, 13\n(10) - (8) = 2, left: 2, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (5 + 5)))"}, {"input": "8 13 5 5\n", "output": "(8) * (13) = 104, left: 104, 5, 5\n(104) - (5) = 99, left: 99, 5\n(13) / (8) = 13/8, left: 13/8, 5, 5\n(5) / (13/8) = 40/13, left: 40/13, 5\n(8) - (13) = -5, left: -5, 5, 5\n(5) / (5) = 1, left: 1, -5\n(-5) / (1) = -5, left: -5\n(8) - (5) = 3, left: 3, 13, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((8 - 5) * (13 - 5))"}, {"input": "8 13 5 5\n", "output": "(5) / (13) = 5/13, left: 5/13, 8, 5\n(5/13) - (5) = -60/13, left: -60/13, 8\n(8) * (-60/13) = -480/13, left: -480/13\n(8) / (5) = 8/5, left: 8/5, 5/13\n(8) / (5/13) = 104/5, left: 104/5, 5\n(5) - (13) = -8, left: -8, 8, 5\n(-8) - (8) = -16, left: -16, 5\n(-8) / (8) = -1, left: -1, 5\n(5) - (8) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (5 - 8))"}, {"input": "8 13 5 5\n", "output": "(5) - (5) = 0, left: 0, 8, 13\n(13) - (8) = 5, left: 5, 0\n(0) * (5) = 0, left: 0\n(5) / (5) = 1, left: 1, 8, 13\n(13) - (1) = 12, left: 12, 8\n(5) / (5) = 1, left: 1, 8, 13\n(8) / (13) = 8/13, left: 8/13, 1\n(5) + (5) = 10, left: 10, 8, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (5 + 5)))"}, {"input": "5 11 1 5\n", "output": "(5) / (11) = 5/11, left: 5/11, 1, 5\n(5) + (5/11) = 60/11, left: 60/11, 1\n(1) - (5) = -4, left: -4, 5/11\n(5) - (11) = -6, left: -6, 1, 5\n(1) - (5) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((5 - 11) * (1 - 5))"}, {"input": "5 11 1 5\n", "output": "(5) / (11) = 5/11, left: 5/11, 1, 5\n(5) + (11) = 16, left: 16, 1, 5\n(5) / (1) = 5, left: 5, 16\n(5) - (11) = -6, left: -6, 1, 5\n(1) + (-6) = -5, left: -5, 5\n(-6) / (1) = -6, left: -6, 5\n(-6) - (1) = -7, left: -7, 5\n(1) - (-6) = 7, left: 7, 5\n(1) - (5) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((5 - 11) * (1 - 5))"}, {"input": "5 11 1 5\n", "output": "(1) / (11) = 1/11, left: 1/11, 5, 5\n(11) / (1) = 11, left: 11, 5, 5\n(1) - (11) = -10, left: -10, 5, 5\n(5) - (-10) = 15, left: 15, 5\n(11) / (5) = 11/5, left: 11/5, 5, 1\n(1) / (11/5) = 5/11, left: 5/11, 5\n(11) - (5) = 6, left: 6, 5, 1\n(5) * (6) = 30, left: 30, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((11 - 5) * (5 - 1))"}, {"input": "5 11 1 5\n", "output": "(11) * (5) = 55, left: 55, 5, 1\n(11) / (5) = 11/5, left: 11/5, 5, 1\n(5) + (1) = 6, left: 6, 11/5\n(5) / (11) = 5/11, left: 5/11, 5, 1\n(1) / (5/11) = 11/5, left: 11/5, 5\n(1) + (5/11) = 16/11, left: 16/11, 5\n(5) / (1) = 5, left: 5, 5/11\n(11) - (5) = 6, left: 6, 5, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((11 - 5) * (5 - 1))"}, {"input": "5 11 1 5\n", "output": "(1) + (5) = 6, left: 6, 5, 11\n(6) / (11) = 6/11, left: 6/11, 5\n(5) / (6) = 5/6, left: 5/6, 11\n(11) + (5/6) = 71/6, left: 71/6\n(1) / (5) = 1/5, left: 1/5, 5, 11\n(11) * (1/5) = 11/5, left: 11/5, 5\n(5) - (1) = 4, left: 4, 5, 11\n(5) - (4) = 1, left: 1, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((5 - 1) * (11 - 5))"}, {"input": "5 11 1 5\n", "output": "(1) - (5) = -4, left: -4, 5, 11\n(11) + (-4) = 7, left: 7, 5\n(11) / (-4) = -11/4, left: -11/4, 5\n(11) - (-4) = 15, left: 15, 5\n(11) * (-4) = -44, left: -44, 5\n(5) + (-4) = 1, left: 1, 11\n(11) - (1) = 10, left: 10\n(5) * (-4) = -20, left: -20, 11\n(5) - (11) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((1 - 5) * (5 - 11))"}, {"input": "5 11 1 5\n", "output": "(1) / (11) = 1/11, left: 1/11, 5, 5\n(11) / (1) = 11, left: 11, 5, 5\n(11) - (5) = 6, left: 6, 5\n(1) - (11) = -10, left: -10, 5, 5\n(5) * (-10) = -50, left: -50, 5\n(11) + (1) = 12, left: 12, 5, 5\n(11) - (1) = 10, left: 10, 5, 5\n(5) - (10) = -5, left: -5, 5\n(5) - (-5) = 10, left: 10\n(11) * (1) = 11, left: 11, 5, 5\n(5) + (5) = 10, left: 10, 11\n(11) - (5) = 6, left: 6, 5, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((11 - 5) * (5 - 1))"}, {"input": "4 5 8 11\n", "output": "(4) * (5) = 20, left: 20, 8, 11\n(4) / (5) = 4/5, left: 4/5, 8, 11\n(4) + (5) = 9, left: 9, 8, 11\n(11) - (8) = 3, left: 3, 9\n(9) - (3) = 6, left: 6\n(4) - (5) = -1, left: -1, 8, 11\n(4) / (11) = 4/11, left: 4/11, 5, 8\n(4) + (11) = 15, left: 15, 5, 8\n(15) / (5) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((4 + 11) / 5))"}, {"input": "4 5 8 11\n", "output": "(5) + (11) = 16, left: 16, 4, 8\n(16) / (8) = 2, left: 2, 4\n(8) - (16) = -8, left: -8, 4\n(5) * (11) = 55, left: 55, 4, 8\n(55) / (8) = 55/8, left: 55/8, 4\n(11) / (5) = 11/5, left: 11/5, 4, 8\n(11) - (5) = 6, left: 6, 4, 8\n(6) / (8) = 3/4, left: 3/4, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((11 - 5) * (8 - 4))"}, {"input": "4 5 8 11\n", "output": "(11) - (4) = 7, left: 7, 5, 8\n(4) * (11) = 44, left: 44, 5, 8\n(8) - (5) = 3, left: 3, 44\n(5) * (8) = 40, left: 40, 44\n(8) / (44) = 2/11, left: 2/11, 5\n(11) / (4) = 11/4, left: 11/4, 5, 8\n(11/4) - (5) = -9/4, left: -9/4, 8\n(4) + (11) = 15, left: 15, 5, 8\n(5) / (8) = 5/8, left: 5/8, 15\n(15) / (5/8) = 24, left: 24\nreach 24! expression: ((4 + 11) / (5 / 8))"}, {"input": "4 5 8 11\n", "output": "(4) + (5) = 9, left: 9, 8, 11\n(9) / (8) = 9/8, left: 9/8, 11\n(4) / (5) = 4/5, left: 4/5, 8, 11\n(5) - (4) = 1, left: 1, 8, 11\n(4) / (8) = 1/2, left: 1/2, 5, 11\n(11) / (1/2) = 22, left: 22, 5\n(4) - (8) = -4, left: -4, 5, 11\n(5) * (11) = 55, left: 55, -4\n(5) - (11) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((4 - 8) * (5 - 11))"}, {"input": "4 5 8 11\n", "output": "(8) * (11) = 88, left: 88, 4, 5\n(4) / (88) = 1/22, left: 1/22, 5\n(11) / (8) = 11/8, left: 11/8, 4, 5\n(4) + (5) = 9, left: 9, 11/8\n(8) - (11) = -3, left: -3, 4, 5\n(5) - (-3) = 8, left: 8, 4\n(11) - (8) = 3, left: 3, 4, 5\n(4) + (11) = 15, left: 15, 5, 8\n(5) / (15) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (5 / (4 + 11)))"}, {"input": "11 2 4 8\n", "output": "(11) * (2) = 22, left: 22, 4, 8\n(4) / (22) = 2/11, left: 2/11, 8\n(22) / (8) = 11/4, left: 11/4, 4\n(4) + (8) = 12, left: 12, 22\n(8) / (4) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 * 2) + (8 / 4))"}, {"input": "11 2 4 8\n", "output": "(11) + (8) = 19, left: 19, 2, 4\n(11) / (8) = 11/8, left: 11/8, 2, 4\n(8) - (11) = -3, left: -3, 2, 4\n(4) * (-3) = -12, left: -12, 2\n(8) / (11) = 8/11, left: 8/11, 2, 4\n(4) / (8/11) = 11/2, left: 11/2, 2\n(11) - (8) = 3, left: 3, 2, 4\n(2) - (4) = -2, left: -2, 3\n(2) * (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((11 - 8) * (2 * 4))"}, {"input": "11 2 4 8\n", "output": "(4) - (11) = -7, left: -7, 2, 8\n(2) * (8) = 16, left: 16, -7\n(11) + (4) = 15, left: 15, 2, 8\n(2) * (15) = 30, left: 30, 8\n(8) + (15) = 23, left: 23, 2\n(11) / (4) = 11/4, left: 11/4, 2, 8\n(11/4) / (2) = 11/8, left: 11/8, 8\n(8) / (11/4) = 32/11, left: 32/11, 2\n(8) * (11/4) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (8 * (11 / 4)))"}, {"input": "11 2 4 8\n", "output": "(11) * (2) = 22, left: 22, 4, 8\n(4) + (22) = 26, left: 26, 8\n(8) - (22) = -14, left: -14, 4\n(22) - (8) = 14, left: 14, 4\n(8) + (22) = 30, left: 30, 4\n(4) - (30) = -26, left: -26\n(4) + (8) = 12, left: 12, 22\n(22) / (12) = 11/6, left: 11/6\n(8) / (4) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 * 2) + (8 / 4))"}, {"input": "11 2 4 8\n", "output": "(2) / (8) = 1/4, left: 1/4, 11, 4\n(4) / (11) = 4/11, left: 4/11, 1/4\n(2) + (8) = 10, left: 10, 11, 4\n(8) / (2) = 4, left: 4, 11, 4\n(11) / (4) = 11/4, left: 11/4, 4\n(11) + (2) = 13, left: 13, 4, 8\n(11) * (2) = 22, left: 22, 4, 8\n(4) / (8) = 1/2, left: 1/2, 22\n(8) / (4) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 * 2) + (8 / 4))"}, {"input": "11 2 4 8\n", "output": "(11) - (8) = 3, left: 3, 2, 4\n(2) + (4) = 6, left: 6, 3\n(2) - (4) = -2, left: -2, 3\n(3) + (-2) = 1, left: 1\n(4) - (2) = 2, left: 2, 3\n(4) / (2) = 2, left: 2, 3\n(2) - (3) = -1, left: -1\n(2) * (4) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: ((11 - 8) * (2 * 4))"}, {"input": "1 7 12 4\n", "output": "(4) - (12) = -8, left: -8, 1, 7\n(-8) / (7) = -8/7, left: -8/7, 1\n(-8/7) / (1) = -8/7, left: -8/7\n(4) / (12) = 1/3, left: 1/3, 1, 7\n(1) + (7) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((1 + 7) / (4 / 12))"}, {"input": "1 7 12 4\n", "output": "(1) * (7) = 7, left: 7, 12, 4\n(4) + (7) = 11, left: 11, 12\n(4) / (7) = 4/7, left: 4/7, 12\n(12) * (4/7) = 48/7, left: 48/7\n(12) + (4) = 16, left: 16, 7\n(7) / (1) = 7, left: 7, 12, 4\n(1) - (7) = -6, left: -6, 12, 4\n(4) - (12) = -8, left: -8, -6\n(12) + (-6) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (12 + (1 - 7)))"}, {"input": "1 7 12 4\n", "output": "(1) / (12) = 1/12, left: 1/12, 7, 4\n(1/12) / (7) = 1/84, left: 1/84, 4\n(1) * (12) = 12, left: 12, 7, 4\n(12) / (4) = 3, left: 3, 7\n(12) - (1) = 11, left: 11, 7, 4\n(11) / (4) = 11/4, left: 11/4, 7\n(11/4) - (7) = -17/4, left: -17/4\n(1) + (12) = 13, left: 13, 7, 4\n(4) + (13) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (4 + (1 + 12)))"}, {"input": "1 7 12 4\n", "output": "(4) - (12) = -8, left: -8, 1, 7\n(7) + (-8) = -1, left: -1, 1\n(1) / (7) = 1/7, left: 1/7, -8\n(7) / (1) = 7, left: 7, -8\n(1) * (7) = 7, left: 7, -8\n(-8) / (1) = -8, left: -8, 7\n(7) / (-8) = -7/8, left: -7/8\n(4) / (12) = 1/3, left: 1/3, 1, 7\n(1) + (7) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((1 + 7) / (4 / 12))"}, {"input": "1 7 12 4\n", "output": "(1) * (12) = 12, left: 12, 7, 4\n(1) / (12) = 1/12, left: 1/12, 7, 4\n(7) / (1/12) = 84, left: 84, 4\n(12) / (1) = 12, left: 12, 7, 4\n(12) - (1) = 11, left: 11, 7, 4\n(4) / (7) = 4/7, left: 4/7, 11\n(11) - (7) = 4, left: 4, 4\n(1) + (12) = 13, left: 13, 7, 4\n(4) + (13) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (4 + (1 + 12)))"}, {"input": "4 4 6 13\n", "output": "(4) / (4) = 1, left: 1, 6, 13\n(1) / (13) = 1/13, left: 1/13, 6\n(4) * (6) = 24, left: 24, 4, 13\n(13) / (4) = 13/4, left: 13/4, 24\n(4) - (6) = -2, left: -2, 4, 13\n(6) + (13) = 19, left: 19, 4, 4\n(4) / (4) = 1, left: 1, 19\n(13) - (6) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) - (4) = 0, left: 0, 6, 13\n(4) + (4) = 8, left: 8, 6, 13\n(4) / (4) = 1, left: 1, 6, 13\n(6) / (13) = 6/13, left: 6/13, 1\n(4) - (4) = 0, left: 0, 6, 13\n(6) - (13) = -7, left: -7, 4, 4\n(4) / (-7) = -4/7, left: -4/7, 4\n(13) - (6) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) / (4) = 1, left: 1, 6, 13\n(6) * (13) = 78, left: 78, 1\n(4) - (4) = 0, left: 0, 6, 13\n(0) / (13) = 0, left: 0, 6\n(4) + (13) = 17, left: 17, 4, 6\n(4) - (13) = -9, left: -9, 4, 6\n(6) * (13) = 78, left: 78, 4, 4\n(13) - (6) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) - (13) = -9, left: -9, 4, 6\n(4) - (-9) = 13, left: 13, 6\n(4) - (6) = -2, left: -2, 4, 13\n(6) - (4) = 2, left: 2, 4, 13\n(13) * (2) = 26, left: 26, 4\n(6) / (4) = 3/2, left: 3/2, 4, 13\n(4) * (6) = 24, left: 24, 4, 13\n(13) - (6) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) * (6) = 24, left: 24, 4, 13\n(4) * (4) = 16, left: 16, 6, 13\n(4) / (4) = 1, left: 1, 6, 13\n(6) * (1) = 6, left: 6, 13\n(4) / (4) = 1, left: 1, 6, 13\n(13) / (6) = 13/6, left: 13/6, 1\n(4) - (13) = -9, left: -9, 4, 6\n(13) - (6) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) / (4) = 1, left: 1, 6, 13\n(13) - (6) = 7, left: 7, 1\n(1) + (7) = 8, left: 8\n(4) + (4) = 8, left: 8, 6, 13\n(13) * (8) = 104, left: 104, 6\n(13) / (6) = 13/6, left: 13/6, 8\n(4) / (6) = 2/3, left: 2/3, 4, 13\n(4) + (6) = 10, left: 10, 4, 13\n(6) - (4) = 2, left: 2, 4, 13\n(4) * (6) = 24, left: 24, 4, 13\n(24) - (13) = 11, left: 11, 4\n(13) - (6) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) * (6) = 24, left: 24, 4, 13\n(4) / (6) = 2/3, left: 2/3, 4, 13\n(6) / (4) = 3/2, left: 3/2, 4, 13\n(4) + (6) = 10, left: 10, 4, 13\n(4) / (10) = 2/5, left: 2/5, 13\n(4) / (4) = 1, left: 1, 6, 13\n(13) / (1) = 13, left: 13, 6\n(13) / (4) = 13/4, left: 13/4, 4, 6\n(4) * (13) = 52, left: 52, 4, 6\n(4) - (13) = -9, left: -9, 4, 6\n(13) - (6) = 7, left: 7, 4, 4\n(4) - (7) = -3, left: -3, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(13) / (4) = 13/4, left: 13/4, 4, 6\n(4) - (6) = -2, left: -2, 4, 13\n(4) + (-2) = 2, left: 2, 13\n(13) * (2) = 26, left: 26\n(4) / (-2) = -2, left: -2, 13\n(13) * (-2) = -26, left: -26\n(4) * (6) = 24, left: 24, 4, 13\n(6) / (4) = 3/2, left: 3/2, 4, 13\n(3/2) - (4) = -5/2, left: -5/2, 13\n(4) - (6) = -2, left: -2, 4, 13\n(4) - (13) = -9, left: -9, -2\n(13) - (6) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) - (4) = 0, left: 0, 6, 13\n(13) * (0) = 0, left: 0, 6\n(4) + (4) = 8, left: 8, 6, 13\n(13) - (6) = 7, left: 7, 8\n(8) - (7) = 1, left: 1\n(4) * (4) = 16, left: 16, 6, 13\n(13) / (16) = 13/16, left: 13/16, 6\n(4) / (4) = 1, left: 1, 6, 13\n(13) * (1) = 13, left: 13, 6\n(4) - (4) = 0, left: 0, 6, 13\n(6) - (13) = -7, left: -7, 4, 4\n(13) - (6) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) / (4) = 1, left: 1, 6, 13\n(4) + (4) = 8, left: 8, 6, 13\n(4) * (4) = 16, left: 16, 6, 13\n(6) * (13) = 78, left: 78, 16\n(4) - (4) = 0, left: 0, 6, 13\n(13) / (4) = 13/4, left: 13/4, 4, 6\n(4) + (13) = 17, left: 17, 4, 6\n(4) * (13) = 52, left: 52, 4, 6\n(4) - (52) = -48, left: -48, 6\n(6) / (-48) = -1/8, left: -1/8\n(13) / (6) = 13/6, left: 13/6, 4, 4\n(13) - (6) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "12 5 4 6\n", "output": "(4) + (6) = 10, left: 10, 12, 5\n(12) + (5) = 17, left: 17, 10\n(12) - (5) = 7, left: 7, 10\n(12) * (5) = 60, left: 60, 10\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: ((4 + 6) * (12 / 5))"}, {"input": "12 5 4 6\n", "output": "(12) / (6) = 2, left: 2, 5, 4\n(2) - (4) = -2, left: -2, 5\n(12) * (6) = 72, left: 72, 5, 4\n(5) + (72) = 77, left: 77, 4\n(12) + (5) = 17, left: 17, 4, 6\n(4) / (6) = 2/3, left: 2/3, 17\n(12) / (5) = 12/5, left: 12/5, 4, 6\n(6) / (4) = 3/2, left: 3/2, 12/5\n(4) + (6) = 10, left: 10, 12/5\n(12/5) * (10) = 24, left: 24\nreach 24! expression: ((12 / 5) * (4 + 6))"}, {"input": "12 5 4 6\n", "output": "(5) - (6) = -1, left: -1, 12, 4\n(5) * (6) = 30, left: 30, 12, 4\n(30) / (4) = 15/2, left: 15/2, 12\n(5) / (4) = 5/4, left: 5/4, 12, 6\n(12) * (6) = 72, left: 72, 5, 4\n(12) - (6) = 6, left: 6, 5, 4\n(12) / (6) = 2, left: 2, 5, 4\n(4) + (6) = 10, left: 10, 12, 5\n(12) * (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * (4 + 6)) / 5)"}, {"input": "12 5 4 6\n", "output": "(4) + (6) = 10, left: 10, 12, 5\n(12) + (5) = 17, left: 17, 10\n(10) * (17) = 170, left: 170\n(12) - (5) = 7, left: 7, 10\n(7) - (10) = -3, left: -3\n(10) / (7) = 10/7, left: 10/7\n(12) * (5) = 60, left: 60, 10\n(60) - (10) = 50, left: 50\n(12) / (5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: ((4 + 6) * (12 / 5))"}, {"input": "12 5 4 6\n", "output": "(6) / (12) = 1/2, left: 1/2, 5, 4\n(1/2) / (4) = 1/8, left: 1/8, 5\n(6) - (5) = 1, left: 1, 12, 4\n(5) - (4) = 1, left: 1, 12, 6\n(1) / (12) = 1/12, left: 1/12, 6\n(5) * (4) = 20, left: 20, 12, 6\n(12) / (6) = 2, left: 2, 20\n(5) / (12) = 5/12, left: 5/12, 4, 6\n(4) + (6) = 10, left: 10, 5/12\n(10) / (5/12) = 24, left: 24\nreach 24! expression: ((4 + 6) / (5 / 12))"}, {"input": "12 5 4 6\n", "output": "(4) / (6) = 2/3, left: 2/3, 12, 5\n(5) / (12) = 5/12, left: 5/12, 2/3\n(6) - (4) = 2, left: 2, 12, 5\n(5) / (12) = 5/12, left: 5/12, 2\n(12) + (5) = 17, left: 17, 2\n(12) + (2) = 14, left: 14, 5\n(6) / (4) = 3/2, left: 3/2, 12, 5\n(4) + (6) = 10, left: 10, 12, 5\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((4 + 6) / 5))"}, {"input": "12 5 4 6\n", "output": "(5) - (4) = 1, left: 1, 12, 6\n(5) + (4) = 9, left: 9, 12, 6\n(12) + (9) = 21, left: 21, 6\n(5) * (4) = 20, left: 20, 12, 6\n(20) - (12) = 8, left: 8, 6\n(12) * (6) = 72, left: 72, 5, 4\n(72) / (5) = 72/5, left: 72/5, 4\n(6) / (12) = 1/2, left: 1/2, 5, 4\n(12) - (6) = 6, left: 6, 5, 4\n(6) - (4) = 2, left: 2, 12, 5\n(5) - (2) = 3, left: 3, 12\n(4) + (6) = 10, left: 10, 12, 5\n(12) * (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * (4 + 6)) / 5)"}, {"input": "12 5 10 10\n", "output": "(5) / (10) = 1/2, left: 1/2, 12, 10\n(10) * (1/2) = 5, left: 5, 12\n(5) / (12) = 5/12, left: 5/12\n(10) / (5) = 2, left: 2, 12, 10\n(12) + (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (12 + (10 / 5)))"}, {"input": "12 5 10 10\n", "output": "(5) - (10) = -5, left: -5, 12, 10\n(10) / (-5) = -2, left: -2, 12\n(-2) - (12) = -14, left: -14\n(10) - (5) = 5, left: 5, 12, 10\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((10 - 5) / 10))"}, {"input": "12 5 10 10\n", "output": "(10) / (12) = 5/6, left: 5/6, 5, 10\n(5/6) - (5) = -25/6, left: -25/6, 10\n(5) - (10) = -5, left: -5, 5/6\n(12) * (10) = 120, left: 120, 5, 10\n(10) - (5) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (10 - 5))"}, {"input": "12 5 10 10\n", "output": "(12) / (5) = 12/5, left: 12/5, 10, 10\n(10) * (12/5) = 24, left: 24, 10\n(12) - (10) = 2, left: 2, 5, 10\n(12) + (10) = 22, left: 22, 5, 10\n(10) / (5) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((12 + 10) + (10 / 5))"}, {"input": "12 5 10 10\n", "output": "(5) + (10) = 15, left: 15, 12, 10\n(15) / (10) = 3/2, left: 3/2, 12\n(5) - (10) = -5, left: -5, 12, 10\n(10) / (5) = 2, left: 2, 12, 10\n(12) + (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (12 + (10 / 5)))"}, {"input": "12 5 10 10\n", "output": "(5) * (10) = 50, left: 50, 12, 10\n(12) / (50) = 6/25, left: 6/25, 10\n(10) / (50) = 1/5, left: 1/5, 12\n(1/5) - (12) = -59/5, left: -59/5\n(12) / (10) = 6/5, left: 6/5, 50\n(5) / (10) = 1/2, left: 1/2, 12, 10\n(10) + (1/2) = 21/2, left: 21/2, 12\n(10) / (5) = 2, left: 2, 12, 10\n(12) + (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (12 + (10 / 5)))"}, {"input": "12 5 10 10\n", "output": "(12) - (10) = 2, left: 2, 5, 10\n(2) / (5) = 2/5, left: 2/5, 10\n(10) / (12) = 5/6, left: 5/6, 5, 10\n(5) * (5/6) = 25/6, left: 25/6, 10\n(10) * (25/6) = 125/3, left: 125/3\n(5) - (10) = -5, left: -5, 5/6\n(-5) / (5/6) = -6, left: -6\n(12) * (10) = 120, left: 120, 5, 10\n(10) - (5) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (10 - 5))"}, {"input": "12 5 10 10\n", "output": "(5) + (10) = 15, left: 15, 12, 10\n(10) - (15) = -5, left: -5, 12\n(5) - (10) = -5, left: -5, 12, 10\n(12) - (-5) = 17, left: 17, 10\n(10) / (12) = 5/6, left: 5/6, -5\n(12) * (10) = 120, left: 120, -5\n(-5) / (120) = -1/24, left: -1/24\n(10) / (5) = 2, left: 2, 12, 10\n(12) + (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (12 + (10 / 5)))"}, {"input": "12 5 10 10\n", "output": "(5) - (10) = -5, left: -5, 12, 10\n(-5) / (10) = -1/2, left: -1/2, 12\n(-5) - (10) = -15, left: -15, 12\n(10) - (12) = -2, left: -2, -5\n(-2) - (-5) = 3, left: 3\n(12) * (10) = 120, left: 120, -5\n(12) - (10) = 2, left: 2, -5\n(10) - (5) = 5, left: 5, 12, 10\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((10 - 5) / 10))"}, {"input": "12 5 10 10\n", "output": "(12) * (5) = 60, left: 60, 10, 10\n(5) / (12) = 5/12, left: 5/12, 10, 10\n(10) + (5/12) = 125/12, left: 125/12, 10\n(5) - (12) = -7, left: -7, 10, 10\n(12) - (5) = 7, left: 7, 10, 10\n(12) - (10) = 2, left: 2, 5, 10\n(2) - (5) = -3, left: -3, 10\n(12) + (10) = 22, left: 22, 5, 10\n(10) / (5) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((12 + 10) + (10 / 5))"}, {"input": "3 13 5 8\n", "output": "(8) / (3) = 8/3, left: 8/3, 13, 5\n(13) + (5) = 18, left: 18, 8/3\n(8/3) + (18) = 62/3, left: 62/3\n(3) + (13) = 16, left: 16, 5, 8\n(5) * (8) = 40, left: 40, 16\n(40) - (16) = 24, left: 24\nreach 24! expression: ((5 * 8) - (3 + 13))"}, {"input": "3 13 5 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 3, 13\n(13) - (5/8) = 99/8, left: 99/8, 3\n(8) - (5) = 3, left: 3, 3, 13\n(3) * (13) = 39, left: 39, 3\n(5) + (8) = 13, left: 13, 3, 13\n(3) + (13) = 16, left: 16, 13\n(5) * (8) = 40, left: 40, 3, 13\n(13) * (40) = 520, left: 520, 3\n(40) - (13) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: (((5 * 8) - 13) - 3)"}, {"input": "3 13 5 8\n", "output": "(3) / (8) = 3/8, left: 3/8, 13, 5\n(3) + (8) = 11, left: 11, 13, 5\n(5) * (11) = 55, left: 55, 13\n(3) - (5) = -2, left: -2, 13, 8\n(3) * (5) = 15, left: 15, 13, 8\n(8) / (15) = 8/15, left: 8/15, 13\n(5) / (3) = 5/3, left: 5/3, 13, 8\n(5) * (8) = 40, left: 40, 3, 13\n(3) + (13) = 16, left: 16, 40\n(40) - (16) = 24, left: 24\nreach 24! expression: ((5 * 8) - (3 + 13))"}, {"input": "3 13 5 8\n", "output": "(13) - (5) = 8, left: 8, 3, 8\n(3) - (8) = -5, left: -5, 8\n(8) * (-5) = -40, left: -40\n(13) * (5) = 65, left: 65, 3, 8\n(3) - (8) = -5, left: -5, 13, 5\n(3) + (8) = 11, left: 11, 13, 5\n(13) - (3) = 10, left: 10, 5, 8\n(3) + (13) = 16, left: 16, 5, 8\n(5) * (8) = 40, left: 40, 16\n(40) - (16) = 24, left: 24\nreach 24! expression: ((5 * 8) - (3 + 13))"}, {"input": "3 13 5 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 3, 13\n(13) / (5/8) = 104/5, left: 104/5, 3\n(5) + (8) = 13, left: 13, 3, 13\n(13) / (13) = 1, left: 1, 3\n(8) - (5) = 3, left: 3, 3, 13\n(3) - (3) = 0, left: 0, 13\n(8) / (5) = 8/5, left: 8/5, 3, 13\n(5) * (8) = 40, left: 40, 3, 13\n(40) - (13) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: (((5 * 8) - 13) - 3)"}, {"input": "3 13 5 8\n", "output": "(3) * (8) = 24, left: 24, 13, 5\n(5) - (13) = -8, left: -8, 24\n(5) - (8) = -3, left: -3, 3, 13\n(3) - (13) = -10, left: -10, -3\n(5) / (8) = 5/8, left: 5/8, 3, 13\n(13) - (5/8) = 99/8, left: 99/8, 3\n(3) / (13) = 3/13, left: 3/13, 5/8\n(5) * (8) = 40, left: 40, 3, 13\n(3) + (13) = 16, left: 16, 40\n(40) - (16) = 24, left: 24\nreach 24! expression: ((5 * 8) - (3 + 13))"}, {"input": "3 13 5 8\n", "output": "(13) + (5) = 18, left: 18, 3, 8\n(5) - (13) = -8, left: -8, 3, 8\n(3) * (8) = 24, left: 24, -8\n(-8) + (24) = 16, left: 16\n(13) / (5) = 13/5, left: 13/5, 3, 8\n(3) - (8) = -5, left: -5, 13, 5\n(8) - (3) = 5, left: 5, 13, 5\n(5) - (5) = 0, left: 0, 13\n(3) + (8) = 11, left: 11, 13, 5\n(11) / (5) = 11/5, left: 11/5, 13\n(3) * (13) = 39, left: 39, 5, 8\n(3) + (13) = 16, left: 16, 5, 8\n(5) * (8) = 40, left: 40, 16\n(40) - (16) = 24, left: 24\nreach 24! expression: ((5 * 8) - (3 + 13))"}, {"input": "1 8 8 7\n", "output": "(8) / (1) = 8, left: 8, 8, 7\n(8) / (7) = 8/7, left: 8/7, 8\n(8) / (8/7) = 7, left: 7\n(7) / (8) = 7/8, left: 7/8, 8\n(8) + (7) = 15, left: 15, 8\n(15) - (8) = 7, left: 7\n(8) - (7) = 1, left: 1, 8\n(1) + (8) = 9, left: 9, 8, 7\n(7) + (9) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (7 + (1 + 8)))"}, {"input": "1 8 8 7\n", "output": "(8) + (7) = 15, left: 15, 1, 8\n(1) - (8) = -7, left: -7, 15\n(-7) / (15) = -7/15, left: -7/15\n(15) / (-7) = -15/7, left: -15/7\n(8) / (1) = 8, left: 8, 15\n(15) / (8) = 15/8, left: 15/8\n(8) - (1) = 7, left: 7, 15\n(7) - (15) = -8, left: -8\n(1) + (8) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((8 + 7) + (1 + 8))"}, {"input": "1 8 8 7\n", "output": "(8) - (7) = 1, left: 1, 1, 8\n(8) - (1) = 7, left: 7, 1\n(7) / (8) = 7/8, left: 7/8, 1, 8\n(1) + (8) = 9, left: 9, 7/8\n(9) - (7/8) = 65/8, left: 65/8\n(1) / (8) = 1/8, left: 1/8, 7/8\n(1/8) / (7/8) = 1/7, left: 1/7\n(8) + (7) = 15, left: 15, 1, 8\n(1) + (8) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((8 + 7) + (1 + 8))"}, {"input": "1 8 8 7\n", "output": "(8) - (1) = 7, left: 7, 8, 7\n(8) * (7) = 56, left: 56, 7\n(7) / (7) = 1, left: 1, 8\n(7) - (7) = 0, left: 0, 8\n(1) / (8) = 1/8, left: 1/8, 8, 7\n(8) - (7) = 1, left: 1, 1/8\n(1) - (1/8) = 7/8, left: 7/8\n(1) + (8) = 9, left: 9, 8, 7\n(8) + (7) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((1 + 8) + (8 + 7))"}, {"input": "1 8 8 7\n", "output": "(8) - (7) = 1, left: 1, 1, 8\n(1) * (1) = 1, left: 1, 8\n(8) - (1) = 7, left: 7, 1\n(1) * (7) = 7, left: 7\n(7) / (8) = 7/8, left: 7/8, 1, 8\n(1) / (7/8) = 8/7, left: 8/7, 8\n(8) * (8/7) = 64/7, left: 64/7\n(8) + (7) = 15, left: 15, 1, 8\n(1) + (8) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((8 + 7) + (1 + 8))"}, {"input": "12 8 8 8\n", "output": "(12) * (8) = 96, left: 96, 8, 8\n(8) * (96) = 768, left: 768, 8\n(8) - (96) = -88, left: -88, 8\n(12) / (8) = 3/2, left: 3/2, 8, 8\n(8) + (8) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((12 / 8) * (8 + 8))"}, {"input": "12 8 8 8\n", "output": "(8) / (12) = 2/3, left: 2/3, 8, 8\n(8) + (8) = 16, left: 16, 2/3\n(2/3) + (16) = 50/3, left: 50/3\n(2/3) / (16) = 1/24, left: 1/24\n(2/3) - (16) = -46/3, left: -46/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((8 + 8) / (8 / 12))"}, {"input": "12 8 8 8\n", "output": "(12) * (8) = 96, left: 96, 8, 8\n(8) / (8) = 1, left: 1, 96\n(8) + (96) = 104, left: 104, 8\n(96) / (8) = 12, left: 12, 8\n(8) + (96) = 104, left: 104, 8\n(104) - (8) = 96, left: 96\n(12) / (8) = 3/2, left: 3/2, 8, 8\n(8) + (3/2) = 19/2, left: 19/2, 8\n(8) + (8) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((12 / 8) * (8 + 8))"}, {"input": "12 8 8 8\n", "output": "(12) * (8) = 96, left: 96, 8, 8\n(96) / (8) = 12, left: 12, 8\n(8) + (8) = 16, left: 16, 96\n(8) * (8) = 64, left: 64, 96\n(8) / (8) = 1, left: 1, 96\n(8) * (96) = 768, left: 768, 8\n(12) - (8) = 4, left: 4, 8, 8\n(8) + (4) = 12, left: 12, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (12 - 8)) - 8)"}, {"input": "12 8 8 8\n", "output": "(8) / (12) = 2/3, left: 2/3, 8, 8\n(8) + (8) = 16, left: 16, 2/3\n(2/3) + (16) = 50/3, left: 50/3\n(2/3) * (16) = 32/3, left: 32/3\n(2/3) / (16) = 1/24, left: 1/24\n(2/3) - (16) = -46/3, left: -46/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((8 + 8) / (8 / 12))"}, {"input": "12 8 8 8\n", "output": "(8) - (8) = 0, left: 0, 12, 8\n(0) / (8) = 0, left: 0, 12\n(8) - (12) = -4, left: -4, 0\n(12) + (8) = 20, left: 20, 0\n(12) - (0) = 12, left: 12, 8\n(8) + (8) = 16, left: 16, 12, 8\n(12) - (16) = -4, left: -4, 8\n(8) * (-4) = -32, left: -32\n(12) * (16) = 192, left: 192, 8\n(192) / (8) = 24, left: 24\nreach 24! expression: ((12 * (8 + 8)) / 8)"}, {"input": "12 8 8 8\n", "output": "(8) / (8) = 1, left: 1, 12, 8\n(8) * (8) = 64, left: 64, 12, 8\n(12) * (64) = 768, left: 768, 8\n(8) / (8) = 1, left: 1, 12, 8\n(12) + (8) = 20, left: 20, 1\n(8) - (8) = 0, left: 0, 12, 8\n(8) - (12) = -4, left: -4, 0\n(8) + (8) = 16, left: 16, 12, 8\n(8) / (12) = 2/3, left: 2/3, 16\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((8 + 8) / (8 / 12))"}, {"input": "12 8 8 8\n", "output": "(8) / (12) = 2/3, left: 2/3, 8, 8\n(8) + (8) = 16, left: 16, 2/3\n(2/3) + (16) = 50/3, left: 50/3\n(2/3) * (16) = 32/3, left: 32/3\n(2/3) / (16) = 1/24, left: 1/24\n(2/3) - (16) = -46/3, left: -46/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((8 + 8) / (8 / 12))"}, {"input": "12 8 8 8\n", "output": "(8) / (12) = 2/3, left: 2/3, 8, 8\n(8) + (8) = 16, left: 16, 2/3\n(2/3) + (16) = 50/3, left: 50/3\n(2/3) * (16) = 32/3, left: 32/3\n(2/3) / (16) = 1/24, left: 1/24\n(2/3) - (16) = -46/3, left: -46/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((8 + 8) / (8 / 12))"}, {"input": "5 2 4 8\n", "output": "(5) + (8) = 13, left: 13, 2, 4\n(2) - (4) = -2, left: -2, 13\n(13) + (-2) = 11, left: 11\n(2) + (4) = 6, left: 6, 13\n(13) + (6) = 19, left: 19\n(13) / (2) = 13/2, left: 13/2, 4\n(4) / (13/2) = 8/13, left: 8/13\n(5) * (8) = 40, left: 40, 2, 4\n(40) / (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((5 * 8) / 2))"}, {"input": "5 2 4 8\n", "output": "(2) - (8) = -6, left: -6, 5, 4\n(-6) / (4) = -3/2, left: -3/2, 5\n(-3/2) / (5) = -3/10, left: -3/10\n(5) + (-6) = -1, left: -1, 4\n(5) / (-6) = -5/6, left: -5/6, 4\n(2) / (8) = 1/4, left: 1/4, 5, 4\n(5) - (4) = 1, left: 1, 1/4\n(1) - (1/4) = 3/4, left: 3/4\n(5) / (1/4) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 / (2 / 8)))"}, {"input": "5 2 4 8\n", "output": "(5) + (8) = 13, left: 13, 2, 4\n(13) - (4) = 9, left: 9, 2\n(4) / (2) = 2, left: 2, 13\n(8) / (5) = 8/5, left: 8/5, 2, 4\n(4) / (8/5) = 5/2, left: 5/2, 2\n(2) * (5/2) = 5, left: 5\n(4) - (2) = 2, left: 2, 8/5\n(5) * (8) = 40, left: 40, 2, 4\n(40) / (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + ((5 * 8) / 2))"}, {"input": "5 2 4 8\n", "output": "(8) / (5) = 8/5, left: 8/5, 2, 4\n(2) - (8/5) = 2/5, left: 2/5, 4\n(2) + (4) = 6, left: 6, 8/5\n(2) / (4) = 1/2, left: 1/2, 8/5\n(2) - (4) = -2, left: -2, 8/5\n(-2) - (8/5) = -18/5, left: -18/5\n(8/5) / (4) = 2/5, left: 2/5, 2\n(8) - (5) = 3, left: 3, 2, 4\n(4) * (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (4 * (8 - 5)))"}, {"input": "5 2 4 8\n", "output": "(8) / (2) = 4, left: 4, 5, 4\n(4) / (5) = 4/5, left: 4/5, 4\n(4) - (4/5) = 16/5, left: 16/5\n(4) - (5) = -1, left: -1, 4\n(4) / (-1) = -4, left: -4\n(-1) / (4) = -1/4, left: -1/4\n(5) + (4) = 9, left: 9, 4\n(5) * (4) = 20, left: 20, 4\n(20) / (4) = 5, left: 5\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (5 * (8 / 2)))"}, {"input": "10 5 6 8\n", "output": "(8) / (5) = 8/5, left: 8/5, 10, 6\n(10) / (6) = 5/3, left: 5/3, 8/5\n(8/5) - (6) = -22/5, left: -22/5, 10\n(5) * (8) = 40, left: 40, 10, 6\n(10) / (40) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (10 / (5 * 8)))"}, {"input": "10 5 6 8\n", "output": "(10) / (8) = 5/4, left: 5/4, 5, 6\n(5) - (5/4) = 15/4, left: 15/4, 6\n(6) - (15/4) = 9/4, left: 9/4\n(6) / (15/4) = 8/5, left: 8/5\n(5) / (5/4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 / (10 / 8)))"}, {"input": "10 5 6 8\n", "output": "(10) - (5) = 5, left: 5, 6, 8\n(8) - (5) = 3, left: 3, 6\n(6) - (5) = 1, left: 1, 8\n(10) * (5) = 50, left: 50, 6, 8\n(50) - (6) = 44, left: 44, 8\n(8) / (50) = 4/25, left: 4/25, 6\n(8) * (50) = 400, left: 400, 6\n(10) / (5) = 2, left: 2, 6, 8\n(2) / (8) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((10 / 5) / 8))"}, {"input": "10 5 6 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 10, 6\n(6) * (5/8) = 15/4, left: 15/4, 10\n(10) - (5/8) = 75/8, left: 75/8, 6\n(10) + (5/8) = 85/8, left: 85/8, 6\n(6) * (85/8) = 255/4, left: 255/4\n(8) - (5) = 3, left: 3, 10, 6\n(6) - (3) = 3, left: 3, 10\n(3) - (10) = -7, left: -7\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (8 - 5)) - 6)"}, {"input": "10 5 6 8\n", "output": "(5) - (6) = -1, left: -1, 10, 8\n(10) / (8) = 5/4, left: 5/4, -1\n(-1) * (5/4) = -5/4, left: -5/4\n(8) * (-1) = -8, left: -8, 10\n(-1) / (8) = -1/8, left: -1/8, 10\n(10) + (-1/8) = 79/8, left: 79/8\n(-1) / (10) = -1/10, left: -1/10, 8\n(5) * (6) = 30, left: 30, 10, 8\n(8) * (30) = 240, left: 240, 10\n(240) / (10) = 24, left: 24\nreach 24! expression: ((8 * (5 * 6)) / 10)"}, {"input": "10 5 6 8\n", "output": "(10) / (8) = 5/4, left: 5/4, 5, 6\n(5) - (5/4) = 15/4, left: 15/4, 6\n(6) + (15/4) = 39/4, left: 39/4\n(6) - (15/4) = 9/4, left: 9/4\n(15/4) / (6) = 5/8, left: 5/8\n(6) * (15/4) = 45/2, left: 45/2\n(6) / (15/4) = 8/5, left: 8/5\n(15/4) - (6) = -9/4, left: -9/4\n(5) / (5/4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 / (10 / 8)))"}, {"input": "10 5 6 8\n", "output": "(8) / (5) = 8/5, left: 8/5, 10, 6\n(10) + (8/5) = 58/5, left: 58/5, 6\n(58/5) / (6) = 29/15, left: 29/15\n(10) * (8/5) = 16, left: 16, 6\n(6) / (10) = 3/5, left: 3/5, 8/5\n(3/5) - (8/5) = -1, left: -1\n(6) / (8/5) = 15/4, left: 15/4, 10\n(5) * (8) = 40, left: 40, 10, 6\n(10) / (40) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (10 / (5 * 8)))"}, {"input": "10 5 6 8\n", "output": "(10) / (8) = 5/4, left: 5/4, 5, 6\n(5) - (5/4) = 15/4, left: 15/4, 6\n(6) + (15/4) = 39/4, left: 39/4\n(6) - (15/4) = 9/4, left: 9/4\n(15/4) / (6) = 5/8, left: 5/8\n(6) * (15/4) = 45/2, left: 45/2\n(6) / (15/4) = 8/5, left: 8/5\n(15/4) - (6) = -9/4, left: -9/4\n(5) / (5/4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 / (10 / 8)))"}, {"input": "10 5 6 8\n", "output": "(10) / (8) = 5/4, left: 5/4, 5, 6\n(5) - (5/4) = 15/4, left: 15/4, 6\n(6) + (15/4) = 39/4, left: 39/4\n(6) - (15/4) = 9/4, left: 9/4\n(15/4) / (6) = 5/8, left: 5/8\n(6) * (15/4) = 45/2, left: 45/2\n(6) / (15/4) = 8/5, left: 8/5\n(15/4) - (6) = -9/4, left: -9/4\n(5) / (5/4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 / (10 / 8)))"}, {"input": "8 8 10 12\n", "output": "(10) / (8) = 5/4, left: 5/4, 8, 12\n(8) * (12) = 96, left: 96, 5/4\n(8) / (12) = 2/3, left: 2/3, 8, 10\n(12) - (10) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (12 - 10)))"}, {"input": "8 8 10 12\n", "output": "(12) / (8) = 3/2, left: 3/2, 8, 10\n(8) * (12) = 96, left: 96, 8, 10\n(8) - (12) = -4, left: -4, 8, 10\n(8) + (12) = 20, left: 20, 8, 10\n(20) - (10) = 10, left: 10, 8\n(20) - (8) = 12, left: 12, 10\n(8) / (12) = 2/3, left: 2/3, 8, 10\n(10) - (12) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (10 - 12)))"}, {"input": "8 8 10 12\n", "output": "(8) * (10) = 80, left: 80, 8, 12\n(8) + (8) = 16, left: 16, 10, 12\n(8) * (8) = 64, left: 64, 10, 12\n(10) / (12) = 5/6, left: 5/6, 64\n(64) + (5/6) = 389/6, left: 389/6\n(8) * (12) = 96, left: 96, 8, 10\n(8) / (12) = 2/3, left: 2/3, 8, 10\n(10) - (12) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (10 - 12)))"}, {"input": "8 8 10 12\n", "output": "(8) - (10) = -2, left: -2, 8, 12\n(10) / (8) = 5/4, left: 5/4, 8, 12\n(10) - (8) = 2, left: 2, 8, 12\n(2) / (8) = 1/4, left: 1/4, 12\n(8) + (12) = 20, left: 20, 8, 10\n(10) / (12) = 5/6, left: 5/6, 8, 8\n(8) / (5/6) = 48/5, left: 48/5, 8\n(12) - (10) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (12 - 10)))"}, {"input": "8 8 10 12\n", "output": "(8) + (8) = 16, left: 16, 10, 12\n(8) / (8) = 1, left: 1, 10, 12\n(12) - (8) = 4, left: 4, 8, 10\n(8) + (10) = 18, left: 18, 8, 12\n(8) * (12) = 96, left: 96, 18\n(10) - (8) = 2, left: 2, 8, 12\n(12) / (10) = 6/5, left: 6/5, 8, 8\n(12) - (10) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (12 - 10)))"}, {"input": "8 8 10 12\n", "output": "(10) / (8) = 5/4, left: 5/4, 8, 12\n(12) / (5/4) = 48/5, left: 48/5, 8\n(10) - (8) = 2, left: 2, 8, 12\n(10) + (12) = 22, left: 22, 8, 8\n(8) / (8) = 1, left: 1, 22\n(10) / (12) = 5/6, left: 5/6, 8, 8\n(8) / (5/6) = 48/5, left: 48/5, 8\n(10) - (12) = -2, left: -2, 8, 8\n(8) * (-2) = -16, left: -16, 8\n(8) - (-16) = 24, left: 24\nreach 24! expression: (8 - (8 * (10 - 12)))"}, {"input": "8 8 10 12\n", "output": "(8) * (8) = 64, left: 64, 10, 12\n(8) - (8) = 0, left: 0, 10, 12\n(12) / (8) = 3/2, left: 3/2, 8, 10\n(8) / (12) = 2/3, left: 2/3, 8, 10\n(8) * (10) = 80, left: 80, 8, 12\n(8) - (10) = -2, left: -2, 8, 12\n(10) - (8) = 2, left: 2, 8, 12\n(8) * (10) = 80, left: 80, 8, 12\n(10) / (12) = 5/6, left: 5/6, 8, 8\n(8) / (5/6) = 48/5, left: 48/5, 8\n(12) / (10) = 6/5, left: 6/5, 8, 8\n(12) - (10) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (12 - 10)))"}, {"input": "2 12 6 13\n", "output": "(12) + (13) = 25, left: 25, 2, 6\n(2) + (6) = 8, left: 8, 25\n(13) - (12) = 1, left: 1, 2, 6\n(12) * (13) = 156, left: 156, 2, 6\n(156) / (6) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((12 * 13) / 6) - 2)"}, {"input": "2 12 6 13\n", "output": "(6) - (2) = 4, left: 4, 12, 13\n(13) / (12) = 13/12, left: 13/12, 4\n(2) + (6) = 8, left: 8, 12, 13\n(6) / (12) = 1/2, left: 1/2, 2, 13\n(13) / (1/2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 / (6 / 12)) - 2)"}, {"input": "2 12 6 13\n", "output": "(2) + (12) = 14, left: 14, 6, 13\n(6) - (13) = -7, left: -7, 14\n(12) / (2) = 6, left: 6, 6, 13\n(2) * (12) = 24, left: 24, 6, 13\n(2) - (12) = -10, left: -10, 6, 13\n(6) - (13) = -7, left: -7, -10\n(-10) - (-7) = -3, left: -3\n(12) / (6) = 2, left: 2, 2, 13\n(13) * (2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * (12 / 6)) - 2)"}, {"input": "2 12 6 13\n", "output": "(2) + (6) = 8, left: 8, 12, 13\n(6) / (2) = 3, left: 3, 12, 13\n(2) * (6) = 12, left: 12, 12, 13\n(12) / (12) = 1, left: 1, 13\n(6) - (2) = 4, left: 4, 12, 13\n(13) - (4) = 9, left: 9, 12\n(6) - (12) = -6, left: -6, 2, 13\n(12) / (6) = 2, left: 2, 2, 13\n(13) * (2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * (12 / 6)) - 2)"}, {"input": "2 12 6 13\n", "output": "(12) + (13) = 25, left: 25, 2, 6\n(6) / (25) = 6/25, left: 6/25, 2\n(6/25) - (2) = -44/25, left: -44/25\n(12) / (13) = 12/13, left: 12/13, 2, 6\n(12) - (13) = -1, left: -1, 2, 6\n(2) * (-1) = -2, left: -2, 6\n(12) * (13) = 156, left: 156, 2, 6\n(6) + (156) = 162, left: 162, 2\n(156) / (6) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((12 * 13) / 6) - 2)"}, {"input": "2 12 6 13\n", "output": "(2) * (12) = 24, left: 24, 6, 13\n(12) / (2) = 6, left: 6, 6, 13\n(2) + (12) = 14, left: 14, 6, 13\n(14) / (13) = 14/13, left: 14/13, 6\n(6) / (2) = 3, left: 3, 12, 13\n(2) / (6) = 1/3, left: 1/3, 12, 13\n(12) * (6) = 72, left: 72, 2, 13\n(6) / (12) = 1/2, left: 1/2, 2, 13\n(13) / (1/2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 / (6 / 12)) - 2)"}, {"input": "2 12 6 13\n", "output": "(6) - (2) = 4, left: 4, 12, 13\n(13) / (4) = 13/4, left: 13/4, 12\n(2) / (6) = 1/3, left: 1/3, 12, 13\n(2) * (6) = 12, left: 12, 12, 13\n(13) + (12) = 25, left: 25, 12\n(12) - (13) = -1, left: -1, 12\n(6) / (2) = 3, left: 3, 12, 13\n(6) / (12) = 1/2, left: 1/2, 2, 13\n(13) / (1/2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 / (6 / 12)) - 2)"}, {"input": "10 12 2 11\n", "output": "(11) / (10) = 11/10, left: 11/10, 12, 2\n(11/10) - (12) = -109/10, left: -109/10, 2\n(12) - (2) = 10, left: 10, 11/10\n(11) - (10) = 1, left: 1, 12, 2\n(12) * (2) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 * 2) / (11 - 10))"}, {"input": "10 12 2 11\n", "output": "(10) - (11) = -1, left: -1, 12, 2\n(10) * (11) = 110, left: 110, 12, 2\n(12) - (2) = 10, left: 10, 110\n(11) - (10) = 1, left: 1, 12, 2\n(12) * (2) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 * 2) / (11 - 10))"}, {"input": "10 12 2 11\n", "output": "(11) - (2) = 9, left: 9, 10, 12\n(10) * (12) = 120, left: 120, 9\n(10) - (12) = -2, left: -2, 9\n(2) * (11) = 22, left: 22, 10, 12\n(22) - (10) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((2 * 11) - 10))"}, {"input": "10 12 2 11\n", "output": "(10) - (11) = -1, left: -1, 12, 2\n(12) / (2) = 6, left: 6, -1\n(-1) / (6) = -1/6, left: -1/6\n(10) / (11) = 10/11, left: 10/11, 12, 2\n(2) - (10/11) = 12/11, left: 12/11, 12\n(10) * (11) = 110, left: 110, 12, 2\n(2) / (12) = 1/6, left: 1/6, 110\n(11) - (10) = 1, left: 1, 12, 2\n(12) * (2) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 * 2) / (11 - 10))"}, {"input": "10 12 2 11\n", "output": "(10) + (11) = 21, left: 21, 12, 2\n(2) - (12) = -10, left: -10, 21\n(12) + (2) = 14, left: 14, 21\n(14) - (21) = -7, left: -7\n(21) - (12) = 9, left: 9, 2\n(12) * (21) = 252, left: 252, 2\n(12) + (21) = 33, left: 33, 2\n(11) - (10) = 1, left: 1, 12, 2\n(12) * (2) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 * 2) / (11 - 10))"}, {"input": "10 12 2 11\n", "output": "(10) - (2) = 8, left: 8, 12, 11\n(11) - (8) = 3, left: 3, 12\n(2) / (10) = 1/5, left: 1/5, 12, 11\n(12) / (11) = 12/11, left: 12/11, 10, 2\n(12) - (11) = 1, left: 1, 10, 2\n(10) + (2) = 12, left: 12, 1\n(10) - (2) = 8, left: 8, 1\n(11) - (10) = 1, left: 1, 12, 2\n(12) * (2) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((11 - 10) * (12 * 2))"}, {"input": "10 12 2 11\n", "output": "(11) - (2) = 9, left: 9, 10, 12\n(10) * (12) = 120, left: 120, 9\n(10) - (12) = -2, left: -2, 9\n(9) / (-2) = -9/2, left: -9/2\n(9) / (10) = 9/10, left: 9/10, 12\n(12) + (9/10) = 129/10, left: 129/10\n(10) / (9) = 10/9, left: 10/9, 12\n(2) * (11) = 22, left: 22, 10, 12\n(22) - (10) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((2 * 11) - 10))"}, {"input": "8 6 11 10\n", "output": "(8) - (11) = -3, left: -3, 6, 10\n(6) + (10) = 16, left: 16, -3\n(6) * (10) = 60, left: 60, -3\n(11) - (8) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "8 6 11 10\n", "output": "(11) / (6) = 11/6, left: 11/6, 8, 10\n(10) - (11/6) = 49/6, left: 49/6, 8\n(11) + (10) = 21, left: 21, 8, 6\n(11) - (8) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "8 6 11 10\n", "output": "(11) / (8) = 11/8, left: 11/8, 6, 10\n(6) / (10) = 3/5, left: 3/5, 11/8\n(8) - (11) = -3, left: -3, 6, 10\n(11) - (8) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "8 6 11 10\n", "output": "(8) - (11) = -3, left: -3, 6, 10\n(-3) / (10) = -3/10, left: -3/10, 6\n(6) - (10) = -4, left: -4, -3\n(11) - (8) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "8 6 11 10\n", "output": "(11) / (8) = 11/8, left: 11/8, 6, 10\n(8) - (11) = -3, left: -3, 6, 10\n(6) * (10) = 60, left: 60, -3\n(60) / (-3) = -20, left: -20\n(10) - (6) = 4, left: 4, -3\n(11) - (8) = 3, left: 3, 6, 10\n(6) + (3) = 9, left: 9, 10\n(6) * (10) = 60, left: 60, 3\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "8 6 11 10\n", "output": "(6) - (10) = -4, left: -4, 8, 11\n(6) - (8) = -2, left: -2, 11, 10\n(11) * (-2) = -22, left: -22, 10\n(11) * (10) = 110, left: 110, 8, 6\n(10) / (11) = 10/11, left: 10/11, 8, 6\n(10) - (11) = -1, left: -1, 8, 6\n(11) / (8) = 11/8, left: 11/8, 6, 10\n(11) - (8) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "8 6 11 10\n", "output": "(8) - (11) = -3, left: -3, 6, 10\n(6) - (10) = -4, left: -4, -3\n(-4) - (-3) = -1, left: -1\n(-3) / (6) = -1/2, left: -1/2, 10\n(6) / (-3) = -2, left: -2, 10\n(10) + (-3) = 7, left: 7, 6\n(-3) - (10) = -13, left: -13, 6\n(11) - (8) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "8 6 11 10\n", "output": "(8) - (11) = -3, left: -3, 6, 10\n(-3) - (6) = -9, left: -9, 10\n(6) / (-3) = -2, left: -2, 10\n(10) + (-2) = 8, left: 8\n(6) + (-3) = 3, left: 3, 10\n(10) / (6) = 5/3, left: 5/3, -3\n(-3) * (5/3) = -5, left: -5\n(11) - (8) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "8 6 11 10\n", "output": "(8) * (11) = 88, left: 88, 6, 10\n(6) + (88) = 94, left: 94, 10\n(11) / (8) = 11/8, left: 11/8, 6, 10\n(6) + (11/8) = 59/8, left: 59/8, 10\n(8) + (11) = 19, left: 19, 6, 10\n(8) - (11) = -3, left: -3, 6, 10\n(8) / (11) = 8/11, left: 8/11, 6, 10\n(11) - (8) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "7 11 12 6\n", "output": "(7) / (11) = 7/11, left: 7/11, 12, 6\n(6) + (7/11) = 73/11, left: 73/11, 12\n(12) - (73/11) = 59/11, left: 59/11\n(7) + (11) = 18, left: 18, 12, 6\n(6) - (12) = -6, left: -6, 18\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((7 + 11) - (6 - 12))"}, {"input": "7 11 12 6\n", "output": "(7) + (12) = 19, left: 19, 11, 6\n(11) / (6) = 11/6, left: 11/6, 19\n(19) + (11/6) = 125/6, left: 125/6\n(11) - (6) = 5, left: 5, 19\n(19) - (5) = 14, left: 14\n(19) + (5) = 24, left: 24\nreach 24! expression: ((7 + 12) + (11 - 6))"}, {"input": "7 11 12 6\n", "output": "(11) + (12) = 23, left: 23, 7, 6\n(6) * (23) = 138, left: 138, 7\n(7) - (138) = -131, left: -131\n(138) / (7) = 138/7, left: 138/7\n(23) - (6) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((11 + 12) - 6))"}, {"input": "7 11 12 6\n", "output": "(7) / (6) = 7/6, left: 7/6, 11, 12\n(12) / (11) = 12/11, left: 12/11, 7/6\n(12) * (7/6) = 14, left: 14, 11\n(6) - (7) = -1, left: -1, 11, 12\n(12) - (-1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 - (6 - 7)))"}, {"input": "7 11 12 6\n", "output": "(11) + (12) = 23, left: 23, 7, 6\n(6) * (23) = 138, left: 138, 7\n(7) - (138) = -131, left: -131\n(7) / (138) = 7/138, left: 7/138\n(7) + (138) = 145, left: 145\n(7) * (138) = 966, left: 966\n(23) - (6) = 17, left: 17, 7\n(17) / (7) = 17/7, left: 17/7\n(7) * (17) = 119, left: 119\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((11 + 12) - 6))"}, {"input": "7 11 12 6\n", "output": "(7) / (6) = 7/6, left: 7/6, 11, 12\n(11) - (12) = -1, left: -1, 7/6\n(11) + (12) = 23, left: 23, 7/6\n(11) / (12) = 11/12, left: 11/12, 7/6\n(12) / (7/6) = 72/7, left: 72/7, 11\n(11) + (72/7) = 149/7, left: 149/7\n(7/6) - (11) = -59/6, left: -59/6, 12\n(6) - (7) = -1, left: -1, 11, 12\n(12) - (-1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 - (6 - 7)))"}, {"input": "7 11 12 6\n", "output": "(7) + (12) = 19, left: 19, 11, 6\n(11) / (6) = 11/6, left: 11/6, 19\n(19) / (11/6) = 114/11, left: 114/11\n(11/6) / (19) = 11/114, left: 11/114\n(11/6) - (19) = -103/6, left: -103/6\n(19) * (11/6) = 209/6, left: 209/6\n(11) - (6) = 5, left: 5, 19\n(19) - (5) = 14, left: 14\n(19) * (5) = 95, left: 95\n(19) + (5) = 24, left: 24\nreach 24! expression: ((7 + 12) + (11 - 6))"}, {"input": "7 11 12 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 7, 12\n(12) + (6/11) = 138/11, left: 138/11, 7\n(7) - (138/11) = -61/11, left: -61/11\n(12) / (6/11) = 22, left: 22, 7\n(12) - (7) = 5, left: 5, 6/11\n(7) - (12) = -5, left: -5, 6/11\n(11) + (6) = 17, left: 17, 7, 12\n(6) - (11) = -5, left: -5, 7, 12\n(12) - (-5) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (12 - (6 - 11)))"}, {"input": "7 11 12 6\n", "output": "(7) / (11) = 7/11, left: 7/11, 12, 6\n(6) - (12) = -6, left: -6, 7/11\n(6) / (7/11) = 66/7, left: 66/7, 12\n(12) + (66/7) = 150/7, left: 150/7\n(7/11) / (12) = 7/132, left: 7/132, 6\n(7) * (11) = 77, left: 77, 12, 6\n(6) * (77) = 462, left: 462, 12\n(7) + (11) = 18, left: 18, 12, 6\n(6) - (12) = -6, left: -6, 18\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((7 + 11) - (6 - 12))"}, {"input": "11 8 12 1\n", "output": "(12) / (1) = 12, left: 12, 11, 8\n(11) - (8) = 3, left: 3, 12\n(3) - (12) = -9, left: -9\n(11) - (1) = 10, left: 10, 8, 12\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 1) - 8))"}, {"input": "11 8 12 1\n", "output": "(1) - (11) = -10, left: -10, 8, 12\n(-10) / (8) = -5/4, left: -5/4, 12\n(8) / (12) = 2/3, left: 2/3, -10\n(12) / (-10) = -6/5, left: -6/5, 8\n(11) + (1) = 12, left: 12, 8, 12\n(11) * (1) = 11, left: 11, 8, 12\n(11) - (1) = 10, left: 10, 8, 12\n(10) / (12) = 5/6, left: 5/6, 8\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 1) - 8))"}, {"input": "11 8 12 1\n", "output": "(8) * (1) = 8, left: 8, 11, 12\n(12) / (8) = 3/2, left: 3/2, 11\n(1) / (8) = 1/8, left: 1/8, 11, 12\n(8) / (1) = 8, left: 8, 11, 12\n(11) + (8) = 19, left: 19, 12\n(1) - (8) = -7, left: -7, 11, 12\n(11) + (12) = 23, left: 23, -7\n(8) + (1) = 9, left: 9, 11, 12\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (11 - (8 + 1)))"}, {"input": "11 8 12 1\n", "output": "(12) / (8) = 3/2, left: 3/2, 11, 1\n(1) - (3/2) = -1/2, left: -1/2, 11\n(12) * (1) = 12, left: 12, 11, 8\n(12) - (1) = 11, left: 11, 11, 8\n(1) - (11) = -10, left: -10, 8, 12\n(11) / (1) = 11, left: 11, 8, 12\n(12) - (8) = 4, left: 4, 11\n(11) - (1) = 10, left: 10, 8, 12\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 1) - 8))"}, {"input": "11 8 12 1\n", "output": "(8) * (12) = 96, left: 96, 11, 1\n(8) - (12) = -4, left: -4, 11, 1\n(8) / (12) = 2/3, left: 2/3, 11, 1\n(2/3) / (11) = 2/33, left: 2/33, 1\n(12) - (8) = 4, left: 4, 11, 1\n(1) - (12) = -11, left: -11, 11, 8\n(11) / (-11) = -1, left: -1, 8\n(11) - (8) = 3, left: 3, 12, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 8) - 1))"}, {"input": "11 8 12 1\n", "output": "(12) - (8) = 4, left: 4, 11, 1\n(11) / (4) = 11/4, left: 11/4, 1\n(12) / (1) = 12, left: 12, 11, 8\n(11) / (12) = 11/12, left: 11/12, 8\n(12) / (11) = 12/11, left: 12/11, 8\n(12) * (1) = 12, left: 12, 11, 8\n(11) - (8) = 3, left: 3, 12, 1\n(12) + (1) = 13, left: 13, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((11 - 8) - 1))"}, {"input": "4 10 1 9\n", "output": "(1) - (10) = -9, left: -9, 4, 9\n(4) + (9) = 13, left: 13, -9\n(4) - (9) = -5, left: -5, -9\n(-9) / (4) = -9/4, left: -9/4, 9\n(9) * (-9) = -81, left: -81, 4\n(-9) / (9) = -1, left: -1, 4\n(9) - (-9) = 18, left: 18, 4\n(10) + (1) = 11, left: 11, 4, 9\n(9) + (11) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (9 + (10 + 1)))"}, {"input": "4 10 1 9\n", "output": "(1) - (4) = -3, left: -3, 10, 9\n(4) / (1) = 4, left: 4, 10, 9\n(10) + (4) = 14, left: 14, 9\n(9) + (14) = 23, left: 23\n(9) * (4) = 36, left: 36, 10\n(9) - (4) = 5, left: 5, 10\n(5) - (10) = -5, left: -5\n(4) + (1) = 5, left: 5, 10, 9\n(10) + (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (10 + (4 + 1)))"}, {"input": "4 10 1 9\n", "output": "(9) / (1) = 9, left: 9, 4, 10\n(1) - (9) = -8, left: -8, 4, 10\n(4) + (-8) = -4, left: -4, 10\n(-4) - (10) = -14, left: -14\n(10) / (4) = 5/2, left: 5/2, -8\n(1) * (9) = 9, left: 9, 4, 10\n(10) / (9) = 10/9, left: 10/9, 4\n(1) + (9) = 10, left: 10, 4, 10\n(10) + (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 + (1 + 9)))"}, {"input": "4 10 1 9\n", "output": "(4) - (1) = 3, left: 3, 10, 9\n(9) / (3) = 3, left: 3, 10\n(10) + (3) = 13, left: 13\n(9) + (3) = 12, left: 12, 10\n(4) * (1) = 4, left: 4, 10, 9\n(10) - (4) = 6, left: 6, 9\n(1) - (4) = -3, left: -3, 10, 9\n(4) + (1) = 5, left: 5, 10, 9\n(9) + (5) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (9 + (4 + 1)))"}, {"input": "3 6 9 4\n", "output": "(6) / (4) = 3/2, left: 3/2, 3, 9\n(6) * (4) = 24, left: 24, 3, 9\n(24) / (9) = 8/3, left: 8/3, 3\n(4) / (6) = 2/3, left: 2/3, 3, 9\n(3) - (2/3) = 7/3, left: 7/3, 9\n(3) + (9) = 12, left: 12, 2/3\n(12) / (2/3) = 18, left: 18\n(6) - (4) = 2, left: 2, 3, 9\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 - 4) * (3 + 9))"}, {"input": "3 6 9 4\n", "output": "(3) * (9) = 27, left: 27, 6, 4\n(27) / (6) = 9/2, left: 9/2, 4\n(6) + (27) = 33, left: 33, 4\n(9) / (3) = 3, left: 3, 6, 4\n(3) - (9) = -6, left: -6, 6, 4\n(9) - (3) = 6, left: 6, 6, 4\n(6) / (4) = 3/2, left: 3/2, 6\n(3) + (9) = 12, left: 12, 6, 4\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 + 9) * (6 - 4))"}, {"input": "3 6 9 4\n", "output": "(6) / (4) = 3/2, left: 3/2, 3, 9\n(6) * (4) = 24, left: 24, 3, 9\n(3) - (24) = -21, left: -21, 9\n(24) - (9) = 15, left: 15, 3\n(4) - (6) = -2, left: -2, 3, 9\n(9) - (-2) = 11, left: 11, 3\n(3) + (11) = 14, left: 14\n(6) - (4) = 2, left: 2, 3, 9\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 - 4) * (3 + 9))"}, {"input": "3 6 9 4\n", "output": "(3) - (4) = -1, left: -1, 6, 9\n(-1) - (6) = -7, left: -7, 9\n(6) * (-1) = -6, left: -6, 9\n(-6) / (9) = -2/3, left: -2/3\n(3) / (4) = 3/4, left: 3/4, 6, 9\n(9) * (3/4) = 27/4, left: 27/4, 6\n(6) / (9) = 2/3, left: 2/3, 3, 4\n(9) - (6) = 3, left: 3, 3, 4\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 + (9 - 6)))"}, {"input": "3 6 9 4\n", "output": "(4) - (9) = -5, left: -5, 3, 6\n(3) / (6) = 1/2, left: 1/2, -5\n(9) + (4) = 13, left: 13, 3, 6\n(3) - (6) = -3, left: -3, 13\n(3) / (9) = 1/3, left: 1/3, 6, 4\n(4) - (6) = -2, left: -2, 1/3\n(9) / (3) = 3, left: 3, 6, 4\n(3) + (9) = 12, left: 12, 6, 4\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 + 9) * (6 - 4))"}, {"input": "3 6 9 4\n", "output": "(4) - (3) = 1, left: 1, 6, 9\n(3) - (4) = -1, left: -1, 6, 9\n(6) * (-1) = -6, left: -6, 9\n(9) * (-6) = -54, left: -54\n(9) / (-1) = -9, left: -9, 6\n(3) / (4) = 3/4, left: 3/4, 6, 9\n(6) + (9) = 15, left: 15, 3/4\n(3) * (4) = 12, left: 12, 6, 9\n(9) + (12) = 21, left: 21, 6\n(9) * (12) = 108, left: 108, 6\n(9) / (12) = 3/4, left: 3/4, 6\n(9) - (6) = 3, left: 3, 3, 4\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 + (9 - 6)))"}, {"input": "3 6 9 4\n", "output": "(4) / (9) = 4/9, left: 4/9, 3, 6\n(4) - (9) = -5, left: -5, 3, 6\n(3) / (-5) = -3/5, left: -3/5, 6\n(3) / (6) = 1/2, left: 1/2, -5\n(9) + (4) = 13, left: 13, 3, 6\n(3) / (9) = 1/3, left: 1/3, 6, 4\n(3) - (9) = -6, left: -6, 6, 4\n(3) * (9) = 27, left: 27, 6, 4\n(9) / (3) = 3, left: 3, 6, 4\n(4) + (3) = 7, left: 7, 6\n(9) - (3) = 6, left: 6, 6, 4\n(3) + (9) = 12, left: 12, 6, 4\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 + 9) * (6 - 4))"}, {"input": "3 6 9 4\n", "output": "(6) / (4) = 3/2, left: 3/2, 3, 9\n(3) / (3/2) = 2, left: 2, 9\n(2) / (9) = 2/9, left: 2/9\n(6) + (4) = 10, left: 10, 3, 9\n(3) - (10) = -7, left: -7, 9\n(10) / (9) = 10/9, left: 10/9, 3\n(6) * (4) = 24, left: 24, 3, 9\n(4) - (6) = -2, left: -2, 3, 9\n(3) * (9) = 27, left: 27, -2\n(3) / (9) = 1/3, left: 1/3, -2\n(3) + (-2) = 1, left: 1, 9\n(6) - (4) = 2, left: 2, 3, 9\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 - 4) * (3 + 9))"}, {"input": "8 8 1 8\n", "output": "(8) - (8) = 0, left: 0, 1, 8\n(8) / (8) = 1, left: 1, 1, 8\n(8) * (8) = 64, left: 64, 1, 8\n(8) - (1) = 7, left: 7, 64\n(8) + (64) = 72, left: 72, 1\n(8) / (8) = 1, left: 1, 1, 8\n(1) / (8) = 1/8, left: 1/8, 1\n(8) + (8) = 16, left: 16, 1, 8\n(8) / (1) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((8 + 8) + (8 / 1))"}, {"input": "8 8 1 8\n", "output": "(1) / (8) = 1/8, left: 1/8, 8, 8\n(1) - (8) = -7, left: -7, 8, 8\n(8) + (8) = 16, left: 16, -7\n(16) / (-7) = -16/7, left: -16/7\n(8) - (1) = 7, left: 7, 8, 8\n(8) + (8) = 16, left: 16, 7\n(8) - (8) = 0, left: 0, 7\n(8) * (1) = 8, left: 8, 8, 8\n(8) + (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((8 * 1) + (8 + 8))"}, {"input": "8 8 1 8\n", "output": "(8) / (8) = 1, left: 1, 1, 8\n(8) - (1) = 7, left: 7, 1\n(1) - (8) = -7, left: -7, 1\n(1) * (-7) = -7, left: -7\n(8) - (1) = 7, left: 7, 1\n(1) - (1) = 0, left: 0, 8\n(0) - (8) = -8, left: -8\n(8) + (8) = 16, left: 16, 1, 8\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((8 + 8) / 1))"}, {"input": "8 8 1 8\n", "output": "(8) / (8) = 1, left: 1, 8, 1\n(1) / (1) = 1, left: 1, 8\n(8) - (8) = 0, left: 0, 8, 1\n(8) / (8) = 1, left: 1, 8, 1\n(8) * (8) = 64, left: 64, 8, 1\n(8) - (1) = 7, left: 7, 64\n(1) - (8) = -7, left: -7, 64\n(8) + (8) = 16, left: 16, 8, 1\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((8 + 8) / 1))"}, {"input": "8 8 1 8\n", "output": "(1) - (8) = -7, left: -7, 8, 8\n(8) / (8) = 1, left: 1, -7\n(8) - (8) = 0, left: 0, -7\n(8) / (-7) = -8/7, left: -8/7, 8\n(8) * (1) = 8, left: 8, 8, 8\n(8) / (8) = 1, left: 1, 8\n(1) - (8) = -7, left: -7\n(8) * (1) = 8, left: 8\n(8) + (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 + (8 * 1)))"}, {"input": "8 8 1 8\n", "output": "(8) - (8) = 0, left: 0, 1, 8\n(1) + (0) = 1, left: 1, 8\n(8) + (0) = 8, left: 8, 1\n(8) / (8) = 1, left: 1, 1, 8\n(8) * (1) = 8, left: 8, 1\n(1) - (1) = 0, left: 0, 8\n(8) - (8) = 0, left: 0, 1, 8\n(8) * (8) = 64, left: 64, 1, 8\n(1) / (64) = 1/64, left: 1/64, 8\n(8) / (8) = 1, left: 1, 1, 8\n(1) - (8) = -7, left: -7, 1\n(8) + (8) = 16, left: 16, 1, 8\n(8) / (1) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((8 + 8) + (8 / 1))"}, {"input": "8 8 1 8\n", "output": "(8) / (8) = 1, left: 1, 8, 1\n(8) + (1) = 9, left: 9, 1\n(8) - (8) = 0, left: 0, 8, 1\n(8) + (1) = 9, left: 9, 0\n(8) * (0) = 0, left: 0, 1\n(0) / (1) = 0, left: 0\n(8) / (8) = 1, left: 1, 8, 1\n(1) + (1) = 2, left: 2, 8\n(8) + (1) = 9, left: 9, 1\n(8) * (8) = 64, left: 64, 8, 1\n(8) - (1) = 7, left: 7, 64\n(8) + (8) = 16, left: 16, 8, 1\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((8 + 8) / 1))"}, {"input": "8 8 1 8\n", "output": "(8) / (8) = 1, left: 1, 1, 8\n(1) + (8) = 9, left: 9, 1\n(1) * (9) = 9, left: 9\n(1) * (8) = 8, left: 8, 1\n(8) - (1) = 7, left: 7, 1\n(1) - (8) = -7, left: -7, 1\n(1) + (1) = 2, left: 2, 8\n(1) - (1) = 0, left: 0, 8\n(8) + (0) = 8, left: 8\n(1) / (1) = 1, left: 1, 8\n(1) - (1) = 0, left: 0, 8\n(8) + (8) = 16, left: 16, 1, 8\n(16) / (1) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((8 + 8) / 1))"}, {"input": "8 8 1 8\n", "output": "(1) - (8) = -7, left: -7, 8, 8\n(8) + (8) = 16, left: 16, -7\n(-7) / (8) = -7/8, left: -7/8, 8\n(8) - (-7) = 15, left: 15, 8\n(15) - (8) = 7, left: 7\n(8) * (-7) = -56, left: -56, 8\n(8) + (-7) = 1, left: 1, 8\n(8) * (1) = 8, left: 8\n(-7) - (8) = -15, left: -15, 8\n(-15) / (8) = -15/8, left: -15/8\n(8) * (1) = 8, left: 8, 8, 8\n(8) / (8) = 1, left: 1, 8\n(8) + (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 + (8 * 1)))"}, {"input": "8 8 1 8\n", "output": "(1) / (8) = 1/8, left: 1/8, 8, 8\n(8) * (1/8) = 1, left: 1, 8\n(1) - (8) = -7, left: -7\n(1) - (8) = -7, left: -7, 8, 8\n(8) - (-7) = 15, left: 15, 8\n(8) / (-7) = -8/7, left: -8/7, 8\n(8) * (-8/7) = -64/7, left: -64/7\n(8) - (1) = 7, left: 7, 8, 8\n(7) - (8) = -1, left: -1, 8\n(8) * (1) = 8, left: 8, 8, 8\n(8) * (8) = 64, left: 64, 8\n(8) + (64) = 72, left: 72\n(8) + (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((8 * 1) + (8 + 8))"}, {"input": "6 2 9 3\n", "output": "(3) / (6) = 1/2, left: 1/2, 2, 9\n(2) / (1/2) = 4, left: 4, 9\n(1/2) / (2) = 1/4, left: 1/4, 9\n(1/4) - (9) = -35/4, left: -35/4\n(2) + (1/2) = 5/2, left: 5/2, 9\n(3) - (6) = -3, left: -3, 2, 9\n(2) - (9) = -7, left: -7, -3\n(9) + (-3) = 6, left: 6, 2\n(9) - (-3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 - (3 - 6)))"}, {"input": "6 2 9 3\n", "output": "(9) * (3) = 27, left: 27, 6, 2\n(6) / (27) = 2/9, left: 2/9, 2\n(2/9) / (2) = 1/9, left: 1/9\n(2) / (27) = 2/27, left: 2/27, 6\n(2/27) - (6) = -160/27, left: -160/27\n(2) / (6) = 1/3, left: 1/3, 27\n(27) + (1/3) = 82/3, left: 82/3\n(2) - (6) = -4, left: -4, 27\n(6) / (2) = 3, left: 3, 27\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (6 / 2))"}, {"input": "6 2 9 3\n", "output": "(2) + (3) = 5, left: 5, 6, 9\n(6) + (5) = 11, left: 11, 9\n(6) * (5) = 30, left: 30, 9\n(9) + (30) = 39, left: 39\n(5) - (6) = -1, left: -1, 9\n(6) * (9) = 54, left: 54, 5\n(5) / (54) = 5/54, left: 5/54\n(5) - (9) = -4, left: -4, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (2 + 3)))"}, {"input": "6 2 9 3\n", "output": "(6) / (3) = 2, left: 2, 2, 9\n(9) / (2) = 9/2, left: 9/2, 2\n(9/2) / (2) = 9/4, left: 9/4\n(3) / (6) = 1/2, left: 1/2, 2, 9\n(2) - (9) = -7, left: -7, 1/2\n(1/2) + (-7) = -13/2, left: -13/2\n(1/2) - (2) = -3/2, left: -3/2, 9\n(3) - (6) = -3, left: -3, 2, 9\n(9) - (-3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 - (3 - 6)))"}, {"input": "6 2 9 3\n", "output": "(2) / (3) = 2/3, left: 2/3, 6, 9\n(2/3) - (9) = -25/3, left: -25/3, 6\n(9) + (2/3) = 29/3, left: 29/3, 6\n(9) / (2/3) = 27/2, left: 27/2, 6\n(6) + (9) = 15, left: 15, 2/3\n(2/3) / (15) = 2/45, left: 2/45\n(6) - (2/3) = 16/3, left: 16/3, 9\n(2) + (3) = 5, left: 5, 6, 9\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (9 - (2 + 3)))"}, {"input": "12 2 4 2\n", "output": "(2) - (12) = -10, left: -10, 2, 4\n(4) - (2) = 2, left: 2, -10\n(2) - (4) = -2, left: -2, -10\n(2) / (-10) = -1/5, left: -1/5, 4\n(2) * (-10) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (2 * (2 - 12)))"}, {"input": "12 2 4 2\n", "output": "(4) + (2) = 6, left: 6, 12, 2\n(2) / (12) = 1/6, left: 1/6, 6\n(6) + (1/6) = 37/6, left: 37/6\n(12) * (2) = 24, left: 24, 6\n(6) + (24) = 30, left: 30\n(12) - (2) = 10, left: 10, 6\n(12) + (2) = 14, left: 14, 6\n(2) * (6) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (4 + 2)))"}, {"input": "12 2 4 2\n", "output": "(4) / (12) = 1/3, left: 1/3, 2, 2\n(2) / (2) = 1, left: 1, 12, 4\n(12) * (4) = 48, left: 48, 1\n(4) - (12) = -8, left: -8, 1\n(2) - (2) = 0, left: 0, 12, 4\n(2) / (2) = 1, left: 1, 12, 4\n(12) / (4) = 3, left: 3, 1\n(2) + (4) = 6, left: 6, 12, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (2 + 4)))"}, {"input": "12 2 4 2\n", "output": "(12) - (4) = 8, left: 8, 2, 2\n(2) * (2) = 4, left: 4, 8\n(12) + (4) = 16, left: 16, 2, 2\n(4) - (12) = -8, left: -8, 2, 2\n(2) * (4) = 8, left: 8, 12, 2\n(4) / (2) = 2, left: 2, 12, 2\n(2) + (4) = 6, left: 6, 12, 2\n(6) - (2) = 4, left: 4, 12\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (2 + 4)))"}, {"input": "12 2 4 2\n", "output": "(12) * (4) = 48, left: 48, 2, 2\n(4) - (12) = -8, left: -8, 2, 2\n(12) - (4) = 8, left: 8, 2, 2\n(2) / (2) = 1, left: 1, 8\n(2) / (4) = 1/2, left: 1/2, 12, 2\n(12) * (1/2) = 6, left: 6, 2\n(4) - (2) = 2, left: 2, 12, 2\n(4) + (2) = 6, left: 6, 12, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (4 + 2)))"}, {"input": "12 2 4 2\n", "output": "(2) - (12) = -10, left: -10, 2, 4\n(4) - (-10) = 14, left: 14, 2\n(4) + (-10) = -6, left: -6, 2\n(-6) - (2) = -8, left: -8\n(-10) - (4) = -14, left: -14, 2\n(4) - (2) = 2, left: 2, -10\n(-10) + (2) = -8, left: -8\n(2) / (4) = 1/2, left: 1/2, -10\n(2) * (-10) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (2 * (2 - 12)))"}, {"input": "12 2 4 2\n", "output": "(12) - (4) = 8, left: 8, 2, 2\n(8) / (2) = 4, left: 4, 2\n(12) / (4) = 3, left: 3, 2, 2\n(4) - (12) = -8, left: -8, 2, 2\n(2) + (2) = 4, left: 4, 12, 4\n(2) / (2) = 1, left: 1, 12, 4\n(2) - (2) = 0, left: 0, 12, 4\n(2) / (2) = 1, left: 1, 12, 4\n(12) * (1) = 12, left: 12, 4\n(2) - (2) = 0, left: 0, 12, 4\n(12) - (0) = 12, left: 12, 4\n(2) + (4) = 6, left: 6, 12, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (2 + 4)))"}, {"input": "12 2 4 2\n", "output": "(12) * (4) = 48, left: 48, 2, 2\n(2) - (2) = 0, left: 0, 48\n(4) / (12) = 1/3, left: 1/3, 2, 2\n(1/3) / (2) = 1/6, left: 1/6, 2\n(12) - (4) = 8, left: 8, 2, 2\n(12) / (4) = 3, left: 3, 2, 2\n(12) + (4) = 16, left: 16, 2, 2\n(2) * (4) = 8, left: 8, 12, 2\n(2) / (12) = 1/6, left: 1/6, 8\n(4) / (2) = 2, left: 2, 12, 2\n(12) * (2) = 24, left: 24, 2\n(2) + (4) = 6, left: 6, 12, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (2 + 4)))"}, {"input": "12 2 4 2\n", "output": "(4) / (12) = 1/3, left: 1/3, 2, 2\n(12) * (4) = 48, left: 48, 2, 2\n(4) - (12) = -8, left: -8, 2, 2\n(2) / (-8) = -1/4, left: -1/4, 2\n(-8) / (2) = -4, left: -4, 2\n(12) - (4) = 8, left: 8, 2, 2\n(12) / (4) = 3, left: 3, 2, 2\n(12) + (4) = 16, left: 16, 2, 2\n(2) / (4) = 1/2, left: 1/2, 12, 2\n(4) - (2) = 2, left: 2, 12, 2\n(2) - (12) = -10, left: -10, 2\n(4) + (2) = 6, left: 6, 12, 2\n(2) * (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (2 * (4 + 2)))"}, {"input": "8 13 2 9\n", "output": "(2) / (13) = 2/13, left: 2/13, 8, 9\n(13) - (2) = 11, left: 11, 8, 9\n(13) / (8) = 13/8, left: 13/8, 2, 9\n(13/8) / (2) = 13/16, left: 13/16, 9\n(2) - (13/8) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: (9 / (2 - (13 / 8)))"}, {"input": "8 13 2 9\n", "output": "(13) * (9) = 117, left: 117, 8, 2\n(8) / (117) = 8/117, left: 8/117, 2\n(8) - (2) = 6, left: 6, 117\n(13) + (9) = 22, left: 22, 8, 2\n(8) / (22) = 4/11, left: 4/11, 2\n(9) / (13) = 9/13, left: 9/13, 8, 2\n(9/13) / (2) = 9/26, left: 9/26, 8\n(9) - (13) = -4, left: -4, 8, 2\n(8) - (-4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (8 - (9 - 13)))"}, {"input": "8 13 2 9\n", "output": "(13) - (9) = 4, left: 4, 8, 2\n(4) / (8) = 1/2, left: 1/2, 2\n(2) / (1/2) = 4, left: 4\n(1/2) / (2) = 1/4, left: 1/4\n(8) * (4) = 32, left: 32, 2\n(2) - (32) = -30, left: -30\n(32) - (2) = 30, left: 30\n(8) / (4) = 2, left: 2, 2\n(8) + (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (8 + (13 - 9)))"}, {"input": "8 13 2 9\n", "output": "(9) - (2) = 7, left: 7, 8, 13\n(2) * (9) = 18, left: 18, 8, 13\n(9) / (2) = 9/2, left: 9/2, 8, 13\n(2) - (9) = -7, left: -7, 8, 13\n(2) / (13) = 2/13, left: 2/13, 8, 9\n(2) - (13) = -11, left: -11, 8, 9\n(13) * (2) = 26, left: 26, 8, 9\n(8) - (2) = 6, left: 6, 13, 9\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((8 - 2) * (13 - 9))"}, {"input": "8 13 2 9\n", "output": "(13) / (2) = 13/2, left: 13/2, 8, 9\n(9) * (13/2) = 117/2, left: 117/2, 8\n(2) / (13) = 2/13, left: 2/13, 8, 9\n(13) - (2) = 11, left: 11, 8, 9\n(8) - (11) = -3, left: -3, 9\n(-3) / (9) = -1/3, left: -1/3\n(13) + (2) = 15, left: 15, 8, 9\n(13) / (8) = 13/8, left: 13/8, 2, 9\n(2) - (13/8) = 3/8, left: 3/8, 9\n(9) / (3/8) = 24, left: 24\nreach 24! expression: (9 / (2 - (13 / 8)))"}, {"input": "8 13 2 9\n", "output": "(9) - (8) = 1, left: 1, 13, 2\n(2) / (13) = 2/13, left: 2/13, 1\n(13) - (2) = 11, left: 11, 1\n(13) / (2) = 13/2, left: 13/2, 1\n(1) - (2) = -1, left: -1, 13\n(2) / (1) = 2, left: 2, 13\n(13) / (1) = 13, left: 13, 2\n(13) + (1) = 14, left: 14, 2\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (9 - 8)))"}, {"input": "8 13 2 9\n", "output": "(2) + (9) = 11, left: 11, 8, 13\n(8) / (13) = 8/13, left: 8/13, 11\n(9) - (2) = 7, left: 7, 8, 13\n(2) * (9) = 18, left: 18, 8, 13\n(9) / (2) = 9/2, left: 9/2, 8, 13\n(2) - (9) = -7, left: -7, 8, 13\n(2) / (9) = 2/9, left: 2/9, 8, 13\n(13) + (2) = 15, left: 15, 8, 9\n(13) - (2) = 11, left: 11, 8, 9\n(9) / (11) = 9/11, left: 9/11, 8\n(11) / (9) = 11/9, left: 11/9, 8\n(8) - (2) = 6, left: 6, 13, 9\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((8 - 2) * (13 - 9))"}, {"input": "8 5 8 8\n", "output": "(8) * (8) = 64, left: 64, 5, 8\n(5) / (64) = 5/64, left: 5/64, 8\n(5) - (64) = -59, left: -59, 8\n(5) + (64) = 69, left: 69, 8\n(69) / (8) = 69/8, left: 69/8\n(64) - (5) = 59, left: 59, 8\n(64) / (5) = 64/5, left: 64/5, 8\n(5) / (8) = 5/8, left: 5/8, 64\n(5) * (8) = 40, left: 40, 64\n(64) - (40) = 24, left: 24\nreach 24! expression: ((8 * 8) - (5 * 8))"}, {"input": "8 5 8 8\n", "output": "(8) - (8) = 0, left: 0, 8, 5\n(0) - (8) = -8, left: -8, 5\n(0) / (5) = 0, left: 0, 8\n(0) - (8) = -8, left: -8\n(5) + (0) = 5, left: 5, 8\n(8) + (8) = 16, left: 16, 8, 5\n(8) / (16) = 1/2, left: 1/2, 5\n(8) + (5) = 13, left: 13, 16\n(8) * (5) = 40, left: 40, 16\n(40) - (16) = 24, left: 24\nreach 24! expression: ((8 * 5) - (8 + 8))"}, {"input": "8 5 8 8\n", "output": "(5) + (8) = 13, left: 13, 8, 8\n(8) - (13) = -5, left: -5, 8\n(-5) / (8) = -5/8, left: -5/8\n(8) - (8) = 0, left: 0, 13\n(5) / (8) = 5/8, left: 5/8, 8, 8\n(5) * (8) = 40, left: 40, 8, 8\n(8) / (8) = 1, left: 1, 40\n(8) - (8) = 0, left: 0, 40\n(8) + (8) = 16, left: 16, 40\n(40) - (16) = 24, left: 24\nreach 24! expression: ((5 * 8) - (8 + 8))"}, {"input": "8 5 8 8\n", "output": "(8) / (5) = 8/5, left: 8/5, 8, 8\n(8/5) - (8) = -32/5, left: -32/5, 8\n(8) * (-32/5) = -256/5, left: -256/5\n(5) / (8) = 5/8, left: 5/8, 8, 8\n(5) - (8) = -3, left: -3, 8, 8\n(8) * (-3) = -24, left: -24, 8\n(8) * (-3) = -24, left: -24, 8\n(5) * (8) = 40, left: 40, 8, 8\n(40) - (8) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: (((5 * 8) - 8) - 8)"}, {"input": "8 5 8 8\n", "output": "(8) / (5) = 8/5, left: 8/5, 8, 8\n(8) / (8/5) = 5, left: 5, 8\n(8/5) / (8) = 1/5, left: 1/5, 8\n(5) / (8) = 5/8, left: 5/8, 8, 8\n(5/8) / (8) = 5/64, left: 5/64, 8\n(8) - (5) = 3, left: 3, 8, 8\n(3) / (8) = 3/8, left: 3/8, 8\n(8) * (3) = 24, left: 24, 8\n(8) + (24) = 32, left: 32\n(5) - (8) = -3, left: -3, 8, 8\n(8) / (8) = 1, left: 1, -3\n(5) * (8) = 40, left: 40, 8, 8\n(40) - (8) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: (((5 * 8) - 8) - 8)"}, {"input": "5 8 7 6\n", "output": "(5) * (6) = 30, left: 30, 8, 7\n(8) - (7) = 1, left: 1, 30\n(5) * (8) = 40, left: 40, 7, 6\n(7) * (6) = 42, left: 42, 40\n(8) / (5) = 8/5, left: 8/5, 7, 6\n(8) - (5) = 3, left: 3, 7, 6\n(7) + (6) = 13, left: 13, 3\n(3) + (13) = 16, left: 16\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (8 - 5)))"}, {"input": "5 8 7 6\n", "output": "(7) - (8) = -1, left: -1, 5, 6\n(6) / (-1) = -6, left: -6, 5\n(6) - (-1) = 7, left: 7, 5\n(5) - (7) = -2, left: -2\n(5) / (7) = 5/7, left: 5/7\n(-1) - (6) = -7, left: -7, 5\n(5) - (-1) = 6, left: 6, 6\n(5) / (-1) = -5, left: -5, 6\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (7 - 8)))"}, {"input": "5 8 7 6\n", "output": "(5) / (7) = 5/7, left: 5/7, 8, 6\n(8) * (5/7) = 40/7, left: 40/7, 6\n(8) / (5/7) = 56/5, left: 56/5, 6\n(6) / (5/7) = 42/5, left: 42/5, 8\n(6) - (8) = -2, left: -2, 5/7\n(6) / (8) = 3/4, left: 3/4, 5/7\n(5) + (7) = 12, left: 12, 8, 6\n(6) - (8) = -2, left: -2, 12\n(8) - (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (8 - 6))"}, {"input": "5 8 7 6\n", "output": "(6) - (7) = -1, left: -1, 5, 8\n(8) - (5) = 3, left: 3, -1\n(6) / (7) = 6/7, left: 6/7, 5, 8\n(7) - (6) = 1, left: 1, 5, 8\n(7) / (6) = 7/6, left: 7/6, 5, 8\n(5) / (8) = 5/8, left: 5/8, 7/6\n(7) * (6) = 42, left: 42, 5, 8\n(7) - (5) = 2, left: 2, 8, 6\n(6) / (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 / (7 - 5)))"}, {"input": "5 8 7 6\n", "output": "(6) / (7) = 6/7, left: 6/7, 5, 8\n(8) * (6/7) = 48/7, left: 48/7, 5\n(7) * (6) = 42, left: 42, 5, 8\n(7) / (6) = 7/6, left: 7/6, 5, 8\n(8) - (5) = 3, left: 3, 7/6\n(5) / (8) = 5/8, left: 5/8, 7, 6\n(8) / (5) = 8/5, left: 8/5, 7, 6\n(5) - (8) = -3, left: -3, 7, 6\n(7) + (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 + (5 - 8)))"}, {"input": "5 8 7 6\n", "output": "(6) / (7) = 6/7, left: 6/7, 5, 8\n(5) + (6/7) = 41/7, left: 41/7, 8\n(8) + (6/7) = 62/7, left: 62/7, 5\n(7) - (6) = 1, left: 1, 5, 8\n(7) / (6) = 7/6, left: 7/6, 5, 8\n(5) * (7/6) = 35/6, left: 35/6, 8\n(7) + (6) = 13, left: 13, 5, 8\n(5) + (13) = 18, left: 18, 8\n(7) * (6) = 42, left: 42, 5, 8\n(8) - (5) = 3, left: 3, 42\n(8) / (5) = 8/5, left: 8/5, 42\n(7) - (5) = 2, left: 2, 8, 6\n(6) / (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 / (7 - 5)))"}, {"input": "5 8 7 6\n", "output": "(5) / (6) = 5/6, left: 5/6, 8, 7\n(5) + (6) = 11, left: 11, 8, 7\n(8) / (7) = 8/7, left: 8/7, 11\n(5) * (6) = 30, left: 30, 8, 7\n(30) - (7) = 23, left: 23, 8\n(5) * (8) = 40, left: 40, 7, 6\n(7) / (6) = 7/6, left: 7/6, 40\n(8) / (5) = 8/5, left: 8/5, 7, 6\n(7) / (8/5) = 35/8, left: 35/8, 6\n(8) - (5) = 3, left: 3, 7, 6\n(6) - (7) = -1, left: -1, 3\n(3) / (-1) = -3, left: -3\n(7) - (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 - (8 - 5)))"}, {"input": "5 8 7 6\n", "output": "(6) / (7) = 6/7, left: 6/7, 5, 8\n(5) * (6/7) = 30/7, left: 30/7, 8\n(7) * (6) = 42, left: 42, 5, 8\n(7) + (6) = 13, left: 13, 5, 8\n(7) / (6) = 7/6, left: 7/6, 5, 8\n(8) * (7/6) = 28/3, left: 28/3, 5\n(5) * (7/6) = 35/6, left: 35/6, 8\n(5) / (8) = 5/8, left: 5/8, 7, 6\n(6) / (7) = 6/7, left: 6/7, 5/8\n(5) * (8) = 40, left: 40, 7, 6\n(6) / (40) = 3/20, left: 3/20, 7\n(5) - (8) = -3, left: -3, 7, 6\n(7) + (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 + (5 - 8)))"}, {"input": "5 8 7 6\n", "output": "(7) - (8) = -1, left: -1, 5, 6\n(6) / (-1) = -6, left: -6, 5\n(6) * (-1) = -6, left: -6, 5\n(5) * (-6) = -30, left: -30\n(5) / (-6) = -5/6, left: -5/6\n(-1) - (6) = -7, left: -7, 5\n(-7) - (5) = -12, left: -12\n(5) - (-1) = 6, left: 6, 6\n(-1) / (5) = -1/5, left: -1/5, 6\n(6) * (-1/5) = -6/5, left: -6/5\n(5) / (-1) = -5, left: -5, 6\n(6) + (-5) = 1, left: 1\n(5) + (-1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 + (7 - 8)))"}, {"input": "10 8 5 8\n", "output": "(8) + (5) = 13, left: 13, 10, 8\n(8) - (10) = -2, left: -2, 13\n(13) + (-2) = 11, left: 11\n(13) / (8) = 13/8, left: 13/8, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((8 + 5) - 10))"}, {"input": "10 8 5 8\n", "output": "(8) / (8) = 1, left: 1, 10, 5\n(5) * (1) = 5, left: 5, 10\n(5) - (10) = -5, left: -5\n(8) + (8) = 16, left: 16, 10, 5\n(8) - (8) = 0, left: 0, 10, 5\n(5) * (0) = 0, left: 0, 10\n(8) - (8) = 0, left: 0, 10, 5\n(10) / (5) = 2, left: 2, 8, 8\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (10 / 5)))"}, {"input": "10 8 5 8\n", "output": "(8) - (10) = -2, left: -2, 8, 5\n(8) / (-2) = -4, left: -4, 5\n(5) / (-4) = -5/4, left: -5/4\n(8) - (-2) = 10, left: 10, 5\n(5) - (10) = -5, left: -5\n(-2) / (5) = -2/5, left: -2/5, 8\n(5) / (-2) = -5/2, left: -5/2, 8\n(-5/2) / (8) = -5/16, left: -5/16\n(5) + (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 + (8 - 10)))"}, {"input": "10 8 5 8\n", "output": "(8) - (10) = -2, left: -2, 8, 5\n(8) - (-2) = 10, left: 10, 5\n(8) + (-2) = 6, left: 6, 5\n(8) * (-2) = -16, left: -16, 5\n(8) / (5) = 8/5, left: 8/5, -2\n(8) - (5) = 3, left: 3, -2\n(8) * (5) = 40, left: 40, -2\n(-2) * (40) = -80, left: -80\n(5) + (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 + (8 - 10)))"}, {"input": "10 8 5 8\n", "output": "(10) + (8) = 18, left: 18, 8, 5\n(10) / (8) = 5/4, left: 5/4, 8, 5\n(8) - (5/4) = 27/4, left: 27/4, 5\n(8) - (10) = -2, left: -2, 8, 5\n(8) * (5) = 40, left: 40, -2\n(40) / (-2) = -20, left: -20\n(8) / (5) = 8/5, left: 8/5, -2\n(-2) / (8) = -1/4, left: -1/4, 5\n(5) + (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (5 + (8 - 10)))"}, {"input": "10 8 5 8\n", "output": "(8) + (5) = 13, left: 13, 10, 8\n(10) / (8) = 5/4, left: 5/4, 13\n(8) / (10) = 4/5, left: 4/5, 13\n(13) - (4/5) = 61/5, left: 61/5\n(8) - (13) = -5, left: -5, 10\n(-5) / (10) = -1/2, left: -1/2\n(13) / (10) = 13/10, left: 13/10, 8\n(8) / (13/10) = 80/13, left: 80/13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((8 + 5) - 10))"}, {"input": "8 13 6 4\n", "output": "(8) / (6) = 4/3, left: 4/3, 13, 4\n(4) - (4/3) = 8/3, left: 8/3, 13\n(13) + (8/3) = 47/3, left: 47/3\n(6) / (8) = 3/4, left: 3/4, 13, 4\n(8) - (6) = 2, left: 2, 13, 4\n(6) - (8) = -2, left: -2, 13, 4\n(13) - (4) = 9, left: 9, 8, 6\n(9) - (8) = 1, left: 1, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 4) - 6))"}, {"input": "8 13 6 4\n", "output": "(4) / (6) = 2/3, left: 2/3, 8, 13\n(6) / (4) = 3/2, left: 3/2, 8, 13\n(8) - (13) = -5, left: -5, 3/2\n(6) - (4) = 2, left: 2, 8, 13\n(13) / (8) = 13/8, left: 13/8, 2\n(4) - (6) = -2, left: -2, 8, 13\n(8) / (-2) = -4, left: -4, 13\n(6) + (4) = 10, left: 10, 8, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (6 + 4)))"}, {"input": "8 13 6 4\n", "output": "(8) / (6) = 4/3, left: 4/3, 13, 4\n(6) - (8) = -2, left: -2, 13, 4\n(-2) - (13) = -15, left: -15, 4\n(-15) - (4) = -19, left: -19\n(8) - (6) = 2, left: 2, 13, 4\n(4) / (13) = 4/13, left: 4/13, 8, 6\n(8) - (4/13) = 100/13, left: 100/13, 6\n(13) - (4) = 9, left: 9, 8, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 4) - 6))"}, {"input": "8 13 6 4\n", "output": "(8) + (4) = 12, left: 12, 13, 6\n(8) / (4) = 2, left: 2, 13, 6\n(13) + (2) = 15, left: 15, 6\n(13) + (6) = 19, left: 19, 8, 4\n(8) * (4) = 32, left: 32, 19\n(13) * (6) = 78, left: 78, 8, 4\n(4) * (78) = 312, left: 312, 8\n(13) - (6) = 7, left: 7, 8, 4\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 6) - 4))"}, {"input": "8 13 6 4\n", "output": "(6) + (4) = 10, left: 10, 8, 13\n(10) - (8) = 2, left: 2, 13\n(13) / (2) = 13/2, left: 13/2\n(8) + (10) = 18, left: 18, 13\n(13) + (18) = 31, left: 31\n(10) / (8) = 5/4, left: 5/4, 13\n(8) * (10) = 80, left: 80, 13\n(13) / (8) = 13/8, left: 13/8, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (13 - (6 + 4)))"}, {"input": "8 13 6 4\n", "output": "(8) + (4) = 12, left: 12, 13, 6\n(6) - (12) = -6, left: -6, 13\n(8) - (4) = 4, left: 4, 13, 6\n(8) / (4) = 2, left: 2, 13, 6\n(8) * (4) = 32, left: 32, 13, 6\n(13) / (6) = 13/6, left: 13/6, 32\n(6) / (13) = 6/13, left: 6/13, 8, 4\n(6) - (13) = -7, left: -7, 8, 4\n(4) - (-7) = 11, left: 11, 8\n(13) / (6) = 13/6, left: 13/6, 8, 4\n(13) * (6) = 78, left: 78, 8, 4\n(13) - (6) = 7, left: 7, 8, 4\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 6) - 4))"}, {"input": "3 3 6 13\n", "output": "(13) - (3) = 10, left: 10, 3, 6\n(3) + (6) = 9, left: 9, 10\n(3) - (6) = -3, left: -3, 10\n(10) / (3) = 10/3, left: 10/3, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (13 - 3)) - 6)"}, {"input": "3 3 6 13\n", "output": "(3) * (13) = 39, left: 39, 3, 6\n(6) / (39) = 2/13, left: 2/13, 3\n(3) - (2/13) = 37/13, left: 37/13\n(13) - (3) = 10, left: 10, 3, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (13 - 3)) - 6)"}, {"input": "3 3 6 13\n", "output": "(3) - (13) = -10, left: -10, 3, 6\n(6) - (-10) = 16, left: 16, 3\n(6) * (-10) = -60, left: -60, 3\n(3) + (13) = 16, left: 16, 3, 6\n(16) - (6) = 10, left: 10, 3\n(13) / (3) = 13/3, left: 13/3, 3, 6\n(3) - (13/3) = -4/3, left: -4/3, 6\n(13) - (3) = 10, left: 10, 3, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (13 - 3)) - 6)"}, {"input": "3 3 6 13\n", "output": "(13) - (3) = 10, left: 10, 3, 6\n(3) + (6) = 9, left: 9, 10\n(10) * (9) = 90, left: 90\n(6) - (3) = 3, left: 3, 10\n(10) + (3) = 13, left: 13\n(10) / (3) = 10/3, left: 10/3, 6\n(6) / (10/3) = 9/5, left: 9/5\n(3) - (10) = -7, left: -7, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (13 - 3)) - 6)"}, {"input": "3 3 6 13\n", "output": "(3) / (6) = 1/2, left: 1/2, 3, 13\n(3) + (13) = 16, left: 16, 1/2\n(6) - (3) = 3, left: 3, 3, 13\n(3) + (6) = 9, left: 9, 3, 13\n(13) - (9) = 4, left: 4, 3\n(6) - (3) = 3, left: 3, 3, 13\n(13) / (3) = 13/3, left: 13/3, 3\n(13) - (3) = 10, left: 10, 3, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (13 - 3)) - 6)"}, {"input": "3 3 6 13\n", "output": "(3) - (13) = -10, left: -10, 3, 6\n(-10) / (3) = -10/3, left: -10/3, 6\n(3) + (-10) = -7, left: -7, 6\n(13) / (3) = 13/3, left: 13/3, 3, 6\n(6) - (3) = 3, left: 3, 13/3\n(3) - (13/3) = -4/3, left: -4/3, 6\n(3) / (13) = 3/13, left: 3/13, 3, 6\n(13) - (3) = 10, left: 10, 3, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (13 - 3)) - 6)"}, {"input": "3 3 6 13\n", "output": "(13) / (6) = 13/6, left: 13/6, 3, 3\n(3) / (3) = 1, left: 1, 13/6\n(3) / (3) = 1, left: 1, 13/6\n(6) + (13) = 19, left: 19, 3, 3\n(3) - (19) = -16, left: -16, 3\n(3) / (3) = 1, left: 1, 19\n(19) - (3) = 16, left: 16, 3\n(6) - (13) = -7, left: -7, 3, 3\n(3) * (-7) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (3 * (6 - 13)))"}, {"input": "3 3 6 13\n", "output": "(6) / (3) = 2, left: 2, 3, 13\n(2) - (3) = -1, left: -1, 13\n(6) - (3) = 3, left: 3, 3, 13\n(3) + (3) = 6, left: 6, 13\n(3) / (6) = 1/2, left: 1/2, 3, 13\n(3) * (6) = 18, left: 18, 3, 13\n(18) - (3) = 15, left: 15, 13\n(6) - (3) = 3, left: 3, 3, 13\n(13) / (3) = 13/3, left: 13/3, 3\n(3) - (13/3) = -4/3, left: -4/3\n(3) + (6) = 9, left: 9, 3, 13\n(13) - (3) = 10, left: 10, 3, 6\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (13 - 3)) - 6)"}, {"input": "8 8 13 2\n", "output": "(8) / (13) = 8/13, left: 8/13, 8, 2\n(2) + (8/13) = 34/13, left: 34/13, 8\n(8) + (34/13) = 138/13, left: 138/13\n(8/13) / (8) = 1/13, left: 1/13, 2\n(2) + (1/13) = 27/13, left: 27/13\n(8) * (8/13) = 64/13, left: 64/13, 2\n(8) / (8/13) = 13, left: 13, 2\n(13) - (8) = 5, left: 5, 8, 2\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 8) - 2))"}, {"input": "8 8 13 2\n", "output": "(8) * (8) = 64, left: 64, 13, 2\n(13) * (64) = 832, left: 832, 2\n(13) + (2) = 15, left: 15, 64\n(2) / (13) = 2/13, left: 2/13, 64\n(13) / (2) = 13/2, left: 13/2, 64\n(2) + (64) = 66, left: 66, 13\n(64) / (2) = 32, left: 32, 13\n(8) / (8) = 1, left: 1, 13, 2\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (8 / 8)))"}, {"input": "8 8 13 2\n", "output": "(8) + (8) = 16, left: 16, 13, 2\n(16) / (2) = 8, left: 8, 13\n(16) - (2) = 14, left: 14, 13\n(2) * (16) = 32, left: 32, 13\n(13) + (16) = 29, left: 29, 2\n(8) / (8) = 1, left: 1, 13, 2\n(2) / (13) = 2/13, left: 2/13, 1\n(13) - (2) = 11, left: 11, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (8 / 8)))"}, {"input": "8 8 13 2\n", "output": "(8) / (13) = 8/13, left: 8/13, 8, 2\n(8) / (8/13) = 13, left: 13, 2\n(8) - (13) = -5, left: -5, 8, 2\n(2) / (8) = 1/4, left: 1/4, -5\n(-5) - (8) = -13, left: -13, 2\n(8) + (-5) = 3, left: 3, 2\n(13) - (8) = 5, left: 5, 8, 2\n(5) / (2) = 5/2, left: 5/2, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 8) - 2))"}, {"input": "8 8 13 2\n", "output": "(2) / (13) = 2/13, left: 2/13, 8, 8\n(8) + (8) = 16, left: 16, 2/13\n(2) - (13) = -11, left: -11, 8, 8\n(13) + (2) = 15, left: 15, 8, 8\n(8) - (8) = 0, left: 0, 15\n(8) * (8) = 64, left: 64, 15\n(15) / (64) = 15/64, left: 15/64\n(13) - (2) = 11, left: 11, 8, 8\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((13 - 2) - 8))"}, {"input": "7 3 6 12\n", "output": "(7) / (3) = 7/3, left: 7/3, 6, 12\n(6) / (12) = 1/2, left: 1/2, 7/3\n(12) / (6) = 2, left: 2, 7/3\n(7/3) / (2) = 7/6, left: 7/6\n(3) / (7) = 3/7, left: 3/7, 6, 12\n(6) - (3/7) = 39/7, left: 39/7, 12\n(12) - (39/7) = 45/7, left: 45/7\n(7) - (3) = 4, left: 4, 6, 12\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (6 - (7 - 3)))"}, {"input": "7 3 6 12\n", "output": "(6) + (12) = 18, left: 18, 7, 3\n(18) / (7) = 18/7, left: 18/7, 3\n(3) / (18) = 1/6, left: 1/6, 7\n(1/6) / (7) = 1/42, left: 1/42\n(12) / (6) = 2, left: 2, 7, 3\n(7) + (2) = 9, left: 9, 3\n(7) * (2) = 14, left: 14, 3\n(6) - (12) = -6, left: -6, 7, 3\n(3) - (7) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((6 - 12) * (3 - 7))"}, {"input": "7 3 6 12\n", "output": "(3) - (12) = -9, left: -9, 7, 6\n(3) / (12) = 1/4, left: 1/4, 7, 6\n(7) - (6) = 1, left: 1, 1/4\n(3) + (12) = 15, left: 15, 7, 6\n(6) - (3) = 3, left: 3, 7, 12\n(3) - (6) = -3, left: -3, 7, 12\n(7) * (12) = 84, left: 84, -3\n(3) + (6) = 9, left: 9, 7, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 + 6) - 7))"}, {"input": "7 3 6 12\n", "output": "(12) / (7) = 12/7, left: 12/7, 3, 6\n(6) - (3) = 3, left: 3, 12/7\n(7) / (12) = 7/12, left: 7/12, 3, 6\n(3) * (6) = 18, left: 18, 7/12\n(7/12) - (18) = -209/12, left: -209/12\n(12) - (7) = 5, left: 5, 3, 6\n(12) / (3) = 4, left: 4, 7, 6\n(3) + (6) = 9, left: 9, 7, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 + 6) - 7))"}, {"input": "7 3 6 12\n", "output": "(6) / (3) = 2, left: 2, 7, 12\n(2) - (12) = -10, left: -10, 7\n(7) - (-10) = 17, left: 17\n(3) * (6) = 18, left: 18, 7, 12\n(3) / (6) = 1/2, left: 1/2, 7, 12\n(6) - (3) = 3, left: 3, 7, 12\n(12) - (3) = 9, left: 9, 7\n(3) + (6) = 9, left: 9, 7, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 + 6) - 7))"}, {"input": "7 3 6 12\n", "output": "(3) / (12) = 1/4, left: 1/4, 7, 6\n(7) - (6) = 1, left: 1, 1/4\n(3) + (12) = 15, left: 15, 7, 6\n(7) - (15) = -8, left: -8, 6\n(6) / (-8) = -3/4, left: -3/4\n(12) / (3) = 4, left: 4, 7, 6\n(3) * (12) = 36, left: 36, 7, 6\n(3) * (6) = 18, left: 18, 7, 12\n(3) / (6) = 1/2, left: 1/2, 7, 12\n(1/2) - (12) = -23/2, left: -23/2, 7\n(3) - (6) = -3, left: -3, 7, 12\n(3) + (6) = 9, left: 9, 7, 12\n(9) - (7) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 + 6) - 7))"}, {"input": "5 2 12 13\n", "output": "(2) - (12) = -10, left: -10, 5, 13\n(2) / (12) = 1/6, left: 1/6, 5, 13\n(5) + (13) = 18, left: 18, 1/6\n(12) / (2) = 6, left: 6, 5, 13\n(5) + (13) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((12 / 2) + (5 + 13))"}, {"input": "5 2 12 13\n", "output": "(5) + (13) = 18, left: 18, 2, 12\n(12) / (18) = 2/3, left: 2/3, 2\n(2/3) / (2) = 1/3, left: 1/3\n(18) - (12) = 6, left: 6, 2\n(12) / (2) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((5 + 13) + (12 / 2))"}, {"input": "5 2 12 13\n", "output": "(13) / (2) = 13/2, left: 13/2, 5, 12\n(2) * (13) = 26, left: 26, 5, 12\n(2) / (13) = 2/13, left: 2/13, 5, 12\n(13) - (5) = 8, left: 8, 2, 12\n(5) / (13) = 5/13, left: 5/13, 2, 12\n(2) - (12) = -10, left: -10, 5/13\n(5/13) - (-10) = 135/13, left: 135/13\n(5) + (13) = 18, left: 18, 2, 12\n(2) * (18) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((2 * (5 + 13)) - 12)"}, {"input": "5 2 12 13\n", "output": "(5) / (12) = 5/12, left: 5/12, 2, 13\n(2) + (13) = 15, left: 15, 5/12\n(5) - (12) = -7, left: -7, 2, 13\n(-7) - (13) = -20, left: -20, 2\n(13) - (2) = 11, left: 11, 5, 12\n(2) + (13) = 15, left: 15, 5, 12\n(2) * (13) = 26, left: 26, 5, 12\n(12) / (2) = 6, left: 6, 5, 13\n(13) + (6) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (13 + (12 / 2)))"}, {"input": "5 2 12 13\n", "output": "(12) / (13) = 12/13, left: 12/13, 5, 2\n(5) * (2) = 10, left: 10, 12, 13\n(5) - (2) = 3, left: 3, 12, 13\n(12) / (3) = 4, left: 4, 13\n(2) + (12) = 14, left: 14, 5, 13\n(5) * (14) = 70, left: 70, 13\n(2) / (12) = 1/6, left: 1/6, 5, 13\n(12) / (2) = 6, left: 6, 5, 13\n(13) + (6) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (13 + (12 / 2)))"}, {"input": "5 2 12 13\n", "output": "(5) + (13) = 18, left: 18, 2, 12\n(12) / (18) = 2/3, left: 2/3, 2\n(18) / (12) = 3/2, left: 3/2, 2\n(12) - (18) = -6, left: -6, 2\n(2) * (12) = 24, left: 24, 18\n(12) - (2) = 10, left: 10, 18\n(10) - (18) = -8, left: -8\n(2) - (12) = -10, left: -10, 18\n(12) / (2) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((5 + 13) + (12 / 2))"}, {"input": "5 2 12 13\n", "output": "(2) - (12) = -10, left: -10, 5, 13\n(5) + (-10) = -5, left: -5, 13\n(-10) - (13) = -23, left: -23, 5\n(2) / (12) = 1/6, left: 1/6, 5, 13\n(5) - (13) = -8, left: -8, 1/6\n(5) / (1/6) = 30, left: 30, 13\n(5) - (1/6) = 29/6, left: 29/6, 13\n(12) / (2) = 6, left: 6, 5, 13\n(5) + (13) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((12 / 2) + (5 + 13))"}, {"input": "13 5 8 6\n", "output": "(8) / (6) = 4/3, left: 4/3, 13, 5\n(13) * (4/3) = 52/3, left: 52/3, 5\n(5) - (13) = -8, left: -8, 4/3\n(4/3) + (-8) = -20/3, left: -20/3\n(13) + (5) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((8 / 6) * (13 + 5))"}, {"input": "13 5 8 6\n", "output": "(8) / (13) = 8/13, left: 8/13, 5, 6\n(13) / (8) = 13/8, left: 13/8, 5, 6\n(13) * (8) = 104, left: 104, 5, 6\n(5) / (6) = 5/6, left: 5/6, 104\n(6) - (13) = -7, left: -7, 5, 8\n(5) / (6) = 5/6, left: 5/6, 13, 8\n(8) - (6) = 2, left: 2, 13, 5\n(8) / (6) = 4/3, left: 4/3, 13, 5\n(13) + (5) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((8 / 6) * (13 + 5))"}, {"input": "13 5 8 6\n", "output": "(13) / (8) = 13/8, left: 13/8, 5, 6\n(13) * (8) = 104, left: 104, 5, 6\n(5) * (6) = 30, left: 30, 104\n(13) - (8) = 5, left: 5, 5, 6\n(6) / (5) = 6/5, left: 6/5, 5\n(8) - (13) = -5, left: -5, 5, 6\n(13) + (8) = 21, left: 21, 5, 6\n(6) / (8) = 3/4, left: 3/4, 13, 5\n(13) + (5) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((13 + 5) / (6 / 8))"}, {"input": "13 5 8 6\n", "output": "(5) - (8) = -3, left: -3, 13, 6\n(13) / (6) = 13/6, left: 13/6, -3\n(5) / (8) = 5/8, left: 5/8, 13, 6\n(13) + (5/8) = 109/8, left: 109/8, 6\n(5) - (6) = -1, left: -1, 13, 8\n(6) / (5) = 6/5, left: 6/5, 13, 8\n(5) - (13) = -8, left: -8, 8, 6\n(13) + (5) = 18, left: 18, 8, 6\n(8) * (18) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((8 * (13 + 5)) / 6)"}, {"input": "13 5 8 6\n", "output": "(8) / (6) = 4/3, left: 4/3, 13, 5\n(5) * (4/3) = 20/3, left: 20/3, 13\n(20/3) - (13) = -19/3, left: -19/3\n(4/3) / (13) = 4/39, left: 4/39, 5\n(13) + (4/3) = 43/3, left: 43/3, 5\n(13) - (4/3) = 35/3, left: 35/3, 5\n(4/3) - (13) = -35/3, left: -35/3, 5\n(5) - (-35/3) = 50/3, left: 50/3\n(13) + (5) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((8 / 6) * (13 + 5))"}, {"input": "13 5 8 6\n", "output": "(8) - (5) = 3, left: 3, 13, 6\n(13) - (6) = 7, left: 7, 3\n(3) - (7) = -4, left: -4\n(8) / (5) = 8/5, left: 8/5, 13, 6\n(5) - (8) = -3, left: -3, 13, 6\n(-3) - (13) = -16, left: -16, 6\n(6) - (8) = -2, left: -2, 13, 5\n(8) / (6) = 4/3, left: 4/3, 13, 5\n(13) + (5) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((8 / 6) * (13 + 5))"}, {"input": "4 9 5 13\n", "output": "(5) - (4) = 1, left: 1, 9, 13\n(9) / (1) = 9, left: 9, 13\n(5) / (4) = 5/4, left: 5/4, 9, 13\n(4) + (5) = 9, left: 9, 9, 13\n(9) / (13) = 9/13, left: 9/13, 9\n(9/13) / (9) = 1/13, left: 1/13\n(9) / (9) = 1, left: 1, 13\n(4) * (5) = 20, left: 20, 9, 13\n(13) + (20) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((13 + (4 * 5)) - 9)"}, {"input": "4 9 5 13\n", "output": "(4) + (13) = 17, left: 17, 9, 5\n(5) - (17) = -12, left: -12, 9\n(13) - (4) = 9, left: 9, 9, 5\n(9) + (9) = 18, left: 18, 5\n(4) * (13) = 52, left: 52, 9, 5\n(4) - (9) = -5, left: -5, 5, 13\n(13) - (5) = 8, left: 8, -5\n(9) - (13) = -4, left: -4, 4, 5\n(5) * (-4) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (5 * (9 - 13)))"}, {"input": "4 9 5 13\n", "output": "(5) + (13) = 18, left: 18, 4, 9\n(5) / (13) = 5/13, left: 5/13, 4, 9\n(5/13) - (9) = -112/13, left: -112/13, 4\n(13) - (5) = 8, left: 8, 4, 9\n(9) + (13) = 22, left: 22, 4, 5\n(9) / (13) = 9/13, left: 9/13, 4, 5\n(4) - (5) = -1, left: -1, 9/13\n(13) - (9) = 4, left: 4, 4, 5\n(4) * (5) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((13 - 9) + (4 * 5))"}, {"input": "4 9 5 13\n", "output": "(13) / (4) = 13/4, left: 13/4, 9, 5\n(4) / (13) = 4/13, left: 4/13, 9, 5\n(5) - (4/13) = 61/13, left: 61/13, 9\n(4/13) - (9) = -113/13, left: -113/13, 5\n(4) + (13) = 17, left: 17, 9, 5\n(17) / (9) = 17/9, left: 17/9, 5\n(9) / (13) = 9/13, left: 9/13, 4, 5\n(9) - (13) = -4, left: -4, 4, 5\n(4) * (5) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((4 * 5) - (9 - 13))"}, {"input": "4 9 5 13\n", "output": "(5) - (13) = -8, left: -8, 4, 9\n(4) * (-8) = -32, left: -32, 9\n(4) / (-8) = -1/2, left: -1/2, 9\n(9) * (-1/2) = -9/2, left: -9/2\n(13) - (5) = 8, left: 8, 4, 9\n(5) / (4) = 5/4, left: 5/4, 9, 13\n(13) * (5/4) = 65/4, left: 65/4, 9\n(4) * (5) = 20, left: 20, 9, 13\n(9) - (13) = -4, left: -4, 20\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((4 * 5) - (9 - 13))"}, {"input": "4 8 6 6\n", "output": "(4) / (8) = 1/2, left: 1/2, 6, 6\n(6) - (1/2) = 11/2, left: 11/2, 6\n(6) - (11/2) = 1/2, left: 1/2\n(6) - (6) = 0, left: 0, 1/2\n(6) + (6) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((6 + 6) / (4 / 8))"}, {"input": "4 8 6 6\n", "output": "(8) + (6) = 14, left: 14, 4, 6\n(6) - (4) = 2, left: 2, 14\n(14) * (2) = 28, left: 28\n(14) + (2) = 16, left: 16\n(4) + (6) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((8 + 6) + (4 + 6))"}, {"input": "4 8 6 6\n", "output": "(4) / (8) = 1/2, left: 1/2, 6, 6\n(6) - (1/2) = 11/2, left: 11/2, 6\n(6) / (1/2) = 12, left: 12, 6\n(12) - (6) = 6, left: 6\n(6) + (1/2) = 13/2, left: 13/2, 6\n(6) * (1/2) = 3, left: 3, 6\n(6) - (6) = 0, left: 0, 1/2\n(6) + (6) = 12, left: 12, 1/2\n(1/2) * (12) = 6, left: 6\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((6 + 6) / (4 / 8))"}, {"input": "4 8 6 6\n", "output": "(8) + (6) = 14, left: 14, 4, 6\n(6) / (4) = 3/2, left: 3/2, 14\n(14) * (3/2) = 21, left: 21\n(4) / (6) = 2/3, left: 2/3, 14\n(14) - (2/3) = 40/3, left: 40/3\n(2/3) / (14) = 1/21, left: 1/21\n(4) + (6) = 10, left: 10, 14\n(10) / (14) = 5/7, left: 5/7\n(14) * (10) = 140, left: 140\n(14) + (10) = 24, left: 24\nreach 24! expression: ((8 + 6) + (4 + 6))"}, {"input": "4 8 6 6\n", "output": "(8) / (6) = 4/3, left: 4/3, 4, 6\n(4) * (4/3) = 16/3, left: 16/3, 6\n(6) - (4) = 2, left: 2, 4/3\n(6) / (8) = 3/4, left: 3/4, 4, 6\n(4) + (3/4) = 19/4, left: 19/4, 6\n(3/4) - (4) = -13/4, left: -13/4, 6\n(6) / (4) = 3/2, left: 3/2, 3/4\n(8) + (6) = 14, left: 14, 4, 6\n(4) + (6) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((8 + 6) + (4 + 6))"}, {"input": "4 8 6 6\n", "output": "(6) / (6) = 1, left: 1, 4, 8\n(1) / (4) = 1/4, left: 1/4, 8\n(8) + (1/4) = 33/4, left: 33/4\n(1/4) - (8) = -31/4, left: -31/4\n(4) / (1) = 4, left: 4, 8\n(8) + (4) = 12, left: 12\n(1) - (4) = -3, left: -3, 8\n(4) - (1) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (6 / 6)))"}, {"input": "4 8 6 6\n", "output": "(8) + (6) = 14, left: 14, 4, 6\n(14) / (4) = 7/2, left: 7/2, 6\n(7/2) - (6) = -5/2, left: -5/2\n(7/2) / (6) = 7/12, left: 7/12\n(6) - (7/2) = 5/2, left: 5/2\n(4) / (14) = 2/7, left: 2/7, 6\n(6) + (2/7) = 44/7, left: 44/7\n(6) * (2/7) = 12/7, left: 12/7\n(4) + (14) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (4 + (8 + 6)))"}, {"input": "4 5 5 4\n", "output": "(4) / (5) = 4/5, left: 4/5, 4, 5\n(4) - (4/5) = 16/5, left: 16/5, 5\n(4) * (4/5) = 16/5, left: 16/5, 5\n(16/5) - (5) = -9/5, left: -9/5\n(4) + (4/5) = 24/5, left: 24/5, 5\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (4 + (4 / 5)))"}, {"input": "4 5 5 4\n", "output": "(4) / (5) = 4/5, left: 4/5, 4, 5\n(4/5) - (4) = -16/5, left: -16/5, 5\n(4) - (4/5) = 16/5, left: 16/5, 5\n(5) - (16/5) = 9/5, left: 9/5\n(4) * (4/5) = 16/5, left: 16/5, 5\n(4/5) / (4) = 1/5, left: 1/5, 5\n(5) / (1/5) = 25, left: 25\n(4) + (4/5) = 24/5, left: 24/5, 5\n(24/5) / (5) = 24/25, left: 24/25\n(5) * (24/5) = 24, left: 24\nreach 24! expression: (5 * (4 + (4 / 5)))"}, {"input": "4 5 5 4\n", "output": "(4) * (5) = 20, left: 20, 5, 4\n(4) - (5) = -1, left: -1, 20\n(5) - (4) = 1, left: 1, 20\n(20) - (5) = 15, left: 15, 4\n(4) - (5) = -1, left: -1, 5, 4\n(5) * (-1) = -5, left: -5, 4\n(5) / (-1) = -5, left: -5, 4\n(4) - (-5) = 9, left: 9\n(5) - (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 - (4 - 5)))"}, {"input": "4 5 5 4\n", "output": "(4) * (4) = 16, left: 16, 5, 5\n(5) + (16) = 21, left: 21, 5\n(5) / (16) = 5/16, left: 5/16, 5\n(5) / (16) = 5/16, left: 5/16, 5\n(4) - (4) = 0, left: 0, 5, 5\n(4) / (4) = 1, left: 1, 5, 5\n(5) - (1) = 4, left: 4, 5\n(5) + (1) = 6, left: 6, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (4 / 4))"}, {"input": "4 5 5 4\n", "output": "(4) + (5) = 9, left: 9, 5, 4\n(5) - (4) = 1, left: 1, 9\n(4) * (5) = 20, left: 20, 5, 4\n(4) / (5) = 4/5, left: 4/5, 20\n(4/5) - (20) = -96/5, left: -96/5\n(4) - (5) = -1, left: -1, 5, 4\n(5) - (4) = 1, left: 1, -1\n(4) / (5) = 4/5, left: 4/5, -1\n(5) - (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 - (4 - 5)))"}, {"input": "4 5 5 4\n", "output": "(5) / (5) = 1, left: 1, 4, 4\n(1) / (4) = 1/4, left: 1/4, 4\n(4) / (4) = 1, left: 1, 1\n(1) * (1) = 1, left: 1\n(1) / (4) = 1/4, left: 1/4, 4\n(4) * (1) = 4, left: 4, 4\n(5) * (5) = 25, left: 25, 4, 4\n(4) * (4) = 16, left: 16, 25\n(4) / (4) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (4 / 4))"}, {"input": "4 5 5 4\n", "output": "(5) / (5) = 1, left: 1, 4, 4\n(4) - (1) = 3, left: 3, 4\n(4) + (1) = 5, left: 5, 4\n(4) * (1) = 4, left: 4, 4\n(4) / (4) = 1, left: 1\n(4) + (4) = 8, left: 8, 1\n(1) / (8) = 1/8, left: 1/8\n(4) - (1) = 3, left: 3, 4\n(4) * (3) = 12, left: 12\n(5) * (5) = 25, left: 25, 4, 4\n(4) + (4) = 8, left: 8, 25\n(4) * (4) = 16, left: 16, 25\n(4) / (4) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (4 / 4))"}, {"input": "4 5 5 4\n", "output": "(4) * (4) = 16, left: 16, 5, 5\n(5) - (16) = -11, left: -11, 5\n(5) / (16) = 5/16, left: 5/16, 5\n(4) - (4) = 0, left: 0, 5, 5\n(5) + (0) = 5, left: 5, 5\n(5) * (0) = 0, left: 0, 5\n(0) - (5) = -5, left: -5\n(0) - (5) = -5, left: -5, 5\n(5) + (-5) = 0, left: 0\n(0) - (5) = -5, left: -5, 5\n(4) / (4) = 1, left: 1, 5, 5\n(5) + (1) = 6, left: 6, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (4 / 4))"}, {"input": "4 5 5 4\n", "output": "(4) + (5) = 9, left: 9, 5, 4\n(5) / (9) = 5/9, left: 5/9, 4\n(5) + (9) = 14, left: 14, 4\n(14) - (4) = 10, left: 10\n(4) - (5) = -1, left: -1, 9\n(-1) - (9) = -10, left: -10\n(4) * (5) = 20, left: 20, 5, 4\n(20) / (5) = 4, left: 4, 4\n(4) - (5) = -1, left: -1, 20\n(5) + (4) = 9, left: 9, 20\n(4) - (5) = -1, left: -1, 5, 4\n(-1) / (4) = -1/4, left: -1/4, 5\n(5) - (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 - (4 - 5)))"}, {"input": "3 3 5 5\n", "output": "(3) - (5) = -2, left: -2, 3, 5\n(5) * (-2) = -10, left: -10, 3\n(3) + (5) = 8, left: 8, 3, 5\n(5) / (3) = 5/3, left: 5/3, 3, 5\n(5) + (5/3) = 20/3, left: 20/3, 3\n(5) - (3) = 2, left: 2, 3, 5\n(2) / (3) = 2/3, left: 2/3, 5\n(3) / (3) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(3) + (5) = 8, left: 8, 3, 5\n(5) - (8) = -3, left: -3, 3\n(3) / (5) = 3/5, left: 3/5, 3, 5\n(5) / (3) = 5/3, left: 5/3, 3/5\n(5) - (3) = 2, left: 2, 3/5\n(3) - (5) = -2, left: -2, 3, 5\n(-2) / (3) = -2/3, left: -2/3, 5\n(3) / (3) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(5) / (5) = 1, left: 1, 3, 3\n(3) / (1) = 3, left: 3, 3\n(5) - (5) = 0, left: 0, 3, 3\n(5) + (5) = 10, left: 10, 3, 3\n(10) - (3) = 7, left: 7, 3\n(5) * (5) = 25, left: 25, 3, 3\n(3) * (25) = 75, left: 75, 3\n(3) - (75) = -72, left: -72\n(3) / (3) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(5) - (3) = 2, left: 2, 3, 5\n(3) + (5) = 8, left: 8, 3, 5\n(3) - (5) = -2, left: -2, 3, 5\n(3) + (5) = 8, left: 8, 3, 5\n(3) - (5) = -2, left: -2, 3, 5\n(3) - (-2) = 5, left: 5, 5\n(5) - (3) = 2, left: 2, 3, 5\n(3) / (3) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(5) * (5) = 25, left: 25, 3, 3\n(25) / (3) = 25/3, left: 25/3, 3\n(25/3) / (3) = 25/9, left: 25/9\n(3) * (25) = 75, left: 75, 3\n(75) / (3) = 25, left: 25\n(3) / (25) = 3/25, left: 3/25, 3\n(3) - (25) = -22, left: -22, 3\n(-22) - (3) = -25, left: -25\n(3) / (3) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(3) - (5) = -2, left: -2, 3, 5\n(5) - (3) = 2, left: 2, 3, 5\n(3) * (5) = 15, left: 15, 3, 5\n(3) / (5) = 3/5, left: 3/5, 15\n(5) / (15) = 1/3, left: 1/3, 3\n(5) / (3) = 5/3, left: 5/3, 3, 5\n(3) * (5) = 15, left: 15, 5/3\n(5/3) / (15) = 1/9, left: 1/9\n(3) / (5) = 3/5, left: 3/5, 3, 5\n(3) * (3/5) = 9/5, left: 9/5, 5\n(3) * (3) = 9, left: 9, 5, 5\n(3) / (3) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(3) + (5) = 8, left: 8, 3, 5\n(3) * (5) = 15, left: 15, 3, 5\n(5) / (15) = 1/3, left: 1/3, 3\n(5) / (3) = 5/3, left: 5/3, 15\n(15) * (5/3) = 25, left: 25\n(3) / (5) = 3/5, left: 3/5, 3, 5\n(3) / (3/5) = 5, left: 5, 5\n(3) - (5) = -2, left: -2, 3, 5\n(5) / (3) = 5/3, left: 5/3, 3, 5\n(3) + (5) = 8, left: 8, 5/3\n(3) / (3) = 1, left: 1, 5, 5\n(5) / (5) = 1, left: 1, 1\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(5) / (5) = 1, left: 1, 3, 3\n(3) + (1) = 4, left: 4, 3\n(3) + (1) = 4, left: 4, 3\n(5) - (5) = 0, left: 0, 3, 3\n(5) + (5) = 10, left: 10, 3, 3\n(3) - (10) = -7, left: -7, 3\n(10) / (3) = 10/3, left: 10/3, 3\n(5) * (5) = 25, left: 25, 3, 3\n(3) - (25) = -22, left: -22, 3\n(3) / (25) = 3/25, left: 3/25, 3\n(3) + (25) = 28, left: 28, 3\n(3) * (3) = 9, left: 9, 25\n(3) / (3) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(5) - (3) = 2, left: 2, 3, 5\n(3) / (5) = 3/5, left: 3/5, 2\n(3) - (5) = -2, left: -2, 3, 5\n(5) - (3) = 2, left: 2, 3, 5\n(5) / (3) = 5/3, left: 5/3, 3, 5\n(3) / (5) = 3/5, left: 3/5, 5/3\n(3) / (5) = 3/5, left: 3/5, 3, 5\n(5) - (3) = 2, left: 2, 3/5\n(3) + (5) = 8, left: 8, 3, 5\n(3) - (5) = -2, left: -2, 3, 5\n(3) / (5) = 3/5, left: 3/5, 3, 5\n(3) / (3) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "5 3 6 13\n", "output": "(5) / (6) = 5/6, left: 5/6, 3, 13\n(6) / (5) = 6/5, left: 6/5, 3, 13\n(3) - (13) = -10, left: -10, 6/5\n(5) + (6) = 11, left: 11, 3, 13\n(3) * (13) = 39, left: 39, 11\n(6) - (5) = 1, left: 1, 3, 13\n(1) / (13) = 1/13, left: 1/13, 3\n(6) - (3) = 3, left: 3, 5, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (13 - 5))"}, {"input": "5 3 6 13\n", "output": "(6) - (5) = 1, left: 1, 3, 13\n(5) * (6) = 30, left: 30, 3, 13\n(13) - (3) = 10, left: 10, 30\n(5) + (6) = 11, left: 11, 3, 13\n(13) + (11) = 24, left: 24, 3\n(5) - (6) = -1, left: -1, 3, 13\n(6) - (3) = 3, left: 3, 5, 13\n(3) - (13) = -10, left: -10, 5\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (13 - 5))"}, {"input": "5 3 6 13\n", "output": "(5) - (3) = 2, left: 2, 6, 13\n(6) + (2) = 8, left: 8, 13\n(5) * (3) = 15, left: 15, 6, 13\n(5) / (6) = 5/6, left: 5/6, 3, 13\n(6) / (5) = 6/5, left: 6/5, 3, 13\n(3) * (13) = 39, left: 39, 6/5\n(5) * (6) = 30, left: 30, 3, 13\n(6) - (3) = 3, left: 3, 5, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (13 - 5))"}, {"input": "5 3 6 13\n", "output": "(5) / (3) = 5/3, left: 5/3, 6, 13\n(5) * (3) = 15, left: 15, 6, 13\n(6) * (13) = 78, left: 78, 15\n(15) / (6) = 5/2, left: 5/2, 13\n(5) + (3) = 8, left: 8, 6, 13\n(6) * (8) = 48, left: 48, 13\n(48) / (13) = 48/13, left: 48/13\n(5) - (13) = -8, left: -8, 3, 6\n(3) - (6) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (3 - 6))"}, {"input": "5 3 6 13\n", "output": "(5) + (6) = 11, left: 11, 3, 13\n(13) - (3) = 10, left: 10, 11\n(5) - (6) = -1, left: -1, 3, 13\n(13) + (-1) = 12, left: 12, 3\n(3) - (5) = -2, left: -2, 6, 13\n(6) + (13) = 19, left: 19, 5, 3\n(5) * (19) = 95, left: 95, 3\n(6) - (3) = 3, left: 3, 5, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (13 - 5))"}, {"input": "5 3 6 13\n", "output": "(5) + (6) = 11, left: 11, 3, 13\n(5) * (6) = 30, left: 30, 3, 13\n(30) - (13) = 17, left: 17, 3\n(5) / (3) = 5/3, left: 5/3, 6, 13\n(5) + (3) = 8, left: 8, 6, 13\n(5) - (3) = 2, left: 2, 6, 13\n(6) * (13) = 78, left: 78, 5, 3\n(3) - (78) = -75, left: -75, 5\n(5) - (3) = 2, left: 2, 78\n(13) / (6) = 13/6, left: 13/6, 5, 3\n(6) - (13) = -7, left: -7, 5, 3\n(6) - (3) = 3, left: 3, 5, 13\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (13 - 5))"}, {"input": "2 2 4 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 2, 4\n(2/13) / (2) = 1/13, left: 1/13, 4\n(2) + (2/13) = 28/13, left: 28/13, 4\n(28/13) - (4) = -24/13, left: -24/13\n(4) / (2/13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((4 / (2 / 13)) - 2)"}, {"input": "2 2 4 13\n", "output": "(2) / (4) = 1/2, left: 1/2, 2, 13\n(2) - (1/2) = 3/2, left: 3/2, 13\n(2) - (13) = -11, left: -11, 1/2\n(13) / (2) = 13/2, left: 13/2, 1/2\n(13) / (1/2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 / (2 / 4)) - 2)"}, {"input": "2 2 4 13\n", "output": "(2) / (4) = 1/2, left: 1/2, 2, 13\n(1/2) - (2) = -3/2, left: -3/2, 13\n(13) + (-3/2) = 23/2, left: 23/2\n(2) / (1/2) = 4, left: 4, 13\n(2) * (13) = 26, left: 26, 1/2\n(1/2) + (26) = 53/2, left: 53/2\n(2) - (13) = -11, left: -11, 1/2\n(1/2) - (13) = -25/2, left: -25/2, 2\n(13) / (1/2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 / (2 / 4)) - 2)"}, {"input": "2 2 4 13\n", "output": "(2) / (2) = 1, left: 1, 4, 13\n(1) / (13) = 1/13, left: 1/13, 4\n(4) - (1/13) = 51/13, left: 51/13\n(2) - (2) = 0, left: 0, 4, 13\n(2) / (2) = 1, left: 1, 4, 13\n(2) - (2) = 0, left: 0, 4, 13\n(0) - (4) = -4, left: -4, 13\n(4) / (2) = 2, left: 2, 2, 13\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * 13) - (4 / 2))"}, {"input": "2 2 4 13\n", "output": "(2) / (13) = 2/13, left: 2/13, 2, 4\n(2/13) - (2) = -24/13, left: -24/13, 4\n(2) / (2/13) = 13, left: 13, 4\n(2/13) / (2) = 1/13, left: 1/13, 4\n(2) * (2/13) = 4/13, left: 4/13, 4\n(2) - (2/13) = 24/13, left: 24/13, 4\n(2) + (2/13) = 28/13, left: 28/13, 4\n(28/13) - (4) = -24/13, left: -24/13\n(4) / (2/13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((4 / (2 / 13)) - 2)"}, {"input": "2 2 4 13\n", "output": "(2) / (2) = 1, left: 1, 4, 13\n(2) - (2) = 0, left: 0, 4, 13\n(13) * (0) = 0, left: 0, 4\n(2) + (2) = 4, left: 4, 4, 13\n(13) - (4) = 9, left: 9, 4\n(4) - (13) = -9, left: -9, 4\n(-9) - (4) = -13, left: -13\n(2) * (2) = 4, left: 4, 4, 13\n(2) - (2) = 0, left: 0, 4, 13\n(4) + (0) = 4, left: 4, 13\n(4) / (2) = 2, left: 2, 2, 13\n(13) - (2) = 11, left: 11, 2\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * 13) - (4 / 2))"}, {"input": "11 8 9 11\n", "output": "(8) - (11) = -3, left: -3, 9, 11\n(-3) / (11) = -3/11, left: -3/11, 9\n(11) / (9) = 11/9, left: 11/9, -3\n(11) - (8) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "11 8 9 11\n", "output": "(9) / (8) = 9/8, left: 9/8, 11, 11\n(8) * (9) = 72, left: 72, 11, 11\n(8) / (9) = 8/9, left: 8/9, 11, 11\n(11) - (11) = 0, left: 0, 8/9\n(8) + (9) = 17, left: 17, 11, 11\n(11) * (9) = 99, left: 99, 8, 11\n(11) + (9) = 20, left: 20, 8, 11\n(11) - (8) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "11 8 9 11\n", "output": "(8) * (11) = 88, left: 88, 11, 9\n(9) / (88) = 9/88, left: 9/88, 11\n(9) - (88) = -79, left: -79, 11\n(8) - (11) = -3, left: -3, 11, 9\n(-3) - (11) = -14, left: -14, 9\n(8) / (11) = 8/11, left: 8/11, 11, 9\n(11) / (8/11) = 121/8, left: 121/8, 9\n(11) - (8) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "11 8 9 11\n", "output": "(8) - (11) = -3, left: -3, 9, 11\n(9) + (-3) = 6, left: 6, 11\n(11) + (-3) = 8, left: 8, 9\n(9) * (11) = 99, left: 99, -3\n(11) - (8) = 3, left: 3, 9, 11\n(9) + (11) = 20, left: 20, 3\n(11) - (3) = 8, left: 8, 9\n(9) + (8) = 17, left: 17\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "11 8 9 11\n", "output": "(11) / (11) = 1, left: 1, 8, 9\n(8) + (9) = 17, left: 17, 1\n(11) * (11) = 121, left: 121, 8, 9\n(11) / (11) = 1, left: 1, 8, 9\n(11) - (11) = 0, left: 0, 8, 9\n(11) + (11) = 22, left: 22, 8, 9\n(11) - (11) = 0, left: 0, 8, 9\n(11) - (8) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "11 8 9 11\n", "output": "(9) / (11) = 9/11, left: 9/11, 8, 11\n(11) - (9) = 2, left: 2, 8, 11\n(8) - (2) = 6, left: 6, 11\n(8) + (9) = 17, left: 17, 11, 11\n(17) / (11) = 17/11, left: 17/11, 11\n(11) + (17/11) = 138/11, left: 138/11\n(8) / (11) = 8/11, left: 8/11, 11, 9\n(11) - (8) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "12 4 12 5\n", "output": "(5) - (4) = 1, left: 1, 12, 12\n(12) - (12) = 0, left: 0, 1\n(12) / (12) = 1, left: 1, 1\n(12) + (12) = 24, left: 24, 1\n(1) - (24) = -23, left: -23\n(1) * (24) = 24, left: 24\nreach 24! expression: ((5 - 4) * (12 + 12))"}, {"input": "12 4 12 5\n", "output": "(4) * (5) = 20, left: 20, 12, 12\n(12) + (12) = 24, left: 24, 20\n(20) - (24) = -4, left: -4\n(4) - (5) = -1, left: -1, 12, 12\n(12) / (-1) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (12 / (4 - 5)))"}, {"input": "12 4 12 5\n", "output": "(5) / (4) = 5/4, left: 5/4, 12, 12\n(5/4) - (12) = -43/4, left: -43/4, 12\n(-43/4) / (12) = -43/48, left: -43/48\n(12) / (5/4) = 48/5, left: 48/5, 12\n(12) * (48/5) = 576/5, left: 576/5\n(12) * (5/4) = 15, left: 15, 12\n(4) * (5) = 20, left: 20, 12, 12\n(4) - (5) = -1, left: -1, 12, 12\n(12) / (-1) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (12 / (4 - 5)))"}, {"input": "12 4 12 5\n", "output": "(4) / (12) = 1/3, left: 1/3, 12, 5\n(5) / (1/3) = 15, left: 15, 12\n(12) / (15) = 4/5, left: 4/5\n(4) - (12) = -8, left: -8, 12, 5\n(5) - (12) = -7, left: -7, -8\n(12) / (4) = 3, left: 3, 12, 5\n(5) / (3) = 5/3, left: 5/3, 12\n(5) - (3) = 2, left: 2, 12\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (12 / 4)))"}, {"input": "12 4 12 5\n", "output": "(5) - (4) = 1, left: 1, 12, 12\n(12) - (12) = 0, left: 0, 1\n(1) * (0) = 0, left: 0\n(0) - (1) = -1, left: -1\n(12) * (12) = 144, left: 144, 1\n(1) * (144) = 144, left: 144\n(1) - (144) = -143, left: -143\n(12) / (12) = 1, left: 1, 1\n(12) + (12) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: ((5 - 4) * (12 + 12))"}, {"input": "12 4 12 5\n", "output": "(12) - (4) = 8, left: 8, 12, 5\n(5) / (12) = 5/12, left: 5/12, 8\n(5/12) - (8) = -91/12, left: -91/12\n(4) - (12) = -8, left: -8, 12, 5\n(12) - (5) = 7, left: 7, -8\n(-8) - (12) = -20, left: -20, 5\n(12) / (4) = 3, left: 3, 12, 5\n(12) * (5) = 60, left: 60, 3\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (12 / 4)))"}, {"input": "12 4 12 5\n", "output": "(5) / (12) = 5/12, left: 5/12, 4, 12\n(12) / (5/12) = 144/5, left: 144/5, 4\n(5) - (12) = -7, left: -7, 4, 12\n(-7) - (12) = -19, left: -19, 4\n(12) / (5) = 12/5, left: 12/5, 4, 12\n(12) * (12) = 144, left: 144, 4, 5\n(4) / (5) = 4/5, left: 4/5, 144\n(12) / (12) = 1, left: 1, 4, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (12 / 12)))"}, {"input": "3 8 5 7\n", "output": "(5) - (7) = -2, left: -2, 3, 8\n(3) * (-2) = -6, left: -6, 8\n(5) / (7) = 5/7, left: 5/7, 3, 8\n(5/7) - (8) = -51/7, left: -51/7, 3\n(3) * (-51/7) = -153/7, left: -153/7\n(7) - (5) = 2, left: 2, 3, 8\n(3) * (8) = 24, left: 24, 2\n(5) * (7) = 35, left: 35, 3, 8\n(3) + (8) = 11, left: 11, 35\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (3 + 8))"}, {"input": "3 8 5 7\n", "output": "(3) * (8) = 24, left: 24, 5, 7\n(5) - (7) = -2, left: -2, 24\n(3) - (8) = -5, left: -5, 5, 7\n(5) + (7) = 12, left: 12, -5\n(8) / (3) = 8/3, left: 8/3, 5, 7\n(5) + (8/3) = 23/3, left: 23/3, 7\n(7) - (23/3) = -2/3, left: -2/3\n(3) + (8) = 11, left: 11, 5, 7\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (3 + 8))"}, {"input": "3 8 5 7\n", "output": "(8) - (5) = 3, left: 3, 3, 7\n(7) - (3) = 4, left: 4, 3\n(3) / (7) = 3/7, left: 3/7, 3\n(3) + (3/7) = 24/7, left: 24/7\n(3) + (7) = 10, left: 10, 3\n(10) / (3) = 10/3, left: 10/3\n(7) / (3) = 7/3, left: 7/3, 3\n(3) - (7/3) = 2/3, left: 2/3\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: ((8 - 5) + (3 * 7))"}, {"input": "3 8 5 7\n", "output": "(7) - (3) = 4, left: 4, 8, 5\n(8) * (5) = 40, left: 40, 4\n(5) * (4) = 20, left: 20, 8\n(3) - (7) = -4, left: -4, 8, 5\n(-4) - (5) = -9, left: -9, 8\n(8) - (5) = 3, left: 3, -4\n(-4) * (3) = -12, left: -12\n(3) * (7) = 21, left: 21, 8, 5\n(8) + (21) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((8 + (3 * 7)) - 5)"}, {"input": "3 8 5 7\n", "output": "(5) + (7) = 12, left: 12, 3, 8\n(12) - (8) = 4, left: 4, 3\n(8) / (3) = 8/3, left: 8/3, 12\n(12) + (8/3) = 44/3, left: 44/3\n(5) / (7) = 5/7, left: 5/7, 3, 8\n(3) * (8) = 24, left: 24, 5/7\n(8) - (3) = 5, left: 5, 5/7\n(5) * (7) = 35, left: 35, 3, 8\n(3) + (8) = 11, left: 11, 35\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (3 + 8))"}, {"input": "3 8 5 7\n", "output": "(7) - (3) = 4, left: 4, 8, 5\n(8) / (5) = 8/5, left: 8/5, 4\n(4) - (5) = -1, left: -1, 8\n(8) * (4) = 32, left: 32, 5\n(4) / (8) = 1/2, left: 1/2, 5\n(5) - (1/2) = 9/2, left: 9/2\n(3) - (7) = -4, left: -4, 8, 5\n(5) + (-4) = 1, left: 1, 8\n(1) - (8) = -7, left: -7\n(-4) - (5) = -9, left: -9, 8\n(8) * (5) = 40, left: 40, -4\n(3) * (7) = 21, left: 21, 8, 5\n(8) + (21) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((8 + (3 * 7)) - 5)"}, {"input": "4 8 12 12\n", "output": "(8) * (12) = 96, left: 96, 4, 12\n(4) - (12) = -8, left: -8, 96\n(8) / (12) = 2/3, left: 2/3, 4, 12\n(12) * (2/3) = 8, left: 8, 4\n(4) + (12) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((4 + 12) / (8 / 12))"}, {"input": "4 8 12 12\n", "output": "(8) * (12) = 96, left: 96, 4, 12\n(12) - (96) = -84, left: -84, 4\n(12) * (96) = 1152, left: 1152, 4\n(4) * (96) = 384, left: 384, 12\n(12) - (4) = 8, left: 8, 96\n(8) / (12) = 2/3, left: 2/3, 4, 12\n(12) + (2/3) = 38/3, left: 38/3, 4\n(2/3) - (12) = -34/3, left: -34/3, 4\n(4) + (12) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((4 + 12) / (8 / 12))"}, {"input": "4 8 12 12\n", "output": "(4) * (12) = 48, left: 48, 8, 12\n(48) - (8) = 40, left: 40, 12\n(8) * (12) = 96, left: 96, 48\n(48) + (96) = 144, left: 144\n(12) - (4) = 8, left: 8, 8, 12\n(8) / (8) = 1, left: 1, 12\n(12) - (1) = 11, left: 11\n(4) + (12) = 16, left: 16, 8, 12\n(8) / (16) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (8 / (4 + 12)))"}, {"input": "4 8 12 12\n", "output": "(12) / (4) = 3, left: 3, 8, 12\n(8) - (3) = 5, left: 5, 12\n(8) + (12) = 20, left: 20, 3\n(8) * (12) = 96, left: 96, 3\n(12) - (3) = 9, left: 9, 8\n(3) - (12) = -9, left: -9, 8\n(4) / (12) = 1/3, left: 1/3, 8, 12\n(4) + (12) = 16, left: 16, 8, 12\n(8) / (16) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (8 / (4 + 12)))"}, {"input": "4 8 12 12\n", "output": "(4) * (8) = 32, left: 32, 12, 12\n(8) - (4) = 4, left: 4, 12, 12\n(8) / (4) = 2, left: 2, 12, 12\n(12) / (2) = 6, left: 6, 12\n(4) - (8) = -4, left: -4, 12, 12\n(4) + (12) = 16, left: 16, 8, 12\n(8) + (12) = 20, left: 20, 16\n(20) - (16) = 4, left: 4\n(8) / (12) = 2/3, left: 2/3, 16\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((4 + 12) / (8 / 12))"}, {"input": "4 8 12 12\n", "output": "(4) + (8) = 12, left: 12, 12, 12\n(12) - (12) = 0, left: 0, 12\n(0) - (12) = -12, left: -12\n(8) - (4) = 4, left: 4, 12, 12\n(12) / (4) = 3, left: 3, 12\n(12) + (4) = 16, left: 16, 12\n(12) * (16) = 192, left: 192\n(8) / (12) = 2/3, left: 2/3, 4, 12\n(4) + (12) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((4 + 12) / (8 / 12))"}, {"input": "5 5 3 8\n", "output": "(5) - (5) = 0, left: 0, 3, 8\n(3) / (8) = 3/8, left: 3/8, 0\n(0) - (3/8) = -3/8, left: -3/8\n(3) + (8) = 11, left: 11, 0\n(3) * (8) = 24, left: 24, 0\n(0) + (24) = 24, left: 24\nreach 24! expression: ((5 - 5) + (3 * 8))"}, {"input": "5 5 3 8\n", "output": "(5) / (3) = 5/3, left: 5/3, 5, 8\n(8) / (5) = 8/5, left: 8/5, 5/3\n(5/3) + (8/5) = 49/15, left: 49/15\n(5/3) * (8/5) = 8/3, left: 8/3\n(5) * (8) = 40, left: 40, 5/3\n(40) / (5/3) = 24, left: 24\nreach 24! expression: ((5 * 8) / (5 / 3))"}, {"input": "5 5 3 8\n", "output": "(5) / (3) = 5/3, left: 5/3, 5, 8\n(8) - (5) = 3, left: 3, 5/3\n(3) / (5/3) = 9/5, left: 9/5\n(5/3) / (3) = 5/9, left: 5/9\n(5) + (8) = 13, left: 13, 5/3\n(5/3) - (13) = -34/3, left: -34/3\n(8) / (5) = 8/5, left: 8/5, 5/3\n(5) * (8) = 40, left: 40, 5/3\n(40) - (5/3) = 115/3, left: 115/3\n(40) / (5/3) = 24, left: 24\nreach 24! expression: ((5 * 8) / (5 / 3))"}, {"input": "5 5 3 8\n", "output": "(5) - (5) = 0, left: 0, 3, 8\n(3) - (8) = -5, left: -5, 0\n(0) + (-5) = -5, left: -5\n(3) / (8) = 3/8, left: 3/8, 0\n(0) * (3/8) = 0, left: 0\n(3) + (8) = 11, left: 11, 0\n(0) * (11) = 0, left: 0\n(3) * (8) = 24, left: 24, 0\n(0) * (24) = 0, left: 0\n(0) + (24) = 24, left: 24\nreach 24! expression: ((5 - 5) + (3 * 8))"}, {"input": "5 5 3 8\n", "output": "(5) + (3) = 8, left: 8, 5, 8\n(5) + (8) = 13, left: 13, 8\n(13) - (8) = 5, left: 5\n(8) / (13) = 8/13, left: 8/13\n(13) / (8) = 13/8, left: 13/8\n(8) - (5) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(8) - (3) = 5, left: 5\n(8) / (3) = 8/3, left: 8/3\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((5 + 3) - 5))"}, {"input": "5 5 3 8\n", "output": "(5) * (8) = 40, left: 40, 5, 3\n(5) + (40) = 45, left: 45, 3\n(3) + (45) = 48, left: 48\n(5) * (40) = 200, left: 200, 3\n(3) + (200) = 203, left: 203\n(40) - (5) = 35, left: 35, 3\n(3) / (35) = 3/35, left: 3/35\n(35) / (3) = 35/3, left: 35/3\n(5) / (40) = 1/8, left: 1/8, 3\n(3) / (1/8) = 24, left: 24\nreach 24! expression: (3 / (5 / (5 * 8)))"}, {"input": "4 2 4 11\n", "output": "(4) / (11) = 4/11, left: 4/11, 4, 2\n(4) - (2) = 2, left: 2, 4/11\n(4/11) - (4) = -40/11, left: -40/11, 2\n(11) / (4) = 11/4, left: 11/4, 4, 2\n(11/4) - (4) = -5/4, left: -5/4, 2\n(11/4) - (2) = 3/4, left: 3/4, 4\n(2) * (11/4) = 11/2, left: 11/2, 4\n(4) * (11) = 44, left: 44, 4, 2\n(4) + (44) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(2) - (4) = -2, left: -2, 4, 11\n(11) * (-2) = -22, left: -22, 4\n(4) / (-22) = -2/11, left: -2/11\n(4) / (2) = 2, left: 2, 4, 11\n(2) * (4) = 8, left: 8, 4, 11\n(4) - (2) = 2, left: 2, 4, 11\n(4) * (11) = 44, left: 44, 4, 2\n(2) + (44) = 46, left: 46, 4\n(4) + (44) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(2) * (4) = 8, left: 8, 4, 11\n(4) + (8) = 12, left: 12, 11\n(11) / (12) = 11/12, left: 11/12\n(4) - (2) = 2, left: 2, 4, 11\n(11) / (2) = 11/2, left: 11/2, 4\n(2) + (4) = 6, left: 6, 4, 11\n(4) / (11) = 4/11, left: 4/11, 4, 2\n(4) * (11) = 44, left: 44, 4, 2\n(4) + (44) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(11) - (4) = 7, left: 7, 2, 4\n(4) - (11) = -7, left: -7, 2, 4\n(4) * (-7) = -28, left: -28, 2\n(2) * (4) = 8, left: 8, -7\n(4) + (11) = 15, left: 15, 2, 4\n(2) + (15) = 17, left: 17, 4\n(4) * (17) = 68, left: 68\n(4) * (11) = 44, left: 44, 2, 4\n(4) + (44) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(4) / (2) = 2, left: 2, 4, 11\n(4) - (2) = 2, left: 2, 11\n(4) - (11) = -7, left: -7, 4, 2\n(4) / (11) = 4/11, left: 4/11, 4, 2\n(2) - (4) = -2, left: -2, 4/11\n(11) / (4) = 11/4, left: 11/4, 4, 2\n(11/4) - (4) = -5/4, left: -5/4, 2\n(4) * (11) = 44, left: 44, 4, 2\n(4) + (44) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(4) - (2) = 2, left: 2, 4, 11\n(4) / (2) = 2, left: 2, 11\n(2) / (4) = 1/2, left: 1/2, 4, 11\n(2) * (11) = 22, left: 22, 4, 4\n(2) - (11) = -9, left: -9, 4, 4\n(4) + (-9) = -5, left: -5, 4\n(11) - (4) = 7, left: 7, 4, 2\n(7) / (2) = 7/2, left: 7/2, 4\n(4) + (11) = 15, left: 15, 4, 2\n(15) - (4) = 11, left: 11, 2\n(2) * (15) = 30, left: 30, 4\n(4) * (11) = 44, left: 44, 4, 2\n(4) + (44) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(4) / (2) = 2, left: 2, 4, 11\n(11) + (2) = 13, left: 13, 4\n(2) - (4) = -2, left: -2, 4, 11\n(4) / (-2) = -2, left: -2, 11\n(2) / (4) = 1/2, left: 1/2, 4, 11\n(4) + (2) = 6, left: 6, 4, 11\n(4) * (6) = 24, left: 24, 11\n(4) * (2) = 8, left: 8, 4, 11\n(4) + (8) = 12, left: 12, 11\n(11) - (4) = 7, left: 7, 4, 2\n(2) + (7) = 9, left: 9, 4\n(4) * (11) = 44, left: 44, 4, 2\n(4) + (44) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "12 2 13 1\n", "output": "(1) - (12) = -11, left: -11, 2, 13\n(-11) / (13) = -11/13, left: -11/13, 2\n(1) / (12) = 1/12, left: 1/12, 2, 13\n(12) + (1) = 13, left: 13, 2, 13\n(2) - (13) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: ((12 + 1) - (2 - 13))"}, {"input": "12 2 13 1\n", "output": "(2) / (12) = 1/6, left: 1/6, 13, 1\n(13) + (1) = 14, left: 14, 1/6\n(1) * (1/6) = 1/6, left: 1/6, 13\n(2) - (12) = -10, left: -10, 13, 1\n(13) - (-10) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (13 - (2 - 12)))"}, {"input": "12 2 13 1\n", "output": "(1) - (2) = -1, left: -1, 12, 13\n(-1) / (13) = -1/13, left: -1/13, 12\n(13) - (-1) = 14, left: 14, 12\n(12) - (14) = -2, left: -2\n(13) + (-1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (13 + (1 - 2)))"}, {"input": "12 2 13 1\n", "output": "(13) - (12) = 1, left: 1, 2, 1\n(2) - (1) = 1, left: 1, 1\n(1) * (1) = 1, left: 1, 2\n(1) / (1) = 1, left: 1, 2\n(2) + (1) = 3, left: 3, 1\n(3) - (1) = 2, left: 2\n(2) / (1) = 2, left: 2, 1\n(12) + (13) = 25, left: 25, 2, 1\n(2) - (25) = -23, left: -23, 1\n(1) - (-23) = 24, left: 24\nreach 24! expression: (1 - (2 - (12 + 13)))"}, {"input": "12 2 13 1\n", "output": "(1) / (12) = 1/12, left: 1/12, 2, 13\n(13) - (2) = 11, left: 11, 1/12\n(12) / (1) = 12, left: 12, 2, 13\n(2) - (12) = -10, left: -10, 13\n(13) - (2) = 11, left: 11, 12\n(13) / (12) = 13/12, left: 13/12, 2\n(13) * (12) = 156, left: 156, 2\n(12) + (1) = 13, left: 13, 2, 13\n(2) - (13) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: ((12 + 1) - (2 - 13))"}, {"input": "12 2 13 1\n", "output": "(2) / (12) = 1/6, left: 1/6, 13, 1\n(13) + (1) = 14, left: 14, 1/6\n(13) / (1) = 13, left: 13, 1/6\n(1/6) - (1) = -5/6, left: -5/6, 13\n(1/6) / (13) = 1/78, left: 1/78, 1\n(1/78) - (1) = -77/78, left: -77/78\n(13) * (1/6) = 13/6, left: 13/6, 1\n(2) - (12) = -10, left: -10, 13, 1\n(13) - (-10) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (13 - (2 - 12)))"}, {"input": "12 2 13 1\n", "output": "(1) - (2) = -1, left: -1, 12, 13\n(-1) - (13) = -14, left: -14, 12\n(12) + (-14) = -2, left: -2\n(-1) / (13) = -1/13, left: -1/13, 12\n(12) - (-1/13) = 157/13, left: 157/13\n(13) - (-1) = 14, left: 14, 12\n(12) - (14) = -2, left: -2\n(12) * (14) = 168, left: 168\n(13) + (-1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (13 + (1 - 2)))"}, {"input": "12 2 13 1\n", "output": "(13) - (12) = 1, left: 1, 2, 1\n(1) - (2) = -1, left: -1, 1\n(2) - (1) = 1, left: 1, 1\n(1) - (1) = 0, left: 0\n(1) * (1) = 1, left: 1, 2\n(1) / (2) = 1/2, left: 1/2\n(12) - (13) = -1, left: -1, 2, 1\n(12) + (13) = 25, left: 25, 2, 1\n(1) - (2) = -1, left: -1, 25\n(25) + (-1) = 24, left: 24\nreach 24! expression: ((12 + 13) + (1 - 2))"}, {"input": "11 1 8 10\n", "output": "(1) - (11) = -10, left: -10, 8, 10\n(1) / (11) = 1/11, left: 1/11, 8, 10\n(8) / (10) = 4/5, left: 4/5, 1/11\n(11) + (1) = 12, left: 12, 8, 10\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((11 + 1) * (10 - 8))"}, {"input": "11 1 8 10\n", "output": "(10) / (11) = 10/11, left: 10/11, 1, 8\n(11) / (10) = 11/10, left: 11/10, 1, 8\n(10) - (11) = -1, left: -1, 1, 8\n(10) - (8) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (11 + 1))"}, {"input": "11 1 8 10\n", "output": "(1) / (10) = 1/10, left: 1/10, 11, 8\n(10) - (1) = 9, left: 9, 11, 8\n(11) / (9) = 11/9, left: 11/9, 8\n(10) - (8) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (11 + 1))"}, {"input": "11 1 8 10\n", "output": "(11) / (8) = 11/8, left: 11/8, 1, 10\n(10) - (11/8) = 69/8, left: 69/8, 1\n(11) / (10) = 11/10, left: 11/10, 1, 8\n(8) / (10) = 4/5, left: 4/5, 11, 1\n(1) / (4/5) = 5/4, left: 5/4, 11\n(1) * (4/5) = 4/5, left: 4/5, 11\n(11) * (4/5) = 44/5, left: 44/5\n(10) - (8) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (11 + 1))"}, {"input": "11 1 8 10\n", "output": "(1) - (10) = -9, left: -9, 11, 8\n(8) * (-9) = -72, left: -72, 11\n(10) - (1) = 9, left: 9, 11, 8\n(8) * (10) = 80, left: 80, 11, 1\n(11) + (1) = 12, left: 12, 80\n(1) * (80) = 80, left: 80, 11\n(80) / (1) = 80, left: 80, 11\n(10) - (8) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (11 + 1))"}, {"input": "11 1 8 10\n", "output": "(11) / (10) = 11/10, left: 11/10, 1, 8\n(1) / (8) = 1/8, left: 1/8, 11/10\n(11) - (10) = 1, left: 1, 1, 8\n(1) / (1) = 1, left: 1, 8\n(8) * (1) = 8, left: 8\n(10) - (11) = -1, left: -1, 1, 8\n(8) - (-1) = 9, left: 9, 1\n(10) - (8) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (11 + 1))"}, {"input": "11 1 8 10\n", "output": "(10) / (11) = 10/11, left: 10/11, 1, 8\n(11) * (10) = 110, left: 110, 1, 8\n(11) / (10) = 11/10, left: 11/10, 1, 8\n(1) - (11/10) = -1/10, left: -1/10, 8\n(10) - (11) = -1, left: -1, 1, 8\n(-1) / (1) = -1, left: -1, 8\n(8) * (10) = 80, left: 80, 11, 1\n(10) - (8) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (11 + 1))"}, {"input": "11 1 8 10\n", "output": "(1) - (11) = -10, left: -10, 8, 10\n(-10) / (8) = -5/4, left: -5/4, 10\n(10) - (-5/4) = 45/4, left: 45/4\n(11) * (1) = 11, left: 11, 8, 10\n(8) * (10) = 80, left: 80, 11\n(10) + (11) = 21, left: 21, 8\n(10) - (11) = -1, left: -1, 8\n(11) + (1) = 12, left: 12, 8, 10\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((11 + 1) * (10 - 8))"}, {"input": "9 4 6 6\n", "output": "(6) / (6) = 1, left: 1, 9, 4\n(9) * (4) = 36, left: 36, 1\n(36) / (1) = 36, left: 36\n(1) / (4) = 1/4, left: 1/4, 9\n(1/4) - (9) = -35/4, left: -35/4\n(6) + (6) = 12, left: 12, 9, 4\n(12) - (9) = 3, left: 3, 4\n(4) - (12) = -8, left: -8, 9\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (6 + 6))"}, {"input": "9 4 6 6\n", "output": "(9) + (4) = 13, left: 13, 6, 6\n(13) - (6) = 7, left: 7, 6\n(6) * (13) = 78, left: 78, 6\n(6) * (78) = 468, left: 468\n(13) - (6) = 7, left: 7, 6\n(6) * (13) = 78, left: 78, 6\n(6) - (13) = -7, left: -7, 6\n(9) - (4) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (9 - 4)) - 6)"}, {"input": "9 4 6 6\n", "output": "(9) / (4) = 9/4, left: 9/4, 6, 6\n(9/4) - (6) = -15/4, left: -15/4, 6\n(9/4) / (6) = 3/8, left: 3/8, 6\n(6) - (6) = 0, left: 0, 9/4\n(6) - (6) = 0, left: 0, 9/4\n(4) - (9) = -5, left: -5, 6, 6\n(6) - (-5) = 11, left: 11, 6\n(9) * (4) = 36, left: 36, 6, 6\n(36) - (6) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: (((9 * 4) - 6) - 6)"}, {"input": "9 4 6 6\n", "output": "(9) - (6) = 3, left: 3, 4, 6\n(6) - (9) = -3, left: -3, 4, 6\n(6) / (9) = 2/3, left: 2/3, 4, 6\n(9) / (6) = 3/2, left: 3/2, 4, 6\n(4) + (6) = 10, left: 10, 9, 6\n(9) - (10) = -1, left: -1, 6\n(-1) / (6) = -1/6, left: -1/6\n(4) - (6) = -2, left: -2, 9, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (4 - 6)))"}, {"input": "9 4 6 6\n", "output": "(4) + (6) = 10, left: 10, 9, 6\n(9) - (10) = -1, left: -1, 6\n(10) - (9) = 1, left: 1, 6\n(4) * (6) = 24, left: 24, 9, 6\n(24) / (6) = 4, left: 4, 9\n(6) - (24) = -18, left: -18, 9\n(9) * (24) = 216, left: 216, 6\n(4) - (6) = -2, left: -2, 9, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (4 - 6)))"}, {"input": "9 4 6 6\n", "output": "(6) - (6) = 0, left: 0, 9, 4\n(4) * (0) = 0, left: 0, 9\n(9) * (4) = 36, left: 36, 0\n(9) - (0) = 9, left: 9, 4\n(9) + (0) = 9, left: 9, 4\n(6) / (6) = 1, left: 1, 9, 4\n(9) + (1) = 10, left: 10, 4\n(9) * (1) = 9, left: 9, 4\n(4) / (9) = 4/9, left: 4/9\n(9) - (1) = 8, left: 8, 4\n(4) + (1) = 5, left: 5, 9\n(6) + (6) = 12, left: 12, 9, 4\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * 4) - (6 + 6))"}, {"input": "9 4 6 6\n", "output": "(9) - (6) = 3, left: 3, 4, 6\n(6) + (3) = 9, left: 9, 4\n(9) + (6) = 15, left: 15, 4, 6\n(6) / (9) = 2/3, left: 2/3, 4, 6\n(6) / (2/3) = 9, left: 9, 4\n(9) / (6) = 3/2, left: 3/2, 4, 6\n(4) * (3/2) = 6, left: 6, 6\n(6) - (6) = 0, left: 0\n(6) - (3/2) = 9/2, left: 9/2, 4\n(6) - (4) = 2, left: 2, 3/2\n(4) + (6) = 10, left: 10, 9, 6\n(4) - (6) = -2, left: -2, 9, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (4 - 6)))"}, {"input": "9 5 5 2\n", "output": "(5) * (2) = 10, left: 10, 9, 5\n(9) + (5) = 14, left: 14, 10\n(10) * (14) = 140, left: 140\n(14) / (10) = 7/5, left: 7/5\n(10) - (14) = -4, left: -4\n(10) + (14) = 24, left: 24\nreach 24! expression: ((5 * 2) + (9 + 5))"}, {"input": "9 5 5 2\n", "output": "(9) - (5) = 4, left: 4, 5, 2\n(5) / (2) = 5/2, left: 5/2, 4\n(4) + (5/2) = 13/2, left: 13/2\n(5) / (9) = 5/9, left: 5/9, 5, 2\n(2) * (5/9) = 10/9, left: 10/9, 5\n(5/9) - (5) = -40/9, left: -40/9, 2\n(2) + (-40/9) = -22/9, left: -22/9\n(9) + (5) = 14, left: 14, 5, 2\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "9 5 5 2\n", "output": "(9) + (2) = 11, left: 11, 5, 5\n(5) / (5) = 1, left: 1, 11\n(11) + (1) = 12, left: 12\n(9) - (2) = 7, left: 7, 5, 5\n(9) * (2) = 18, left: 18, 5, 5\n(18) / (5) = 18/5, left: 18/5, 5\n(9) / (2) = 9/2, left: 9/2, 5, 5\n(9) + (5) = 14, left: 14, 5, 2\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "9 5 5 2\n", "output": "(5) / (9) = 5/9, left: 5/9, 5, 2\n(5/9) / (5) = 1/9, left: 1/9, 2\n(9) * (5) = 45, left: 45, 5, 2\n(9) / (5) = 9/5, left: 9/5, 5, 2\n(5) - (9) = -4, left: -4, 5, 2\n(5) - (2) = 3, left: 3, -4\n(9) + (5) = 14, left: 14, 5, 2\n(14) - (2) = 12, left: 12, 5\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "9 5 5 2\n", "output": "(5) * (2) = 10, left: 10, 9, 5\n(9) + (5) = 14, left: 14, 10\n(10) / (14) = 5/7, left: 5/7\n(10) * (14) = 140, left: 140\n(14) / (10) = 7/5, left: 7/5\n(10) - (14) = -4, left: -4\n(10) + (14) = 24, left: 24\nreach 24! expression: ((5 * 2) + (9 + 5))"}, {"input": "9 5 5 2\n", "output": "(9) + (5) = 14, left: 14, 5, 2\n(5) * (14) = 70, left: 70, 2\n(2) - (70) = -68, left: -68\n(5) - (14) = -9, left: -9, 2\n(2) * (14) = 28, left: 28, 5\n(5) / (28) = 5/28, left: 5/28\n(2) / (14) = 1/7, left: 1/7, 5\n(5) * (1/7) = 5/7, left: 5/7\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "9 5 5 2\n", "output": "(2) - (9) = -7, left: -7, 5, 5\n(5) + (-7) = -2, left: -2, 5\n(5) - (-7) = 12, left: 12, 5\n(12) - (5) = 7, left: 7\n(2) / (9) = 2/9, left: 2/9, 5, 5\n(9) - (2) = 7, left: 7, 5, 5\n(5) * (7) = 35, left: 35, 5\n(9) * (2) = 18, left: 18, 5, 5\n(9) / (2) = 9/2, left: 9/2, 5, 5\n(9) + (5) = 14, left: 14, 5, 2\n(5) + (14) = 19, left: 19, 2\n(14) - (5) = 9, left: 9, 2\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "9 5 5 2\n", "output": "(9) - (5) = 4, left: 4, 5, 2\n(5) * (2) = 10, left: 10, 4\n(5) + (4) = 9, left: 9, 2\n(9) - (2) = 7, left: 7\n(5) - (4) = 1, left: 1, 2\n(2) - (1) = 1, left: 1\n(4) / (2) = 2, left: 2, 5\n(4) - (2) = 2, left: 2, 5\n(5) / (9) = 5/9, left: 5/9, 5, 2\n(2) - (5/9) = 13/9, left: 13/9, 5\n(9) + (5) = 14, left: 14, 5, 2\n(2) / (5) = 2/5, left: 2/5, 14\n(5) * (2) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "9 5 5 2\n", "output": "(5) * (2) = 10, left: 10, 9, 5\n(9) + (5) = 14, left: 14, 10\n(10) / (14) = 5/7, left: 5/7\n(10) * (14) = 140, left: 140\n(14) / (10) = 7/5, left: 7/5\n(10) - (14) = -4, left: -4\n(10) + (14) = 24, left: 24\nreach 24! expression: ((5 * 2) + (9 + 5))"}, {"input": "9 5 5 2\n", "output": "(5) * (2) = 10, left: 10, 9, 5\n(9) + (5) = 14, left: 14, 10\n(10) / (14) = 5/7, left: 5/7\n(10) * (14) = 140, left: 140\n(14) / (10) = 7/5, left: 7/5\n(10) - (14) = -4, left: -4\n(10) + (14) = 24, left: 24\nreach 24! expression: ((5 * 2) + (9 + 5))"}, {"input": "2 10 7 2\n", "output": "(2) / (2) = 1, left: 1, 10, 7\n(7) / (10) = 7/10, left: 7/10, 1\n(2) - (2) = 0, left: 0, 10, 7\n(2) - (7) = -5, left: -5, 2, 10\n(7) * (2) = 14, left: 14, 2, 10\n(10) + (2) = 12, left: 12, 2, 7\n(2) - (12) = -10, left: -10, 7\n(10) / (2) = 5, left: 5, 2, 7\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(2) * (2) = 4, left: 4, 10, 7\n(2) + (2) = 4, left: 4, 10, 7\n(7) - (10) = -3, left: -3, 4\n(2) / (2) = 1, left: 1, 10, 7\n(2) - (2) = 0, left: 0, 10, 7\n(2) - (2) = 0, left: 0, 10, 7\n(7) - (0) = 7, left: 7, 10\n(10) / (2) = 5, left: 5, 2, 7\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(2) - (2) = 0, left: 0, 10, 7\n(10) * (0) = 0, left: 0, 7\n(7) * (0) = 0, left: 0\n(2) / (2) = 1, left: 1, 10, 7\n(2) - (2) = 0, left: 0, 10, 7\n(2) / (10) = 1/5, left: 1/5, 2, 7\n(1/5) - (2) = -9/5, left: -9/5, 7\n(10) / (2) = 5, left: 5, 2, 7\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(10) - (2) = 8, left: 8, 7, 2\n(7) - (8) = -1, left: -1, 2\n(2) + (10) = 12, left: 12, 7, 2\n(7) - (2) = 5, left: 5, 12\n(2) * (10) = 20, left: 20, 7, 2\n(2) / (20) = 1/10, left: 1/10, 7\n(7) * (20) = 140, left: 140, 2\n(10) / (2) = 5, left: 5, 7, 2\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(10) - (7) = 3, left: 3, 2, 2\n(2) / (3) = 2/3, left: 2/3, 2\n(7) / (10) = 7/10, left: 7/10, 2, 2\n(2) / (7/10) = 20/7, left: 20/7, 2\n(7) * (2) = 14, left: 14, 2, 10\n(10) / (14) = 5/7, left: 5/7, 2\n(7) - (2) = 5, left: 5, 2, 10\n(10) / (2) = 5, left: 5, 2, 7\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(2) * (2) = 4, left: 4, 10, 7\n(7) + (4) = 11, left: 11, 10\n(2) + (2) = 4, left: 4, 10, 7\n(2) / (2) = 1, left: 1, 10, 7\n(10) - (1) = 9, left: 9, 7\n(2) - (2) = 0, left: 0, 10, 7\n(2) - (2) = 0, left: 0, 10, 7\n(7) - (10) = -3, left: -3, 0\n(0) - (-3) = 3, left: 3\n(2) / (2) = 1, left: 1, 10, 7\n(10) * (1) = 10, left: 10, 7\n(10) / (2) = 5, left: 5, 2, 7\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(2) - (2) = 0, left: 0, 10, 7\n(7) - (10) = -3, left: -3, 0\n(0) / (-3) = 0, left: 0\n(2) - (2) = 0, left: 0, 10, 7\n(0) - (7) = -7, left: -7, 10\n(10) / (-7) = -10/7, left: -10/7\n(2) + (2) = 4, left: 4, 10, 7\n(2) / (10) = 1/5, left: 1/5, 2, 7\n(2) - (10) = -8, left: -8, 2, 7\n(10) * (2) = 20, left: 20, 2, 7\n(10) / (2) = 5, left: 5, 2, 7\n(2) * (5) = 10, left: 10, 7\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(10) + (7) = 17, left: 17, 2, 2\n(17) / (2) = 17/2, left: 17/2, 2\n(10) * (7) = 70, left: 70, 2, 2\n(7) / (2) = 7/2, left: 7/2, 2, 10\n(7) + (2) = 9, left: 9, 2, 10\n(7) * (2) = 14, left: 14, 2, 10\n(2) / (7) = 2/7, left: 2/7, 2, 10\n(2) / (2/7) = 7, left: 7, 10\n(2/7) - (2) = -12/7, left: -12/7, 10\n(7) - (2) = 5, left: 5, 2, 10\n(2) - (10) = -8, left: -8, 5\n(10) / (2) = 5, left: 5, 2, 7\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "10 13 7 7\n", "output": "(13) / (7) = 13/7, left: 13/7, 10, 7\n(10) - (7) = 3, left: 3, 13/7\n(10) - (13) = -3, left: -3, 7, 7\n(10) + (13) = 23, left: 23, 7, 7\n(7) / (7) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (7 / 7))"}, {"input": "10 13 7 7\n", "output": "(10) / (7) = 10/7, left: 10/7, 13, 7\n(7) / (10/7) = 49/10, left: 49/10, 13\n(10) + (7) = 17, left: 17, 13, 7\n(7) / (7) = 1, left: 1, 10, 13\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (7 / 7)))"}, {"input": "10 13 7 7\n", "output": "(13) / (10) = 13/10, left: 13/10, 7, 7\n(10) * (13) = 130, left: 130, 7, 7\n(7) + (130) = 137, left: 137, 7\n(10) + (13) = 23, left: 23, 7, 7\n(7) / (7) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (7 / 7))"}, {"input": "10 13 7 7\n", "output": "(13) / (7) = 13/7, left: 13/7, 10, 7\n(7) - (13) = -6, left: -6, 10, 7\n(7) / (10) = 7/10, left: 7/10, 13, 7\n(10) + (7) = 17, left: 17, 13, 7\n(13) * (17) = 221, left: 221, 7\n(7) - (10) = -3, left: -3, 13, 7\n(7) + (-3) = 4, left: 4, 13\n(10) + (13) = 23, left: 23, 7, 7\n(7) / (7) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (7 / 7))"}, {"input": "10 13 7 7\n", "output": "(13) - (10) = 3, left: 3, 7, 7\n(10) / (13) = 10/13, left: 10/13, 7, 7\n(10/13) - (7) = -81/13, left: -81/13, 7\n(10/13) / (7) = 10/91, left: 10/91, 7\n(10) * (13) = 130, left: 130, 7, 7\n(7) - (7) = 0, left: 0, 130\n(7) * (130) = 910, left: 910, 7\n(10) + (13) = 23, left: 23, 7, 7\n(7) / (7) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (7 / 7))"}, {"input": "10 13 7 7\n", "output": "(7) - (10) = -3, left: -3, 13, 7\n(7) / (13) = 7/13, left: 7/13, -3\n(7) / (10) = 7/10, left: 7/10, 13, 7\n(10) + (7) = 17, left: 17, 13, 7\n(13) / (7) = 13/7, left: 13/7, 17\n(17) + (13/7) = 132/7, left: 132/7\n(13) / (17) = 13/17, left: 13/17, 7\n(7) / (7) = 1, left: 1, 10, 13\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (7 / 7)))"}, {"input": "10 13 7 7\n", "output": "(7) / (13) = 7/13, left: 7/13, 10, 7\n(7) - (13) = -6, left: -6, 10, 7\n(13) + (7) = 20, left: 20, 10, 7\n(20) - (10) = 10, left: 10, 7\n(13) / (7) = 13/7, left: 13/7, 10, 7\n(10) - (13) = -3, left: -3, 7, 7\n(10) + (13) = 23, left: 23, 7, 7\n(7) * (23) = 161, left: 161, 7\n(7) / (7) = 1, left: 1, 23\n(23) + (1) = 24, left: 24\nreach 24! expression: ((10 + 13) + (7 / 7))"}, {"input": "10 13 7 7\n", "output": "(7) / (10) = 7/10, left: 7/10, 13, 7\n(10) * (7) = 70, left: 70, 13, 7\n(10) / (7) = 10/7, left: 10/7, 13, 7\n(10/7) - (7) = -39/7, left: -39/7, 13\n(7) - (10) = -3, left: -3, 13, 7\n(13) / (7) = 13/7, left: 13/7, -3\n(13/7) - (-3) = 34/7, left: 34/7\n(7) / (7) = 1, left: 1, 10, 13\n(10) + (1) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (10 + (7 / 7)))"}, {"input": "12 10 9 13\n", "output": "(10) / (12) = 5/6, left: 5/6, 9, 13\n(5/6) - (9) = -49/6, left: -49/6, 13\n(9) * (13) = 117, left: 117, 5/6\n(10) - (12) = -2, left: -2, 9, 13\n(9) + (13) = 22, left: 22, -2\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((9 + 13) - (10 - 12))"}, {"input": "12 10 9 13\n", "output": "(9) - (10) = -1, left: -1, 12, 13\n(13) / (12) = 13/12, left: 13/12, -1\n(12) - (13) = -1, left: -1, -1\n(-1) * (-1) = 1, left: 1\n(12) + (13) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((9 - 10) + (12 + 13))"}, {"input": "12 10 9 13\n", "output": "(13) - (9) = 4, left: 4, 12, 10\n(9) * (13) = 117, left: 117, 12, 10\n(12) * (117) = 1404, left: 1404, 10\n(9) + (13) = 22, left: 22, 12, 10\n(10) - (12) = -2, left: -2, 22\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((9 + 13) - (10 - 12))"}, {"input": "12 10 9 13\n", "output": "(12) * (10) = 120, left: 120, 9, 13\n(120) / (9) = 40/3, left: 40/3, 13\n(12) - (10) = 2, left: 2, 9, 13\n(9) / (13) = 9/13, left: 9/13, 2\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((12 - 10) + (9 + 13))"}, {"input": "12 10 9 13\n", "output": "(12) + (13) = 25, left: 25, 10, 9\n(9) + (25) = 34, left: 34, 10\n(10) + (34) = 44, left: 44\n(10) / (34) = 5/17, left: 5/17\n(10) * (34) = 340, left: 340\n(34) - (10) = 24, left: 24\nreach 24! expression: ((9 + (12 + 13)) - 10)"}, {"input": "12 10 9 13\n", "output": "(12) + (10) = 22, left: 22, 9, 13\n(13) / (22) = 13/22, left: 13/22, 9\n(13) / (9) = 13/9, left: 13/9, 22\n(9) + (13) = 22, left: 22, 22\n(9) * (22) = 198, left: 198, 13\n(198) - (13) = 185, left: 185\n(12) * (10) = 120, left: 120, 9, 13\n(12) - (10) = 2, left: 2, 9, 13\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((12 - 10) + (9 + 13))"}, {"input": "12 10 9 13\n", "output": "(13) - (9) = 4, left: 4, 12, 10\n(10) - (4) = 6, left: 6, 12\n(12) - (10) = 2, left: 2, 4\n(13) / (9) = 13/9, left: 13/9, 12, 10\n(9) * (13) = 117, left: 117, 12, 10\n(10) + (117) = 127, left: 127, 12\n(12) - (127) = -115, left: -115\n(9) + (13) = 22, left: 22, 12, 10\n(10) - (12) = -2, left: -2, 22\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((9 + 13) - (10 - 12))"}, {"input": "12 10 9 13\n", "output": "(9) - (10) = -1, left: -1, 12, 13\n(13) / (12) = 13/12, left: 13/12, -1\n(13/12) - (-1) = 25/12, left: 25/12\n(12) * (13) = 156, left: 156, -1\n(-1) / (156) = -1/156, left: -1/156\n(12) / (13) = 12/13, left: 12/13, -1\n(12) - (13) = -1, left: -1, -1\n(-1) - (-1) = 0, left: 0\n(12) + (13) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((9 - 10) + (12 + 13))"}, {"input": "12 10 9 13\n", "output": "(10) / (12) = 5/6, left: 5/6, 9, 13\n(5/6) - (9) = -49/6, left: -49/6, 13\n(13) - (9) = 4, left: 4, 5/6\n(13) / (9) = 13/9, left: 13/9, 5/6\n(9) + (13) = 22, left: 22, 5/6\n(22) - (5/6) = 127/6, left: 127/6\n(13) + (5/6) = 83/6, left: 83/6, 9\n(10) - (12) = -2, left: -2, 9, 13\n(9) + (13) = 22, left: 22, -2\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((9 + 13) - (10 - 12))"}, {"input": "12 10 9 13\n", "output": "(12) + (13) = 25, left: 25, 10, 9\n(9) + (25) = 34, left: 34, 10\n(10) + (34) = 44, left: 44\n(10) / (34) = 5/17, left: 5/17\n(10) * (34) = 340, left: 340\n(34) - (10) = 24, left: 24\nreach 24! expression: ((9 + (12 + 13)) - 10)"}, {"input": "12 10 9 13\n", "output": "(12) + (13) = 25, left: 25, 10, 9\n(9) + (25) = 34, left: 34, 10\n(10) + (34) = 44, left: 44\n(10) / (34) = 5/17, left: 5/17\n(10) * (34) = 340, left: 340\n(34) - (10) = 24, left: 24\nreach 24! expression: ((9 + (12 + 13)) - 10)"}, {"input": "12 10 9 13\n", "output": "(12) + (13) = 25, left: 25, 10, 9\n(9) + (25) = 34, left: 34, 10\n(10) + (34) = 44, left: 44\n(10) / (34) = 5/17, left: 5/17\n(10) * (34) = 340, left: 340\n(34) - (10) = 24, left: 24\nreach 24! expression: ((9 + (12 + 13)) - 10)"}, {"input": "4 5 11 11\n", "output": "(4) / (5) = 4/5, left: 4/5, 11, 11\n(5) / (4) = 5/4, left: 5/4, 11, 11\n(4) - (5) = -1, left: -1, 11, 11\n(4) * (5) = 20, left: 20, 11, 11\n(11) / (5) = 11/5, left: 11/5, 4, 11\n(11/5) / (11) = 1/5, left: 1/5, 4\n(11) - (11) = 0, left: 0, 4, 5\n(11) / (11) = 1, left: 1, 4, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (5 + (11 / 11)))"}, {"input": "4 5 11 11\n", "output": "(5) - (11) = -6, left: -6, 4, 11\n(11) - (5) = 6, left: 6, 4, 11\n(6) - (11) = -5, left: -5, 4\n(4) / (6) = 2/3, left: 2/3, 11\n(4) - (11) = -7, left: -7, 5, 11\n(4) / (11) = 4/11, left: 4/11, 5, 11\n(11) - (5) = 6, left: 6, 4/11\n(11) - (4) = 7, left: 7, 5, 11\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (11 - 4)) - 11)"}, {"input": "4 5 11 11\n", "output": "(4) * (11) = 44, left: 44, 5, 11\n(5) - (11) = -6, left: -6, 44\n(4) + (11) = 15, left: 15, 5, 11\n(15) - (11) = 4, left: 4, 5\n(5) / (15) = 1/3, left: 1/3, 11\n(5) + (15) = 20, left: 20, 11\n(11) - (20) = -9, left: -9\n(11) - (4) = 7, left: 7, 5, 11\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (11 - 4)) - 11)"}, {"input": "4 5 11 11\n", "output": "(11) - (5) = 6, left: 6, 4, 11\n(4) - (11) = -7, left: -7, 6\n(5) / (11) = 5/11, left: 5/11, 4, 11\n(4) / (5/11) = 44/5, left: 44/5, 11\n(5) * (11) = 55, left: 55, 4, 11\n(4) - (55) = -51, left: -51, 11\n(11) / (55) = 1/5, left: 1/5, 4\n(11) - (4) = 7, left: 7, 5, 11\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (11 - 4)) - 11)"}, {"input": "4 5 11 11\n", "output": "(5) + (11) = 16, left: 16, 4, 11\n(11) - (5) = 6, left: 6, 4, 11\n(6) / (11) = 6/11, left: 6/11, 4\n(4) + (11) = 15, left: 15, 5, 11\n(11) / (4) = 11/4, left: 11/4, 5, 11\n(5) / (11) = 5/11, left: 5/11, 11/4\n(4) * (11) = 44, left: 44, 5, 11\n(11) - (4) = 7, left: 7, 5, 11\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (11 - 4)) - 11)"}, {"input": "11 9 5 6\n", "output": "(6) / (9) = 2/3, left: 2/3, 11, 5\n(5) - (2/3) = 13/3, left: 13/3, 11\n(11) / (2/3) = 33/2, left: 33/2, 5\n(11) * (2/3) = 22/3, left: 22/3, 5\n(11) + (5) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((11 + 5) / (6 / 9))"}, {"input": "11 9 5 6\n", "output": "(9) * (5) = 45, left: 45, 11, 6\n(5) / (9) = 5/9, left: 5/9, 11, 6\n(11) / (5/9) = 99/5, left: 99/5, 6\n(9) + (5) = 14, left: 14, 11, 6\n(6) - (14) = -8, left: -8, 11\n(5) - (11) = -6, left: -6, 9, 6\n(11) * (5) = 55, left: 55, 9, 6\n(11) + (5) = 16, left: 16, 9, 6\n(9) / (6) = 3/2, left: 3/2, 16\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((11 + 5) * (9 / 6))"}, {"input": "11 9 5 6\n", "output": "(6) - (5) = 1, left: 1, 11, 9\n(9) / (1) = 9, left: 9, 11\n(1) / (9) = 1/9, left: 1/9, 11\n(5) * (6) = 30, left: 30, 11, 9\n(11) - (9) = 2, left: 2, 30\n(30) + (2) = 32, left: 32\n(5) + (6) = 11, left: 11, 11, 9\n(6) / (5) = 6/5, left: 6/5, 11, 9\n(11) + (9) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((6 / 5) * (11 + 9))"}, {"input": "11 9 5 6\n", "output": "(5) / (9) = 5/9, left: 5/9, 11, 6\n(5) - (9) = -4, left: -4, 11, 6\n(-4) - (6) = -10, left: -10, 11\n(9) + (5) = 14, left: 14, 11, 6\n(11) + (14) = 25, left: 25, 6\n(9) / (5) = 9/5, left: 9/5, 11, 6\n(9) / (11) = 9/11, left: 9/11, 5, 6\n(11) + (9) = 20, left: 20, 5, 6\n(6) * (20) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((6 * (11 + 9)) / 5)"}, {"input": "11 9 5 6\n", "output": "(5) / (9) = 5/9, left: 5/9, 11, 6\n(11) * (6) = 66, left: 66, 5/9\n(9) - (5) = 4, left: 4, 11, 6\n(4) - (6) = -2, left: -2, 11\n(9) - (11) = -2, left: -2, 5, 6\n(5) * (6) = 30, left: 30, -2\n(11) - (9) = 2, left: 2, 5, 6\n(11) + (9) = 20, left: 20, 5, 6\n(5) / (6) = 5/6, left: 5/6, 20\n(20) / (5/6) = 24, left: 24\nreach 24! expression: ((11 + 9) / (5 / 6))"}, {"input": "11 9 5 6\n", "output": "(6) / (9) = 2/3, left: 2/3, 11, 5\n(5) + (2/3) = 17/3, left: 17/3, 11\n(11) * (2/3) = 22/3, left: 22/3, 5\n(5) * (22/3) = 110/3, left: 110/3\n(2/3) - (11) = -31/3, left: -31/3, 5\n(5) + (-31/3) = -16/3, left: -16/3\n(5) / (11) = 5/11, left: 5/11, 2/3\n(2/3) + (5/11) = 37/33, left: 37/33\n(11) + (5) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((11 + 5) / (6 / 9))"}, {"input": "8 9 4 9\n", "output": "(9) - (8) = 1, left: 1, 9, 4\n(4) / (9) = 4/9, left: 4/9, 1\n(1) / (4/9) = 9/4, left: 9/4\n(4) / (8) = 1/2, left: 1/2, 9, 9\n(9) * (1/2) = 9/2, left: 9/2, 9\n(9) * (9) = 81, left: 81, 8, 4\n(8) / (4) = 2, left: 2, 81\n(9) / (9) = 1, left: 1, 8, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(9) - (9) = 0, left: 0, 8, 4\n(0) / (8) = 0, left: 0, 4\n(0) - (8) = -8, left: -8, 4\n(4) / (-8) = -1/2, left: -1/2\n(9) * (9) = 81, left: 81, 8, 4\n(9) + (9) = 18, left: 18, 8, 4\n(8) - (18) = -10, left: -10, 4\n(9) / (9) = 1, left: 1, 8, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(9) / (4) = 9/4, left: 9/4, 8, 9\n(9) * (4) = 36, left: 36, 8, 9\n(4) * (9) = 36, left: 36, 8, 9\n(9) / (8) = 9/8, left: 9/8, 36\n(9) - (9) = 0, left: 0, 8, 4\n(8) - (4) = 4, left: 4, 0\n(0) - (4) = -4, left: -4\n(9) / (9) = 1, left: 1, 8, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(9) / (9) = 1, left: 1, 8, 4\n(8) * (1) = 8, left: 8, 4\n(4) * (8) = 32, left: 32\n(8) / (1) = 8, left: 8, 4\n(4) + (8) = 12, left: 12\n(8) - (4) = 4, left: 4\n(8) + (1) = 9, left: 9, 4\n(9) / (4) = 9/4, left: 9/4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(8) / (9) = 8/9, left: 8/9, 9, 4\n(9) / (8/9) = 81/8, left: 81/8, 4\n(4) - (81/8) = -49/8, left: -49/8\n(9) - (8) = 1, left: 1, 9, 4\n(1) - (4) = -3, left: -3, 9\n(4) - (8) = -4, left: -4, 9, 9\n(8) - (4) = 4, left: 4, 9, 9\n(9) / (9) = 1, left: 1, 8, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(4) / (9) = 4/9, left: 4/9, 8, 9\n(9) - (4) = 5, left: 5, 8, 9\n(9) * (4) = 36, left: 36, 8, 9\n(9) + (4) = 13, left: 13, 8, 9\n(8) * (9) = 72, left: 72, 13\n(4) - (9) = -5, left: -5, 8, 9\n(9) / (-5) = -9/5, left: -9/5, 8\n(9) - (4) = 5, left: 5, 8, 9\n(9) - (9) = 0, left: 0, 8, 4\n(8) - (0) = 8, left: 8, 4\n(9) * (9) = 81, left: 81, 8, 4\n(9) / (9) = 1, left: 1, 8, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(8) + (9) = 17, left: 17, 9, 4\n(9) * (17) = 153, left: 153, 4\n(9) / (8) = 9/8, left: 9/8, 9, 4\n(4) / (9/8) = 32/9, left: 32/9, 9\n(4) * (9) = 36, left: 36, 8, 9\n(4) + (9) = 13, left: 13, 8, 9\n(9) + (4) = 13, left: 13, 8, 9\n(13) - (8) = 5, left: 5, 9\n(8) / (9) = 8/9, left: 8/9, 13\n(8) + (4) = 12, left: 12, 9, 9\n(9) - (9) = 0, left: 0, 8, 4\n(9) / (9) = 1, left: 1, 8, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(8) + (9) = 17, left: 17, 9, 4\n(8) - (9) = -1, left: -1, 9, 4\n(-1) - (4) = -5, left: -5, 9\n(9) / (-1) = -9, left: -9, 4\n(4) - (8) = -4, left: -4, 9, 9\n(8) * (4) = 32, left: 32, 9, 9\n(9) * (32) = 288, left: 288, 9\n(9) / (288) = 1/32, left: 1/32\n(8) + (4) = 12, left: 12, 9, 9\n(4) / (8) = 1/2, left: 1/2, 9, 9\n(9) / (1/2) = 18, left: 18, 9\n(9) / (9) = 1, left: 1, 8, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(9) - (9) = 0, left: 0, 8, 4\n(9) - (9) = 0, left: 0, 8, 4\n(8) - (4) = 4, left: 4, 0\n(9) * (9) = 81, left: 81, 8, 4\n(81) - (4) = 77, left: 77, 8\n(77) / (8) = 77/8, left: 77/8\n(4) * (81) = 324, left: 324, 8\n(4) + (81) = 85, left: 85, 8\n(81) / (4) = 81/4, left: 81/4, 8\n(8) - (81) = -73, left: -73, 4\n(9) + (9) = 18, left: 18, 8, 4\n(9) / (9) = 1, left: 1, 8, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 10 7 4\n", "output": "(8) / (10) = 4/5, left: 4/5, 7, 4\n(8) + (10) = 18, left: 18, 7, 4\n(4) / (18) = 2/9, left: 2/9, 7\n(8) * (10) = 80, left: 80, 7, 4\n(7) - (4) = 3, left: 3, 80\n(3) / (80) = 3/80, left: 3/80\n(8) - (10) = -2, left: -2, 7, 4\n(8) * (7) = 56, left: 56, 10, 4\n(56) / (4) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((8 * 7) / 4))"}, {"input": "8 10 7 4\n", "output": "(8) + (10) = 18, left: 18, 7, 4\n(8) - (10) = -2, left: -2, 7, 4\n(-2) / (4) = -1/2, left: -1/2, 7\n(7) / (-1/2) = -14, left: -14\n(8) * (10) = 80, left: 80, 7, 4\n(7) - (8) = -1, left: -1, 10, 4\n(4) - (10) = -6, left: -6, -1\n(8) * (7) = 56, left: 56, 10, 4\n(56) / (4) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((8 * 7) / 4))"}, {"input": "8 10 7 4\n", "output": "(10) - (7) = 3, left: 3, 8, 4\n(7) - (10) = -3, left: -3, 8, 4\n(8) + (4) = 12, left: 12, -3\n(12) / (-3) = -4, left: -4\n(4) + (-3) = 1, left: 1, 8\n(10) + (7) = 17, left: 17, 8, 4\n(17) / (8) = 17/8, left: 17/8, 4\n(7) / (4) = 7/4, left: 7/4, 8, 10\n(8) * (7/4) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (8 * (7 / 4)))"}, {"input": "8 10 7 4\n", "output": "(10) / (8) = 5/4, left: 5/4, 7, 4\n(8) / (10) = 4/5, left: 4/5, 7, 4\n(7) * (4) = 28, left: 28, 4/5\n(8) + (10) = 18, left: 18, 7, 4\n(4) * (18) = 72, left: 72, 7\n(8) * (10) = 80, left: 80, 7, 4\n(10) - (8) = 2, left: 2, 7, 4\n(8) / (4) = 2, left: 2, 10, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (8 / 4)))"}, {"input": "8 10 7 4\n", "output": "(8) + (10) = 18, left: 18, 7, 4\n(7) / (10) = 7/10, left: 7/10, 8, 4\n(10) * (7) = 70, left: 70, 8, 4\n(4) + (70) = 74, left: 74, 8\n(7) * (4) = 28, left: 28, 8, 10\n(7) - (4) = 3, left: 3, 8, 10\n(8) / (10) = 4/5, left: 4/5, 3\n(7) / (4) = 7/4, left: 7/4, 8, 10\n(8) * (7/4) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (8 * (7 / 4)))"}, {"input": "6 11 8 11\n", "output": "(11) / (6) = 11/6, left: 11/6, 11, 8\n(11) + (8) = 19, left: 19, 11/6\n(11/6) / (8) = 11/48, left: 11/48, 11\n(6) - (11) = -5, left: -5, 11, 8\n(8) - (-5) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (8 - (6 - 11)))"}, {"input": "6 11 8 11\n", "output": "(6) - (11) = -5, left: -5, 11, 8\n(8) + (-5) = 3, left: 3, 11\n(-5) / (8) = -5/8, left: -5/8, 11\n(11) * (-5/8) = -55/8, left: -55/8\n(-5) - (8) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - ((6 - 11) - 8))"}, {"input": "6 11 8 11\n", "output": "(11) * (8) = 88, left: 88, 6, 11\n(11) - (8) = 3, left: 3, 6, 11\n(11) / (6) = 11/6, left: 11/6, 3\n(11) + (8) = 19, left: 19, 6, 11\n(19) - (6) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((11 + 8) - 6))"}, {"input": "6 11 8 11\n", "output": "(11) - (8) = 3, left: 3, 6, 11\n(6) + (11) = 17, left: 17, 3\n(11) / (8) = 11/8, left: 11/8, 6, 11\n(11) - (6) = 5, left: 5, 11/8\n(8) + (11) = 19, left: 19, 6, 11\n(6) * (19) = 114, left: 114, 11\n(6) + (19) = 25, left: 25, 11\n(11) / (25) = 11/25, left: 11/25\n(19) - (6) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((8 + 11) - 6))"}, {"input": "6 11 8 11\n", "output": "(11) / (6) = 11/6, left: 11/6, 11, 8\n(11) / (8) = 11/8, left: 11/8, 11/6\n(11) / (11/6) = 6, left: 6, 8\n(11) - (11/6) = 55/6, left: 55/6, 8\n(8) + (55/6) = 103/6, left: 103/6\n(6) - (11) = -5, left: -5, 11, 8\n(8) / (-5) = -8/5, left: -8/5, 11\n(-5) / (8) = -5/8, left: -5/8, 11\n(8) - (-5) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (8 - (6 - 11)))"}, {"input": "6 11 8 11\n", "output": "(6) - (11) = -5, left: -5, 11, 8\n(8) + (-5) = 3, left: 3, 11\n(11) * (3) = 33, left: 33\n(11) / (3) = 11/3, left: 11/3\n(-5) / (8) = -5/8, left: -5/8, 11\n(-5/8) / (11) = -5/88, left: -5/88\n(11) / (-5/8) = -88/5, left: -88/5\n(11) - (-5/8) = 93/8, left: 93/8\n(-5) - (8) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - ((6 - 11) - 8))"}, {"input": "6 11 8 11\n", "output": "(6) + (11) = 17, left: 17, 8, 11\n(8) - (17) = -9, left: -9, 11\n(11) / (-9) = -11/9, left: -11/9\n(6) / (11) = 6/11, left: 6/11, 8, 11\n(8) / (11) = 8/11, left: 8/11, 6/11\n(11) - (6/11) = 115/11, left: 115/11, 8\n(8) - (6/11) = 82/11, left: 82/11, 11\n(11) - (6) = 5, left: 5, 8, 11\n(8) + (5) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (8 + (11 - 6)))"}, {"input": "6 11 8 11\n", "output": "(11) * (8) = 88, left: 88, 6, 11\n(11) / (8) = 11/8, left: 11/8, 6, 11\n(8) - (11) = -3, left: -3, 6, 11\n(6) / (-3) = -2, left: -2, 11\n(8) / (11) = 8/11, left: 8/11, 6, 11\n(6) + (11) = 17, left: 17, 8/11\n(11) - (8/11) = 113/11, left: 113/11, 6\n(11) + (8) = 19, left: 19, 6, 11\n(19) - (6) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((11 + 8) - 6))"}, {"input": "7 12 1 12\n", "output": "(1) - (12) = -11, left: -11, 7, 12\n(7) - (-11) = 18, left: 18, 12\n(18) / (12) = 3/2, left: 3/2\n(12) * (12) = 144, left: 144, 7, 1\n(7) - (1) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (7 - 1))"}, {"input": "7 12 1 12\n", "output": "(1) / (7) = 1/7, left: 1/7, 12, 12\n(1/7) / (12) = 1/84, left: 1/84, 12\n(1) - (7) = -6, left: -6, 12, 12\n(7) - (1) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((7 - 1) / 12))"}, {"input": "7 12 1 12\n", "output": "(1) * (12) = 12, left: 12, 7, 12\n(7) + (12) = 19, left: 19, 12\n(1) / (12) = 1/12, left: 1/12, 7, 12\n(1) - (12) = -11, left: -11, 7, 12\n(-11) / (12) = -11/12, left: -11/12, 7\n(12) / (12) = 1, left: 1, 7, 1\n(7) + (1) = 8, left: 8, 1\n(12) * (12) = 144, left: 144, 7, 1\n(7) - (1) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (7 - 1))"}, {"input": "7 12 1 12\n", "output": "(7) * (1) = 7, left: 7, 12, 12\n(12) - (12) = 0, left: 0, 7\n(7) / (1) = 7, left: 7, 12, 12\n(7) / (12) = 7/12, left: 7/12, 12\n(12) * (7) = 84, left: 84, 12\n(1) - (7) = -6, left: -6, 12, 12\n(12) / (-6) = -2, left: -2, 12\n(7) - (1) = 6, left: 6, 12, 12\n(12) * (12) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (7 - 1))"}, {"input": "7 12 1 12\n", "output": "(7) * (1) = 7, left: 7, 12, 12\n(12) * (7) = 84, left: 84, 12\n(7) + (1) = 8, left: 8, 12, 12\n(12) - (12) = 0, left: 0, 8\n(8) * (0) = 0, left: 0\n(1) - (7) = -6, left: -6, 12, 12\n(12) + (-6) = 6, left: 6, 12\n(7) - (1) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((7 - 1) / 12))"}, {"input": "7 12 1 12\n", "output": "(7) / (12) = 7/12, left: 7/12, 1, 12\n(1) / (7/12) = 12/7, left: 12/7, 12\n(12) / (7) = 12/7, left: 12/7, 12, 1\n(7) * (12) = 84, left: 84, 12, 1\n(7) + (12) = 19, left: 19, 12, 1\n(12) - (1) = 11, left: 11, 19\n(11) / (19) = 11/19, left: 11/19\n(7) - (1) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((7 - 1) / 12))"}, {"input": "7 12 1 12\n", "output": "(7) / (1) = 7, left: 7, 12, 12\n(7) / (12) = 7/12, left: 7/12, 12\n(7/12) - (12) = -137/12, left: -137/12\n(1) / (7) = 1/7, left: 1/7, 12, 12\n(12) / (12) = 1, left: 1, 1/7\n(1) - (7) = -6, left: -6, 12, 12\n(7) * (1) = 7, left: 7, 12, 12\n(7) - (1) = 6, left: 6, 12, 12\n(12) * (12) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (7 - 1))"}, {"input": "11 5 6 4\n", "output": "(4) / (6) = 2/3, left: 2/3, 11, 5\n(2/3) - (5) = -13/3, left: -13/3, 11\n(5) - (2/3) = 13/3, left: 13/3, 11\n(5) * (2/3) = 10/3, left: 10/3, 11\n(11) + (5) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((11 + 5) / (4 / 6))"}, {"input": "11 5 6 4\n", "output": "(6) * (4) = 24, left: 24, 11, 5\n(11) / (24) = 11/24, left: 11/24, 5\n(24) - (11) = 13, left: 13, 5\n(4) / (6) = 2/3, left: 2/3, 11, 5\n(11) + (5) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((11 + 5) / (4 / 6))"}, {"input": "11 5 6 4\n", "output": "(4) / (6) = 2/3, left: 2/3, 11, 5\n(2/3) - (5) = -13/3, left: -13/3, 11\n(5) - (2/3) = 13/3, left: 13/3, 11\n(5) * (2/3) = 10/3, left: 10/3, 11\n(10/3) - (11) = -23/3, left: -23/3\n(2/3) - (11) = -31/3, left: -31/3, 5\n(11) / (5) = 11/5, left: 11/5, 2/3\n(2/3) + (11/5) = 43/15, left: 43/15\n(11) + (5) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((11 + 5) / (4 / 6))"}, {"input": "11 5 6 4\n", "output": "(6) * (4) = 24, left: 24, 11, 5\n(11) / (5) = 11/5, left: 11/5, 24\n(5) / (11) = 5/11, left: 5/11, 24\n(24) + (5/11) = 269/11, left: 269/11\n(24) / (11) = 24/11, left: 24/11, 5\n(5) / (24) = 5/24, left: 5/24, 11\n(5/24) - (11) = -259/24, left: -259/24\n(4) / (6) = 2/3, left: 2/3, 11, 5\n(11) + (5) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((11 + 5) / (4 / 6))"}, {"input": "11 5 6 4\n", "output": "(11) / (5) = 11/5, left: 11/5, 6, 4\n(4) / (6) = 2/3, left: 2/3, 11/5\n(11) * (5) = 55, left: 55, 6, 4\n(4) - (55) = -51, left: -51, 6\n(5) / (11) = 5/11, left: 5/11, 6, 4\n(4) * (5/11) = 20/11, left: 20/11, 6\n(6) / (20/11) = 33/10, left: 33/10\n(11) + (5) = 16, left: 16, 6, 4\n(4) / (6) = 2/3, left: 2/3, 16\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((11 + 5) / (4 / 6))"}, {"input": "11 5 6 4\n", "output": "(11) - (4) = 7, left: 7, 5, 6\n(6) - (11) = -5, left: -5, 5, 4\n(5) - (4) = 1, left: 1, -5\n(11) - (6) = 5, left: 5, 5, 4\n(4) + (5) = 9, left: 9, 5\n(4) - (5) = -1, left: -1, 11, 6\n(6) * (-1) = -6, left: -6, 11\n(11) + (5) = 16, left: 16, 6, 4\n(6) / (4) = 3/2, left: 3/2, 16\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((11 + 5) * (6 / 4))"}, {"input": "11 5 6 4\n", "output": "(6) / (11) = 6/11, left: 6/11, 5, 4\n(4) - (6/11) = 38/11, left: 38/11, 5\n(11) - (6) = 5, left: 5, 5, 4\n(4) / (5) = 4/5, left: 4/5, 5\n(6) / (5) = 6/5, left: 6/5, 11, 4\n(11) + (4) = 15, left: 15, 5, 6\n(5) + (15) = 20, left: 20, 6\n(11) + (5) = 16, left: 16, 6, 4\n(6) * (16) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((6 * (11 + 5)) / 4)"}, {"input": "11 5 6 4\n", "output": "(11) + (4) = 15, left: 15, 5, 6\n(11) + (6) = 17, left: 17, 5, 4\n(5) * (17) = 85, left: 85, 4\n(11) - (6) = 5, left: 5, 5, 4\n(11) * (6) = 66, left: 66, 5, 4\n(4) * (66) = 264, left: 264, 5\n(4) - (5) = -1, left: -1, 11, 6\n(6) / (-1) = -6, left: -6, 11\n(5) * (4) = 20, left: 20, 11, 6\n(11) - (5) = 6, left: 6, 6, 4\n(5) - (11) = -6, left: -6, 6, 4\n(11) + (5) = 16, left: 16, 6, 4\n(6) / (4) = 3/2, left: 3/2, 16\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((11 + 5) * (6 / 4))"}, {"input": "11 5 6 4\n", "output": "(11) * (6) = 66, left: 66, 5, 4\n(11) / (6) = 11/6, left: 11/6, 5, 4\n(11) + (6) = 17, left: 17, 5, 4\n(5) * (6) = 30, left: 30, 11, 4\n(4) - (11) = -7, left: -7, 30\n(6) - (5) = 1, left: 1, 11, 4\n(11) / (4) = 11/4, left: 11/4, 5, 6\n(11) - (4) = 7, left: 7, 5, 6\n(7) - (6) = 1, left: 1, 5\n(11) + (4) = 15, left: 15, 5, 6\n(6) + (15) = 21, left: 21, 5\n(11) + (5) = 16, left: 16, 6, 4\n(6) * (16) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((6 * (11 + 5)) / 4)"}, {"input": "10 10 11 2\n", "output": "(10) - (10) = 0, left: 0, 11, 2\n(2) / (11) = 2/11, left: 2/11, 0\n(10) - (10) = 0, left: 0, 11, 2\n(10) / (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "10 10 11 2\n", "output": "(2) / (11) = 2/11, left: 2/11, 10, 10\n(10) * (2) = 20, left: 20, 10, 11\n(11) + (20) = 31, left: 31, 10\n(10) / (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "10 10 11 2\n", "output": "(2) / (10) = 1/5, left: 1/5, 10, 11\n(11) / (1/5) = 55, left: 55, 10\n(2) / (10) = 1/5, left: 1/5, 10, 11\n(10) / (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "10 10 11 2\n", "output": "(10) * (2) = 20, left: 20, 10, 11\n(20) - (11) = 9, left: 9, 10\n(10) - (2) = 8, left: 8, 10, 11\n(10) + (2) = 12, left: 12, 10, 11\n(10) * (2) = 20, left: 20, 10, 11\n(2) - (11) = -9, left: -9, 10, 10\n(10) - (-9) = 19, left: 19, 10\n(10) / (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "10 10 11 2\n", "output": "(10) - (2) = 8, left: 8, 10, 11\n(10) + (11) = 21, left: 21, 8\n(2) - (10) = -8, left: -8, 10, 11\n(11) / (-8) = -11/8, left: -11/8, 10\n(2) / (10) = 1/5, left: 1/5, 10, 11\n(1/5) - (10) = -49/5, left: -49/5, 11\n(11) / (-49/5) = -55/49, left: -55/49\n(10) / (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "10 10 11 2\n", "output": "(10) - (10) = 0, left: 0, 11, 2\n(11) + (2) = 13, left: 13, 0\n(10) - (10) = 0, left: 0, 11, 2\n(0) / (2) = 0, left: 0, 11\n(11) - (0) = 11, left: 11, 2\n(10) * (10) = 100, left: 100, 11, 2\n(11) * (100) = 1100, left: 1100, 2\n(10) / (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "10 10 11 2\n", "output": "(2) / (11) = 2/11, left: 2/11, 10, 10\n(10) / (2) = 5, left: 5, 10, 11\n(2) - (10) = -8, left: -8, 10, 11\n(11) - (10) = 1, left: 1, 10, 2\n(10) + (11) = 21, left: 21, 10, 2\n(10) + (2) = 12, left: 12, 21\n(10) + (10) = 20, left: 20, 11, 2\n(10) / (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "10 10 11 2\n", "output": "(10) - (11) = -1, left: -1, 10, 2\n(10) * (11) = 110, left: 110, 10, 2\n(10) + (11) = 21, left: 21, 10, 2\n(2) - (21) = -19, left: -19, 10\n(11) - (10) = 1, left: 1, 10, 2\n(1) / (2) = 1/2, left: 1/2, 10\n(10) - (10) = 0, left: 0, 11, 2\n(10) / (10) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "5 8 10 7\n", "output": "(10) / (8) = 5/4, left: 5/4, 5, 7\n(7) / (5/4) = 28/5, left: 28/5, 5\n(10) - (8) = 2, left: 2, 5, 7\n(2) / (7) = 2/7, left: 2/7, 5\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (5 + 7))"}, {"input": "5 8 10 7\n", "output": "(7) / (5) = 7/5, left: 7/5, 8, 10\n(8) - (7/5) = 33/5, left: 33/5, 10\n(10) + (33/5) = 83/5, left: 83/5\n(5) + (7) = 12, left: 12, 8, 10\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (10 - 8))"}, {"input": "5 8 10 7\n", "output": "(10) / (8) = 5/4, left: 5/4, 5, 7\n(5/4) / (7) = 5/28, left: 5/28, 5\n(5) + (7) = 12, left: 12, 5/4\n(5) / (5/4) = 4, left: 4, 7\n(8) + (10) = 18, left: 18, 5, 7\n(7) + (18) = 25, left: 25, 5\n(18) - (7) = 11, left: 11, 5\n(10) - (8) = 2, left: 2, 5, 7\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (5 + 7))"}, {"input": "5 8 10 7\n", "output": "(7) - (8) = -1, left: -1, 5, 10\n(8) / (7) = 8/7, left: 8/7, 5, 10\n(8) - (7) = 1, left: 1, 5, 10\n(10) - (1) = 9, left: 9, 5\n(8) + (10) = 18, left: 18, 5, 7\n(18) - (5) = 13, left: 13, 7\n(8) / (10) = 4/5, left: 4/5, 5, 7\n(10) - (8) = 2, left: 2, 5, 7\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (5 + 7))"}, {"input": "5 8 10 7\n", "output": "(8) * (10) = 80, left: 80, 5, 7\n(80) - (7) = 73, left: 73, 5\n(7) - (80) = -73, left: -73, 5\n(-73) - (5) = -78, left: -78\n(8) / (10) = 4/5, left: 4/5, 5, 7\n(5) * (7) = 35, left: 35, 4/5\n(10) - (8) = 2, left: 2, 5, 7\n(2) / (7) = 2/7, left: 2/7, 5\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (5 + 7))"}, {"input": "5 8 10 7\n", "output": "(7) / (5) = 7/5, left: 7/5, 8, 10\n(10) - (8) = 2, left: 2, 7/5\n(8) / (7/5) = 40/7, left: 40/7, 10\n(5) * (7) = 35, left: 35, 8, 10\n(35) / (10) = 7/2, left: 7/2, 8\n(8) * (10) = 80, left: 80, 35\n(5) / (7) = 5/7, left: 5/7, 8, 10\n(5) + (7) = 12, left: 12, 8, 10\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((5 + 7) * (10 - 8))"}, {"input": "5 8 10 7\n", "output": "(10) + (7) = 17, left: 17, 5, 8\n(5) + (8) = 13, left: 13, 17\n(7) / (10) = 7/10, left: 7/10, 5, 8\n(7) - (10) = -3, left: -3, 5, 8\n(10) * (7) = 70, left: 70, 5, 8\n(5) - (8) = -3, left: -3, 10, 7\n(7) * (-3) = -21, left: -21, 10\n(10) - (8) = 2, left: 2, 5, 7\n(5) + (7) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (5 + 7))"}, {"input": "2 2 2 10\n", "output": "(10) / (2) = 5, left: 5, 2, 2\n(2) * (5) = 10, left: 10, 2\n(2) / (2) = 1, left: 1, 5\n(2) / (2) = 1, left: 1, 5\n(2) - (10) = -8, left: -8, 2, 2\n(2) * (2) = 4, left: 4, -8\n(-8) / (2) = -4, left: -4, 2\n(2) * (10) = 20, left: 20, 2, 2\n(2) * (2) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((2 * 10) + (2 * 2))"}, {"input": "2 2 2 10\n", "output": "(2) / (10) = 1/5, left: 1/5, 2, 2\n(10) / (2) = 5, left: 5, 2, 2\n(2) - (10) = -8, left: -8, 2, 2\n(2) - (-8) = 10, left: 10, 2\n(2) + (-8) = -6, left: -6, 2\n(10) - (2) = 8, left: 8, 2, 2\n(8) - (2) = 6, left: 6, 2\n(2) * (10) = 20, left: 20, 2, 2\n(2) + (20) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 + (2 * 10)))"}, {"input": "2 2 2 10\n", "output": "(10) - (2) = 8, left: 8, 2, 2\n(8) - (2) = 6, left: 6, 2\n(2) + (10) = 12, left: 12, 2, 2\n(10) / (2) = 5, left: 5, 2, 2\n(5) / (2) = 5/2, left: 5/2, 2\n(2) + (5/2) = 9/2, left: 9/2\n(2) - (10) = -8, left: -8, 2, 2\n(2) * (10) = 20, left: 20, 2, 2\n(2) * (2) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((2 * 10) + (2 * 2))"}, {"input": "2 2 2 10\n", "output": "(2) / (2) = 1, left: 1, 2, 10\n(2) * (1) = 2, left: 2, 10\n(2) / (2) = 1, left: 1, 2, 10\n(2) - (10) = -8, left: -8, 1\n(1) + (-8) = -7, left: -7\n(2) - (1) = 1, left: 1, 10\n(2) * (2) = 4, left: 4, 2, 10\n(10) / (4) = 5/2, left: 5/2, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((2 * 2) + (2 * 10))"}, {"input": "2 2 2 10\n", "output": "(10) / (2) = 5, left: 5, 2, 2\n(5) - (2) = 3, left: 3, 2\n(2) / (5) = 2/5, left: 2/5, 2\n(2) - (2) = 0, left: 0, 5\n(10) - (2) = 8, left: 8, 2, 2\n(2) / (2) = 1, left: 1, 8\n(2) * (2) = 4, left: 4, 8\n(2) * (10) = 20, left: 20, 2, 2\n(2) * (2) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((2 * 10) + (2 * 2))"}, {"input": "2 2 2 10\n", "output": "(2) / (2) = 1, left: 1, 2, 10\n(10) - (1) = 9, left: 9, 2\n(2) / (1) = 2, left: 2, 10\n(2) / (2) = 1, left: 1, 2, 10\n(1) - (10) = -9, left: -9, 2\n(10) / (2) = 5, left: 5, 1\n(2) * (1) = 2, left: 2, 10\n(2) - (1) = 1, left: 1, 10\n(2) - (2) = 0, left: 0, 2, 10\n(2) * (2) = 4, left: 4, 2, 10\n(2) - (4) = -2, left: -2, 10\n(4) / (10) = 2/5, left: 2/5, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((2 * 2) + (2 * 10))"}, {"input": "4 12 4 4\n", "output": "(4) / (12) = 1/3, left: 1/3, 4, 4\n(1/3) / (4) = 1/12, left: 1/12, 4\n(4) * (1/12) = 1/3, left: 1/3\n(4) / (1/3) = 12, left: 12, 4\n(4) + (4) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((4 + 4) / (4 / 12))"}, {"input": "4 12 4 4\n", "output": "(4) / (4) = 1, left: 1, 12, 4\n(12) / (4) = 3, left: 3, 1\n(1) - (3) = -2, left: -2\n(4) - (4) = 0, left: 0, 12, 4\n(12) * (0) = 0, left: 0, 4\n(0) / (12) = 0, left: 0, 4\n(4) * (4) = 16, left: 16, 12, 4\n(12) * (16) = 192, left: 192, 4\n(12) + (16) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((12 + (4 * 4)) - 4)"}, {"input": "4 12 4 4\n", "output": "(4) / (4) = 1, left: 1, 4, 12\n(12) + (1) = 13, left: 13, 4\n(4) + (12) = 16, left: 16, 1\n(1) * (16) = 16, left: 16\n(4) - (4) = 0, left: 0, 4, 12\n(0) / (4) = 0, left: 0, 12\n(4) / (12) = 1/3, left: 1/3, 0\n(4) * (4) = 16, left: 16, 4, 12\n(4) - (12) = -8, left: -8, 16\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((4 * 4) - (4 - 12))"}, {"input": "4 12 4 4\n", "output": "(12) / (4) = 3, left: 3, 4, 4\n(3) / (4) = 3/4, left: 3/4, 4\n(3/4) / (4) = 3/16, left: 3/16\n(4) * (3) = 12, left: 12, 4\n(12) - (4) = 8, left: 8\n(4) - (12) = -8, left: -8\n(12) / (4) = 3, left: 3\n(4) - (4) = 0, left: 0, 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((12 / 4) * (4 + 4))"}, {"input": "4 12 4 4\n", "output": "(12) / (4) = 3, left: 3, 4, 4\n(4) - (4) = 0, left: 0, 3\n(4) * (4) = 16, left: 16, 3\n(3) - (16) = -13, left: -13\n(4) - (4) = 0, left: 0, 3\n(0) / (3) = 0, left: 0\n(4) / (4) = 1, left: 1, 3\n(1) / (3) = 1/3, left: 1/3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((12 / 4) * (4 + 4))"}, {"input": "4 12 4 4\n", "output": "(4) / (12) = 1/3, left: 1/3, 4, 4\n(4) - (1/3) = 11/3, left: 11/3, 4\n(4) + (1/3) = 13/3, left: 13/3, 4\n(1/3) - (4) = -11/3, left: -11/3, 4\n(4) / (1/3) = 12, left: 12, 4\n(4) - (4) = 0, left: 0, 1/3\n(4) / (4) = 1, left: 1, 1/3\n(1/3) - (1) = -2/3, left: -2/3\n(4) + (4) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((4 + 4) / (4 / 12))"}, {"input": "13 13 7 1\n", "output": "(13) + (1) = 14, left: 14, 13, 7\n(13) / (14) = 13/14, left: 13/14, 7\n(13) + (13) = 26, left: 26, 7, 1\n(13) * (13) = 169, left: 169, 7, 1\n(169) - (1) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "13 13 7 1\n", "output": "(13) / (7) = 13/7, left: 13/7, 13, 1\n(13/7) / (1) = 13/7, left: 13/7, 13\n(7) / (13) = 7/13, left: 7/13, 13, 1\n(13) * (13) = 169, left: 169, 7, 1\n(169) - (1) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "13 13 7 1\n", "output": "(13) / (7) = 13/7, left: 13/7, 13, 1\n(7) / (13) = 7/13, left: 7/13, 13, 1\n(13) / (7/13) = 169/7, left: 169/7, 1\n(13) / (1) = 13, left: 13, 13, 7\n(1) - (7) = -6, left: -6, 13, 13\n(-6) / (13) = -6/13, left: -6/13, 13\n(7) + (1) = 8, left: 8, 13, 13\n(13) * (13) = 169, left: 169, 7, 1\n(169) - (1) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "13 13 7 1\n", "output": "(7) / (1) = 7, left: 7, 13, 13\n(13) + (13) = 26, left: 26, 7\n(13) * (1) = 13, left: 13, 13, 7\n(13) - (1) = 12, left: 12, 13, 7\n(1) / (13) = 1/13, left: 1/13, 13, 7\n(13) * (1/13) = 1, left: 1, 7\n(13) - (7) = 6, left: 6, 13, 1\n(13) * (13) = 169, left: 169, 7, 1\n(169) - (1) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "13 13 7 1\n", "output": "(13) + (1) = 14, left: 14, 13, 7\n(13) + (7) = 20, left: 20, 14\n(14) + (20) = 34, left: 34\n(13) / (1) = 13, left: 13, 13, 7\n(1) - (13) = -12, left: -12, 13, 7\n(13) * (1) = 13, left: 13, 13, 7\n(13) - (13) = 0, left: 0, 7, 1\n(13) * (13) = 169, left: 169, 7, 1\n(169) - (1) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "13 13 7 1\n", "output": "(13) / (1) = 13, left: 13, 13, 7\n(13) - (1) = 12, left: 12, 13, 7\n(13) - (7) = 6, left: 6, 13, 1\n(1) - (6) = -5, left: -5, 13\n(13) * (7) = 91, left: 91, 13, 1\n(1) / (91) = 1/91, left: 1/91, 13\n(13) / (7) = 13/7, left: 13/7, 13, 1\n(13) * (13) = 169, left: 169, 7, 1\n(169) - (1) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "13 13 7 1\n", "output": "(7) + (1) = 8, left: 8, 13, 13\n(1) - (7) = -6, left: -6, 13, 13\n(13) / (-6) = -13/6, left: -13/6, 13\n(7) / (1) = 7, left: 7, 13, 13\n(1) / (7) = 1/7, left: 1/7, 13, 13\n(13) / (13) = 1, left: 1, 7, 1\n(1) * (1) = 1, left: 1, 7\n(13) * (13) = 169, left: 169, 7, 1\n(169) - (1) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "9 9 12 11\n", "output": "(9) / (12) = 3/4, left: 3/4, 9, 11\n(11) - (9) = 2, left: 2, 3/4\n(12) - (9) = 3, left: 3, 9, 11\n(9) - (3) = 6, left: 6, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (12 - 9)) - 9)"}, {"input": "9 9 12 11\n", "output": "(12) - (9) = 3, left: 3, 9, 11\n(11) - (9) = 2, left: 2, 3\n(9) * (11) = 99, left: 99, 3\n(3) + (99) = 102, left: 102\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (12 - 9)) - 9)"}, {"input": "9 9 12 11\n", "output": "(12) - (9) = 3, left: 3, 9, 11\n(9) / (11) = 9/11, left: 9/11, 3\n(3) - (9/11) = 24/11, left: 24/11\n(11) - (9) = 2, left: 2, 3\n(3) + (2) = 5, left: 5\n(9) * (11) = 99, left: 99, 3\n(9) - (11) = -2, left: -2, 3\n(3) / (11) = 3/11, left: 3/11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (12 - 9)) - 9)"}, {"input": "9 9 12 11\n", "output": "(9) * (9) = 81, left: 81, 12, 11\n(11) / (81) = 11/81, left: 11/81, 12\n(11) - (12) = -1, left: -1, 81\n(81) * (-1) = -81, left: -81\n(9) + (9) = 18, left: 18, 12, 11\n(11) / (12) = 11/12, left: 11/12, 18\n(12) / (11) = 12/11, left: 12/11, 18\n(9) / (9) = 1, left: 1, 12, 11\n(12) + (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (12 + (9 / 9)))"}, {"input": "9 9 12 11\n", "output": "(9) - (12) = -3, left: -3, 9, 11\n(9) + (11) = 20, left: 20, -3\n(-3) * (20) = -60, left: -60\n(12) - (9) = 3, left: 3, 9, 11\n(9) / (3) = 3, left: 3, 11\n(3) / (9) = 1/3, left: 1/3, 11\n(9) - (3) = 6, left: 6, 11\n(9) + (3) = 12, left: 12, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (12 - 9)) - 9)"}, {"input": "9 9 12 11\n", "output": "(9) / (12) = 3/4, left: 3/4, 9, 11\n(3/4) / (11) = 3/44, left: 3/44, 9\n(9) - (3/4) = 33/4, left: 33/4, 11\n(3/4) / (9) = 1/12, left: 1/12, 11\n(12) / (9) = 4/3, left: 4/3, 9, 11\n(12) - (9) = 3, left: 3, 9, 11\n(9) * (3) = 27, left: 27, 11\n(27) - (11) = 16, left: 16\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (12 - 9)) - 9)"}, {"input": "9 9 12 11\n", "output": "(9) - (12) = -3, left: -3, 9, 11\n(9) + (12) = 21, left: 21, 9, 11\n(9) - (21) = -12, left: -12, 11\n(12) / (9) = 4/3, left: 4/3, 9, 11\n(4/3) - (11) = -29/3, left: -29/3, 9\n(4/3) - (9) = -23/3, left: -23/3, 11\n(9) * (4/3) = 12, left: 12, 11\n(12) - (9) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (12 - 9)) - 9)"}, {"input": "6 8 3 8\n", "output": "(3) * (8) = 24, left: 24, 6, 8\n(8) - (6) = 2, left: 2, 24\n(8) / (6) = 4/3, left: 4/3, 24\n(24) * (4/3) = 32, left: 32\n(6) * (8) = 48, left: 48, 24\n(48) - (24) = 24, left: 24\nreach 24! expression: ((6 * 8) - (3 * 8))"}, {"input": "6 8 3 8\n", "output": "(3) * (8) = 24, left: 24, 6, 8\n(8) - (6) = 2, left: 2, 24\n(24) - (2) = 22, left: 22\n(8) / (6) = 4/3, left: 4/3, 24\n(24) * (4/3) = 32, left: 32\n(4/3) / (24) = 1/18, left: 1/18\n(6) * (8) = 48, left: 48, 24\n(24) - (48) = -24, left: -24\n(24) * (48) = 1152, left: 1152\n(48) - (24) = 24, left: 24\nreach 24! expression: ((6 * 8) - (3 * 8))"}, {"input": "6 8 3 8\n", "output": "(8) - (6) = 2, left: 2, 3, 8\n(6) + (8) = 14, left: 14, 3, 8\n(3) / (14) = 3/14, left: 3/14, 8\n(8) / (3/14) = 112/3, left: 112/3\n(8) / (6) = 4/3, left: 4/3, 3, 8\n(6) - (8) = -2, left: -2, 3, 8\n(-2) - (3) = -5, left: -5, 8\n(6) * (8) = 48, left: 48, 3, 8\n(3) * (8) = 24, left: 24, 48\n(48) - (24) = 24, left: 24\nreach 24! expression: ((6 * 8) - (3 * 8))"}, {"input": "6 8 3 8\n", "output": "(8) - (3) = 5, left: 5, 6, 8\n(8) + (5) = 13, left: 13, 6\n(8) * (5) = 40, left: 40, 6\n(6) * (5) = 30, left: 30, 8\n(8) * (30) = 240, left: 240\n(6) - (5) = 1, left: 1, 8\n(8) / (3) = 8/3, left: 8/3, 6, 8\n(8/3) / (6) = 4/9, left: 4/9, 8\n(6) * (8/3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (6 * (8 / 3)))"}, {"input": "6 8 3 8\n", "output": "(3) * (8) = 24, left: 24, 6, 8\n(6) - (24) = -18, left: -18, 8\n(6) / (24) = 1/4, left: 1/4, 8\n(8) / (1/4) = 32, left: 32\n(8) + (24) = 32, left: 32, 6\n(24) / (8) = 3, left: 3, 6\n(24) - (8) = 16, left: 16, 6\n(6) * (16) = 96, left: 96\n(6) * (8) = 48, left: 48, 24\n(48) - (24) = 24, left: 24\nreach 24! expression: ((6 * 8) - (3 * 8))"}, {"input": "6 8 3 8\n", "output": "(8) - (6) = 2, left: 2, 3, 8\n(2) / (3) = 2/3, left: 2/3, 8\n(3) + (2) = 5, left: 5, 8\n(3) + (8) = 11, left: 11, 2\n(11) / (2) = 11/2, left: 11/2\n(6) * (8) = 48, left: 48, 3, 8\n(8) / (48) = 1/6, left: 1/6, 3\n(48) / (8) = 6, left: 6, 3\n(48) / (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((6 * 8) / 3))"}, {"input": "6 8 3 8\n", "output": "(8) - (6) = 2, left: 2, 3, 8\n(6) + (8) = 14, left: 14, 3, 8\n(3) / (8) = 3/8, left: 3/8, 14\n(8) + (14) = 22, left: 22, 3\n(8) / (6) = 4/3, left: 4/3, 3, 8\n(8) + (4/3) = 28/3, left: 28/3, 3\n(3) + (28/3) = 37/3, left: 37/3\n(6) - (8) = -2, left: -2, 3, 8\n(8) - (3) = 5, left: 5, -2\n(3) - (-2) = 5, left: 5, 8\n(8) - (5) = 3, left: 3\n(6) * (8) = 48, left: 48, 3, 8\n(3) * (8) = 24, left: 24, 48\n(48) - (24) = 24, left: 24\nreach 24! expression: ((6 * 8) - (3 * 8))"}, {"input": "6 8 3 8\n", "output": "(8) - (6) = 2, left: 2, 3, 8\n(3) - (2) = 1, left: 1, 8\n(3) + (2) = 5, left: 5, 8\n(5) / (8) = 5/8, left: 5/8\n(8) - (2) = 6, left: 6, 3\n(3) / (6) = 1/2, left: 1/2\n(8) * (2) = 16, left: 16, 3\n(6) * (8) = 48, left: 48, 3, 8\n(8) + (48) = 56, left: 56, 3\n(56) / (3) = 56/3, left: 56/3\n(48) / (8) = 6, left: 6, 3\n(6) / (3) = 2, left: 2\n(48) / (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + ((6 * 8) / 3))"}, {"input": "4 10 2 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 4, 2\n(4) / (3/5) = 20/3, left: 20/3, 2\n(3/5) - (4) = -17/5, left: -17/5, 2\n(10) - (6) = 4, left: 4, 4, 2\n(4) + (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((10 - 6) * (4 + 2))"}, {"input": "4 10 2 6\n", "output": "(10) + (6) = 16, left: 16, 4, 2\n(4) / (16) = 1/4, left: 1/4, 2\n(4) + (16) = 20, left: 20, 2\n(2) - (20) = -18, left: -18\n(16) - (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((10 + 6) - 4))"}, {"input": "4 10 2 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 4, 2\n(3/5) - (4) = -17/5, left: -17/5, 2\n(4) * (3/5) = 12/5, left: 12/5, 2\n(10) * (6) = 60, left: 60, 4, 2\n(2) * (60) = 120, left: 120, 4\n(10) - (6) = 4, left: 4, 4, 2\n(4) * (4) = 16, left: 16, 2\n(2) + (16) = 18, left: 18\n(4) + (2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((10 - 6) * (4 + 2))"}, {"input": "4 10 2 6\n", "output": "(6) / (2) = 3, left: 3, 4, 10\n(4) - (3) = 1, left: 1, 10\n(10) / (3) = 10/3, left: 10/3, 4\n(2) * (6) = 12, left: 12, 4, 10\n(2) / (6) = 1/3, left: 1/3, 4, 10\n(4) * (1/3) = 4/3, left: 4/3, 10\n(10) + (4/3) = 34/3, left: 34/3\n(2) - (6) = -4, left: -4, 4, 10\n(10) + (-4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (10 + (2 - 6)))"}, {"input": "4 10 2 6\n", "output": "(4) + (2) = 6, left: 6, 10, 6\n(6) / (6) = 1, left: 1, 10\n(6) - (6) = 0, left: 0, 10\n(6) * (6) = 36, left: 36, 10\n(6) - (10) = -4, left: -4, 6\n(10) + (6) = 16, left: 16, 6\n(10) * (6) = 60, left: 60, 6\n(60) / (6) = 10, left: 10\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (10 - (4 + 2)))"}, {"input": "4 10 2 6\n", "output": "(10) + (6) = 16, left: 16, 4, 2\n(4) / (16) = 1/4, left: 1/4, 2\n(2) - (1/4) = 7/4, left: 7/4\n(16) / (4) = 4, left: 4, 2\n(2) - (4) = -2, left: -2\n(4) + (16) = 20, left: 20, 2\n(2) / (20) = 1/10, left: 1/10\n(4) * (16) = 64, left: 64, 2\n(16) - (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((10 + 6) - 4))"}, {"input": "4 10 2 6\n", "output": "(2) - (4) = -2, left: -2, 10, 6\n(10) * (6) = 60, left: 60, -2\n(10) - (-2) = 12, left: 12, 6\n(10) + (-2) = 8, left: 8, 6\n(6) - (-2) = 8, left: 8, 10\n(4) / (2) = 2, left: 2, 10, 6\n(10) + (6) = 16, left: 16, 2\n(4) + (2) = 6, left: 6, 10, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((4 + 2) * (10 - 6))"}, {"input": "4 8 10 5\n", "output": "(8) - (4) = 4, left: 4, 10, 5\n(4) / (5) = 4/5, left: 4/5, 10\n(4/5) - (10) = -46/5, left: -46/5\n(4) + (8) = 12, left: 12, 10, 5\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (4 + 8)) / 5)"}, {"input": "4 8 10 5\n", "output": "(4) / (8) = 1/2, left: 1/2, 10, 5\n(5) / (1/2) = 10, left: 10, 10\n(10) + (1/2) = 21/2, left: 21/2, 5\n(8) / (4) = 2, left: 2, 10, 5\n(10) - (5) = 5, left: 5, 2\n(4) - (8) = -4, left: -4, 10, 5\n(-4) - (10) = -14, left: -14, 5\n(4) + (8) = 12, left: 12, 10, 5\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (4 + 8)) / 5)"}, {"input": "4 8 10 5\n", "output": "(8) / (4) = 2, left: 2, 10, 5\n(10) + (2) = 12, left: 12, 5\n(8) - (4) = 4, left: 4, 10, 5\n(10) / (5) = 2, left: 2, 4\n(4) - (8) = -4, left: -4, 10, 5\n(4) / (8) = 1/2, left: 1/2, 10, 5\n(10) - (1/2) = 19/2, left: 19/2, 5\n(4) + (8) = 12, left: 12, 10, 5\n(10) / (5) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((4 + 8) * (10 / 5))"}, {"input": "4 8 10 5\n", "output": "(4) - (8) = -4, left: -4, 10, 5\n(5) - (10) = -5, left: -5, -4\n(-4) - (-5) = 1, left: 1\n(10) / (5) = 2, left: 2, -4\n(-4) / (2) = -2, left: -2\n(10) - (5) = 5, left: 5, -4\n(4) + (8) = 12, left: 12, 10, 5\n(10) + (12) = 22, left: 22, 5\n(10) * (12) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((10 * (4 + 8)) / 5)"}, {"input": "4 8 10 5\n", "output": "(8) - (4) = 4, left: 4, 10, 5\n(10) + (4) = 14, left: 14, 5\n(4) * (8) = 32, left: 32, 10, 5\n(5) * (32) = 160, left: 160, 10\n(32) / (5) = 32/5, left: 32/5, 10\n(4) / (8) = 1/2, left: 1/2, 10, 5\n(10) / (1/2) = 20, left: 20, 5\n(4) + (8) = 12, left: 12, 10, 5\n(5) / (10) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((4 + 8) / (5 / 10))"}, {"input": "6 11 1 2\n", "output": "(6) / (1) = 6, left: 6, 11, 2\n(6) / (2) = 3, left: 3, 11\n(6) * (1) = 6, left: 6, 11, 2\n(1) - (6) = -5, left: -5, 11, 2\n(1) / (6) = 1/6, left: 1/6, 11, 2\n(2) / (11) = 2/11, left: 2/11, 1/6\n(6) - (2) = 4, left: 4, 11, 1\n(6) * (2) = 12, left: 12, 11, 1\n(11) + (12) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (11 + (6 * 2)))"}, {"input": "6 11 1 2\n", "output": "(6) - (11) = -5, left: -5, 1, 2\n(6) * (11) = 66, left: 66, 1, 2\n(2) / (1) = 2, left: 2, 66\n(6) / (11) = 6/11, left: 6/11, 1, 2\n(1) / (6/11) = 11/6, left: 11/6, 2\n(6) + (11) = 17, left: 17, 1, 2\n(6) - (2) = 4, left: 4, 11, 1\n(6) * (2) = 12, left: 12, 11, 1\n(11) + (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((6 * 2) + (11 + 1))"}, {"input": "6 11 1 2\n", "output": "(1) - (11) = -10, left: -10, 6, 2\n(2) / (6) = 1/3, left: 1/3, -10\n(6) - (2) = 4, left: 4, -10\n(11) * (1) = 11, left: 11, 6, 2\n(11) + (1) = 12, left: 12, 6, 2\n(6) - (12) = -6, left: -6, 2\n(6) / (12) = 1/2, left: 1/2, 2\n(2) + (12) = 14, left: 14, 6\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((11 + 1) + (6 * 2))"}, {"input": "6 11 1 2\n", "output": "(1) / (2) = 1/2, left: 1/2, 6, 11\n(6) / (11) = 6/11, left: 6/11, 1/2\n(2) / (1) = 2, left: 2, 6, 11\n(6) + (1) = 7, left: 7, 11, 2\n(1) - (6) = -5, left: -5, 11, 2\n(6) / (1) = 6, left: 6, 11, 2\n(11) * (1) = 11, left: 11, 6, 2\n(11) + (1) = 12, left: 12, 6, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((11 + 1) + (6 * 2))"}, {"input": "6 11 1 2\n", "output": "(11) + (2) = 13, left: 13, 6, 1\n(6) / (1) = 6, left: 6, 11, 2\n(11) / (6) = 11/6, left: 11/6, 1, 2\n(2) / (1) = 2, left: 2, 11/6\n(11) - (6) = 5, left: 5, 1, 2\n(6) * (11) = 66, left: 66, 1, 2\n(1) / (11) = 1/11, left: 1/11, 6, 2\n(11) + (1) = 12, left: 12, 6, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((11 + 1) + (6 * 2))"}, {"input": "6 11 1 2\n", "output": "(6) + (1) = 7, left: 7, 11, 2\n(6) / (1) = 6, left: 6, 11, 2\n(11) + (2) = 13, left: 13, 6\n(6) - (1) = 5, left: 5, 11, 2\n(5) - (11) = -6, left: -6, 2\n(1) - (6) = -5, left: -5, 11, 2\n(1) / (6) = 1/6, left: 1/6, 11, 2\n(6) - (2) = 4, left: 4, 11, 1\n(11) / (1) = 11, left: 11, 4\n(4) * (11) = 44, left: 44\n(1) - (4) = -3, left: -3, 11\n(6) * (2) = 12, left: 12, 11, 1\n(11) + (12) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (11 + (6 * 2)))"}, {"input": "11 13 2 6\n", "output": "(11) / (2) = 11/2, left: 11/2, 13, 6\n(13) * (6) = 78, left: 78, 11/2\n(6) - (13) = -7, left: -7, 11/2\n(2) - (11) = -9, left: -9, 13, 6\n(13) + (-9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 + (2 - 11)))"}, {"input": "11 13 2 6\n", "output": "(11) - (2) = 9, left: 9, 13, 6\n(6) / (9) = 2/3, left: 2/3, 13\n(13) + (6) = 19, left: 19, 9\n(13) - (6) = 7, left: 7, 9\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (11 - 2)))"}, {"input": "11 13 2 6\n", "output": "(11) / (2) = 11/2, left: 11/2, 13, 6\n(6) - (11/2) = 1/2, left: 1/2, 13\n(2) / (11) = 2/11, left: 2/11, 13, 6\n(13) * (2/11) = 26/11, left: 26/11, 6\n(6) - (13) = -7, left: -7, 2/11\n(2) - (11) = -9, left: -9, 13, 6\n(6) - (13) = -7, left: -7, -9\n(13) * (6) = 78, left: 78, -9\n(13) + (-9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 + (2 - 11)))"}, {"input": "11 13 2 6\n", "output": "(13) + (6) = 19, left: 19, 11, 2\n(6) - (13) = -7, left: -7, 11, 2\n(11) + (6) = 17, left: 17, 13, 2\n(13) + (2) = 15, left: 15, 17\n(11) * (6) = 66, left: 66, 13, 2\n(6) / (11) = 6/11, left: 6/11, 13, 2\n(2) - (13) = -11, left: -11, 11, 6\n(13) + (2) = 15, left: 15, 11, 6\n(15) - (11) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 + 2) - 11))"}, {"input": "11 13 2 6\n", "output": "(11) - (2) = 9, left: 9, 13, 6\n(6) + (9) = 15, left: 15, 13\n(13) - (15) = -2, left: -2\n(6) - (13) = -7, left: -7, 9\n(13) / (9) = 13/9, left: 13/9, 6\n(6) * (13/9) = 26/3, left: 26/3\n(6) / (13/9) = 54/13, left: 54/13\n(9) / (13) = 9/13, left: 9/13, 6\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (11 - 2)))"}, {"input": "11 13 2 6\n", "output": "(11) * (2) = 22, left: 22, 13, 6\n(6) * (22) = 132, left: 132, 13\n(13) - (6) = 7, left: 7, 22\n(11) + (2) = 13, left: 13, 13, 6\n(6) / (13) = 6/13, left: 6/13, 13\n(6) * (13) = 78, left: 78, 13\n(2) / (11) = 2/11, left: 2/11, 13, 6\n(2) - (11) = -9, left: -9, 13, 6\n(13) + (-9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 + (2 - 11)))"}, {"input": "11 13 2 6\n", "output": "(11) * (2) = 22, left: 22, 13, 6\n(22) - (6) = 16, left: 16, 13\n(13) * (6) = 78, left: 78, 22\n(22) / (13) = 22/13, left: 22/13, 6\n(2) - (11) = -9, left: -9, 13, 6\n(-9) / (13) = -9/13, left: -9/13, 6\n(6) - (-9/13) = 87/13, left: 87/13\n(13) - (-9) = 22, left: 22, 6\n(13) + (-9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 + (2 - 11)))"}, {"input": "12 8 5 12\n", "output": "(12) - (8) = 4, left: 4, 5, 12\n(12) - (8) = 4, left: 4, 12, 5\n(5) - (12) = -7, left: -7, 12, 8\n(12) + (5) = 17, left: 17, 8, 12\n(5) / (12) = 5/12, left: 5/12, 8, 12\n(5) - (12) = -7, left: -7, 8, 12\n(5) / (8) = 5/8, left: 5/8, 12, 12\n(8) - (5) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "12 8 5 12\n", "output": "(5) / (12) = 5/12, left: 5/12, 8, 12\n(5) - (12) = -7, left: -7, 8, 12\n(12) / (8) = 3/2, left: 3/2, 12, 5\n(8) - (12) = -4, left: -4, 12, 5\n(8) * (12) = 96, left: 96, 12, 5\n(5) - (12) = -7, left: -7, 12, 8\n(-7) / (8) = -7/8, left: -7/8, 12\n(8) - (5) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "12 8 5 12\n", "output": "(12) - (5) = 7, left: 7, 8, 12\n(12) * (8) = 96, left: 96, 5, 12\n(12) / (8) = 3/2, left: 3/2, 5, 12\n(5) * (12) = 60, left: 60, 3/2\n(12) / (5) = 12/5, left: 12/5, 12, 8\n(5) + (12) = 17, left: 17, 12, 8\n(5) * (12) = 60, left: 60, 12, 8\n(8) - (5) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "12 8 5 12\n", "output": "(12) - (5) = 7, left: 7, 8, 12\n(12) + (5) = 17, left: 17, 8, 12\n(12) - (8) = 4, left: 4, 17\n(8) - (17) = -9, left: -9, 12\n(8) + (17) = 25, left: 25, 12\n(12) / (5) = 12/5, left: 12/5, 8, 12\n(5) / (12) = 5/12, left: 5/12, 8, 12\n(8) - (5) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "12 8 5 12\n", "output": "(12) - (5) = 7, left: 7, 8, 12\n(12) / (8) = 3/2, left: 3/2, 12, 5\n(8) / (12) = 2/3, left: 2/3, 12, 5\n(8) * (5) = 40, left: 40, 12, 12\n(12) + (12) = 24, left: 24, 40\n(8) + (5) = 13, left: 13, 12, 12\n(12) - (13) = -1, left: -1, 12\n(8) - (5) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "13 7 9 13\n", "output": "(13) / (13) = 1, left: 1, 7, 9\n(7) / (9) = 7/9, left: 7/9, 1\n(9) / (7) = 9/7, left: 9/7, 1\n(13) + (13) = 26, left: 26, 7, 9\n(26) - (9) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((13 + 13) - 9))"}, {"input": "13 7 9 13\n", "output": "(9) - (7) = 2, left: 2, 13, 13\n(13) / (13) = 1, left: 1, 2\n(1) - (2) = -1, left: -1\n(13) - (13) = 0, left: 0, 2\n(13) + (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + 13) - (9 - 7))"}, {"input": "13 7 9 13\n", "output": "(13) - (9) = 4, left: 4, 7, 13\n(7) / (4) = 7/4, left: 7/4, 13\n(13) * (7/4) = 91/4, left: 91/4\n(7) * (4) = 28, left: 28, 13\n(7) + (4) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (7 + (13 - 9)))"}, {"input": "13 7 9 13\n", "output": "(13) / (9) = 13/9, left: 13/9, 7, 13\n(13) + (13/9) = 130/9, left: 130/9, 7\n(13) - (9) = 4, left: 4, 7, 13\n(13) - (4) = 9, left: 9, 7\n(13) + (4) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (13 + (13 - 9)))"}, {"input": "13 7 9 13\n", "output": "(7) * (9) = 63, left: 63, 13, 13\n(13) / (63) = 13/63, left: 13/63, 13\n(63) - (13) = 50, left: 50, 13\n(7) - (9) = -2, left: -2, 13, 13\n(13) + (13) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((7 - 9) + (13 + 13))"}, {"input": "13 7 9 13\n", "output": "(7) * (9) = 63, left: 63, 13, 13\n(13) - (13) = 0, left: 0, 63\n(63) / (13) = 63/13, left: 63/13, 13\n(13) * (63/13) = 63, left: 63\n(63) - (13) = 50, left: 50, 13\n(13) - (63) = -50, left: -50, 13\n(13) / (63) = 13/63, left: 13/63, 13\n(7) - (9) = -2, left: -2, 13, 13\n(13) + (13) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((7 - 9) + (13 + 13))"}, {"input": "13 7 9 13\n", "output": "(13) - (9) = 4, left: 4, 7, 13\n(7) / (4) = 7/4, left: 7/4, 13\n(7) * (4) = 28, left: 28, 13\n(13) - (28) = -15, left: -15\n(28) - (13) = 15, left: 15\n(7) - (4) = 3, left: 3, 13\n(13) * (3) = 39, left: 39\n(3) - (13) = -10, left: -10\n(7) + (4) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (7 + (13 - 9)))"}, {"input": "13 7 9 13\n", "output": "(13) / (13) = 1, left: 1, 7, 9\n(9) + (1) = 10, left: 10, 7\n(7) * (10) = 70, left: 70\n(13) / (13) = 1, left: 1, 7, 9\n(7) - (1) = 6, left: 6, 9\n(13) - (13) = 0, left: 0, 7, 9\n(7) - (9) = -2, left: -2, 0\n(13) + (13) = 26, left: 26, 7, 9\n(26) - (9) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + ((13 + 13) - 9))"}, {"input": "13 7 9 13\n", "output": "(13) / (9) = 13/9, left: 13/9, 7, 13\n(7) - (13) = -6, left: -6, 13/9\n(13) - (7) = 6, left: 6, 13/9\n(6) - (13/9) = 41/9, left: 41/9\n(13) / (13/9) = 9, left: 9, 7\n(13) - (9) = 4, left: 4, 7, 13\n(13) - (4) = 9, left: 9, 7\n(7) + (9) = 16, left: 16\n(13) + (4) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (13 + (13 - 9)))"}, {"input": "13 7 9 13\n", "output": "(9) - (7) = 2, left: 2, 13, 13\n(13) / (13) = 1, left: 1, 2\n(2) - (1) = 1, left: 1\n(13) / (13) = 1, left: 1, 2\n(2) / (1) = 2, left: 2\n(13) - (13) = 0, left: 0, 2\n(0) - (2) = -2, left: -2\n(2) + (0) = 2, left: 2\n(13) + (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 + 13) - (9 - 7))"}, {"input": "12 13 12 12\n", "output": "(13) / (12) = 13/12, left: 13/12, 12, 12\n(13) * (12) = 156, left: 156, 12, 12\n(13) + (12) = 25, left: 25, 12, 12\n(12) - (12) = 0, left: 0, 25\n(12) / (12) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (12 / 12))"}, {"input": "12 13 12 12\n", "output": "(12) / (12) = 1, left: 1, 13, 12\n(12) / (13) = 12/13, left: 12/13, 1\n(13) * (12) = 156, left: 156, 1\n(13) - (12) = 1, left: 1, 1\n(13) + (12) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (12 / 12))"}, {"input": "12 13 12 12\n", "output": "(12) - (12) = 0, left: 0, 13, 12\n(13) / (12) = 13/12, left: 13/12, 0\n(12) * (12) = 144, left: 144, 13, 12\n(12) / (12) = 1, left: 1, 13, 12\n(1) - (12) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((12 / 12) - 12))"}, {"input": "12 13 12 12\n", "output": "(13) + (12) = 25, left: 25, 12, 12\n(12) / (12) = 1, left: 1, 25\n(1) / (25) = 1/25, left: 1/25\n(25) + (1) = 26, left: 26\n(25) * (1) = 25, left: 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (12 / 12))"}, {"input": "12 13 12 12\n", "output": "(12) - (12) = 0, left: 0, 12, 13\n(12) * (13) = 156, left: 156, 0\n(0) + (156) = 156, left: 156\n(12) / (12) = 1, left: 1, 12, 13\n(1) - (13) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - ((12 / 12) - 13))"}, {"input": "12 13 12 12\n", "output": "(12) - (12) = 0, left: 0, 12, 13\n(12) - (13) = -1, left: -1, 0\n(12) * (13) = 156, left: 156, 0\n(13) + (0) = 13, left: 13, 12\n(13) * (0) = 0, left: 0, 12\n(12) * (0) = 0, left: 0, 13\n(0) - (13) = -13, left: -13\n(12) / (12) = 1, left: 1, 12, 13\n(1) - (13) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - ((12 / 12) - 13))"}, {"input": "12 13 12 12\n", "output": "(13) / (12) = 13/12, left: 13/12, 12, 12\n(12) * (12) = 144, left: 144, 13/12\n(13/12) + (144) = 1741/12, left: 1741/12\n(12) / (12) = 1, left: 1, 13/12\n(13) + (12) = 25, left: 25, 12, 12\n(25) / (12) = 25/12, left: 25/12, 12\n(12) / (25/12) = 144/25, left: 144/25\n(12) / (25) = 12/25, left: 12/25, 12\n(12) / (12) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (12 / 12))"}, {"input": "12 13 12 12\n", "output": "(12) - (12) = 0, left: 0, 13, 12\n(0) / (13) = 0, left: 0, 12\n(0) - (13) = -13, left: -13, 12\n(12) * (0) = 0, left: 0, 13\n(13) + (0) = 13, left: 13\n(12) * (12) = 144, left: 144, 13, 12\n(144) / (13) = 144/13, left: 144/13, 12\n(12) / (12) = 1, left: 1, 13, 12\n(1) - (12) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((12 / 12) - 12))"}, {"input": "12 13 12 12\n", "output": "(13) + (12) = 25, left: 25, 12, 12\n(12) / (12) = 1, left: 1, 25\n(1) / (25) = 1/25, left: 1/25\n(25) + (1) = 26, left: 26\n(25) * (1) = 25, left: 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (12 / 12))"}, {"input": "12 13 12 12\n", "output": "(12) / (12) = 1, left: 1, 13, 12\n(13) / (12) = 13/12, left: 13/12, 1\n(1) - (13/12) = -1/12, left: -1/12\n(12) / (13) = 12/13, left: 12/13, 1\n(13) * (12) = 156, left: 156, 1\n(1) * (156) = 156, left: 156\n(13) - (12) = 1, left: 1, 1\n(13) + (12) = 25, left: 25, 1\n(1) + (25) = 26, left: 26\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (12 / 12))"}, {"input": "12 13 12 12\n", "output": "(13) + (12) = 25, left: 25, 12, 12\n(12) / (12) = 1, left: 1, 25\n(1) / (25) = 1/25, left: 1/25\n(25) + (1) = 26, left: 26\n(25) * (1) = 25, left: 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (12 / 12))"}, {"input": "12 13 12 12\n", "output": "(13) + (12) = 25, left: 25, 12, 12\n(12) / (12) = 1, left: 1, 25\n(1) / (25) = 1/25, left: 1/25\n(25) + (1) = 26, left: 26\n(25) * (1) = 25, left: 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (12 / 12))"}, {"input": "8 2 8 8\n", "output": "(8) - (8) = 0, left: 0, 2, 8\n(2) * (8) = 16, left: 16, 0\n(8) - (8) = 0, left: 0, 2, 8\n(8) + (8) = 16, left: 16, 2, 8\n(16) / (8) = 2, left: 2, 2\n(8) * (16) = 128, left: 128, 2\n(2) - (16) = -14, left: -14, 8\n(16) - (2) = 14, left: 14, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (8 + 8)) - 8)"}, {"input": "8 2 8 8\n", "output": "(8) - (8) = 0, left: 0, 8, 2\n(2) - (0) = 2, left: 2, 8\n(0) - (2) = -2, left: -2, 8\n(0) / (8) = 0, left: 0, 2\n(8) - (0) = 8, left: 8, 2\n(2) - (8) = -6, left: -6\n(2) / (8) = 1/4, left: 1/4, 0\n(8) / (8) = 1, left: 1, 8, 2\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (8 / 8)))"}, {"input": "8 2 8 8\n", "output": "(8) - (8) = 0, left: 0, 2, 8\n(8) * (0) = 0, left: 0, 2\n(2) * (0) = 0, left: 0\n(8) - (8) = 0, left: 0, 2, 8\n(2) * (0) = 0, left: 0, 8\n(8) - (0) = 8, left: 8\n(0) - (8) = -8, left: -8, 2\n(8) / (8) = 1, left: 1, 2, 8\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (8 / 8)))"}, {"input": "8 2 8 8\n", "output": "(2) * (8) = 16, left: 16, 8, 8\n(16) - (8) = 8, left: 8, 8\n(8) / (16) = 1/2, left: 1/2, 8\n(8) - (8) = 0, left: 0, 16\n(8) * (8) = 64, left: 64, 16\n(8) / (16) = 1/2, left: 1/2, 8\n(8) + (1/2) = 17/2, left: 17/2\n(8) / (2) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (8 / 2)) - 8)"}, {"input": "8 2 8 8\n", "output": "(2) - (8) = -6, left: -6, 8, 8\n(-6) - (8) = -14, left: -14, 8\n(8) + (-14) = -6, left: -6\n(8) + (2) = 10, left: 10, 8, 8\n(10) / (8) = 5/4, left: 5/4, 8\n(8) * (2) = 16, left: 16, 8, 8\n(8) / (16) = 1/2, left: 1/2, 8\n(8) / (2) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (8 / 2)) - 8)"}, {"input": "8 2 8 8\n", "output": "(8) - (8) = 0, left: 0, 8, 2\n(0) - (2) = -2, left: -2, 8\n(8) - (-2) = 10, left: 10\n(0) - (8) = -8, left: -8, 2\n(0) / (8) = 0, left: 0, 2\n(2) * (0) = 0, left: 0\n(8) - (0) = 8, left: 8, 2\n(8) * (2) = 16, left: 16, 0\n(8) - (2) = 6, left: 6, 0\n(0) + (6) = 6, left: 6\n(8) / (8) = 1, left: 1, 8, 2\n(8) * (2) = 16, left: 16, 1\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (8 / 8)))"}, {"input": "8 2 8 8\n", "output": "(8) - (8) = 0, left: 0, 2, 8\n(8) + (0) = 8, left: 8, 2\n(8) - (8) = 0, left: 0, 2, 8\n(2) + (8) = 10, left: 10, 0\n(0) / (8) = 0, left: 0, 2\n(0) - (8) = -8, left: -8, 2\n(-8) - (2) = -10, left: -10\n(8) + (8) = 16, left: 16, 2, 8\n(8) - (16) = -8, left: -8, 2\n(2) + (8) = 10, left: 10, 16\n(16) - (2) = 14, left: 14, 8\n(2) / (16) = 1/8, left: 1/8, 8\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (8 + 8)) - 8)"}, {"input": "8 2 8 8\n", "output": "(8) - (8) = 0, left: 0, 2, 8\n(2) - (0) = 2, left: 2, 8\n(8) - (2) = 6, left: 6\n(8) - (8) = 0, left: 0, 2, 8\n(8) - (0) = 8, left: 8, 2\n(2) + (8) = 10, left: 10\n(2) - (8) = -6, left: -6, 0\n(8) / (8) = 1, left: 1, 2, 8\n(8) * (1) = 8, left: 8, 2\n(8) / (1) = 8, left: 8, 2\n(8) + (1) = 9, left: 9, 2\n(2) / (9) = 2/9, left: 2/9\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 + (8 / 8)))"}, {"input": "8 2 8 8\n", "output": "(8) - (2) = 6, left: 6, 8, 8\n(8) / (6) = 4/3, left: 4/3, 8\n(8) * (4/3) = 32/3, left: 32/3\n(2) - (8) = -6, left: -6, 8, 8\n(8) + (8) = 16, left: 16, -6\n(8) * (-6) = -48, left: -48, 8\n(8) + (2) = 10, left: 10, 8, 8\n(8) * (2) = 16, left: 16, 8, 8\n(8) + (8) = 16, left: 16, 16\n(8) / (8) = 1, left: 1, 16\n(8) * (8) = 64, left: 64, 16\n(8) / (2) = 4, left: 4, 8, 8\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (8 / 2)) - 8)"}, {"input": "4 8 2 9\n", "output": "(4) * (8) = 32, left: 32, 2, 9\n(8) - (4) = 4, left: 4, 2, 9\n(4) - (2) = 2, left: 2, 9\n(4) * (9) = 36, left: 36, 8, 2\n(4) - (9) = -5, left: -5, 8, 2\n(8) * (2) = 16, left: 16, -5\n(-5) - (2) = -7, left: -7, 8\n(9) - (4) = 5, left: 5, 8, 2\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 4) - 2))"}, {"input": "4 8 2 9\n", "output": "(8) / (4) = 2, left: 2, 2, 9\n(2) - (9) = -7, left: -7, 2\n(4) / (8) = 1/2, left: 1/2, 2, 9\n(8) + (9) = 17, left: 17, 4, 2\n(2) / (17) = 2/17, left: 2/17, 4\n(8) - (9) = -1, left: -1, 4, 2\n(8) / (9) = 8/9, left: 8/9, 4, 2\n(4) + (2) = 6, left: 6, 8, 9\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 - (4 + 2)))"}, {"input": "4 8 2 9\n", "output": "(2) - (8) = -6, left: -6, 4, 9\n(9) * (-6) = -54, left: -54, 4\n(8) + (2) = 10, left: 10, 4, 9\n(2) / (8) = 1/4, left: 1/4, 4, 9\n(8) / (2) = 4, left: 4, 4, 9\n(9) / (2) = 9/2, left: 9/2, 4, 8\n(9/2) - (4) = 1/2, left: 1/2, 8\n(9) - (2) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 2) - 4))"}, {"input": "4 8 2 9\n", "output": "(9) / (2) = 9/2, left: 9/2, 4, 8\n(2) + (9) = 11, left: 11, 4, 8\n(4) + (11) = 15, left: 15, 8\n(8) - (4) = 4, left: 4, 11\n(11) + (4) = 15, left: 15\n(2) / (9) = 2/9, left: 2/9, 4, 8\n(2/9) / (8) = 1/36, left: 1/36, 4\n(9) - (2) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 2) - 4))"}, {"input": "4 8 2 9\n", "output": "(8) / (9) = 8/9, left: 8/9, 4, 2\n(8/9) / (4) = 2/9, left: 2/9, 2\n(8) + (9) = 17, left: 17, 4, 2\n(9) - (8) = 1, left: 1, 4, 2\n(1) / (4) = 1/4, left: 1/4, 2\n(8) - (9) = -1, left: -1, 4, 2\n(8) * (9) = 72, left: 72, 4, 2\n(4) + (2) = 6, left: 6, 8, 9\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 - (4 + 2)))"}, {"input": "4 8 2 9\n", "output": "(2) - (8) = -6, left: -6, 4, 9\n(4) - (9) = -5, left: -5, -6\n(8) + (2) = 10, left: 10, 4, 9\n(4) / (9) = 4/9, left: 4/9, 10\n(8) - (2) = 6, left: 6, 4, 9\n(8) / (2) = 4, left: 4, 4, 9\n(9) / (4) = 9/4, left: 9/4, 4\n(9) / (2) = 9/2, left: 9/2, 4, 8\n(8) * (9/2) = 36, left: 36, 4\n(9/2) - (4) = 1/2, left: 1/2, 8\n(8) + (1/2) = 17/2, left: 17/2\n(9) - (2) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 2) - 4))"}, {"input": "4 8 2 9\n", "output": "(8) + (9) = 17, left: 17, 4, 2\n(17) - (2) = 15, left: 15, 4\n(9) - (8) = 1, left: 1, 4, 2\n(8) - (9) = -1, left: -1, 4, 2\n(8) * (9) = 72, left: 72, 4, 2\n(4) / (8) = 1/2, left: 1/2, 2, 9\n(2) - (4) = -2, left: -2, 8, 9\n(-2) / (8) = -1/4, left: -1/4, 9\n(4) - (2) = 2, left: 2, 8, 9\n(9) - (2) = 7, left: 7, 8\n(4) + (2) = 6, left: 6, 8, 9\n(8) * (9) = 72, left: 72, 6\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 - (4 + 2)))"}, {"input": "4 8 2 9\n", "output": "(9) / (2) = 9/2, left: 9/2, 4, 8\n(8) / (9/2) = 16/9, left: 16/9, 4\n(4) * (8) = 32, left: 32, 9/2\n(2) + (9) = 11, left: 11, 4, 8\n(2) / (9) = 2/9, left: 2/9, 4, 8\n(2) * (9) = 18, left: 18, 4, 8\n(18) / (4) = 9/2, left: 9/2, 8\n(8) + (18) = 26, left: 26, 4\n(2) - (9) = -7, left: -7, 4, 8\n(-7) - (4) = -11, left: -11, 8\n(8) - (4) = 4, left: 4, -7\n(9) - (2) = 7, left: 7, 4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 2) - 4))"}, {"input": "4 8 2 9\n", "output": "(4) + (8) = 12, left: 12, 2, 9\n(2) * (12) = 24, left: 24, 9\n(4) - (8) = -4, left: -4, 2, 9\n(-4) - (9) = -13, left: -13, 2\n(4) / (8) = 1/2, left: 1/2, 2, 9\n(8) - (4) = 4, left: 4, 2, 9\n(2) - (9) = -7, left: -7, 4\n(4) * (9) = 36, left: 36, 8, 2\n(36) - (2) = 34, left: 34, 8\n(9) / (4) = 9/4, left: 9/4, 8, 2\n(4) - (9) = -5, left: -5, 8, 2\n(9) - (4) = 5, left: 5, 8, 2\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((9 - 4) - 2))"}, {"input": "4 8 2 9\n", "output": "(8) / (4) = 2, left: 2, 2, 9\n(2) / (2) = 1, left: 1, 9\n(4) + (8) = 12, left: 12, 2, 9\n(4) * (8) = 32, left: 32, 2, 9\n(8) - (4) = 4, left: 4, 2, 9\n(9) - (8) = 1, left: 1, 4, 2\n(8) + (9) = 17, left: 17, 4, 2\n(8) / (9) = 8/9, left: 8/9, 4, 2\n(4) * (2) = 8, left: 8, 8/9\n(8) * (9) = 72, left: 72, 4, 2\n(72) - (2) = 70, left: 70, 4\n(4) + (2) = 6, left: 6, 8, 9\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 - (4 + 2)))"}, {"input": "7 7 11 6\n", "output": "(7) / (6) = 7/6, left: 7/6, 7, 11\n(7) / (11) = 7/11, left: 7/11, 7/6\n(7/6) - (11) = -59/6, left: -59/6, 7\n(7) * (6) = 42, left: 42, 7, 11\n(42) - (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((7 * 6) - 7) - 11)"}, {"input": "7 7 11 6\n", "output": "(7) * (6) = 42, left: 42, 7, 11\n(11) / (42) = 11/42, left: 11/42, 7\n(42) - (11) = 31, left: 31, 7\n(7) * (31) = 217, left: 217\n(7) / (31) = 7/31, left: 7/31\n(31) - (7) = 24, left: 24\nreach 24! expression: (((7 * 6) - 11) - 7)"}, {"input": "7 7 11 6\n", "output": "(7) + (11) = 18, left: 18, 7, 6\n(18) / (6) = 3, left: 3, 7\n(7) * (3) = 21, left: 21\n(7) - (6) = 1, left: 1, 18\n(7) * (6) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((7 * 6) - (7 + 11))"}, {"input": "7 7 11 6\n", "output": "(7) * (6) = 42, left: 42, 7, 11\n(42) / (11) = 42/11, left: 42/11, 7\n(42/11) - (7) = -35/11, left: -35/11\n(7) * (42/11) = 294/11, left: 294/11\n(11) / (42) = 11/42, left: 11/42, 7\n(11/42) / (7) = 11/294, left: 11/294\n(42) - (11) = 31, left: 31, 7\n(7) - (31) = -24, left: -24\n(7) / (31) = 7/31, left: 7/31\n(31) - (7) = 24, left: 24\nreach 24! expression: (((7 * 6) - 11) - 7)"}, {"input": "7 7 11 6\n", "output": "(7) / (6) = 7/6, left: 7/6, 7, 11\n(7) / (11) = 7/11, left: 7/11, 7/6\n(7) - (7/6) = 35/6, left: 35/6, 11\n(7) / (7/6) = 6, left: 6, 11\n(11) + (6) = 17, left: 17\n(11) + (7/6) = 73/6, left: 73/6, 7\n(7/6) - (11) = -59/6, left: -59/6, 7\n(7) * (6) = 42, left: 42, 7, 11\n(42) - (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: (((7 * 6) - 7) - 11)"}, {"input": "7 7 11 6\n", "output": "(7) + (7) = 14, left: 14, 11, 6\n(6) + (14) = 20, left: 20, 11\n(6) - (11) = -5, left: -5, 14\n(11) * (6) = 66, left: 66, 14\n(7) / (7) = 1, left: 1, 11, 6\n(1) / (11) = 1/11, left: 1/11, 6\n(1/11) / (6) = 1/66, left: 1/66\n(7) + (11) = 18, left: 18, 7, 6\n(7) * (6) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((7 * 6) - (7 + 11))"}, {"input": "7 7 11 6\n", "output": "(7) - (6) = 1, left: 1, 7, 11\n(7) / (6) = 7/6, left: 7/6, 7, 11\n(7) * (11) = 77, left: 77, 7/6\n(6) - (7) = -1, left: -1, 7, 11\n(-1) / (7) = -1/7, left: -1/7, 11\n(11) + (-1/7) = 76/7, left: 76/7\n(7) + (6) = 13, left: 13, 7, 11\n(7) * (6) = 42, left: 42, 7, 11\n(7) + (11) = 18, left: 18, 42\n(42) - (18) = 24, left: 24\nreach 24! expression: ((7 * 6) - (7 + 11))"}, {"input": "7 7 11 6\n", "output": "(7) + (11) = 18, left: 18, 7, 6\n(18) / (7) = 18/7, left: 18/7, 6\n(7) * (18) = 126, left: 126, 6\n(6) + (126) = 132, left: 132\n(7) + (18) = 25, left: 25, 6\n(6) * (18) = 108, left: 108, 7\n(7) * (108) = 756, left: 756\n(6) + (18) = 24, left: 24, 7\n(7) * (6) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((7 * 6) - (7 + 11))"}, {"input": "7 7 11 6\n", "output": "(7) + (7) = 14, left: 14, 11, 6\n(7) * (7) = 49, left: 49, 11, 6\n(6) / (49) = 6/49, left: 6/49, 11\n(7) - (7) = 0, left: 0, 11, 6\n(7) / (7) = 1, left: 1, 11, 6\n(6) / (1) = 6, left: 6, 11\n(11) / (6) = 11/6, left: 11/6, 1\n(11/6) / (1) = 11/6, left: 11/6\n(7) / (7) = 1, left: 1, 11, 6\n(7) - (7) = 0, left: 0, 11, 6\n(11) - (7) = 4, left: 4, 7, 6\n(7) + (11) = 18, left: 18, 7, 6\n(7) * (6) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((7 * 6) - (7 + 11))"}, {"input": "4 7 9 2\n", "output": "(4) + (9) = 13, left: 13, 7, 2\n(2) + (13) = 15, left: 15, 7\n(7) / (13) = 7/13, left: 7/13, 2\n(7/13) / (2) = 7/26, left: 7/26\n(7) - (2) = 5, left: 5, 13\n(7) * (2) = 14, left: 14, 13\n(13) * (14) = 182, left: 182\n(4) - (9) = -5, left: -5, 7, 2\n(7) - (-5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 - (4 - 9)))"}, {"input": "4 7 9 2\n", "output": "(7) + (2) = 9, left: 9, 4, 9\n(4) * (9) = 36, left: 36, 9\n(9) - (36) = -27, left: -27\n(7) / (2) = 7/2, left: 7/2, 4, 9\n(4) * (7/2) = 14, left: 14, 9\n(7) * (2) = 14, left: 14, 4, 9\n(7) - (2) = 5, left: 5, 4, 9\n(4) - (7) = -3, left: -3, 9, 2\n(9) - (-3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 - (4 - 7)))"}, {"input": "4 7 9 2\n", "output": "(4) + (9) = 13, left: 13, 7, 2\n(2) / (7) = 2/7, left: 2/7, 13\n(7) - (2) = 5, left: 5, 13\n(13) / (2) = 13/2, left: 13/2, 7\n(2) * (13) = 26, left: 26, 7\n(7) * (26) = 182, left: 182\n(9) - (4) = 5, left: 5, 7, 2\n(7) * (5) = 35, left: 35, 2\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (7 + (9 - 4)))"}, {"input": "4 7 9 2\n", "output": "(7) + (9) = 16, left: 16, 4, 2\n(2) * (16) = 32, left: 32, 4\n(2) - (16) = -14, left: -14, 4\n(4) / (-14) = -2/7, left: -2/7\n(16) - (2) = 14, left: 14, 4\n(4) - (14) = -10, left: -10\n(2) / (16) = 1/8, left: 1/8, 4\n(4) / (16) = 1/4, left: 1/4, 2\n(16) - (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((7 + 9) - 4))"}, {"input": "4 7 9 2\n", "output": "(4) / (7) = 4/7, left: 4/7, 9, 2\n(2) / (4/7) = 7/2, left: 7/2, 9\n(7) / (4) = 7/4, left: 7/4, 9, 2\n(9) / (7/4) = 36/7, left: 36/7, 2\n(4) - (7) = -3, left: -3, 9, 2\n(2) + (-3) = -1, left: -1, 9\n(-3) - (2) = -5, left: -5, 9\n(2) / (-3) = -2/3, left: -2/3, 9\n(9) - (-3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 - (4 - 7)))"}, {"input": "6 3 5 1\n", "output": "(6) + (5) = 11, left: 11, 3, 1\n(5) * (1) = 5, left: 5, 6, 3\n(5) - (1) = 4, left: 4, 6, 3\n(6) - (3) = 3, left: 3, 4\n(3) / (4) = 3/4, left: 3/4\n(3) / (6) = 1/2, left: 1/2, 4\n(5) / (1) = 5, left: 5, 6, 3\n(5) + (1) = 6, left: 6, 6, 3\n(3) * (6) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (3 * (5 + 1)))"}, {"input": "6 3 5 1\n", "output": "(1) / (6) = 1/6, left: 1/6, 3, 5\n(6) / (1) = 6, left: 6, 3, 5\n(6) / (5) = 6/5, left: 6/5, 3\n(1) - (6) = -5, left: -5, 3, 5\n(3) - (-5) = 8, left: 8, 5\n(6) * (5) = 30, left: 30, 3, 1\n(6) + (5) = 11, left: 11, 3, 1\n(6) * (3) = 18, left: 18, 5, 1\n(1) + (18) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (1 + (6 * 3)))"}, {"input": "6 3 5 1\n", "output": "(5) / (3) = 5/3, left: 5/3, 6, 1\n(3) + (5) = 8, left: 8, 6, 1\n(1) / (6) = 1/6, left: 1/6, 8\n(8) - (1/6) = 47/6, left: 47/6\n(6) + (8) = 14, left: 14, 1\n(5) - (3) = 2, left: 2, 6, 1\n(3) * (5) = 15, left: 15, 6, 1\n(6) * (3) = 18, left: 18, 5, 1\n(5) + (1) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((6 * 3) + (5 + 1))"}, {"input": "6 3 5 1\n", "output": "(5) - (3) = 2, left: 2, 6, 1\n(6) - (2) = 4, left: 4, 1\n(3) / (5) = 3/5, left: 3/5, 6, 1\n(6) * (1) = 6, left: 6, 3/5\n(3) + (5) = 8, left: 8, 6, 1\n(8) - (6) = 2, left: 2, 1\n(3) - (5) = -2, left: -2, 6, 1\n(5) + (1) = 6, left: 6, 6, 3\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((5 + 1) + (6 * 3))"}, {"input": "6 3 5 1\n", "output": "(3) - (6) = -3, left: -3, 5, 1\n(5) - (1) = 4, left: 4, -3\n(5) + (-3) = 2, left: 2, 1\n(1) - (2) = -1, left: -1\n(1) / (-3) = -1/3, left: -1/3, 5\n(-1/3) / (5) = -1/15, left: -1/15\n(6) * (3) = 18, left: 18, 5, 1\n(1) / (5) = 1/5, left: 1/5, 18\n(5) + (1) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((6 * 3) + (5 + 1))"}, {"input": "6 3 5 1\n", "output": "(6) / (5) = 6/5, left: 6/5, 3, 1\n(6) - (5) = 1, left: 1, 3, 1\n(6) * (5) = 30, left: 30, 3, 1\n(6) + (5) = 11, left: 11, 3, 1\n(5) * (1) = 5, left: 5, 6, 3\n(3) * (5) = 15, left: 15, 6\n(1) / (5) = 1/5, left: 1/5, 6, 3\n(5) - (1) = 4, left: 4, 6, 3\n(3) + (4) = 7, left: 7, 6\n(6) / (4) = 3/2, left: 3/2, 3\n(5) / (1) = 5, left: 5, 6, 3\n(5) + (1) = 6, left: 6, 6, 3\n(3) * (6) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (3 * (5 + 1)))"}, {"input": "6 3 5 1\n", "output": "(5) / (3) = 5/3, left: 5/3, 6, 1\n(6) + (5/3) = 23/3, left: 23/3, 1\n(3) - (5) = -2, left: -2, 6, 1\n(1) + (-2) = -1, left: -1, 6\n(3) + (5) = 8, left: 8, 6, 1\n(6) * (1) = 6, left: 6, 8\n(1) - (8) = -7, left: -7, 6\n(5) - (3) = 2, left: 2, 6, 1\n(3) - (6) = -3, left: -3, 5, 1\n(1) - (5) = -4, left: -4, -3\n(6) / (3) = 2, left: 2, 5, 1\n(6) * (3) = 18, left: 18, 5, 1\n(5) + (1) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((6 * 3) + (5 + 1))"}, {"input": "6 3 5 1\n", "output": "(5) - (3) = 2, left: 2, 6, 1\n(3) / (5) = 3/5, left: 3/5, 6, 1\n(1) - (3/5) = 2/5, left: 2/5, 6\n(5) / (3) = 5/3, left: 5/3, 6, 1\n(5/3) - (6) = -13/3, left: -13/3, 1\n(3) + (5) = 8, left: 8, 6, 1\n(3) * (5) = 15, left: 15, 6, 1\n(1) * (15) = 15, left: 15, 6\n(5) - (1) = 4, left: 4, 6, 3\n(3) / (6) = 1/2, left: 1/2, 4\n(5) + (1) = 6, left: 6, 6, 3\n(3) / (6) = 1/2, left: 1/2, 6\n(6) * (3) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((5 + 1) + (6 * 3))"}, {"input": "6 3 5 1\n", "output": "(1) / (6) = 1/6, left: 1/6, 3, 5\n(3) * (1/6) = 1/2, left: 1/2, 5\n(6) * (1) = 6, left: 6, 3, 5\n(6) / (3) = 2, left: 2, 5\n(5) - (2) = 3, left: 3\n(6) - (1) = 5, left: 5, 3, 5\n(5) / (5) = 1, left: 1, 3\n(5) - (5) = 0, left: 0, 3\n(6) - (5) = 1, left: 1, 3, 1\n(1) / (1) = 1, left: 1, 3\n(5) / (6) = 5/6, left: 5/6, 3, 1\n(6) * (3) = 18, left: 18, 5, 1\n(1) + (18) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (1 + (6 * 3)))"}, {"input": "1 2 10 5\n", "output": "(2) / (10) = 1/5, left: 1/5, 1, 5\n(1) - (1/5) = 4/5, left: 4/5, 5\n(5) - (1/5) = 24/5, left: 24/5, 1\n(1/5) / (5) = 1/25, left: 1/25, 1\n(5) / (1/5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 / (2 / 10)) - 1)"}, {"input": "1 2 10 5\n", "output": "(5) / (2) = 5/2, left: 5/2, 1, 10\n(1) * (10) = 10, left: 10, 5/2\n(5/2) - (10) = -15/2, left: -15/2\n(5/2) / (10) = 1/4, left: 1/4, 1\n(10) * (5/2) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((10 * (5 / 2)) - 1)"}, {"input": "1 2 10 5\n", "output": "(2) + (5) = 7, left: 7, 1, 10\n(5) / (2) = 5/2, left: 5/2, 1, 10\n(5/2) - (10) = -15/2, left: -15/2, 1\n(-15/2) / (1) = -15/2, left: -15/2\n(10) * (5/2) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((10 * (5 / 2)) - 1)"}, {"input": "1 2 10 5\n", "output": "(2) / (1) = 2, left: 2, 10, 5\n(1) - (2) = -1, left: -1, 10, 5\n(1) + (2) = 3, left: 3, 10, 5\n(10) - (3) = 7, left: 7, 5\n(1) * (2) = 2, left: 2, 10, 5\n(10) / (2) = 5, left: 5, 5\n(10) / (1) = 10, left: 10, 2, 5\n(5) - (1) = 4, left: 4, 2, 10\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((5 - 1) + (2 * 10))"}, {"input": "1 2 10 5\n", "output": "(10) / (1) = 10, left: 10, 2, 5\n(10) - (1) = 9, left: 9, 2, 5\n(5) * (9) = 45, left: 45, 2\n(5) / (2) = 5/2, left: 5/2, 9\n(5) - (2) = 3, left: 3, 9\n(1) * (10) = 10, left: 10, 2, 5\n(5) * (10) = 50, left: 50, 2\n(2) * (10) = 20, left: 20, 1, 5\n(5) + (20) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 + (2 * 10)) - 1)"}, {"input": "1 2 10 5\n", "output": "(5) / (2) = 5/2, left: 5/2, 1, 10\n(5/2) / (1) = 5/2, left: 5/2, 10\n(1) + (5/2) = 7/2, left: 7/2, 10\n(1) + (10) = 11, left: 11, 5/2\n(1) - (10) = -9, left: -9, 5/2\n(5/2) / (10) = 1/4, left: 1/4, 1\n(1) + (1/4) = 5/4, left: 5/4\n(10) - (5/2) = 15/2, left: 15/2, 1\n(10) * (5/2) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((10 * (5 / 2)) - 1)"}, {"input": "1 2 10 5\n", "output": "(2) / (10) = 1/5, left: 1/5, 1, 5\n(1) * (1/5) = 1/5, left: 1/5, 5\n(1) - (1/5) = 4/5, left: 4/5, 5\n(1) / (1/5) = 5, left: 5, 5\n(5) - (5) = 0, left: 0\n(1/5) - (5) = -24/5, left: -24/5, 1\n(1/5) / (5) = 1/25, left: 1/25, 1\n(1/25) / (1) = 1/25, left: 1/25\n(5) / (1/5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 / (2 / 10)) - 1)"}, {"input": "1 2 10 5\n", "output": "(2) + (5) = 7, left: 7, 1, 10\n(10) * (7) = 70, left: 70, 1\n(1) * (70) = 70, left: 70\n(7) - (10) = -3, left: -3, 1\n(10) - (1) = 9, left: 9, 7\n(1) * (10) = 10, left: 10, 7\n(7) * (10) = 70, left: 70\n(5) / (2) = 5/2, left: 5/2, 1, 10\n(10) * (5/2) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((10 * (5 / 2)) - 1)"}, {"input": "1 2 10 5\n", "output": "(2) / (1) = 2, left: 2, 10, 5\n(5) - (2) = 3, left: 3, 10\n(1) / (2) = 1/2, left: 1/2, 10, 5\n(2) - (1) = 1, left: 1, 10, 5\n(1) - (10) = -9, left: -9, 2, 5\n(2) / (-9) = -2/9, left: -2/9, 5\n(1) / (10) = 1/10, left: 1/10, 2, 5\n(1/10) - (5) = -49/10, left: -49/10, 2\n(10) - (1) = 9, left: 9, 2, 5\n(2) / (5) = 2/5, left: 2/5, 9\n(1) * (10) = 10, left: 10, 2, 5\n(5) - (1) = 4, left: 4, 2, 10\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((5 - 1) + (2 * 10))"}, {"input": "11 10 3 5\n", "output": "(10) * (3) = 30, left: 30, 11, 5\n(11) + (30) = 41, left: 41, 5\n(5) * (41) = 205, left: 205\n(5) + (41) = 46, left: 46\n(30) - (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((10 * 3) - 11))"}, {"input": "11 10 3 5\n", "output": "(5) - (3) = 2, left: 2, 11, 10\n(11) + (10) = 21, left: 21, 2\n(3) / (11) = 3/11, left: 3/11, 10, 5\n(10) * (3) = 30, left: 30, 11, 5\n(30) - (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((10 * 3) - 11))"}, {"input": "11 10 3 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 10, 3\n(3) / (10) = 3/10, left: 3/10, 11/5\n(11) - (5) = 6, left: 6, 10, 3\n(10) + (6) = 16, left: 16, 3\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (11 - 5))"}, {"input": "11 10 3 5\n", "output": "(11) * (10) = 110, left: 110, 3, 5\n(10) * (5) = 50, left: 50, 11, 3\n(10) - (5) = 5, left: 5, 11, 3\n(10) + (5) = 15, left: 15, 11, 3\n(10) / (5) = 2, left: 2, 11, 3\n(10) + (3) = 13, left: 13, 11, 5\n(5) - (13) = -8, left: -8, 11\n(10) - (3) = 7, left: 7, 11, 5\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (10 - 3)) - 11)"}, {"input": "11 10 3 5\n", "output": "(3) * (5) = 15, left: 15, 11, 10\n(3) - (5) = -2, left: -2, 11, 10\n(5) / (3) = 5/3, left: 5/3, 11, 10\n(5/3) / (11) = 5/33, left: 5/33, 10\n(11) + (10) = 21, left: 21, 3, 5\n(10) / (3) = 10/3, left: 10/3, 11, 5\n(10) + (3) = 13, left: 13, 11, 5\n(10) * (3) = 30, left: 30, 11, 5\n(5) + (30) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 + (10 * 3)) - 11)"}, {"input": "11 10 3 5\n", "output": "(5) - (3) = 2, left: 2, 11, 10\n(10) / (11) = 10/11, left: 10/11, 2\n(3) - (5) = -2, left: -2, 11, 10\n(3) * (5) = 15, left: 15, 11, 10\n(11) / (5) = 11/5, left: 11/5, 10, 3\n(11) - (5) = 6, left: 6, 10, 3\n(3) - (10) = -7, left: -7, 6\n(6) * (-7) = -42, left: -42\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * 3) - (11 - 5))"}, {"input": "11 10 3 5\n", "output": "(5) / (10) = 1/2, left: 1/2, 11, 3\n(5) - (3) = 2, left: 2, 11, 10\n(3) / (5) = 3/5, left: 3/5, 11, 10\n(11) / (3) = 11/3, left: 11/3, 10, 5\n(11) * (3) = 33, left: 33, 10, 5\n(10) + (3) = 13, left: 13, 11, 5\n(10) / (3) = 10/3, left: 10/3, 11, 5\n(10) * (3) = 30, left: 30, 11, 5\n(30) - (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((10 * 3) - 11))"}, {"input": "11 10 3 5\n", "output": "(10) * (3) = 30, left: 30, 11, 5\n(11) + (30) = 41, left: 41, 5\n(5) * (41) = 205, left: 205\n(5) + (41) = 46, left: 46\n(41) - (5) = 36, left: 36\n(41) / (5) = 41/5, left: 41/5\n(5) - (41) = -36, left: -36\n(5) / (41) = 5/41, left: 5/41\n(30) - (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((10 * 3) - 11))"}, {"input": "11 10 3 5\n", "output": "(10) * (3) = 30, left: 30, 11, 5\n(11) + (30) = 41, left: 41, 5\n(5) * (41) = 205, left: 205\n(5) + (41) = 46, left: 46\n(41) - (5) = 36, left: 36\n(41) / (5) = 41/5, left: 41/5\n(5) - (41) = -36, left: -36\n(5) / (41) = 5/41, left: 5/41\n(30) - (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((10 * 3) - 11))"}, {"input": "11 10 3 5\n", "output": "(10) * (3) = 30, left: 30, 11, 5\n(11) + (30) = 41, left: 41, 5\n(5) * (41) = 205, left: 205\n(5) + (41) = 46, left: 46\n(41) - (5) = 36, left: 36\n(41) / (5) = 41/5, left: 41/5\n(5) - (41) = -36, left: -36\n(5) / (41) = 5/41, left: 5/41\n(30) - (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((10 * 3) - 11))"}, {"input": "1 4 10 3\n", "output": "(10) - (1) = 9, left: 9, 4, 3\n(4) - (3) = 1, left: 1, 9\n(3) - (4) = -1, left: -1, 9\n(9) * (-1) = -9, left: -9\n(3) / (4) = 3/4, left: 3/4, 9\n(9) / (3/4) = 12, left: 12\n(3) * (9) = 27, left: 27, 4\n(4) - (27) = -23, left: -23\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((10 - 1) - 3))"}, {"input": "1 4 10 3\n", "output": "(1) + (4) = 5, left: 5, 10, 3\n(3) / (5) = 3/5, left: 3/5, 10\n(4) / (1) = 4, left: 4, 10, 3\n(1) - (4) = -3, left: -3, 10, 3\n(-3) / (10) = -3/10, left: -3/10, 3\n(3) - (4) = -1, left: -1, 1, 10\n(10) * (-1) = -10, left: -10, 1\n(1) + (3) = 4, left: 4, 4, 10\n(10) - (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (10 - (1 + 3)))"}, {"input": "1 4 10 3\n", "output": "(1) + (4) = 5, left: 5, 10, 3\n(10) / (5) = 2, left: 2, 3\n(3) * (2) = 6, left: 6\n(1) / (4) = 1/4, left: 1/4, 10, 3\n(10) + (3) = 13, left: 13, 1, 4\n(4) * (13) = 52, left: 52, 1\n(3) - (10) = -7, left: -7, 1, 4\n(10) - (3) = 7, left: 7, 1, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((10 - 3) - 1))"}, {"input": "1 4 10 3\n", "output": "(4) + (3) = 7, left: 7, 1, 10\n(1) / (7) = 1/7, left: 1/7, 10\n(4) - (3) = 1, left: 1, 1, 10\n(4) * (3) = 12, left: 12, 1, 10\n(3) / (4) = 3/4, left: 3/4, 1, 10\n(1) - (3/4) = 1/4, left: 1/4, 10\n(3) - (4) = -1, left: -1, 1, 10\n(10) - (4) = 6, left: 6, 1, 3\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((10 - 4) * (1 + 3))"}, {"input": "1 4 10 3\n", "output": "(10) / (3) = 10/3, left: 10/3, 1, 4\n(3) / (10) = 3/10, left: 3/10, 1, 4\n(1) / (3/10) = 10/3, left: 10/3, 4\n(10) + (3) = 13, left: 13, 1, 4\n(3) - (10) = -7, left: -7, 1, 4\n(1) - (4) = -3, left: -3, -7\n(-7) - (1) = -8, left: -8, 4\n(10) - (3) = 7, left: 7, 1, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((10 - 3) - 1))"}, {"input": "1 4 10 3\n", "output": "(1) / (4) = 1/4, left: 1/4, 10, 3\n(1/4) / (10) = 1/40, left: 1/40, 3\n(1) + (4) = 5, left: 5, 10, 3\n(4) / (1) = 4, left: 4, 10, 3\n(10) * (4) = 40, left: 40, 3\n(3) + (40) = 43, left: 43\n(1) - (4) = -3, left: -3, 10, 3\n(3) - (4) = -1, left: -1, 1, 10\n(4) * (3) = 12, left: 12, 1, 10\n(4) - (3) = 1, left: 1, 1, 10\n(10) + (1) = 11, left: 11, 1\n(1) + (3) = 4, left: 4, 4, 10\n(10) - (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (10 - (1 + 3)))"}, {"input": "1 4 10 3\n", "output": "(4) + (3) = 7, left: 7, 1, 10\n(4) - (3) = 1, left: 1, 1, 10\n(4) * (3) = 12, left: 12, 1, 10\n(12) / (1) = 12, left: 12, 10\n(4) / (3) = 4/3, left: 4/3, 1, 10\n(3) / (4) = 3/4, left: 3/4, 1, 10\n(3) - (4) = -1, left: -1, 1, 10\n(1) - (10) = -9, left: -9, -1\n(-1) - (-9) = 8, left: 8\n(1) * (-1) = -1, left: -1, 10\n(10) * (-1) = -10, left: -10, 1\n(10) - (4) = 6, left: 6, 1, 3\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((10 - 4) * (1 + 3))"}, {"input": "3 5 3 3\n", "output": "(3) + (3) = 6, left: 6, 5, 3\n(5) - (6) = -1, left: -1, 3\n(3) * (-1) = -3, left: -3\n(3) * (6) = 18, left: 18, 5\n(5) - (18) = -13, left: -13\n(3) / (5) = 3/5, left: 3/5, 6\n(6) / (3/5) = 10, left: 10\n(3) * (3) = 9, left: 9, 5, 3\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((3 * 3) + (5 * 3))"}, {"input": "3 5 3 3\n", "output": "(5) + (3) = 8, left: 8, 3, 3\n(5) - (3) = 2, left: 2, 3, 3\n(3) - (5) = -2, left: -2, 3, 3\n(3) - (-2) = 5, left: 5, 3\n(-2) / (3) = -2/3, left: -2/3, 3\n(5) / (3) = 5/3, left: 5/3, 3, 3\n(3) / (5) = 3/5, left: 3/5, 3, 3\n(5) * (3) = 15, left: 15, 3, 3\n(3) * (3) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((5 * 3) + (3 * 3))"}, {"input": "3 5 3 3\n", "output": "(5) + (3) = 8, left: 8, 3, 3\n(8) / (3) = 8/3, left: 8/3, 3\n(3) + (8) = 11, left: 11, 3\n(3) / (3) = 1, left: 1, 8\n(3) / (5) = 3/5, left: 3/5, 3, 3\n(3) - (5) = -2, left: -2, 3, 3\n(3) / (3) = 1, left: 1, -2\n(5) * (3) = 15, left: 15, 3, 3\n(3) * (3) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((5 * 3) + (3 * 3))"}, {"input": "3 5 3 3\n", "output": "(3) / (5) = 3/5, left: 3/5, 3, 3\n(3/5) - (3) = -12/5, left: -12/5, 3\n(3) - (5) = -2, left: -2, 3, 3\n(3) + (3) = 6, left: 6, -2\n(6) / (-2) = -3, left: -3\n(3) / (-2) = -3/2, left: -3/2, 3\n(3) / (-3/2) = -2, left: -2\n(5) * (3) = 15, left: 15, 3, 3\n(3) * (3) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((5 * 3) + (3 * 3))"}, {"input": "3 5 3 3\n", "output": "(3) - (3) = 0, left: 0, 3, 5\n(3) - (5) = -2, left: -2, 0\n(3) + (3) = 6, left: 6, 3, 5\n(5) - (6) = -1, left: -1, 3\n(5) + (6) = 11, left: 11, 3\n(3) / (11) = 3/11, left: 3/11\n(3) * (6) = 18, left: 18, 5\n(3) * (3) = 9, left: 9, 3, 5\n(3) * (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((3 * 3) + (3 * 5))"}, {"input": "3 5 3 3\n", "output": "(5) + (3) = 8, left: 8, 3, 3\n(3) / (3) = 1, left: 1, 8\n(5) - (3) = 2, left: 2, 3, 3\n(2) - (3) = -1, left: -1, 3\n(-1) - (3) = -4, left: -4\n(3) - (5) = -2, left: -2, 3, 3\n(3) - (-2) = 5, left: 5, 3\n(3) - (5) = -2, left: -2\n(5) / (3) = 5/3, left: 5/3, 3, 3\n(3) / (3) = 1, left: 1, 5/3\n(5) * (3) = 15, left: 15, 3, 3\n(3) * (15) = 45, left: 45, 3\n(3) * (3) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((5 * 3) + (3 * 3))"}, {"input": "3 5 3 3\n", "output": "(5) + (3) = 8, left: 8, 3, 3\n(3) / (5) = 3/5, left: 3/5, 3, 3\n(3) + (3/5) = 18/5, left: 18/5, 3\n(3) - (3) = 0, left: 0, 3/5\n(3) - (5) = -2, left: -2, 3, 3\n(3) - (-2) = 5, left: 5, 3\n(3) - (5) = -2, left: -2\n(3) * (-2) = -6, left: -6, 3\n(5) * (3) = 15, left: 15, 3, 3\n(3) - (3) = 0, left: 0, 15\n(15) + (0) = 15, left: 15\n(3) + (3) = 6, left: 6, 15\n(3) * (3) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((5 * 3) + (3 * 3))"}, {"input": "3 5 3 3\n", "output": "(3) + (3) = 6, left: 6, 5, 3\n(5) * (6) = 30, left: 30, 3\n(3) - (3) = 0, left: 0, 5, 3\n(5) - (0) = 5, left: 5, 3\n(5) + (0) = 5, left: 5, 3\n(3) * (0) = 0, left: 0, 5\n(5) - (3) = 2, left: 2, 0\n(3) / (3) = 1, left: 1, 5, 3\n(1) - (3) = -2, left: -2, 5\n(5) * (1) = 5, left: 5, 3\n(1) - (5) = -4, left: -4, 3\n(3) * (3) = 9, left: 9, 5, 3\n(5) * (3) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((3 * 3) + (5 * 3))"}, {"input": "3 5 3 3\n", "output": "(3) / (3) = 1, left: 1, 3, 5\n(3) / (5) = 3/5, left: 3/5, 1\n(5) - (3) = 2, left: 2, 1\n(3) - (3) = 0, left: 0, 3, 5\n(3) / (5) = 3/5, left: 3/5, 0\n(3) / (3) = 1, left: 1, 3, 5\n(3) + (5) = 8, left: 8, 1\n(1) - (8) = -7, left: -7\n(5) + (1) = 6, left: 6, 3\n(3) - (3) = 0, left: 0, 3, 5\n(0) / (3) = 0, left: 0, 5\n(3) * (3) = 9, left: 9, 3, 5\n(3) * (5) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: ((3 * 3) + (3 * 5))"}, {"input": "6 7 10 4\n", "output": "(6) / (10) = 3/5, left: 3/5, 7, 4\n(7) - (3/5) = 32/5, left: 32/5, 4\n(4) * (3/5) = 12/5, left: 12/5, 7\n(6) - (10) = -4, left: -4, 7, 4\n(7) * (4) = 28, left: 28, -4\n(-4) + (28) = 24, left: 24\nreach 24! expression: ((6 - 10) + (7 * 4))"}, {"input": "6 7 10 4\n", "output": "(6) - (10) = -4, left: -4, 7, 4\n(7) + (4) = 11, left: 11, -4\n(11) - (-4) = 15, left: 15\n(11) / (-4) = -11/4, left: -11/4\n(7) * (4) = 28, left: 28, -4\n(-4) + (28) = 24, left: 24\nreach 24! expression: ((6 - 10) + (7 * 4))"}, {"input": "6 7 10 4\n", "output": "(7) - (6) = 1, left: 1, 10, 4\n(10) + (4) = 14, left: 14, 1\n(6) / (7) = 6/7, left: 6/7, 10, 4\n(10) + (4) = 14, left: 14, 6/7\n(7) / (4) = 7/4, left: 7/4, 6, 10\n(7) + (4) = 11, left: 11, 6, 10\n(11) / (10) = 11/10, left: 11/10, 6\n(7) - (4) = 3, left: 3, 6, 10\n(10) * (3) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((10 * (7 - 4)) - 6)"}, {"input": "6 7 10 4\n", "output": "(4) / (10) = 2/5, left: 2/5, 6, 7\n(10) / (4) = 5/2, left: 5/2, 6, 7\n(5/2) - (7) = -9/2, left: -9/2, 6\n(6) / (-9/2) = -4/3, left: -4/3\n(6) + (4) = 10, left: 10, 7, 10\n(10) * (10) = 100, left: 100, 7\n(10) / (7) = 10/7, left: 10/7, 10\n(6) - (4) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (6 - 4)))"}, {"input": "6 7 10 4\n", "output": "(6) - (4) = 2, left: 2, 7, 10\n(10) * (2) = 20, left: 20, 7\n(10) - (2) = 8, left: 8, 7\n(10) + (2) = 12, left: 12, 7\n(7) + (12) = 19, left: 19\n(2) / (10) = 1/5, left: 1/5, 7\n(1/5) / (7) = 1/35, left: 1/35\n(10) / (2) = 5, left: 5, 7\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (6 - 4)))"}, {"input": "6 7 10 4\n", "output": "(6) * (10) = 60, left: 60, 7, 4\n(7) * (4) = 28, left: 28, 60\n(7) - (60) = -53, left: -53, 4\n(60) / (4) = 15, left: 15, 7\n(4) + (60) = 64, left: 64, 7\n(4) / (60) = 1/15, left: 1/15, 7\n(6) / (10) = 3/5, left: 3/5, 7, 4\n(6) - (10) = -4, left: -4, 7, 4\n(7) * (4) = 28, left: 28, -4\n(-4) + (28) = 24, left: 24\nreach 24! expression: ((6 - 10) + (7 * 4))"}, {"input": "6 7 10 4\n", "output": "(6) - (10) = -4, left: -4, 7, 4\n(7) + (4) = 11, left: 11, -4\n(11) - (-4) = 15, left: 15\n(-4) / (11) = -4/11, left: -4/11\n(11) / (-4) = -11/4, left: -11/4\n(-4) - (11) = -15, left: -15\n(-4) + (11) = 7, left: 7\n(-4) * (11) = -44, left: -44\n(7) * (4) = 28, left: 28, -4\n(-4) + (28) = 24, left: 24\nreach 24! expression: ((6 - 10) + (7 * 4))"}, {"input": "6 7 10 4\n", "output": "(6) - (10) = -4, left: -4, 7, 4\n(7) + (4) = 11, left: 11, -4\n(11) - (-4) = 15, left: 15\n(-4) / (11) = -4/11, left: -4/11\n(11) / (-4) = -11/4, left: -11/4\n(-4) - (11) = -15, left: -15\n(-4) + (11) = 7, left: 7\n(-4) * (11) = -44, left: -44\n(7) * (4) = 28, left: 28, -4\n(-4) + (28) = 24, left: 24\nreach 24! expression: ((6 - 10) + (7 * 4))"}, {"input": "6 7 10 4\n", "output": "(6) - (10) = -4, left: -4, 7, 4\n(7) + (4) = 11, left: 11, -4\n(11) - (-4) = 15, left: 15\n(-4) / (11) = -4/11, left: -4/11\n(11) / (-4) = -11/4, left: -11/4\n(-4) - (11) = -15, left: -15\n(-4) + (11) = 7, left: 7\n(-4) * (11) = -44, left: -44\n(7) * (4) = 28, left: 28, -4\n(-4) + (28) = 24, left: 24\nreach 24! expression: ((6 - 10) + (7 * 4))"}, {"input": "6 9 4 7\n", "output": "(6) + (7) = 13, left: 13, 9, 4\n(6) / (7) = 6/7, left: 6/7, 9, 4\n(9) * (6/7) = 54/7, left: 54/7, 4\n(7) - (4) = 3, left: 3, 6, 9\n(4) + (7) = 11, left: 11, 6, 9\n(6) * (9) = 54, left: 54, 11\n(11) * (54) = 594, left: 594\n(6) / (4) = 3/2, left: 3/2, 9, 7\n(9) + (7) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((6 / 4) * (9 + 7))"}, {"input": "6 9 4 7\n", "output": "(6) * (9) = 54, left: 54, 4, 7\n(6) / (9) = 2/3, left: 2/3, 4, 7\n(9) - (6) = 3, left: 3, 4, 7\n(7) - (4) = 3, left: 3, 3\n(3) / (3) = 1, left: 1\n(4) / (6) = 2/3, left: 2/3, 9, 7\n(9) + (2/3) = 29/3, left: 29/3, 7\n(7) + (29/3) = 50/3, left: 50/3\n(9) + (7) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((9 + 7) / (4 / 6))"}, {"input": "6 9 4 7\n", "output": "(6) / (9) = 2/3, left: 2/3, 4, 7\n(9) - (6) = 3, left: 3, 4, 7\n(6) - (9) = -3, left: -3, 4, 7\n(6) + (9) = 15, left: 15, 4, 7\n(4) / (15) = 4/15, left: 4/15, 7\n(7) / (4/15) = 105/4, left: 105/4\n(7) - (15) = -8, left: -8, 4\n(6) / (4) = 3/2, left: 3/2, 9, 7\n(9) + (7) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((6 / 4) * (9 + 7))"}, {"input": "6 9 4 7\n", "output": "(7) - (9) = -2, left: -2, 6, 4\n(4) / (-2) = -2, left: -2, 6\n(9) * (7) = 63, left: 63, 6, 4\n(9) / (7) = 9/7, left: 9/7, 6, 4\n(6) + (4) = 10, left: 10, 9/7\n(9) - (7) = 2, left: 2, 6, 4\n(6) - (2) = 4, left: 4, 4\n(9) + (7) = 16, left: 16, 6, 4\n(6) * (16) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((6 * (9 + 7)) / 4)"}, {"input": "6 9 4 7\n", "output": "(4) / (9) = 4/9, left: 4/9, 6, 7\n(4) - (9) = -5, left: -5, 6, 7\n(6) - (9) = -3, left: -3, 4, 7\n(4) - (-3) = 7, left: 7, 7\n(6) / (9) = 2/3, left: 2/3, 4, 7\n(9) - (6) = 3, left: 3, 4, 7\n(6) + (9) = 15, left: 15, 4, 7\n(9) + (7) = 16, left: 16, 6, 4\n(6) / (4) = 3/2, left: 3/2, 16\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((9 + 7) * (6 / 4))"}, {"input": "6 9 4 7\n", "output": "(7) - (6) = 1, left: 1, 9, 4\n(9) - (4) = 5, left: 5, 1\n(7) / (6) = 7/6, left: 7/6, 9, 4\n(7/6) - (4) = -17/6, left: -17/6, 9\n(4) / (7/6) = 24/7, left: 24/7, 9\n(6) - (7) = -1, left: -1, 9, 4\n(4) / (7) = 4/7, left: 4/7, 6, 9\n(6) + (9) = 15, left: 15, 4/7\n(7) - (4) = 3, left: 3, 6, 9\n(4) - (7) = -3, left: -3, 6, 9\n(9) / (-3) = -3, left: -3, 6\n(6) / (4) = 3/2, left: 3/2, 9, 7\n(9) + (7) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((6 / 4) * (9 + 7))"}, {"input": "6 9 4 7\n", "output": "(7) - (9) = -2, left: -2, 6, 4\n(4) / (-2) = -2, left: -2, 6\n(6) / (-2) = -3, left: -3\n(9) * (7) = 63, left: 63, 6, 4\n(63) - (4) = 59, left: 59, 6\n(9) / (7) = 9/7, left: 9/7, 6, 4\n(7) / (9) = 7/9, left: 7/9, 6, 4\n(4) - (6) = -2, left: -2, 7/9\n(7/9) - (4) = -29/9, left: -29/9, 6\n(9) - (7) = 2, left: 2, 6, 4\n(4) * (2) = 8, left: 8, 6\n(9) + (7) = 16, left: 16, 6, 4\n(6) * (16) = 96, left: 96, 4\n(96) / (4) = 24, left: 24\nreach 24! expression: ((6 * (9 + 7)) / 4)"}, {"input": "6 9 4 7\n", "output": "(4) / (9) = 4/9, left: 4/9, 6, 7\n(7) - (6) = 1, left: 1, 4/9\n(9) + (4) = 13, left: 13, 6, 7\n(4) - (9) = -5, left: -5, 6, 7\n(7) * (-5) = -35, left: -35, 6\n(6) / (-35) = -6/35, left: -6/35\n(9) / (6) = 3/2, left: 3/2, 4, 7\n(6) - (9) = -3, left: -3, 4, 7\n(6) + (9) = 15, left: 15, 4, 7\n(4) / (7) = 4/7, left: 4/7, 15\n(9) - (7) = 2, left: 2, 6, 4\n(9) + (7) = 16, left: 16, 6, 4\n(6) / (4) = 3/2, left: 3/2, 16\n(16) * (3/2) = 24, left: 24\nreach 24! expression: ((9 + 7) * (6 / 4))"}, {"input": "6 9 4 7\n", "output": "(9) / (6) = 3/2, left: 3/2, 4, 7\n(6) - (9) = -3, left: -3, 4, 7\n(6) * (9) = 54, left: 54, 4, 7\n(7) + (54) = 61, left: 61, 4\n(6) / (9) = 2/3, left: 2/3, 4, 7\n(9) - (6) = 3, left: 3, 4, 7\n(7) - (4) = 3, left: 3, 3\n(7) * (3) = 21, left: 21, 4\n(4) - (6) = -2, left: -2, 9, 7\n(9) - (-2) = 11, left: 11, 7\n(6) * (4) = 24, left: 24, 9, 7\n(4) / (6) = 2/3, left: 2/3, 9, 7\n(9) + (7) = 16, left: 16, 2/3\n(16) / (2/3) = 24, left: 24\nreach 24! expression: ((9 + 7) / (4 / 6))"}, {"input": "6 9 4 7\n", "output": "(9) / (6) = 3/2, left: 3/2, 4, 7\n(6) / (9) = 2/3, left: 2/3, 4, 7\n(9) - (6) = 3, left: 3, 4, 7\n(4) * (3) = 12, left: 12, 7\n(7) + (3) = 10, left: 10, 4\n(6) - (9) = -3, left: -3, 4, 7\n(6) + (9) = 15, left: 15, 4, 7\n(6) + (4) = 10, left: 10, 9, 7\n(10) / (7) = 10/7, left: 10/7, 9\n(6) - (4) = 2, left: 2, 9, 7\n(6) / (4) = 3/2, left: 3/2, 9, 7\n(7) / (3/2) = 14/3, left: 14/3, 9\n(9) + (7) = 16, left: 16, 3/2\n(3/2) * (16) = 24, left: 24\nreach 24! expression: ((6 / 4) * (9 + 7))"}, {"input": "9 2 11 5\n", "output": "(9) - (2) = 7, left: 7, 11, 5\n(5) - (7) = -2, left: -2, 11\n(11) - (-2) = 13, left: 13\n(-2) - (11) = -13, left: -13\n(-2) / (11) = -2/11, left: -2/11\n(5) * (7) = 35, left: 35, 11\n(11) + (35) = 46, left: 46\n(11) - (35) = -24, left: -24\n(11) * (35) = 385, left: 385\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (9 - 2)) - 11)"}, {"input": "9 2 11 5\n", "output": "(9) * (11) = 99, left: 99, 2, 5\n(99) / (2) = 99/2, left: 99/2, 5\n(2) + (99) = 101, left: 101, 5\n(9) / (11) = 9/11, left: 9/11, 2, 5\n(9/11) - (2) = -13/11, left: -13/11, 5\n(9) - (11) = -2, left: -2, 2, 5\n(11) / (9) = 11/9, left: 11/9, 2, 5\n(5) - (2) = 3, left: 3, 9, 11\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (5 - 2)) - 9)"}, {"input": "9 2 11 5\n", "output": "(2) + (11) = 13, left: 13, 9, 5\n(2) * (11) = 22, left: 22, 9, 5\n(11) / (9) = 11/9, left: 11/9, 2, 5\n(5) / (11) = 5/11, left: 5/11, 9, 2\n(11) + (5) = 16, left: 16, 9, 2\n(11) * (5) = 55, left: 55, 9, 2\n(9) / (2) = 9/2, left: 9/2, 55\n(5) - (11) = -6, left: -6, 9, 2\n(9) * (2) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((9 * 2) - (5 - 11))"}, {"input": "9 2 11 5\n", "output": "(9) - (5) = 4, left: 4, 2, 11\n(11) / (4) = 11/4, left: 11/4, 2\n(9) * (5) = 45, left: 45, 2, 11\n(9) / (5) = 9/5, left: 9/5, 2, 11\n(11) / (9/5) = 55/9, left: 55/9, 2\n(9) + (5) = 14, left: 14, 2, 11\n(2) * (14) = 28, left: 28, 11\n(9) - (2) = 7, left: 7, 11, 5\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * (9 - 2)) - 11)"}, {"input": "9 2 11 5\n", "output": "(11) - (2) = 9, left: 9, 9, 5\n(11) / (2) = 11/2, left: 11/2, 9, 5\n(9) * (11) = 99, left: 99, 2, 5\n(9) + (11) = 20, left: 20, 2, 5\n(5) * (20) = 100, left: 100, 2\n(11) - (9) = 2, left: 2, 2, 5\n(5) - (9) = -4, left: -4, 2, 11\n(9) * (2) = 18, left: 18, 11, 5\n(18) - (5) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((9 * 2) - 5))"}, {"input": "9 2 11 5\n", "output": "(2) + (11) = 13, left: 13, 9, 5\n(2) * (11) = 22, left: 22, 9, 5\n(9) / (5) = 9/5, left: 9/5, 22\n(11) / (9) = 11/9, left: 11/9, 2, 5\n(9) - (11) = -2, left: -2, 2, 5\n(11) - (9) = 2, left: 2, 2, 5\n(5) / (2) = 5/2, left: 5/2, 2\n(2) + (5/2) = 9/2, left: 9/2\n(9) + (5) = 14, left: 14, 2, 11\n(9) - (5) = 4, left: 4, 2, 11\n(9) + (2) = 11, left: 11, 11, 5\n(9) * (2) = 18, left: 18, 11, 5\n(18) - (5) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((9 * 2) - 5))"}, {"input": "9 11 11 2\n", "output": "(9) * (11) = 99, left: 99, 11, 2\n(11) / (99) = 1/9, left: 1/9, 2\n(2) * (1/9) = 2/9, left: 2/9\n(11) / (9) = 11/9, left: 11/9, 11, 2\n(2) * (11/9) = 22/9, left: 22/9, 11\n(9) + (11) = 20, left: 20, 11, 2\n(2) / (11) = 2/11, left: 2/11, 20\n(11) - (9) = 2, left: 2, 11, 2\n(11) * (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (11 * (11 - 9)))"}, {"input": "9 11 11 2\n", "output": "(2) - (11) = -9, left: -9, 9, 11\n(9) / (-9) = -1, left: -1, 11\n(9) + (-9) = 0, left: 0, 11\n(9) * (-9) = -81, left: -81, 11\n(11) / (9) = 11/9, left: 11/9, -9\n(11) * (-9) = -99, left: -99, 9\n(11) / (-9) = -11/9, left: -11/9, 9\n(11) * (2) = 22, left: 22, 9, 11\n(11) - (9) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 * 2) + (11 - 9))"}, {"input": "9 11 11 2\n", "output": "(11) + (11) = 22, left: 22, 9, 2\n(11) - (11) = 0, left: 0, 9, 2\n(2) / (9) = 2/9, left: 2/9, 11, 11\n(9) / (2) = 9/2, left: 9/2, 11, 11\n(9) * (2) = 18, left: 18, 11, 11\n(9) * (11) = 99, left: 99, 11, 2\n(99) - (2) = 97, left: 97, 11\n(11) - (9) = 2, left: 2, 11, 2\n(11) * (2) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((11 - 9) + (11 * 2))"}, {"input": "9 11 11 2\n", "output": "(9) + (11) = 20, left: 20, 11, 2\n(2) + (20) = 22, left: 22, 11\n(20) - (2) = 18, left: 18, 11\n(20) - (11) = 9, left: 9, 2\n(9) - (2) = 7, left: 7\n(11) * (20) = 220, left: 220, 2\n(9) - (11) = -2, left: -2, 11, 2\n(-2) - (11) = -13, left: -13, 2\n(11) * (-2) = -22, left: -22, 2\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (11 * (9 - 11)))"}, {"input": "9 11 11 2\n", "output": "(11) + (2) = 13, left: 13, 9, 11\n(11) / (13) = 11/13, left: 11/13, 9\n(11) - (2) = 9, left: 9, 9, 11\n(9) / (9) = 1, left: 1, 11\n(9) + (9) = 18, left: 18, 11\n(11) + (18) = 29, left: 29\n(9) * (9) = 81, left: 81, 11\n(11) * (2) = 22, left: 22, 9, 11\n(9) - (22) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (9 - (11 * 2)))"}, {"input": "2 1 6 6\n", "output": "(1) / (6) = 1/6, left: 1/6, 2, 6\n(2) - (1/6) = 11/6, left: 11/6, 6\n(6) * (11/6) = 11, left: 11\n(1/6) - (6) = -35/6, left: -35/6, 2\n(6) - (2) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((6 - 2) / (1 / 6))"}, {"input": "2 1 6 6\n", "output": "(1) / (6) = 1/6, left: 1/6, 2, 6\n(2) * (1/6) = 1/3, left: 1/3, 6\n(6) + (1/3) = 19/3, left: 19/3\n(2) + (1/6) = 13/6, left: 13/6, 6\n(6) / (13/6) = 36/13, left: 36/13\n(2) / (1/6) = 12, left: 12, 6\n(1/6) - (6) = -35/6, left: -35/6, 2\n(2) * (6) = 12, left: 12, 1/6\n(6) - (2) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((6 - 2) / (1 / 6))"}, {"input": "2 1 6 6\n", "output": "(1) * (6) = 6, left: 6, 2, 6\n(2) + (6) = 8, left: 8, 6\n(6) * (8) = 48, left: 48\n(6) + (8) = 14, left: 14\n(8) / (6) = 4/3, left: 4/3\n(2) * (6) = 12, left: 12, 6\n(6) + (12) = 18, left: 18\n(6) / (12) = 1/2, left: 1/2\n(6) - (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((1 * 6) * (6 - 2))"}, {"input": "2 1 6 6\n", "output": "(2) * (6) = 12, left: 12, 1, 6\n(6) / (12) = 1/2, left: 1/2, 1\n(2) - (6) = -4, left: -4, 1, 6\n(1) - (6) = -5, left: -5, -4\n(-4) + (-5) = -9, left: -9\n(2) / (6) = 1/3, left: 1/3, 1, 6\n(1) / (6) = 1/6, left: 1/6, 1/3\n(6) - (2) = 4, left: 4, 1, 6\n(1) / (4) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (1 / (6 - 2)))"}, {"input": "2 1 6 6\n", "output": "(2) * (6) = 12, left: 12, 1, 6\n(6) * (12) = 72, left: 72, 1\n(12) / (6) = 2, left: 2, 1\n(12) / (1) = 12, left: 12, 6\n(1) * (6) = 6, left: 6, 12\n(6) / (1) = 6, left: 6, 12\n(6) / (2) = 3, left: 3, 1, 6\n(1) - (3) = -2, left: -2, 6\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (6 / 2)))"}, {"input": "2 1 6 6\n", "output": "(6) / (6) = 1, left: 1, 2, 1\n(1) - (2) = -1, left: -1, 1\n(1) / (2) = 1/2, left: 1/2, 1\n(2) + (1) = 3, left: 3, 1\n(1) * (3) = 3, left: 3\n(1) / (1) = 1, left: 1, 2\n(2) * (1) = 2, left: 2\n(6) + (6) = 12, left: 12, 2, 1\n(2) * (12) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (2 * (6 + 6)))"}, {"input": "2 1 6 6\n", "output": "(6) / (6) = 1, left: 1, 2, 1\n(2) / (1) = 2, left: 2, 1\n(2) - (1) = 1, left: 1, 1\n(2) + (1) = 3, left: 3, 1\n(2) * (1) = 2, left: 2, 1\n(1) - (1) = 0, left: 0, 2\n(2) + (0) = 2, left: 2\n(1) * (1) = 1, left: 1, 2\n(2) / (1) = 2, left: 2\n(1) + (1) = 2, left: 2, 2\n(2) * (1) = 2, left: 2, 1\n(6) + (6) = 12, left: 12, 2, 1\n(2) * (12) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (2 * (6 + 6)))"}, {"input": "12 11 6 9\n", "output": "(11) + (6) = 17, left: 17, 12, 9\n(9) * (17) = 153, left: 153, 12\n(9) - (12) = -3, left: -3, 11, 6\n(9) - (6) = 3, left: 3, 12, 11\n(11) * (9) = 99, left: 99, 12, 6\n(12) / (99) = 4/33, left: 4/33, 6\n(11) / (9) = 11/9, left: 11/9, 12, 6\n(9) - (11) = -2, left: -2, 12, 6\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (9 - 11)))"}, {"input": "12 11 6 9\n", "output": "(6) * (9) = 54, left: 54, 12, 11\n(12) - (9) = 3, left: 3, 11, 6\n(6) / (12) = 1/2, left: 1/2, 11, 9\n(12) - (6) = 6, left: 6, 11, 9\n(12) + (6) = 18, left: 18, 11, 9\n(11) * (6) = 66, left: 66, 12, 9\n(6) - (11) = -5, left: -5, 12, 9\n(9) - (11) = -2, left: -2, 12, 6\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (9 - 11)))"}, {"input": "12 11 6 9\n", "output": "(12) - (6) = 6, left: 6, 11, 9\n(11) / (6) = 11/6, left: 11/6, 9\n(6) - (12) = -6, left: -6, 11, 9\n(11) / (6) = 11/6, left: 11/6, 12, 9\n(6) / (9) = 2/3, left: 2/3, 12, 11\n(12) * (11) = 132, left: 132, 6, 9\n(132) - (6) = 126, left: 126, 9\n(11) - (9) = 2, left: 2, 12, 6\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (6 * (11 - 9)))"}, {"input": "12 11 6 9\n", "output": "(12) - (6) = 6, left: 6, 11, 9\n(9) * (6) = 54, left: 54, 11\n(11) / (54) = 11/54, left: 11/54\n(11) / (6) = 11/6, left: 11/6, 12, 9\n(9) - (12) = -3, left: -3, 11/6\n(6) / (11) = 6/11, left: 6/11, 12, 9\n(9) - (6) = 3, left: 3, 12, 11\n(9) - (11) = -2, left: -2, 12, 6\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (9 - 11)))"}, {"input": "12 11 6 9\n", "output": "(12) + (6) = 18, left: 18, 11, 9\n(9) / (18) = 1/2, left: 1/2, 11\n(12) - (6) = 6, left: 6, 11, 9\n(11) - (12) = -1, left: -1, 6, 9\n(12) + (11) = 23, left: 23, 6, 9\n(9) / (12) = 3/4, left: 3/4, 11, 6\n(12) * (9) = 108, left: 108, 11, 6\n(9) - (11) = -2, left: -2, 12, 6\n(6) * (-2) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (6 * (9 - 11)))"}, {"input": "1 7 10 3\n", "output": "(7) - (10) = -3, left: -3, 1, 3\n(1) + (3) = 4, left: 4, -3\n(1) - (3) = -2, left: -2, -3\n(10) + (3) = 13, left: 13, 1, 7\n(10) - (3) = 7, left: 7, 1, 7\n(1) / (7) = 1/7, left: 1/7, 7\n(3) - (10) = -7, left: -7, 1, 7\n(10) * (3) = 30, left: 30, 1, 7\n(1) + (30) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((1 + (10 * 3)) - 7)"}, {"input": "1 7 10 3\n", "output": "(3) / (10) = 3/10, left: 3/10, 1, 7\n(10) / (3) = 10/3, left: 10/3, 1, 7\n(1) * (7) = 7, left: 7, 10/3\n(10) + (3) = 13, left: 13, 1, 7\n(7) / (13) = 7/13, left: 7/13, 1\n(13) - (1) = 12, left: 12, 7\n(10) - (3) = 7, left: 7, 1, 7\n(10) * (3) = 30, left: 30, 1, 7\n(1) - (7) = -6, left: -6, 30\n(30) + (-6) = 24, left: 24\nreach 24! expression: ((10 * 3) + (1 - 7))"}, {"input": "1 7 10 3\n", "output": "(7) * (3) = 21, left: 21, 1, 10\n(1) - (10) = -9, left: -9, 21\n(7) + (3) = 10, left: 10, 1, 10\n(1) * (10) = 10, left: 10, 10\n(1) / (3) = 1/3, left: 1/3, 7, 10\n(7) / (1/3) = 21, left: 21, 10\n(1) + (3) = 4, left: 4, 7, 10\n(1) - (3) = -2, left: -2, 7, 10\n(7) * (-2) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (7 * (1 - 3)))"}, {"input": "1 7 10 3\n", "output": "(10) - (1) = 9, left: 9, 7, 3\n(9) - (3) = 6, left: 6, 7\n(3) / (7) = 3/7, left: 3/7, 1, 10\n(10) * (3/7) = 30/7, left: 30/7, 1\n(7) + (3) = 10, left: 10, 1, 10\n(1) * (10) = 10, left: 10, 10\n(3) / (1) = 3, left: 3, 7, 10\n(3) - (1) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (3 - 1)))"}, {"input": "1 7 10 3\n", "output": "(7) * (10) = 70, left: 70, 1, 3\n(7) + (10) = 17, left: 17, 1, 3\n(3) - (7) = -4, left: -4, 1, 10\n(7) * (3) = 21, left: 21, 1, 10\n(3) / (7) = 3/7, left: 3/7, 1, 10\n(7) + (3) = 10, left: 10, 1, 10\n(1) + (10) = 11, left: 11, 10\n(10) * (3) = 30, left: 30, 1, 7\n(1) + (30) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((1 + (10 * 3)) - 7)"}, {"input": "1 7 10 3\n", "output": "(10) / (1) = 10, left: 10, 7, 3\n(3) - (7) = -4, left: -4, 10\n(1) + (10) = 11, left: 11, 7, 3\n(3) - (7) = -4, left: -4, 1, 10\n(7) / (3) = 7/3, left: 7/3, 1, 10\n(7) * (3) = 21, left: 21, 1, 10\n(10) / (21) = 10/21, left: 10/21, 1\n(3) / (7) = 3/7, left: 3/7, 1, 10\n(3) / (1) = 3, left: 3, 7, 10\n(7) - (10) = -3, left: -3, 3\n(-3) / (3) = -1, left: -1\n(3) - (1) = 2, left: 2, 7, 10\n(7) * (2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (7 * (3 - 1)))"}, {"input": "1 7 10 3\n", "output": "(7) + (10) = 17, left: 17, 1, 3\n(10) - (7) = 3, left: 3, 1, 3\n(7) / (10) = 7/10, left: 7/10, 1, 3\n(1) + (7/10) = 17/10, left: 17/10, 3\n(7) - (10) = -3, left: -3, 1, 3\n(3) - (-3) = 6, left: 6, 1\n(3) - (7) = -4, left: -4, 1, 10\n(7) * (3) = 21, left: 21, 1, 10\n(7) + (3) = 10, left: 10, 1, 10\n(10) / (1) = 10, left: 10, 10\n(1) * (10) = 10, left: 10, 10\n(10) * (3) = 30, left: 30, 1, 7\n(1) + (30) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((1 + (10 * 3)) - 7)"}, {"input": "13 6 3 6\n", "output": "(6) + (3) = 9, left: 9, 13, 6\n(6) - (9) = -3, left: -3, 13\n(6) / (13) = 6/13, left: 6/13, 9\n(9) - (6/13) = 111/13, left: 111/13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (6 + 3)))"}, {"input": "13 6 3 6\n", "output": "(13) - (3) = 10, left: 10, 6, 6\n(6) + (6) = 12, left: 12, 10\n(10) - (12) = -2, left: -2\n(6) / (6) = 1, left: 1, 10\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 3) - 6))"}, {"input": "13 6 3 6\n", "output": "(13) / (3) = 13/3, left: 13/3, 6, 6\n(13/3) - (6) = -5/3, left: -5/3, 6\n(6) / (-5/3) = -18/5, left: -18/5\n(13) - (3) = 10, left: 10, 6, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 3) - 6))"}, {"input": "13 6 3 6\n", "output": "(3) + (6) = 9, left: 9, 13, 6\n(9) - (6) = 3, left: 3, 13\n(6) - (9) = -3, left: -3, 13\n(13) - (-3) = 16, left: 16\n(6) - (13) = -7, left: -7, 9\n(9) / (13) = 9/13, left: 9/13, 6\n(13) / (9) = 13/9, left: 13/9, 6\n(13) - (9) = 4, left: 4, 6\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (3 + 6)))"}, {"input": "13 6 3 6\n", "output": "(3) - (13) = -10, left: -10, 6, 6\n(13) / (3) = 13/3, left: 13/3, 6, 6\n(6) * (6) = 36, left: 36, 13/3\n(13/3) * (36) = 156, left: 156\n(13) * (3) = 39, left: 39, 6, 6\n(6) - (6) = 0, left: 0, 39\n(0) - (39) = -39, left: -39\n(13) - (3) = 10, left: 10, 6, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 3) - 6))"}, {"input": "13 6 3 6\n", "output": "(13) * (3) = 39, left: 39, 6, 6\n(39) / (6) = 13/2, left: 13/2, 6\n(6) + (39) = 45, left: 45, 6\n(13) / (3) = 13/3, left: 13/3, 6, 6\n(6) * (13/3) = 26, left: 26, 6\n(3) - (13) = -10, left: -10, 6, 6\n(6) - (-10) = 16, left: 16, 6\n(13) - (3) = 10, left: 10, 6, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 3) - 6))"}, {"input": "13 6 3 6\n", "output": "(6) + (3) = 9, left: 9, 13, 6\n(6) * (9) = 54, left: 54, 13\n(13) * (54) = 702, left: 702\n(13) - (6) = 7, left: 7, 9\n(9) * (7) = 63, left: 63\n(6) / (13) = 6/13, left: 6/13, 9\n(9) - (13) = -4, left: -4, 6\n(-4) / (6) = -2/3, left: -2/3\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (13 - (6 + 3)))"}, {"input": "13 6 3 6\n", "output": "(13) - (3) = 10, left: 10, 6, 6\n(6) / (6) = 1, left: 1, 10\n(6) - (6) = 0, left: 0, 10\n(0) / (10) = 0, left: 0\n(6) * (6) = 36, left: 36, 10\n(6) / (6) = 1, left: 1, 10\n(10) / (1) = 10, left: 10\n(1) - (10) = -9, left: -9\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((13 - 3) - 6))"}, {"input": "12 12 6 4\n", "output": "(12) - (6) = 6, left: 6, 12, 4\n(4) * (6) = 24, left: 24, 12\n(6) / (4) = 3/2, left: 3/2, 12\n(6) - (4) = 2, left: 2, 12\n(12) / (2) = 6, left: 6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((12 - 6) - 4))"}, {"input": "12 12 6 4\n", "output": "(12) / (6) = 2, left: 2, 12, 4\n(12) + (4) = 16, left: 16, 2\n(4) - (12) = -8, left: -8, 2\n(12) * (4) = 48, left: 48, 2\n(2) + (48) = 50, left: 50\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (12 / 6))"}, {"input": "12 12 6 4\n", "output": "(12) * (4) = 48, left: 48, 12, 6\n(6) + (48) = 54, left: 54, 12\n(12) * (54) = 648, left: 648\n(6) / (48) = 1/8, left: 1/8, 12\n(6) * (48) = 288, left: 288, 12\n(288) / (12) = 24, left: 24\nreach 24! expression: ((6 * (12 * 4)) / 12)"}, {"input": "12 12 6 4\n", "output": "(12) * (4) = 48, left: 48, 12, 6\n(6) / (48) = 1/8, left: 1/8, 12\n(12) / (1/8) = 96, left: 96\n(12) * (1/8) = 3/2, left: 3/2\n(48) - (6) = 42, left: 42, 12\n(42) - (12) = 30, left: 30\n(48) / (6) = 8, left: 8, 12\n(12) / (8) = 3/2, left: 3/2\n(6) * (48) = 288, left: 288, 12\n(288) / (12) = 24, left: 24\nreach 24! expression: ((6 * (12 * 4)) / 12)"}, {"input": "12 12 6 4\n", "output": "(12) / (6) = 2, left: 2, 12, 4\n(12) + (4) = 16, left: 16, 2\n(4) - (12) = -8, left: -8, 2\n(-8) - (2) = -10, left: -10\n(-8) / (2) = -4, left: -4\n(2) + (-8) = -6, left: -6\n(12) * (4) = 48, left: 48, 2\n(2) - (48) = -46, left: -46\n(2) + (48) = 50, left: 50\n(48) / (2) = 24, left: 24\nreach 24! expression: ((12 * 4) / (12 / 6))"}, {"input": "12 12 6 4\n", "output": "(4) - (6) = -2, left: -2, 12, 12\n(-2) / (12) = -1/6, left: -1/6, 12\n(12) * (-2) = -24, left: -24, 12\n(12) / (12) = 1, left: 1, -2\n(6) - (4) = 2, left: 2, 12, 12\n(2) - (12) = -10, left: -10, 12\n(-10) - (12) = -22, left: -22\n(6) + (4) = 10, left: 10, 12, 12\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (12 - (6 + 4)))"}, {"input": "12 12 6 4\n", "output": "(12) - (6) = 6, left: 6, 12, 4\n(4) * (6) = 24, left: 24, 12\n(4) + (6) = 10, left: 10, 12\n(12) * (10) = 120, left: 120\n(6) / (4) = 3/2, left: 3/2, 12\n(3/2) - (12) = -21/2, left: -21/2\n(4) - (6) = -2, left: -2, 12\n(12) * (-2) = -24, left: -24\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((12 - 6) - 4))"}, {"input": "6 5 4 6\n", "output": "(5) - (6) = -1, left: -1, 4, 6\n(6) + (5) = 11, left: 11, 4, 6\n(11) - (6) = 5, left: 5, 4\n(6) / (5) = 6/5, left: 6/5, 4, 6\n(6) - (6/5) = 24/5, left: 24/5, 4\n(5) / (6) = 5/6, left: 5/6, 4, 6\n(6) + (5/6) = 41/6, left: 41/6, 4\n(6) - (5) = 1, left: 1, 4, 6\n(4) * (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (4 * (6 - 5)))"}, {"input": "6 5 4 6\n", "output": "(4) + (6) = 10, left: 10, 6, 5\n(6) * (5) = 30, left: 30, 10\n(10) * (30) = 300, left: 300\n(10) - (6) = 4, left: 4, 5\n(4) * (6) = 24, left: 24, 6, 5\n(5) + (24) = 29, left: 29, 6\n(6) / (24) = 1/4, left: 1/4, 5\n(6) + (5) = 11, left: 11, 24\n(6) - (5) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((4 * 6) * (6 - 5))"}, {"input": "6 5 4 6\n", "output": "(6) / (4) = 3/2, left: 3/2, 6, 5\n(5) * (3/2) = 15/2, left: 15/2, 6\n(3/2) - (5) = -7/2, left: -7/2, 6\n(6) - (4) = 2, left: 2, 6, 5\n(6) * (5) = 30, left: 30, 2\n(4) - (6) = -2, left: -2, 6, 5\n(6) - (-2) = 8, left: 8, 5\n(4) * (6) = 24, left: 24, 6, 5\n(6) - (5) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((4 * 6) / (6 - 5))"}, {"input": "6 5 4 6\n", "output": "(6) * (5) = 30, left: 30, 4, 6\n(30) - (6) = 24, left: 24, 4\n(6) + (30) = 36, left: 36, 4\n(36) / (4) = 9, left: 9\n(4) * (30) = 120, left: 120, 6\n(4) / (30) = 2/15, left: 2/15, 6\n(4) + (6) = 10, left: 10, 30\n(6) - (5) = 1, left: 1, 4, 6\n(6) / (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (6 / (6 - 5)))"}, {"input": "6 5 4 6\n", "output": "(5) * (6) = 30, left: 30, 6, 4\n(30) - (4) = 26, left: 26, 6\n(4) / (30) = 2/15, left: 2/15, 6\n(6) / (2/15) = 45, left: 45\n(4) - (6) = -2, left: -2, 30\n(6) - (4) = 2, left: 2, 30\n(30) - (6) = 24, left: 24, 4\n(6) - (5) = 1, left: 1, 6, 4\n(4) * (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (4 * (6 - 5)))"}, {"input": "6 5 4 6\n", "output": "(5) - (6) = -1, left: -1, 4, 6\n(6) + (5) = 11, left: 11, 4, 6\n(4) / (11) = 4/11, left: 4/11, 6\n(6) / (5) = 6/5, left: 6/5, 4, 6\n(6/5) - (4) = -14/5, left: -14/5, 6\n(6) / (6/5) = 5, left: 5, 4\n(6) * (5) = 30, left: 30, 4, 6\n(4) + (6) = 10, left: 10, 30\n(30) + (10) = 40, left: 40\n(5) / (6) = 5/6, left: 5/6, 4, 6\n(6) - (5/6) = 31/6, left: 31/6, 4\n(6) - (5) = 1, left: 1, 4, 6\n(4) * (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (4 * (6 - 5)))"}, {"input": "10 9 3 10\n", "output": "(10) / (3) = 10/3, left: 10/3, 10, 9\n(10) / (9) = 10/9, left: 10/9, 10, 3\n(10/9) - (3) = -17/9, left: -17/9, 10\n(10) / (10) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "10 9 3 10\n", "output": "(10) * (10) = 100, left: 100, 9, 3\n(3) - (100) = -97, left: -97, 9\n(3) - (9) = -6, left: -6, 100\n(10) / (10) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "10 9 3 10\n", "output": "(3) / (10) = 3/10, left: 3/10, 10, 9\n(3) / (10) = 3/10, left: 3/10, 9, 10\n(10) / (9) = 10/9, left: 10/9, 10, 3\n(10) * (10/9) = 100/9, left: 100/9, 3\n(9) + (10) = 19, left: 19, 10, 3\n(3) / (10) = 3/10, left: 3/10, 19\n(19) + (3/10) = 193/10, left: 193/10\n(10) / (10) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "10 9 3 10\n", "output": "(10) - (9) = 1, left: 1, 3, 10\n(3) / (10) = 3/10, left: 3/10, 9, 10\n(10) / (9) = 10/9, left: 10/9, 10, 3\n(9) - (10) = -1, left: -1, 10, 3\n(9) * (10) = 90, left: 90, 10, 3\n(90) - (10) = 80, left: 80, 3\n(3) - (80) = -77, left: -77\n(10) / (10) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "10 9 3 10\n", "output": "(10) + (10) = 20, left: 20, 9, 3\n(3) + (20) = 23, left: 23, 9\n(9) - (23) = -14, left: -14\n(20) - (3) = 17, left: 17, 9\n(10) * (10) = 100, left: 100, 9, 3\n(3) / (100) = 3/100, left: 3/100, 9\n(10) / (10) = 1, left: 1, 9, 3\n(1) - (9) = -8, left: -8, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "10 9 3 10\n", "output": "(10) / (9) = 10/9, left: 10/9, 10, 3\n(9) + (10) = 19, left: 19, 10, 3\n(3) + (19) = 22, left: 22, 10\n(10) * (22) = 220, left: 220\n(10) / (19) = 10/19, left: 10/19, 3\n(9) - (3) = 6, left: 6, 10, 10\n(10) * (3) = 30, left: 30, 9, 10\n(10) / (10) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "10 9 3 10\n", "output": "(3) / (10) = 3/10, left: 3/10, 9, 10\n(3) / (10) = 3/10, left: 3/10, 10, 9\n(3) + (10) = 13, left: 13, 10, 9\n(10) - (10) = 0, left: 0, 9, 3\n(9) + (3) = 12, left: 12, 0\n(10) + (10) = 20, left: 20, 9, 3\n(9) - (3) = 6, left: 6, 20\n(10) / (10) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "10 9 3 10\n", "output": "(10) - (9) = 1, left: 1, 3, 10\n(3) * (10) = 30, left: 30, 10, 9\n(10) - (3) = 7, left: 7, 10, 9\n(10) * (7) = 70, left: 70, 9\n(10) - (3) = 7, left: 7, 9, 10\n(10) * (3) = 30, left: 30, 9, 10\n(9) * (30) = 270, left: 270, 10\n(10) + (3) = 13, left: 13, 9, 10\n(10) - (9) = 1, left: 1, 13\n(3) - (9) = -6, left: -6, 10, 10\n(9) * (3) = 27, left: 27, 10, 10\n(10) / (10) = 1, left: 1, 9, 3\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "8 7 3 12\n", "output": "(8) + (12) = 20, left: 20, 7, 3\n(7) + (3) = 10, left: 10, 20\n(20) * (10) = 200, left: 200\n(10) / (20) = 1/2, left: 1/2\n(7) - (3) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((8 + 12) + (7 - 3))"}, {"input": "8 7 3 12\n", "output": "(3) / (12) = 1/4, left: 1/4, 8, 7\n(1/4) / (7) = 1/28, left: 1/28, 8\n(8) * (1/4) = 2, left: 2, 7\n(8) / (1/4) = 32, left: 32, 7\n(3) + (12) = 15, left: 15, 8, 7\n(8) * (15) = 120, left: 120, 7\n(7) - (120) = -113, left: -113\n(12) - (3) = 9, left: 9, 8, 7\n(8) + (9) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (8 + (12 - 3)))"}, {"input": "8 7 3 12\n", "output": "(8) + (12) = 20, left: 20, 7, 3\n(3) / (7) = 3/7, left: 3/7, 20\n(3/7) - (20) = -137/7, left: -137/7\n(20) - (3/7) = 137/7, left: 137/7\n(3/7) / (20) = 3/140, left: 3/140\n(7) + (3) = 10, left: 10, 20\n(10) - (20) = -10, left: -10\n(20) * (10) = 200, left: 200\n(7) - (3) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((8 + 12) + (7 - 3))"}, {"input": "8 7 3 12\n", "output": "(12) / (3) = 4, left: 4, 8, 7\n(8) / (7) = 8/7, left: 8/7, 4\n(8) - (7) = 1, left: 1, 4\n(4) / (1) = 4, left: 4\n(4) - (7) = -3, left: -3, 8\n(8) * (-3) = -24, left: -24\n(4) / (7) = 4/7, left: 4/7, 8\n(7) / (4) = 7/4, left: 7/4, 8\n(7) - (4) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (7 - (12 / 3)))"}, {"input": "8 7 3 12\n", "output": "(8) - (12) = -4, left: -4, 7, 3\n(7) - (-4) = 11, left: 11, 3\n(7) - (3) = 4, left: 4, -4\n(4) - (-4) = 8, left: 8\n(8) / (12) = 2/3, left: 2/3, 7, 3\n(7) + (3) = 10, left: 10, 2/3\n(8) * (12) = 96, left: 96, 7, 3\n(3) - (96) = -93, left: -93, 7\n(7) - (3) = 4, left: 4, 96\n(96) / (4) = 24, left: 24\nreach 24! expression: ((8 * 12) / (7 - 3))"}, {"input": "4 2 5 13\n", "output": "(4) * (5) = 20, left: 20, 2, 13\n(13) + (20) = 33, left: 33, 2\n(2) * (20) = 40, left: 40, 13\n(13) / (2) = 13/2, left: 13/2, 20\n(13/2) - (20) = -27/2, left: -27/2\n(5) - (4) = 1, left: 1, 2, 13\n(2) - (13) = -11, left: -11, 1\n(2) + (13) = 15, left: 15, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (5 - 4)))"}, {"input": "4 2 5 13\n", "output": "(4) * (2) = 8, left: 8, 5, 13\n(5) / (13) = 5/13, left: 5/13, 8\n(2) / (4) = 1/2, left: 1/2, 5, 13\n(4) - (2) = 2, left: 2, 5, 13\n(4) / (2) = 2, left: 2, 5, 13\n(13) - (2) = 11, left: 11, 5\n(2) - (4) = -2, left: -2, 5, 13\n(4) + (2) = 6, left: 6, 5, 13\n(5) + (13) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((4 + 2) + (5 + 13))"}, {"input": "4 2 5 13\n", "output": "(4) * (5) = 20, left: 20, 2, 13\n(20) / (2) = 10, left: 10, 13\n(13) / (20) = 13/20, left: 13/20, 2\n(13/20) - (2) = -27/20, left: -27/20\n(13) / (2) = 13/2, left: 13/2, 20\n(13) - (2) = 11, left: 11, 20\n(20) + (11) = 31, left: 31\n(4) - (5) = -1, left: -1, 2, 13\n(13) + (-1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 + (4 - 5)))"}, {"input": "4 2 5 13\n", "output": "(4) + (2) = 6, left: 6, 5, 13\n(5) - (6) = -1, left: -1, 13\n(6) / (5) = 6/5, left: 6/5, 13\n(6/5) - (13) = -59/5, left: -59/5\n(6/5) / (13) = 6/65, left: 6/65\n(5) * (6) = 30, left: 30, 13\n(30) - (13) = 17, left: 17\n(5) + (6) = 11, left: 11, 13\n(13) - (11) = 2, left: 2\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (5 + (4 + 2)))"}, {"input": "4 2 5 13\n", "output": "(2) - (13) = -11, left: -11, 4, 5\n(4) * (-11) = -44, left: -44, 5\n(5) + (-11) = -6, left: -6, 4\n(13) - (2) = 11, left: 11, 4, 5\n(4) * (11) = 44, left: 44, 5\n(11) / (4) = 11/4, left: 11/4, 5\n(4) * (5) = 20, left: 20, 11\n(11) * (20) = 220, left: 220\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((13 - 2) - 5))"}, {"input": "4 12 4 5\n", "output": "(12) / (4) = 3, left: 3, 4, 5\n(4) / (12) = 1/3, left: 1/3, 4, 5\n(4) - (5) = -1, left: -1, 1/3\n(4) + (12) = 16, left: 16, 4, 5\n(5) / (16) = 5/16, left: 5/16, 4\n(4) - (12) = -8, left: -8, 4, 5\n(5) - (4) = 1, left: 1, 12, 4\n(4) + (5) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (4 + 5)) - 12)"}, {"input": "4 12 4 5\n", "output": "(4) - (5) = -1, left: -1, 12, 4\n(12) + (4) = 16, left: 16, -1\n(5) - (4) = 1, left: 1, 12, 4\n(1) - (12) = -11, left: -11, 4\n(4) / (-11) = -4/11, left: -4/11\n(4) + (5) = 9, left: 9, 12, 4\n(12) / (4) = 3, left: 3, 9\n(4) - (12) = -8, left: -8, 9\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (4 + 5)) - 12)"}, {"input": "4 12 4 5\n", "output": "(4) * (5) = 20, left: 20, 12, 4\n(4) * (20) = 80, left: 80, 12\n(5) / (4) = 5/4, left: 5/4, 12, 4\n(12) / (5/4) = 48/5, left: 48/5, 4\n(4) / (5) = 4/5, left: 4/5, 12, 4\n(4/5) - (4) = -16/5, left: -16/5, 12\n(4) / (4/5) = 5, left: 5, 12\n(4) + (5) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (4 + 5)) - 12)"}, {"input": "4 12 4 5\n", "output": "(4) - (5) = -1, left: -1, 12, 4\n(12) / (-1) = -12, left: -12, 4\n(-12) - (4) = -16, left: -16\n(4) * (5) = 20, left: 20, 12, 4\n(20) - (4) = 16, left: 16, 12\n(5) - (4) = 1, left: 1, 12, 4\n(12) * (4) = 48, left: 48, 1\n(4) + (5) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (4 + 5)) - 12)"}, {"input": "4 12 4 5\n", "output": "(5) - (12) = -7, left: -7, 4, 4\n(4) - (4) = 0, left: 0, -7\n(12) + (5) = 17, left: 17, 4, 4\n(4) + (17) = 21, left: 21, 4\n(4) - (4) = 0, left: 0, 17\n(5) / (12) = 5/12, left: 5/12, 4, 4\n(4) + (5/12) = 53/12, left: 53/12, 4\n(12) - (5) = 7, left: 7, 4, 4\n(4) * (7) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((4 * (12 - 5)) - 4)"}, {"input": "4 12 4 5\n", "output": "(12) / (4) = 3, left: 3, 4, 5\n(4) / (12) = 1/3, left: 1/3, 4, 5\n(5) * (1/3) = 5/3, left: 5/3, 4\n(4) * (12) = 48, left: 48, 4, 5\n(4) / (4) = 1, left: 1, 12, 5\n(12) - (1) = 11, left: 11, 5\n(4) - (4) = 0, left: 0, 12, 5\n(4) * (4) = 16, left: 16, 12, 5\n(12) * (5) = 60, left: 60, 16\n(4) + (4) = 8, left: 8, 12, 5\n(5) - (8) = -3, left: -3, 12\n(4) + (5) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (4 + 5)) - 12)"}, {"input": "8 5 11 2\n", "output": "(11) - (5) = 6, left: 6, 8, 2\n(8) + (2) = 10, left: 10, 6\n(10) / (6) = 5/3, left: 5/3\n(10) - (6) = 4, left: 4\n(8) / (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((11 - 5) * (8 / 2))"}, {"input": "8 5 11 2\n", "output": "(11) - (5) = 6, left: 6, 8, 2\n(8) * (2) = 16, left: 16, 6\n(16) - (6) = 10, left: 10\n(6) + (16) = 22, left: 22\n(8) + (2) = 10, left: 10, 6\n(10) - (6) = 4, left: 4\n(6) / (10) = 3/5, left: 3/5\n(6) + (10) = 16, left: 16\n(8) / (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((11 - 5) * (8 / 2))"}, {"input": "8 5 11 2\n", "output": "(11) - (5) = 6, left: 6, 8, 2\n(8) - (6) = 2, left: 2, 2\n(2) - (2) = 0, left: 0\n(2) / (2) = 1, left: 1\n(6) - (8) = -2, left: -2, 2\n(6) / (8) = 3/4, left: 3/4, 2\n(8) * (6) = 48, left: 48, 2\n(2) + (48) = 50, left: 50\n(48) - (2) = 46, left: 46\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * (11 - 5)) / 2)"}, {"input": "8 5 11 2\n", "output": "(11) / (2) = 11/2, left: 11/2, 8, 5\n(8) / (11) = 8/11, left: 8/11, 5, 2\n(8) - (5) = 3, left: 3, 11, 2\n(2) - (3) = -1, left: -1, 11\n(5) / (8) = 5/8, left: 5/8, 11, 2\n(2) - (5) = -3, left: -3, 8, 11\n(-3) - (11) = -14, left: -14, 8\n(8) / (2) = 4, left: 4, 5, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 / 2) * (11 - 5))"}, {"input": "8 5 11 2\n", "output": "(11) / (8) = 11/8, left: 11/8, 5, 2\n(11/8) - (2) = -5/8, left: -5/8, 5\n(8) / (11) = 8/11, left: 8/11, 5, 2\n(8) - (11) = -3, left: -3, 5, 2\n(2) - (5) = -3, left: -3, -3\n(8) / (5) = 8/5, left: 8/5, 11, 2\n(8) + (2) = 10, left: 10, 5, 11\n(2) / (8) = 1/4, left: 1/4, 5, 11\n(11) - (5) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((11 - 5) / (2 / 8))"}, {"input": "8 5 11 2\n", "output": "(2) / (5) = 2/5, left: 2/5, 8, 11\n(2/5) - (11) = -53/5, left: -53/5, 8\n(5) * (2) = 10, left: 10, 8, 11\n(8) + (10) = 18, left: 18, 11\n(5) / (8) = 5/8, left: 5/8, 11, 2\n(5) / (11) = 5/11, left: 5/11, 8, 2\n(2) / (8) = 1/4, left: 1/4, 5/11\n(5) + (11) = 16, left: 16, 8, 2\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (5 + 11)) - 8)"}, {"input": "8 5 11 2\n", "output": "(5) + (2) = 7, left: 7, 8, 11\n(8) * (7) = 56, left: 56, 11\n(11) * (7) = 77, left: 77, 8\n(5) - (2) = 3, left: 3, 8, 11\n(11) / (3) = 11/3, left: 11/3, 8\n(5) * (2) = 10, left: 10, 8, 11\n(8) * (11) = 88, left: 88, 10\n(8) / (5) = 8/5, left: 8/5, 11, 2\n(5) - (8) = -3, left: -3, 11, 2\n(5) / (11) = 5/11, left: 5/11, 8, 2\n(5) + (11) = 16, left: 16, 8, 2\n(8) - (16) = -8, left: -8, 2\n(2) * (16) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((2 * (5 + 11)) - 8)"}, {"input": "1 9 4 3\n", "output": "(3) / (1) = 3, left: 3, 9, 4\n(9) * (3) = 27, left: 27, 4\n(3) / (9) = 1/3, left: 1/3, 4\n(4) / (1/3) = 12, left: 12\n(3) - (9) = -6, left: -6, 4\n(4) - (-6) = 10, left: 10\n(-6) / (4) = -3/2, left: -3/2\n(9) / (3) = 3, left: 3, 4\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (3 / 1)))"}, {"input": "1 9 4 3\n", "output": "(4) + (3) = 7, left: 7, 1, 9\n(3) / (4) = 3/4, left: 3/4, 1, 9\n(3/4) / (1) = 3/4, left: 3/4, 9\n(3) - (4) = -1, left: -1, 1, 9\n(9) + (3) = 12, left: 12, 1, 4\n(12) - (1) = 11, left: 11, 4\n(3) / (9) = 1/3, left: 1/3, 1, 4\n(9) * (3) = 27, left: 27, 1, 4\n(4) - (1) = 3, left: 3, 27\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (4 - 1))"}, {"input": "1 9 4 3\n", "output": "(1) + (3) = 4, left: 4, 9, 4\n(4) - (9) = -5, left: -5, 4\n(9) * (4) = 36, left: 36, 4\n(4) + (4) = 8, left: 8, 9\n(9) * (4) = 36, left: 36, 4\n(1) * (3) = 3, left: 3, 9, 4\n(9) / (3) = 3, left: 3, 4\n(3) - (4) = -1, left: -1\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (1 * 3)))"}, {"input": "1 9 4 3\n", "output": "(4) / (9) = 4/9, left: 4/9, 1, 3\n(1) - (3) = -2, left: -2, 4/9\n(9) / (4) = 9/4, left: 9/4, 1, 3\n(9) + (3) = 12, left: 12, 1, 4\n(3) / (9) = 1/3, left: 1/3, 1, 4\n(4) - (1/3) = 11/3, left: 11/3, 1\n(1) / (4) = 1/4, left: 1/4, 1/3\n(9) * (3) = 27, left: 27, 1, 4\n(27) - (4) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + ((9 * 3) - 4))"}, {"input": "1 9 4 3\n", "output": "(9) - (1) = 8, left: 8, 4, 3\n(4) - (3) = 1, left: 1, 8\n(8) - (4) = 4, left: 4, 3\n(3) * (4) = 12, left: 12\n(1) * (9) = 9, left: 9, 4, 3\n(4) + (3) = 7, left: 7, 9\n(4) / (3) = 4/3, left: 4/3, 9\n(3) * (9) = 27, left: 27, 4\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((1 * 9) - 3))"}, {"input": "1 9 4 3\n", "output": "(1) + (3) = 4, left: 4, 9, 4\n(4) / (4) = 1, left: 1, 9\n(9) * (1) = 9, left: 9\n(4) / (4) = 1, left: 1, 9\n(9) / (4) = 9/4, left: 9/4, 4\n(4) + (9/4) = 25/4, left: 25/4\n(1) * (3) = 3, left: 3, 9, 4\n(9) / (4) = 9/4, left: 9/4, 3\n(9/4) / (3) = 3/4, left: 3/4\n(9) / (3) = 3, left: 3, 4\n(4) * (3) = 12, left: 12\n(4) - (3) = 1, left: 1\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (1 * 3)))"}, {"input": "1 9 4 3\n", "output": "(9) / (4) = 9/4, left: 9/4, 1, 3\n(1) - (9/4) = -5/4, left: -5/4, 3\n(4) - (9) = -5, left: -5, 1, 3\n(3) * (-5) = -15, left: -15, 1\n(9) + (4) = 13, left: 13, 1, 3\n(1) * (3) = 3, left: 3, 13\n(9) - (4) = 5, left: 5, 1, 3\n(5) / (3) = 5/3, left: 5/3, 1\n(9) + (3) = 12, left: 12, 1, 4\n(3) - (9) = -6, left: -6, 1, 4\n(1) * (-6) = -6, left: -6, 4\n(9) * (3) = 27, left: 27, 1, 4\n(27) - (4) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + ((9 * 3) - 4))"}, {"input": "1 9 4 3\n", "output": "(4) + (3) = 7, left: 7, 1, 9\n(4) * (3) = 12, left: 12, 1, 9\n(9) / (1) = 9, left: 9, 12\n(9) - (12) = -3, left: -3\n(4) / (3) = 4/3, left: 4/3, 1, 9\n(4/3) / (9) = 4/27, left: 4/27, 1\n(3) / (4) = 3/4, left: 3/4, 1, 9\n(1) - (9) = -8, left: -8, 3/4\n(3) - (4) = -1, left: -1, 1, 9\n(3) / (9) = 1/3, left: 1/3, 1, 4\n(1) + (1/3) = 4/3, left: 4/3, 4\n(9) * (3) = 27, left: 27, 1, 4\n(4) - (1) = 3, left: 3, 27\n(27) - (3) = 24, left: 24\nreach 24! expression: ((9 * 3) - (4 - 1))"}, {"input": "13 10 11 10\n", "output": "(10) - (13) = -3, left: -3, 11, 10\n(11) / (10) = 11/10, left: 11/10, -3\n(10) - (11) = -1, left: -1, -3\n(10) / (11) = 10/11, left: 10/11, -3\n(11) + (10) = 21, left: 21, -3\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((11 + 10) - (10 - 13))"}, {"input": "13 10 11 10\n", "output": "(11) - (10) = 1, left: 1, 13, 10\n(13) * (1) = 13, left: 13, 10\n(13) - (1) = 12, left: 12, 10\n(10) * (12) = 120, left: 120\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (13 + (11 - 10)))"}, {"input": "13 10 11 10\n", "output": "(10) * (10) = 100, left: 100, 13, 11\n(100) - (13) = 87, left: 87, 11\n(13) * (11) = 143, left: 143, 100\n(10) / (10) = 1, left: 1, 13, 11\n(13) * (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 * (10 / 10)))"}, {"input": "13 10 11 10\n", "output": "(10) - (10) = 0, left: 0, 13, 11\n(11) + (0) = 11, left: 11, 13\n(13) * (11) = 143, left: 143\n(13) - (11) = 2, left: 2\n(11) - (13) = -2, left: -2\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (11 + (10 - 10)))"}, {"input": "13 10 11 10\n", "output": "(10) - (10) = 0, left: 0, 13, 11\n(11) + (0) = 11, left: 11, 13\n(13) * (11) = 143, left: 143\n(13) - (11) = 2, left: 2\n(11) - (13) = -2, left: -2\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (11 + (10 - 10)))"}, {"input": "13 10 11 10\n", "output": "(10) * (10) = 100, left: 100, 13, 11\n(100) / (11) = 100/11, left: 100/11, 13\n(11) - (100) = -89, left: -89, 13\n(-89) / (13) = -89/13, left: -89/13\n(11) / (100) = 11/100, left: 11/100, 13\n(11/100) / (13) = 11/1300, left: 11/1300\n(11) / (13) = 11/13, left: 11/13, 100\n(10) / (10) = 1, left: 1, 13, 11\n(13) * (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 * (10 / 10)))"}, {"input": "13 10 11 10\n", "output": "(11) - (10) = 1, left: 1, 13, 10\n(1) / (13) = 1/13, left: 1/13, 10\n(10) * (1/13) = 10/13, left: 10/13\n(13) * (1) = 13, left: 13, 10\n(13) - (1) = 12, left: 12, 10\n(10) - (12) = -2, left: -2\n(13) / (1) = 13, left: 13, 10\n(10) - (13) = -3, left: -3\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (13 + (11 - 10)))"}, {"input": "13 10 11 10\n", "output": "(10) - (13) = -3, left: -3, 11, 10\n(11) * (10) = 110, left: 110, -3\n(11) - (10) = 1, left: 1, -3\n(-3) / (1) = -3, left: -3\n(-3) * (1) = -3, left: -3\n(11) / (10) = 11/10, left: 11/10, -3\n(11/10) / (-3) = -11/30, left: -11/30\n(11) + (10) = 21, left: 21, -3\n(-3) / (21) = -1/7, left: -1/7\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((11 + 10) - (10 - 13))"}, {"input": "13 10 11 10\n", "output": "(10) - (10) = 0, left: 0, 13, 11\n(11) + (0) = 11, left: 11, 13\n(13) * (11) = 143, left: 143\n(13) - (11) = 2, left: 2\n(11) - (13) = -2, left: -2\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (11 + (10 - 10)))"}, {"input": "13 10 11 10\n", "output": "(10) - (10) = 0, left: 0, 13, 11\n(11) + (0) = 11, left: 11, 13\n(13) * (11) = 143, left: 143\n(13) - (11) = 2, left: 2\n(11) - (13) = -2, left: -2\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (11 + (10 - 10)))"}, {"input": "1 1 4 10\n", "output": "(4) / (1) = 4, left: 4, 1, 10\n(1) / (4) = 1/4, left: 1/4, 1, 10\n(1) / (1/4) = 4, left: 4, 10\n(1) + (1/4) = 5/4, left: 5/4, 10\n(1) + (4) = 5, left: 5, 1, 10\n(5) / (10) = 1/2, left: 1/2, 1\n(10) - (4) = 6, left: 6, 1, 1\n(1) + (1) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(1) / (10) = 1/10, left: 1/10, 1, 4\n(4) / (1/10) = 40, left: 40, 1\n(1/10) - (4) = -39/10, left: -39/10, 1\n(4) / (10) = 2/5, left: 2/5, 1, 1\n(1) - (2/5) = 3/5, left: 3/5, 1\n(10) - (4) = 6, left: 6, 1, 1\n(10) / (1) = 10, left: 10, 1, 4\n(1) + (1) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(4) / (10) = 2/5, left: 2/5, 1, 1\n(1) + (2/5) = 7/5, left: 7/5, 1\n(4) + (10) = 14, left: 14, 1, 1\n(1) / (4) = 1/4, left: 1/4, 1, 10\n(1) * (10) = 10, left: 10, 1/4\n(1) * (10) = 10, left: 10, 1, 4\n(1) / (1) = 1, left: 1, 4, 10\n(1) + (1) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(1) / (1) = 1, left: 1, 4, 10\n(1) / (10) = 1/10, left: 1/10, 4\n(10) * (1) = 10, left: 10, 4\n(10) - (1) = 9, left: 9, 4\n(1) / (1) = 1, left: 1, 4, 10\n(4) * (10) = 40, left: 40, 1\n(4) - (10) = -6, left: -6, 1\n(1) + (1) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(10) - (1) = 9, left: 9, 1, 4\n(10) / (1) = 10, left: 10, 1, 4\n(4) / (1) = 4, left: 4, 10\n(1) + (10) = 11, left: 11, 1, 4\n(1) / (10) = 1/10, left: 1/10, 1, 4\n(1) * (1) = 1, left: 1, 4, 10\n(1) / (1) = 1, left: 1, 4, 10\n(1) + (1) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(1) - (4) = -3, left: -3, 1, 10\n(10) + (-3) = 7, left: 7, 1\n(1) + (7) = 8, left: 8\n(4) / (1) = 4, left: 4, 1, 10\n(4) - (1) = 3, left: 3, 1, 10\n(1) + (4) = 5, left: 5, 1, 10\n(1) / (4) = 1/4, left: 1/4, 1, 10\n(1) + (10) = 11, left: 11, 1/4\n(10) - (1) = 9, left: 9, 1, 4\n(10) / (1) = 10, left: 10, 1, 4\n(1) / (1) = 1, left: 1, 4, 10\n(1) + (1) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(1) + (4) = 5, left: 5, 1, 10\n(1) - (5) = -4, left: -4, 10\n(10) / (4) = 5/2, left: 5/2, 1, 1\n(4) + (10) = 14, left: 14, 1, 1\n(1) + (1) = 2, left: 2, 14\n(4) - (10) = -6, left: -6, 1, 1\n(1) / (1) = 1, left: 1, -6\n(4) * (10) = 40, left: 40, 1, 1\n(1) * (1) = 1, left: 1, 4, 10\n(4) - (10) = -6, left: -6, 1\n(1) + (1) = 2, left: 2, 4, 10\n(4) - (2) = 2, left: 2, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(1) / (4) = 1/4, left: 1/4, 1, 10\n(10) - (1) = 9, left: 9, 1/4\n(4) - (1) = 3, left: 3, 1, 10\n(1) - (4) = -3, left: -3, 1, 10\n(1) + (10) = 11, left: 11, -3\n(1) + (10) = 11, left: 11, 1, 4\n(1) * (10) = 10, left: 10, 1, 4\n(4) - (1) = 3, left: 3, 10\n(10) / (3) = 10/3, left: 10/3\n(1) - (1) = 0, left: 0, 4, 10\n(1) * (1) = 1, left: 1, 4, 10\n(1) + (1) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(10) / (1) = 10, left: 10, 1, 4\n(1) / (10) = 1/10, left: 1/10, 1, 4\n(4) - (10) = -6, left: -6, 1, 1\n(1) / (-6) = -1/6, left: -1/6, 1\n(10) / (4) = 5/2, left: 5/2, 1, 1\n(1) * (1) = 1, left: 1, 5/2\n(4) / (10) = 2/5, left: 2/5, 1, 1\n(4) * (10) = 40, left: 40, 1, 1\n(10) - (1) = 9, left: 9, 1, 4\n(1) - (9) = -8, left: -8, 4\n(1) * (1) = 1, left: 1, 4, 10\n(1) + (1) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "6 1 13 2\n", "output": "(6) / (2) = 3, left: 3, 1, 13\n(3) / (13) = 3/13, left: 3/13, 1\n(2) / (6) = 1/3, left: 1/3, 1, 13\n(1/3) - (13) = -38/3, left: -38/3, 1\n(1) / (1/3) = 3, left: 3, 13\n(6) + (2) = 8, left: 8, 1, 13\n(1) * (13) = 13, left: 13, 8\n(6) * (2) = 12, left: 12, 1, 13\n(1) - (13) = -12, left: -12, 12\n(12) - (-12) = 24, left: 24\nreach 24! expression: ((6 * 2) - (1 - 13))"}, {"input": "6 1 13 2\n", "output": "(13) + (2) = 15, left: 15, 6, 1\n(6) - (1) = 5, left: 5, 15\n(2) / (13) = 2/13, left: 2/13, 6, 1\n(13) / (2) = 13/2, left: 13/2, 6, 1\n(13) - (6) = 7, left: 7, 1, 2\n(13) / (6) = 13/6, left: 13/6, 1, 2\n(1) + (2) = 3, left: 3, 6, 13\n(13) - (1) = 12, left: 12, 6, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((13 - 1) + (6 * 2))"}, {"input": "6 1 13 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 1, 13\n(1/3) / (1) = 1/3, left: 1/3, 13\n(1) + (1/3) = 4/3, left: 4/3, 13\n(6) - (2) = 4, left: 4, 1, 13\n(13) - (4) = 9, left: 9, 1\n(1) * (13) = 13, left: 13, 4\n(1) / (4) = 1/4, left: 1/4, 13\n(6) * (2) = 12, left: 12, 1, 13\n(13) + (12) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + (6 * 2)) - 1)"}, {"input": "6 1 13 2\n", "output": "(6) * (13) = 78, left: 78, 1, 2\n(1) * (78) = 78, left: 78, 2\n(13) - (6) = 7, left: 7, 1, 2\n(6) * (1) = 6, left: 6, 13, 2\n(13) * (2) = 26, left: 26, 6\n(2) - (1) = 1, left: 1, 6, 13\n(1) + (2) = 3, left: 3, 6, 13\n(13) - (1) = 12, left: 12, 6, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((13 - 1) + (6 * 2))"}, {"input": "6 1 13 2\n", "output": "(1) + (2) = 3, left: 3, 6, 13\n(2) - (1) = 1, left: 1, 6, 13\n(1) - (2) = -1, left: -1, 6, 13\n(6) - (1) = 5, left: 5, 13, 2\n(6) / (1) = 6, left: 6, 13, 2\n(13) + (2) = 15, left: 15, 6\n(1) * (13) = 13, left: 13, 6, 2\n(13) - (1) = 12, left: 12, 6, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((13 - 1) + (6 * 2))"}, {"input": "6 1 13 2\n", "output": "(1) + (2) = 3, left: 3, 6, 13\n(6) + (13) = 19, left: 19, 3\n(1) / (6) = 1/6, left: 1/6, 13, 2\n(1/6) - (2) = -11/6, left: -11/6, 13\n(6) * (1) = 6, left: 6, 13, 2\n(6) / (1) = 6, left: 6, 13, 2\n(1) - (6) = -5, left: -5, 13, 2\n(13) - (6) = 7, left: 7, 1, 2\n(2) + (7) = 9, left: 9, 1\n(1) * (13) = 13, left: 13, 6, 2\n(1) + (13) = 14, left: 14, 6, 2\n(13) - (1) = 12, left: 12, 6, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((13 - 1) + (6 * 2))"}, {"input": "6 1 13 2\n", "output": "(13) * (2) = 26, left: 26, 6, 1\n(2) / (13) = 2/13, left: 2/13, 6, 1\n(6) / (13) = 6/13, left: 6/13, 1, 2\n(6/13) / (1) = 6/13, left: 6/13, 2\n(6) + (13) = 19, left: 19, 1, 2\n(1) * (2) = 2, left: 2, 6, 13\n(2) - (1) = 1, left: 1, 6, 13\n(13) + (1) = 14, left: 14, 6\n(2) / (1) = 2, left: 2, 6, 13\n(1) + (13) = 14, left: 14, 6, 2\n(6) / (2) = 3, left: 3, 14\n(13) - (1) = 12, left: 12, 6, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((13 - 1) + (6 * 2))"}, {"input": "6 1 13 2\n", "output": "(6) + (13) = 19, left: 19, 1, 2\n(6) * (13) = 78, left: 78, 1, 2\n(13) / (6) = 13/6, left: 13/6, 1, 2\n(13) - (6) = 7, left: 7, 1, 2\n(6) + (1) = 7, left: 7, 13, 2\n(6) * (1) = 6, left: 6, 13, 2\n(13) + (2) = 15, left: 15, 6\n(6) / (1) = 6, left: 6, 13, 2\n(13) * (2) = 26, left: 26, 6, 1\n(2) / (13) = 2/13, left: 2/13, 6, 1\n(13) - (1) = 12, left: 12, 6, 2\n(6) + (12) = 18, left: 18, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((13 - 1) + (6 * 2))"}, {"input": "1 3 8 12\n", "output": "(12) / (3) = 4, left: 4, 1, 8\n(1) - (8) = -7, left: -7, 4\n(4) - (8) = -4, left: -4, 1\n(8) / (4) = 2, left: 2, 1\n(1) / (2) = 1/2, left: 1/2\n(1) * (4) = 4, left: 4, 8\n(4) - (8) = -4, left: -4\n(1) - (4) = -3, left: -3, 8\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 / 3) - 1))"}, {"input": "1 3 8 12\n", "output": "(3) + (12) = 15, left: 15, 1, 8\n(1) * (15) = 15, left: 15, 8\n(8) * (15) = 120, left: 120\n(1) - (15) = -14, left: -14, 8\n(8) + (-14) = -6, left: -6\n(15) - (1) = 14, left: 14, 8\n(14) - (8) = 6, left: 6\n(8) + (14) = 22, left: 22\n(1) + (15) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (1 + (3 + 12)))"}, {"input": "1 3 8 12\n", "output": "(1) - (8) = -7, left: -7, 3, 12\n(3) + (12) = 15, left: 15, -7\n(12) + (-7) = 5, left: 5, 3\n(1) * (8) = 8, left: 8, 3, 12\n(3) - (8) = -5, left: -5, 12\n(1) + (8) = 9, left: 9, 3, 12\n(12) - (9) = 3, left: 3, 3\n(3) / (3) = 1, left: 1\n(12) + (9) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (12 + (1 + 8)))"}, {"input": "1 3 8 12\n", "output": "(1) / (3) = 1/3, left: 1/3, 8, 12\n(8) + (1/3) = 25/3, left: 25/3, 12\n(12) + (25/3) = 61/3, left: 61/3\n(8) * (1/3) = 8/3, left: 8/3, 12\n(8/3) / (12) = 2/9, left: 2/9\n(1) + (3) = 4, left: 4, 8, 12\n(8) - (4) = 4, left: 4, 12\n(4) - (12) = -8, left: -8\n(4) / (8) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((1 + 3) / 8))"}, {"input": "1 3 8 12\n", "output": "(1) / (12) = 1/12, left: 1/12, 3, 8\n(8) * (1/12) = 2/3, left: 2/3, 3\n(1) * (12) = 12, left: 12, 3, 8\n(12) / (3) = 4, left: 4, 8\n(1) - (12) = -11, left: -11, 3, 8\n(3) - (-11) = 14, left: 14, 8\n(14) / (8) = 7/4, left: 7/4\n(1) + (12) = 13, left: 13, 3, 8\n(3) + (8) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((1 + 12) + (3 + 8))"}, {"input": "8 2 9 10\n", "output": "(9) / (10) = 9/10, left: 9/10, 8, 2\n(8) - (9/10) = 71/10, left: 71/10, 2\n(8) / (2) = 4, left: 4, 9/10\n(8) - (2) = 6, left: 6, 9/10\n(9) - (10) = -1, left: -1, 8, 2\n(8) / (2) = 4, left: 4, -1\n(8) + (2) = 10, left: 10, -1\n(8) * (2) = 16, left: 16, -1\n(2) - (-1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (2 - (9 - 10)))"}, {"input": "8 2 9 10\n", "output": "(8) - (10) = -2, left: -2, 2, 9\n(2) * (-2) = -4, left: -4, 9\n(10) / (8) = 5/4, left: 5/4, 2, 9\n(9) - (2) = 7, left: 7, 5/4\n(8) / (10) = 4/5, left: 4/5, 2, 9\n(4/5) - (2) = -6/5, left: -6/5, 9\n(10) - (8) = 2, left: 2, 2, 9\n(8) + (9) = 17, left: 17, 2, 10\n(2) * (17) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((2 * (8 + 9)) - 10)"}, {"input": "8 2 9 10\n", "output": "(8) - (10) = -2, left: -2, 2, 9\n(2) - (9) = -7, left: -7, -2\n(-2) / (-7) = 2/7, left: 2/7\n(8) + (10) = 18, left: 18, 2, 9\n(8) * (10) = 80, left: 80, 2, 9\n(2) + (10) = 12, left: 12, 8, 9\n(12) / (8) = 3/2, left: 3/2, 9\n(9) * (3/2) = 27/2, left: 27/2\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((2 + 10) - 9))"}, {"input": "8 2 9 10\n", "output": "(2) / (8) = 1/4, left: 1/4, 9, 10\n(8) + (2) = 10, left: 10, 9, 10\n(10) * (10) = 100, left: 100, 9\n(2) - (8) = -6, left: -6, 9, 10\n(8) - (2) = 6, left: 6, 9, 10\n(9) + (6) = 15, left: 15, 10\n(10) * (15) = 150, left: 150\n(9) - (2) = 7, left: 7, 8, 10\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 - (9 - 2)))"}, {"input": "8 2 9 10\n", "output": "(8) * (2) = 16, left: 16, 9, 10\n(2) / (8) = 1/4, left: 1/4, 9, 10\n(9) - (10) = -1, left: -1, 1/4\n(1/4) * (-1) = -1/4, left: -1/4\n(8) + (2) = 10, left: 10, 9, 10\n(8) * (9) = 72, left: 72, 2, 10\n(2) / (72) = 1/36, left: 1/36, 10\n(8) + (9) = 17, left: 17, 2, 10\n(2) * (17) = 34, left: 34, 10\n(34) - (10) = 24, left: 24\nreach 24! expression: ((2 * (8 + 9)) - 10)"}, {"input": "8 2 9 10\n", "output": "(8) / (2) = 4, left: 4, 9, 10\n(9) + (10) = 19, left: 19, 4\n(2) / (8) = 1/4, left: 1/4, 9, 10\n(8) + (2) = 10, left: 10, 9, 10\n(10) / (10) = 1, left: 1, 9\n(9) * (10) = 90, left: 90, 10\n(2) - (8) = -6, left: -6, 9, 10\n(9) / (-6) = -3/2, left: -3/2, 10\n(8) - (2) = 6, left: 6, 9, 10\n(8) * (2) = 16, left: 16, 9, 10\n(9) + (10) = 19, left: 19, 16\n(9) - (2) = 7, left: 7, 8, 10\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 - (9 - 2)))"}, {"input": "4 4 6 8\n", "output": "(4) - (8) = -4, left: -4, 4, 6\n(6) / (-4) = -3/2, left: -3/2, 4\n(-4) / (6) = -2/3, left: -2/3, 4\n(4) * (-4) = -16, left: -16, 6\n(4) + (8) = 12, left: 12, 4, 6\n(4) * (6) = 24, left: 24, 12\n(12) - (24) = -12, left: -12\n(4) / (6) = 2/3, left: 2/3, 12\n(6) - (4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((4 + 8) * (6 - 4))"}, {"input": "4 4 6 8\n", "output": "(4) / (4) = 1, left: 1, 6, 8\n(6) - (8) = -2, left: -2, 1\n(4) * (4) = 16, left: 16, 6, 8\n(8) / (16) = 1/2, left: 1/2, 6\n(1/2) / (6) = 1/12, left: 1/12\n(4) / (4) = 1, left: 1, 6, 8\n(1) / (8) = 1/8, left: 1/8, 6\n(4) + (8) = 12, left: 12, 4, 6\n(12) - (6) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((4 + 8) - 6))"}, {"input": "4 4 6 8\n", "output": "(4) / (6) = 2/3, left: 2/3, 4, 8\n(8) / (4) = 2, left: 2, 2/3\n(4) + (2/3) = 14/3, left: 14/3, 8\n(14/3) - (8) = -10/3, left: -10/3\n(6) / (4) = 3/2, left: 3/2, 4, 8\n(4) + (6) = 10, left: 10, 4, 8\n(8) - (4) = 4, left: 4, 10\n(6) - (4) = 2, left: 2, 4, 8\n(4) + (8) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 - 4) * (4 + 8))"}, {"input": "4 4 6 8\n", "output": "(8) / (4) = 2, left: 2, 4, 6\n(4) + (2) = 6, left: 6, 6\n(6) - (2) = 4, left: 4, 4\n(4) * (8) = 32, left: 32, 4, 6\n(32) - (6) = 26, left: 26, 4\n(4) + (32) = 36, left: 36, 6\n(36) / (6) = 6, left: 6\n(4) + (8) = 12, left: 12, 4, 6\n(12) - (6) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((4 + 8) - 6))"}, {"input": "4 4 6 8\n", "output": "(6) - (8) = -2, left: -2, 4, 4\n(4) * (4) = 16, left: 16, -2\n(4) + (4) = 8, left: 8, -2\n(4) / (4) = 1, left: 1, -2\n(4) / (4) = 1, left: 1, -2\n(-2) + (1) = -1, left: -1\n(-2) - (4) = -6, left: -6, 4\n(4) / (-6) = -2/3, left: -2/3\n(4) - (-2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (4 - (6 - 8)))"}, {"input": "4 4 6 8\n", "output": "(4) / (4) = 1, left: 1, 6, 8\n(6) * (8) = 48, left: 48, 1\n(6) * (1) = 6, left: 6, 8\n(4) - (4) = 0, left: 0, 6, 8\n(6) + (0) = 6, left: 6, 8\n(6) - (0) = 6, left: 6, 8\n(8) / (6) = 4/3, left: 4/3, 0\n(4) * (4) = 16, left: 16, 6, 8\n(8) / (6) = 4/3, left: 4/3, 16\n(4) / (4) = 1, left: 1, 6, 8\n(8) * (1) = 8, left: 8, 6\n(4) + (8) = 12, left: 12, 4, 6\n(12) - (6) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((4 + 8) - 6))"}, {"input": "12 6 9 5\n", "output": "(12) * (9) = 108, left: 108, 6, 5\n(6) / (108) = 1/18, left: 1/18, 5\n(12) / (9) = 4/3, left: 4/3, 6, 5\n(6) * (4/3) = 8, left: 8, 5\n(6) * (5) = 30, left: 30, 4/3\n(9) / (12) = 3/4, left: 3/4, 6, 5\n(6) / (3/4) = 8, left: 8, 5\n(6) - (12) = -6, left: -6, 9, 5\n(5) - (9) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((6 - 12) * (5 - 9))"}, {"input": "12 6 9 5\n", "output": "(6) * (9) = 54, left: 54, 12, 5\n(54) / (5) = 54/5, left: 54/5, 12\n(54/5) - (12) = -6/5, left: -6/5\n(12) * (54) = 648, left: 648, 5\n(54) - (12) = 42, left: 42, 5\n(6) + (9) = 15, left: 15, 12, 5\n(5) * (15) = 75, left: 75, 12\n(9) - (6) = 3, left: 3, 12, 5\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (9 - 6)))"}, {"input": "12 6 9 5\n", "output": "(9) * (5) = 45, left: 45, 12, 6\n(12) / (6) = 2, left: 2, 45\n(45) / (2) = 45/2, left: 45/2\n(5) / (9) = 5/9, left: 5/9, 12, 6\n(6) - (12) = -6, left: -6, 5/9\n(12) / (5/9) = 108/5, left: 108/5, 6\n(12) + (5/9) = 113/9, left: 113/9, 6\n(5) - (9) = -4, left: -4, 12, 6\n(6) + (-4) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (6 + (5 - 9)))"}, {"input": "12 6 9 5\n", "output": "(6) + (9) = 15, left: 15, 12, 5\n(12) * (5) = 60, left: 60, 15\n(15) * (60) = 900, left: 900\n(12) / (5) = 12/5, left: 12/5, 15\n(9) - (6) = 3, left: 3, 12, 5\n(12) - (3) = 9, left: 9, 5\n(3) - (12) = -9, left: -9, 5\n(5) + (3) = 8, left: 8, 12\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (5 - (9 - 6)))"}, {"input": "5 6 4 5\n", "output": "(5) / (5) = 1, left: 1, 6, 4\n(1) / (4) = 1/4, left: 1/4, 6\n(6) + (1/4) = 25/4, left: 25/4\n(1/4) / (6) = 1/24, left: 1/24\n(6) * (1/4) = 3/2, left: 3/2\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 5) / 4))"}, {"input": "5 6 4 5\n", "output": "(4) / (5) = 4/5, left: 4/5, 6, 5\n(5) - (6) = -1, left: -1, 4/5\n(4/5) - (-1) = 9/5, left: 9/5\n(6) * (5) = 30, left: 30, 4/5\n(30) - (4/5) = 146/5, left: 146/5\n(4/5) * (30) = 24, left: 24\nreach 24! expression: ((4 / 5) * (6 * 5))"}, {"input": "5 6 4 5\n", "output": "(5) / (5) = 1, left: 1, 6, 4\n(1) / (4) = 1/4, left: 1/4, 6\n(6) + (1/4) = 25/4, left: 25/4\n(1/4) / (6) = 1/24, left: 1/24\n(1/4) - (6) = -23/4, left: -23/4\n(6) * (1/4) = 3/2, left: 3/2\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 5) / 4))"}, {"input": "5 6 4 5\n", "output": "(4) / (5) = 4/5, left: 4/5, 6, 5\n(5) - (6) = -1, left: -1, 4/5\n(4/5) * (-1) = -4/5, left: -4/5\n(4/5) + (-1) = -1/5, left: -1/5\n(5) / (6) = 5/6, left: 5/6, 4/5\n(4/5) + (5/6) = 49/30, left: 49/30\n(6) * (5) = 30, left: 30, 4/5\n(4/5) + (30) = 154/5, left: 154/5\n(4/5) - (30) = -146/5, left: -146/5\n(4/5) * (30) = 24, left: 24\nreach 24! expression: ((4 / 5) * (6 * 5))"}, {"input": "5 6 4 5\n", "output": "(5) + (4) = 9, left: 9, 6, 5\n(9) - (6) = 3, left: 3, 5\n(6) + (9) = 15, left: 15, 5\n(9) / (6) = 3/2, left: 3/2, 5\n(6) / (9) = 2/3, left: 2/3, 5\n(6) + (5) = 11, left: 11, 9\n(6) * (5) = 30, left: 30, 9\n(5) / (6) = 5/6, left: 5/6, 9\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((5 + 4) - 5))"}, {"input": "5 6 4 5\n", "output": "(5) * (5) = 25, left: 25, 6, 4\n(4) / (25) = 4/25, left: 4/25, 6\n(4) * (25) = 100, left: 100, 6\n(4) / (6) = 2/3, left: 2/3, 25\n(6) * (25) = 150, left: 150, 4\n(4) / (150) = 2/75, left: 2/75\n(25) / (6) = 25/6, left: 25/6, 4\n(5) - (5) = 0, left: 0, 6, 4\n(4) - (0) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (4 - (5 - 5)))"}, {"input": "5 6 4 5\n", "output": "(5) / (5) = 1, left: 1, 6, 4\n(1) / (4) = 1/4, left: 1/4, 6\n(6) + (1/4) = 25/4, left: 25/4\n(1/4) / (6) = 1/24, left: 1/24\n(1/4) - (6) = -23/4, left: -23/4\n(6) * (1/4) = 3/2, left: 3/2\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 5) / 4))"}, {"input": "5 6 4 5\n", "output": "(5) / (5) = 1, left: 1, 6, 4\n(1) / (4) = 1/4, left: 1/4, 6\n(6) + (1/4) = 25/4, left: 25/4\n(1/4) / (6) = 1/24, left: 1/24\n(1/4) - (6) = -23/4, left: -23/4\n(6) * (1/4) = 3/2, left: 3/2\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / ((5 / 5) / 4))"}, {"input": "10 13 8 8\n", "output": "(10) * (8) = 80, left: 80, 13, 8\n(13) / (80) = 13/80, left: 13/80, 8\n(8) * (80) = 640, left: 640, 13\n(8) / (80) = 1/10, left: 1/10, 13\n(13) * (8) = 104, left: 104, 80\n(104) - (80) = 24, left: 24\nreach 24! expression: ((13 * 8) - (10 * 8))"}, {"input": "10 13 8 8\n", "output": "(8) / (10) = 4/5, left: 4/5, 13, 8\n(10) * (8) = 80, left: 80, 13, 8\n(80) / (13) = 80/13, left: 80/13, 8\n(80) - (13) = 67, left: 67, 8\n(13) * (8) = 104, left: 104, 80\n(104) - (80) = 24, left: 24\nreach 24! expression: ((13 * 8) - (10 * 8))"}, {"input": "10 13 8 8\n", "output": "(10) * (8) = 80, left: 80, 13, 8\n(80) / (8) = 10, left: 10, 13\n(13) - (10) = 3, left: 3\n(80) / (13) = 80/13, left: 80/13, 8\n(13) * (8) = 104, left: 104, 80\n(104) - (80) = 24, left: 24\nreach 24! expression: ((13 * 8) - (10 * 8))"}, {"input": "10 13 8 8\n", "output": "(8) / (8) = 1, left: 1, 10, 13\n(1) / (13) = 1/13, left: 1/13, 10\n(1) - (13) = -12, left: -12, 10\n(13) * (1) = 13, left: 13, 10\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (13 + (8 / 8)))"}, {"input": "10 13 8 8\n", "output": "(8) / (13) = 8/13, left: 8/13, 10, 8\n(8) - (10) = -2, left: -2, 8/13\n(10) / (8/13) = 65/4, left: 65/4, 8\n(13) * (8) = 104, left: 104, 10, 8\n(10) * (8) = 80, left: 80, 104\n(104) - (80) = 24, left: 24\nreach 24! expression: ((13 * 8) - (10 * 8))"}, {"input": "10 13 8 8\n", "output": "(10) * (8) = 80, left: 80, 13, 8\n(13) + (80) = 93, left: 93, 8\n(13) / (80) = 13/80, left: 13/80, 8\n(80) - (13) = 67, left: 67, 8\n(80) - (8) = 72, left: 72, 13\n(8) - (80) = -72, left: -72, 13\n(13) * (-72) = -936, left: -936\n(80) / (8) = 10, left: 10, 13\n(13) * (8) = 104, left: 104, 80\n(104) - (80) = 24, left: 24\nreach 24! expression: ((13 * 8) - (10 * 8))"}, {"input": "10 13 8 8\n", "output": "(10) * (8) = 80, left: 80, 13, 8\n(8) + (80) = 88, left: 88, 13\n(13) + (80) = 93, left: 93, 8\n(8) / (93) = 8/93, left: 8/93\n(13) * (80) = 1040, left: 1040, 8\n(1040) / (8) = 130, left: 130\n(80) / (13) = 80/13, left: 80/13, 8\n(13) / (8) = 13/8, left: 13/8, 80\n(13) * (8) = 104, left: 104, 80\n(104) - (80) = 24, left: 24\nreach 24! expression: ((13 * 8) - (10 * 8))"}, {"input": "10 13 8 8\n", "output": "(8) / (10) = 4/5, left: 4/5, 13, 8\n(13) / (4/5) = 65/4, left: 65/4, 8\n(8) + (65/4) = 97/4, left: 97/4\n(8) * (4/5) = 32/5, left: 32/5, 13\n(10) * (8) = 80, left: 80, 13, 8\n(13) - (80) = -67, left: -67, 8\n(80) / (13) = 80/13, left: 80/13, 8\n(13) - (8) = 5, left: 5, 80\n(13) * (8) = 104, left: 104, 80\n(104) - (80) = 24, left: 24\nreach 24! expression: ((13 * 8) - (10 * 8))"}, {"input": "10 13 8 8\n", "output": "(8) / (8) = 1, left: 1, 10, 13\n(13) / (1) = 13, left: 13, 10\n(1) / (13) = 1/13, left: 1/13, 10\n(10) - (1/13) = 129/13, left: 129/13\n(1/13) / (10) = 1/130, left: 1/130\n(13) - (1) = 12, left: 12, 10\n(13) * (1) = 13, left: 13, 10\n(10) + (13) = 23, left: 23\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (13 + (8 / 8)))"}, {"input": "10 13 8 8\n", "output": "(8) / (13) = 8/13, left: 8/13, 10, 8\n(10) - (8) = 2, left: 2, 8/13\n(8/13) / (2) = 4/13, left: 4/13\n(8) - (10) = -2, left: -2, 8/13\n(8/13) * (-2) = -16/13, left: -16/13\n(13) * (8) = 104, left: 104, 10, 8\n(104) / (8) = 13, left: 13, 10\n(10) / (13) = 10/13, left: 10/13\n(10) * (8) = 80, left: 80, 104\n(104) - (80) = 24, left: 24\nreach 24! expression: ((13 * 8) - (10 * 8))"}, {"input": "5 12 10 3\n", "output": "(5) * (10) = 50, left: 50, 12, 3\n(12) * (3) = 36, left: 36, 50\n(50) / (36) = 25/18, left: 25/18\n(5) + (10) = 15, left: 15, 12, 3\n(12) + (15) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((12 + (5 + 10)) - 3)"}, {"input": "5 12 10 3\n", "output": "(5) / (12) = 5/12, left: 5/12, 10, 3\n(3) - (5/12) = 31/12, left: 31/12, 10\n(3) / (10) = 3/10, left: 3/10, 5/12\n(5) + (12) = 17, left: 17, 10, 3\n(10) + (17) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((10 + (5 + 12)) - 3)"}, {"input": "5 12 10 3\n", "output": "(12) - (10) = 2, left: 2, 5, 3\n(12) / (10) = 6/5, left: 6/5, 5, 3\n(3) * (6/5) = 18/5, left: 18/5, 5\n(12) + (10) = 22, left: 22, 5, 3\n(5) + (22) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((5 + (12 + 10)) - 3)"}, {"input": "5 12 10 3\n", "output": "(5) / (3) = 5/3, left: 5/3, 12, 10\n(12) - (5/3) = 31/3, left: 31/3, 10\n(10) / (31/3) = 30/31, left: 30/31\n(5) + (3) = 8, left: 8, 12, 10\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (5 + 3)))"}, {"input": "5 12 10 3\n", "output": "(5) * (10) = 50, left: 50, 12, 3\n(3) * (50) = 150, left: 150, 12\n(12) - (50) = -38, left: -38, 3\n(5) - (10) = -5, left: -5, 12, 3\n(3) / (-5) = -3/5, left: -3/5, 12\n(12) * (-5) = -60, left: -60, 3\n(3) + (-60) = -57, left: -57\n(5) + (10) = 15, left: 15, 12, 3\n(12) + (15) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((12 + (5 + 10)) - 3)"}, {"input": "5 12 10 3\n", "output": "(10) / (5) = 2, left: 2, 12, 3\n(2) / (3) = 2/3, left: 2/3, 12\n(3) - (2) = 1, left: 1, 12\n(12) / (2) = 6, left: 6, 3\n(12) + (2) = 14, left: 14, 3\n(3) - (12) = -9, left: -9, 2\n(12) / (3) = 4, left: 4, 2\n(10) - (5) = 5, left: 5, 12, 3\n(5) - (3) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 - 5) - 3))"}, {"input": "5 12 10 3\n", "output": "(5) / (3) = 5/3, left: 5/3, 12, 10\n(5/3) / (12) = 5/36, left: 5/36, 10\n(12) - (10) = 2, left: 2, 5/3\n(3) / (5) = 3/5, left: 3/5, 12, 10\n(3/5) / (10) = 3/50, left: 3/50, 12\n(10) + (3/5) = 53/5, left: 53/5, 12\n(12) / (3/5) = 20, left: 20, 10\n(5) + (3) = 8, left: 8, 12, 10\n(10) - (8) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (10 - (5 + 3)))"}, {"input": "5 12 10 3\n", "output": "(12) * (10) = 120, left: 120, 5, 3\n(5) + (3) = 8, left: 8, 120\n(10) / (12) = 5/6, left: 5/6, 5, 3\n(12) / (10) = 6/5, left: 6/5, 5, 3\n(10) - (12) = -2, left: -2, 5, 3\n(5) * (3) = 15, left: 15, -2\n(5) - (-2) = 7, left: 7, 3\n(12) + (10) = 22, left: 22, 5, 3\n(5) + (22) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((5 + (12 + 10)) - 3)"}, {"input": "5 12 10 3\n", "output": "(5) / (12) = 5/12, left: 5/12, 10, 3\n(10) + (5/12) = 125/12, left: 125/12, 3\n(125/12) / (3) = 125/36, left: 125/36\n(5/12) / (10) = 1/24, left: 1/24, 3\n(5/12) / (3) = 5/36, left: 5/36, 10\n(10) / (5/36) = 72, left: 72\n(5) + (12) = 17, left: 17, 10, 3\n(17) / (10) = 17/10, left: 17/10, 3\n(10) + (17) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((10 + (5 + 12)) - 3)"}, {"input": "8 10 8 1\n", "output": "(10) - (1) = 9, left: 9, 8, 8\n(1) / (10) = 1/10, left: 1/10, 8, 8\n(8) / (1/10) = 80, left: 80, 8\n(8) * (1/10) = 4/5, left: 4/5, 8\n(10) * (1) = 10, left: 10, 8, 8\n(8) - (10) = -2, left: -2, 8\n(-2) / (8) = -1/4, left: -1/4\n(10) + (1) = 11, left: 11, 8, 8\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 + 1) - 8))"}, {"input": "8 10 8 1\n", "output": "(10) / (8) = 5/4, left: 5/4, 8, 1\n(1) - (8) = -7, left: -7, 5/4\n(5/4) * (-7) = -35/4, left: -35/4\n(8) - (1) = 7, left: 7, 5/4\n(5/4) - (8) = -27/4, left: -27/4, 1\n(8) - (10) = -2, left: -2, 8, 1\n(8) * (1) = 8, left: 8, -2\n(1) / (8) = 1/8, left: 1/8, -2\n(1) - (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 - (8 - 10)))"}, {"input": "8 10 8 1\n", "output": "(1) - (8) = -7, left: -7, 8, 10\n(10) * (-7) = -70, left: -70, 8\n(-70) - (8) = -78, left: -78\n(8) + (-70) = -62, left: -62\n(8) - (-70) = 78, left: 78\n(-70) / (8) = -35/4, left: -35/4\n(10) + (-7) = 3, left: 3, 8\n(8) - (3) = 5, left: 5\n(8) / (3) = 8/3, left: 8/3\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 + (1 - 8)))"}, {"input": "8 10 8 1\n", "output": "(10) / (8) = 5/4, left: 5/4, 8, 1\n(8) / (1) = 8, left: 8, 5/4\n(1) / (8) = 1/8, left: 1/8, 5/4\n(8) - (1) = 7, left: 7, 5/4\n(1) * (5/4) = 5/4, left: 5/4, 8\n(8) * (5/4) = 10, left: 10, 1\n(8) - (5/4) = 27/4, left: 27/4, 1\n(8) - (10) = -2, left: -2, 8, 1\n(1) - (-2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (1 - (8 - 10)))"}, {"input": "8 10 8 1\n", "output": "(8) - (8) = 0, left: 0, 10, 1\n(1) - (0) = 1, left: 1, 10\n(8) + (8) = 16, left: 16, 10, 1\n(8) * (8) = 64, left: 64, 10, 1\n(1) / (64) = 1/64, left: 1/64, 10\n(64) / (10) = 32/5, left: 32/5, 1\n(8) / (1) = 8, left: 8, 10, 8\n(8) - (1) = 7, left: 7, 10, 8\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 - (8 - 1)))"}, {"input": "8 10 8 1\n", "output": "(8) / (8) = 1, left: 1, 10, 1\n(10) + (1) = 11, left: 11, 1\n(1) - (1) = 0, left: 0, 10\n(8) + (8) = 16, left: 16, 10, 1\n(8) / (8) = 1, left: 1, 10, 1\n(1) / (10) = 1/10, left: 1/10, 1\n(10) / (1) = 10, left: 10, 1\n(8) * (8) = 64, left: 64, 10, 1\n(8) * (1) = 8, left: 8, 10, 8\n(8) - (1) = 7, left: 7, 10, 8\n(8) * (7) = 56, left: 56, 10\n(56) - (10) = 46, left: 46\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 - (8 - 1)))"}, {"input": "10 10 12 3\n", "output": "(10) - (3) = 7, left: 7, 10, 12\n(10) + (12) = 22, left: 22, 10, 3\n(10) * (3) = 30, left: 30, 22\n(10) - (12) = -2, left: -2, 10, 3\n(10) + (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 + (10 - 12)))"}, {"input": "10 10 12 3\n", "output": "(12) - (3) = 9, left: 9, 10, 10\n(10) / (9) = 10/9, left: 10/9, 10\n(10) - (10) = 0, left: 0, 9\n(12) / (3) = 4, left: 4, 10, 10\n(10) + (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((12 / 3) + (10 + 10))"}, {"input": "10 10 12 3\n", "output": "(10) / (3) = 10/3, left: 10/3, 10, 12\n(10/3) - (10) = -20/3, left: -20/3, 12\n(3) / (10) = 3/10, left: 3/10, 10, 12\n(12) / (3) = 4, left: 4, 10, 10\n(10) + (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((12 / 3) + (10 + 10))"}, {"input": "10 10 12 3\n", "output": "(10) - (12) = -2, left: -2, 10, 3\n(10) * (3) = 30, left: 30, -2\n(10) + (3) = 13, left: 13, -2\n(-2) / (13) = -2/13, left: -2/13\n(10) + (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 + (10 - 12)))"}, {"input": "10 10 12 3\n", "output": "(10) - (12) = -2, left: -2, 10, 3\n(10) - (3) = 7, left: 7, -2\n(-2) / (7) = -2/7, left: -2/7\n(10) * (3) = 30, left: 30, -2\n(30) - (-2) = 32, left: 32\n(3) / (10) = 3/10, left: 3/10, -2\n(10) * (-2) = -20, left: -20, 3\n(3) / (-20) = -3/20, left: -3/20\n(10) + (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 + (10 - 12)))"}, {"input": "10 10 12 3\n", "output": "(10) / (3) = 10/3, left: 10/3, 10, 12\n(10) - (3) = 7, left: 7, 10, 12\n(10) + (12) = 22, left: 22, 10, 3\n(10) + (3) = 13, left: 13, 22\n(13) - (22) = -9, left: -9\n(10) / (12) = 5/6, left: 5/6, 10, 3\n(10) - (12) = -2, left: -2, 10, 3\n(10) * (3) = 30, left: 30, -2\n(10) + (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 + (10 - 12)))"}, {"input": "10 10 12 3\n", "output": "(12) * (3) = 36, left: 36, 10, 10\n(10) / (36) = 5/18, left: 5/18, 10\n(3) / (12) = 1/4, left: 1/4, 10, 10\n(1/4) / (10) = 1/40, left: 1/40, 10\n(3) - (12) = -9, left: -9, 10, 10\n(12) - (3) = 9, left: 9, 10, 10\n(10) * (10) = 100, left: 100, 9\n(12) / (3) = 4, left: 4, 10, 10\n(10) + (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((12 / 3) + (10 + 10))"}, {"input": "10 10 12 3\n", "output": "(10) - (3) = 7, left: 7, 10, 12\n(12) - (10) = 2, left: 2, 7\n(10) / (12) = 5/6, left: 5/6, 10, 3\n(10) - (5/6) = 55/6, left: 55/6, 3\n(10) * (12) = 120, left: 120, 10, 3\n(10) - (12) = -2, left: -2, 10, 3\n(-2) - (10) = -12, left: -12, 3\n(-12) / (3) = -4, left: -4\n(10) + (-2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (10 + (10 - 12)))"}, {"input": "10 10 12 3\n", "output": "(10) - (3) = 7, left: 7, 10, 12\n(7) / (10) = 7/10, left: 7/10, 12\n(12) - (10) = 2, left: 2, 7\n(3) - (10) = -7, left: -7, 10, 12\n(3) / (10) = 3/10, left: 3/10, 10, 12\n(10) + (3) = 13, left: 13, 10, 12\n(12) / (10) = 6/5, left: 6/5, 13\n(12) / (3) = 4, left: 4, 10, 10\n(10) + (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((12 / 3) + (10 + 10))"}, {"input": "3 8 11 5\n", "output": "(8) / (11) = 8/11, left: 8/11, 3, 5\n(5) / (8/11) = 55/8, left: 55/8, 3\n(55/8) / (3) = 55/24, left: 55/24\n(8) - (11) = -3, left: -3, 3, 5\n(5) - (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 - (8 - 11)))"}, {"input": "3 8 11 5\n", "output": "(11) - (5) = 6, left: 6, 3, 8\n(3) / (8) = 3/8, left: 3/8, 6\n(3) + (8) = 11, left: 11, 6\n(11) - (6) = 5, left: 5\n(3) * (8) = 24, left: 24, 6\n(24) / (6) = 4, left: 4\n(6) / (8) = 3/4, left: 3/4, 3\n(3/4) - (3) = -9/4, left: -9/4\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 - 5) - 3))"}, {"input": "3 8 11 5\n", "output": "(3) * (5) = 15, left: 15, 8, 11\n(15) - (8) = 7, left: 7, 11\n(5) / (3) = 5/3, left: 5/3, 8, 11\n(8) * (11) = 88, left: 88, 5/3\n(8) - (5/3) = 19/3, left: 19/3, 11\n(11) + (19/3) = 52/3, left: 52/3\n(3) - (5) = -2, left: -2, 8, 11\n(3) + (5) = 8, left: 8, 8, 11\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((3 + 5) * (11 - 8))"}, {"input": "3 8 11 5\n", "output": "(8) / (11) = 8/11, left: 8/11, 3, 5\n(3) * (5) = 15, left: 15, 8/11\n(5) - (3) = 2, left: 2, 8/11\n(3) / (5) = 3/5, left: 3/5, 8/11\n(5) + (8/11) = 63/11, left: 63/11, 3\n(8/11) / (5) = 8/55, left: 8/55, 3\n(8) - (11) = -3, left: -3, 3, 5\n(-3) / (5) = -3/5, left: -3/5, 3\n(5) - (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 - (8 - 11)))"}, {"input": "3 8 11 5\n", "output": "(11) / (8) = 11/8, left: 11/8, 3, 5\n(5) / (3) = 5/3, left: 5/3, 11/8\n(5/3) / (11/8) = 40/33, left: 40/33\n(3) / (5) = 3/5, left: 3/5, 11/8\n(8) * (11) = 88, left: 88, 3, 5\n(5) - (3) = 2, left: 2, 88\n(8) - (11) = -3, left: -3, 3, 5\n(-3) / (3) = -1, left: -1, 5\n(5) - (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 - (8 - 11)))"}, {"input": "3 8 11 5\n", "output": "(11) - (5) = 6, left: 6, 3, 8\n(8) + (6) = 14, left: 14, 3\n(8) / (6) = 4/3, left: 4/3, 3\n(3) / (4/3) = 9/4, left: 9/4\n(6) - (8) = -2, left: -2, 3\n(3) - (-2) = 5, left: 5\n(3) - (6) = -3, left: -3, 8\n(3) * (6) = 18, left: 18, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((11 - 5) - 3))"}, {"input": "3 2 1 3\n", "output": "(1) - (2) = -1, left: -1, 3, 3\n(3) + (3) = 6, left: 6, 2, 1\n(2) * (1) = 2, left: 2, 6\n(6) * (2) = 12, left: 12\n(3) - (3) = 0, left: 0, 2, 1\n(3) / (3) = 1, left: 1, 2, 1\n(2) - (3) = -1, left: -1, 1, 3\n(3) * (2) = 6, left: 6, 1, 3\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 * 2) * (1 + 3))"}, {"input": "3 2 1 3\n", "output": "(1) + (3) = 4, left: 4, 3, 2\n(3) / (4) = 3/4, left: 3/4, 2\n(3/4) / (2) = 3/8, left: 3/8\n(4) - (3) = 1, left: 1, 2\n(2) * (1) = 2, left: 2\n(3) - (4) = -1, left: -1, 2\n(-1) - (2) = -3, left: -3\n(3) * (4) = 12, left: 12, 2\n(2) / (12) = 1/6, left: 1/6\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 * (1 + 3)))"}, {"input": "3 2 1 3\n", "output": "(3) / (3) = 1, left: 1, 2, 1\n(3) + (3) = 6, left: 6, 2, 1\n(3) * (3) = 9, left: 9, 2, 1\n(9) - (1) = 8, left: 8, 2\n(2) - (3) = -1, left: -1, 3, 1\n(-1) - (1) = -2, left: -2, 3\n(-2) - (3) = -5, left: -5\n(2) * (3) = 6, left: 6, 3, 1\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (3 + 1))"}, {"input": "3 2 1 3\n", "output": "(1) / (2) = 1/2, left: 1/2, 3, 3\n(2) * (1) = 2, left: 2, 3, 3\n(3) + (2) = 5, left: 5, 3\n(3) * (3) = 9, left: 9, 2\n(2) - (1) = 1, left: 1, 3, 3\n(3) / (3) = 1, left: 1, 1\n(2) / (1) = 2, left: 2, 3, 3\n(2) * (3) = 6, left: 6, 3, 1\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (3 + 1))"}, {"input": "3 2 1 3\n", "output": "(3) - (3) = 0, left: 0, 2, 1\n(2) + (1) = 3, left: 3, 0\n(1) - (2) = -1, left: -1, 0\n(0) / (-1) = 0, left: 0\n(3) / (3) = 1, left: 1, 2, 1\n(3) / (3) = 1, left: 1, 2, 1\n(1) / (2) = 1/2, left: 1/2, 1\n(2) * (3) = 6, left: 6, 3, 1\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (3 + 1))"}, {"input": "3 2 1 3\n", "output": "(1) - (2) = -1, left: -1, 3, 3\n(2) * (1) = 2, left: 2, 3, 3\n(2) - (1) = 1, left: 1, 3, 3\n(2) + (1) = 3, left: 3, 3, 3\n(2) / (1) = 2, left: 2, 3, 3\n(3) - (2) = 1, left: 1, 3, 1\n(3) + (1) = 4, left: 4, 1\n(2) / (3) = 2/3, left: 2/3, 3, 1\n(1) * (2/3) = 2/3, left: 2/3, 3\n(2/3) / (3) = 2/9, left: 2/9\n(2) * (3) = 6, left: 6, 3, 1\n(3) + (1) = 4, left: 4, 6\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (3 + 1))"}, {"input": "3 2 1 3\n", "output": "(3) - (3) = 0, left: 0, 2, 1\n(3) / (3) = 1, left: 1, 2, 1\n(1) / (1) = 1, left: 1, 2\n(1) / (2) = 1/2, left: 1/2, 1\n(3) - (3) = 0, left: 0, 2, 1\n(3) * (3) = 9, left: 9, 2, 1\n(2) - (9) = -7, left: -7, 1\n(2) * (9) = 18, left: 18, 1\n(3) / (3) = 1, left: 1, 2, 1\n(2) - (3) = -1, left: -1, 3, 1\n(2) * (3) = 6, left: 6, 3, 1\n(3) * (6) = 18, left: 18, 1\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (3 + 1))"}, {"input": "3 2 1 3\n", "output": "(2) + (1) = 3, left: 3, 3, 3\n(3) - (3) = 0, left: 0, 3\n(1) / (2) = 1/2, left: 1/2, 3, 3\n(2) * (1) = 2, left: 2, 3, 3\n(3) / (3) = 1, left: 1, 2\n(2) / (1) = 2, left: 2\n(3) - (3) = 0, left: 0, 2, 1\n(3) / (3) = 1, left: 1, 2, 1\n(1) - (2) = -1, left: -1, 1\n(2) - (3) = -1, left: -1, 1, 3\n(-1) - (3) = -4, left: -4, 1\n(3) * (2) = 6, left: 6, 1, 3\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 * 2) * (1 + 3))"}, {"input": "3 2 1 3\n", "output": "(1) + (3) = 4, left: 4, 3, 2\n(3) + (4) = 7, left: 7, 2\n(7) / (2) = 7/2, left: 7/2\n(2) - (7) = -5, left: -5\n(4) / (3) = 4/3, left: 4/3, 2\n(2) - (4/3) = 2/3, left: 2/3\n(4) - (3) = 1, left: 1, 2\n(3) - (4) = -1, left: -1, 2\n(2) + (-1) = 1, left: 1\n(-1) - (2) = -3, left: -3\n(-1) / (2) = -1/2, left: -1/2\n(3) * (4) = 12, left: 12, 2\n(12) / (2) = 6, left: 6\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (3 * (1 + 3)))"}, {"input": "3 2 1 3\n", "output": "(3) / (3) = 1, left: 1, 2, 1\n(2) / (1) = 2, left: 2, 1\n(1) + (2) = 3, left: 3\n(3) - (3) = 0, left: 0, 2, 1\n(3) + (3) = 6, left: 6, 2, 1\n(1) - (2) = -1, left: -1, 6\n(3) / (3) = 1, left: 1, 2, 1\n(1) / (2) = 1/2, left: 1/2, 1\n(1/2) - (1) = -1/2, left: -1/2\n(3) / (2) = 3/2, left: 3/2, 3, 1\n(3/2) - (1) = 1/2, left: 1/2, 3\n(2) * (3) = 6, left: 6, 3, 1\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((2 * 3) * (3 + 1))"}, {"input": "2 10 1 2\n", "output": "(10) + (1) = 11, left: 11, 2, 2\n(2) / (2) = 1, left: 1, 11\n(1) / (11) = 1/11, left: 1/11\n(2) / (2) = 1, left: 1, 11\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (10 + 1)))"}, {"input": "2 10 1 2\n", "output": "(10) * (1) = 10, left: 10, 2, 2\n(2) * (2) = 4, left: 4, 10\n(10) - (4) = 6, left: 6\n(2) - (2) = 0, left: 0, 10\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (10 * 1)))"}, {"input": "2 10 1 2\n", "output": "(10) + (1) = 11, left: 11, 2, 2\n(2) * (11) = 22, left: 22, 2\n(2) / (22) = 1/11, left: 1/11\n(2) * (22) = 44, left: 44\n(22) - (2) = 20, left: 20\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (10 + 1)))"}, {"input": "2 10 1 2\n", "output": "(10) * (1) = 10, left: 10, 2, 2\n(2) - (2) = 0, left: 0, 10\n(10) + (0) = 10, left: 10\n(2) * (2) = 4, left: 4, 10\n(2) / (2) = 1, left: 1, 10\n(2) - (2) = 0, left: 0, 10\n(0) - (10) = -10, left: -10\n(2) + (10) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (10 * 1)))"}, {"input": "2 10 1 2\n", "output": "(10) + (1) = 11, left: 11, 2, 2\n(2) * (11) = 22, left: 22, 2\n(2) / (22) = 1/11, left: 1/11\n(2) - (22) = -20, left: -20\n(2) * (22) = 44, left: 44\n(22) / (2) = 11, left: 11\n(22) - (2) = 20, left: 20\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (10 + 1)))"}, {"input": "2 10 1 2\n", "output": "(2) / (2) = 1, left: 1, 10, 1\n(1) / (1) = 1, left: 1, 10\n(1) - (10) = -9, left: -9, 1\n(2) / (2) = 1, left: 1, 10, 1\n(2) - (2) = 0, left: 0, 10, 1\n(2) - (2) = 0, left: 0, 10, 1\n(1) - (0) = 1, left: 1, 10\n(10) - (2) = 8, left: 8, 2, 1\n(2) + (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((10 - 2) * (2 + 1))"}, {"input": "2 10 1 2\n", "output": "(2) * (2) = 4, left: 4, 10, 1\n(10) * (1) = 10, left: 10, 4\n(2) + (2) = 4, left: 4, 10, 1\n(2) / (2) = 1, left: 1, 10, 1\n(2) / (2) = 1, left: 1, 10, 1\n(10) * (1) = 10, left: 10, 1\n(1) / (10) = 1/10, left: 1/10\n(1) / (2) = 1/2, left: 1/2, 2, 10\n(2) + (10) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((2 + 10) / (1 / 2))"}, {"input": "2 10 1 2\n", "output": "(10) + (1) = 11, left: 11, 2, 2\n(2) / (2) = 1, left: 1, 11\n(2) - (2) = 0, left: 0, 11\n(0) - (11) = -11, left: -11\n(2) * (2) = 4, left: 4, 11\n(4) / (11) = 4/11, left: 4/11\n(4) - (11) = -7, left: -7\n(2) * (11) = 22, left: 22, 2\n(2) * (22) = 44, left: 44\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (10 + 1)))"}, {"input": "2 10 1 2\n", "output": "(10) + (1) = 11, left: 11, 2, 2\n(2) * (11) = 22, left: 22, 2\n(2) / (22) = 1/11, left: 1/11\n(2) - (22) = -20, left: -20\n(2) * (22) = 44, left: 44\n(22) / (2) = 11, left: 11\n(22) - (2) = 20, left: 20\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (10 + 1)))"}, {"input": "2 10 1 2\n", "output": "(2) - (2) = 0, left: 0, 10, 1\n(10) - (0) = 10, left: 10, 1\n(2) - (2) = 0, left: 0, 10, 1\n(1) - (0) = 1, left: 1, 10\n(2) * (2) = 4, left: 4, 10, 1\n(10) - (1) = 9, left: 9, 4\n(2) + (2) = 4, left: 4, 10, 1\n(2) / (2) = 1, left: 1, 10, 1\n(1) / (1) = 1, left: 1, 10\n(2) / (2) = 1, left: 1, 10, 1\n(1) / (1) = 1, left: 1, 10\n(1) / (2) = 1/2, left: 1/2, 2, 10\n(2) + (10) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((2 + 10) / (1 / 2))"}, {"input": "2 10 1 2\n", "output": "(10) + (1) = 11, left: 11, 2, 2\n(2) * (11) = 22, left: 22, 2\n(2) / (22) = 1/11, left: 1/11\n(2) - (22) = -20, left: -20\n(2) * (22) = 44, left: 44\n(22) / (2) = 11, left: 11\n(22) - (2) = 20, left: 20\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (10 + 1)))"}, {"input": "5 11 2 7\n", "output": "(11) * (2) = 22, left: 22, 5, 7\n(5) + (22) = 27, left: 27, 7\n(22) / (5) = 22/5, left: 22/5, 7\n(5) * (22) = 110, left: 110, 7\n(5) - (22) = -17, left: -17, 7\n(7) - (-17) = 24, left: 24\nreach 24! expression: (7 - (5 - (11 * 2)))"}, {"input": "5 11 2 7\n", "output": "(5) / (11) = 5/11, left: 5/11, 2, 7\n(2) / (5/11) = 22/5, left: 22/5, 7\n(22/5) / (7) = 22/35, left: 22/35\n(5) * (11) = 55, left: 55, 2, 7\n(55) - (7) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: (((5 * 11) - 7) / 2)"}, {"input": "5 11 2 7\n", "output": "(11) - (5) = 6, left: 6, 2, 7\n(2) - (7) = -5, left: -5, 6\n(2) - (6) = -4, left: -4, 7\n(5) / (11) = 5/11, left: 5/11, 2, 7\n(5/11) / (2) = 5/22, left: 5/22, 7\n(11) / (5) = 11/5, left: 11/5, 2, 7\n(5) - (11) = -6, left: -6, 2, 7\n(5) * (11) = 55, left: 55, 2, 7\n(55) - (7) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: (((5 * 11) - 7) / 2)"}, {"input": "5 11 2 7\n", "output": "(2) / (11) = 2/11, left: 2/11, 5, 7\n(11) - (2) = 9, left: 9, 5, 7\n(7) / (5) = 7/5, left: 7/5, 9\n(5) + (7) = 12, left: 12, 9\n(2) - (11) = -9, left: -9, 5, 7\n(11) * (2) = 22, left: 22, 5, 7\n(22) / (7) = 22/7, left: 22/7, 5\n(7) - (22) = -15, left: -15, 5\n(7) + (22) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((7 + (11 * 2)) - 5)"}, {"input": "5 11 2 7\n", "output": "(7) - (11) = -4, left: -4, 5, 2\n(11) * (7) = 77, left: 77, 5, 2\n(2) - (5) = -3, left: -3, 77\n(77) / (-3) = -77/3, left: -77/3\n(11) / (7) = 11/7, left: 11/7, 5, 2\n(11) - (7) = 4, left: 4, 5, 2\n(2) - (5) = -3, left: -3, 4\n(11) * (2) = 22, left: 22, 5, 7\n(7) + (22) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((7 + (11 * 2)) - 5)"}, {"input": "5 11 2 7\n", "output": "(11) * (2) = 22, left: 22, 5, 7\n(5) + (22) = 27, left: 27, 7\n(7) + (27) = 34, left: 34\n(22) / (5) = 22/5, left: 22/5, 7\n(7) / (22/5) = 35/22, left: 35/22\n(7) + (22/5) = 57/5, left: 57/5\n(5) * (22) = 110, left: 110, 7\n(110) / (7) = 110/7, left: 110/7\n(5) - (22) = -17, left: -17, 7\n(7) - (-17) = 24, left: 24\nreach 24! expression: (7 - (5 - (11 * 2)))"}, {"input": "5 11 2 7\n", "output": "(5) * (2) = 10, left: 10, 11, 7\n(2) / (5) = 2/5, left: 2/5, 11, 7\n(5) / (2) = 5/2, left: 5/2, 11, 7\n(11) / (5/2) = 22/5, left: 22/5, 7\n(5) + (2) = 7, left: 7, 11, 7\n(11) * (7) = 77, left: 77, 7\n(7) / (77) = 1/11, left: 1/11\n(11) * (2) = 22, left: 22, 5, 7\n(7) + (22) = 29, left: 29, 5\n(29) - (5) = 24, left: 24\nreach 24! expression: ((7 + (11 * 2)) - 5)"}, {"input": "11 9 4 8\n", "output": "(4) - (8) = -4, left: -4, 11, 9\n(9) / (11) = 9/11, left: 9/11, -4\n(-4) - (9/11) = -53/11, left: -53/11\n(11) / (9) = 11/9, left: 11/9, -4\n(11) + (9) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((11 + 9) - (4 - 8))"}, {"input": "11 9 4 8\n", "output": "(8) / (11) = 8/11, left: 8/11, 9, 4\n(9) + (4) = 13, left: 13, 8/11\n(8/11) - (13) = -135/11, left: -135/11\n(11) + (8) = 19, left: 19, 9, 4\n(9) + (19) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((9 + (11 + 8)) - 4)"}, {"input": "11 9 4 8\n", "output": "(4) * (8) = 32, left: 32, 11, 9\n(32) / (11) = 32/11, left: 32/11, 9\n(11) / (9) = 11/9, left: 11/9, 32\n(8) - (4) = 4, left: 4, 11, 9\n(11) + (9) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((8 - 4) + (11 + 9))"}, {"input": "11 9 4 8\n", "output": "(9) + (8) = 17, left: 17, 11, 4\n(17) / (4) = 17/4, left: 17/4, 11\n(4) / (17) = 4/17, left: 4/17, 11\n(11) * (4/17) = 44/17, left: 44/17\n(4) - (17) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (4 - (9 + 8)))"}, {"input": "11 9 4 8\n", "output": "(9) + (8) = 17, left: 17, 11, 4\n(17) / (4) = 17/4, left: 17/4, 11\n(11) / (17/4) = 44/17, left: 44/17\n(4) / (17) = 4/17, left: 4/17, 11\n(4/17) / (11) = 4/187, left: 4/187\n(11) + (4/17) = 191/17, left: 191/17\n(11) - (4/17) = 183/17, left: 183/17\n(4/17) - (11) = -183/17, left: -183/17\n(4) - (17) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (4 - (9 + 8)))"}, {"input": "11 9 4 8\n", "output": "(4) - (8) = -4, left: -4, 11, 9\n(9) / (11) = 9/11, left: 9/11, -4\n(-4) / (9/11) = -44/9, left: -44/9\n(11) * (9) = 99, left: 99, -4\n(-4) + (99) = 95, left: 95\n(11) / (9) = 11/9, left: 11/9, -4\n(9) - (11) = -2, left: -2, -4\n(-2) - (-4) = 2, left: 2\n(11) + (9) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((11 + 9) - (4 - 8))"}, {"input": "11 9 4 8\n", "output": "(8) / (4) = 2, left: 2, 11, 9\n(11) - (2) = 9, left: 9, 9\n(9) / (2) = 9/2, left: 9/2, 11\n(9) - (2) = 7, left: 7, 11\n(8) - (4) = 4, left: 4, 11, 9\n(11) / (9) = 11/9, left: 11/9, 4\n(4) + (11/9) = 47/9, left: 47/9\n(11) - (9) = 2, left: 2, 4\n(11) + (9) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((8 - 4) + (11 + 9))"}, {"input": "11 9 4 8\n", "output": "(4) * (8) = 32, left: 32, 11, 9\n(32) - (9) = 23, left: 23, 11\n(11) + (32) = 43, left: 43, 9\n(9) * (43) = 387, left: 387\n(11) + (9) = 20, left: 20, 32\n(32) - (20) = 12, left: 12\n(8) - (4) = 4, left: 4, 11, 9\n(11) * (9) = 99, left: 99, 4\n(11) + (9) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((8 - 4) + (11 + 9))"}, {"input": "11 9 4 8\n", "output": "(8) / (11) = 8/11, left: 8/11, 9, 4\n(9) + (8/11) = 107/11, left: 107/11, 4\n(107/11) - (4) = 63/11, left: 63/11\n(4) + (8/11) = 52/11, left: 52/11, 9\n(8/11) / (4) = 2/11, left: 2/11, 9\n(11) + (8) = 19, left: 19, 9, 4\n(9) - (19) = -10, left: -10, 4\n(4) / (-10) = -2/5, left: -2/5\n(9) + (19) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((9 + (11 + 8)) - 4)"}, {"input": "4 8 7 7\n", "output": "(7) + (7) = 14, left: 14, 4, 8\n(4) / (14) = 2/7, left: 2/7, 8\n(8) / (2/7) = 28, left: 28\n(14) - (4) = 10, left: 10, 8\n(4) + (14) = 18, left: 18, 8\n(14) / (4) = 7/2, left: 7/2, 8\n(14) / (8) = 7/4, left: 7/4, 4\n(14) - (8) = 6, left: 6, 4\n(4) - (6) = -2, left: -2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((7 + 7) - 8))"}, {"input": "4 8 7 7\n", "output": "(4) + (7) = 11, left: 11, 8, 7\n(7) - (4) = 3, left: 3, 8, 7\n(3) - (7) = -4, left: -4, 8\n(4) - (7) = -3, left: -3, 8, 7\n(4) / (7) = 4/7, left: 4/7, 8, 7\n(4) + (7) = 11, left: 11, 8, 7\n(7) + (11) = 18, left: 18, 8\n(7) + (7) = 14, left: 14, 4, 8\n(14) - (8) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((7 + 7) - 8))"}, {"input": "4 8 7 7\n", "output": "(8) * (7) = 56, left: 56, 4, 7\n(4) * (56) = 224, left: 224, 7\n(7) / (56) = 1/8, left: 1/8, 4\n(7) * (56) = 392, left: 392, 4\n(7) - (56) = -49, left: -49, 4\n(7) / (8) = 7/8, left: 7/8, 4, 7\n(4) * (7/8) = 7/2, left: 7/2, 7\n(7) - (8) = -1, left: -1, 4, 7\n(7) + (-1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 + (7 - 8)))"}, {"input": "4 8 7 7\n", "output": "(8) / (7) = 8/7, left: 8/7, 4, 7\n(8) * (7) = 56, left: 56, 4, 7\n(4) + (7) = 11, left: 11, 56\n(7) / (8) = 7/8, left: 7/8, 4, 7\n(7) * (7/8) = 49/8, left: 49/8, 4\n(7) / (7/8) = 8, left: 8, 4\n(4) / (8) = 1/2, left: 1/2\n(8) - (7) = 1, left: 1, 4, 7\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (8 - 7)))"}, {"input": "4 8 7 7\n", "output": "(4) / (7) = 4/7, left: 4/7, 8, 7\n(7) / (4) = 7/4, left: 7/4, 8, 7\n(4) + (7) = 11, left: 11, 8, 7\n(7) + (11) = 18, left: 18, 8\n(4) * (7) = 28, left: 28, 8, 7\n(7) - (4) = 3, left: 3, 8, 7\n(4) / (7) = 4/7, left: 4/7, 8, 7\n(4) * (7) = 28, left: 28, 8, 7\n(7) + (28) = 35, left: 35, 8\n(4) - (7) = -3, left: -3, 8, 7\n(4) + (7) = 11, left: 11, 8, 7\n(7) + (7) = 14, left: 14, 4, 8\n(14) - (8) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((7 + 7) - 8))"}, {"input": "1 13 10 7\n", "output": "(1) * (7) = 7, left: 7, 13, 10\n(10) / (13) = 10/13, left: 10/13, 7\n(7) * (10/13) = 70/13, left: 70/13\n(1) + (7) = 8, left: 8, 13, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "1 13 10 7\n", "output": "(1) / (7) = 1/7, left: 1/7, 13, 10\n(1) + (7) = 8, left: 8, 13, 10\n(13) * (8) = 104, left: 104, 10\n(10) * (8) = 80, left: 80, 13\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "1 13 10 7\n", "output": "(1) / (7) = 1/7, left: 1/7, 13, 10\n(7) - (1) = 6, left: 6, 13, 10\n(6) / (10) = 3/5, left: 3/5, 13\n(1) * (7) = 7, left: 7, 13, 10\n(10) + (7) = 17, left: 17, 13\n(13) - (17) = -4, left: -4\n(1) + (7) = 8, left: 8, 13, 10\n(8) / (13) = 8/13, left: 8/13, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "1 13 10 7\n", "output": "(1) / (7) = 1/7, left: 1/7, 13, 10\n(13) / (10) = 13/10, left: 13/10, 1/7\n(1) * (7) = 7, left: 7, 13, 10\n(10) / (7) = 10/7, left: 10/7, 13\n(13) - (10/7) = 81/7, left: 81/7\n(1) - (7) = -6, left: -6, 13, 10\n(13) / (10) = 13/10, left: 13/10, -6\n(1) + (7) = 8, left: 8, 13, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "1 13 10 7\n", "output": "(10) / (7) = 10/7, left: 10/7, 1, 13\n(10) - (7) = 3, left: 3, 1, 13\n(7) - (10) = -3, left: -3, 1, 13\n(1) / (-3) = -1/3, left: -1/3, 13\n(10) + (7) = 17, left: 17, 1, 13\n(13) / (1) = 13, left: 13, 17\n(7) / (10) = 7/10, left: 7/10, 1, 13\n(1) + (7) = 8, left: 8, 13, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "1 13 10 7\n", "output": "(7) - (10) = -3, left: -3, 1, 13\n(-3) - (13) = -16, left: -16, 1\n(-16) / (1) = -16, left: -16\n(1) - (7) = -6, left: -6, 13, 10\n(10) + (-6) = 4, left: 4, 13\n(4) - (13) = -9, left: -9\n(7) / (1) = 7, left: 7, 13, 10\n(1) + (7) = 8, left: 8, 13, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "1 13 10 7\n", "output": "(1) / (7) = 1/7, left: 1/7, 13, 10\n(1/7) - (10) = -69/7, left: -69/7, 13\n(10) - (1/7) = 69/7, left: 69/7, 13\n(13) * (10) = 130, left: 130, 1/7\n(13) + (10) = 23, left: 23, 1/7\n(13) / (1/7) = 91, left: 91, 10\n(1/7) / (13) = 1/91, left: 1/91, 10\n(1) + (7) = 8, left: 8, 13, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "5 3 3 6\n", "output": "(5) + (3) = 8, left: 8, 3, 6\n(3) + (8) = 11, left: 11, 6\n(6) / (11) = 6/11, left: 6/11\n(3) / (8) = 3/8, left: 3/8, 6\n(6) - (8) = -2, left: -2, 3\n(6) + (8) = 14, left: 14, 3\n(3) + (14) = 17, left: 17\n(8) - (6) = 2, left: 2, 3\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((5 + 3) * (6 - 3))"}, {"input": "5 3 3 6\n", "output": "(3) / (5) = 3/5, left: 3/5, 3, 6\n(6) / (3/5) = 10, left: 10, 3\n(3) * (3/5) = 9/5, left: 9/5, 6\n(6) * (9/5) = 54/5, left: 54/5\n(6) - (3) = 3, left: 3, 3/5\n(5) - (3) = 2, left: 2, 3, 6\n(3) / (2) = 3/2, left: 3/2, 6\n(6) - (3/2) = 9/2, left: 9/2\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (5 - 3)))"}, {"input": "5 3 3 6\n", "output": "(3) - (6) = -3, left: -3, 5, 3\n(5) + (3) = 8, left: 8, -3\n(3) + (-3) = 0, left: 0, 5\n(3) / (-3) = -1, left: -1, 5\n(3) * (-3) = -9, left: -9, 5\n(-9) - (5) = -14, left: -14\n(-3) - (3) = -6, left: -6, 5\n(5) / (-3) = -5/3, left: -5/3, 3\n(5) - (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 - (3 - 6)))"}, {"input": "5 3 3 6\n", "output": "(3) - (6) = -3, left: -3, 5, 3\n(5) + (3) = 8, left: 8, -3\n(8) - (-3) = 11, left: 11\n(3) + (-3) = 0, left: 0, 5\n(0) / (5) = 0, left: 0\n(3) * (-3) = -9, left: -9, 5\n(-9) / (5) = -9/5, left: -9/5\n(-3) - (3) = -6, left: -6, 5\n(3) - (-3) = 6, left: 6, 5\n(5) + (-3) = 2, left: 2, 3\n(-3) - (5) = -8, left: -8, 3\n(-8) / (3) = -8/3, left: -8/3\n(5) - (-3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 - (3 - 6)))"}, {"input": "8 3 4 4\n", "output": "(8) / (4) = 2, left: 2, 3, 4\n(4) / (3) = 4/3, left: 4/3, 2\n(2) * (4/3) = 8/3, left: 8/3\n(3) - (4) = -1, left: -1, 2\n(3) * (4) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((8 / 4) * (3 * 4))"}, {"input": "8 3 4 4\n", "output": "(3) / (4) = 3/4, left: 3/4, 8, 4\n(8) - (3/4) = 29/4, left: 29/4, 4\n(4) / (29/4) = 16/29, left: 16/29\n(4) - (29/4) = -13/4, left: -13/4\n(8) * (3/4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (8 * (3 / 4)))"}, {"input": "8 3 4 4\n", "output": "(8) - (3) = 5, left: 5, 4, 4\n(4) - (5) = -1, left: -1, 4\n(4) * (-1) = -4, left: -4\n(-1) - (4) = -5, left: -5\n(4) + (5) = 9, left: 9, 4\n(9) / (4) = 9/4, left: 9/4\n(4) + (9) = 13, left: 13\n(4) * (5) = 20, left: 20, 4\n(20) - (4) = 16, left: 16\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (8 - 3)))"}, {"input": "8 3 4 4\n", "output": "(3) / (4) = 3/4, left: 3/4, 8, 4\n(8) - (3/4) = 29/4, left: 29/4, 4\n(4) / (29/4) = 16/29, left: 16/29\n(29/4) / (4) = 29/16, left: 29/16\n(8) * (3/4) = 6, left: 6, 4\n(6) / (4) = 3/2, left: 3/2\n(4) / (6) = 2/3, left: 2/3\n(4) + (6) = 10, left: 10\n(6) - (4) = 2, left: 2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (8 * (3 / 4)))"}, {"input": "8 3 4 4\n", "output": "(8) - (3) = 5, left: 5, 4, 4\n(4) / (5) = 4/5, left: 4/5, 4\n(4) * (4/5) = 16/5, left: 16/5\n(4/5) - (4) = -16/5, left: -16/5\n(4) + (4/5) = 24/5, left: 24/5\n(4) - (4/5) = 16/5, left: 16/5\n(4) * (5) = 20, left: 20, 4\n(20) - (4) = 16, left: 16\n(4) * (20) = 80, left: 80\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (8 - 3)))"}, {"input": "8 3 4 4\n", "output": "(8) / (4) = 2, left: 2, 3, 4\n(4) / (3) = 4/3, left: 4/3, 2\n(4/3) / (2) = 2/3, left: 2/3\n(4/3) - (2) = -2/3, left: -2/3\n(3) - (4) = -1, left: -1, 2\n(2) - (-1) = 3, left: 3\n(-1) - (2) = -3, left: -3\n(3) * (4) = 12, left: 12, 2\n(2) / (12) = 1/6, left: 1/6\n(2) * (12) = 24, left: 24\nreach 24! expression: ((8 / 4) * (3 * 4))"}, {"input": "8 3 4 4\n", "output": "(8) - (3) = 5, left: 5, 4, 4\n(4) - (5) = -1, left: -1, 4\n(4) * (-1) = -4, left: -4\n(4) - (-1) = 5, left: 5\n(4) / (-1) = -4, left: -4\n(-1) - (4) = -5, left: -5\n(4) + (-1) = 3, left: 3\n(4) + (5) = 9, left: 9, 4\n(4) - (9) = -5, left: -5\n(9) / (4) = 9/4, left: 9/4\n(9) - (4) = 5, left: 5\n(4) * (5) = 20, left: 20, 4\n(20) - (4) = 16, left: 16\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (4 * (8 - 3)))"}, {"input": "4 12 13 4\n", "output": "(4) - (13) = -9, left: -9, 12, 4\n(12) * (4) = 48, left: 48, -9\n(13) - (4) = 9, left: 9, 12, 4\n(4) / (12) = 1/3, left: 1/3, 9\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (13 - 4)) - 12)"}, {"input": "4 12 13 4\n", "output": "(13) - (4) = 9, left: 9, 4, 12\n(9) / (4) = 9/4, left: 9/4, 12\n(12) + (9/4) = 57/4, left: 57/4\n(4) * (9) = 36, left: 36, 12\n(12) - (36) = -24, left: -24\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (13 - 4)) - 12)"}, {"input": "4 12 13 4\n", "output": "(12) / (13) = 12/13, left: 12/13, 4, 4\n(13) / (12) = 13/12, left: 13/12, 4, 4\n(4) - (4) = 0, left: 0, 13/12\n(12) + (13) = 25, left: 25, 4, 4\n(4) / (4) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((12 + 13) - (4 / 4))"}, {"input": "4 12 13 4\n", "output": "(4) - (13) = -9, left: -9, 4, 12\n(4) + (12) = 16, left: 16, -9\n(-9) * (16) = -144, left: -144\n(4) - (12) = -8, left: -8, -9\n(4) / (-9) = -4/9, left: -4/9, 12\n(12) * (-4/9) = -16/3, left: -16/3\n(13) - (4) = 9, left: 9, 4, 12\n(12) / (9) = 4/3, left: 4/3, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (13 - 4)) - 12)"}, {"input": "4 12 13 4\n", "output": "(13) - (4) = 9, left: 9, 4, 12\n(9) / (4) = 9/4, left: 9/4, 12\n(9/4) / (12) = 3/16, left: 3/16\n(9/4) - (12) = -39/4, left: -39/4\n(12) / (9/4) = 16/3, left: 16/3\n(4) * (9) = 36, left: 36, 12\n(12) / (36) = 1/3, left: 1/3\n(36) / (12) = 3, left: 3\n(12) + (36) = 48, left: 48\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (13 - 4)) - 12)"}, {"input": "4 12 13 4\n", "output": "(12) / (13) = 12/13, left: 12/13, 4, 4\n(4) - (4) = 0, left: 0, 12/13\n(12/13) + (0) = 12/13, left: 12/13\n(4) + (12/13) = 64/13, left: 64/13, 4\n(12/13) / (4) = 3/13, left: 3/13, 4\n(12) * (13) = 156, left: 156, 4, 4\n(12) + (13) = 25, left: 25, 4, 4\n(4) - (4) = 0, left: 0, 25\n(4) / (4) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((12 + 13) - (4 / 4))"}, {"input": "4 12 13 4\n", "output": "(4) - (13) = -9, left: -9, 12, 4\n(12) - (4) = 8, left: 8, -9\n(-9) * (8) = -72, left: -72\n(12) * (4) = 48, left: 48, -9\n(48) - (-9) = 57, left: 57\n(4) / (12) = 1/3, left: 1/3, -9\n(13) - (4) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) / (12) = 3, left: 3\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (13 - 4)) - 12)"}, {"input": "4 12 13 4\n", "output": "(4) / (13) = 4/13, left: 4/13, 4, 12\n(12) * (4/13) = 48/13, left: 48/13, 4\n(4) - (13) = -9, left: -9, 4, 12\n(13) + (4) = 17, left: 17, 4, 12\n(4) - (17) = -13, left: -13, 12\n(13) * (4) = 52, left: 52, 4, 12\n(12) * (52) = 624, left: 624, 4\n(13) - (4) = 9, left: 9, 4, 12\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (13 - 4)) - 12)"}, {"input": "9 13 9 11\n", "output": "(9) - (11) = -2, left: -2, 9, 13\n(9) / (-2) = -9/2, left: -9/2, 13\n(13) + (-9/2) = 17/2, left: 17/2\n(-9/2) - (13) = -35/2, left: -35/2\n(-2) - (9) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((9 - 11) - 9))"}, {"input": "9 13 9 11\n", "output": "(9) + (13) = 22, left: 22, 9, 11\n(9) / (22) = 9/22, left: 9/22, 11\n(9) * (22) = 198, left: 198, 11\n(11) * (198) = 2178, left: 2178\n(22) - (9) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((9 + 13) - 9))"}, {"input": "9 13 9 11\n", "output": "(9) - (11) = -2, left: -2, 13, 9\n(9) - (13) = -4, left: -4, -2\n(9) / (13) = 9/13, left: 9/13, -2\n(9/13) - (-2) = 35/13, left: 35/13\n(13) + (9) = 22, left: 22, -2\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((13 + 9) - (9 - 11))"}, {"input": "9 13 9 11\n", "output": "(11) / (9) = 11/9, left: 11/9, 13, 9\n(13) + (9) = 22, left: 22, 11/9\n(13) * (9) = 117, left: 117, 11/9\n(9) / (13) = 9/13, left: 9/13, 11/9\n(9) * (11/9) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (9 * (11 / 9)))"}, {"input": "9 13 9 11\n", "output": "(9) - (11) = -2, left: -2, 13, 9\n(13) - (9) = 4, left: 4, -2\n(-2) + (4) = 2, left: 2\n(4) / (-2) = -2, left: -2\n(9) - (13) = -4, left: -4, -2\n(9) / (13) = 9/13, left: 9/13, -2\n(-2) / (9/13) = -26/9, left: -26/9\n(13) + (9) = 22, left: 22, -2\n(22) / (-2) = -11, left: -11\n(22) - (-2) = 24, left: 24\nreach 24! expression: ((13 + 9) - (9 - 11))"}, {"input": "9 13 9 11\n", "output": "(9) - (11) = -2, left: -2, 9, 13\n(9) / (-2) = -9/2, left: -9/2, 13\n(13) + (-9/2) = 17/2, left: 17/2\n(13) - (-9/2) = 35/2, left: 35/2\n(-9/2) - (13) = -35/2, left: -35/2\n(13) / (-9/2) = -26/9, left: -26/9\n(13) * (-9/2) = -117/2, left: -117/2\n(-2) - (9) = -11, left: -11, 13\n(-11) / (13) = -11/13, left: -11/13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((9 - 11) - 9))"}, {"input": "9 13 9 11\n", "output": "(9) + (9) = 18, left: 18, 13, 11\n(11) * (18) = 198, left: 198, 13\n(11) - (18) = -7, left: -7, 13\n(18) / (11) = 18/11, left: 18/11, 13\n(18) - (11) = 7, left: 7, 13\n(13) * (18) = 234, left: 234, 11\n(11) / (13) = 11/13, left: 11/13, 18\n(9) - (9) = 0, left: 0, 13, 11\n(13) - (0) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 - (9 - 9)))"}, {"input": "9 13 9 11\n", "output": "(9) + (13) = 22, left: 22, 9, 11\n(9) / (22) = 9/22, left: 9/22, 11\n(9/22) / (11) = 9/242, left: 9/242\n(22) / (9) = 22/9, left: 22/9, 11\n(22/9) / (11) = 2/9, left: 2/9\n(9) + (22) = 31, left: 31, 11\n(31) / (11) = 31/11, left: 31/11\n(31) - (11) = 20, left: 20\n(22) - (9) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((9 + 13) - 9))"}, {"input": "9 13 9 11\n", "output": "(11) / (9) = 11/9, left: 11/9, 13, 9\n(13) + (9) = 22, left: 22, 11/9\n(11/9) + (22) = 209/9, left: 209/9\n(13) / (9) = 13/9, left: 13/9, 11/9\n(13) - (9) = 4, left: 4, 11/9\n(13) * (9) = 117, left: 117, 11/9\n(11/9) / (9) = 11/81, left: 11/81, 13\n(9) / (11/9) = 81/11, left: 81/11, 13\n(9) * (11/9) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (9 * (11 / 9)))"}, {"input": "6 4 1 1\n", "output": "(1) * (1) = 1, left: 1, 6, 4\n(4) / (6) = 2/3, left: 2/3, 1\n(2/3) - (1) = -1/3, left: -1/3\n(6) - (4) = 2, left: 2, 1\n(6) * (4) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * 4) / (1 * 1))"}, {"input": "6 4 1 1\n", "output": "(1) - (6) = -5, left: -5, 4, 1\n(4) + (-5) = -1, left: -1, 1\n(-5) / (4) = -5/4, left: -5/4, 1\n(1) * (-5/4) = -5/4, left: -5/4\n(-5) - (4) = -9, left: -9, 1\n(1) / (-9) = -1/9, left: -1/9\n(1) + (-5) = -4, left: -4, 4\n(-4) - (4) = -8, left: -8\n(1) - (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 - (1 - 6)))"}, {"input": "6 4 1 1\n", "output": "(6) - (1) = 5, left: 5, 4, 1\n(1) / (5) = 1/5, left: 1/5, 4\n(1/5) - (4) = -19/5, left: -19/5\n(4) - (1/5) = 19/5, left: 19/5\n(4) * (1/5) = 4/5, left: 4/5\n(4) + (1/5) = 21/5, left: 21/5\n(1/5) / (4) = 1/20, left: 1/20\n(4) / (1/5) = 20, left: 20\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (6 - 1)))"}, {"input": "6 4 1 1\n", "output": "(6) - (1) = 5, left: 5, 4, 1\n(4) * (5) = 20, left: 20, 1\n(1) / (4) = 1/4, left: 1/4, 5\n(4) + (1) = 5, left: 5, 5\n(4) / (1) = 4, left: 4, 5\n(5) / (1) = 5, left: 5, 4\n(5) - (4) = 1, left: 1\n(1) - (5) = -4, left: -4, 4\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (6 - 1)))"}, {"input": "6 4 1 1\n", "output": "(1) * (1) = 1, left: 1, 6, 4\n(4) / (6) = 2/3, left: 2/3, 1\n(1) - (2/3) = 1/3, left: 1/3\n(4) - (6) = -2, left: -2, 1\n(1) - (-2) = 3, left: 3\n(6) - (4) = 2, left: 2, 1\n(1) / (2) = 1/2, left: 1/2\n(1) - (2) = -1, left: -1\n(6) * (4) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((6 * 4) / (1 * 1))"}, {"input": "6 4 1 1\n", "output": "(6) - (1) = 5, left: 5, 4, 1\n(1) / (5) = 1/5, left: 1/5, 4\n(1/5) - (4) = -19/5, left: -19/5\n(4) - (1/5) = 19/5, left: 19/5\n(4) * (1/5) = 4/5, left: 4/5\n(4) + (1/5) = 21/5, left: 21/5\n(1/5) / (4) = 1/20, left: 1/20\n(4) / (1/5) = 20, left: 20\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (6 - 1)))"}, {"input": "6 4 1 1\n", "output": "(1) - (6) = -5, left: -5, 4, 1\n(4) - (-5) = 9, left: 9, 1\n(1) + (9) = 10, left: 10\n(9) / (1) = 9, left: 9\n(-5) / (4) = -5/4, left: -5/4, 1\n(4) / (-5) = -4/5, left: -4/5, 1\n(-5) - (4) = -9, left: -9, 1\n(4) * (-5) = -20, left: -20, 1\n(-5) - (1) = -6, left: -6, 4\n(1) / (-5) = -1/5, left: -1/5, 4\n(1) + (-5) = -4, left: -4, 4\n(4) * (-4) = -16, left: -16\n(1) - (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 - (1 - 6)))"}, {"input": "6 4 1 1\n", "output": "(6) - (1) = 5, left: 5, 4, 1\n(1) / (5) = 1/5, left: 1/5, 4\n(1/5) - (4) = -19/5, left: -19/5\n(4) - (1/5) = 19/5, left: 19/5\n(4) * (1/5) = 4/5, left: 4/5\n(4) + (1/5) = 21/5, left: 21/5\n(1/5) / (4) = 1/20, left: 1/20\n(4) / (1/5) = 20, left: 20\n(1) + (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (1 + (6 - 1)))"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: 35, 6, 5\n(6) * (35) = 210, left: 210, 5\n(6) / (35) = 6/35, left: 6/35, 5\n(35) - (6) = 29, left: 29, 5\n(29) / (5) = 29/5, left: 29/5\n(29) - (5) = 24, left: 24\nreach 24! expression: (((5 * 7) - 6) - 5)"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: 35, 6, 5\n(5) - (6) = -1, left: -1, 35\n(-1) / (35) = -1/35, left: -1/35\n(-1) - (35) = -36, left: -36\n(6) + (5) = 11, left: 11, 35\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (6 + 5))"}, {"input": "5 6 7 5\n", "output": "(7) - (6) = 1, left: 1, 5, 5\n(1) / (5) = 1/5, left: 1/5, 5\n(1/5) - (5) = -24/5, left: -24/5\n(5) + (1) = 6, left: 6, 5\n(1) - (5) = -4, left: -4, 5\n(5) * (1) = 5, left: 5, 5\n(5) + (5) = 10, left: 10\n(5) - (1) = 4, left: 4, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (7 - 6))"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: 35, 6, 5\n(6) / (5) = 6/5, left: 6/5, 35\n(35) * (6/5) = 42, left: 42\n(5) - (6) = -1, left: -1, 35\n(35) / (-1) = -35, left: -35\n(35) - (-1) = 36, left: 36\n(-1) - (35) = -36, left: -36\n(35) * (-1) = -35, left: -35\n(6) + (5) = 11, left: 11, 35\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (6 + 5))"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: 35, 6, 5\n(6) * (35) = 210, left: 210, 5\n(6) / (35) = 6/35, left: 6/35, 5\n(6) + (35) = 41, left: 41, 5\n(41) - (5) = 36, left: 36\n(6) - (35) = -29, left: -29, 5\n(5) + (-29) = -24, left: -24\n(35) - (6) = 29, left: 29, 5\n(5) - (29) = -24, left: -24\n(29) - (5) = 24, left: 24\nreach 24! expression: (((5 * 7) - 6) - 5)"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: 35, 6, 5\n(5) * (35) = 175, left: 175, 6\n(6) * (175) = 1050, left: 1050\n(6) - (175) = -169, left: -169\n(6) + (175) = 181, left: 181\n(175) - (6) = 169, left: 169\n(6) / (175) = 6/175, left: 6/175\n(35) - (5) = 30, left: 30, 6\n(6) + (30) = 36, left: 36\n(30) - (6) = 24, left: 24\nreach 24! expression: (((5 * 7) - 5) - 6)"}, {"input": "5 6 7 5\n", "output": "(6) / (5) = 6/5, left: 6/5, 5, 7\n(5) - (6) = -1, left: -1, 5, 7\n(5) / (6) = 5/6, left: 5/6, 5, 7\n(5) * (7) = 35, left: 35, 5/6\n(35) / (5/6) = 42, left: 42\n(5) - (5/6) = 25/6, left: 25/6, 7\n(5/6) / (7) = 5/42, left: 5/42, 5\n(6) + (5) = 11, left: 11, 5, 7\n(5) * (7) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 * 7) - (6 + 5))"}, {"input": "5 6 7 5\n", "output": "(7) - (6) = 1, left: 1, 5, 5\n(1) - (5) = -4, left: -4, 5\n(-4) / (5) = -4/5, left: -4/5\n(5) / (1) = 5, left: 5, 5\n(5) / (5) = 1, left: 1\n(5) - (1) = 4, left: 4, 5\n(5) * (4) = 20, left: 20\n(5) * (1) = 5, left: 5, 5\n(5) / (5) = 1, left: 1\n(1) / (5) = 1/5, left: 1/5, 5\n(5) - (1) = 4, left: 4, 5\n(5) * (4) = 20, left: 20\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (7 - 6))"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: 35, 6, 5\n(5) * (35) = 175, left: 175, 6\n(6) * (175) = 1050, left: 1050\n(175) / (6) = 175/6, left: 175/6\n(6) - (175) = -169, left: -169\n(6) + (175) = 181, left: 181\n(175) - (6) = 169, left: 169\n(6) / (175) = 6/175, left: 6/175\n(35) - (5) = 30, left: 30, 6\n(6) * (30) = 180, left: 180\n(6) + (30) = 36, left: 36\n(30) - (6) = 24, left: 24\nreach 24! expression: (((5 * 7) - 5) - 6)"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: 35, 6, 5\n(5) * (35) = 175, left: 175, 6\n(6) * (175) = 1050, left: 1050\n(175) / (6) = 175/6, left: 175/6\n(6) - (175) = -169, left: -169\n(6) + (175) = 181, left: 181\n(175) - (6) = 169, left: 169\n(6) / (175) = 6/175, left: 6/175\n(35) - (5) = 30, left: 30, 6\n(6) * (30) = 180, left: 180\n(6) + (30) = 36, left: 36\n(30) - (6) = 24, left: 24\nreach 24! expression: (((5 * 7) - 5) - 6)"}, {"input": "8 3 5 8\n", "output": "(8) + (3) = 11, left: 11, 5, 8\n(8) * (11) = 88, left: 88, 5\n(88) - (5) = 83, left: 83\n(5) / (88) = 5/88, left: 5/88\n(8) / (11) = 8/11, left: 8/11, 5\n(5) + (8/11) = 63/11, left: 63/11\n(11) / (8) = 11/8, left: 11/8, 5\n(11/8) - (5) = -29/8, left: -29/8\n(8) + (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (8 + (8 + 3)))"}, {"input": "8 3 5 8\n", "output": "(8) / (3) = 8/3, left: 8/3, 8, 5\n(8) + (8/3) = 32/3, left: 32/3, 5\n(5) + (32/3) = 47/3, left: 47/3\n(3) / (8) = 3/8, left: 3/8, 8, 5\n(8) / (3/8) = 64/3, left: 64/3, 5\n(8) + (3/8) = 67/8, left: 67/8, 5\n(8) * (5) = 40, left: 40, 3/8\n(3) + (8) = 11, left: 11, 8, 5\n(5) + (11) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (5 + (3 + 8)))"}, {"input": "8 3 5 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 8, 3\n(8) / (5/8) = 64/5, left: 64/5, 3\n(3) / (64/5) = 15/64, left: 15/64\n(5) - (8) = -3, left: -3, 8, 3\n(3) + (-3) = 0, left: 0, 8\n(8) + (-3) = 5, left: 5, 3\n(8) - (-3) = 11, left: 11, 3\n(5) + (8) = 13, left: 13, 8, 3\n(8) + (3) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: ((5 + 8) + (8 + 3))"}, {"input": "8 3 5 8\n", "output": "(8) * (5) = 40, left: 40, 3, 8\n(8) - (5) = 3, left: 3, 3, 8\n(8) / (3) = 8/3, left: 8/3, 3\n(3) + (8/3) = 17/3, left: 17/3\n(3) / (3) = 1, left: 1, 8\n(5) / (8) = 5/8, left: 5/8, 3, 8\n(3) - (5/8) = 19/8, left: 19/8, 8\n(8) + (5) = 13, left: 13, 3, 8\n(3) + (13) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (3 + (8 + 5)))"}, {"input": "8 3 5 8\n", "output": "(8) + (8) = 16, left: 16, 3, 5\n(3) * (16) = 48, left: 48, 5\n(16) - (3) = 13, left: 13, 5\n(16) / (3) = 16/3, left: 16/3, 5\n(16/3) - (5) = 1/3, left: 1/3\n(5) - (16/3) = -1/3, left: -1/3\n(3) / (16) = 3/16, left: 3/16, 5\n(3) + (16) = 19, left: 19, 5\n(19) / (5) = 19/5, left: 19/5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (3 + (8 + 8)))"}, {"input": "10 4 4 8\n", "output": "(4) - (8) = -4, left: -4, 10, 4\n(10) - (4) = 6, left: 6, -4\n(10) / (4) = 5/2, left: 5/2, -4\n(-4) * (5/2) = -10, left: -10\n(4) - (10) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((4 - 8) * (4 - 10))"}, {"input": "10 4 4 8\n", "output": "(10) / (4) = 5/2, left: 5/2, 4, 8\n(5/2) / (8) = 5/16, left: 5/16, 4\n(8) + (5/2) = 21/2, left: 21/2, 4\n(21/2) / (4) = 21/8, left: 21/8\n(8) * (5/2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (8 * (10 / 4)))"}, {"input": "10 4 4 8\n", "output": "(10) / (4) = 5/2, left: 5/2, 4, 8\n(8) / (5/2) = 16/5, left: 16/5, 4\n(4) * (16/5) = 64/5, left: 64/5\n(4) - (16/5) = 4/5, left: 4/5\n(8) * (5/2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (8 * (10 / 4)))"}, {"input": "10 4 4 8\n", "output": "(4) - (8) = -4, left: -4, 10, 4\n(10) - (4) = 6, left: 6, -4\n(-4) / (6) = -2/3, left: -2/3\n(-4) + (6) = 2, left: 2\n(-4) - (6) = -10, left: -10\n(10) / (4) = 5/2, left: 5/2, -4\n(-4) * (5/2) = -10, left: -10\n(5/2) / (-4) = -5/8, left: -5/8\n(4) - (10) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((4 - 8) * (4 - 10))"}, {"input": "10 4 4 8\n", "output": "(10) / (4) = 5/2, left: 5/2, 4, 8\n(4) / (5/2) = 8/5, left: 8/5, 8\n(8) * (8/5) = 64/5, left: 64/5\n(4) + (5/2) = 13/2, left: 13/2, 8\n(8) * (13/2) = 52, left: 52\n(8) + (5/2) = 21/2, left: 21/2, 4\n(5/2) - (8) = -11/2, left: -11/2, 4\n(4) + (-11/2) = -3/2, left: -3/2\n(8) * (5/2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (8 * (10 / 4)))"}, {"input": "10 4 4 8\n", "output": "(4) + (8) = 12, left: 12, 10, 4\n(12) / (10) = 6/5, left: 6/5, 4\n(4) + (12) = 16, left: 16, 10\n(4) - (12) = -8, left: -8, 10\n(4) * (8) = 32, left: 32, 10, 4\n(32) / (4) = 8, left: 8, 10\n(4) / (32) = 1/8, left: 1/8, 10\n(8) / (4) = 2, left: 2, 10, 4\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (8 / 4)))"}, {"input": "10 4 4 8\n", "output": "(10) / (4) = 5/2, left: 5/2, 4, 8\n(8) / (5/2) = 16/5, left: 16/5, 4\n(4) * (16/5) = 64/5, left: 64/5\n(16/5) - (4) = -4/5, left: -4/5\n(4) + (16/5) = 36/5, left: 36/5\n(4) / (16/5) = 5/4, left: 5/4\n(16/5) / (4) = 4/5, left: 4/5\n(8) * (5/2) = 20, left: 20, 4\n(4) - (20) = -16, left: -16\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (8 * (10 / 4)))"}, {"input": "10 4 4 8\n", "output": "(4) / (4) = 1, left: 1, 10, 8\n(8) - (1) = 7, left: 7, 10\n(4) / (4) = 1, left: 1, 10, 8\n(4) - (4) = 0, left: 0, 10, 8\n(8) / (10) = 4/5, left: 4/5, 4, 4\n(4) * (4) = 16, left: 16, 4/5\n(4/5) / (4) = 1/5, left: 1/5, 4\n(8) - (10) = -2, left: -2, 4, 4\n(4) - (-2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (4 - (8 - 10)))"}, {"input": "10 4 4 8\n", "output": "(4) / (4) = 1, left: 1, 10, 8\n(1) - (8) = -7, left: -7, 10\n(4) / (4) = 1, left: 1, 10, 8\n(4) * (4) = 16, left: 16, 10, 8\n(16) - (8) = 8, left: 8, 10\n(8) - (10) = -2, left: -2, 16\n(4) + (4) = 8, left: 8, 10, 8\n(8) * (8) = 64, left: 64, 10\n(10) + (8) = 18, left: 18, 8\n(4) - (4) = 0, left: 0, 10, 8\n(8) / (10) = 4/5, left: 4/5, 4, 4\n(8) - (10) = -2, left: -2, 4, 4\n(4) - (-2) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (4 - (8 - 10)))"}, {"input": "13 3 3 7\n", "output": "(3) / (13) = 3/13, left: 3/13, 3, 7\n(3) + (7) = 10, left: 10, 3/13\n(13) / (3) = 13/3, left: 13/3, 3, 7\n(3) - (13) = -10, left: -10, 3, 7\n(13) + (3) = 16, left: 16, 3, 7\n(3) - (7) = -4, left: -4, 16\n(3) * (7) = 21, left: 21, 13, 3\n(3) / (21) = 1/7, left: 1/7, 13\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "13 3 3 7\n", "output": "(7) / (3) = 7/3, left: 7/3, 13, 3\n(13) - (3) = 10, left: 10, 7/3\n(3) / (13) = 3/13, left: 3/13, 7/3\n(3) - (7) = -4, left: -4, 13, 3\n(13) * (-4) = -52, left: -52, 3\n(13) - (3) = 10, left: 10, -4\n(-4) - (10) = -14, left: -14\n(3) * (7) = 21, left: 21, 13, 3\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "13 3 3 7\n", "output": "(13) - (7) = 6, left: 6, 3, 3\n(13) / (3) = 13/3, left: 13/3, 3, 7\n(3) * (7) = 21, left: 21, 13/3\n(3) / (13) = 3/13, left: 3/13, 3, 7\n(3) + (7) = 10, left: 10, 13, 3\n(13) / (3) = 13/3, left: 13/3, 10\n(13/3) / (10) = 13/30, left: 13/30\n(3) * (7) = 21, left: 21, 13, 3\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "13 3 3 7\n", "output": "(3) / (3) = 1, left: 1, 13, 7\n(3) - (3) = 0, left: 0, 13, 7\n(3) / (13) = 3/13, left: 3/13, 3, 7\n(7) - (3) = 4, left: 4, 13, 3\n(4) - (13) = -9, left: -9, 3\n(7) / (3) = 7/3, left: 7/3, 13, 3\n(13) + (3) = 16, left: 16, 7/3\n(3) * (7) = 21, left: 21, 13, 3\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "13 3 3 7\n", "output": "(3) / (13) = 3/13, left: 3/13, 3, 7\n(3) + (3/13) = 42/13, left: 42/13, 7\n(3) - (13) = -10, left: -10, 3, 7\n(13) + (3) = 16, left: 16, 3, 7\n(13) * (3) = 39, left: 39, 3, 7\n(3) / (39) = 1/13, left: 1/13, 7\n(3) / (13) = 3/13, left: 3/13, 3, 7\n(3) * (7) = 21, left: 21, 13, 3\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "13 3 3 7\n", "output": "(3) / (3) = 1, left: 1, 13, 7\n(13) + (7) = 20, left: 20, 1\n(3) - (3) = 0, left: 0, 13, 7\n(3) * (3) = 9, left: 9, 13, 7\n(9) - (7) = 2, left: 2, 13\n(13) / (3) = 13/3, left: 13/3, 3, 7\n(13) - (7) = 6, left: 6, 3, 3\n(13) + (3) = 16, left: 16, 3, 7\n(7) / (16) = 7/16, left: 7/16, 3\n(13) * (3) = 39, left: 39, 3, 7\n(13) / (3) = 13/3, left: 13/3, 3, 7\n(3) * (7) = 21, left: 21, 13, 3\n(21) - (13) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "3 8 2 8\n", "output": "(8) / (8) = 1, left: 1, 3, 2\n(1) - (3) = -2, left: -2, 2\n(8) - (8) = 0, left: 0, 3, 2\n(0) - (2) = -2, left: -2, 3\n(8) / (8) = 1, left: 1, 3, 2\n(3) / (2) = 3/2, left: 3/2, 1\n(8) + (8) = 16, left: 16, 3, 2\n(16) - (2) = 14, left: 14, 3\n(2) / (16) = 1/8, left: 1/8, 3\n(3) / (1/8) = 24, left: 24\nreach 24! expression: (3 / (2 / (8 + 8)))"}, {"input": "3 8 2 8\n", "output": "(8) - (3) = 5, left: 5, 8, 2\n(5) / (2) = 5/2, left: 5/2, 8\n(8) * (5/2) = 20, left: 20\n(2) * (5) = 10, left: 10, 8\n(8) + (10) = 18, left: 18\n(10) - (8) = 2, left: 2\n(5) - (2) = 3, left: 3, 8\n(3) - (8) = -5, left: -5\n(8) + (3) = 11, left: 11\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((8 - 3) - 2))"}, {"input": "3 8 2 8\n", "output": "(3) - (8) = -5, left: -5, 2, 8\n(8) / (3) = 8/3, left: 8/3, 2, 8\n(2) * (8) = 16, left: 16, 8/3\n(3) * (8) = 24, left: 24, 2, 8\n(24) / (2) = 12, left: 12, 8\n(8) / (12) = 2/3, left: 2/3\n(8) - (3) = 5, left: 5, 2, 8\n(2) / (5) = 2/5, left: 2/5, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((8 - 3) - 2))"}, {"input": "3 8 2 8\n", "output": "(8) - (2) = 6, left: 6, 3, 8\n(8) - (6) = 2, left: 2, 3\n(3) / (2) = 3/2, left: 3/2\n(8) + (6) = 14, left: 14, 3\n(14) - (3) = 11, left: 11\n(3) * (6) = 18, left: 18, 8\n(3) - (6) = -3, left: -3, 8\n(-3) / (8) = -3/8, left: -3/8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((8 - 2) - 3))"}, {"input": "3 8 2 8\n", "output": "(3) + (8) = 11, left: 11, 2, 8\n(8) / (2) = 4, left: 4, 11\n(8) - (2) = 6, left: 6, 11\n(8) - (11) = -3, left: -3, 2\n(8) / (11) = 8/11, left: 8/11, 2\n(8) - (3) = 5, left: 5, 2, 8\n(8) * (5) = 40, left: 40, 2\n(2) * (40) = 80, left: 80\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((8 - 3) - 2))"}, {"input": "3 8 2 8\n", "output": "(8) / (8) = 1, left: 1, 3, 2\n(3) - (1) = 2, left: 2, 2\n(8) / (8) = 1, left: 1, 3, 2\n(3) * (2) = 6, left: 6, 1\n(2) / (3) = 2/3, left: 2/3, 1\n(2/3) / (1) = 2/3, left: 2/3\n(2) + (1) = 3, left: 3, 3\n(8) * (8) = 64, left: 64, 3, 2\n(2) - (64) = -62, left: -62, 3\n(3) + (64) = 67, left: 67, 2\n(2) * (67) = 134, left: 134\n(8) + (8) = 16, left: 16, 3, 2\n(2) / (16) = 1/8, left: 1/8, 3\n(3) / (1/8) = 24, left: 24\nreach 24! expression: (3 / (2 / (8 + 8)))"}, {"input": "3 8 2 8\n", "output": "(3) - (8) = -5, left: -5, 2, 8\n(8) / (3) = 8/3, left: 8/3, 2, 8\n(8) / (8/3) = 3, left: 3, 2\n(3) - (2) = 1, left: 1\n(3) * (8) = 24, left: 24, 2, 8\n(8) / (2) = 4, left: 4, 24\n(8) + (24) = 32, left: 32, 2\n(3) / (8) = 3/8, left: 3/8, 2, 8\n(8) / (3/8) = 64/3, left: 64/3, 2\n(8) - (3) = 5, left: 5, 2, 8\n(2) * (5) = 10, left: 10, 8\n(2) / (5) = 2/5, left: 2/5, 8\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((8 - 3) - 2))"}, {"input": "1 2 2 12\n", "output": "(2) - (1) = 1, left: 1, 2, 12\n(12) / (2) = 6, left: 6, 1\n(1) * (6) = 6, left: 6\n(12) - (2) = 10, left: 10, 1\n(2) * (12) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((2 * 12) / (2 - 1))"}, {"input": "1 2 2 12\n", "output": "(12) - (1) = 11, left: 11, 2, 2\n(2) * (2) = 4, left: 4, 11\n(2) / (2) = 1, left: 1, 11\n(11) * (1) = 11, left: 11\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (12 - 1)))"}, {"input": "1 2 2 12\n", "output": "(2) + (2) = 4, left: 4, 1, 12\n(1) - (4) = -3, left: -3, 12\n(4) - (1) = 3, left: 3, 12\n(12) - (3) = 9, left: 9\n(12) - (4) = 8, left: 8, 1\n(2) / (2) = 1, left: 1, 1, 12\n(1) - (1) = 0, left: 0, 12\n(12) * (0) = 0, left: 0\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (2 / 2)))"}, {"input": "1 2 2 12\n", "output": "(2) - (1) = 1, left: 1, 2, 12\n(12) - (2) = 10, left: 10, 1\n(10) / (1) = 10, left: 10\n(1) / (10) = 1/10, left: 1/10\n(2) + (12) = 14, left: 14, 1\n(14) / (1) = 14, left: 14\n(1) / (14) = 1/14, left: 1/14\n(2) / (12) = 1/6, left: 1/6, 1\n(2) * (12) = 24, left: 24, 1\n(24) / (1) = 24, left: 24\nreach 24! expression: ((2 * 12) / (2 - 1))"}, {"input": "1 2 2 12\n", "output": "(12) - (1) = 11, left: 11, 2, 2\n(2) * (2) = 4, left: 4, 11\n(4) / (11) = 4/11, left: 4/11\n(2) - (2) = 0, left: 0, 11\n(11) + (0) = 11, left: 11\n(2) / (2) = 1, left: 1, 11\n(2) / (2) = 1, left: 1, 11\n(2) + (2) = 4, left: 4, 11\n(2) * (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (2 * (12 - 1)))"}, {"input": "1 2 2 12\n", "output": "(2) + (2) = 4, left: 4, 1, 12\n(2) / (2) = 1, left: 1, 1, 12\n(12) * (1) = 12, left: 12, 1\n(1) - (12) = -11, left: -11, 1\n(1) / (-11) = -1/11, left: -1/11\n(1) / (1) = 1, left: 1, 12\n(1) / (12) = 1/12, left: 1/12\n(1) - (1) = 0, left: 0, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (2 / 2)))"}, {"input": "1 2 2 12\n", "output": "(12) - (2) = 10, left: 10, 1, 2\n(2) - (12) = -10, left: -10, 1, 2\n(2) * (-10) = -20, left: -20, 1\n(12) / (2) = 6, left: 6, 1, 2\n(6) - (2) = 4, left: 4, 1\n(2) + (12) = 14, left: 14, 1, 2\n(1) * (14) = 14, left: 14, 2\n(2) * (12) = 24, left: 24, 1, 2\n(2) - (1) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((2 * 12) * (2 - 1))"}, {"input": "3 2 9 5\n", "output": "(3) - (5) = -2, left: -2, 2, 9\n(5) / (3) = 5/3, left: 5/3, 2, 9\n(3) * (5) = 15, left: 15, 2, 9\n(2) / (9) = 2/9, left: 2/9, 15\n(5) - (3) = 2, left: 2, 2, 9\n(9) * (2) = 18, left: 18, 2\n(18) / (2) = 9, left: 9\n(9) - (5) = 4, left: 4, 3, 2\n(2) * (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 * (9 - 5)))"}, {"input": "3 2 9 5\n", "output": "(9) * (5) = 45, left: 45, 3, 2\n(45) - (3) = 42, left: 42, 2\n(2) + (42) = 44, left: 44\n(3) * (45) = 135, left: 135, 2\n(2) + (135) = 137, left: 137\n(135) / (2) = 135/2, left: 135/2\n(2) / (135) = 2/135, left: 2/135\n(135) - (2) = 133, left: 133\n(3) + (45) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((3 + (9 * 5)) / 2)"}, {"input": "3 2 9 5\n", "output": "(3) * (5) = 15, left: 15, 2, 9\n(9) + (15) = 24, left: 24, 2\n(9) / (5) = 9/5, left: 9/5, 3, 2\n(2) / (3) = 2/3, left: 2/3, 9/5\n(9) + (5) = 14, left: 14, 3, 2\n(3) * (2) = 6, left: 6, 14\n(5) / (9) = 5/9, left: 5/9, 3, 2\n(9) * (5) = 45, left: 45, 3, 2\n(3) + (45) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((3 + (9 * 5)) / 2)"}, {"input": "3 2 9 5\n", "output": "(3) - (2) = 1, left: 1, 9, 5\n(9) / (1) = 9, left: 9, 5\n(3) / (2) = 3/2, left: 3/2, 9, 5\n(2) / (3) = 2/3, left: 2/3, 9, 5\n(3) + (2) = 5, left: 5, 9, 5\n(5) - (9) = -4, left: -4, 5\n(9) * (5) = 45, left: 45, 5\n(3) * (2) = 6, left: 6, 9, 5\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 * 2) * (9 - 5))"}, {"input": "3 2 9 5\n", "output": "(5) / (2) = 5/2, left: 5/2, 3, 9\n(3) / (9) = 1/3, left: 1/3, 5/2\n(1/3) / (5/2) = 2/15, left: 2/15\n(2) * (5) = 10, left: 10, 3, 9\n(3) + (9) = 12, left: 12, 10\n(5) - (2) = 3, left: 3, 3, 9\n(3) / (9) = 1/3, left: 1/3, 3\n(1/3) - (3) = -8/3, left: -8/3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * 9) - (5 - 2))"}, {"input": "3 2 9 5\n", "output": "(3) + (5) = 8, left: 8, 2, 9\n(9) - (2) = 7, left: 7, 8\n(8) * (7) = 56, left: 56\n(5) / (3) = 5/3, left: 5/3, 2, 9\n(3) - (5) = -2, left: -2, 2, 9\n(2) + (9) = 11, left: 11, -2\n(-2) - (11) = -13, left: -13\n(5) - (3) = 2, left: 2, 2, 9\n(2) - (9) = -7, left: -7, 2\n(9) + (5) = 14, left: 14, 3, 2\n(5) / (9) = 5/9, left: 5/9, 3, 2\n(9) * (5) = 45, left: 45, 3, 2\n(3) + (45) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((3 + (9 * 5)) / 2)"}, {"input": "3 2 9 5\n", "output": "(3) / (5) = 3/5, left: 3/5, 2, 9\n(2) + (9) = 11, left: 11, 3/5\n(3/5) * (11) = 33/5, left: 33/5\n(3) - (5) = -2, left: -2, 2, 9\n(2) - (-2) = 4, left: 4, 9\n(9) + (-2) = 7, left: 7, 2\n(5) / (3) = 5/3, left: 5/3, 2, 9\n(3) * (5) = 15, left: 15, 2, 9\n(2) / (15) = 2/15, left: 2/15, 9\n(9) * (2/15) = 6/5, left: 6/5\n(5) - (3) = 2, left: 2, 2, 9\n(9) - (5) = 4, left: 4, 3, 2\n(2) * (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 * (9 - 5)))"}, {"input": "2 8 10 10\n", "output": "(8) - (10) = -2, left: -2, 2, 10\n(2) - (10) = -8, left: -8, -2\n(-2) - (10) = -12, left: -12, 2\n(2) - (-12) = 14, left: 14\n(10) - (-2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 - (8 - 10)))"}, {"input": "2 8 10 10\n", "output": "(8) - (10) = -2, left: -2, 2, 10\n(10) / (-2) = -5, left: -5, 2\n(10) * (-2) = -20, left: -20, 2\n(10) - (-2) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 - (8 - 10)))"}, {"input": "2 8 10 10\n", "output": "(10) / (8) = 5/4, left: 5/4, 2, 10\n(2) + (10) = 12, left: 12, 5/4\n(12) / (5/4) = 48/5, left: 48/5\n(10) - (8) = 2, left: 2, 2, 10\n(10) + (2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 + (10 - 8)))"}, {"input": "2 8 10 10\n", "output": "(10) - (10) = 0, left: 0, 2, 8\n(2) - (8) = -6, left: -6, 0\n(0) * (-6) = 0, left: 0\n(10) + (10) = 20, left: 20, 2, 8\n(8) / (2) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 + 10) + (8 / 2))"}, {"input": "2 8 10 10\n", "output": "(10) / (8) = 5/4, left: 5/4, 2, 10\n(10) + (5/4) = 45/4, left: 45/4, 2\n(2) + (10) = 12, left: 12, 5/4\n(5/4) / (12) = 5/48, left: 5/48\n(2) * (10) = 20, left: 20, 5/4\n(10) - (2) = 8, left: 8, 5/4\n(10) - (8) = 2, left: 2, 2, 10\n(10) / (2) = 5, left: 5, 2\n(10) + (2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 + (10 - 8)))"}, {"input": "2 8 10 10\n", "output": "(8) / (10) = 4/5, left: 4/5, 2, 10\n(8) + (10) = 18, left: 18, 2, 10\n(10) / (18) = 5/9, left: 5/9, 2\n(5/9) / (2) = 5/18, left: 5/18\n(2) / (18) = 1/9, left: 1/9, 10\n(2) - (18) = -16, left: -16, 10\n(8) - (10) = -2, left: -2, 2, 10\n(10) / (2) = 5, left: 5, -2\n(10) - (-2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 - (8 - 10)))"}, {"input": "2 8 10 10\n", "output": "(10) - (10) = 0, left: 0, 2, 8\n(8) - (2) = 6, left: 6, 0\n(0) - (6) = -6, left: -6\n(2) / (8) = 1/4, left: 1/4, 0\n(2) - (0) = 2, left: 2, 8\n(10) - (10) = 0, left: 0, 2, 8\n(2) * (0) = 0, left: 0, 8\n(10) + (10) = 20, left: 20, 2, 8\n(8) / (2) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 + 10) + (8 / 2))"}, {"input": "2 8 10 10\n", "output": "(8) - (10) = -2, left: -2, 2, 10\n(-2) / (10) = -1/5, left: -1/5, 2\n(2) / (-1/5) = -10, left: -10\n(-2) - (10) = -12, left: -12, 2\n(2) * (-12) = -24, left: -24\n(10) / (-2) = -5, left: -5, 2\n(2) * (-5) = -10, left: -10\n(10) * (-2) = -20, left: -20, 2\n(10) - (-2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 - (8 - 10)))"}, {"input": "2 8 10 10\n", "output": "(8) - (10) = -2, left: -2, 2, 10\n(2) / (10) = 1/5, left: 1/5, -2\n(1/5) - (-2) = 11/5, left: 11/5\n(10) - (2) = 8, left: 8, -2\n(-2) + (8) = 6, left: 6\n(2) + (10) = 12, left: 12, -2\n(-2) / (12) = -1/6, left: -1/6\n(10) / (-2) = -5, left: -5, 2\n(10) - (-2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 - (8 - 10)))"}, {"input": "10 6 2 10\n", "output": "(2) - (10) = -8, left: -8, 10, 6\n(-8) / (6) = -4/3, left: -4/3, 10\n(-4/3) / (10) = -2/15, left: -2/15\n(10) * (-4/3) = -40/3, left: -40/3\n(-8) - (6) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((2 - 10) - 6))"}, {"input": "10 6 2 10\n", "output": "(6) * (10) = 60, left: 60, 10, 2\n(10) + (60) = 70, left: 70, 2\n(2) + (70) = 72, left: 72\n(10) - (6) = 4, left: 4, 10, 2\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((10 - 6) + (10 * 2))"}, {"input": "10 6 2 10\n", "output": "(10) - (2) = 8, left: 8, 10, 6\n(8) / (6) = 4/3, left: 4/3, 10\n(6) - (8) = -2, left: -2, 10\n(-2) / (10) = -1/5, left: -1/5\n(6) + (8) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (6 + (10 - 2)))"}, {"input": "10 6 2 10\n", "output": "(6) / (10) = 3/5, left: 3/5, 2, 10\n(2) - (3/5) = 7/5, left: 7/5, 10\n(10) - (6) = 4, left: 4, 2, 10\n(10) * (4) = 40, left: 40, 2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((10 - 6) + (2 * 10))"}, {"input": "10 6 2 10\n", "output": "(10) - (2) = 8, left: 8, 10, 6\n(6) * (8) = 48, left: 48, 10\n(48) - (10) = 38, left: 38\n(10) * (48) = 480, left: 480\n(8) / (6) = 4/3, left: 4/3, 10\n(6) - (8) = -2, left: -2, 10\n(10) / (-2) = -5, left: -5\n(8) - (6) = 2, left: 2, 10\n(6) + (8) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (6 + (10 - 2)))"}, {"input": "10 6 2 10\n", "output": "(10) / (10) = 1, left: 1, 6, 2\n(6) * (1) = 6, left: 6, 2\n(10) - (10) = 0, left: 0, 6, 2\n(6) - (0) = 6, left: 6, 2\n(10) / (10) = 1, left: 1, 6, 2\n(6) + (2) = 8, left: 8, 1\n(10) * (10) = 100, left: 100, 6, 2\n(10) + (10) = 20, left: 20, 6, 2\n(6) - (2) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 + 10) + (6 - 2))"}, {"input": "10 6 2 10\n", "output": "(6) / (10) = 3/5, left: 3/5, 2, 10\n(3/5) / (10) = 3/50, left: 3/50, 2\n(10) - (3/5) = 47/5, left: 47/5, 2\n(47/5) / (2) = 47/10, left: 47/10\n(10) / (2) = 5, left: 5, 3/5\n(10) - (6) = 4, left: 4, 2, 10\n(10) / (4) = 5/2, left: 5/2, 2\n(2) - (5/2) = -1/2, left: -1/2\n(2) * (10) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((10 - 6) + (2 * 10))"}, {"input": "10 6 2 10\n", "output": "(6) * (10) = 60, left: 60, 10, 2\n(2) - (10) = -8, left: -8, 60\n(10) * (2) = 20, left: 20, 60\n(2) + (60) = 62, left: 62, 10\n(10) - (6) = 4, left: 4, 10, 2\n(4) / (10) = 2/5, left: 2/5, 2\n(4) - (2) = 2, left: 2, 10\n(2) + (4) = 6, left: 6, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((10 - 6) + (10 * 2))"}, {"input": "10 6 2 10\n", "output": "(2) - (10) = -8, left: -8, 10, 6\n(-8) / (6) = -4/3, left: -4/3, 10\n(10) - (-4/3) = 34/3, left: 34/3\n(10) / (-4/3) = -15/2, left: -15/2\n(10) + (-4/3) = 26/3, left: 26/3\n(-4/3) / (10) = -2/15, left: -2/15\n(10) * (-4/3) = -40/3, left: -40/3\n(-8) - (6) = -14, left: -14, 10\n(-14) - (10) = -24, left: -24\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((2 - 10) - 6))"}, {"input": "10 6 2 10\n", "output": "(2) - (10) = -8, left: -8, 10, 6\n(-8) / (6) = -4/3, left: -4/3, 10\n(10) - (-4/3) = 34/3, left: 34/3\n(-4/3) - (10) = -34/3, left: -34/3\n(10) / (-4/3) = -15/2, left: -15/2\n(10) + (-4/3) = 26/3, left: 26/3\n(-4/3) / (10) = -2/15, left: -2/15\n(10) * (-4/3) = -40/3, left: -40/3\n(-8) - (6) = -14, left: -14, 10\n(-14) - (10) = -24, left: -24\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((2 - 10) - 6))"}, {"input": "10 6 2 10\n", "output": "(2) - (10) = -8, left: -8, 10, 6\n(-8) / (6) = -4/3, left: -4/3, 10\n(10) - (-4/3) = 34/3, left: 34/3\n(-4/3) - (10) = -34/3, left: -34/3\n(10) / (-4/3) = -15/2, left: -15/2\n(10) + (-4/3) = 26/3, left: 26/3\n(-4/3) / (10) = -2/15, left: -2/15\n(10) * (-4/3) = -40/3, left: -40/3\n(-8) - (6) = -14, left: -14, 10\n(-14) - (10) = -24, left: -24\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((2 - 10) - 6))"}, {"input": "13 12 11 11\n", "output": "(11) * (11) = 121, left: 121, 13, 12\n(12) - (13) = -1, left: -1, 121\n(11) + (11) = 22, left: 22, 13, 12\n(11) / (11) = 1, left: 1, 13, 12\n(1) - (12) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((11 / 11) - 12))"}, {"input": "13 12 11 11\n", "output": "(13) - (12) = 1, left: 1, 11, 11\n(11) / (1) = 11, left: 11, 11\n(11) / (1) = 11, left: 11, 11\n(13) + (12) = 25, left: 25, 11, 11\n(11) / (11) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (11 / 11))"}, {"input": "13 12 11 11\n", "output": "(11) / (12) = 11/12, left: 11/12, 13, 11\n(13) - (11) = 2, left: 2, 11/12\n(13) + (11/12) = 167/12, left: 167/12, 11\n(11) - (12) = -1, left: -1, 13, 11\n(13) / (-1) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (13 / (11 - 12)))"}, {"input": "13 12 11 11\n", "output": "(12) + (11) = 23, left: 23, 13, 11\n(13) + (11) = 24, left: 24, 23\n(11) / (12) = 11/12, left: 11/12, 13, 11\n(12) - (11) = 1, left: 1, 13, 11\n(13) / (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 / (12 - 11)))"}, {"input": "13 12 11 11\n", "output": "(13) + (12) = 25, left: 25, 11, 11\n(25) - (11) = 14, left: 14, 11\n(11) - (25) = -14, left: -14, 11\n(-14) - (11) = -25, left: -25\n(11) / (11) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (11 / 11))"}, {"input": "13 12 11 11\n", "output": "(13) * (12) = 156, left: 156, 11, 11\n(11) / (11) = 1, left: 1, 156\n(156) * (1) = 156, left: 156\n(156) - (11) = 145, left: 145, 11\n(13) - (12) = 1, left: 1, 11, 11\n(11) * (1) = 11, left: 11, 11\n(1) - (11) = -10, left: -10, 11\n(13) + (12) = 25, left: 25, 11, 11\n(11) / (11) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (11 / 11))"}, {"input": "13 12 11 11\n", "output": "(13) + (12) = 25, left: 25, 11, 11\n(11) + (25) = 36, left: 36, 11\n(11) * (25) = 275, left: 275, 11\n(25) - (11) = 14, left: 14, 11\n(14) - (11) = 3, left: 3\n(11) - (25) = -14, left: -14, 11\n(11) + (11) = 22, left: 22, 25\n(11) / (11) = 1, left: 1, 25\n(25) + (1) = 26, left: 26\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (11 / 11))"}, {"input": "13 12 11 11\n", "output": "(11) * (11) = 121, left: 121, 13, 12\n(121) - (13) = 108, left: 108, 12\n(12) / (108) = 1/9, left: 1/9\n(13) - (121) = -108, left: -108, 12\n(11) + (11) = 22, left: 22, 13, 12\n(13) * (22) = 286, left: 286, 12\n(11) - (11) = 0, left: 0, 13, 12\n(11) / (11) = 1, left: 1, 13, 12\n(1) - (12) = -11, left: -11, 13\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((11 / 11) - 12))"}, {"input": "13 12 11 11\n", "output": "(12) + (11) = 23, left: 23, 13, 11\n(23) / (13) = 23/13, left: 23/13, 11\n(12) * (11) = 132, left: 132, 13, 11\n(13) + (132) = 145, left: 145, 11\n(11) / (12) = 11/12, left: 11/12, 13, 11\n(11) / (13) = 11/13, left: 11/13, 11/12\n(12) - (11) = 1, left: 1, 13, 11\n(1) / (13) = 1/13, left: 1/13, 11\n(13) / (1) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (13 / (12 - 11)))"}, {"input": "13 12 11 11\n", "output": "(12) + (11) = 23, left: 23, 13, 11\n(11) / (23) = 11/23, left: 11/23, 13\n(23) / (11) = 23/11, left: 23/11, 13\n(11) - (23) = -12, left: -12, 13\n(11) / (12) = 11/12, left: 11/12, 13, 11\n(11/12) - (13) = -145/12, left: -145/12, 11\n(11) * (-145/12) = -1595/12, left: -1595/12\n(11) - (12) = -1, left: -1, 13, 11\n(13) / (-1) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (13 / (11 - 12)))"}, {"input": "8 1 8 12\n", "output": "(8) / (8) = 1, left: 1, 1, 12\n(12) / (1) = 12, left: 12, 1\n(12) / (1) = 12, left: 12\n(1) * (12) = 12, left: 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (8 / 8)))"}, {"input": "8 1 8 12\n", "output": "(12) / (8) = 3/2, left: 3/2, 8, 1\n(8) * (3/2) = 12, left: 12, 1\n(8) / (12) = 2/3, left: 2/3, 8, 1\n(1) / (2/3) = 3/2, left: 3/2, 8\n(1) - (2/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (1 - (8 / 12)))"}, {"input": "8 1 8 12\n", "output": "(8) / (8) = 1, left: 1, 1, 12\n(1) / (12) = 1/12, left: 1/12, 1\n(1) + (1/12) = 13/12, left: 13/12\n(1) / (1/12) = 12, left: 12\n(12) / (1) = 12, left: 12, 1\n(1) - (12) = -11, left: -11\n(1) + (12) = 13, left: 13, 1\n(13) / (1) = 13, left: 13\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (8 / 8)))"}, {"input": "8 1 8 12\n", "output": "(8) / (8) = 1, left: 1, 1, 12\n(1) + (12) = 13, left: 13, 1\n(13) / (1) = 13, left: 13\n(1) * (12) = 12, left: 12, 1\n(12) - (1) = 11, left: 11\n(12) / (1) = 12, left: 12, 1\n(12) * (1) = 12, left: 12, 1\n(1) / (1) = 1, left: 1, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (8 / 8)))"}, {"input": "8 1 8 12\n", "output": "(12) / (8) = 3/2, left: 3/2, 8, 1\n(1) / (8) = 1/8, left: 1/8, 3/2\n(1) - (3/2) = -1/2, left: -1/2, 8\n(8) / (12) = 2/3, left: 2/3, 8, 1\n(1) + (2/3) = 5/3, left: 5/3, 8\n(8) - (5/3) = 19/3, left: 19/3\n(1) / (2/3) = 3/2, left: 3/2, 8\n(1) * (2/3) = 2/3, left: 2/3, 8\n(1) - (2/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (1 - (8 / 12)))"}, {"input": "8 1 8 12\n", "output": "(1) / (12) = 1/12, left: 1/12, 8, 8\n(8) / (8) = 1, left: 1, 1/12\n(8) - (1/12) = 95/12, left: 95/12, 8\n(8) / (1/12) = 96, left: 96, 8\n(1) - (12) = -11, left: -11, 8, 8\n(12) / (1) = 12, left: 12, 8, 8\n(12) / (8) = 3/2, left: 3/2, 8\n(12) - (1) = 11, left: 11, 8, 8\n(11) - (8) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((12 - 1) - 8))"}, {"input": "8 1 8 12\n", "output": "(8) * (12) = 96, left: 96, 8, 1\n(8) * (1) = 8, left: 8, 96\n(8) + (12) = 20, left: 20, 8, 1\n(8) - (12) = -4, left: -4, 8, 1\n(-4) - (8) = -12, left: -12, 1\n(12) / (8) = 3/2, left: 3/2, 8, 1\n(8) + (3/2) = 19/2, left: 19/2, 1\n(8) / (12) = 2/3, left: 2/3, 8, 1\n(1) - (2/3) = 1/3, left: 1/3, 8\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / (1 - (8 / 12)))"}, {"input": "2 12 1 9\n", "output": "(2) + (1) = 3, left: 3, 12, 9\n(12) + (9) = 21, left: 21, 3\n(3) / (21) = 1/7, left: 1/7\n(3) - (21) = -18, left: -18\n(21) - (3) = 18, left: 18\n(3) + (21) = 24, left: 24\nreach 24! expression: ((2 + 1) + (12 + 9))"}, {"input": "2 12 1 9\n", "output": "(2) / (12) = 1/6, left: 1/6, 1, 9\n(9) - (1) = 8, left: 8, 1/6\n(9) + (1/6) = 55/6, left: 55/6, 1\n(12) / (2) = 6, left: 6, 1, 9\n(1) - (6) = -5, left: -5, 9\n(2) + (12) = 14, left: 14, 1, 9\n(1) * (9) = 9, left: 9, 14\n(9) / (1) = 9, left: 9, 14\n(1) + (9) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((2 + 12) + (1 + 9))"}, {"input": "2 12 1 9\n", "output": "(12) * (1) = 12, left: 12, 2, 9\n(2) / (12) = 1/6, left: 1/6, 9\n(2) - (12) = -10, left: -10, 9\n(-10) - (9) = -19, left: -19\n(9) / (2) = 9/2, left: 9/2, 12\n(9) - (2) = 7, left: 7, 12\n(2) * (9) = 18, left: 18, 12\n(12) + (1) = 13, left: 13, 2, 9\n(9) + (13) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (9 + (12 + 1)))"}, {"input": "2 12 1 9\n", "output": "(9) / (12) = 3/4, left: 3/4, 2, 1\n(2) - (3/4) = 5/4, left: 5/4, 1\n(2) / (3/4) = 8/3, left: 8/3, 1\n(8/3) - (1) = 5/3, left: 5/3\n(12) + (9) = 21, left: 21, 2, 1\n(2) / (21) = 2/21, left: 2/21, 1\n(2/21) / (1) = 2/21, left: 2/21\n(2) - (21) = -19, left: -19, 1\n(2) + (21) = 23, left: 23, 1\n(1) + (23) = 24, left: 24\nreach 24! expression: (1 + (2 + (12 + 9)))"}, {"input": "2 12 1 9\n", "output": "(2) + (1) = 3, left: 3, 12, 9\n(12) * (9) = 108, left: 108, 3\n(3) + (108) = 111, left: 111\n(108) / (3) = 36, left: 36\n(3) / (108) = 1/36, left: 1/36\n(3) * (108) = 324, left: 324\n(12) + (9) = 21, left: 21, 3\n(3) / (21) = 1/7, left: 1/7\n(21) / (3) = 7, left: 7\n(3) + (21) = 24, left: 24\nreach 24! expression: ((2 + 1) + (12 + 9))"}, {"input": "2 12 1 9\n", "output": "(2) / (1) = 2, left: 2, 12, 9\n(9) * (2) = 18, left: 18, 12\n(9) - (2) = 7, left: 7, 12\n(12) * (9) = 108, left: 108, 2\n(12) / (9) = 4/3, left: 4/3, 2\n(2) * (1) = 2, left: 2, 12, 9\n(1) / (2) = 1/2, left: 1/2, 12, 9\n(2) + (1) = 3, left: 3, 12, 9\n(9) + (3) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (9 + (2 + 1)))"}, {"input": "7 2 5 4\n", "output": "(4) - (7) = -3, left: -3, 2, 5\n(7) - (4) = 3, left: 3, 2, 5\n(2) - (7) = -5, left: -5, 5, 4\n(5) * (-5) = -25, left: -25, 4\n(7) * (2) = 14, left: 14, 5, 4\n(4) - (14) = -10, left: -10, 5\n(5) - (7) = -2, left: -2, 2, 4\n(7) + (5) = 12, left: 12, 2, 4\n(2) / (4) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((7 + 5) / (2 / 4))"}, {"input": "7 2 5 4\n", "output": "(5) / (7) = 5/7, left: 5/7, 2, 4\n(5/7) / (4) = 5/28, left: 5/28, 2\n(4) + (5/7) = 33/7, left: 33/7, 2\n(7) / (5) = 7/5, left: 7/5, 2, 4\n(7) * (5) = 35, left: 35, 2, 4\n(4) - (35) = -31, left: -31, 2\n(7) - (5) = 2, left: 2, 2, 4\n(7) + (5) = 12, left: 12, 2, 4\n(4) - (2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((7 + 5) * (4 - 2))"}, {"input": "7 2 5 4\n", "output": "(5) + (4) = 9, left: 9, 7, 2\n(5) / (4) = 5/4, left: 5/4, 7, 2\n(4) / (5) = 4/5, left: 4/5, 7, 2\n(5) * (4) = 20, left: 20, 7, 2\n(7) * (2) = 14, left: 14, 20\n(4) - (5) = -1, left: -1, 7, 2\n(5) - (4) = 1, left: 1, 7, 2\n(4) - (2) = 2, left: 2, 7, 5\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((4 - 2) * (7 + 5))"}, {"input": "7 2 5 4\n", "output": "(5) * (4) = 20, left: 20, 7, 2\n(5) + (4) = 9, left: 9, 7, 2\n(2) + (9) = 11, left: 11, 7\n(5) - (2) = 3, left: 3, 7, 4\n(3) - (7) = -4, left: -4, 4\n(2) + (5) = 7, left: 7, 7, 4\n(2) / (5) = 2/5, left: 2/5, 7, 4\n(2) / (4) = 1/2, left: 1/2, 7, 5\n(7) + (5) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((7 + 5) / (2 / 4))"}, {"input": "7 2 5 4\n", "output": "(7) - (2) = 5, left: 5, 5, 4\n(4) / (5) = 4/5, left: 4/5, 5\n(2) + (5) = 7, left: 7, 7, 4\n(7) / (4) = 7/4, left: 7/4, 7\n(2) - (5) = -3, left: -3, 7, 4\n(2) * (5) = 10, left: 10, 7, 4\n(7) - (4) = 3, left: 3, 10\n(4) - (2) = 2, left: 2, 7, 5\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((4 - 2) * (7 + 5))"}, {"input": "7 2 5 4\n", "output": "(7) + (2) = 9, left: 9, 5, 4\n(9) / (4) = 9/4, left: 9/4, 5\n(2) - (7) = -5, left: -5, 5, 4\n(4) / (-5) = -4/5, left: -4/5, 5\n(-4/5) / (5) = -4/25, left: -4/25\n(7) * (2) = 14, left: 14, 5, 4\n(5) + (14) = 19, left: 19, 4\n(4) * (19) = 76, left: 76\n(5) - (14) = -9, left: -9, 4\n(2) - (5) = -3, left: -3, 7, 4\n(7) / (4) = 7/4, left: 7/4, 2, 5\n(4) - (2) = 2, left: 2, 7, 5\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((4 - 2) * (7 + 5))"}, {"input": "7 2 5 4\n", "output": "(7) - (4) = 3, left: 3, 2, 5\n(7) * (4) = 28, left: 28, 2, 5\n(5) + (28) = 33, left: 33, 2\n(7) - (2) = 5, left: 5, 5, 4\n(2) / (7) = 2/7, left: 2/7, 5, 4\n(5) + (2/7) = 37/7, left: 37/7, 4\n(7) * (2) = 14, left: 14, 5, 4\n(5) / (7) = 5/7, left: 5/7, 2, 4\n(5/7) / (4) = 5/28, left: 5/28, 2\n(4) - (5/7) = 23/7, left: 23/7, 2\n(2) - (23/7) = -9/7, left: -9/7\n(7) + (5) = 12, left: 12, 2, 4\n(2) / (4) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((7 + 5) / (2 / 4))"}, {"input": "7 2 5 4\n", "output": "(5) + (4) = 9, left: 9, 7, 2\n(2) + (9) = 11, left: 11, 7\n(5) / (4) = 5/4, left: 5/4, 7, 2\n(7) - (2) = 5, left: 5, 5/4\n(5/4) + (5) = 25/4, left: 25/4\n(4) / (5) = 4/5, left: 4/5, 7, 2\n(7) - (2) = 5, left: 5, 4/5\n(5) * (4) = 20, left: 20, 7, 2\n(5) - (4) = 1, left: 1, 7, 2\n(2) + (4) = 6, left: 6, 7, 5\n(6) - (5) = 1, left: 1, 7\n(4) - (2) = 2, left: 2, 7, 5\n(7) + (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((4 - 2) * (7 + 5))"}, {"input": "7 2 5 4\n", "output": "(5) * (4) = 20, left: 20, 7, 2\n(5) + (4) = 9, left: 9, 7, 2\n(4) - (5) = -1, left: -1, 7, 2\n(4) / (5) = 4/5, left: 4/5, 7, 2\n(5) - (2) = 3, left: 3, 7, 4\n(2) - (5) = -3, left: -3, 7, 4\n(2) + (5) = 7, left: 7, 7, 4\n(4) + (7) = 11, left: 11, 7\n(7) / (2) = 7/2, left: 7/2, 5, 4\n(7) + (2) = 9, left: 9, 5, 4\n(5) - (4) = 1, left: 1, 9\n(2) / (4) = 1/2, left: 1/2, 7, 5\n(7) + (5) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((7 + 5) / (2 / 4))"}, {"input": "10 2 2 8\n", "output": "(10) / (2) = 5, left: 5, 2, 8\n(5) / (2) = 5/2, left: 5/2, 8\n(5/2) / (8) = 5/16, left: 5/16\n(5) - (2) = 3, left: 3, 8\n(3) / (8) = 3/8, left: 3/8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 / 2) - 2))"}, {"input": "10 2 2 8\n", "output": "(2) / (8) = 1/4, left: 1/4, 10, 2\n(1/4) - (10) = -39/4, left: -39/4, 2\n(2) + (-39/4) = -31/4, left: -31/4\n(8) - (2) = 6, left: 6, 10, 2\n(6) - (2) = 4, left: 4, 10\n(2) / (6) = 1/3, left: 1/3, 10\n(2) / (10) = 1/5, left: 1/5, 6\n(8) / (2) = 4, left: 4, 10, 2\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((8 / 2) + (10 * 2))"}, {"input": "10 2 2 8\n", "output": "(10) / (2) = 5, left: 5, 2, 8\n(5) / (2) = 5/2, left: 5/2, 8\n(5/2) / (8) = 5/16, left: 5/16\n(5/2) - (8) = -11/2, left: -11/2\n(8) / (5/2) = 16/5, left: 16/5\n(8) + (5/2) = 21/2, left: 21/2\n(5) - (2) = 3, left: 3, 8\n(8) + (3) = 11, left: 11\n(3) / (8) = 3/8, left: 3/8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 / 2) - 2))"}, {"input": "10 2 2 8\n", "output": "(10) / (2) = 5, left: 5, 2, 8\n(2) * (5) = 10, left: 10, 8\n(8) * (10) = 80, left: 80\n(8) + (10) = 18, left: 18\n(8) - (10) = -2, left: -2\n(8) / (10) = 4/5, left: 4/5\n(10) - (8) = 2, left: 2\n(10) / (8) = 5/4, left: 5/4\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 / 2) - 2))"}, {"input": "10 2 2 8\n", "output": "(8) - (2) = 6, left: 6, 10, 2\n(10) / (2) = 5, left: 5, 6\n(2) - (8) = -6, left: -6, 10, 2\n(-6) / (2) = -3, left: -3, 10\n(2) + (8) = 10, left: 10, 10, 2\n(10) - (10) = 0, left: 0, 2\n(2) - (0) = 2, left: 2\n(8) / (2) = 4, left: 4, 10, 2\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: ((8 / 2) + (10 * 2))"}, {"input": "10 2 2 8\n", "output": "(2) + (2) = 4, left: 4, 10, 8\n(2) * (2) = 4, left: 4, 10, 8\n(2) - (2) = 0, left: 0, 10, 8\n(10) + (8) = 18, left: 18, 0\n(10) / (8) = 5/4, left: 5/4, 2, 2\n(10) - (8) = 2, left: 2, 2, 2\n(2) / (2) = 1, left: 1, 2\n(10) * (2) = 20, left: 20, 2, 8\n(20) - (8) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((10 * 2) - 8))"}, {"input": "10 2 2 8\n", "output": "(10) / (2) = 5, left: 5, 2, 8\n(2) * (5) = 10, left: 10, 8\n(8) * (10) = 80, left: 80\n(8) + (10) = 18, left: 18\n(8) - (10) = -2, left: -2\n(8) / (10) = 4/5, left: 4/5\n(10) - (8) = 2, left: 2\n(10) / (8) = 5/4, left: 5/4\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 / 2) - 2))"}, {"input": "10 2 2 8\n", "output": "(10) / (2) = 5, left: 5, 2, 8\n(2) * (5) = 10, left: 10, 8\n(8) * (10) = 80, left: 80\n(8) + (10) = 18, left: 18\n(8) - (10) = -2, left: -2\n(8) / (10) = 4/5, left: 4/5\n(10) - (8) = 2, left: 2\n(10) / (8) = 5/4, left: 5/4\n(5) - (2) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((10 / 2) - 2))"}, {"input": "8 13 1 10\n", "output": "(13) - (10) = 3, left: 3, 8, 1\n(8) + (3) = 11, left: 11, 1\n(11) - (1) = 10, left: 10\n(1) / (11) = 1/11, left: 1/11\n(8) * (3) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (8 * (13 - 10)))"}, {"input": "8 13 1 10\n", "output": "(1) / (8) = 1/8, left: 1/8, 13, 10\n(10) / (1/8) = 80, left: 80, 13\n(1/8) - (10) = -79/8, left: -79/8, 13\n(10) - (13) = -3, left: -3, 1/8\n(13) - (10) = 3, left: 3, 1/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((13 - 10) / (1 / 8))"}, {"input": "8 13 1 10\n", "output": "(1) / (8) = 1/8, left: 1/8, 13, 10\n(1/8) / (13) = 1/104, left: 1/104, 10\n(10) - (13) = -3, left: -3, 1/8\n(13) - (10) = 3, left: 3, 1/8\n(1/8) - (3) = -23/8, left: -23/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((13 - 10) / (1 / 8))"}, {"input": "8 13 1 10\n", "output": "(13) * (10) = 130, left: 130, 8, 1\n(8) / (130) = 4/65, left: 4/65, 1\n(4/65) / (1) = 4/65, left: 4/65\n(13) - (10) = 3, left: 3, 8, 1\n(1) / (8) = 1/8, left: 1/8, 3\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((13 - 10) / (1 / 8))"}, {"input": "8 13 1 10\n", "output": "(1) / (8) = 1/8, left: 1/8, 13, 10\n(13) + (1/8) = 105/8, left: 105/8, 10\n(13) * (1/8) = 13/8, left: 13/8, 10\n(10) * (13/8) = 65/4, left: 65/4\n(13) / (1/8) = 104, left: 104, 10\n(13) / (10) = 13/10, left: 13/10, 1/8\n(13/10) / (1/8) = 52/5, left: 52/5\n(13) * (10) = 130, left: 130, 1/8\n(13) - (10) = 3, left: 3, 1/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((13 - 10) / (1 / 8))"}, {"input": "8 13 1 10\n", "output": "(13) * (10) = 130, left: 130, 8, 1\n(8) / (130) = 4/65, left: 4/65, 1\n(1) - (4/65) = 61/65, left: 61/65\n(8) + (1) = 9, left: 9, 130\n(130) / (9) = 130/9, left: 130/9\n(130) / (1) = 130, left: 130, 8\n(13) - (10) = 3, left: 3, 8, 1\n(1) / (8) = 1/8, left: 1/8, 3\n(1/8) - (3) = -23/8, left: -23/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((13 - 10) / (1 / 8))"}, {"input": "8 13 1 10\n", "output": "(1) / (8) = 1/8, left: 1/8, 13, 10\n(10) - (1/8) = 79/8, left: 79/8, 13\n(79/8) / (13) = 79/104, left: 79/104\n(10) + (1/8) = 81/8, left: 81/8, 13\n(81/8) - (13) = -23/8, left: -23/8\n(10) - (13) = -3, left: -3, 1/8\n(1/8) * (-3) = -3/8, left: -3/8\n(13) / (10) = 13/10, left: 13/10, 1/8\n(13) - (10) = 3, left: 3, 1/8\n(3) / (1/8) = 24, left: 24\nreach 24! expression: ((13 - 10) / (1 / 8))"}, {"input": "8 13 1 10\n", "output": "(13) - (10) = 3, left: 3, 8, 1\n(3) - (8) = -5, left: -5, 1\n(1) + (-5) = -4, left: -4\n(-5) / (1) = -5, left: -5\n(8) + (3) = 11, left: 11, 1\n(11) - (1) = 10, left: 10\n(1) / (11) = 1/11, left: 1/11\n(11) / (1) = 11, left: 11\n(8) * (3) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (8 * (13 - 10)))"}, {"input": "8 13 1 10\n", "output": "(1) - (8) = -7, left: -7, 13, 10\n(10) / (13) = 10/13, left: 10/13, -7\n(-7) + (10/13) = -81/13, left: -81/13\n(13) - (-7) = 20, left: 20, 10\n(10) - (20) = -10, left: -10\n(8) - (1) = 7, left: 7, 13, 10\n(7) / (13) = 7/13, left: 7/13, 10\n(8) * (1) = 8, left: 8, 13, 10\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((8 * 1) * (13 - 10))"}, {"input": "6 3 4 2\n", "output": "(4) + (2) = 6, left: 6, 6, 3\n(3) - (6) = -3, left: -3, 6\n(6) + (-3) = 3, left: 3\n(6) - (-3) = 9, left: 9\n(6) / (-3) = -2, left: -2\n(-3) - (6) = -9, left: -9\n(6) * (3) = 18, left: 18, 6\n(18) - (6) = 12, left: 12\n(6) / (18) = 1/3, left: 1/3\n(6) + (18) = 24, left: 24\nreach 24! expression: ((4 + 2) + (6 * 3))"}, {"input": "6 3 4 2\n", "output": "(2) / (4) = 1/2, left: 1/2, 6, 3\n(3) - (6) = -3, left: -3, 1/2\n(6) + (3) = 9, left: 9, 1/2\n(3) + (1/2) = 7/2, left: 7/2, 6\n(4) / (2) = 2, left: 2, 6, 3\n(3) * (2) = 6, left: 6, 6\n(3) / (2) = 3/2, left: 3/2, 6\n(3) / (6) = 1/2, left: 1/2, 2\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (4 / 2)))"}, {"input": "6 3 4 2\n", "output": "(3) + (4) = 7, left: 7, 6, 2\n(2) * (7) = 14, left: 14, 6\n(2) / (7) = 2/7, left: 2/7, 6\n(3) / (4) = 3/4, left: 3/4, 6, 2\n(6) * (2) = 12, left: 12, 3/4\n(4) - (3) = 1, left: 1, 6, 2\n(6) + (2) = 8, left: 8, 1\n(3) * (4) = 12, left: 12, 6, 2\n(6) * (2) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: ((3 * 4) + (6 * 2))"}, {"input": "6 3 4 2\n", "output": "(6) - (3) = 3, left: 3, 4, 2\n(4) + (2) = 6, left: 6, 3\n(3) / (6) = 1/2, left: 1/2\n(6) - (3) = 3, left: 3\n(2) / (4) = 1/2, left: 1/2, 3\n(3) + (1/2) = 7/2, left: 7/2\n(4) / (2) = 2, left: 2, 3\n(3) * (2) = 6, left: 6\n(4) * (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((6 - 3) * (4 * 2))"}, {"input": "6 3 4 2\n", "output": "(4) + (2) = 6, left: 6, 6, 3\n(6) / (3) = 2, left: 2, 6\n(6) * (2) = 12, left: 12\n(6) - (2) = 4, left: 4\n(6) / (2) = 3, left: 3\n(6) + (2) = 8, left: 8\n(3) * (6) = 18, left: 18, 6\n(6) * (18) = 108, left: 108\n(18) - (6) = 12, left: 12\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (3 * (4 + 2)))"}, {"input": "6 3 4 2\n", "output": "(4) + (2) = 6, left: 6, 6, 3\n(3) - (6) = -3, left: -3, 6\n(6) * (-3) = -18, left: -18\n(6) + (-3) = 3, left: 3\n(6) - (-3) = 9, left: 9\n(6) / (-3) = -2, left: -2\n(-3) / (6) = -1/2, left: -1/2\n(-3) - (6) = -9, left: -9\n(6) * (3) = 18, left: 18, 6\n(18) - (6) = 12, left: 12\n(6) * (18) = 108, left: 108\n(6) / (18) = 1/3, left: 1/3\n(6) + (18) = 24, left: 24\nreach 24! expression: ((4 + 2) + (6 * 3))"}, {"input": "6 3 4 2\n", "output": "(4) + (2) = 6, left: 6, 6, 3\n(3) - (6) = -3, left: -3, 6\n(6) * (-3) = -18, left: -18\n(6) + (-3) = 3, left: 3\n(6) - (-3) = 9, left: 9\n(6) / (-3) = -2, left: -2\n(-3) / (6) = -1/2, left: -1/2\n(-3) - (6) = -9, left: -9\n(6) * (3) = 18, left: 18, 6\n(18) - (6) = 12, left: 12\n(6) * (18) = 108, left: 108\n(6) / (18) = 1/3, left: 1/3\n(6) + (18) = 24, left: 24\nreach 24! expression: ((4 + 2) + (6 * 3))"}, {"input": "12 12 9 8\n", "output": "(12) / (9) = 4/3, left: 4/3, 12, 8\n(8) * (4/3) = 32/3, left: 32/3, 12\n(12) / (8) = 3/2, left: 3/2, 4/3\n(4/3) - (12) = -32/3, left: -32/3, 8\n(12) * (4/3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (12 * (12 / 9)))"}, {"input": "12 12 9 8\n", "output": "(12) + (12) = 24, left: 24, 9, 8\n(9) / (8) = 9/8, left: 9/8, 24\n(9) + (8) = 17, left: 17, 24\n(8) / (9) = 8/9, left: 8/9, 24\n(9) - (8) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 + 12) * (9 - 8))"}, {"input": "12 12 9 8\n", "output": "(12) + (12) = 24, left: 24, 9, 8\n(9) * (8) = 72, left: 72, 24\n(24) / (72) = 1/3, left: 1/3\n(24) - (72) = -48, left: -48\n(9) - (8) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (9 - 8))"}, {"input": "12 12 9 8\n", "output": "(12) * (9) = 108, left: 108, 12, 8\n(12) + (108) = 120, left: 120, 8\n(12) - (9) = 3, left: 3, 12, 8\n(9) / (12) = 3/4, left: 3/4, 12, 8\n(12) / (3/4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (12 / (9 / 12)))"}, {"input": "12 12 9 8\n", "output": "(12) + (12) = 24, left: 24, 9, 8\n(9) / (8) = 9/8, left: 9/8, 24\n(24) * (9/8) = 27, left: 27\n(24) + (9/8) = 201/8, left: 201/8\n(9) + (8) = 17, left: 17, 24\n(8) / (9) = 8/9, left: 8/9, 24\n(8/9) - (24) = -208/9, left: -208/9\n(24) - (8/9) = 208/9, left: 208/9\n(9) - (8) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 + 12) * (9 - 8))"}, {"input": "12 12 9 8\n", "output": "(12) / (9) = 4/3, left: 4/3, 12, 8\n(12) - (8) = 4, left: 4, 4/3\n(4) / (4/3) = 3, left: 3\n(12) / (8) = 3/2, left: 3/2, 4/3\n(12) + (8) = 20, left: 20, 4/3\n(12) / (4/3) = 9, left: 9, 8\n(12) - (4/3) = 32/3, left: 32/3, 8\n(8) * (32/3) = 256/3, left: 256/3\n(12) * (4/3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (12 * (12 / 9)))"}, {"input": "12 12 9 8\n", "output": "(12) + (12) = 24, left: 24, 9, 8\n(9) * (8) = 72, left: 72, 24\n(24) / (72) = 1/3, left: 1/3\n(24) + (72) = 96, left: 96\n(8) / (9) = 8/9, left: 8/9, 24\n(24) - (8/9) = 208/9, left: 208/9\n(24) + (8/9) = 224/9, left: 224/9\n(9) - (8) = 1, left: 1, 24\n(24) - (1) = 23, left: 23\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (9 - 8))"}, {"input": "12 12 9 8\n", "output": "(12) - (9) = 3, left: 3, 12, 8\n(3) - (8) = -5, left: -5, 12\n(3) / (12) = 1/4, left: 1/4, 8\n(12) + (9) = 21, left: 21, 12, 8\n(8) + (21) = 29, left: 29, 12\n(12) * (21) = 252, left: 252, 8\n(8) * (252) = 2016, left: 2016\n(9) / (12) = 3/4, left: 3/4, 12, 8\n(12) / (3/4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (12 / (9 / 12)))"}, {"input": "12 12 9 8\n", "output": "(12) + (8) = 20, left: 20, 12, 9\n(12) / (8) = 3/2, left: 3/2, 12, 9\n(8) / (12) = 2/3, left: 2/3, 12, 9\n(12) - (9) = 3, left: 3, 2/3\n(12) * (8) = 96, left: 96, 12, 9\n(9) - (96) = -87, left: -87, 12\n(9) - (12) = -3, left: -3, 96\n(12) - (8) = 4, left: 4, 12, 9\n(9) * (4) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((9 * (12 - 8)) - 12)"}, {"input": "9 2 1 4\n", "output": "(1) - (4) = -3, left: -3, 9, 2\n(2) + (-3) = -1, left: -1, 9\n(9) * (-1) = -9, left: -9\n(-3) / (2) = -3/2, left: -3/2, 9\n(9) * (-3/2) = -27/2, left: -27/2\n(9) + (2) = 11, left: 11, -3\n(9) / (2) = 9/2, left: 9/2, -3\n(2) / (9) = 2/9, left: 2/9, -3\n(9) - (-3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 - (1 - 4)))"}, {"input": "9 2 1 4\n", "output": "(4) - (1) = 3, left: 3, 9, 2\n(9) / (2) = 9/2, left: 9/2, 3\n(3) * (9/2) = 27/2, left: 27/2\n(9) + (2) = 11, left: 11, 3\n(2) / (3) = 2/3, left: 2/3, 9\n(2) - (3) = -1, left: -1, 9\n(2) + (3) = 5, left: 5, 9\n(9) + (5) = 14, left: 14\n(9) + (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 + (4 - 1)))"}, {"input": "9 2 1 4\n", "output": "(2) - (4) = -2, left: -2, 9, 1\n(9) - (-2) = 11, left: 11, 1\n(2) + (4) = 6, left: 6, 9, 1\n(6) / (9) = 2/3, left: 2/3, 1\n(2/3) / (1) = 2/3, left: 2/3\n(1) / (9) = 1/9, left: 1/9, 6\n(2) * (4) = 8, left: 8, 9, 1\n(4) - (1) = 3, left: 3, 9, 2\n(9) + (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 + (4 - 1)))"}, {"input": "9 2 1 4\n", "output": "(2) + (1) = 3, left: 3, 9, 4\n(4) / (9) = 4/9, left: 4/9, 3\n(4/9) / (3) = 4/27, left: 4/27\n(4) - (9) = -5, left: -5, 3\n(4) - (3) = 1, left: 1, 9\n(4) / (3) = 4/3, left: 4/3, 9\n(4/3) - (9) = -23/3, left: -23/3\n(3) / (4) = 3/4, left: 3/4, 9\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (2 + 1)))"}, {"input": "9 2 1 4\n", "output": "(2) * (1) = 2, left: 2, 9, 4\n(4) - (9) = -5, left: -5, 2\n(9) * (2) = 18, left: 18, 4\n(4) * (18) = 72, left: 72\n(2) - (4) = -2, left: -2, 9\n(1) / (2) = 1/2, left: 1/2, 9, 4\n(4) / (9) = 4/9, left: 4/9, 1/2\n(2) + (1) = 3, left: 3, 9, 4\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (2 + 1)))"}, {"input": "9 2 1 4\n", "output": "(2) * (1) = 2, left: 2, 9, 4\n(2) - (9) = -7, left: -7, 4\n(9) - (2) = 7, left: 7, 4\n(2) - (4) = -2, left: -2, 9\n(9) + (-2) = 7, left: 7\n(1) / (2) = 1/2, left: 1/2, 9, 4\n(4) + (1/2) = 9/2, left: 9/2, 9\n(9) - (4) = 5, left: 5, 1/2\n(4) / (9) = 4/9, left: 4/9, 1/2\n(2) + (1) = 3, left: 3, 9, 4\n(3) - (4) = -1, left: -1, 9\n(4) * (3) = 12, left: 12, 9\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (9 - (2 + 1)))"}, {"input": "9 2 1 4\n", "output": "(2) - (4) = -2, left: -2, 9, 1\n(1) / (-2) = -1/2, left: -1/2, 9\n(1) + (-2) = -1, left: -1, 9\n(9) / (-1) = -9, left: -9\n(4) - (2) = 2, left: 2, 9, 1\n(2) - (1) = 1, left: 1, 9\n(2) + (4) = 6, left: 6, 9, 1\n(2) / (4) = 1/2, left: 1/2, 9, 1\n(2) * (4) = 8, left: 8, 9, 1\n(4) - (1) = 3, left: 3, 9, 2\n(9) / (2) = 9/2, left: 9/2, 3\n(3) - (9/2) = -3/2, left: -3/2\n(9) + (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 + (4 - 1)))"}, {"input": "11 13 9 12\n", "output": "(11) - (9) = 2, left: 2, 13, 12\n(13) / (9) = 13/9, left: 13/9, 11, 12\n(11) + (12) = 23, left: 23, 13/9\n(13) + (9) = 22, left: 22, 11, 12\n(12) * (22) = 264, left: 264, 11\n(264) / (11) = 24, left: 24\nreach 24! expression: ((12 * (13 + 9)) / 11)"}, {"input": "11 13 9 12\n", "output": "(11) + (9) = 20, left: 20, 13, 12\n(11) * (9) = 99, left: 99, 13, 12\n(9) - (13) = -4, left: -4, 11, 12\n(13) + (9) = 22, left: 22, 11, 12\n(12) / (11) = 12/11, left: 12/11, 22\n(22) * (12/11) = 24, left: 24\nreach 24! expression: ((13 + 9) * (12 / 11))"}, {"input": "11 13 9 12\n", "output": "(9) / (11) = 9/11, left: 9/11, 13, 12\n(12) / (9/11) = 44/3, left: 44/3, 13\n(13) / (9) = 13/9, left: 13/9, 11, 12\n(13) + (9) = 22, left: 22, 11, 12\n(12) * (22) = 264, left: 264, 11\n(264) / (11) = 24, left: 24\nreach 24! expression: ((12 * (13 + 9)) / 11)"}, {"input": "11 13 9 12\n", "output": "(11) - (13) = -2, left: -2, 9, 12\n(11) + (13) = 24, left: 24, 9, 12\n(13) * (12) = 156, left: 156, 11, 9\n(13) + (9) = 22, left: 22, 11, 12\n(12) * (22) = 264, left: 264, 11\n(264) / (11) = 24, left: 24\nreach 24! expression: ((12 * (13 + 9)) / 11)"}, {"input": "11 13 9 12\n", "output": "(13) + (12) = 25, left: 25, 11, 9\n(9) - (11) = -2, left: -2, 25\n(9) / (13) = 9/13, left: 9/13, 11, 12\n(13) + (9) = 22, left: 22, 11, 12\n(22) / (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 + 9) / 11))"}, {"input": "11 13 9 12\n", "output": "(11) - (9) = 2, left: 2, 13, 12\n(11) + (9) = 20, left: 20, 13, 12\n(20) / (12) = 5/3, left: 5/3, 13\n(11) / (9) = 11/9, left: 11/9, 13, 12\n(13) - (12) = 1, left: 1, 11/9\n(9) / (13) = 9/13, left: 9/13, 11, 12\n(11) / (9/13) = 143/9, left: 143/9, 12\n(13) + (9) = 22, left: 22, 11, 12\n(12) / (11) = 12/11, left: 12/11, 22\n(22) * (12/11) = 24, left: 24\nreach 24! expression: ((13 + 9) * (12 / 11))"}, {"input": "11 13 9 12\n", "output": "(11) / (9) = 11/9, left: 11/9, 13, 12\n(11) * (9) = 99, left: 99, 13, 12\n(99) - (13) = 86, left: 86, 12\n(13) / (12) = 13/12, left: 13/12, 11, 9\n(13) * (12) = 156, left: 156, 11, 9\n(9) - (11) = -2, left: -2, 156\n(12) / (13) = 12/13, left: 12/13, 11, 9\n(13) + (9) = 22, left: 22, 11, 12\n(12) * (22) = 264, left: 264, 11\n(264) / (11) = 24, left: 24\nreach 24! expression: ((12 * (13 + 9)) / 11)"}, {"input": "11 13 9 12\n", "output": "(11) * (9) = 99, left: 99, 13, 12\n(11) - (9) = 2, left: 2, 13, 12\n(13) - (9) = 4, left: 4, 11, 12\n(9) / (13) = 9/13, left: 9/13, 11, 12\n(12) + (9/13) = 165/13, left: 165/13, 11\n(13) / (9) = 13/9, left: 13/9, 11, 12\n(11) * (13/9) = 143/9, left: 143/9, 12\n(13) + (9) = 22, left: 22, 11, 12\n(12) * (22) = 264, left: 264, 11\n(264) / (11) = 24, left: 24\nreach 24! expression: ((12 * (13 + 9)) / 11)"}, {"input": "11 13 9 12\n", "output": "(12) / (13) = 12/13, left: 12/13, 11, 9\n(12) - (13) = -1, left: -1, 11, 9\n(13) - (12) = 1, left: 1, 11, 9\n(13) - (9) = 4, left: 4, 11, 12\n(12) / (4) = 3, left: 3, 11\n(11) / (12) = 11/12, left: 11/12, 4\n(13) * (9) = 117, left: 117, 11, 12\n(13) + (9) = 22, left: 22, 11, 12\n(22) / (11) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((13 + 9) / 11))"}, {"input": "11 13 9 12\n", "output": "(11) * (13) = 143, left: 143, 9, 12\n(9) * (143) = 1287, left: 1287, 12\n(11) / (13) = 11/13, left: 11/13, 9, 12\n(12) / (13) = 12/13, left: 12/13, 11, 9\n(12/13) / (9) = 4/39, left: 4/39, 11\n(13) - (12) = 1, left: 1, 11, 9\n(12) - (9) = 3, left: 3, 11, 13\n(13) + (9) = 22, left: 22, 11, 12\n(12) * (22) = 264, left: 264, 11\n(264) / (11) = 24, left: 24\nreach 24! expression: ((12 * (13 + 9)) / 11)"}, {"input": "4 9 13 3\n", "output": "(13) / (4) = 13/4, left: 13/4, 9, 3\n(13/4) - (3) = 1/4, left: 1/4, 9\n(3) / (9) = 1/3, left: 1/3, 13/4\n(4) + (13) = 17, left: 17, 9, 3\n(17) - (9) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((4 + 13) - 9))"}, {"input": "4 9 13 3\n", "output": "(13) - (4) = 9, left: 9, 9, 3\n(9) / (9) = 1, left: 1, 3\n(13) / (4) = 13/4, left: 13/4, 9, 3\n(9) - (3) = 6, left: 6, 13/4\n(4) + (13) = 17, left: 17, 9, 3\n(9) * (3) = 27, left: 27, 17\n(17) / (27) = 17/27, left: 17/27\n(17) - (9) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((4 + 13) - 9))"}, {"input": "4 9 13 3\n", "output": "(13) - (4) = 9, left: 9, 9, 3\n(3) / (9) = 1/3, left: 1/3, 9\n(9) - (3) = 6, left: 6, 9\n(3) / (9) = 1/3, left: 1/3, 9\n(9) + (3) = 12, left: 12, 9\n(12) / (9) = 4/3, left: 4/3\n(4) + (13) = 17, left: 17, 9, 3\n(9) - (17) = -8, left: -8, 3\n(17) - (9) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((4 + 13) - 9))"}, {"input": "4 9 13 3\n", "output": "(13) / (9) = 13/9, left: 13/9, 4, 3\n(3) - (13/9) = 14/9, left: 14/9, 4\n(4) * (3) = 12, left: 12, 13/9\n(9) + (13) = 22, left: 22, 4, 3\n(4) / (22) = 2/11, left: 2/11, 3\n(9) / (13) = 9/13, left: 9/13, 4, 3\n(3) + (9/13) = 48/13, left: 48/13, 4\n(13) - (9) = 4, left: 4, 4, 3\n(4) + (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (4 + (13 - 9)))"}, {"input": "4 9 13 3\n", "output": "(4) + (9) = 13, left: 13, 13, 3\n(3) / (13) = 3/13, left: 3/13, 13\n(3) * (13) = 39, left: 39, 13\n(4) / (9) = 4/9, left: 4/9, 13, 3\n(3) * (4/9) = 4/3, left: 4/3, 13\n(13) + (4/9) = 121/9, left: 121/9, 3\n(9) - (4) = 5, left: 5, 13, 3\n(13) * (5) = 65, left: 65, 3\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 - (9 - 4)))"}, {"input": "4 9 13 3\n", "output": "(4) / (13) = 4/13, left: 4/13, 9, 3\n(3) - (4/13) = 35/13, left: 35/13, 9\n(13) / (4) = 13/4, left: 13/4, 9, 3\n(13/4) - (9) = -23/4, left: -23/4, 3\n(9) + (13/4) = 49/4, left: 49/4, 3\n(49/4) / (3) = 49/12, left: 49/12\n(13) - (4) = 9, left: 9, 9, 3\n(4) + (13) = 17, left: 17, 9, 3\n(17) - (9) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((4 + 13) - 9))"}, {"input": "5 3 3 13\n", "output": "(3) + (13) = 16, left: 16, 5, 3\n(16) / (5) = 16/5, left: 16/5, 3\n(16/5) - (3) = 1/5, left: 1/5\n(5) + (16) = 21, left: 21, 3\n(3) - (21) = -18, left: -18\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (5 + (3 + 13)))"}, {"input": "5 3 3 13\n", "output": "(13) / (3) = 13/3, left: 13/3, 5, 3\n(5) * (3) = 15, left: 15, 13/3\n(13) - (3) = 10, left: 10, 5, 3\n(3) / (10) = 3/10, left: 3/10, 5\n(5) / (10) = 1/2, left: 1/2, 3\n(3) / (13) = 3/13, left: 3/13, 5, 3\n(3/13) / (5) = 3/65, left: 3/65, 3\n(3) + (13) = 16, left: 16, 5, 3\n(5) + (3) = 8, left: 8, 16\n(16) + (8) = 24, left: 24\nreach 24! expression: ((3 + 13) + (5 + 3))"}, {"input": "5 3 3 13\n", "output": "(3) / (5) = 3/5, left: 3/5, 3, 13\n(3) + (13) = 16, left: 16, 3/5\n(16) / (3/5) = 80/3, left: 80/3\n(5) / (3) = 5/3, left: 5/3, 3, 13\n(13) + (5/3) = 44/3, left: 44/3, 3\n(13) - (5/3) = 34/3, left: 34/3, 3\n(3) / (5/3) = 9/5, left: 9/5, 13\n(5) + (3) = 8, left: 8, 3, 13\n(13) + (8) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (13 + (5 + 3)))"}, {"input": "5 3 3 13\n", "output": "(5) * (13) = 65, left: 65, 3, 3\n(5) / (13) = 5/13, left: 5/13, 3, 3\n(3) / (5/13) = 39/5, left: 39/5, 3\n(3) / (39/5) = 5/13, left: 5/13\n(13) / (5) = 13/5, left: 13/5, 3, 3\n(5) + (13) = 18, left: 18, 3, 3\n(18) / (3) = 6, left: 6, 3\n(3) + (6) = 9, left: 9\n(3) + (18) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 + (5 + 13)))"}, {"input": "5 3 3 13\n", "output": "(3) + (13) = 16, left: 16, 5, 3\n(16) / (5) = 16/5, left: 16/5, 3\n(3) + (16/5) = 31/5, left: 31/5\n(16/5) / (3) = 16/15, left: 16/15\n(3) - (16/5) = -1/5, left: -1/5\n(16/5) - (3) = 1/5, left: 1/5\n(5) + (16) = 21, left: 21, 3\n(3) / (21) = 1/7, left: 1/7\n(3) - (21) = -18, left: -18\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (5 + (3 + 13)))"}, {"input": "5 3 3 13\n", "output": "(3) / (3) = 1, left: 1, 5, 13\n(1) / (13) = 1/13, left: 1/13, 5\n(13) - (5) = 8, left: 8, 1\n(3) - (3) = 0, left: 0, 5, 13\n(13) + (0) = 13, left: 13, 5\n(3) - (3) = 0, left: 0, 5, 13\n(0) - (13) = -13, left: -13, 5\n(3) + (3) = 6, left: 6, 5, 13\n(13) + (6) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (13 + (3 + 3)))"}, {"input": "9 10 2 2\n", "output": "(2) - (9) = -7, left: -7, 10, 2\n(-7) / (2) = -7/2, left: -7/2, 10\n(-7/2) - (10) = -27/2, left: -27/2\n(2) * (-7) = -14, left: -14, 10\n(-14) / (10) = -7/5, left: -7/5\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (2 - 9)))"}, {"input": "9 10 2 2\n", "output": "(10) + (2) = 12, left: 12, 9, 2\n(10) / (2) = 5, left: 5, 9, 2\n(10) * (2) = 20, left: 20, 9, 2\n(9) / (20) = 9/20, left: 9/20, 2\n(2) - (10) = -8, left: -8, 9, 2\n(9) - (-8) = 17, left: 17, 2\n(2) / (10) = 1/5, left: 1/5, 9, 2\n(9) - (2) = 7, left: 7, 10, 2\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (9 - 2)))"}, {"input": "9 10 2 2\n", "output": "(2) - (9) = -7, left: -7, 10, 2\n(-7) - (2) = -9, left: -9, 10\n(-9) - (10) = -19, left: -19\n(10) / (-9) = -10/9, left: -10/9\n(10) * (-9) = -90, left: -90\n(-7) / (2) = -7/2, left: -7/2, 10\n(10) / (-7/2) = -20/7, left: -20/7\n(2) * (-7) = -14, left: -14, 10\n(-14) / (10) = -7/5, left: -7/5\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (2 - 9)))"}, {"input": "9 10 2 2\n", "output": "(2) / (2) = 1, left: 1, 9, 10\n(9) / (1) = 9, left: 9, 10\n(10) + (9) = 19, left: 19\n(2) * (2) = 4, left: 4, 9, 10\n(2) + (2) = 4, left: 4, 9, 10\n(10) / (4) = 5/2, left: 5/2, 9\n(4) / (10) = 2/5, left: 2/5, 9\n(2) - (9) = -7, left: -7, 10, 2\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (2 - 9)))"}, {"input": "9 10 2 2\n", "output": "(9) / (10) = 9/10, left: 9/10, 2, 2\n(2) / (9/10) = 20/9, left: 20/9, 2\n(9) * (10) = 90, left: 90, 2, 2\n(10) / (9) = 10/9, left: 10/9, 2, 2\n(10) - (9) = 1, left: 1, 2, 2\n(9) - (10) = -1, left: -1, 2, 2\n(2) * (-1) = -2, left: -2, 2\n(2) - (9) = -7, left: -7, 10, 2\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (2 - 9)))"}, {"input": "9 10 2 2\n", "output": "(2) / (10) = 1/5, left: 1/5, 9, 2\n(10) + (2) = 12, left: 12, 9, 2\n(10) - (2) = 8, left: 8, 9, 2\n(10) * (2) = 20, left: 20, 9, 2\n(10) * (2) = 20, left: 20, 9, 2\n(2) / (2) = 1, left: 1, 9, 10\n(9) / (2) = 9/2, left: 9/2, 10, 2\n(9) - (2) = 7, left: 7, 10, 2\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (9 - 2)))"}, {"input": "9 10 2 2\n", "output": "(10) / (2) = 5, left: 5, 9, 2\n(10) * (2) = 20, left: 20, 9, 2\n(2) + (20) = 22, left: 22, 9\n(2) - (10) = -8, left: -8, 9, 2\n(9) * (-8) = -72, left: -72, 2\n(2) - (-72) = 74, left: 74\n(2) / (10) = 1/5, left: 1/5, 9, 2\n(10) + (2) = 12, left: 12, 9, 2\n(2) / (2) = 1, left: 1, 9, 10\n(2) - (2) = 0, left: 0, 9, 10\n(2) + (2) = 4, left: 4, 9, 10\n(2) - (9) = -7, left: -7, 10, 2\n(2) * (-7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - (2 * (2 - 9)))"}, {"input": "9 10 2 2\n", "output": "(2) / (10) = 1/5, left: 1/5, 9, 2\n(10) + (2) = 12, left: 12, 9, 2\n(2) - (10) = -8, left: -8, 9, 2\n(10) * (2) = 20, left: 20, 9, 2\n(2) - (2) = 0, left: 0, 9, 10\n(10) / (9) = 10/9, left: 10/9, 0\n(2) / (2) = 1, left: 1, 9, 10\n(2) / (2) = 1, left: 1, 9, 10\n(2) + (2) = 4, left: 4, 9, 10\n(9) / (2) = 9/2, left: 9/2, 10, 2\n(9/2) / (10) = 9/20, left: 9/20, 2\n(9) - (2) = 7, left: 7, 10, 2\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (9 - 2)))"}, {"input": "9 10 2 2\n", "output": "(10) + (2) = 12, left: 12, 9, 2\n(10) / (2) = 5, left: 5, 9, 2\n(9) * (2) = 18, left: 18, 5\n(2) - (10) = -8, left: -8, 9, 2\n(-8) / (9) = -8/9, left: -8/9, 2\n(2) / (10) = 1/5, left: 1/5, 9, 2\n(10) - (2) = 8, left: 8, 9, 2\n(9) + (8) = 17, left: 17, 2\n(9) * (2) = 18, left: 18, 10, 2\n(2) - (18) = -16, left: -16, 10\n(9) - (2) = 7, left: 7, 10, 2\n(7) - (10) = -3, left: -3, 2\n(2) * (7) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 * (9 - 2)))"}, {"input": "13 6 8 6\n", "output": "(6) - (13) = -7, left: -7, 6, 8\n(8) / (6) = 4/3, left: 4/3, 13, 6\n(13) - (6) = 7, left: 7, 8, 6\n(8) - (7) = 1, left: 1, 6\n(8) * (6) = 48, left: 48, 13, 6\n(6) / (8) = 3/4, left: 3/4, 13, 6\n(13) - (3/4) = 49/4, left: 49/4, 6\n(13) - (8) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "13 6 8 6\n", "output": "(8) / (6) = 4/3, left: 4/3, 13, 6\n(13) - (4/3) = 35/3, left: 35/3, 6\n(8) - (6) = 2, left: 2, 13, 6\n(6) / (8) = 3/4, left: 3/4, 13, 6\n(6) + (8) = 14, left: 14, 13, 6\n(13) + (8) = 21, left: 21, 6, 6\n(8) / (13) = 8/13, left: 8/13, 6, 6\n(13) - (8) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "13 6 8 6\n", "output": "(6) * (6) = 36, left: 36, 13, 8\n(13) + (6) = 19, left: 19, 8, 6\n(13) - (6) = 7, left: 7, 8, 6\n(6) * (7) = 42, left: 42, 8\n(6) / (13) = 6/13, left: 6/13, 8, 6\n(13) / (8) = 13/8, left: 13/8, 6, 6\n(6) + (13/8) = 61/8, left: 61/8, 6\n(13) - (8) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "13 6 8 6\n", "output": "(6) * (6) = 36, left: 36, 13, 8\n(13) / (36) = 13/36, left: 13/36, 8\n(13) + (6) = 19, left: 19, 6, 8\n(13) - (6) = 7, left: 7, 6, 8\n(8) - (7) = 1, left: 1, 6\n(8) - (6) = 2, left: 2, 13, 6\n(8) - (6) = 2, left: 2, 13, 6\n(13) - (8) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "13 6 8 6\n", "output": "(8) - (13) = -5, left: -5, 6, 6\n(6) + (-5) = 1, left: 1, 6\n(13) * (8) = 104, left: 104, 6, 6\n(6) * (104) = 624, left: 624, 6\n(13) / (8) = 13/8, left: 13/8, 6, 6\n(6) / (13/8) = 48/13, left: 48/13, 6\n(8) / (13) = 8/13, left: 8/13, 6, 6\n(13) - (8) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "13 6 8 6\n", "output": "(13) / (6) = 13/6, left: 13/6, 6, 8\n(6) * (8) = 48, left: 48, 13, 6\n(6) / (6) = 1, left: 1, 13, 8\n(6) + (6) = 12, left: 12, 13, 8\n(6) / (13) = 6/13, left: 6/13, 8, 6\n(13) + (6) = 19, left: 19, 8, 6\n(6) / (19) = 6/19, left: 6/19, 8\n(6) / (8) = 3/4, left: 3/4, 13, 6\n(6) + (3/4) = 27/4, left: 27/4, 13\n(6) - (8) = -2, left: -2, 13, 6\n(13) * (8) = 104, left: 104, 6, 6\n(13) - (8) = 5, left: 5, 6, 6\n(6) * (5) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "3 11 1 3\n", "output": "(3) + (1) = 4, left: 4, 11, 3\n(11) / (3) = 11/3, left: 11/3, 4\n(1) / (3) = 1/3, left: 1/3, 11, 3\n(3) - (1/3) = 8/3, left: 8/3, 11\n(11) - (3) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((11 - 3) / (1 / 3))"}, {"input": "3 11 1 3\n", "output": "(3) / (1) = 3, left: 3, 11, 3\n(11) + (3) = 14, left: 14, 3\n(3) * (14) = 42, left: 42\n(3) - (11) = -8, left: -8, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((3 / 1) * (11 - 3))"}, {"input": "3 11 1 3\n", "output": "(11) - (3) = 8, left: 8, 1, 3\n(8) / (1) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) / (8) = 3/8, left: 3/8\n(8) - (3) = 5, left: 5\n(3) - (8) = -5, left: -5\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((11 - 3) / 1))"}, {"input": "3 11 1 3\n", "output": "(3) + (1) = 4, left: 4, 11, 3\n(3) - (11) = -8, left: -8, 4\n(11) * (3) = 33, left: 33, 4\n(11) / (3) = 11/3, left: 11/3, 4\n(11/3) / (4) = 11/12, left: 11/12\n(1) / (3) = 1/3, left: 1/3, 11, 3\n(3) + (1/3) = 10/3, left: 10/3, 11\n(3) * (1/3) = 1, left: 1, 11\n(11) - (3) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((11 - 3) / (1 / 3))"}, {"input": "3 11 1 3\n", "output": "(3) - (3) = 0, left: 0, 11, 1\n(11) / (1) = 11, left: 11, 0\n(3) / (3) = 1, left: 1, 11, 1\n(11) / (1) = 11, left: 11, 1\n(3) - (3) = 0, left: 0, 11, 1\n(3) * (3) = 9, left: 9, 11, 1\n(9) / (1) = 9, left: 9, 11\n(11) * (1) = 11, left: 11, 3, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((11 * 1) - 3))"}, {"input": "3 11 1 3\n", "output": "(3) - (3) = 0, left: 0, 11, 1\n(0) - (1) = -1, left: -1, 11\n(3) / (3) = 1, left: 1, 11, 1\n(1) - (11) = -10, left: -10, 1\n(3) * (3) = 9, left: 9, 11, 1\n(3) + (3) = 6, left: 6, 11, 1\n(11) + (1) = 12, left: 12, 6\n(3) * (1) = 3, left: 3, 11, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((3 * 1) * (11 - 3))"}, {"input": "3 11 1 3\n", "output": "(3) / (1) = 3, left: 3, 11, 3\n(3) / (11) = 3/11, left: 3/11, 3\n(3) - (3/11) = 30/11, left: 30/11\n(11) + (3) = 14, left: 14, 3\n(14) - (3) = 11, left: 11\n(3) + (14) = 17, left: 17\n(3) - (11) = -8, left: -8, 3\n(11) * (3) = 33, left: 33, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((3 / 1) * (11 - 3))"}, {"input": "3 11 1 3\n", "output": "(11) - (3) = 8, left: 8, 1, 3\n(8) / (1) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) / (8) = 3/8, left: 3/8\n(8) - (3) = 5, left: 5\n(3) - (8) = -5, left: -5\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((11 - 3) / 1))"}, {"input": "3 11 1 3\n", "output": "(3) - (3) = 0, left: 0, 11, 1\n(0) - (1) = -1, left: -1, 11\n(3) * (3) = 9, left: 9, 11, 1\n(3) + (3) = 6, left: 6, 11, 1\n(3) - (3) = 0, left: 0, 11, 1\n(0) - (11) = -11, left: -11, 1\n(3) / (3) = 1, left: 1, 11, 1\n(1) / (11) = 1/11, left: 1/11, 1\n(3) - (1) = 2, left: 2, 11, 3\n(11) + (2) = 13, left: 13, 3\n(3) * (1) = 3, left: 3, 11, 3\n(11) + (3) = 14, left: 14, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((3 * 1) * (11 - 3))"}, {"input": "3 11 1 3\n", "output": "(11) - (3) = 8, left: 8, 1, 3\n(8) / (1) = 8, left: 8, 3\n(3) + (8) = 11, left: 11\n(3) / (8) = 3/8, left: 3/8\n(8) - (3) = 5, left: 5\n(3) - (8) = -5, left: -5\n(8) / (3) = 8/3, left: 8/3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((11 - 3) / 1))"}, {"input": "10 7 2 7\n", "output": "(10) * (7) = 70, left: 70, 7, 2\n(7) + (2) = 9, left: 9, 70\n(9) - (70) = -61, left: -61\n(10) / (7) = 10/7, left: 10/7, 7, 2\n(2) + (10/7) = 24/7, left: 24/7, 7\n(7) * (24/7) = 24, left: 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(2) / (7) = 2/7, left: 2/7, 10, 7\n(7) + (2/7) = 51/7, left: 51/7, 10\n(7) - (7) = 0, left: 0, 10, 2\n(2) - (10) = -8, left: -8, 0\n(7) / (10) = 7/10, left: 7/10, 2, 7\n(10) + (7) = 17, left: 17, 2, 7\n(10) * (7) = 70, left: 70, 2, 7\n(10) / (7) = 10/7, left: 10/7, 2, 7\n(2) + (10/7) = 24/7, left: 24/7, 7\n(7) * (24/7) = 24, left: 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(10) * (7) = 70, left: 70, 7, 2\n(2) - (7) = -5, left: -5, 70\n(70) / (7) = 10, left: 10, 2\n(7) - (10) = -3, left: -3, 7, 2\n(7) + (2) = 9, left: 9, -3\n(2) / (7) = 2/7, left: 2/7, -3\n(-3) - (2) = -5, left: -5, 7\n(10) / (7) = 10/7, left: 10/7, 7, 2\n(2) + (10/7) = 24/7, left: 24/7, 7\n(7) * (24/7) = 24, left: 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(7) + (2) = 9, left: 9, 10, 7\n(10) + (9) = 19, left: 19, 7\n(2) / (7) = 2/7, left: 2/7, 10, 7\n(10) * (2/7) = 20/7, left: 20/7, 7\n(7) / (2) = 7/2, left: 7/2, 10, 7\n(10) - (7) = 3, left: 3, 2, 7\n(10) / (7) = 10/7, left: 10/7, 2, 7\n(10/7) / (7) = 10/49, left: 10/49, 2\n(2) + (10/7) = 24/7, left: 24/7, 7\n(7) * (24/7) = 24, left: 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(10) + (2) = 12, left: 12, 7, 7\n(12) / (7) = 12/7, left: 12/7, 7\n(10) / (2) = 5, left: 5, 7, 7\n(7) / (7) = 1, left: 1, 5\n(10) - (2) = 8, left: 8, 7, 7\n(8) / (7) = 8/7, left: 8/7, 7\n(10) * (2) = 20, left: 20, 7, 7\n(10) / (7) = 10/7, left: 10/7, 2, 7\n(2) + (10/7) = 24/7, left: 24/7, 7\n(7) * (24/7) = 24, left: 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(7) / (2) = 7/2, left: 7/2, 10, 7\n(7) / (7/2) = 2, left: 2, 10\n(2) / (7) = 2/7, left: 2/7, 10, 7\n(7) - (2) = 5, left: 5, 10, 7\n(10) - (5) = 5, left: 5, 7\n(2) + (7) = 9, left: 9, 10, 7\n(10) / (7) = 10/7, left: 10/7, 2, 7\n(10/7) / (2) = 5/7, left: 5/7, 7\n(2) + (10/7) = 24/7, left: 24/7, 7\n(7) * (24/7) = 24, left: 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(2) / (7) = 2/7, left: 2/7, 10, 7\n(7) - (7) = 0, left: 0, 10, 2\n(2) / (7) = 2/7, left: 2/7, 10, 7\n(7) - (2) = 5, left: 5, 10, 7\n(2) * (7) = 14, left: 14, 10, 7\n(7) / (2) = 7/2, left: 7/2, 10, 7\n(7) / (10) = 7/10, left: 7/10, 2, 7\n(10) + (7) = 17, left: 17, 2, 7\n(10) * (7) = 70, left: 70, 2, 7\n(7) * (70) = 490, left: 490, 2\n(10) / (7) = 10/7, left: 10/7, 2, 7\n(7) * (10/7) = 10, left: 10, 2\n(2) + (10/7) = 24/7, left: 24/7, 7\n(7) * (24/7) = 24, left: 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "5 9 7 6\n", "output": "(7) - (5) = 2, left: 2, 9, 6\n(2) - (6) = -4, left: -4, 9\n(-4) / (9) = -4/9, left: -4/9\n(6) / (2) = 3, left: 3, 9\n(9) - (6) = 3, left: 3, 2\n(9) / (6) = 3/2, left: 3/2, 2\n(6) / (9) = 2/3, left: 2/3, 2\n(2) / (9) = 2/9, left: 2/9, 6\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (7 - 5)))"}, {"input": "5 9 7 6\n", "output": "(6) / (9) = 2/3, left: 2/3, 5, 7\n(7) * (2/3) = 14/3, left: 14/3, 5\n(5) / (14/3) = 15/14, left: 15/14\n(5) + (9) = 14, left: 14, 7, 6\n(5) * (9) = 45, left: 45, 7, 6\n(5) + (7) = 12, left: 12, 9, 6\n(9) / (12) = 3/4, left: 3/4, 6\n(5) - (7) = -2, left: -2, 9, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (5 - 7)))"}, {"input": "5 9 7 6\n", "output": "(9) * (6) = 54, left: 54, 5, 7\n(6) / (7) = 6/7, left: 6/7, 5, 9\n(5) / (6/7) = 35/6, left: 35/6, 9\n(7) + (6) = 13, left: 13, 5, 9\n(5) - (9) = -4, left: -4, 7, 6\n(9) - (5) = 4, left: 4, 7, 6\n(6) / (4) = 3/2, left: 3/2, 7\n(7) - (5) = 2, left: 2, 9, 6\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (7 - 5)))"}, {"input": "5 9 7 6\n", "output": "(6) / (7) = 6/7, left: 6/7, 5, 9\n(5) - (6/7) = 29/7, left: 29/7, 9\n(6) - (7) = -1, left: -1, 5, 9\n(-1) / (9) = -1/9, left: -1/9, 5\n(7) * (6) = 42, left: 42, 5, 9\n(7) - (6) = 1, left: 1, 5, 9\n(5) * (7) = 35, left: 35, 9, 6\n(7) - (5) = 2, left: 2, 9, 6\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (7 - 5)))"}, {"input": "5 9 7 6\n", "output": "(6) - (9) = -3, left: -3, 5, 7\n(9) - (5) = 4, left: 4, 7, 6\n(4) - (7) = -3, left: -3, 6\n(6) - (5) = 1, left: 1, 9, 7\n(5) * (6) = 30, left: 30, 9, 7\n(5) / (6) = 5/6, left: 5/6, 9, 7\n(7) - (9) = -2, left: -2, 5/6\n(5) - (7) = -2, left: -2, 9, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (5 - 7)))"}, {"input": "5 9 7 6\n", "output": "(7) / (6) = 7/6, left: 7/6, 5, 9\n(7) + (6) = 13, left: 13, 5, 9\n(6) - (7) = -1, left: -1, 5, 9\n(7) * (6) = 42, left: 42, 5, 9\n(9) - (42) = -33, left: -33, 5\n(7) - (6) = 1, left: 1, 5, 9\n(9) * (1) = 9, left: 9, 5\n(9) - (5) = 4, left: 4\n(9) / (7) = 9/7, left: 9/7, 5, 6\n(7) / (9) = 7/9, left: 7/9, 5, 6\n(5) * (7) = 35, left: 35, 9, 6\n(7) - (5) = 2, left: 2, 9, 6\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (7 - 5)))"}, {"input": "5 9 7 6\n", "output": "(5) + (6) = 11, left: 11, 9, 7\n(5) / (6) = 5/6, left: 5/6, 9, 7\n(5) * (6) = 30, left: 30, 9, 7\n(6) - (7) = -1, left: -1, 5, 9\n(7) + (6) = 13, left: 13, 5, 9\n(5) - (9) = -4, left: -4, 7, 6\n(5) * (9) = 45, left: 45, 7, 6\n(7) + (6) = 13, left: 13, 45\n(13) - (45) = -32, left: -32\n(9) - (5) = 4, left: 4, 7, 6\n(5) / (9) = 5/9, left: 5/9, 7, 6\n(7) - (5) = 2, left: 2, 9, 6\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (7 - 5)))"}, {"input": "5 9 7 6\n", "output": "(9) - (7) = 2, left: 2, 5, 6\n(6) - (5) = 1, left: 1, 2\n(9) * (7) = 63, left: 63, 5, 6\n(9) / (6) = 3/2, left: 3/2, 5, 7\n(5) + (9) = 14, left: 14, 7, 6\n(14) / (6) = 7/3, left: 7/3, 7\n(6) - (7) = -1, left: -1, 5, 9\n(-1) - (9) = -10, left: -10, 5\n(5) - (6) = -1, left: -1, 9, 7\n(9) + (-1) = 8, left: 8, 7\n(7) - (8) = -1, left: -1\n(5) - (7) = -2, left: -2, 9, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (5 - 7)))"}, {"input": "5 9 7 6\n", "output": "(9) + (6) = 15, left: 15, 5, 7\n(9) + (7) = 16, left: 16, 5, 6\n(7) / (9) = 7/9, left: 7/9, 5, 6\n(9) - (7) = 2, left: 2, 5, 6\n(7) / (6) = 7/6, left: 7/6, 5, 9\n(6) - (7) = -1, left: -1, 5, 9\n(9) - (5) = 4, left: 4, 7, 6\n(6) - (7) = -1, left: -1, 4\n(9) / (5) = 9/5, left: 9/5, 7, 6\n(5) + (9) = 14, left: 14, 7, 6\n(6) / (5) = 6/5, left: 6/5, 9, 7\n(5) - (7) = -2, left: -2, 9, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (5 - 7)))"}, {"input": "2 1 11 9\n", "output": "(9) / (2) = 9/2, left: 9/2, 1, 11\n(1) * (9) = 9, left: 9, 2, 11\n(11) * (9) = 99, left: 99, 2\n(9) / (1) = 9, left: 9, 2, 11\n(11) * (9) = 99, left: 99, 2\n(2) - (11) = -9, left: -9, 1, 9\n(2) + (11) = 13, left: 13, 1, 9\n(2) + (1) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(1) + (9) = 10, left: 10, 2, 11\n(10) - (2) = 8, left: 8, 11\n(11) / (2) = 11/2, left: 11/2, 1, 9\n(2) + (11) = 13, left: 13, 1, 9\n(1) / (9) = 1/9, left: 1/9, 13\n(11) - (2) = 9, left: 9, 1, 9\n(1) * (9) = 9, left: 9, 9\n(2) + (1) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(2) + (1) = 3, left: 3, 11, 9\n(11) - (3) = 8, left: 8, 9\n(9) + (8) = 17, left: 17\n(3) / (11) = 3/11, left: 3/11, 9\n(9) - (3/11) = 96/11, left: 96/11\n(11) / (3) = 11/3, left: 11/3, 9\n(9) + (11/3) = 38/3, left: 38/3\n(11/3) - (9) = -16/3, left: -16/3\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(2) - (9) = -7, left: -7, 1, 11\n(9) / (2) = 9/2, left: 9/2, 1, 11\n(11) + (9) = 20, left: 20, 2, 1\n(11) * (9) = 99, left: 99, 2, 1\n(1) - (2) = -1, left: -1, 99\n(99) * (-1) = -99, left: -99\n(11) / (9) = 11/9, left: 11/9, 2, 1\n(2) + (1) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(11) - (9) = 2, left: 2, 2, 1\n(1) - (11) = -10, left: -10, 2, 9\n(2) * (9) = 18, left: 18, 1, 11\n(2) + (9) = 11, left: 11, 1, 11\n(11) / (11) = 1, left: 1, 1\n(2) - (9) = -7, left: -7, 1, 11\n(11) - (2) = 9, left: 9, 1, 9\n(2) + (1) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(11) / (9) = 11/9, left: 11/9, 2, 1\n(2) - (9) = -7, left: -7, 1, 11\n(2) + (9) = 11, left: 11, 1, 11\n(11) * (11) = 121, left: 121, 1\n(9) - (2) = 7, left: 7, 1, 11\n(1) - (9) = -8, left: -8, 2, 11\n(11) / (2) = 11/2, left: 11/2, -8\n(9) / (1) = 9, left: 9, 2, 11\n(9) / (2) = 9/2, left: 9/2, 11\n(1) + (11) = 12, left: 12, 2, 9\n(1) / (11) = 1/11, left: 1/11, 2, 9\n(2) + (1) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(9) - (2) = 7, left: 7, 1, 11\n(2) / (9) = 2/9, left: 2/9, 1, 11\n(11) / (2/9) = 99/2, left: 99/2, 1\n(1) + (99/2) = 101/2, left: 101/2\n(1) + (9) = 10, left: 10, 2, 11\n(9) - (1) = 8, left: 8, 2, 11\n(2) + (8) = 10, left: 10, 11\n(2) - (11) = -9, left: -9, 1, 9\n(2) * (11) = 22, left: 22, 1, 9\n(9) * (22) = 198, left: 198, 1\n(2) * (1) = 2, left: 2, 11, 9\n(2) + (1) = 3, left: 3, 11, 9\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "11 1 3 8\n", "output": "(1) / (8) = 1/8, left: 1/8, 11, 3\n(8) - (1) = 7, left: 7, 11, 3\n(7) - (11) = -4, left: -4, 3\n(1) - (8) = -7, left: -7, 11, 3\n(3) / (11) = 3/11, left: 3/11, -7\n(11) + (3) = 14, left: 14, -7\n(-7) + (14) = 7, left: 7\n(1) + (8) = 9, left: 9, 11, 3\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "11 1 3 8\n", "output": "(8) - (3) = 5, left: 5, 11, 1\n(1) / (11) = 1/11, left: 1/11, 5\n(8) / (3) = 8/3, left: 8/3, 11, 1\n(3) / (8) = 3/8, left: 3/8, 11, 1\n(3) + (8) = 11, left: 11, 11, 1\n(11) - (11) = 0, left: 0, 1\n(8) - (1) = 7, left: 7, 11, 3\n(1) + (8) = 9, left: 9, 11, 3\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "11 1 3 8\n", "output": "(8) - (3) = 5, left: 5, 11, 1\n(11) * (5) = 55, left: 55, 1\n(3) + (8) = 11, left: 11, 11, 1\n(3) - (8) = -5, left: -5, 11, 1\n(11) * (1) = 11, left: 11, -5\n(3) * (8) = 24, left: 24, 11, 1\n(8) / (1) = 8, left: 8, 11, 3\n(1) + (8) = 9, left: 9, 11, 3\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "11 1 3 8\n", "output": "(8) / (11) = 8/11, left: 8/11, 1, 3\n(11) / (8) = 11/8, left: 11/8, 1, 3\n(11) * (8) = 88, left: 88, 1, 3\n(1) - (88) = -87, left: -87, 3\n(3) + (-87) = -84, left: -84\n(11) - (1) = 10, left: 10, 3, 8\n(1) * (8) = 8, left: 8, 11, 3\n(1) + (8) = 9, left: 9, 11, 3\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "11 1 3 8\n", "output": "(3) / (1) = 3, left: 3, 11, 8\n(1) + (3) = 4, left: 4, 11, 8\n(1) - (3) = -2, left: -2, 11, 8\n(3) * (8) = 24, left: 24, 11, 1\n(11) * (1) = 11, left: 11, 3, 8\n(11) - (1) = 10, left: 10, 3, 8\n(1) / (11) = 1/11, left: 1/11, 3, 8\n(1) + (8) = 9, left: 9, 11, 3\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "11 1 3 8\n", "output": "(8) - (3) = 5, left: 5, 11, 1\n(1) / (5) = 1/5, left: 1/5, 11\n(8) / (3) = 8/3, left: 8/3, 11, 1\n(3) * (8) = 24, left: 24, 11, 1\n(1) - (24) = -23, left: -23, 11\n(3) - (8) = -5, left: -5, 11, 1\n(3) + (8) = 11, left: 11, 11, 1\n(8) - (1) = 7, left: 7, 11, 3\n(11) * (3) = 33, left: 33, 7\n(3) * (7) = 21, left: 21, 11\n(21) - (11) = 10, left: 10\n(1) + (8) = 9, left: 9, 11, 3\n(11) * (3) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "9 13 3 2\n", "output": "(3) - (2) = 1, left: 1, 9, 13\n(13) - (1) = 12, left: 12, 9\n(9) + (13) = 22, left: 22, 1\n(3) + (2) = 5, left: 5, 9, 13\n(9) - (13) = -4, left: -4, 5\n(3) * (2) = 6, left: 6, 9, 13\n(9) - (6) = 3, left: 3, 13\n(6) - (9) = -3, left: -3, 13\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 * 2) * (13 - 9))"}, {"input": "9 13 3 2\n", "output": "(9) - (13) = -4, left: -4, 3, 2\n(3) + (-4) = -1, left: -1, 2\n(3) - (-4) = 7, left: 7, 2\n(-4) / (3) = -4/3, left: -4/3, 2\n(2) + (-4) = -2, left: -2, 3\n(3) + (2) = 5, left: 5, -4\n(-4) * (5) = -20, left: -20\n(13) - (9) = 4, left: 4, 3, 2\n(2) * (4) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 * (13 - 9)))"}, {"input": "9 13 3 2\n", "output": "(3) / (2) = 3/2, left: 3/2, 9, 13\n(13) + (3/2) = 29/2, left: 29/2, 9\n(9) - (3/2) = 15/2, left: 15/2, 13\n(3) - (2) = 1, left: 1, 9, 13\n(13) / (1) = 13, left: 13, 9\n(13) * (1) = 13, left: 13, 9\n(3) * (2) = 6, left: 6, 9, 13\n(13) * (6) = 78, left: 78, 9\n(13) - (9) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 * 2) * (13 - 9))"}, {"input": "9 13 3 2\n", "output": "(9) / (2) = 9/2, left: 9/2, 13, 3\n(9) - (2) = 7, left: 7, 13, 3\n(2) / (9) = 2/9, left: 2/9, 13, 3\n(2/9) / (3) = 2/27, left: 2/27, 13\n(13) + (3) = 16, left: 16, 9, 2\n(13) - (3) = 10, left: 10, 9, 2\n(2) + (10) = 12, left: 12, 9\n(13) * (3) = 39, left: 39, 9, 2\n(9) + (39) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((9 + (13 * 3)) / 2)"}, {"input": "9 13 3 2\n", "output": "(2) - (3) = -1, left: -1, 9, 13\n(9) - (-1) = 10, left: 10, 13\n(13) * (-1) = -13, left: -13, 9\n(9) - (-13) = 22, left: 22\n(3) + (2) = 5, left: 5, 9, 13\n(13) + (5) = 18, left: 18, 9\n(3) * (2) = 6, left: 6, 9, 13\n(13) - (9) = 4, left: 4, 6\n(6) - (4) = 2, left: 2\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 * 2) * (13 - 9))"}, {"input": "2 2 5 11\n", "output": "(2) + (5) = 7, left: 7, 2, 11\n(11) / (2) = 11/2, left: 11/2, 7\n(2) + (5) = 7, left: 7, 2, 11\n(7) / (11) = 7/11, left: 7/11, 2\n(2) / (7/11) = 22/7, left: 22/7\n(11) / (2) = 11/2, left: 11/2, 2, 5\n(2) - (11) = -9, left: -9, 2, 5\n(2) + (2) = 4, left: 4, 5, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) / (5) = 2/5, left: 2/5, 2, 11\n(2) * (11) = 22, left: 22, 2, 5\n(2) - (11) = -9, left: -9, 2, 5\n(11) - (2) = 9, left: 9, 2, 5\n(2) + (11) = 13, left: 13, 2, 5\n(2) / (2) = 1, left: 1, 5, 11\n(2) - (2) = 0, left: 0, 5, 11\n(2) + (2) = 4, left: 4, 5, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) * (5) = 10, left: 10, 2, 11\n(2) - (10) = -8, left: -8, 11\n(-8) / (11) = -8/11, left: -8/11\n(5) / (2) = 5/2, left: 5/2, 2, 11\n(2) - (11) = -9, left: -9, 5/2\n(2) * (11) = 22, left: 22, 2, 5\n(11) / (2) = 11/2, left: 11/2, 2, 5\n(2) + (2) = 4, left: 4, 5, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) * (5) = 10, left: 10, 2, 11\n(2) + (5) = 7, left: 7, 2, 11\n(2) + (11) = 13, left: 13, 7\n(2) / (5) = 2/5, left: 2/5, 2, 11\n(2/5) - (2) = -8/5, left: -8/5, 11\n(2) - (2) = 0, left: 0, 5, 11\n(11) + (0) = 11, left: 11, 5\n(2) * (2) = 4, left: 4, 5, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 * 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) - (5) = -3, left: -3, 2, 11\n(11) / (-3) = -11/3, left: -11/3, 2\n(2) / (5) = 2/5, left: 2/5, 2, 11\n(2) - (5) = -3, left: -3, 2, 11\n(11) / (-3) = -11/3, left: -11/3, 2\n(2) - (11) = -9, left: -9, 2, 5\n(2) - (5) = -3, left: -3, -9\n(2) + (2) = 4, left: 4, 5, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) - (5) = -3, left: -3, 2, 11\n(2) * (-3) = -6, left: -6, 11\n(5) - (2) = 3, left: 3, 2, 11\n(2) + (3) = 5, left: 5, 11\n(11) + (3) = 14, left: 14, 2\n(2) * (5) = 10, left: 10, 2, 11\n(11) - (2) = 9, left: 9, 10\n(9) - (10) = -1, left: -1\n(2) / (5) = 2/5, left: 2/5, 2, 11\n(2) / (2) = 1, left: 1, 5, 11\n(1) - (11) = -10, left: -10, 5\n(2) * (2) = 4, left: 4, 5, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 * 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(5) - (2) = 3, left: 3, 2, 11\n(3) / (2) = 3/2, left: 3/2, 11\n(2) + (5) = 7, left: 7, 2, 11\n(5) / (2) = 5/2, left: 5/2, 2, 11\n(2) / (5) = 2/5, left: 2/5, 2, 11\n(2) - (11) = -9, left: -9, 2/5\n(2) + (5) = 7, left: 7, 2, 11\n(2) * (11) = 22, left: 22, 7\n(5) - (2) = 3, left: 3, 2, 11\n(3) - (11) = -8, left: -8, 2\n(2) - (5) = -3, left: -3, 2, 11\n(2) + (2) = 4, left: 4, 5, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) * (5) = 10, left: 10, 2, 11\n(2) - (5) = -3, left: -3, 2, 11\n(2) / (-3) = -2/3, left: -2/3, 11\n(2) / (5) = 2/5, left: 2/5, 2, 11\n(2/5) / (11) = 2/55, left: 2/55, 2\n(5) - (2) = 3, left: 3, 2, 11\n(11) - (2) = 9, left: 9, 3\n(2) + (11) = 13, left: 13, 2, 5\n(11) - (2) = 9, left: 9, 2, 5\n(11) / (2) = 11/2, left: 11/2, 2, 5\n(2) - (2) = 0, left: 0, 5, 11\n(2) + (2) = 4, left: 4, 5, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "4 2 2 8\n", "output": "(2) - (8) = -6, left: -6, 4, 2\n(-6) - (2) = -8, left: -8, 4\n(-6) / (4) = -3/2, left: -3/2, 2\n(-6) - (4) = -10, left: -10, 2\n(-10) / (2) = -5, left: -5\n(2) / (8) = 1/4, left: 1/4, 4, 2\n(4) * (2) = 8, left: 8, 1/4\n(1/4) - (8) = -31/4, left: -31/4\n(4) + (2) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((4 + 2) / (2 / 8))"}, {"input": "4 2 2 8\n", "output": "(4) - (2) = 2, left: 2, 2, 8\n(2) - (8) = -6, left: -6, 2\n(2) - (2) = 0, left: 0, 8\n(8) - (2) = 6, left: 6, 2\n(6) / (2) = 3, left: 3\n(8) / (2) = 4, left: 4, 2\n(4) / (2) = 2, left: 2\n(4) + (2) = 6, left: 6, 2, 8\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * (4 + 2)) / 2)"}, {"input": "4 2 2 8\n", "output": "(4) * (2) = 8, left: 8, 2, 8\n(8) + (8) = 16, left: 16, 2\n(2) - (16) = -14, left: -14\n(8) / (8) = 1, left: 1, 2\n(1) / (2) = 1/2, left: 1/2\n(8) - (8) = 0, left: 0, 2\n(2) + (0) = 2, left: 2\n(8) - (8) = 0, left: 0, 2\n(2) * (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((4 * 2) + (2 * 8))"}, {"input": "4 2 2 8\n", "output": "(2) / (4) = 1/2, left: 1/2, 2, 8\n(2) / (8) = 1/4, left: 1/4, 1/2\n(1/4) / (1/2) = 1/2, left: 1/2\n(4) - (2) = 2, left: 2, 2, 8\n(8) * (2) = 16, left: 16, 2\n(2) + (8) = 10, left: 10, 2\n(2) + (10) = 12, left: 12\n(4) + (2) = 6, left: 6, 2, 8\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * (4 + 2)) / 2)"}, {"input": "4 2 2 8\n", "output": "(4) - (8) = -4, left: -4, 2, 2\n(8) - (4) = 4, left: 4, 2, 2\n(2) * (2) = 4, left: 4, 4\n(4) + (8) = 12, left: 12, 2, 2\n(2) * (12) = 24, left: 24, 2\n(2) + (12) = 14, left: 14, 2\n(4) * (2) = 8, left: 8, 2, 8\n(2) - (8) = -6, left: -6, 8\n(2) * (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((4 * 2) + (2 * 8))"}, {"input": "4 2 2 8\n", "output": "(4) - (2) = 2, left: 2, 2, 8\n(2) + (8) = 10, left: 10, 2\n(2) * (2) = 4, left: 4, 8\n(8) - (2) = 6, left: 6, 2\n(2) / (6) = 1/3, left: 1/3\n(8) / (2) = 4, left: 4, 2\n(2) - (8) = -6, left: -6, 2\n(-6) / (2) = -3, left: -3\n(4) + (2) = 6, left: 6, 2, 8\n(8) - (6) = 2, left: 2, 2\n(2) - (2) = 0, left: 0\n(8) + (6) = 14, left: 14, 2\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * (4 + 2)) / 2)"}, {"input": "4 2 2 8\n", "output": "(4) * (2) = 8, left: 8, 2, 8\n(8) + (8) = 16, left: 16, 2\n(2) / (16) = 1/8, left: 1/8\n(8) * (8) = 64, left: 64, 2\n(64) - (2) = 62, left: 62\n(8) / (8) = 1, left: 1, 2\n(2) + (1) = 3, left: 3\n(8) - (8) = 0, left: 0, 2\n(8) - (8) = 0, left: 0, 2\n(2) + (0) = 2, left: 2\n(8) / (8) = 1, left: 1, 2\n(2) - (1) = 1, left: 1\n(2) * (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((4 * 2) + (2 * 8))"}, {"input": "4 2 2 8\n", "output": "(8) / (4) = 2, left: 2, 2, 2\n(2) * (2) = 4, left: 4, 2\n(4) - (8) = -4, left: -4, 2, 2\n(2) + (2) = 4, left: 4, -4\n(4) * (8) = 32, left: 32, 2, 2\n(2) * (2) = 4, left: 4, 32\n(4) / (8) = 1/2, left: 1/2, 2, 2\n(2) * (1/2) = 1, left: 1, 2\n(2) - (1/2) = 3/2, left: 3/2, 2\n(8) - (4) = 4, left: 4, 2, 2\n(4) + (8) = 12, left: 12, 2, 2\n(4) * (2) = 8, left: 8, 2, 8\n(2) * (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((4 * 2) + (2 * 8))"}, {"input": "8 4 5 1\n", "output": "(5) - (8) = -3, left: -3, 4, 1\n(4) / (5) = 4/5, left: 4/5, 8, 1\n(8) / (1) = 8, left: 8, 4, 5\n(8) - (1) = 7, left: 7, 4, 5\n(4) + (5) = 9, left: 9, 7\n(1) / (8) = 1/8, left: 1/8, 4, 5\n(5) * (1/8) = 5/8, left: 5/8, 4\n(5) + (1) = 6, left: 6, 8, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (8 - 4))"}, {"input": "8 4 5 1\n", "output": "(4) + (1) = 5, left: 5, 8, 5\n(8) / (5) = 8/5, left: 8/5, 5\n(5) * (8/5) = 8, left: 8\n(4) / (1) = 4, left: 4, 8, 5\n(4) - (1) = 3, left: 3, 8, 5\n(3) / (5) = 3/5, left: 3/5, 8\n(8) - (1) = 7, left: 7, 4, 5\n(5) + (1) = 6, left: 6, 8, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (8 - 4))"}, {"input": "8 4 5 1\n", "output": "(8) / (4) = 2, left: 2, 5, 1\n(1) + (2) = 3, left: 3, 5\n(3) / (5) = 3/5, left: 3/5\n(2) / (5) = 2/5, left: 2/5, 1\n(5) - (2) = 3, left: 3, 1\n(8) - (4) = 4, left: 4, 5, 1\n(1) / (4) = 1/4, left: 1/4, 5\n(5) / (1) = 5, left: 5, 4\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 - 4) * (5 + 1))"}, {"input": "8 4 5 1\n", "output": "(4) / (5) = 4/5, left: 4/5, 8, 1\n(4) * (5) = 20, left: 20, 8, 1\n(8) - (1) = 7, left: 7, 4, 5\n(5) / (4) = 5/4, left: 5/4, 7\n(4) + (5) = 9, left: 9, 7\n(1) - (8) = -7, left: -7, 4, 5\n(8) / (1) = 8, left: 8, 4, 5\n(8) - (4) = 4, left: 4, 5, 1\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 - 4) * (5 + 1))"}, {"input": "8 4 5 1\n", "output": "(5) - (1) = 4, left: 4, 8, 4\n(8) - (4) = 4, left: 4, 4\n(8) + (4) = 12, left: 12, 4\n(8) * (4) = 32, left: 32, 4\n(4) + (4) = 8, left: 8, 8\n(8) - (8) = 0, left: 0\n(4) - (4) = 0, left: 0, 8\n(0) - (8) = -8, left: -8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (5 - 1)))"}, {"input": "8 4 5 1\n", "output": "(4) + (5) = 9, left: 9, 8, 1\n(4) - (5) = -1, left: -1, 8, 1\n(1) / (8) = 1/8, left: 1/8, 4, 5\n(4) - (1) = 3, left: 3, 8, 5\n(1) - (4) = -3, left: -3, 8, 5\n(4) / (1) = 4, left: 4, 8, 5\n(5) - (8) = -3, left: -3, 4\n(4) + (1) = 5, left: 5, 8, 5\n(4) / (8) = 1/2, left: 1/2, 5, 1\n(8) * (4) = 32, left: 32, 5, 1\n(5) / (32) = 5/32, left: 5/32, 1\n(8) - (4) = 4, left: 4, 5, 1\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((8 - 4) * (5 + 1))"}, {"input": "8 4 5 1\n", "output": "(5) / (8) = 5/8, left: 5/8, 4, 1\n(8) / (5) = 8/5, left: 8/5, 4, 1\n(8) * (5) = 40, left: 40, 4, 1\n(8) + (5) = 13, left: 13, 4, 1\n(5) / (4) = 5/4, left: 5/4, 8, 1\n(4) + (5) = 9, left: 9, 8, 1\n(4) * (5) = 20, left: 20, 8, 1\n(5) - (4) = 1, left: 1, 8, 1\n(1) / (8) = 1/8, left: 1/8, 4, 5\n(4) * (1/8) = 1/2, left: 1/2, 5\n(1) - (8) = -7, left: -7, 4, 5\n(5) + (1) = 6, left: 6, 8, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (8 - 4))"}, {"input": "8 4 5 1\n", "output": "(1) / (4) = 1/4, left: 1/4, 8, 5\n(8) * (1/4) = 2, left: 2, 5\n(5) / (2) = 5/2, left: 5/2\n(4) / (1) = 4, left: 4, 8, 5\n(1) - (4) = -3, left: -3, 8, 5\n(1) - (8) = -7, left: -7, 4, 5\n(8) * (1) = 8, left: 8, 4, 5\n(8) / (1) = 8, left: 8, 4, 5\n(8) - (1) = 7, left: 7, 4, 5\n(7) / (4) = 7/4, left: 7/4, 5\n(7/4) - (5) = -13/4, left: -13/4\n(5) + (1) = 6, left: 6, 8, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (8 - 4))"}, {"input": "8 4 5 1\n", "output": "(5) - (1) = 4, left: 4, 8, 4\n(8) / (4) = 2, left: 2, 4\n(4) + (2) = 6, left: 6\n(4) - (8) = -4, left: -4, 4\n(8) - (4) = 4, left: 4, 4\n(8) + (4) = 12, left: 12, 4\n(4) - (12) = -8, left: -8\n(8) * (4) = 32, left: 32, 4\n(4) / (8) = 1/2, left: 1/2, 4\n(4) * (1/2) = 2, left: 2\n(4) - (4) = 0, left: 0, 8\n(8) - (0) = 8, left: 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (5 - 1)))"}, {"input": "11 2 8 8\n", "output": "(2) / (8) = 1/4, left: 1/4, 11, 8\n(11) + (1/4) = 45/4, left: 45/4, 8\n(2) + (8) = 10, left: 10, 11, 8\n(8) / (2) = 4, left: 4, 11, 8\n(8) / (11) = 8/11, left: 8/11, 4\n(11) / (8) = 11/8, left: 11/8, 4\n(2) - (8) = -6, left: -6, 11, 8\n(8) / (8) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "11 2 8 8\n", "output": "(2) / (8) = 1/4, left: 1/4, 11, 8\n(11) + (2) = 13, left: 13, 8, 8\n(11) / (2) = 11/2, left: 11/2, 8, 8\n(11) * (2) = 22, left: 22, 8, 8\n(2) + (8) = 10, left: 10, 11, 8\n(8) - (2) = 6, left: 6, 11, 8\n(8) / (2) = 4, left: 4, 11, 8\n(8) / (8) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "11 2 8 8\n", "output": "(2) + (8) = 10, left: 10, 11, 8\n(8) / (2) = 4, left: 4, 11, 8\n(8) / (11) = 8/11, left: 8/11, 4\n(2) / (8) = 1/4, left: 1/4, 11, 8\n(8) * (8) = 64, left: 64, 11, 2\n(11) + (64) = 75, left: 75, 2\n(2) + (75) = 77, left: 77\n(8) / (8) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "11 2 8 8\n", "output": "(2) / (11) = 2/11, left: 2/11, 8, 8\n(8) + (2/11) = 90/11, left: 90/11, 8\n(8) - (2) = 6, left: 6, 11, 8\n(6) - (11) = -5, left: -5, 8\n(8) - (2) = 6, left: 6, 11, 8\n(8) / (2) = 4, left: 4, 11, 8\n(4) - (11) = -7, left: -7, 8\n(8) / (8) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "11 2 8 8\n", "output": "(2) - (8) = -6, left: -6, 11, 8\n(8) + (-6) = 2, left: 2, 11\n(11) * (2) = 22, left: 22, 8, 8\n(8) - (2) = 6, left: 6, 11, 8\n(6) / (8) = 3/4, left: 3/4, 11\n(2) - (8) = -6, left: -6, 11, 8\n(11) / (-6) = -11/6, left: -11/6, 8\n(8) / (8) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "11 2 8 8\n", "output": "(2) + (8) = 10, left: 10, 11, 8\n(8) - (11) = -3, left: -3, 10\n(2) * (8) = 16, left: 16, 11, 8\n(11) + (16) = 27, left: 27, 8\n(11) + (8) = 19, left: 19, 16\n(2) - (8) = -6, left: -6, 11, 8\n(8) - (-6) = 14, left: 14, 11\n(2) / (8) = 1/4, left: 1/4, 11, 8\n(8) - (8) = 0, left: 0, 11, 2\n(2) + (0) = 2, left: 2, 11\n(8) * (8) = 64, left: 64, 11, 2\n(8) / (8) = 1, left: 1, 11, 2\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "1 1 3 6\n", "output": "(1) * (6) = 6, left: 6, 1, 3\n(6) / (1) = 6, left: 6, 3\n(3) - (6) = -3, left: -3\n(1) * (6) = 6, left: 6, 3\n(6) - (3) = 3, left: 3\n(1) / (6) = 1/6, left: 1/6, 3\n(6) - (1) = 5, left: 5, 3\n(1) + (6) = 7, left: 7, 3\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((1 * 6) * (1 + 3))"}, {"input": "1 1 3 6\n", "output": "(1) - (1) = 0, left: 0, 3, 6\n(3) / (6) = 1/2, left: 1/2, 0\n(1) - (1) = 0, left: 0, 3, 6\n(3) - (6) = -3, left: -3, 0\n(0) - (6) = -6, left: -6, 3\n(1) + (1) = 2, left: 2, 3, 6\n(6) - (2) = 4, left: 4, 3\n(3) / (4) = 3/4, left: 3/4\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (1 + 1)))"}, {"input": "1 1 3 6\n", "output": "(1) / (6) = 1/6, left: 1/6, 1, 3\n(1) / (1/6) = 6, left: 6, 3\n(3) * (6) = 18, left: 18\n(1) * (3) = 3, left: 3, 1/6\n(1) / (3) = 1/3, left: 1/3, 1/6\n(3) - (1) = 2, left: 2, 1/6\n(1/6) / (2) = 1/12, left: 1/12\n(1) - (3) = -2, left: -2, 1/6\n(1) + (3) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((1 + 3) / (1 / 6))"}, {"input": "1 1 3 6\n", "output": "(1) * (3) = 3, left: 3, 1, 6\n(1) - (3) = -2, left: -2, 6\n(6) - (-2) = 8, left: 8\n(3) / (1) = 3, left: 3, 6\n(3) / (6) = 1/2, left: 1/2\n(1) * (3) = 3, left: 3, 6\n(3) / (6) = 1/2, left: 1/2\n(3) - (6) = -3, left: -3\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (1 * 3)))"}, {"input": "1 1 3 6\n", "output": "(1) * (3) = 3, left: 3, 1, 6\n(1) - (3) = -2, left: -2, 6\n(6) + (-2) = 4, left: 4\n(-2) - (6) = -8, left: -8\n(6) / (-2) = -3, left: -3\n(3) / (1) = 3, left: 3, 6\n(6) / (3) = 2, left: 2\n(6) + (3) = 9, left: 9\n(6) - (3) = 3, left: 3\n(1) * (3) = 3, left: 3, 6\n(6) + (3) = 9, left: 9\n(6) - (3) = 3, left: 3\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (1 * 3)))"}, {"input": "1 1 3 6\n", "output": "(1) - (1) = 0, left: 0, 3, 6\n(3) - (6) = -3, left: -3, 0\n(6) * (0) = 0, left: 0, 3\n(0) / (3) = 0, left: 0\n(1) - (1) = 0, left: 0, 3, 6\n(3) / (6) = 1/2, left: 1/2, 0\n(3) + (6) = 9, left: 9, 0\n(0) / (9) = 0, left: 0\n(6) / (3) = 2, left: 2, 0\n(0) - (6) = -6, left: -6, 3\n(6) - (0) = 6, left: 6, 3\n(1) + (1) = 2, left: 2, 3, 6\n(6) + (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (6 + (1 + 1)))"}, {"input": "7 4 10 5\n", "output": "(5) - (10) = -5, left: -5, 7, 4\n(5) / (10) = 1/2, left: 1/2, 7, 4\n(4) + (10) = 14, left: 14, 7, 5\n(4) + (5) = 9, left: 9, 7, 10\n(5) - (4) = 1, left: 1, 7, 10\n(7) - (1) = 6, left: 6, 10\n(5) / (4) = 5/4, left: 5/4, 7, 10\n(7) - (5) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(5) - (4) = 1, left: 1, 7, 10\n(4) + (5) = 9, left: 9, 7, 10\n(4) * (5) = 20, left: 20, 7, 10\n(7) - (20) = -13, left: -13, 10\n(7) / (4) = 7/4, left: 7/4, 10, 5\n(4) + (10) = 14, left: 14, 7, 5\n(7) - (14) = -7, left: -7, 5\n(5) - (7) = -2, left: -2, 4, 10\n(10) * (-2) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (10 * (5 - 7)))"}, {"input": "7 4 10 5\n", "output": "(4) + (5) = 9, left: 9, 7, 10\n(4) - (5) = -1, left: -1, 7, 10\n(7) + (-1) = 6, left: 6, 10\n(4) * (10) = 40, left: 40, 7, 5\n(7) / (4) = 7/4, left: 7/4, 10, 5\n(4) - (7) = -3, left: -3, 10, 5\n(10) + (5) = 15, left: 15, 7, 4\n(7) - (5) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(10) - (7) = 3, left: 3, 4, 5\n(5) / (4) = 5/4, left: 5/4, 3\n(10) / (7) = 10/7, left: 10/7, 4, 5\n(5) / (10/7) = 7/2, left: 7/2, 4\n(7) / (10) = 7/10, left: 7/10, 4, 5\n(4) - (7) = -3, left: -3, 10, 5\n(5) / (7) = 5/7, left: 5/7, 4, 10\n(7) - (5) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(4) / (7) = 4/7, left: 4/7, 10, 5\n(10) / (4/7) = 35/2, left: 35/2, 5\n(7) / (4) = 7/4, left: 7/4, 10, 5\n(10) + (7/4) = 47/4, left: 47/4, 5\n(5) / (47/4) = 20/47, left: 20/47\n(5) - (10) = -5, left: -5, 7, 4\n(10) - (5) = 5, left: 5, 7, 4\n(7) - (5) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(10) * (5) = 50, left: 50, 7, 4\n(10) + (5) = 15, left: 15, 7, 4\n(7) * (15) = 105, left: 105, 4\n(4) / (105) = 4/105, left: 4/105\n(5) / (10) = 1/2, left: 1/2, 7, 4\n(7) / (1/2) = 14, left: 14, 4\n(5) - (4) = 1, left: 1, 7, 10\n(4) / (7) = 4/7, left: 4/7, 10, 5\n(7) * (4) = 28, left: 28, 10, 5\n(5) * (28) = 140, left: 140, 10\n(7) + (4) = 11, left: 11, 10, 5\n(7) - (5) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(4) / (7) = 4/7, left: 4/7, 10, 5\n(4/7) - (10) = -66/7, left: -66/7, 5\n(7) * (4) = 28, left: 28, 10, 5\n(10) / (5) = 2, left: 2, 7, 4\n(10) - (5) = 5, left: 5, 7, 4\n(4) - (7) = -3, left: -3, 5\n(4) * (5) = 20, left: 20, 7, 10\n(5) / (4) = 5/4, left: 5/4, 7, 10\n(7) + (5) = 12, left: 12, 4, 10\n(10) - (4) = 6, left: 6, 12\n(10) / (4) = 5/2, left: 5/2, 12\n(7) - (5) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(10) + (5) = 15, left: 15, 7, 4\n(7) / (15) = 7/15, left: 7/15, 4\n(5) - (4) = 1, left: 1, 7, 10\n(4) - (5) = -1, left: -1, 7, 10\n(10) - (7) = 3, left: 3, -1\n(4) / (7) = 4/7, left: 4/7, 10, 5\n(4/7) - (5) = -31/7, left: -31/7, 10\n(7) * (4) = 28, left: 28, 10, 5\n(4) - (10) = -6, left: -6, 7, 5\n(4) / (10) = 2/5, left: 2/5, 7, 5\n(5) + (2/5) = 27/5, left: 27/5, 7\n(5) - (7) = -2, left: -2, 4, 10\n(10) * (-2) = -20, left: -20, 4\n(4) - (-20) = 24, left: 24\nreach 24! expression: (4 - (10 * (5 - 7)))"}, {"input": "7 4 10 5\n", "output": "(10) / (5) = 2, left: 2, 7, 4\n(7) + (4) = 11, left: 11, 2\n(5) - (10) = -5, left: -5, 7, 4\n(7) / (4) = 7/4, left: 7/4, -5\n(10) - (4) = 6, left: 6, 7, 5\n(4) - (10) = -6, left: -6, 7, 5\n(4) + (10) = 14, left: 14, 7, 5\n(4) * (10) = 40, left: 40, 7, 5\n(4) * (5) = 20, left: 20, 7, 10\n(7) / (5) = 7/5, left: 7/5, 4, 10\n(4) / (10) = 2/5, left: 2/5, 7/5\n(7) - (5) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(4) - (10) = -6, left: -6, 7, 5\n(4) / (7) = 4/7, left: 4/7, 10, 5\n(7) * (4) = 28, left: 28, 10, 5\n(10) - (28) = -18, left: -18, 5\n(7) / (4) = 7/4, left: 7/4, 10, 5\n(7) + (4) = 11, left: 11, 10, 5\n(10) * (5) = 50, left: 50, 7, 4\n(4) - (7) = -3, left: -3, 50\n(4) * (50) = 200, left: 200, 7\n(10) + (5) = 15, left: 15, 7, 4\n(7) / (15) = 7/15, left: 7/15, 4\n(7) - (5) = 2, left: 2, 4, 10\n(10) * (2) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "2 13 10 10\n", "output": "(13) - (2) = 11, left: 11, 10, 10\n(11) - (10) = 1, left: 1, 10\n(2) / (13) = 2/13, left: 2/13, 10, 10\n(10) - (13) = -3, left: -3, 2, 10\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((10 - 13) * (2 - 10))"}, {"input": "2 13 10 10\n", "output": "(10) / (13) = 10/13, left: 10/13, 2, 10\n(2) - (10) = -8, left: -8, 10/13\n(13) + (10) = 23, left: 23, 2, 10\n(10) - (13) = -3, left: -3, 2, 10\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((10 - 13) * (2 - 10))"}, {"input": "2 13 10 10\n", "output": "(10) / (13) = 10/13, left: 10/13, 2, 10\n(10/13) - (10) = -120/13, left: -120/13, 2\n(13) - (10) = 3, left: 3, 2, 10\n(3) / (2) = 3/2, left: 3/2, 10\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((13 - 10) * (10 - 2))"}, {"input": "2 13 10 10\n", "output": "(10) + (10) = 20, left: 20, 2, 13\n(10) * (10) = 100, left: 100, 2, 13\n(10) / (10) = 1, left: 1, 2, 13\n(2) * (1) = 2, left: 2, 13\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (10 / 10)))"}, {"input": "2 13 10 10\n", "output": "(13) / (10) = 13/10, left: 13/10, 2, 10\n(2) - (10) = -8, left: -8, 13/10\n(10) - (2) = 8, left: 8, 13/10\n(10) - (13) = -3, left: -3, 2, 10\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((10 - 13) * (2 - 10))"}, {"input": "2 13 10 10\n", "output": "(13) / (10) = 13/10, left: 13/10, 2, 10\n(2) / (13/10) = 20/13, left: 20/13, 10\n(20/13) - (10) = -110/13, left: -110/13\n(2) - (10) = -8, left: -8, 13/10\n(10) / (2) = 5, left: 5, 13/10\n(13/10) / (10) = 13/100, left: 13/100, 2\n(2) + (13/100) = 213/100, left: 213/100\n(10) - (13) = -3, left: -3, 2, 10\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((10 - 13) * (2 - 10))"}, {"input": "2 13 10 10\n", "output": "(2) - (13) = -11, left: -11, 10, 10\n(10) / (-11) = -10/11, left: -10/11, 10\n(13) / (2) = 13/2, left: 13/2, 10, 10\n(2) + (13) = 15, left: 15, 10, 10\n(2) * (13) = 26, left: 26, 10, 10\n(10) * (26) = 260, left: 260, 10\n(10) - (26) = -16, left: -16, 10\n(10) - (13) = -3, left: -3, 2, 10\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((10 - 13) * (2 - 10))"}, {"input": "2 13 10 10\n", "output": "(10) / (13) = 10/13, left: 10/13, 2, 10\n(2) - (10/13) = 16/13, left: 16/13, 10\n(10/13) / (10) = 1/13, left: 1/13, 2\n(2) * (1/13) = 2/13, left: 2/13\n(2) / (10) = 1/5, left: 1/5, 10/13\n(13) - (10) = 3, left: 3, 2, 10\n(2) + (3) = 5, left: 5, 10\n(2) - (10) = -8, left: -8, 3\n(10) - (2) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((13 - 10) * (10 - 2))"}, {"input": "2 13 10 10\n", "output": "(10) / (13) = 10/13, left: 10/13, 2, 10\n(2) - (10/13) = 16/13, left: 16/13, 10\n(10) * (10/13) = 100/13, left: 100/13, 2\n(2) + (10) = 12, left: 12, 10/13\n(2) / (10) = 1/5, left: 1/5, 10/13\n(13) + (10) = 23, left: 23, 2, 10\n(2) / (23) = 2/23, left: 2/23, 10\n(10) - (13) = -3, left: -3, 2, 10\n(2) - (10) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((10 - 13) * (2 - 10))"}, {"input": "2 13 10 10\n", "output": "(10) - (10) = 0, left: 0, 2, 13\n(13) - (0) = 13, left: 13, 2\n(2) + (13) = 15, left: 15\n(10) + (10) = 20, left: 20, 2, 13\n(13) - (20) = -7, left: -7, 2\n(10) * (10) = 100, left: 100, 2, 13\n(10) / (10) = 1, left: 1, 2, 13\n(2) / (13) = 2/13, left: 2/13, 1\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (10 / 10)))"}, {"input": "6 8 11 7\n", "output": "(8) / (6) = 4/3, left: 4/3, 11, 7\n(4/3) / (7) = 4/21, left: 4/21, 11\n(11) * (4/21) = 44/21, left: 44/21\n(11) + (4/3) = 37/3, left: 37/3, 7\n(11) + (7) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((8 / 6) * (11 + 7))"}, {"input": "6 8 11 7\n", "output": "(8) / (6) = 4/3, left: 4/3, 11, 7\n(11) - (7) = 4, left: 4, 4/3\n(4/3) - (4) = -8/3, left: -8/3\n(4) - (4/3) = 8/3, left: 8/3\n(11) + (7) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((8 / 6) * (11 + 7))"}, {"input": "6 8 11 7\n", "output": "(8) / (6) = 4/3, left: 4/3, 11, 7\n(7) + (4/3) = 25/3, left: 25/3, 11\n(11) + (25/3) = 58/3, left: 58/3\n(7) - (4/3) = 17/3, left: 17/3, 11\n(11) / (17/3) = 33/17, left: 33/17\n(4/3) - (11) = -29/3, left: -29/3, 7\n(7) - (11) = -4, left: -4, 4/3\n(4/3) + (-4) = -8/3, left: -8/3\n(11) + (7) = 18, left: 18, 4/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((8 / 6) * (11 + 7))"}, {"input": "6 8 11 7\n", "output": "(11) * (7) = 77, left: 77, 6, 8\n(6) - (77) = -71, left: -71, 8\n(8) / (6) = 4/3, left: 4/3, 77\n(77) - (8) = 69, left: 69, 6\n(11) - (7) = 4, left: 4, 6, 8\n(6) + (4) = 10, left: 10, 8\n(6) * (8) = 48, left: 48, 4\n(6) / (8) = 3/4, left: 3/4, 4\n(8) - (4) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (8 - (11 - 7)))"}, {"input": "6 8 11 7\n", "output": "(8) * (11) = 88, left: 88, 6, 7\n(88) - (7) = 81, left: 81, 6\n(8) + (11) = 19, left: 19, 6, 7\n(6) * (7) = 42, left: 42, 19\n(42) / (19) = 42/19, left: 42/19\n(7) / (6) = 7/6, left: 7/6, 19\n(8) - (11) = -3, left: -3, 6, 7\n(7) * (-3) = -21, left: -21, 6\n(7) + (-3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (7 + (8 - 11)))"}, {"input": "6 8 11 7\n", "output": "(6) - (8) = -2, left: -2, 11, 7\n(-2) - (11) = -13, left: -13, 7\n(11) - (7) = 4, left: 4, -2\n(11) * (7) = 77, left: 77, -2\n(11) / (7) = 11/7, left: 11/7, -2\n(7) + (-2) = 5, left: 5, 11\n(6) / (8) = 3/4, left: 3/4, 11, 7\n(3/4) - (7) = -25/4, left: -25/4, 11\n(11) + (7) = 18, left: 18, 3/4\n(18) / (3/4) = 24, left: 24\nreach 24! expression: ((11 + 7) / (6 / 8))"}, {"input": "6 8 11 7\n", "output": "(8) / (6) = 4/3, left: 4/3, 11, 7\n(11) - (7) = 4, left: 4, 4/3\n(4/3) / (4) = 1/3, left: 1/3\n(4) / (4/3) = 3, left: 3\n(4/3) + (4) = 16/3, left: 16/3\n(4) - (4/3) = 8/3, left: 8/3\n(11) + (7) = 18, left: 18, 4/3\n(4/3) / (18) = 2/27, left: 2/27\n(18) - (4/3) = 50/3, left: 50/3\n(4/3) * (18) = 24, left: 24\nreach 24! expression: ((8 / 6) * (11 + 7))"}, {"input": "8 11 11 4\n", "output": "(11) * (11) = 121, left: 121, 8, 4\n(4) + (121) = 125, left: 125, 8\n(8) * (125) = 1000, left: 1000\n(11) + (11) = 22, left: 22, 8, 4\n(8) / (4) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 + 11) + (8 / 4))"}, {"input": "8 11 11 4\n", "output": "(11) + (11) = 22, left: 22, 8, 4\n(8) - (4) = 4, left: 4, 22\n(22) + (4) = 26, left: 26\n(8) + (4) = 12, left: 12, 22\n(8) / (4) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 + 11) + (8 / 4))"}, {"input": "8 11 11 4\n", "output": "(11) + (4) = 15, left: 15, 8, 11\n(4) / (11) = 4/11, left: 4/11, 8, 11\n(4/11) - (11) = -117/11, left: -117/11, 8\n(4) - (11) = -7, left: -7, 8, 11\n(11) - (-7) = 18, left: 18, 8\n(4) - (8) = -4, left: -4, 11, 11\n(8) * (4) = 32, left: 32, 11, 11\n(8) / (4) = 2, left: 2, 11, 11\n(11) + (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (11 + (8 / 4)))"}, {"input": "8 11 11 4\n", "output": "(11) + (11) = 22, left: 22, 8, 4\n(8) - (4) = 4, left: 4, 22\n(22) / (4) = 11/2, left: 11/2\n(4) - (22) = -18, left: -18\n(22) + (4) = 26, left: 26\n(8) + (4) = 12, left: 12, 22\n(22) + (12) = 34, left: 34\n(8) / (4) = 2, left: 2, 22\n(22) * (2) = 44, left: 44\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 + 11) + (8 / 4))"}, {"input": "8 11 11 4\n", "output": "(8) - (11) = -3, left: -3, 11, 4\n(11) / (8) = 11/8, left: 11/8, 11, 4\n(8) / (11) = 8/11, left: 8/11, 11, 4\n(8/11) / (11) = 8/121, left: 8/121, 4\n(11) - (8) = 3, left: 3, 11, 4\n(11) - (4) = 7, left: 7, 3\n(8) * (4) = 32, left: 32, 11, 11\n(8) / (4) = 2, left: 2, 11, 11\n(11) + (11) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: ((8 / 4) + (11 + 11))"}, {"input": "8 11 11 4\n", "output": "(4) - (11) = -7, left: -7, 8, 11\n(11) + (4) = 15, left: 15, 8, 11\n(15) - (8) = 7, left: 7, 11\n(4) - (11) = -7, left: -7, 8, 11\n(8) + (-7) = 1, left: 1, 11\n(11) - (4) = 7, left: 7, 8, 11\n(4) / (8) = 1/2, left: 1/2, 11, 11\n(8) / (4) = 2, left: 2, 11, 11\n(11) + (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (11 + (8 / 4)))"}, {"input": "8 11 11 4\n", "output": "(11) - (11) = 0, left: 0, 8, 4\n(4) - (8) = -4, left: -4, 0\n(8) - (4) = 4, left: 4, 0\n(11) * (11) = 121, left: 121, 8, 4\n(8) + (4) = 12, left: 12, 121\n(4) / (121) = 4/121, left: 4/121, 8\n(11) + (11) = 22, left: 22, 8, 4\n(8) + (4) = 12, left: 12, 22\n(8) / (4) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 + 11) + (8 / 4))"}, {"input": "12 9 1 12\n", "output": "(12) / (9) = 4/3, left: 4/3, 12, 1\n(1) - (4/3) = -1/3, left: -1/3, 12\n(12) + (4/3) = 40/3, left: 40/3, 1\n(12) - (9) = 3, left: 3, 12, 1\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((12 - 9) - 1))"}, {"input": "12 9 1 12\n", "output": "(12) - (9) = 3, left: 3, 1, 12\n(1) / (3) = 1/3, left: 1/3, 12\n(3) / (1) = 3, left: 3, 12\n(12) - (3) = 9, left: 9\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((12 - 9) - 1))"}, {"input": "12 9 1 12\n", "output": "(12) / (12) = 1, left: 1, 9, 1\n(1) / (12) = 1/12, left: 1/12, 9, 12\n(9) - (1/12) = 107/12, left: 107/12, 12\n(12) - (1) = 11, left: 11, 9, 12\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((12 - 1) - 9))"}, {"input": "12 9 1 12\n", "output": "(12) / (12) = 1, left: 1, 9, 1\n(1) - (1) = 0, left: 0, 9\n(12) + (12) = 24, left: 24, 9, 1\n(1) - (12) = -11, left: -11, 9, 12\n(12) + (-11) = 1, left: 1, 9\n(12) / (1) = 12, left: 12, 9, 12\n(9) - (12) = -3, left: -3, 12\n(12) - (1) = 11, left: 11, 9, 12\n(11) - (9) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((12 - 1) - 9))"}, {"input": "12 9 1 12\n", "output": "(9) * (12) = 108, left: 108, 12, 1\n(9) / (12) = 3/4, left: 3/4, 12, 1\n(12) / (9) = 4/3, left: 4/3, 12, 1\n(4/3) / (1) = 4/3, left: 4/3, 12\n(12) - (4/3) = 32/3, left: 32/3, 1\n(1) / (12) = 1/12, left: 1/12, 4/3\n(12) - (9) = 3, left: 3, 12, 1\n(12) / (1) = 12, left: 12, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((12 - 9) - 1))"}, {"input": "12 9 1 12\n", "output": "(12) - (9) = 3, left: 3, 1, 12\n(1) / (3) = 1/3, left: 1/3, 12\n(3) / (1) = 3, left: 3, 12\n(3) - (12) = -9, left: -9\n(1) - (3) = -2, left: -2, 12\n(12) / (-2) = -6, left: -6\n(12) - (-2) = 14, left: 14\n(3) - (1) = 2, left: 2, 12\n(12) - (2) = 10, left: 10\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((12 - 9) - 1))"}, {"input": "12 9 1 12\n", "output": "(9) - (1) = 8, left: 8, 12, 12\n(8) - (12) = -4, left: -4, 12\n(1) - (9) = -8, left: -8, 12, 12\n(9) * (1) = 9, left: 9, 12, 12\n(1) / (9) = 1/9, left: 1/9, 12, 12\n(1/9) - (12) = -107/9, left: -107/9, 12\n(-107/9) / (12) = -107/108, left: -107/108\n(9) + (1) = 10, left: 10, 12, 12\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (12 - (9 + 1)))"}, {"input": "4 12 2 6\n", "output": "(12) - (4) = 8, left: 8, 2, 6\n(6) + (8) = 14, left: 14, 2\n(14) / (2) = 7, left: 7\n(8) - (6) = 2, left: 2, 2\n(2) / (2) = 1, left: 1\n(2) / (2) = 1, left: 1\n(6) * (8) = 48, left: 48, 2\n(2) + (48) = 50, left: 50\n(2) / (48) = 1/24, left: 1/24\n(48) / (2) = 24, left: 24\nreach 24! expression: ((6 * (12 - 4)) / 2)"}, {"input": "4 12 2 6\n", "output": "(2) - (12) = -10, left: -10, 4, 6\n(-10) - (4) = -14, left: -14, 6\n(6) + (-14) = -8, left: -8\n(6) / (4) = 3/2, left: 3/2, -10\n(4) / (6) = 2/3, left: 2/3, -10\n(-10) - (6) = -16, left: -16, 4\n(4) + (-16) = -12, left: -12\n(12) + (2) = 14, left: 14, 4, 6\n(6) + (14) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (6 + (12 + 2)))"}, {"input": "4 12 2 6\n", "output": "(12) / (2) = 6, left: 6, 4, 6\n(4) - (6) = -2, left: -2, 6\n(12) * (2) = 24, left: 24, 4, 6\n(6) - (4) = 2, left: 2, 24\n(2) - (12) = -10, left: -10, 4, 6\n(2) / (12) = 1/6, left: 1/6, 4, 6\n(4) + (6) = 10, left: 10, 1/6\n(12) + (2) = 14, left: 14, 4, 6\n(6) + (14) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (6 + (12 + 2)))"}, {"input": "4 12 2 6\n", "output": "(12) - (2) = 10, left: 10, 4, 6\n(4) / (6) = 2/3, left: 2/3, 10\n(2) - (12) = -10, left: -10, 4, 6\n(4) + (6) = 10, left: 10, -10\n(2) / (12) = 1/6, left: 1/6, 4, 6\n(12) * (2) = 24, left: 24, 4, 6\n(24) - (6) = 18, left: 18, 4\n(12) + (2) = 14, left: 14, 4, 6\n(4) + (6) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((12 + 2) + (4 + 6))"}, {"input": "6 8 10 7\n", "output": "(7) / (10) = 7/10, left: 7/10, 6, 8\n(8) + (7/10) = 87/10, left: 87/10, 6\n(8) - (7/10) = 73/10, left: 73/10, 6\n(10) - (7) = 3, left: 3, 6, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (10 - 7)))"}, {"input": "6 8 10 7\n", "output": "(8) * (7) = 56, left: 56, 6, 10\n(8) - (7) = 1, left: 1, 6, 10\n(6) + (10) = 16, left: 16, 1\n(8) + (7) = 15, left: 15, 6, 10\n(7) / (8) = 7/8, left: 7/8, 6, 10\n(10) / (7/8) = 80/7, left: 80/7, 6\n(7) - (10) = -3, left: -3, 6, 8\n(6) * (8) = 48, left: 48, -3\n(6) + (-3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 + (7 - 10)))"}, {"input": "6 8 10 7\n", "output": "(10) - (8) = 2, left: 2, 6, 7\n(2) / (6) = 1/3, left: 1/3, 7\n(6) - (2) = 4, left: 4, 7\n(7) / (4) = 7/4, left: 7/4\n(10) / (8) = 5/4, left: 5/4, 6, 7\n(8) / (10) = 4/5, left: 4/5, 6, 7\n(7) / (6) = 7/6, left: 7/6, 4/5\n(8) + (10) = 18, left: 18, 6, 7\n(6) * (7) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((6 * 7) - (8 + 10))"}, {"input": "6 8 10 7\n", "output": "(7) / (10) = 7/10, left: 7/10, 6, 8\n(6) + (8) = 14, left: 14, 7/10\n(7/10) - (8) = -73/10, left: -73/10, 6\n(6) + (-73/10) = -13/10, left: -13/10\n(8) + (7/10) = 87/10, left: 87/10, 6\n(6) + (87/10) = 147/10, left: 147/10\n(6) + (7/10) = 67/10, left: 67/10, 8\n(10) - (7) = 3, left: 3, 6, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (10 - 7)))"}, {"input": "6 8 10 7\n", "output": "(8) + (7) = 15, left: 15, 6, 10\n(10) / (6) = 5/3, left: 5/3, 15\n(8) - (7) = 1, left: 1, 6, 10\n(10) / (7) = 10/7, left: 10/7, 6, 8\n(8) - (6) = 2, left: 2, 10/7\n(10/7) * (2) = 20/7, left: 20/7\n(10/7) / (6) = 5/21, left: 5/21, 8\n(10) - (7) = 3, left: 3, 6, 8\n(6) - (3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 - (10 - 7)))"}, {"input": "6 8 10 7\n", "output": "(7) / (6) = 7/6, left: 7/6, 8, 10\n(10) / (8) = 5/4, left: 5/4, 7/6\n(10) / (7/6) = 60/7, left: 60/7, 8\n(8) - (60/7) = -4/7, left: -4/7\n(7/6) / (10) = 7/60, left: 7/60, 8\n(8) / (7/6) = 48/7, left: 48/7, 10\n(6) + (7) = 13, left: 13, 8, 10\n(10) / (13) = 10/13, left: 10/13, 8\n(13) - (10) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((6 + 7) - 10))"}, {"input": "12 10 6 11\n", "output": "(12) - (11) = 1, left: 1, 10, 6\n(11) - (12) = -1, left: -1, 10, 6\n(10) - (-1) = 11, left: 11, 6\n(12) * (10) = 120, left: 120, 6, 11\n(11) - (6) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "12 10 6 11\n", "output": "(10) + (11) = 21, left: 21, 12, 6\n(10) - (11) = -1, left: -1, 12, 6\n(-1) / (12) = -1/12, left: -1/12, 6\n(12) * (10) = 120, left: 120, 6, 11\n(11) - (6) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "12 10 6 11\n", "output": "(12) * (11) = 132, left: 132, 10, 6\n(6) / (132) = 1/22, left: 1/22, 10\n(11) / (12) = 11/12, left: 11/12, 10, 6\n(11) - (6) = 5, left: 5, 12, 10\n(12) * (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "12 10 6 11\n", "output": "(12) * (11) = 132, left: 132, 10, 6\n(6) - (10) = -4, left: -4, 12, 11\n(-4) / (12) = -1/3, left: -1/3, 11\n(12) * (10) = 120, left: 120, 6, 11\n(11) - (6) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "12 10 6 11\n", "output": "(10) - (12) = -2, left: -2, 6, 11\n(10) / (12) = 5/6, left: 5/6, 6, 11\n(6) - (11) = -5, left: -5, 5/6\n(12) * (10) = 120, left: 120, 6, 11\n(11) - (6) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "12 10 6 11\n", "output": "(11) / (12) = 11/12, left: 11/12, 10, 6\n(11) - (12) = -1, left: -1, 10, 6\n(6) * (-1) = -6, left: -6, 10\n(12) / (11) = 12/11, left: 12/11, 10, 6\n(6) / (10) = 3/5, left: 3/5, 12/11\n(10) * (6) = 60, left: 60, 12, 11\n(6) - (10) = -4, left: -4, 12, 11\n(12) * (10) = 120, left: 120, 6, 11\n(11) - (6) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "12 10 6 11\n", "output": "(12) + (11) = 23, left: 23, 10, 6\n(6) * (23) = 138, left: 138, 10\n(11) - (12) = -1, left: -1, 10, 6\n(12) * (11) = 132, left: 132, 10, 6\n(132) - (10) = 122, left: 122, 6\n(122) / (6) = 61/3, left: 61/3\n(10) / (12) = 5/6, left: 5/6, 6, 11\n(12) * (10) = 120, left: 120, 6, 11\n(11) - (6) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "12 10 6 11\n", "output": "(10) - (12) = -2, left: -2, 6, 11\n(11) / (-2) = -11/2, left: -11/2, 6\n(11) - (-2) = 13, left: 13, 6\n(10) / (12) = 5/6, left: 5/6, 6, 11\n(6) / (5/6) = 36/5, left: 36/5, 11\n(6) / (11) = 6/11, left: 6/11, 5/6\n(11) / (5/6) = 66/5, left: 66/5, 6\n(12) * (10) = 120, left: 120, 6, 11\n(11) - (6) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "12 10 6 11\n", "output": "(12) * (11) = 132, left: 132, 10, 6\n(10) * (132) = 1320, left: 1320, 6\n(11) / (12) = 11/12, left: 11/12, 10, 6\n(12) - (11) = 1, left: 1, 10, 6\n(6) - (10) = -4, left: -4, 12, 11\n(12) + (11) = 23, left: 23, -4\n(10) + (6) = 16, left: 16, 12, 11\n(11) - (6) = 5, left: 5, 12, 10\n(12) * (10) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "12 10 6 11\n", "output": "(10) * (11) = 110, left: 110, 12, 6\n(110) - (6) = 104, left: 104, 12\n(12) / (104) = 3/26, left: 3/26\n(6) / (10) = 3/5, left: 3/5, 12, 11\n(6) - (12) = -6, left: -6, 10, 11\n(12) + (11) = 23, left: 23, 10, 6\n(6) - (23) = -17, left: -17, 10\n(12) * (10) = 120, left: 120, 6, 11\n(11) - (6) = 5, left: 5, 120\n(120) / (5) = 24, left: 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "4 3 12 4\n", "output": "(4) / (12) = 1/3, left: 1/3, 4, 3\n(4) * (3) = 12, left: 12, 1/3\n(1/3) / (3) = 1/9, left: 1/9, 4\n(1/9) / (4) = 1/36, left: 1/36\n(4) / (1/9) = 36, left: 36\n(1/3) / (4) = 1/12, left: 1/12, 3\n(12) / (4) = 3, left: 3, 4, 3\n(3) - (3) = 0, left: 0, 4\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 + (12 / 4)))"}, {"input": "4 3 12 4\n", "output": "(4) * (3) = 12, left: 12, 12, 4\n(12) / (12) = 1, left: 1, 4\n(4) / (3) = 4/3, left: 4/3, 12, 4\n(4) + (4/3) = 16/3, left: 16/3, 12\n(4) / (12) = 1/3, left: 1/3, 4/3\n(3) / (4) = 3/4, left: 3/4, 12, 4\n(4) - (12) = -8, left: -8, 3, 4\n(12) / (4) = 3, left: 3, 3, 4\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 + (12 / 4)))"}, {"input": "4 3 12 4\n", "output": "(4) / (4) = 1, left: 1, 3, 12\n(1) / (12) = 1/12, left: 1/12, 3\n(12) - (1) = 11, left: 11, 3\n(12) * (1) = 12, left: 12, 3\n(12) - (3) = 9, left: 9\n(1) - (3) = -2, left: -2, 12\n(12) - (-2) = 14, left: 14\n(12) / (-2) = -6, left: -6\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (4 / 4)))"}, {"input": "4 3 12 4\n", "output": "(4) - (12) = -8, left: -8, 4, 3\n(-8) - (4) = -12, left: -12, 3\n(3) + (-8) = -5, left: -5, 4\n(4) / (12) = 1/3, left: 1/3, 4, 3\n(3) - (4) = -1, left: -1, 1/3\n(1/3) - (-1) = 4/3, left: 4/3\n(1/3) - (3) = -8/3, left: -8/3, 4\n(12) / (4) = 3, left: 3, 4, 3\n(3) + (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 + (12 / 4)))"}, {"input": "4 3 12 4\n", "output": "(4) / (4) = 1, left: 1, 3, 12\n(3) + (1) = 4, left: 4, 12\n(12) / (4) = 3, left: 3\n(4) / (12) = 1/3, left: 1/3\n(1) - (3) = -2, left: -2, 12\n(12) / (-2) = -6, left: -6\n(1) / (3) = 1/3, left: 1/3, 12\n(3) - (1) = 2, left: 2, 12\n(12) / (2) = 6, left: 6\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (3 - (4 / 4)))"}, {"input": "2 7 7 5\n", "output": "(7) - (7) = 0, left: 0, 2, 5\n(2) + (0) = 2, left: 2, 5\n(7) - (7) = 0, left: 0, 2, 5\n(5) / (2) = 5/2, left: 5/2, 0\n(0) / (2) = 0, left: 0, 5\n(7) / (7) = 1, left: 1, 2, 5\n(2) * (5) = 10, left: 10, 1\n(7) + (7) = 14, left: 14, 2, 5\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(5) - (7) = -2, left: -2, 2, 7\n(7) * (5) = 35, left: 35, 2, 7\n(2) / (7) = 2/7, left: 2/7, 7, 5\n(2) * (7) = 14, left: 14, 7, 5\n(7) / (2) = 7/2, left: 7/2, 7, 5\n(7) * (7) = 49, left: 49, 2, 5\n(49) / (5) = 49/5, left: 49/5, 2\n(7) + (7) = 14, left: 14, 2, 5\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(7) + (5) = 12, left: 12, 2, 7\n(7) / (2) = 7/2, left: 7/2, 12\n(7) / (5) = 7/5, left: 7/5, 2, 7\n(7) - (5) = 2, left: 2, 2, 7\n(2) + (7) = 9, left: 9, 2\n(7) - (7) = 0, left: 0, 2, 5\n(7) + (7) = 14, left: 14, 2, 5\n(2) * (14) = 28, left: 28, 5\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(7) / (5) = 7/5, left: 7/5, 2, 7\n(7) + (5) = 12, left: 12, 2, 7\n(5) / (7) = 5/7, left: 5/7, 2, 7\n(7) / (7) = 1, left: 1, 2, 5\n(2) / (1) = 2, left: 2, 5\n(7) * (7) = 49, left: 49, 2, 5\n(5) - (2) = 3, left: 3, 49\n(7) + (7) = 14, left: 14, 2, 5\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(2) - (7) = -5, left: -5, 7, 5\n(7) - (-5) = 12, left: 12, 5\n(2) / (7) = 2/7, left: 2/7, 7, 5\n(5) + (2/7) = 37/7, left: 37/7, 7\n(37/7) - (7) = -12/7, left: -12/7\n(7) - (7) = 0, left: 0, 2, 5\n(7) / (7) = 1, left: 1, 2, 5\n(7) + (7) = 14, left: 14, 2, 5\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(5) / (7) = 5/7, left: 5/7, 2, 7\n(2) / (7) = 2/7, left: 2/7, 5/7\n(7) + (5) = 12, left: 12, 2, 7\n(12) / (2) = 6, left: 6, 7\n(12) - (7) = 5, left: 5, 2\n(12) / (7) = 12/7, left: 12/7, 2\n(7) * (5) = 35, left: 35, 2, 7\n(2) - (7) = -5, left: -5, 35\n(7) / (2) = 7/2, left: 7/2, 35\n(7) / (5) = 7/5, left: 7/5, 2, 7\n(7) - (5) = 2, left: 2, 2, 7\n(7) + (7) = 14, left: 14, 2, 5\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(5) / (7) = 5/7, left: 5/7, 2, 7\n(5/7) / (2) = 5/14, left: 5/14, 7\n(7) / (2) = 7/2, left: 7/2, 7, 5\n(2) - (7) = -5, left: -5, 7, 5\n(2) * (7) = 14, left: 14, 7, 5\n(7) - (5) = 2, left: 2, 2, 7\n(7) / (2) = 7/2, left: 7/2, 2\n(7) - (2) = 5, left: 5, 7, 5\n(7) / (5) = 7/5, left: 7/5, 5\n(7) / (2) = 7/2, left: 7/2, 7, 5\n(7) - (7) = 0, left: 0, 2, 5\n(7) + (7) = 14, left: 14, 2, 5\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(5) - (7) = -2, left: -2, 2, 7\n(7) / (5) = 7/5, left: 7/5, 2, 7\n(7) * (5) = 35, left: 35, 2, 7\n(2) + (35) = 37, left: 37, 7\n(7) / (7) = 1, left: 1, 2, 5\n(2) * (5) = 10, left: 10, 1\n(1) / (10) = 1/10, left: 1/10\n(7) - (7) = 0, left: 0, 2, 5\n(7) * (7) = 49, left: 49, 2, 5\n(5) + (49) = 54, left: 54, 2\n(2) + (49) = 51, left: 51, 5\n(7) + (7) = 14, left: 14, 2, 5\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(7) * (5) = 35, left: 35, 2, 7\n(2) + (7) = 9, left: 9, 7, 5\n(2) - (7) = -5, left: -5, 7, 5\n(7) * (5) = 35, left: 35, -5\n(-5) - (35) = -40, left: -40\n(7) / (5) = 7/5, left: 7/5, 2, 7\n(2) - (7) = -5, left: -5, 7, 5\n(7) / (2) = 7/2, left: 7/2, 7, 5\n(7) + (7/2) = 21/2, left: 21/2, 5\n(5) / (21/2) = 10/21, left: 10/21\n(7) - (7) = 0, left: 0, 2, 5\n(7) + (7) = 14, left: 14, 2, 5\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(7) - (7) = 0, left: 0, 2, 5\n(0) - (2) = -2, left: -2, 5\n(7) - (7) = 0, left: 0, 2, 5\n(5) - (2) = 3, left: 3, 0\n(7) / (7) = 1, left: 1, 2, 5\n(1) - (2) = -1, left: -1, 5\n(7) * (7) = 49, left: 49, 2, 5\n(5) * (49) = 245, left: 245, 2\n(49) / (2) = 49/2, left: 49/2, 5\n(7) + (7) = 14, left: 14, 2, 5\n(2) - (5) = -3, left: -3, 14\n(2) / (5) = 2/5, left: 2/5, 14\n(2) * (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "7 1 9 5\n", "output": "(7) - (9) = -2, left: -2, 1, 5\n(9) / (7) = 9/7, left: 9/7, 1, 5\n(7) / (9) = 7/9, left: 7/9, 1, 5\n(7) * (1) = 7, left: 7, 9, 5\n(7) / (1) = 7, left: 7, 9, 5\n(9) + (5) = 14, left: 14, 7\n(1) / (7) = 1/7, left: 1/7, 9, 5\n(7) - (1) = 6, left: 6, 9, 5\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((7 - 1) * (9 - 5))"}, {"input": "7 1 9 5\n", "output": "(5) / (1) = 5, left: 5, 7, 9\n(1) - (5) = -4, left: -4, 7, 9\n(1) + (5) = 6, left: 6, 7, 9\n(9) / (1) = 9, left: 9, 7, 5\n(1) * (9) = 9, left: 9, 7, 5\n(9) - (5) = 4, left: 4, 7, 1\n(4) - (7) = -3, left: -3, 1\n(1) + (-3) = -2, left: -2\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((9 - 5) * (7 - 1))"}, {"input": "7 1 9 5\n", "output": "(1) / (5) = 1/5, left: 1/5, 7, 9\n(7) + (9) = 16, left: 16, 1/5\n(1/5) * (16) = 16/5, left: 16/5\n(1) * (9) = 9, left: 9, 7, 5\n(7) / (9) = 7/9, left: 7/9, 5\n(9) - (1) = 8, left: 8, 7, 5\n(9) * (5) = 45, left: 45, 7, 1\n(5) - (9) = -4, left: -4, 7, 1\n(1) - (7) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((5 - 9) * (1 - 7))"}, {"input": "7 1 9 5\n", "output": "(1) - (9) = -8, left: -8, 7, 5\n(1) / (9) = 1/9, left: 1/9, 7, 5\n(1) - (5) = -4, left: -4, 7, 9\n(7) / (-4) = -7/4, left: -7/4, 9\n(1) + (5) = 6, left: 6, 7, 9\n(9) * (6) = 54, left: 54, 7\n(1) * (5) = 5, left: 5, 7, 9\n(1) - (7) = -6, left: -6, 9, 5\n(5) - (9) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((1 - 7) * (5 - 9))"}, {"input": "7 1 9 5\n", "output": "(5) / (9) = 5/9, left: 5/9, 7, 1\n(7) - (1) = 6, left: 6, 5/9\n(7) * (1) = 7, left: 7, 5/9\n(9) / (5) = 9/5, left: 9/5, 7, 1\n(7) + (9/5) = 44/5, left: 44/5, 1\n(1) + (9/5) = 14/5, left: 14/5, 7\n(5) - (9) = -4, left: -4, 7, 1\n(-4) / (1) = -4, left: -4, 7\n(1) - (7) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((5 - 9) * (1 - 7))"}, {"input": "7 1 9 5\n", "output": "(1) * (5) = 5, left: 5, 7, 9\n(7) + (9) = 16, left: 16, 5\n(1) - (5) = -4, left: -4, 7, 9\n(9) / (-4) = -9/4, left: -9/4, 7\n(9) - (-4) = 13, left: 13, 7\n(1) - (9) = -8, left: -8, 7, 5\n(1) + (9) = 10, left: 10, 7, 5\n(1) / (9) = 1/9, left: 1/9, 7, 5\n(9) * (5) = 45, left: 45, 7, 1\n(7) * (1) = 7, left: 7, 45\n(7) / (45) = 7/45, left: 7/45\n(5) - (9) = -4, left: -4, 7, 1\n(1) - (7) = -6, left: -6, -4\n(-4) * (-6) = 24, left: 24\nreach 24! expression: ((5 - 9) * (1 - 7))"}, {"input": "7 1 9 5\n", "output": "(5) - (1) = 4, left: 4, 7, 9\n(7) - (9) = -2, left: -2, 4\n(4) + (-2) = 2, left: 2\n(1) * (5) = 5, left: 5, 7, 9\n(9) - (7) = 2, left: 2, 5\n(1) + (5) = 6, left: 6, 7, 9\n(6) - (7) = -1, left: -1, 9\n(9) / (1) = 9, left: 9, 7, 5\n(1) + (9) = 10, left: 10, 7, 5\n(1) * (9) = 9, left: 9, 7, 5\n(9) + (5) = 14, left: 14, 7, 1\n(9) - (5) = 4, left: 4, 7, 1\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((9 - 5) * (7 - 1))"}, {"input": "7 1 9 5\n", "output": "(1) - (9) = -8, left: -8, 7, 5\n(9) / (1) = 9, left: 9, 7, 5\n(1) + (9) = 10, left: 10, 7, 5\n(10) - (5) = 5, left: 5, 7\n(1) - (5) = -4, left: -4, 7, 9\n(1) + (5) = 6, left: 6, 7, 9\n(9) - (6) = 3, left: 3, 7\n(1) / (5) = 1/5, left: 1/5, 7, 9\n(1/5) / (7) = 1/35, left: 1/35, 9\n(5) - (1) = 4, left: 4, 7, 9\n(7) * (1) = 7, left: 7, 9, 5\n(1) - (7) = -6, left: -6, 9, 5\n(5) - (9) = -4, left: -4, -6\n(-6) * (-4) = 24, left: 24\nreach 24! expression: ((1 - 7) * (5 - 9))"}, {"input": "7 1 9 5\n", "output": "(7) + (9) = 16, left: 16, 1, 5\n(5) * (16) = 80, left: 80, 1\n(7) * (9) = 63, left: 63, 1, 5\n(1) / (5) = 1/5, left: 1/5, 63\n(9) - (7) = 2, left: 2, 1, 5\n(5) / (2) = 5/2, left: 5/2, 1\n(5/2) - (1) = 3/2, left: 3/2\n(7) / (1) = 7, left: 7, 9, 5\n(9) / (7) = 9/7, left: 9/7, 5\n(1) / (7) = 1/7, left: 1/7, 9, 5\n(1/7) - (5) = -34/7, left: -34/7, 9\n(7) - (1) = 6, left: 6, 9, 5\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((7 - 1) * (9 - 5))"}, {"input": "5 9 8 2\n", "output": "(9) * (8) = 72, left: 72, 5, 2\n(2) / (5) = 2/5, left: 2/5, 72\n(72) / (2/5) = 180, left: 180\n(5) + (2) = 7, left: 7, 72\n(5) - (2) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (5 - 2))"}, {"input": "5 9 8 2\n", "output": "(9) / (8) = 9/8, left: 9/8, 5, 2\n(2) + (9/8) = 25/8, left: 25/8, 5\n(8) / (9) = 8/9, left: 8/9, 5, 2\n(8/9) - (2) = -10/9, left: -10/9, 5\n(2) / (8/9) = 9/4, left: 9/4, 5\n(8/9) / (2) = 4/9, left: 4/9, 5\n(5) + (8/9) = 53/9, left: 53/9, 2\n(9) + (8) = 17, left: 17, 5, 2\n(17) - (5) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((9 + 8) - 5))"}, {"input": "5 9 8 2\n", "output": "(8) - (5) = 3, left: 3, 9, 2\n(9) * (2) = 18, left: 18, 3\n(9) - (2) = 7, left: 7, 3\n(9) + (2) = 11, left: 11, 3\n(2) * (3) = 6, left: 6, 9\n(6) / (9) = 2/3, left: 2/3\n(2) / (3) = 2/3, left: 2/3, 9\n(2/3) / (9) = 2/27, left: 2/27\n(9) + (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (9 + (8 - 5)))"}, {"input": "5 9 8 2\n", "output": "(2) / (9) = 2/9, left: 2/9, 5, 8\n(9) / (2) = 9/2, left: 9/2, 5, 8\n(5) / (9/2) = 10/9, left: 10/9, 8\n(9/2) - (5) = -1/2, left: -1/2, 8\n(9) * (2) = 18, left: 18, 5, 8\n(8) * (18) = 144, left: 144, 5\n(144) - (5) = 139, left: 139\n(9) + (2) = 11, left: 11, 5, 8\n(5) + (8) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((9 + 2) + (5 + 8))"}, {"input": "5 9 8 2\n", "output": "(2) - (5) = -3, left: -3, 9, 8\n(8) + (-3) = 5, left: 5, 9\n(2) / (5) = 2/5, left: 2/5, 9, 8\n(9) * (2/5) = 18/5, left: 18/5, 8\n(8) - (9) = -1, left: -1, 2/5\n(-1) - (2/5) = -7/5, left: -7/5\n(8) / (9) = 8/9, left: 8/9, 2/5\n(5) - (2) = 3, left: 3, 9, 8\n(8) / (3) = 8/3, left: 8/3, 9\n(9) * (8/3) = 24, left: 24\nreach 24! expression: (9 * (8 / (5 - 2)))"}, {"input": "5 9 8 2\n", "output": "(9) * (8) = 72, left: 72, 5, 2\n(2) / (5) = 2/5, left: 2/5, 72\n(2/5) / (72) = 1/180, left: 1/180\n(72) - (2/5) = 358/5, left: 358/5\n(5) / (2) = 5/2, left: 5/2, 72\n(5/2) / (72) = 5/144, left: 5/144\n(2) - (5) = -3, left: -3, 72\n(5) + (2) = 7, left: 7, 72\n(5) - (2) = 3, left: 3, 72\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (5 - 2))"}, {"input": "7 8 10 1\n", "output": "(1) - (7) = -6, left: -6, 8, 10\n(8) * (-6) = -48, left: -48, 10\n(8) / (-6) = -4/3, left: -4/3, 10\n(10) + (-4/3) = 26/3, left: 26/3\n(-6) - (8) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((1 - 7) - 8))"}, {"input": "7 8 10 1\n", "output": "(7) / (1) = 7, left: 7, 8, 10\n(8) + (10) = 18, left: 18, 7\n(18) / (7) = 18/7, left: 18/7\n(8) * (10) = 80, left: 80, 7\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 - (7 / 1)))"}, {"input": "7 8 10 1\n", "output": "(8) - (1) = 7, left: 7, 7, 10\n(10) + (7) = 17, left: 17, 7\n(17) - (7) = 10, left: 10\n(7) * (17) = 119, left: 119\n(17) / (7) = 17/7, left: 17/7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (10 + (8 - 1)))"}, {"input": "7 8 10 1\n", "output": "(7) + (10) = 17, left: 17, 8, 1\n(17) - (8) = 9, left: 9, 1\n(8) / (17) = 8/17, left: 8/17, 1\n(8) + (17) = 25, left: 25, 1\n(1) - (25) = -24, left: -24\n(25) - (1) = 24, left: 24\nreach 24! expression: ((8 + (7 + 10)) - 1)"}, {"input": "7 8 10 1\n", "output": "(7) + (10) = 17, left: 17, 8, 1\n(17) - (8) = 9, left: 9, 1\n(9) / (1) = 9, left: 9\n(8) / (17) = 8/17, left: 8/17, 1\n(1) - (8/17) = 9/17, left: 9/17\n(8/17) - (1) = -9/17, left: -9/17\n(1) * (8/17) = 8/17, left: 8/17\n(8) + (17) = 25, left: 25, 1\n(1) + (25) = 26, left: 26\n(25) - (1) = 24, left: 24\nreach 24! expression: ((8 + (7 + 10)) - 1)"}, {"input": "7 8 10 1\n", "output": "(7) / (1) = 7, left: 7, 8, 10\n(8) + (10) = 18, left: 18, 7\n(8) / (10) = 4/5, left: 4/5, 7\n(4/5) - (7) = -31/5, left: -31/5\n(10) + (7) = 17, left: 17, 8\n(8) + (17) = 25, left: 25\n(7) / (10) = 7/10, left: 7/10, 8\n(8) - (7/10) = 73/10, left: 73/10\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (10 - (7 / 1)))"}, {"input": "7 8 10 1\n", "output": "(7) - (10) = -3, left: -3, 8, 1\n(7) * (10) = 70, left: 70, 8, 1\n(8) + (1) = 9, left: 9, 70\n(10) / (7) = 10/7, left: 10/7, 8, 1\n(7) / (10) = 7/10, left: 7/10, 8, 1\n(8) + (7/10) = 87/10, left: 87/10, 1\n(1) + (87/10) = 97/10, left: 97/10\n(7) + (10) = 17, left: 17, 8, 1\n(8) + (17) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((8 + (7 + 10)) - 1)"}, {"input": "7 8 10 1\n", "output": "(8) - (1) = 7, left: 7, 7, 10\n(10) + (7) = 17, left: 17, 7\n(17) - (7) = 10, left: 10\n(7) * (17) = 119, left: 119\n(17) / (7) = 17/7, left: 17/7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (10 + (8 - 1)))"}, {"input": "7 8 10 1\n", "output": "(1) - (7) = -6, left: -6, 8, 10\n(8) * (-6) = -48, left: -48, 10\n(10) * (-48) = -480, left: -480\n(-6) / (8) = -3/4, left: -3/4, 10\n(8) / (-6) = -4/3, left: -4/3, 10\n(10) * (-4/3) = -40/3, left: -40/3\n(-4/3) / (10) = -2/15, left: -2/15\n(-6) - (8) = -14, left: -14, 10\n(-14) - (10) = -24, left: -24\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((1 - 7) - 8))"}, {"input": "7 8 10 1\n", "output": "(8) - (1) = 7, left: 7, 7, 10\n(10) + (7) = 17, left: 17, 7\n(17) - (7) = 10, left: 10\n(7) * (17) = 119, left: 119\n(17) / (7) = 17/7, left: 17/7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (10 + (8 - 1)))"}, {"input": "7 8 10 1\n", "output": "(8) - (1) = 7, left: 7, 7, 10\n(10) + (7) = 17, left: 17, 7\n(17) - (7) = 10, left: 10\n(7) * (17) = 119, left: 119\n(17) / (7) = 17/7, left: 17/7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (10 + (8 - 1)))"}, {"input": "5 5 11 6\n", "output": "(5) * (6) = 30, left: 30, 5, 11\n(5) - (30) = -25, left: -25, 11\n(11) + (-25) = -14, left: -14\n(-25) - (11) = -36, left: -36\n(5) + (30) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 + (5 * 6)) - 11)"}, {"input": "5 5 11 6\n", "output": "(5) + (6) = 11, left: 11, 5, 11\n(11) / (5) = 11/5, left: 11/5, 11\n(11) - (11/5) = 44/5, left: 44/5\n(5) * (6) = 30, left: 30, 5, 11\n(5) + (30) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 + (5 * 6)) - 11)"}, {"input": "5 5 11 6\n", "output": "(6) / (5) = 6/5, left: 6/5, 5, 11\n(5) + (6) = 11, left: 11, 5, 11\n(5) * (11) = 55, left: 55, 11\n(11) - (5) = 6, left: 6, 11\n(6) - (5) = 1, left: 1, 5, 11\n(5) - (6) = -1, left: -1, 5, 11\n(11) - (-1) = 12, left: 12, 5\n(5) * (6) = 30, left: 30, 5, 11\n(5) - (11) = -6, left: -6, 30\n(30) + (-6) = 24, left: 24\nreach 24! expression: ((5 * 6) + (5 - 11))"}, {"input": "5 5 11 6\n", "output": "(5) - (5) = 0, left: 0, 11, 6\n(6) - (11) = -5, left: -5, 0\n(5) * (5) = 25, left: 25, 11, 6\n(5) + (5) = 10, left: 10, 11, 6\n(11) * (6) = 66, left: 66, 5, 5\n(5) + (6) = 11, left: 11, 5, 11\n(6) / (5) = 6/5, left: 6/5, 5, 11\n(5) * (6) = 30, left: 30, 5, 11\n(11) - (5) = 6, left: 6, 30\n(30) - (6) = 24, left: 24\nreach 24! expression: ((5 * 6) - (11 - 5))"}, {"input": "5 5 11 6\n", "output": "(5) * (6) = 30, left: 30, 5, 11\n(5) - (30) = -25, left: -25, 11\n(11) + (-25) = -14, left: -14\n(-25) / (11) = -25/11, left: -25/11\n(11) * (-25) = -275, left: -275\n(11) - (-25) = 36, left: 36\n(-25) - (11) = -36, left: -36\n(11) / (-25) = -11/25, left: -11/25\n(5) + (30) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 + (5 * 6)) - 11)"}, {"input": "5 5 11 6\n", "output": "(5) - (6) = -1, left: -1, 5, 11\n(11) * (-1) = -11, left: -11, 5\n(-1) - (5) = -6, left: -6, 11\n(6) / (5) = 6/5, left: 6/5, 5, 11\n(6) - (5) = 1, left: 1, 5, 11\n(5) * (6) = 30, left: 30, 5, 11\n(11) * (30) = 330, left: 330, 5\n(5) * (330) = 1650, left: 1650\n(30) - (11) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((5 * 6) - 11))"}, {"input": "5 5 11 6\n", "output": "(5) + (6) = 11, left: 11, 5, 11\n(11) / (11) = 1, left: 1, 5\n(5) + (11) = 16, left: 16, 11\n(11) / (5) = 11/5, left: 11/5, 11\n(5) * (11) = 55, left: 55, 11\n(11) / (55) = 1/5, left: 1/5\n(5) + (11) = 16, left: 16, 11\n(5) * (6) = 30, left: 30, 5, 11\n(5) + (30) = 35, left: 35, 11\n(35) - (11) = 24, left: 24\nreach 24! expression: ((5 + (5 * 6)) - 11)"}, {"input": "1 12 7 13\n", "output": "(13) - (12) = 1, left: 1, 1, 7\n(13) / (12) = 13/12, left: 13/12, 1, 7\n(13/12) / (7) = 13/84, left: 13/84, 1\n(1) + (13) = 14, left: 14, 12, 7\n(12) * (14) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: ((12 * (1 + 13)) / 7)"}, {"input": "1 12 7 13\n", "output": "(12) + (7) = 19, left: 19, 1, 13\n(19) - (1) = 18, left: 18, 13\n(1) / (19) = 1/19, left: 1/19, 13\n(12) / (7) = 12/7, left: 12/7, 1, 13\n(1) + (13) = 14, left: 14, 12/7\n(12/7) * (14) = 24, left: 24\nreach 24! expression: ((12 / 7) * (1 + 13))"}, {"input": "1 12 7 13\n", "output": "(7) - (13) = -6, left: -6, 1, 12\n(12) / (-6) = -2, left: -2, 1\n(13) / (7) = 13/7, left: 13/7, 1, 12\n(7) / (12) = 7/12, left: 7/12, 1, 13\n(1) + (13) = 14, left: 14, 7/12\n(14) / (7/12) = 24, left: 24\nreach 24! expression: ((1 + 13) / (7 / 12))"}, {"input": "1 12 7 13\n", "output": "(12) - (1) = 11, left: 11, 7, 13\n(13) / (7) = 13/7, left: 13/7, 11\n(13) - (12) = 1, left: 1, 1, 7\n(1) / (1) = 1, left: 1, 7\n(12) + (13) = 25, left: 25, 1, 7\n(13) / (12) = 13/12, left: 13/12, 1, 7\n(7) * (13) = 91, left: 91, 1, 12\n(1) + (13) = 14, left: 14, 12, 7\n(12) / (7) = 12/7, left: 12/7, 14\n(14) * (12/7) = 24, left: 24\nreach 24! expression: ((1 + 13) * (12 / 7))"}, {"input": "1 12 7 13\n", "output": "(7) * (13) = 91, left: 91, 1, 12\n(7) + (13) = 20, left: 20, 1, 12\n(7) / (13) = 7/13, left: 7/13, 1, 12\n(12) / (7/13) = 156/7, left: 156/7, 1\n(7) - (13) = -6, left: -6, 1, 12\n(1) * (-6) = -6, left: -6, 12\n(13) - (7) = 6, left: 6, 1, 12\n(7) / (12) = 7/12, left: 7/12, 1, 13\n(1) + (13) = 14, left: 14, 7/12\n(14) / (7/12) = 24, left: 24\nreach 24! expression: ((1 + 13) / (7 / 12))"}, {"input": "1 12 7 13\n", "output": "(1) - (13) = -12, left: -12, 12, 7\n(12) + (-12) = 0, left: 0, 7\n(12) - (-12) = 24, left: 24, 7\n(1) * (13) = 13, left: 13, 12, 7\n(12) * (13) = 156, left: 156, 7\n(12) * (7) = 84, left: 84, 13\n(13) - (1) = 12, left: 12, 12, 7\n(1) + (13) = 14, left: 14, 12, 7\n(7) / (14) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (7 / (1 + 13)))"}, {"input": "1 12 7 13\n", "output": "(12) + (7) = 19, left: 19, 1, 13\n(1) - (19) = -18, left: -18, 13\n(19) / (1) = 19, left: 19, 13\n(12) - (7) = 5, left: 5, 1, 13\n(1) / (5) = 1/5, left: 1/5, 13\n(13) / (1) = 13, left: 13, 5\n(12) / (7) = 12/7, left: 12/7, 1, 13\n(12/7) - (13) = -79/7, left: -79/7, 1\n(1) + (13) = 14, left: 14, 12/7\n(12/7) * (14) = 24, left: 24\nreach 24! expression: ((12 / 7) * (1 + 13))"}, {"input": "1 12 7 13\n", "output": "(12) * (13) = 156, left: 156, 1, 7\n(1) - (7) = -6, left: -6, 156\n(13) - (12) = 1, left: 1, 1, 7\n(7) * (1) = 7, left: 7, 1\n(1) + (7) = 8, left: 8\n(13) / (12) = 13/12, left: 13/12, 1, 7\n(13) / (1) = 13, left: 13, 12, 7\n(1) + (13) = 14, left: 14, 12, 7\n(12) * (14) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: ((12 * (1 + 13)) / 7)"}, {"input": "9 5 8 8\n", "output": "(8) - (5) = 3, left: 3, 9, 8\n(8) / (9) = 8/9, left: 8/9, 3\n(3) * (8/9) = 8/3, left: 8/3\n(9) * (8) = 72, left: 72, 3\n(3) + (72) = 75, left: 75\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 9, 8\n(5/8) - (9) = -67/8, left: -67/8, 8\n(5) + (8) = 13, left: 13, 9, 8\n(8) + (13) = 21, left: 21, 9\n(5) - (8) = -3, left: -3, 9, 8\n(5) * (8) = 40, left: 40, 9, 8\n(9) - (8) = 1, left: 1, 40\n(8) - (5) = 3, left: 3, 9, 8\n(9) * (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(5) / (8) = 5/8, left: 5/8, 9, 8\n(5/8) / (9) = 5/72, left: 5/72, 8\n(5) * (8) = 40, left: 40, 9, 8\n(40) - (8) = 32, left: 32, 9\n(32) / (9) = 32/9, left: 32/9\n(8) / (5) = 8/5, left: 8/5, 9, 8\n(5) - (8) = -3, left: -3, 9, 8\n(8) - (5) = 3, left: 3, 9, 8\n(9) * (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(8) + (8) = 16, left: 16, 9, 5\n(16) - (5) = 11, left: 11, 9\n(8) / (8) = 1, left: 1, 9, 5\n(9) - (1) = 8, left: 8, 5\n(8) - (8) = 0, left: 0, 9, 5\n(5) - (8) = -3, left: -3, 9, 8\n(9) + (-3) = 6, left: 6, 8\n(8) - (5) = 3, left: 3, 9, 8\n(9) * (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(8) - (5) = 3, left: 3, 9, 8\n(8) / (9) = 8/9, left: 8/9, 3\n(3) * (8/9) = 8/3, left: 8/3\n(3) / (8/9) = 27/8, left: 27/8\n(8/9) / (3) = 8/27, left: 8/27\n(3) - (8/9) = 19/9, left: 19/9\n(8/9) - (3) = -19/9, left: -19/9\n(9) * (8) = 72, left: 72, 3\n(3) * (72) = 216, left: 216\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(8) / (5) = 8/5, left: 8/5, 9, 8\n(8/5) / (9) = 8/45, left: 8/45, 8\n(5) - (8) = -3, left: -3, 9, 8\n(-3) - (8) = -11, left: -11, 9\n(5) + (8) = 13, left: 13, 9, 8\n(5) * (8) = 40, left: 40, 9, 8\n(8) - (5) = 3, left: 3, 9, 8\n(9) / (8) = 9/8, left: 9/8, 3\n(9) * (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(8) - (5) = 3, left: 3, 9, 8\n(8) / (9) = 8/9, left: 8/9, 3\n(3) * (8/9) = 8/3, left: 8/3\n(3) / (8/9) = 27/8, left: 27/8\n(8/9) / (3) = 8/27, left: 8/27\n(3) - (8/9) = 19/9, left: 19/9\n(8/9) - (3) = -19/9, left: -19/9\n(3) + (8/9) = 35/9, left: 35/9\n(9) * (8) = 72, left: 72, 3\n(3) + (72) = 75, left: 75\n(3) * (72) = 216, left: 216\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(8) / (8) = 1, left: 1, 9, 5\n(9) / (1) = 9, left: 9, 5\n(8) * (8) = 64, left: 64, 9, 5\n(9) - (64) = -55, left: -55, 5\n(5) + (8) = 13, left: 13, 9, 8\n(9) * (8) = 72, left: 72, 13\n(9) - (13) = -4, left: -4, 8\n(-4) - (8) = -12, left: -12\n(5) - (8) = -3, left: -3, 9, 8\n(5) * (8) = 40, left: 40, 9, 8\n(9) + (40) = 49, left: 49, 8\n(8) - (5) = 3, left: 3, 9, 8\n(9) * (8) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(8) - (5) = 3, left: 3, 9, 8\n(8) / (9) = 8/9, left: 8/9, 3\n(3) * (8/9) = 8/3, left: 8/3\n(3) / (8/9) = 27/8, left: 27/8\n(8/9) / (3) = 8/27, left: 8/27\n(3) - (8/9) = 19/9, left: 19/9\n(8/9) - (3) = -19/9, left: -19/9\n(3) + (8/9) = 35/9, left: 35/9\n(9) * (8) = 72, left: 72, 3\n(3) + (72) = 75, left: 75\n(3) * (72) = 216, left: 216\n(72) / (3) = 24, left: 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "13 2 12 2\n", "output": "(2) - (13) = -11, left: -11, 2, 12\n(2) - (13) = -11, left: -11, 12, 2\n(-11) / (12) = -11/12, left: -11/12, 2\n(13) + (12) = 25, left: 25, 2, 2\n(2) / (2) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (2 / 2))"}, {"input": "13 2 12 2\n", "output": "(12) / (2) = 6, left: 6, 13, 2\n(12) - (2) = 10, left: 10, 13, 2\n(13) / (2) = 13/2, left: 13/2, 10\n(13) + (12) = 25, left: 25, 2, 2\n(2) / (2) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (2 / 2))"}, {"input": "13 2 12 2\n", "output": "(13) + (12) = 25, left: 25, 2, 2\n(2) + (2) = 4, left: 4, 25\n(2) - (2) = 0, left: 0, 25\n(2) * (2) = 4, left: 4, 25\n(2) / (2) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (2 / 2))"}, {"input": "13 2 12 2\n", "output": "(2) - (13) = -11, left: -11, 12, 2\n(-11) - (2) = -13, left: -13, 12\n(12) / (2) = 6, left: 6, 13, 2\n(6) / (13) = 6/13, left: 6/13, 2\n(2) + (12) = 14, left: 14, 13, 2\n(2) / (12) = 1/6, left: 1/6, 13, 2\n(12) - (2) = 10, left: 10, 13, 2\n(13) + (12) = 25, left: 25, 2, 2\n(2) / (2) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (2 / 2))"}, {"input": "13 2 12 2\n", "output": "(13) / (2) = 13/2, left: 13/2, 12, 2\n(13) * (2) = 26, left: 26, 12, 2\n(13) + (2) = 15, left: 15, 12, 2\n(12) * (2) = 24, left: 24, 15\n(12) / (2) = 6, left: 6, 13, 2\n(2) - (12) = -10, left: -10, 13, 2\n(-10) / (13) = -10/13, left: -10/13, 2\n(13) + (12) = 25, left: 25, 2, 2\n(2) / (2) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (2 / 2))"}, {"input": "13 2 12 2\n", "output": "(2) / (13) = 2/13, left: 2/13, 12, 2\n(2) - (2/13) = 24/13, left: 24/13, 12\n(24/13) / (12) = 2/13, left: 2/13\n(13) - (2) = 11, left: 11, 12, 2\n(2) - (12) = -10, left: -10, 11\n(2) - (13) = -11, left: -11, 12, 2\n(12) - (2) = 10, left: 10, -11\n(2) / (2) = 1, left: 1, 13, 12\n(13) - (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (13 - (2 / 2)))"}, {"input": "13 2 12 2\n", "output": "(13) * (2) = 26, left: 26, 2, 12\n(2) - (12) = -10, left: -10, 26\n(13) * (2) = 26, left: 26, 12, 2\n(2) - (13) = -11, left: -11, 12, 2\n(2) / (13) = 2/13, left: 2/13, 12, 2\n(12) - (13) = -1, left: -1, 2, 2\n(13) * (12) = 156, left: 156, 2, 2\n(13) + (12) = 25, left: 25, 2, 2\n(2) / (2) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (2 / 2))"}, {"input": "13 2 12 2\n", "output": "(13) + (12) = 25, left: 25, 2, 2\n(2) + (2) = 4, left: 4, 25\n(4) / (25) = 4/25, left: 4/25\n(2) - (2) = 0, left: 0, 25\n(25) - (0) = 25, left: 25\n(2) * (2) = 4, left: 4, 25\n(25) / (4) = 25/4, left: 25/4\n(25) - (4) = 21, left: 21\n(2) / (2) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (2 / 2))"}, {"input": "9 10 1 7\n", "output": "(9) - (1) = 8, left: 8, 10, 7\n(8) / (10) = 4/5, left: 4/5, 7\n(7) - (4/5) = 31/5, left: 31/5\n(7) / (8) = 7/8, left: 7/8, 10\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((9 - 1) * (10 - 7))"}, {"input": "9 10 1 7\n", "output": "(1) - (10) = -9, left: -9, 9, 7\n(9) - (-9) = 18, left: 18, 7\n(10) - (1) = 9, left: 9, 9, 7\n(1) / (7) = 1/7, left: 1/7, 9, 10\n(7) / (1) = 7, left: 7, 9, 10\n(7) / (10) = 7/10, left: 7/10, 9, 1\n(9) + (1) = 10, left: 10, 7/10\n(10) - (7) = 3, left: 3, 9, 1\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: ((10 - 7) * (9 - 1))"}, {"input": "9 10 1 7\n", "output": "(9) - (1) = 8, left: 8, 10, 7\n(10) / (8) = 5/4, left: 5/4, 7\n(8) - (10) = -2, left: -2, 7\n(8) / (10) = 4/5, left: 4/5, 7\n(10) * (8) = 80, left: 80, 7\n(7) * (8) = 56, left: 56, 10\n(8) - (7) = 1, left: 1, 10\n(10) + (7) = 17, left: 17, 8\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((9 - 1) * (10 - 7))"}, {"input": "9 10 1 7\n", "output": "(9) / (7) = 9/7, left: 9/7, 10, 1\n(1) - (9/7) = -2/7, left: -2/7, 10\n(7) - (9) = -2, left: -2, 10, 1\n(1) / (9) = 1/9, left: 1/9, 10, 7\n(1/9) / (10) = 1/90, left: 1/90, 7\n(7) / (1/90) = 630, left: 630\n(1) - (9) = -8, left: -8, 10, 7\n(7) * (-8) = -56, left: -56, 10\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (7 - 10))"}, {"input": "9 10 1 7\n", "output": "(1) / (10) = 1/10, left: 1/10, 9, 7\n(10) * (1) = 10, left: 10, 9, 7\n(10) - (9) = 1, left: 1, 7\n(1) - (10) = -9, left: -9, 9, 7\n(1) + (7) = 8, left: 8, 9, 10\n(9) - (8) = 1, left: 1, 10\n(7) / (1) = 7, left: 7, 9, 10\n(9) - (1) = 8, left: 8, 10, 7\n(10) - (7) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: ((9 - 1) * (10 - 7))"}, {"input": "9 10 1 7\n", "output": "(9) / (10) = 9/10, left: 9/10, 1, 7\n(1) * (9/10) = 9/10, left: 9/10, 7\n(7) - (9) = -2, left: -2, 10, 1\n(9) / (7) = 9/7, left: 9/7, 10, 1\n(10) * (9/7) = 90/7, left: 90/7, 1\n(9) + (7) = 16, left: 16, 10, 1\n(16) - (1) = 15, left: 15, 10\n(1) - (9) = -8, left: -8, 10, 7\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((1 - 9) * (7 - 10))"}, {"input": "4 10 8 2\n", "output": "(2) - (4) = -2, left: -2, 10, 8\n(-2) - (10) = -12, left: -12, 8\n(10) * (8) = 80, left: 80, -2\n(10) + (8) = 18, left: 18, -2\n(2) / (4) = 1/2, left: 1/2, 10, 8\n(8) / (1/2) = 16, left: 16, 10\n(10) * (1/2) = 5, left: 5, 8\n(4) + (2) = 6, left: 6, 10, 8\n(10) + (8) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: ((4 + 2) + (10 + 8))"}, {"input": "4 10 8 2\n", "output": "(4) - (10) = -6, left: -6, 8, 2\n(2) - (8) = -6, left: -6, -6\n(8) * (-6) = -48, left: -48, 2\n(8) - (-6) = 14, left: 14, 2\n(10) / (4) = 5/2, left: 5/2, 8, 2\n(2) - (5/2) = -1/2, left: -1/2, 8\n(5/2) / (2) = 5/4, left: 5/4, 8\n(4) * (10) = 40, left: 40, 8, 2\n(8) * (2) = 16, left: 16, 40\n(40) - (16) = 24, left: 24\nreach 24! expression: ((4 * 10) - (8 * 2))"}, {"input": "4 10 8 2\n", "output": "(4) * (10) = 40, left: 40, 8, 2\n(2) + (40) = 42, left: 42, 8\n(8) - (42) = -34, left: -34\n(2) - (40) = -38, left: -38, 8\n(8) - (-38) = 46, left: 46\n(8) - (40) = -32, left: -32, 2\n(2) / (-32) = -1/16, left: -1/16\n(-32) - (2) = -34, left: -34\n(8) + (40) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 + (4 * 10)) / 2)"}, {"input": "4 10 8 2\n", "output": "(10) - (4) = 6, left: 6, 8, 2\n(8) - (6) = 2, left: 2, 2\n(2) + (2) = 4, left: 4\n(2) * (2) = 4, left: 4\n(2) - (2) = 0, left: 0\n(8) / (6) = 4/3, left: 4/3, 2\n(8) * (6) = 48, left: 48, 2\n(2) - (48) = -46, left: -46\n(2) + (48) = 50, left: 50\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * (10 - 4)) / 2)"}, {"input": "4 10 8 2\n", "output": "(8) / (10) = 4/5, left: 4/5, 4, 2\n(4/5) / (4) = 1/5, left: 1/5, 2\n(4) / (2) = 2, left: 2, 4/5\n(4/5) + (2) = 14/5, left: 14/5\n(10) / (8) = 5/4, left: 5/4, 4, 2\n(5/4) - (2) = -3/4, left: -3/4, 4\n(10) + (8) = 18, left: 18, 4, 2\n(18) / (4) = 9/2, left: 9/2, 2\n(4) + (18) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (4 + (10 + 8)))"}, {"input": "7 6 5 7\n", "output": "(6) * (7) = 42, left: 42, 7, 5\n(7) / (42) = 1/6, left: 1/6, 5\n(7) / (6) = 7/6, left: 7/6, 7, 5\n(5) - (7) = -2, left: -2, 6, 7\n(7) * (-2) = -14, left: -14, 6\n(7) * (6) = 42, left: 42, 5, 7\n(5) / (6) = 5/6, left: 5/6, 7, 7\n(7) / (7) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(5) - (6) = -1, left: -1, 7, 7\n(5) / (6) = 5/6, left: 5/6, 7, 7\n(7) + (7) = 14, left: 14, 5/6\n(6) / (7) = 6/7, left: 6/7, 5, 7\n(7) / (5) = 7/5, left: 7/5, 7, 6\n(6) * (7) = 42, left: 42, 7, 5\n(7) - (7) = 0, left: 0, 6, 5\n(7) / (7) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(7) - (5) = 2, left: 2, 7, 6\n(5) / (7) = 5/7, left: 5/7, 7, 6\n(5) + (7) = 12, left: 12, 7, 6\n(7) * (7) = 49, left: 49, 6, 5\n(7) - (7) = 0, left: 0, 6, 5\n(7) - (7) = 0, left: 0, 6, 5\n(0) / (5) = 0, left: 0, 6\n(7) / (7) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(7) / (6) = 7/6, left: 7/6, 7, 5\n(7) / (7/6) = 6, left: 6, 5\n(7) - (6) = 1, left: 1, 5, 7\n(7) + (6) = 13, left: 13, 5, 7\n(6) - (7) = -1, left: -1, 5, 7\n(7) * (6) = 42, left: 42, 5, 7\n(42) - (7) = 35, left: 35, 5\n(7) / (7) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(7) / (6) = 7/6, left: 7/6, 5, 7\n(6) + (5) = 11, left: 11, 7, 7\n(6) + (7) = 13, left: 13, 7, 5\n(7) - (5) = 2, left: 2, 6, 7\n(7) - (6) = 1, left: 1, 2\n(5) - (7) = -2, left: -2, 6, 7\n(-2) / (7) = -2/7, left: -2/7, 6\n(7) / (7) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(5) - (6) = -1, left: -1, 7, 7\n(7) / (-1) = -7, left: -7, 7\n(5) / (6) = 5/6, left: 5/6, 7, 7\n(7) / (6) = 7/6, left: 7/6, 5, 7\n(5) / (7) = 5/7, left: 5/7, 7, 6\n(6) / (7) = 6/7, left: 6/7, 5/7\n(5) * (7) = 35, left: 35, 7, 6\n(6) + (7) = 13, left: 13, 7, 5\n(7) - (6) = 1, left: 1, 7, 5\n(1) / (7) = 1/7, left: 1/7, 5\n(6) - (7) = -1, left: -1, 7, 5\n(7) / (7) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(6) + (7) = 13, left: 13, 7, 5\n(7) + (5) = 12, left: 12, 13\n(5) / (7) = 5/7, left: 5/7, 6, 7\n(7) / (5) = 7/5, left: 7/5, 6, 7\n(7) + (5) = 12, left: 12, 6, 7\n(6) - (7) = -1, left: -1, 5, 7\n(6) / (7) = 6/7, left: 6/7, 5, 7\n(7) - (6) = 1, left: 1, 5, 7\n(5) * (7) = 35, left: 35, 7, 6\n(6) + (35) = 41, left: 41, 7\n(7) - (5) = 2, left: 2, 7, 6\n(7) / (7) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(7) * (6) = 42, left: 42, 5, 7\n(5) - (42) = -37, left: -37, 7\n(5) - (6) = -1, left: -1, 7, 7\n(-1) / (7) = -1/7, left: -1/7, 7\n(6) + (5) = 11, left: 11, 7, 7\n(7) - (5) = 2, left: 2, 7, 6\n(5) / (7) = 5/7, left: 5/7, 7, 6\n(7) / (5) = 7/5, left: 7/5, 6, 7\n(5) / (7) = 5/7, left: 5/7, 6, 7\n(6) * (5/7) = 30/7, left: 30/7, 7\n(7) + (7) = 14, left: 14, 6, 5\n(7) / (7) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(7) + (5) = 12, left: 12, 6, 7\n(7) / (12) = 7/12, left: 7/12, 6\n(7) - (5) = 2, left: 2, 6, 7\n(7) + (2) = 9, left: 9, 6\n(7) * (5) = 35, left: 35, 6, 7\n(5) - (7) = -2, left: -2, 7, 6\n(-2) - (6) = -8, left: -8, 7\n(7) / (6) = 7/6, left: 7/6, -2\n(5) + (7) = 12, left: 12, 7, 6\n(6) / (7) = 6/7, left: 6/7, 12\n(7) + (7) = 14, left: 14, 6, 5\n(7) / (7) = 1, left: 1, 6, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "1 6 1 9\n", "output": "(6) - (9) = -3, left: -3, 1, 1\n(9) - (6) = 3, left: 3, 1, 1\n(1) / (1) = 1, left: 1, 3\n(6) + (9) = 15, left: 15, 1, 1\n(1) - (6) = -5, left: -5, 1, 9\n(1) + (6) = 7, left: 7, 1, 9\n(1) * (6) = 6, left: 6, 1, 9\n(1) + (1) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(1) + (6) = 7, left: 7, 1, 9\n(6) - (1) = 5, left: 5, 1, 9\n(1) * (9) = 9, left: 9, 1, 6\n(6) - (9) = -3, left: -3, 1\n(9) - (1) = 8, left: 8, 1, 6\n(6) - (1) = 5, left: 5, 1, 9\n(1) / (1) = 1, left: 1, 6, 9\n(1) + (1) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(6) * (9) = 54, left: 54, 1, 1\n(9) - (1) = 8, left: 8, 1, 6\n(8) - (1) = 7, left: 7, 6\n(1) + (9) = 10, left: 10, 1, 6\n(6) / (10) = 3/5, left: 3/5, 1\n(1) / (1) = 1, left: 1, 6, 9\n(9) / (1) = 9, left: 9, 6\n(1) + (1) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(1) + (1) = 2, left: 2, 6, 9\n(6) / (2) = 3, left: 3, 9\n(6) * (2) = 12, left: 12, 9\n(12) - (9) = 3, left: 3\n(6) + (2) = 8, left: 8, 9\n(9) / (8) = 9/8, left: 9/8\n(6) - (2) = 4, left: 4, 9\n(2) / (6) = 1/3, left: 1/3, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(1) * (1) = 1, left: 1, 6, 9\n(1) - (1) = 0, left: 0, 6, 9\n(1) / (1) = 1, left: 1, 6, 9\n(6) * (1) = 6, left: 6, 9\n(1) - (1) = 0, left: 0, 6, 9\n(1) / (1) = 1, left: 1, 6, 9\n(6) + (9) = 15, left: 15, 1\n(1) + (1) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(1) + (1) = 2, left: 2, 6, 9\n(6) / (2) = 3, left: 3, 9\n(9) + (3) = 12, left: 12\n(9) * (3) = 27, left: 27\n(6) * (2) = 12, left: 12, 9\n(9) * (12) = 108, left: 108\n(6) + (2) = 8, left: 8, 9\n(8) / (9) = 8/9, left: 8/9\n(6) - (2) = 4, left: 4, 9\n(9) * (4) = 36, left: 36\n(2) - (6) = -4, left: -4, 9\n(9) - (-4) = 13, left: 13\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(9) - (6) = 3, left: 3, 1, 1\n(3) - (1) = 2, left: 2, 1\n(1) / (3) = 1/3, left: 1/3, 1\n(1) * (3) = 3, left: 3, 1\n(1) - (6) = -5, left: -5, 1, 9\n(9) / (-5) = -9/5, left: -9/5, 1\n(6) - (1) = 5, left: 5, 1, 9\n(1) * (6) = 6, left: 6, 1, 9\n(6) / (9) = 2/3, left: 2/3, 1\n(6) / (1) = 6, left: 6, 1, 9\n(6) / (9) = 2/3, left: 2/3, 1\n(1) + (1) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(9) / (6) = 3/2, left: 3/2, 1, 1\n(6) + (9) = 15, left: 15, 1, 1\n(9) - (6) = 3, left: 3, 1, 1\n(6) * (9) = 54, left: 54, 1, 1\n(54) / (1) = 54, left: 54, 1\n(1) + (9) = 10, left: 10, 1, 6\n(10) / (1) = 10, left: 10, 6\n(1) * (9) = 9, left: 9, 1, 6\n(6) / (9) = 2/3, left: 2/3, 1\n(1) / (1) = 1, left: 1, 6, 9\n(1) - (9) = -8, left: -8, 6\n(1) + (1) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(1) - (6) = -5, left: -5, 1, 9\n(6) - (1) = 5, left: 5, 1, 9\n(1) + (9) = 10, left: 10, 1, 6\n(1) - (9) = -8, left: -8, 1, 6\n(9) / (1) = 9, left: 9, 1, 6\n(9) - (1) = 8, left: 8, 1, 6\n(1) - (6) = -5, left: -5, 1, 9\n(1) / (9) = 1/9, left: 1/9, -5\n(6) * (1) = 6, left: 6, 1, 9\n(6) - (1) = 5, left: 5, 9\n(1) / (1) = 1, left: 1, 6, 9\n(1) + (1) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(1) * (1) = 1, left: 1, 6, 9\n(1) - (9) = -8, left: -8, 6\n(9) / (6) = 3/2, left: 3/2, 1\n(3/2) - (1) = 1/2, left: 1/2\n(1) - (1) = 0, left: 0, 6, 9\n(9) * (0) = 0, left: 0, 6\n(1) / (1) = 1, left: 1, 6, 9\n(9) - (1) = 8, left: 8, 6\n(1) - (1) = 0, left: 0, 6, 9\n(0) / (9) = 0, left: 0, 6\n(1) / (1) = 1, left: 1, 6, 9\n(1) + (1) = 2, left: 2, 6, 9\n(9) * (2) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "5 3 12 4\n", "output": "(3) - (5) = -2, left: -2, 12, 4\n(-2) / (12) = -1/6, left: -1/6, 4\n(4) - (-1/6) = 25/6, left: 25/6\n(12) - (-2) = 14, left: 14, 4\n(14) - (4) = 10, left: 10\n(12) + (-2) = 10, left: 10, 4\n(4) - (-2) = 6, left: 6, 12\n(6) / (12) = 1/2, left: 1/2\n(4) + (-2) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (4 + (3 - 5)))"}, {"input": "5 3 12 4\n", "output": "(5) / (12) = 5/12, left: 5/12, 3, 4\n(3) / (4) = 3/4, left: 3/4, 5/12\n(4) / (5/12) = 48/5, left: 48/5, 3\n(12) / (5) = 12/5, left: 12/5, 3, 4\n(4) - (12/5) = 8/5, left: 8/5, 3\n(5) - (12) = -7, left: -7, 3, 4\n(4) + (-7) = -3, left: -3, 3\n(5) + (12) = 17, left: 17, 3, 4\n(3) + (17) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (3 + (5 + 12)))"}, {"input": "5 3 12 4\n", "output": "(4) / (3) = 4/3, left: 4/3, 5, 12\n(4/3) / (12) = 1/9, left: 1/9, 5\n(12) - (4/3) = 32/3, left: 32/3, 5\n(3) / (4) = 3/4, left: 3/4, 5, 12\n(3) * (4) = 12, left: 12, 5, 12\n(12) / (12) = 1, left: 1, 5\n(4) - (3) = 1, left: 1, 5, 12\n(3) + (4) = 7, left: 7, 5, 12\n(12) + (7) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (12 + (3 + 4)))"}, {"input": "5 3 12 4\n", "output": "(12) / (4) = 3, left: 3, 5, 3\n(5) - (3) = 2, left: 2, 3\n(3) - (2) = 1, left: 1\n(5) * (3) = 15, left: 15, 3\n(3) - (15) = -12, left: -12\n(15) - (3) = 12, left: 12\n(3) / (15) = 1/5, left: 1/5\n(5) + (3) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (5 + (12 / 4)))"}, {"input": "4 13 7 11\n", "output": "(11) / (7) = 11/7, left: 11/7, 4, 13\n(4) - (13) = -9, left: -9, 11/7\n(13) * (7) = 91, left: 91, 4, 11\n(13) + (7) = 20, left: 20, 4, 11\n(4) * (11) = 44, left: 44, 20\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "4 13 7 11\n", "output": "(13) * (11) = 143, left: 143, 4, 7\n(4) - (143) = -139, left: -139, 7\n(-139) / (7) = -139/7, left: -139/7\n(4) * (11) = 44, left: 44, 13, 7\n(13) + (7) = 20, left: 20, 44\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "4 13 7 11\n", "output": "(13) / (11) = 13/11, left: 13/11, 4, 7\n(13) * (11) = 143, left: 143, 4, 7\n(13) + (11) = 24, left: 24, 4, 7\n(4) / (24) = 1/6, left: 1/6, 7\n(1/6) / (7) = 1/42, left: 1/42\n(4) - (13) = -9, left: -9, 7, 11\n(7) - (13) = -6, left: -6, 4, 11\n(13) + (7) = 20, left: 20, 4, 11\n(4) * (11) = 44, left: 44, 20\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "4 13 7 11\n", "output": "(4) / (11) = 4/11, left: 4/11, 13, 7\n(11) / (4) = 11/4, left: 11/4, 13, 7\n(7) * (11/4) = 77/4, left: 77/4, 13\n(77/4) - (13) = 25/4, left: 25/4\n(11) - (4) = 7, left: 7, 13, 7\n(13) - (7) = 6, left: 6, 7\n(13) / (7) = 13/7, left: 13/7, 7\n(4) * (11) = 44, left: 44, 13, 7\n(13) + (7) = 20, left: 20, 44\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "4 13 7 11\n", "output": "(4) + (11) = 15, left: 15, 13, 7\n(11) - (4) = 7, left: 7, 13, 7\n(7) / (7) = 1, left: 1, 13\n(4) - (11) = -7, left: -7, 13, 7\n(13) + (-7) = 6, left: 6, 7\n(4) * (11) = 44, left: 44, 13, 7\n(13) / (7) = 13/7, left: 13/7, 44\n(44) * (13/7) = 572/7, left: 572/7\n(13) + (7) = 20, left: 20, 44\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "4 13 7 11\n", "output": "(11) - (13) = -2, left: -2, 4, 7\n(13) + (11) = 24, left: 24, 4, 7\n(13) * (11) = 143, left: 143, 4, 7\n(13) - (11) = 2, left: 2, 4, 7\n(7) / (11) = 7/11, left: 7/11, 4, 13\n(7) + (11) = 18, left: 18, 4, 13\n(4) / (13) = 4/13, left: 4/13, 18\n(13) + (7) = 20, left: 20, 4, 11\n(4) * (11) = 44, left: 44, 20\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "4 13 7 11\n", "output": "(11) - (7) = 4, left: 4, 4, 13\n(13) * (4) = 52, left: 52, 4\n(52) - (4) = 48, left: 48\n(11) - (13) = -2, left: -2, 4, 7\n(11) / (4) = 11/4, left: 11/4, 13, 7\n(13) * (7) = 91, left: 91, 11/4\n(11/4) * (91) = 1001/4, left: 1001/4\n(4) * (11) = 44, left: 44, 13, 7\n(13) + (7) = 20, left: 20, 44\n(44) - (20) = 24, left: 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "7 7 7 4\n", "output": "(7) / (7) = 1, left: 1, 7, 4\n(7) * (4) = 28, left: 28, 1\n(1) + (28) = 29, left: 29\n(7) + (4) = 11, left: 11, 1\n(7) / (1) = 7, left: 7, 4\n(7) / (4) = 7/4, left: 7/4\n(1) - (7) = -6, left: -6, 4\n(-6) / (4) = -3/2, left: -3/2\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) - (7) = 0, left: 0, 7, 4\n(7) * (0) = 0, left: 0, 4\n(7) - (7) = 0, left: 0, 7, 4\n(4) + (0) = 4, left: 4, 7\n(7) + (4) = 11, left: 11\n(7) / (7) = 1, left: 1, 7, 4\n(4) - (7) = -3, left: -3, 1\n(1) * (-3) = -3, left: -3\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(4) / (7) = 4/7, left: 4/7, 7, 7\n(4) - (7) = -3, left: -3, 7, 7\n(-3) / (7) = -3/7, left: -3/7, 7\n(7) - (4) = 3, left: 3, 7, 7\n(7) + (4) = 11, left: 11, 7, 7\n(7) / (7) = 1, left: 1, 11\n(11) - (1) = 10, left: 10\n(7) / (7) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) / (4) = 7/4, left: 7/4, 7, 7\n(7) + (7/4) = 35/4, left: 35/4, 7\n(7) - (4) = 3, left: 3, 7, 7\n(4) - (7) = -3, left: -3, 7, 7\n(4) / (7) = 4/7, left: 4/7, 7, 7\n(7) * (4) = 28, left: 28, 7, 7\n(7) + (7) = 14, left: 14, 7, 4\n(7) / (7) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) * (7) = 49, left: 49, 7, 4\n(7) + (49) = 56, left: 56, 4\n(7) / (7) = 1, left: 1, 7, 4\n(7) + (4) = 11, left: 11, 1\n(4) / (7) = 4/7, left: 4/7, 1\n(4) - (1) = 3, left: 3, 7\n(7) - (3) = 4, left: 4\n(1) - (7) = -6, left: -6, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) / (4) = 7/4, left: 7/4, 7, 7\n(7) * (7/4) = 49/4, left: 49/4, 7\n(7) - (49/4) = -21/4, left: -21/4\n(4) - (7) = -3, left: -3, 7, 7\n(7) - (4) = 3, left: 3, 7, 7\n(7) + (4) = 11, left: 11, 7, 7\n(7) * (11) = 77, left: 77, 7\n(77) / (7) = 11, left: 11\n(7) * (7) = 49, left: 49, 11\n(7) * (4) = 28, left: 28, 7, 7\n(7) / (7) = 1, left: 1, 28\n(7) / (7) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) - (7) = 0, left: 0, 7, 4\n(7) - (7) = 0, left: 0, 7, 4\n(4) - (0) = 4, left: 4, 7\n(4) / (7) = 4/7, left: 4/7\n(7) * (0) = 0, left: 0, 4\n(0) - (7) = -7, left: -7, 4\n(4) - (7) = -3, left: -3, 0\n(7) * (4) = 28, left: 28, 0\n(7) / (7) = 1, left: 1, 7, 4\n(4) / (1) = 4, left: 4, 7\n(1) / (4) = 1/4, left: 1/4, 7\n(7) - (1) = 6, left: 6, 4\n(4) + (6) = 10, left: 10\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) / (4) = 7/4, left: 7/4, 7, 7\n(7) + (7/4) = 35/4, left: 35/4, 7\n(4) - (7) = -3, left: -3, 7, 7\n(7) + (7) = 14, left: 14, -3\n(14) / (-3) = -14/3, left: -14/3\n(4) / (7) = 4/7, left: 4/7, 7, 7\n(7) * (4) = 28, left: 28, 7, 7\n(7) + (28) = 35, left: 35, 7\n(7) * (7) = 49, left: 49, 7, 4\n(7) - (4) = 3, left: 3, 49\n(7) * (4) = 28, left: 28, 49\n(7) / (7) = 1, left: 1, 7, 4\n(7) - (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "10 3 1 12\n", "output": "(10) * (1) = 10, left: 10, 3, 12\n(1) / (10) = 1/10, left: 1/10, 3, 12\n(3) / (12) = 1/4, left: 1/4, 1/10\n(10) - (1) = 9, left: 9, 3, 12\n(12) + (9) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (12 + (10 - 1)))"}, {"input": "10 3 1 12\n", "output": "(12) / (1) = 12, left: 12, 10, 3\n(12) - (1) = 11, left: 11, 10, 3\n(10) - (3) = 7, left: 7, 11\n(7) / (11) = 7/11, left: 7/11\n(10) + (3) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((12 - 1) + (10 + 3))"}, {"input": "10 3 1 12\n", "output": "(12) / (3) = 4, left: 4, 10, 1\n(1) / (10) = 1/10, left: 1/10, 4\n(10) / (1) = 10, left: 10, 4\n(3) + (12) = 15, left: 15, 10, 1\n(15) - (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((3 + 12) - 1))"}, {"input": "10 3 1 12\n", "output": "(1) - (3) = -2, left: -2, 10, 12\n(12) / (-2) = -6, left: -6, 10\n(12) * (-2) = -24, left: -24, 10\n(-24) - (10) = -34, left: -34\n(12) - (-2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (12 - (1 - 3)))"}, {"input": "10 3 1 12\n", "output": "(1) - (3) = -2, left: -2, 10, 12\n(12) / (-2) = -6, left: -6, 10\n(-6) - (10) = -16, left: -16\n(10) + (-6) = 4, left: 4\n(12) * (-2) = -24, left: -24, 10\n(12) + (-2) = 10, left: 10, 10\n(10) + (10) = 20, left: 20\n(10) * (10) = 100, left: 100\n(12) - (-2) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (12 - (1 - 3)))"}, {"input": "10 3 1 12\n", "output": "(12) / (3) = 4, left: 4, 10, 1\n(1) + (4) = 5, left: 5, 10\n(10) - (5) = 5, left: 5\n(10) / (4) = 5/2, left: 5/2, 1\n(10) * (4) = 40, left: 40, 1\n(4) - (10) = -6, left: -6, 1\n(1) / (-6) = -1/6, left: -1/6\n(3) + (12) = 15, left: 15, 10, 1\n(15) - (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((3 + 12) - 1))"}, {"input": "10 3 1 12\n", "output": "(10) * (1) = 10, left: 10, 3, 12\n(12) / (10) = 6/5, left: 6/5, 3\n(12) - (3) = 9, left: 9, 10\n(10) + (9) = 19, left: 19\n(1) / (10) = 1/10, left: 1/10, 3, 12\n(1/10) - (3) = -29/10, left: -29/10, 12\n(-29/10) - (12) = -149/10, left: -149/10\n(10) - (1) = 9, left: 9, 3, 12\n(12) + (9) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (12 + (10 - 1)))"}, {"input": "10 3 1 12\n", "output": "(12) / (1) = 12, left: 12, 10, 3\n(12) / (3) = 4, left: 4, 10\n(10) / (4) = 5/2, left: 5/2\n(3) - (12) = -9, left: -9, 10\n(10) / (12) = 5/6, left: 5/6, 3\n(12) - (10) = 2, left: 2, 3\n(3) - (10) = -7, left: -7, 12\n(12) - (1) = 11, left: 11, 10, 3\n(10) + (3) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((12 - 1) + (10 + 3))"}, {"input": "10 3 1 12\n", "output": "(3) - (12) = -9, left: -9, 10, 1\n(3) / (12) = 1/4, left: 1/4, 10, 1\n(1) / (1/4) = 4, left: 4, 10\n(12) / (3) = 4, left: 4, 10, 1\n(10) * (4) = 40, left: 40, 1\n(10) / (4) = 5/2, left: 5/2, 1\n(1) * (5/2) = 5/2, left: 5/2\n(3) + (12) = 15, left: 15, 10, 1\n(15) - (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((3 + 12) - 1))"}, {"input": "13 12 7 12\n", "output": "(13) / (12) = 13/12, left: 13/12, 7, 12\n(12) - (13) = -1, left: -1, 7, 12\n(13) * (12) = 156, left: 156, 7, 12\n(7) / (12) = 7/12, left: 7/12, 156\n(12) + (156) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: ((12 + (13 * 12)) / 7)"}, {"input": "13 12 7 12\n", "output": "(12) * (7) = 84, left: 84, 13, 12\n(13) / (7) = 13/7, left: 13/7, 12, 12\n(12) - (12) = 0, left: 0, 13/7\n(13) - (7) = 6, left: 6, 12, 12\n(12) * (12) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (13 - 7))"}, {"input": "13 12 7 12\n", "output": "(12) / (7) = 12/7, left: 12/7, 13, 12\n(12) - (7) = 5, left: 5, 13, 12\n(13) / (5) = 13/5, left: 13/5, 12\n(12) * (12) = 144, left: 144, 13, 7\n(13) - (7) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (13 - 7))"}, {"input": "13 12 7 12\n", "output": "(12) - (12) = 0, left: 0, 13, 7\n(0) - (13) = -13, left: -13, 7\n(12) / (12) = 1, left: 1, 13, 7\n(12) * (12) = 144, left: 144, 13, 7\n(13) - (7) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (13 - 7))"}, {"input": "13 12 7 12\n", "output": "(7) * (12) = 84, left: 84, 13, 12\n(84) - (13) = 71, left: 71, 12\n(7) / (12) = 7/12, left: 7/12, 13, 12\n(12) / (7) = 12/7, left: 12/7, 13, 12\n(12) - (7) = 5, left: 5, 13, 12\n(12) / (13) = 12/13, left: 12/13, 5\n(12) + (12) = 24, left: 24, 13, 7\n(12) * (12) = 144, left: 144, 13, 7\n(13) - (7) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (13 - 7))"}, {"input": "13 12 7 12\n", "output": "(13) + (12) = 25, left: 25, 7, 12\n(25) - (7) = 18, left: 18, 12\n(13) / (12) = 13/12, left: 13/12, 7, 12\n(7) + (13/12) = 97/12, left: 97/12, 12\n(12) - (13) = -1, left: -1, 7, 12\n(-1) / (12) = -1/12, left: -1/12, 7\n(13) * (12) = 156, left: 156, 7, 12\n(156) - (12) = 144, left: 144, 7\n(12) + (156) = 168, left: 168, 7\n(168) / (7) = 24, left: 24\nreach 24! expression: ((12 + (13 * 12)) / 7)"}, {"input": "13 12 7 12\n", "output": "(12) / (12) = 1, left: 1, 13, 7\n(7) - (1) = 6, left: 6, 13\n(12) - (12) = 0, left: 0, 13, 7\n(7) * (0) = 0, left: 0, 13\n(12) + (12) = 24, left: 24, 13, 7\n(13) + (7) = 20, left: 20, 24\n(12) / (12) = 1, left: 1, 13, 7\n(12) * (12) = 144, left: 144, 13, 7\n(13) - (7) = 6, left: 6, 144\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (13 - 7))"}, {"input": "13 12 7 12\n", "output": "(12) - (7) = 5, left: 5, 13, 12\n(13) + (5) = 18, left: 18, 12\n(12) - (7) = 5, left: 5, 13, 12\n(12) + (7) = 19, left: 19, 13, 12\n(13) / (12) = 13/12, left: 13/12, 19\n(13) / (7) = 13/7, left: 13/7, 12, 12\n(12) - (13/7) = 71/7, left: 71/7, 12\n(13) - (7) = 6, left: 6, 12, 12\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / ((13 - 7) / 12))"}, {"input": "13 12 7 12\n", "output": "(7) / (12) = 7/12, left: 7/12, 13, 12\n(12) / (13) = 12/13, left: 12/13, 7/12\n(12) * (7) = 84, left: 84, 13, 12\n(13) - (12) = 1, left: 1, 84\n(12) + (7) = 19, left: 19, 13, 12\n(13) * (7) = 91, left: 91, 12, 12\n(13) / (7) = 13/7, left: 13/7, 12, 12\n(13) - (7) = 6, left: 6, 12, 12\n(12) * (12) = 144, left: 144, 6\n(144) / (6) = 24, left: 24\nreach 24! expression: ((12 * 12) / (13 - 7))"}, {"input": "12 11 8 12\n", "output": "(8) * (12) = 96, left: 96, 12, 11\n(12) / (11) = 12/11, left: 12/11, 96\n(12) - (8) = 4, left: 4, 12, 11\n(11) - (8) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "12 11 8 12\n", "output": "(8) / (11) = 8/11, left: 8/11, 12, 12\n(12) + (8/11) = 140/11, left: 140/11, 12\n(11) / (8) = 11/8, left: 11/8, 12, 12\n(11) - (8) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "12 11 8 12\n", "output": "(12) + (8) = 20, left: 20, 11, 12\n(8) - (12) = -4, left: -4, 11, 12\n(12) * (-4) = -48, left: -48, 11\n(11) - (8) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "12 11 8 12\n", "output": "(12) / (8) = 3/2, left: 3/2, 11, 12\n(11) - (3/2) = 19/2, left: 19/2, 12\n(12) / (19/2) = 24/19, left: 24/19\n(12) + (8) = 20, left: 20, 11, 12\n(11) + (12) = 23, left: 23, 20\n(20) / (23) = 20/23, left: 20/23\n(12) * (8) = 96, left: 96, 11, 12\n(11) - (8) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "12 11 8 12\n", "output": "(11) + (12) = 23, left: 23, 12, 8\n(12) / (23) = 12/23, left: 12/23, 8\n(8) / (12/23) = 46/3, left: 46/3\n(12) / (11) = 12/11, left: 12/11, 12, 8\n(12/11) / (8) = 3/22, left: 3/22, 12\n(11) * (8) = 88, left: 88, 12, 12\n(12) * (88) = 1056, left: 1056, 12\n(11) - (8) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "12 11 8 12\n", "output": "(12) * (11) = 132, left: 132, 8, 12\n(12) / (8) = 3/2, left: 3/2, 12, 11\n(12) - (8) = 4, left: 4, 12, 11\n(12) / (11) = 12/11, left: 12/11, 12, 8\n(11) / (12) = 11/12, left: 11/12, 12, 8\n(12) - (11) = 1, left: 1, 12, 8\n(12) * (8) = 96, left: 96, 1\n(11) - (8) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "12 11 8 12\n", "output": "(8) - (11) = -3, left: -3, 12, 12\n(-3) / (12) = -1/4, left: -1/4, 12\n(11) + (8) = 19, left: 19, 12, 12\n(12) - (12) = 0, left: 0, 19\n(11) / (8) = 11/8, left: 11/8, 12, 12\n(11/8) / (12) = 11/96, left: 11/96, 12\n(11/96) / (12) = 11/1152, left: 11/1152\n(11) - (8) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "12 11 8 12\n", "output": "(12) - (12) = 0, left: 0, 11, 8\n(8) - (12) = -4, left: -4, 12, 11\n(12) / (-4) = -3, left: -3, 11\n(8) / (12) = 2/3, left: 2/3, 12, 11\n(12) * (11) = 132, left: 132, 2/3\n(8) + (12) = 20, left: 20, 12, 11\n(11) + (20) = 31, left: 31, 12\n(11) - (8) = 3, left: 3, 12, 12\n(12) * (3) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "2 2 2 5\n", "output": "(2) - (2) = 0, left: 0, 2, 5\n(2) * (2) = 4, left: 4, 2, 5\n(4) / (2) = 2, left: 2, 5\n(2) / (2) = 1, left: 1, 2, 5\n(2) / (2) = 1, left: 1, 2, 5\n(2) - (2) = 0, left: 0, 2, 5\n(2) - (2) = 0, left: 0, 2, 5\n(2) * (5) = 10, left: 10, 2, 2\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) / (2) = 1, left: 1, 2, 5\n(5) - (2) = 3, left: 3, 1\n(2) * (2) = 4, left: 4, 2, 5\n(2) + (2) = 4, left: 4, 2, 5\n(2) * (2) = 4, left: 4, 2, 5\n(2) - (2) = 0, left: 0, 2, 5\n(2) - (5) = -3, left: -3, 2, 2\n(2) * (5) = 10, left: 10, 2, 2\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) - (5) = -3, left: -3, 2, 2\n(-3) / (2) = -3/2, left: -3/2, 2\n(5) - (2) = 3, left: 3, 2, 2\n(2) / (3) = 2/3, left: 2/3, 2\n(5) / (2) = 5/2, left: 5/2, 2, 2\n(2) / (2) = 1, left: 1, 5/2\n(5/2) - (2) = 1/2, left: 1/2, 2\n(2) * (5) = 10, left: 10, 2, 2\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(5) / (2) = 5/2, left: 5/2, 2, 2\n(2) - (5/2) = -1/2, left: -1/2, 2\n(2) / (2) = 1, left: 1, 5/2\n(2) + (5) = 7, left: 7, 2, 2\n(2) * (7) = 14, left: 14, 2\n(2) / (7) = 2/7, left: 2/7, 2\n(2) * (5) = 10, left: 10, 2, 2\n(2) * (2) = 4, left: 4, 10\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) * (2) = 4, left: 4, 2, 5\n(2) - (2) = 0, left: 0, 2, 5\n(2) - (2) = 0, left: 0, 2, 5\n(2) + (0) = 2, left: 2, 5\n(2) / (2) = 1, left: 1, 2, 5\n(5) - (1) = 4, left: 4, 2\n(2) - (5) = -3, left: -3, 2, 2\n(2) * (5) = 10, left: 10, 2, 2\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) / (2) = 1, left: 1, 2, 5\n(2) / (2) = 1, left: 1, 2, 5\n(5) - (2) = 3, left: 3, 1\n(2) + (2) = 4, left: 4, 2, 5\n(2) - (2) = 0, left: 0, 2, 5\n(2) + (0) = 2, left: 2, 5\n(2) / (2) = 1, left: 1, 2, 5\n(2) / (2) = 1, left: 1, 2, 5\n(2) - (2) = 0, left: 0, 2, 5\n(2) * (0) = 0, left: 0, 5\n(5) / (2) = 5/2, left: 5/2, 2, 2\n(2) * (5) = 10, left: 10, 2, 2\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) - (5) = -3, left: -3, 2, 2\n(-3) / (2) = -3/2, left: -3/2, 2\n(2) + (-3) = -1, left: -1, 2\n(5) - (2) = 3, left: 3, 2, 2\n(2) / (5) = 2/5, left: 2/5, 2, 2\n(2) / (2/5) = 5, left: 5, 2\n(2/5) / (2) = 1/5, left: 1/5, 2\n(2) + (1/5) = 11/5, left: 11/5\n(5) / (2) = 5/2, left: 5/2, 2, 2\n(5/2) - (2) = 1/2, left: 1/2, 2\n(2) + (2) = 4, left: 4, 5/2\n(2) * (5) = 10, left: 10, 2, 2\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) - (2) = 0, left: 0, 2, 5\n(2) / (2) = 1, left: 1, 2, 5\n(2) * (2) = 4, left: 4, 2, 5\n(4) / (2) = 2, left: 2, 5\n(2) / (2) = 1, left: 1, 2, 5\n(2) / (2) = 1, left: 1, 2, 5\n(2) / (5) = 2/5, left: 2/5, 1\n(2/5) - (1) = -3/5, left: -3/5\n(2) + (2) = 4, left: 4, 2, 5\n(2) - (2) = 0, left: 0, 2, 5\n(2) + (5) = 7, left: 7, 2, 2\n(2) * (5) = 10, left: 10, 2, 2\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) * (2) = 4, left: 4, 2, 5\n(2) / (4) = 1/2, left: 1/2, 5\n(5) / (1/2) = 10, left: 10\n(5) - (4) = 1, left: 1, 2\n(2) / (2) = 1, left: 1, 2, 5\n(5) - (2) = 3, left: 3, 1\n(2) + (2) = 4, left: 4, 2, 5\n(2) / (2) = 1, left: 1, 2, 5\n(2) + (2) = 4, left: 4, 2, 5\n(2) - (5) = -3, left: -3, 2, 2\n(2) / (-3) = -2/3, left: -2/3, 2\n(2) * (5) = 10, left: 10, 2, 2\n(2) + (10) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "12 2 11 4\n", "output": "(12) + (2) = 14, left: 14, 11, 4\n(12) * (2) = 24, left: 24, 11, 4\n(4) + (24) = 28, left: 28, 11\n(2) - (12) = -10, left: -10, 11, 4\n(2) * (11) = 22, left: 22, 12, 4\n(2) - (11) = -9, left: -9, 12, 4\n(-9) - (12) = -21, left: -21, 4\n(11) - (2) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "12 2 11 4\n", "output": "(11) / (2) = 11/2, left: 11/2, 12, 4\n(4) / (12) = 1/3, left: 1/3, 11/2\n(2) * (11) = 22, left: 22, 12, 4\n(12) - (4) = 8, left: 8, 22\n(8) / (22) = 4/11, left: 4/11\n(12) / (22) = 6/11, left: 6/11, 4\n(4) - (6/11) = 38/11, left: 38/11\n(11) - (2) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "12 2 11 4\n", "output": "(12) * (11) = 132, left: 132, 2, 4\n(2) - (4) = -2, left: -2, 132\n(12) / (11) = 12/11, left: 12/11, 2, 4\n(4) - (2) = 2, left: 2, 12/11\n(4) - (12) = -8, left: -8, 2, 11\n(11) / (4) = 11/4, left: 11/4, 12, 2\n(12) + (2) = 14, left: 14, 11/4\n(11) - (2) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "12 2 11 4\n", "output": "(2) / (12) = 1/6, left: 1/6, 11, 4\n(12) * (2) = 24, left: 24, 11, 4\n(12) / (2) = 6, left: 6, 11, 4\n(12) + (2) = 14, left: 14, 11, 4\n(4) / (11) = 4/11, left: 4/11, 14\n(2) + (11) = 13, left: 13, 12, 4\n(2) * (11) = 22, left: 22, 12, 4\n(11) - (2) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "12 2 11 4\n", "output": "(12) - (11) = 1, left: 1, 2, 4\n(11) - (12) = -1, left: -1, 2, 4\n(4) - (11) = -7, left: -7, 12, 2\n(11) + (4) = 15, left: 15, 12, 2\n(2) - (4) = -2, left: -2, 12, 11\n(4) / (12) = 1/3, left: 1/3, 2, 11\n(2) + (11) = 13, left: 13, 12, 4\n(11) - (2) = 9, left: 9, 12, 4\n(4) * (9) = 36, left: 36, 12\n(36) - (12) = 24, left: 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "3 12 8 11\n", "output": "(12) / (11) = 12/11, left: 12/11, 3, 8\n(12) + (11) = 23, left: 23, 3, 8\n(3) / (8) = 3/8, left: 3/8, 23\n(12) - (11) = 1, left: 1, 3, 8\n(3) * (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (3 * (12 - 11)))"}, {"input": "3 12 8 11\n", "output": "(3) + (8) = 11, left: 11, 12, 11\n(3) / (8) = 3/8, left: 3/8, 12, 11\n(3/8) - (11) = -85/8, left: -85/8, 12\n(3) * (8) = 24, left: 24, 12, 11\n(12) - (11) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (12 - 11))"}, {"input": "3 12 8 11\n", "output": "(8) - (3) = 5, left: 5, 12, 11\n(3) - (8) = -5, left: -5, 12, 11\n(3) / (8) = 3/8, left: 3/8, 12, 11\n(3/8) / (12) = 1/32, left: 1/32, 11\n(11) / (3/8) = 88/3, left: 88/3, 12\n(3/8) / (11) = 3/88, left: 3/88, 12\n(12) * (11) = 132, left: 132, 3/8\n(3) * (8) = 24, left: 24, 12, 11\n(12) - (11) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (12 - 11))"}, {"input": "3 12 8 11\n", "output": "(3) + (8) = 11, left: 11, 12, 11\n(12) - (11) = 1, left: 1, 11\n(12) * (11) = 132, left: 132, 11\n(8) / (3) = 8/3, left: 8/3, 12, 11\n(12) / (11) = 12/11, left: 12/11, 8/3\n(3) / (8) = 3/8, left: 3/8, 12, 11\n(12) - (3/8) = 93/8, left: 93/8, 11\n(3) * (8) = 24, left: 24, 12, 11\n(12) - (11) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (12 - 11))"}, {"input": "3 12 8 11\n", "output": "(3) / (12) = 1/4, left: 1/4, 8, 11\n(3) + (11) = 14, left: 14, 12, 8\n(12) - (14) = -2, left: -2, 8\n(8) + (-2) = 6, left: 6\n(11) - (3) = 8, left: 8, 12, 8\n(3) * (11) = 33, left: 33, 12, 8\n(11) - (12) = -1, left: -1, 3, 8\n(12) - (11) = 1, left: 1, 3, 8\n(3) * (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (3 * (12 - 11)))"}, {"input": "3 12 8 11\n", "output": "(8) + (11) = 19, left: 19, 3, 12\n(11) - (8) = 3, left: 3, 3, 12\n(12) / (3) = 4, left: 4, 3\n(8) / (11) = 8/11, left: 8/11, 3, 12\n(12) * (8/11) = 96/11, left: 96/11, 3\n(96/11) - (3) = 63/11, left: 63/11\n(8) / (3) = 8/3, left: 8/3, 12, 11\n(3) * (8) = 24, left: 24, 12, 11\n(12) - (11) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((3 * 8) / (12 - 11))"}, {"input": "3 12 8 11\n", "output": "(3) + (8) = 11, left: 11, 12, 11\n(12) - (11) = 1, left: 1, 11\n(11) + (11) = 22, left: 22, 12\n(8) / (3) = 8/3, left: 8/3, 12, 11\n(3) - (8) = -5, left: -5, 12, 11\n(12) / (-5) = -12/5, left: -12/5, 11\n(3) * (8) = 24, left: 24, 12, 11\n(24) - (12) = 12, left: 12, 11\n(12) - (11) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((3 * 8) * (12 - 11))"}, {"input": "10 3 10 6\n", "output": "(10) + (6) = 16, left: 16, 10, 3\n(10) * (16) = 160, left: 160, 3\n(6) - (10) = -4, left: -4, 10, 3\n(6) / (10) = 3/5, left: 3/5, 10, 3\n(3) - (3/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "10 3 10 6\n", "output": "(10) * (3) = 30, left: 30, 10, 6\n(3) / (10) = 3/10, left: 3/10, 10, 6\n(10) / (3) = 10/3, left: 10/3, 10, 6\n(6) / (10) = 3/5, left: 3/5, 3, 10\n(3) - (3/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "10 3 10 6\n", "output": "(10) + (3) = 13, left: 13, 10, 6\n(10) / (6) = 5/3, left: 5/3, 10, 3\n(10) - (3) = 7, left: 7, 5/3\n(6) / (10) = 3/5, left: 3/5, 10, 3\n(3) - (3/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "10 3 10 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 3, 10\n(10) - (3/5) = 47/5, left: 47/5, 3\n(3/5) - (3) = -12/5, left: -12/5, 10\n(3) / (3/5) = 5, left: 5, 10\n(3) - (3/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "10 3 10 6\n", "output": "(10) * (6) = 60, left: 60, 10, 3\n(6) - (10) = -4, left: -4, 10, 3\n(-4) / (10) = -2/5, left: -2/5, 3\n(10) - (6) = 4, left: 4, 10, 3\n(10) + (3) = 13, left: 13, 4\n(6) / (10) = 3/5, left: 3/5, 10, 3\n(10) + (3/5) = 53/5, left: 53/5, 3\n(3) - (53/5) = -38/5, left: -38/5\n(3) - (3/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "10 3 10 6\n", "output": "(10) + (6) = 16, left: 16, 10, 3\n(10) - (16) = -6, left: -6, 3\n(10) - (6) = 4, left: 4, 10, 3\n(10) * (3) = 30, left: 30, 4\n(6) - (10) = -4, left: -4, 10, 3\n(-4) / (10) = -2/5, left: -2/5, 3\n(-2/5) / (3) = -2/15, left: -2/15\n(6) / (10) = 3/5, left: 3/5, 10, 3\n(3) - (3/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "10 3 10 6\n", "output": "(3) + (6) = 9, left: 9, 10, 10\n(9) / (10) = 9/10, left: 9/10, 10\n(10) * (9) = 90, left: 90, 10\n(3) * (10) = 30, left: 30, 10, 6\n(3) - (10) = -7, left: -7, 10, 6\n(3) + (10) = 13, left: 13, 10, 6\n(10) - (3) = 7, left: 7, 10, 6\n(6) / (10) = 3/5, left: 3/5, 3, 10\n(3) - (3/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "10 3 10 6\n", "output": "(6) / (10) = 3/5, left: 3/5, 3, 10\n(3/5) / (10) = 3/50, left: 3/50, 3\n(3/50) / (3) = 1/50, left: 1/50\n(10) + (3/5) = 53/5, left: 53/5, 3\n(53/5) / (3) = 53/15, left: 53/15\n(3/5) - (3) = -12/5, left: -12/5, 10\n(10) + (-12/5) = 38/5, left: 38/5\n(3) / (3/5) = 5, left: 5, 10\n(3) - (3/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "10 3 10 6\n", "output": "(10) / (3) = 10/3, left: 10/3, 10, 6\n(6) * (10/3) = 20, left: 20, 10\n(3) - (10) = -7, left: -7, 10, 6\n(10) + (3) = 13, left: 13, 10, 6\n(10) - (3) = 7, left: 7, 10, 6\n(10) / (6) = 5/3, left: 5/3, 10, 3\n(6) - (10) = -4, left: -4, 10, 3\n(6) / (10) = 3/5, left: 3/5, 10, 3\n(3) - (3/5) = 12/5, left: 12/5, 10\n(10) * (12/5) = 24, left: 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "11 1 6 3\n", "output": "(6) * (3) = 18, left: 18, 11, 1\n(6) + (3) = 9, left: 9, 11, 1\n(6) - (3) = 3, left: 3, 11, 1\n(11) * (3) = 33, left: 33, 1\n(1) / (33) = 1/33, left: 1/33\n(3) - (6) = -3, left: -3, 11, 1\n(11) / (1) = 11, left: 11, -3\n(6) / (3) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 / 3) * (11 + 1))"}, {"input": "11 1 6 3\n", "output": "(6) - (3) = 3, left: 3, 11, 1\n(3) - (1) = 2, left: 2, 11\n(1) - (3) = -2, left: -2, 11\n(1) + (3) = 4, left: 4, 11\n(11) / (3) = 11/3, left: 11/3, 1\n(3) - (11) = -8, left: -8, 1\n(6) / (3) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 / 3) * (11 + 1))"}, {"input": "11 1 6 3\n", "output": "(3) / (11) = 3/11, left: 3/11, 1, 6\n(3) - (11) = -8, left: -8, 1, 6\n(1) / (6) = 1/6, left: 1/6, -8\n(1) * (6) = 6, left: 6, -8\n(11) / (6) = 11/6, left: 11/6, 1, 3\n(11) + (6) = 17, left: 17, 1, 3\n(11) * (1) = 11, left: 11, 6, 3\n(11) + (1) = 12, left: 12, 6, 3\n(6) * (12) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((6 * (11 + 1)) / 3)"}, {"input": "11 1 6 3\n", "output": "(1) / (11) = 1/11, left: 1/11, 6, 3\n(1/11) - (3) = -32/11, left: -32/11, 6\n(11) * (1) = 11, left: 11, 6, 3\n(6) - (3) = 3, left: 3, 11\n(11) / (1) = 11, left: 11, 6, 3\n(1) - (11) = -10, left: -10, 6, 3\n(11) - (1) = 10, left: 10, 6, 3\n(10) - (6) = 4, left: 4, 3\n(3) * (10) = 30, left: 30, 6\n(30) - (6) = 24, left: 24\nreach 24! expression: ((3 * (11 - 1)) - 6)"}, {"input": "11 1 6 3\n", "output": "(1) - (6) = -5, left: -5, 11, 3\n(11) + (-5) = 6, left: 6, 3\n(1) * (6) = 6, left: 6, 11, 3\n(11) / (3) = 11/3, left: 11/3, 1, 6\n(1) * (11/3) = 11/3, left: 11/3, 6\n(11) - (3) = 8, left: 8, 1, 6\n(1) / (8) = 1/8, left: 1/8, 6\n(6) / (3) = 2, left: 2, 11, 1\n(11) + (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((6 / 3) * (11 + 1))"}, {"input": "11 1 6 3\n", "output": "(11) / (3) = 11/3, left: 11/3, 1, 6\n(3) / (11) = 3/11, left: 3/11, 1, 6\n(3) - (11) = -8, left: -8, 1, 6\n(11) - (3) = 8, left: 8, 1, 6\n(11) - (6) = 5, left: 5, 1, 3\n(11) + (6) = 17, left: 17, 1, 3\n(6) - (11) = -5, left: -5, 1, 3\n(3) - (-5) = 8, left: 8, 1\n(1) / (11) = 1/11, left: 1/11, 6, 3\n(6) / (3) = 2, left: 2, 1/11\n(2) / (1/11) = 22, left: 22\n(11) + (1) = 12, left: 12, 6, 3\n(6) * (12) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((6 * (11 + 1)) / 3)"}, {"input": "1 4 3 8\n", "output": "(4) / (3) = 4/3, left: 4/3, 1, 8\n(4/3) - (1) = 1/3, left: 1/3, 8\n(8) - (1/3) = 23/3, left: 23/3\n(1/3) / (8) = 1/24, left: 1/24\n(1/3) - (8) = -23/3, left: -23/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((4 / 3) - 1))"}, {"input": "1 4 3 8\n", "output": "(4) / (3) = 4/3, left: 4/3, 1, 8\n(4/3) - (1) = 1/3, left: 1/3, 8\n(8) - (1/3) = 23/3, left: 23/3\n(1/3) / (8) = 1/24, left: 1/24\n(1/3) - (8) = -23/3, left: -23/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((4 / 3) - 1))"}, {"input": "1 4 3 8\n", "output": "(1) + (3) = 4, left: 4, 4, 8\n(4) + (4) = 8, left: 8, 8\n(8) / (8) = 1, left: 1\n(4) - (4) = 0, left: 0, 8\n(4) / (4) = 1, left: 1, 8\n(1) - (8) = -7, left: -7\n(4) * (4) = 16, left: 16, 8\n(16) / (8) = 2, left: 2\n(8) / (16) = 1/2, left: 1/2\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (1 + 3)))"}, {"input": "1 4 3 8\n", "output": "(4) - (8) = -4, left: -4, 1, 3\n(8) - (4) = 4, left: 4, 1, 3\n(4) / (8) = 1/2, left: 1/2, 1, 3\n(8) / (4) = 2, left: 2, 1, 3\n(3) + (2) = 5, left: 5, 1\n(4) * (8) = 32, left: 32, 1, 3\n(32) - (3) = 29, left: 29, 1\n(4) + (8) = 12, left: 12, 1, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((4 + 8) * (3 - 1))"}, {"input": "1 4 3 8\n", "output": "(8) / (4) = 2, left: 2, 1, 3\n(2) / (3) = 2/3, left: 2/3, 1\n(4) * (8) = 32, left: 32, 1, 3\n(1) * (3) = 3, left: 3, 32\n(3) - (32) = -29, left: -29\n(3) * (32) = 96, left: 96, 1\n(4) + (8) = 12, left: 12, 1, 3\n(1) + (3) = 4, left: 4, 12\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((4 + 8) * (3 - 1))"}, {"input": "1 4 3 8\n", "output": "(1) * (8) = 8, left: 8, 4, 3\n(8) / (4) = 2, left: 2, 3\n(3) - (4) = -1, left: -1, 8\n(8) / (1) = 8, left: 8, 4, 3\n(4) / (3) = 4/3, left: 4/3, 8\n(4) * (8) = 32, left: 32, 3\n(1) + (8) = 9, left: 9, 4, 3\n(4) * (3) = 12, left: 12, 9\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((1 + 8) - 3))"}, {"input": "1 4 3 8\n", "output": "(4) / (3) = 4/3, left: 4/3, 1, 8\n(4/3) - (1) = 1/3, left: 1/3, 8\n(8) - (1/3) = 23/3, left: 23/3\n(1/3) / (8) = 1/24, left: 1/24\n(1/3) - (8) = -23/3, left: -23/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((4 / 3) - 1))"}, {"input": "1 4 3 8\n", "output": "(8) - (4) = 4, left: 4, 1, 3\n(3) - (4) = -1, left: -1, 1\n(4) - (3) = 1, left: 1, 1\n(1) - (1) = 0, left: 0\n(4) / (3) = 4/3, left: 4/3, 1\n(4) / (8) = 1/2, left: 1/2, 1, 3\n(3) / (1/2) = 6, left: 6, 1\n(8) / (4) = 2, left: 2, 1, 3\n(2) / (3) = 2/3, left: 2/3, 1\n(4) * (8) = 32, left: 32, 1, 3\n(3) / (1) = 3, left: 3, 32\n(4) + (8) = 12, left: 12, 1, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((4 + 8) * (3 - 1))"}, {"input": "1 4 3 8\n", "output": "(1) + (3) = 4, left: 4, 4, 8\n(4) - (4) = 0, left: 0, 8\n(8) * (0) = 0, left: 0\n(0) - (8) = -8, left: -8\n(0) / (8) = 0, left: 0\n(4) + (4) = 8, left: 8, 8\n(8) * (8) = 64, left: 64\n(8) - (8) = 0, left: 0\n(8) - (8) = 0, left: 0\n(4) - (4) = 0, left: 0, 8\n(8) + (0) = 8, left: 8\n(4) / (4) = 1, left: 1, 8\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (4 * (1 + 3)))"}, {"input": "1 4 3 8\n", "output": "(1) * (8) = 8, left: 8, 4, 3\n(4) + (8) = 12, left: 12, 3\n(12) / (3) = 4, left: 4\n(3) - (4) = -1, left: -1, 8\n(3) / (4) = 3/4, left: 3/4, 8\n(4) - (3) = 1, left: 1, 8\n(8) / (1) = 8, left: 8, 4, 3\n(8) / (3) = 8/3, left: 8/3, 4\n(4) - (8) = -4, left: -4, 3\n(8) / (4) = 2, left: 2, 3\n(1) + (8) = 9, left: 9, 4, 3\n(9) - (3) = 6, left: 6, 4\n(6) - (4) = 2, left: 2\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((1 + 8) - 3))"}, {"input": "1 4 3 8\n", "output": "(4) / (3) = 4/3, left: 4/3, 1, 8\n(4/3) - (1) = 1/3, left: 1/3, 8\n(8) - (1/3) = 23/3, left: 23/3\n(1/3) / (8) = 1/24, left: 1/24\n(1/3) - (8) = -23/3, left: -23/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: (8 / ((4 / 3) - 1))"}, {"input": "2 13 6 8\n", "output": "(8) - (6) = 2, left: 2, 2, 13\n(13) - (2) = 11, left: 11, 2\n(13) / (2) = 13/2, left: 13/2, 2\n(13/2) / (2) = 13/4, left: 13/4\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * 13) - (8 - 6))"}, {"input": "2 13 6 8\n", "output": "(2) / (13) = 2/13, left: 2/13, 6, 8\n(2/13) - (6) = -76/13, left: -76/13, 8\n(8) + (-76/13) = 28/13, left: 28/13\n(2) * (13) = 26, left: 26, 6, 8\n(26) - (8) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + ((2 * 13) - 8))"}, {"input": "2 13 6 8\n", "output": "(8) - (6) = 2, left: 2, 2, 13\n(2) - (2) = 0, left: 0, 13\n(13) + (0) = 13, left: 13\n(2) - (2) = 0, left: 0, 13\n(0) - (13) = -13, left: -13\n(2) * (2) = 4, left: 4, 13\n(2) / (2) = 1, left: 1, 13\n(13) - (1) = 12, left: 12\n(2) * (13) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((2 * 13) - (8 - 6))"}, {"input": "2 13 6 8\n", "output": "(6) * (8) = 48, left: 48, 2, 13\n(2) - (13) = -11, left: -11, 48\n(2) * (13) = 26, left: 26, 48\n(13) * (48) = 624, left: 624, 2\n(8) / (6) = 4/3, left: 4/3, 2, 13\n(4/3) - (13) = -35/3, left: -35/3, 2\n(2) / (13) = 2/13, left: 2/13, 4/3\n(6) - (8) = -2, left: -2, 2, 13\n(2) * (13) = 26, left: 26, -2\n(-2) + (26) = 24, left: 24\nreach 24! expression: ((6 - 8) + (2 * 13))"}, {"input": "2 13 6 8\n", "output": "(8) / (2) = 4, left: 4, 13, 6\n(2) - (8) = -6, left: -6, 13, 6\n(6) / (13) = 6/13, left: 6/13, 2, 8\n(13) + (6) = 19, left: 19, 2, 8\n(13) * (6) = 78, left: 78, 2, 8\n(2) - (78) = -76, left: -76, 8\n(13) * (8) = 104, left: 104, 2, 6\n(13) + (8) = 21, left: 21, 2, 6\n(6) / (2) = 3, left: 3, 21\n(21) + (3) = 24, left: 24\nreach 24! expression: ((13 + 8) + (6 / 2))"}, {"input": "2 13 6 8\n", "output": "(2) / (13) = 2/13, left: 2/13, 6, 8\n(2/13) / (8) = 1/52, left: 1/52, 6\n(1/52) - (6) = -311/52, left: -311/52\n(6) / (8) = 3/4, left: 3/4, 2/13\n(13) / (2) = 13/2, left: 13/2, 6, 8\n(2) + (13) = 15, left: 15, 6, 8\n(15) / (6) = 5/2, left: 5/2, 8\n(2) * (13) = 26, left: 26, 6, 8\n(26) - (8) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + ((2 * 13) - 8))"}, {"input": "2 13 6 8\n", "output": "(2) - (8) = -6, left: -6, 13, 6\n(-6) - (13) = -19, left: -19, 6\n(2) / (8) = 1/4, left: 1/4, 13, 6\n(13) * (6) = 78, left: 78, 2, 8\n(2) - (78) = -76, left: -76, 8\n(6) - (13) = -7, left: -7, 2, 8\n(13) + (6) = 19, left: 19, 2, 8\n(8) - (6) = 2, left: 2, 2, 13\n(13) * (2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * (8 - 6)) - 2)"}, {"input": "2 13 6 8\n", "output": "(2) - (8) = -6, left: -6, 13, 6\n(2) + (8) = 10, left: 10, 13, 6\n(13) * (6) = 78, left: 78, 2, 8\n(13) - (6) = 7, left: 7, 2, 8\n(7) / (8) = 7/8, left: 7/8, 2\n(7) / (2) = 7/2, left: 7/2, 8\n(6) - (13) = -7, left: -7, 2, 8\n(6) / (13) = 6/13, left: 6/13, 2, 8\n(13) + (6) = 19, left: 19, 2, 8\n(13) / (6) = 13/6, left: 13/6, 2, 8\n(2) * (8) = 16, left: 16, 13/6\n(8) - (6) = 2, left: 2, 2, 13\n(13) * (2) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: ((13 * (8 - 6)) - 2)"}, {"input": "13 10 5 7\n", "output": "(13) * (5) = 65, left: 65, 10, 7\n(7) + (65) = 72, left: 72, 10\n(10) + (65) = 75, left: 75, 7\n(5) - (13) = -8, left: -8, 10, 7\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (7 - 10))"}, {"input": "13 10 5 7\n", "output": "(13) / (5) = 13/5, left: 13/5, 10, 7\n(7) - (13/5) = 22/5, left: 22/5, 10\n(5) - (13) = -8, left: -8, 10, 7\n(7) + (-8) = -1, left: -1, 10\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (7 - 10))"}, {"input": "13 10 5 7\n", "output": "(13) / (10) = 13/10, left: 13/10, 5, 7\n(13) * (5) = 65, left: 65, 10, 7\n(7) * (65) = 455, left: 455, 10\n(5) - (13) = -8, left: -8, 10, 7\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (7 - 10))"}, {"input": "13 10 5 7\n", "output": "(5) - (13) = -8, left: -8, 10, 7\n(10) / (-8) = -5/4, left: -5/4, 7\n(10) + (-8) = 2, left: 2, 7\n(-8) / (10) = -4/5, left: -4/5, 7\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (7 - 10))"}, {"input": "13 10 5 7\n", "output": "(13) / (5) = 13/5, left: 13/5, 10, 7\n(10) - (13/5) = 37/5, left: 37/5, 7\n(7) - (37/5) = -2/5, left: -2/5\n(10) + (13/5) = 63/5, left: 63/5, 7\n(10) * (7) = 70, left: 70, 13/5\n(13) * (5) = 65, left: 65, 10, 7\n(10) * (65) = 650, left: 650, 7\n(5) - (13) = -8, left: -8, 10, 7\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (7 - 10))"}, {"input": "13 10 5 7\n", "output": "(13) / (5) = 13/5, left: 13/5, 10, 7\n(7) - (10) = -3, left: -3, 13/5\n(10) * (7) = 70, left: 70, 13/5\n(13/5) / (10) = 13/50, left: 13/50, 7\n(5) - (13) = -8, left: -8, 10, 7\n(7) + (-8) = -1, left: -1, 10\n(10) + (-1) = 9, left: 9\n(10) - (7) = 3, left: 3, -8\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (7 - 10))"}, {"input": "13 10 5 7\n", "output": "(5) - (13) = -8, left: -8, 10, 7\n(10) * (-8) = -80, left: -80, 7\n(-80) / (7) = -80/7, left: -80/7\n(-8) / (10) = -4/5, left: -4/5, 7\n(7) / (-4/5) = -35/4, left: -35/4\n(10) - (7) = 3, left: 3, -8\n(-8) / (3) = -8/3, left: -8/3\n(7) / (10) = 7/10, left: 7/10, -8\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (7 - 10))"}, {"input": "13 10 5 7\n", "output": "(5) + (7) = 12, left: 12, 13, 10\n(10) / (13) = 10/13, left: 10/13, 5, 7\n(7) / (10/13) = 91/10, left: 91/10, 5\n(10) - (13) = -3, left: -3, 5, 7\n(13) + (7) = 20, left: 20, 10, 5\n(13) * (7) = 91, left: 91, 10, 5\n(5) / (10) = 1/2, left: 1/2, 13, 7\n(7) - (10) = -3, left: -3, 13, 5\n(5) - (13) = -8, left: -8, -3\n(-3) * (-8) = 24, left: 24\nreach 24! expression: ((7 - 10) * (5 - 13))"}, {"input": "13 10 5 7\n", "output": "(13) * (10) = 130, left: 130, 5, 7\n(5) / (130) = 1/26, left: 1/26, 7\n(13) + (10) = 23, left: 23, 5, 7\n(10) - (13) = -3, left: -3, 5, 7\n(5) / (13) = 5/13, left: 5/13, 10, 7\n(10) * (5/13) = 50/13, left: 50/13, 7\n(13) * (5) = 65, left: 65, 10, 7\n(5) - (13) = -8, left: -8, 10, 7\n(7) - (10) = -3, left: -3, -8\n(-8) * (-3) = 24, left: 24\nreach 24! expression: ((5 - 13) * (7 - 10))"}, {"input": "2 5 9 12\n", "output": "(2) / (12) = 1/6, left: 1/6, 5, 9\n(5) - (9) = -4, left: -4, 1/6\n(1/6) - (-4) = 25/6, left: 25/6\n(1/6) / (-4) = -1/24, left: -1/24\n(9) - (5) = 4, left: 4, 1/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((9 - 5) / (2 / 12))"}, {"input": "2 5 9 12\n", "output": "(9) - (5) = 4, left: 4, 2, 12\n(2) * (4) = 8, left: 8, 12\n(8) / (12) = 2/3, left: 2/3\n(2) / (4) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 / (9 - 5)))"}, {"input": "2 5 9 12\n", "output": "(5) + (9) = 14, left: 14, 2, 12\n(2) - (14) = -12, left: -12, 12\n(-12) / (12) = -1, left: -1\n(12) + (-12) = 0, left: 0\n(12) / (-12) = -1, left: -1\n(12) * (-12) = -144, left: -144\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 - (5 + 9)))"}, {"input": "2 5 9 12\n", "output": "(9) - (12) = -3, left: -3, 2, 5\n(9) / (12) = 3/4, left: 3/4, 2, 5\n(5) * (3/4) = 15/4, left: 15/4, 2\n(3/4) - (5) = -17/4, left: -17/4, 2\n(2) + (5) = 7, left: 7, 3/4\n(12) / (9) = 4/3, left: 4/3, 2, 5\n(5) * (4/3) = 20/3, left: 20/3, 2\n(9) + (12) = 21, left: 21, 2, 5\n(21) - (2) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((9 + 12) - 2))"}, {"input": "2 5 9 12\n", "output": "(9) - (5) = 4, left: 4, 2, 12\n(2) * (4) = 8, left: 8, 12\n(8) / (12) = 2/3, left: 2/3\n(12) / (8) = 3/2, left: 3/2\n(12) * (8) = 96, left: 96\n(12) + (8) = 20, left: 20\n(12) - (8) = 4, left: 4\n(2) / (4) = 1/2, left: 1/2, 12\n(12) - (1/2) = 23/2, left: 23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 / (9 - 5)))"}, {"input": "2 5 9 12\n", "output": "(12) - (2) = 10, left: 10, 5, 9\n(10) / (9) = 10/9, left: 10/9, 5\n(5) * (10/9) = 50/9, left: 50/9\n(5) + (10/9) = 55/9, left: 55/9\n(9) - (10) = -1, left: -1, 5\n(5) * (-1) = -5, left: -5\n(-1) / (5) = -1/5, left: -1/5\n(5) - (-1) = 6, left: 6\n(9) + (10) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (9 + (12 - 2)))"}, {"input": "2 5 9 12\n", "output": "(2) / (12) = 1/6, left: 1/6, 5, 9\n(5) - (9) = -4, left: -4, 1/6\n(-4) / (1/6) = -24, left: -24\n(1/6) - (-4) = 25/6, left: 25/6\n(-4) - (1/6) = -25/6, left: -25/6\n(1/6) * (-4) = -2/3, left: -2/3\n(1/6) + (-4) = -23/6, left: -23/6\n(9) - (5) = 4, left: 4, 1/6\n(4) - (1/6) = 23/6, left: 23/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((9 - 5) / (2 / 12))"}, {"input": "2 5 9 12\n", "output": "(5) + (9) = 14, left: 14, 2, 12\n(2) - (14) = -12, left: -12, 12\n(-12) / (12) = -1, left: -1\n(12) + (-12) = 0, left: 0\n(12) / (-12) = -1, left: -1\n(12) * (-12) = -144, left: -144\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 - (5 + 9)))"}, {"input": "2 5 9 12\n", "output": "(9) - (5) = 4, left: 4, 2, 12\n(2) * (4) = 8, left: 8, 12\n(8) - (12) = -4, left: -4\n(8) / (12) = 2/3, left: 2/3\n(12) / (8) = 3/2, left: 3/2\n(12) * (8) = 96, left: 96\n(12) + (8) = 20, left: 20\n(12) - (8) = 4, left: 4\n(2) / (4) = 1/2, left: 1/2, 12\n(12) * (1/2) = 6, left: 6\n(12) + (1/2) = 25/2, left: 25/2\n(12) - (1/2) = 23/2, left: 23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 / (9 - 5)))"}, {"input": "2 5 9 12\n", "output": "(2) / (12) = 1/6, left: 1/6, 5, 9\n(5) - (9) = -4, left: -4, 1/6\n(-4) / (1/6) = -24, left: -24\n(1/6) - (-4) = 25/6, left: 25/6\n(1/6) / (-4) = -1/24, left: -1/24\n(-4) - (1/6) = -25/6, left: -25/6\n(1/6) * (-4) = -2/3, left: -2/3\n(1/6) + (-4) = -23/6, left: -23/6\n(9) - (5) = 4, left: 4, 1/6\n(4) - (1/6) = 23/6, left: 23/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((9 - 5) / (2 / 12))"}, {"input": "2 5 9 12\n", "output": "(5) + (9) = 14, left: 14, 2, 12\n(2) - (14) = -12, left: -12, 12\n(-12) / (12) = -1, left: -1\n(12) + (-12) = 0, left: 0\n(12) / (-12) = -1, left: -1\n(12) * (-12) = -144, left: -144\n(12) - (-12) = 24, left: 24\nreach 24! expression: (12 - (2 - (5 + 9)))"}, {"input": "2 5 9 12\n", "output": "(9) - (5) = 4, left: 4, 2, 12\n(2) * (4) = 8, left: 8, 12\n(8) - (12) = -4, left: -4\n(8) / (12) = 2/3, left: 2/3\n(12) / (8) = 3/2, left: 3/2\n(12) * (8) = 96, left: 96\n(12) + (8) = 20, left: 20\n(12) - (8) = 4, left: 4\n(2) / (4) = 1/2, left: 1/2, 12\n(12) * (1/2) = 6, left: 6\n(12) + (1/2) = 25/2, left: 25/2\n(12) - (1/2) = 23/2, left: 23/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: (12 / (2 / (9 - 5)))"}, {"input": "2 5 9 12\n", "output": "(2) / (12) = 1/6, left: 1/6, 5, 9\n(5) - (9) = -4, left: -4, 1/6\n(-4) / (1/6) = -24, left: -24\n(1/6) - (-4) = 25/6, left: 25/6\n(1/6) / (-4) = -1/24, left: -1/24\n(-4) - (1/6) = -25/6, left: -25/6\n(1/6) * (-4) = -2/3, left: -2/3\n(1/6) + (-4) = -23/6, left: -23/6\n(9) - (5) = 4, left: 4, 1/6\n(4) - (1/6) = 23/6, left: 23/6\n(4) / (1/6) = 24, left: 24\nreach 24! expression: ((9 - 5) / (2 / 12))"}, {"input": "3 6 6 7\n", "output": "(3) * (6) = 18, left: 18, 6, 7\n(18) / (7) = 18/7, left: 18/7, 6\n(6) * (18/7) = 108/7, left: 108/7\n(6) / (18) = 1/3, left: 1/3, 7\n(6) * (7) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((6 * 7) - (3 * 6))"}, {"input": "3 6 6 7\n", "output": "(3) * (6) = 18, left: 18, 6, 7\n(18) / (7) = 18/7, left: 18/7, 6\n(6) / (18) = 1/3, left: 1/3, 7\n(6) + (18) = 24, left: 24, 7\n(6) + (7) = 13, left: 13, 18\n(13) - (18) = -5, left: -5\n(7) - (6) = 1, left: 1, 18\n(7) / (6) = 7/6, left: 7/6, 18\n(6) * (7) = 42, left: 42, 18\n(42) - (18) = 24, left: 24\nreach 24! expression: ((6 * 7) - (3 * 6))"}, {"input": "3 6 6 7\n", "output": "(7) - (6) = 1, left: 1, 3, 6\n(6) - (1) = 5, left: 5, 3\n(3) + (5) = 8, left: 8\n(6) * (1) = 6, left: 6, 3\n(1) / (3) = 1/3, left: 1/3, 6\n(6) - (1/3) = 17/3, left: 17/3\n(3) * (1) = 3, left: 3, 6\n(6) + (3) = 9, left: 9\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (7 - 6)))"}, {"input": "3 6 6 7\n", "output": "(3) / (7) = 3/7, left: 3/7, 6, 6\n(7) / (3) = 7/3, left: 7/3, 6, 6\n(6) - (7/3) = 11/3, left: 11/3, 6\n(3) * (7) = 21, left: 21, 6, 6\n(6) / (6) = 1, left: 1, 21\n(6) / (21) = 2/7, left: 2/7, 6\n(21) / (6) = 7/2, left: 7/2, 6\n(3) + (7) = 10, left: 10, 6, 6\n(10) - (6) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((3 + 7) - 6))"}, {"input": "3 6 6 7\n", "output": "(6) - (7) = -1, left: -1, 3, 6\n(-1) - (3) = -4, left: -4, 6\n(-4) / (6) = -2/3, left: -2/3\n(6) / (-4) = -3/2, left: -3/2\n(3) / (-1) = -3, left: -3, 6\n(-3) / (6) = -1/2, left: -1/2\n(-3) - (6) = -9, left: -9\n(3) - (-1) = 4, left: 4, 6\n(4) - (6) = -2, left: -2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (6 - 7)))"}, {"input": "3 6 6 7\n", "output": "(7) - (6) = 1, left: 1, 3, 6\n(1) - (6) = -5, left: -5, 3\n(1) / (6) = 1/6, left: 1/6, 3\n(6) / (1) = 6, left: 6, 3\n(3) + (6) = 9, left: 9\n(6) / (3) = 2, left: 2\n(6) * (1) = 6, left: 6, 3\n(3) + (6) = 9, left: 9\n(6) - (3) = 3, left: 3\n(3) - (6) = -3, left: -3\n(1) - (3) = -2, left: -2, 6\n(3) * (1) = 3, left: 3, 6\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (7 - 6)))"}, {"input": "3 6 6 7\n", "output": "(6) - (7) = -1, left: -1, 3, 6\n(-1) - (3) = -4, left: -4, 6\n(6) + (-4) = 2, left: 2\n(-4) - (6) = -10, left: -10\n(6) / (-4) = -3/2, left: -3/2\n(6) * (-4) = -24, left: -24\n(3) / (-1) = -3, left: -3, 6\n(6) + (-3) = 3, left: 3\n(-3) / (6) = -1/2, left: -1/2\n(6) * (-3) = -18, left: -18\n(6) / (-3) = -2, left: -2\n(3) - (-1) = 4, left: 4, 6\n(4) - (6) = -2, left: -2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 - (6 - 7)))"}, {"input": "3 9 3 6\n", "output": "(9) * (6) = 54, left: 54, 3, 3\n(3) - (54) = -51, left: -51, 3\n(6) / (9) = 2/3, left: 2/3, 3, 3\n(3) + (3) = 6, left: 6, 2/3\n(2/3) - (6) = -16/3, left: -16/3\n(6) - (9) = -3, left: -3, 3, 3\n(3) / (3) = 1, left: 1, -3\n(9) + (6) = 15, left: 15, 3, 3\n(3) * (3) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((9 + 6) + (3 * 3))"}, {"input": "3 9 3 6\n", "output": "(9) * (6) = 54, left: 54, 3, 3\n(3) / (54) = 1/18, left: 1/18, 3\n(3) + (1/18) = 55/18, left: 55/18\n(9) / (6) = 3/2, left: 3/2, 3, 3\n(3) / (3) = 1, left: 1, 3/2\n(3) + (3) = 6, left: 6, 3/2\n(3) / (3) = 1, left: 1, 3/2\n(9) + (6) = 15, left: 15, 3, 3\n(3) * (3) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((9 + 6) + (3 * 3))"}, {"input": "3 9 3 6\n", "output": "(3) / (9) = 1/3, left: 1/3, 3, 6\n(1/3) - (6) = -17/3, left: -17/3, 3\n(3) - (-17/3) = 26/3, left: 26/3\n(3) + (6) = 9, left: 9, 1/3\n(3) - (6) = -3, left: -3, 1/3\n(1/3) + (-3) = -8/3, left: -8/3\n(3) - (1/3) = 8/3, left: 8/3, 6\n(3) + (9) = 12, left: 12, 3, 6\n(3) / (12) = 1/4, left: 1/4, 6\n(6) / (1/4) = 24, left: 24\nreach 24! expression: (6 / (3 / (3 + 9)))"}, {"input": "3 9 3 6\n", "output": "(9) + (3) = 12, left: 12, 3, 6\n(3) + (12) = 15, left: 15, 6\n(6) - (15) = -9, left: -9\n(15) - (6) = 9, left: 9\n(15) / (6) = 5/2, left: 5/2\n(6) / (15) = 2/5, left: 2/5\n(6) + (15) = 21, left: 21\n(12) / (3) = 4, left: 4, 6\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 + 3) / 3))"}, {"input": "3 9 3 6\n", "output": "(3) / (3) = 1, left: 1, 9, 6\n(9) - (1) = 8, left: 8, 6\n(1) - (9) = -8, left: -8, 6\n(9) + (1) = 10, left: 10, 6\n(9) + (6) = 15, left: 15, 1\n(9) * (6) = 54, left: 54, 1\n(1) / (6) = 1/6, left: 1/6, 9\n(3) * (3) = 9, left: 9, 9, 6\n(9) + (9) = 18, left: 18, 6\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 + (3 * 3)))"}, {"input": "3 9 3 6\n", "output": "(3) / (3) = 1, left: 1, 9, 6\n(9) - (1) = 8, left: 8, 6\n(9) + (1) = 10, left: 10, 6\n(9) - (6) = 3, left: 3, 1\n(1) * (3) = 3, left: 3\n(1) - (6) = -5, left: -5, 9\n(6) / (1) = 6, left: 6, 9\n(9) - (6) = 3, left: 3\n(9) / (6) = 3/2, left: 3/2\n(6) + (1) = 7, left: 7, 9\n(3) * (3) = 9, left: 9, 9, 6\n(9) + (9) = 18, left: 18, 6\n(6) * (18) = 108, left: 108\n(6) + (18) = 24, left: 24\nreach 24! expression: (6 + (9 + (3 * 3)))"}, {"input": "3 9 3 6\n", "output": "(9) + (3) = 12, left: 12, 3, 6\n(3) + (12) = 15, left: 15, 6\n(6) - (15) = -9, left: -9\n(15) - (6) = 9, left: 9\n(15) / (6) = 5/2, left: 5/2\n(6) / (15) = 2/5, left: 2/5\n(6) + (15) = 21, left: 21\n(6) * (15) = 90, left: 90\n(12) / (3) = 4, left: 4, 6\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 + 3) / 3))"}, {"input": "3 9 3 6\n", "output": "(9) - (6) = 3, left: 3, 3, 3\n(3) - (3) = 0, left: 0, 3\n(3) + (3) = 6, left: 6, 3\n(6) - (3) = 3, left: 3\n(3) / (3) = 1, left: 1, 3\n(3) / (3) = 1, left: 1, 3\n(6) / (9) = 2/3, left: 2/3, 3, 3\n(3) - (2/3) = 7/3, left: 7/3, 3\n(6) - (9) = -3, left: -3, 3, 3\n(3) - (3) = 0, left: 0, -3\n(9) + (6) = 15, left: 15, 3, 3\n(3) - (3) = 0, left: 0, 15\n(3) * (3) = 9, left: 9, 15\n(15) + (9) = 24, left: 24\nreach 24! expression: ((9 + 6) + (3 * 3))"}, {"input": "3 9 3 6\n", "output": "(9) + (3) = 12, left: 12, 3, 6\n(3) + (12) = 15, left: 15, 6\n(6) - (15) = -9, left: -9\n(15) - (6) = 9, left: 9\n(15) / (6) = 5/2, left: 5/2\n(6) / (15) = 2/5, left: 2/5\n(6) + (15) = 21, left: 21\n(6) * (15) = 90, left: 90\n(12) / (3) = 4, left: 4, 6\n(6) / (4) = 3/2, left: 3/2\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((9 + 3) / 3))"}, {"input": "5 5 1 9\n", "output": "(5) + (1) = 6, left: 6, 5, 9\n(6) - (9) = -3, left: -3, 5\n(6) / (9) = 2/3, left: 2/3, 5\n(5) / (2/3) = 15/2, left: 15/2\n(5) - (9) = -4, left: -4, 6\n(5) + (9) = 14, left: 14, 6\n(6) + (14) = 20, left: 20\n(9) / (5) = 9/5, left: 9/5, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (9 - 5))"}, {"input": "5 5 1 9\n", "output": "(5) * (1) = 5, left: 5, 5, 9\n(1) / (5) = 1/5, left: 1/5, 5, 9\n(5) * (9) = 45, left: 45, 1/5\n(5) - (1) = 4, left: 4, 5, 9\n(5) + (4) = 9, left: 9, 9\n(1) - (5) = -4, left: -4, 5, 9\n(5) + (1) = 6, left: 6, 5, 9\n(9) / (5) = 9/5, left: 9/5, 6\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (9 - 5))"}, {"input": "5 5 1 9\n", "output": "(5) - (9) = -4, left: -4, 5, 1\n(1) / (5) = 1/5, left: 1/5, -4\n(1) + (-4) = -3, left: -3, 5\n(5) * (9) = 45, left: 45, 5, 1\n(5) - (45) = -40, left: -40, 1\n(5) + (45) = 50, left: 50, 1\n(9) - (5) = 4, left: 4, 5, 1\n(5) - (1) = 4, left: 4, 4\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((9 - 5) * (5 + 1))"}, {"input": "5 5 1 9\n", "output": "(5) - (9) = -4, left: -4, 5, 1\n(5) + (-4) = 1, left: 1, 1\n(5) * (9) = 45, left: 45, 5, 1\n(5) + (9) = 14, left: 14, 5, 1\n(5) / (9) = 5/9, left: 5/9, 5, 1\n(9) / (5) = 9/5, left: 9/5, 5, 1\n(1) / (5) = 1/5, left: 1/5, 9/5\n(9) - (5) = 4, left: 4, 5, 1\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((9 - 5) * (5 + 1))"}, {"input": "5 5 1 9\n", "output": "(5) * (5) = 25, left: 25, 1, 9\n(9) * (25) = 225, left: 225, 1\n(5) + (5) = 10, left: 10, 1, 9\n(1) * (10) = 10, left: 10, 9\n(5) - (5) = 0, left: 0, 1, 9\n(1) * (9) = 9, left: 9, 5, 5\n(5) - (9) = -4, left: -4, 5\n(5) + (1) = 6, left: 6, 5, 9\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (9 - 5))"}, {"input": "5 5 1 9\n", "output": "(5) * (1) = 5, left: 5, 5, 9\n(9) + (5) = 14, left: 14, 5\n(9) / (5) = 9/5, left: 9/5, 5\n(5) / (5) = 1, left: 1, 9\n(1) / (5) = 1/5, left: 1/5, 5, 9\n(5) - (9) = -4, left: -4, 1/5\n(5) - (1) = 4, left: 4, 5, 9\n(5) / (9) = 5/9, left: 5/9, 4\n(9) * (4) = 36, left: 36, 5\n(1) - (5) = -4, left: -4, 5, 9\n(5) - (-4) = 9, left: 9, 9\n(5) + (1) = 6, left: 6, 5, 9\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (9 - 5))"}, {"input": "5 5 1 9\n", "output": "(5) * (5) = 25, left: 25, 1, 9\n(1) - (25) = -24, left: -24, 9\n(5) + (5) = 10, left: 10, 1, 9\n(5) / (5) = 1, left: 1, 1, 9\n(5) - (5) = 0, left: 0, 1, 9\n(5) / (5) = 1, left: 1, 1, 9\n(9) + (1) = 10, left: 10, 1\n(9) - (1) = 8, left: 8, 5, 5\n(5) * (8) = 40, left: 40, 5\n(5) * (5) = 25, left: 25, 8\n(25) - (8) = 17, left: 17\n(5) + (1) = 6, left: 6, 5, 9\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((5 + 1) * (9 - 5))"}, {"input": "5 5 1 9\n", "output": "(5) - (9) = -4, left: -4, 5, 1\n(5) * (-4) = -20, left: -20, 1\n(1) - (-20) = 21, left: 21\n(-4) / (1) = -4, left: -4, 5\n(1) - (-4) = 5, left: 5, 5\n(5) * (9) = 45, left: 45, 5, 1\n(1) / (45) = 1/45, left: 1/45, 5\n(5) * (1/45) = 1/9, left: 1/9\n(5) - (45) = -40, left: -40, 1\n(45) / (5) = 9, left: 9, 1\n(1) - (5) = -4, left: -4, 45\n(9) - (5) = 4, left: 4, 5, 1\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((9 - 5) * (5 + 1))"}, {"input": "5 5 1 9\n", "output": "(5) - (9) = -4, left: -4, 5, 1\n(1) * (-4) = -4, left: -4, 5\n(5) * (9) = 45, left: 45, 5, 1\n(1) / (45) = 1/45, left: 1/45, 5\n(5) + (9) = 14, left: 14, 5, 1\n(5) / (9) = 5/9, left: 5/9, 5, 1\n(5) + (1) = 6, left: 6, 5/9\n(9) / (5) = 9/5, left: 9/5, 5, 1\n(9/5) - (1) = 4/5, left: 4/5, 5\n(5) * (1) = 5, left: 5, 9/5\n(9) - (5) = 4, left: 4, 5, 1\n(1) - (4) = -3, left: -3, 5\n(5) + (1) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: ((9 - 5) * (5 + 1))"}, {"input": "4 11 3 4\n", "output": "(3) * (4) = 12, left: 12, 4, 11\n(11) - (4) = 7, left: 7, 12\n(12) / (4) = 3, left: 3, 11\n(3) + (4) = 7, left: 7, 4, 11\n(3) - (4) = -1, left: -1, 4, 11\n(11) - (-1) = 12, left: 12, 4\n(12) - (4) = 8, left: 8\n(4) * (4) = 16, left: 16, 11, 3\n(16) - (3) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + ((4 * 4) - 3))"}, {"input": "4 11 3 4\n", "output": "(3) + (4) = 7, left: 7, 4, 11\n(3) * (4) = 12, left: 12, 4, 11\n(4) / (4) = 1, left: 1, 11, 3\n(4) - (4) = 0, left: 0, 11, 3\n(11) * (3) = 33, left: 33, 0\n(4) * (4) = 16, left: 16, 11, 3\n(16) / (11) = 16/11, left: 16/11, 3\n(3) - (16/11) = 17/11, left: 17/11\n(11) + (16) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((11 + (4 * 4)) - 3)"}, {"input": "4 11 3 4\n", "output": "(3) - (4) = -1, left: -1, 11, 4\n(4) - (-1) = 5, left: 5, 11\n(4) / (3) = 4/3, left: 4/3, 11, 4\n(4) + (3) = 7, left: 7, 11, 4\n(11) + (3) = 14, left: 14, 4, 4\n(4) * (14) = 56, left: 56, 4\n(56) / (4) = 14, left: 14\n(11) - (3) = 8, left: 8, 4, 4\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((11 - 3) + (4 * 4))"}, {"input": "4 11 3 4\n", "output": "(3) * (4) = 12, left: 12, 4, 11\n(11) + (12) = 23, left: 23, 4\n(4) / (23) = 4/23, left: 4/23\n(3) - (4) = -1, left: -1, 4, 11\n(3) + (4) = 7, left: 7, 4, 11\n(4) + (7) = 11, left: 11, 11\n(4) * (11) = 44, left: 44, 3, 4\n(3) - (11) = -8, left: -8, 4, 4\n(4) * (4) = 16, left: 16, -8\n(16) - (-8) = 24, left: 24\nreach 24! expression: ((4 * 4) - (3 - 11))"}, {"input": "4 11 3 4\n", "output": "(4) / (4) = 1, left: 1, 11, 3\n(11) / (3) = 11/3, left: 11/3, 1\n(4) - (4) = 0, left: 0, 11, 3\n(3) + (0) = 3, left: 3, 11\n(4) / (4) = 1, left: 1, 11, 3\n(11) + (1) = 12, left: 12, 3\n(4) - (4) = 0, left: 0, 11, 3\n(4) * (4) = 16, left: 16, 11, 3\n(3) - (16) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (3 - (4 * 4)))"}, {"input": "4 11 3 4\n", "output": "(3) - (4) = -1, left: -1, 11, 4\n(3) / (4) = 3/4, left: 3/4, 11, 4\n(4) * (3/4) = 3, left: 3, 11\n(4) / (3) = 4/3, left: 4/3, 11, 4\n(4) + (3) = 7, left: 7, 11, 4\n(11) - (7) = 4, left: 4, 4\n(4) - (3) = 1, left: 1, 11, 4\n(11) + (1) = 12, left: 12, 4\n(4) / (12) = 1/3, left: 1/3\n(11) * (4) = 44, left: 44, 1\n(4) * (3) = 12, left: 12, 11, 4\n(11) - (3) = 8, left: 8, 4, 4\n(4) * (4) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((11 - 3) + (4 * 4))"}, {"input": "8 8 8 4\n", "output": "(8) / (8) = 1, left: 1, 8, 4\n(4) - (8) = -4, left: -4, 1\n(4) / (8) = 1/2, left: 1/2, 1\n(1) / (8) = 1/8, left: 1/8, 4\n(4) - (1/8) = 31/8, left: 31/8\n(8) - (1) = 7, left: 7, 4\n(4) + (1) = 5, left: 5, 8\n(8) / (5) = 8/5, left: 8/5\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (8 / 8)))"}, {"input": "8 8 8 4\n", "output": "(8) / (4) = 2, left: 2, 8, 8\n(2) - (8) = -6, left: -6, 8\n(8) / (-6) = -4/3, left: -4/3\n(8) - (-6) = 14, left: 14\n(-6) - (8) = -14, left: -14\n(8) + (-6) = 2, left: 2\n(-6) / (8) = -3/4, left: -3/4\n(8) * (-6) = -48, left: -48\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (8 / 4)))"}, {"input": "8 8 8 4\n", "output": "(8) / (8) = 1, left: 1, 8, 4\n(4) / (8) = 1/2, left: 1/2, 1\n(8) - (4) = 4, left: 4, 1\n(1) + (4) = 5, left: 5\n(8) * (4) = 32, left: 32, 1\n(1) - (4) = -3, left: -3, 8\n(4) - (1) = 3, left: 3, 8\n(8) + (3) = 11, left: 11\n(3) / (8) = 3/8, left: 3/8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (8 / 8)))"}, {"input": "8 8 8 4\n", "output": "(8) - (4) = 4, left: 4, 8, 8\n(4) / (8) = 1/2, left: 1/2, 8\n(1/2) / (8) = 1/16, left: 1/16\n(4) - (8) = -4, left: -4, 8\n(8) / (-4) = -2, left: -2\n(-4) - (8) = -12, left: -12\n(8) - (4) = 4, left: 4, 8\n(8) * (4) = 32, left: 32\n(8) * (4) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((8 * (8 - 4)) - 8)"}, {"input": "8 8 8 4\n", "output": "(8) - (8) = 0, left: 0, 8, 4\n(8) - (8) = 0, left: 0, 8, 4\n(8) * (0) = 0, left: 0, 4\n(4) - (0) = 4, left: 4\n(8) + (8) = 16, left: 16, 8, 4\n(8) * (16) = 128, left: 128, 4\n(16) / (4) = 4, left: 4, 8\n(8) / (8) = 1, left: 1, 8, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (8 / 8)))"}, {"input": "8 8 8 4\n", "output": "(8) - (8) = 0, left: 0, 8, 4\n(8) - (0) = 8, left: 8, 4\n(4) - (0) = 4, left: 4, 8\n(8) - (8) = 0, left: 0, 8, 4\n(8) + (0) = 8, left: 8, 4\n(8) - (0) = 8, left: 8, 4\n(8) + (8) = 16, left: 16, 8, 4\n(8) / (16) = 1/2, left: 1/2, 4\n(16) / (8) = 2, left: 2, 4\n(8) * (16) = 128, left: 128, 4\n(4) - (128) = -124, left: -124\n(8) / (8) = 1, left: 1, 8, 4\n(4) - (1) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (4 - (8 / 8)))"}, {"input": "8 8 8 4\n", "output": "(8) / (4) = 2, left: 2, 8, 8\n(2) - (8) = -6, left: -6, 8\n(8) / (-6) = -4/3, left: -4/3\n(8) - (-6) = 14, left: 14\n(-6) - (8) = -14, left: -14\n(8) + (-6) = 2, left: 2\n(-6) / (8) = -3/4, left: -3/4\n(8) * (-6) = -48, left: -48\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (8 / 4)))"}, {"input": "8 8 8 4\n", "output": "(8) / (4) = 2, left: 2, 8, 8\n(2) - (8) = -6, left: -6, 8\n(8) / (-6) = -4/3, left: -4/3\n(8) - (-6) = 14, left: 14\n(-6) - (8) = -14, left: -14\n(8) + (-6) = 2, left: 2\n(-6) / (8) = -3/4, left: -3/4\n(8) * (-6) = -48, left: -48\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (8 * (8 / 4)))"}, {"input": "8 3 9 10\n", "output": "(10) - (8) = 2, left: 2, 3, 9\n(2) / (9) = 2/9, left: 2/9, 3\n(3) - (9) = -6, left: -6, 2\n(-6) / (2) = -3, left: -3\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (3 + 9))"}, {"input": "8 3 9 10\n", "output": "(10) / (9) = 10/9, left: 10/9, 8, 3\n(3) / (10/9) = 27/10, left: 27/10, 8\n(10/9) - (3) = -17/9, left: -17/9, 8\n(9) + (10) = 19, left: 19, 8, 3\n(8) + (19) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((8 + (9 + 10)) - 3)"}, {"input": "8 3 9 10\n", "output": "(8) * (3) = 24, left: 24, 9, 10\n(9) * (24) = 216, left: 216, 10\n(10) + (216) = 226, left: 226\n(24) - (9) = 15, left: 15, 10\n(10) - (9) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * 3) / (10 - 9))"}, {"input": "8 3 9 10\n", "output": "(10) - (8) = 2, left: 2, 3, 9\n(9) + (2) = 11, left: 11, 3\n(3) / (11) = 3/11, left: 3/11\n(9) / (2) = 9/2, left: 9/2, 3\n(2) - (9) = -7, left: -7, 3\n(9) - (2) = 7, left: 7, 3\n(3) + (7) = 10, left: 10\n(3) - (9) = -6, left: -6, 2\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (3 + 9))"}, {"input": "8 3 9 10\n", "output": "(8) * (3) = 24, left: 24, 9, 10\n(9) + (24) = 33, left: 33, 10\n(10) * (33) = 330, left: 330\n(10) - (33) = -23, left: -23\n(24) / (9) = 8/3, left: 8/3, 10\n(24) / (10) = 12/5, left: 12/5, 9\n(10) - (24) = -14, left: -14, 9\n(9) + (-14) = -5, left: -5\n(10) - (9) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((8 * 3) / (10 - 9))"}, {"input": "8 3 9 10\n", "output": "(8) * (10) = 80, left: 80, 3, 9\n(3) + (9) = 12, left: 12, 80\n(3) / (80) = 3/80, left: 3/80, 9\n(10) / (8) = 5/4, left: 5/4, 3, 9\n(9) + (5/4) = 41/4, left: 41/4, 3\n(3) * (5/4) = 15/4, left: 15/4, 9\n(3) - (9) = -6, left: -6, 5/4\n(8) + (10) = 18, left: 18, 3, 9\n(9) - (3) = 6, left: 6, 18\n(18) + (6) = 24, left: 24\nreach 24! expression: ((8 + 10) + (9 - 3))"}, {"input": "8 3 9 10\n", "output": "(8) - (10) = -2, left: -2, 3, 9\n(3) / (9) = 1/3, left: 1/3, -2\n(-2) - (1/3) = -7/3, left: -7/3\n(3) - (-2) = 5, left: 5, 9\n(-2) / (9) = -2/9, left: -2/9, 3\n(8) * (10) = 80, left: 80, 3, 9\n(80) - (3) = 77, left: 77, 9\n(10) - (8) = 2, left: 2, 3, 9\n(3) + (9) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((10 - 8) * (3 + 9))"}, {"input": "8 3 9 10\n", "output": "(10) / (9) = 10/9, left: 10/9, 8, 3\n(8) + (3) = 11, left: 11, 10/9\n(10/9) - (11) = -89/9, left: -89/9\n(9) / (10) = 9/10, left: 9/10, 8, 3\n(3) - (9/10) = 21/10, left: 21/10, 8\n(8) * (9/10) = 36/5, left: 36/5, 3\n(8) / (9/10) = 80/9, left: 80/9, 3\n(9) + (10) = 19, left: 19, 8, 3\n(8) + (19) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((8 + (9 + 10)) - 3)"}, {"input": "7 10 8 13\n", "output": "(10) + (8) = 18, left: 18, 7, 13\n(13) * (18) = 234, left: 234, 7\n(18) - (13) = 5, left: 5, 7\n(5) / (7) = 5/7, left: 5/7\n(13) + (18) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((13 + (10 + 8)) - 7)"}, {"input": "7 10 8 13\n", "output": "(10) / (8) = 5/4, left: 5/4, 7, 13\n(7) + (5/4) = 33/4, left: 33/4, 13\n(7) * (13) = 91, left: 91, 5/4\n(10) + (8) = 18, left: 18, 7, 13\n(13) + (18) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((13 + (10 + 8)) - 7)"}, {"input": "7 10 8 13\n", "output": "(10) - (7) = 3, left: 3, 8, 13\n(8) - (3) = 5, left: 5, 13\n(5) / (13) = 5/13, left: 5/13\n(8) * (3) = 24, left: 24, 13\n(8) + (3) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (8 + (10 - 7)))"}, {"input": "7 10 8 13\n", "output": "(13) / (10) = 13/10, left: 13/10, 7, 8\n(7) * (8) = 56, left: 56, 13/10\n(7) / (8) = 7/8, left: 7/8, 13/10\n(10) + (13) = 23, left: 23, 7, 8\n(7) - (8) = -1, left: -1, 23\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((10 + 13) - (7 - 8))"}, {"input": "7 10 8 13\n", "output": "(10) - (7) = 3, left: 3, 8, 13\n(3) / (8) = 3/8, left: 3/8, 13\n(3/8) / (13) = 3/104, left: 3/104\n(8) / (3) = 8/3, left: 8/3, 13\n(13) * (8/3) = 104/3, left: 104/3\n(3) - (8) = -5, left: -5, 13\n(13) - (-5) = 18, left: 18\n(13) + (-5) = 8, left: 8\n(8) + (3) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (8 + (10 - 7)))"}, {"input": "7 10 8 13\n", "output": "(10) / (8) = 5/4, left: 5/4, 7, 13\n(7) + (5/4) = 33/4, left: 33/4, 13\n(7) - (5/4) = 23/4, left: 23/4, 13\n(7) + (13) = 20, left: 20, 5/4\n(7) / (13) = 7/13, left: 7/13, 5/4\n(13) + (5/4) = 57/4, left: 57/4, 7\n(13) - (5/4) = 47/4, left: 47/4, 7\n(10) + (8) = 18, left: 18, 7, 13\n(13) + (18) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((13 + (10 + 8)) - 7)"}, {"input": "7 10 8 13\n", "output": "(10) + (8) = 18, left: 18, 7, 13\n(13) * (18) = 234, left: 234, 7\n(7) / (234) = 7/234, left: 7/234\n(7) * (234) = 1638, left: 1638\n(7) + (234) = 241, left: 241\n(13) / (18) = 13/18, left: 13/18, 7\n(18) - (13) = 5, left: 5, 7\n(7) / (5) = 7/5, left: 7/5\n(13) + (18) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((13 + (10 + 8)) - 7)"}, {"input": "7 10 8 13\n", "output": "(13) / (10) = 13/10, left: 13/10, 7, 8\n(13/10) - (8) = -67/10, left: -67/10, 7\n(8) / (13/10) = 80/13, left: 80/13, 7\n(13/10) / (7) = 13/70, left: 13/70, 8\n(8) + (13/70) = 573/70, left: 573/70\n(13/10) - (7) = -57/10, left: -57/10, 8\n(10) + (13) = 23, left: 23, 7, 8\n(8) / (7) = 8/7, left: 8/7, 23\n(7) - (8) = -1, left: -1, 23\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((10 + 13) - (7 - 8))"}, {"input": "10 9 10 13\n", "output": "(10) * (13) = 130, left: 130, 10, 9\n(10) - (13) = -3, left: -3, 10, 9\n(13) - (10) = 3, left: 3, 10, 9\n(10) + (13) = 23, left: 23, 10, 9\n(9) - (10) = -1, left: -1, 23\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((10 + 13) - (9 - 10))"}, {"input": "10 9 10 13\n", "output": "(10) * (13) = 130, left: 130, 10, 9\n(10) - (9) = 1, left: 1, 130\n(1) - (130) = -129, left: -129\n(10) + (13) = 23, left: 23, 10, 9\n(9) - (10) = -1, left: -1, 23\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((10 + 13) - (9 - 10))"}, {"input": "10 9 10 13\n", "output": "(10) / (10) = 1, left: 1, 9, 13\n(10) * (10) = 100, left: 100, 9, 13\n(9) / (100) = 9/100, left: 9/100, 13\n(10) + (10) = 20, left: 20, 9, 13\n(13) - (9) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 + 10) + (13 - 9))"}, {"input": "10 9 10 13\n", "output": "(10) * (10) = 100, left: 100, 9, 13\n(10) / (10) = 1, left: 1, 9, 13\n(1) / (9) = 1/9, left: 1/9, 13\n(10) + (10) = 20, left: 20, 9, 13\n(13) + (20) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((13 + (10 + 10)) - 9)"}, {"input": "10 9 10 13\n", "output": "(10) - (9) = 1, left: 1, 10, 13\n(13) * (1) = 13, left: 13, 10\n(13) - (1) = 12, left: 12, 10\n(10) - (12) = -2, left: -2\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (13 + (10 - 9)))"}, {"input": "10 9 10 13\n", "output": "(10) - (9) = 1, left: 1, 10, 13\n(13) - (1) = 12, left: 12, 10\n(10) + (12) = 22, left: 22\n(1) - (13) = -12, left: -12, 10\n(10) - (-12) = 22, left: 22\n(13) / (1) = 13, left: 13, 10\n(13) - (10) = 3, left: 3\n(13) / (10) = 13/10, left: 13/10\n(13) + (1) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (13 + (10 - 9)))"}, {"input": "10 9 10 13\n", "output": "(10) - (10) = 0, left: 0, 9, 13\n(13) - (9) = 4, left: 4, 0\n(0) * (4) = 0, left: 0\n(0) + (4) = 4, left: 4\n(10) * (10) = 100, left: 100, 9, 13\n(13) / (100) = 13/100, left: 13/100, 9\n(100) - (9) = 91, left: 91, 13\n(10) + (10) = 20, left: 20, 9, 13\n(13) - (9) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((10 + 10) + (13 - 9))"}, {"input": "10 9 10 13\n", "output": "(13) - (10) = 3, left: 3, 10, 9\n(9) - (3) = 6, left: 6, 10\n(10) * (13) = 130, left: 130, 10, 9\n(130) - (9) = 121, left: 121, 10\n(10) * (121) = 1210, left: 1210\n(9) - (130) = -121, left: -121, 10\n(9) - (10) = -1, left: -1, 130\n(10) + (13) = 23, left: 23, 10, 9\n(9) - (10) = -1, left: -1, 23\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((10 + 13) - (9 - 10))"}, {"input": "10 9 10 13\n", "output": "(10) * (13) = 130, left: 130, 10, 9\n(10) - (13) = -3, left: -3, 10, 9\n(10) / (-3) = -10/3, left: -10/3, 9\n(13) - (10) = 3, left: 3, 10, 9\n(10) * (3) = 30, left: 30, 9\n(10) / (13) = 10/13, left: 10/13, 10, 9\n(9) / (10/13) = 117/10, left: 117/10, 10\n(10) + (13) = 23, left: 23, 10, 9\n(9) - (10) = -1, left: -1, 23\n(23) - (-1) = 24, left: 24\nreach 24! expression: ((10 + 13) - (9 - 10))"}, {"input": "10 9 10 13\n", "output": "(10) - (10) = 0, left: 0, 9, 13\n(13) - (9) = 4, left: 4, 0\n(10) / (10) = 1, left: 1, 9, 13\n(13) / (1) = 13, left: 13, 9\n(10) - (10) = 0, left: 0, 9, 13\n(9) * (13) = 117, left: 117, 0\n(0) * (117) = 0, left: 0\n(10) + (10) = 20, left: 20, 9, 13\n(13) + (20) = 33, left: 33, 9\n(33) - (9) = 24, left: 24\nreach 24! expression: ((13 + (10 + 10)) - 9)"}, {"input": "11 11 8 10\n", "output": "(11) - (11) = 0, left: 0, 8, 10\n(8) / (10) = 4/5, left: 4/5, 0\n(0) - (10) = -10, left: -10, 8\n(11) + (11) = 22, left: 22, 8, 10\n(10) - (8) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 + 11) + (10 - 8))"}, {"input": "11 11 8 10\n", "output": "(11) / (10) = 11/10, left: 11/10, 11, 8\n(10) - (11) = -1, left: -1, 11, 8\n(-1) - (8) = -9, left: -9, 11\n(11) + (10) = 21, left: 21, 11, 8\n(8) - (11) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((11 + 10) - (8 - 11))"}, {"input": "11 11 8 10\n", "output": "(11) * (10) = 110, left: 110, 11, 8\n(10) / (11) = 10/11, left: 10/11, 11, 8\n(10/11) / (11) = 10/121, left: 10/121, 8\n(11) + (10) = 21, left: 21, 11, 8\n(8) - (21) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (8 - (11 + 10)))"}, {"input": "11 11 8 10\n", "output": "(10) / (8) = 5/4, left: 5/4, 11, 11\n(5/4) - (11) = -39/4, left: -39/4, 11\n(8) * (10) = 80, left: 80, 11, 11\n(10) - (8) = 2, left: 2, 11, 11\n(11) + (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (11 + (10 - 8)))"}, {"input": "11 11 8 10\n", "output": "(11) + (8) = 19, left: 19, 11, 10\n(10) / (19) = 10/19, left: 10/19, 11\n(11) * (8) = 88, left: 88, 11, 10\n(8) - (11) = -3, left: -3, 11, 10\n(-3) - (11) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((8 - 11) - 11))"}, {"input": "11 11 8 10\n", "output": "(11) - (11) = 0, left: 0, 8, 10\n(10) / (8) = 5/4, left: 5/4, 0\n(0) * (5/4) = 0, left: 0\n(8) * (0) = 0, left: 0, 10\n(0) / (8) = 0, left: 0, 10\n(10) * (0) = 0, left: 0\n(8) + (0) = 8, left: 8, 10\n(11) + (11) = 22, left: 22, 8, 10\n(10) - (8) = 2, left: 2, 22\n(22) + (2) = 24, left: 24\nreach 24! expression: ((11 + 11) + (10 - 8))"}, {"input": "11 11 8 10\n", "output": "(11) - (10) = 1, left: 1, 11, 8\n(11) * (8) = 88, left: 88, 1\n(11) * (10) = 110, left: 110, 11, 8\n(8) - (11) = -3, left: -3, 110\n(10) / (11) = 10/11, left: 10/11, 11, 8\n(11) / (8) = 11/8, left: 11/8, 10/11\n(8) * (10/11) = 80/11, left: 80/11, 11\n(11) + (10) = 21, left: 21, 11, 8\n(8) - (21) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - (8 - (11 + 10)))"}, {"input": "11 11 8 10\n", "output": "(11) + (8) = 19, left: 19, 11, 10\n(11) - (19) = -8, left: -8, 10\n(10) * (-8) = -80, left: -80\n(8) / (11) = 8/11, left: 8/11, 11, 10\n(11) * (8) = 88, left: 88, 11, 10\n(11) / (8) = 11/8, left: 11/8, 11, 10\n(10) / (11) = 10/11, left: 10/11, 11/8\n(8) - (11) = -3, left: -3, 11, 10\n(-3) - (11) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((8 - 11) - 11))"}, {"input": "11 11 8 10\n", "output": "(10) / (8) = 5/4, left: 5/4, 11, 11\n(11) - (5/4) = 39/4, left: 39/4, 11\n(39/4) / (11) = 39/44, left: 39/44\n(11) / (11) = 1, left: 1, 5/4\n(5/4) / (1) = 5/4, left: 5/4\n(8) * (10) = 80, left: 80, 11, 11\n(11) + (11) = 22, left: 22, 80\n(10) - (8) = 2, left: 2, 11, 11\n(11) + (2) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (11 + (10 - 8)))"}, {"input": "11 11 8 10\n", "output": "(11) * (10) = 110, left: 110, 11, 8\n(11) - (10) = 1, left: 1, 11, 8\n(11) / (1) = 11, left: 11, 8\n(11) / (10) = 11/10, left: 11/10, 11, 8\n(11/10) - (11) = -99/10, left: -99/10, 8\n(10) - (11) = -1, left: -1, 11, 8\n(8) + (-1) = 7, left: 7, 11\n(11) + (10) = 21, left: 21, 11, 8\n(8) - (11) = -3, left: -3, 21\n(21) - (-3) = 24, left: 24\nreach 24! expression: ((11 + 10) - (8 - 11))"}, {"input": "4 2 10 3\n", "output": "(10) / (4) = 5/2, left: 5/2, 2, 3\n(4) * (10) = 40, left: 40, 2, 3\n(2) * (40) = 80, left: 80, 3\n(4) / (10) = 2/5, left: 2/5, 2, 3\n(2/5) / (2) = 1/5, left: 1/5, 3\n(2/5) - (3) = -13/5, left: -13/5, 2\n(2) * (-13/5) = -26/5, left: -26/5\n(4) - (10) = -6, left: -6, 2, 3\n(2) - (-6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 - (4 - 10)))"}, {"input": "4 2 10 3\n", "output": "(10) + (3) = 13, left: 13, 4, 2\n(2) / (4) = 1/2, left: 1/2, 13\n(4) + (13) = 17, left: 17, 2\n(3) / (10) = 3/10, left: 3/10, 4, 2\n(2) * (3/10) = 3/5, left: 3/5, 4\n(3/10) / (2) = 3/20, left: 3/20, 4\n(4) - (3/10) = 37/10, left: 37/10, 2\n(10) * (3) = 30, left: 30, 4, 2\n(30) - (2) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: (((10 * 3) - 2) - 4)"}, {"input": "4 2 10 3\n", "output": "(4) / (3) = 4/3, left: 4/3, 2, 10\n(2) - (4/3) = 2/3, left: 2/3, 10\n(10) - (2) = 8, left: 8, 4/3\n(2) / (10) = 1/5, left: 1/5, 4/3\n(10) + (4/3) = 34/3, left: 34/3, 2\n(4) * (3) = 12, left: 12, 2, 10\n(2) - (12) = -10, left: -10, 10\n(12) / (2) = 6, left: 6, 10\n(2) + (12) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + (2 + (4 * 3)))"}, {"input": "4 2 10 3\n", "output": "(2) + (3) = 5, left: 5, 4, 10\n(3) / (2) = 3/2, left: 3/2, 4, 10\n(4) - (10) = -6, left: -6, 3/2\n(4) / (10) = 2/5, left: 2/5, 3/2\n(3/2) + (2/5) = 19/10, left: 19/10\n(2) * (3) = 6, left: 6, 4, 10\n(3) - (2) = 1, left: 1, 4, 10\n(4) - (10) = -6, left: -6, 2, 3\n(2) - (-6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 - (4 - 10)))"}, {"input": "4 2 10 3\n", "output": "(10) - (3) = 7, left: 7, 4, 2\n(2) / (4) = 1/2, left: 1/2, 7\n(4) - (2) = 2, left: 2, 7\n(2) - (7) = -5, left: -5, 4\n(3) - (10) = -7, left: -7, 4, 2\n(-7) / (2) = -7/2, left: -7/2, 4\n(4) - (-7/2) = 15/2, left: 15/2\n(10) * (3) = 30, left: 30, 4, 2\n(30) - (4) = 26, left: 26, 2\n(26) - (2) = 24, left: 24\nreach 24! expression: (((10 * 3) - 4) - 2)"}, {"input": "3 4 12 10\n", "output": "(10) - (4) = 6, left: 6, 3, 12\n(12) + (6) = 18, left: 18, 3\n(6) - (12) = -6, left: -6, 3\n(12) - (6) = 6, left: 6, 3\n(12) * (6) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 * (10 - 4)) / 3)"}, {"input": "3 4 12 10\n", "output": "(3) * (4) = 12, left: 12, 12, 10\n(10) + (12) = 22, left: 22, 12\n(10) * (12) = 120, left: 120, 12\n(12) / (120) = 1/10, left: 1/10\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 * 4) - 10))"}, {"input": "3 4 12 10\n", "output": "(10) - (3) = 7, left: 7, 4, 12\n(3) / (10) = 3/10, left: 3/10, 4, 12\n(4) * (3/10) = 6/5, left: 6/5, 12\n(3) * (4) = 12, left: 12, 12, 10\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 * 4) * (12 - 10))"}, {"input": "3 4 12 10\n", "output": "(3) * (4) = 12, left: 12, 12, 10\n(10) + (12) = 22, left: 22, 12\n(12) - (22) = -10, left: -10\n(12) / (22) = 6/11, left: 6/11\n(10) * (12) = 120, left: 120, 12\n(12) / (120) = 1/10, left: 1/10\n(12) - (10) = 2, left: 2, 12\n(2) / (12) = 1/6, left: 1/6\n(12) + (2) = 14, left: 14\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 * 4) - 10))"}, {"input": "3 4 12 10\n", "output": "(3) + (10) = 13, left: 13, 4, 12\n(12) - (4) = 8, left: 8, 3, 10\n(12) / (4) = 3, left: 3, 3, 10\n(10) / (3) = 10/3, left: 10/3, 3\n(4) / (3) = 4/3, left: 4/3, 12, 10\n(3) / (4) = 3/4, left: 3/4, 12, 10\n(4) - (3) = 1, left: 1, 12, 10\n(3) * (4) = 12, left: 12, 12, 10\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((3 * 4) * (12 - 10))"}, {"input": "3 4 12 10\n", "output": "(10) - (4) = 6, left: 6, 3, 12\n(12) / (6) = 2, left: 2, 3\n(12) + (6) = 18, left: 18, 3\n(6) - (12) = -6, left: -6, 3\n(3) * (-6) = -18, left: -18\n(12) - (6) = 6, left: 6, 3\n(3) + (6) = 9, left: 9\n(3) / (6) = 1/2, left: 1/2\n(12) * (6) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 * (10 - 4)) / 3)"}, {"input": "3 4 12 10\n", "output": "(3) / (4) = 3/4, left: 3/4, 12, 10\n(4) / (3) = 4/3, left: 4/3, 12, 10\n(3) - (4) = -1, left: -1, 12, 10\n(4) - (3) = 1, left: 1, 12, 10\n(12) / (10) = 6/5, left: 6/5, 1\n(6/5) - (1) = 1/5, left: 1/5\n(3) + (4) = 7, left: 7, 12, 10\n(3) * (4) = 12, left: 12, 12, 10\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 * 4) - 10))"}, {"input": "3 4 12 10\n", "output": "(10) - (3) = 7, left: 7, 4, 12\n(3) * (10) = 30, left: 30, 4, 12\n(4) - (30) = -26, left: -26, 12\n(10) / (3) = 10/3, left: 10/3, 4, 12\n(12) / (10/3) = 18/5, left: 18/5, 4\n(3) / (10) = 3/10, left: 3/10, 4, 12\n(12) * (3/10) = 18/5, left: 18/5, 4\n(12) / (3) = 4, left: 4, 4, 10\n(10) - (4) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (10 - (12 / 3)))"}, {"input": "12 8 12 10\n", "output": "(10) - (12) = -2, left: -2, 8, 12\n(-2) - (8) = -10, left: -10, 12\n(12) * (10) = 120, left: 120, 8, 12\n(12) * (120) = 1440, left: 1440, 8\n(8) * (12) = 96, left: 96, 120\n(120) - (96) = 24, left: 24\nreach 24! expression: ((12 * 10) - (8 * 12))"}, {"input": "12 8 12 10\n", "output": "(12) - (12) = 0, left: 0, 8, 10\n(8) / (10) = 4/5, left: 4/5, 12, 12\n(8) - (10) = -2, left: -2, 12, 12\n(10) / (12) = 5/6, left: 5/6, 8, 12\n(8) + (12) = 20, left: 20, 5/6\n(20) / (5/6) = 24, left: 24\nreach 24! expression: ((8 + 12) / (10 / 12))"}, {"input": "12 8 12 10\n", "output": "(10) / (8) = 5/4, left: 5/4, 12, 12\n(8) * (10) = 80, left: 80, 12, 12\n(80) - (12) = 68, left: 68, 12\n(8) * (12) = 96, left: 96, 12, 10\n(12) * (10) = 120, left: 120, 96\n(120) - (96) = 24, left: 24\nreach 24! expression: ((12 * 10) - (8 * 12))"}, {"input": "12 8 12 10\n", "output": "(8) - (10) = -2, left: -2, 12, 12\n(8) + (10) = 18, left: 18, 12, 12\n(12) / (18) = 2/3, left: 2/3, 12\n(12) * (8) = 96, left: 96, 12, 10\n(12) * (10) = 120, left: 120, 96\n(120) - (96) = 24, left: 24\nreach 24! expression: ((12 * 10) - (12 * 8))"}, {"input": "12 8 12 10\n", "output": "(12) / (12) = 1, left: 1, 8, 10\n(12) + (10) = 22, left: 22, 12, 8\n(22) - (8) = 14, left: 14, 12\n(12) / (10) = 6/5, left: 6/5, 12, 8\n(12) + (8) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (12 + 8))"}, {"input": "12 8 12 10\n", "output": "(12) - (12) = 0, left: 0, 8, 10\n(12) / (12) = 1, left: 1, 8, 10\n(10) / (8) = 5/4, left: 5/4, 1\n(8) * (10) = 80, left: 80, 12, 12\n(12) * (12) = 144, left: 144, 80\n(8) - (10) = -2, left: -2, 12, 12\n(-2) - (12) = -14, left: -14, 12\n(10) / (12) = 5/6, left: 5/6, 8, 12\n(8) + (12) = 20, left: 20, 5/6\n(20) / (5/6) = 24, left: 24\nreach 24! expression: ((8 + 12) / (10 / 12))"}, {"input": "12 8 12 10\n", "output": "(8) * (10) = 80, left: 80, 12, 12\n(12) * (12) = 144, left: 144, 80\n(144) - (80) = 64, left: 64\n(10) - (8) = 2, left: 2, 12, 12\n(10) / (8) = 5/4, left: 5/4, 12, 12\n(5/4) / (12) = 5/48, left: 5/48, 12\n(5/48) / (12) = 5/576, left: 5/576\n(12) * (8) = 96, left: 96, 12, 10\n(12) * (10) = 120, left: 120, 96\n(120) - (96) = 24, left: 24\nreach 24! expression: ((12 * 10) - (12 * 8))"}, {"input": "12 8 12 10\n", "output": "(12) + (12) = 24, left: 24, 8, 10\n(12) * (12) = 144, left: 144, 8, 10\n(12) / (12) = 1, left: 1, 8, 10\n(8) - (10) = -2, left: -2, 1\n(12) - (12) = 0, left: 0, 8, 10\n(12) / (10) = 6/5, left: 6/5, 12, 8\n(12) * (6/5) = 72/5, left: 72/5, 8\n(8) * (72/5) = 576/5, left: 576/5\n(12) + (8) = 20, left: 20, 6/5\n(6/5) * (20) = 24, left: 24\nreach 24! expression: ((12 / 10) * (12 + 8))"}, {"input": "12 8 12 10\n", "output": "(8) + (10) = 18, left: 18, 12, 12\n(10) / (8) = 5/4, left: 5/4, 12, 12\n(12) / (5/4) = 48/5, left: 48/5, 12\n(8) - (10) = -2, left: -2, 12, 12\n(8) * (10) = 80, left: 80, 12, 12\n(10) - (8) = 2, left: 2, 12, 12\n(8) / (10) = 4/5, left: 4/5, 12, 12\n(8) * (12) = 96, left: 96, 12, 10\n(12) * (10) = 120, left: 120, 96\n(120) - (96) = 24, left: 24\nreach 24! expression: ((12 * 10) - (8 * 12))"}, {"input": "12 8 12 10\n", "output": "(10) - (12) = -2, left: -2, 8, 12\n(-2) - (8) = -10, left: -10, 12\n(-10) - (12) = -22, left: -22\n(12) * (10) = 120, left: 120, 8, 12\n(120) / (12) = 10, left: 10, 8\n(12) * (120) = 1440, left: 1440, 8\n(8) / (1440) = 1/180, left: 1/180\n(8) / (12) = 2/3, left: 2/3, 120\n(8) * (12) = 96, left: 96, 120\n(120) - (96) = 24, left: 24\nreach 24! expression: ((12 * 10) - (8 * 12))"}, {"input": "8 3 3 1\n", "output": "(8) * (3) = 24, left: 24, 3, 1\n(8) - (3) = 5, left: 5, 3, 1\n(3) / (8) = 3/8, left: 3/8, 3, 1\n(1) - (3/8) = 5/8, left: 5/8, 3\n(8) + (3) = 11, left: 11, 3, 1\n(3) / (11) = 3/11, left: 3/11, 1\n(1) - (8) = -7, left: -7, 3, 3\n(3) - (3) = 0, left: 0, -7\n(3) * (-7) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (3 * (1 - 8)))"}, {"input": "8 3 3 1\n", "output": "(3) * (1) = 3, left: 3, 8, 3\n(1) / (3) = 1/3, left: 1/3, 8, 3\n(3) / (8) = 3/8, left: 3/8, 3, 1\n(1) + (3/8) = 11/8, left: 11/8, 3\n(8) + (3) = 11, left: 11, 3, 1\n(3) - (1) = 2, left: 2, 11\n(1) - (8) = -7, left: -7, 3, 3\n(3) - (3) = 0, left: 0, -7\n(3) * (-7) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (3 * (1 - 8)))"}, {"input": "8 3 3 1\n", "output": "(8) - (3) = 5, left: 5, 3, 1\n(3) * (1) = 3, left: 3, 5\n(5) / (3) = 5/3, left: 5/3\n(3) - (8) = -5, left: -5, 3, 1\n(1) + (-5) = -4, left: -4, 3\n(3) / (8) = 3/8, left: 3/8, 3, 1\n(1) - (3) = -2, left: -2, 8, 3\n(8) + (1) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (8 + 1)) - 3)"}, {"input": "8 3 3 1\n", "output": "(1) - (8) = -7, left: -7, 3, 3\n(-7) / (3) = -7/3, left: -7/3, 3\n(3) * (-7/3) = -7, left: -7\n(3) / (-7/3) = -9/7, left: -9/7\n(-7) - (3) = -10, left: -10, 3\n(3) + (-10) = -7, left: -7\n(3) * (-10) = -30, left: -30\n(3) - (-10) = 13, left: 13\n(3) * (-7) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (3 * (1 - 8)))"}, {"input": "8 3 3 1\n", "output": "(3) / (3) = 1, left: 1, 8, 1\n(1) * (1) = 1, left: 1, 8\n(3) * (1) = 3, left: 3, 8, 3\n(8) / (3) = 8/3, left: 8/3, 3, 1\n(3) + (1) = 4, left: 4, 8, 3\n(3) - (1) = 2, left: 2, 8, 3\n(2) - (3) = -1, left: -1, 8\n(8) - (1) = 7, left: 7, 3, 3\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 * (8 - 1)))"}, {"input": "8 3 3 1\n", "output": "(3) - (3) = 0, left: 0, 8, 1\n(3) + (3) = 6, left: 6, 8, 1\n(3) / (3) = 1, left: 1, 8, 1\n(3) / (1) = 3, left: 3, 8, 3\n(1) - (3) = -2, left: -2, 8, 3\n(3) * (1) = 3, left: 3, 8, 3\n(3) - (8) = -5, left: -5, 3, 1\n(3) - (1) = 2, left: 2, 8, 3\n(1) / (3) = 1/3, left: 1/3, 8, 3\n(8) * (3) = 24, left: 24, 1/3\n(8) / (1) = 8, left: 8, 3, 3\n(8) - (1) = 7, left: 7, 3, 3\n(3) * (7) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (3 * (8 - 1)))"}, {"input": "8 3 3 1\n", "output": "(8) * (3) = 24, left: 24, 3, 1\n(3) - (1) = 2, left: 2, 24\n(8) / (3) = 8/3, left: 8/3, 3, 1\n(3) + (8/3) = 17/3, left: 17/3, 1\n(8) + (3) = 11, left: 11, 3, 1\n(3) * (3) = 9, left: 9, 8, 1\n(8) + (9) = 17, left: 17, 1\n(3) * (1) = 3, left: 3, 8, 3\n(8) / (3) = 8/3, left: 8/3, 3, 1\n(1) / (8/3) = 3/8, left: 3/8, 3\n(3) + (1) = 4, left: 4, 8, 3\n(8) + (1) = 9, left: 9, 3, 3\n(3) * (9) = 27, left: 27, 3\n(27) - (3) = 24, left: 24\nreach 24! expression: ((3 * (8 + 1)) - 3)"}, {"input": "8 3 3 1\n", "output": "(1) / (3) = 1/3, left: 1/3, 8, 3\n(8) + (1/3) = 25/3, left: 25/3, 3\n(3) + (1) = 4, left: 4, 8, 3\n(8) / (3) = 8/3, left: 8/3, 3, 1\n(1) / (8/3) = 3/8, left: 3/8, 3\n(3) - (8) = -5, left: -5, 3, 1\n(8) + (3) = 11, left: 11, 3, 1\n(8) / (3) = 8/3, left: 8/3, 3, 1\n(3) + (8/3) = 17/3, left: 17/3, 1\n(1) / (8) = 1/8, left: 1/8, 3, 3\n(3) / (1/8) = 24, left: 24, 3\n(1) - (8) = -7, left: -7, 3, 3\n(3) * (-7) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (3 * (1 - 8)))"}, {"input": "8 3 3 1\n", "output": "(8) * (3) = 24, left: 24, 3, 1\n(1) / (24) = 1/24, left: 1/24, 3\n(8) - (3) = 5, left: 5, 3, 1\n(8) + (3) = 11, left: 11, 3, 1\n(3) - (8) = -5, left: -5, 3, 1\n(1) * (-5) = -5, left: -5, 3\n(8) / (3) = 8/3, left: 8/3, 3, 1\n(8/3) - (1) = 5/3, left: 5/3, 3\n(1) - (3) = -2, left: -2, 8/3\n(1) / (3) = 1/3, left: 1/3, 8/3\n(1) - (8) = -7, left: -7, 3, 3\n(3) - (3) = 0, left: 0, -7\n(3) * (-7) = -21, left: -21, 3\n(3) - (-21) = 24, left: 24\nreach 24! expression: (3 - (3 * (1 - 8)))"}, {"input": "12 2 1 12\n", "output": "(2) * (12) = 24, left: 24, 12, 1\n(12) - (1) = 11, left: 11, 2, 12\n(12) / (11) = 12/11, left: 12/11, 2\n(12) + (12) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 + 12) * (2 - 1))"}, {"input": "12 2 1 12\n", "output": "(1) / (12) = 1/12, left: 1/12, 12, 2\n(1/12) - (12) = -143/12, left: -143/12, 2\n(12) + (2) = 14, left: 14, 1, 12\n(12) + (12) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (2 - 1))"}, {"input": "12 2 1 12\n", "output": "(12) / (12) = 1, left: 1, 2, 1\n(12) + (12) = 24, left: 24, 2, 1\n(2) / (1) = 2, left: 2, 24\n(24) + (2) = 26, left: 26\n(2) - (1) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 + 12) * (2 - 1))"}, {"input": "12 2 1 12\n", "output": "(12) / (12) = 1, left: 1, 2, 1\n(12) - (12) = 0, left: 0, 2, 1\n(2) - (1) = 1, left: 1, 0\n(1) - (0) = 1, left: 1, 2\n(12) / (12) = 1, left: 1, 2, 1\n(12) + (12) = 24, left: 24, 2, 1\n(2) - (24) = -22, left: -22, 1\n(2) + (24) = 26, left: 26, 1\n(2) - (1) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 + 12) * (2 - 1))"}, {"input": "12 2 1 12\n", "output": "(12) - (2) = 10, left: 10, 12, 1\n(1) * (10) = 10, left: 10, 12\n(1) / (12) = 1/12, left: 1/12, 2, 12\n(1) + (12) = 13, left: 13, 12, 2\n(1) - (12) = -11, left: -11, 12, 2\n(12) * (12) = 144, left: 144, 2, 1\n(1) / (144) = 1/144, left: 1/144, 2\n(12) + (12) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 + 12) * (2 - 1))"}, {"input": "12 2 1 12\n", "output": "(12) / (2) = 6, left: 6, 12, 1\n(2) - (12) = -10, left: -10, 12, 1\n(1) - (12) = -11, left: -11, 12, 2\n(12) / (2) = 6, left: 6, 1, 12\n(12) + (2) = 14, left: 14, 1, 12\n(1) - (14) = -13, left: -13, 12\n(12) + (-13) = -1, left: -1\n(12) + (12) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) / (1) = 24, left: 24\nreach 24! expression: ((12 + 12) / (2 - 1))"}, {"input": "12 2 1 12\n", "output": "(2) * (12) = 24, left: 24, 12, 1\n(2) / (12) = 1/6, left: 1/6, 12, 1\n(12) + (1) = 13, left: 13, 1/6\n(2) + (12) = 14, left: 14, 12, 1\n(12) - (2) = 10, left: 10, 1, 12\n(1) * (12) = 12, left: 12, 10\n(2) - (12) = -10, left: -10, 1, 12\n(2) - (1) = 1, left: 1, 12, 12\n(12) * (1) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (12 * (2 - 1)))"}, {"input": "12 2 1 12\n", "output": "(12) - (1) = 11, left: 11, 12, 2\n(12) / (11) = 12/11, left: 12/11, 2\n(12) / (1) = 12, left: 12, 12, 2\n(2) / (12) = 1/6, left: 1/6, 12\n(12) / (12) = 1, left: 1, 2, 1\n(12) - (12) = 0, left: 0, 2, 1\n(1) + (0) = 1, left: 1, 2\n(12) + (12) = 24, left: 24, 2, 1\n(2) - (1) = 1, left: 1, 24\n(24) * (1) = 24, left: 24\nreach 24! expression: ((12 + 12) * (2 - 1))"}, {"input": "8 7 1 2\n", "output": "(2) / (8) = 1/4, left: 1/4, 7, 1\n(1) * (1/4) = 1/4, left: 1/4, 7\n(7) * (1/4) = 7/4, left: 7/4, 1\n(1) - (7/4) = -3/4, left: -3/4\n(7) / (1/4) = 28, left: 28, 1\n(28) / (1) = 28, left: 28\n(7) + (1/4) = 29/4, left: 29/4, 1\n(1) * (29/4) = 29/4, left: 29/4\n(7) - (1) = 6, left: 6, 1/4\n(6) / (1/4) = 24, left: 24\nreach 24! expression: ((7 - 1) / (2 / 8))"}, {"input": "8 7 1 2\n", "output": "(1) / (7) = 1/7, left: 1/7, 8, 2\n(1) - (7) = -6, left: -6, 8, 2\n(8) - (2) = 6, left: 6, -6\n(6) / (-6) = -1, left: -1\n(-6) - (8) = -14, left: -14, 2\n(7) / (1) = 7, left: 7, 8, 2\n(2) - (8) = -6, left: -6, 7\n(7) + (1) = 8, left: 8, 8, 2\n(8) * (2) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((7 + 1) + (8 * 2))"}, {"input": "8 7 1 2\n", "output": "(7) - (1) = 6, left: 6, 8, 2\n(8) / (6) = 4/3, left: 4/3, 2\n(2) - (4/3) = 2/3, left: 2/3\n(2) / (4/3) = 3/2, left: 3/2\n(4/3) - (2) = -2/3, left: -2/3\n(8) * (6) = 48, left: 48, 2\n(2) - (48) = -46, left: -46\n(2) + (48) = 50, left: 50\n(48) - (2) = 46, left: 46\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * (7 - 1)) / 2)"}, {"input": "8 7 1 2\n", "output": "(1) - (2) = -1, left: -1, 8, 7\n(8) / (-1) = -8, left: -8, 7\n(2) - (1) = 1, left: 1, 8, 7\n(1) * (2) = 2, left: 2, 8, 7\n(7) + (2) = 9, left: 9, 8\n(1) + (2) = 3, left: 3, 8, 7\n(1) / (7) = 1/7, left: 1/7, 8, 2\n(7) - (1) = 6, left: 6, 8, 2\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * (7 - 1)) / 2)"}, {"input": "8 7 1 2\n", "output": "(1) * (2) = 2, left: 2, 8, 7\n(7) + (2) = 9, left: 9, 8, 1\n(2) / (7) = 2/7, left: 2/7, 8, 1\n(1) - (2/7) = 5/7, left: 5/7, 8\n(8) * (7) = 56, left: 56, 1, 2\n(1) / (8) = 1/8, left: 1/8, 7, 2\n(2) / (1/8) = 16, left: 16, 7\n(8) * (2) = 16, left: 16, 7, 1\n(1) + (16) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (1 + (8 * 2)))"}, {"input": "8 7 1 2\n", "output": "(1) / (2) = 1/2, left: 1/2, 8, 7\n(1) * (2) = 2, left: 2, 8, 7\n(1) + (2) = 3, left: 3, 8, 7\n(7) / (3) = 7/3, left: 7/3, 8\n(8) * (7) = 56, left: 56, 3\n(56) / (3) = 56/3, left: 56/3\n(1) / (7) = 1/7, left: 1/7, 8, 2\n(1) - (7) = -6, left: -6, 8, 2\n(8) + (2) = 10, left: 10, -6\n(8) / (-6) = -4/3, left: -4/3, 2\n(7) - (1) = 6, left: 6, 8, 2\n(8) - (6) = 2, left: 2, 2\n(8) * (6) = 48, left: 48, 2\n(48) / (2) = 24, left: 24\nreach 24! expression: ((8 * (7 - 1)) / 2)"}, {"input": "8 7 1 2\n", "output": "(2) - (1) = 1, left: 1, 8, 7\n(8) / (7) = 8/7, left: 8/7, 1, 2\n(2) / (8/7) = 7/4, left: 7/4, 1\n(7) - (8) = -1, left: -1, 1, 2\n(1) / (-1) = -1, left: -1, 2\n(8) + (7) = 15, left: 15, 1, 2\n(1) + (15) = 16, left: 16, 2\n(2) / (16) = 1/8, left: 1/8\n(8) * (1) = 8, left: 8, 7, 2\n(2) / (8) = 1/4, left: 1/4, 7\n(8) - (1) = 7, left: 7, 7, 2\n(8) * (2) = 16, left: 16, 7, 1\n(1) + (16) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (1 + (8 * 2)))"}, {"input": "6 2 3 1\n", "output": "(6) / (3) = 2, left: 2, 2, 1\n(6) + (3) = 9, left: 9, 2, 1\n(6) - (3) = 3, left: 3, 2, 1\n(1) / (3) = 1/3, left: 1/3, 2\n(3) - (2) = 1, left: 1, 6, 1\n(2) / (3) = 2/3, left: 2/3, 6, 1\n(2/3) / (1) = 2/3, left: 2/3, 6\n(2) + (3) = 5, left: 5, 6, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((2 + 3) - 1))"}, {"input": "6 2 3 1\n", "output": "(1) / (2) = 1/2, left: 1/2, 6, 3\n(3) * (1/2) = 3/2, left: 3/2, 6\n(6) / (3/2) = 4, left: 4\n(6) * (1/2) = 3, left: 3, 3\n(3) / (3) = 1, left: 1\n(2) - (1) = 1, left: 1, 6, 3\n(1) / (6) = 1/6, left: 1/6, 3\n(6) - (1) = 5, left: 5, 3\n(3) + (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (3 + (2 - 1)))"}, {"input": "6 2 3 1\n", "output": "(3) - (6) = -3, left: -3, 2, 1\n(2) - (1) = 1, left: 1, -3\n(1) - (-3) = 4, left: 4\n(6) + (3) = 9, left: 9, 2, 1\n(1) - (9) = -8, left: -8, 2\n(6) - (3) = 3, left: 3, 2, 1\n(2) - (3) = -1, left: -1, 1\n(6) * (1) = 6, left: 6, 2, 3\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (6 * 1)))"}, {"input": "6 2 3 1\n", "output": "(2) - (3) = -1, left: -1, 6, 1\n(1) / (6) = 1/6, left: 1/6, -1\n(3) / (2) = 3/2, left: 3/2, 6, 1\n(2) * (3) = 6, left: 6, 6, 1\n(3) - (2) = 1, left: 1, 6, 1\n(1) - (6) = -5, left: -5, 1\n(2) / (3) = 2/3, left: 2/3, 6, 1\n(2) + (3) = 5, left: 5, 6, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((2 + 3) - 1))"}, {"input": "6 2 3 1\n", "output": "(6) / (3) = 2, left: 2, 2, 1\n(6) + (3) = 9, left: 9, 2, 1\n(2) - (9) = -7, left: -7, 1\n(6) - (3) = 3, left: 3, 2, 1\n(3) - (1) = 2, left: 2, 2\n(2) * (1) = 2, left: 2, 3\n(3) - (6) = -3, left: -3, 2, 1\n(3) - (2) = 1, left: 1, 6, 1\n(1) / (6) = 1/6, left: 1/6, 1\n(2) / (3) = 2/3, left: 2/3, 6, 1\n(2) + (3) = 5, left: 5, 6, 1\n(1) - (6) = -5, left: -5, 5\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((2 + 3) - 1))"}, {"input": "6 2 3 1\n", "output": "(3) - (6) = -3, left: -3, 2, 1\n(-3) / (1) = -3, left: -3, 2\n(2) - (1) = 1, left: 1, -3\n(6) * (3) = 18, left: 18, 2, 1\n(6) / (3) = 2, left: 2, 2, 1\n(2) / (1) = 2, left: 2, 2\n(6) - (3) = 3, left: 3, 2, 1\n(3) / (2) = 3/2, left: 3/2, 1\n(2) - (3) = -1, left: -1, 1\n(2) + (1) = 3, left: 3, 3\n(1) / (2) = 1/2, left: 1/2, 3\n(6) * (1) = 6, left: 6, 2, 3\n(2) + (6) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (2 + (6 * 1)))"}, {"input": "6 2 3 1\n", "output": "(2) - (3) = -1, left: -1, 6, 1\n(3) / (2) = 3/2, left: 3/2, 6, 1\n(6) / (1) = 6, left: 6, 3/2\n(2) * (3) = 6, left: 6, 6, 1\n(1) / (6) = 1/6, left: 1/6, 6\n(6) * (1/6) = 1, left: 1\n(3) - (2) = 1, left: 1, 6, 1\n(1) - (1) = 0, left: 0, 6\n(2) / (3) = 2/3, left: 2/3, 6, 1\n(2/3) - (6) = -16/3, left: -16/3, 1\n(1) - (6) = -5, left: -5, 2/3\n(2) + (3) = 5, left: 5, 6, 1\n(5) - (1) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * ((2 + 3) - 1))"}, {"input": "11 1 5 11\n", "output": "(11) + (5) = 16, left: 16, 1, 11\n(16) / (11) = 16/11, left: 16/11, 1\n(11) / (11) = 1, left: 1, 1, 5\n(11) * (11) = 121, left: 121, 1, 5\n(121) - (1) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "11 1 5 11\n", "output": "(11) - (11) = 0, left: 0, 1, 5\n(11) * (11) = 121, left: 121, 1, 5\n(1) + (121) = 122, left: 122, 5\n(5) * (122) = 610, left: 610\n(121) - (1) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "11 1 5 11\n", "output": "(11) - (1) = 10, left: 10, 11, 5\n(11) / (1) = 11, left: 11, 11, 5\n(5) / (11) = 5/11, left: 5/11, 11\n(11) * (11) = 121, left: 121, 1, 5\n(121) - (1) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "11 1 5 11\n", "output": "(5) / (11) = 5/11, left: 5/11, 11, 1\n(5) * (11) = 55, left: 55, 11, 1\n(11) / (1) = 11, left: 11, 11, 5\n(11) / (11) = 1, left: 1, 5\n(5) + (1) = 6, left: 6\n(1) - (11) = -10, left: -10, 11, 5\n(5) / (11) = 5/11, left: 5/11, 1, 11\n(11) * (11) = 121, left: 121, 1, 5\n(121) - (1) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "11 1 5 11\n", "output": "(11) - (5) = 6, left: 6, 1, 11\n(11) + (6) = 17, left: 17, 1\n(5) / (11) = 5/11, left: 5/11, 1, 11\n(1) * (5/11) = 5/11, left: 5/11, 11\n(1) / (11) = 1/11, left: 1/11, 11, 5\n(1) - (11) = -10, left: -10, 11, 5\n(11) - (-10) = 21, left: 21, 5\n(11) * (11) = 121, left: 121, 1, 5\n(121) - (1) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "11 1 5 11\n", "output": "(11) - (11) = 0, left: 0, 1, 5\n(1) / (5) = 1/5, left: 1/5, 0\n(0) + (1/5) = 1/5, left: 1/5\n(0) / (5) = 0, left: 0, 1\n(1) - (0) = 1, left: 1, 5\n(1) * (0) = 0, left: 0, 5\n(11) * (11) = 121, left: 121, 1, 5\n(1) + (121) = 122, left: 122, 5\n(121) - (1) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "11 1 5 11\n", "output": "(11) - (5) = 6, left: 6, 1, 11\n(11) + (6) = 17, left: 17, 1\n(11) + (5) = 16, left: 16, 1, 11\n(1) + (11) = 12, left: 12, 11, 5\n(11) / (11) = 1, left: 1, 1, 5\n(1) + (5) = 6, left: 6, 1\n(11) / (11) = 1, left: 1, 1, 5\n(11) * (11) = 121, left: 121, 1, 5\n(121) - (1) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "11 1 5 11\n", "output": "(1) * (5) = 5, left: 5, 11, 11\n(5) / (11) = 5/11, left: 5/11, 11\n(1) - (5) = -4, left: -4, 11, 11\n(11) - (-4) = 15, left: 15, 11\n(5) - (11) = -6, left: -6, 11, 1\n(5) + (11) = 16, left: 16, 11, 1\n(11) / (11) = 1, left: 1, 1, 5\n(11) * (11) = 121, left: 121, 1, 5\n(121) - (1) = 120, left: 120, 5\n(120) / (5) = 24, left: 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "13 3 12 2\n", "output": "(3) + (2) = 5, left: 5, 13, 12\n(13) * (12) = 156, left: 156, 5\n(13) * (5) = 65, left: 65, 12\n(2) - (3) = -1, left: -1, 13, 12\n(13) + (12) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((2 - 3) + (13 + 12))"}, {"input": "13 3 12 2\n", "output": "(3) - (2) = 1, left: 1, 13, 12\n(12) / (13) = 12/13, left: 12/13, 1\n(1) - (12/13) = 1/13, left: 1/13\n(13) + (12) = 25, left: 25, 1\n(1) / (25) = 1/25, left: 1/25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (3 - 2))"}, {"input": "13 3 12 2\n", "output": "(3) - (13) = -10, left: -10, 12, 2\n(12) * (2) = 24, left: 24, -10\n(12) - (2) = 10, left: 10, -10\n(12) + (2) = 14, left: 14, -10\n(-10) - (14) = -24, left: -24\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((12 + 2) - (3 - 13))"}, {"input": "13 3 12 2\n", "output": "(13) / (12) = 13/12, left: 13/12, 3, 2\n(3) * (2) = 6, left: 6, 13/12\n(2) - (3) = -1, left: -1, 13/12\n(13) + (12) = 25, left: 25, 3, 2\n(3) - (25) = -22, left: -22, 2\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (3 - (13 + 12)))"}, {"input": "13 3 12 2\n", "output": "(13) + (12) = 25, left: 25, 3, 2\n(2) + (25) = 27, left: 27, 3\n(27) / (3) = 9, left: 9\n(3) - (27) = -24, left: -24\n(3) + (27) = 30, left: 30\n(27) - (3) = 24, left: 24\nreach 24! expression: ((2 + (13 + 12)) - 3)"}, {"input": "13 3 12 2\n", "output": "(3) - (2) = 1, left: 1, 13, 12\n(12) / (13) = 12/13, left: 12/13, 1\n(1) + (12/13) = 25/13, left: 25/13\n(12/13) - (1) = -1/13, left: -1/13\n(1) / (12/13) = 13/12, left: 13/12\n(12/13) / (1) = 12/13, left: 12/13\n(13) + (12) = 25, left: 25, 1\n(1) * (25) = 25, left: 25\n(1) - (25) = -24, left: -24\n(25) - (1) = 24, left: 24\nreach 24! expression: ((13 + 12) - (3 - 2))"}, {"input": "13 3 12 2\n", "output": "(13) / (12) = 13/12, left: 13/12, 3, 2\n(3) - (2) = 1, left: 1, 13/12\n(2) * (13/12) = 13/6, left: 13/6, 3\n(3) * (13/6) = 13/2, left: 13/2\n(2) + (13/12) = 37/12, left: 37/12, 3\n(3) * (13/12) = 13/4, left: 13/4, 2\n(2) * (13/4) = 13/2, left: 13/2\n(13) + (12) = 25, left: 25, 3, 2\n(3) - (25) = -22, left: -22, 2\n(2) - (-22) = 24, left: 24\nreach 24! expression: (2 - (3 - (13 + 12)))"}, {"input": "13 3 12 2\n", "output": "(3) - (13) = -10, left: -10, 12, 2\n(12) * (2) = 24, left: 24, -10\n(24) / (-10) = -12/5, left: -12/5\n(12) - (2) = 10, left: 10, -10\n(-10) + (10) = 0, left: 0\n(-10) / (10) = -1, left: -1\n(12) + (2) = 14, left: 14, -10\n(-10) + (14) = 4, left: 4\n(-10) * (14) = -140, left: -140\n(14) - (-10) = 24, left: 24\nreach 24! expression: ((12 + 2) - (3 - 13))"}, {"input": "13 3 12 2\n", "output": "(13) + (12) = 25, left: 25, 3, 2\n(2) + (25) = 27, left: 27, 3\n(27) / (3) = 9, left: 9\n(3) - (27) = -24, left: -24\n(3) + (27) = 30, left: 30\n(27) - (3) = 24, left: 24\nreach 24! expression: ((2 + (13 + 12)) - 3)"}, {"input": "13 3 12 2\n", "output": "(3) + (2) = 5, left: 5, 13, 12\n(13) + (12) = 25, left: 25, 5\n(25) / (5) = 5, left: 5\n(13) / (12) = 13/12, left: 13/12, 5\n(5) / (12) = 5/12, left: 5/12, 13\n(5) - (12) = -7, left: -7, 13\n(2) - (3) = -1, left: -1, 13, 12\n(13) / (12) = 13/12, left: 13/12, -1\n(13) + (12) = 25, left: 25, -1\n(-1) + (25) = 24, left: 24\nreach 24! expression: ((2 - 3) + (13 + 12))"}, {"input": "13 3 12 2\n", "output": "(13) + (12) = 25, left: 25, 3, 2\n(2) + (25) = 27, left: 27, 3\n(27) / (3) = 9, left: 9\n(3) - (27) = -24, left: -24\n(3) + (27) = 30, left: 30\n(27) - (3) = 24, left: 24\nreach 24! expression: ((2 + (13 + 12)) - 3)"}, {"input": "13 3 12 2\n", "output": "(13) + (12) = 25, left: 25, 3, 2\n(2) + (25) = 27, left: 27, 3\n(27) / (3) = 9, left: 9\n(3) - (27) = -24, left: -24\n(3) + (27) = 30, left: 30\n(27) - (3) = 24, left: 24\nreach 24! expression: ((2 + (13 + 12)) - 3)"}, {"input": "12 10 2 10\n", "output": "(12) - (10) = 2, left: 2, 10, 2\n(10) / (2) = 5, left: 5, 2\n(5) - (2) = 3, left: 3\n(2) / (5) = 2/5, left: 2/5\n(10) + (2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((12 - 10) * (10 + 2))"}, {"input": "12 10 2 10\n", "output": "(12) * (10) = 120, left: 120, 2, 10\n(2) * (120) = 240, left: 240, 10\n(10) / (240) = 1/24, left: 1/24\n(10) * (240) = 2400, left: 2400\n(240) - (10) = 230, left: 230\n(240) / (10) = 24, left: 24\nreach 24! expression: ((2 * (12 * 10)) / 10)"}, {"input": "12 10 2 10\n", "output": "(10) - (12) = -2, left: -2, 2, 10\n(-2) / (10) = -1/5, left: -1/5, 2\n(10) + (-2) = 8, left: 8, 2\n(2) - (8) = -6, left: -6\n(10) - (-2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 - (10 - 12)))"}, {"input": "12 10 2 10\n", "output": "(12) * (10) = 120, left: 120, 10, 2\n(120) / (10) = 12, left: 12, 2\n(12) / (2) = 6, left: 6\n(2) / (12) = 1/6, left: 1/6\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((12 * 10) / 10))"}, {"input": "12 10 2 10\n", "output": "(10) + (2) = 12, left: 12, 12, 10\n(10) / (12) = 5/6, left: 5/6, 12\n(12) / (10) = 6/5, left: 6/5, 12\n(10) * (12) = 120, left: 120, 12\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 2) - 10))"}, {"input": "12 10 2 10\n", "output": "(10) - (12) = -2, left: -2, 2, 10\n(-2) - (10) = -12, left: -12, 2\n(2) * (-12) = -24, left: -24\n(2) - (-12) = 14, left: 14\n(-12) / (2) = -6, left: -6\n(-2) / (10) = -1/5, left: -1/5, 2\n(10) * (-2) = -20, left: -20, 2\n(10) + (-2) = 8, left: 8, 2\n(10) - (-2) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (10 - (10 - 12)))"}, {"input": "12 10 2 10\n", "output": "(12) * (10) = 120, left: 120, 2, 10\n(2) * (120) = 240, left: 240, 10\n(10) / (240) = 1/24, left: 1/24\n(10) * (240) = 2400, left: 2400\n(240) - (10) = 230, left: 230\n(240) / (10) = 24, left: 24\nreach 24! expression: ((2 * (12 * 10)) / 10)"}, {"input": "12 10 2 10\n", "output": "(12) * (10) = 120, left: 120, 10, 2\n(120) / (10) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(12) / (2) = 6, left: 6\n(2) / (12) = 1/6, left: 1/6\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((12 * 10) / 10))"}, {"input": "12 10 2 10\n", "output": "(12) - (10) = 2, left: 2, 10, 2\n(10) / (2) = 5, left: 5, 2\n(5) - (2) = 3, left: 3\n(5) / (2) = 5/2, left: 5/2\n(2) + (5) = 7, left: 7\n(2) / (5) = 2/5, left: 2/5\n(2) - (5) = -3, left: -3\n(10) + (2) = 12, left: 12, 2\n(2) + (12) = 14, left: 14\n(2) * (12) = 24, left: 24\nreach 24! expression: ((12 - 10) * (10 + 2))"}, {"input": "12 10 2 10\n", "output": "(10) + (2) = 12, left: 12, 12, 10\n(10) / (12) = 5/6, left: 5/6, 12\n(12) / (10) = 6/5, left: 6/5, 12\n(6/5) - (12) = -54/5, left: -54/5\n(12) + (6/5) = 66/5, left: 66/5\n(10) * (12) = 120, left: 120, 12\n(120) - (12) = 108, left: 108\n(12) * (120) = 1440, left: 1440\n(12) - (10) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((10 + 2) - 10))"}, {"input": "12 10 2 10\n", "output": "(12) * (10) = 120, left: 120, 2, 10\n(2) * (120) = 240, left: 240, 10\n(10) / (240) = 1/24, left: 1/24\n(10) * (240) = 2400, left: 2400\n(240) - (10) = 230, left: 230\n(240) / (10) = 24, left: 24\nreach 24! expression: ((2 * (12 * 10)) / 10)"}, {"input": "12 10 2 10\n", "output": "(12) * (10) = 120, left: 120, 10, 2\n(120) / (10) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(12) / (2) = 6, left: 6\n(2) / (12) = 1/6, left: 1/6\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((12 * 10) / 10))"}, {"input": "12 10 2 10\n", "output": "(12) - (10) = 2, left: 2, 10, 2\n(10) / (2) = 5, left: 5, 2\n(2) * (5) = 10, left: 10\n(5) - (2) = 3, left: 3\n(5) / (2) = 5/2, left: 5/2\n(2) + (5) = 7, left: 7\n(2) / (5) = 2/5, left: 2/5\n(2) - (5) = -3, left: -3\n(10) + (2) = 12, left: 12, 2\n(2) + (12) = 14, left: 14\n(2) * (12) = 24, left: 24\nreach 24! expression: ((12 - 10) * (10 + 2))"}, {"input": "12 10 2 10\n", "output": "(12) * (10) = 120, left: 120, 2, 10\n(2) * (120) = 240, left: 240, 10\n(10) / (240) = 1/24, left: 1/24\n(10) * (240) = 2400, left: 2400\n(240) - (10) = 230, left: 230\n(240) / (10) = 24, left: 24\nreach 24! expression: ((2 * (12 * 10)) / 10)"}, {"input": "12 10 2 10\n", "output": "(12) * (10) = 120, left: 120, 10, 2\n(120) / (10) = 12, left: 12, 2\n(2) - (12) = -10, left: -10\n(12) / (2) = 6, left: 6\n(2) / (12) = 1/6, left: 1/6\n(12) - (2) = 10, left: 10\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * ((12 * 10) / 10))"}, {"input": "12 10 2 10\n", "output": "(12) - (10) = 2, left: 2, 10, 2\n(10) / (2) = 5, left: 5, 2\n(2) * (5) = 10, left: 10\n(5) - (2) = 3, left: 3\n(5) / (2) = 5/2, left: 5/2\n(2) + (5) = 7, left: 7\n(2) / (5) = 2/5, left: 2/5\n(2) - (5) = -3, left: -3\n(10) + (2) = 12, left: 12, 2\n(2) + (12) = 14, left: 14\n(2) * (12) = 24, left: 24\nreach 24! expression: ((12 - 10) * (10 + 2))"}, {"input": "11 11 12 1\n", "output": "(11) * (1) = 11, left: 11, 11, 12\n(11) * (11) = 121, left: 121, 12, 1\n(121) - (12) = 109, left: 109, 1\n(11) / (11) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 11 12 1\n", "output": "(12) / (11) = 12/11, left: 12/11, 11, 1\n(12/11) - (11) = -109/11, left: -109/11, 1\n(11) / (12) = 11/12, left: 11/12, 11, 1\n(11) / (11) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 11 12 1\n", "output": "(11) / (1) = 11, left: 11, 11, 12\n(11) - (1) = 10, left: 10, 11, 12\n(11) / (12) = 11/12, left: 11/12, 10\n(11) / (11) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 11 12 1\n", "output": "(11) * (12) = 132, left: 132, 11, 1\n(11) - (1) = 10, left: 10, 132\n(12) - (11) = 1, left: 1, 11, 1\n(11) / (11) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 11 12 1\n", "output": "(11) + (12) = 23, left: 23, 11, 1\n(11) - (23) = -12, left: -12, 1\n(12) * (1) = 12, left: 12, 11, 11\n(11) / (11) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 11 12 1\n", "output": "(11) - (12) = -1, left: -1, 11, 1\n(11) * (12) = 132, left: 132, 11, 1\n(11) * (1) = 11, left: 11, 132\n(11) - (12) = -1, left: -1, 11, 1\n(1) / (11) = 1/11, left: 1/11, -1\n(11) * (12) = 132, left: 132, 11, 1\n(132) / (1) = 132, left: 132, 11\n(11) / (11) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 11 12 1\n", "output": "(11) * (1) = 11, left: 11, 11, 12\n(11) + (1) = 12, left: 12, 11, 12\n(11) - (1) = 10, left: 10, 11, 12\n(11) / (1) = 11, left: 11, 11, 12\n(11) / (12) = 11/12, left: 11/12, 11\n(11) * (11) = 121, left: 121, 12, 1\n(121) - (12) = 109, left: 109, 1\n(11) / (11) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 11 12 1\n", "output": "(11) + (1) = 12, left: 12, 11, 12\n(11) / (12) = 11/12, left: 11/12, 12\n(1) / (11) = 1/11, left: 1/11, 11, 12\n(11) - (11) = 0, left: 0, 12, 1\n(0) - (1) = -1, left: -1, 12\n(11) / (11) = 1, left: 1, 12, 1\n(1) / (12) = 1/12, left: 1/12, 1\n(1) / (1/12) = 12, left: 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 11 12 1\n", "output": "(12) * (1) = 12, left: 12, 11, 11\n(12) - (1) = 11, left: 11, 11, 11\n(12) / (1) = 12, left: 12, 11, 11\n(11) / (12) = 11/12, left: 11/12, 11\n(1) / (11) = 1/11, left: 1/11, 11, 12\n(1/11) / (11) = 1/121, left: 1/121, 12\n(12) * (1/121) = 12/121, left: 12/121\n(11) / (11) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 11 12 1\n", "output": "(12) - (11) = 1, left: 1, 11, 1\n(1) - (12) = -11, left: -11, 11, 11\n(12) / (1) = 12, left: 12, 11, 11\n(11) * (11) = 121, left: 121, 12\n(11) + (12) = 23, left: 23, 11, 1\n(11) - (12) = -1, left: -1, 11, 1\n(-1) / (1) = -1, left: -1, 11\n(11) / (11) = 1, left: 1, 12, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 7 10 4\n", "output": "(10) / (4) = 5/2, left: 5/2, 11, 7\n(7) - (5/2) = 9/2, left: 9/2, 11\n(11) - (5/2) = 17/2, left: 17/2, 7\n(10) - (4) = 6, left: 6, 11, 7\n(7) + (6) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (7 + (10 - 4)))"}, {"input": "11 7 10 4\n", "output": "(11) + (7) = 18, left: 18, 10, 4\n(18) - (4) = 14, left: 14, 10\n(10) / (14) = 5/7, left: 5/7\n(14) / (10) = 7/5, left: 7/5\n(10) * (14) = 140, left: 140\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((11 + 7) - 4))"}, {"input": "11 7 10 4\n", "output": "(11) * (4) = 44, left: 44, 7, 10\n(7) - (10) = -3, left: -3, 44\n(44) / (-3) = -44/3, left: -44/3\n(4) - (11) = -7, left: -7, 7, 10\n(-7) - (7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((4 - 11) - 7))"}, {"input": "11 7 10 4\n", "output": "(11) + (7) = 18, left: 18, 10, 4\n(18) - (4) = 14, left: 14, 10\n(14) - (10) = 4, left: 4\n(10) / (14) = 5/7, left: 5/7\n(14) / (10) = 7/5, left: 7/5\n(10) * (14) = 140, left: 140\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((11 + 7) - 4))"}, {"input": "11 7 10 4\n", "output": "(4) / (11) = 4/11, left: 4/11, 7, 10\n(4/11) - (10) = -106/11, left: -106/11, 7\n(11) * (4) = 44, left: 44, 7, 10\n(7) - (44) = -37, left: -37, 10\n(10) - (7) = 3, left: 3, 44\n(11) / (4) = 11/4, left: 11/4, 7, 10\n(7) / (11/4) = 28/11, left: 28/11, 10\n(4) - (11) = -7, left: -7, 7, 10\n(-7) - (7) = -14, left: -14, 10\n(10) - (-14) = 24, left: 24\nreach 24! expression: (10 - ((4 - 11) - 7))"}, {"input": "11 7 10 4\n", "output": "(7) / (4) = 7/4, left: 7/4, 11, 10\n(10) - (7/4) = 33/4, left: 33/4, 11\n(11) * (10) = 110, left: 110, 7/4\n(7) * (4) = 28, left: 28, 11, 10\n(4) / (7) = 4/7, left: 4/7, 11, 10\n(10) / (11) = 10/11, left: 10/11, 4/7\n(7) + (4) = 11, left: 11, 11, 10\n(4) - (7) = -3, left: -3, 11, 10\n(-3) - (10) = -13, left: -13, 11\n(11) - (-13) = 24, left: 24\nreach 24! expression: (11 - ((4 - 7) - 10))"}, {"input": "11 7 10 4\n", "output": "(10) / (4) = 5/2, left: 5/2, 11, 7\n(7) / (5/2) = 14/5, left: 14/5, 11\n(11) / (7) = 11/7, left: 11/7, 5/2\n(11) * (7) = 77, left: 77, 5/2\n(11) + (5/2) = 27/2, left: 27/2, 7\n(27/2) - (7) = 13/2, left: 13/2\n(5/2) - (11) = -17/2, left: -17/2, 7\n(10) - (4) = 6, left: 6, 11, 7\n(7) + (6) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: (11 + (7 + (10 - 4)))"}, {"input": "11 7 10 4\n", "output": "(11) + (7) = 18, left: 18, 10, 4\n(18) - (4) = 14, left: 14, 10\n(14) - (10) = 4, left: 4\n(10) / (14) = 5/7, left: 5/7\n(14) / (10) = 7/5, left: 7/5\n(10) * (14) = 140, left: 140\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((11 + 7) - 4))"}, {"input": "11 7 10 4\n", "output": "(11) + (7) = 18, left: 18, 10, 4\n(18) - (4) = 14, left: 14, 10\n(14) - (10) = 4, left: 4\n(10) / (14) = 5/7, left: 5/7\n(14) / (10) = 7/5, left: 7/5\n(10) * (14) = 140, left: 140\n(10) + (14) = 24, left: 24\nreach 24! expression: (10 + ((11 + 7) - 4))"}, {"input": "3 8 4 11\n", "output": "(8) / (3) = 8/3, left: 8/3, 4, 11\n(4) + (8/3) = 20/3, left: 20/3, 11\n(4) / (11) = 4/11, left: 4/11, 8/3\n(8) - (3) = 5, left: 5, 4, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (8 - 3)))"}, {"input": "3 8 4 11\n", "output": "(3) / (8) = 3/8, left: 3/8, 4, 11\n(3) + (8) = 11, left: 11, 4, 11\n(11) - (11) = 0, left: 0, 4\n(0) - (4) = -4, left: -4\n(4) / (11) = 4/11, left: 4/11, 11\n(8) / (3) = 8/3, left: 8/3, 4, 11\n(11) - (8/3) = 25/3, left: 25/3, 4\n(3) - (8) = -5, left: -5, 4, 11\n(11) + (-5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 + (3 - 8)))"}, {"input": "3 8 4 11\n", "output": "(4) - (3) = 1, left: 1, 8, 11\n(1) - (11) = -10, left: -10, 8\n(3) * (4) = 12, left: 12, 8, 11\n(3) - (4) = -1, left: -1, 8, 11\n(-1) / (8) = -1/8, left: -1/8, 11\n(4) / (3) = 4/3, left: 4/3, 8, 11\n(11) - (8) = 3, left: 3, 4/3\n(8) - (11) = -3, left: -3, 3, 4\n(3) - (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 - (8 - 11)))"}, {"input": "3 8 4 11\n", "output": "(4) - (11) = -7, left: -7, 3, 8\n(8) * (-7) = -56, left: -56, 3\n(4) + (11) = 15, left: 15, 3, 8\n(11) - (4) = 7, left: 7, 3, 8\n(3) - (7) = -4, left: -4, 8\n(11) / (4) = 11/4, left: 11/4, 3, 8\n(8) - (11/4) = 21/4, left: 21/4, 3\n(8) - (3) = 5, left: 5, 4, 11\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (8 - 3)))"}, {"input": "3 8 4 11\n", "output": "(8) / (3) = 8/3, left: 8/3, 4, 11\n(11) + (8/3) = 41/3, left: 41/3, 4\n(4) / (41/3) = 12/41, left: 12/41\n(4) - (11) = -7, left: -7, 8/3\n(8) - (3) = 5, left: 5, 4, 11\n(4) + (11) = 15, left: 15, 5\n(11) - (4) = 7, left: 7, 5\n(11) / (4) = 11/4, left: 11/4, 5\n(11) - (5) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (11 - (8 - 3)))"}, {"input": "3 8 4 11\n", "output": "(8) * (11) = 88, left: 88, 3, 4\n(3) / (4) = 3/4, left: 3/4, 88\n(4) * (88) = 352, left: 352, 3\n(8) + (11) = 19, left: 19, 3, 4\n(4) * (19) = 76, left: 76, 3\n(8) / (11) = 8/11, left: 8/11, 3, 4\n(3) * (4) = 12, left: 12, 8/11\n(8) - (11) = -3, left: -3, 3, 4\n(3) - (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 - (8 - 11)))"}, {"input": "3 8 4 11\n", "output": "(4) - (3) = 1, left: 1, 8, 11\n(8) / (1) = 8, left: 8, 11\n(8) - (1) = 7, left: 7, 11\n(3) + (4) = 7, left: 7, 8, 11\n(11) + (7) = 18, left: 18, 8\n(3) * (4) = 12, left: 12, 8, 11\n(8) * (12) = 96, left: 96, 11\n(12) / (8) = 3/2, left: 3/2, 11\n(4) / (3) = 4/3, left: 4/3, 8, 11\n(8) - (11) = -3, left: -3, 4/3\n(8) / (4/3) = 6, left: 6, 11\n(8) - (11) = -3, left: -3, 3, 4\n(3) - (-3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * (3 - (8 - 11)))"}, {"input": "12 1 1 3\n", "output": "(1) - (12) = -11, left: -11, 1, 3\n(3) / (-11) = -3/11, left: -3/11, 1\n(1) / (12) = 1/12, left: 1/12, 1, 3\n(3) / (1/12) = 36, left: 36, 1\n(3) - (1) = 2, left: 2, 1/12\n(2) / (1/12) = 24, left: 24\nreach 24! expression: ((3 - 1) / (1 / 12))"}, {"input": "12 1 1 3\n", "output": "(1) * (3) = 3, left: 3, 12, 1\n(12) / (1) = 12, left: 12, 3\n(12) + (1) = 13, left: 13, 3\n(3) / (13) = 3/13, left: 3/13\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((1 * 3) - 1))"}, {"input": "12 1 1 3\n", "output": "(12) + (1) = 13, left: 13, 1, 3\n(13) / (3) = 13/3, left: 13/3, 1\n(1) + (13/3) = 16/3, left: 16/3\n(3) - (1) = 2, left: 2, 13\n(2) - (13) = -11, left: -11\n(1) + (13) = 14, left: 14, 3\n(13) - (1) = 12, left: 12, 3\n(12) / (1) = 12, left: 12, 1, 3\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((12 / 1) * (3 - 1))"}, {"input": "12 1 1 3\n", "output": "(1) * (3) = 3, left: 3, 12, 1\n(12) / (1) = 12, left: 12, 3\n(12) - (3) = 9, left: 9\n(3) * (12) = 36, left: 36\n(3) / (1) = 3, left: 3, 12\n(1) + (3) = 4, left: 4, 12\n(1) - (3) = -2, left: -2, 12\n(12) / (-2) = -6, left: -6\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((1 * 3) - 1))"}, {"input": "12 1 1 3\n", "output": "(1) - (3) = -2, left: -2, 12, 1\n(-2) - (1) = -3, left: -3, 12\n(1) - (-2) = 3, left: 3, 12\n(1) * (-2) = -2, left: -2, 12\n(1) / (12) = 1/12, left: 1/12, -2\n(-2) + (1/12) = -23/12, left: -23/12\n(3) - (1) = 2, left: 2, 12, 1\n(1) / (12) = 1/12, left: 1/12, 2\n(2) - (1/12) = 23/12, left: 23/12\n(2) / (1/12) = 24, left: 24\nreach 24! expression: ((3 - 1) / (1 / 12))"}, {"input": "12 1 1 3\n", "output": "(3) - (12) = -9, left: -9, 1, 1\n(1) * (-9) = -9, left: -9, 1\n(12) + (3) = 15, left: 15, 1, 1\n(12) / (3) = 4, left: 4, 1, 1\n(4) / (1) = 4, left: 4, 1\n(1) / (4) = 1/4, left: 1/4\n(3) / (1) = 3, left: 3, 12, 1\n(3) / (1) = 3, left: 3, 12\n(3) - (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: (12 * ((3 / 1) - 1))"}, {"input": "12 1 1 3\n", "output": "(1) - (12) = -11, left: -11, 1, 3\n(1) + (3) = 4, left: 4, -11\n(-11) / (4) = -11/4, left: -11/4\n(1) / (12) = 1/12, left: 1/12, 1, 3\n(1/12) / (3) = 1/36, left: 1/36, 1\n(3) * (1/12) = 1/4, left: 1/4, 1\n(1/12) - (3) = -35/12, left: -35/12, 1\n(1) / (1/12) = 12, left: 12, 3\n(3) - (1) = 2, left: 2, 1/12\n(2) / (1/12) = 24, left: 24\nreach 24! expression: ((3 - 1) / (1 / 12))"}, {"input": "2 3 13 3\n", "output": "(3) * (3) = 9, left: 9, 2, 13\n(9) / (13) = 9/13, left: 9/13, 2\n(9/13) - (2) = -17/13, left: -17/13\n(13) + (9) = 22, left: 22, 2\n(2) * (22) = 44, left: 44\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (13 + (3 * 3)))"}, {"input": "2 3 13 3\n", "output": "(2) * (3) = 6, left: 6, 13, 3\n(3) - (6) = -3, left: -3, 13\n(3) - (2) = 1, left: 1, 13, 3\n(13) / (3) = 13/3, left: 13/3, 1\n(2) - (3) = -1, left: -1, 13, 3\n(13) + (-1) = 12, left: 12, 3\n(2) + (3) = 5, left: 5, 13, 3\n(13) + (5) = 18, left: 18, 3\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (13 - (2 + 3)))"}, {"input": "2 3 13 3\n", "output": "(3) - (3) = 0, left: 0, 2, 13\n(2) * (0) = 0, left: 0, 13\n(13) + (0) = 13, left: 13, 2\n(13) - (0) = 13, left: 13, 2\n(13) / (2) = 13/2, left: 13/2\n(3) / (3) = 1, left: 1, 2, 13\n(13) / (1) = 13, left: 13, 2\n(13) / (2) = 13/2, left: 13/2\n(13) - (1) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: (2 * (13 - (3 / 3)))"}, {"input": "2 3 13 3\n", "output": "(2) - (13) = -11, left: -11, 3, 3\n(3) + (-11) = -8, left: -8, 3\n(3) * (-11) = -33, left: -33, 3\n(3) + (-11) = -8, left: -8, 3\n(-8) - (3) = -11, left: -11\n(2) * (13) = 26, left: 26, 3, 3\n(3) + (26) = 29, left: 29, 3\n(13) - (2) = 11, left: 11, 3, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((13 - 2) - 3))"}, {"input": "2 3 13 3\n", "output": "(3) + (13) = 16, left: 16, 2, 3\n(2) + (16) = 18, left: 18, 3\n(18) / (3) = 6, left: 6\n(16) - (2) = 14, left: 14, 3\n(3) - (14) = -11, left: -11\n(14) / (3) = 14/3, left: 14/3\n(16) / (2) = 8, left: 8, 3\n(3) / (8) = 3/8, left: 3/8\n(3) + (8) = 11, left: 11\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((3 + 13) / 2))"}, {"input": "2 3 13 3\n", "output": "(3) * (3) = 9, left: 9, 2, 13\n(9) - (13) = -4, left: -4, 2\n(-4) / (2) = -2, left: -2\n(2) * (-4) = -8, left: -8\n(9) / (13) = 9/13, left: 9/13, 2\n(2) / (9/13) = 26/9, left: 26/9\n(9/13) - (2) = -17/13, left: -17/13\n(9/13) / (2) = 9/26, left: 9/26\n(13) + (9) = 22, left: 22, 2\n(2) + (22) = 24, left: 24\nreach 24! expression: (2 + (13 + (3 * 3)))"}, {"input": "8 12 6 9\n", "output": "(8) * (9) = 72, left: 72, 12, 6\n(12) * (6) = 72, left: 72, 72\n(72) - (72) = 0, left: 0\n(12) + (6) = 18, left: 18, 72\n(72) / (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((8 * 9) / 6))"}, {"input": "8 12 6 9\n", "output": "(8) * (9) = 72, left: 72, 12, 6\n(72) - (6) = 66, left: 66, 12\n(6) / (72) = 1/12, left: 1/12, 12\n(1/12) / (12) = 1/144, left: 1/144\n(72) / (6) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((8 * 9) / 6))"}, {"input": "8 12 6 9\n", "output": "(8) * (9) = 72, left: 72, 12, 6\n(6) * (72) = 432, left: 432, 12\n(432) / (12) = 36, left: 36\n(72) - (6) = 66, left: 66, 12\n(12) + (66) = 78, left: 78\n(6) / (72) = 1/12, left: 1/12, 12\n(72) / (6) = 12, left: 12, 12\n(12) / (12) = 1, left: 1\n(12) * (12) = 144, left: 144\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((8 * 9) / 6))"}, {"input": "8 12 6 9\n", "output": "(8) * (9) = 72, left: 72, 12, 6\n(6) - (12) = -6, left: -6, 72\n(72) / (-6) = -12, left: -12\n(12) / (6) = 2, left: 2, 72\n(72) * (2) = 144, left: 144\n(12) - (6) = 6, left: 6, 72\n(12) + (6) = 18, left: 18, 72\n(72) / (6) = 12, left: 12, 12\n(12) * (12) = 144, left: 144\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + ((8 * 9) / 6))"}, {"input": "8 12 6 9\n", "output": "(12) / (6) = 2, left: 2, 8, 9\n(6) / (12) = 1/2, left: 1/2, 8, 9\n(8) - (1/2) = 15/2, left: 15/2, 9\n(8) + (9) = 17, left: 17, 1/2\n(12) * (6) = 72, left: 72, 8, 9\n(8) * (72) = 576, left: 576, 9\n(9) - (576) = -567, left: -567\n(6) - (12) = -6, left: -6, 8, 9\n(9) + (-6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 + (6 - 12)))"}, {"input": "8 12 6 9\n", "output": "(6) * (9) = 54, left: 54, 8, 12\n(54) / (12) = 9/2, left: 9/2, 8\n(6) - (9) = -3, left: -3, 8, 12\n(8) - (12) = -4, left: -4, -3\n(9) - (6) = 3, left: 3, 8, 12\n(8) * (3) = 24, left: 24, 12\n(12) - (8) = 4, left: 4, 3\n(6) + (9) = 15, left: 15, 8, 12\n(15) - (12) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((6 + 9) - 12))"}, {"input": "8 12 6 9\n", "output": "(6) / (12) = 1/2, left: 1/2, 8, 9\n(8) + (9) = 17, left: 17, 1/2\n(9) / (1/2) = 18, left: 18, 8\n(12) * (6) = 72, left: 72, 8, 9\n(8) - (9) = -1, left: -1, 72\n(72) - (9) = 63, left: 63, 8\n(9) / (72) = 1/8, left: 1/8, 8\n(12) - (6) = 6, left: 6, 8, 9\n(9) - (6) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (9 - (12 - 6)))"}, {"input": "8 6 9 6\n", "output": "(9) - (8) = 1, left: 1, 6, 6\n(1) / (6) = 1/6, left: 1/6, 6\n(8) + (9) = 17, left: 17, 6, 6\n(8) / (9) = 8/9, left: 8/9, 6, 6\n(8/9) - (6) = -46/9, left: -46/9, 6\n(6) / (-46/9) = -27/23, left: -27/23\n(8) + (6) = 14, left: 14, 9, 6\n(6) - (8) = -2, left: -2, 9, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (6 - 8)))"}, {"input": "8 6 9 6\n", "output": "(6) - (8) = -2, left: -2, 6, 9\n(6) + (-2) = 4, left: 4, 9\n(9) * (4) = 36, left: 36\n(9) - (4) = 5, left: 5\n(6) / (-2) = -3, left: -3, 9\n(9) * (-3) = -27, left: -27\n(6) - (-2) = 8, left: 8, 9\n(-2) - (9) = -11, left: -11, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (6 - 8)))"}, {"input": "8 6 9 6\n", "output": "(6) - (9) = -3, left: -3, 8, 6\n(8) - (6) = 2, left: 2, -3\n(8) / (6) = 4/3, left: 4/3, -3\n(4/3) - (-3) = 13/3, left: 13/3\n(8) + (6) = 14, left: 14, -3\n(14) / (-3) = -14/3, left: -14/3\n(-3) / (6) = -1/2, left: -1/2, 8\n(-3) - (6) = -9, left: -9, 8\n(6) + (-3) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * (6 + (6 - 9)))"}, {"input": "8 6 9 6\n", "output": "(6) / (6) = 1, left: 1, 8, 9\n(8) - (9) = -1, left: -1, 1\n(8) + (1) = 9, left: 9, 9\n(6) * (6) = 36, left: 36, 8, 9\n(8) + (9) = 17, left: 17, 36\n(9) / (36) = 1/4, left: 1/4, 8\n(6) / (6) = 1, left: 1, 8, 9\n(6) + (6) = 12, left: 12, 8, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((6 + 6) - 9))"}, {"input": "8 6 9 6\n", "output": "(6) - (8) = -2, left: -2, 6, 9\n(9) / (-2) = -9/2, left: -9/2, 6\n(-9/2) - (6) = -21/2, left: -21/2\n(6) * (-9/2) = -27, left: -27\n(-2) / (9) = -2/9, left: -2/9, 6\n(6) - (-2/9) = 56/9, left: 56/9\n(9) + (-2) = 7, left: 7, 6\n(6) / (7) = 6/7, left: 6/7\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (6 - 8)))"}, {"input": "8 6 9 6\n", "output": "(6) / (6) = 1, left: 1, 8, 9\n(8) / (9) = 8/9, left: 8/9, 1\n(8) + (9) = 17, left: 17, 1\n(17) - (1) = 16, left: 16\n(8) / (1) = 8, left: 8, 9\n(8) + (1) = 9, left: 9, 9\n(6) * (6) = 36, left: 36, 8, 9\n(8) * (36) = 288, left: 288, 9\n(6) / (6) = 1, left: 1, 8, 9\n(6) - (6) = 0, left: 0, 8, 9\n(8) / (9) = 8/9, left: 8/9, 0\n(6) + (6) = 12, left: 12, 8, 9\n(12) - (9) = 3, left: 3, 8\n(8) * (3) = 24, left: 24\nreach 24! expression: (8 * ((6 + 6) - 9))"}, {"input": "8 6 9 6\n", "output": "(6) - (8) = -2, left: -2, 6, 9\n(6) + (-2) = 4, left: 4, 9\n(-2) / (6) = -1/3, left: -1/3, 9\n(-2) - (6) = -8, left: -8, 9\n(-8) / (9) = -8/9, left: -8/9\n(9) + (-8) = 1, left: 1\n(9) - (-8) = 17, left: 17\n(6) / (-2) = -3, left: -3, 9\n(9) - (-3) = 12, left: 12\n(6) * (-2) = -12, left: -12, 9\n(9) + (-12) = -3, left: -3\n(-2) - (9) = -11, left: -11, 6\n(9) * (-2) = -18, left: -18, 6\n(6) - (-18) = 24, left: 24\nreach 24! expression: (6 - (9 * (6 - 8)))"}, {"input": "12 12 5 5\n", "output": "(12) + (5) = 17, left: 17, 12, 5\n(5) / (12) = 5/12, left: 5/12, 17\n(12) + (5) = 17, left: 17, 17\n(17) - (17) = 0, left: 0\n(5) - (12) = -7, left: -7, 17\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((12 + 5) - (5 - 12))"}, {"input": "12 12 5 5\n", "output": "(12) / (5) = 12/5, left: 12/5, 12, 5\n(12/5) / (5) = 12/25, left: 12/25, 12\n(5) - (12/5) = 13/5, left: 13/5, 12\n(13/5) - (12) = -47/5, left: -47/5\n(5) * (12/5) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (5 * (12 / 5)))"}, {"input": "12 12 5 5\n", "output": "(12) - (5) = 7, left: 7, 12, 5\n(5) / (12) = 5/12, left: 5/12, 7\n(7) + (5/12) = 89/12, left: 89/12\n(7) / (5/12) = 84/5, left: 84/5\n(12) + (5) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: ((12 - 5) + (12 + 5))"}, {"input": "12 12 5 5\n", "output": "(5) - (12) = -7, left: -7, 12, 5\n(12) + (5) = 17, left: 17, -7\n(17) / (-7) = -17/7, left: -17/7\n(-7) + (17) = 10, left: 10\n(-7) * (17) = -119, left: -119\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((12 + 5) - (5 - 12))"}, {"input": "12 12 5 5\n", "output": "(12) / (5) = 12/5, left: 12/5, 12, 5\n(12) - (12/5) = 48/5, left: 48/5, 5\n(12) + (12/5) = 72/5, left: 72/5, 5\n(5) + (72/5) = 97/5, left: 97/5\n(5) * (12/5) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (5 * (12 / 5)))"}, {"input": "12 12 5 5\n", "output": "(12) / (5) = 12/5, left: 12/5, 12, 5\n(12) + (12/5) = 72/5, left: 72/5, 5\n(5) / (72/5) = 25/72, left: 25/72\n(12) / (12/5) = 5, left: 5, 5\n(5) - (12/5) = 13/5, left: 13/5, 12\n(5) / (12/5) = 25/12, left: 25/12, 12\n(5) + (12/5) = 37/5, left: 37/5, 12\n(37/5) - (12) = -23/5, left: -23/5\n(5) * (12/5) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (5 * (12 / 5)))"}, {"input": "12 12 5 5\n", "output": "(5) - (12) = -7, left: -7, 12, 5\n(12) + (5) = 17, left: 17, -7\n(17) / (-7) = -17/7, left: -17/7\n(-7) + (17) = 10, left: 10\n(-7) * (17) = -119, left: -119\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((12 + 5) - (5 - 12))"}, {"input": "12 12 5 5\n", "output": "(12) - (5) = 7, left: 7, 12, 5\n(5) / (12) = 5/12, left: 5/12, 7\n(7) * (5/12) = 35/12, left: 35/12\n(7) + (5/12) = 89/12, left: 89/12\n(5/12) - (7) = -79/12, left: -79/12\n(12) + (5) = 17, left: 17, 7\n(17) - (7) = 10, left: 10\n(17) / (7) = 17/7, left: 17/7\n(7) - (17) = -10, left: -10\n(7) + (17) = 24, left: 24\nreach 24! expression: ((12 - 5) + (12 + 5))"}, {"input": "12 12 5 5\n", "output": "(12) + (5) = 17, left: 17, 12, 5\n(5) / (12) = 5/12, left: 5/12, 17\n(17) + (5/12) = 209/12, left: 209/12\n(5/12) / (17) = 5/204, left: 5/204\n(12) + (5) = 17, left: 17, 17\n(17) * (17) = 289, left: 289\n(12) / (5) = 12/5, left: 12/5, 17\n(17) * (12/5) = 204/5, left: 204/5\n(5) - (12) = -7, left: -7, 17\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((12 + 5) - (5 - 12))"}, {"input": "12 12 5 5\n", "output": "(12) / (5) = 12/5, left: 12/5, 12, 5\n(5) + (12/5) = 37/5, left: 37/5, 12\n(5) / (12/5) = 25/12, left: 25/12, 12\n(12) / (25/12) = 144/25, left: 144/25\n(12/5) / (5) = 12/25, left: 12/25, 12\n(5) - (12/5) = 13/5, left: 13/5, 12\n(13/5) - (12) = -47/5, left: -47/5\n(12) - (13/5) = 47/5, left: 47/5\n(5) * (12/5) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (5 * (12 / 5)))"}, {"input": "12 12 5 5\n", "output": "(5) - (12) = -7, left: -7, 12, 5\n(12) + (5) = 17, left: 17, -7\n(17) / (-7) = -17/7, left: -17/7\n(-7) + (17) = 10, left: 10\n(-7) * (17) = -119, left: -119\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((12 + 5) - (5 - 12))"}, {"input": "12 12 5 5\n", "output": "(5) - (12) = -7, left: -7, 12, 5\n(12) + (5) = 17, left: 17, -7\n(17) / (-7) = -17/7, left: -17/7\n(-7) + (17) = 10, left: 10\n(-7) * (17) = -119, left: -119\n(17) - (-7) = 24, left: 24\nreach 24! expression: ((12 + 5) - (5 - 12))"}, {"input": "1 3 8 13\n", "output": "(13) / (1) = 13, left: 13, 3, 8\n(8) * (13) = 104, left: 104, 3\n(104) - (3) = 101, left: 101\n(13) - (8) = 5, left: 5, 3\n(8) + (13) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (8 + (13 / 1)))"}, {"input": "1 3 8 13\n", "output": "(13) - (8) = 5, left: 5, 1, 3\n(1) + (3) = 4, left: 4, 5\n(8) / (13) = 8/13, left: 8/13, 1, 3\n(1) - (8/13) = 5/13, left: 5/13, 3\n(8) - (13) = -5, left: -5, 1, 3\n(-5) - (1) = -6, left: -6, 3\n(-6) / (3) = -2, left: -2\n(8) + (13) = 21, left: 21, 1, 3\n(3) + (21) = 24, left: 24, 1\n(1) * (24) = 24, left: 24\nreach 24! expression: (1 * (3 + (8 + 13)))"}, {"input": "1 3 8 13\n", "output": "(13) / (1) = 13, left: 13, 3, 8\n(8) * (13) = 104, left: 104, 3\n(3) - (104) = -101, left: -101\n(13) - (8) = 5, left: 5, 3\n(5) / (3) = 5/3, left: 5/3\n(3) - (5) = -2, left: -2\n(8) / (13) = 8/13, left: 8/13, 3\n(3) - (8/13) = 31/13, left: 31/13\n(8) + (13) = 21, left: 21, 3\n(3) + (21) = 24, left: 24\nreach 24! expression: (3 + (8 + (13 / 1)))"}, {"input": "1 3 8 13\n", "output": "(1) - (3) = -2, left: -2, 8, 13\n(8) * (-2) = -16, left: -16, 13\n(-16) / (13) = -16/13, left: -16/13\n(-2) - (8) = -10, left: -10, 13\n(13) - (-2) = 15, left: 15, 8\n(8) - (13) = -5, left: -5, -2\n(8) / (13) = 8/13, left: 8/13, -2\n(3) / (1) = 3, left: 3, 8, 13\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: (8 + (13 + (3 / 1)))"}, {"input": "1 3 8 13\n", "output": "(3) - (8) = -5, left: -5, 1, 13\n(13) - (-5) = 18, left: 18, 1\n(13) + (-5) = 8, left: 8, 1\n(1) / (-5) = -1/5, left: -1/5, 13\n(-5) / (1) = -5, left: -5, 13\n(13) * (-5) = -65, left: -65\n(1) + (-5) = -4, left: -4, 13\n(3) + (8) = 11, left: 11, 1, 13\n(1) * (13) = 13, left: 13, 11\n(11) + (13) = 24, left: 24\nreach 24! expression: ((3 + 8) + (1 * 13))"}, {"input": "5 11 13 5\n", "output": "(13) - (5) = 8, left: 8, 11, 5\n(11) * (5) = 55, left: 55, 8\n(11) / (5) = 11/5, left: 11/5, 8\n(8) / (11/5) = 40/11, left: 40/11\n(11) + (5) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((13 - 5) + (11 + 5))"}, {"input": "5 11 13 5\n", "output": "(11) / (13) = 11/13, left: 11/13, 5, 5\n(11/13) / (5) = 11/65, left: 11/65, 5\n(5) - (11/13) = 54/13, left: 54/13, 5\n(11) + (13) = 24, left: 24, 5, 5\n(24) - (5) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((11 + 13) - 5))"}, {"input": "5 11 13 5\n", "output": "(5) - (11) = -6, left: -6, 5, 13\n(-6) - (5) = -11, left: -11, 13\n(-11) / (13) = -11/13, left: -11/13\n(13) + (-11) = 2, left: 2\n(13) * (-11) = -143, left: -143\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((5 - 11) - 5))"}, {"input": "5 11 13 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 13, 5\n(5) * (11/5) = 11, left: 11, 13\n(13) * (11) = 143, left: 143\n(13) - (11) = 2, left: 2\n(11) - (13) = -2, left: -2\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (5 * (11 / 5)))"}, {"input": "5 11 13 5\n", "output": "(5) - (5) = 0, left: 0, 11, 13\n(0) - (11) = -11, left: -11, 13\n(13) + (-11) = 2, left: 2\n(-11) / (13) = -11/13, left: -11/13\n(13) / (-11) = -13/11, left: -13/11\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((5 - 5) - 11))"}, {"input": "5 11 13 5\n", "output": "(13) - (5) = 8, left: 8, 11, 5\n(5) / (11) = 5/11, left: 5/11, 8\n(5/11) - (8) = -83/11, left: -83/11\n(5) - (11) = -6, left: -6, 8\n(8) / (-6) = -4/3, left: -4/3\n(11) * (5) = 55, left: 55, 8\n(11) - (5) = 6, left: 6, 8\n(8) / (6) = 4/3, left: 4/3\n(11) + (5) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((13 - 5) + (11 + 5))"}, {"input": "5 11 13 5\n", "output": "(11) / (13) = 11/13, left: 11/13, 5, 5\n(5) + (11/13) = 76/13, left: 76/13, 5\n(5) - (11/13) = 54/13, left: 54/13, 5\n(11/13) / (5) = 11/65, left: 11/65, 5\n(5) * (11/13) = 55/13, left: 55/13, 5\n(5) * (11/13) = 55/13, left: 55/13, 5\n(5) - (5) = 0, left: 0, 11/13\n(11) + (13) = 24, left: 24, 5, 5\n(24) - (5) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + ((11 + 13) - 5))"}, {"input": "5 11 13 5\n", "output": "(5) - (11) = -6, left: -6, 5, 13\n(-6) - (5) = -11, left: -11, 13\n(-11) / (13) = -11/13, left: -11/13\n(13) + (-11) = 2, left: 2\n(13) * (-11) = -143, left: -143\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((5 - 11) - 5))"}, {"input": "5 11 13 5\n", "output": "(5) - (5) = 0, left: 0, 11, 13\n(0) - (11) = -11, left: -11, 13\n(13) + (-11) = 2, left: 2\n(-11) / (13) = -11/13, left: -11/13\n(13) * (-11) = -143, left: -143\n(13) / (-11) = -13/11, left: -13/11\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((5 - 5) - 11))"}, {"input": "5 11 13 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 13, 5\n(5) * (11/5) = 11, left: 11, 13\n(13) * (11) = 143, left: 143\n(11) / (13) = 11/13, left: 11/13\n(13) - (11) = 2, left: 2\n(11) - (13) = -2, left: -2\n(13) / (11) = 13/11, left: 13/11\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (5 * (11 / 5)))"}, {"input": "5 11 13 5\n", "output": "(5) - (11) = -6, left: -6, 5, 13\n(-6) - (5) = -11, left: -11, 13\n(-11) / (13) = -11/13, left: -11/13\n(13) + (-11) = 2, left: 2\n(13) * (-11) = -143, left: -143\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((5 - 11) - 5))"}, {"input": "5 11 13 5\n", "output": "(5) - (5) = 0, left: 0, 11, 13\n(0) - (11) = -11, left: -11, 13\n(13) + (-11) = 2, left: 2\n(-11) / (13) = -11/13, left: -11/13\n(13) * (-11) = -143, left: -143\n(13) / (-11) = -13/11, left: -13/11\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((5 - 5) - 11))"}, {"input": "5 11 13 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 13, 5\n(5) * (11/5) = 11, left: 11, 13\n(13) * (11) = 143, left: 143\n(11) / (13) = 11/13, left: 11/13\n(13) - (11) = 2, left: 2\n(11) - (13) = -2, left: -2\n(13) / (11) = 13/11, left: 13/11\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (5 * (11 / 5)))"}, {"input": "5 11 13 5\n", "output": "(5) - (11) = -6, left: -6, 5, 13\n(-6) - (5) = -11, left: -11, 13\n(-11) / (13) = -11/13, left: -11/13\n(13) + (-11) = 2, left: 2\n(13) * (-11) = -143, left: -143\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((5 - 11) - 5))"}, {"input": "5 11 13 5\n", "output": "(5) - (5) = 0, left: 0, 11, 13\n(0) - (11) = -11, left: -11, 13\n(13) + (-11) = 2, left: 2\n(-11) / (13) = -11/13, left: -11/13\n(13) * (-11) = -143, left: -143\n(13) / (-11) = -13/11, left: -13/11\n(13) - (-11) = 24, left: 24\nreach 24! expression: (13 - ((5 - 5) - 11))"}, {"input": "5 11 13 5\n", "output": "(11) / (5) = 11/5, left: 11/5, 13, 5\n(5) * (11/5) = 11, left: 11, 13\n(13) * (11) = 143, left: 143\n(11) / (13) = 11/13, left: 11/13\n(13) - (11) = 2, left: 2\n(11) - (13) = -2, left: -2\n(13) / (11) = 13/11, left: 13/11\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (5 * (11 / 5)))"}, {"input": "5 5 5 9\n", "output": "(5) + (5) = 10, left: 10, 5, 9\n(5) / (9) = 5/9, left: 5/9, 10\n(9) - (5) = 4, left: 4, 10\n(4) / (10) = 2/5, left: 2/5\n(5) + (9) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((5 + 5) + (5 + 9))"}, {"input": "5 5 5 9\n", "output": "(5) + (5) = 10, left: 10, 5, 9\n(5) / (9) = 5/9, left: 5/9, 10\n(10) * (5/9) = 50/9, left: 50/9\n(10) - (5/9) = 85/9, left: 85/9\n(10) / (5/9) = 18, left: 18\n(9) - (5) = 4, left: 4, 10\n(4) - (10) = -6, left: -6\n(10) - (4) = 6, left: 6\n(5) + (9) = 14, left: 14, 10\n(10) + (14) = 24, left: 24\nreach 24! expression: ((5 + 5) + (5 + 9))"}, {"input": "5 5 5 9\n", "output": "(9) - (5) = 4, left: 4, 5, 5\n(5) - (5) = 0, left: 0, 4\n(4) * (0) = 0, left: 0\n(5) / (5) = 1, left: 1, 4\n(4) - (1) = 3, left: 3\n(5) / (4) = 5/4, left: 5/4, 5\n(9) / (5) = 9/5, left: 9/5, 5, 5\n(5) + (9) = 14, left: 14, 5, 5\n(5) + (5) = 10, left: 10, 14\n(14) + (10) = 24, left: 24\nreach 24! expression: ((5 + 9) + (5 + 5))"}, {"input": "5 5 5 9\n", "output": "(5) * (9) = 45, left: 45, 5, 5\n(5) * (45) = 225, left: 225, 5\n(5) - (45) = -40, left: -40, 5\n(5) + (45) = 50, left: 50, 5\n(5) / (5) = 1, left: 1, 45\n(5) + (5) = 10, left: 10, 45\n(5) + (9) = 14, left: 14, 5, 5\n(5) * (14) = 70, left: 70, 5\n(5) + (14) = 19, left: 19, 5\n(5) + (19) = 24, left: 24\nreach 24! expression: (5 + (5 + (5 + 9)))"}, {"input": "5 5 5 9\n", "output": "(5) + (5) = 10, left: 10, 5, 9\n(10) - (5) = 5, left: 5, 9\n(5) / (9) = 5/9, left: 5/9\n(5) - (9) = -4, left: -4\n(5) * (10) = 50, left: 50, 9\n(9) + (50) = 59, left: 59\n(5) + (10) = 15, left: 15, 9\n(15) / (9) = 5/3, left: 5/3\n(9) * (15) = 135, left: 135\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 + (5 + 5)))"}, {"input": "5 5 5 9\n", "output": "(5) / (5) = 1, left: 1, 5, 9\n(5) - (1) = 4, left: 4, 9\n(9) - (4) = 5, left: 5\n(5) / (5) = 1, left: 1, 5, 9\n(5) + (9) = 14, left: 14, 1\n(9) / (1) = 9, left: 9, 5\n(5) * (5) = 25, left: 25, 5, 9\n(5) + (5) = 10, left: 10, 5, 9\n(5) + (10) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 + (5 + 5)))"}, {"input": "5 5 5 9\n", "output": "(5) / (5) = 1, left: 1, 5, 9\n(1) - (9) = -8, left: -8, 5\n(5) + (1) = 6, left: 6, 9\n(5) / (1) = 5, left: 5, 9\n(5) / (5) = 1, left: 1, 5, 9\n(5) + (1) = 6, left: 6, 9\n(1) - (9) = -8, left: -8, 5\n(5) * (-8) = -40, left: -40\n(5) * (5) = 25, left: 25, 5, 9\n(25) / (5) = 5, left: 5, 9\n(5) + (5) = 10, left: 10, 5, 9\n(5) - (10) = -5, left: -5, 9\n(5) + (10) = 15, left: 15, 9\n(9) + (15) = 24, left: 24\nreach 24! expression: (9 + (5 + (5 + 5)))"}, {"input": "5 7 6 3\n", "output": "(7) - (6) = 1, left: 1, 5, 3\n(6) - (7) = -1, left: -1, 5, 3\n(3) + (-1) = 2, left: 2, 5\n(5) + (-1) = 4, left: 4, 3\n(3) / (5) = 3/5, left: 3/5, -1\n(7) + (6) = 13, left: 13, 5, 3\n(3) - (5) = -2, left: -2, 13\n(5) * (13) = 65, left: 65, 3\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((7 + 6) - 5))"}, {"input": "5 7 6 3\n", "output": "(3) - (5) = -2, left: -2, 7, 6\n(6) * (-2) = -12, left: -12, 7\n(3) / (5) = 3/5, left: 3/5, 7, 6\n(5) - (3) = 2, left: 2, 7, 6\n(5) / (3) = 5/3, left: 5/3, 7, 6\n(5) + (3) = 8, left: 8, 7, 6\n(7) * (6) = 42, left: 42, 8\n(5) - (6) = -1, left: -1, 7, 3\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (5 - 6)))"}, {"input": "5 7 6 3\n", "output": "(5) - (6) = -1, left: -1, 7, 3\n(-1) - (3) = -4, left: -4, 7\n(3) / (-1) = -3, left: -3, 7\n(-1) / (3) = -1/3, left: -1/3, 7\n(7) / (-1/3) = -21, left: -21\n(3) - (7) = -4, left: -4, -1\n(-4) / (-1) = 4, left: 4\n(7) * (-1) = -7, left: -7, 3\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (5 - 6)))"}, {"input": "5 7 6 3\n", "output": "(7) + (6) = 13, left: 13, 5, 3\n(5) - (3) = 2, left: 2, 13\n(5) + (3) = 8, left: 8, 13\n(3) - (5) = -2, left: -2, 13\n(13) / (3) = 13/3, left: 13/3, 5\n(13/3) / (5) = 13/15, left: 13/15\n(13) - (3) = 10, left: 10, 5\n(10) / (5) = 2, left: 2\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((7 + 6) - 5))"}, {"input": "5 7 6 3\n", "output": "(6) + (3) = 9, left: 9, 5, 7\n(5) / (7) = 5/7, left: 5/7, 9\n(5) + (9) = 14, left: 14, 7\n(6) - (3) = 3, left: 3, 5, 7\n(7) + (3) = 10, left: 10, 5\n(3) / (6) = 1/2, left: 1/2, 5, 7\n(7) - (1/2) = 13/2, left: 13/2, 5\n(1/2) / (7) = 1/14, left: 1/14, 5\n(5) + (7) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((5 + 7) / (3 / 6))"}, {"input": "5 7 6 3\n", "output": "(7) - (6) = 1, left: 1, 5, 3\n(1) - (5) = -4, left: -4, 3\n(5) + (1) = 6, left: 6, 3\n(5) * (3) = 15, left: 15, 1\n(3) * (1) = 3, left: 3, 5\n(6) - (7) = -1, left: -1, 5, 3\n(3) / (-1) = -3, left: -3, 5\n(5) - (-3) = 8, left: 8\n(5) / (-1) = -5, left: -5, 3\n(7) + (6) = 13, left: 13, 5, 3\n(5) - (13) = -8, left: -8, 3\n(5) * (13) = 65, left: 65, 3\n(13) - (5) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((7 + 6) - 5))"}, {"input": "5 7 6 3\n", "output": "(3) - (5) = -2, left: -2, 7, 6\n(6) - (7) = -1, left: -1, -2\n(3) / (5) = 3/5, left: 3/5, 7, 6\n(3/5) - (7) = -32/5, left: -32/5, 6\n(6) - (7) = -1, left: -1, 3/5\n(5) - (3) = 2, left: 2, 7, 6\n(2) / (6) = 1/3, left: 1/3, 7\n(5) * (3) = 15, left: 15, 7, 6\n(7) / (15) = 7/15, left: 7/15, 6\n(15) - (6) = 9, left: 9, 7\n(5) + (3) = 8, left: 8, 7, 6\n(5) - (6) = -1, left: -1, 7, 3\n(7) - (-1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * (7 - (5 - 6)))"}, {"input": "5 7 6 3\n", "output": "(6) + (3) = 9, left: 9, 5, 7\n(7) - (5) = 2, left: 2, 9\n(9) / (5) = 9/5, left: 9/5, 7\n(5) + (9) = 14, left: 14, 7\n(7) * (14) = 98, left: 98\n(6) - (3) = 3, left: 3, 5, 7\n(5) * (3) = 15, left: 15, 7\n(5) / (3) = 5/3, left: 5/3, 7\n(5) - (3) = 2, left: 2, 7\n(7) + (2) = 9, left: 9\n(3) / (6) = 1/2, left: 1/2, 5, 7\n(7) * (1/2) = 7/2, left: 7/2, 5\n(5) + (7) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((5 + 7) / (3 / 6))"}, {"input": "9 13 9 7\n", "output": "(7) / (13) = 7/13, left: 7/13, 9, 9\n(9) * (9) = 81, left: 81, 7/13\n(7/13) - (81) = -1046/13, left: -1046/13\n(7) - (13) = -6, left: -6, 9, 9\n(9) + (9) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((9 + 9) - (7 - 13))"}, {"input": "9 13 9 7\n", "output": "(9) / (7) = 9/7, left: 9/7, 9, 13\n(9/7) / (13) = 9/91, left: 9/91, 9\n(9/7) - (13) = -82/7, left: -82/7, 9\n(9) - (7) = 2, left: 2, 9, 13\n(9) + (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (9 + (9 - 7)))"}, {"input": "9 13 9 7\n", "output": "(7) - (9) = -2, left: -2, 9, 13\n(13) * (-2) = -26, left: -26, 9\n(9) / (-26) = -9/26, left: -9/26\n(13) / (-2) = -13/2, left: -13/2, 9\n(-2) - (13) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - ((7 - 9) - 13))"}, {"input": "9 13 9 7\n", "output": "(7) - (9) = -2, left: -2, 9, 13\n(13) * (-2) = -26, left: -26, 9\n(-26) / (9) = -26/9, left: -26/9\n(-26) - (9) = -35, left: -35\n(13) / (-2) = -13/2, left: -13/2, 9\n(-13/2) - (9) = -31/2, left: -31/2\n(9) / (-13/2) = -18/13, left: -18/13\n(-13/2) / (9) = -13/18, left: -13/18\n(-2) - (13) = -15, left: -15, 9\n(9) - (-15) = 24, left: 24\nreach 24! expression: (9 - ((7 - 9) - 13))"}, {"input": "9 13 9 7\n", "output": "(7) / (13) = 7/13, left: 7/13, 9, 9\n(9) + (7/13) = 124/13, left: 124/13, 9\n(9) / (9) = 1, left: 1, 7/13\n(7/13) / (1) = 7/13, left: 7/13\n(9) + (9) = 18, left: 18, 7/13\n(13) * (7) = 91, left: 91, 9, 9\n(9) - (9) = 0, left: 0, 91\n(7) - (13) = -6, left: -6, 9, 9\n(9) + (9) = 18, left: 18, -6\n(18) - (-6) = 24, left: 24\nreach 24! expression: ((9 + 9) - (7 - 13))"}, {"input": "9 13 9 7\n", "output": "(9) / (7) = 9/7, left: 9/7, 9, 13\n(13) + (9/7) = 100/7, left: 100/7, 9\n(9) * (9/7) = 81/7, left: 81/7, 13\n(81/7) - (13) = -10/7, left: -10/7\n(9) / (13) = 9/13, left: 9/13, 9/7\n(9) * (13) = 117, left: 117, 9/7\n(9) - (7) = 2, left: 2, 9, 13\n(2) - (9) = -7, left: -7, 13\n(9) + (2) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (9 + (9 - 7)))"}, {"input": "9 13 9 7\n", "output": "(9) - (13) = -4, left: -4, 9, 7\n(7) / (-4) = -7/4, left: -7/4, 9\n(9) * (-7/4) = -63/4, left: -63/4\n(13) - (9) = 4, left: 4, 9, 7\n(7) - (9) = -2, left: -2, 4\n(9) - (4) = 5, left: 5, 7\n(9) + (13) = 22, left: 22, 9, 7\n(9) - (22) = -13, left: -13, 7\n(9) + (22) = 31, left: 31, 7\n(31) - (7) = 24, left: 24\nreach 24! expression: ((9 + (9 + 13)) - 7)"}, {"input": "1 1 6 2\n", "output": "(1) / (6) = 1/6, left: 1/6, 1, 2\n(1) * (2) = 2, left: 2, 1/6\n(1) - (6) = -5, left: -5, 1, 2\n(-5) - (2) = -7, left: -7, 1\n(6) / (1) = 6, left: 6, 1, 2\n(1) / (1) = 1, left: 1, 6, 2\n(2) / (1) = 2, left: 2, 6\n(1) + (1) = 2, left: 2, 6, 2\n(2) + (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 + (1 + 1)))"}, {"input": "1 1 6 2\n", "output": "(1) + (6) = 7, left: 7, 1, 2\n(7) / (2) = 7/2, left: 7/2, 1\n(6) - (1) = 5, left: 5, 1, 2\n(1) * (2) = 2, left: 2, 5\n(2) / (6) = 1/3, left: 1/3, 1, 1\n(1/3) - (1) = -2/3, left: -2/3, 1\n(-2/3) - (1) = -5/3, left: -5/3\n(6) * (2) = 12, left: 12, 1, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 * 2) * (1 + 1))"}, {"input": "1 1 6 2\n", "output": "(2) / (1) = 2, left: 2, 1, 6\n(6) + (2) = 8, left: 8, 1\n(1) - (8) = -7, left: -7\n(6) * (2) = 12, left: 12, 1\n(1) / (12) = 1/12, left: 1/12\n(1) / (2) = 1/2, left: 1/2, 6\n(6) - (1/2) = 11/2, left: 11/2\n(1) + (2) = 3, left: 3, 1, 6\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (1 + 2)))"}, {"input": "1 1 6 2\n", "output": "(1) - (2) = -1, left: -1, 1, 6\n(1) * (2) = 2, left: 2, 1, 6\n(1) / (2) = 1/2, left: 1/2, 1, 6\n(6) / (1) = 6, left: 6, 1/2\n(6) / (1/2) = 12, left: 12, 1\n(2) - (1) = 1, left: 1, 1, 6\n(2) / (1) = 2, left: 2, 1, 6\n(1) + (2) = 3, left: 3, 1, 6\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (1 + 2)))"}, {"input": "1 1 6 2\n", "output": "(2) / (6) = 1/3, left: 1/3, 1, 1\n(1/3) / (1) = 1/3, left: 1/3, 1\n(6) - (2) = 4, left: 4, 1, 1\n(1) / (4) = 1/4, left: 1/4, 1\n(1) * (4) = 4, left: 4, 1\n(1) * (4) = 4, left: 4\n(6) * (2) = 12, left: 12, 1, 1\n(1) / (1) = 1, left: 1, 12\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 * 2) * (1 + 1))"}, {"input": "1 1 6 2\n", "output": "(1) / (6) = 1/6, left: 1/6, 1, 2\n(1) * (2) = 2, left: 2, 1/6\n(1) + (6) = 7, left: 7, 1, 2\n(7) - (1) = 6, left: 6, 2\n(1) - (6) = -5, left: -5, 1, 2\n(6) / (1) = 6, left: 6, 1, 2\n(2) / (6) = 1/3, left: 1/3, 1, 1\n(6) - (2) = 4, left: 4, 1, 1\n(1) - (1) = 0, left: 0, 4\n(1) - (1) = 0, left: 0, 4\n(1) / (4) = 1/4, left: 1/4, 1\n(6) * (2) = 12, left: 12, 1, 1\n(1) + (1) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((6 * 2) * (1 + 1))"}, {"input": "1 1 6 2\n", "output": "(2) / (1) = 2, left: 2, 1, 6\n(6) + (2) = 8, left: 8, 1\n(6) - (2) = 4, left: 4, 1\n(2) / (6) = 1/3, left: 1/3, 1\n(6) - (1) = 5, left: 5, 2\n(1) + (2) = 3, left: 3, 1, 6\n(6) + (3) = 9, left: 9, 1\n(9) / (1) = 9, left: 9\n(6) - (3) = 3, left: 3, 1\n(1) * (3) = 3, left: 3\n(6) / (3) = 2, left: 2, 1\n(2) / (1) = 2, left: 2\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (1 + 2)))"}, {"input": "1 1 6 2\n", "output": "(1) / (6) = 1/6, left: 1/6, 1, 2\n(1) / (1/6) = 6, left: 6, 2\n(1) - (6) = -5, left: -5, 1, 2\n(1) * (2) = 2, left: 2, -5\n(6) - (1) = 5, left: 5, 1, 2\n(1) * (6) = 6, left: 6, 1, 2\n(1) + (2) = 3, left: 3, 6\n(1) + (6) = 7, left: 7, 1, 2\n(2) / (7) = 2/7, left: 2/7, 1\n(7) - (1) = 6, left: 6, 2\n(1) / (1) = 1, left: 1, 6, 2\n(1) + (1) = 2, left: 2, 6, 2\n(2) + (2) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (2 + (1 + 1)))"}, {"input": "1 1 6 2\n", "output": "(1) - (2) = -1, left: -1, 1, 6\n(1) - (-1) = 2, left: 2, 6\n(1) * (2) = 2, left: 2, 1, 6\n(1) / (2) = 1/2, left: 1/2, 1, 6\n(1) * (6) = 6, left: 6, 1/2\n(2) - (1) = 1, left: 1, 1, 6\n(1) - (1) = 0, left: 0, 6\n(1) - (6) = -5, left: -5, 1\n(1) + (2) = 3, left: 3, 1, 6\n(6) / (1) = 6, left: 6, 3\n(6) - (3) = 3, left: 3, 1\n(1) / (3) = 1/3, left: 1/3\n(1) + (3) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: (6 * (1 + (1 + 2)))"}, {"input": "13 3 4 4\n", "output": "(13) / (4) = 13/4, left: 13/4, 3, 4\n(13) + (4) = 17, left: 17, 3, 4\n(17) / (3) = 17/3, left: 17/3, 4\n(17/3) - (4) = 5/3, left: 5/3\n(3) + (17) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (3 + (13 + 4)))"}, {"input": "13 3 4 4\n", "output": "(13) - (4) = 9, left: 9, 3, 4\n(3) - (4) = -1, left: -1, 9\n(3) / (4) = 3/4, left: 3/4, 9\n(4) / (3) = 4/3, left: 4/3, 9\n(9) * (4/3) = 12, left: 12\n(9) / (3) = 3, left: 3, 4\n(3) + (9) = 12, left: 12, 4\n(12) / (4) = 3, left: 3\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((13 - 4) - 3))"}, {"input": "13 3 4 4\n", "output": "(13) - (4) = 9, left: 9, 3, 4\n(3) - (9) = -6, left: -6, 4\n(-6) - (4) = -10, left: -10\n(4) - (-6) = 10, left: 10\n(4) / (-6) = -2/3, left: -2/3\n(4) * (-6) = -24, left: -24\n(-6) / (4) = -3/2, left: -3/2\n(4) + (-6) = -2, left: -2\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((13 - 4) - 3))"}, {"input": "13 3 4 4\n", "output": "(13) / (4) = 13/4, left: 13/4, 3, 4\n(3) * (13/4) = 39/4, left: 39/4, 4\n(3) / (13/4) = 12/13, left: 12/13, 4\n(4) / (12/13) = 13/3, left: 13/3\n(13/4) / (4) = 13/16, left: 13/16, 3\n(3) + (4) = 7, left: 7, 13/4\n(13) + (4) = 17, left: 17, 3, 4\n(3) - (17) = -14, left: -14, 4\n(3) + (17) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (3 + (13 + 4)))"}, {"input": "13 3 4 4\n", "output": "(3) - (4) = -1, left: -1, 13, 4\n(4) - (-1) = 5, left: 5, 13\n(4) / (3) = 4/3, left: 4/3, 13, 4\n(13) * (4) = 52, left: 52, 4/3\n(13) - (4) = 9, left: 9, 4/3\n(4) / (13) = 4/13, left: 4/13, 4/3\n(13) / (4/3) = 39/4, left: 39/4, 4\n(3) + (4) = 7, left: 7, 13, 4\n(13) + (7) = 20, left: 20, 4\n(4) + (20) = 24, left: 24\nreach 24! expression: (4 + (13 + (3 + 4)))"}, {"input": "13 3 4 4\n", "output": "(4) / (13) = 4/13, left: 4/13, 3, 4\n(3) * (4) = 12, left: 12, 4/13\n(3) / (4/13) = 39/4, left: 39/4, 4\n(13) / (4) = 13/4, left: 13/4, 3, 4\n(13/4) / (4) = 13/16, left: 13/16, 3\n(13/4) - (4) = -3/4, left: -3/4, 3\n(3) * (-3/4) = -9/4, left: -9/4\n(13) - (4) = 9, left: 9, 3, 4\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((13 - 4) - 3))"}, {"input": "13 3 4 4\n", "output": "(13) - (4) = 9, left: 9, 3, 4\n(3) - (9) = -6, left: -6, 4\n(-6) - (4) = -10, left: -10\n(4) - (-6) = 10, left: 10\n(4) / (-6) = -2/3, left: -2/3\n(4) * (-6) = -24, left: -24\n(-6) / (4) = -3/2, left: -3/2\n(4) + (-6) = -2, left: -2\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((13 - 4) - 3))"}, {"input": "13 3 4 4\n", "output": "(13) - (4) = 9, left: 9, 3, 4\n(3) - (9) = -6, left: -6, 4\n(-6) - (4) = -10, left: -10\n(4) - (-6) = 10, left: 10\n(4) / (-6) = -2/3, left: -2/3\n(4) * (-6) = -24, left: -24\n(-6) / (4) = -3/2, left: -3/2\n(4) + (-6) = -2, left: -2\n(9) - (3) = 6, left: 6, 4\n(4) * (6) = 24, left: 24\nreach 24! expression: (4 * ((13 - 4) - 3))"}, {"input": "9 5 3 3\n", "output": "(3) - (5) = -2, left: -2, 9, 3\n(-2) - (3) = -5, left: -5, 9\n(9) / (-2) = -9/2, left: -9/2, 3\n(5) - (3) = 2, left: 2, 9, 3\n(9) / (3) = 3, left: 3, 2\n(3) / (9) = 1/3, left: 1/3, 2\n(9) - (3) = 6, left: 6, 2\n(2) + (6) = 8, left: 8\n(9) + (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (9 + 3))"}, {"input": "9 5 3 3\n", "output": "(3) - (3) = 0, left: 0, 9, 5\n(5) + (0) = 5, left: 5, 9\n(0) / (9) = 0, left: 0, 5\n(3) - (3) = 0, left: 0, 9, 5\n(9) + (0) = 9, left: 9, 5\n(3) / (3) = 1, left: 1, 9, 5\n(3) * (3) = 9, left: 9, 9, 5\n(3) + (3) = 6, left: 6, 9, 5\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (9 - 5))"}, {"input": "9 5 3 3\n", "output": "(3) / (5) = 3/5, left: 3/5, 9, 3\n(9) / (3) = 3, left: 3, 3/5\n(9) - (3/5) = 42/5, left: 42/5, 3\n(3) * (42/5) = 126/5, left: 126/5\n(3) - (5) = -2, left: -2, 9, 3\n(9) / (3) = 3, left: 3, -2\n(5) / (3) = 5/3, left: 5/3, 9, 3\n(5) - (3) = 2, left: 2, 9, 3\n(9) + (3) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((5 - 3) * (9 + 3))"}, {"input": "9 5 3 3\n", "output": "(3) - (9) = -6, left: -6, 5, 3\n(3) * (-6) = -18, left: -18, 5\n(-18) / (5) = -18/5, left: -18/5\n(3) / (-6) = -1/2, left: -1/2, 5\n(-6) - (5) = -11, left: -11, 3\n(3) / (9) = 1/3, left: 1/3, 5, 3\n(5) / (1/3) = 15, left: 15, 3\n(3) / (15) = 1/5, left: 1/5\n(5) + (3) = 8, left: 8, 1/3\n(8) / (1/3) = 24, left: 24\nreach 24! expression: ((5 + 3) / (3 / 9))"}, {"input": "9 5 3 3\n", "output": "(3) / (3) = 1, left: 1, 9, 5\n(9) / (1) = 9, left: 9, 5\n(9) - (5) = 4, left: 4\n(3) - (3) = 0, left: 0, 9, 5\n(5) - (9) = -4, left: -4, 0\n(3) / (3) = 1, left: 1, 9, 5\n(3) * (3) = 9, left: 9, 9, 5\n(9) / (9) = 1, left: 1, 5\n(5) * (1) = 5, left: 5\n(9) / (5) = 9/5, left: 9/5, 9\n(5) + (9) = 14, left: 14, 9\n(3) + (3) = 6, left: 6, 9, 5\n(9) - (5) = 4, left: 4, 6\n(6) * (4) = 24, left: 24\nreach 24! expression: ((3 + 3) * (9 - 5))"}, {"input": "1 12 11 6\n", "output": "(12) - (1) = 11, left: 11, 11, 6\n(11) + (11) = 22, left: 22, 6\n(1) / (12) = 1/12, left: 1/12, 11, 6\n(6) / (12) = 1/2, left: 1/2, 1, 11\n(1) + (11) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((1 + 11) / (6 / 12))"}, {"input": "1 12 11 6\n", "output": "(12) * (11) = 132, left: 132, 1, 6\n(1) / (6) = 1/6, left: 1/6, 132\n(12) / (1) = 12, left: 12, 11, 6\n(1) + (11) = 12, left: 12, 12, 6\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (12 / 6))"}, {"input": "1 12 11 6\n", "output": "(12) + (11) = 23, left: 23, 1, 6\n(1) / (11) = 1/11, left: 1/11, 12, 6\n(6) - (1/11) = 65/11, left: 65/11, 12\n(1) + (11) = 12, left: 12, 12, 6\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((1 + 11) / (6 / 12))"}, {"input": "1 12 11 6\n", "output": "(6) / (11) = 6/11, left: 6/11, 1, 12\n(6/11) - (12) = -126/11, left: -126/11, 1\n(1) + (-126/11) = -115/11, left: -115/11\n(6) / (12) = 1/2, left: 1/2, 1, 11\n(1) + (11) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((1 + 11) / (6 / 12))"}, {"input": "1 12 11 6\n", "output": "(11) + (6) = 17, left: 17, 1, 12\n(12) - (1) = 11, left: 11, 17\n(12) + (6) = 18, left: 18, 1, 11\n(12) / (6) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((12 / 6) * (1 + 11))"}, {"input": "1 12 11 6\n", "output": "(12) * (11) = 132, left: 132, 1, 6\n(12) + (11) = 23, left: 23, 1, 6\n(12) - (11) = 1, left: 1, 1, 6\n(1) * (1) = 1, left: 1, 6\n(1) - (1) = 0, left: 0, 6\n(6) - (1) = 5, left: 5, 1\n(11) - (12) = -1, left: -1, 1, 6\n(1) + (11) = 12, left: 12, 12, 6\n(6) / (12) = 1/2, left: 1/2, 12\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((1 + 11) / (6 / 12))"}, {"input": "1 12 11 6\n", "output": "(12) + (11) = 23, left: 23, 1, 6\n(23) / (1) = 23, left: 23, 6\n(11) / (12) = 11/12, left: 11/12, 1, 6\n(11/12) / (1) = 11/12, left: 11/12, 6\n(11) - (1) = 10, left: 10, 12, 6\n(10) / (12) = 5/6, left: 5/6, 6\n(1) + (11) = 12, left: 12, 12, 6\n(12) - (6) = 6, left: 6, 12\n(12) / (6) = 2, left: 2, 12\n(12) * (2) = 24, left: 24\nreach 24! expression: ((1 + 11) * (12 / 6))"}, {"input": "1 12 11 6\n", "output": "(11) + (6) = 17, left: 17, 1, 12\n(11) * (6) = 66, left: 66, 1, 12\n(12) / (11) = 12/11, left: 12/11, 1, 6\n(1) * (6) = 6, left: 6, 12, 11\n(11) + (6) = 17, left: 17, 12\n(12) - (6) = 6, left: 6, 1, 11\n(6) / (11) = 6/11, left: 6/11, 1\n(12) / (6) = 2, left: 2, 1, 11\n(1) + (11) = 12, left: 12, 2\n(2) * (12) = 24, left: 24\nreach 24! expression: ((12 / 6) * (1 + 11))"}, {"input": "1 12 11 6\n", "output": "(11) + (6) = 17, left: 17, 1, 12\n(11) - (6) = 5, left: 5, 1, 12\n(11) * (6) = 66, left: 66, 1, 12\n(12) - (66) = -54, left: -54, 1\n(6) / (11) = 6/11, left: 6/11, 1, 12\n(6) - (12) = -6, left: -6, 1, 11\n(1) / (-6) = -1/6, left: -1/6, 11\n(6) / (12) = 1/2, left: 1/2, 1, 11\n(1) + (11) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((1 + 11) / (6 / 12))"}, {"input": "1 12 11 6\n", "output": "(12) / (1) = 12, left: 12, 11, 6\n(11) / (12) = 11/12, left: 11/12, 6\n(1) - (12) = -11, left: -11, 11, 6\n(6) - (-11) = 17, left: 17, 11\n(11) * (17) = 187, left: 187\n(1) / (12) = 1/12, left: 1/12, 11, 6\n(12) * (6) = 72, left: 72, 1, 11\n(6) / (12) = 1/2, left: 1/2, 1, 11\n(1) + (11) = 12, left: 12, 1/2\n(12) / (1/2) = 24, left: 24\nreach 24! expression: ((1 + 11) / (6 / 12))"}, {"input": "13 7 1 3\n", "output": "(7) + (1) = 8, left: 8, 13, 3\n(13) - (3) = 10, left: 10, 8\n(10) / (8) = 5/4, left: 5/4\n(13) / (3) = 13/3, left: 13/3, 8\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((7 + 1) + (13 + 3))"}, {"input": "13 7 1 3\n", "output": "(1) - (7) = -6, left: -6, 13, 3\n(13) / (3) = 13/3, left: 13/3, -6\n(13/3) - (-6) = 31/3, left: 31/3\n(7) + (1) = 8, left: 8, 13, 3\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((7 + 1) + (13 + 3))"}, {"input": "13 7 1 3\n", "output": "(13) * (7) = 91, left: 91, 1, 3\n(3) - (1) = 2, left: 2, 91\n(7) / (13) = 7/13, left: 7/13, 1, 3\n(1) * (7/13) = 7/13, left: 7/13, 3\n(13) / (7) = 13/7, left: 13/7, 1, 3\n(7) - (13) = -6, left: -6, 1, 3\n(1) - (3) = -2, left: -2, -6\n(13) + (7) = 20, left: 20, 1, 3\n(1) + (3) = 4, left: 4, 20\n(20) + (4) = 24, left: 24\nreach 24! expression: ((13 + 7) + (1 + 3))"}, {"input": "13 7 1 3\n", "output": "(1) - (7) = -6, left: -6, 13, 3\n(13) / (-6) = -13/6, left: -13/6, 3\n(3) + (-13/6) = 5/6, left: 5/6\n(13) * (-6) = -78, left: -78, 3\n(7) * (1) = 7, left: 7, 13, 3\n(7) / (3) = 7/3, left: 7/3, 13\n(13) + (3) = 16, left: 16, 7\n(7) + (1) = 8, left: 8, 13, 3\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((7 + 1) + (13 + 3))"}, {"input": "13 7 1 3\n", "output": "(13) - (3) = 10, left: 10, 7, 1\n(7) + (10) = 17, left: 17, 1\n(1) - (17) = -16, left: -16\n(13) * (3) = 39, left: 39, 7, 1\n(3) - (13) = -10, left: -10, 7, 1\n(1) - (-10) = 11, left: 11, 7\n(-10) / (7) = -10/7, left: -10/7, 1\n(13) + (3) = 16, left: 16, 7, 1\n(1) + (16) = 17, left: 17, 7\n(7) + (17) = 24, left: 24\nreach 24! expression: (7 + (1 + (13 + 3)))"}, {"input": "13 7 1 3\n", "output": "(1) - (3) = -2, left: -2, 13, 7\n(13) * (7) = 91, left: 91, -2\n(13) - (7) = 6, left: 6, -2\n(3) - (1) = 2, left: 2, 13, 7\n(3) / (1) = 3, left: 3, 13, 7\n(13) - (3) = 10, left: 10, 7\n(1) + (3) = 4, left: 4, 13, 7\n(4) - (7) = -3, left: -3, 13\n(7) + (4) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + (7 + (1 + 3)))"}, {"input": "13 7 1 3\n", "output": "(7) + (1) = 8, left: 8, 13, 3\n(3) / (13) = 3/13, left: 3/13, 8\n(8) + (3/13) = 107/13, left: 107/13\n(13) * (3) = 39, left: 39, 8\n(8) + (39) = 47, left: 47\n(13) - (3) = 10, left: 10, 8\n(13) / (3) = 13/3, left: 13/3, 8\n(13/3) - (8) = -11/3, left: -11/3\n(13) + (3) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((7 + 1) + (13 + 3))"}, {"input": "5 8 8 5\n", "output": "(5) / (5) = 1, left: 1, 8, 8\n(8) * (1) = 8, left: 8, 8\n(8) / (1) = 8, left: 8, 8\n(1) / (8) = 1/8, left: 1/8, 8\n(5) + (5) = 10, left: 10, 8, 8\n(8) - (8) = 0, left: 0, 10\n(5) - (5) = 0, left: 0, 8, 8\n(5) * (5) = 25, left: 25, 8, 8\n(8) / (8) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(5) - (8) = -3, left: -3, 8, 5\n(5) + (8) = 13, left: 13, 8, 5\n(8) / (5) = 8/5, left: 8/5, 8, 5\n(8) - (5) = 3, left: 3, 8/5\n(5) / (5) = 1, left: 1, 8, 8\n(5) / (5) = 1, left: 1, 8, 8\n(8) - (1) = 7, left: 7, 8\n(5) * (5) = 25, left: 25, 8, 8\n(8) / (8) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(5) - (5) = 0, left: 0, 8, 8\n(8) / (8) = 1, left: 1, 0\n(5) + (5) = 10, left: 10, 8, 8\n(5) - (5) = 0, left: 0, 8, 8\n(8) * (0) = 0, left: 0, 8\n(8) * (0) = 0, left: 0\n(5) * (5) = 25, left: 25, 8, 8\n(8) + (25) = 33, left: 33, 8\n(8) / (8) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(8) + (8) = 16, left: 16, 5, 5\n(5) * (16) = 80, left: 80, 5\n(5) - (5) = 0, left: 0, 16\n(8) - (8) = 0, left: 0, 5, 5\n(5) + (5) = 10, left: 10, 0\n(10) - (0) = 10, left: 10\n(8) / (8) = 1, left: 1, 5, 5\n(5) - (1) = 4, left: 4, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(8) / (5) = 8/5, left: 8/5, 8, 5\n(5) - (8) = -3, left: -3, 8, 5\n(8) + (5) = 13, left: 13, -3\n(5) + (8) = 13, left: 13, 8, 5\n(8) + (13) = 21, left: 21, 5\n(8) / (13) = 8/13, left: 8/13, 5\n(5) * (8) = 40, left: 40, 8, 5\n(8) / (8) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(5) / (5) = 1, left: 1, 8, 8\n(8) - (8) = 0, left: 0, 1\n(1) / (8) = 1/8, left: 1/8, 8\n(8) / (1/8) = 64, left: 64\n(5) + (5) = 10, left: 10, 8, 8\n(8) / (8) = 1, left: 1, 10\n(8) + (8) = 16, left: 16, 10\n(5) - (5) = 0, left: 0, 8, 8\n(8) - (0) = 8, left: 8, 8\n(8) - (8) = 0, left: 0, 0\n(5) - (5) = 0, left: 0, 8, 8\n(5) * (5) = 25, left: 25, 8, 8\n(8) / (8) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(5) - (5) = 0, left: 0, 8, 8\n(8) - (0) = 8, left: 8, 8\n(8) + (0) = 8, left: 8, 8\n(8) * (8) = 64, left: 64\n(5) + (5) = 10, left: 10, 8, 8\n(10) / (8) = 5/4, left: 5/4, 8\n(5) - (5) = 0, left: 0, 8, 8\n(8) * (0) = 0, left: 0, 8\n(8) + (0) = 8, left: 8, 8\n(8) - (0) = 8, left: 8, 8\n(5) * (5) = 25, left: 25, 8, 8\n(25) / (8) = 25/8, left: 25/8, 8\n(8) / (8) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(8) / (5) = 8/5, left: 8/5, 8, 5\n(8/5) / (5) = 8/25, left: 8/25, 8\n(5) - (8) = -3, left: -3, 8, 5\n(8) - (5) = 3, left: 3, 8, 5\n(8) / (3) = 8/3, left: 8/3, 5\n(5) + (8) = 13, left: 13, 8, 5\n(5) / (8) = 5/8, left: 5/8, 8, 5\n(5) * (8) = 40, left: 40, 8, 5\n(8) / (40) = 1/5, left: 1/5, 5\n(5) / (1/5) = 25, left: 25\n(8) - (8) = 0, left: 0, 5, 5\n(8) / (8) = 1, left: 1, 5, 5\n(5) * (5) = 25, left: 25, 1\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(5) - (8) = -3, left: -3, 5, 8\n(8) - (5) = 3, left: 3, -3\n(8) * (5) = 40, left: 40, 5, 8\n(5) - (40) = -35, left: -35, 8\n(5) * (8) = 40, left: 40, 8, 5\n(8) * (40) = 320, left: 320, 5\n(5) / (8) = 5/8, left: 5/8, 8, 5\n(8) / (5) = 8/5, left: 8/5, 8, 5\n(8) + (8/5) = 48/5, left: 48/5, 5\n(5) / (5) = 1, left: 1, 8, 8\n(5) / (5) = 1, left: 1, 8, 8\n(5) * (5) = 25, left: 25, 8, 8\n(8) / (8) = 1, left: 1, 25\n(25) - (1) = 24, left: 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "13 6 8 13\n", "output": "(13) + (13) = 26, left: 26, 6, 8\n(6) + (26) = 32, left: 32, 8\n(8) / (32) = 1/4, left: 1/4\n(8) - (32) = -24, left: -24\n(32) / (8) = 4, left: 4\n(32) - (8) = 24, left: 24\nreach 24! expression: ((6 + (13 + 13)) - 8)"}, {"input": "13 6 8 13\n", "output": "(6) / (13) = 6/13, left: 6/13, 13, 8\n(13) + (6/13) = 175/13, left: 175/13, 8\n(8) / (13) = 8/13, left: 8/13, 6/13\n(6) + (13) = 19, left: 19, 13, 8\n(13) - (8) = 5, left: 5, 19\n(19) + (5) = 24, left: 24\nreach 24! expression: ((6 + 13) + (13 - 8))"}, {"input": "13 6 8 13\n", "output": "(13) - (13) = 0, left: 0, 6, 8\n(0) - (6) = -6, left: -6, 8\n(13) / (13) = 1, left: 1, 6, 8\n(13) / (13) = 1, left: 1, 6, 8\n(6) / (1) = 6, left: 6, 8\n(6) - (8) = -2, left: -2, 1\n(8) - (6) = 2, left: 2, 1\n(13) + (13) = 26, left: 26, 6, 8\n(6) + (26) = 32, left: 32, 8\n(32) - (8) = 24, left: 24\nreach 24! expression: ((6 + (13 + 13)) - 8)"}, {"input": "13 6 8 13\n", "output": "(13) - (6) = 7, left: 7, 8, 13\n(7) / (13) = 7/13, left: 7/13, 8\n(13) / (6) = 13/6, left: 13/6, 8, 13\n(13) * (6) = 78, left: 78, 8, 13\n(6) / (13) = 6/13, left: 6/13, 8, 13\n(6) - (13) = -7, left: -7, 8, 13\n(8) - (-7) = 15, left: 15, 13\n(13) + (6) = 19, left: 19, 8, 13\n(19) - (8) = 11, left: 11, 13\n(13) + (11) = 24, left: 24\nreach 24! expression: (13 + ((13 + 6) - 8))"}, {"input": "13 6 8 13\n", "output": "(13) + (13) = 26, left: 26, 6, 8\n(6) + (26) = 32, left: 32, 8\n(8) / (32) = 1/4, left: 1/4\n(8) - (32) = -24, left: -24\n(32) / (8) = 4, left: 4\n(32) - (8) = 24, left: 24\nreach 24! expression: ((6 + (13 + 13)) - 8)"}, {"input": "13 6 8 13\n", "output": "(13) - (13) = 0, left: 0, 6, 8\n(0) / (6) = 0, left: 0, 8\n(13) / (13) = 1, left: 1, 6, 8\n(8) - (6) = 2, left: 2, 1\n(13) * (13) = 169, left: 169, 6, 8\n(13) / (13) = 1, left: 1, 6, 8\n(8) + (1) = 9, left: 9, 6\n(13) + (13) = 26, left: 26, 6, 8\n(6) - (8) = -2, left: -2, 26\n(26) + (-2) = 24, left: 24\nreach 24! expression: ((13 + 13) + (6 - 8))"}, {"input": "13 6 8 13\n", "output": "(6) / (13) = 6/13, left: 6/13, 13, 8\n(13) - (6/13) = 163/13, left: 163/13, 8\n(163/13) / (8) = 163/104, left: 163/104\n(13) * (6/13) = 6, left: 6, 8\n(6) + (13) = 19, left: 19, 13, 8\n(8) / (13) = 8/13, left: 8/13, 19\n(8/13) / (19) = 8/247, left: 8/247\n(13) / (8) = 13/8, left: 13/8, 19\n(13) - (8) = 5, left: 5, 19\n(19) + (5) = 24, left: 24\nreach 24! expression: ((6 + 13) + (13 - 8))"}, {"input": "13 6 8 13\n", "output": "(13) + (13) = 26, left: 26, 6, 8\n(6) + (26) = 32, left: 32, 8\n(8) / (32) = 1/4, left: 1/4\n(8) - (32) = -24, left: -24\n(32) / (8) = 4, left: 4\n(32) - (8) = 24, left: 24\nreach 24! expression: ((6 + (13 + 13)) - 8)"}, {"input": "13 6 8 13\n", "output": "(13) + (13) = 26, left: 26, 6, 8\n(6) + (26) = 32, left: 32, 8\n(8) / (32) = 1/4, left: 1/4\n(8) - (32) = -24, left: -24\n(32) / (8) = 4, left: 4\n(32) - (8) = 24, left: 24\nreach 24! expression: ((6 + (13 + 13)) - 8)"}, {"input": "12 3 5 12\n", "output": "(12) - (5) = 7, left: 7, 3, 12\n(5) / (12) = 5/12, left: 5/12, 3, 12\n(12) * (5/12) = 5, left: 5, 3\n(12) * (5) = 60, left: 60, 3, 12\n(3) * (12) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((12 * 5) - (3 * 12))"}, {"input": "12 3 5 12\n", "output": "(5) - (12) = -7, left: -7, 3, 12\n(3) - (12) = -9, left: -9, -7\n(5) / (12) = 5/12, left: 5/12, 3, 12\n(12) * (5) = 60, left: 60, 3, 12\n(3) * (12) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((12 * 5) - (3 * 12))"}, {"input": "12 3 5 12\n", "output": "(12) / (5) = 12/5, left: 12/5, 12, 3\n(3) * (12/5) = 36/5, left: 36/5, 12\n(12) * (36/5) = 432/5, left: 432/5\n(5) * (12) = 60, left: 60, 12, 3\n(12) * (3) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((5 * 12) - (12 * 3))"}, {"input": "12 3 5 12\n", "output": "(5) / (3) = 5/3, left: 5/3, 12, 12\n(3) + (5) = 8, left: 8, 12, 12\n(5) / (12) = 5/12, left: 5/12, 3, 12\n(3) + (5/12) = 41/12, left: 41/12, 12\n(5) - (12) = -7, left: -7, 3, 12\n(3) / (12) = 1/4, left: 1/4, -7\n(12) + (5) = 17, left: 17, 3, 12\n(12) * (5) = 60, left: 60, 3, 12\n(3) * (12) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((12 * 5) - (3 * 12))"}, {"input": "12 3 5 12\n", "output": "(5) / (12) = 5/12, left: 5/12, 12, 3\n(3) + (5/12) = 41/12, left: 41/12, 12\n(12) / (41/12) = 144/41, left: 144/41\n(5/12) / (12) = 5/144, left: 5/144, 3\n(12) / (5) = 12/5, left: 12/5, 12, 3\n(12/5) - (3) = -3/5, left: -3/5, 12\n(12/5) / (3) = 4/5, left: 4/5, 12\n(5) * (12) = 60, left: 60, 12, 3\n(12) * (3) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((5 * 12) - (12 * 3))"}, {"input": "12 3 5 12\n", "output": "(12) - (5) = 7, left: 7, 3, 12\n(3) / (12) = 1/4, left: 1/4, 7\n(7) / (1/4) = 28, left: 28\n(7) / (3) = 7/3, left: 7/3, 12\n(3) - (7) = -4, left: -4, 12\n(5) / (12) = 5/12, left: 5/12, 3, 12\n(12) * (5) = 60, left: 60, 3, 12\n(3) - (12) = -9, left: -9, 60\n(3) * (12) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((12 * 5) - (3 * 12))"}, {"input": "12 3 5 12\n", "output": "(12) / (12) = 1, left: 1, 3, 5\n(12) - (12) = 0, left: 0, 3, 5\n(12) - (5) = 7, left: 7, 12, 3\n(5) - (12) = -7, left: -7, 12, 3\n(5) + (12) = 17, left: 17, 12, 3\n(12) / (3) = 4, left: 4, 17\n(5) / (12) = 5/12, left: 5/12, 12, 3\n(5) * (12) = 60, left: 60, 12, 3\n(12) + (60) = 72, left: 72, 3\n(72) / (3) = 24, left: 24\nreach 24! expression: ((12 + (5 * 12)) / 3)"}, {"input": "12 3 5 12\n", "output": "(5) - (12) = -7, left: -7, 3, 12\n(12) + (-7) = 5, left: 5, 3\n(3) - (12) = -9, left: -9, -7\n(5) / (12) = 5/12, left: 5/12, 3, 12\n(12) - (3) = 9, left: 9, 5/12\n(12) + (5/12) = 149/12, left: 149/12, 3\n(12) * (5) = 60, left: 60, 3, 12\n(3) / (12) = 1/4, left: 1/4, 60\n(3) * (12) = 36, left: 36, 60\n(60) - (36) = 24, left: 24\nreach 24! expression: ((12 * 5) - (3 * 12))"}, {"input": "3 3 1 12\n", "output": "(12) - (1) = 11, left: 11, 3, 3\n(3) - (3) = 0, left: 0, 11\n(3) / (3) = 1, left: 1, 11\n(3) / (11) = 3/11, left: 3/11, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((12 - 1) - 3))"}, {"input": "3 3 1 12\n", "output": "(3) + (1) = 4, left: 4, 3, 12\n(3) + (12) = 15, left: 15, 4\n(3) / (4) = 3/4, left: 3/4, 12\n(12) + (3/4) = 51/4, left: 51/4\n(3) * (4) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (3 * (3 + 1)))"}, {"input": "3 3 1 12\n", "output": "(12) / (3) = 4, left: 4, 3, 1\n(4) / (3) = 4/3, left: 4/3, 1\n(3) - (4) = -1, left: -1, 1\n(-1) - (1) = -2, left: -2\n(3) / (12) = 1/4, left: 1/4, 3, 1\n(12) - (3) = 9, left: 9, 3, 1\n(3) * (9) = 27, left: 27, 1\n(27) / (1) = 27, left: 27\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((12 - 3) - 1))"}, {"input": "3 3 1 12\n", "output": "(3) + (1) = 4, left: 4, 3, 12\n(12) / (3) = 4, left: 4, 4\n(4) / (4) = 1, left: 1\n(3) + (12) = 15, left: 15, 4\n(3) / (12) = 1/4, left: 1/4, 4\n(1/4) - (4) = -15/4, left: -15/4\n(3) * (12) = 36, left: 36, 4\n(3) + (4) = 7, left: 7, 12\n(3) * (4) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (3 * (3 + 1)))"}, {"input": "3 3 1 12\n", "output": "(3) - (1) = 2, left: 2, 3, 12\n(3) / (2) = 3/2, left: 3/2, 12\n(3) - (2) = 1, left: 1, 12\n(12) + (1) = 13, left: 13\n(3) / (12) = 1/4, left: 1/4, 2\n(3) + (1) = 4, left: 4, 3, 12\n(3) / (12) = 1/4, left: 1/4, 4\n(4) * (1/4) = 1, left: 1\n(3) * (4) = 12, left: 12, 12\n(12) + (12) = 24, left: 24\nreach 24! expression: (12 + (3 * (3 + 1)))"}, {"input": "3 3 1 12\n", "output": "(12) - (3) = 9, left: 9, 3, 1\n(3) - (9) = -6, left: -6, 1\n(3) / (9) = 1/3, left: 1/3, 1\n(9) / (3) = 3, left: 3, 1\n(3) * (9) = 27, left: 27, 1\n(1) / (27) = 1/27, left: 1/27\n(1) - (9) = -8, left: -8, 3\n(3) / (-8) = -3/8, left: -3/8\n(9) - (1) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((12 - 3) - 1))"}, {"input": "3 3 1 12\n", "output": "(12) - (1) = 11, left: 11, 3, 3\n(3) / (3) = 1, left: 1, 11\n(11) / (1) = 11, left: 11\n(11) - (1) = 10, left: 10\n(1) - (11) = -10, left: -10\n(3) - (11) = -8, left: -8, 3\n(-8) / (3) = -8/3, left: -8/3\n(3) / (11) = 3/11, left: 3/11, 3\n(11) - (3) = 8, left: 8, 3\n(3) * (8) = 24, left: 24\nreach 24! expression: (3 * ((12 - 1) - 3))"}, {"input": "8 12 4 8\n", "output": "(4) - (8) = -4, left: -4, 12, 8\n(12) + (8) = 20, left: 20, -4\n(20) / (-4) = -5, left: -5\n(-4) - (20) = -24, left: -24\n(-4) + (20) = 16, left: 16\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((12 + 8) - (4 - 8))"}, {"input": "8 12 4 8\n", "output": "(8) - (4) = 4, left: 4, 12, 8\n(12) / (8) = 3/2, left: 3/2, 4\n(4) / (3/2) = 8/3, left: 8/3\n(12) + (8) = 20, left: 20, 4\n(20) / (4) = 5, left: 5\n(4) + (20) = 24, left: 24\nreach 24! expression: ((8 - 4) + (12 + 8))"}, {"input": "8 12 4 8\n", "output": "(8) + (12) = 20, left: 20, 4, 8\n(8) * (20) = 160, left: 160, 4\n(20) - (8) = 12, left: 12, 4\n(8) / (20) = 2/5, left: 2/5, 4\n(8) + (20) = 28, left: 28, 4\n(28) - (4) = 24, left: 24\nreach 24! expression: ((8 + (8 + 12)) - 4)"}, {"input": "8 12 4 8\n", "output": "(12) / (4) = 3, left: 3, 8, 8\n(12) + (4) = 16, left: 16, 8, 8\n(16) - (8) = 8, left: 8, 8\n(12) - (4) = 8, left: 8, 8, 8\n(8) - (8) = 0, left: 0, 8\n(0) - (8) = -8, left: -8\n(8) - (8) = 0, left: 0, 8\n(8) * (0) = 0, left: 0\n(8) + (8) = 16, left: 16, 8\n(8) + (16) = 24, left: 24\nreach 24! expression: ((12 - 4) + (8 + 8))"}, {"input": "8 12 4 8\n", "output": "(8) + (12) = 20, left: 20, 4, 8\n(20) - (8) = 12, left: 12, 4\n(12) - (4) = 8, left: 8\n(4) * (12) = 48, left: 48\n(4) + (12) = 16, left: 16\n(8) / (20) = 2/5, left: 2/5, 4\n(4) - (2/5) = 18/5, left: 18/5\n(8) + (20) = 28, left: 28, 4\n(4) * (28) = 112, left: 112\n(28) - (4) = 24, left: 24\nreach 24! expression: ((8 + (8 + 12)) - 4)"}, {"input": "8 12 4 8\n", "output": "(8) + (4) = 12, left: 12, 12, 8\n(12) + (8) = 20, left: 20, 12\n(12) + (20) = 32, left: 32\n(8) / (4) = 2, left: 2, 12, 8\n(12) + (8) = 20, left: 20, 2\n(4) - (8) = -4, left: -4, 12, 8\n(8) / (12) = 2/3, left: 2/3, -4\n(12) / (8) = 3/2, left: 3/2, -4\n(12) + (8) = 20, left: 20, -4\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((12 + 8) - (4 - 8))"}, {"input": "8 12 4 8\n", "output": "(8) - (4) = 4, left: 4, 12, 8\n(12) / (8) = 3/2, left: 3/2, 4\n(4) / (3/2) = 8/3, left: 8/3\n(3/2) - (4) = -5/2, left: -5/2\n(4) + (3/2) = 11/2, left: 11/2\n(3/2) / (4) = 3/8, left: 3/8\n(12) + (8) = 20, left: 20, 4\n(4) - (20) = -16, left: -16\n(20) / (4) = 5, left: 5\n(4) + (20) = 24, left: 24\nreach 24! expression: ((8 - 4) + (12 + 8))"}, {"input": "8 12 4 8\n", "output": "(4) - (8) = -4, left: -4, 12, 8\n(12) + (8) = 20, left: 20, -4\n(20) / (-4) = -5, left: -5\n(-4) - (20) = -24, left: -24\n(-4) + (20) = 16, left: 16\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((12 + 8) - (4 - 8))"}, {"input": "8 12 4 8\n", "output": "(4) - (8) = -4, left: -4, 12, 8\n(12) + (8) = 20, left: 20, -4\n(20) / (-4) = -5, left: -5\n(-4) - (20) = -24, left: -24\n(-4) + (20) = 16, left: 16\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((12 + 8) - (4 - 8))"}, {"input": "8 12 4 8\n", "output": "(4) - (8) = -4, left: -4, 12, 8\n(12) + (8) = 20, left: 20, -4\n(20) / (-4) = -5, left: -5\n(-4) - (20) = -24, left: -24\n(-4) + (20) = 16, left: 16\n(20) - (-4) = 24, left: 24\nreach 24! expression: ((12 + 8) - (4 - 8))"}]