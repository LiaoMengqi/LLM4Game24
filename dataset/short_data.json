[{"input": "5 13 7 9\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 7, 9\n(7) + (8) = 15, left: (7 + (13 - 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (7 + (13 - 5))) = 24\nreach 24! expression: (9 + (7 + (13 - 5)))"}, {"input": "5 13 7 9\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 5, 13\n(16) - (5) = 11, left: ((7 + 9) - 5) = 11, 13\n(13) + (11) = 24, left: (13 + ((7 + 9) - 5)) = 24\nreach 24! expression: (13 + ((7 + 9) - 5))"}, {"input": "5 13 7 9\n", "output": "(13) + (9) = 22, left: (13 + 9) = 22, 5, 7\n(7) + (22) = 29, left: (7 + (13 + 9)) = 29, 5\n(29) - (5) = 24, left: ((7 + (13 + 9)) - 5) = 24\nreach 24! expression: ((7 + (13 + 9)) - 5)"}, {"input": "5 13 7 9\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 5, 9\n(5) - (9) = -4, left: (5 - 9) = -4, (7 - 13) = -6\n(-6) * (-4) = 24, left: ((7 - 13) * (5 - 9)) = 24\nreach 24! expression: ((7 - 13) * (5 - 9))"}, {"input": "5 13 7 9\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 13, 9\n(9) + (2) = 11, left: (9 + (7 - 5)) = 11, 13\n(13) + (11) = 24, left: (13 + (9 + (7 - 5))) = 24\nreach 24! expression: (13 + (9 + (7 - 5)))"}, {"input": "5 13 7 9\n", "output": "(9) - (13) = -4, left: (9 - 13) = -4, 5, 7\n(5) - (7) = -2, left: (5 - 7) = -2, (9 - 13) = -4\n(-4) * (-2) = 8, left: ((9 - 13) * (5 - 7)) = 8\nroll back, left: (5 - 7) = -2, (9 - 13) = -4\nroll back, left: (9 - 13) = -4, 5, 7\nroll back, left: 5 13 7 9\n(13) + (9) = 22, left: (13 + 9) = 22, 5, 7\n(7) + (22) = 29, left: (7 + (13 + 9)) = 29, 5\n(29) - (5) = 24, left: ((7 + (13 + 9)) - 5) = 24\nreach 24! expression: ((7 + (13 + 9)) - 5)"}, {"input": "5 13 7 9\n", "output": "(5) + (13) = 18, left: (5 + 13) = 18, 7, 9\nroll back, left: 5 13 7 9\n(5) / (13) = 5/13, left: (5 / 13) = 5/13, 7, 9\n(5/13) / (9) = 5/117, left: ((5 / 13) / 9) = 5/117, 7\nroll back, left: (5 / 13) = 5/13, 7, 9\nroll back, left: 5 13 7 9\n(13) - (5) = 8, left: (13 - 5) = 8, 7, 9\n(7) + (8) = 15, left: (7 + (13 - 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (7 + (13 - 5))) = 24\nreach 24! expression: (9 + (7 + (13 - 5)))"}, {"input": "1 2 4 11\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 2, 4\n(2) * (-10) = -20, left: (2 * (1 - 11)) = -20, 4\n(4) - (-20) = 24, left: (4 - (2 * (1 - 11))) = 24\nreach 24! expression: (4 - (2 * (1 - 11)))"}, {"input": "1 2 4 11\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (4 - 2) = 2\n(2) * (12) = 24, left: ((4 - 2) * (1 + 11)) = 24\nreach 24! expression: ((4 - 2) * (1 + 11))"}, {"input": "1 2 4 11\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (4 / 2) = 2\n(2) * (12) = 24, left: ((4 / 2) * (1 + 11)) = 24\nreach 24! expression: ((4 / 2) * (1 + 11))"}, {"input": "1 2 4 11\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (2 / 4) = 1/2\n(12) / (1/2) = 24, left: ((1 + 11) / (2 / 4)) = 24\nreach 24! expression: ((1 + 11) / (2 / 4))"}, {"input": "1 2 4 11\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 2, 4\n(2) * (10) = 20, left: (2 * (11 - 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (11 - 1))) = 24\nreach 24! expression: (4 + (2 * (11 - 1)))"}, {"input": "1 2 4 11\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 4, 11\nroll back, left: 1 2 4 11\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 4, 11\nroll back, left: 1 2 4 11\n(2) - (1) = 1, left: (2 - 1) = 1, 4, 11\nroll back, left: 1 2 4 11\n(4) / (2) = 2, left: (4 / 2) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (4 / 2) = 2\n(2) * (12) = 24, left: ((4 / 2) * (1 + 11)) = 24\nreach 24! expression: ((4 / 2) * (1 + 11))"}, {"input": "1 2 4 11\n", "output": "(2) * (4) = 8, left: (2 * 4) = 8, 1, 11\n(1) - (8) = -7, left: (1 - (2 * 4)) = -7, 11\n(11) - (-7) = 18, left: (11 - (1 - (2 * 4))) = 18\nroll back, left: (1 - (2 * 4)) = -7, 11\nroll back, left: (2 * 4) = 8, 1, 11\nroll back, left: 1 2 4 11\n(4) - (2) = 2, left: (4 - 2) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (4 - 2) = 2\n(2) * (12) = 24, left: ((4 - 2) * (1 + 11)) = 24\nreach 24! expression: ((4 - 2) * (1 + 11))"}, {"input": "1 2 4 11\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 2, 4\n(4) * (10) = 40, left: (4 * (11 - 1)) = 40, 2\nroll back, left: (11 - 1) = 10, 2, 4\n(4) - (10) = -6, left: (4 - (11 - 1)) = -6, 2\nroll back, left: (11 - 1) = 10, 2, 4\n(10) / (4) = 5/2, left: ((11 - 1) / 4) = 5/2, 2\nroll back, left: (11 - 1) = 10, 2, 4\n(2) * (10) = 20, left: (2 * (11 - 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (11 - 1))) = 24\nreach 24! expression: (4 + (2 * (11 - 1)))"}, {"input": "1 2 4 11\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 1, 2\nroll back, left: 1 2 4 11\n(1) * (2) = 2, left: (1 * 2) = 2, 4, 11\nroll back, left: 1 2 4 11\n(1) / (11) = 1/11, left: (1 / 11) = 1/11, 2, 4\nroll back, left: 1 2 4 11\n(1) - (11) = -10, left: (1 - 11) = -10, 2, 4\n(2) * (-10) = -20, left: (2 * (1 - 11)) = -20, 4\n(4) - (-20) = 24, left: (4 - (2 * (1 - 11))) = 24\nreach 24! expression: (4 - (2 * (1 - 11)))"}, {"input": "1 13 2 2\n", "output": "(2) - (13) = -11, left: (2 - 13) = -11, 1, 2\n(1) - (-11) = 12, left: (1 - (2 - 13)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 - (2 - 13))) = 24\nreach 24! expression: (2 * (1 - (2 - 13)))"}, {"input": "1 13 2 2\n", "output": "(1) * (13) = 13, left: (1 * 13) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (1 * 13)) = 26, 2\n(26) - (2) = 24, left: ((2 * (1 * 13)) - 2) = 24\nreach 24! expression: ((2 * (1 * 13)) - 2)"}, {"input": "1 13 2 2\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (1 * 2) = 2\n(26) - (2) = 24, left: ((13 * 2) - (1 * 2)) = 24\nreach 24! expression: ((13 * 2) - (1 * 2))"}, {"input": "1 13 2 2\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 1, 2\n(26) / (1) = 26, left: ((13 * 2) / 1) = 26, 2\n(26) - (2) = 24, left: (((13 * 2) / 1) - 2) = 24\nreach 24! expression: (((13 * 2) / 1) - 2)"}, {"input": "1 13 2 2\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (13 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (13 - 2))) = 24\nreach 24! expression: (2 * (1 + (13 - 2)))"}, {"input": "1 13 2 2\n", "output": "(1) - (13) = -12, left: (1 - 13) = -12, 2, 2\n(2) / (2) = 1, left: (2 / 2) = 1, (1 - 13) = -12\nroll back, left: (1 - 13) = -12, 2, 2\nroll back, left: 1 13 2 2\n(1) * (13) = 13, left: (1 * 13) = 13, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (1 * 13) = 13\nroll back, left: (1 * 13) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (1 * 13)) = 26, 2\n(26) - (2) = 24, left: ((2 * (1 * 13)) - 2) = 24\nreach 24! expression: ((2 * (1 * 13)) - 2)"}, {"input": "1 13 2 2\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 13, 2\n(2) + (2) = 4, left: (2 + (1 * 2)) = 4, 13\nroll back, left: (1 * 2) = 2, 13, 2\n(2) / (2) = 1, left: (2 / (1 * 2)) = 1, 13\n(13) + (1) = 14, left: (13 + (2 / (1 * 2))) = 14\nroll back, left: (2 / (1 * 2)) = 1, 13\nroll back, left: (1 * 2) = 2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (1 * 2) = 2\n(26) - (2) = 24, left: ((13 * 2) - (1 * 2)) = 24\nreach 24! expression: ((13 * 2) - (1 * 2))"}, {"input": "1 13 2 2\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (13 - 2)) = 12, 2\n(12) / (2) = 6, left: ((1 + (13 - 2)) / 2) = 6\nroll back, left: (1 + (13 - 2)) = 12, 2\n(12) - (2) = 10, left: ((1 + (13 - 2)) - 2) = 10\nroll back, left: (1 + (13 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (13 - 2))) = 24\nreach 24! expression: (2 * (1 + (13 - 2)))"}, {"input": "1 13 2 2\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 1, 2\nroll back, left: 1 13 2 2\n(2) / (13) = 2/13, left: (2 / 13) = 2/13, 1, 2\n(1) + (2/13) = 15/13, left: (1 + (2 / 13)) = 15/13, 2\nroll back, left: (2 / 13) = 2/13, 1, 2\nroll back, left: 1 13 2 2\n(2) - (13) = -11, left: (2 - 13) = -11, 1, 2\n(1) - (-11) = 12, left: (1 - (2 - 13)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 - (2 - 13))) = 24\nreach 24! expression: (2 * (1 - (2 - 13)))"}, {"input": "1 13 2 2\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (13 - 2)) = 12, 2\n(12) / (2) = 6, left: ((1 + (13 - 2)) / 2) = 6\nroll back, left: (1 + (13 - 2)) = 12, 2\n(12) - (2) = 10, left: ((1 + (13 - 2)) - 2) = 10\nroll back, left: (1 + (13 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (13 - 2))) = 24\nreach 24! expression: (2 * (1 + (13 - 2)))"}, {"input": "1 13 2 2\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (13 - 2)) = 12, 2\n(12) / (2) = 6, left: ((1 + (13 - 2)) / 2) = 6\nroll back, left: (1 + (13 - 2)) = 12, 2\n(12) - (2) = 10, left: ((1 + (13 - 2)) - 2) = 10\nroll back, left: (1 + (13 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (13 - 2))) = 24\nreach 24! expression: (2 * (1 + (13 - 2)))"}, {"input": "1 13 2 2\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (13 - 2)) = 12, 2\n(12) / (2) = 6, left: ((1 + (13 - 2)) / 2) = 6\nroll back, left: (1 + (13 - 2)) = 12, 2\n(12) - (2) = 10, left: ((1 + (13 - 2)) - 2) = 10\nroll back, left: (1 + (13 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (13 - 2))) = 24\nreach 24! expression: (2 * (1 + (13 - 2)))"}, {"input": "2 11 9 7\n", "output": "(2) * (11) = 22, left: (2 * 11) = 22, 9, 7\n(9) - (7) = 2, left: (9 - 7) = 2, (2 * 11) = 22\n(22) + (2) = 24, left: ((2 * 11) + (9 - 7)) = 24\nreach 24! expression: ((2 * 11) + (9 - 7))"}, {"input": "2 11 9 7\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 2, 11\n(11) * (2) = 22, left: (11 * (9 - 7)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 * (9 - 7))) = 24\nreach 24! expression: (2 + (11 * (9 - 7)))"}, {"input": "2 11 9 7\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 2, 11\n(2) * (11) = 22, left: (2 * 11) = 22, (7 - 9) = -2\n(22) - (-2) = 24, left: ((2 * 11) - (7 - 9)) = 24\nreach 24! expression: ((2 * 11) - (7 - 9))"}, {"input": "2 11 9 7\n", "output": "(2) * (11) = 22, left: (2 * 11) = 22, 9, 7\n(22) - (7) = 15, left: ((2 * 11) - 7) = 15, 9\n(9) + (15) = 24, left: (9 + ((2 * 11) - 7)) = 24\nreach 24! expression: (9 + ((2 * 11) - 7))"}, {"input": "2 11 9 7\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 2, 9\n(2) + (-4) = -2, left: (2 + (7 - 11)) = -2, 9\nroll back, left: (7 - 11) = -4, 2, 9\nroll back, left: 2 11 9 7\n(11) * (7) = 77, left: (11 * 7) = 77, 2, 9\nroll back, left: 2 11 9 7\n(2) * (11) = 22, left: (2 * 11) = 22, 9, 7\n(9) - (7) = 2, left: (9 - 7) = 2, (2 * 11) = 22\n(22) + (2) = 24, left: ((2 * 11) + (9 - 7)) = 24\nreach 24! expression: ((2 * 11) + (9 - 7))"}, {"input": "2 11 9 7\n", "output": "(9) * (7) = 63, left: (9 * 7) = 63, 2, 11\n(11) / (63) = 11/63, left: (11 / (9 * 7)) = 11/63, 2\nroll back, left: (9 * 7) = 63, 2, 11\nroll back, left: 2 11 9 7\n(9) + (7) = 16, left: (9 + 7) = 16, 2, 11\nroll back, left: 2 11 9 7\n(7) - (9) = -2, left: (7 - 9) = -2, 2, 11\n(2) * (11) = 22, left: (2 * 11) = 22, (7 - 9) = -2\n(22) - (-2) = 24, left: ((2 * 11) - (7 - 9)) = 24\nreach 24! expression: ((2 * 11) - (7 - 9))"}, {"input": "2 11 9 7\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 2, 11\n(2) - (11) = -9, left: ((9 - 7) - 11) = -9, 2\nroll back, left: (9 - 7) = 2, 2, 11\n(11) + (2) = 13, left: (11 + (9 - 7)) = 13, 2\nroll back, left: (9 - 7) = 2, 2, 11\n(11) - (2) = 9, left: (11 - (9 - 7)) = 9, 2\nroll back, left: (9 - 7) = 2, 2, 11\n(11) * (2) = 22, left: (11 * (9 - 7)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 * (9 - 7))) = 24\nreach 24! expression: (2 + (11 * (9 - 7)))"}, {"input": "2 11 9 7\n", "output": "(11) + (7) = 18, left: (11 + 7) = 18, 2, 9\nroll back, left: 2 11 9 7\n(2) * (9) = 18, left: (2 * 9) = 18, 11, 7\nroll back, left: 2 11 9 7\n(9) - (11) = -2, left: (9 - 11) = -2, 2, 7\nroll back, left: 2 11 9 7\n(2) * (11) = 22, left: (2 * 11) = 22, 9, 7\n(22) - (7) = 15, left: ((2 * 11) - 7) = 15, 9\n(9) + (15) = 24, left: (9 + ((2 * 11) - 7)) = 24\nreach 24! expression: (9 + ((2 * 11) - 7))"}, {"input": "2 11 9 7\n", "output": "(11) + (9) = 20, left: (11 + 9) = 20, 2, 7\nroll back, left: 2 11 9 7\n(11) - (9) = 2, left: (11 - 9) = 2, 2, 7\nroll back, left: 2 11 9 7\n(11) / (7) = 11/7, left: (11 / 7) = 11/7, 2, 9\nroll back, left: 2 11 9 7\n(7) - (9) = -2, left: (7 - 9) = -2, 2, 11\n(2) * (11) = 22, left: (2 * 11) = 22, (7 - 9) = -2\n(22) - (-2) = 24, left: ((2 * 11) - (7 - 9)) = 24\nreach 24! expression: ((2 * 11) - (7 - 9))"}, {"input": "13 12 11 6\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 12, 6\n(6) * (2) = 12, left: (6 * (13 - 11)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (13 - 11))) = 24\nreach 24! expression: (12 + (6 * (13 - 11)))"}, {"input": "13 12 11 6\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (11 - 13)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (11 - 13))) = 24\nreach 24! expression: (12 - (6 * (11 - 13)))"}, {"input": "13 12 11 6\n", "output": "(11) + (6) = 17, left: (11 + 6) = 17, 13, 12\nroll back, left: 13 12 11 6\n(6) / (13) = 6/13, left: (6 / 13) = 6/13, 12, 11\nroll back, left: 13 12 11 6\n(12) - (13) = -1, left: (12 - 13) = -1, 11, 6\nroll back, left: 13 12 11 6\n(13) - (11) = 2, left: (13 - 11) = 2, 12, 6\n(6) * (2) = 12, left: (6 * (13 - 11)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (13 - 11))) = 24\nreach 24! expression: (12 + (6 * (13 - 11)))"}, {"input": "5 3 7 10\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 3, 10\n(10) - (2) = 8, left: (10 - (7 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (7 - 5))) = 24\nreach 24! expression: (3 * (10 - (7 - 5)))"}, {"input": "5 3 7 10\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 7, 10\n(7) * (-2) = -14, left: (7 * (3 - 5)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (3 - 5))) = 24\nreach 24! expression: (10 - (7 * (3 - 5)))"}, {"input": "5 3 7 10\n", "output": "(5) + (10) = 15, left: (5 + 10) = 15, 3, 7\n(15) - (7) = 8, left: ((5 + 10) - 7) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 + 10) - 7)) = 24\nreach 24! expression: (3 * ((5 + 10) - 7))"}, {"input": "5 3 7 10\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 5, 3\n(5) - (-3) = 8, left: (5 - (7 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 - (7 - 10))) = 24\nreach 24! expression: (3 * (5 - (7 - 10)))"}, {"input": "5 3 7 10\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 5, 7\nroll back, left: 5 3 7 10\n(3) + (10) = 13, left: (3 + 10) = 13, 5, 7\n(5) * (13) = 65, left: (5 * (3 + 10)) = 65, 7\nroll back, left: (3 + 10) = 13, 5, 7\nroll back, left: 5 3 7 10\n(7) - (5) = 2, left: (7 - 5) = 2, 3, 10\n(10) - (2) = 8, left: (10 - (7 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (7 - 5))) = 24\nreach 24! expression: (3 * (10 - (7 - 5)))"}, {"input": "5 3 7 10\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 3, 7\n(3) + (7) = 10, left: (3 + 7) = 10, (10 - 5) = 5\nroll back, left: (10 - 5) = 5, 3, 7\n(7) / (5) = 7/5, left: (7 / (10 - 5)) = 7/5, 3\nroll back, left: (10 - 5) = 5, 3, 7\nroll back, left: 5 3 7 10\n(5) + (10) = 15, left: (5 + 10) = 15, 3, 7\n(15) - (7) = 8, left: ((5 + 10) - 7) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 + 10) - 7)) = 24\nreach 24! expression: (3 * ((5 + 10) - 7))"}, {"input": "5 3 7 10\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 5, 3\n(3) - (-3) = 6, left: (3 - (7 - 10)) = 6, 5\nroll back, left: (7 - 10) = -3, 5, 3\n(3) * (-3) = -9, left: (3 * (7 - 10)) = -9, 5\nroll back, left: (7 - 10) = -3, 5, 3\n(5) * (-3) = -15, left: (5 * (7 - 10)) = -15, 3\nroll back, left: (7 - 10) = -3, 5, 3\n(5) - (-3) = 8, left: (5 - (7 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 - (7 - 10))) = 24\nreach 24! expression: (3 * (5 - (7 - 10)))"}, {"input": "5 8 13 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 13, 8\n(13) + (3) = 16, left: (13 + (8 - 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (13 + (8 - 5))) = 24\nreach 24! expression: (8 + (13 + (8 - 5)))"}, {"input": "5 8 13 8\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 8, 8\n(8) + (8) = 16, left: (8 + (13 - 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 + (13 - 5))) = 24\nreach 24! expression: (8 + (8 + (13 - 5)))"}, {"input": "5 8 13 8\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 13, 8\n(13) + (8) = 21, left: (13 + 8) = 21, (5 - 8) = -3\n(21) - (-3) = 24, left: ((13 + 8) - (5 - 8)) = 24\nreach 24! expression: ((13 + 8) - (5 - 8))"}, {"input": "5 8 13 8\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 8, 13\n(-3) - (13) = -16, left: ((5 - 8) - 13) = -16, 8\n(8) - (-16) = 24, left: (8 - ((5 - 8) - 13)) = 24\nreach 24! expression: (8 - ((5 - 8) - 13))"}, {"input": "5 8 13 8\n", "output": "(8) + (13) = 21, left: (8 + 13) = 21, 5, 8\n(21) - (5) = 16, left: ((8 + 13) - 5) = 16, 8\n(8) + (16) = 24, left: (8 + ((8 + 13) - 5)) = 24\nreach 24! expression: (8 + ((8 + 13) - 5))"}, {"input": "5 8 13 8\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 8, 8\n(8) + (8) = 16, left: (8 + (13 - 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 + (13 - 5))) = 24\nreach 24! expression: (8 + (8 + (13 - 5)))"}, {"input": "5 8 13 8\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 13, 8\n(13) - (8) = 5, left: (13 - 8) = 5, (8 / 5) = 8/5\nroll back, left: (8 / 5) = 8/5, 13, 8\n(8) - (13) = -5, left: (8 - 13) = -5, (8 / 5) = 8/5\nroll back, left: (8 / 5) = 8/5, 13, 8\nroll back, left: 5 8 13 8\n(8) - (5) = 3, left: (8 - 5) = 3, 13, 8\n(13) + (3) = 16, left: (13 + (8 - 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (13 + (8 - 5))) = 24\nreach 24! expression: (8 + (13 + (8 - 5)))"}, {"input": "5 8 13 8\n", "output": "(8) * (13) = 104, left: (8 * 13) = 104, 5, 8\n(104) / (8) = 13, left: ((8 * 13) / 8) = 13, 5\nroll back, left: (8 * 13) = 104, 5, 8\nroll back, left: 5 8 13 8\n(8) + (13) = 21, left: (8 + 13) = 21, 5, 8\n(5) + (21) = 26, left: (5 + (8 + 13)) = 26, 8\nroll back, left: (8 + 13) = 21, 5, 8\n(21) - (5) = 16, left: ((8 + 13) - 5) = 16, 8\n(8) + (16) = 24, left: (8 + ((8 + 13) - 5)) = 24\nreach 24! expression: (8 + ((8 + 13) - 5))"}, {"input": "5 8 13 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 8, 13\nroll back, left: 5 8 13 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 8, 13\n(5/8) - (13) = -99/8, left: ((5 / 8) - 13) = -99/8, 8\nroll back, left: (5 / 8) = 5/8, 8, 13\nroll back, left: 5 8 13 8\n(5) - (8) = -3, left: (5 - 8) = -3, 8, 13\n(-3) - (13) = -16, left: ((5 - 8) - 13) = -16, 8\n(8) - (-16) = 24, left: (8 - ((5 - 8) - 13)) = 24\nreach 24! expression: (8 - ((5 - 8) - 13))"}, {"input": "5 8 13 8\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 8, 8\n(8) + (8) = 16, left: (8 + (13 - 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 + (13 - 5))) = 24\nreach 24! expression: (8 + (8 + (13 - 5)))"}, {"input": "5 8 13 8\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 8, 8\n(8) + (8) = 16, left: (8 + (13 - 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 + (13 - 5))) = 24\nreach 24! expression: (8 + (8 + (13 - 5)))"}, {"input": "5 8 13 8\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 8, 8\n(8) + (8) = 16, left: (8 + (13 - 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 + (13 - 5))) = 24\nreach 24! expression: (8 + (8 + (13 - 5)))"}, {"input": "12 3 5 8\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 5, 8\n(8) * (15) = 120, left: (8 * (12 + 3)) = 120, 5\n(120) / (5) = 24, left: ((8 * (12 + 3)) / 5) = 24\nreach 24! expression: ((8 * (12 + 3)) / 5)"}, {"input": "12 3 5 8\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 5, 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, (12 + 3) = 15\n(15) / (5/8) = 24, left: ((12 + 3) / (5 / 8)) = 24\nreach 24! expression: ((12 + 3) / (5 / 8))"}, {"input": "12 3 5 8\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 5, 8\n(5) / (15) = 1/3, left: (5 / (12 + 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (5 / (12 + 3))) = 24\nreach 24! expression: (8 / (5 / (12 + 3)))"}, {"input": "12 3 5 8\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 12, 3\n(12) + (3) = 15, left: (12 + 3) = 15, (5 / 8) = 5/8\n(15) / (5/8) = 24, left: ((12 + 3) / (5 / 8)) = 24\nreach 24! expression: ((12 + 3) / (5 / 8))"}, {"input": "12 3 5 8\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 12, 5\n(5) - (12) = -7, left: (5 - 12) = -7, (8 - 3) = 5\nroll back, left: (8 - 3) = 5, 12, 5\nroll back, left: 12 3 5 8\n(3) + (8) = 11, left: (3 + 8) = 11, 12, 5\nroll back, left: 12 3 5 8\n(12) + (3) = 15, left: (12 + 3) = 15, 5, 8\n(8) * (15) = 120, left: (8 * (12 + 3)) = 120, 5\n(120) / (5) = 24, left: ((8 * (12 + 3)) / 5) = 24\nreach 24! expression: ((8 * (12 + 3)) / 5)"}, {"input": "12 3 5 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 3, 5\n(3) + (5) = 8, left: (3 + 5) = 8, (12 - 8) = 4\nroll back, left: (12 - 8) = 4, 3, 5\nroll back, left: 12 3 5 8\n(12) * (5) = 60, left: (12 * 5) = 60, 3, 8\nroll back, left: 12 3 5 8\n(12) + (3) = 15, left: (12 + 3) = 15, 5, 8\n(5) / (15) = 1/3, left: (5 / (12 + 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (5 / (12 + 3))) = 24\nreach 24! expression: (8 / (5 / (12 + 3)))"}, {"input": "12 3 5 8\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 12, 3\nroll back, left: 12 3 5 8\n(5) * (8) = 40, left: (5 * 8) = 40, 12, 3\n(40) - (12) = 28, left: ((5 * 8) - 12) = 28, 3\nroll back, left: (5 * 8) = 40, 12, 3\nroll back, left: 12 3 5 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 12, 3\n(12) + (3) = 15, left: (12 + 3) = 15, (5 / 8) = 5/8\n(15) / (5/8) = 24, left: ((12 + 3) / (5 / 8)) = 24\nreach 24! expression: ((12 + 3) / (5 / 8))"}, {"input": "12 3 5 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 3, 5\nroll back, left: 12 3 5 8\n(12) * (8) = 96, left: (12 * 8) = 96, 3, 5\nroll back, left: 12 3 5 8\n(3) - (12) = -9, left: (3 - 12) = -9, 5, 8\nroll back, left: 12 3 5 8\n(12) + (3) = 15, left: (12 + 3) = 15, 5, 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, (12 + 3) = 15\n(15) / (5/8) = 24, left: ((12 + 3) / (5 / 8)) = 24\nreach 24! expression: ((12 + 3) / (5 / 8))"}, {"input": "3 12 2 10\n", "output": "(3) + (2) = 5, left: (3 + 2) = 5, 12, 10\n(12) * (10) = 120, left: (12 * 10) = 120, (3 + 2) = 5\n(120) / (5) = 24, left: ((12 * 10) / (3 + 2)) = 24\nreach 24! expression: ((12 * 10) / (3 + 2))"}, {"input": "3 12 2 10\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (12 / 3) = 4\n(4) + (20) = 24, left: ((12 / 3) + (2 * 10)) = 24\nreach 24! expression: ((12 / 3) + (2 * 10))"}, {"input": "3 12 2 10\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (12 / 2) = 6\n(30) - (6) = 24, left: ((3 * 10) - (12 / 2)) = 24\nreach 24! expression: ((3 * 10) - (12 / 2))"}, {"input": "3 12 2 10\n", "output": "(12) * (10) = 120, left: (12 * 10) = 120, 3, 2\n(3) + (2) = 5, left: (3 + 2) = 5, (12 * 10) = 120\n(120) / (5) = 24, left: ((12 * 10) / (3 + 2)) = 24\nreach 24! expression: ((12 * 10) / (3 + 2))"}, {"input": "3 12 2 10\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 12, 2\n(12) / (2) = 6, left: (12 / 2) = 6, (3 * 10) = 30\n(30) - (6) = 24, left: ((3 * 10) - (12 / 2)) = 24\nreach 24! expression: ((3 * 10) - (12 / 2))"}, {"input": "3 12 2 10\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 3, 2\nroll back, left: 3 12 2 10\n(10) / (12) = 5/6, left: (10 / 12) = 5/6, 3, 2\nroll back, left: 3 12 2 10\n(12) + (10) = 22, left: (12 + 10) = 22, 3, 2\nroll back, left: 3 12 2 10\n(12) * (10) = 120, left: (12 * 10) = 120, 3, 2\n(3) + (2) = 5, left: (3 + 2) = 5, (12 * 10) = 120\n(120) / (5) = 24, left: ((12 * 10) / (3 + 2)) = 24\nreach 24! expression: ((12 * 10) / (3 + 2))"}, {"input": "4 9 7 1\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 4, 7\n(4) - (7) = -3, left: (4 - 7) = -3, (1 - 9) = -8\n(-8) * (-3) = 24, left: ((1 - 9) * (4 - 7)) = 24\nreach 24! expression: ((1 - 9) * (4 - 7))"}, {"input": "4 9 7 1\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 4, 7\n(7) - (4) = 3, left: (7 - 4) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (7 - 4)) = 24\nreach 24! expression: ((9 - 1) * (7 - 4))"}, {"input": "4 9 7 1\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (7 - 4) = 3\n(3) * (8) = 24, left: ((7 - 4) * (9 - 1)) = 24\nreach 24! expression: ((7 - 4) * (9 - 1))"}, {"input": "4 9 7 1\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 9, 1\n(1) - (9) = -8, left: (1 - 9) = -8, (4 - 7) = -3\n(-3) * (-8) = 24, left: ((4 - 7) * (1 - 9)) = 24\nreach 24! expression: ((4 - 7) * (1 - 9))"}, {"input": "4 9 7 1\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 7, 1\n(4/9) - (1) = -5/9, left: ((4 / 9) - 1) = -5/9, 7\nroll back, left: (4 / 9) = 4/9, 7, 1\nroll back, left: 4 9 7 1\n(4) + (9) = 13, left: (4 + 9) = 13, 7, 1\nroll back, left: 4 9 7 1\n(1) - (9) = -8, left: (1 - 9) = -8, 4, 7\n(4) - (7) = -3, left: (4 - 7) = -3, (1 - 9) = -8\n(-8) * (-3) = 24, left: ((1 - 9) * (4 - 7)) = 24\nreach 24! expression: ((1 - 9) * (4 - 7))"}, {"input": "4 9 7 1\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 4, 9\nroll back, left: 4 9 7 1\n(1) / (7) = 1/7, left: (1 / 7) = 1/7, 4, 9\nroll back, left: 4 9 7 1\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, 4, 1\nroll back, left: 4 9 7 1\n(4) - (7) = -3, left: (4 - 7) = -3, 9, 1\n(1) - (9) = -8, left: (1 - 9) = -8, (4 - 7) = -3\n(-3) * (-8) = 24, left: ((4 - 7) * (1 - 9)) = 24\nreach 24! expression: ((4 - 7) * (1 - 9))"}, {"input": "4 9 7 1\n", "output": "(7) + (1) = 8, left: (7 + 1) = 8, 4, 9\nroll back, left: 4 9 7 1\n(1) - (4) = -3, left: (1 - 4) = -3, 9, 7\nroll back, left: 4 9 7 1\n(4) / (1) = 4, left: (4 / 1) = 4, 9, 7\nroll back, left: 4 9 7 1\n(1) - (9) = -8, left: (1 - 9) = -8, 4, 7\n(4) - (7) = -3, left: (4 - 7) = -3, (1 - 9) = -8\n(-8) * (-3) = 24, left: ((1 - 9) * (4 - 7)) = 24\nreach 24! expression: ((1 - 9) * (4 - 7))"}, {"input": "4 9 7 1\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 7, 1\nroll back, left: 4 9 7 1\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, 9, 1\n(9) - (4/7) = 59/7, left: (9 - (4 / 7)) = 59/7, 1\nroll back, left: (4 / 7) = 4/7, 9, 1\nroll back, left: 4 9 7 1\n(7) - (4) = 3, left: (7 - 4) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (7 - 4) = 3\n(3) * (8) = 24, left: ((7 - 4) * (9 - 1)) = 24\nreach 24! expression: ((7 - 4) * (9 - 1))"}, {"input": "4 9 7 1\n", "output": "(1) / (9) = 1/9, left: (1 / 9) = 1/9, 4, 7\n(1/9) - (7) = -62/9, left: ((1 / 9) - 7) = -62/9, 4\nroll back, left: (1 / 9) = 1/9, 4, 7\n(1/9) / (4) = 1/36, left: ((1 / 9) / 4) = 1/36, 7\nroll back, left: (1 / 9) = 1/9, 4, 7\nroll back, left: 4 9 7 1\n(9) - (1) = 8, left: (9 - 1) = 8, 4, 7\n(7) - (4) = 3, left: (7 - 4) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (7 - 4)) = 24\nreach 24! expression: ((9 - 1) * (7 - 4))"}, {"input": "4 4 2 12\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 4, 2\n(4) / (2) = 2, left: (4 / 2) = 2, (4 * 12) = 48\n(48) / (2) = 24, left: ((4 * 12) / (4 / 2)) = 24\nreach 24! expression: ((4 * 12) / (4 / 2))"}, {"input": "4 4 2 12\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 4, 12\n(4) / (2) = 2, left: (4 / (4 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (4 / (4 / 2))) = 24\nreach 24! expression: (12 * (4 / (4 / 2)))"}, {"input": "4 4 2 12\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 4, 12\n(4) + (12) = 16, left: (4 + 12) = 16, (4 * 2) = 8\n(8) + (16) = 24, left: ((4 * 2) + (4 + 12)) = 24\nreach 24! expression: ((4 * 2) + (4 + 12))"}, {"input": "4 4 2 12\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 4, 2\n(8) - (2) = 6, left: ((12 - 4) - 2) = 6, 4\n(4) * (6) = 24, left: (4 * ((12 - 4) - 2)) = 24\nreach 24! expression: (4 * ((12 - 4) - 2))"}, {"input": "4 4 2 12\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 2, 12\n(12) + (0) = 12, left: (12 + (4 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 + (4 - 4))) = 24\nreach 24! expression: (2 * (12 + (4 - 4)))"}, {"input": "4 4 2 12\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 4, 12\n(4) * (2) = 8, left: (4 * (4 / 2)) = 8, 12\n(8) - (12) = -4, left: ((4 * (4 / 2)) - 12) = -4\nroll back, left: (4 * (4 / 2)) = 8, 12\nroll back, left: (4 / 2) = 2, 4, 12\n(4) / (2) = 2, left: (4 / (4 / 2)) = 2, 12\n(2) / (12) = 1/6, left: ((4 / (4 / 2)) / 12) = 1/6\nroll back, left: (4 / (4 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (4 / (4 / 2))) = 24\nreach 24! expression: (12 * (4 / (4 / 2)))"}, {"input": "4 4 2 12\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 4, 2\n(4) - (2) = 2, left: (4 - 2) = 2, (12 - 4) = 8\nroll back, left: (12 - 4) = 8, 4, 2\n(2) + (8) = 10, left: (2 + (12 - 4)) = 10, 4\nroll back, left: (12 - 4) = 8, 4, 2\n(8) - (2) = 6, left: ((12 - 4) - 2) = 6, 4\n(6) / (4) = 3/2, left: (((12 - 4) - 2) / 4) = 3/2\nroll back, left: ((12 - 4) - 2) = 6, 4\n(4) * (6) = 24, left: (4 * ((12 - 4) - 2)) = 24\nreach 24! expression: (4 * ((12 - 4) - 2))"}, {"input": "4 4 2 12\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 4, 12\n(4) + (12) = 16, left: (4 + 12) = 16, (4 * 2) = 8\n(8) * (16) = 128, left: ((4 * 2) * (4 + 12)) = 128\nroll back, left: (4 + 12) = 16, (4 * 2) = 8\n(8) - (16) = -8, left: ((4 * 2) - (4 + 12)) = -8\nroll back, left: (4 + 12) = 16, (4 * 2) = 8\n(8) + (16) = 24, left: ((4 * 2) + (4 + 12)) = 24\nreach 24! expression: ((4 * 2) + (4 + 12))"}, {"input": "4 4 2 12\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 2, 12\n(12) + (0) = 12, left: (12 + (4 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 + (4 - 4))) = 24\nreach 24! expression: (2 * (12 + (4 - 4)))"}, {"input": "4 4 2 12\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 4, 2\n(4) / (2) = 2, left: (4 / 2) = 2, (4 * 12) = 48\n(48) * (2) = 96, left: ((4 * 12) * (4 / 2)) = 96\nroll back, left: (4 / 2) = 2, (4 * 12) = 48\n(48) / (2) = 24, left: ((4 * 12) / (4 / 2)) = 24\nreach 24! expression: ((4 * 12) / (4 / 2))"}, {"input": "4 4 2 12\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 4, 12\n(4) + (12) = 16, left: (4 + 12) = 16, (4 * 2) = 8\n(8) * (16) = 128, left: ((4 * 2) * (4 + 12)) = 128\nroll back, left: (4 + 12) = 16, (4 * 2) = 8\n(8) - (16) = -8, left: ((4 * 2) - (4 + 12)) = -8\nroll back, left: (4 + 12) = 16, (4 * 2) = 8\n(8) + (16) = 24, left: ((4 * 2) + (4 + 12)) = 24\nreach 24! expression: ((4 * 2) + (4 + 12))"}, {"input": "4 4 2 12\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 2, 12\n(12) + (0) = 12, left: (12 + (4 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 + (4 - 4))) = 24\nreach 24! expression: (2 * (12 + (4 - 4)))"}, {"input": "4 4 2 12\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 4, 2\n(4) / (2) = 2, left: (4 / 2) = 2, (4 * 12) = 48\n(48) * (2) = 96, left: ((4 * 12) * (4 / 2)) = 96\nroll back, left: (4 / 2) = 2, (4 * 12) = 48\n(48) / (2) = 24, left: ((4 * 12) / (4 / 2)) = 24\nreach 24! expression: ((4 * 12) / (4 / 2))"}, {"input": "4 4 2 12\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 4, 12\n(4) + (12) = 16, left: (4 + 12) = 16, (4 * 2) = 8\n(8) * (16) = 128, left: ((4 * 2) * (4 + 12)) = 128\nroll back, left: (4 + 12) = 16, (4 * 2) = 8\n(8) - (16) = -8, left: ((4 * 2) - (4 + 12)) = -8\nroll back, left: (4 + 12) = 16, (4 * 2) = 8\n(8) + (16) = 24, left: ((4 * 2) + (4 + 12)) = 24\nreach 24! expression: ((4 * 2) + (4 + 12))"}, {"input": "4 4 2 12\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 2, 12\n(12) + (0) = 12, left: (12 + (4 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 + (4 - 4))) = 24\nreach 24! expression: (2 * (12 + (4 - 4)))"}, {"input": "4 4 2 12\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 4, 2\n(4) / (2) = 2, left: (4 / 2) = 2, (4 * 12) = 48\n(48) * (2) = 96, left: ((4 * 12) * (4 / 2)) = 96\nroll back, left: (4 / 2) = 2, (4 * 12) = 48\n(48) / (2) = 24, left: ((4 * 12) / (4 / 2)) = 24\nreach 24! expression: ((4 * 12) / (4 / 2))"}, {"input": "4 4 2 12\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 4, 12\n(4) + (12) = 16, left: (4 + 12) = 16, (4 * 2) = 8\n(8) * (16) = 128, left: ((4 * 2) * (4 + 12)) = 128\nroll back, left: (4 + 12) = 16, (4 * 2) = 8\n(8) - (16) = -8, left: ((4 * 2) - (4 + 12)) = -8\nroll back, left: (4 + 12) = 16, (4 * 2) = 8\n(8) + (16) = 24, left: ((4 * 2) + (4 + 12)) = 24\nreach 24! expression: ((4 * 2) + (4 + 12))"}, {"input": "4 4 2 12\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 2, 12\n(12) + (0) = 12, left: (12 + (4 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 + (4 - 4))) = 24\nreach 24! expression: (2 * (12 + (4 - 4)))"}, {"input": "4 4 2 12\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 4, 2\n(4) / (2) = 2, left: (4 / 2) = 2, (4 * 12) = 48\n(48) * (2) = 96, left: ((4 * 12) * (4 / 2)) = 96\nroll back, left: (4 / 2) = 2, (4 * 12) = 48\n(48) / (2) = 24, left: ((4 * 12) / (4 / 2)) = 24\nreach 24! expression: ((4 * 12) / (4 / 2))"}, {"input": "3 9 1 10\n", "output": "(1) + (10) = 11, left: (1 + 10) = 11, 3, 9\n(3) * (11) = 33, left: (3 * (1 + 10)) = 33, 9\n(33) - (9) = 24, left: ((3 * (1 + 10)) - 9) = 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 1, 10\n(10) - (1) = 9, left: (10 - 1) = 9, (3 - 9) = -6\nroll back, left: (3 - 9) = -6, 1, 10\nroll back, left: 3 9 1 10\n(10) - (1) = 9, left: (10 - 1) = 9, 3, 9\nroll back, left: 3 9 1 10\n(1) + (10) = 11, left: (1 + 10) = 11, 3, 9\n(3) * (11) = 33, left: (3 * (1 + 10)) = 33, 9\n(33) - (9) = 24, left: ((3 * (1 + 10)) - 9) = 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(1) - (10) = -9, left: (1 - 10) = -9, 3, 9\nroll back, left: 3 9 1 10\n(1) + (10) = 11, left: (1 + 10) = 11, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (1 + 10) = 11\nroll back, left: (1 + 10) = 11, 3, 9\n(9) / (3) = 3, left: (9 / 3) = 3, (1 + 10) = 11\nroll back, left: (1 + 10) = 11, 3, 9\n(3) * (11) = 33, left: (3 * (1 + 10)) = 33, 9\n(33) - (9) = 24, left: ((3 * (1 + 10)) - 9) = 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 3, 10\nroll back, left: 3 9 1 10\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, 1, 10\nroll back, left: 3 9 1 10\n(3) - (1) = 2, left: (3 - 1) = 2, 9, 10\nroll back, left: 3 9 1 10\n(1) + (10) = 11, left: (1 + 10) = 11, 3, 9\n(3) * (11) = 33, left: (3 * (1 + 10)) = 33, 9\n(33) - (9) = 24, left: ((3 * (1 + 10)) - 9) = 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 1, 10\nroll back, left: 3 9 1 10\n(9) * (1) = 9, left: (9 * 1) = 9, 3, 10\nroll back, left: 3 9 1 10\n(1) - (10) = -9, left: (1 - 10) = -9, 3, 9\nroll back, left: 3 9 1 10\n(1) + (10) = 11, left: (1 + 10) = 11, 3, 9\n(3) * (11) = 33, left: (3 * (1 + 10)) = 33, 9\n(33) - (9) = 24, left: ((3 * (1 + 10)) - 9) = 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "3 9 1 10\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 1, 10\n(1) + (1/3) = 4/3, left: (1 + (3 / 9)) = 4/3, 10\nroll back, left: (3 / 9) = 1/3, 1, 10\nroll back, left: 3 9 1 10\n(9) * (10) = 90, left: (9 * 10) = 90, 3, 1\nroll back, left: 3 9 1 10\n(1) + (10) = 11, left: (1 + 10) = 11, 3, 9\n(3) * (11) = 33, left: (3 * (1 + 10)) = 33, 9\n(33) - (9) = 24, left: ((3 * (1 + 10)) - 9) = 24\nreach 24! expression: ((3 * (1 + 10)) - 9)"}, {"input": "10 13 9 3\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 10, 13\n(10) + (27) = 37, left: (10 + (9 * 3)) = 37, 13\n(37) - (13) = 24, left: ((10 + (9 * 3)) - 13) = 24\nreach 24! expression: ((10 + (9 * 3)) - 13)"}, {"input": "10 13 9 3\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 9, 3\n(9) * (3) = 27, left: (9 * (13 - 10)) = 27, 3\n(27) - (3) = 24, left: ((9 * (13 - 10)) - 3) = 24\nreach 24! expression: ((9 * (13 - 10)) - 3)"}, {"input": "10 13 9 3\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (13 - 10) = 3\n(27) - (3) = 24, left: ((9 * 3) - (13 - 10)) = 24\nreach 24! expression: ((9 * 3) - (13 - 10))"}, {"input": "10 13 9 3\n", "output": "(10) - (13) = -3, left: (10 - 13) = -3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (10 - 13) = -3\n(-3) + (27) = 24, left: ((10 - 13) + (9 * 3)) = 24\nreach 24! expression: ((10 - 13) + (9 * 3))"}, {"input": "10 13 9 3\n", "output": "(9) / (13) = 9/13, left: (9 / 13) = 9/13, 10, 3\nroll back, left: 10 13 9 3\n(13) + (9) = 22, left: (13 + 9) = 22, 10, 3\nroll back, left: 10 13 9 3\n(13) + (3) = 16, left: (13 + 3) = 16, 10, 9\nroll back, left: 10 13 9 3\n(13) - (10) = 3, left: (13 - 10) = 3, 9, 3\n(9) * (3) = 27, left: (9 * (13 - 10)) = 27, 3\n(27) - (3) = 24, left: ((9 * (13 - 10)) - 3) = 24\nreach 24! expression: ((9 * (13 - 10)) - 3)"}, {"input": "12 7 8 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 7, 8\n(8) - (7) = 1, left: (8 - 7) = 1, (12 + 12) = 24\n(24) * (1) = 24, left: ((12 + 12) * (8 - 7)) = 24\nreach 24! expression: ((12 + 12) * (8 - 7))"}, {"input": "12 7 8 12\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 12, 12\n(12) / (-1) = -12, left: (12 / (7 - 8)) = -12, 12\n(12) - (-12) = 24, left: (12 - (12 / (7 - 8))) = 24\nreach 24! expression: (12 - (12 / (7 - 8)))"}, {"input": "12 7 8 12\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 12, 12\n(12) + (12) = 24, left: (12 + 12) = 24, (8 - 7) = 1\n(24) / (1) = 24, left: ((12 + 12) / (8 - 7)) = 24\nreach 24! expression: ((12 + 12) / (8 - 7))"}, {"input": "12 7 8 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 7, 8\n(8) - (7) = 1, left: (8 - 7) = 1, (12 + 12) = 24\n(24) / (1) = 24, left: ((12 + 12) / (8 - 7)) = 24\nreach 24! expression: ((12 + 12) / (8 - 7))"}, {"input": "12 7 8 12\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 12, 7\nroll back, left: 12 7 8 12\n(12) - (8) = 4, left: (12 - 8) = 4, 12, 7\n(7) + (4) = 11, left: (7 + (12 - 8)) = 11, 12\nroll back, left: (12 - 8) = 4, 12, 7\nroll back, left: 12 7 8 12\n(8) - (7) = 1, left: (8 - 7) = 1, 12, 12\n(12) + (12) = 24, left: (12 + 12) = 24, (8 - 7) = 1\n(24) / (1) = 24, left: ((12 + 12) / (8 - 7)) = 24\nreach 24! expression: ((12 + 12) / (8 - 7))"}, {"input": "12 7 8 12\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 12, 7\nroll back, left: 12 7 8 12\n(8) * (12) = 96, left: (8 * 12) = 96, 12, 7\n(12) / (96) = 1/8, left: (12 / (8 * 12)) = 1/8, 7\nroll back, left: (8 * 12) = 96, 12, 7\nroll back, left: 12 7 8 12\n(7) - (8) = -1, left: (7 - 8) = -1, 12, 12\n(12) / (-1) = -12, left: (12 / (7 - 8)) = -12, 12\n(12) - (-12) = 24, left: (12 - (12 / (7 - 8))) = 24\nreach 24! expression: (12 - (12 / (7 - 8)))"}, {"input": "12 7 8 12\n", "output": "(12) - (12) = 0, left: (12 - 12) = 0, 7, 8\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, (12 - 12) = 0\nroll back, left: (12 - 12) = 0, 7, 8\nroll back, left: 12 7 8 12\n(12) / (12) = 1, left: (12 / 12) = 1, 7, 8\nroll back, left: 12 7 8 12\n(12) + (12) = 24, left: (12 + 12) = 24, 7, 8\n(8) - (7) = 1, left: (8 - 7) = 1, (12 + 12) = 24\n(24) * (1) = 24, left: ((12 + 12) * (8 - 7)) = 24\nreach 24! expression: ((12 + 12) * (8 - 7))"}, {"input": "9 1 5 6\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 9, 5\n(9) - (5) = 4, left: (9 - 5) = 4, (1 / 6) = 1/6\n(4) / (1/6) = 24, left: ((9 - 5) / (1 / 6)) = 24\nreach 24! expression: ((9 - 5) / (1 / 6))"}, {"input": "9 1 5 6\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 5, 6\n(9) - (5) = 4, left: ((9 / 1) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 / 1) - 5)) = 24\nreach 24! expression: (6 * ((9 / 1) - 5))"}, {"input": "9 1 5 6\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 1, 6\n(4) / (1) = 4, left: ((9 - 5) / 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 - 5) / 1)) = 24\nreach 24! expression: (6 * ((9 - 5) / 1))"}, {"input": "9 1 5 6\n", "output": "(1) / (9) = 1/9, left: (1 / 9) = 1/9, 5, 6\n(5) / (1/9) = 45, left: (5 / (1 / 9)) = 45, 6\nroll back, left: (1 / 9) = 1/9, 5, 6\nroll back, left: 9 1 5 6\n(9) / (1) = 9, left: (9 / 1) = 9, 5, 6\n(6) - (5) = 1, left: (6 - 5) = 1, (9 / 1) = 9\nroll back, left: (9 / 1) = 9, 5, 6\n(9) - (5) = 4, left: ((9 / 1) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 / 1) - 5)) = 24\nreach 24! expression: (6 * ((9 / 1) - 5))"}, {"input": "9 1 5 6\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 1, 5\n(1) * (3) = 3, left: (1 * (9 - 6)) = 3, 5\nroll back, left: (9 - 6) = 3, 1, 5\nroll back, left: 9 1 5 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 1, 5\nroll back, left: 9 1 5 6\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, 9, 5\n(9) - (5) = 4, left: (9 - 5) = 4, (1 / 6) = 1/6\n(4) / (1/6) = 24, left: ((9 - 5) / (1 / 6)) = 24\nreach 24! expression: ((9 - 5) / (1 / 6))"}, {"input": "9 1 5 6\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 1, 5\nroll back, left: 9 1 5 6\n(6) - (9) = -3, left: (6 - 9) = -3, 1, 5\nroll back, left: 9 1 5 6\n(9) * (6) = 54, left: (9 * 6) = 54, 1, 5\nroll back, left: 9 1 5 6\n(9) / (1) = 9, left: (9 / 1) = 9, 5, 6\n(9) - (5) = 4, left: ((9 / 1) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 / 1) - 5)) = 24\nreach 24! expression: (6 * ((9 / 1) - 5))"}, {"input": "9 1 5 6\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 1, 5\nroll back, left: 9 1 5 6\n(1) - (6) = -5, left: (1 - 6) = -5, 9, 5\n(-5) - (9) = -14, left: ((1 - 6) - 9) = -14, 5\nroll back, left: (1 - 6) = -5, 9, 5\nroll back, left: 9 1 5 6\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, 9, 5\n(9) - (5) = 4, left: (9 - 5) = 4, (1 / 6) = 1/6\n(4) / (1/6) = 24, left: ((9 - 5) / (1 / 6)) = 24\nreach 24! expression: ((9 - 5) / (1 / 6))"}, {"input": "9 1 5 6\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 1, 6\nroll back, left: 9 1 5 6\n(9) + (5) = 14, left: (9 + 5) = 14, 1, 6\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, (9 + 5) = 14\nroll back, left: (9 + 5) = 14, 1, 6\nroll back, left: 9 1 5 6\n(9) - (5) = 4, left: (9 - 5) = 4, 1, 6\n(4) / (1) = 4, left: ((9 - 5) / 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 - 5) / 1)) = 24\nreach 24! expression: (6 * ((9 - 5) / 1))"}, {"input": "12 7 9 1\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 7, 1\n(7) + (1) = 8, left: (7 + 1) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (7 + 1)) = 24\nreach 24! expression: ((12 - 9) * (7 + 1))"}, {"input": "12 7 9 1\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 12, 7\n(9) - (7) = 2, left: ((9 / 1) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 / 1) - 7)) = 24\nreach 24! expression: (12 * ((9 / 1) - 7))"}, {"input": "12 7 9 1\n", "output": "(7) * (1) = 7, left: (7 * 1) = 7, 12, 9\n(9) - (7) = 2, left: (9 - (7 * 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (9 - (7 * 1))) = 24\nreach 24! expression: (12 * (9 - (7 * 1)))"}, {"input": "12 7 9 1\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 12, 1\n(12) * (1) = 12, left: (12 * 1) = 12, (9 - 7) = 2\n(2) * (12) = 24, left: ((9 - 7) * (12 * 1)) = 24\nreach 24! expression: ((9 - 7) * (12 * 1))"}, {"input": "12 7 9 1\n", "output": "(7) * (1) = 7, left: (7 * 1) = 7, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (7 * 1) = 7\nroll back, left: (7 * 1) = 7, 12, 9\n(12) / (9) = 4/3, left: (12 / 9) = 4/3, (7 * 1) = 7\nroll back, left: (7 * 1) = 7, 12, 9\n(7) / (9) = 7/9, left: ((7 * 1) / 9) = 7/9, 12\nroll back, left: (7 * 1) = 7, 12, 9\n(9) - (7) = 2, left: (9 - (7 * 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (9 - (7 * 1))) = 24\nreach 24! expression: (12 * (9 - (7 * 1)))"}, {"input": "12 7 9 1\n", "output": "(9) + (1) = 10, left: (9 + 1) = 10, 12, 7\nroll back, left: 12 7 9 1\n(1) - (9) = -8, left: (1 - 9) = -8, 12, 7\n(7) + (-8) = -1, left: (7 + (1 - 9)) = -1, 12\nroll back, left: (1 - 9) = -8, 12, 7\nroll back, left: 12 7 9 1\n(9) / (1) = 9, left: (9 / 1) = 9, 12, 7\n(9) - (7) = 2, left: ((9 / 1) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 / 1) - 7)) = 24\nreach 24! expression: (12 * ((9 / 1) - 7))"}, {"input": "12 7 9 1\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 7, 1\n(7) - (1) = 6, left: (7 - 1) = 6, (9 - 12) = -3\nroll back, left: (9 - 12) = -3, 7, 1\n(7) / (-3) = -7/3, left: (7 / (9 - 12)) = -7/3, 1\nroll back, left: (9 - 12) = -3, 7, 1\nroll back, left: 12 7 9 1\n(12) - (9) = 3, left: (12 - 9) = 3, 7, 1\n(7) + (1) = 8, left: (7 + 1) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (7 + 1)) = 24\nreach 24! expression: ((12 - 9) * (7 + 1))"}, {"input": "12 7 9 1\n", "output": "(12) / (7) = 12/7, left: (12 / 7) = 12/7, 9, 1\nroll back, left: 12 7 9 1\n(12) + (7) = 19, left: (12 + 7) = 19, 9, 1\nroll back, left: 12 7 9 1\n(7) - (12) = -5, left: (7 - 12) = -5, 9, 1\nroll back, left: 12 7 9 1\n(12) - (9) = 3, left: (12 - 9) = 3, 7, 1\n(7) + (1) = 8, left: (7 + 1) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (7 + 1)) = 24\nreach 24! expression: ((12 - 9) * (7 + 1))"}, {"input": "12 7 9 1\n", "output": "(7) * (9) = 63, left: (7 * 9) = 63, 12, 1\nroll back, left: 12 7 9 1\n(9) / (7) = 9/7, left: (9 / 7) = 9/7, 12, 1\nroll back, left: 12 7 9 1\n(7) - (9) = -2, left: (7 - 9) = -2, 12, 1\nroll back, left: 12 7 9 1\n(9) - (7) = 2, left: (9 - 7) = 2, 12, 1\n(12) * (1) = 12, left: (12 * 1) = 12, (9 - 7) = 2\n(2) * (12) = 24, left: ((9 - 7) * (12 * 1)) = 24\nreach 24! expression: ((9 - 7) * (12 * 1))"}, {"input": "9 1 12 6\n", "output": "(9) / (6) = 3/2, left: (9 / 6) = 3/2, 1, 12\n(3/2) - (1) = 1/2, left: ((9 / 6) - 1) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((9 / 6) - 1)) = 24\nreach 24! expression: (12 / ((9 / 6) - 1))"}, {"input": "9 1 12 6\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 12, 6\n(12) - (8) = 4, left: (12 - (9 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (12 - (9 - 1))) = 24\nreach 24! expression: (6 * (12 - (9 - 1)))"}, {"input": "9 1 12 6\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 12, 6\n(8) - (6) = 2, left: ((9 - 1) - 6) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 - 1) - 6)) = 24\nreach 24! expression: (12 * ((9 - 1) - 6))"}, {"input": "9 1 12 6\n", "output": "(1) + (12) = 13, left: (1 + 12) = 13, 9, 6\n(13) - (9) = 4, left: ((1 + 12) - 9) = 4, 6\n(6) * (4) = 24, left: (6 * ((1 + 12) - 9)) = 24\nreach 24! expression: (6 * ((1 + 12) - 9))"}, {"input": "9 1 12 6\n", "output": "(1) / (12) = 1/12, left: (1 / 12) = 1/12, 9, 6\nroll back, left: 9 1 12 6\n(1) + (12) = 13, left: (1 + 12) = 13, 9, 6\n(13) / (6) = 13/6, left: ((1 + 12) / 6) = 13/6, 9\nroll back, left: (1 + 12) = 13, 9, 6\n(6) - (9) = -3, left: (6 - 9) = -3, (1 + 12) = 13\nroll back, left: (1 + 12) = 13, 9, 6\n(13) - (9) = 4, left: ((1 + 12) - 9) = 4, 6\n(6) * (4) = 24, left: (6 * ((1 + 12) - 9)) = 24\nreach 24! expression: (6 * ((1 + 12) - 9))"}, {"input": "9 1 12 6\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 1, 12\n(12) - (15) = -3, left: (12 - (9 + 6)) = -3, 1\nroll back, left: (9 + 6) = 15, 1, 12\nroll back, left: 9 1 12 6\n(9) * (6) = 54, left: (9 * 6) = 54, 1, 12\nroll back, left: 9 1 12 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 1, 12\n(3/2) - (1) = 1/2, left: ((9 / 6) - 1) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((9 / 6) - 1)) = 24\nreach 24! expression: (12 / ((9 / 6) - 1))"}, {"input": "9 1 12 6\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 12, 6\n(6) - (8) = -2, left: (6 - (9 - 1)) = -2, 12\n(-2) / (12) = -1/6, left: ((6 - (9 - 1)) / 12) = -1/6\nroll back, left: (6 - (9 - 1)) = -2, 12\nroll back, left: (9 - 1) = 8, 12, 6\n(6) + (8) = 14, left: (6 + (9 - 1)) = 14, 12\nroll back, left: (9 - 1) = 8, 12, 6\n(8) - (6) = 2, left: ((9 - 1) - 6) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 - 1) - 6)) = 24\nreach 24! expression: (12 * ((9 - 1) - 6))"}, {"input": "9 1 12 6\n", "output": "(9) * (6) = 54, left: (9 * 6) = 54, 1, 12\nroll back, left: 9 1 12 6\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, 1, 12\n(12) / (2/3) = 18, left: (12 / (6 / 9)) = 18, 1\nroll back, left: (6 / 9) = 2/3, 1, 12\nroll back, left: 9 1 12 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 1, 12\n(3/2) - (1) = 1/2, left: ((9 / 6) - 1) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((9 / 6) - 1)) = 24\nreach 24! expression: (12 / ((9 / 6) - 1))"}, {"input": "9 1 12 6\n", "output": "(1) / (9) = 1/9, left: (1 / 9) = 1/9, 12, 6\n(6) * (1/9) = 2/3, left: (6 * (1 / 9)) = 2/3, 12\nroll back, left: (1 / 9) = 1/9, 12, 6\n(1/9) / (12) = 1/108, left: ((1 / 9) / 12) = 1/108, 6\nroll back, left: (1 / 9) = 1/9, 12, 6\nroll back, left: 9 1 12 6\n(9) - (1) = 8, left: (9 - 1) = 8, 12, 6\n(12) - (8) = 4, left: (12 - (9 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (12 - (9 - 1))) = 24\nreach 24! expression: (6 * (12 - (9 - 1)))"}, {"input": "8 8 5 2\n", "output": "(8) * (5) = 40, left: (8 * 5) = 40, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (8 * 5) = 40\n(40) - (16) = 24, left: ((8 * 5) - (8 * 2)) = 24\nreach 24! expression: ((8 * 5) - (8 * 2))"}, {"input": "8 8 5 2\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (8 * 2) = 16\n(40) - (16) = 24, left: ((8 * 5) - (8 * 2)) = 24\nreach 24! expression: ((8 * 5) - (8 * 2))"}, {"input": "8 8 5 2\n", "output": "(8) * (5) = 40, left: (8 * 5) = 40, 8, 2\n(8) + (40) = 48, left: (8 + (8 * 5)) = 48, 2\n(48) / (2) = 24, left: ((8 + (8 * 5)) / 2) = 24\nreach 24! expression: ((8 + (8 * 5)) / 2)"}, {"input": "8 8 5 2\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 8, 5\nroll back, left: 8 8 5 2\n(8) + (2) = 10, left: (8 + 2) = 10, 8, 5\nroll back, left: 8 8 5 2\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 8, 5\nroll back, left: 8 8 5 2\n(8) * (2) = 16, left: (8 * 2) = 16, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (8 * 2) = 16\n(40) - (16) = 24, left: ((8 * 5) - (8 * 2)) = 24\nreach 24! expression: ((8 * 5) - (8 * 2))"}, {"input": "8 8 5 2\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 5, 2\nroll back, left: 8 8 5 2\n(8) - (8) = 0, left: (8 - 8) = 0, 5, 2\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, (8 - 8) = 0\nroll back, left: (8 - 8) = 0, 5, 2\nroll back, left: 8 8 5 2\n(8) * (5) = 40, left: (8 * 5) = 40, 8, 2\n(8) + (40) = 48, left: (8 + (8 * 5)) = 48, 2\n(48) / (2) = 24, left: ((8 + (8 * 5)) / 2) = 24\nreach 24! expression: ((8 + (8 * 5)) / 2)"}, {"input": "8 8 5 2\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 8, 2\nroll back, left: 8 8 5 2\n(8) / (5) = 8/5, left: (8 / 5) = 8/5, 8, 2\n(8/5) / (2) = 4/5, left: ((8 / 5) / 2) = 4/5, 8\nroll back, left: (8 / 5) = 8/5, 8, 2\nroll back, left: 8 8 5 2\n(8) * (5) = 40, left: (8 * 5) = 40, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (8 * 5) = 40\n(40) - (16) = 24, left: ((8 * 5) - (8 * 2)) = 24\nreach 24! expression: ((8 * 5) - (8 * 2))"}, {"input": "8 8 5 2\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 8, 5\n(5) - (4) = 1, left: (5 - (8 / 2)) = 1, 8\nroll back, left: (8 / 2) = 4, 8, 5\nroll back, left: 8 8 5 2\n(8) - (2) = 6, left: (8 - 2) = 6, 8, 5\nroll back, left: 8 8 5 2\n(8) * (2) = 16, left: (8 * 2) = 16, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (8 * 2) = 16\n(40) - (16) = 24, left: ((8 * 5) - (8 * 2)) = 24\nreach 24! expression: ((8 * 5) - (8 * 2))"}, {"input": "8 8 5 2\n", "output": "(8) * (5) = 40, left: (8 * 5) = 40, 8, 2\n(8) - (40) = -32, left: (8 - (8 * 5)) = -32, 2\n(2) * (-32) = -64, left: (2 * (8 - (8 * 5))) = -64\nroll back, left: (8 - (8 * 5)) = -32, 2\nroll back, left: (8 * 5) = 40, 8, 2\n(8) / (40) = 1/5, left: (8 / (8 * 5)) = 1/5, 2\nroll back, left: (8 * 5) = 40, 8, 2\n(8) + (40) = 48, left: (8 + (8 * 5)) = 48, 2\n(48) / (2) = 24, left: ((8 + (8 * 5)) / 2) = 24\nreach 24! expression: ((8 + (8 * 5)) / 2)"}, {"input": "9 6 10 11\n", "output": "(9) + (11) = 20, left: (9 + 11) = 20, 6, 10\n(10) + (20) = 30, left: (10 + (9 + 11)) = 30, 6\n(30) - (6) = 24, left: ((10 + (9 + 11)) - 6) = 24\nreach 24! expression: ((10 + (9 + 11)) - 6)"}, {"input": "9 6 10 11\n", "output": "(9) + (11) = 20, left: (9 + 11) = 20, 6, 10\n(6) - (10) = -4, left: (6 - 10) = -4, (9 + 11) = 20\n(20) - (-4) = 24, left: ((9 + 11) - (6 - 10)) = 24\nreach 24! expression: ((9 + 11) - (6 - 10))"}, {"input": "9 6 10 11\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 9, 11\n(11) - (-4) = 15, left: (11 - (6 - 10)) = 15, 9\n(9) + (15) = 24, left: (9 + (11 - (6 - 10))) = 24\nreach 24! expression: (9 + (11 - (6 - 10)))"}, {"input": "9 6 10 11\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 10, 11\n(-3) - (11) = -14, left: ((6 - 9) - 11) = -14, 10\n(10) - (-14) = 24, left: (10 - ((6 - 9) - 11)) = 24\nreach 24! expression: (10 - ((6 - 9) - 11))"}, {"input": "9 6 10 11\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 9, 11\n(9) + (4) = 13, left: (9 + (10 - 6)) = 13, 11\n(11) + (13) = 24, left: (11 + (9 + (10 - 6))) = 24\nreach 24! expression: (11 + (9 + (10 - 6)))"}, {"input": "9 6 10 11\n", "output": "(6) * (10) = 60, left: (6 * 10) = 60, 9, 11\n(9) + (60) = 69, left: (9 + (6 * 10)) = 69, 11\nroll back, left: (6 * 10) = 60, 9, 11\nroll back, left: 9 6 10 11\n(6) / (10) = 3/5, left: (6 / 10) = 3/5, 9, 11\nroll back, left: 9 6 10 11\n(10) - (6) = 4, left: (10 - 6) = 4, 9, 11\n(9) + (4) = 13, left: (9 + (10 - 6)) = 13, 11\n(11) + (13) = 24, left: (11 + (9 + (10 - 6))) = 24\nreach 24! expression: (11 + (9 + (10 - 6)))"}, {"input": "10 6 2 5\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (6 * 2)) = 120, 5\n(120) / (5) = 24, left: ((10 * (6 * 2)) / 5) = 24\nreach 24! expression: ((10 * (6 * 2)) / 5)"}, {"input": "10 6 2 5\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (6 / 5) = 6/5\n(6/5) * (20) = 24, left: ((6 / 5) * (10 * 2)) = 24\nreach 24! expression: ((6 / 5) * (10 * 2))"}, {"input": "10 6 2 5\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 10, 6\n(5/2) / (10) = 1/4, left: ((5 / 2) / 10) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((5 / 2) / 10)) = 24\nreach 24! expression: (6 / ((5 / 2) / 10))"}, {"input": "10 6 2 5\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (5 / 6) = 5/6\n(20) / (5/6) = 24, left: ((10 * 2) / (5 / 6)) = 24\nreach 24! expression: ((10 * 2) / (5 / 6))"}, {"input": "10 6 2 5\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 6, 5\n(6) * (20) = 120, left: (6 * (10 * 2)) = 120, 5\n(120) / (5) = 24, left: ((6 * (10 * 2)) / 5) = 24\nreach 24! expression: ((6 * (10 * 2)) / 5)"}, {"input": "10 6 2 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 10, 2\n(1) - (10) = -9, left: ((6 - 5) - 10) = -9, 2\nroll back, left: (6 - 5) = 1, 10, 2\nroll back, left: 10 6 2 5\n(6) + (5) = 11, left: (6 + 5) = 11, 10, 2\nroll back, left: 10 6 2 5\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (6 / 5) = 6/5\n(6/5) * (20) = 24, left: ((6 / 5) * (10 * 2)) = 24\nreach 24! expression: ((6 / 5) * (10 * 2))"}, {"input": "10 6 2 5\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 10, 2\n(11) - (10) = 1, left: ((6 + 5) - 10) = 1, 2\nroll back, left: (6 + 5) = 11, 10, 2\nroll back, left: 10 6 2 5\n(5) - (6) = -1, left: (5 - 6) = -1, 10, 2\nroll back, left: 10 6 2 5\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (5 / 6) = 5/6\n(20) / (5/6) = 24, left: ((10 * 2) / (5 / 6)) = 24\nreach 24! expression: ((10 * 2) / (5 / 6))"}, {"input": "10 6 2 5\n", "output": "(10) + (2) = 12, left: (10 + 2) = 12, 6, 5\n(12) - (6) = 6, left: ((10 + 2) - 6) = 6, 5\nroll back, left: (10 + 2) = 12, 6, 5\nroll back, left: 10 6 2 5\n(10) - (2) = 8, left: (10 - 2) = 8, 6, 5\nroll back, left: 10 6 2 5\n(10) * (2) = 20, left: (10 * 2) = 20, 6, 5\n(6) * (20) = 120, left: (6 * (10 * 2)) = 120, 5\n(120) / (5) = 24, left: ((6 * (10 * 2)) / 5) = 24\nreach 24! expression: ((6 * (10 * 2)) / 5)"}, {"input": "10 6 2 5\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 10, 5\nroll back, left: 10 6 2 5\n(2) - (6) = -4, left: (2 - 6) = -4, 10, 5\n(10) + (5) = 15, left: (10 + 5) = 15, (2 - 6) = -4\nroll back, left: (2 - 6) = -4, 10, 5\nroll back, left: 10 6 2 5\n(6) * (2) = 12, left: (6 * 2) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (6 * 2)) = 120, 5\n(120) / (5) = 24, left: ((10 * (6 * 2)) / 5) = 24\nreach 24! expression: ((10 * (6 * 2)) / 5)"}, {"input": "3 11 8 7\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 11, 8\n(11) + (21) = 32, left: (11 + (3 * 7)) = 32, 8\n(32) - (8) = 24, left: ((11 + (3 * 7)) - 8) = 24\nreach 24! expression: ((11 + (3 * 7)) - 8)"}, {"input": "3 11 8 7\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (8 - 3)) = 35, 11\n(35) - (11) = 24, left: ((7 * (8 - 3)) - 11) = 24\nreach 24! expression: ((7 * (8 - 3)) - 11)"}, {"input": "3 11 8 7\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 11, 8\n(11) - (8) = 3, left: (11 - 8) = 3, (3 * 7) = 21\n(21) + (3) = 24, left: ((3 * 7) + (11 - 8)) = 24\nreach 24! expression: ((3 * 7) + (11 - 8))"}, {"input": "3 11 8 7\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 3, 7\n(3) * (7) = 21, left: (3 * 7) = 21, (8 - 11) = -3\n(21) - (-3) = 24, left: ((3 * 7) - (8 - 11)) = 24\nreach 24! expression: ((3 * 7) - (8 - 11))"}, {"input": "3 11 8 7\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 3, 7\n(7) * (-3) = -21, left: (7 * (8 - 11)) = -21, 3\n(3) - (-21) = 24, left: (3 - (7 * (8 - 11))) = 24\nreach 24! expression: (3 - (7 * (8 - 11)))"}, {"input": "3 11 8 7\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 3, 11\nroll back, left: 3 11 8 7\n(8) + (7) = 15, left: (8 + 7) = 15, 3, 11\nroll back, left: 3 11 8 7\n(3) - (8) = -5, left: (3 - 8) = -5, 11, 7\nroll back, left: 3 11 8 7\n(8) - (3) = 5, left: (8 - 3) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (8 - 3)) = 35, 11\n(35) - (11) = 24, left: ((7 * (8 - 3)) - 11) = 24\nreach 24! expression: ((7 * (8 - 3)) - 11)"}, {"input": "3 11 8 7\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 8, 7\n(8) - (8) = 0, left: ((11 - 3) - 8) = 0, 7\nroll back, left: (11 - 3) = 8, 8, 7\nroll back, left: 3 11 8 7\n(3) + (11) = 14, left: (3 + 11) = 14, 8, 7\nroll back, left: 3 11 8 7\n(3) * (7) = 21, left: (3 * 7) = 21, 11, 8\n(11) - (8) = 3, left: (11 - 8) = 3, (3 * 7) = 21\n(21) + (3) = 24, left: ((3 * 7) + (11 - 8)) = 24\nreach 24! expression: ((3 * 7) + (11 - 8))"}, {"input": "3 11 8 7\n", "output": "(7) / (11) = 7/11, left: (7 / 11) = 7/11, 3, 8\nroll back, left: 3 11 8 7\n(7) - (11) = -4, left: (7 - 11) = -4, 3, 8\n(3) * (8) = 24, left: (3 * 8) = 24, (7 - 11) = -4\nroll back, left: (7 - 11) = -4, 3, 8\nroll back, left: 3 11 8 7\n(8) - (11) = -3, left: (8 - 11) = -3, 3, 7\n(3) * (7) = 21, left: (3 * 7) = 21, (8 - 11) = -3\n(21) - (-3) = 24, left: ((3 * 7) - (8 - 11)) = 24\nreach 24! expression: ((3 * 7) - (8 - 11))"}, {"input": "3 11 8 7\n", "output": "(11) + (8) = 19, left: (11 + 8) = 19, 3, 7\n(7) - (19) = -12, left: (7 - (11 + 8)) = -12, 3\nroll back, left: (11 + 8) = 19, 3, 7\n(7) + (19) = 26, left: (7 + (11 + 8)) = 26, 3\nroll back, left: (11 + 8) = 19, 3, 7\nroll back, left: 3 11 8 7\n(8) - (11) = -3, left: (8 - 11) = -3, 3, 7\n(7) * (-3) = -21, left: (7 * (8 - 11)) = -21, 3\n(3) - (-21) = 24, left: (3 - (7 * (8 - 11))) = 24\nreach 24! expression: (3 - (7 * (8 - 11)))"}, {"input": "3 11 8 7\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 11, 8\nroll back, left: 3 11 8 7\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, 11, 8\n(3/7) / (11) = 3/77, left: ((3 / 7) / 11) = 3/77, 8\nroll back, left: (3 / 7) = 3/7, 11, 8\nroll back, left: 3 11 8 7\n(3) * (7) = 21, left: (3 * 7) = 21, 11, 8\n(11) + (21) = 32, left: (11 + (3 * 7)) = 32, 8\n(32) - (8) = 24, left: ((11 + (3 * 7)) - 8) = 24\nreach 24! expression: ((11 + (3 * 7)) - 8)"}, {"input": "10 7 7 9\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 10, 7\n(7) * (2) = 14, left: (7 * (9 - 7)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (9 - 7))) = 24\nreach 24! expression: (10 + (7 * (9 - 7)))"}, {"input": "10 7 7 9\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 10, 7\n(7) * (-2) = -14, left: (7 * (7 - 9)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (7 - 9))) = 24\nreach 24! expression: (10 - (7 * (7 - 9)))"}, {"input": "10 7 7 9\n", "output": "(10) / (7) = 10/7, left: (10 / 7) = 10/7, 7, 9\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, (10 / 7) = 10/7\nroll back, left: (10 / 7) = 10/7, 7, 9\nroll back, left: 10 7 7 9\n(7) * (9) = 63, left: (7 * 9) = 63, 10, 7\nroll back, left: 10 7 7 9\n(7) - (9) = -2, left: (7 - 9) = -2, 10, 7\n(7) * (-2) = -14, left: (7 * (7 - 9)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (7 - 9))) = 24\nreach 24! expression: (10 - (7 * (7 - 9)))"}, {"input": "10 7 7 9\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 7, 9\n(7) - (3) = 4, left: (7 - (10 - 7)) = 4, 9\nroll back, left: (10 - 7) = 3, 7, 9\nroll back, left: 10 7 7 9\n(7) / (7) = 1, left: (7 / 7) = 1, 10, 9\nroll back, left: 10 7 7 9\n(9) - (7) = 2, left: (9 - 7) = 2, 10, 7\n(7) * (2) = 14, left: (7 * (9 - 7)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (9 - 7))) = 24\nreach 24! expression: (10 + (7 * (9 - 7)))"}, {"input": "10 7 7 9\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 10, 9\n(10) + (14) = 24, left: (10 + (7 + 7)) = 24, 9\nroll back, left: (7 + 7) = 14, 10, 9\nroll back, left: 10 7 7 9\n(7) / (7) = 1, left: (7 / 7) = 1, 10, 9\nroll back, left: 10 7 7 9\n(9) - (7) = 2, left: (9 - 7) = 2, 10, 7\n(7) * (2) = 14, left: (7 * (9 - 7)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (9 - 7))) = 24\nreach 24! expression: (10 + (7 * (9 - 7)))"}, {"input": "10 7 7 9\n", "output": "(10) * (7) = 70, left: (10 * 7) = 70, 7, 9\n(70) / (9) = 70/9, left: ((10 * 7) / 9) = 70/9, 7\nroll back, left: (10 * 7) = 70, 7, 9\nroll back, left: 10 7 7 9\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, 10, 7\nroll back, left: 10 7 7 9\n(9) - (7) = 2, left: (9 - 7) = 2, 10, 7\n(7) * (2) = 14, left: (7 * (9 - 7)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (9 - 7))) = 24\nreach 24! expression: (10 + (7 * (9 - 7)))"}, {"input": "10 2 4 13\n", "output": "(2) * (4) = 8, left: (2 * 4) = 8, 10, 13\n(13) - (10) = 3, left: (13 - 10) = 3, (2 * 4) = 8\n(8) * (3) = 24, left: ((2 * 4) * (13 - 10)) = 24\nreach 24! expression: ((2 * 4) * (13 - 10))"}, {"input": "10 2 4 13\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 2, 4\n(2) * (3) = 6, left: (2 * (13 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 * (13 - 10))) = 24\nreach 24! expression: (4 * (2 * (13 - 10)))"}, {"input": "10 2 4 13\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 2, 4\n(2) * (4) = 8, left: (2 * 4) = 8, (13 - 10) = 3\n(3) * (8) = 24, left: ((13 - 10) * (2 * 4)) = 24\nreach 24! expression: ((13 - 10) * (2 * 4))"}, {"input": "10 2 4 13\n", "output": "(4) + (13) = 17, left: (4 + 13) = 17, 10, 2\n(2) * (17) = 34, left: (2 * (4 + 13)) = 34, 10\n(34) - (10) = 24, left: ((2 * (4 + 13)) - 10) = 24\nreach 24! expression: ((2 * (4 + 13)) - 10)"}, {"input": "10 2 4 13\n", "output": "(2) - (13) = -11, left: (2 - 13) = -11, 10, 4\nroll back, left: 10 2 4 13\n(2) * (13) = 26, left: (2 * 13) = 26, 10, 4\nroll back, left: 10 2 4 13\n(10) + (13) = 23, left: (10 + 13) = 23, 2, 4\nroll back, left: 10 2 4 13\n(13) - (10) = 3, left: (13 - 10) = 3, 2, 4\n(2) * (4) = 8, left: (2 * 4) = 8, (13 - 10) = 3\n(3) * (8) = 24, left: ((13 - 10) * (2 * 4)) = 24\nreach 24! expression: ((13 - 10) * (2 * 4))"}, {"input": "10 2 4 13\n", "output": "(10) / (13) = 10/13, left: (10 / 13) = 10/13, 2, 4\nroll back, left: 10 2 4 13\n(10) - (13) = -3, left: (10 - 13) = -3, 2, 4\n(4) * (-3) = -12, left: (4 * (10 - 13)) = -12, 2\nroll back, left: (10 - 13) = -3, 2, 4\nroll back, left: 10 2 4 13\n(13) - (10) = 3, left: (13 - 10) = 3, 2, 4\n(2) * (3) = 6, left: (2 * (13 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 * (13 - 10))) = 24\nreach 24! expression: (4 * (2 * (13 - 10)))"}, {"input": "10 2 4 13\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 10, 13\nroll back, left: 10 2 4 13\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, 10, 13\n(10) + (1/2) = 21/2, left: (10 + (2 / 4)) = 21/2, 13\nroll back, left: (2 / 4) = 1/2, 10, 13\nroll back, left: 10 2 4 13\n(2) * (4) = 8, left: (2 * 4) = 8, 10, 13\n(13) - (10) = 3, left: (13 - 10) = 3, (2 * 4) = 8\n(8) * (3) = 24, left: ((2 * 4) * (13 - 10)) = 24\nreach 24! expression: ((2 * 4) * (13 - 10))"}, {"input": "10 2 4 13\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 4, 13\nroll back, left: 10 2 4 13\n(13) - (2) = 11, left: (13 - 2) = 11, 10, 4\nroll back, left: 10 2 4 13\n(4) * (13) = 52, left: (4 * 13) = 52, 10, 2\nroll back, left: 10 2 4 13\n(4) + (13) = 17, left: (4 + 13) = 17, 10, 2\n(2) * (17) = 34, left: (2 * (4 + 13)) = 34, 10\n(34) - (10) = 24, left: ((2 * (4 + 13)) - 10) = 24\nreach 24! expression: ((2 * (4 + 13)) - 10)"}, {"input": "10 2 4 13\n", "output": "(10) + (13) = 23, left: (10 + 13) = 23, 2, 4\nroll back, left: 10 2 4 13\n(10) * (13) = 130, left: (10 * 13) = 130, 2, 4\n(4) + (130) = 134, left: (4 + (10 * 13)) = 134, 2\nroll back, left: (10 * 13) = 130, 2, 4\nroll back, left: 10 2 4 13\n(13) - (10) = 3, left: (13 - 10) = 3, 2, 4\n(2) * (3) = 6, left: (2 * (13 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 * (13 - 10))) = 24\nreach 24! expression: (4 * (2 * (13 - 10)))"}, {"input": "8 11 12 6\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 12, 6\n(3) / (6) = 1/2, left: ((11 - 8) / 6) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((11 - 8) / 6)) = 24\nreach 24! expression: (12 / ((11 - 8) / 6))"}, {"input": "8 11 12 6\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 12, 6\n(3) / (12) = 1/4, left: ((11 - 8) / 12) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((11 - 8) / 12)) = 24\nreach 24! expression: (6 / ((11 - 8) / 12))"}, {"input": "8 11 12 6\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 12, 6\n(12) * (6) = 72, left: (12 * 6) = 72, (11 - 8) = 3\n(72) / (3) = 24, left: ((12 * 6) / (11 - 8)) = 24\nreach 24! expression: ((12 * 6) / (11 - 8))"}, {"input": "8 11 12 6\n", "output": "(12) * (6) = 72, left: (12 * 6) = 72, 8, 11\n(11) - (8) = 3, left: (11 - 8) = 3, (12 * 6) = 72\n(72) / (3) = 24, left: ((12 * 6) / (11 - 8)) = 24\nreach 24! expression: ((12 * 6) / (11 - 8))"}, {"input": "8 11 12 6\n", "output": "(11) * (6) = 66, left: (11 * 6) = 66, 8, 12\nroll back, left: 8 11 12 6\n(8) * (6) = 48, left: (8 * 6) = 48, 11, 12\n(12) + (48) = 60, left: (12 + (8 * 6)) = 60, 11\nroll back, left: (8 * 6) = 48, 11, 12\nroll back, left: 8 11 12 6\n(11) - (8) = 3, left: (11 - 8) = 3, 12, 6\n(3) / (12) = 1/4, left: ((11 - 8) / 12) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((11 - 8) / 12)) = 24\nreach 24! expression: (6 / ((11 - 8) / 12))"}, {"input": "8 11 12 6\n", "output": "(8) * (12) = 96, left: (8 * 12) = 96, 11, 6\nroll back, left: 8 11 12 6\n(12) - (8) = 4, left: (12 - 8) = 4, 11, 6\nroll back, left: 8 11 12 6\n(12) + (6) = 18, left: (12 + 6) = 18, 8, 11\nroll back, left: 8 11 12 6\n(12) * (6) = 72, left: (12 * 6) = 72, 8, 11\n(11) - (8) = 3, left: (11 - 8) = 3, (12 * 6) = 72\n(72) / (3) = 24, left: ((12 * 6) / (11 - 8)) = 24\nreach 24! expression: ((12 * 6) / (11 - 8))"}, {"input": "8 11 12 6\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 8, 12\nroll back, left: 8 11 12 6\n(11) - (6) = 5, left: (11 - 6) = 5, 8, 12\n(8) - (12) = -4, left: (8 - 12) = -4, (11 - 6) = 5\nroll back, left: (11 - 6) = 5, 8, 12\nroll back, left: 8 11 12 6\n(12) * (6) = 72, left: (12 * 6) = 72, 8, 11\n(11) - (8) = 3, left: (11 - 8) = 3, (12 * 6) = 72\n(72) / (3) = 24, left: ((12 * 6) / (11 - 8)) = 24\nreach 24! expression: ((12 * 6) / (11 - 8))"}, {"input": "11 12 9 7\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (11 - 7)) = 36, 12\n(36) - (12) = 24, left: ((9 * (11 - 7)) - 12) = 24\nreach 24! expression: ((9 * (11 - 7)) - 12)"}, {"input": "11 12 9 7\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 11, 7\n(11) + (7) = 18, left: (11 + 7) = 18, (12 / 9) = 4/3\n(4/3) * (18) = 24, left: ((12 / 9) * (11 + 7)) = 24\nreach 24! expression: ((12 / 9) * (11 + 7))"}, {"input": "11 12 9 7\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 11, 7\n(11) + (7) = 18, left: (11 + 7) = 18, (9 / 12) = 3/4\n(18) / (3/4) = 24, left: ((11 + 7) / (9 / 12)) = 24\nreach 24! expression: ((11 + 7) / (9 / 12))"}, {"input": "11 12 9 7\n", "output": "(7) / (11) = 7/11, left: (7 / 11) = 7/11, 12, 9\nroll back, left: 11 12 9 7\n(7) - (11) = -4, left: (7 - 11) = -4, 12, 9\n(9) * (-4) = -36, left: (9 * (7 - 11)) = -36, 12\nroll back, left: (7 - 11) = -4, 12, 9\nroll back, left: 11 12 9 7\n(11) - (7) = 4, left: (11 - 7) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (11 - 7)) = 36, 12\n(36) - (12) = 24, left: ((9 * (11 - 7)) - 12) = 24\nreach 24! expression: ((9 * (11 - 7)) - 12)"}, {"input": "11 12 9 7\n", "output": "(12) + (9) = 21, left: (12 + 9) = 21, 11, 7\nroll back, left: 11 12 9 7\n(12) - (9) = 3, left: (12 - 9) = 3, 11, 7\n(3) - (7) = -4, left: ((12 - 9) - 7) = -4, 11\nroll back, left: (12 - 9) = 3, 11, 7\nroll back, left: 11 12 9 7\n(9) / (12) = 3/4, left: (9 / 12) = 3/4, 11, 7\n(11) + (7) = 18, left: (11 + 7) = 18, (9 / 12) = 3/4\n(18) / (3/4) = 24, left: ((11 + 7) / (9 / 12)) = 24\nreach 24! expression: ((11 + 7) / (9 / 12))"}, {"input": "6 11 9 6\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 6, 6\n(6) + (-2) = 4, left: (6 + (9 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 + (9 - 11))) = 24\nreach 24! expression: (6 * (6 + (9 - 11)))"}, {"input": "6 11 9 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 6, 9\n(9) - (5) = 4, left: (9 - (11 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (11 - 6))) = 24\nreach 24! expression: (6 * (9 - (11 - 6)))"}, {"input": "6 11 9 6\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 9, 6\n(9) + (-5) = 4, left: (9 + (6 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 + (6 - 11))) = 24\nreach 24! expression: (6 * (9 + (6 - 11)))"}, {"input": "6 11 9 6\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 6, 11\n(15) - (11) = 4, left: ((9 + 6) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 + 6) - 11)) = 24\nreach 24! expression: (6 * ((9 + 6) - 11))"}, {"input": "6 11 9 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (11 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (11 - 6))) = 24\nreach 24! expression: (6 * (9 - (11 - 6)))"}, {"input": "6 11 9 6\n", "output": "(11) * (9) = 99, left: (11 * 9) = 99, 6, 6\n(6) / (6) = 1, left: (6 / 6) = 1, (11 * 9) = 99\n(99) * (1) = 99, left: ((11 * 9) * (6 / 6)) = 99\nroll back, left: (6 / 6) = 1, (11 * 9) = 99\nroll back, left: (11 * 9) = 99, 6, 6\nroll back, left: 6 11 9 6\n(9) - (11) = -2, left: (9 - 11) = -2, 6, 6\n(6) + (-2) = 4, left: (6 + (9 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 + (9 - 11))) = 24\nreach 24! expression: (6 * (6 + (9 - 11)))"}, {"input": "6 11 9 6\n", "output": "(9) / (6) = 3/2, left: (9 / 6) = 3/2, 6, 11\nroll back, left: 6 11 9 6\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, 6, 11\n(11) - (2/3) = 31/3, left: (11 - (6 / 9)) = 31/3, 6\nroll back, left: (6 / 9) = 2/3, 6, 11\nroll back, left: 6 11 9 6\n(9) + (6) = 15, left: (9 + 6) = 15, 6, 11\n(15) - (11) = 4, left: ((9 + 6) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 + 6) - 11)) = 24\nreach 24! expression: (6 * ((9 + 6) - 11))"}, {"input": "6 11 9 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (11 - 6)) = 4, 6\n(6) / (4) = 3/2, left: (6 / (9 - (11 - 6))) = 3/2\nroll back, left: (9 - (11 - 6)) = 4, 6\n(6) + (4) = 10, left: (6 + (9 - (11 - 6))) = 10\nroll back, left: (9 - (11 - 6)) = 4, 6\n(4) - (6) = -2, left: ((9 - (11 - 6)) - 6) = -2\nroll back, left: (9 - (11 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (11 - 6))) = 24\nreach 24! expression: (6 * (9 - (11 - 6)))"}, {"input": "6 11 9 6\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 6, 9\nroll back, left: 6 11 9 6\n(11) / (6) = 11/6, left: (11 / 6) = 11/6, 6, 9\n(6) * (11/6) = 11, left: (6 * (11 / 6)) = 11, 9\nroll back, left: (11 / 6) = 11/6, 6, 9\nroll back, left: 6 11 9 6\n(11) - (6) = 5, left: (11 - 6) = 5, 6, 9\n(9) - (5) = 4, left: (9 - (11 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (11 - 6))) = 24\nreach 24! expression: (6 * (9 - (11 - 6)))"}, {"input": "6 11 9 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (11 - 6)) = 4, 6\n(6) / (4) = 3/2, left: (6 / (9 - (11 - 6))) = 3/2\nroll back, left: (9 - (11 - 6)) = 4, 6\n(6) + (4) = 10, left: (6 + (9 - (11 - 6))) = 10\nroll back, left: (9 - (11 - 6)) = 4, 6\n(4) - (6) = -2, left: ((9 - (11 - 6)) - 6) = -2\nroll back, left: (9 - (11 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (11 - 6))) = 24\nreach 24! expression: (6 * (9 - (11 - 6)))"}, {"input": "6 11 9 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (11 - 6)) = 4, 6\n(6) / (4) = 3/2, left: (6 / (9 - (11 - 6))) = 3/2\nroll back, left: (9 - (11 - 6)) = 4, 6\n(6) + (4) = 10, left: (6 + (9 - (11 - 6))) = 10\nroll back, left: (9 - (11 - 6)) = 4, 6\n(4) - (6) = -2, left: ((9 - (11 - 6)) - 6) = -2\nroll back, left: (9 - (11 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (11 - 6))) = 24\nreach 24! expression: (6 * (9 - (11 - 6)))"}, {"input": "6 11 9 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (11 - 6)) = 4, 6\n(6) / (4) = 3/2, left: (6 / (9 - (11 - 6))) = 3/2\nroll back, left: (9 - (11 - 6)) = 4, 6\n(6) + (4) = 10, left: (6 + (9 - (11 - 6))) = 10\nroll back, left: (9 - (11 - 6)) = 4, 6\n(4) - (6) = -2, left: ((9 - (11 - 6)) - 6) = -2\nroll back, left: (9 - (11 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (11 - 6))) = 24\nreach 24! expression: (6 * (9 - (11 - 6)))"}, {"input": "13 12 2 13\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 12, 13\n(12) / (13) = 12/13, left: (12 / 13) = 12/13, (13 * 2) = 26\n(26) * (12/13) = 24, left: ((13 * 2) * (12 / 13)) = 24\nreach 24! expression: ((13 * 2) * (12 / 13))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: (2 / 13) = 2/13, 13, 12\n(12) * (2/13) = 24/13, left: (12 * (2 / 13)) = 24/13, 13\n(13) * (24/13) = 24, left: (13 * (12 * (2 / 13))) = 24\nreach 24! expression: (13 * (12 * (2 / 13)))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: (2 / 13) = 2/13, 12, 13\n(13) * (2/13) = 2, left: (13 * (2 / 13)) = 2, 12\n(12) * (2) = 24, left: (12 * (13 * (2 / 13))) = 24\nreach 24! expression: (12 * (13 * (2 / 13)))"}, {"input": "13 12 2 13\n", "output": "(12) / (13) = 12/13, left: (12 / 13) = 12/13, 2, 13\n(2) * (12/13) = 24/13, left: (2 * (12 / 13)) = 24/13, 13\n(13) * (24/13) = 24, left: (13 * (2 * (12 / 13))) = 24\nreach 24! expression: (13 * (2 * (12 / 13)))"}, {"input": "13 12 2 13\n", "output": "(2) / (13) = 2/13, left: (2 / 13) = 2/13, 13, 12\n(13) * (12) = 156, left: (13 * 12) = 156, (2 / 13) = 2/13\n(2/13) * (156) = 24, left: ((2 / 13) * (13 * 12)) = 24\nreach 24! expression: ((2 / 13) * (13 * 12))"}, {"input": "13 13 6 4\n", "output": "(4) - (6) = -2, left: (4 - 6) = -2, 13, 13\n(13) + (-2) = 11, left: (13 + (4 - 6)) = 11, 13\n(13) + (11) = 24, left: (13 + (13 + (4 - 6))) = 24\nreach 24! expression: (13 + (13 + (4 - 6)))"}, {"input": "13 13 6 4\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 13, 13\n(13) + (13) = 26, left: (13 + 13) = 26, (6 - 4) = 2\n(26) - (2) = 24, left: ((13 + 13) - (6 - 4)) = 24\nreach 24! expression: ((13 + 13) - (6 - 4))"}, {"input": "13 13 6 4\n", "output": "(13) / (6) = 13/6, left: (13 / 6) = 13/6, 13, 4\n(4) / (13/6) = 24/13, left: (4 / (13 / 6)) = 24/13, 13\n(13) * (24/13) = 24, left: (13 * (4 / (13 / 6))) = 24\nreach 24! expression: (13 * (4 / (13 / 6)))"}, {"input": "13 13 6 4\n", "output": "(13) + (6) = 19, left: (13 + 6) = 19, 13, 4\n(19) - (13) = 6, left: ((13 + 6) - 13) = 6, 4\n(4) * (6) = 24, left: (4 * ((13 + 6) - 13)) = 24\nreach 24! expression: (4 * ((13 + 6) - 13))"}, {"input": "13 13 6 4\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 13, 4\n(13) - (7) = 6, left: (13 - (13 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (13 - (13 - 6))) = 24\nreach 24! expression: (4 * (13 - (13 - 6)))"}, {"input": "11 5 2 4\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 2, 4\n(16) - (4) = 12, left: ((11 + 5) - 4) = 12, 2\n(2) * (12) = 24, left: (2 * ((11 + 5) - 4)) = 24\nreach 24! expression: (2 * ((11 + 5) - 4))"}, {"input": "11 5 2 4\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 11, 2\n(11) - (-1) = 12, left: (11 - (4 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 - (4 - 5))) = 24\nreach 24! expression: (2 * (11 - (4 - 5)))"}, {"input": "11 5 2 4\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 5, 2\n(5) - (-7) = 12, left: (5 - (4 - 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (5 - (4 - 11))) = 24\nreach 24! expression: (2 * (5 - (4 - 11)))"}, {"input": "11 5 2 4\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (5 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (5 - 4))) = 24\nreach 24! expression: (2 * (11 + (5 - 4)))"}, {"input": "11 5 2 4\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 11, 2\n(2) / (5/4) = 8/5, left: (2 / (5 / 4)) = 8/5, 11\nroll back, left: (5 / 4) = 5/4, 11, 2\nroll back, left: 11 5 2 4\n(5) * (4) = 20, left: (5 * 4) = 20, 11, 2\nroll back, left: 11 5 2 4\n(4) - (5) = -1, left: (4 - 5) = -1, 11, 2\n(11) - (-1) = 12, left: (11 - (4 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 - (4 - 5))) = 24\nreach 24! expression: (2 * (11 - (4 - 5)))"}, {"input": "11 5 2 4\n", "output": "(5) - (11) = -6, left: (5 - 11) = -6, 2, 4\n(-6) - (2) = -8, left: ((5 - 11) - 2) = -8, 4\nroll back, left: (5 - 11) = -6, 2, 4\n(4) / (2) = 2, left: (4 / 2) = 2, (5 - 11) = -6\nroll back, left: (5 - 11) = -6, 2, 4\nroll back, left: 11 5 2 4\n(11) + (5) = 16, left: (11 + 5) = 16, 2, 4\n(16) - (4) = 12, left: ((11 + 5) - 4) = 12, 2\n(2) * (12) = 24, left: (2 * ((11 + 5) - 4)) = 24\nreach 24! expression: (2 * ((11 + 5) - 4))"}, {"input": "11 5 2 4\n", "output": "(5) * (4) = 20, left: (5 * 4) = 20, 11, 2\n(20) - (11) = 9, left: ((5 * 4) - 11) = 9, 2\nroll back, left: (5 * 4) = 20, 11, 2\nroll back, left: 11 5 2 4\n(5) - (4) = 1, left: (5 - 4) = 1, 11, 2\n(2) / (1) = 2, left: (2 / (5 - 4)) = 2, 11\nroll back, left: (5 - 4) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (5 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (5 - 4))) = 24\nreach 24! expression: (2 * (11 + (5 - 4)))"}, {"input": "11 5 2 4\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 11, 2\nroll back, left: 11 5 2 4\n(5) * (4) = 20, left: (5 * 4) = 20, 11, 2\n(2) * (20) = 40, left: (2 * (5 * 4)) = 40, 11\nroll back, left: (5 * 4) = 20, 11, 2\nroll back, left: 11 5 2 4\n(5) - (4) = 1, left: (5 - 4) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (5 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (5 - 4))) = 24\nreach 24! expression: (2 * (11 + (5 - 4)))"}, {"input": "11 5 2 4\n", "output": "(4) / (11) = 4/11, left: (4 / 11) = 4/11, 5, 2\nroll back, left: 11 5 2 4\n(11) + (4) = 15, left: (11 + 4) = 15, 5, 2\n(15) - (5) = 10, left: ((11 + 4) - 5) = 10, 2\nroll back, left: (11 + 4) = 15, 5, 2\nroll back, left: 11 5 2 4\n(4) - (11) = -7, left: (4 - 11) = -7, 5, 2\n(5) - (-7) = 12, left: (5 - (4 - 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (5 - (4 - 11))) = 24\nreach 24! expression: (2 * (5 - (4 - 11)))"}, {"input": "1 2 10 3\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (1 * 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (1 * 2))) = 24\nreach 24! expression: (3 * (10 - (1 * 2)))"}, {"input": "1 2 10 3\n", "output": "(2) * (10) = 20, left: (2 * 10) = 20, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (2 * 10) = 20\n(20) + (4) = 24, left: ((2 * 10) + (1 + 3)) = 24\nreach 24! expression: ((2 * 10) + (1 + 3))"}, {"input": "1 2 10 3\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 2, 10\n(10) - (2) = 8, left: (10 - 2) = 8, (1 * 3) = 3\n(3) * (8) = 24, left: ((1 * 3) * (10 - 2)) = 24\nreach 24! expression: ((1 * 3) * (10 - 2))"}, {"input": "1 2 10 3\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (1 + 3) = 4\n(4) + (20) = 24, left: ((1 + 3) + (2 * 10)) = 24\nreach 24! expression: ((1 + 3) + (2 * 10))"}, {"input": "1 2 10 3\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (2 / 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (2 / 1))) = 24\nreach 24! expression: (3 * (10 - (2 / 1)))"}, {"input": "1 2 10 3\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 10, 3\n(3) - (10) = -7, left: (3 - 10) = -7, (1 - 2) = -1\nroll back, left: (1 - 2) = -1, 10, 3\n(-1) - (10) = -11, left: ((1 - 2) - 10) = -11, 3\nroll back, left: (1 - 2) = -1, 10, 3\nroll back, left: 1 2 10 3\n(2) / (1) = 2, left: (2 / 1) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (2 / 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (2 / 1))) = 24\nreach 24! expression: (3 * (10 - (2 / 1)))"}, {"input": "1 2 10 3\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 10, 3\n(3) - (10) = -7, left: (3 - 10) = -7, (2 - 1) = 1\nroll back, left: (2 - 1) = 1, 10, 3\nroll back, left: 1 2 10 3\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 10, 3\nroll back, left: 1 2 10 3\n(1) * (2) = 2, left: (1 * 2) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (1 * 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (1 * 2))) = 24\nreach 24! expression: (3 * (10 - (1 * 2)))"}, {"input": "1 2 10 3\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 1, 10\nroll back, left: 1 2 10 3\n(2) + (3) = 5, left: (2 + 3) = 5, 1, 10\nroll back, left: 1 2 10 3\n(2) * (10) = 20, left: (2 * 10) = 20, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (2 * 10) = 20\n(20) - (4) = 16, left: ((2 * 10) - (1 + 3)) = 16\nroll back, left: (1 + 3) = 4, (2 * 10) = 20\n(20) + (4) = 24, left: ((2 * 10) + (1 + 3)) = 24\nreach 24! expression: ((2 * 10) + (1 + 3))"}, {"input": "6 2 3 6\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 2, 6\n(18) - (6) = 12, left: ((6 * 3) - 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((6 * 3) - 6)) = 24\nreach 24! expression: (2 * ((6 * 3) - 6))"}, {"input": "6 2 3 6\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (2 + 6)) = 24\nreach 24! expression: ((6 - 3) * (2 + 6))"}, {"input": "6 2 3 6\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 2, 6\n(2) * (6) = 12, left: (2 * 6) = 12, (6 / 3) = 2\n(2) * (12) = 24, left: ((6 / 3) * (2 * 6)) = 24\nreach 24! expression: ((6 / 3) * (2 * 6))"}, {"input": "6 2 3 6\n", "output": "(2) * (6) = 12, left: (2 * 6) = 12, 6, 3\n(3) / (12) = 1/4, left: (3 / (2 * 6)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (3 / (2 * 6))) = 24\nreach 24! expression: (6 / (3 / (2 * 6)))"}, {"input": "6 2 3 6\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (2 + 3)) = 30, 6\n(30) - (6) = 24, left: ((6 * (2 + 3)) - 6) = 24\nreach 24! expression: ((6 * (2 + 3)) - 6)"}, {"input": "6 2 3 6\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 6, 6\n(6) + (5) = 11, left: (6 + (2 + 3)) = 11, 6\n(6) * (11) = 66, left: (6 * (6 + (2 + 3))) = 66\nroll back, left: (6 + (2 + 3)) = 11, 6\nroll back, left: (2 + 3) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (2 + 3)) = 30, 6\n(6) - (30) = -24, left: (6 - (6 * (2 + 3))) = -24\nroll back, left: (6 * (2 + 3)) = 30, 6\n(30) - (6) = 24, left: ((6 * (2 + 3)) - 6) = 24\nreach 24! expression: ((6 * (2 + 3)) - 6)"}, {"input": "6 2 3 6\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 2, 6\n(2) / (3) = 2/3, left: (2 / (6 - 3)) = 2/3, 6\nroll back, left: (6 - 3) = 3, 2, 6\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, (6 - 3) = 3\n(1/3) - (3) = -8/3, left: ((2 / 6) - (6 - 3)) = -8/3\nroll back, left: (2 / 6) = 1/3, (6 - 3) = 3\nroll back, left: (6 - 3) = 3, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (2 + 6)) = 24\nreach 24! expression: ((6 - 3) * (2 + 6))"}, {"input": "6 2 3 6\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 6, 3\n(6) + (3) = 9, left: (6 + 3) = 9, (6 / 2) = 3\n(9) - (3) = 6, left: ((6 + 3) - (6 / 2)) = 6\nroll back, left: (6 + 3) = 9, (6 / 2) = 3\nroll back, left: (6 / 2) = 3, 6, 3\nroll back, left: 6 2 3 6\n(2) * (6) = 12, left: (2 * 6) = 12, 6, 3\n(3) / (12) = 1/4, left: (3 / (2 * 6)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (3 / (2 * 6))) = 24\nreach 24! expression: (6 / (3 / (2 * 6)))"}, {"input": "6 2 3 6\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 2, 6\n(18) - (2) = 16, left: ((6 * 3) - 2) = 16, 6\nroll back, left: (6 * 3) = 18, 2, 6\n(18) / (2) = 9, left: ((6 * 3) / 2) = 9, 6\n(9) / (6) = 3/2, left: (((6 * 3) / 2) / 6) = 3/2\nroll back, left: ((6 * 3) / 2) = 9, 6\nroll back, left: (6 * 3) = 18, 2, 6\n(18) - (6) = 12, left: ((6 * 3) - 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((6 * 3) - 6)) = 24\nreach 24! expression: (2 * ((6 * 3) - 6))"}, {"input": "6 2 3 6\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 2, 6\n(-3) - (6) = -9, left: ((3 - 6) - 6) = -9, 2\nroll back, left: (3 - 6) = -3, 2, 6\nroll back, left: 6 2 3 6\n(6) / (3) = 2, left: (6 / 3) = 2, 2, 6\n(6) - (2) = 4, left: (6 - 2) = 4, (6 / 3) = 2\nroll back, left: (6 / 3) = 2, 2, 6\n(2) * (6) = 12, left: (2 * 6) = 12, (6 / 3) = 2\n(2) * (12) = 24, left: ((6 / 3) * (2 * 6)) = 24\nreach 24! expression: ((6 / 3) * (2 * 6))"}, {"input": "9 13 10 5\n", "output": "(10) - (13) = -3, left: (10 - 13) = -3, 9, 5\n(5) * (-3) = -15, left: (5 * (10 - 13)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (10 - 13))) = 24\nreach 24! expression: (9 - (5 * (10 - 13)))"}, {"input": "9 13 10 5\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (13 - 10)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (13 - 10))) = 24\nreach 24! expression: (9 + (5 * (13 - 10)))"}, {"input": "9 13 10 5\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 10, 5\n(10) / (5) = 2, left: (10 / 5) = 2, (9 + 13) = 22\n(22) + (2) = 24, left: ((9 + 13) + (10 / 5)) = 24\nreach 24! expression: ((9 + 13) + (10 / 5))"}, {"input": "9 13 10 5\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 9, 13\n(9) + (13) = 22, left: (9 + 13) = 22, (10 / 5) = 2\n(2) + (22) = 24, left: ((10 / 5) + (9 + 13)) = 24\nreach 24! expression: ((10 / 5) + (9 + 13))"}, {"input": "9 13 10 5\n", "output": "(9) / (5) = 9/5, left: (9 / 5) = 9/5, 13, 10\nroll back, left: 9 13 10 5\n(9) + (5) = 14, left: (9 + 5) = 14, 13, 10\n(13) + (14) = 27, left: (13 + (9 + 5)) = 27, 10\nroll back, left: (9 + 5) = 14, 13, 10\nroll back, left: 9 13 10 5\n(10) - (13) = -3, left: (10 - 13) = -3, 9, 5\n(5) * (-3) = -15, left: (5 * (10 - 13)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (10 - 13))) = 24\nreach 24! expression: (9 - (5 * (10 - 13)))"}, {"input": "9 13 10 5\n", "output": "(13) / (5) = 13/5, left: (13 / 5) = 13/5, 9, 10\nroll back, left: 9 13 10 5\n(5) / (9) = 5/9, left: (5 / 9) = 5/9, 13, 10\nroll back, left: 9 13 10 5\n(9) - (5) = 4, left: (9 - 5) = 4, 13, 10\nroll back, left: 9 13 10 5\n(13) - (10) = 3, left: (13 - 10) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (13 - 10)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (13 - 10))) = 24\nreach 24! expression: (9 + (5 * (13 - 10)))"}, {"input": "9 13 10 5\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 9, 10\n(9) / (-8) = -9/8, left: (9 / (5 - 13)) = -9/8, 10\nroll back, left: (5 - 13) = -8, 9, 10\nroll back, left: 9 13 10 5\n(9) * (5) = 45, left: (9 * 5) = 45, 13, 10\nroll back, left: 9 13 10 5\n(10) / (5) = 2, left: (10 / 5) = 2, 9, 13\n(9) + (13) = 22, left: (9 + 13) = 22, (10 / 5) = 2\n(2) + (22) = 24, left: ((10 / 5) + (9 + 13)) = 24\nreach 24! expression: ((10 / 5) + (9 + 13))"}, {"input": "9 13 10 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 13, 10\nroll back, left: 9 13 10 5\n(5) - (9) = -4, left: (5 - 9) = -4, 13, 10\n(-4) - (10) = -14, left: ((5 - 9) - 10) = -14, 13\nroll back, left: (5 - 9) = -4, 13, 10\nroll back, left: 9 13 10 5\n(9) + (13) = 22, left: (9 + 13) = 22, 10, 5\n(10) / (5) = 2, left: (10 / 5) = 2, (9 + 13) = 22\n(22) + (2) = 24, left: ((9 + 13) + (10 / 5)) = 24\nreach 24! expression: ((9 + 13) + (10 / 5))"}, {"input": "4 1 4 9\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 4, 9\n(9) + (-3) = 6, left: (9 + (1 - 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (1 - 4))) = 24\nreach 24! expression: (4 * (9 + (1 - 4)))"}, {"input": "4 1 4 9\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 4, 9\n(9) - (3) = 6, left: (9 - (4 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (4 - 1))) = 24\nreach 24! expression: (4 * (9 - (4 - 1)))"}, {"input": "4 1 4 9\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 1, 4\n(1) - (-5) = 6, left: (1 - (4 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 - (4 - 9))) = 24\nreach 24! expression: (4 * (1 - (4 - 9)))"}, {"input": "4 1 4 9\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 1, 4\n(4) * (9/4) = 9, left: (4 * (9 / 4)) = 9, 1\nroll back, left: (9 / 4) = 9/4, 1, 4\nroll back, left: 4 1 4 9\n(4) + (9) = 13, left: (4 + 9) = 13, 1, 4\nroll back, left: 4 1 4 9\n(4) - (9) = -5, left: (4 - 9) = -5, 1, 4\n(1) - (-5) = 6, left: (1 - (4 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 - (4 - 9))) = 24\nreach 24! expression: (4 * (1 - (4 - 9)))"}, {"input": "4 1 4 9\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 4, 9\n(4) * (9) = 36, left: (4 * 9) = 36, (1 - 4) = -3\nroll back, left: (1 - 4) = -3, 4, 9\n(9) - (-3) = 12, left: (9 - (1 - 4)) = 12, 4\nroll back, left: (1 - 4) = -3, 4, 9\n(9) / (-3) = -3, left: (9 / (1 - 4)) = -3, 4\nroll back, left: (1 - 4) = -3, 4, 9\n(9) + (-3) = 6, left: (9 + (1 - 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (1 - 4))) = 24\nreach 24! expression: (4 * (9 + (1 - 4)))"}, {"input": "4 1 4 9\n", "output": "(4) * (9) = 36, left: (4 * 9) = 36, 1, 4\nroll back, left: 4 1 4 9\n(4) - (9) = -5, left: (4 - 9) = -5, 1, 4\n(4) * (-5) = -20, left: (4 * (4 - 9)) = -20, 1\nroll back, left: (4 - 9) = -5, 1, 4\n(-5) - (4) = -9, left: ((4 - 9) - 4) = -9, 1\nroll back, left: (4 - 9) = -5, 1, 4\n(1) - (-5) = 6, left: (1 - (4 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 - (4 - 9))) = 24\nreach 24! expression: (4 * (1 - (4 - 9)))"}, {"input": "4 1 4 9\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 1, 4\nroll back, left: 4 1 4 9\n(4) + (9) = 13, left: (4 + 9) = 13, 1, 4\n(1) - (13) = -12, left: (1 - (4 + 9)) = -12, 4\nroll back, left: (4 + 9) = 13, 1, 4\nroll back, left: 4 1 4 9\n(4) - (9) = -5, left: (4 - 9) = -5, 1, 4\n(1) - (-5) = 6, left: (1 - (4 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 - (4 - 9))) = 24\nreach 24! expression: (4 * (1 - (4 - 9)))"}, {"input": "4 1 4 9\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 4, 9\n(4) + (3) = 7, left: (4 + (4 - 1)) = 7, 9\nroll back, left: (4 - 1) = 3, 4, 9\n(3) / (4) = 3/4, left: ((4 - 1) / 4) = 3/4, 9\nroll back, left: (4 - 1) = 3, 4, 9\n(9) / (3) = 3, left: (9 / (4 - 1)) = 3, 4\nroll back, left: (4 - 1) = 3, 4, 9\n(9) - (3) = 6, left: (9 - (4 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (4 - 1))) = 24\nreach 24! expression: (4 * (9 - (4 - 1)))"}, {"input": "1 4 4 3\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (4 / 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (4 / 1))) = 24\nreach 24! expression: (3 * (4 + (4 / 1)))"}, {"input": "1 4 4 3\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 1, 4\n(7) - (1) = 6, left: ((4 + 3) - 1) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 + 3) - 1)) = 24\nreach 24! expression: (4 * ((4 + 3) - 1))"}, {"input": "1 4 4 3\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (1 * 3) = 3\n(3) * (8) = 24, left: ((1 * 3) * (4 + 4)) = 24\nreach 24! expression: ((1 * 3) * (4 + 4))"}, {"input": "1 4 4 3\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 1, 3\n(3) * (8) = 24, left: (3 * (4 + 4)) = 24, 1\n(24) / (1) = 24, left: ((3 * (4 + 4)) / 1) = 24\nreach 24! expression: ((3 * (4 + 4)) / 1)"}, {"input": "1 4 4 3\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 1, 3\nroll back, left: 1 4 4 3\n(4) - (4) = 0, left: (4 - 4) = 0, 1, 3\n(0) / (1) = 0, left: ((4 - 4) / 1) = 0, 3\nroll back, left: (4 - 4) = 0, 1, 3\nroll back, left: 1 4 4 3\n(4) + (4) = 8, left: (4 + 4) = 8, 1, 3\n(3) * (8) = 24, left: (3 * (4 + 4)) = 24, 1\n(24) / (1) = 24, left: ((3 * (4 + 4)) / 1) = 24\nreach 24! expression: ((3 * (4 + 4)) / 1)"}, {"input": "1 4 4 3\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 1, 4\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, (4 + 3) = 7\n(1/4) / (7) = 1/28, left: ((1 / 4) / (4 + 3)) = 1/28\nroll back, left: (1 / 4) = 1/4, (4 + 3) = 7\nroll back, left: (4 + 3) = 7, 1, 4\n(1) - (7) = -6, left: (1 - (4 + 3)) = -6, 4\nroll back, left: (4 + 3) = 7, 1, 4\n(7) - (1) = 6, left: ((4 + 3) - 1) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 + 3) - 1)) = 24\nreach 24! expression: (4 * ((4 + 3) - 1))"}, {"input": "1 4 4 3\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 1, 4\nroll back, left: 1 4 4 3\n(4) - (3) = 1, left: (4 - 3) = 1, 1, 4\nroll back, left: 1 4 4 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 1, 4\nroll back, left: 1 4 4 3\n(4) + (3) = 7, left: (4 + 3) = 7, 1, 4\n(7) - (1) = 6, left: ((4 + 3) - 1) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 + 3) - 1)) = 24\nreach 24! expression: (4 * ((4 + 3) - 1))"}, {"input": "1 4 4 3\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (1 + 4) = 5\nroll back, left: (1 + 4) = 5, 4, 3\n(4) + (5) = 9, left: (4 + (1 + 4)) = 9, 3\nroll back, left: (1 + 4) = 5, 4, 3\nroll back, left: 1 4 4 3\n(4) / (1) = 4, left: (4 / 1) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (4 / 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (4 / 1))) = 24\nreach 24! expression: (3 * (4 + (4 / 1)))"}, {"input": "1 4 4 3\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (1 * 3) = 3\n(1) / (3) = 1/3, left: ((4 / 4) / (1 * 3)) = 1/3\nroll back, left: (4 / 4) = 1, (1 * 3) = 3\nroll back, left: (1 * 3) = 3, 4, 4\n(4) - (4) = 0, left: (4 - 4) = 0, (1 * 3) = 3\nroll back, left: (1 * 3) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (1 * 3) = 3\n(3) * (8) = 24, left: ((1 * 3) * (4 + 4)) = 24\nreach 24! expression: ((1 * 3) * (4 + 4))"}, {"input": "8 1 5 6\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 8, 6\n(8) + (-4) = 4, left: (8 + (1 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 + (1 - 5))) = 24\nreach 24! expression: (6 * (8 + (1 - 5)))"}, {"input": "8 1 5 6\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 8, 6\n(8) - (4) = 4, left: (8 - (5 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (5 - 1))) = 24\nreach 24! expression: (6 * (8 - (5 - 1)))"}, {"input": "8 1 5 6\n", "output": "(8) + (1) = 9, left: (8 + 1) = 9, 5, 6\n(9) - (5) = 4, left: ((8 + 1) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((8 + 1) - 5)) = 24\nreach 24! expression: (6 * ((8 + 1) - 5))"}, {"input": "8 1 5 6\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 1, 6\n(1) - (-3) = 4, left: (1 - (5 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 - (5 - 8))) = 24\nreach 24! expression: (6 * (1 - (5 - 8)))"}, {"input": "8 1 5 6\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 8, 6\n(-4) / (6) = -2/3, left: ((1 - 5) / 6) = -2/3, 8\n(-2/3) - (8) = -26/3, left: (((1 - 5) / 6) - 8) = -26/3\nroll back, left: ((1 - 5) / 6) = -2/3, 8\nroll back, left: (1 - 5) = -4, 8, 6\n(8) - (-4) = 12, left: (8 - (1 - 5)) = 12, 6\nroll back, left: (1 - 5) = -4, 8, 6\n(8) + (-4) = 4, left: (8 + (1 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 + (1 - 5))) = 24\nreach 24! expression: (6 * (8 + (1 - 5)))"}, {"input": "8 1 5 6\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 8, 6\n(8) - (5) = 3, left: (8 - (5 / 1)) = 3, 6\nroll back, left: (5 / 1) = 5, 8, 6\n(5) - (8) = -3, left: ((5 / 1) - 8) = -3, 6\nroll back, left: (5 / 1) = 5, 8, 6\nroll back, left: 8 1 5 6\n(5) - (1) = 4, left: (5 - 1) = 4, 8, 6\n(8) - (4) = 4, left: (8 - (5 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (5 - 1))) = 24\nreach 24! expression: (6 * (8 - (5 - 1)))"}, {"input": "8 1 5 6\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 1, 5\n(5) / (2) = 5/2, left: (5 / (8 - 6)) = 5/2, 1\nroll back, left: (8 - 6) = 2, 1, 5\nroll back, left: 8 1 5 6\n(8) + (5) = 13, left: (8 + 5) = 13, 1, 6\nroll back, left: 8 1 5 6\n(5) - (8) = -3, left: (5 - 8) = -3, 1, 6\n(1) - (-3) = 4, left: (1 - (5 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 - (5 - 8))) = 24\nreach 24! expression: (6 * (1 - (5 - 8)))"}, {"input": "8 1 5 6\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 8, 1\nroll back, left: 8 1 5 6\n(6) - (5) = 1, left: (6 - 5) = 1, 8, 1\nroll back, left: 8 1 5 6\n(5) - (6) = -1, left: (5 - 6) = -1, 8, 1\nroll back, left: 8 1 5 6\n(5) - (8) = -3, left: (5 - 8) = -3, 1, 6\n(1) - (-3) = 4, left: (1 - (5 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 - (5 - 8))) = 24\nreach 24! expression: (6 * (1 - (5 - 8)))"}, {"input": "8 1 5 6\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 5, 6\nroll back, left: 8 1 5 6\n(8) * (1) = 8, left: (8 * 1) = 8, 5, 6\n(5) * (6) = 30, left: (5 * 6) = 30, (8 * 1) = 8\nroll back, left: (8 * 1) = 8, 5, 6\nroll back, left: 8 1 5 6\n(8) + (1) = 9, left: (8 + 1) = 9, 5, 6\n(9) - (5) = 4, left: ((8 + 1) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((8 + 1) - 5)) = 24\nreach 24! expression: (6 * ((8 + 1) - 5))"}, {"input": "9 9 4 10\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 9, 10\n(9) + (10) = 19, left: (9 + 10) = 19, (9 - 4) = 5\n(5) + (19) = 24, left: ((9 - 4) + (9 + 10)) = 24\nreach 24! expression: ((9 - 4) + (9 + 10))"}, {"input": "9 9 4 10\n", "output": "(9) + (10) = 19, left: (9 + 10) = 19, 9, 4\n(9) + (19) = 28, left: (9 + (9 + 10)) = 28, 4\n(28) - (4) = 24, left: ((9 + (9 + 10)) - 4) = 24\nreach 24! expression: ((9 + (9 + 10)) - 4)"}, {"input": "9 9 4 10\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 9, 9\n(-6) - (9) = -15, left: ((4 - 10) - 9) = -15, 9\n(9) - (-15) = 24, left: (9 - ((4 - 10) - 9)) = 24\nreach 24! expression: (9 - ((4 - 10) - 9))"}, {"input": "9 9 4 10\n", "output": "(9) + (10) = 19, left: (9 + 10) = 19, 9, 4\n(4) - (9) = -5, left: (4 - 9) = -5, (9 + 10) = 19\n(19) - (-5) = 24, left: ((9 + 10) - (4 - 9)) = 24\nreach 24! expression: ((9 + 10) - (4 - 9))"}, {"input": "9 9 4 10\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 9, 10\n(9) + (10) = 19, left: (9 + 10) = 19, (4 - 9) = -5\n(19) - (-5) = 24, left: ((9 + 10) - (4 - 9)) = 24\nreach 24! expression: ((9 + 10) - (4 - 9))"}, {"input": "9 9 4 10\n", "output": "(9) + (4) = 13, left: (9 + 4) = 13, 9, 10\n(9) - (10) = -1, left: (9 - 10) = -1, (9 + 4) = 13\nroll back, left: (9 + 4) = 13, 9, 10\nroll back, left: 9 9 4 10\n(4) - (9) = -5, left: (4 - 9) = -5, 9, 10\n(10) - (9) = 1, left: (10 - 9) = 1, (4 - 9) = -5\nroll back, left: (4 - 9) = -5, 9, 10\n(9) + (10) = 19, left: (9 + 10) = 19, (4 - 9) = -5\n(19) - (-5) = 24, left: ((9 + 10) - (4 - 9)) = 24\nreach 24! expression: ((9 + 10) - (4 - 9))"}, {"input": "9 9 4 10\n", "output": "(9) / (10) = 9/10, left: (9 / 10) = 9/10, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (9 / 10) = 9/10\nroll back, left: (9 / 10) = 9/10, 9, 4\nroll back, left: 9 9 4 10\n(10) - (9) = 1, left: (10 - 9) = 1, 9, 4\nroll back, left: 9 9 4 10\n(9) + (10) = 19, left: (9 + 10) = 19, 9, 4\n(4) - (9) = -5, left: (4 - 9) = -5, (9 + 10) = 19\n(19) - (-5) = 24, left: ((9 + 10) - (4 - 9)) = 24\nreach 24! expression: ((9 + 10) - (4 - 9))"}, {"input": "5 5 8 10\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 5, 8\n(5) - (2) = 3, left: (5 - (10 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (10 / 5))) = 24\nreach 24! expression: (8 * (5 - (10 / 5)))"}, {"input": "5 5 8 10\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 5, 10\n(5) + (10) = 15, left: (5 + 10) = 15, (5 / 8) = 5/8\n(15) / (5/8) = 24, left: ((5 + 10) / (5 / 8)) = 24\nreach 24! expression: ((5 + 10) / (5 / 8))"}, {"input": "5 5 8 10\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 5, 10\n(5) + (10) = 15, left: (5 + 10) = 15, (8 / 5) = 8/5\n(8/5) * (15) = 24, left: ((8 / 5) * (5 + 10)) = 24\nreach 24! expression: ((8 / 5) * (5 + 10))"}, {"input": "5 5 8 10\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 8, 10\nroll back, left: 5 5 8 10\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 10\nroll back, left: 5 5 8 10\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 10\nroll back, left: 5 5 8 10\n(8) / (5) = 8/5, left: (8 / 5) = 8/5, 5, 10\n(5) + (10) = 15, left: (5 + 10) = 15, (8 / 5) = 8/5\n(8/5) * (15) = 24, left: ((8 / 5) * (5 + 10)) = 24\nreach 24! expression: ((8 / 5) * (5 + 10))"}, {"input": "5 5 8 10\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 5, 10\nroll back, left: 5 5 8 10\n(5) + (8) = 13, left: (5 + 8) = 13, 5, 10\n(5) / (13) = 5/13, left: (5 / (5 + 8)) = 5/13, 10\nroll back, left: (5 + 8) = 13, 5, 10\nroll back, left: 5 5 8 10\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 5, 10\n(5) + (10) = 15, left: (5 + 10) = 15, (5 / 8) = 5/8\n(15) / (5/8) = 24, left: ((5 + 10) / (5 / 8)) = 24\nreach 24! expression: ((5 + 10) / (5 / 8))"}, {"input": "5 5 8 10\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 5, 8\n(8) / (2) = 4, left: (8 / (10 / 5)) = 4, 5\nroll back, left: (10 / 5) = 2, 5, 8\n(5) * (8) = 40, left: (5 * 8) = 40, (10 / 5) = 2\nroll back, left: (10 / 5) = 2, 5, 8\n(5) + (8) = 13, left: (5 + 8) = 13, (10 / 5) = 2\nroll back, left: (10 / 5) = 2, 5, 8\n(5) - (2) = 3, left: (5 - (10 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (10 / 5))) = 24\nreach 24! expression: (8 * (5 - (10 / 5)))"}, {"input": "13 10 11 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (11 - 10) = 1\n(1) * (24) = 24, left: ((11 - 10) * (13 + 11)) = 24\nreach 24! expression: ((11 - 10) * (13 + 11))"}, {"input": "13 10 11 11\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 10, 11\n(11) - (10) = 1, left: (11 - 10) = 1, (13 + 11) = 24\n(24) * (1) = 24, left: ((13 + 11) * (11 - 10)) = 24\nreach 24! expression: ((13 + 11) * (11 - 10))"}, {"input": "13 10 11 11\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 13, 10\n(10) + (1) = 11, left: (10 + (11 / 11)) = 11, 13\n(13) + (11) = 24, left: (13 + (10 + (11 / 11))) = 24\nreach 24! expression: (13 + (10 + (11 / 11)))"}, {"input": "13 10 11 11\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 13, 11\n(11) * (-1) = -11, left: (11 * (10 - 11)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 * (10 - 11))) = 24\nreach 24! expression: (13 - (11 * (10 - 11)))"}, {"input": "13 10 11 11\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 10, 11\n(11) - (10) = 1, left: (11 - 10) = 1, (13 + 11) = 24\n(24) / (1) = 24, left: ((13 + 11) / (11 - 10)) = 24\nreach 24! expression: ((13 + 11) / (11 - 10))"}, {"input": "13 10 11 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (11 - 10) = 1\n(1) * (24) = 24, left: ((11 - 10) * (13 + 11)) = 24\nreach 24! expression: ((11 - 10) * (13 + 11))"}, {"input": "13 10 11 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (11 - 10) = 1\n(1) * (24) = 24, left: ((11 - 10) * (13 + 11)) = 24\nreach 24! expression: ((11 - 10) * (13 + 11))"}, {"input": "13 10 11 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (11 - 10) = 1\n(1) * (24) = 24, left: ((11 - 10) * (13 + 11)) = 24\nreach 24! expression: ((11 - 10) * (13 + 11))"}, {"input": "13 10 11 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (11 - 10) = 1\n(1) * (24) = 24, left: ((11 - 10) * (13 + 11)) = 24\nreach 24! expression: ((11 - 10) * (13 + 11))"}, {"input": "10 7 12 4\n", "output": "(10) + (4) = 14, left: (10 + 4) = 14, 7, 12\n(12) * (14) = 168, left: (12 * (10 + 4)) = 168, 7\n(168) / (7) = 24, left: ((12 * (10 + 4)) / 7) = 24\nreach 24! expression: ((12 * (10 + 4)) / 7)"}, {"input": "10 7 12 4\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 12, 4\n(4) * (-3) = -12, left: (4 * (7 - 10)) = -12, 12\n(12) - (-12) = 24, left: (12 - (4 * (7 - 10))) = 24\nreach 24! expression: (12 - (4 * (7 - 10)))"}, {"input": "10 7 12 4\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 10, 7\n(7) - (10) = -3, left: (7 - 10) = -3, (4 - 12) = -8\n(-8) * (-3) = 24, left: ((4 - 12) * (7 - 10)) = 24\nreach 24! expression: ((4 - 12) * (7 - 10))"}, {"input": "10 7 12 4\n", "output": "(12) / (7) = 12/7, left: (12 / 7) = 12/7, 10, 4\n(10) + (4) = 14, left: (10 + 4) = 14, (12 / 7) = 12/7\n(12/7) * (14) = 24, left: ((12 / 7) * (10 + 4)) = 24\nreach 24! expression: ((12 / 7) * (10 + 4))"}, {"input": "10 7 12 4\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 10, 12\nroll back, left: 10 7 12 4\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, 10, 12\n(12) / (4/7) = 21, left: (12 / (4 / 7)) = 21, 10\nroll back, left: (4 / 7) = 4/7, 10, 12\nroll back, left: 10 7 12 4\n(7) - (10) = -3, left: (7 - 10) = -3, 12, 4\n(4) * (-3) = -12, left: (4 * (7 - 10)) = -12, 12\n(12) - (-12) = 24, left: (12 - (4 * (7 - 10))) = 24\nreach 24! expression: (12 - (4 * (7 - 10)))"}, {"input": "10 7 12 4\n", "output": "(10) / (4) = 5/2, left: (10 / 4) = 5/2, 7, 12\nroll back, left: 10 7 12 4\n(4) - (10) = -6, left: (4 - 10) = -6, 7, 12\n(7) - (12) = -5, left: (7 - 12) = -5, (4 - 10) = -6\nroll back, left: (4 - 10) = -6, 7, 12\nroll back, left: 10 7 12 4\n(10) + (4) = 14, left: (10 + 4) = 14, 7, 12\n(12) * (14) = 168, left: (12 * (10 + 4)) = 168, 7\n(168) / (7) = 24, left: ((12 * (10 + 4)) / 7) = 24\nreach 24! expression: ((12 * (10 + 4)) / 7)"}, {"input": "10 2 12 13\n", "output": "(10) + (12) = 22, left: (10 + 12) = 22, 2, 13\n(22) / (2) = 11, left: ((10 + 12) / 2) = 11, 13\n(13) + (11) = 24, left: (13 + ((10 + 12) / 2)) = 24\nreach 24! expression: (13 + ((10 + 12) / 2))"}, {"input": "10 2 12 13\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 10, 12\n(12) - (26) = -14, left: (12 - (2 * 13)) = -14, 10\n(10) - (-14) = 24, left: (10 - (12 - (2 * 13))) = 24\nreach 24! expression: (10 - (12 - (2 * 13)))"}, {"input": "10 2 12 13\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 10, 12\n(12) - (10) = 2, left: (12 - 10) = 2, (2 * 13) = 26\n(26) - (2) = 24, left: ((2 * 13) - (12 - 10)) = 24\nreach 24! expression: ((2 * 13) - (12 - 10))"}, {"input": "10 2 12 13\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (10 - 12) = -2\n(-2) + (26) = 24, left: ((10 - 12) + (2 * 13)) = 24\nreach 24! expression: ((10 - 12) + (2 * 13))"}, {"input": "7 5 11 5\n", "output": "(11) / (5) = 11/5, left: (11 / 5) = 11/5, 7, 5\n(7) - (11/5) = 24/5, left: (7 - (11 / 5)) = 24/5, 5\n(5) * (24/5) = 24, left: (5 * (7 - (11 / 5))) = 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "7 5 11 5\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 7, 5\n(7) / (6) = 7/6, left: (7 / (11 - 5)) = 7/6, 5\nroll back, left: (11 - 5) = 6, 7, 5\nroll back, left: 7 5 11 5\n(5) - (11) = -6, left: (5 - 11) = -6, 7, 5\nroll back, left: 7 5 11 5\n(11) / (5) = 11/5, left: (11 / 5) = 11/5, 7, 5\n(7) - (11/5) = 24/5, left: (7 - (11 / 5)) = 24/5, 5\n(5) * (24/5) = 24, left: (5 * (7 - (11 / 5))) = 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "7 5 11 5\n", "output": "(7) * (11) = 77, left: (7 * 11) = 77, 5, 5\n(5) - (5) = 0, left: (5 - 5) = 0, (7 * 11) = 77\nroll back, left: (7 * 11) = 77, 5, 5\nroll back, left: 7 5 11 5\n(5) - (5) = 0, left: (5 - 5) = 0, 7, 11\nroll back, left: 7 5 11 5\n(11) / (5) = 11/5, left: (11 / 5) = 11/5, 7, 5\n(7) - (11/5) = 24/5, left: (7 - (11 / 5)) = 24/5, 5\n(5) * (24/5) = 24, left: (5 * (7 - (11 / 5))) = 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "7 5 11 5\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 11, 5\n(2) / (5) = 2/5, left: ((7 - 5) / 5) = 2/5, 11\nroll back, left: (7 - 5) = 2, 11, 5\nroll back, left: 7 5 11 5\n(7) + (5) = 12, left: (7 + 5) = 12, 11, 5\nroll back, left: 7 5 11 5\n(11) / (5) = 11/5, left: (11 / 5) = 11/5, 7, 5\n(7) - (11/5) = 24/5, left: (7 - (11 / 5)) = 24/5, 5\n(5) * (24/5) = 24, left: (5 * (7 - (11 / 5))) = 24\nreach 24! expression: (5 * (7 - (11 / 5)))"}, {"input": "8 5 13 11\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 8, 11\n(11) + (-8) = 3, left: (11 + (5 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (11 + (5 - 13))) = 24\nreach 24! expression: (8 * (11 + (5 - 13)))"}, {"input": "8 5 13 11\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (13 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (13 - 11))) = 24\nreach 24! expression: (8 * (5 - (13 - 11)))"}, {"input": "8 5 13 11\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 5, 13\n(5) - (13) = -8, left: (5 - 13) = -8, (8 - 11) = -3\n(-3) * (-8) = 24, left: ((8 - 11) * (5 - 13)) = 24\nreach 24! expression: ((8 - 11) * (5 - 13))"}, {"input": "8 5 13 11\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (13 - 5)) = 24\nreach 24! expression: ((11 - 8) * (13 - 5))"}, {"input": "8 5 13 11\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 8, 5\n(5) + (-2) = 3, left: (5 + (11 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 + (11 - 13))) = 24\nreach 24! expression: (8 * (5 + (11 - 13)))"}, {"input": "8 5 13 11\n", "output": "(8) * (11) = 88, left: (8 * 11) = 88, 5, 13\n(5) - (88) = -83, left: (5 - (8 * 11)) = -83, 13\nroll back, left: (8 * 11) = 88, 5, 13\nroll back, left: 8 5 13 11\n(8) / (11) = 8/11, left: (8 / 11) = 8/11, 5, 13\nroll back, left: 8 5 13 11\n(11) - (8) = 3, left: (11 - 8) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (13 - 5)) = 24\nreach 24! expression: ((11 - 8) * (13 - 5))"}, {"input": "8 5 13 11\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (13 - 11)) = 3, 8\n(3) - (8) = -5, left: ((5 - (13 - 11)) - 8) = -5\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) / (3) = 8/3, left: (8 / (5 - (13 - 11))) = 8/3\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) + (3) = 11, left: (8 + (5 - (13 - 11))) = 11\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (13 - 11))) = 24\nreach 24! expression: (8 * (5 - (13 - 11)))"}, {"input": "8 5 13 11\n", "output": "(8) / (13) = 8/13, left: (8 / 13) = 8/13, 5, 11\nroll back, left: 8 5 13 11\n(8) + (13) = 21, left: (8 + 13) = 21, 5, 11\nroll back, left: 8 5 13 11\n(8) * (5) = 40, left: (8 * 5) = 40, 13, 11\nroll back, left: 8 5 13 11\n(5) - (13) = -8, left: (5 - 13) = -8, 8, 11\n(11) + (-8) = 3, left: (11 + (5 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (11 + (5 - 13))) = 24\nreach 24! expression: (8 * (11 + (5 - 13)))"}, {"input": "8 5 13 11\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (13 - 11)) = 3, 8\n(3) - (8) = -5, left: ((5 - (13 - 11)) - 8) = -5\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) / (3) = 8/3, left: (8 / (5 - (13 - 11))) = 8/3\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) + (3) = 11, left: (8 + (5 - (13 - 11))) = 11\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (13 - 11))) = 24\nreach 24! expression: (8 * (5 - (13 - 11)))"}, {"input": "8 5 13 11\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (13 - 11)) = 3, 8\n(3) - (8) = -5, left: ((5 - (13 - 11)) - 8) = -5\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) / (3) = 8/3, left: (8 / (5 - (13 - 11))) = 8/3\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) + (3) = 11, left: (8 + (5 - (13 - 11))) = 11\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (13 - 11))) = 24\nreach 24! expression: (8 * (5 - (13 - 11)))"}, {"input": "8 5 13 11\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (13 - 11)) = 3, 8\n(3) - (8) = -5, left: ((5 - (13 - 11)) - 8) = -5\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) / (3) = 8/3, left: (8 / (5 - (13 - 11))) = 8/3\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) + (3) = 11, left: (8 + (5 - (13 - 11))) = 11\nroll back, left: (5 - (13 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (13 - 11))) = 24\nreach 24! expression: (8 * (5 - (13 - 11)))"}, {"input": "7 13 7 3\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 13, 7\n(13) + (4) = 17, left: (13 + (7 - 3)) = 17, 7\n(7) + (17) = 24, left: (7 + (13 + (7 - 3))) = 24\nreach 24! expression: (7 + (13 + (7 - 3)))"}, {"input": "7 13 7 3\n", "output": "(13) - (3) = 10, left: (13 - 3) = 10, 7, 7\n(7) + (7) = 14, left: (7 + 7) = 14, (13 - 3) = 10\n(10) + (14) = 24, left: ((13 - 3) + (7 + 7)) = 24\nreach 24! expression: ((13 - 3) + (7 + 7))"}, {"input": "7 13 7 3\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 7, 7\n(7) - (-10) = 17, left: (7 - (3 - 13)) = 17, 7\n(7) + (17) = 24, left: (7 + (7 - (3 - 13))) = 24\nreach 24! expression: (7 + (7 - (3 - 13)))"}, {"input": "7 13 7 3\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 7, 7\n(-10) - (7) = -17, left: ((3 - 13) - 7) = -17, 7\n(7) - (-17) = 24, left: (7 - ((3 - 13) - 7)) = 24\nreach 24! expression: (7 - ((3 - 13) - 7))"}, {"input": "7 13 7 3\n", "output": "(13) * (3) = 39, left: (13 * 3) = 39, 7, 7\n(7) + (7) = 14, left: (7 + 7) = 14, (13 * 3) = 39\nroll back, left: (13 * 3) = 39, 7, 7\n(39) / (7) = 39/7, left: ((13 * 3) / 7) = 39/7, 7\nroll back, left: (13 * 3) = 39, 7, 7\nroll back, left: 7 13 7 3\n(3) - (13) = -10, left: (3 - 13) = -10, 7, 7\n(7) - (-10) = 17, left: (7 - (3 - 13)) = 17, 7\n(7) + (17) = 24, left: (7 + (7 - (3 - 13))) = 24\nreach 24! expression: (7 + (7 - (3 - 13)))"}, {"input": "7 13 7 3\n", "output": "(7) + (3) = 10, left: (7 + 3) = 10, 13, 7\n(13) - (10) = 3, left: (13 - (7 + 3)) = 3, 7\n(7) + (3) = 10, left: (7 + (13 - (7 + 3))) = 10\nroll back, left: (13 - (7 + 3)) = 3, 7\nroll back, left: (7 + 3) = 10, 13, 7\nroll back, left: 7 13 7 3\n(7) - (3) = 4, left: (7 - 3) = 4, 13, 7\n(13) + (4) = 17, left: (13 + (7 - 3)) = 17, 7\n(7) + (17) = 24, left: (7 + (13 + (7 - 3))) = 24\nreach 24! expression: (7 + (13 + (7 - 3)))"}, {"input": "1 10 4 5\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 1, 4\n(1) + (5) = 6, left: (1 + (10 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (10 - 5))) = 24\nreach 24! expression: (4 * (1 + (10 - 5)))"}, {"input": "1 10 4 5\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 10, 4\n(10) + (-4) = 6, left: (10 + (1 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 + (1 - 5))) = 24\nreach 24! expression: (4 * (10 + (1 - 5)))"}, {"input": "1 10 4 5\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 1, 5\n(5) - (1) = 4, left: (5 - 1) = 4, (10 - 4) = 6\n(6) * (4) = 24, left: ((10 - 4) * (5 - 1)) = 24\nreach 24! expression: ((10 - 4) * (5 - 1))"}, {"input": "1 10 4 5\n", "output": "(1) + (10) = 11, left: (1 + 10) = 11, 4, 5\n(11) - (5) = 6, left: ((1 + 10) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 + 10) - 5)) = 24\nreach 24! expression: (4 * ((1 + 10) - 5))"}, {"input": "1 10 4 5\n", "output": "(1) + (10) = 11, left: (1 + 10) = 11, 4, 5\n(4) * (5) = 20, left: (4 * 5) = 20, (1 + 10) = 11\nroll back, left: (1 + 10) = 11, 4, 5\n(4) * (11) = 44, left: (4 * (1 + 10)) = 44, 5\nroll back, left: (1 + 10) = 11, 4, 5\n(11) - (4) = 7, left: ((1 + 10) - 4) = 7, 5\nroll back, left: (1 + 10) = 11, 4, 5\n(11) - (5) = 6, left: ((1 + 10) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 + 10) - 5)) = 24\nreach 24! expression: (4 * ((1 + 10) - 5))"}, {"input": "1 10 4 5\n", "output": "(10) + (5) = 15, left: (10 + 5) = 15, 1, 4\n(1) / (15) = 1/15, left: (1 / (10 + 5)) = 1/15, 4\nroll back, left: (10 + 5) = 15, 1, 4\nroll back, left: 1 10 4 5\n(10) - (5) = 5, left: (10 - 5) = 5, 1, 4\n(1) * (5) = 5, left: (1 * (10 - 5)) = 5, 4\nroll back, left: (10 - 5) = 5, 1, 4\n(1) + (5) = 6, left: (1 + (10 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (10 - 5))) = 24\nreach 24! expression: (4 * (1 + (10 - 5)))"}, {"input": "1 10 4 5\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 10, 4\n(4) - (10) = -6, left: (4 - 10) = -6, (5 / 1) = 5\n(-6) - (5) = -11, left: ((4 - 10) - (5 / 1)) = -11\nroll back, left: (4 - 10) = -6, (5 / 1) = 5\nroll back, left: (5 / 1) = 5, 10, 4\nroll back, left: 1 10 4 5\n(1) - (5) = -4, left: (1 - 5) = -4, 10, 4\n(10) + (-4) = 6, left: (10 + (1 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 + (1 - 5))) = 24\nreach 24! expression: (4 * (10 + (1 - 5)))"}, {"input": "1 10 4 5\n", "output": "(1) + (10) = 11, left: (1 + 10) = 11, 4, 5\n(11) - (5) = 6, left: ((1 + 10) - 5) = 6, 4\n(6) / (4) = 3/2, left: (((1 + 10) - 5) / 4) = 3/2\nroll back, left: ((1 + 10) - 5) = 6, 4\n(4) / (6) = 2/3, left: (4 / ((1 + 10) - 5)) = 2/3\nroll back, left: ((1 + 10) - 5) = 6, 4\n(4) - (6) = -2, left: (4 - ((1 + 10) - 5)) = -2\nroll back, left: ((1 + 10) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 + 10) - 5)) = 24\nreach 24! expression: (4 * ((1 + 10) - 5))"}, {"input": "6 11 13 9\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 6, 9\n(9) * (-2) = -18, left: (9 * (11 - 13)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (11 - 13))) = 24\nreach 24! expression: (6 - (9 * (11 - 13)))"}, {"input": "6 11 13 9\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (13 - 11)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (13 - 11))) = 24\nreach 24! expression: (6 + (9 * (13 - 11)))"}, {"input": "6 11 13 9\n", "output": "(6) + (11) = 17, left: (6 + 11) = 17, 13, 9\nroll back, left: 6 11 13 9\n(11) / (6) = 11/6, left: (11 / 6) = 11/6, 13, 9\nroll back, left: 6 11 13 9\n(11) * (13) = 143, left: (11 * 13) = 143, 6, 9\nroll back, left: 6 11 13 9\n(11) - (13) = -2, left: (11 - 13) = -2, 6, 9\n(9) * (-2) = -18, left: (9 * (11 - 13)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (11 - 13))) = 24\nreach 24! expression: (6 - (9 * (11 - 13)))"}, {"input": "6 11 13 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 6, 13\n(13) - (6) = 7, left: (13 - 6) = 7, (11 - 9) = 2\nroll back, left: (11 - 9) = 2, 6, 13\nroll back, left: 6 11 13 9\n(11) / (13) = 11/13, left: (11 / 13) = 11/13, 6, 9\nroll back, left: 6 11 13 9\n(11) - (13) = -2, left: (11 - 13) = -2, 6, 9\n(9) * (-2) = -18, left: (9 * (11 - 13)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (11 - 13))) = 24\nreach 24! expression: (6 - (9 * (11 - 13)))"}, {"input": "6 6 12 11\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 12, 11\n(11) + (1) = 12, left: (11 + (6 / 6)) = 12, 12\n(12) + (12) = 24, left: (12 + (11 + (6 / 6))) = 24\nreach 24! expression: (12 + (11 + (6 / 6)))"}, {"input": "6 6 12 11\n", "output": "(12) + (11) = 23, left: (12 + 11) = 23, 6, 6\n(6) / (6) = 1, left: (6 / 6) = 1, (12 + 11) = 23\n(23) + (1) = 24, left: ((12 + 11) + (6 / 6)) = 24\nreach 24! expression: ((12 + 11) + (6 / 6))"}, {"input": "6 6 12 11\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 12, 11\n(12) + (11) = 23, left: (12 + 11) = 23, (6 / 6) = 1\n(1) + (23) = 24, left: ((6 / 6) + (12 + 11)) = 24\nreach 24! expression: ((6 / 6) + (12 + 11))"}, {"input": "6 6 12 11\n", "output": "(11) / (6) = 11/6, left: (11 / 6) = 11/6, 6, 12\nroll back, left: 6 6 12 11\n(6) - (11) = -5, left: (6 - 11) = -5, 6, 12\n(-5) / (6) = -5/6, left: ((6 - 11) / 6) = -5/6, 12\nroll back, left: (6 - 11) = -5, 6, 12\nroll back, left: 6 6 12 11\n(6) / (6) = 1, left: (6 / 6) = 1, 12, 11\n(12) + (11) = 23, left: (12 + 11) = 23, (6 / 6) = 1\n(1) + (23) = 24, left: ((6 / 6) + (12 + 11)) = 24\nreach 24! expression: ((6 / 6) + (12 + 11))"}, {"input": "6 6 12 11\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 6, 12\n(6) - (12) = -6, left: (6 - 12) = -6, (11 - 6) = 5\nroll back, left: (11 - 6) = 5, 6, 12\nroll back, left: 6 6 12 11\n(6) / (11) = 6/11, left: (6 / 11) = 6/11, 6, 12\nroll back, left: 6 6 12 11\n(12) + (11) = 23, left: (12 + 11) = 23, 6, 6\n(6) / (6) = 1, left: (6 / 6) = 1, (12 + 11) = 23\n(23) + (1) = 24, left: ((12 + 11) + (6 / 6)) = 24\nreach 24! expression: ((12 + 11) + (6 / 6))"}, {"input": "6 6 12 11\n", "output": "(6) * (11) = 66, left: (6 * 11) = 66, 6, 12\n(66) - (6) = 60, left: ((6 * 11) - 6) = 60, 12\nroll back, left: (6 * 11) = 66, 6, 12\nroll back, left: 6 6 12 11\n(6) / (11) = 6/11, left: (6 / 11) = 6/11, 6, 12\nroll back, left: 6 6 12 11\n(6) / (6) = 1, left: (6 / 6) = 1, 12, 11\n(11) + (1) = 12, left: (11 + (6 / 6)) = 12, 12\n(12) + (12) = 24, left: (12 + (11 + (6 / 6))) = 24\nreach 24! expression: (12 + (11 + (6 / 6)))"}, {"input": "8 10 12 4\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 8, 12\n(8) + (-6) = 2, left: (8 + (4 - 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (8 + (4 - 10))) = 24\nreach 24! expression: (12 * (8 + (4 - 10)))"}, {"input": "8 10 12 4\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 10, 4\n(4) - (10) = -6, left: (4 - 10) = -6, (8 - 12) = -4\n(-4) * (-6) = 24, left: ((8 - 12) * (4 - 10)) = 24\nreach 24! expression: ((8 - 12) * (4 - 10))"}, {"input": "8 10 12 4\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 8, 12\n(12) - (8) = 4, left: (12 - 8) = 4, (10 - 4) = 6\n(6) * (4) = 24, left: ((10 - 4) * (12 - 8)) = 24\nreach 24! expression: ((10 - 4) * (12 - 8))"}, {"input": "8 10 12 4\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 12, 4\n(4) / (2) = 2, left: (4 / (10 - 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (4 / (10 - 8))) = 24\nreach 24! expression: (12 * (4 / (10 - 8)))"}, {"input": "8 10 12 4\n", "output": "(8) + (12) = 20, left: (8 + 12) = 20, 10, 4\n(20) / (10) = 2, left: ((8 + 12) / 10) = 2, 4\n(4) - (2) = 2, left: (4 - ((8 + 12) / 10)) = 2\nroll back, left: ((8 + 12) / 10) = 2, 4\nroll back, left: (8 + 12) = 20, 10, 4\nroll back, left: 8 10 12 4\n(8) - (12) = -4, left: (8 - 12) = -4, 10, 4\n(4) - (10) = -6, left: (4 - 10) = -6, (8 - 12) = -4\n(-4) * (-6) = 24, left: ((8 - 12) * (4 - 10)) = 24\nreach 24! expression: ((8 - 12) * (4 - 10))"}, {"input": "2 13 8 13\n", "output": "(13) / (13) = 1, left: (13 / 13) = 1, 2, 8\n(2) + (1) = 3, left: (2 + (13 / 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (13 / 13))) = 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "2 13 8 13\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 13, 13\nroll back, left: 2 13 8 13\n(13) / (8) = 13/8, left: (13 / 8) = 13/8, 2, 13\n(13) + (13/8) = 117/8, left: (13 + (13 / 8)) = 117/8, 2\nroll back, left: (13 / 8) = 13/8, 2, 13\nroll back, left: 2 13 8 13\n(13) / (13) = 1, left: (13 / 13) = 1, 2, 8\n(2) + (1) = 3, left: (2 + (13 / 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (13 / 13))) = 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "2 13 8 13\n", "output": "(8) + (13) = 21, left: (8 + 13) = 21, 2, 13\n(21) - (13) = 8, left: ((8 + 13) - 13) = 8, 2\nroll back, left: (8 + 13) = 21, 2, 13\nroll back, left: 2 13 8 13\n(13) * (13) = 169, left: (13 * 13) = 169, 2, 8\nroll back, left: 2 13 8 13\n(13) / (13) = 1, left: (13 / 13) = 1, 2, 8\n(2) + (1) = 3, left: (2 + (13 / 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (13 / 13))) = 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "2 13 8 13\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 2, 13\n(2) + (13) = 15, left: (2 + 13) = 15, (8 - 13) = -5\nroll back, left: (8 - 13) = -5, 2, 13\nroll back, left: 2 13 8 13\n(13) - (8) = 5, left: (13 - 8) = 5, 2, 13\nroll back, left: 2 13 8 13\n(13) / (13) = 1, left: (13 / 13) = 1, 2, 8\n(2) + (1) = 3, left: (2 + (13 / 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (13 / 13))) = 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "2 13 8 13\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 8, 13\nroll back, left: 2 13 8 13\n(13) * (8) = 104, left: (13 * 8) = 104, 2, 13\nroll back, left: 2 13 8 13\n(13) / (8) = 13/8, left: (13 / 8) = 13/8, 2, 13\nroll back, left: 2 13 8 13\n(13) / (13) = 1, left: (13 / 13) = 1, 2, 8\n(2) + (1) = 3, left: (2 + (13 / 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (13 / 13))) = 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "2 13 8 13\n", "output": "(13) - (13) = 0, left: (13 - 13) = 0, 2, 8\nroll back, left: 2 13 8 13\n(13) + (13) = 26, left: (13 + 13) = 26, 2, 8\n(26) / (8) = 13/4, left: ((13 + 13) / 8) = 13/4, 2\nroll back, left: (13 + 13) = 26, 2, 8\nroll back, left: 2 13 8 13\n(13) / (13) = 1, left: (13 / 13) = 1, 2, 8\n(2) + (1) = 3, left: (2 + (13 / 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (13 / 13))) = 24\nreach 24! expression: (8 * (2 + (13 / 13)))"}, {"input": "8 13 10 12\n", "output": "(10) * (12) = 120, left: (10 * 12) = 120, 8, 13\n(13) - (8) = 5, left: (13 - 8) = 5, (10 * 12) = 120\n(120) / (5) = 24, left: ((10 * 12) / (13 - 8)) = 24\nreach 24! expression: ((10 * 12) / (13 - 8))"}, {"input": "8 13 10 12\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 10, 12\n(10) / (5) = 2, left: (10 / (13 - 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 / (13 - 8))) = 24\nreach 24! expression: (12 * (10 / (13 - 8)))"}, {"input": "8 13 10 12\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 10, 12\n(5) / (10) = 1/2, left: ((13 - 8) / 10) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((13 - 8) / 10)) = 24\nreach 24! expression: (12 / ((13 - 8) / 10))"}, {"input": "6 6 5 1\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 6, 5\n(5) * (6) = 30, left: (5 * (6 / 1)) = 30, 6\n(30) - (6) = 24, left: ((5 * (6 / 1)) - 6) = 24\nreach 24! expression: ((5 * (6 / 1)) - 6)"}, {"input": "6 6 5 1\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (6 / 1) = 6\n(30) - (6) = 24, left: ((6 * 5) - (6 / 1)) = 24\nreach 24! expression: ((6 * 5) - (6 / 1))"}, {"input": "6 6 5 1\n", "output": "(5) * (1) = 5, left: (5 * 1) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (5 * 1)) = 30, 6\n(30) - (6) = 24, left: ((6 * (5 * 1)) - 6) = 24\nreach 24! expression: ((6 * (5 * 1)) - 6)"}, {"input": "6 6 5 1\n", "output": "(1) / (5) = 1/5, left: (1 / 5) = 1/5, 6, 6\n(6) / (1/5) = 30, left: (6 / (1 / 5)) = 30, 6\n(30) - (6) = 24, left: ((6 / (1 / 5)) - 6) = 24\nreach 24! expression: ((6 / (1 / 5)) - 6)"}, {"input": "6 6 5 1\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 6, 6\n(6) + (6) = 12, left: (6 + 6) = 12, (5 + 1) = 6\nroll back, left: (5 + 1) = 6, 6, 6\n(6) / (6) = 1, left: (6 / (5 + 1)) = 1, 6\nroll back, left: (5 + 1) = 6, 6, 6\nroll back, left: 6 6 5 1\n(5) * (1) = 5, left: (5 * 1) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (5 * 1)) = 30, 6\n(30) - (6) = 24, left: ((6 * (5 * 1)) - 6) = 24\nreach 24! expression: ((6 * (5 * 1)) - 6)"}, {"input": "6 6 5 1\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 6, 5\n(5) - (6) = -1, left: (5 - (6 / 1)) = -1, 6\n(6) / (-1) = -6, left: (6 / (5 - (6 / 1))) = -6\nroll back, left: (5 - (6 / 1)) = -1, 6\nroll back, left: (6 / 1) = 6, 6, 5\n(5) * (6) = 30, left: (5 * (6 / 1)) = 30, 6\n(6) / (30) = 1/5, left: (6 / (5 * (6 / 1))) = 1/5\nroll back, left: (5 * (6 / 1)) = 30, 6\n(30) - (6) = 24, left: ((5 * (6 / 1)) - 6) = 24\nreach 24! expression: ((5 * (6 / 1)) - 6)"}, {"input": "6 6 5 1\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 6, 5\n(6) + (5) = 11, left: (6 + 5) = 11, (1 - 6) = -5\nroll back, left: (1 - 6) = -5, 6, 5\n(6) / (-5) = -6/5, left: (6 / (1 - 6)) = -6/5, 5\nroll back, left: (1 - 6) = -5, 6, 5\nroll back, left: 6 6 5 1\n(6) / (1) = 6, left: (6 / 1) = 6, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (6 / 1) = 6\n(30) - (6) = 24, left: ((6 * 5) - (6 / 1)) = 24\nreach 24! expression: ((6 * 5) - (6 / 1))"}, {"input": "6 6 5 1\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 5, 1\nroll back, left: 6 6 5 1\n(6) - (6) = 0, left: (6 - 6) = 0, 5, 1\n(5) / (1) = 5, left: (5 / 1) = 5, (6 - 6) = 0\nroll back, left: (6 - 6) = 0, 5, 1\nroll back, left: 6 6 5 1\n(5) * (1) = 5, left: (5 * 1) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (5 * 1)) = 30, 6\n(30) - (6) = 24, left: ((6 * (5 * 1)) - 6) = 24\nreach 24! expression: ((6 * (5 * 1)) - 6)"}, {"input": "13 6 11 1\n", "output": "(13) * (11) = 143, left: (13 * 11) = 143, 6, 1\n(1) + (143) = 144, left: (1 + (13 * 11)) = 144, 6\n(144) / (6) = 24, left: ((1 + (13 * 11)) / 6) = 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "13 6 11 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 13, 11\nroll back, left: 13 6 11 1\n(6) - (1) = 5, left: (6 - 1) = 5, 13, 11\n(11) * (5) = 55, left: (11 * (6 - 1)) = 55, 13\nroll back, left: (6 - 1) = 5, 13, 11\nroll back, left: 13 6 11 1\n(13) * (11) = 143, left: (13 * 11) = 143, 6, 1\n(1) + (143) = 144, left: (1 + (13 * 11)) = 144, 6\n(144) / (6) = 24, left: ((1 + (13 * 11)) / 6) = 24\nreach 24! expression: ((1 + (13 * 11)) / 6)"}, {"input": "2 12 7 8\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (2 + 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (2 + 7))) = 24\nreach 24! expression: (8 * (12 - (2 + 7)))"}, {"input": "2 12 7 8\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 7, 8\n(10) - (7) = 3, left: ((12 - 2) - 7) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 2) - 7)) = 24\nreach 24! expression: (8 * ((12 - 2) - 7))"}, {"input": "2 12 7 8\n", "output": "(2) * (12) = 24, left: (2 * 12) = 24, 7, 8\n(8) - (7) = 1, left: (8 - 7) = 1, (2 * 12) = 24\n(24) * (1) = 24, left: ((2 * 12) * (8 - 7)) = 24\nreach 24! expression: ((2 * 12) * (8 - 7))"}, {"input": "2 12 7 8\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 2, 8\n(5) - (2) = 3, left: ((12 - 7) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 7) - 2)) = 24\nreach 24! expression: (8 * ((12 - 7) - 2))"}, {"input": "2 12 7 8\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 12, 8\nroll back, left: 2 12 7 8\n(2) / (7) = 2/7, left: (2 / 7) = 2/7, 12, 8\nroll back, left: 2 12 7 8\n(2) - (7) = -5, left: (2 - 7) = -5, 12, 8\nroll back, left: 2 12 7 8\n(2) + (7) = 9, left: (2 + 7) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (2 + 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (2 + 7))) = 24\nreach 24! expression: (8 * (12 - (2 + 7)))"}, {"input": "2 12 7 8\n", "output": "(7) - (12) = -5, left: (7 - 12) = -5, 2, 8\nroll back, left: 2 12 7 8\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, 2, 8\n(2) + (8) = 10, left: (2 + 8) = 10, (12 / 7) = 12/7\nroll back, left: (12 / 7) = 12/7, 2, 8\nroll back, left: 2 12 7 8\n(12) - (7) = 5, left: (12 - 7) = 5, 2, 8\n(5) - (2) = 3, left: ((12 - 7) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 7) - 2)) = 24\nreach 24! expression: (8 * ((12 - 7) - 2))"}, {"input": "2 12 7 8\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 12, 8\nroll back, left: 2 12 7 8\n(2) + (7) = 9, left: (2 + 7) = 9, 12, 8\n(9) / (12) = 3/4, left: ((2 + 7) / 12) = 3/4, 8\n(3/4) / (8) = 3/32, left: (((2 + 7) / 12) / 8) = 3/32\nroll back, left: ((2 + 7) / 12) = 3/4, 8\nroll back, left: (2 + 7) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (2 + 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (2 + 7))) = 24\nreach 24! expression: (8 * (12 - (2 + 7)))"}, {"input": "2 12 7 8\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 2, 7\nroll back, left: 2 12 7 8\n(8) - (12) = -4, left: (8 - 12) = -4, 2, 7\nroll back, left: 2 12 7 8\n(8) - (2) = 6, left: (8 - 2) = 6, 12, 7\nroll back, left: 2 12 7 8\n(12) - (2) = 10, left: (12 - 2) = 10, 7, 8\n(10) - (7) = 3, left: ((12 - 2) - 7) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 2) - 7)) = 24\nreach 24! expression: (8 * ((12 - 2) - 7))"}, {"input": "2 12 7 8\n", "output": "(2) * (8) = 16, left: (2 * 8) = 16, 12, 7\nroll back, left: 2 12 7 8\n(2) + (8) = 10, left: (2 + 8) = 10, 12, 7\nroll back, left: 2 12 7 8\n(2) * (12) = 24, left: (2 * 12) = 24, 7, 8\n(24) / (8) = 3, left: ((2 * 12) / 8) = 3, 7\nroll back, left: (2 * 12) = 24, 7, 8\n(8) - (7) = 1, left: (8 - 7) = 1, (2 * 12) = 24\n(24) * (1) = 24, left: ((2 * 12) * (8 - 7)) = 24\nreach 24! expression: ((2 * 12) * (8 - 7))"}, {"input": "12 1 12 5\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 12, 12\n(6) / (12) = 1/2, left: ((1 + 5) / 12) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((1 + 5) / 12)) = 24\nreach 24! expression: (12 / ((1 + 5) / 12))"}, {"input": "12 1 12 5\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 12, 12\n(12) / (6) = 2, left: (12 / (1 + 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 / (1 + 5))) = 24\nreach 24! expression: (12 * (12 / (1 + 5)))"}, {"input": "12 1 12 5\n", "output": "(12) * (12) = 144, left: (12 * 12) = 144, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (12 * 12) = 144\n(144) / (6) = 24, left: ((12 * 12) / (1 + 5)) = 24\nreach 24! expression: ((12 * 12) / (1 + 5))"}, {"input": "12 1 12 5\n", "output": "(12) + (5) = 17, left: (12 + 5) = 17, 1, 12\nroll back, left: 12 1 12 5\n(1) - (12) = -11, left: (1 - 12) = -11, 12, 5\nroll back, left: 12 1 12 5\n(12) / (1) = 12, left: (12 / 1) = 12, 12, 5\nroll back, left: 12 1 12 5\n(1) + (5) = 6, left: (1 + 5) = 6, 12, 12\n(6) / (12) = 1/2, left: ((1 + 5) / 12) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((1 + 5) / 12)) = 24\nreach 24! expression: (12 / ((1 + 5) / 12))"}, {"input": "12 1 12 5\n", "output": "(1) * (12) = 12, left: (1 * 12) = 12, 12, 5\nroll back, left: 12 1 12 5\n(12) / (1) = 12, left: (12 / 1) = 12, 12, 5\nroll back, left: 12 1 12 5\n(1) - (12) = -11, left: (1 - 12) = -11, 12, 5\nroll back, left: 12 1 12 5\n(12) * (12) = 144, left: (12 * 12) = 144, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (12 * 12) = 144\n(144) / (6) = 24, left: ((12 * 12) / (1 + 5)) = 24\nreach 24! expression: ((12 * 12) / (1 + 5))"}, {"input": "12 1 12 5\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 12, 12\nroll back, left: 12 1 12 5\n(1) - (5) = -4, left: (1 - 5) = -4, 12, 12\n(12) / (-4) = -3, left: (12 / (1 - 5)) = -3, 12\nroll back, left: (1 - 5) = -4, 12, 12\nroll back, left: 12 1 12 5\n(1) + (5) = 6, left: (1 + 5) = 6, 12, 12\n(12) / (6) = 2, left: (12 / (1 + 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 / (1 + 5))) = 24\nreach 24! expression: (12 * (12 / (1 + 5)))"}, {"input": "6 9 3 1\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (9 - 1)) = 24\nreach 24! expression: ((6 - 3) * (9 - 1))"}, {"input": "6 9 3 1\n", "output": "(9) + (1) = 10, left: (9 + 1) = 10, 6, 3\n(3) * (10) = 30, left: (3 * (9 + 1)) = 30, 6\n(30) - (6) = 24, left: ((3 * (9 + 1)) - 6) = 24\nreach 24! expression: ((3 * (9 + 1)) - 6)"}, {"input": "6 9 3 1\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 9, 1\n(1) - (9) = -8, left: (1 - 9) = -8, (3 - 6) = -3\n(-3) * (-8) = 24, left: ((3 - 6) * (1 - 9)) = 24\nreach 24! expression: ((3 - 6) * (1 - 9))"}, {"input": "6 9 3 1\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 6, 1\n(1) + (3) = 4, left: (1 + (9 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (9 / 3))) = 24\nreach 24! expression: (6 * (1 + (9 / 3)))"}, {"input": "6 9 3 1\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 9, 1\n(9) + (1) = 10, left: (9 + 1) = 10, (3 - 6) = -3\nroll back, left: (3 - 6) = -3, 9, 1\n(9) / (1) = 9, left: (9 / 1) = 9, (3 - 6) = -3\nroll back, left: (3 - 6) = -3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (3 - 6) = -3\nroll back, left: (3 - 6) = -3, 9, 1\n(1) - (9) = -8, left: (1 - 9) = -8, (3 - 6) = -3\n(-3) * (-8) = 24, left: ((3 - 6) * (1 - 9)) = 24\nreach 24! expression: ((3 - 6) * (1 - 9))"}, {"input": "6 9 3 1\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 9, 1\n(2) - (1) = 1, left: ((6 / 3) - 1) = 1, 9\nroll back, left: (6 / 3) = 2, 9, 1\nroll back, left: 6 9 3 1\n(6) - (3) = 3, left: (6 - 3) = 3, 9, 1\n(9) + (3) = 12, left: (9 + (6 - 3)) = 12, 1\nroll back, left: (6 - 3) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (9 - 1)) = 24\nreach 24! expression: ((6 - 3) * (9 - 1))"}, {"input": "6 9 3 1\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 6, 1\n(6) / (3) = 2, left: (6 / (9 / 3)) = 2, 1\nroll back, left: (9 / 3) = 3, 6, 1\n(6) + (3) = 9, left: (6 + (9 / 3)) = 9, 1\nroll back, left: (9 / 3) = 3, 6, 1\n(1) * (3) = 3, left: (1 * (9 / 3)) = 3, 6\nroll back, left: (9 / 3) = 3, 6, 1\n(1) + (3) = 4, left: (1 + (9 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (9 / 3))) = 24\nreach 24! expression: (6 * (1 + (9 / 3)))"}, {"input": "6 9 3 1\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 9, 1\n(9) / (9) = 1, left: ((6 + 3) / 9) = 1, 1\nroll back, left: (6 + 3) = 9, 9, 1\nroll back, left: 6 9 3 1\n(6) / (3) = 2, left: (6 / 3) = 2, 9, 1\nroll back, left: 6 9 3 1\n(6) - (3) = 3, left: (6 - 3) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (9 - 1)) = 24\nreach 24! expression: ((6 - 3) * (9 - 1))"}, {"input": "1 12 4 1\n", "output": "(12) * (4) = 48, left: (12 * 4) = 48, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (12 * 4) = 48\n(48) / (2) = 24, left: ((12 * 4) / (1 + 1)) = 24\nreach 24! expression: ((12 * 4) / (1 + 1))"}, {"input": "1 12 4 1\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 12, 1\n(3) - (1) = 2, left: ((4 - 1) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 - 1) - 1)) = 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "1 12 4 1\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 1, 12\n(3) - (1) = 2, left: ((4 - 1) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 - 1) - 1)) = 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "1 12 4 1\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 12, 1\n(1) / (4) = 1/4, left: (1 / (4 / 1)) = 1/4, 12\nroll back, left: (4 / 1) = 4, 12, 1\nroll back, left: 1 12 4 1\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 12, 1\nroll back, left: 1 12 4 1\n(4) - (1) = 3, left: (4 - 1) = 3, 12, 1\n(3) - (1) = 2, left: ((4 - 1) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 - 1) - 1)) = 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "1 12 4 1\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 1, 12\nroll back, left: 1 12 4 1\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 1, 12\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, (1 / 4) = 1/4\nroll back, left: (1 / 4) = 1/4, 1, 12\nroll back, left: 1 12 4 1\n(4) - (1) = 3, left: (4 - 1) = 3, 1, 12\n(3) - (1) = 2, left: ((4 - 1) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 - 1) - 1)) = 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "1 12 4 1\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 12, 1\n(12) + (4) = 16, left: (12 + (4 / 1)) = 16, 1\nroll back, left: (4 / 1) = 4, 12, 1\nroll back, left: 1 12 4 1\n(1) + (4) = 5, left: (1 + 4) = 5, 12, 1\nroll back, left: 1 12 4 1\n(4) - (1) = 3, left: (4 - 1) = 3, 12, 1\n(3) - (1) = 2, left: ((4 - 1) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 - 1) - 1)) = 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "1 12 4 1\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 1, 1\nroll back, left: 1 12 4 1\n(4) / (12) = 1/3, left: (4 / 12) = 1/3, 1, 1\n(1) - (1/3) = 2/3, left: (1 - (4 / 12)) = 2/3, 1\nroll back, left: (4 / 12) = 1/3, 1, 1\nroll back, left: 1 12 4 1\n(12) * (4) = 48, left: (12 * 4) = 48, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (12 * 4) = 48\n(48) / (2) = 24, left: ((12 * 4) / (1 + 1)) = 24\nreach 24! expression: ((12 * 4) / (1 + 1))"}, {"input": "1 12 4 1\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 12, 1\n(12) + (1) = 13, left: (12 + 1) = 13, (1 / 4) = 1/4\nroll back, left: (1 / 4) = 1/4, 12, 1\nroll back, left: 1 12 4 1\n(4) - (1) = 3, left: (4 - 1) = 3, 12, 1\n(12) / (1) = 12, left: (12 / 1) = 12, (4 - 1) = 3\nroll back, left: (4 - 1) = 3, 12, 1\n(3) - (1) = 2, left: ((4 - 1) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 - 1) - 1)) = 24\nreach 24! expression: (12 * ((4 - 1) - 1))"}, {"input": "5 13 3 4\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 13, 4\n(4) - (13) = -9, left: (4 - 13) = -9, (5 * 3) = 15\n(15) - (-9) = 24, left: ((5 * 3) - (4 - 13)) = 24\nreach 24! expression: ((5 * 3) - (4 - 13))"}, {"input": "5 13 3 4\n", "output": "(5) + (13) = 18, left: (5 + 13) = 18, 3, 4\n(4) * (18) = 72, left: (4 * (5 + 13)) = 72, 3\n(72) / (3) = 24, left: ((4 * (5 + 13)) / 3) = 24\nreach 24! expression: ((4 * (5 + 13)) / 3)"}, {"input": "5 13 3 4\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 5, 13\n(5) + (13) = 18, left: (5 + 13) = 18, (3 / 4) = 3/4\n(18) / (3/4) = 24, left: ((5 + 13) / (3 / 4)) = 24\nreach 24! expression: ((5 + 13) / (3 / 4))"}, {"input": "5 13 3 4\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 5, 3\n(5) * (3) = 15, left: (5 * 3) = 15, (4 - 13) = -9\n(15) - (-9) = 24, left: ((5 * 3) - (4 - 13)) = 24\nreach 24! expression: ((5 * 3) - (4 - 13))"}, {"input": "5 13 3 4\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 3, 4\n(4) * (8) = 32, left: (4 * (13 - 5)) = 32, 3\nroll back, left: (13 - 5) = 8, 3, 4\nroll back, left: 5 13 3 4\n(5) - (13) = -8, left: (5 - 13) = -8, 3, 4\nroll back, left: 5 13 3 4\n(5) + (13) = 18, left: (5 + 13) = 18, 3, 4\n(4) * (18) = 72, left: (4 * (5 + 13)) = 72, 3\n(72) / (3) = 24, left: ((4 * (5 + 13)) / 3) = 24\nreach 24! expression: ((4 * (5 + 13)) / 3)"}, {"input": "5 13 3 4\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 13, 3\nroll back, left: 5 13 3 4\n(4) / (13) = 4/13, left: (4 / 13) = 4/13, 5, 3\n(4/13) / (5) = 4/65, left: ((4 / 13) / 5) = 4/65, 3\nroll back, left: (4 / 13) = 4/13, 5, 3\nroll back, left: 5 13 3 4\n(4) - (13) = -9, left: (4 - 13) = -9, 5, 3\n(5) * (3) = 15, left: (5 * 3) = 15, (4 - 13) = -9\n(15) - (-9) = 24, left: ((5 * 3) - (4 - 13)) = 24\nreach 24! expression: ((5 * 3) - (4 - 13))"}, {"input": "5 13 3 4\n", "output": "(5) + (4) = 9, left: (5 + 4) = 9, 13, 3\n(13) - (3) = 10, left: (13 - 3) = 10, (5 + 4) = 9\nroll back, left: (5 + 4) = 9, 13, 3\nroll back, left: 5 13 3 4\n(5) - (4) = 1, left: (5 - 4) = 1, 13, 3\nroll back, left: 5 13 3 4\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 5, 13\n(5) + (13) = 18, left: (5 + 13) = 18, (3 / 4) = 3/4\n(18) / (3/4) = 24, left: ((5 + 13) / (3 / 4)) = 24\nreach 24! expression: ((5 + 13) / (3 / 4))"}, {"input": "5 13 3 4\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 13, 4\n(13) * (4) = 52, left: (13 * 4) = 52, (3 - 5) = -2\nroll back, left: (3 - 5) = -2, 13, 4\n(4) / (13) = 4/13, left: (4 / 13) = 4/13, (3 - 5) = -2\nroll back, left: (3 - 5) = -2, 13, 4\nroll back, left: 5 13 3 4\n(5) * (3) = 15, left: (5 * 3) = 15, 13, 4\n(4) - (13) = -9, left: (4 - 13) = -9, (5 * 3) = 15\n(15) - (-9) = 24, left: ((5 * 3) - (4 - 13)) = 24\nreach 24! expression: ((5 * 3) - (4 - 13))"}, {"input": "3 10 3 9\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (3 - 9) = -6\n(-6) + (30) = 24, left: ((3 - 9) + (3 * 10)) = 24\nreach 24! expression: ((3 - 9) + (3 * 10))"}, {"input": "3 10 3 9\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (9 - 3) = 6\n(30) - (6) = 24, left: ((10 * 3) - (9 - 3)) = 24\nreach 24! expression: ((10 * 3) - (9 - 3))"}, {"input": "3 10 3 9\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (9 - 3) = 6\n(30) - (6) = 24, left: ((3 * 10) - (9 - 3)) = 24\nreach 24! expression: ((3 * 10) - (9 - 3))"}, {"input": "3 10 3 9\n", "output": "(10) * (9) = 90, left: (10 * 9) = 90, 3, 3\nroll back, left: 3 10 3 9\n(10) + (9) = 19, left: (10 + 9) = 19, 3, 3\n(3) + (19) = 22, left: (3 + (10 + 9)) = 22, 3\nroll back, left: (10 + 9) = 19, 3, 3\nroll back, left: 3 10 3 9\n(9) - (3) = 6, left: (9 - 3) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (9 - 3) = 6\n(30) - (6) = 24, left: ((10 * 3) - (9 - 3)) = 24\nreach 24! expression: ((10 * 3) - (9 - 3))"}, {"input": "3 10 3 9\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 10, 9\nroll back, left: 3 10 3 9\n(3) / (3) = 1, left: (3 / 3) = 1, 10, 9\nroll back, left: 3 10 3 9\n(3) * (3) = 9, left: (3 * 3) = 9, 10, 9\nroll back, left: 3 10 3 9\n(3) - (9) = -6, left: (3 - 9) = -6, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (3 - 9) = -6\n(-6) + (30) = 24, left: ((3 - 9) + (3 * 10)) = 24\nreach 24! expression: ((3 - 9) + (3 * 10))"}, {"input": "3 10 3 9\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (9 / 3) = 3\n(3) - (30) = -27, left: ((9 / 3) - (3 * 10)) = -27\nroll back, left: (3 * 10) = 30, (9 / 3) = 3\nroll back, left: (9 / 3) = 3, 3, 10\nroll back, left: 3 10 3 9\n(9) - (3) = 6, left: (9 - 3) = 6, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (9 - 3) = 6\n(30) - (6) = 24, left: ((3 * 10) - (9 - 3)) = 24\nreach 24! expression: ((3 * 10) - (9 - 3))"}, {"input": "3 10 3 9\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 3, 10\nroll back, left: 3 10 3 9\n(3) + (9) = 12, left: (3 + 9) = 12, 3, 10\n(3) / (10) = 3/10, left: (3 / 10) = 3/10, (3 + 9) = 12\nroll back, left: (3 + 9) = 12, 3, 10\nroll back, left: 3 10 3 9\n(9) - (3) = 6, left: (9 - 3) = 6, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (9 - 3) = 6\n(30) - (6) = 24, left: ((3 * 10) - (9 - 3)) = 24\nreach 24! expression: ((3 * 10) - (9 - 3))"}, {"input": "13 6 5 10\n", "output": "(5) - (10) = -5, left: (5 - 10) = -5, 13, 6\n(13) - (-5) = 18, left: (13 - (5 - 10)) = 18, 6\n(6) + (18) = 24, left: (6 + (13 - (5 - 10))) = 24\nreach 24! expression: (6 + (13 - (5 - 10)))"}, {"input": "13 6 5 10\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 6, 10\n(10) + (8) = 18, left: (10 + (13 - 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (10 + (13 - 5))) = 24\nreach 24! expression: (6 + (10 + (13 - 5)))"}, {"input": "13 6 5 10\n", "output": "(13) + (10) = 23, left: (13 + 10) = 23, 6, 5\n(6) + (23) = 29, left: (6 + (13 + 10)) = 29, 5\n(29) - (5) = 24, left: ((6 + (13 + 10)) - 5) = 24\nreach 24! expression: ((6 + (13 + 10)) - 5)"}, {"input": "13 6 5 10\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 6, 10\n(6) + (10) = 16, left: (6 + 10) = 16, (13 - 5) = 8\n(8) + (16) = 24, left: ((13 - 5) + (6 + 10)) = 24\nreach 24! expression: ((13 - 5) + (6 + 10))"}, {"input": "13 6 5 10\n", "output": "(6) + (10) = 16, left: (6 + 10) = 16, 13, 5\n(5) - (13) = -8, left: (5 - 13) = -8, (6 + 10) = 16\n(16) - (-8) = 24, left: ((6 + 10) - (5 - 13)) = 24\nreach 24! expression: ((6 + 10) - (5 - 13))"}, {"input": "13 6 5 10\n", "output": "(5) - (10) = -5, left: (5 - 10) = -5, 13, 6\n(13) + (-5) = 8, left: (13 + (5 - 10)) = 8, 6\n(8) - (6) = 2, left: ((13 + (5 - 10)) - 6) = 2\nroll back, left: (13 + (5 - 10)) = 8, 6\nroll back, left: (5 - 10) = -5, 13, 6\n(13) - (-5) = 18, left: (13 - (5 - 10)) = 18, 6\n(6) - (18) = -12, left: (6 - (13 - (5 - 10))) = -12\nroll back, left: (13 - (5 - 10)) = 18, 6\n(6) + (18) = 24, left: (6 + (13 - (5 - 10))) = 24\nreach 24! expression: (6 + (13 - (5 - 10)))"}, {"input": "13 6 5 10\n", "output": "(6) + (10) = 16, left: (6 + 10) = 16, 13, 5\n(5) - (13) = -8, left: (5 - 13) = -8, (6 + 10) = 16\n(-8) / (16) = -1/2, left: ((5 - 13) / (6 + 10)) = -1/2\nroll back, left: (5 - 13) = -8, (6 + 10) = 16\n(16) + (-8) = 8, left: ((6 + 10) + (5 - 13)) = 8\nroll back, left: (5 - 13) = -8, (6 + 10) = 16\n(16) - (-8) = 24, left: ((6 + 10) - (5 - 13)) = 24\nreach 24! expression: ((6 + 10) - (5 - 13))"}, {"input": "13 6 5 10\n", "output": "(10) - (13) = -3, left: (10 - 13) = -3, 6, 5\n(6) - (-3) = 9, left: (6 - (10 - 13)) = 9, 5\n(5) * (9) = 45, left: (5 * (6 - (10 - 13))) = 45\nroll back, left: (6 - (10 - 13)) = 9, 5\nroll back, left: (10 - 13) = -3, 6, 5\nroll back, left: 13 6 5 10\n(13) + (10) = 23, left: (13 + 10) = 23, 6, 5\n(6) + (23) = 29, left: (6 + (13 + 10)) = 29, 5\n(29) - (5) = 24, left: ((6 + (13 + 10)) - 5) = 24\nreach 24! expression: ((6 + (13 + 10)) - 5)"}, {"input": "13 6 5 10\n", "output": "(6) + (10) = 16, left: (6 + 10) = 16, 13, 5\n(5) - (13) = -8, left: (5 - 13) = -8, (6 + 10) = 16\n(-8) / (16) = -1/2, left: ((5 - 13) / (6 + 10)) = -1/2\nroll back, left: (5 - 13) = -8, (6 + 10) = 16\n(16) + (-8) = 8, left: ((6 + 10) + (5 - 13)) = 8\nroll back, left: (5 - 13) = -8, (6 + 10) = 16\n(16) - (-8) = 24, left: ((6 + 10) - (5 - 13)) = 24\nreach 24! expression: ((6 + 10) - (5 - 13))"}, {"input": "13 6 5 10\n", "output": "(6) + (10) = 16, left: (6 + 10) = 16, 13, 5\n(5) - (13) = -8, left: (5 - 13) = -8, (6 + 10) = 16\n(-8) / (16) = -1/2, left: ((5 - 13) / (6 + 10)) = -1/2\nroll back, left: (5 - 13) = -8, (6 + 10) = 16\n(16) + (-8) = 8, left: ((6 + 10) + (5 - 13)) = 8\nroll back, left: (5 - 13) = -8, (6 + 10) = 16\n(16) - (-8) = 24, left: ((6 + 10) - (5 - 13)) = 24\nreach 24! expression: ((6 + 10) - (5 - 13))"}, {"input": "13 6 5 10\n", "output": "(6) + (10) = 16, left: (6 + 10) = 16, 13, 5\n(5) - (13) = -8, left: (5 - 13) = -8, (6 + 10) = 16\n(-8) / (16) = -1/2, left: ((5 - 13) / (6 + 10)) = -1/2\nroll back, left: (5 - 13) = -8, (6 + 10) = 16\n(16) + (-8) = 8, left: ((6 + 10) + (5 - 13)) = 8\nroll back, left: (5 - 13) = -8, (6 + 10) = 16\n(16) - (-8) = 24, left: ((6 + 10) - (5 - 13)) = 24\nreach 24! expression: ((6 + 10) - (5 - 13))"}, {"input": "3 8 3 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 3, 8\n(3) - (8/3) = 1/3, left: (3 - (8 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 - (8 / 3))) = 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 8, 3\n(3) - (8/3) = 1/3, left: (3 - (8 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 - (8 / 3))) = 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 3, 8\n(-5) / (3) = -5/3, left: ((3 - 8) / 3) = -5/3, 8\nroll back, left: (3 - 8) = -5, 3, 8\nroll back, left: 3 8 3 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 3, 8\n(8) / (8/3) = 3, left: (8 / (8 / 3)) = 3, 3\nroll back, left: (8 / 3) = 8/3, 3, 8\n(3) - (8/3) = 1/3, left: (3 - (8 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 - (8 / 3))) = 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 8, 3\nroll back, left: 3 8 3 8\n(8) - (3) = 5, left: (8 - 3) = 5, 8, 3\nroll back, left: 3 8 3 8\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, 8, 3\nroll back, left: 3 8 3 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 8, 3\n(3) - (8/3) = 1/3, left: (3 - (8 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 - (8 / 3))) = 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 3, 8\n(-5) / (3) = -5/3, left: ((3 - 8) / 3) = -5/3, 8\nroll back, left: (3 - 8) = -5, 3, 8\nroll back, left: 3 8 3 8\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, 3, 8\nroll back, left: 3 8 3 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 3, 8\n(3) - (8/3) = 1/3, left: (3 - (8 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 - (8 / 3))) = 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 3, 3\nroll back, left: 3 8 3 8\n(8) - (8) = 0, left: (8 - 8) = 0, 3, 3\n(3) * (0) = 0, left: (3 * (8 - 8)) = 0, 3\nroll back, left: (8 - 8) = 0, 3, 3\nroll back, left: 3 8 3 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 8, 3\n(3) - (8/3) = 1/3, left: (3 - (8 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 - (8 / 3))) = 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "3 8 3 8\n", "output": "(8) + (3) = 11, left: (8 + 3) = 11, 3, 8\nroll back, left: 3 8 3 8\n(8) * (3) = 24, left: (8 * 3) = 24, 3, 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (8 * 3) = 24\nroll back, left: (8 * 3) = 24, 3, 8\nroll back, left: 3 8 3 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 3, 8\n(3) - (8/3) = 1/3, left: (3 - (8 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 - (8 / 3))) = 24\nreach 24! expression: (8 / (3 - (8 / 3)))"}, {"input": "8 12 11 9\n", "output": "(11) + (9) = 20, left: (11 + 9) = 20, 8, 12\n(12) + (20) = 32, left: (12 + (11 + 9)) = 32, 8\n(32) - (8) = 24, left: ((12 + (11 + 9)) - 8) = 24\nreach 24! expression: ((12 + (11 + 9)) - 8)"}, {"input": "8 12 11 9\n", "output": "(12) + (9) = 21, left: (12 + 9) = 21, 8, 11\n(11) + (21) = 32, left: (11 + (12 + 9)) = 32, 8\n(32) - (8) = 24, left: ((11 + (12 + 9)) - 8) = 24\nreach 24! expression: ((11 + (12 + 9)) - 8)"}, {"input": "8 12 11 9\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 12, 9\n(12) + (9) = 21, left: (12 + 9) = 21, (11 - 8) = 3\n(3) + (21) = 24, left: ((11 - 8) + (12 + 9)) = 24\nreach 24! expression: ((11 - 8) + (12 + 9))"}, {"input": "8 12 11 9\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 12, 11\n(12) + (1) = 13, left: (12 + (9 - 8)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (9 - 8))) = 24\nreach 24! expression: (11 + (12 + (9 - 8)))"}, {"input": "8 12 11 9\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 12, 9\n(12) + (3) = 15, left: (12 + (11 - 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (12 + (11 - 8))) = 24\nreach 24! expression: (9 + (12 + (11 - 8)))"}, {"input": "8 12 11 9\n", "output": "(9) / (8) = 9/8, left: (9 / 8) = 9/8, 12, 11\nroll back, left: 8 12 11 9\n(8) + (9) = 17, left: (8 + 9) = 17, 12, 11\n(17) / (12) = 17/12, left: ((8 + 9) / 12) = 17/12, 11\nroll back, left: (8 + 9) = 17, 12, 11\nroll back, left: 8 12 11 9\n(9) - (8) = 1, left: (9 - 8) = 1, 12, 11\n(12) + (1) = 13, left: (12 + (9 - 8)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (9 - 8))) = 24\nreach 24! expression: (11 + (12 + (9 - 8)))"}, {"input": "8 12 11 9\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 8, 11\n(8) / (-3) = -8/3, left: (8 / (9 - 12)) = -8/3, 11\nroll back, left: (9 - 12) = -3, 8, 11\nroll back, left: 8 12 11 9\n(12) * (9) = 108, left: (12 * 9) = 108, 8, 11\nroll back, left: 8 12 11 9\n(12) + (9) = 21, left: (12 + 9) = 21, 8, 11\n(11) + (21) = 32, left: (11 + (12 + 9)) = 32, 8\n(32) - (8) = 24, left: ((11 + (12 + 9)) - 8) = 24\nreach 24! expression: ((11 + (12 + 9)) - 8)"}, {"input": "1 7 8 9\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 7, 8\n(7) + (9) = 16, left: (7 + (9 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (7 + (9 / 1))) = 24\nreach 24! expression: (8 + (7 + (9 / 1)))"}, {"input": "1 7 8 9\n", "output": "(1) * (8) = 8, left: (1 * 8) = 8, 7, 9\n(7) + (8) = 15, left: (7 + (1 * 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (7 + (1 * 8))) = 24\nreach 24! expression: (9 + (7 + (1 * 8)))"}, {"input": "1 7 8 9\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 1, 9\n(1) * (15) = 15, left: (1 * (7 + 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (1 * (7 + 8))) = 24\nreach 24! expression: (9 + (1 * (7 + 8)))"}, {"input": "1 7 8 9\n", "output": "(1) * (7) = 7, left: (1 * 7) = 7, 8, 9\n(9) + (7) = 16, left: (9 + (1 * 7)) = 16, 8\n(8) + (16) = 24, left: (8 + (9 + (1 * 7))) = 24\nreach 24! expression: (8 + (9 + (1 * 7)))"}, {"input": "1 7 8 9\n", "output": "(1) * (7) = 7, left: (1 * 7) = 7, 8, 9\n(9) / (7) = 9/7, left: (9 / (1 * 7)) = 9/7, 8\n(8) * (9/7) = 72/7, left: (8 * (9 / (1 * 7))) = 72/7\nroll back, left: (9 / (1 * 7)) = 9/7, 8\nroll back, left: (1 * 7) = 7, 8, 9\n(9) + (7) = 16, left: (9 + (1 * 7)) = 16, 8\n(16) - (8) = 8, left: ((9 + (1 * 7)) - 8) = 8\nroll back, left: (9 + (1 * 7)) = 16, 8\n(8) + (16) = 24, left: (8 + (9 + (1 * 7))) = 24\nreach 24! expression: (8 + (9 + (1 * 7)))"}, {"input": "1 7 8 9\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 7, 9\nroll back, left: 1 7 8 9\n(1) + (8) = 9, left: (1 + 8) = 9, 7, 9\n(9) - (7) = 2, left: ((1 + 8) - 7) = 2, 9\nroll back, left: (1 + 8) = 9, 7, 9\nroll back, left: 1 7 8 9\n(1) * (8) = 8, left: (1 * 8) = 8, 7, 9\n(7) + (8) = 15, left: (7 + (1 * 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (7 + (1 * 8))) = 24\nreach 24! expression: (9 + (7 + (1 * 8)))"}, {"input": "1 7 8 9\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 1, 9\n(1) / (1) = 1, left: (1 / (8 - 7)) = 1, 9\n(9) * (1) = 9, left: (9 * (1 / (8 - 7))) = 9\nroll back, left: (1 / (8 - 7)) = 1, 9\nroll back, left: (8 - 7) = 1, 1, 9\nroll back, left: 1 7 8 9\n(7) + (8) = 15, left: (7 + 8) = 15, 1, 9\n(1) * (15) = 15, left: (1 * (7 + 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (1 * (7 + 8))) = 24\nreach 24! expression: (9 + (1 * (7 + 8)))"}, {"input": "1 7 8 9\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 1, 9\nroll back, left: 1 7 8 9\n(8) - (7) = 1, left: (8 - 7) = 1, 1, 9\n(1) - (1) = 0, left: ((8 - 7) - 1) = 0, 9\nroll back, left: (8 - 7) = 1, 1, 9\nroll back, left: 1 7 8 9\n(7) + (8) = 15, left: (7 + 8) = 15, 1, 9\n(1) * (15) = 15, left: (1 * (7 + 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (1 * (7 + 8))) = 24\nreach 24! expression: (9 + (1 * (7 + 8)))"}, {"input": "1 7 8 9\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 7, 8\n(7) + (9) = 16, left: (7 + (9 / 1)) = 16, 8\n(8) / (16) = 1/2, left: (8 / (7 + (9 / 1))) = 1/2\nroll back, left: (7 + (9 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (7 + (9 / 1))) = 24\nreach 24! expression: (8 + (7 + (9 / 1)))"}, {"input": "1 7 8 9\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 7, 8\n(7) + (9) = 16, left: (7 + (9 / 1)) = 16, 8\n(8) / (16) = 1/2, left: (8 / (7 + (9 / 1))) = 1/2\nroll back, left: (7 + (9 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (7 + (9 / 1))) = 24\nreach 24! expression: (8 + (7 + (9 / 1)))"}, {"input": "1 7 8 9\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 7, 8\n(7) + (9) = 16, left: (7 + (9 / 1)) = 16, 8\n(8) / (16) = 1/2, left: (8 / (7 + (9 / 1))) = 1/2\nroll back, left: (7 + (9 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (7 + (9 / 1))) = 24\nreach 24! expression: (8 + (7 + (9 / 1)))"}, {"input": "1 7 8 9\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 7, 8\n(7) + (9) = 16, left: (7 + (9 / 1)) = 16, 8\n(8) / (16) = 1/2, left: (8 / (7 + (9 / 1))) = 1/2\nroll back, left: (7 + (9 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (7 + (9 / 1))) = 24\nreach 24! expression: (8 + (7 + (9 / 1)))"}, {"input": "1 13 4 2\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (2 / 4) = 1/2\n(12) / (1/2) = 24, left: ((13 - 1) / (2 / 4)) = 24\nreach 24! expression: ((13 - 1) / (2 / 4))"}, {"input": "1 13 4 2\n", "output": "(1) + (13) = 14, left: (1 + 13) = 14, 4, 2\n(2) * (14) = 28, left: (2 * (1 + 13)) = 28, 4\n(28) - (4) = 24, left: ((2 * (1 + 13)) - 4) = 24\nreach 24! expression: ((2 * (1 + 13)) - 4)"}, {"input": "1 13 4 2\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 13, 2\nroll back, left: 1 13 4 2\n(1) - (4) = -3, left: (1 - 4) = -3, 13, 2\n(13) - (-3) = 16, left: (13 - (1 - 4)) = 16, 2\nroll back, left: (1 - 4) = -3, 13, 2\nroll back, left: 1 13 4 2\n(1) + (13) = 14, left: (1 + 13) = 14, 4, 2\n(2) * (14) = 28, left: (2 * (1 + 13)) = 28, 4\n(28) - (4) = 24, left: ((2 * (1 + 13)) - 4) = 24\nreach 24! expression: ((2 * (1 + 13)) - 4)"}, {"input": "1 13 4 2\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 13, 4\n(13) * (2) = 26, left: (13 * (2 / 1)) = 26, 4\nroll back, left: (2 / 1) = 2, 13, 4\nroll back, left: 1 13 4 2\n(4) - (13) = -9, left: (4 - 13) = -9, 1, 2\nroll back, left: 1 13 4 2\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (2 / 4) = 1/2\n(12) / (1/2) = 24, left: ((13 - 1) / (2 / 4)) = 24\nreach 24! expression: ((13 - 1) / (2 / 4))"}, {"input": "1 13 4 2\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 13, 2\nroll back, left: 1 13 4 2\n(1) / (13) = 1/13, left: (1 / 13) = 1/13, 4, 2\n(4) * (1/13) = 4/13, left: (4 * (1 / 13)) = 4/13, 2\nroll back, left: (1 / 13) = 1/13, 4, 2\nroll back, left: 1 13 4 2\n(1) + (13) = 14, left: (1 + 13) = 14, 4, 2\n(2) * (14) = 28, left: (2 * (1 + 13)) = 28, 4\n(28) - (4) = 24, left: ((2 * (1 + 13)) - 4) = 24\nreach 24! expression: ((2 * (1 + 13)) - 4)"}, {"input": "1 13 4 2\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (2 / 4) = 1/2\n(1/2) * (12) = 6, left: ((2 / 4) * (13 - 1)) = 6\nroll back, left: (13 - 1) = 12, (2 / 4) = 1/2\n(12) / (1/2) = 24, left: ((13 - 1) / (2 / 4)) = 24\nreach 24! expression: ((13 - 1) / (2 / 4))"}, {"input": "1 13 4 2\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 1, 2\nroll back, left: 1 13 4 2\n(1) * (2) = 2, left: (1 * 2) = 2, 13, 4\n(4) * (2) = 8, left: (4 * (1 * 2)) = 8, 13\nroll back, left: (1 * 2) = 2, 13, 4\nroll back, left: 1 13 4 2\n(1) + (13) = 14, left: (1 + 13) = 14, 4, 2\n(2) * (14) = 28, left: (2 * (1 + 13)) = 28, 4\n(28) - (4) = 24, left: ((2 * (1 + 13)) - 4) = 24\nreach 24! expression: ((2 * (1 + 13)) - 4)"}, {"input": "1 13 4 2\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (2 / 4) = 1/2\n(1/2) * (12) = 6, left: ((2 / 4) * (13 - 1)) = 6\nroll back, left: (13 - 1) = 12, (2 / 4) = 1/2\n(12) / (1/2) = 24, left: ((13 - 1) / (2 / 4)) = 24\nreach 24! expression: ((13 - 1) / (2 / 4))"}, {"input": "1 13 4 2\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (2 / 4) = 1/2\n(1/2) * (12) = 6, left: ((2 / 4) * (13 - 1)) = 6\nroll back, left: (13 - 1) = 12, (2 / 4) = 1/2\n(12) / (1/2) = 24, left: ((13 - 1) / (2 / 4)) = 24\nreach 24! expression: ((13 - 1) / (2 / 4))"}, {"input": "1 13 4 2\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (2 / 4) = 1/2\n(1/2) * (12) = 6, left: ((2 / 4) * (13 - 1)) = 6\nroll back, left: (13 - 1) = 12, (2 / 4) = 1/2\n(12) / (1/2) = 24, left: ((13 - 1) / (2 / 4)) = 24\nreach 24! expression: ((13 - 1) / (2 / 4))"}, {"input": "6 3 3 11\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 3, 11\n(3) * (11) = 33, left: (3 * 11) = 33, (6 + 3) = 9\n(33) - (9) = 24, left: ((3 * 11) - (6 + 3)) = 24\nreach 24! expression: ((3 * 11) - (6 + 3))"}, {"input": "6 3 3 11\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 3, 11\n(11) - (3) = 8, left: (11 - (6 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 - (6 - 3))) = 24\nreach 24! expression: (3 * (11 - (6 - 3)))"}, {"input": "6 3 3 11\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 3, 11\n(11) + (-3) = 8, left: (11 + (3 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 + (3 - 6))) = 24\nreach 24! expression: (3 * (11 + (3 - 6)))"}, {"input": "6 3 3 11\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 6, 3\n(14) - (6) = 8, left: ((3 + 11) - 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 + 11) - 6)) = 24\nreach 24! expression: (3 * ((3 + 11) - 6))"}, {"input": "6 3 3 11\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 3, 11\n(3) - (11) = -8, left: (3 - 11) = -8, (6 / 3) = 2\nroll back, left: (6 / 3) = 2, 3, 11\nroll back, left: 6 3 3 11\n(3) - (6) = -3, left: (3 - 6) = -3, 3, 11\n(11) - (-3) = 14, left: (11 - (3 - 6)) = 14, 3\nroll back, left: (3 - 6) = -3, 3, 11\n(11) + (-3) = 8, left: (11 + (3 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 + (3 - 6))) = 24\nreach 24! expression: (3 * (11 + (3 - 6)))"}, {"input": "6 3 3 11\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 6, 11\nroll back, left: 6 3 3 11\n(3) - (3) = 0, left: (3 - 3) = 0, 6, 11\n(6) - (0) = 6, left: (6 - (3 - 3)) = 6, 11\nroll back, left: (3 - 3) = 0, 6, 11\nroll back, left: 6 3 3 11\n(6) - (3) = 3, left: (6 - 3) = 3, 3, 11\n(11) - (3) = 8, left: (11 - (6 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 - (6 - 3))) = 24\nreach 24! expression: (3 * (11 - (6 - 3)))"}, {"input": "6 3 3 11\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 3, 11\n(3) - (9) = -6, left: (3 - (6 + 3)) = -6, 11\n(11) + (-6) = 5, left: (11 + (3 - (6 + 3))) = 5\nroll back, left: (3 - (6 + 3)) = -6, 11\nroll back, left: (6 + 3) = 9, 3, 11\n(3) * (9) = 27, left: (3 * (6 + 3)) = 27, 11\nroll back, left: (6 + 3) = 9, 3, 11\n(3) * (11) = 33, left: (3 * 11) = 33, (6 + 3) = 9\n(33) - (9) = 24, left: ((3 * 11) - (6 + 3)) = 24\nreach 24! expression: ((3 * 11) - (6 + 3))"}, {"input": "3 4 3 5\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (3 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (3 / 3))) = 24\nreach 24! expression: (4 * (5 + (3 / 3)))"}, {"input": "3 4 3 5\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 4, 3\n(4) * (2) = 8, left: (4 * (5 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 * (5 - 3))) = 24\nreach 24! expression: (3 * (4 * (5 - 3)))"}, {"input": "3 4 3 5\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (3 * 4) = 12\n(12) * (2) = 24, left: ((3 * 4) * (5 - 3)) = 24\nreach 24! expression: ((3 * 4) * (5 - 3))"}, {"input": "3 4 3 5\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (4 * 3) = 12\n(12) * (2) = 24, left: ((4 * 3) * (5 - 3)) = 24\nreach 24! expression: ((4 * 3) * (5 - 3))"}, {"input": "3 4 3 5\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 3, 5\n(3) + (12) = 15, left: (3 + (3 * 4)) = 15, 5\n(5) - (15) = -10, left: (5 - (3 + (3 * 4))) = -10\nroll back, left: (3 + (3 * 4)) = 15, 5\nroll back, left: (3 * 4) = 12, 3, 5\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, (3 * 4) = 12\nroll back, left: (3 * 4) = 12, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (3 * 4) = 12\n(12) * (2) = 24, left: ((3 * 4) * (5 - 3)) = 24\nreach 24! expression: ((3 * 4) * (5 - 3))"}, {"input": "3 4 3 5\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 4, 3\n(4) + (-2) = 2, left: (4 + (3 - 5)) = 2, 3\nroll back, left: (3 - 5) = -2, 4, 3\nroll back, left: 3 4 3 5\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 4, 3\nroll back, left: 3 4 3 5\n(5) - (3) = 2, left: (5 - 3) = 2, 4, 3\n(4) * (2) = 8, left: (4 * (5 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 * (5 - 3))) = 24\nreach 24! expression: (3 * (4 * (5 - 3)))"}, {"input": "3 4 3 5\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 4, 5\n(5) - (1) = 4, left: (5 - (3 / 3)) = 4, 4\nroll back, left: (3 / 3) = 1, 4, 5\n(1) / (5) = 1/5, left: ((3 / 3) / 5) = 1/5, 4\n(1/5) / (4) = 1/20, left: (((3 / 3) / 5) / 4) = 1/20\nroll back, left: ((3 / 3) / 5) = 1/5, 4\nroll back, left: (3 / 3) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (3 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (3 / 3))) = 24\nreach 24! expression: (4 * (5 + (3 / 3)))"}, {"input": "3 4 3 5\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 3, 5\nroll back, left: 3 4 3 5\n(4) * (3) = 12, left: (4 * 3) = 12, 3, 5\n(12) / (3) = 4, left: ((4 * 3) / 3) = 4, 5\nroll back, left: (4 * 3) = 12, 3, 5\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, (4 * 3) = 12\nroll back, left: (4 * 3) = 12, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (4 * 3) = 12\n(12) * (2) = 24, left: ((4 * 3) * (5 - 3)) = 24\nreach 24! expression: ((4 * 3) * (5 - 3))"}, {"input": "3 4 3 5\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 3, 5\n(3) + (3/4) = 15/4, left: (3 + (3 / 4)) = 15/4, 5\n(15/4) - (5) = -5/4, left: ((3 + (3 / 4)) - 5) = -5/4\nroll back, left: (3 + (3 / 4)) = 15/4, 5\nroll back, left: (3 / 4) = 3/4, 3, 5\nroll back, left: 3 4 3 5\n(3) * (4) = 12, left: (3 * 4) = 12, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (3 * 4) = 12\n(12) * (2) = 24, left: ((3 * 4) * (5 - 3)) = 24\nreach 24! expression: ((3 * 4) * (5 - 3))"}, {"input": "6 7 12 13\n", "output": "(6) + (12) = 18, left: (6 + 12) = 18, 7, 13\n(13) + (18) = 31, left: (13 + (6 + 12)) = 31, 7\n(31) - (7) = 24, left: ((13 + (6 + 12)) - 7) = 24\nreach 24! expression: ((13 + (6 + 12)) - 7)"}, {"input": "6 7 12 13\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 6, 12\n(12) - (-6) = 18, left: (12 - (7 - 13)) = 18, 6\n(6) + (18) = 24, left: (6 + (12 - (7 - 13))) = 24\nreach 24! expression: (6 + (12 - (7 - 13)))"}, {"input": "6 7 12 13\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 12, 13\n(12) + (-1) = 11, left: (12 + (6 - 7)) = 11, 13\n(13) + (11) = 24, left: (13 + (12 + (6 - 7))) = 24\nreach 24! expression: (13 + (12 + (6 - 7)))"}, {"input": "6 7 12 13\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 7, 12\n(7) - (19) = -12, left: (7 - (6 + 13)) = -12, 12\n(12) - (-12) = 24, left: (12 - (7 - (6 + 13))) = 24\nreach 24! expression: (12 - (7 - (6 + 13)))"}, {"input": "6 7 12 13\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 7, 13\nroll back, left: 6 7 12 13\n(6) * (12) = 72, left: (6 * 12) = 72, 7, 13\nroll back, left: 6 7 12 13\n(6) - (12) = -6, left: (6 - 12) = -6, 7, 13\nroll back, left: 6 7 12 13\n(6) + (12) = 18, left: (6 + 12) = 18, 7, 13\n(13) + (18) = 31, left: (13 + (6 + 12)) = 31, 7\n(31) - (7) = 24, left: ((13 + (6 + 12)) - 7) = 24\nreach 24! expression: ((13 + (6 + 12)) - 7)"}, {"input": "6 7 12 13\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 7, 13\n(13) - (6) = 7, left: (13 - (12 - 6)) = 7, 7\nroll back, left: (12 - 6) = 6, 7, 13\nroll back, left: 6 7 12 13\n(6) - (12) = -6, left: (6 - 12) = -6, 7, 13\nroll back, left: 6 7 12 13\n(6) + (12) = 18, left: (6 + 12) = 18, 7, 13\n(13) + (18) = 31, left: (13 + (6 + 12)) = 31, 7\n(31) - (7) = 24, left: ((13 + (6 + 12)) - 7) = 24\nreach 24! expression: ((13 + (6 + 12)) - 7)"}, {"input": "4 7 5 7\n", "output": "(5) * (7) = 35, left: (5 * 7) = 35, 4, 7\n(35) - (4) = 31, left: ((5 * 7) - 4) = 31, 7\n(31) - (7) = 24, left: (((5 * 7) - 4) - 7) = 24\nreach 24! expression: (((5 * 7) - 4) - 7)"}, {"input": "4 7 5 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (7 / 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (7 / 7))) = 24\nreach 24! expression: (4 * (5 + (7 / 7)))"}, {"input": "4 7 5 7\n", "output": "(4) + (7) = 11, left: (4 + 7) = 11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (4 + 7) = 11\n(35) - (11) = 24, left: ((5 * 7) - (4 + 7)) = 24\nreach 24! expression: ((5 * 7) - (4 + 7))"}, {"input": "4 7 5 7\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 5, 7\nroll back, left: 4 7 5 7\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, 5, 7\nroll back, left: 4 7 5 7\n(4) + (7) = 11, left: (4 + 7) = 11, 5, 7\n(7) - (5) = 2, left: (7 - 5) = 2, (4 + 7) = 11\nroll back, left: (4 + 7) = 11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (4 + 7) = 11\n(35) - (11) = 24, left: ((5 * 7) - (4 + 7)) = 24\nreach 24! expression: ((5 * 7) - (4 + 7))"}, {"input": "4 7 5 7\n", "output": "(7) * (7) = 49, left: (7 * 7) = 49, 4, 5\nroll back, left: 4 7 5 7\n(7) - (7) = 0, left: (7 - 7) = 0, 4, 5\n(5) + (0) = 5, left: (5 + (7 - 7)) = 5, 4\nroll back, left: (7 - 7) = 0, 4, 5\nroll back, left: 4 7 5 7\n(7) / (7) = 1, left: (7 / 7) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (7 / 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (7 / 7))) = 24\nreach 24! expression: (4 * (5 + (7 / 7)))"}, {"input": "4 7 5 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 4, 5\n(4) + (5) = 9, left: (4 + 5) = 9, (7 + 7) = 14\n(14) / (9) = 14/9, left: ((7 + 7) / (4 + 5)) = 14/9\nroll back, left: (4 + 5) = 9, (7 + 7) = 14\nroll back, left: (7 + 7) = 14, 4, 5\nroll back, left: 4 7 5 7\n(7) / (7) = 1, left: (7 / 7) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (7 / 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (7 / 7))) = 24\nreach 24! expression: (4 * (5 + (7 / 7)))"}, {"input": "4 7 5 7\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 4, 7\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, (5 - 7) = -2\nroll back, left: (5 - 7) = -2, 4, 7\n(4) + (7) = 11, left: (4 + 7) = 11, (5 - 7) = -2\nroll back, left: (5 - 7) = -2, 4, 7\nroll back, left: 4 7 5 7\n(5) * (7) = 35, left: (5 * 7) = 35, 4, 7\n(35) - (4) = 31, left: ((5 * 7) - 4) = 31, 7\n(31) - (7) = 24, left: (((5 * 7) - 4) - 7) = 24\nreach 24! expression: (((5 * 7) - 4) - 7)"}, {"input": "4 5 5 8\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (5 / 5))) = 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 5, 8\nroll back, left: 4 5 5 8\n(4) + (5) = 9, left: (4 + 5) = 9, 5, 8\nroll back, left: 4 5 5 8\n(8) - (4) = 4, left: (8 - 4) = 4, 5, 5\nroll back, left: 4 5 5 8\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (5 / 5))) = 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 4, 5\nroll back, left: 4 5 5 8\n(8) / (5) = 8/5, left: (8 / 5) = 8/5, 4, 5\nroll back, left: 4 5 5 8\n(5) + (5) = 10, left: (5 + 5) = 10, 4, 8\nroll back, left: 4 5 5 8\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (5 / 5))) = 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 4, 8\n(8) - (4) = 4, left: (8 - 4) = 4, (5 - 5) = 0\n(0) / (4) = 0, left: ((5 - 5) / (8 - 4)) = 0\nroll back, left: (8 - 4) = 4, (5 - 5) = 0\nroll back, left: (5 - 5) = 0, 4, 8\nroll back, left: 4 5 5 8\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (5 / 5))) = 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 5, 5\n(5) - (5) = 0, left: (5 - 5) = 0, (4 - 8) = -4\nroll back, left: (4 - 8) = -4, 5, 5\nroll back, left: 4 5 5 8\n(8) - (4) = 4, left: (8 - 4) = 4, 5, 5\nroll back, left: 4 5 5 8\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (5 / 5))) = 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "4 5 5 8\n", "output": "(4) * (8) = 32, left: (4 * 8) = 32, 5, 5\n(5) + (32) = 37, left: (5 + (4 * 8)) = 37, 5\nroll back, left: (4 * 8) = 32, 5, 5\nroll back, left: 4 5 5 8\n(5) - (5) = 0, left: (5 - 5) = 0, 4, 8\nroll back, left: 4 5 5 8\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (5 / 5))) = 24\nreach 24! expression: (8 * (4 - (5 / 5)))"}, {"input": "2 10 12 7\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 10, 12\n(5) / (12) = 5/12, left: ((7 - 2) / 12) = 5/12, 10\n(10) / (5/12) = 24, left: (10 / ((7 - 2) / 12)) = 24\nreach 24! expression: (10 / ((7 - 2) / 12))"}, {"input": "2 10 12 7\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 10, 12\n(10) * (12) = 120, left: (10 * 12) = 120, (7 - 2) = 5\n(120) / (5) = 24, left: ((10 * 12) / (7 - 2)) = 24\nreach 24! expression: ((10 * 12) / (7 - 2))"}, {"input": "2 10 12 7\n", "output": "(12) + (7) = 19, left: (12 + 7) = 19, 2, 10\n(10) / (2) = 5, left: (10 / 2) = 5, (12 + 7) = 19\n(19) + (5) = 24, left: ((12 + 7) + (10 / 2)) = 24\nreach 24! expression: ((12 + 7) + (10 / 2))"}, {"input": "2 10 12 7\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 12, 7\n(12) + (7) = 19, left: (12 + 7) = 19, (10 / 2) = 5\n(5) + (19) = 24, left: ((10 / 2) + (12 + 7)) = 24\nreach 24! expression: ((10 / 2) + (12 + 7))"}, {"input": "2 10 12 7\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 10, 7\nroll back, left: 2 10 12 7\n(12) * (7) = 84, left: (12 * 7) = 84, 2, 10\nroll back, left: 2 10 12 7\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, 2, 10\nroll back, left: 2 10 12 7\n(12) + (7) = 19, left: (12 + 7) = 19, 2, 10\n(10) / (2) = 5, left: (10 / 2) = 5, (12 + 7) = 19\n(19) + (5) = 24, left: ((12 + 7) + (10 / 2)) = 24\nreach 24! expression: ((12 + 7) + (10 / 2))"}, {"input": "2 10 12 7\n", "output": "(7) / (12) = 7/12, left: (7 / 12) = 7/12, 2, 10\nroll back, left: 2 10 12 7\n(12) * (7) = 84, left: (12 * 7) = 84, 2, 10\nroll back, left: 2 10 12 7\n(12) - (7) = 5, left: (12 - 7) = 5, 2, 10\nroll back, left: 2 10 12 7\n(12) + (7) = 19, left: (12 + 7) = 19, 2, 10\n(10) / (2) = 5, left: (10 / 2) = 5, (12 + 7) = 19\n(19) + (5) = 24, left: ((12 + 7) + (10 / 2)) = 24\nreach 24! expression: ((12 + 7) + (10 / 2))"}, {"input": "9 4 1 13\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 1, 13\n(1) + (36) = 37, left: (1 + (9 * 4)) = 37, 13\n(37) - (13) = 24, left: ((1 + (9 * 4)) - 13) = 24\nreach 24! expression: ((1 + (9 * 4)) - 13)"}, {"input": "9 4 1 13\n", "output": "(1) - (13) = -12, left: (1 - 13) = -12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (1 - 13) = -12\n(-12) + (36) = 24, left: ((1 - 13) + (9 * 4)) = 24\nreach 24! expression: ((1 - 13) + (9 * 4))"}, {"input": "9 4 1 13\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 1, 13\n(13) - (36) = -23, left: (13 - (9 * 4)) = -23, 1\n(1) - (-23) = 24, left: (1 - (13 - (9 * 4))) = 24\nreach 24! expression: (1 - (13 - (9 * 4)))"}, {"input": "9 4 1 13\n", "output": "(4) * (13) = 52, left: (4 * 13) = 52, 9, 1\nroll back, left: 9 4 1 13\n(4) + (13) = 17, left: (4 + 13) = 17, 9, 1\nroll back, left: 9 4 1 13\n(1) * (13) = 13, left: (1 * 13) = 13, 9, 4\nroll back, left: 9 4 1 13\n(1) - (13) = -12, left: (1 - 13) = -12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (1 - 13) = -12\n(-12) + (36) = 24, left: ((1 - 13) + (9 * 4)) = 24\nreach 24! expression: ((1 - 13) + (9 * 4))"}, {"input": "9 4 1 13\n", "output": "(9) + (1) = 10, left: (9 + 1) = 10, 4, 13\nroll back, left: 9 4 1 13\n(1) * (13) = 13, left: (1 * 13) = 13, 9, 4\n(9) / (13) = 9/13, left: (9 / (1 * 13)) = 9/13, 4\nroll back, left: (1 * 13) = 13, 9, 4\nroll back, left: 9 4 1 13\n(1) - (13) = -12, left: (1 - 13) = -12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (1 - 13) = -12\n(-12) + (36) = 24, left: ((1 - 13) + (9 * 4)) = 24\nreach 24! expression: ((1 - 13) + (9 * 4))"}, {"input": "9 4 1 13\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 1, 13\nroll back, left: 9 4 1 13\n(9) - (4) = 5, left: (9 - 4) = 5, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (9 - 4) = 5\nroll back, left: (9 - 4) = 5, 1, 13\nroll back, left: 9 4 1 13\n(9) * (4) = 36, left: (9 * 4) = 36, 1, 13\n(1) + (36) = 37, left: (1 + (9 * 4)) = 37, 13\n(37) - (13) = 24, left: ((1 + (9 * 4)) - 13) = 24\nreach 24! expression: ((1 + (9 * 4)) - 13)"}, {"input": "12 2 9 13\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 12, 9\n(11) - (9) = 2, left: ((13 - 2) - 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((13 - 2) - 9)) = 24\nreach 24! expression: (12 * ((13 - 2) - 9))"}, {"input": "12 2 9 13\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 12, 2\n(4) / (2) = 2, left: ((13 - 9) / 2) = 2, 12\n(12) * (2) = 24, left: (12 * ((13 - 9) / 2)) = 24\nreach 24! expression: (12 * ((13 - 9) / 2))"}, {"input": "12 2 9 13\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (12 / 2) = 6\n(6) * (4) = 24, left: ((12 / 2) * (13 - 9)) = 24\nreach 24! expression: ((12 / 2) * (13 - 9))"}, {"input": "12 2 9 13\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 12, 13\n(13) - (11) = 2, left: (13 - (2 + 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (13 - (2 + 9))) = 24\nreach 24! expression: (12 * (13 - (2 + 9)))"}, {"input": "12 2 9 13\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 9, 13\nroll back, left: 12 2 9 13\n(2) - (12) = -10, left: (2 - 12) = -10, 9, 13\n(9) + (-10) = -1, left: (9 + (2 - 12)) = -1, 13\nroll back, left: (2 - 12) = -10, 9, 13\nroll back, left: 12 2 9 13\n(12) / (2) = 6, left: (12 / 2) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (12 / 2) = 6\n(6) * (4) = 24, left: ((12 / 2) * (13 - 9)) = 24\nreach 24! expression: ((12 / 2) * (13 - 9))"}, {"input": "12 2 9 13\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 12, 13\nroll back, left: 12 2 9 13\n(2) * (9) = 18, left: (2 * 9) = 18, 12, 13\nroll back, left: 12 2 9 13\n(2) - (9) = -7, left: (2 - 9) = -7, 12, 13\nroll back, left: 12 2 9 13\n(2) + (9) = 11, left: (2 + 9) = 11, 12, 13\n(13) - (11) = 2, left: (13 - (2 + 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (13 - (2 + 9))) = 24\nreach 24! expression: (12 * (13 - (2 + 9)))"}, {"input": "12 2 9 13\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 2, 9\nroll back, left: 12 2 9 13\n(13) / (12) = 13/12, left: (13 / 12) = 13/12, 2, 9\nroll back, left: 12 2 9 13\n(12) * (13) = 156, left: (12 * 13) = 156, 2, 9\nroll back, left: 12 2 9 13\n(2) + (9) = 11, left: (2 + 9) = 11, 12, 13\n(13) - (11) = 2, left: (13 - (2 + 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (13 - (2 + 9))) = 24\nreach 24! expression: (12 * (13 - (2 + 9)))"}, {"input": "8 4 1 12\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 4, 12\n(4) * (1/8) = 1/2, left: (4 * (1 / 8)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (4 * (1 / 8))) = 24\nreach 24! expression: (12 / (4 * (1 / 8)))"}, {"input": "8 4 1 12\n", "output": "(4) + (12) = 16, left: (4 + 12) = 16, 8, 1\n(16) / (1) = 16, left: ((4 + 12) / 1) = 16, 8\n(8) + (16) = 24, left: (8 + ((4 + 12) / 1)) = 24\nreach 24! expression: (8 + ((4 + 12) / 1))"}, {"input": "8 4 1 12\n", "output": "(8) * (12) = 96, left: (8 * 12) = 96, 4, 1\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, (8 * 12) = 96\n(96) * (1/4) = 24, left: ((8 * 12) * (1 / 4)) = 24\nreach 24! expression: ((8 * 12) * (1 / 4))"}, {"input": "8 4 1 12\n", "output": "(4) + (12) = 16, left: (4 + 12) = 16, 8, 1\n(8) / (1) = 8, left: (8 / 1) = 8, (4 + 12) = 16\n(16) + (8) = 24, left: ((4 + 12) + (8 / 1)) = 24\nreach 24! expression: ((4 + 12) + (8 / 1))"}, {"input": "8 4 1 12\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 1, 12\n(12) / (1/2) = 24, left: (12 / (4 / 8)) = 24, 1\n(24) / (1) = 24, left: ((12 / (4 / 8)) / 1) = 24\nreach 24! expression: ((12 / (4 / 8)) / 1)"}, {"input": "8 4 1 12\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 8, 1\n(8) - (-8) = 16, left: (8 - (4 - 12)) = 16, 1\nroll back, left: (4 - 12) = -8, 8, 1\n(-8) / (1) = -8, left: ((4 - 12) / 1) = -8, 8\nroll back, left: (4 - 12) = -8, 8, 1\nroll back, left: 8 4 1 12\n(4) + (12) = 16, left: (4 + 12) = 16, 8, 1\n(8) / (1) = 8, left: (8 / 1) = 8, (4 + 12) = 16\n(16) + (8) = 24, left: ((4 + 12) + (8 / 1)) = 24\nreach 24! expression: ((4 + 12) + (8 / 1))"}, {"input": "8 4 1 12\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 8, 1\n(8) - (1) = 7, left: (8 - 1) = 7, (4 - 12) = -8\n(-8) / (7) = -8/7, left: ((4 - 12) / (8 - 1)) = -8/7\nroll back, left: (8 - 1) = 7, (4 - 12) = -8\nroll back, left: (4 - 12) = -8, 8, 1\nroll back, left: 8 4 1 12\n(4) + (12) = 16, left: (4 + 12) = 16, 8, 1\n(16) / (1) = 16, left: ((4 + 12) / 1) = 16, 8\n(8) + (16) = 24, left: (8 + ((4 + 12) / 1)) = 24\nreach 24! expression: (8 + ((4 + 12) / 1))"}, {"input": "2 2 6 10\n", "output": "(2) * (10) = 20, left: (2 * 10) = 20, 2, 6\n(6) - (2) = 4, left: (6 - 2) = 4, (2 * 10) = 20\n(20) + (4) = 24, left: ((2 * 10) + (6 - 2)) = 24\nreach 24! expression: ((2 * 10) + (6 - 2))"}, {"input": "2 2 6 10\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (6 - 2) = 4\n(4) + (20) = 24, left: ((6 - 2) + (2 * 10)) = 24\nreach 24! expression: ((6 - 2) + (2 * 10))"}, {"input": "2 2 6 10\n", "output": "(2) - (6) = -4, left: (2 - 6) = -4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (2 - 6) = -4\n(20) - (-4) = 24, left: ((2 * 10) - (2 - 6)) = 24\nreach 24! expression: ((2 * 10) - (2 - 6))"}, {"input": "2 2 6 10\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 2, 10\n(10) - (2) = 8, left: (10 - 2) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (10 - 2)) = 24\nreach 24! expression: ((6 / 2) * (10 - 2))"}, {"input": "2 2 6 10\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 2, 6\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, (10 - 2) = 8\n(8) / (1/3) = 24, left: ((10 - 2) / (2 / 6)) = 24\nreach 24! expression: ((10 - 2) / (2 / 6))"}, {"input": "2 2 6 10\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 2, 10\n(2) / (3) = 2/3, left: (2 / (6 / 2)) = 2/3, 10\nroll back, left: (6 / 2) = 3, 2, 10\n(2) - (3) = -1, left: (2 - (6 / 2)) = -1, 10\nroll back, left: (6 / 2) = 3, 2, 10\n(10) + (3) = 13, left: (10 + (6 / 2)) = 13, 2\nroll back, left: (6 / 2) = 3, 2, 10\n(10) - (2) = 8, left: (10 - 2) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (10 - 2)) = 24\nreach 24! expression: ((6 / 2) * (10 - 2))"}, {"input": "2 2 6 10\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 2, 6\n(6) / (-8) = -3/4, left: (6 / (2 - 10)) = -3/4, 2\nroll back, left: (2 - 10) = -8, 2, 6\n(-8) - (2) = -10, left: ((2 - 10) - 2) = -10, 6\nroll back, left: (2 - 10) = -8, 2, 6\nroll back, left: 2 2 6 10\n(10) - (2) = 8, left: (10 - 2) = 8, 2, 6\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, (10 - 2) = 8\n(8) / (1/3) = 24, left: ((10 - 2) / (2 / 6)) = 24\nreach 24! expression: ((10 - 2) / (2 / 6))"}, {"input": "2 2 6 10\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 2, 2\nroll back, left: 2 2 6 10\n(6) + (10) = 16, left: (6 + 10) = 16, 2, 2\nroll back, left: 2 2 6 10\n(2) + (2) = 4, left: (2 + 2) = 4, 6, 10\nroll back, left: 2 2 6 10\n(6) - (2) = 4, left: (6 - 2) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (6 - 2) = 4\n(4) + (20) = 24, left: ((6 - 2) + (2 * 10)) = 24\nreach 24! expression: ((6 - 2) + (2 * 10))"}, {"input": "3 12 4 12\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 4, 12\n(4) * (9) = 36, left: (4 * (12 - 3)) = 36, 12\n(36) - (12) = 24, left: ((4 * (12 - 3)) - 12) = 24\nreach 24! expression: ((4 * (12 - 3)) - 12)"}, {"input": "3 12 4 12\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 12, 12\n(12) * (-1) = -12, left: (12 * (3 - 4)) = -12, 12\n(12) - (-12) = 24, left: (12 - (12 * (3 - 4))) = 24\nreach 24! expression: (12 - (12 * (3 - 4)))"}, {"input": "3 12 4 12\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (12 - 3)) = 36, 12\n(36) - (12) = 24, left: ((4 * (12 - 3)) - 12) = 24\nreach 24! expression: ((4 * (12 - 3)) - 12)"}, {"input": "3 12 4 12\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 12, 12\n(12) * (1) = 12, left: (12 * (4 - 3)) = 12, 12\n(12) + (12) = 24, left: (12 + (12 * (4 - 3))) = 24\nreach 24! expression: (12 + (12 * (4 - 3)))"}, {"input": "3 12 4 12\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 12, 4\nroll back, left: 3 12 4 12\n(3) / (12) = 1/4, left: (3 / 12) = 1/4, 12, 4\n(4) + (1/4) = 17/4, left: (4 + (3 / 12)) = 17/4, 12\nroll back, left: (3 / 12) = 1/4, 12, 4\nroll back, left: 3 12 4 12\n(12) - (3) = 9, left: (12 - 3) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (12 - 3)) = 36, 12\n(36) - (12) = 24, left: ((4 * (12 - 3)) - 12) = 24\nreach 24! expression: ((4 * (12 - 3)) - 12)"}, {"input": "3 12 4 12\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 3, 12\n(3) + (12) = 15, left: (3 + 12) = 15, (12 / 4) = 3\nroll back, left: (12 / 4) = 3, 3, 12\nroll back, left: 3 12 4 12\n(3) / (12) = 1/4, left: (3 / 12) = 1/4, 4, 12\nroll back, left: 3 12 4 12\n(12) - (3) = 9, left: (12 - 3) = 9, 4, 12\n(4) * (9) = 36, left: (4 * (12 - 3)) = 36, 12\n(36) - (12) = 24, left: ((4 * (12 - 3)) - 12) = 24\nreach 24! expression: ((4 * (12 - 3)) - 12)"}, {"input": "3 12 4 12\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 3, 12\n(12) * (-8) = -96, left: (12 * (4 - 12)) = -96, 3\nroll back, left: (4 - 12) = -8, 3, 12\nroll back, left: 3 12 4 12\n(4) / (12) = 1/3, left: (4 / 12) = 1/3, 3, 12\nroll back, left: 3 12 4 12\n(3) - (4) = -1, left: (3 - 4) = -1, 12, 12\n(12) * (-1) = -12, left: (12 * (3 - 4)) = -12, 12\n(12) - (-12) = 24, left: (12 - (12 * (3 - 4))) = 24\nreach 24! expression: (12 - (12 * (3 - 4)))"}, {"input": "3 12 4 12\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 12, 4\n(12) * (1/4) = 3, left: (12 * (3 / 12)) = 3, 4\nroll back, left: (3 / 12) = 1/4, 12, 4\nroll back, left: 3 12 4 12\n(3) + (12) = 15, left: (3 + 12) = 15, 12, 4\nroll back, left: 3 12 4 12\n(12) - (3) = 9, left: (12 - 3) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (12 - 3)) = 36, 12\n(36) - (12) = 24, left: ((4 * (12 - 3)) - 12) = 24\nreach 24! expression: ((4 * (12 - 3)) - 12)"}, {"input": "8 12 13 3\n", "output": "(8) + (3) = 11, left: (8 + 3) = 11, 12, 13\n(13) - (11) = 2, left: (13 - (8 + 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (13 - (8 + 3))) = 24\nreach 24! expression: (12 * (13 - (8 + 3)))"}, {"input": "8 12 13 3\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (12 / 8) = 3/2\n(3/2) * (16) = 24, left: ((12 / 8) * (13 + 3)) = 24\nreach 24! expression: ((12 / 8) * (13 + 3))"}, {"input": "8 12 13 3\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 8, 3\n(8) * (3) = 24, left: (8 * 3) = 24, (13 - 12) = 1\n(24) / (1) = 24, left: ((8 * 3) / (13 - 12)) = 24\nreach 24! expression: ((8 * 3) / (13 - 12))"}, {"input": "8 12 13 3\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 12, 13\n(5) - (13) = -8, left: ((8 - 3) - 13) = -8, 12\nroll back, left: (8 - 3) = 5, 12, 13\n(5) / (12) = 5/12, left: ((8 - 3) / 12) = 5/12, 13\nroll back, left: (8 - 3) = 5, 12, 13\nroll back, left: 8 12 13 3\n(8) + (3) = 11, left: (8 + 3) = 11, 12, 13\n(13) - (11) = 2, left: (13 - (8 + 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (13 - (8 + 3))) = 24\nreach 24! expression: (12 * (13 - (8 + 3)))"}, {"input": "8 12 13 3\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 12, 13\nroll back, left: 8 12 13 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 12, 13\nroll back, left: 8 12 13 3\n(8) - (3) = 5, left: (8 - 3) = 5, 12, 13\nroll back, left: 8 12 13 3\n(8) + (3) = 11, left: (8 + 3) = 11, 12, 13\n(13) - (11) = 2, left: (13 - (8 + 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (13 - (8 + 3))) = 24\nreach 24! expression: (12 * (13 - (8 + 3)))"}, {"input": "12 13 10 1\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 12, 10\n(12) - (10) = 2, left: (12 - 10) = 2, (13 - 1) = 12\n(12) * (2) = 24, left: ((13 - 1) * (12 - 10)) = 24\nreach 24! expression: ((13 - 1) * (12 - 10))"}, {"input": "12 13 10 1\n", "output": "(10) + (1) = 11, left: (10 + 1) = 11, 12, 13\n(13) - (11) = 2, left: (13 - (10 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (13 - (10 + 1))) = 24\nreach 24! expression: (12 * (13 - (10 + 1)))"}, {"input": "12 13 10 1\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 12, 1\n(3) - (1) = 2, left: ((13 - 10) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((13 - 10) - 1)) = 24\nreach 24! expression: (12 * ((13 - 10) - 1))"}, {"input": "12 13 10 1\n", "output": "(12) + (1) = 13, left: (12 + 1) = 13, 13, 10\nroll back, left: 12 13 10 1\n(12) / (1) = 12, left: (12 / 1) = 12, 13, 10\nroll back, left: 12 13 10 1\n(10) - (13) = -3, left: (10 - 13) = -3, 12, 1\nroll back, left: 12 13 10 1\n(13) - (10) = 3, left: (13 - 10) = 3, 12, 1\n(3) - (1) = 2, left: ((13 - 10) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((13 - 10) - 1)) = 24\nreach 24! expression: (12 * ((13 - 10) - 1))"}, {"input": "12 13 10 1\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 12, 13\nroll back, left: 12 13 10 1\n(1) - (10) = -9, left: (1 - 10) = -9, 12, 13\nroll back, left: 12 13 10 1\n(10) / (1) = 10, left: (10 / 1) = 10, 12, 13\nroll back, left: 12 13 10 1\n(10) + (1) = 11, left: (10 + 1) = 11, 12, 13\n(13) - (11) = 2, left: (13 - (10 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (13 - (10 + 1))) = 24\nreach 24! expression: (12 * (13 - (10 + 1)))"}, {"input": "5 1 8 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 1, 8\n(8) * (3) = 24, left: (8 * (8 - 5)) = 24, 1\n(24) / (1) = 24, left: ((8 * (8 - 5)) / 1) = 24\nreach 24! expression: ((8 * (8 - 5)) / 1)"}, {"input": "5 1 8 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 1, 8\n(1) / (3) = 1/3, left: (1 / (8 - 5)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (1 / (8 - 5))) = 24\nreach 24! expression: (8 / (1 / (8 - 5)))"}, {"input": "5 1 8 8\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 8, 8\n(8) - (5) = 3, left: (8 - (5 / 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (8 - (5 / 1))) = 24\nreach 24! expression: (8 * (8 - (5 / 1)))"}, {"input": "5 1 8 8\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (8 / 1) = 8\n(8) * (3) = 24, left: ((8 / 1) * (8 - 5)) = 24\nreach 24! expression: ((8 / 1) * (8 - 5))"}, {"input": "5 1 8 8\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 8, 8\n(8) - (-4) = 12, left: (8 - (1 - 5)) = 12, 8\nroll back, left: (1 - 5) = -4, 8, 8\n(8) - (8) = 0, left: (8 - 8) = 0, (1 - 5) = -4\nroll back, left: (1 - 5) = -4, 8, 8\nroll back, left: 5 1 8 8\n(5) / (1) = 5, left: (5 / 1) = 5, 8, 8\n(8) - (5) = 3, left: (8 - (5 / 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (8 - (5 / 1))) = 24\nreach 24! expression: (8 * (8 - (5 / 1)))"}, {"input": "5 1 8 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 5, 1\nroll back, left: 5 1 8 8\n(8) - (8) = 0, left: (8 - 8) = 0, 5, 1\nroll back, left: 5 1 8 8\n(8) - (5) = 3, left: (8 - 5) = 3, 1, 8\n(1) / (3) = 1/3, left: (1 / (8 - 5)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (1 / (8 - 5))) = 24\nreach 24! expression: (8 / (1 / (8 - 5)))"}, {"input": "5 1 8 8\n", "output": "(1) + (8) = 9, left: (1 + 8) = 9, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (1 + 8) = 9\nroll back, left: (1 + 8) = 9, 5, 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, (1 + 8) = 9\nroll back, left: (1 + 8) = 9, 5, 8\nroll back, left: 5 1 8 8\n(8) / (1) = 8, left: (8 / 1) = 8, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (8 / 1) = 8\n(8) * (3) = 24, left: ((8 / 1) * (8 - 5)) = 24\nreach 24! expression: ((8 / 1) * (8 - 5))"}, {"input": "5 1 8 8\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 5, 8\n(5) + (8) = 13, left: (5 + 8) = 13, (1 - 8) = -7\nroll back, left: (1 - 8) = -7, 5, 8\nroll back, left: 5 1 8 8\n(8) - (1) = 7, left: (8 - 1) = 7, 5, 8\nroll back, left: 5 1 8 8\n(8) / (1) = 8, left: (8 / 1) = 8, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (8 / 1) = 8\n(8) * (3) = 24, left: ((8 / 1) * (8 - 5)) = 24\nreach 24! expression: ((8 / 1) * (8 - 5))"}, {"input": "5 1 8 8\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 1, 8\n(1) / (5/8) = 8/5, left: (1 / (5 / 8)) = 8/5, 8\nroll back, left: (5 / 8) = 5/8, 1, 8\nroll back, left: 5 1 8 8\n(5) - (8) = -3, left: (5 - 8) = -3, 1, 8\nroll back, left: 5 1 8 8\n(8) - (5) = 3, left: (8 - 5) = 3, 1, 8\n(8) * (3) = 24, left: (8 * (8 - 5)) = 24, 1\n(24) / (1) = 24, left: ((8 * (8 - 5)) / 1) = 24\nreach 24! expression: ((8 * (8 - 5)) / 1)"}, {"input": "8 6 3 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 8, 3\n(8) / (1) = 8, left: (8 / (6 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (8 / (6 - 5))) = 24\nreach 24! expression: (3 * (8 / (6 - 5)))"}, {"input": "8 6 3 5\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 8, 6\n(2) / (8) = 1/4, left: ((5 - 3) / 8) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((5 - 3) / 8)) = 24\nreach 24! expression: (6 / ((5 - 3) / 8))"}, {"input": "8 6 3 5\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (6 / 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (6 / 3))) = 24\nreach 24! expression: (8 * (5 - (6 / 3)))"}, {"input": "8 6 3 5\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (5 - 3) = 2\n(48) / (2) = 24, left: ((8 * 6) / (5 - 3)) = 24\nreach 24! expression: ((8 * 6) / (5 - 3))"}, {"input": "8 6 3 5\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (8 * 6) = 48\n(48) / (2) = 24, left: ((8 * 6) / (5 - 3)) = 24\nreach 24! expression: ((8 * 6) / (5 - 3))"}, {"input": "8 6 3 5\n", "output": "(8) * (5) = 40, left: (8 * 5) = 40, 6, 3\n(40) / (6) = 20/3, left: ((8 * 5) / 6) = 20/3, 3\nroll back, left: (8 * 5) = 40, 6, 3\nroll back, left: 8 6 3 5\n(8) - (6) = 2, left: (8 - 6) = 2, 3, 5\nroll back, left: 8 6 3 5\n(8) * (6) = 48, left: (8 * 6) = 48, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (8 * 6) = 48\n(48) / (2) = 24, left: ((8 * 6) / (5 - 3)) = 24\nreach 24! expression: ((8 * 6) / (5 - 3))"}, {"input": "8 6 3 5\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 8, 5\n(8) / (2) = 4, left: (8 / (6 / 3)) = 4, 5\nroll back, left: (6 / 3) = 2, 8, 5\n(8) + (2) = 10, left: (8 + (6 / 3)) = 10, 5\nroll back, left: (6 / 3) = 2, 8, 5\n(2) / (8) = 1/4, left: ((6 / 3) / 8) = 1/4, 5\nroll back, left: (6 / 3) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (6 / 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (6 / 3))) = 24\nreach 24! expression: (8 * (5 - (6 / 3)))"}, {"input": "8 6 3 5\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 8, 3\nroll back, left: 8 6 3 5\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 8, 3\n(3) - (6/5) = 9/5, left: (3 - (6 / 5)) = 9/5, 8\nroll back, left: (6 / 5) = 6/5, 8, 3\nroll back, left: 8 6 3 5\n(6) - (5) = 1, left: (6 - 5) = 1, 8, 3\n(8) / (1) = 8, left: (8 / (6 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (8 / (6 - 5))) = 24\nreach 24! expression: (3 * (8 / (6 - 5)))"}, {"input": "8 6 3 5\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 8, 6\nroll back, left: 8 6 3 5\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 8, 6\nroll back, left: 8 6 3 5\n(5) - (3) = 2, left: (5 - 3) = 2, 8, 6\n(8) * (2) = 16, left: (8 * (5 - 3)) = 16, 6\nroll back, left: (5 - 3) = 2, 8, 6\n(2) / (8) = 1/4, left: ((5 - 3) / 8) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((5 - 3) / 8)) = 24\nreach 24! expression: (6 / ((5 - 3) / 8))"}, {"input": "8 6 3 5\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 8, 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, (3 + 5) = 8\nroll back, left: (3 + 5) = 8, 8, 6\nroll back, left: 8 6 3 5\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 8, 6\nroll back, left: 8 6 3 5\n(5) - (3) = 2, left: (5 - 3) = 2, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (5 - 3) = 2\n(48) / (2) = 24, left: ((8 * 6) / (5 - 3)) = 24\nreach 24! expression: ((8 * 6) / (5 - 3))"}, {"input": "2 9 12 8\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 2, 12\n(2) * (12) = 24, left: (2 * 12) = 24, (9 - 8) = 1\n(1) * (24) = 24, left: ((9 - 8) * (2 * 12)) = 24\nreach 24! expression: ((9 - 8) * (2 * 12))"}, {"input": "2 9 12 8\n", "output": "(2) / (9) = 2/9, left: (2 / 9) = 2/9, 12, 8\n(8) / (2/9) = 36, left: (8 / (2 / 9)) = 36, 12\n(36) - (12) = 24, left: ((8 / (2 / 9)) - 12) = 24\nreach 24! expression: ((8 / (2 / 9)) - 12)"}, {"input": "2 9 12 8\n", "output": "(2) * (12) = 24, left: (2 * 12) = 24, 9, 8\n(9) - (8) = 1, left: (9 - 8) = 1, (2 * 12) = 24\n(24) * (1) = 24, left: ((2 * 12) * (9 - 8)) = 24\nreach 24! expression: ((2 * 12) * (9 - 8))"}, {"input": "2 9 12 8\n", "output": "(8) / (12) = 2/3, left: (8 / 12) = 2/3, 2, 9\n(2) + (2/3) = 8/3, left: (2 + (8 / 12)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (2 + (8 / 12))) = 24\nreach 24! expression: (9 * (2 + (8 / 12)))"}, {"input": "2 9 12 8\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 9, 12\n(9) * (4) = 36, left: (9 * (8 / 2)) = 36, 12\n(36) - (12) = 24, left: ((9 * (8 / 2)) - 12) = 24\nreach 24! expression: ((9 * (8 / 2)) - 12)"}, {"input": "2 9 12 8\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 12, 8\n(8) - (7) = 1, left: (8 - (9 - 2)) = 1, 12\nroll back, left: (9 - 2) = 7, 12, 8\nroll back, left: 2 9 12 8\n(2) / (9) = 2/9, left: (2 / 9) = 2/9, 12, 8\n(8) - (2/9) = 70/9, left: (8 - (2 / 9)) = 70/9, 12\nroll back, left: (2 / 9) = 2/9, 12, 8\n(8) / (2/9) = 36, left: (8 / (2 / 9)) = 36, 12\n(36) - (12) = 24, left: ((8 / (2 / 9)) - 12) = 24\nreach 24! expression: ((8 / (2 / 9)) - 12)"}, {"input": "2 9 12 8\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 9, 12\n(4) - (12) = -8, left: ((8 / 2) - 12) = -8, 9\nroll back, left: (8 / 2) = 4, 9, 12\n(4) / (12) = 1/3, left: ((8 / 2) / 12) = 1/3, 9\nroll back, left: (8 / 2) = 4, 9, 12\n(4) / (9) = 4/9, left: ((8 / 2) / 9) = 4/9, 12\nroll back, left: (8 / 2) = 4, 9, 12\n(9) * (4) = 36, left: (9 * (8 / 2)) = 36, 12\n(36) - (12) = 24, left: ((9 * (8 / 2)) - 12) = 24\nreach 24! expression: ((9 * (8 / 2)) - 12)"}, {"input": "2 9 12 8\n", "output": "(9) * (12) = 108, left: (9 * 12) = 108, 2, 8\nroll back, left: 2 9 12 8\n(12) - (9) = 3, left: (12 - 9) = 3, 2, 8\n(8) / (2) = 4, left: (8 / 2) = 4, (12 - 9) = 3\nroll back, left: (12 - 9) = 3, 2, 8\nroll back, left: 2 9 12 8\n(9) - (8) = 1, left: (9 - 8) = 1, 2, 12\n(2) * (12) = 24, left: (2 * 12) = 24, (9 - 8) = 1\n(1) * (24) = 24, left: ((9 - 8) * (2 * 12)) = 24\nreach 24! expression: ((9 - 8) * (2 * 12))"}, {"input": "2 9 12 8\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 9, 8\n(10) / (8) = 5/4, left: ((12 - 2) / 8) = 5/4, 9\nroll back, left: (12 - 2) = 10, 9, 8\nroll back, left: 2 9 12 8\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, 9, 8\nroll back, left: 2 9 12 8\n(2) * (12) = 24, left: (2 * 12) = 24, 9, 8\n(9) - (8) = 1, left: (9 - 8) = 1, (2 * 12) = 24\n(24) * (1) = 24, left: ((2 * 12) * (9 - 8)) = 24\nreach 24! expression: ((2 * 12) * (9 - 8))"}, {"input": "13 11 5 4\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 13, 11\n(13) * (-1) = -13, left: (13 * (4 - 5)) = -13, 11\n(11) - (-13) = 24, left: (11 - (13 * (4 - 5))) = 24\nreach 24! expression: (11 - (13 * (4 - 5)))"}, {"input": "13 11 5 4\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 5, 4\n(5) - (4) = 1, left: (5 - 4) = 1, (13 + 11) = 24\n(24) / (1) = 24, left: ((13 + 11) / (5 - 4)) = 24\nreach 24! expression: ((13 + 11) / (5 - 4))"}, {"input": "13 11 5 4\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 13, 11\n(13) / (-1) = -13, left: (13 / (4 - 5)) = -13, 11\n(11) - (-13) = 24, left: (11 - (13 / (4 - 5))) = 24\nreach 24! expression: (11 - (13 / (4 - 5)))"}, {"input": "13 11 5 4\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (5 - 4) = 1\n(24) / (1) = 24, left: ((13 + 11) / (5 - 4)) = 24\nreach 24! expression: ((13 + 11) / (5 - 4))"}, {"input": "13 11 5 4\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 5, 4\n(5) - (4) = 1, left: (5 - 4) = 1, (13 + 11) = 24\n(24) * (1) = 24, left: ((13 + 11) * (5 - 4)) = 24\nreach 24! expression: ((13 + 11) * (5 - 4))"}, {"input": "13 11 5 4\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 11, 4\n(11) * (4) = 44, left: (11 * 4) = 44, (13 + 5) = 18\nroll back, left: (13 + 5) = 18, 11, 4\nroll back, left: 13 11 5 4\n(5) - (11) = -6, left: (5 - 11) = -6, 13, 4\nroll back, left: 13 11 5 4\n(5) - (4) = 1, left: (5 - 4) = 1, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (5 - 4) = 1\n(24) / (1) = 24, left: ((13 + 11) / (5 - 4)) = 24\nreach 24! expression: ((13 + 11) / (5 - 4))"}, {"input": "13 11 5 4\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 13, 11\n(13) / (5/4) = 52/5, left: (13 / (5 / 4)) = 52/5, 11\nroll back, left: (5 / 4) = 5/4, 13, 11\nroll back, left: 13 11 5 4\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, 13, 11\nroll back, left: 13 11 5 4\n(4) - (5) = -1, left: (4 - 5) = -1, 13, 11\n(13) * (-1) = -13, left: (13 * (4 - 5)) = -13, 11\n(11) - (-13) = 24, left: (11 - (13 * (4 - 5))) = 24\nreach 24! expression: (11 - (13 * (4 - 5)))"}, {"input": "4 13 5 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (4 * 4) = 16\n(16) + (8) = 24, left: ((4 * 4) + (13 - 5)) = 24\nreach 24! expression: ((4 * 4) + (13 - 5))"}, {"input": "4 13 5 4\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (5 - 13) = -8\n(16) - (-8) = 24, left: ((4 * 4) - (5 - 13)) = 24\nreach 24! expression: ((4 * 4) - (5 - 13))"}, {"input": "4 13 5 4\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (13 - 5) = 8\n(8) + (16) = 24, left: ((13 - 5) + (4 * 4)) = 24\nreach 24! expression: ((13 - 5) + (4 * 4))"}, {"input": "4 13 5 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 13, 5\n(13) + (16) = 29, left: (13 + (4 * 4)) = 29, 5\n(29) - (5) = 24, left: ((13 + (4 * 4)) - 5) = 24\nreach 24! expression: ((13 + (4 * 4)) - 5)"}, {"input": "4 13 5 4\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 4, 13\n(13) / (-1) = -13, left: (13 / (4 - 5)) = -13, 4\nroll back, left: (4 - 5) = -1, 4, 13\nroll back, left: 4 13 5 4\n(4) / (4) = 1, left: (4 / 4) = 1, 13, 5\nroll back, left: 4 13 5 4\n(4) * (4) = 16, left: (4 * 4) = 16, 13, 5\n(13) + (16) = 29, left: (13 + (4 * 4)) = 29, 5\n(29) - (5) = 24, left: ((13 + (4 * 4)) - 5) = 24\nreach 24! expression: ((13 + (4 * 4)) - 5)"}, {"input": "4 13 5 4\n", "output": "(5) + (4) = 9, left: (5 + 4) = 9, 4, 13\nroll back, left: 4 13 5 4\n(13) - (4) = 9, left: (13 - 4) = 9, 5, 4\nroll back, left: 4 13 5 4\n(13) / (4) = 13/4, left: (13 / 4) = 13/4, 4, 5\nroll back, left: 4 13 5 4\n(13) - (5) = 8, left: (13 - 5) = 8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (13 - 5) = 8\n(8) + (16) = 24, left: ((13 - 5) + (4 * 4)) = 24\nreach 24! expression: ((13 - 5) + (4 * 4))"}, {"input": "4 13 5 4\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 13, 4\nroll back, left: 4 13 5 4\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 13, 4\n(5/4) - (13) = -47/4, left: ((5 / 4) - 13) = -47/4, 4\nroll back, left: (5 / 4) = 5/4, 13, 4\nroll back, left: 4 13 5 4\n(4) * (4) = 16, left: (4 * 4) = 16, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (4 * 4) = 16\n(16) + (8) = 24, left: ((4 * 4) + (13 - 5)) = 24\nreach 24! expression: ((4 * 4) + (13 - 5))"}, {"input": "4 13 5 4\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 4, 4\n(4) - (18) = -14, left: (4 - (13 + 5)) = -14, 4\nroll back, left: (13 + 5) = 18, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (13 + 5) = 18\nroll back, left: (13 + 5) = 18, 4, 4\nroll back, left: 4 13 5 4\n(5) - (13) = -8, left: (5 - 13) = -8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (5 - 13) = -8\n(16) - (-8) = 24, left: ((4 * 4) - (5 - 13)) = 24\nreach 24! expression: ((4 * 4) - (5 - 13))"}, {"input": "4 13 5 4\n", "output": "(13) / (4) = 13/4, left: (13 / 4) = 13/4, 5, 4\nroll back, left: 4 13 5 4\n(5) - (4) = 1, left: (5 - 4) = 1, 13, 4\n(1) - (13) = -12, left: ((5 - 4) - 13) = -12, 4\nroll back, left: (5 - 4) = 1, 13, 4\nroll back, left: 4 13 5 4\n(13) - (5) = 8, left: (13 - 5) = 8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (13 - 5) = 8\n(8) + (16) = 24, left: ((13 - 5) + (4 * 4)) = 24\nreach 24! expression: ((13 - 5) + (4 * 4))"}, {"input": "11 9 4 1\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (11 + 1) = 12\n(36) - (12) = 24, left: ((9 * 4) - (11 + 1)) = 24\nreach 24! expression: ((9 * 4) - (11 + 1))"}, {"input": "11 9 4 1\n", "output": "(9) * (1) = 9, left: (9 * 1) = 9, 11, 4\n(4) + (9) = 13, left: (4 + (9 * 1)) = 13, 11\n(11) + (13) = 24, left: (11 + (4 + (9 * 1))) = 24\nreach 24! expression: (11 + (4 + (9 * 1)))"}, {"input": "11 9 4 1\n", "output": "(11) + (9) = 20, left: (11 + 9) = 20, 4, 1\n(4) + (20) = 24, left: (4 + (11 + 9)) = 24, 1\n(1) * (24) = 24, left: (1 * (4 + (11 + 9))) = 24\nreach 24! expression: (1 * (4 + (11 + 9)))"}, {"input": "11 9 4 1\n", "output": "(11) * (1) = 11, left: (11 * 1) = 11, 9, 4\n(4) + (11) = 15, left: (4 + (11 * 1)) = 15, 9\n(9) + (15) = 24, left: (9 + (4 + (11 * 1))) = 24\nreach 24! expression: (9 + (4 + (11 * 1)))"}, {"input": "11 9 4 1\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 11, 4\n(11) + (9) = 20, left: (11 + (9 / 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (11 + (9 / 1))) = 24\nreach 24! expression: (4 + (11 + (9 / 1)))"}, {"input": "11 9 4 1\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 11, 4\n(4) - (11) = -7, left: (4 - 11) = -7, (1 - 9) = -8\nroll back, left: (1 - 9) = -8, 11, 4\n(11) / (4) = 11/4, left: (11 / 4) = 11/4, (1 - 9) = -8\nroll back, left: (1 - 9) = -8, 11, 4\nroll back, left: 11 9 4 1\n(9) / (1) = 9, left: (9 / 1) = 9, 11, 4\n(11) + (9) = 20, left: (11 + (9 / 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (11 + (9 / 1))) = 24\nreach 24! expression: (4 + (11 + (9 / 1)))"}, {"input": "11 9 4 1\n", "output": "(9) * (1) = 9, left: (9 * 1) = 9, 11, 4\n(4) / (9) = 4/9, left: (4 / (9 * 1)) = 4/9, 11\nroll back, left: (9 * 1) = 9, 11, 4\n(9) / (4) = 9/4, left: ((9 * 1) / 4) = 9/4, 11\nroll back, left: (9 * 1) = 9, 11, 4\n(4) - (9) = -5, left: (4 - (9 * 1)) = -5, 11\nroll back, left: (9 * 1) = 9, 11, 4\n(4) + (9) = 13, left: (4 + (9 * 1)) = 13, 11\n(11) + (13) = 24, left: (11 + (4 + (9 * 1))) = 24\nreach 24! expression: (11 + (4 + (9 * 1)))"}, {"input": "11 9 4 1\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 9, 4\nroll back, left: 11 9 4 1\n(1) / (11) = 1/11, left: (1 / 11) = 1/11, 9, 4\nroll back, left: 11 9 4 1\n(11) + (1) = 12, left: (11 + 1) = 12, 9, 4\n(12) / (9) = 4/3, left: ((11 + 1) / 9) = 4/3, 4\nroll back, left: (11 + 1) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (11 + 1) = 12\n(36) - (12) = 24, left: ((9 * 4) - (11 + 1)) = 24\nreach 24! expression: ((9 * 4) - (11 + 1))"}, {"input": "11 9 4 1\n", "output": "(9) / (11) = 9/11, left: (9 / 11) = 9/11, 4, 1\nroll back, left: 11 9 4 1\n(11) * (9) = 99, left: (11 * 9) = 99, 4, 1\nroll back, left: 11 9 4 1\n(11) / (9) = 11/9, left: (11 / 9) = 11/9, 4, 1\nroll back, left: 11 9 4 1\n(11) + (9) = 20, left: (11 + 9) = 20, 4, 1\n(4) + (20) = 24, left: (4 + (11 + 9)) = 24, 1\n(1) * (24) = 24, left: (1 * (4 + (11 + 9))) = 24\nreach 24! expression: (1 * (4 + (11 + 9)))"}, {"input": "12 9 3 3\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 12, 3\n(12) / (3) = 4, left: (12 / 3) = 4, (9 - 3) = 6\n(6) * (4) = 24, left: ((9 - 3) * (12 / 3)) = 24\nreach 24! expression: ((9 - 3) * (12 / 3))"}, {"input": "12 9 3 3\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 9, 3\n(9) - (3) = 6, left: (9 - 3) = 6, (3 / 12) = 1/4\n(6) / (1/4) = 24, left: ((9 - 3) / (3 / 12)) = 24\nreach 24! expression: ((9 - 3) / (3 / 12))"}, {"input": "12 9 3 3\n", "output": "(9) + (3) = 12, left: (9 + 3) = 12, 12, 3\n(3) * (12) = 36, left: (3 * (9 + 3)) = 36, 12\n(36) - (12) = 24, left: ((3 * (9 + 3)) - 12) = 24\nreach 24! expression: ((3 * (9 + 3)) - 12)"}, {"input": "12 9 3 3\n", "output": "(9) + (3) = 12, left: (9 + 3) = 12, 12, 3\n(12) - (3) = 9, left: ((9 + 3) - 3) = 9, 12\nroll back, left: (9 + 3) = 12, 12, 3\n(12) / (3) = 4, left: ((9 + 3) / 3) = 4, 12\n(12) + (4) = 16, left: (12 + ((9 + 3) / 3)) = 16\nroll back, left: ((9 + 3) / 3) = 4, 12\nroll back, left: (9 + 3) = 12, 12, 3\n(3) * (12) = 36, left: (3 * (9 + 3)) = 36, 12\n(36) - (12) = 24, left: ((3 * (9 + 3)) - 12) = 24\nreach 24! expression: ((3 * (9 + 3)) - 12)"}, {"input": "12 9 3 3\n", "output": "(9) + (3) = 12, left: (9 + 3) = 12, 12, 3\n(12) + (12) = 24, left: (12 + (9 + 3)) = 24, 3\n(3) + (24) = 27, left: (3 + (12 + (9 + 3))) = 27\nroll back, left: (12 + (9 + 3)) = 24, 3\nroll back, left: (9 + 3) = 12, 12, 3\n(12) / (12) = 1, left: (12 / (9 + 3)) = 1, 3\nroll back, left: (9 + 3) = 12, 12, 3\n(3) * (12) = 36, left: (3 * (9 + 3)) = 36, 12\n(36) - (12) = 24, left: ((3 * (9 + 3)) - 12) = 24\nreach 24! expression: ((3 * (9 + 3)) - 12)"}, {"input": "12 9 3 3\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 12, 3\n(12) + (3) = 15, left: (12 + 3) = 15, (3 - 9) = -6\nroll back, left: (3 - 9) = -6, 12, 3\nroll back, left: 12 9 3 3\n(9) + (3) = 12, left: (9 + 3) = 12, 12, 3\n(3) - (12) = -9, left: (3 - (9 + 3)) = -9, 12\nroll back, left: (9 + 3) = 12, 12, 3\n(3) * (12) = 36, left: (3 * (9 + 3)) = 36, 12\n(36) - (12) = 24, left: ((3 * (9 + 3)) - 12) = 24\nreach 24! expression: ((3 * (9 + 3)) - 12)"}, {"input": "12 9 3 3\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (9 / 12) = 3/4\nroll back, left: (9 / 12) = 3/4, 3, 3\nroll back, left: 12 9 3 3\n(12) + (9) = 21, left: (12 + 9) = 21, 3, 3\nroll back, left: 12 9 3 3\n(9) - (3) = 6, left: (9 - 3) = 6, 12, 3\n(12) / (3) = 4, left: (12 / 3) = 4, (9 - 3) = 6\n(6) * (4) = 24, left: ((9 - 3) * (12 / 3)) = 24\nreach 24! expression: ((9 - 3) * (12 / 3))"}, {"input": "7 5 11 1\n", "output": "(7) + (11) = 18, left: (7 + 11) = 18, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (7 + 11) = 18\n(18) + (6) = 24, left: ((7 + 11) + (5 + 1)) = 24\nreach 24! expression: ((7 + 11) + (5 + 1))"}, {"input": "7 5 11 1\n", "output": "(11) * (1) = 11, left: (11 * 1) = 11, 7, 5\n(7) * (5) = 35, left: (7 * 5) = 35, (11 * 1) = 11\n(35) - (11) = 24, left: ((7 * 5) - (11 * 1)) = 24\nreach 24! expression: ((7 * 5) - (11 * 1))"}, {"input": "7 5 11 1\n", "output": "(7) * (1) = 7, left: (7 * 1) = 7, 5, 11\n(5) * (7) = 35, left: (5 * (7 * 1)) = 35, 11\n(35) - (11) = 24, left: ((5 * (7 * 1)) - 11) = 24\nreach 24! expression: ((5 * (7 * 1)) - 11)"}, {"input": "7 5 11 1\n", "output": "(5) + (11) = 16, left: (5 + 11) = 16, 7, 1\n(7) + (16) = 23, left: (7 + (5 + 11)) = 23, 1\n(1) + (23) = 24, left: (1 + (7 + (5 + 11))) = 24\nreach 24! expression: (1 + (7 + (5 + 11)))"}, {"input": "7 5 11 1\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 5, 11\n(-6) / (5) = -6/5, left: ((1 - 7) / 5) = -6/5, 11\nroll back, left: (1 - 7) = -6, 5, 11\nroll back, left: 7 5 11 1\n(7) * (1) = 7, left: (7 * 1) = 7, 5, 11\n(5) + (7) = 12, left: (5 + (7 * 1)) = 12, 11\nroll back, left: (7 * 1) = 7, 5, 11\n(5) * (7) = 35, left: (5 * (7 * 1)) = 35, 11\n(35) - (11) = 24, left: ((5 * (7 * 1)) - 11) = 24\nreach 24! expression: ((5 * (7 * 1)) - 11)"}, {"input": "7 5 11 1\n", "output": "(5) - (11) = -6, left: (5 - 11) = -6, 7, 1\n(7) + (1) = 8, left: (7 + 1) = 8, (5 - 11) = -6\nroll back, left: (5 - 11) = -6, 7, 1\n(1) - (7) = -6, left: (1 - 7) = -6, (5 - 11) = -6\nroll back, left: (5 - 11) = -6, 7, 1\nroll back, left: 7 5 11 1\n(5) + (11) = 16, left: (5 + 11) = 16, 7, 1\n(7) + (16) = 23, left: (7 + (5 + 11)) = 23, 1\n(1) + (23) = 24, left: (1 + (7 + (5 + 11))) = 24\nreach 24! expression: (1 + (7 + (5 + 11)))"}, {"input": "8 2 13 7\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 13, 7\n(13) + (4) = 17, left: (13 + (8 / 2)) = 17, 7\n(7) + (17) = 24, left: (7 + (13 + (8 / 2))) = 24\nreach 24! expression: (7 + (13 + (8 / 2)))"}, {"input": "8 2 13 7\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 8, 2\n(6) / (2) = 3, left: ((13 - 7) / 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 7) / 2)) = 24\nreach 24! expression: (8 * ((13 - 7) / 2))"}, {"input": "8 2 13 7\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 8, 2\n(8) / (2) = 4, left: (8 / 2) = 4, (13 - 7) = 6\n(6) * (4) = 24, left: ((13 - 7) * (8 / 2)) = 24\nreach 24! expression: ((13 - 7) * (8 / 2))"}, {"input": "8 2 13 7\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (13 - 7)) = 48, 2\n(48) / (2) = 24, left: ((8 * (13 - 7)) / 2) = 24\nreach 24! expression: ((8 * (13 - 7)) / 2)"}, {"input": "8 2 13 7\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 13, 7\n(13) - (7) = 6, left: (13 - 7) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((13 - 7) / (2 / 8)) = 24\nreach 24! expression: ((13 - 7) / (2 / 8))"}, {"input": "8 2 13 7\n", "output": "(8) + (2) = 10, left: (8 + 2) = 10, 13, 7\n(13) / (10) = 13/10, left: (13 / (8 + 2)) = 13/10, 7\nroll back, left: (8 + 2) = 10, 13, 7\n(7) / (10) = 7/10, left: (7 / (8 + 2)) = 7/10, 13\nroll back, left: (8 + 2) = 10, 13, 7\nroll back, left: 8 2 13 7\n(8) / (2) = 4, left: (8 / 2) = 4, 13, 7\n(13) + (4) = 17, left: (13 + (8 / 2)) = 17, 7\n(7) + (17) = 24, left: (7 + (13 + (8 / 2))) = 24\nreach 24! expression: (7 + (13 + (8 / 2)))"}, {"input": "8 2 13 7\n", "output": "(2) + (13) = 15, left: (2 + 13) = 15, 8, 7\nroll back, left: 8 2 13 7\n(2) * (13) = 26, left: (2 * 13) = 26, 8, 7\n(26) - (8) = 18, left: ((2 * 13) - 8) = 18, 7\nroll back, left: (2 * 13) = 26, 8, 7\nroll back, left: 8 2 13 7\n(13) - (7) = 6, left: (13 - 7) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (13 - 7)) = 48, 2\n(48) / (2) = 24, left: ((8 * (13 - 7)) / 2) = 24\nreach 24! expression: ((8 * (13 - 7)) / 2)"}, {"input": "8 2 13 7\n", "output": "(2) / (7) = 2/7, left: (2 / 7) = 2/7, 8, 13\nroll back, left: 8 2 13 7\n(2) + (13) = 15, left: (2 + 13) = 15, 8, 7\nroll back, left: 8 2 13 7\n(13) - (2) = 11, left: (13 - 2) = 11, 8, 7\nroll back, left: 8 2 13 7\n(13) - (7) = 6, left: (13 - 7) = 6, 8, 2\n(8) / (2) = 4, left: (8 / 2) = 4, (13 - 7) = 6\n(6) * (4) = 24, left: ((13 - 7) * (8 / 2)) = 24\nreach 24! expression: ((13 - 7) * (8 / 2))"}, {"input": "1 2 7 4\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (2 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (2 - 1))) = 24\nreach 24! expression: (4 * (7 - (2 - 1)))"}, {"input": "1 2 7 4\n", "output": "(7) + (4) = 11, left: (7 + 4) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (7 + 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (7 + 4))) = 24\nreach 24! expression: (2 * (1 + (7 + 4)))"}, {"input": "1 2 7 4\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 1, 7\nroll back, left: 1 2 7 4\n(4) / (2) = 2, left: (4 / 2) = 2, 1, 7\n(7) + (2) = 9, left: (7 + (4 / 2)) = 9, 1\nroll back, left: (4 / 2) = 2, 1, 7\nroll back, left: 1 2 7 4\n(2) - (1) = 1, left: (2 - 1) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (2 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (2 - 1))) = 24\nreach 24! expression: (4 * (7 - (2 - 1)))"}, {"input": "1 2 7 4\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 1, 2\n(4/7) / (2) = 2/7, left: ((4 / 7) / 2) = 2/7, 1\nroll back, left: (4 / 7) = 4/7, 1, 2\nroll back, left: 1 2 7 4\n(7) - (4) = 3, left: (7 - 4) = 3, 1, 2\nroll back, left: 1 2 7 4\n(7) + (4) = 11, left: (7 + 4) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (7 + 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (7 + 4))) = 24\nreach 24! expression: (2 * (1 + (7 + 4)))"}, {"input": "1 2 7 4\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 1, 2\n(1) * (2) = 2, left: (1 * 2) = 2, (7 / 4) = 7/4\nroll back, left: (7 / 4) = 7/4, 1, 2\nroll back, left: 1 2 7 4\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, 1, 2\nroll back, left: 1 2 7 4\n(7) + (4) = 11, left: (7 + 4) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (7 + 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (7 + 4))) = 24\nreach 24! expression: (2 * (1 + (7 + 4)))"}, {"input": "1 2 7 4\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 1, 2\n(2) / (7/4) = 8/7, left: (2 / (7 / 4)) = 8/7, 1\nroll back, left: (7 / 4) = 7/4, 1, 2\nroll back, left: 1 2 7 4\n(7) + (4) = 11, left: (7 + 4) = 11, 1, 2\n(1) / (11) = 1/11, left: (1 / (7 + 4)) = 1/11, 2\nroll back, left: (7 + 4) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (7 + 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (7 + 4))) = 24\nreach 24! expression: (2 * (1 + (7 + 4)))"}, {"input": "1 2 7 4\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 1, 2\nroll back, left: 1 2 7 4\n(7) + (4) = 11, left: (7 + 4) = 11, 1, 2\n(11) - (2) = 9, left: ((7 + 4) - 2) = 9, 1\nroll back, left: (7 + 4) = 11, 1, 2\n(11) / (1) = 11, left: ((7 + 4) / 1) = 11, 2\nroll back, left: (7 + 4) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (7 + 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (7 + 4))) = 24\nreach 24! expression: (2 * (1 + (7 + 4)))"}, {"input": "3 8 2 2\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 3, 2\n(3) * (2) = 6, left: (3 * 2) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((3 * 2) / (2 / 8)) = 24\nreach 24! expression: ((3 * 2) / (2 / 8))"}, {"input": "3 8 2 2\n", "output": "(8) + (2) = 10, left: (8 + 2) = 10, 3, 2\n(10) - (2) = 8, left: ((8 + 2) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((8 + 2) - 2)) = 24\nreach 24! expression: (3 * ((8 + 2) - 2))"}, {"input": "3 8 2 2\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 3, 2\n(2) + (6) = 8, left: (2 + (8 - 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (8 - 2))) = 24\nreach 24! expression: (3 * (2 + (8 - 2)))"}, {"input": "3 8 2 2\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 2, 2\n(2) / (24) = 1/12, left: (2 / (3 * 8)) = 1/12, 2\n(2) / (1/12) = 24, left: (2 / (2 / (3 * 8))) = 24\nreach 24! expression: (2 / (2 / (3 * 8)))"}, {"input": "3 8 2 2\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (8 - 2) = 6\nroll back, left: (8 - 2) = 6, 3, 2\n(3) * (2) = 6, left: (3 * 2) = 6, (8 - 2) = 6\nroll back, left: (8 - 2) = 6, 3, 2\n(2) - (3) = -1, left: (2 - 3) = -1, (8 - 2) = 6\nroll back, left: (8 - 2) = 6, 3, 2\n(2) + (6) = 8, left: (2 + (8 - 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (8 - 2))) = 24\nreach 24! expression: (3 * (2 + (8 - 2)))"}, {"input": "3 8 2 2\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 3, 2\n(2) / (6) = 1/3, left: (2 / (8 - 2)) = 1/3, 3\nroll back, left: (8 - 2) = 6, 3, 2\n(2) * (6) = 12, left: (2 * (8 - 2)) = 12, 3\n(3) - (12) = -9, left: (3 - (2 * (8 - 2))) = -9\nroll back, left: (2 * (8 - 2)) = 12, 3\nroll back, left: (8 - 2) = 6, 3, 2\n(2) + (6) = 8, left: (2 + (8 - 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (8 - 2))) = 24\nreach 24! expression: (3 * (2 + (8 - 2)))"}, {"input": "3 8 2 2\n", "output": "(8) + (2) = 10, left: (8 + 2) = 10, 3, 2\n(3) + (10) = 13, left: (3 + (8 + 2)) = 13, 2\nroll back, left: (8 + 2) = 10, 3, 2\n(10) / (3) = 10/3, left: ((8 + 2) / 3) = 10/3, 2\n(2) + (10/3) = 16/3, left: (2 + ((8 + 2) / 3)) = 16/3\nroll back, left: ((8 + 2) / 3) = 10/3, 2\nroll back, left: (8 + 2) = 10, 3, 2\n(10) - (2) = 8, left: ((8 + 2) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((8 + 2) - 2)) = 24\nreach 24! expression: (3 * ((8 + 2) - 2))"}, {"input": "3 8 2 2\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 2, 2\n(2) * (3/8) = 3/4, left: (2 * (3 / 8)) = 3/4, 2\nroll back, left: (3 / 8) = 3/8, 2, 2\n(2) / (3/8) = 16/3, left: (2 / (3 / 8)) = 16/3, 2\nroll back, left: (3 / 8) = 3/8, 2, 2\nroll back, left: 3 8 2 2\n(3) * (8) = 24, left: (3 * 8) = 24, 2, 2\n(2) / (24) = 1/12, left: (2 / (3 * 8)) = 1/12, 2\n(2) / (1/12) = 24, left: (2 / (2 / (3 * 8))) = 24\nreach 24! expression: (2 / (2 / (3 * 8)))"}, {"input": "1 3 6 6\n", "output": "(1) * (6) = 6, left: (1 * 6) = 6, 3, 6\n(3) * (6) = 18, left: (3 * 6) = 18, (1 * 6) = 6\n(6) + (18) = 24, left: ((1 * 6) + (3 * 6)) = 24\nreach 24! expression: ((1 * 6) + (3 * 6))"}, {"input": "1 3 6 6\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 1, 6\n(1) * (18) = 18, left: (1 * (3 * 6)) = 18, 6\n(6) + (18) = 24, left: (6 + (1 * (3 * 6))) = 24\nreach 24! expression: (6 + (1 * (3 * 6)))"}, {"input": "1 3 6 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (6 + 6) = 12\n(12) * (2) = 24, left: ((6 + 6) * (3 - 1)) = 24\nreach 24! expression: ((6 + 6) * (3 - 1))"}, {"input": "1 3 6 6\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 1, 6\n(1) + (18) = 19, left: (1 + (3 * 6)) = 19, 6\nroll back, left: (3 * 6) = 18, 1, 6\n(1) - (18) = -17, left: (1 - (3 * 6)) = -17, 6\n(-17) - (6) = -23, left: ((1 - (3 * 6)) - 6) = -23\nroll back, left: (1 - (3 * 6)) = -17, 6\nroll back, left: (3 * 6) = 18, 1, 6\n(1) * (18) = 18, left: (1 * (3 * 6)) = 18, 6\n(6) + (18) = 24, left: (6 + (1 * (3 * 6))) = 24\nreach 24! expression: (6 + (1 * (3 * 6)))"}, {"input": "1 3 6 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 1, 3\n(1) / (3) = 1/3, left: (1 / 3) = 1/3, (6 / 6) = 1\nroll back, left: (6 / 6) = 1, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (6 / 6) = 1\nroll back, left: (6 / 6) = 1, 1, 3\nroll back, left: 1 3 6 6\n(6) + (6) = 12, left: (6 + 6) = 12, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (6 + 6) = 12\n(12) * (2) = 24, left: ((6 + 6) * (3 - 1)) = 24\nreach 24! expression: ((6 + 6) * (3 - 1))"}, {"input": "1 3 6 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 1, 3\nroll back, left: 1 3 6 6\n(6) - (6) = 0, left: (6 - 6) = 0, 1, 3\n(1) / (3) = 1/3, left: (1 / 3) = 1/3, (6 - 6) = 0\nroll back, left: (6 - 6) = 0, 1, 3\nroll back, left: 1 3 6 6\n(6) + (6) = 12, left: (6 + 6) = 12, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (6 + 6) = 12\n(12) * (2) = 24, left: ((6 + 6) * (3 - 1)) = 24\nreach 24! expression: ((6 + 6) * (3 - 1))"}, {"input": "1 3 6 6\n", "output": "(1) * (6) = 6, left: (1 * 6) = 6, 3, 6\n(3) - (6) = -3, left: (3 - 6) = -3, (1 * 6) = 6\nroll back, left: (1 * 6) = 6, 3, 6\n(6) / (3) = 2, left: (6 / 3) = 2, (1 * 6) = 6\n(6) - (2) = 4, left: ((1 * 6) - (6 / 3)) = 4\nroll back, left: (6 / 3) = 2, (1 * 6) = 6\nroll back, left: (1 * 6) = 6, 3, 6\n(3) * (6) = 18, left: (3 * 6) = 18, (1 * 6) = 6\n(6) + (18) = 24, left: ((1 * 6) + (3 * 6)) = 24\nreach 24! expression: ((1 * 6) + (3 * 6))"}, {"input": "1 3 6 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 1, 3\n(3) - (0) = 3, left: (3 - (6 - 6)) = 3, 1\n(1) / (3) = 1/3, left: (1 / (3 - (6 - 6))) = 1/3\nroll back, left: (3 - (6 - 6)) = 3, 1\nroll back, left: (6 - 6) = 0, 1, 3\nroll back, left: 1 3 6 6\n(6) + (6) = 12, left: (6 + 6) = 12, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (6 + 6) = 12\n(12) * (2) = 24, left: ((6 + 6) * (3 - 1)) = 24\nreach 24! expression: ((6 + 6) * (3 - 1))"}, {"input": "7 12 12 2\n", "output": "(12) + (2) = 14, left: (12 + 2) = 14, 7, 12\n(7) / (14) = 1/2, left: (7 / (12 + 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (7 / (12 + 2))) = 24\nreach 24! expression: (12 / (7 / (12 + 2)))"}, {"input": "7 12 12 2\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 12, 12\n(14) - (12) = 2, left: ((7 * 2) - 12) = 2, 12\n(12) * (2) = 24, left: (12 * ((7 * 2) - 12)) = 24\nreach 24! expression: (12 * ((7 * 2) - 12))"}, {"input": "7 12 12 2\n", "output": "(12) + (2) = 14, left: (12 + 2) = 14, 7, 12\n(12) * (14) = 168, left: (12 * (12 + 2)) = 168, 7\n(168) / (7) = 24, left: ((12 * (12 + 2)) / 7) = 24\nreach 24! expression: ((12 * (12 + 2)) / 7)"}, {"input": "7 12 12 2\n", "output": "(12) / (7) = 12/7, left: (12 / 7) = 12/7, 12, 2\n(12) + (2) = 14, left: (12 + 2) = 14, (12 / 7) = 12/7\n(12/7) * (14) = 24, left: ((12 / 7) * (12 + 2)) = 24\nreach 24! expression: ((12 / 7) * (12 + 2))"}, {"input": "7 12 12 2\n", "output": "(12) / (12) = 1, left: (12 / 12) = 1, 7, 2\nroll back, left: 7 12 12 2\n(12) - (12) = 0, left: (12 - 12) = 0, 7, 2\n(7) - (0) = 7, left: (7 - (12 - 12)) = 7, 2\nroll back, left: (12 - 12) = 0, 7, 2\nroll back, left: 7 12 12 2\n(12) + (2) = 14, left: (12 + 2) = 14, 7, 12\n(7) / (14) = 1/2, left: (7 / (12 + 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (7 / (12 + 2))) = 24\nreach 24! expression: (12 / (7 / (12 + 2)))"}, {"input": "7 12 12 2\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 12, 12\nroll back, left: 7 12 12 2\n(7) + (2) = 9, left: (7 + 2) = 9, 12, 12\nroll back, left: 7 12 12 2\n(2) - (7) = -5, left: (2 - 7) = -5, 12, 12\nroll back, left: 7 12 12 2\n(7) * (2) = 14, left: (7 * 2) = 14, 12, 12\n(14) - (12) = 2, left: ((7 * 2) - 12) = 2, 12\n(12) * (2) = 24, left: (12 * ((7 * 2) - 12)) = 24\nreach 24! expression: (12 * ((7 * 2) - 12))"}, {"input": "10 2 8 6\n", "output": "(10) + (2) = 12, left: (10 + 2) = 12, 8, 6\n(12) - (8) = 4, left: ((10 + 2) - 8) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 + 2) - 8)) = 24\nreach 24! expression: (6 * ((10 + 2) - 8))"}, {"input": "10 2 8 6\n", "output": "(2) * (6) = 12, left: (2 * 6) = 12, 10, 8\n(10) - (8) = 2, left: (10 - 8) = 2, (2 * 6) = 12\n(12) * (2) = 24, left: ((2 * 6) * (10 - 8)) = 24\nreach 24! expression: ((2 * 6) * (10 - 8))"}, {"input": "10 2 8 6\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 10, 6\n(10) - (6) = 4, left: (10 - 6) = 4, (8 - 2) = 6\n(6) * (4) = 24, left: ((8 - 2) * (10 - 6)) = 24\nreach 24! expression: ((8 - 2) * (10 - 6))"}, {"input": "10 2 8 6\n", "output": "(2) + (6) = 8, left: (2 + 6) = 8, 10, 8\n(10) - (8) = 2, left: (10 - (2 + 6)) = 2, 8\nroll back, left: (2 + 6) = 8, 10, 8\nroll back, left: 10 2 8 6\n(2) * (6) = 12, left: (2 * 6) = 12, 10, 8\n(10) * (8) = 80, left: (10 * 8) = 80, (2 * 6) = 12\nroll back, left: (2 * 6) = 12, 10, 8\n(10) - (8) = 2, left: (10 - 8) = 2, (2 * 6) = 12\n(12) * (2) = 24, left: ((2 * 6) * (10 - 8)) = 24\nreach 24! expression: ((2 * 6) * (10 - 8))"}, {"input": "10 2 8 6\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 8, 6\n(5) / (8) = 5/8, left: ((10 / 2) / 8) = 5/8, 6\nroll back, left: (10 / 2) = 5, 8, 6\n(6) - (5) = 1, left: (6 - (10 / 2)) = 1, 8\nroll back, left: (10 / 2) = 5, 8, 6\nroll back, left: 10 2 8 6\n(10) + (2) = 12, left: (10 + 2) = 12, 8, 6\n(12) - (8) = 4, left: ((10 + 2) - 8) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 + 2) - 8)) = 24\nreach 24! expression: (6 * ((10 + 2) - 8))"}, {"input": "10 2 8 6\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 8, 6\nroll back, left: 10 2 8 6\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, 8, 6\n(1/5) - (8) = -39/5, left: ((2 / 10) - 8) = -39/5, 6\nroll back, left: (2 / 10) = 1/5, 8, 6\nroll back, left: 10 2 8 6\n(10) + (2) = 12, left: (10 + 2) = 12, 8, 6\n(12) - (8) = 4, left: ((10 + 2) - 8) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 + 2) - 8)) = 24\nreach 24! expression: (6 * ((10 + 2) - 8))"}, {"input": "11 11 2 11\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (11 / 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (11 / 11))) = 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "11 11 2 11\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (11 / 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (11 / 11))) = 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "11 11 2 11\n", "output": "(11) / (2) = 11/2, left: (11 / 2) = 11/2, 11, 11\nroll back, left: 11 11 2 11\n(2) - (11) = -9, left: (2 - 11) = -9, 11, 11\nroll back, left: 11 11 2 11\n(11) - (2) = 9, left: (11 - 2) = 9, 11, 11\nroll back, left: 11 11 2 11\n(11) / (11) = 1, left: (11 / 11) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (11 / 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (11 / 11))) = 24\nreach 24! expression: (2 * (11 + (11 / 11)))"}, {"input": "9 4 4 8\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (9 * 4) = 36\n(36) - (12) = 24, left: ((9 * 4) - (4 + 8)) = 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 4, 8\n(36) - (4) = 32, left: ((9 * 4) - 4) = 32, 8\n(32) - (8) = 24, left: (((9 * 4) - 4) - 8) = 24\nreach 24! expression: (((9 * 4) - 4) - 8)"}, {"input": "9 4 4 8\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (4 + 8) = 12\n(36) - (12) = 24, left: ((9 * 4) - (4 + 8)) = 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 4, 8\nroll back, left: 9 4 4 8\n(9) - (4) = 5, left: (9 - 4) = 5, 4, 8\n(4) - (8) = -4, left: (4 - 8) = -4, (9 - 4) = 5\nroll back, left: (9 - 4) = 5, 4, 8\nroll back, left: 9 4 4 8\n(9) * (4) = 36, left: (9 * 4) = 36, 4, 8\n(36) - (4) = 32, left: ((9 * 4) - 4) = 32, 8\n(32) - (8) = 24, left: (((9 * 4) - 4) - 8) = 24\nreach 24! expression: (((9 * 4) - 4) - 8)"}, {"input": "9 4 4 8\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 9, 4\n(9) / (12) = 3/4, left: (9 / (4 + 8)) = 3/4, 4\nroll back, left: (4 + 8) = 12, 9, 4\n(12) - (4) = 8, left: ((4 + 8) - 4) = 8, 9\nroll back, left: (4 + 8) = 12, 9, 4\n(12) / (4) = 3, left: ((4 + 8) / 4) = 3, 9\nroll back, left: (4 + 8) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (4 + 8) = 12\n(36) - (12) = 24, left: ((9 * 4) - (4 + 8)) = 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(9) * (8) = 72, left: (9 * 8) = 72, 4, 4\n(4) - (72) = -68, left: (4 - (9 * 8)) = -68, 4\nroll back, left: (9 * 8) = 72, 4, 4\nroll back, left: 9 4 4 8\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, 9, 4\nroll back, left: 9 4 4 8\n(4) + (8) = 12, left: (4 + 8) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (4 + 8) = 12\n(36) - (12) = 24, left: ((9 * 4) - (4 + 8)) = 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 9, 8\n(9) - (8) = 1, left: (9 - (4 + 4)) = 1, 8\n(1) - (8) = -7, left: ((9 - (4 + 4)) - 8) = -7\nroll back, left: (9 - (4 + 4)) = 1, 8\nroll back, left: (4 + 4) = 8, 9, 8\nroll back, left: 9 4 4 8\n(9) * (4) = 36, left: (9 * 4) = 36, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (9 * 4) = 36\n(36) - (12) = 24, left: ((9 * 4) - (4 + 8)) = 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "9 4 4 8\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 9, 8\nroll back, left: 9 4 4 8\n(4) - (4) = 0, left: (4 - 4) = 0, 9, 8\n(8) + (0) = 8, left: (8 + (4 - 4)) = 8, 9\nroll back, left: (4 - 4) = 0, 9, 8\nroll back, left: 9 4 4 8\n(9) * (4) = 36, left: (9 * 4) = 36, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (9 * 4) = 36\n(36) - (12) = 24, left: ((9 * 4) - (4 + 8)) = 24\nreach 24! expression: ((9 * 4) - (4 + 8))"}, {"input": "4 12 2 3\n", "output": "(4) + (12) = 16, left: (4 + 12) = 16, 2, 3\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, (4 + 12) = 16\n(16) * (3/2) = 24, left: ((4 + 12) * (3 / 2)) = 24\nreach 24! expression: ((4 + 12) * (3 / 2))"}, {"input": "4 12 2 3\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 12, 3\n(12) / (3) = 4, left: (12 / 3) = 4, (4 + 2) = 6\n(6) * (4) = 24, left: ((4 + 2) * (12 / 3)) = 24\nreach 24! expression: ((4 + 2) * (12 / 3))"}, {"input": "4 12 2 3\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 4, 12\n(12) - (6) = 6, left: (12 - (2 * 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (12 - (2 * 3))) = 24\nreach 24! expression: (4 * (12 - (2 * 3)))"}, {"input": "4 12 2 3\n", "output": "(4) + (12) = 16, left: (4 + 12) = 16, 2, 3\n(16) / (2) = 8, left: ((4 + 12) / 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((4 + 12) / 2)) = 24\nreach 24! expression: (3 * ((4 + 12) / 2))"}, {"input": "4 12 2 3\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 4, 12\n(6) - (12) = -6, left: ((2 * 3) - 12) = -6, 4\n(-6) - (4) = -10, left: (((2 * 3) - 12) - 4) = -10\nroll back, left: ((2 * 3) - 12) = -6, 4\n(4) / (-6) = -2/3, left: (4 / ((2 * 3) - 12)) = -2/3\nroll back, left: ((2 * 3) - 12) = -6, 4\nroll back, left: (2 * 3) = 6, 4, 12\n(12) - (6) = 6, left: (12 - (2 * 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (12 - (2 * 3))) = 24\nreach 24! expression: (4 * (12 - (2 * 3)))"}, {"input": "4 12 2 3\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 2, 3\n(3) * (48) = 144, left: (3 * (4 * 12)) = 144, 2\nroll back, left: (4 * 12) = 48, 2, 3\nroll back, left: 4 12 2 3\n(12) / (4) = 3, left: (12 / 4) = 3, 2, 3\nroll back, left: 4 12 2 3\n(4) + (12) = 16, left: (4 + 12) = 16, 2, 3\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, (4 + 12) = 16\n(16) * (3/2) = 24, left: ((4 + 12) * (3 / 2)) = 24\nreach 24! expression: ((4 + 12) * (3 / 2))"}, {"input": "4 12 2 3\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 2, 3\n(2) + (3) = 5, left: (2 + 3) = 5, (4 / 12) = 1/3\nroll back, left: (4 / 12) = 1/3, 2, 3\nroll back, left: 4 12 2 3\n(4) - (12) = -8, left: (4 - 12) = -8, 2, 3\nroll back, left: 4 12 2 3\n(4) + (12) = 16, left: (4 + 12) = 16, 2, 3\n(16) / (2) = 8, left: ((4 + 12) / 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((4 + 12) / 2)) = 24\nreach 24! expression: (3 * ((4 + 12) / 2))"}, {"input": "4 12 2 3\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 2, 3\n(3) + (-8) = -5, left: (3 + (4 - 12)) = -5, 2\nroll back, left: (4 - 12) = -8, 2, 3\nroll back, left: 4 12 2 3\n(12) - (4) = 8, left: (12 - 4) = 8, 2, 3\nroll back, left: 4 12 2 3\n(4) + (12) = 16, left: (4 + 12) = 16, 2, 3\n(16) / (2) = 8, left: ((4 + 12) / 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((4 + 12) / 2)) = 24\nreach 24! expression: (3 * ((4 + 12) / 2))"}, {"input": "9 2 3 12\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (9 - 3)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (9 - 3))) = 24\nreach 24! expression: (12 + (2 * (9 - 3)))"}, {"input": "9 2 3 12\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 2, 12\n(2) * (-6) = -12, left: (2 * (3 - 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 * (3 - 9))) = 24\nreach 24! expression: (12 - (2 * (3 - 9)))"}, {"input": "9 2 3 12\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 9, 2\n(9) - (2) = 7, left: ((12 - 3) - 2) = 7, 9\nroll back, left: (12 - 3) = 9, 9, 2\nroll back, left: 9 2 3 12\n(12) - (2) = 10, left: (12 - 2) = 10, 9, 3\nroll back, left: 9 2 3 12\n(3) - (9) = -6, left: (3 - 9) = -6, 2, 12\n(2) * (-6) = -12, left: (2 * (3 - 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 * (3 - 9))) = 24\nreach 24! expression: (12 - (2 * (3 - 9)))"}, {"input": "9 2 3 12\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 9, 3\nroll back, left: 9 2 3 12\n(12) / (9) = 4/3, left: (12 / 9) = 4/3, 2, 3\n(2) / (4/3) = 3/2, left: (2 / (12 / 9)) = 3/2, 3\nroll back, left: (12 / 9) = 4/3, 2, 3\nroll back, left: 9 2 3 12\n(9) - (3) = 6, left: (9 - 3) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (9 - 3)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (9 - 3))) = 24\nreach 24! expression: (12 + (2 * (9 - 3)))"}, {"input": "9 2 3 12\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 9, 2\nroll back, left: 9 2 3 12\n(9) * (2) = 18, left: (9 * 2) = 18, 3, 12\nroll back, left: 9 2 3 12\n(2) - (9) = -7, left: (2 - 9) = -7, 3, 12\nroll back, left: 9 2 3 12\n(9) - (3) = 6, left: (9 - 3) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (9 - 3)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (9 - 3))) = 24\nreach 24! expression: (12 + (2 * (9 - 3)))"}, {"input": "9 2 3 12\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 2, 3\nroll back, left: 9 2 3 12\n(2) - (12) = -10, left: (2 - 12) = -10, 9, 3\nroll back, left: 9 2 3 12\n(2) + (3) = 5, left: (2 + 3) = 5, 9, 12\nroll back, left: 9 2 3 12\n(3) - (9) = -6, left: (3 - 9) = -6, 2, 12\n(2) * (-6) = -12, left: (2 * (3 - 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 * (3 - 9))) = 24\nreach 24! expression: (12 - (2 * (3 - 9)))"}, {"input": "9 2 3 12\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 9, 2\nroll back, left: 9 2 3 12\n(9) * (3) = 27, left: (9 * 3) = 27, 2, 12\n(27) / (2) = 27/2, left: ((9 * 3) / 2) = 27/2, 12\nroll back, left: (9 * 3) = 27, 2, 12\nroll back, left: 9 2 3 12\n(9) - (3) = 6, left: (9 - 3) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (9 - 3)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (9 - 3))) = 24\nreach 24! expression: (12 + (2 * (9 - 3)))"}, {"input": "1 11 5 10\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (1 + 11)) = 24\nreach 24! expression: ((10 / 5) * (1 + 11))"}, {"input": "1 11 5 10\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 5, 10\n(10) * (12) = 120, left: (10 * (1 + 11)) = 120, 5\n(120) / (5) = 24, left: ((10 * (1 + 11)) / 5) = 24\nreach 24! expression: ((10 * (1 + 11)) / 5)"}, {"input": "1 11 5 10\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (5 / 10) = 1/2\n(12) / (1/2) = 24, left: ((1 + 11) / (5 / 10)) = 24\nreach 24! expression: ((1 + 11) / (5 / 10))"}, {"input": "1 11 5 10\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 5, 10\n(10) / (5) = 2, left: (10 / 5) = 2, (1 + 11) = 12\n(12) * (2) = 24, left: ((1 + 11) * (10 / 5)) = 24\nreach 24! expression: ((1 + 11) * (10 / 5))"}, {"input": "1 11 5 10\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 5, 10\n(5) / (12) = 5/12, left: (5 / (1 + 11)) = 5/12, 10\n(10) / (5/12) = 24, left: (10 / (5 / (1 + 11))) = 24\nreach 24! expression: (10 / (5 / (1 + 11)))"}, {"input": "1 11 5 10\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 11, 10\nroll back, left: 1 11 5 10\n(5) / (1) = 5, left: (5 / 1) = 5, 11, 10\n(5) / (10) = 1/2, left: ((5 / 1) / 10) = 1/2, 11\nroll back, left: (5 / 1) = 5, 11, 10\nroll back, left: 1 11 5 10\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (5 / 10) = 1/2\n(12) / (1/2) = 24, left: ((1 + 11) / (5 / 10)) = 24\nreach 24! expression: ((1 + 11) / (5 / 10))"}, {"input": "1 11 5 10\n", "output": "(11) + (10) = 21, left: (11 + 10) = 21, 1, 5\nroll back, left: 1 11 5 10\n(11) / (10) = 11/10, left: (11 / 10) = 11/10, 1, 5\nroll back, left: 1 11 5 10\n(10) - (1) = 9, left: (10 - 1) = 9, 11, 5\nroll back, left: 1 11 5 10\n(10) / (5) = 2, left: (10 / 5) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (1 + 11)) = 24\nreach 24! expression: ((10 / 5) * (1 + 11))"}, {"input": "3 11 4 9\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 11, 9\n(11) - (9) = 2, left: (11 - 9) = 2, (3 * 4) = 12\n(12) * (2) = 24, left: ((3 * 4) * (11 - 9)) = 24\nreach 24! expression: ((3 * 4) * (11 - 9))"}, {"input": "3 11 4 9\n", "output": "(11) * (9) = 99, left: (11 * 9) = 99, 3, 4\n(99) - (3) = 96, left: ((11 * 9) - 3) = 96, 4\n(96) / (4) = 24, left: (((11 * 9) - 3) / 4) = 24\nreach 24! expression: (((11 * 9) - 3) / 4)"}, {"input": "3 11 4 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 3, 4\n(4) * (2) = 8, left: (4 * (11 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 * (11 - 9))) = 24\nreach 24! expression: (3 * (4 * (11 - 9)))"}, {"input": "3 11 4 9\n", "output": "(11) + (4) = 15, left: (11 + 4) = 15, 3, 9\nroll back, left: 3 11 4 9\n(3) + (9) = 12, left: (3 + 9) = 12, 11, 4\nroll back, left: 3 11 4 9\n(9) - (3) = 6, left: (9 - 3) = 6, 11, 4\nroll back, left: 3 11 4 9\n(11) * (9) = 99, left: (11 * 9) = 99, 3, 4\n(99) - (3) = 96, left: ((11 * 9) - 3) = 96, 4\n(96) / (4) = 24, left: (((11 * 9) - 3) / 4) = 24\nreach 24! expression: (((11 * 9) - 3) / 4)"}, {"input": "3 11 4 9\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 11, 9\nroll back, left: 3 11 4 9\n(3) + (4) = 7, left: (3 + 4) = 7, 11, 9\n(9) / (7) = 9/7, left: (9 / (3 + 4)) = 9/7, 11\nroll back, left: (3 + 4) = 7, 11, 9\nroll back, left: 3 11 4 9\n(3) * (4) = 12, left: (3 * 4) = 12, 11, 9\n(11) - (9) = 2, left: (11 - 9) = 2, (3 * 4) = 12\n(12) * (2) = 24, left: ((3 * 4) * (11 - 9)) = 24\nreach 24! expression: ((3 * 4) * (11 - 9))"}, {"input": "3 11 4 9\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 11, 9\n(11) * (-1) = -11, left: (11 * (3 - 4)) = -11, 9\nroll back, left: (3 - 4) = -1, 11, 9\nroll back, left: 3 11 4 9\n(3) * (4) = 12, left: (3 * 4) = 12, 11, 9\n(11) * (9) = 99, left: (11 * 9) = 99, (3 * 4) = 12\nroll back, left: (3 * 4) = 12, 11, 9\n(11) - (9) = 2, left: (11 - 9) = 2, (3 * 4) = 12\n(12) * (2) = 24, left: ((3 * 4) * (11 - 9)) = 24\nreach 24! expression: ((3 * 4) * (11 - 9))"}, {"input": "9 3 4 12\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (12 / 4) = 3\n(27) - (3) = 24, left: ((9 * 3) - (12 / 4)) = 24\nreach 24! expression: ((9 * 3) - (12 / 4))"}, {"input": "9 3 4 12\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 9, 3\n(9) / (3) = 3, left: (9 / 3) = 3, (12 - 4) = 8\n(8) * (3) = 24, left: ((12 - 4) * (9 / 3)) = 24\nreach 24! expression: ((12 - 4) * (9 / 3))"}, {"input": "9 3 4 12\n", "output": "(9) * (12) = 108, left: (9 * 12) = 108, 3, 4\n(108) / (4) = 27, left: ((9 * 12) / 4) = 27, 3\n(27) - (3) = 24, left: (((9 * 12) / 4) - 3) = 24\nreach 24! expression: (((9 * 12) / 4) - 3)"}, {"input": "9 3 4 12\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 3, 12\n(5) - (3) = 2, left: ((9 - 4) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 - 4) - 3)) = 24\nreach 24! expression: (12 * ((9 - 4) - 3))"}, {"input": "9 3 4 12\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 9, 3\n(9) / (1/3) = 27, left: (9 / (4 / 12)) = 27, 3\n(27) - (3) = 24, left: ((9 / (4 / 12)) - 3) = 24\nreach 24! expression: ((9 / (4 / 12)) - 3)"}, {"input": "9 3 4 12\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 3, 12\n(3) + (5) = 8, left: (3 + (9 - 4)) = 8, 12\n(12) - (8) = 4, left: (12 - (3 + (9 - 4))) = 4\nroll back, left: (3 + (9 - 4)) = 8, 12\nroll back, left: (9 - 4) = 5, 3, 12\n(3) / (5) = 3/5, left: (3 / (9 - 4)) = 3/5, 12\nroll back, left: (9 - 4) = 5, 3, 12\n(5) - (3) = 2, left: ((9 - 4) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 - 4) - 3)) = 24\nreach 24! expression: (12 * ((9 - 4) - 3))"}, {"input": "9 3 4 12\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 9, 3\n(3) - (3) = 0, left: (3 - (12 / 4)) = 0, 9\nroll back, left: (12 / 4) = 3, 9, 3\n(3) / (3) = 1, left: ((12 / 4) / 3) = 1, 9\n(9) / (1) = 9, left: (9 / ((12 / 4) / 3)) = 9\nroll back, left: ((12 / 4) / 3) = 1, 9\nroll back, left: (12 / 4) = 3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (12 / 4) = 3\n(27) - (3) = 24, left: ((9 * 3) - (12 / 4)) = 24\nreach 24! expression: ((9 * 3) - (12 / 4))"}, {"input": "5 10 9 5\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (9 - 10) = -1\n(-1) + (25) = 24, left: ((9 - 10) + (5 * 5)) = 24\nreach 24! expression: ((9 - 10) + (5 * 5))"}, {"input": "5 10 9 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 10, 9\n(9) - (10) = -1, left: (9 - 10) = -1, (5 * 5) = 25\n(25) + (-1) = 24, left: ((5 * 5) + (9 - 10)) = 24\nreach 24! expression: ((5 * 5) + (9 - 10))"}, {"input": "5 10 9 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 10, 9\n(25) - (10) = 15, left: ((5 * 5) - 10) = 15, 9\n(9) + (15) = 24, left: (9 + ((5 * 5) - 10)) = 24\nreach 24! expression: (9 + ((5 * 5) - 10))"}, {"input": "5 10 9 5\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 5, 9\nroll back, left: 5 10 9 5\n(10) + (9) = 19, left: (10 + 9) = 19, 5, 5\n(19) - (5) = 14, left: ((10 + 9) - 5) = 14, 5\nroll back, left: (10 + 9) = 19, 5, 5\nroll back, left: 5 10 9 5\n(9) - (10) = -1, left: (9 - 10) = -1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (9 - 10) = -1\n(-1) + (25) = 24, left: ((9 - 10) + (5 * 5)) = 24\nreach 24! expression: ((9 - 10) + (5 * 5))"}, {"input": "5 10 9 5\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 10, 9\nroll back, left: 5 10 9 5\n(5) / (5) = 1, left: (5 / 5) = 1, 10, 9\n(9) / (1) = 9, left: (9 / (5 / 5)) = 9, 10\nroll back, left: (5 / 5) = 1, 10, 9\nroll back, left: 5 10 9 5\n(5) * (5) = 25, left: (5 * 5) = 25, 10, 9\n(9) - (10) = -1, left: (9 - 10) = -1, (5 * 5) = 25\n(25) + (-1) = 24, left: ((5 * 5) + (9 - 10)) = 24\nreach 24! expression: ((5 * 5) + (9 - 10))"}, {"input": "5 10 9 5\n", "output": "(9) * (5) = 45, left: (9 * 5) = 45, 5, 10\nroll back, left: 5 10 9 5\n(9) - (5) = 4, left: (9 - 5) = 4, 10, 5\nroll back, left: 5 10 9 5\n(5) * (9) = 45, left: (5 * 9) = 45, 10, 5\nroll back, left: 5 10 9 5\n(9) - (10) = -1, left: (9 - 10) = -1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (9 - 10) = -1\n(-1) + (25) = 24, left: ((9 - 10) + (5 * 5)) = 24\nreach 24! expression: ((9 - 10) + (5 * 5))"}, {"input": "5 10 9 5\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 9, 5\nroll back, left: 5 10 9 5\n(5) * (10) = 50, left: (5 * 10) = 50, 9, 5\nroll back, left: 5 10 9 5\n(10) - (5) = 5, left: (10 - 5) = 5, 9, 5\nroll back, left: 5 10 9 5\n(5) * (5) = 25, left: (5 * 5) = 25, 10, 9\n(25) - (10) = 15, left: ((5 * 5) - 10) = 15, 9\n(9) + (15) = 24, left: (9 + ((5 * 5) - 10)) = 24\nreach 24! expression: (9 + ((5 * 5) - 10))"}, {"input": "5 10 9 5\n", "output": "(10) / (9) = 10/9, left: (10 / 9) = 10/9, 5, 5\nroll back, left: 5 10 9 5\n(9) / (10) = 9/10, left: (9 / 10) = 9/10, 5, 5\n(5) / (5) = 1, left: (5 / 5) = 1, (9 / 10) = 9/10\nroll back, left: (9 / 10) = 9/10, 5, 5\nroll back, left: 5 10 9 5\n(9) - (10) = -1, left: (9 - 10) = -1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (9 - 10) = -1\n(-1) + (25) = 24, left: ((9 - 10) + (5 * 5)) = 24\nreach 24! expression: ((9 - 10) + (5 * 5))"}, {"input": "4 12 6 7\n", "output": "(12) * (6) = 72, left: (12 * 6) = 72, 4, 7\n(7) - (4) = 3, left: (7 - 4) = 3, (12 * 6) = 72\n(72) / (3) = 24, left: ((12 * 6) / (7 - 4)) = 24\nreach 24! expression: ((12 * 6) / (7 - 4))"}, {"input": "4 12 6 7\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 6, 7\n(7) - (3) = 4, left: (7 - (12 / 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (12 / 4))) = 24\nreach 24! expression: (6 * (7 - (12 / 4)))"}, {"input": "4 12 6 7\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 12, 6\n(12) * (6) = 72, left: (12 * 6) = 72, (7 - 4) = 3\n(72) / (3) = 24, left: ((12 * 6) / (7 - 4)) = 24\nreach 24! expression: ((12 * 6) / (7 - 4))"}, {"input": "4 12 6 7\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 12, 6\n(6) / (3) = 2, left: (6 / (7 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 / (7 - 4))) = 24\nreach 24! expression: (12 * (6 / (7 - 4)))"}, {"input": "4 12 6 7\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 12, 6\n(-3) - (12) = -15, left: ((4 - 7) - 12) = -15, 6\nroll back, left: (4 - 7) = -3, 12, 6\nroll back, left: 4 12 6 7\n(4) * (7) = 28, left: (4 * 7) = 28, 12, 6\nroll back, left: 4 12 6 7\n(7) - (4) = 3, left: (7 - 4) = 3, 12, 6\n(12) * (6) = 72, left: (12 * 6) = 72, (7 - 4) = 3\n(72) / (3) = 24, left: ((12 * 6) / (7 - 4)) = 24\nreach 24! expression: ((12 * 6) / (7 - 4))"}, {"input": "4 12 6 7\n", "output": "(4) + (12) = 16, left: (4 + 12) = 16, 6, 7\n(7) - (16) = -9, left: (7 - (4 + 12)) = -9, 6\nroll back, left: (4 + 12) = 16, 6, 7\nroll back, left: 4 12 6 7\n(12) - (4) = 8, left: (12 - 4) = 8, 6, 7\nroll back, left: 4 12 6 7\n(12) / (4) = 3, left: (12 / 4) = 3, 6, 7\n(7) - (3) = 4, left: (7 - (12 / 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (12 / 4))) = 24\nreach 24! expression: (6 * (7 - (12 / 4)))"}, {"input": "4 12 6 7\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 12, 6\n(6) - (3) = 3, left: (6 - (7 - 4)) = 3, 12\n(12) * (3) = 36, left: (12 * (6 - (7 - 4))) = 36\nroll back, left: (6 - (7 - 4)) = 3, 12\nroll back, left: (7 - 4) = 3, 12, 6\n(3) - (6) = -3, left: ((7 - 4) - 6) = -3, 12\nroll back, left: (7 - 4) = 3, 12, 6\n(6) / (3) = 2, left: (6 / (7 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 / (7 - 4))) = 24\nreach 24! expression: (12 * (6 / (7 - 4)))"}, {"input": "4 12 6 7\n", "output": "(4) + (7) = 11, left: (4 + 7) = 11, 12, 6\n(6) + (11) = 17, left: (6 + (4 + 7)) = 17, 12\n(12) / (17) = 12/17, left: (12 / (6 + (4 + 7))) = 12/17\nroll back, left: (6 + (4 + 7)) = 17, 12\nroll back, left: (4 + 7) = 11, 12, 6\nroll back, left: 4 12 6 7\n(7) - (4) = 3, left: (7 - 4) = 3, 12, 6\n(6) / (3) = 2, left: (6 / (7 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 / (7 - 4))) = 24\nreach 24! expression: (12 * (6 / (7 - 4)))"}, {"input": "4 12 6 7\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 12, 7\n(12) / (2/3) = 18, left: (12 / (4 / 6)) = 18, 7\n(7) * (18) = 126, left: (7 * (12 / (4 / 6))) = 126\nroll back, left: (12 / (4 / 6)) = 18, 7\nroll back, left: (4 / 6) = 2/3, 12, 7\nroll back, left: 4 12 6 7\n(12) * (6) = 72, left: (12 * 6) = 72, 4, 7\n(7) - (4) = 3, left: (7 - 4) = 3, (12 * 6) = 72\n(72) / (3) = 24, left: ((12 * 6) / (7 - 4)) = 24\nreach 24! expression: ((12 * 6) / (7 - 4))"}, {"input": "5 9 12 13\n", "output": "(5) + (13) = 18, left: (5 + 13) = 18, 9, 12\n(18) / (9) = 2, left: ((5 + 13) / 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((5 + 13) / 9)) = 24\nreach 24! expression: (12 * ((5 + 13) / 9))"}, {"input": "5 9 12 13\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 5, 13\n(5) - (13) = -8, left: (5 - 13) = -8, (9 - 12) = -3\n(-3) * (-8) = 24, left: ((9 - 12) * (5 - 13)) = 24\nreach 24! expression: ((9 - 12) * (5 - 13))"}, {"input": "5 9 12 13\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (13 - 5)) = 24\nreach 24! expression: ((12 - 9) * (13 - 5))"}, {"input": "5 9 12 13\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 5, 13\n(5) + (13) = 18, left: (5 + 13) = 18, (9 / 12) = 3/4\n(18) / (3/4) = 24, left: ((5 + 13) / (9 / 12)) = 24\nreach 24! expression: ((5 + 13) / (9 / 12))"}, {"input": "5 9 12 13\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 9, 12\n(9) - (12) = -3, left: (9 - 12) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (9 - 12)) = 24\nreach 24! expression: ((5 - 13) * (9 - 12))"}, {"input": "5 9 12 13\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 5, 12\nroll back, left: 5 9 12 13\n(9) - (13) = -4, left: (9 - 13) = -4, 5, 12\nroll back, left: 5 9 12 13\n(9) / (13) = 9/13, left: (9 / 13) = 9/13, 5, 12\nroll back, left: 5 9 12 13\n(5) + (13) = 18, left: (5 + 13) = 18, 9, 12\n(18) / (9) = 2, left: ((5 + 13) / 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((5 + 13) / 9)) = 24\nreach 24! expression: (12 * ((5 + 13) / 9))"}, {"input": "5 9 12 13\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 12, 13\n(12) + (-4) = 8, left: (12 + (5 - 9)) = 8, 13\nroll back, left: (5 - 9) = -4, 12, 13\nroll back, left: 5 9 12 13\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, 12, 13\nroll back, left: 5 9 12 13\n(9) - (12) = -3, left: (9 - 12) = -3, 5, 13\n(5) - (13) = -8, left: (5 - 13) = -8, (9 - 12) = -3\n(-3) * (-8) = 24, left: ((9 - 12) * (5 - 13)) = 24\nreach 24! expression: ((9 - 12) * (5 - 13))"}, {"input": "5 9 12 13\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 5, 12\n(5) + (12) = 17, left: (5 + 12) = 17, (13 - 9) = 4\nroll back, left: (13 - 9) = 4, 5, 12\nroll back, left: 5 9 12 13\n(5) / (13) = 5/13, left: (5 / 13) = 5/13, 9, 12\nroll back, left: 5 9 12 13\n(5) - (13) = -8, left: (5 - 13) = -8, 9, 12\n(9) - (12) = -3, left: (9 - 12) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (9 - 12)) = 24\nreach 24! expression: ((5 - 13) * (9 - 12))"}, {"input": "5 9 12 13\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 12, 13\n(14) / (12) = 7/6, left: ((5 + 9) / 12) = 7/6, 13\nroll back, left: (5 + 9) = 14, 12, 13\nroll back, left: 5 9 12 13\n(5) * (9) = 45, left: (5 * 9) = 45, 12, 13\nroll back, left: 5 9 12 13\n(12) - (9) = 3, left: (12 - 9) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (13 - 5)) = 24\nreach 24! expression: ((12 - 9) * (13 - 5))"}, {"input": "6 2 2 7\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 6, 2\n(2) * (9) = 18, left: (2 * (2 + 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (2 * (2 + 7))) = 24\nreach 24! expression: (6 + (2 * (2 + 7)))"}, {"input": "6 2 2 7\n", "output": "(6) + (7) = 13, left: (6 + 7) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (6 + 7)) = 26, 2\n(26) - (2) = 24, left: ((2 * (6 + 7)) - 2) = 24\nreach 24! expression: ((2 * (6 + 7)) - 2)"}, {"input": "6 2 2 7\n", "output": "(2) / (7) = 2/7, left: (2 / 7) = 2/7, 6, 2\n(2/7) / (2) = 1/7, left: ((2 / 7) / 2) = 1/7, 6\nroll back, left: (2 / 7) = 2/7, 6, 2\nroll back, left: 6 2 2 7\n(2) + (7) = 9, left: (2 + 7) = 9, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (2 + 7) = 9\nroll back, left: (2 + 7) = 9, 6, 2\n(2) * (9) = 18, left: (2 * (2 + 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (2 * (2 + 7))) = 24\nreach 24! expression: (6 + (2 * (2 + 7)))"}, {"input": "6 2 2 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 6, 2\nroll back, left: 6 2 2 7\n(2) / (7) = 2/7, left: (2 / 7) = 2/7, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (2 / 7) = 2/7\nroll back, left: (2 / 7) = 2/7, 6, 2\nroll back, left: 6 2 2 7\n(2) + (7) = 9, left: (2 + 7) = 9, 6, 2\n(2) * (9) = 18, left: (2 * (2 + 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (2 * (2 + 7))) = 24\nreach 24! expression: (6 + (2 * (2 + 7)))"}, {"input": "6 2 2 7\n", "output": "(2) - (6) = -4, left: (2 - 6) = -4, 2, 7\nroll back, left: 6 2 2 7\n(2) - (2) = 0, left: (2 - 2) = 0, 6, 7\nroll back, left: 6 2 2 7\n(2) + (2) = 4, left: (2 + 2) = 4, 6, 7\nroll back, left: 6 2 2 7\n(6) + (7) = 13, left: (6 + 7) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (6 + 7)) = 26, 2\n(26) - (2) = 24, left: ((2 * (6 + 7)) - 2) = 24\nreach 24! expression: ((2 * (6 + 7)) - 2)"}, {"input": "6 2 2 7\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 6, 7\nroll back, left: 6 2 2 7\n(2) + (2) = 4, left: (2 + 2) = 4, 6, 7\nroll back, left: 6 2 2 7\n(2) / (2) = 1, left: (2 / 2) = 1, 6, 7\nroll back, left: 6 2 2 7\n(2) + (7) = 9, left: (2 + 7) = 9, 6, 2\n(2) * (9) = 18, left: (2 * (2 + 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (2 * (2 + 7))) = 24\nreach 24! expression: (6 + (2 * (2 + 7)))"}, {"input": "6 2 2 7\n", "output": "(2) - (6) = -4, left: (2 - 6) = -4, 2, 7\nroll back, left: 6 2 2 7\n(6) * (7) = 42, left: (6 * 7) = 42, 2, 2\nroll back, left: 6 2 2 7\n(7) - (6) = 1, left: (7 - 6) = 1, 2, 2\nroll back, left: 6 2 2 7\n(6) + (7) = 13, left: (6 + 7) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (6 + 7)) = 26, 2\n(26) - (2) = 24, left: ((2 * (6 + 7)) - 2) = 24\nreach 24! expression: ((2 * (6 + 7)) - 2)"}, {"input": "1 8 6 2\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 1, 8\n(8) * (3) = 24, left: (8 * (6 / 2)) = 24, 1\n(24) / (1) = 24, left: ((8 * (6 / 2)) / 1) = 24\nreach 24! expression: ((8 * (6 / 2)) / 1)"}, {"input": "1 8 6 2\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 1, 8\n(8) / (1/3) = 24, left: (8 / (2 / 6)) = 24, 1\n(24) / (1) = 24, left: ((8 / (2 / 6)) / 1) = 24\nreach 24! expression: ((8 / (2 / 6)) / 1)"}, {"input": "1 8 6 2\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 1, 8\n(1/3) / (8) = 1/24, left: ((2 / 6) / 8) = 1/24, 1\n(1) / (1/24) = 24, left: (1 / ((2 / 6) / 8)) = 24\nreach 24! expression: (1 / ((2 / 6) / 8))"}, {"input": "1 8 6 2\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 1, 8\n(8) * (3) = 24, left: (8 * (6 / 2)) = 24, 1\n(1) * (24) = 24, left: (1 * (8 * (6 / 2))) = 24\nreach 24! expression: (1 * (8 * (6 / 2)))"}, {"input": "1 8 6 2\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (1 + 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (1 + 2))) = 24\nreach 24! expression: (8 * (6 - (1 + 2)))"}, {"input": "1 8 6 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 1, 8\nroll back, left: 1 8 6 2\n(6) / (2) = 3, left: (6 / 2) = 3, 1, 8\n(8) / (3) = 8/3, left: (8 / (6 / 2)) = 8/3, 1\n(1) * (8/3) = 8/3, left: (1 * (8 / (6 / 2))) = 8/3\nroll back, left: (8 / (6 / 2)) = 8/3, 1\nroll back, left: (6 / 2) = 3, 1, 8\n(8) * (3) = 24, left: (8 * (6 / 2)) = 24, 1\n(24) / (1) = 24, left: ((8 * (6 / 2)) / 1) = 24\nreach 24! expression: ((8 * (6 / 2)) / 1)"}, {"input": "1 8 6 2\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 8, 6\n(8) + (6) = 14, left: (8 + 6) = 14, (1 + 2) = 3\nroll back, left: (1 + 2) = 3, 8, 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, (1 + 2) = 3\nroll back, left: (1 + 2) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (1 + 2)) = 3, 8\n(8) + (3) = 11, left: (8 + (6 - (1 + 2))) = 11\nroll back, left: (6 - (1 + 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (1 + 2))) = 24\nreach 24! expression: (8 * (6 - (1 + 2)))"}, {"input": "1 8 6 2\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 1, 8\n(3) / (8) = 3/8, left: ((6 / 2) / 8) = 3/8, 1\n(1) * (3/8) = 3/8, left: (1 * ((6 / 2) / 8)) = 3/8\nroll back, left: ((6 / 2) / 8) = 3/8, 1\nroll back, left: (6 / 2) = 3, 1, 8\n(8) - (3) = 5, left: (8 - (6 / 2)) = 5, 1\nroll back, left: (6 / 2) = 3, 1, 8\n(8) * (3) = 24, left: (8 * (6 / 2)) = 24, 1\n(1) * (24) = 24, left: (1 * (8 * (6 / 2))) = 24\nreach 24! expression: (1 * (8 * (6 / 2)))"}, {"input": "1 8 6 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 1, 8\n(1) - (8) = -7, left: (1 - (6 + 2)) = -7, 8\nroll back, left: (6 + 2) = 8, 1, 8\n(8) * (8) = 64, left: (8 * (6 + 2)) = 64, 1\nroll back, left: (6 + 2) = 8, 1, 8\nroll back, left: 1 8 6 2\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, 1, 8\n(8) / (1/3) = 24, left: (8 / (2 / 6)) = 24, 1\n(24) / (1) = 24, left: ((8 / (2 / 6)) / 1) = 24\nreach 24! expression: ((8 / (2 / 6)) / 1)"}, {"input": "4 2 13 6\n", "output": "(4) - (6) = -2, left: (4 - 6) = -2, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (4 - 6) = -2\n(-2) + (26) = 24, left: ((4 - 6) + (2 * 13)) = 24\nreach 24! expression: ((4 - 6) + (2 * 13))"}, {"input": "4 2 13 6\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (6 - 4) = 2\n(26) - (2) = 24, left: ((2 * 13) - (6 - 4)) = 24\nreach 24! expression: ((2 * 13) - (6 - 4))"}, {"input": "4 2 13 6\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 4, 6\n(26) - (6) = 20, left: ((2 * 13) - 6) = 20, 4\n(4) + (20) = 24, left: (4 + ((2 * 13) - 6)) = 24\nreach 24! expression: (4 + ((2 * 13) - 6))"}, {"input": "4 2 13 6\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 2, 6\n(2) * (-9) = -18, left: (2 * (4 - 13)) = -18, 6\n(6) - (-18) = 24, left: (6 - (2 * (4 - 13))) = 24\nreach 24! expression: (6 - (2 * (4 - 13)))"}, {"input": "4 2 13 6\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 4, 6\n(6) - (4) = 2, left: (6 - 4) = 2, (2 * 13) = 26\n(26) - (2) = 24, left: ((2 * 13) - (6 - 4)) = 24\nreach 24! expression: ((2 * 13) - (6 - 4))"}, {"input": "4 2 13 6\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 13, 6\nroll back, left: 4 2 13 6\n(2) * (6) = 12, left: (2 * 6) = 12, 4, 13\nroll back, left: 4 2 13 6\n(2) - (6) = -4, left: (2 - 6) = -4, 4, 13\nroll back, left: 4 2 13 6\n(4) - (13) = -9, left: (4 - 13) = -9, 2, 6\n(2) * (-9) = -18, left: (2 * (4 - 13)) = -18, 6\n(6) - (-18) = 24, left: (6 - (2 * (4 - 13))) = 24\nreach 24! expression: (6 - (2 * (4 - 13)))"}, {"input": "4 2 13 6\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 13, 6\nroll back, left: 4 2 13 6\n(2) - (4) = -2, left: (2 - 4) = -2, 13, 6\n(6) / (-2) = -3, left: (6 / (2 - 4)) = -3, 13\nroll back, left: (2 - 4) = -2, 13, 6\nroll back, left: 4 2 13 6\n(6) - (4) = 2, left: (6 - 4) = 2, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (6 - 4) = 2\n(26) - (2) = 24, left: ((2 * 13) - (6 - 4)) = 24\nreach 24! expression: ((2 * 13) - (6 - 4))"}, {"input": "4 2 13 6\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 13, 6\nroll back, left: 4 2 13 6\n(4) - (2) = 2, left: (4 - 2) = 2, 13, 6\n(2) - (6) = -4, left: ((4 - 2) - 6) = -4, 13\nroll back, left: (4 - 2) = 2, 13, 6\nroll back, left: 4 2 13 6\n(4) - (6) = -2, left: (4 - 6) = -2, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (4 - 6) = -2\n(-2) + (26) = 24, left: ((4 - 6) + (2 * 13)) = 24\nreach 24! expression: ((4 - 6) + (2 * 13))"}, {"input": "4 2 13 6\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 4, 13\nroll back, left: 4 2 13 6\n(13) / (2) = 13/2, left: (13 / 2) = 13/2, 4, 6\n(6) * (13/2) = 39, left: (6 * (13 / 2)) = 39, 4\nroll back, left: (13 / 2) = 13/2, 4, 6\nroll back, left: 4 2 13 6\n(2) * (13) = 26, left: (2 * 13) = 26, 4, 6\n(6) - (4) = 2, left: (6 - 4) = 2, (2 * 13) = 26\n(26) - (2) = 24, left: ((2 * 13) - (6 - 4)) = 24\nreach 24! expression: ((2 * 13) - (6 - 4))"}, {"input": "4 2 13 6\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 4, 6\n(4) * (11) = 44, left: (4 * (13 - 2)) = 44, 6\nroll back, left: (13 - 2) = 11, 4, 6\n(6) * (11) = 66, left: (6 * (13 - 2)) = 66, 4\nroll back, left: (13 - 2) = 11, 4, 6\nroll back, left: 4 2 13 6\n(2) * (13) = 26, left: (2 * 13) = 26, 4, 6\n(26) - (6) = 20, left: ((2 * 13) - 6) = 20, 4\n(4) + (20) = 24, left: (4 + ((2 * 13) - 6)) = 24\nreach 24! expression: (4 + ((2 * 13) - 6))"}, {"input": "11 5 2 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (5 / 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (5 / 5))) = 24\nreach 24! expression: (2 * (11 + (5 / 5)))"}, {"input": "11 5 2 5\n", "output": "(5) + (2) = 7, left: (5 + 2) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (5 + 2)) = 35, 11\n(35) - (11) = 24, left: ((5 * (5 + 2)) - 11) = 24\nreach 24! expression: ((5 * (5 + 2)) - 11)"}, {"input": "11 5 2 5\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (2 + 5)) = 35, 11\n(35) - (11) = 24, left: ((5 * (2 + 5)) - 11) = 24\nreach 24! expression: ((5 * (2 + 5)) - 11)"}, {"input": "11 5 2 5\n", "output": "(11) / (5) = 11/5, left: (11 / 5) = 11/5, 2, 5\n(11/5) / (5) = 11/25, left: ((11 / 5) / 5) = 11/25, 2\nroll back, left: (11 / 5) = 11/5, 2, 5\nroll back, left: 11 5 2 5\n(11) + (5) = 16, left: (11 + 5) = 16, 2, 5\nroll back, left: 11 5 2 5\n(5) / (5) = 1, left: (5 / 5) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (5 / 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (5 / 5))) = 24\nreach 24! expression: (2 * (11 + (5 / 5)))"}, {"input": "11 5 2 5\n", "output": "(11) / (5) = 11/5, left: (11 / 5) = 11/5, 5, 2\nroll back, left: 11 5 2 5\n(5) - (2) = 3, left: (5 - 2) = 3, 11, 5\nroll back, left: 11 5 2 5\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 11, 5\nroll back, left: 11 5 2 5\n(5) + (2) = 7, left: (5 + 2) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (5 + 2)) = 35, 11\n(35) - (11) = 24, left: ((5 * (5 + 2)) - 11) = 24\nreach 24! expression: ((5 * (5 + 2)) - 11)"}, {"input": "11 5 2 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 11, 5\nroll back, left: 11 5 2 5\n(2) + (5) = 7, left: (2 + 5) = 7, 11, 5\n(7) - (11) = -4, left: ((2 + 5) - 11) = -4, 5\nroll back, left: (2 + 5) = 7, 11, 5\n(11) / (5) = 11/5, left: (11 / 5) = 11/5, (2 + 5) = 7\nroll back, left: (2 + 5) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (2 + 5)) = 35, 11\n(35) - (11) = 24, left: ((5 * (2 + 5)) - 11) = 24\nreach 24! expression: ((5 * (2 + 5)) - 11)"}, {"input": "11 5 2 5\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 5, 2\nroll back, left: 11 5 2 5\n(5) / (11) = 5/11, left: (5 / 11) = 5/11, 5, 2\nroll back, left: 11 5 2 5\n(11) / (2) = 11/2, left: (11 / 2) = 11/2, 5, 5\nroll back, left: 11 5 2 5\n(5) + (2) = 7, left: (5 + 2) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (5 + 2)) = 35, 11\n(35) - (11) = 24, left: ((5 * (5 + 2)) - 11) = 24\nreach 24! expression: ((5 * (5 + 2)) - 11)"}, {"input": "11 5 2 5\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (5 - 5) = 0\nroll back, left: (5 - 5) = 0, 11, 2\nroll back, left: 11 5 2 5\n(5) / (5) = 1, left: (5 / 5) = 1, 11, 2\n(11) + (2) = 13, left: (11 + 2) = 13, (5 / 5) = 1\nroll back, left: (5 / 5) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (5 / 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (5 / 5))) = 24\nreach 24! expression: (2 * (11 + (5 / 5)))"}, {"input": "6 6 1 13\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 6, 13\n(-5) - (6) = -11, left: ((1 - 6) - 6) = -11, 13\n(13) - (-11) = 24, left: (13 - ((1 - 6) - 6)) = 24\nreach 24! expression: (13 - ((1 - 6) - 6))"}, {"input": "6 6 1 13\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 1, 13\n(1) + (36) = 37, left: (1 + (6 * 6)) = 37, 13\n(37) - (13) = 24, left: ((1 + (6 * 6)) - 13) = 24\nreach 24! expression: ((1 + (6 * 6)) - 13)"}, {"input": "6 6 1 13\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 6, 13\n(6) + (13) = 19, left: (6 + 13) = 19, (6 - 1) = 5\n(5) + (19) = 24, left: ((6 - 1) + (6 + 13)) = 24\nreach 24! expression: ((6 - 1) + (6 + 13))"}, {"input": "6 6 1 13\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 6, 1\n(6) - (1) = 5, left: (6 - 1) = 5, (6 + 13) = 19\n(19) + (5) = 24, left: ((6 + 13) + (6 - 1)) = 24\nreach 24! expression: ((6 + 13) + (6 - 1))"}, {"input": "6 6 1 13\n", "output": "(6) * (13) = 78, left: (6 * 13) = 78, 6, 1\nroll back, left: 6 6 1 13\n(6) / (13) = 6/13, left: (6 / 13) = 6/13, 6, 1\n(6) + (6/13) = 84/13, left: (6 + (6 / 13)) = 84/13, 1\nroll back, left: (6 / 13) = 6/13, 6, 1\nroll back, left: 6 6 1 13\n(6) + (13) = 19, left: (6 + 13) = 19, 6, 1\n(6) - (1) = 5, left: (6 - 1) = 5, (6 + 13) = 19\n(19) + (5) = 24, left: ((6 + 13) + (6 - 1)) = 24\nreach 24! expression: ((6 + 13) + (6 - 1))"}, {"input": "6 6 1 13\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 6, 13\nroll back, left: 6 6 1 13\n(6) + (1) = 7, left: (6 + 1) = 7, 6, 13\n(6) / (13) = 6/13, left: (6 / 13) = 6/13, (6 + 1) = 7\nroll back, left: (6 + 1) = 7, 6, 13\nroll back, left: 6 6 1 13\n(1) - (6) = -5, left: (1 - 6) = -5, 6, 13\n(-5) - (6) = -11, left: ((1 - 6) - 6) = -11, 13\n(13) - (-11) = 24, left: (13 - ((1 - 6) - 6)) = 24\nreach 24! expression: (13 - ((1 - 6) - 6))"}, {"input": "6 6 1 13\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 6, 13\nroll back, left: 6 6 1 13\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, 6, 13\n(1/6) / (13) = 1/78, left: ((1 / 6) / 13) = 1/78, 6\nroll back, left: (1 / 6) = 1/6, 6, 13\nroll back, left: 6 6 1 13\n(6) - (1) = 5, left: (6 - 1) = 5, 6, 13\n(6) + (13) = 19, left: (6 + 13) = 19, (6 - 1) = 5\n(5) + (19) = 24, left: ((6 - 1) + (6 + 13)) = 24\nreach 24! expression: ((6 - 1) + (6 + 13))"}, {"input": "3 3 10 13\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 10, 13\n(10) + (13) = 23, left: (10 + 13) = 23, (3 / 3) = 1\n(1) + (23) = 24, left: ((3 / 3) + (10 + 13)) = 24\nreach 24! expression: ((3 / 3) + (10 + 13))"}, {"input": "3 3 10 13\n", "output": "(10) + (13) = 23, left: (10 + 13) = 23, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (10 + 13) = 23\n(23) + (1) = 24, left: ((10 + 13) + (3 / 3)) = 24\nreach 24! expression: ((10 + 13) + (3 / 3))"}, {"input": "3 3 10 13\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 10, 13\n(10) + (1) = 11, left: (10 + (3 / 3)) = 11, 13\n(13) + (11) = 24, left: (13 + (10 + (3 / 3))) = 24\nreach 24! expression: (13 + (10 + (3 / 3)))"}, {"input": "3 3 10 13\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 3, 13\n(3) * (13) = 39, left: (3 * 13) = 39, (3 * 10) = 30\nroll back, left: (3 * 10) = 30, 3, 13\nroll back, left: 3 3 10 13\n(3) / (10) = 3/10, left: (3 / 10) = 3/10, 3, 13\nroll back, left: 3 3 10 13\n(3) / (3) = 1, left: (3 / 3) = 1, 10, 13\n(10) + (1) = 11, left: (10 + (3 / 3)) = 11, 13\n(13) + (11) = 24, left: (13 + (10 + (3 / 3))) = 24\nreach 24! expression: (13 + (10 + (3 / 3)))"}, {"input": "3 3 10 13\n", "output": "(3) * (13) = 39, left: (3 * 13) = 39, 3, 10\n(3) - (10) = -7, left: (3 - 10) = -7, (3 * 13) = 39\nroll back, left: (3 * 13) = 39, 3, 10\nroll back, left: 3 3 10 13\n(3) - (3) = 0, left: (3 - 3) = 0, 10, 13\nroll back, left: 3 3 10 13\n(3) / (3) = 1, left: (3 / 3) = 1, 10, 13\n(10) + (13) = 23, left: (10 + 13) = 23, (3 / 3) = 1\n(1) + (23) = 24, left: ((3 / 3) + (10 + 13)) = 24\nreach 24! expression: ((3 / 3) + (10 + 13))"}, {"input": "3 3 10 13\n", "output": "(10) / (13) = 10/13, left: (10 / 13) = 10/13, 3, 3\nroll back, left: 3 3 10 13\n(13) - (10) = 3, left: (13 - 10) = 3, 3, 3\n(3) - (3) = 0, left: (3 - (13 - 10)) = 0, 3\nroll back, left: (13 - 10) = 3, 3, 3\nroll back, left: 3 3 10 13\n(10) + (13) = 23, left: (10 + 13) = 23, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (10 + 13) = 23\n(23) + (1) = 24, left: ((10 + 13) + (3 / 3)) = 24\nreach 24! expression: ((10 + 13) + (3 / 3))"}, {"input": "3 3 10 13\n", "output": "(3) + (13) = 16, left: (3 + 13) = 16, 3, 10\nroll back, left: 3 3 10 13\n(3) + (10) = 13, left: (3 + 10) = 13, 3, 13\nroll back, left: 3 3 10 13\n(3) * (10) = 30, left: (3 * 10) = 30, 3, 13\nroll back, left: 3 3 10 13\n(10) + (13) = 23, left: (10 + 13) = 23, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (10 + 13) = 23\n(23) + (1) = 24, left: ((10 + 13) + (3 / 3)) = 24\nreach 24! expression: ((10 + 13) + (3 / 3))"}, {"input": "4 10 13 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 10, 13\n(10) + (1) = 11, left: (10 + (4 / 4)) = 11, 13\n(13) + (11) = 24, left: (13 + (10 + (4 / 4))) = 24\nreach 24! expression: (13 + (10 + (4 / 4)))"}, {"input": "4 10 13 4\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 10, 13\n(13) - (10) = 3, left: (13 - 10) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (13 - 10)) = 24\nreach 24! expression: ((4 + 4) * (13 - 10))"}, {"input": "4 10 13 4\n", "output": "(10) + (13) = 23, left: (10 + 13) = 23, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (10 + 13) = 23\n(23) + (1) = 24, left: ((10 + 13) + (4 / 4)) = 24\nreach 24! expression: ((10 + 13) + (4 / 4))"}, {"input": "4 10 13 4\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 10, 4\nroll back, left: 4 10 13 4\n(4) + (13) = 17, left: (4 + 13) = 17, 10, 4\nroll back, left: 4 10 13 4\n(4) - (4) = 0, left: (4 - 4) = 0, 10, 13\nroll back, left: 4 10 13 4\n(4) / (4) = 1, left: (4 / 4) = 1, 10, 13\n(10) + (1) = 11, left: (10 + (4 / 4)) = 11, 13\n(13) + (11) = 24, left: (13 + (10 + (4 / 4))) = 24\nreach 24! expression: (13 + (10 + (4 / 4)))"}, {"input": "4 10 13 4\n", "output": "(4) * (13) = 52, left: (4 * 13) = 52, 10, 4\n(10) + (4) = 14, left: (10 + 4) = 14, (4 * 13) = 52\nroll back, left: (4 * 13) = 52, 10, 4\nroll back, left: 4 10 13 4\n(4) - (13) = -9, left: (4 - 13) = -9, 10, 4\nroll back, left: 4 10 13 4\n(10) + (13) = 23, left: (10 + 13) = 23, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (10 + 13) = 23\n(23) + (1) = 24, left: ((10 + 13) + (4 / 4)) = 24\nreach 24! expression: ((10 + 13) + (4 / 4))"}, {"input": "4 10 13 4\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 4, 13\nroll back, left: 4 10 13 4\n(13) - (4) = 9, left: (13 - 4) = 9, 10, 4\nroll back, left: 4 10 13 4\n(4) / (13) = 4/13, left: (4 / 13) = 4/13, 10, 4\nroll back, left: 4 10 13 4\n(4) + (4) = 8, left: (4 + 4) = 8, 10, 13\n(13) - (10) = 3, left: (13 - 10) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (13 - 10)) = 24\nreach 24! expression: ((4 + 4) * (13 - 10))"}, {"input": "6 2 11 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (6 / 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (6 / 6))) = 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 2, 6\n(-5) - (2) = -7, left: ((6 - 11) - 2) = -7, 6\nroll back, left: (6 - 11) = -5, 2, 6\nroll back, left: 6 2 11 6\n(11) - (6) = 5, left: (11 - 6) = 5, 2, 6\nroll back, left: 6 2 11 6\n(6) / (6) = 1, left: (6 / 6) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (6 / 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (6 / 6))) = 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 2, 11\n(2) * (1) = 2, left: (2 * (6 / 6)) = 2, 11\nroll back, left: (6 / 6) = 1, 2, 11\n(2) - (1) = 1, left: (2 - (6 / 6)) = 1, 11\nroll back, left: (6 / 6) = 1, 2, 11\n(2) / (1) = 2, left: (2 / (6 / 6)) = 2, 11\nroll back, left: (6 / 6) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (6 / 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (6 / 6))) = 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 2, 6\n(6) - (2) = 4, left: (6 - 2) = 4, (11 - 6) = 5\n(4) - (5) = -1, left: ((6 - 2) - (11 - 6)) = -1\nroll back, left: (6 - 2) = 4, (11 - 6) = 5\nroll back, left: (11 - 6) = 5, 2, 6\nroll back, left: 6 2 11 6\n(6) / (6) = 1, left: (6 / 6) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (6 / 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (6 / 6))) = 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(11) / (6) = 11/6, left: (11 / 6) = 11/6, 6, 2\nroll back, left: 6 2 11 6\n(11) * (6) = 66, left: (11 * 6) = 66, 6, 2\nroll back, left: 6 2 11 6\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, 6, 11\nroll back, left: 6 2 11 6\n(6) / (6) = 1, left: (6 / 6) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (6 / 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (6 / 6))) = 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "6 2 11 6\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 2, 6\nroll back, left: 6 2 11 6\n(6) / (6) = 1, left: (6 / 6) = 1, 2, 11\n(2) + (1) = 3, left: (2 + (6 / 6)) = 3, 11\n(11) + (3) = 14, left: (11 + (2 + (6 / 6))) = 14\nroll back, left: (2 + (6 / 6)) = 3, 11\nroll back, left: (6 / 6) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (6 / 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (6 / 6))) = 24\nreach 24! expression: (2 * (11 + (6 / 6)))"}, {"input": "1 6 12 1\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (1 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (1 + 1))) = 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 1, 1\nroll back, left: 1 6 12 1\n(1) / (1) = 1, left: (1 / 1) = 1, 6, 12\n(6) - (1) = 5, left: (6 - (1 / 1)) = 5, 12\nroll back, left: (1 / 1) = 1, 6, 12\nroll back, left: 1 6 12 1\n(1) + (1) = 2, left: (1 + 1) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (1 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (1 + 1))) = 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(1) / (12) = 1/12, left: (1 / 12) = 1/12, 6, 1\nroll back, left: 1 6 12 1\n(1) - (6) = -5, left: (1 - 6) = -5, 12, 1\n(1) - (12) = -11, left: (1 - 12) = -11, (1 - 6) = -5\nroll back, left: (1 - 6) = -5, 12, 1\nroll back, left: 1 6 12 1\n(1) + (1) = 2, left: (1 + 1) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (1 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (1 + 1))) = 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 1, 1\nroll back, left: 1 6 12 1\n(12) * (1) = 12, left: (12 * 1) = 12, 1, 6\nroll back, left: 1 6 12 1\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, 1, 6\nroll back, left: 1 6 12 1\n(1) + (1) = 2, left: (1 + 1) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (1 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (1 + 1))) = 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 1, 6\nroll back, left: 1 6 12 1\n(1) / (1) = 1, left: (1 / 1) = 1, 6, 12\nroll back, left: 1 6 12 1\n(1) * (1) = 1, left: (1 * 1) = 1, 6, 12\nroll back, left: 1 6 12 1\n(1) + (1) = 2, left: (1 + 1) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (1 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (1 + 1))) = 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "1 6 12 1\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 6, 1\n(6) * (1) = 6, left: (6 * 1) = 6, (12 / 1) = 12\nroll back, left: (12 / 1) = 12, 6, 1\nroll back, left: 1 6 12 1\n(12) / (1) = 12, left: (12 / 1) = 12, 1, 6\nroll back, left: 1 6 12 1\n(1) + (1) = 2, left: (1 + 1) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (1 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (1 + 1))) = 24\nreach 24! expression: (12 + (6 * (1 + 1)))"}, {"input": "7 8 8 4\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 7, 8\n(7) - (4) = 3, left: (7 - (8 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (8 - 4))) = 24\nreach 24! expression: (8 * (7 - (8 - 4)))"}, {"input": "7 8 8 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 7, 8\n(7) + (-4) = 3, left: (7 + (4 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 + (4 - 8))) = 24\nreach 24! expression: (8 * (7 + (4 - 8)))"}, {"input": "7 8 8 4\n", "output": "(7) * (8) = 56, left: (7 * 8) = 56, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (7 * 8) = 56\n(56) - (32) = 24, left: ((7 * 8) - (8 * 4)) = 24\nreach 24! expression: ((7 * 8) - (8 * 4))"}, {"input": "7 8 8 4\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 8, 4\n(4) + (-1) = 3, left: (4 + (7 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 + (7 - 8))) = 24\nreach 24! expression: (8 * (4 + (7 - 8)))"}, {"input": "7 8 8 4\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 7, 8\n(1/2) / (8) = 1/16, left: ((4 / 8) / 8) = 1/16, 7\nroll back, left: (4 / 8) = 1/2, 7, 8\n(8) / (1/2) = 16, left: (8 / (4 / 8)) = 16, 7\nroll back, left: (4 / 8) = 1/2, 7, 8\nroll back, left: 7 8 8 4\n(8) - (4) = 4, left: (8 - 4) = 4, 7, 8\n(7) - (4) = 3, left: (7 - (8 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (8 - 4))) = 24\nreach 24! expression: (8 * (7 - (8 - 4)))"}, {"input": "7 8 8 4\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 8, 4\n(-1) - (8) = -9, left: ((7 - 8) - 8) = -9, 4\nroll back, left: (7 - 8) = -1, 8, 4\n(-1) / (4) = -1/4, left: ((7 - 8) / 4) = -1/4, 8\n(8) + (-1/4) = 31/4, left: (8 + ((7 - 8) / 4)) = 31/4\nroll back, left: ((7 - 8) / 4) = -1/4, 8\nroll back, left: (7 - 8) = -1, 8, 4\n(4) + (-1) = 3, left: (4 + (7 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 + (7 - 8))) = 24\nreach 24! expression: (8 * (4 + (7 - 8)))"}, {"input": "7 8 8 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 7, 8\n(8) / (2) = 4, left: (8 / (8 / 4)) = 4, 7\nroll back, left: (8 / 4) = 2, 7, 8\nroll back, left: 7 8 8 4\n(8) + (4) = 12, left: (8 + 4) = 12, 7, 8\nroll back, left: 7 8 8 4\n(4) - (8) = -4, left: (4 - 8) = -4, 7, 8\n(7) + (-4) = 3, left: (7 + (4 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 + (4 - 8))) = 24\nreach 24! expression: (8 * (7 + (4 - 8)))"}, {"input": "7 8 8 4\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 8, 4\nroll back, left: 7 8 8 4\n(8) / (7) = 8/7, left: (8 / 7) = 8/7, 8, 4\n(8) + (8/7) = 64/7, left: (8 + (8 / 7)) = 64/7, 4\nroll back, left: (8 / 7) = 8/7, 8, 4\nroll back, left: 7 8 8 4\n(7) * (8) = 56, left: (7 * 8) = 56, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (7 * 8) = 56\n(56) - (32) = 24, left: ((7 * 8) - (8 * 4)) = 24\nreach 24! expression: ((7 * 8) - (8 * 4))"}, {"input": "7 8 8 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 7, 8\n(8) + (-4) = 4, left: (8 + (4 - 8)) = 4, 7\nroll back, left: (4 - 8) = -4, 7, 8\n(8) / (-4) = -2, left: (8 / (4 - 8)) = -2, 7\n(7) + (-2) = 5, left: (7 + (8 / (4 - 8))) = 5\nroll back, left: (8 / (4 - 8)) = -2, 7\nroll back, left: (4 - 8) = -4, 7, 8\n(7) + (-4) = 3, left: (7 + (4 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 + (4 - 8))) = 24\nreach 24! expression: (8 * (7 + (4 - 8)))"}, {"input": "4 13 12 6\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 4, 6\n(6) * (1) = 6, left: (6 * (13 - 12)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 * (13 - 12))) = 24\nreach 24! expression: (4 * (6 * (13 - 12)))"}, {"input": "4 13 12 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 13, 12\n(13) - (12) = 1, left: (13 - 12) = 1, (4 * 6) = 24\n(24) * (1) = 24, left: ((4 * 6) * (13 - 12)) = 24\nreach 24! expression: ((4 * 6) * (13 - 12))"}, {"input": "4 13 12 6\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 4, 6\n(1) / (6) = 1/6, left: ((13 - 12) / 6) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / ((13 - 12) / 6)) = 24\nreach 24! expression: (4 / ((13 - 12) / 6))"}, {"input": "4 13 12 6\n", "output": "(12) + (6) = 18, left: (12 + 6) = 18, 4, 13\n(4) + (18) = 22, left: (4 + (12 + 6)) = 22, 13\nroll back, left: (12 + 6) = 18, 4, 13\nroll back, left: 4 13 12 6\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 4, 13\nroll back, left: 4 13 12 6\n(13) - (12) = 1, left: (13 - 12) = 1, 4, 6\n(1) / (6) = 1/6, left: ((13 - 12) / 6) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / ((13 - 12) / 6)) = 24\nreach 24! expression: (4 / ((13 - 12) / 6))"}, {"input": "4 13 12 6\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 13, 6\n(48) - (13) = 35, left: ((4 * 12) - 13) = 35, 6\nroll back, left: (4 * 12) = 48, 13, 6\nroll back, left: 4 13 12 6\n(13) - (6) = 7, left: (13 - 6) = 7, 4, 12\nroll back, left: 4 13 12 6\n(13) - (12) = 1, left: (13 - 12) = 1, 4, 6\n(6) * (1) = 6, left: (6 * (13 - 12)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 * (13 - 12))) = 24\nreach 24! expression: (4 * (6 * (13 - 12)))"}, {"input": "8 8 10 6\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 8, 10\n(10) - (8) = 2, left: (10 - 8) = 2, (8 * 6) = 48\n(48) / (2) = 24, left: ((8 * 6) / (10 - 8)) = 24\nreach 24! expression: ((8 * 6) / (10 - 8))"}, {"input": "8 8 10 6\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 8, 6\n(8) / (2) = 4, left: (8 / (10 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 / (10 - 8))) = 24\nreach 24! expression: (6 * (8 / (10 - 8)))"}, {"input": "8 8 10 6\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (10 - 6)) = 32, 8\n(32) - (8) = 24, left: ((8 * (10 - 6)) - 8) = 24\nreach 24! expression: ((8 * (10 - 6)) - 8)"}, {"input": "8 8 10 6\n", "output": "(8) / (10) = 4/5, left: (8 / 10) = 4/5, 8, 6\nroll back, left: 8 8 10 6\n(8) - (10) = -2, left: (8 - 10) = -2, 8, 6\nroll back, left: 8 8 10 6\n(8) * (10) = 80, left: (8 * 10) = 80, 8, 6\nroll back, left: 8 8 10 6\n(10) - (8) = 2, left: (10 - 8) = 2, 8, 6\n(8) / (2) = 4, left: (8 / (10 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 / (10 - 8))) = 24\nreach 24! expression: (6 * (8 / (10 - 8)))"}, {"input": "8 8 10 6\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 8, 6\n(2) - (8) = -6, left: ((10 - 8) - 8) = -6, 6\nroll back, left: (10 - 8) = 2, 8, 6\n(8) - (2) = 6, left: (8 - (10 - 8)) = 6, 6\nroll back, left: (10 - 8) = 2, 8, 6\n(8) * (2) = 16, left: (8 * (10 - 8)) = 16, 6\nroll back, left: (10 - 8) = 2, 8, 6\n(8) / (2) = 4, left: (8 / (10 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 / (10 - 8))) = 24\nreach 24! expression: (6 * (8 / (10 - 8)))"}, {"input": "8 8 10 6\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 8, 10\n(10) - (8) = 2, left: (10 - 8) = 2, (8 * 6) = 48\n(48) + (2) = 50, left: ((8 * 6) + (10 - 8)) = 50\nroll back, left: (10 - 8) = 2, (8 * 6) = 48\n(48) / (2) = 24, left: ((8 * 6) / (10 - 8)) = 24\nreach 24! expression: ((8 * 6) / (10 - 8))"}, {"input": "8 8 10 6\n", "output": "(10) + (6) = 16, left: (10 + 6) = 16, 8, 8\nroll back, left: 8 8 10 6\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, 8, 8\n(8) * (5/3) = 40/3, left: (8 * (10 / 6)) = 40/3, 8\nroll back, left: (10 / 6) = 5/3, 8, 8\nroll back, left: 8 8 10 6\n(10) - (6) = 4, left: (10 - 6) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (10 - 6)) = 32, 8\n(32) - (8) = 24, left: ((8 * (10 - 6)) - 8) = 24\nreach 24! expression: ((8 * (10 - 6)) - 8)"}, {"input": "8 8 10 6\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 8, 10\n(10) - (8) = 2, left: (10 - 8) = 2, (8 * 6) = 48\n(48) + (2) = 50, left: ((8 * 6) + (10 - 8)) = 50\nroll back, left: (10 - 8) = 2, (8 * 6) = 48\n(48) / (2) = 24, left: ((8 * 6) / (10 - 8)) = 24\nreach 24! expression: ((8 * 6) / (10 - 8))"}, {"input": "8 8 10 6\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 8, 10\n(10) - (8) = 2, left: (10 - 8) = 2, (8 * 6) = 48\n(48) + (2) = 50, left: ((8 * 6) + (10 - 8)) = 50\nroll back, left: (10 - 8) = 2, (8 * 6) = 48\n(48) / (2) = 24, left: ((8 * 6) / (10 - 8)) = 24\nreach 24! expression: ((8 * 6) / (10 - 8))"}, {"input": "8 8 10 6\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 8, 10\n(10) - (8) = 2, left: (10 - 8) = 2, (8 * 6) = 48\n(48) + (2) = 50, left: ((8 * 6) + (10 - 8)) = 50\nroll back, left: (10 - 8) = 2, (8 * 6) = 48\n(48) / (2) = 24, left: ((8 * 6) / (10 - 8)) = 24\nreach 24! expression: ((8 * 6) / (10 - 8))"}, {"input": "9 4 10 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 4, 10\n(10) - (4) = 6, left: (10 - (9 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 - (9 - 5))) = 24\nreach 24! expression: (4 * (10 - (9 - 5)))"}, {"input": "9 4 10 5\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (9 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (9 - 10))) = 24\nreach 24! expression: (4 * (5 - (9 - 10)))"}, {"input": "9 4 10 5\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 4, 10\n(10) + (-4) = 6, left: (10 + (5 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 + (5 - 9))) = 24\nreach 24! expression: (4 * (10 + (5 - 9)))"}, {"input": "9 4 10 5\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (10 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (10 - 9))) = 24\nreach 24! expression: (4 * (5 + (10 - 9)))"}, {"input": "9 4 10 5\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 9, 5\n(5) - (9) = -4, left: (5 - 9) = -4, (4 - 10) = -6\n(-6) * (-4) = 24, left: ((4 - 10) * (5 - 9)) = 24\nreach 24! expression: ((4 - 10) * (5 - 9))"}, {"input": "9 4 10 5\n", "output": "(9) * (10) = 90, left: (9 * 10) = 90, 4, 5\n(4) * (5) = 20, left: (4 * 5) = 20, (9 * 10) = 90\nroll back, left: (9 * 10) = 90, 4, 5\n(4) + (5) = 9, left: (4 + 5) = 9, (9 * 10) = 90\nroll back, left: (9 * 10) = 90, 4, 5\nroll back, left: 9 4 10 5\n(9) - (10) = -1, left: (9 - 10) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (9 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (9 - 10))) = 24\nreach 24! expression: (4 * (5 - (9 - 10)))"}, {"input": "9 4 10 5\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 4, 10\n(-4) - (10) = -14, left: ((5 - 9) - 10) = -14, 4\nroll back, left: (5 - 9) = -4, 4, 10\n(-4) / (10) = -2/5, left: ((5 - 9) / 10) = -2/5, 4\nroll back, left: (5 - 9) = -4, 4, 10\n(10) * (-4) = -40, left: (10 * (5 - 9)) = -40, 4\nroll back, left: (5 - 9) = -4, 4, 10\n(10) + (-4) = 6, left: (10 + (5 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 + (5 - 9))) = 24\nreach 24! expression: (4 * (10 + (5 - 9)))"}, {"input": "9 4 10 5\n", "output": "(9) * (10) = 90, left: (9 * 10) = 90, 4, 5\n(4) - (90) = -86, left: (4 - (9 * 10)) = -86, 5\nroll back, left: (9 * 10) = 90, 4, 5\n(90) / (4) = 45/2, left: ((9 * 10) / 4) = 45/2, 5\nroll back, left: (9 * 10) = 90, 4, 5\nroll back, left: 9 4 10 5\n(10) - (9) = 1, left: (10 - 9) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (10 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (10 - 9))) = 24\nreach 24! expression: (4 * (5 + (10 - 9)))"}, {"input": "9 4 10 5\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 10, 5\nroll back, left: 9 4 10 5\n(4) - (9) = -5, left: (4 - 9) = -5, 10, 5\n(-5) / (10) = -1/2, left: ((4 - 9) / 10) = -1/2, 5\nroll back, left: (4 - 9) = -5, 10, 5\nroll back, left: 9 4 10 5\n(9) - (5) = 4, left: (9 - 5) = 4, 4, 10\n(10) - (4) = 6, left: (10 - (9 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 - (9 - 5))) = 24\nreach 24! expression: (4 * (10 - (9 - 5)))"}, {"input": "9 4 10 5\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 9, 5\n(9) * (-6) = -54, left: (9 * (4 - 10)) = -54, 5\nroll back, left: (4 - 10) = -6, 9, 5\n(9) + (-6) = 3, left: (9 + (4 - 10)) = 3, 5\nroll back, left: (4 - 10) = -6, 9, 5\n(9) / (-6) = -3/2, left: (9 / (4 - 10)) = -3/2, 5\nroll back, left: (4 - 10) = -6, 9, 5\n(5) - (9) = -4, left: (5 - 9) = -4, (4 - 10) = -6\n(-6) * (-4) = 24, left: ((4 - 10) * (5 - 9)) = 24\nreach 24! expression: ((4 - 10) * (5 - 9))"}, {"input": "3 3 6 3\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (3 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (3 / 3))) = 24\nreach 24! expression: (6 * (3 + (3 / 3)))"}, {"input": "3 3 6 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 6, 3\n(6) * (3) = 18, left: (6 * 3) = 18, (3 + 3) = 6\n(6) + (18) = 24, left: ((3 + 3) + (6 * 3)) = 24\nreach 24! expression: ((3 + 3) + (6 * 3))"}, {"input": "3 3 6 3\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 3, 6\n(3) + (1) = 4, left: (3 + (3 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (3 / 3))) = 24\nreach 24! expression: (6 * (3 + (3 / 3)))"}, {"input": "3 3 6 3\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 3, 3\n(3) + (18) = 21, left: (3 + (6 * 3)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 + (6 * 3))) = 24\nreach 24! expression: (3 + (3 + (6 * 3)))"}, {"input": "3 3 6 3\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 3, 3\n(3) + (18) = 21, left: (3 + (3 * 6)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 + (3 * 6))) = 24\nreach 24! expression: (3 + (3 + (3 * 6)))"}, {"input": "3 3 6 3\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 6, 3\n(6) / (1) = 6, left: (6 / (3 / 3)) = 6, 3\nroll back, left: (3 / 3) = 1, 6, 3\n(6) + (3) = 9, left: (6 + 3) = 9, (3 / 3) = 1\n(9) - (1) = 8, left: ((6 + 3) - (3 / 3)) = 8\nroll back, left: (6 + 3) = 9, (3 / 3) = 1\nroll back, left: (3 / 3) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (3 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (3 / 3))) = 24\nreach 24! expression: (6 * (3 + (3 / 3)))"}, {"input": "3 3 6 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 6, 3\n(6) + (3) = 9, left: (6 + 3) = 9, (3 * 3) = 9\nroll back, left: (3 * 3) = 9, 6, 3\nroll back, left: 3 3 6 3\n(3) - (3) = 0, left: (3 - 3) = 0, 6, 3\nroll back, left: 3 3 6 3\n(3) + (3) = 6, left: (3 + 3) = 6, 6, 3\n(6) * (3) = 18, left: (6 * 3) = 18, (3 + 3) = 6\n(6) + (18) = 24, left: ((3 + 3) + (6 * 3)) = 24\nreach 24! expression: ((3 + 3) + (6 * 3))"}, {"input": "3 3 6 3\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 3, 3\n(3) - (3) = 0, left: (3 - 3) = 0, (3 / 6) = 1/2\nroll back, left: (3 / 6) = 1/2, 3, 3\nroll back, left: 3 3 6 3\n(6) * (3) = 18, left: (6 * 3) = 18, 3, 3\n(3) - (18) = -15, left: (3 - (6 * 3)) = -15, 3\nroll back, left: (6 * 3) = 18, 3, 3\n(3) + (18) = 21, left: (3 + (6 * 3)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 + (6 * 3))) = 24\nreach 24! expression: (3 + (3 + (6 * 3)))"}, {"input": "3 3 6 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 3, 3\nroll back, left: 3 3 6 3\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 3, 3\n(3) - (3) = 0, left: (3 - 3) = 0, (3 / 6) = 1/2\nroll back, left: (3 / 6) = 1/2, 3, 3\nroll back, left: 3 3 6 3\n(3) * (6) = 18, left: (3 * 6) = 18, 3, 3\n(3) + (18) = 21, left: (3 + (3 * 6)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 + (3 * 6))) = 24\nreach 24! expression: (3 + (3 + (3 * 6)))"}, {"input": "3 3 6 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 3, 6\n(6) - (0) = 6, left: (6 - (3 - 3)) = 6, 3\n(3) - (6) = -3, left: (3 - (6 - (3 - 3))) = -3\nroll back, left: (6 - (3 - 3)) = 6, 3\nroll back, left: (3 - 3) = 0, 3, 6\nroll back, left: 3 3 6 3\n(3) / (3) = 1, left: (3 / 3) = 1, 3, 6\n(3) + (1) = 4, left: (3 + (3 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (3 / 3))) = 24\nreach 24! expression: (6 * (3 + (3 / 3)))"}, {"input": "9 3 3 8\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 3, 8\n(6) - (3) = 3, left: ((9 - 3) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 3) - 3)) = 24\nreach 24! expression: (8 * ((9 - 3) - 3))"}, {"input": "9 3 3 8\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 9, 8\n(9) - (6) = 3, left: (9 - (3 + 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 - (3 + 3))) = 24\nreach 24! expression: (8 * (9 - (3 + 3)))"}, {"input": "9 3 3 8\n", "output": "(3) + (8) = 11, left: (3 + 8) = 11, 9, 3\n(3) * (11) = 33, left: (3 * (3 + 8)) = 33, 9\n(33) - (9) = 24, left: ((3 * (3 + 8)) - 9) = 24\nreach 24! expression: ((3 * (3 + 8)) - 9)"}, {"input": "9 3 3 8\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 9, 8\n(8) / (9) = 8/9, left: (8 / 9) = 8/9, (3 / 3) = 1\n(1) + (8/9) = 17/9, left: ((3 / 3) + (8 / 9)) = 17/9\nroll back, left: (8 / 9) = 8/9, (3 / 3) = 1\nroll back, left: (3 / 3) = 1, 9, 8\nroll back, left: 9 3 3 8\n(3) + (3) = 6, left: (3 + 3) = 6, 9, 8\n(9) - (6) = 3, left: (9 - (3 + 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 - (3 + 3))) = 24\nreach 24! expression: (8 * (9 - (3 + 3)))"}, {"input": "9 3 3 8\n", "output": "(8) / (9) = 8/9, left: (8 / 9) = 8/9, 3, 3\nroll back, left: 9 3 3 8\n(8) - (9) = -1, left: (8 - 9) = -1, 3, 3\n(3) / (-1) = -3, left: (3 / (8 - 9)) = -3, 3\nroll back, left: (8 - 9) = -1, 3, 3\nroll back, left: 9 3 3 8\n(9) - (3) = 6, left: (9 - 3) = 6, 3, 8\n(6) - (3) = 3, left: ((9 - 3) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 3) - 3)) = 24\nreach 24! expression: (8 * ((9 - 3) - 3))"}, {"input": "9 3 3 8\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 3, 8\n(3) / (-6) = -1/2, left: (3 / (3 - 9)) = -1/2, 8\n(8) + (-1/2) = 15/2, left: (8 + (3 / (3 - 9))) = 15/2\nroll back, left: (3 / (3 - 9)) = -1/2, 8\nroll back, left: (3 - 9) = -6, 3, 8\nroll back, left: 9 3 3 8\n(9) - (3) = 6, left: (9 - 3) = 6, 3, 8\n(6) - (3) = 3, left: ((9 - 3) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 3) - 3)) = 24\nreach 24! expression: (8 * ((9 - 3) - 3))"}, {"input": "9 3 3 8\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 9, 3\n(9) * (3/8) = 27/8, left: (9 * (3 / 8)) = 27/8, 3\nroll back, left: (3 / 8) = 3/8, 9, 3\nroll back, left: 9 3 3 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 9, 3\nroll back, left: 9 3 3 8\n(3) + (8) = 11, left: (3 + 8) = 11, 9, 3\n(3) * (11) = 33, left: (3 * (3 + 8)) = 33, 9\n(33) - (9) = 24, left: ((3 * (3 + 8)) - 9) = 24\nreach 24! expression: ((3 * (3 + 8)) - 9)"}, {"input": "9 3 3 8\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 3, 8\nroll back, left: 9 3 3 8\n(9) + (3) = 12, left: (9 + 3) = 12, 3, 8\n(12) - (3) = 9, left: ((9 + 3) - 3) = 9, 8\nroll back, left: (9 + 3) = 12, 3, 8\nroll back, left: 9 3 3 8\n(9) - (3) = 6, left: (9 - 3) = 6, 3, 8\n(6) - (3) = 3, left: ((9 - 3) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 3) - 3)) = 24\nreach 24! expression: (8 * ((9 - 3) - 3))"}, {"input": "10 7 10 6\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (10 - 7)) = 30, 6\n(30) - (6) = 24, left: ((10 * (10 - 7)) - 6) = 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "10 7 10 6\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 10, 7\nroll back, left: 10 7 10 6\n(10) * (7) = 70, left: (10 * 7) = 70, 10, 6\n(6) - (10) = -4, left: (6 - 10) = -4, (10 * 7) = 70\nroll back, left: (10 * 7) = 70, 10, 6\nroll back, left: 10 7 10 6\n(10) - (7) = 3, left: (10 - 7) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (10 - 7)) = 30, 6\n(30) - (6) = 24, left: ((10 * (10 - 7)) - 6) = 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "10 7 10 6\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 7, 6\nroll back, left: 10 7 10 6\n(10) * (10) = 100, left: (10 * 10) = 100, 7, 6\nroll back, left: 10 7 10 6\n(10) - (7) = 3, left: (10 - 7) = 3, 10, 6\n(3) / (6) = 1/2, left: ((10 - 7) / 6) = 1/2, 10\nroll back, left: (10 - 7) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (10 - 7)) = 30, 6\n(30) - (6) = 24, left: ((10 * (10 - 7)) - 6) = 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "10 7 10 6\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 7, 6\nroll back, left: 10 7 10 6\n(10) * (6) = 60, left: (10 * 6) = 60, 10, 7\nroll back, left: 10 7 10 6\n(10) + (7) = 17, left: (10 + 7) = 17, 10, 6\nroll back, left: 10 7 10 6\n(10) - (7) = 3, left: (10 - 7) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (10 - 7)) = 30, 6\n(30) - (6) = 24, left: ((10 * (10 - 7)) - 6) = 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "10 7 10 6\n", "output": "(10) + (6) = 16, left: (10 + 6) = 16, 7, 10\n(7) * (10) = 70, left: (7 * 10) = 70, (10 + 6) = 16\nroll back, left: (10 + 6) = 16, 7, 10\nroll back, left: 10 7 10 6\n(10) + (7) = 17, left: (10 + 7) = 17, 10, 6\nroll back, left: 10 7 10 6\n(10) - (7) = 3, left: (10 - 7) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (10 - 7)) = 30, 6\n(30) - (6) = 24, left: ((10 * (10 - 7)) - 6) = 24\nreach 24! expression: ((10 * (10 - 7)) - 6)"}, {"input": "9 5 8 7\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 9, 8\n(12) - (9) = 3, left: ((5 + 7) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((5 + 7) - 9)) = 24\nreach 24! expression: (8 * ((5 + 7) - 9))"}, {"input": "9 5 8 7\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 9, 7\n(40) - (9) = 31, left: ((5 * 8) - 9) = 31, 7\n(31) - (7) = 24, left: (((5 * 8) - 9) - 7) = 24\nreach 24! expression: (((5 * 8) - 9) - 7)"}, {"input": "9 5 8 7\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 9, 7\n(40) - (7) = 33, left: ((5 * 8) - 7) = 33, 9\n(33) - (9) = 24, left: (((5 * 8) - 7) - 9) = 24\nreach 24! expression: (((5 * 8) - 7) - 9)"}, {"input": "9 5 8 7\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 9, 7\nroll back, left: 9 5 8 7\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 9, 7\nroll back, left: 9 5 8 7\n(5) + (8) = 13, left: (5 + 8) = 13, 9, 7\nroll back, left: 9 5 8 7\n(5) * (8) = 40, left: (5 * 8) = 40, 9, 7\n(40) - (7) = 33, left: ((5 * 8) - 7) = 33, 9\n(33) - (9) = 24, left: (((5 * 8) - 7) - 9) = 24\nreach 24! expression: (((5 * 8) - 7) - 9)"}, {"input": "9 5 8 7\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 9, 7\n(9) - (8/5) = 37/5, left: (9 - (8 / 5)) = 37/5, 7\n(37/5) - (7) = 2/5, left: ((9 - (8 / 5)) - 7) = 2/5\nroll back, left: (9 - (8 / 5)) = 37/5, 7\nroll back, left: (8 / 5) = 8/5, 9, 7\nroll back, left: 9 5 8 7\n(5) * (8) = 40, left: (5 * 8) = 40, 9, 7\n(40) - (9) = 31, left: ((5 * 8) - 9) = 31, 7\n(31) - (7) = 24, left: (((5 * 8) - 9) - 7) = 24\nreach 24! expression: (((5 * 8) - 9) - 7)"}, {"input": "9 5 8 7\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (7 - 5) = 2\nroll back, left: (7 - 5) = 2, 9, 8\n(8) / (2) = 4, left: (8 / (7 - 5)) = 4, 9\nroll back, left: (7 - 5) = 2, 9, 8\nroll back, left: 9 5 8 7\n(5) + (7) = 12, left: (5 + 7) = 12, 9, 8\n(12) - (9) = 3, left: ((5 + 7) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((5 + 7) - 9)) = 24\nreach 24! expression: (8 * ((5 + 7) - 9))"}, {"input": "9 5 8 7\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 9, 8\n(9) / (2) = 9/2, left: (9 / (7 - 5)) = 9/2, 8\nroll back, left: (7 - 5) = 2, 9, 8\nroll back, left: 9 5 8 7\n(5) - (7) = -2, left: (5 - 7) = -2, 9, 8\nroll back, left: 9 5 8 7\n(5) + (7) = 12, left: (5 + 7) = 12, 9, 8\n(12) - (9) = 3, left: ((5 + 7) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((5 + 7) - 9)) = 24\nreach 24! expression: (8 * ((5 + 7) - 9))"}, {"input": "9 5 8 7\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 9, 7\nroll back, left: 9 5 8 7\n(5) - (8) = -3, left: (5 - 8) = -3, 9, 7\n(-3) - (7) = -10, left: ((5 - 8) - 7) = -10, 9\nroll back, left: (5 - 8) = -3, 9, 7\nroll back, left: 9 5 8 7\n(5) * (8) = 40, left: (5 * 8) = 40, 9, 7\n(40) - (9) = 31, left: ((5 * 8) - 9) = 31, 7\n(31) - (7) = 24, left: (((5 * 8) - 9) - 7) = 24\nreach 24! expression: (((5 * 8) - 9) - 7)"}, {"input": "3 13 9 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 3, 13\n(21) - (13) = 8, left: ((9 + 12) - 13) = 8, 3\n(3) * (8) = 24, left: (3 * ((9 + 12) - 13)) = 24\nreach 24! expression: (3 * ((9 + 12) - 13))"}, {"input": "3 13 9 12\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (13 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (13 - 12))) = 24\nreach 24! expression: (3 * (9 - (13 - 12)))"}, {"input": "3 13 9 12\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 13, 12\nroll back, left: 3 13 9 12\n(3) - (13) = -10, left: (3 - 13) = -10, 9, 12\n(12) - (9) = 3, left: (12 - 9) = 3, (3 - 13) = -10\nroll back, left: (3 - 13) = -10, 9, 12\nroll back, left: 3 13 9 12\n(13) - (12) = 1, left: (13 - 12) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (13 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (13 - 12))) = 24\nreach 24! expression: (3 * (9 - (13 - 12)))"}, {"input": "3 13 9 12\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 13, 12\nroll back, left: 3 13 9 12\n(3) + (12) = 15, left: (3 + 12) = 15, 13, 9\nroll back, left: 3 13 9 12\n(3) / (12) = 1/4, left: (3 / 12) = 1/4, 13, 9\nroll back, left: 3 13 9 12\n(13) - (12) = 1, left: (13 - 12) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (13 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (13 - 12))) = 24\nreach 24! expression: (3 * (9 - (13 - 12)))"}, {"input": "3 13 9 12\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 13, 12\nroll back, left: 3 13 9 12\n(3) - (9) = -6, left: (3 - 9) = -6, 13, 12\n(13) + (-6) = 7, left: (13 + (3 - 9)) = 7, 12\nroll back, left: (3 - 9) = -6, 13, 12\nroll back, left: 3 13 9 12\n(9) + (12) = 21, left: (9 + 12) = 21, 3, 13\n(21) - (13) = 8, left: ((9 + 12) - 13) = 8, 3\n(3) * (8) = 24, left: (3 * ((9 + 12) - 13)) = 24\nreach 24! expression: (3 * ((9 + 12) - 13))"}, {"input": "3 13 9 12\n", "output": "(13) + (12) = 25, left: (13 + 12) = 25, 3, 9\n(9) / (3) = 3, left: (9 / 3) = 3, (13 + 12) = 25\nroll back, left: (13 + 12) = 25, 3, 9\nroll back, left: 3 13 9 12\n(13) - (12) = 1, left: (13 - 12) = 1, 3, 9\n(3) * (1) = 3, left: (3 * (13 - 12)) = 3, 9\nroll back, left: (13 - 12) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (13 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (13 - 12))) = 24\nreach 24! expression: (3 * (9 - (13 - 12)))"}, {"input": "4 1 12 6\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 1, 12\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, (6 - 4) = 2\n(2) / (1/12) = 24, left: ((6 - 4) / (1 / 12)) = 24\nreach 24! expression: ((6 - 4) / (1 / 12))"}, {"input": "4 1 12 6\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 4, 12\n(6) - (4) = 2, left: ((6 / 1) - 4) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 / 1) - 4)) = 24\nreach 24! expression: (12 * ((6 / 1) - 4))"}, {"input": "4 1 12 6\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 1, 12\n(3/2) - (1) = 1/2, left: ((6 / 4) - 1) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((6 / 4) - 1)) = 24\nreach 24! expression: (12 / ((6 / 4) - 1))"}, {"input": "4 1 12 6\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 1, 6\n(1) + (3) = 4, left: (1 + (12 / 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (12 / 4))) = 24\nreach 24! expression: (6 * (1 + (12 / 4)))"}, {"input": "4 1 12 6\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 4, 12\n(12) / (-5) = -12/5, left: (12 / (1 - 6)) = -12/5, 4\nroll back, left: (1 - 6) = -5, 4, 12\n(4) * (-5) = -20, left: (4 * (1 - 6)) = -20, 12\nroll back, left: (1 - 6) = -5, 4, 12\nroll back, left: 4 1 12 6\n(6) / (1) = 6, left: (6 / 1) = 6, 4, 12\n(6) - (4) = 2, left: ((6 / 1) - 4) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 / 1) - 4)) = 24\nreach 24! expression: (12 * ((6 / 1) - 4))"}, {"input": "4 1 12 6\n", "output": "(4) + (12) = 16, left: (4 + 12) = 16, 1, 6\n(6) / (16) = 3/8, left: (6 / (4 + 12)) = 3/8, 1\nroll back, left: (4 + 12) = 16, 1, 6\nroll back, left: 4 1 12 6\n(12) - (4) = 8, left: (12 - 4) = 8, 1, 6\nroll back, left: 4 1 12 6\n(12) / (4) = 3, left: (12 / 4) = 3, 1, 6\n(1) + (3) = 4, left: (1 + (12 / 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (12 / 4))) = 24\nreach 24! expression: (6 * (1 + (12 / 4)))"}, {"input": "4 1 12 6\n", "output": "(4) + (6) = 10, left: (4 + 6) = 10, 1, 12\nroll back, left: 4 1 12 6\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, 1, 12\n(12) - (1) = 11, left: (12 - 1) = 11, (4 / 6) = 2/3\nroll back, left: (4 / 6) = 2/3, 1, 12\nroll back, left: 4 1 12 6\n(6) - (4) = 2, left: (6 - 4) = 2, 1, 12\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, (6 - 4) = 2\n(2) / (1/12) = 24, left: ((6 - 4) / (1 / 12)) = 24\nreach 24! expression: ((6 - 4) / (1 / 12))"}, {"input": "4 5 4 3\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 4, 4\n(4) + (2) = 6, left: (4 + (5 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (4 + (5 - 3))) = 24\nreach 24! expression: (4 * (4 + (5 - 3)))"}, {"input": "4 5 4 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (5 + 3) = 8\n(8) + (16) = 24, left: ((5 + 3) + (4 * 4)) = 24\nreach 24! expression: ((5 + 3) + (4 * 4))"}, {"input": "4 5 4 3\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 5, 3\n(3) + (16) = 19, left: (3 + (4 * 4)) = 19, 5\n(5) + (19) = 24, left: (5 + (3 + (4 * 4))) = 24\nreach 24! expression: (5 + (3 + (4 * 4)))"}, {"input": "4 5 4 3\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 5, 4\n(5) + (1) = 6, left: (5 + (4 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (4 - 3))) = 24\nreach 24! expression: (4 * (5 + (4 - 3)))"}, {"input": "4 5 4 3\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 5, 4\n(5) / (12) = 5/12, left: (5 / (4 * 3)) = 5/12, 4\nroll back, left: (4 * 3) = 12, 5, 4\nroll back, left: 4 5 4 3\n(4) + (3) = 7, left: (4 + 3) = 7, 5, 4\nroll back, left: 4 5 4 3\n(4) - (3) = 1, left: (4 - 3) = 1, 5, 4\n(5) + (1) = 6, left: (5 + (4 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (4 - 3))) = 24\nreach 24! expression: (4 * (5 + (4 - 3)))"}, {"input": "4 5 4 3\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 4, 4\n(4) / (15) = 4/15, left: (4 / (5 * 3)) = 4/15, 4\n(4) + (4/15) = 64/15, left: (4 + (4 / (5 * 3))) = 64/15\nroll back, left: (4 / (5 * 3)) = 4/15, 4\nroll back, left: (5 * 3) = 15, 4, 4\nroll back, left: 4 5 4 3\n(5) - (3) = 2, left: (5 - 3) = 2, 4, 4\n(4) + (2) = 6, left: (4 + (5 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (4 + (5 - 3))) = 24\nreach 24! expression: (4 * (4 + (5 - 3)))"}, {"input": "4 5 4 3\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 5, 3\nroll back, left: 4 5 4 3\n(4) - (4) = 0, left: (4 - 4) = 0, 5, 3\nroll back, left: 4 5 4 3\n(4) / (4) = 1, left: (4 / 4) = 1, 5, 3\nroll back, left: 4 5 4 3\n(4) * (4) = 16, left: (4 * 4) = 16, 5, 3\n(3) + (16) = 19, left: (3 + (4 * 4)) = 19, 5\n(5) + (19) = 24, left: (5 + (3 + (4 * 4))) = 24\nreach 24! expression: (5 + (3 + (4 * 4)))"}, {"input": "4 5 4 3\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 5, 3\n(0) / (5) = 0, left: ((4 - 4) / 5) = 0, 3\nroll back, left: (4 - 4) = 0, 5, 3\n(5) + (0) = 5, left: (5 + (4 - 4)) = 5, 3\nroll back, left: (4 - 4) = 0, 5, 3\nroll back, left: 4 5 4 3\n(4) * (4) = 16, left: (4 * 4) = 16, 5, 3\n(3) + (16) = 19, left: (3 + (4 * 4)) = 19, 5\n(5) + (19) = 24, left: (5 + (3 + (4 * 4))) = 24\nreach 24! expression: (5 + (3 + (4 * 4)))"}, {"input": "4 5 4 3\n", "output": "(5) / (3) = 5/3, left: (5 / 3) = 5/3, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (5 / 3) = 5/3\nroll back, left: (5 / 3) = 5/3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (5 / 3) = 5/3\nroll back, left: (5 / 3) = 5/3, 4, 4\nroll back, left: 4 5 4 3\n(5) + (3) = 8, left: (5 + 3) = 8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (5 + 3) = 8\n(8) + (16) = 24, left: ((5 + 3) + (4 * 4)) = 24\nreach 24! expression: ((5 + 3) + (4 * 4))"}, {"input": "7 5 10 1\n", "output": "(10) + (1) = 11, left: (10 + 1) = 11, 7, 5\n(7) * (5) = 35, left: (7 * 5) = 35, (10 + 1) = 11\n(35) - (11) = 24, left: ((7 * 5) - (10 + 1)) = 24\nreach 24! expression: ((7 * 5) - (10 + 1))"}, {"input": "7 5 10 1\n", "output": "(7) / (5) = 7/5, left: (7 / 5) = 7/5, 10, 1\n(1) + (7/5) = 12/5, left: (1 + (7 / 5)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (1 + (7 / 5))) = 24\nreach 24! expression: (10 * (1 + (7 / 5)))"}, {"input": "7 5 10 1\n", "output": "(7) * (5) = 35, left: (7 * 5) = 35, 10, 1\n(35) - (10) = 25, left: ((7 * 5) - 10) = 25, 1\n(25) - (1) = 24, left: (((7 * 5) - 10) - 1) = 24\nreach 24! expression: (((7 * 5) - 10) - 1)"}, {"input": "7 5 10 1\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 5, 10\nroll back, left: 7 5 10 1\n(5) - (10) = -5, left: (5 - 10) = -5, 7, 1\n(-5) - (1) = -6, left: ((5 - 10) - 1) = -6, 7\nroll back, left: (5 - 10) = -5, 7, 1\nroll back, left: 7 5 10 1\n(7) / (5) = 7/5, left: (7 / 5) = 7/5, 10, 1\n(1) + (7/5) = 12/5, left: (1 + (7 / 5)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (1 + (7 / 5))) = 24\nreach 24! expression: (10 * (1 + (7 / 5)))"}, {"input": "7 5 10 1\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 5, 10\nroll back, left: 7 5 10 1\n(10) - (7) = 3, left: (10 - 7) = 3, 5, 1\n(1) / (3) = 1/3, left: (1 / (10 - 7)) = 1/3, 5\nroll back, left: (10 - 7) = 3, 5, 1\nroll back, left: 7 5 10 1\n(7) * (5) = 35, left: (7 * 5) = 35, 10, 1\n(35) - (10) = 25, left: ((7 * 5) - 10) = 25, 1\n(25) - (1) = 24, left: (((7 * 5) - 10) - 1) = 24\nreach 24! expression: (((7 * 5) - 10) - 1)"}, {"input": "7 5 10 1\n", "output": "(7) + (10) = 17, left: (7 + 10) = 17, 5, 1\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, (7 + 10) = 17\nroll back, left: (7 + 10) = 17, 5, 1\nroll back, left: 7 5 10 1\n(7) * (10) = 70, left: (7 * 10) = 70, 5, 1\nroll back, left: 7 5 10 1\n(10) + (1) = 11, left: (10 + 1) = 11, 7, 5\n(7) * (5) = 35, left: (7 * 5) = 35, (10 + 1) = 11\n(35) - (11) = 24, left: ((7 * 5) - (10 + 1)) = 24\nreach 24! expression: ((7 * 5) - (10 + 1))"}, {"input": "3 1 13 2\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 3, 1\n(1) + (26) = 27, left: (1 + (13 * 2)) = 27, 3\n(27) - (3) = 24, left: ((1 + (13 * 2)) - 3) = 24\nreach 24! expression: ((1 + (13 * 2)) - 3)"}, {"input": "3 1 13 2\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 3, 1\n(3) - (1) = 2, left: (3 - 1) = 2, (13 * 2) = 26\n(26) - (2) = 24, left: ((13 * 2) - (3 - 1)) = 24\nreach 24! expression: ((13 * 2) - (3 - 1))"}, {"input": "3 1 13 2\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 13, 2\n(13) * (2) = 26, left: (13 * (3 - 1)) = 26, 2\n(26) - (2) = 24, left: ((13 * (3 - 1)) - 2) = 24\nreach 24! expression: ((13 * (3 - 1)) - 2)"}, {"input": "3 1 13 2\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (1 - 3) = -2\n(-2) + (26) = 24, left: ((1 - 3) + (13 * 2)) = 24\nreach 24! expression: ((1 - 3) + (13 * 2))"}, {"input": "3 1 13 2\n", "output": "(3) + (2) = 5, left: (3 + 2) = 5, 1, 13\n(1) * (5) = 5, left: (1 * (3 + 2)) = 5, 13\nroll back, left: (3 + 2) = 5, 1, 13\nroll back, left: 3 1 13 2\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, 1, 2\nroll back, left: 3 1 13 2\n(13) * (2) = 26, left: (13 * 2) = 26, 3, 1\n(3) - (1) = 2, left: (3 - 1) = 2, (13 * 2) = 26\n(26) - (2) = 24, left: ((13 * 2) - (3 - 1)) = 24\nreach 24! expression: ((13 * 2) - (3 - 1))"}, {"input": "3 1 13 2\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 3, 2\nroll back, left: 3 1 13 2\n(1) - (13) = -12, left: (1 - 13) = -12, 3, 2\nroll back, left: 3 1 13 2\n(3) - (2) = 1, left: (3 - 2) = 1, 1, 13\nroll back, left: 3 1 13 2\n(13) * (2) = 26, left: (13 * 2) = 26, 3, 1\n(1) + (26) = 27, left: (1 + (13 * 2)) = 27, 3\n(27) - (3) = 24, left: ((1 + (13 * 2)) - 3) = 24\nreach 24! expression: ((1 + (13 * 2)) - 3)"}, {"input": "3 1 13 2\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 3, 13\n(3) - (13) = -10, left: (3 - 13) = -10, (1 / 2) = 1/2\nroll back, left: (1 / 2) = 1/2, 3, 13\nroll back, left: 3 1 13 2\n(13) / (2) = 13/2, left: (13 / 2) = 13/2, 3, 1\nroll back, left: 3 1 13 2\n(13) * (2) = 26, left: (13 * 2) = 26, 3, 1\n(1) + (26) = 27, left: (1 + (13 * 2)) = 27, 3\n(27) - (3) = 24, left: ((1 + (13 * 2)) - 3) = 24\nreach 24! expression: ((1 + (13 * 2)) - 3)"}, {"input": "3 1 13 2\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 1, 13\nroll back, left: 3 1 13 2\n(2) - (3) = -1, left: (2 - 3) = -1, 1, 13\n(1) - (13) = -12, left: (1 - 13) = -12, (2 - 3) = -1\nroll back, left: (2 - 3) = -1, 1, 13\nroll back, left: 3 1 13 2\n(1) - (3) = -2, left: (1 - 3) = -2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (1 - 3) = -2\n(-2) + (26) = 24, left: ((1 - 3) + (13 * 2)) = 24\nreach 24! expression: ((1 - 3) + (13 * 2))"}, {"input": "3 1 13 2\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 3, 13\nroll back, left: 3 1 13 2\n(1) - (2) = -1, left: (1 - 2) = -1, 3, 13\nroll back, left: 3 1 13 2\n(2) - (1) = 1, left: (2 - 1) = 1, 3, 13\nroll back, left: 3 1 13 2\n(3) - (1) = 2, left: (3 - 1) = 2, 13, 2\n(13) * (2) = 26, left: (13 * (3 - 1)) = 26, 2\n(26) - (2) = 24, left: ((13 * (3 - 1)) - 2) = 24\nreach 24! expression: ((13 * (3 - 1)) - 2)"}, {"input": "9 9 7 6\n", "output": "(9) + (7) = 16, left: (9 + 7) = 16, 9, 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, (9 + 7) = 16\n(16) * (3/2) = 24, left: ((9 + 7) * (9 / 6)) = 24\nreach 24! expression: ((9 + 7) * (9 / 6))"}, {"input": "9 9 7 6\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (7 - 9)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (7 - 9))) = 24\nreach 24! expression: (6 - (9 * (7 - 9)))"}, {"input": "9 9 7 6\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 7, 6\n(7) * (6) = 42, left: (7 * 6) = 42, (9 + 9) = 18\n(42) - (18) = 24, left: ((7 * 6) - (9 + 9)) = 24\nreach 24! expression: ((7 * 6) - (9 + 9))"}, {"input": "9 9 7 6\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 7, 6\n(7) + (18) = 25, left: (7 + (9 + 9)) = 25, 6\nroll back, left: (9 + 9) = 18, 7, 6\n(6) - (7) = -1, left: (6 - 7) = -1, (9 + 9) = 18\nroll back, left: (9 + 9) = 18, 7, 6\n(6) / (7) = 6/7, left: (6 / 7) = 6/7, (9 + 9) = 18\nroll back, left: (9 + 9) = 18, 7, 6\n(7) * (6) = 42, left: (7 * 6) = 42, (9 + 9) = 18\n(42) - (18) = 24, left: ((7 * 6) - (9 + 9)) = 24\nreach 24! expression: ((7 * 6) - (9 + 9))"}, {"input": "9 9 7 6\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 9, 6\n(-2) / (6) = -1/3, left: ((7 - 9) / 6) = -1/3, 9\n(9) + (-1/3) = 26/3, left: (9 + ((7 - 9) / 6)) = 26/3\nroll back, left: ((7 - 9) / 6) = -1/3, 9\nroll back, left: (7 - 9) = -2, 9, 6\n(9) + (-2) = 7, left: (9 + (7 - 9)) = 7, 6\nroll back, left: (7 - 9) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (7 - 9)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (7 - 9))) = 24\nreach 24! expression: (6 - (9 * (7 - 9)))"}, {"input": "9 9 7 6\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 7, 6\nroll back, left: 9 9 7 6\n(9) - (9) = 0, left: (9 - 9) = 0, 7, 6\n(6) - (0) = 6, left: (6 - (9 - 9)) = 6, 7\nroll back, left: (9 - 9) = 0, 7, 6\nroll back, left: 9 9 7 6\n(9) + (9) = 18, left: (9 + 9) = 18, 7, 6\n(7) * (6) = 42, left: (7 * 6) = 42, (9 + 9) = 18\n(42) - (18) = 24, left: ((7 * 6) - (9 + 9)) = 24\nreach 24! expression: ((7 * 6) - (9 + 9))"}, {"input": "9 9 7 6\n", "output": "(7) / (9) = 7/9, left: (7 / 9) = 7/9, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (7 / 9) = 7/9\nroll back, left: (7 / 9) = 7/9, 9, 6\nroll back, left: 9 9 7 6\n(7) - (9) = -2, left: (7 - 9) = -2, 9, 6\n(6) * (-2) = -12, left: (6 * (7 - 9)) = -12, 9\nroll back, left: (7 - 9) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (7 - 9)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (7 - 9))) = 24\nreach 24! expression: (6 - (9 * (7 - 9)))"}, {"input": "13 4 5 6\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 5, 6\n(9) - (5) = 4, left: ((13 - 4) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 - 4) - 5)) = 24\nreach 24! expression: (6 * ((13 - 4) - 5))"}, {"input": "13 4 5 6\n", "output": "(4) + (5) = 9, left: (4 + 5) = 9, 13, 6\n(13) - (9) = 4, left: (13 - (4 + 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (4 + 5))) = 24\nreach 24! expression: (6 * (13 - (4 + 5)))"}, {"input": "13 4 5 6\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 4, 6\n(8) - (4) = 4, left: ((13 - 5) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 - 5) - 4)) = 24\nreach 24! expression: (6 * ((13 - 5) - 4))"}, {"input": "13 4 5 6\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 13, 5\nroll back, left: 13 4 5 6\n(4) + (6) = 10, left: (4 + 6) = 10, 13, 5\nroll back, left: 13 4 5 6\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 13, 4\nroll back, left: 13 4 5 6\n(4) + (5) = 9, left: (4 + 5) = 9, 13, 6\n(13) - (9) = 4, left: (13 - (4 + 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (4 + 5))) = 24\nreach 24! expression: (6 * (13 - (4 + 5)))"}, {"input": "13 4 5 6\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 13, 5\nroll back, left: 13 4 5 6\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, 13, 5\nroll back, left: 13 4 5 6\n(4) * (6) = 24, left: (4 * 6) = 24, 13, 5\nroll back, left: 13 4 5 6\n(13) - (5) = 8, left: (13 - 5) = 8, 4, 6\n(8) - (4) = 4, left: ((13 - 5) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 - 5) - 4)) = 24\nreach 24! expression: (6 * ((13 - 5) - 4))"}, {"input": "13 4 5 6\n", "output": "(13) / (5) = 13/5, left: (13 / 5) = 13/5, 4, 6\n(6) + (13/5) = 43/5, left: (6 + (13 / 5)) = 43/5, 4\nroll back, left: (13 / 5) = 13/5, 4, 6\nroll back, left: 13 4 5 6\n(5) - (13) = -8, left: (5 - 13) = -8, 4, 6\nroll back, left: 13 4 5 6\n(13) - (5) = 8, left: (13 - 5) = 8, 4, 6\n(8) - (4) = 4, left: ((13 - 5) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 - 5) - 4)) = 24\nreach 24! expression: (6 * ((13 - 5) - 4))"}, {"input": "13 4 5 6\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 13, 4\nroll back, left: 13 4 5 6\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 13, 4\nroll back, left: 13 4 5 6\n(4) - (13) = -9, left: (4 - 13) = -9, 5, 6\nroll back, left: 13 4 5 6\n(13) - (4) = 9, left: (13 - 4) = 9, 5, 6\n(9) - (5) = 4, left: ((13 - 4) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 - 4) - 5)) = 24\nreach 24! expression: (6 * ((13 - 4) - 5))"}, {"input": "13 9 12 8\n", "output": "(13) + (12) = 25, left: (13 + 12) = 25, 9, 8\n(9) - (25) = -16, left: (9 - (13 + 12)) = -16, 8\n(8) - (-16) = 24, left: (8 - (9 - (13 + 12))) = 24\nreach 24! expression: (8 - (9 - (13 + 12)))"}, {"input": "13 9 12 8\n", "output": "(13) + (8) = 21, left: (13 + 8) = 21, 9, 12\n(12) - (9) = 3, left: (12 - 9) = 3, (13 + 8) = 21\n(21) + (3) = 24, left: ((13 + 8) + (12 - 9)) = 24\nreach 24! expression: ((13 + 8) + (12 - 9))"}, {"input": "13 9 12 8\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 13, 8\n(13) + (8) = 21, left: (13 + 8) = 21, (12 - 9) = 3\n(3) + (21) = 24, left: ((12 - 9) + (13 + 8)) = 24\nreach 24! expression: ((12 - 9) + (13 + 8))"}, {"input": "13 9 12 8\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 13, 9\n(13) - (9) = 4, left: (13 - 9) = 4, (12 * 8) = 96\n(96) / (4) = 24, left: ((12 * 8) / (13 - 9)) = 24\nreach 24! expression: ((12 * 8) / (13 - 9))"}, {"input": "13 9 12 8\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 13, 12\n(13) + (12) = 25, left: (13 + 12) = 25, (9 - 8) = 1\n(25) - (1) = 24, left: ((13 + 12) - (9 - 8)) = 24\nreach 24! expression: ((13 + 12) - (9 - 8))"}, {"input": "13 9 12 8\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 9, 12\nroll back, left: 13 9 12 8\n(13) * (8) = 104, left: (13 * 8) = 104, 9, 12\n(9) - (104) = -95, left: (9 - (13 * 8)) = -95, 12\nroll back, left: (13 * 8) = 104, 9, 12\nroll back, left: 13 9 12 8\n(13) + (8) = 21, left: (13 + 8) = 21, 9, 12\n(12) - (9) = 3, left: (12 - 9) = 3, (13 + 8) = 21\n(21) + (3) = 24, left: ((13 + 8) + (12 - 9)) = 24\nreach 24! expression: ((13 + 8) + (12 - 9))"}, {"input": "2 4 2 9\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 4, 2\n(4) + (18) = 22, left: (4 + (2 * 9)) = 22, 2\n(2) + (22) = 24, left: (2 + (4 + (2 * 9))) = 24\nreach 24! expression: (2 + (4 + (2 * 9)))"}, {"input": "2 4 2 9\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (2 + 4) = 6\n(6) + (18) = 24, left: ((2 + 4) + (2 * 9)) = 24\nreach 24! expression: ((2 + 4) + (2 * 9))"}, {"input": "2 4 2 9\n", "output": "(4) + (9) = 13, left: (4 + 9) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (4 + 9)) = 26, 2\n(26) - (2) = 24, left: ((2 * (4 + 9)) - 2) = 24\nreach 24! expression: ((2 * (4 + 9)) - 2)"}, {"input": "2 4 2 9\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 2, 4\n(2) + (18) = 20, left: (2 + (2 * 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 + (2 * 9))) = 24\nreach 24! expression: (4 + (2 + (2 * 9)))"}, {"input": "2 4 2 9\n", "output": "(9) / (2) = 9/2, left: (9 / 2) = 9/2, 2, 4\n(2) * (9/2) = 9, left: (2 * (9 / 2)) = 9, 4\nroll back, left: (9 / 2) = 9/2, 2, 4\nroll back, left: 2 4 2 9\n(2) / (9) = 2/9, left: (2 / 9) = 2/9, 2, 4\nroll back, left: 2 4 2 9\n(2) * (9) = 18, left: (2 * 9) = 18, 2, 4\n(2) + (18) = 20, left: (2 + (2 * 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 + (2 * 9))) = 24\nreach 24! expression: (4 + (2 + (2 * 9)))"}, {"input": "2 4 2 9\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 2, 2\nroll back, left: 2 4 2 9\n(4) * (9) = 36, left: (4 * 9) = 36, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (4 * 9) = 36\nroll back, left: (4 * 9) = 36, 2, 2\nroll back, left: 2 4 2 9\n(4) + (9) = 13, left: (4 + 9) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (4 + 9)) = 26, 2\n(26) - (2) = 24, left: ((2 * (4 + 9)) - 2) = 24\nreach 24! expression: ((2 * (4 + 9)) - 2)"}, {"input": "2 4 2 9\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 2, 9\n(1/2) / (9) = 1/18, left: ((2 / 4) / 9) = 1/18, 2\nroll back, left: (2 / 4) = 1/2, 2, 9\nroll back, left: 2 4 2 9\n(2) + (4) = 6, left: (2 + 4) = 6, 2, 9\n(9) / (6) = 3/2, left: (9 / (2 + 4)) = 3/2, 2\nroll back, left: (2 + 4) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (2 + 4) = 6\n(6) + (18) = 24, left: ((2 + 4) + (2 * 9)) = 24\nreach 24! expression: ((2 + 4) + (2 * 9))"}, {"input": "2 4 2 9\n", "output": "(9) / (2) = 9/2, left: (9 / 2) = 9/2, 4, 2\nroll back, left: 2 4 2 9\n(2) / (9) = 2/9, left: (2 / 9) = 2/9, 4, 2\nroll back, left: 2 4 2 9\n(2) * (9) = 18, left: (2 * 9) = 18, 4, 2\n(4) / (18) = 2/9, left: (4 / (2 * 9)) = 2/9, 2\nroll back, left: (2 * 9) = 18, 4, 2\n(4) + (18) = 22, left: (4 + (2 * 9)) = 22, 2\n(2) + (22) = 24, left: (2 + (4 + (2 * 9))) = 24\nreach 24! expression: (2 + (4 + (2 * 9)))"}, {"input": "2 4 2 9\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 2, 9\n(2) / (1/2) = 4, left: (2 / (2 / 4)) = 4, 9\nroll back, left: (2 / 4) = 1/2, 2, 9\n(1/2) / (2) = 1/4, left: ((2 / 4) / 2) = 1/4, 9\nroll back, left: (2 / 4) = 1/2, 2, 9\nroll back, left: 2 4 2 9\n(2) + (4) = 6, left: (2 + 4) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (2 + 4) = 6\n(6) + (18) = 24, left: ((2 + 4) + (2 * 9)) = 24\nreach 24! expression: ((2 + 4) + (2 * 9))"}, {"input": "13 4 12 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 4, 12\n(4) * (3) = 12, left: (4 * (13 - 10)) = 12, 12\n(12) + (12) = 24, left: (12 + (4 * (13 - 10))) = 24\nreach 24! expression: (12 + (4 * (13 - 10)))"}, {"input": "13 4 12 10\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (12 - 4) = 8\n(8) * (3) = 24, left: ((12 - 4) * (13 - 10)) = 24\nreach 24! expression: ((12 - 4) * (13 - 10))"}, {"input": "13 4 12 10\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 13, 10\n(10) - (13) = -3, left: (10 - 13) = -3, (4 - 12) = -8\n(-8) * (-3) = 24, left: ((4 - 12) * (10 - 13)) = 24\nreach 24! expression: ((4 - 12) * (10 - 13))"}, {"input": "13 4 12 10\n", "output": "(12) * (10) = 120, left: (12 * 10) = 120, 13, 4\nroll back, left: 13 4 12 10\n(4) + (10) = 14, left: (4 + 10) = 14, 13, 12\nroll back, left: 13 4 12 10\n(4) * (10) = 40, left: (4 * 10) = 40, 13, 12\nroll back, left: 13 4 12 10\n(12) - (4) = 8, left: (12 - 4) = 8, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (12 - 4) = 8\n(8) * (3) = 24, left: ((12 - 4) * (13 - 10)) = 24\nreach 24! expression: ((12 - 4) * (13 - 10))"}, {"input": "13 4 12 10\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 13, 4\n(4) - (-2) = 6, left: (4 - (10 - 12)) = 6, 13\nroll back, left: (10 - 12) = -2, 13, 4\nroll back, left: 13 4 12 10\n(12) - (10) = 2, left: (12 - 10) = 2, 13, 4\nroll back, left: 13 4 12 10\n(4) - (12) = -8, left: (4 - 12) = -8, 13, 10\n(10) - (13) = -3, left: (10 - 13) = -3, (4 - 12) = -8\n(-8) * (-3) = 24, left: ((4 - 12) * (10 - 13)) = 24\nreach 24! expression: ((4 - 12) * (10 - 13))"}, {"input": "13 4 12 10\n", "output": "(4) * (10) = 40, left: (4 * 10) = 40, 13, 12\nroll back, left: 13 4 12 10\n(4) + (10) = 14, left: (4 + 10) = 14, 13, 12\nroll back, left: 13 4 12 10\n(4) / (10) = 2/5, left: (4 / 10) = 2/5, 13, 12\nroll back, left: 13 4 12 10\n(4) - (12) = -8, left: (4 - 12) = -8, 13, 10\n(10) - (13) = -3, left: (10 - 13) = -3, (4 - 12) = -8\n(-8) * (-3) = 24, left: ((4 - 12) * (10 - 13)) = 24\nreach 24! expression: ((4 - 12) * (10 - 13))"}, {"input": "1 4 4 5\n", "output": "(4) * (5) = 20, left: (4 * 5) = 20, 1, 4\n(1) * (4) = 4, left: (1 * 4) = 4, (4 * 5) = 20\n(20) + (4) = 24, left: ((4 * 5) + (1 * 4)) = 24\nreach 24! expression: ((4 * 5) + (1 * 4))"}, {"input": "1 4 4 5\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 4, 5\n(5) / (1/4) = 20, left: (5 / (1 / 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 / (1 / 4))) = 24\nreach 24! expression: (4 + (5 / (1 / 4)))"}, {"input": "1 4 4 5\n", "output": "(4) * (5) = 20, left: (4 * 5) = 20, 1, 4\n(4) / (1) = 4, left: (4 / 1) = 4, (4 * 5) = 20\n(20) + (4) = 24, left: ((4 * 5) + (4 / 1)) = 24\nreach 24! expression: ((4 * 5) + (4 / 1))"}, {"input": "1 4 4 5\n", "output": "(4) * (5) = 20, left: (4 * 5) = 20, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (4 * 5) = 20\n(20) - (3) = 17, left: ((4 * 5) - (4 - 1)) = 17\nroll back, left: (4 - 1) = 3, (4 * 5) = 20\nroll back, left: (4 * 5) = 20, 1, 4\n(1) + (4) = 5, left: (1 + 4) = 5, (4 * 5) = 20\nroll back, left: (4 * 5) = 20, 1, 4\n(4) / (1) = 4, left: (4 / 1) = 4, (4 * 5) = 20\n(20) + (4) = 24, left: ((4 * 5) + (4 / 1)) = 24\nreach 24! expression: ((4 * 5) + (4 / 1))"}, {"input": "1 4 4 5\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 1, 4\nroll back, left: 1 4 4 5\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 1, 4\n(5/4) - (4) = -11/4, left: ((5 / 4) - 4) = -11/4, 1\nroll back, left: (5 / 4) = 5/4, 1, 4\nroll back, left: 1 4 4 5\n(4) * (5) = 20, left: (4 * 5) = 20, 1, 4\n(1) * (4) = 4, left: (1 * 4) = 4, (4 * 5) = 20\n(20) + (4) = 24, left: ((4 * 5) + (1 * 4)) = 24\nreach 24! expression: ((4 * 5) + (1 * 4))"}, {"input": "7 6 2 5\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 6, 2\n(2) - (-2) = 4, left: (2 - (5 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 - (5 - 7))) = 24\nreach 24! expression: (6 * (2 - (5 - 7)))"}, {"input": "7 6 2 5\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 7, 6\n(7) + (-3) = 4, left: (7 + (2 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (2 - 5))) = 24\nreach 24! expression: (6 * (7 + (2 - 5)))"}, {"input": "7 6 2 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (5 - 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (5 - 2))) = 24\nreach 24! expression: (6 * (7 - (5 - 2)))"}, {"input": "7 6 2 5\n", "output": "(7) + (2) = 9, left: (7 + 2) = 9, 6, 5\n(9) - (5) = 4, left: ((7 + 2) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((7 + 2) - 5)) = 24\nreach 24! expression: (6 * ((7 + 2) - 5))"}, {"input": "7 6 2 5\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 6, 2\n(6) - (2) = 4, left: (6 - 2) = 4, (5 - 7) = -2\nroll back, left: (5 - 7) = -2, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (5 - 7) = -2\nroll back, left: (5 - 7) = -2, 6, 2\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, (5 - 7) = -2\nroll back, left: (5 - 7) = -2, 6, 2\n(2) - (-2) = 4, left: (2 - (5 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 - (5 - 7))) = 24\nreach 24! expression: (6 * (2 - (5 - 7)))"}, {"input": "7 6 2 5\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 6, 2\n(2) / (-2) = -1, left: (2 / (5 - 7)) = -1, 6\n(6) * (-1) = -6, left: (6 * (2 / (5 - 7))) = -6\nroll back, left: (2 / (5 - 7)) = -1, 6\nroll back, left: (5 - 7) = -2, 6, 2\n(2) * (-2) = -4, left: (2 * (5 - 7)) = -4, 6\nroll back, left: (5 - 7) = -2, 6, 2\n(2) - (-2) = 4, left: (2 - (5 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 - (5 - 7))) = 24\nreach 24! expression: (6 * (2 - (5 - 7)))"}, {"input": "7 6 2 5\n", "output": "(2) / (5) = 2/5, left: (2 / 5) = 2/5, 7, 6\nroll back, left: 7 6 2 5\n(2) - (5) = -3, left: (2 - 5) = -3, 7, 6\n(-3) / (6) = -1/2, left: ((2 - 5) / 6) = -1/2, 7\n(-1/2) / (7) = -1/14, left: (((2 - 5) / 6) / 7) = -1/14\nroll back, left: ((2 - 5) / 6) = -1/2, 7\nroll back, left: (2 - 5) = -3, 7, 6\n(7) + (-3) = 4, left: (7 + (2 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (2 - 5))) = 24\nreach 24! expression: (6 * (7 + (2 - 5)))"}, {"input": "7 6 2 5\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 2, 5\nroll back, left: 7 6 2 5\n(7) + (6) = 13, left: (7 + 6) = 13, 2, 5\n(5) * (13) = 65, left: (5 * (7 + 6)) = 65, 2\nroll back, left: (7 + 6) = 13, 2, 5\nroll back, left: 7 6 2 5\n(5) - (2) = 3, left: (5 - 2) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (5 - 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (5 - 2))) = 24\nreach 24! expression: (6 * (7 - (5 - 2)))"}, {"input": "7 6 2 5\n", "output": "(7) / (6) = 7/6, left: (7 / 6) = 7/6, 2, 5\nroll back, left: 7 6 2 5\n(7) + (6) = 13, left: (7 + 6) = 13, 2, 5\n(2) + (5) = 7, left: (2 + 5) = 7, (7 + 6) = 13\nroll back, left: (7 + 6) = 13, 2, 5\nroll back, left: 7 6 2 5\n(7) + (2) = 9, left: (7 + 2) = 9, 6, 5\n(9) - (5) = 4, left: ((7 + 2) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((7 + 2) - 5)) = 24\nreach 24! expression: (6 * ((7 + 2) - 5))"}, {"input": "4 3 6 12\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 4, 3\n(4) / (1/2) = 8, left: (4 / (6 / 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 / (6 / 12))) = 24\nreach 24! expression: (3 * (4 / (6 / 12)))"}, {"input": "4 3 6 12\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 4, 12\n(4) * (1/2) = 2, left: (4 * (3 / 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (4 * (3 / 6))) = 24\nreach 24! expression: (12 * (4 * (3 / 6)))"}, {"input": "4 3 6 12\n", "output": "(6) + (12) = 18, left: (6 + 12) = 18, 4, 3\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, (6 + 12) = 18\n(18) * (4/3) = 24, left: ((6 + 12) * (4 / 3)) = 24\nreach 24! expression: ((6 + 12) * (4 / 3))"}, {"input": "4 3 6 12\n", "output": "(6) + (12) = 18, left: (6 + 12) = 18, 4, 3\n(4) * (18) = 72, left: (4 * (6 + 12)) = 72, 3\n(72) / (3) = 24, left: ((4 * (6 + 12)) / 3) = 24\nreach 24! expression: ((4 * (6 + 12)) / 3)"}, {"input": "4 3 6 12\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 6, 12\n(6) + (12) = 18, left: (6 + 12) = 18, (3 / 4) = 3/4\n(18) / (3/4) = 24, left: ((6 + 12) / (3 / 4)) = 24\nreach 24! expression: ((6 + 12) / (3 / 4))"}, {"input": "4 3 6 12\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 4, 3\n(4) / (1/2) = 8, left: (4 / (6 / 12)) = 8, 3\n(8) - (3) = 5, left: ((4 / (6 / 12)) - 3) = 5\nroll back, left: (4 / (6 / 12)) = 8, 3\n(3) - (8) = -5, left: (3 - (4 / (6 / 12))) = -5\nroll back, left: (4 / (6 / 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 / (6 / 12))) = 24\nreach 24! expression: (3 * (4 / (6 / 12)))"}, {"input": "4 3 6 12\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (6 - 12) = -6\nroll back, left: (6 - 12) = -6, 4, 3\nroll back, left: 4 3 6 12\n(6) * (12) = 72, left: (6 * 12) = 72, 4, 3\nroll back, left: 4 3 6 12\n(6) + (12) = 18, left: (6 + 12) = 18, 4, 3\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, (6 + 12) = 18\n(18) * (4/3) = 24, left: ((6 + 12) * (4 / 3)) = 24\nreach 24! expression: ((6 + 12) * (4 / 3))"}, {"input": "4 3 6 12\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 4, 3\n(4) / (1/2) = 8, left: (4 / (6 / 12)) = 8, 3\n(8) - (3) = 5, left: ((4 / (6 / 12)) - 3) = 5\nroll back, left: (4 / (6 / 12)) = 8, 3\n(3) - (8) = -5, left: (3 - (4 / (6 / 12))) = -5\nroll back, left: (4 / (6 / 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 / (6 / 12))) = 24\nreach 24! expression: (3 * (4 / (6 / 12)))"}, {"input": "4 3 6 12\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 4, 3\n(4) / (1/2) = 8, left: (4 / (6 / 12)) = 8, 3\n(8) - (3) = 5, left: ((4 / (6 / 12)) - 3) = 5\nroll back, left: (4 / (6 / 12)) = 8, 3\n(3) - (8) = -5, left: (3 - (4 / (6 / 12))) = -5\nroll back, left: (4 / (6 / 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 / (6 / 12))) = 24\nreach 24! expression: (3 * (4 / (6 / 12)))"}, {"input": "4 3 6 12\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 4, 3\n(4) / (1/2) = 8, left: (4 / (6 / 12)) = 8, 3\n(8) - (3) = 5, left: ((4 / (6 / 12)) - 3) = 5\nroll back, left: (4 / (6 / 12)) = 8, 3\n(3) - (8) = -5, left: (3 - (4 / (6 / 12))) = -5\nroll back, left: (4 / (6 / 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 / (6 / 12))) = 24\nreach 24! expression: (3 * (4 / (6 / 12)))"}, {"input": "10 11 2 1\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 10, 11\n(10) + (11) = 21, left: (10 + 11) = 21, (2 + 1) = 3\n(3) + (21) = 24, left: ((2 + 1) + (10 + 11)) = 24\nreach 24! expression: ((2 + 1) + (10 + 11))"}, {"input": "10 11 2 1\n", "output": "(10) + (11) = 21, left: (10 + 11) = 21, 2, 1\n(2) + (21) = 23, left: (2 + (10 + 11)) = 23, 1\n(1) + (23) = 24, left: (1 + (2 + (10 + 11))) = 24\nreach 24! expression: (1 + (2 + (10 + 11)))"}, {"input": "10 11 2 1\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 10, 2\n(2) + (12) = 14, left: (2 + (11 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 + (11 + 1))) = 24\nreach 24! expression: (10 + (2 + (11 + 1)))"}, {"input": "10 11 2 1\n", "output": "(11) + (2) = 13, left: (11 + 2) = 13, 10, 1\n(1) + (13) = 14, left: (1 + (11 + 2)) = 14, 10\n(10) + (14) = 24, left: (10 + (1 + (11 + 2))) = 24\nreach 24! expression: (10 + (1 + (11 + 2)))"}, {"input": "10 11 2 1\n", "output": "(11) + (2) = 13, left: (11 + 2) = 13, 10, 1\n(10) + (1) = 11, left: (10 + 1) = 11, (11 + 2) = 13\n(13) + (11) = 24, left: ((11 + 2) + (10 + 1)) = 24\nreach 24! expression: ((11 + 2) + (10 + 1))"}, {"input": "10 11 2 1\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 10, 2\n(2) - (11) = -9, left: (2 - (11 / 1)) = -9, 10\nroll back, left: (11 / 1) = 11, 10, 2\nroll back, left: 10 11 2 1\n(11) * (1) = 11, left: (11 * 1) = 11, 10, 2\nroll back, left: 10 11 2 1\n(11) + (1) = 12, left: (11 + 1) = 12, 10, 2\n(2) + (12) = 14, left: (2 + (11 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 + (11 + 1))) = 24\nreach 24! expression: (10 + (2 + (11 + 1)))"}, {"input": "10 11 2 1\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 10, 11\n(-1) - (11) = -12, left: ((1 - 2) - 11) = -12, 10\nroll back, left: (1 - 2) = -1, 10, 11\nroll back, left: 10 11 2 1\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 10, 11\nroll back, left: 10 11 2 1\n(2) + (1) = 3, left: (2 + 1) = 3, 10, 11\n(10) + (11) = 21, left: (10 + 11) = 21, (2 + 1) = 3\n(3) + (21) = 24, left: ((2 + 1) + (10 + 11)) = 24\nreach 24! expression: ((2 + 1) + (10 + 11))"}, {"input": "10 11 2 1\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 10, 1\n(9) / (1) = 9, left: ((11 - 2) / 1) = 9, 10\nroll back, left: (11 - 2) = 9, 10, 1\nroll back, left: 10 11 2 1\n(2) / (11) = 2/11, left: (2 / 11) = 2/11, 10, 1\nroll back, left: 10 11 2 1\n(11) + (2) = 13, left: (11 + 2) = 13, 10, 1\n(1) + (13) = 14, left: (1 + (11 + 2)) = 14, 10\n(10) + (14) = 24, left: (10 + (1 + (11 + 2))) = 24\nreach 24! expression: (10 + (1 + (11 + 2)))"}, {"input": "1 6 3 3\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 1, 3\n(9) - (1) = 8, left: ((6 + 3) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((6 + 3) - 1)) = 24\nreach 24! expression: (3 * ((6 + 3) - 1))"}, {"input": "1 6 3 3\n", "output": "(1) + (6) = 7, left: (1 + 6) = 7, 3, 3\n(3) * (7) = 21, left: (3 * (1 + 6)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 * (1 + 6))) = 24\nreach 24! expression: (3 + (3 * (1 + 6)))"}, {"input": "1 6 3 3\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 6, 3\n(6) - (-2) = 8, left: (6 - (1 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (1 - 3))) = 24\nreach 24! expression: (3 * (6 - (1 - 3)))"}, {"input": "1 6 3 3\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 3, 3\n(3) + (5) = 8, left: (3 + (6 - 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (3 + (6 - 1))) = 24\nreach 24! expression: (3 * (3 + (6 - 1)))"}, {"input": "1 6 3 3\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 3, 3\n(3) + (6) = 9, left: (3 + (6 / 1)) = 9, 3\nroll back, left: (6 / 1) = 6, 3, 3\nroll back, left: 1 6 3 3\n(1) + (6) = 7, left: (1 + 6) = 7, 3, 3\n(3) - (7) = -4, left: (3 - (1 + 6)) = -4, 3\nroll back, left: (1 + 6) = 7, 3, 3\n(3) * (7) = 21, left: (3 * (1 + 6)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 * (1 + 6))) = 24\nreach 24! expression: (3 + (3 * (1 + 6)))"}, {"input": "1 6 3 3\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 1, 3\n(1) + (9) = 10, left: (1 + (6 + 3)) = 10, 3\nroll back, left: (6 + 3) = 9, 1, 3\n(1) / (9) = 1/9, left: (1 / (6 + 3)) = 1/9, 3\nroll back, left: (6 + 3) = 9, 1, 3\n(1) - (9) = -8, left: (1 - (6 + 3)) = -8, 3\nroll back, left: (6 + 3) = 9, 1, 3\n(9) - (1) = 8, left: ((6 + 3) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((6 + 3) - 1)) = 24\nreach 24! expression: (3 * ((6 + 3) - 1))"}, {"input": "1 6 3 3\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 6, 3\n(-2) - (6) = -8, left: ((1 - 3) - 6) = -8, 3\nroll back, left: (1 - 3) = -2, 6, 3\n(-2) / (6) = -1/3, left: ((1 - 3) / 6) = -1/3, 3\n(3) + (-1/3) = 8/3, left: (3 + ((1 - 3) / 6)) = 8/3\nroll back, left: ((1 - 3) / 6) = -1/3, 3\nroll back, left: (1 - 3) = -2, 6, 3\n(6) - (-2) = 8, left: (6 - (1 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (1 - 3))) = 24\nreach 24! expression: (3 * (6 - (1 - 3)))"}, {"input": "1 6 3 3\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 1, 6\n(1) - (1) = 0, left: (1 - (3 / 3)) = 0, 6\n(6) - (0) = 6, left: (6 - (1 - (3 / 3))) = 6\nroll back, left: (1 - (3 / 3)) = 0, 6\nroll back, left: (3 / 3) = 1, 1, 6\nroll back, left: 1 6 3 3\n(6) - (1) = 5, left: (6 - 1) = 5, 3, 3\n(3) + (5) = 8, left: (3 + (6 - 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (3 + (6 - 1))) = 24\nreach 24! expression: (3 * (3 + (6 - 1)))"}, {"input": "1 6 3 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 1, 3\nroll back, left: 1 6 3 3\n(3) - (6) = -3, left: (3 - 6) = -3, 1, 3\n(-3) - (3) = -6, left: ((3 - 6) - 3) = -6, 1\nroll back, left: (3 - 6) = -3, 1, 3\nroll back, left: 1 6 3 3\n(6) + (3) = 9, left: (6 + 3) = 9, 1, 3\n(9) - (1) = 8, left: ((6 + 3) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((6 + 3) - 1)) = 24\nreach 24! expression: (3 * ((6 + 3) - 1))"}, {"input": "1 11 2 12\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 11, 12\n(11) + (12) = 23, left: (11 + 12) = 23, (1 - 2) = -1\n(23) - (-1) = 24, left: ((11 + 12) - (1 - 2)) = 24\nreach 24! expression: ((11 + 12) - (1 - 2))"}, {"input": "1 11 2 12\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 11, 12\n(12) + (1) = 13, left: (12 + (2 - 1)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (2 - 1))) = 24\nreach 24! expression: (11 + (12 + (2 - 1)))"}, {"input": "1 11 2 12\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 11, 12\n(11) + (12) = 23, left: (11 + 12) = 23, (2 - 1) = 1\n(1) + (23) = 24, left: ((2 - 1) + (11 + 12)) = 24\nreach 24! expression: ((2 - 1) + (11 + 12))"}, {"input": "1 11 2 12\n", "output": "(1) - (12) = -11, left: (1 - 12) = -11, 11, 2\n(-11) - (2) = -13, left: ((1 - 12) - 2) = -13, 11\n(11) - (-13) = 24, left: (11 - ((1 - 12) - 2)) = 24\nreach 24! expression: (11 - ((1 - 12) - 2))"}, {"input": "1 11 2 12\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 11, 12\n(11) - (2) = 9, left: (11 - (1 * 2)) = 9, 12\nroll back, left: (1 * 2) = 2, 11, 12\nroll back, left: 1 11 2 12\n(1) + (2) = 3, left: (1 + 2) = 3, 11, 12\nroll back, left: 1 11 2 12\n(2) - (1) = 1, left: (2 - 1) = 1, 11, 12\n(12) + (1) = 13, left: (12 + (2 - 1)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (2 - 1))) = 24\nreach 24! expression: (11 + (12 + (2 - 1)))"}, {"input": "1 11 2 12\n", "output": "(1) + (12) = 13, left: (1 + 12) = 13, 11, 2\n(2) * (13) = 26, left: (2 * (1 + 12)) = 26, 11\nroll back, left: (1 + 12) = 13, 11, 2\nroll back, left: 1 11 2 12\n(1) * (12) = 12, left: (1 * 12) = 12, 11, 2\nroll back, left: 1 11 2 12\n(1) - (12) = -11, left: (1 - 12) = -11, 11, 2\n(-11) - (2) = -13, left: ((1 - 12) - 2) = -13, 11\n(11) - (-13) = 24, left: (11 - ((1 - 12) - 2)) = 24\nreach 24! expression: (11 - ((1 - 12) - 2))"}, {"input": "6 12 12 12\n", "output": "(12) * (12) = 144, left: (12 * 12) = 144, 6, 12\n(12) - (6) = 6, left: (12 - 6) = 6, (12 * 12) = 144\n(144) / (6) = 24, left: ((12 * 12) / (12 - 6)) = 24\nreach 24! expression: ((12 * 12) / (12 - 6))"}, {"input": "6 12 12 12\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 12, 12\n(6) / (12) = 1/2, left: ((12 - 6) / 12) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((12 - 6) / 12)) = 24\nreach 24! expression: (12 / ((12 - 6) / 12))"}, {"input": "6 12 12 12\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 12, 12\n(12) / (6) = 2, left: (12 / (12 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 / (12 - 6))) = 24\nreach 24! expression: (12 * (12 / (12 - 6)))"}, {"input": "6 12 12 12\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 12, 12\n(2) / (12) = 1/6, left: ((12 / 6) / 12) = 1/6, 12\nroll back, left: (12 / 6) = 2, 12, 12\nroll back, left: 6 12 12 12\n(6) - (12) = -6, left: (6 - 12) = -6, 12, 12\nroll back, left: 6 12 12 12\n(12) - (6) = 6, left: (12 - 6) = 6, 12, 12\n(12) / (6) = 2, left: (12 / (12 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 / (12 - 6))) = 24\nreach 24! expression: (12 * (12 / (12 - 6)))"}, {"input": "3 12 3 13\n", "output": "(12) + (13) = 25, left: (12 + 13) = 25, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (12 + 13) = 25\n(25) - (1) = 24, left: ((12 + 13) - (3 / 3)) = 24\nreach 24! expression: ((12 + 13) - (3 / 3))"}, {"input": "3 12 3 13\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 3, 13\n(3) * (13) = 39, left: (3 * 13) = 39, (12 + 3) = 15\n(39) - (15) = 24, left: ((3 * 13) - (12 + 3)) = 24\nreach 24! expression: ((3 * 13) - (12 + 3))"}, {"input": "3 12 3 13\n", "output": "(3) * (13) = 39, left: (3 * 13) = 39, 12, 3\n(39) - (3) = 36, left: ((3 * 13) - 3) = 36, 12\n(36) - (12) = 24, left: (((3 * 13) - 3) - 12) = 24\nreach 24! expression: (((3 * 13) - 3) - 12)"}, {"input": "3 12 3 13\n", "output": "(3) * (13) = 39, left: (3 * 13) = 39, 3, 12\n(3) + (12) = 15, left: (3 + 12) = 15, (3 * 13) = 39\n(39) - (15) = 24, left: ((3 * 13) - (3 + 12)) = 24\nreach 24! expression: ((3 * 13) - (3 + 12))"}, {"input": "11 8 2 10\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 8, 10\n(22) - (8) = 14, left: ((11 * 2) - 8) = 14, 10\n(10) + (14) = 24, left: (10 + ((11 * 2) - 8)) = 24\nreach 24! expression: (10 + ((11 * 2) - 8))"}, {"input": "11 8 2 10\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 11, 2\n(11) * (-2) = -22, left: (11 * (8 - 10)) = -22, 2\n(2) - (-22) = 24, left: (2 - (11 * (8 - 10))) = 24\nreach 24! expression: (2 - (11 * (8 - 10)))"}, {"input": "11 8 2 10\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 8, 2\n(2) - (-1) = 3, left: (2 - (10 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (10 - 11))) = 24\nreach 24! expression: (8 * (2 - (10 - 11)))"}, {"input": "11 8 2 10\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (10 - 8) = 2\n(2) + (22) = 24, left: ((10 - 8) + (11 * 2)) = 24\nreach 24! expression: ((10 - 8) + (11 * 2))"}, {"input": "11 8 2 10\n", "output": "(10) / (11) = 10/11, left: (10 / 11) = 10/11, 8, 2\nroll back, left: 11 8 2 10\n(10) - (11) = -1, left: (10 - 11) = -1, 8, 2\n(2) / (-1) = -2, left: (2 / (10 - 11)) = -2, 8\n(8) / (-2) = -4, left: (8 / (2 / (10 - 11))) = -4\nroll back, left: (2 / (10 - 11)) = -2, 8\nroll back, left: (10 - 11) = -1, 8, 2\n(2) - (-1) = 3, left: (2 - (10 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (10 - 11))) = 24\nreach 24! expression: (8 * (2 - (10 - 11)))"}, {"input": "11 8 2 10\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 11, 2\n(11) - (18) = -7, left: (11 - (8 + 10)) = -7, 2\nroll back, left: (8 + 10) = 18, 11, 2\n(2) / (18) = 1/9, left: (2 / (8 + 10)) = 1/9, 11\nroll back, left: (8 + 10) = 18, 11, 2\nroll back, left: 11 8 2 10\n(8) - (10) = -2, left: (8 - 10) = -2, 11, 2\n(11) * (-2) = -22, left: (11 * (8 - 10)) = -22, 2\n(2) - (-22) = 24, left: (2 - (11 * (8 - 10))) = 24\nreach 24! expression: (2 - (11 * (8 - 10)))"}, {"input": "3 9 13 8\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 3, 9\n(3) * (-5) = -15, left: (3 * (8 - 13)) = -15, 9\n(9) - (-15) = 24, left: (9 - (3 * (8 - 13))) = 24\nreach 24! expression: (9 - (3 * (8 - 13)))"}, {"input": "3 9 13 8\n", "output": "(13) + (8) = 21, left: (13 + 8) = 21, 3, 9\n(9) / (3) = 3, left: (9 / 3) = 3, (13 + 8) = 21\n(21) + (3) = 24, left: ((13 + 8) + (9 / 3)) = 24\nreach 24! expression: ((13 + 8) + (9 / 3))"}, {"input": "3 9 13 8\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 13, 8\n(13) + (3) = 16, left: (13 + (9 / 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (13 + (9 / 3))) = 24\nreach 24! expression: (8 + (13 + (9 / 3)))"}, {"input": "3 9 13 8\n", "output": "(8) - (9) = -1, left: (8 - 9) = -1, 3, 13\n(3) * (-1) = -3, left: (3 * (8 - 9)) = -3, 13\n(13) - (-3) = 16, left: (13 - (3 * (8 - 9))) = 16\nroll back, left: (3 * (8 - 9)) = -3, 13\nroll back, left: (8 - 9) = -1, 3, 13\nroll back, left: 3 9 13 8\n(13) + (8) = 21, left: (13 + 8) = 21, 3, 9\n(9) / (3) = 3, left: (9 / 3) = 3, (13 + 8) = 21\n(21) + (3) = 24, left: ((13 + 8) + (9 / 3)) = 24\nreach 24! expression: ((13 + 8) + (9 / 3))"}, {"input": "3 9 13 8\n", "output": "(8) / (13) = 8/13, left: (8 / 13) = 8/13, 3, 9\nroll back, left: 3 9 13 8\n(13) / (8) = 13/8, left: (13 / 8) = 13/8, 3, 9\n(3) * (13/8) = 39/8, left: (3 * (13 / 8)) = 39/8, 9\nroll back, left: (13 / 8) = 13/8, 3, 9\nroll back, left: 3 9 13 8\n(8) - (13) = -5, left: (8 - 13) = -5, 3, 9\n(3) * (-5) = -15, left: (3 * (8 - 13)) = -15, 9\n(9) - (-15) = 24, left: (9 - (3 * (8 - 13))) = 24\nreach 24! expression: (9 - (3 * (8 - 13)))"}, {"input": "3 9 13 8\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 9, 13\n(13) * (-5) = -65, left: (13 * (3 - 8)) = -65, 9\nroll back, left: (3 - 8) = -5, 9, 13\nroll back, left: 3 9 13 8\n(9) + (13) = 22, left: (9 + 13) = 22, 3, 8\nroll back, left: 3 9 13 8\n(13) + (8) = 21, left: (13 + 8) = 21, 3, 9\n(9) / (3) = 3, left: (9 / 3) = 3, (13 + 8) = 21\n(21) + (3) = 24, left: ((13 + 8) + (9 / 3)) = 24\nreach 24! expression: ((13 + 8) + (9 / 3))"}, {"input": "3 9 13 8\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 9, 8\n(9) + (-10) = -1, left: (9 + (3 - 13)) = -1, 8\nroll back, left: (3 - 13) = -10, 9, 8\nroll back, left: 3 9 13 8\n(9) - (3) = 6, left: (9 - 3) = 6, 13, 8\nroll back, left: 3 9 13 8\n(9) / (3) = 3, left: (9 / 3) = 3, 13, 8\n(13) + (3) = 16, left: (13 + (9 / 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (13 + (9 / 3))) = 24\nreach 24! expression: (8 + (13 + (9 / 3)))"}, {"input": "3 9 13 8\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 9, 13\n(13) - (3/8) = 101/8, left: (13 - (3 / 8)) = 101/8, 9\nroll back, left: (3 / 8) = 3/8, 9, 13\nroll back, left: 3 9 13 8\n(9) - (8) = 1, left: (9 - 8) = 1, 3, 13\nroll back, left: 3 9 13 8\n(8) - (13) = -5, left: (8 - 13) = -5, 3, 9\n(3) * (-5) = -15, left: (3 * (8 - 13)) = -15, 9\n(9) - (-15) = 24, left: (9 - (3 * (8 - 13))) = 24\nreach 24! expression: (9 - (3 * (8 - 13)))"}, {"input": "9 7 1 7\n", "output": "(9) + (7) = 16, left: (9 + 7) = 16, 1, 7\n(1) + (7) = 8, left: (1 + 7) = 8, (9 + 7) = 16\n(16) + (8) = 24, left: ((9 + 7) + (1 + 7)) = 24\nreach 24! expression: ((9 + 7) + (1 + 7))"}, {"input": "9 7 1 7\n", "output": "(7) + (1) = 8, left: (7 + 1) = 8, 9, 7\n(9) + (8) = 17, left: (9 + (7 + 1)) = 17, 7\n(7) + (17) = 24, left: (7 + (9 + (7 + 1))) = 24\nreach 24! expression: (7 + (9 + (7 + 1)))"}, {"input": "9 7 1 7\n", "output": "(9) + (7) = 16, left: (9 + 7) = 16, 7, 1\n(1) + (16) = 17, left: (1 + (9 + 7)) = 17, 7\n(7) + (17) = 24, left: (7 + (1 + (9 + 7))) = 24\nreach 24! expression: (7 + (1 + (9 + 7)))"}, {"input": "9 7 1 7\n", "output": "(9) + (1) = 10, left: (9 + 1) = 10, 7, 7\n(7) + (10) = 17, left: (7 + (9 + 1)) = 17, 7\n(7) + (17) = 24, left: (7 + (7 + (9 + 1))) = 24\nreach 24! expression: (7 + (7 + (9 + 1)))"}, {"input": "9 7 1 7\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 7, 1\nroll back, left: 9 7 1 7\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, 7, 1\nroll back, left: 9 7 1 7\n(9) * (7) = 63, left: (9 * 7) = 63, 7, 1\nroll back, left: 9 7 1 7\n(9) + (7) = 16, left: (9 + 7) = 16, 7, 1\n(1) + (16) = 17, left: (1 + (9 + 7)) = 17, 7\n(7) + (17) = 24, left: (7 + (1 + (9 + 7))) = 24\nreach 24! expression: (7 + (1 + (9 + 7)))"}, {"input": "9 7 1 7\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 7, 7\n(7) / (7) = 1, left: (7 / 7) = 1, (9 - 1) = 8\nroll back, left: (9 - 1) = 8, 7, 7\nroll back, left: 9 7 1 7\n(9) / (1) = 9, left: (9 / 1) = 9, 7, 7\nroll back, left: 9 7 1 7\n(9) + (1) = 10, left: (9 + 1) = 10, 7, 7\n(7) + (10) = 17, left: (7 + (9 + 1)) = 17, 7\n(7) + (17) = 24, left: (7 + (7 + (9 + 1))) = 24\nreach 24! expression: (7 + (7 + (9 + 1)))"}, {"input": "9 7 1 7\n", "output": "(9) * (7) = 63, left: (9 * 7) = 63, 1, 7\n(63) - (1) = 62, left: ((9 * 7) - 1) = 62, 7\nroll back, left: (9 * 7) = 63, 1, 7\nroll back, left: 9 7 1 7\n(9) - (7) = 2, left: (9 - 7) = 2, 1, 7\nroll back, left: 9 7 1 7\n(9) + (7) = 16, left: (9 + 7) = 16, 1, 7\n(1) + (7) = 8, left: (1 + 7) = 8, (9 + 7) = 16\n(16) + (8) = 24, left: ((9 + 7) + (1 + 7)) = 24\nreach 24! expression: ((9 + 7) + (1 + 7))"}, {"input": "9 7 1 7\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 7, 7\n(8) - (7) = 1, left: ((9 - 1) - 7) = 1, 7\n(7) / (1) = 7, left: (7 / ((9 - 1) - 7)) = 7\nroll back, left: ((9 - 1) - 7) = 1, 7\nroll back, left: (9 - 1) = 8, 7, 7\nroll back, left: 9 7 1 7\n(9) + (1) = 10, left: (9 + 1) = 10, 7, 7\n(7) + (10) = 17, left: (7 + (9 + 1)) = 17, 7\n(7) + (17) = 24, left: (7 + (7 + (9 + 1))) = 24\nreach 24! expression: (7 + (7 + (9 + 1)))"}, {"input": "9 7 1 7\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 9, 7\nroll back, left: 9 7 1 7\n(7) / (1) = 7, left: (7 / 1) = 7, 9, 7\nroll back, left: 9 7 1 7\n(1) / (7) = 1/7, left: (1 / 7) = 1/7, 9, 7\nroll back, left: 9 7 1 7\n(7) + (1) = 8, left: (7 + 1) = 8, 9, 7\n(9) + (8) = 17, left: (9 + (7 + 1)) = 17, 7\n(7) + (17) = 24, left: (7 + (9 + (7 + 1))) = 24\nreach 24! expression: (7 + (9 + (7 + 1)))"}, {"input": "11 8 12 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 11, 12\n(12) + (1) = 13, left: (12 + (8 / 8)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (8 / 8))) = 24\nreach 24! expression: (11 + (12 + (8 / 8)))"}, {"input": "11 8 12 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 11, 12\n(11) + (12) = 23, left: (11 + 12) = 23, (8 / 8) = 1\n(1) + (23) = 24, left: ((8 / 8) + (11 + 12)) = 24\nreach 24! expression: ((8 / 8) + (11 + 12))"}, {"input": "11 8 12 8\n", "output": "(11) + (12) = 23, left: (11 + 12) = 23, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (11 + 12) = 23\n(23) + (1) = 24, left: ((11 + 12) + (8 / 8)) = 24\nreach 24! expression: ((11 + 12) + (8 / 8))"}, {"input": "11 8 12 8\n", "output": "(11) + (8) = 19, left: (11 + 8) = 19, 12, 8\nroll back, left: 11 8 12 8\n(11) * (8) = 88, left: (11 * 8) = 88, 12, 8\nroll back, left: 11 8 12 8\n(12) / (11) = 12/11, left: (12 / 11) = 12/11, 8, 8\nroll back, left: 11 8 12 8\n(11) + (12) = 23, left: (11 + 12) = 23, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (11 + 12) = 23\n(23) + (1) = 24, left: ((11 + 12) + (8 / 8)) = 24\nreach 24! expression: ((11 + 12) + (8 / 8))"}, {"input": "11 8 12 8\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 11, 8\nroll back, left: 11 8 12 8\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, 8, 12\nroll back, left: 11 8 12 8\n(8) + (8) = 16, left: (8 + 8) = 16, 11, 12\nroll back, left: 11 8 12 8\n(8) / (8) = 1, left: (8 / 8) = 1, 11, 12\n(12) + (1) = 13, left: (12 + (8 / 8)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (8 / 8))) = 24\nreach 24! expression: (11 + (12 + (8 / 8)))"}, {"input": "11 8 12 8\n", "output": "(11) * (8) = 88, left: (11 * 8) = 88, 8, 12\nroll back, left: 11 8 12 8\n(11) - (8) = 3, left: (11 - 8) = 3, 8, 12\nroll back, left: 11 8 12 8\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, 12, 8\nroll back, left: 11 8 12 8\n(8) / (8) = 1, left: (8 / 8) = 1, 11, 12\n(11) + (12) = 23, left: (11 + 12) = 23, (8 / 8) = 1\n(1) + (23) = 24, left: ((8 / 8) + (11 + 12)) = 24\nreach 24! expression: ((8 / 8) + (11 + 12))"}, {"input": "12 6 5 13\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 12, 6\n(8) - (6) = 2, left: ((13 - 5) - 6) = 2, 12\n(12) * (2) = 24, left: (12 * ((13 - 5) - 6)) = 24\nreach 24! expression: (12 * ((13 - 5) - 6))"}, {"input": "12 6 5 13\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 12, 5\n(12) + (5) = 17, left: (12 + 5) = 17, (13 - 6) = 7\n(7) + (17) = 24, left: ((13 - 6) + (12 + 5)) = 24\nreach 24! expression: ((13 - 6) + (12 + 5))"}, {"input": "12 6 5 13\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 5, 13\n(5) + (13) = 18, left: (5 + 13) = 18, (6 - 12) = -6\n(18) - (-6) = 24, left: ((5 + 13) - (6 - 12)) = 24\nreach 24! expression: ((5 + 13) - (6 - 12))"}, {"input": "12 6 5 13\n", "output": "(5) + (13) = 18, left: (5 + 13) = 18, 12, 6\n(12) - (6) = 6, left: (12 - 6) = 6, (5 + 13) = 18\n(18) + (6) = 24, left: ((5 + 13) + (12 - 6)) = 24\nreach 24! expression: ((5 + 13) + (12 - 6))"}, {"input": "12 6 5 13\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 12, 5\n(7) - (5) = 2, left: ((13 - 6) - 5) = 2, 12\n(12) * (2) = 24, left: (12 * ((13 - 6) - 5)) = 24\nreach 24! expression: (12 * ((13 - 6) - 5))"}, {"input": "12 11 5 8\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (11 - 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (11 - 8))) = 24\nreach 24! expression: (12 * (5 - (11 - 8)))"}, {"input": "12 11 5 8\n", "output": "(5) - (11) = -6, left: (5 - 11) = -6, 12, 8\n(8) + (-6) = 2, left: (8 + (5 - 11)) = 2, 12\n(12) * (2) = 24, left: (12 * (8 + (5 - 11))) = 24\nreach 24! expression: (12 * (8 + (5 - 11)))"}, {"input": "12 11 5 8\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 12, 8\n(16) / (8) = 2, left: ((11 + 5) / 8) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 + 5) / 8)) = 24\nreach 24! expression: (12 * ((11 + 5) / 8))"}, {"input": "12 11 5 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 12, 11\n(13) - (11) = 2, left: ((5 + 8) - 11) = 2, 12\n(12) * (2) = 24, left: (12 * ((5 + 8) - 11)) = 24\nreach 24! expression: (12 * ((5 + 8) - 11))"}, {"input": "12 11 5 8\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 11, 5\n(11) + (5) = 16, left: (11 + 5) = 16, (12 / 8) = 3/2\n(3/2) * (16) = 24, left: ((12 / 8) * (11 + 5)) = 24\nreach 24! expression: ((12 / 8) * (11 + 5))"}, {"input": "12 11 5 8\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 11, 8\n(7) - (11) = -4, left: ((12 - 5) - 11) = -4, 8\nroll back, left: (12 - 5) = 7, 11, 8\nroll back, left: 12 11 5 8\n(11) + (8) = 19, left: (11 + 8) = 19, 12, 5\nroll back, left: 12 11 5 8\n(11) - (8) = 3, left: (11 - 8) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (11 - 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (11 - 8))) = 24\nreach 24! expression: (12 * (5 - (11 - 8)))"}, {"input": "12 11 5 8\n", "output": "(12) + (5) = 17, left: (12 + 5) = 17, 11, 8\n(11) + (17) = 28, left: (11 + (12 + 5)) = 28, 8\nroll back, left: (12 + 5) = 17, 11, 8\nroll back, left: 12 11 5 8\n(12) - (5) = 7, left: (12 - 5) = 7, 11, 8\nroll back, left: 12 11 5 8\n(5) - (11) = -6, left: (5 - 11) = -6, 12, 8\n(8) + (-6) = 2, left: (8 + (5 - 11)) = 2, 12\n(12) * (2) = 24, left: (12 * (8 + (5 - 11))) = 24\nreach 24! expression: (12 * (8 + (5 - 11)))"}, {"input": "12 11 5 8\n", "output": "(12) / (5) = 12/5, left: (12 / 5) = 12/5, 11, 8\nroll back, left: 12 11 5 8\n(12) - (5) = 7, left: (12 - 5) = 7, 11, 8\nroll back, left: 12 11 5 8\n(12) * (5) = 60, left: (12 * 5) = 60, 11, 8\nroll back, left: 12 11 5 8\n(12) / (8) = 3/2, left: (12 / 8) = 3/2, 11, 5\n(11) + (5) = 16, left: (11 + 5) = 16, (12 / 8) = 3/2\n(3/2) * (16) = 24, left: ((12 / 8) * (11 + 5)) = 24\nreach 24! expression: ((12 / 8) * (11 + 5))"}, {"input": "12 11 5 8\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 12, 11\n(12) / (-3) = -4, left: (12 / (5 - 8)) = -4, 11\nroll back, left: (5 - 8) = -3, 12, 11\nroll back, left: 12 11 5 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 12, 11\nroll back, left: 12 11 5 8\n(5) + (8) = 13, left: (5 + 8) = 13, 12, 11\n(13) - (11) = 2, left: ((5 + 8) - 11) = 2, 12\n(12) * (2) = 24, left: (12 * ((5 + 8) - 11)) = 24\nreach 24! expression: (12 * ((5 + 8) - 11))"}, {"input": "5 10 9 6\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (9 - 10)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (9 - 10))) = 24\nreach 24! expression: (6 * (5 + (9 - 10)))"}, {"input": "5 10 9 6\n", "output": "(9) / (5) = 9/5, left: (9 / 5) = 9/5, 10, 6\n(10) * (9/5) = 18, left: (10 * (9 / 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (10 * (9 / 5))) = 24\nreach 24! expression: (6 + (10 * (9 / 5)))"}, {"input": "5 10 9 6\n", "output": "(10) * (9) = 90, left: (10 * 9) = 90, 5, 6\n(90) / (5) = 18, left: ((10 * 9) / 5) = 18, 6\n(6) + (18) = 24, left: (6 + ((10 * 9) / 5)) = 24\nreach 24! expression: (6 + ((10 * 9) / 5))"}, {"input": "5 10 9 6\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (10 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (10 - 9))) = 24\nreach 24! expression: (6 * (5 - (10 - 9)))"}, {"input": "5 10 9 6\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 10, 9\nroll back, left: 5 10 9 6\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 10, 9\nroll back, left: 5 10 9 6\n(6) - (10) = -4, left: (6 - 10) = -4, 5, 9\nroll back, left: 5 10 9 6\n(9) - (10) = -1, left: (9 - 10) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (9 - 10)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (9 - 10))) = 24\nreach 24! expression: (6 * (5 + (9 - 10)))"}, {"input": "5 10 9 6\n", "output": "(9) * (6) = 54, left: (9 * 6) = 54, 5, 10\nroll back, left: 5 10 9 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 5, 10\nroll back, left: 5 10 9 6\n(6) - (9) = -3, left: (6 - 9) = -3, 5, 10\nroll back, left: 5 10 9 6\n(10) * (9) = 90, left: (10 * 9) = 90, 5, 6\n(90) / (5) = 18, left: ((10 * 9) / 5) = 18, 6\n(6) + (18) = 24, left: (6 + ((10 * 9) / 5)) = 24\nreach 24! expression: (6 + ((10 * 9) / 5))"}, {"input": "5 10 9 6\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 5, 10\nroll back, left: 5 10 9 6\n(5) - (6) = -1, left: (5 - 6) = -1, 10, 9\nroll back, left: 5 10 9 6\n(6) - (10) = -4, left: (6 - 10) = -4, 5, 9\nroll back, left: 5 10 9 6\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, 10, 6\n(10) * (9/5) = 18, left: (10 * (9 / 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (10 * (9 / 5))) = 24\nreach 24! expression: (6 + (10 * (9 / 5)))"}, {"input": "5 10 9 6\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 5, 10\nroll back, left: 5 10 9 6\n(6) - (9) = -3, left: (6 - 9) = -3, 5, 10\n(10) / (5) = 2, left: (10 / 5) = 2, (6 - 9) = -3\nroll back, left: (6 - 9) = -3, 5, 10\nroll back, left: 5 10 9 6\n(10) - (9) = 1, left: (10 - 9) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (10 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (10 - 9))) = 24\nreach 24! expression: (6 * (5 - (10 - 9)))"}, {"input": "5 10 9 6\n", "output": "(9) * (6) = 54, left: (9 * 6) = 54, 5, 10\nroll back, left: 5 10 9 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 5, 10\n(5) - (3/2) = 7/2, left: (5 - (9 / 6)) = 7/2, 10\nroll back, left: (9 / 6) = 3/2, 5, 10\nroll back, left: 5 10 9 6\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, 10, 6\n(10) * (9/5) = 18, left: (10 * (9 / 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (10 * (9 / 5))) = 24\nreach 24! expression: (6 + (10 * (9 / 5)))"}, {"input": "13 12 12 11\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 12, 12\n(12) - (12) = 0, left: (12 - 12) = 0, (13 + 11) = 24\n(24) + (0) = 24, left: ((13 + 11) + (12 - 12)) = 24\nreach 24! expression: ((13 + 11) + (12 - 12))"}, {"input": "13 12 12 11\n", "output": "(11) - (12) = -1, left: (11 - 12) = -1, 13, 12\n(13) + (-1) = 12, left: (13 + (11 - 12)) = 12, 12\n(12) + (12) = 24, left: (12 + (13 + (11 - 12))) = 24\nreach 24! expression: (12 + (13 + (11 - 12)))"}, {"input": "13 12 12 11\n", "output": "(11) / (12) = 11/12, left: (11 / 12) = 11/12, 13, 12\n(12) * (11/12) = 11, left: (12 * (11 / 12)) = 11, 13\n(13) + (11) = 24, left: (13 + (12 * (11 / 12))) = 24\nreach 24! expression: (13 + (12 * (11 / 12)))"}, {"input": "13 12 12 11\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 13, 12\n(1) - (12) = -11, left: ((12 - 11) - 12) = -11, 13\n(13) - (-11) = 24, left: (13 - ((12 - 11) - 12)) = 24\nreach 24! expression: (13 - ((12 - 11) - 12))"}, {"input": "2 6 2 11\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 6, 2\n(2) * (9) = 18, left: (2 * (11 - 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (2 * (11 - 2))) = 24\nreach 24! expression: (6 + (2 * (11 - 2)))"}, {"input": "2 6 2 11\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 2, 6\n(2) * (9) = 18, left: (2 * (11 - 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (2 * (11 - 2))) = 24\nreach 24! expression: (6 + (2 * (11 - 2)))"}, {"input": "2 6 2 11\n", "output": "(2) - (11) = -9, left: (2 - 11) = -9, 6, 2\n(2) * (-9) = -18, left: (2 * (2 - 11)) = -18, 6\n(6) - (-18) = 24, left: (6 - (2 * (2 - 11))) = 24\nreach 24! expression: (6 - (2 * (2 - 11)))"}, {"input": "2 6 2 11\n", "output": "(2) - (11) = -9, left: (2 - 11) = -9, 2, 6\n(2) * (-9) = -18, left: (2 * (2 - 11)) = -18, 6\n(6) - (-18) = 24, left: (6 - (2 * (2 - 11))) = 24\nreach 24! expression: (6 - (2 * (2 - 11)))"}, {"input": "2 6 2 11\n", "output": "(2) + (11) = 13, left: (2 + 11) = 13, 6, 2\n(2) - (13) = -11, left: (2 - (2 + 11)) = -11, 6\nroll back, left: (2 + 11) = 13, 6, 2\nroll back, left: 2 6 2 11\n(11) / (2) = 11/2, left: (11 / 2) = 11/2, 6, 2\nroll back, left: 2 6 2 11\n(2) - (11) = -9, left: (2 - 11) = -9, 6, 2\n(2) * (-9) = -18, left: (2 * (2 - 11)) = -18, 6\n(6) - (-18) = 24, left: (6 - (2 * (2 - 11))) = 24\nreach 24! expression: (6 - (2 * (2 - 11)))"}, {"input": "2 6 2 11\n", "output": "(6) * (11) = 66, left: (6 * 11) = 66, 2, 2\nroll back, left: 2 6 2 11\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, 2, 11\nroll back, left: 2 6 2 11\n(6) - (2) = 4, left: (6 - 2) = 4, 2, 11\nroll back, left: 2 6 2 11\n(2) - (11) = -9, left: (2 - 11) = -9, 6, 2\n(2) * (-9) = -18, left: (2 * (2 - 11)) = -18, 6\n(6) - (-18) = 24, left: (6 - (2 * (2 - 11))) = 24\nreach 24! expression: (6 - (2 * (2 - 11)))"}, {"input": "2 6 2 11\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 6, 11\nroll back, left: 2 6 2 11\n(2) * (11) = 22, left: (2 * 11) = 22, 2, 6\n(6) / (2) = 3, left: (6 / 2) = 3, (2 * 11) = 22\nroll back, left: (2 * 11) = 22, 2, 6\nroll back, left: 2 6 2 11\n(11) - (2) = 9, left: (11 - 2) = 9, 2, 6\n(2) * (9) = 18, left: (2 * (11 - 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (2 * (11 - 2))) = 24\nreach 24! expression: (6 + (2 * (11 - 2)))"}, {"input": "2 6 2 11\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 2, 11\n(4) / (11) = 4/11, left: ((6 - 2) / 11) = 4/11, 2\n(2) * (4/11) = 8/11, left: (2 * ((6 - 2) / 11)) = 8/11\nroll back, left: ((6 - 2) / 11) = 4/11, 2\nroll back, left: (6 - 2) = 4, 2, 11\nroll back, left: 2 6 2 11\n(2) - (11) = -9, left: (2 - 11) = -9, 2, 6\n(2) * (-9) = -18, left: (2 * (2 - 11)) = -18, 6\n(6) - (-18) = 24, left: (6 - (2 * (2 - 11))) = 24\nreach 24! expression: (6 - (2 * (2 - 11)))"}, {"input": "10 5 3 13\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 10, 13\n(13) - (10) = 3, left: (13 - 10) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (13 - 10)) = 24\nreach 24! expression: ((5 + 3) * (13 - 10))"}, {"input": "10 5 3 13\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 5, 3\n(5) + (3) = 8, left: (5 + (13 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 + (13 - 10))) = 24\nreach 24! expression: (3 * (5 + (13 - 10)))"}, {"input": "10 5 3 13\n", "output": "(3) * (13) = 39, left: (3 * 13) = 39, 10, 5\n(10) + (5) = 15, left: (10 + 5) = 15, (3 * 13) = 39\n(39) - (15) = 24, left: ((3 * 13) - (10 + 5)) = 24\nreach 24! expression: ((3 * 13) - (10 + 5))"}, {"input": "10 5 3 13\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (13 - 10) = 3\n(3) * (8) = 24, left: ((13 - 10) * (5 + 3)) = 24\nreach 24! expression: ((13 - 10) * (5 + 3))"}, {"input": "10 5 3 13\n", "output": "(3) * (13) = 39, left: (3 * 13) = 39, 10, 5\n(39) - (10) = 29, left: ((3 * 13) - 10) = 29, 5\n(29) - (5) = 24, left: (((3 * 13) - 10) - 5) = 24\nreach 24! expression: (((3 * 13) - 10) - 5)"}, {"input": "5 12 3 2\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 12, 3\n(3) - (5/2) = 1/2, left: (3 - (5 / 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (3 - (5 / 2))) = 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(2) / (12) = 1/6, left: (2 / 12) = 1/6, 5, 3\nroll back, left: 5 12 3 2\n(5) * (2) = 10, left: (5 * 2) = 10, 12, 3\n(3) * (10) = 30, left: (3 * (5 * 2)) = 30, 12\nroll back, left: (5 * 2) = 10, 12, 3\nroll back, left: 5 12 3 2\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 12, 3\n(3) - (5/2) = 1/2, left: (3 - (5 / 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (3 - (5 / 2))) = 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 12, 2\nroll back, left: 5 12 3 2\n(5) * (12) = 60, left: (5 * 12) = 60, 3, 2\nroll back, left: 5 12 3 2\n(5) - (12) = -7, left: (5 - 12) = -7, 3, 2\nroll back, left: 5 12 3 2\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 12, 3\n(3) - (5/2) = 1/2, left: (3 - (5 / 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (3 - (5 / 2))) = 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(2) / (3) = 2/3, left: (2 / 3) = 2/3, 5, 12\nroll back, left: 5 12 3 2\n(3) + (2) = 5, left: (3 + 2) = 5, 5, 12\nroll back, left: 5 12 3 2\n(12) * (3) = 36, left: (12 * 3) = 36, 5, 2\nroll back, left: 5 12 3 2\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 12, 3\n(3) - (5/2) = 1/2, left: (3 - (5 / 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (3 - (5 / 2))) = 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "5 12 3 2\n", "output": "(5) + (12) = 17, left: (5 + 12) = 17, 3, 2\nroll back, left: 5 12 3 2\n(5) - (12) = -7, left: (5 - 12) = -7, 3, 2\nroll back, left: 5 12 3 2\n(12) * (3) = 36, left: (12 * 3) = 36, 5, 2\nroll back, left: 5 12 3 2\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 12, 3\n(3) - (5/2) = 1/2, left: (3 - (5 / 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (3 - (5 / 2))) = 24\nreach 24! expression: (12 / (3 - (5 / 2)))"}, {"input": "1 7 13 9\n", "output": "(9) - (13) = -4, left: (9 - 13) = -4, 1, 7\n(1) - (7) = -6, left: (1 - 7) = -6, (9 - 13) = -4\n(-4) * (-6) = 24, left: ((9 - 13) * (1 - 7)) = 24\nreach 24! expression: ((9 - 13) * (1 - 7))"}, {"input": "1 7 13 9\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (13 - 9) = 4\n(4) * (6) = 24, left: ((13 - 9) * (7 - 1)) = 24\nreach 24! expression: ((13 - 9) * (7 - 1))"}, {"input": "1 7 13 9\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 13, 9\n(9) - (13) = -4, left: (9 - 13) = -4, (1 - 7) = -6\n(-6) * (-4) = 24, left: ((1 - 7) * (9 - 13)) = 24\nreach 24! expression: ((1 - 7) * (9 - 13))"}, {"input": "1 7 13 9\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 13, 9\n(13) + (-6) = 7, left: (13 + (1 - 7)) = 7, 9\n(9) + (7) = 16, left: (9 + (13 + (1 - 7))) = 16\nroll back, left: (13 + (1 - 7)) = 7, 9\nroll back, left: (1 - 7) = -6, 13, 9\n(13) - (9) = 4, left: (13 - 9) = 4, (1 - 7) = -6\nroll back, left: (1 - 7) = -6, 13, 9\n(9) - (13) = -4, left: (9 - 13) = -4, (1 - 7) = -6\n(-6) * (-4) = 24, left: ((1 - 7) * (9 - 13)) = 24\nreach 24! expression: ((1 - 7) * (9 - 13))"}, {"input": "1 7 13 9\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 1, 7\n(7) / (1) = 7, left: (7 / 1) = 7, (13 - 9) = 4\nroll back, left: (13 - 9) = 4, 1, 7\n(1) - (7) = -6, left: (1 - 7) = -6, (13 - 9) = 4\n(4) * (-6) = -24, left: ((13 - 9) * (1 - 7)) = -24\nroll back, left: (1 - 7) = -6, (13 - 9) = 4\nroll back, left: (13 - 9) = 4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (13 - 9) = 4\n(4) * (6) = 24, left: ((13 - 9) * (7 - 1)) = 24\nreach 24! expression: ((13 - 9) * (7 - 1))"}, {"input": "1 7 13 9\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 13, 9\n(7) - (9) = -2, left: ((7 / 1) - 9) = -2, 13\nroll back, left: (7 / 1) = 7, 13, 9\nroll back, left: 1 7 13 9\n(1) - (7) = -6, left: (1 - 7) = -6, 13, 9\n(13) + (9) = 22, left: (13 + 9) = 22, (1 - 7) = -6\nroll back, left: (1 - 7) = -6, 13, 9\n(9) - (13) = -4, left: (9 - 13) = -4, (1 - 7) = -6\n(-6) * (-4) = 24, left: ((1 - 7) * (9 - 13)) = 24\nreach 24! expression: ((1 - 7) * (9 - 13))"}, {"input": "1 7 13 9\n", "output": "(1) / (9) = 1/9, left: (1 / 9) = 1/9, 7, 13\nroll back, left: 1 7 13 9\n(1) * (9) = 9, left: (1 * 9) = 9, 7, 13\nroll back, left: 1 7 13 9\n(13) / (9) = 13/9, left: (13 / 9) = 13/9, 1, 7\nroll back, left: 1 7 13 9\n(13) - (9) = 4, left: (13 - 9) = 4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (13 - 9) = 4\n(4) * (6) = 24, left: ((13 - 9) * (7 - 1)) = 24\nreach 24! expression: ((13 - 9) * (7 - 1))"}, {"input": "1 7 13 9\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 7, 13\nroll back, left: 1 7 13 9\n(13) + (9) = 22, left: (13 + 9) = 22, 1, 7\nroll back, left: 1 7 13 9\n(9) - (13) = -4, left: (9 - 13) = -4, 1, 7\n(1) * (7) = 7, left: (1 * 7) = 7, (9 - 13) = -4\nroll back, left: (9 - 13) = -4, 1, 7\n(1) - (7) = -6, left: (1 - 7) = -6, (9 - 13) = -4\n(-4) * (-6) = 24, left: ((9 - 13) * (1 - 7)) = 24\nreach 24! expression: ((9 - 13) * (1 - 7))"}, {"input": "6 7 12 2\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 12, 2\n(1) / (12) = 1/12, left: ((7 - 6) / 12) = 1/12, 2\n(2) / (1/12) = 24, left: (2 / ((7 - 6) / 12)) = 24\nreach 24! expression: (2 / ((7 - 6) / 12))"}, {"input": "6 7 12 2\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 12, 2\n(2) * (1) = 2, left: (2 * (7 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 * (7 - 6))) = 24\nreach 24! expression: (12 * (2 * (7 - 6)))"}, {"input": "6 7 12 2\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 12, 2\n(12) * (1) = 12, left: (12 * (7 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 * (7 - 6))) = 24\nreach 24! expression: (2 * (12 * (7 - 6)))"}, {"input": "6 7 12 2\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 12, 2\n(12) * (2) = 24, left: (12 * 2) = 24, (7 - 6) = 1\n(1) * (24) = 24, left: ((7 - 6) * (12 * 2)) = 24\nreach 24! expression: ((7 - 6) * (12 * 2))"}, {"input": "6 7 12 2\n", "output": "(7) - (12) = -5, left: (7 - 12) = -5, 6, 2\n(2) + (-5) = -3, left: (2 + (7 - 12)) = -3, 6\nroll back, left: (7 - 12) = -5, 6, 2\nroll back, left: 6 7 12 2\n(7) + (2) = 9, left: (7 + 2) = 9, 6, 12\nroll back, left: 6 7 12 2\n(7) - (6) = 1, left: (7 - 6) = 1, 12, 2\n(12) * (2) = 24, left: (12 * 2) = 24, (7 - 6) = 1\n(1) * (24) = 24, left: ((7 - 6) * (12 * 2)) = 24\nreach 24! expression: ((7 - 6) * (12 * 2))"}, {"input": "6 7 12 2\n", "output": "(12) / (7) = 12/7, left: (12 / 7) = 12/7, 6, 2\nroll back, left: 6 7 12 2\n(12) - (7) = 5, left: (12 - 7) = 5, 6, 2\nroll back, left: 6 7 12 2\n(7) * (12) = 84, left: (7 * 12) = 84, 6, 2\nroll back, left: 6 7 12 2\n(7) - (6) = 1, left: (7 - 6) = 1, 12, 2\n(12) * (1) = 12, left: (12 * (7 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 * (7 - 6))) = 24\nreach 24! expression: (2 * (12 * (7 - 6)))"}, {"input": "6 7 12 2\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 7, 2\n(7) - (1/2) = 13/2, left: (7 - (6 / 12)) = 13/2, 2\nroll back, left: (6 / 12) = 1/2, 7, 2\nroll back, left: 6 7 12 2\n(6) - (12) = -6, left: (6 - 12) = -6, 7, 2\nroll back, left: 6 7 12 2\n(7) - (6) = 1, left: (7 - 6) = 1, 12, 2\n(1) / (12) = 1/12, left: ((7 - 6) / 12) = 1/12, 2\n(2) / (1/12) = 24, left: (2 / ((7 - 6) / 12)) = 24\nreach 24! expression: (2 / ((7 - 6) / 12))"}, {"input": "6 7 12 2\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 12, 2\n(1) - (2) = -1, left: ((7 - 6) - 2) = -1, 12\n(12) - (-1) = 13, left: (12 - ((7 - 6) - 2)) = 13\nroll back, left: ((7 - 6) - 2) = -1, 12\n(-1) - (12) = -13, left: (((7 - 6) - 2) - 12) = -13\nroll back, left: ((7 - 6) - 2) = -1, 12\nroll back, left: (7 - 6) = 1, 12, 2\n(2) * (1) = 2, left: (2 * (7 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 * (7 - 6))) = 24\nreach 24! expression: (12 * (2 * (7 - 6)))"}, {"input": "6 4 9 1\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 6, 4\n(8) - (4) = 4, left: ((9 - 1) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 - 1) - 4)) = 24\nreach 24! expression: (6 * ((9 - 1) - 4))"}, {"input": "6 4 9 1\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 6, 9\n(9) - (5) = 4, left: (9 - (4 + 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (4 + 1))) = 24\nreach 24! expression: (6 * (9 - (4 + 1)))"}, {"input": "6 4 9 1\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 6, 1\n(5) - (1) = 4, left: ((9 - 4) - 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 - 4) - 1)) = 24\nreach 24! expression: (6 * ((9 - 4) - 1))"}, {"input": "6 4 9 1\n", "output": "(6) + (4) = 10, left: (6 + 4) = 10, 9, 1\n(10) / (1) = 10, left: ((6 + 4) / 1) = 10, 9\n(10) / (9) = 10/9, left: (((6 + 4) / 1) / 9) = 10/9\nroll back, left: ((6 + 4) / 1) = 10, 9\nroll back, left: (6 + 4) = 10, 9, 1\nroll back, left: 6 4 9 1\n(9) - (1) = 8, left: (9 - 1) = 8, 6, 4\n(8) - (4) = 4, left: ((9 - 1) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 - 1) - 4)) = 24\nreach 24! expression: (6 * ((9 - 1) - 4))"}, {"input": "6 4 9 1\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 4, 9\nroll back, left: 6 4 9 1\n(6) / (1) = 6, left: (6 / 1) = 6, 4, 9\nroll back, left: 6 4 9 1\n(4) - (6) = -2, left: (4 - 6) = -2, 9, 1\nroll back, left: 6 4 9 1\n(9) - (4) = 5, left: (9 - 4) = 5, 6, 1\n(5) - (1) = 4, left: ((9 - 4) - 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 - 4) - 1)) = 24\nreach 24! expression: (6 * ((9 - 4) - 1))"}, {"input": "6 4 9 1\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 6, 4\nroll back, left: 6 4 9 1\n(9) * (1) = 9, left: (9 * 1) = 9, 6, 4\n(4) - (9) = -5, left: (4 - (9 * 1)) = -5, 6\nroll back, left: (9 * 1) = 9, 6, 4\nroll back, left: 6 4 9 1\n(9) - (1) = 8, left: (9 - 1) = 8, 6, 4\n(8) - (4) = 4, left: ((9 - 1) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 - 1) - 4)) = 24\nreach 24! expression: (6 * ((9 - 1) - 4))"}, {"input": "6 4 9 1\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 9, 1\nroll back, left: 6 4 9 1\n(1) / (9) = 1/9, left: (1 / 9) = 1/9, 6, 4\n(4) + (1/9) = 37/9, left: (4 + (1 / 9)) = 37/9, 6\nroll back, left: (1 / 9) = 1/9, 6, 4\nroll back, left: 6 4 9 1\n(9) - (1) = 8, left: (9 - 1) = 8, 6, 4\n(8) - (4) = 4, left: ((9 - 1) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 - 1) - 4)) = 24\nreach 24! expression: (6 * ((9 - 1) - 4))"}, {"input": "6 4 9 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 4, 9\nroll back, left: 6 4 9 1\n(4) / (1) = 4, left: (4 / 1) = 4, 6, 9\nroll back, left: 6 4 9 1\n(4) * (1) = 4, left: (4 * 1) = 4, 6, 9\nroll back, left: 6 4 9 1\n(4) + (1) = 5, left: (4 + 1) = 5, 6, 9\n(9) - (5) = 4, left: (9 - (4 + 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (4 + 1))) = 24\nreach 24! expression: (6 * (9 - (4 + 1)))"}, {"input": "9 4 4 11\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (9 - 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (9 - 4))) = 24\nreach 24! expression: (4 * (11 - (9 - 4)))"}, {"input": "9 4 4 11\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 9, 4\n(15) - (9) = 6, left: ((4 + 11) - 9) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 + 11) - 9)) = 24\nreach 24! expression: (4 * ((4 + 11) - 9))"}, {"input": "9 4 4 11\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 4, 11\n(11) + (-5) = 6, left: (11 + (4 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 + (4 - 9))) = 24\nreach 24! expression: (4 * (11 + (4 - 9)))"}, {"input": "9 4 4 11\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 4, 11\n(4) * (36) = 144, left: (4 * (9 * 4)) = 144, 11\nroll back, left: (9 * 4) = 36, 4, 11\n(4) - (11) = -7, left: (4 - 11) = -7, (9 * 4) = 36\nroll back, left: (9 * 4) = 36, 4, 11\nroll back, left: 9 4 4 11\n(9) - (4) = 5, left: (9 - 4) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (9 - 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (9 - 4))) = 24\nreach 24! expression: (4 * (11 - (9 - 4)))"}, {"input": "9 4 4 11\n", "output": "(4) / (11) = 4/11, left: (4 / 11) = 4/11, 9, 4\nroll back, left: 9 4 4 11\n(4) - (11) = -7, left: (4 - 11) = -7, 9, 4\n(4) / (9) = 4/9, left: (4 / 9) = 4/9, (4 - 11) = -7\nroll back, left: (4 - 11) = -7, 9, 4\nroll back, left: 9 4 4 11\n(4) + (11) = 15, left: (4 + 11) = 15, 9, 4\n(15) - (9) = 6, left: ((4 + 11) - 9) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 + 11) - 9)) = 24\nreach 24! expression: (4 * ((4 + 11) - 9))"}, {"input": "9 4 4 11\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 9, 11\n(9) - (11) = -2, left: (9 - 11) = -2, (4 - 4) = 0\nroll back, left: (4 - 4) = 0, 9, 11\nroll back, left: 9 4 4 11\n(11) / (4) = 11/4, left: (11 / 4) = 11/4, 9, 4\nroll back, left: 9 4 4 11\n(4) + (11) = 15, left: (4 + 11) = 15, 9, 4\n(15) - (9) = 6, left: ((4 + 11) - 9) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 + 11) - 9)) = 24\nreach 24! expression: (4 * ((4 + 11) - 9))"}, {"input": "2 10 5 10\n", "output": "(2) + (10) = 12, left: (2 + 10) = 12, 10, 5\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, (2 + 10) = 12\n(12) / (1/2) = 24, left: ((2 + 10) / (5 / 10)) = 24\nreach 24! expression: ((2 + 10) / (5 / 10))"}, {"input": "2 10 5 10\n", "output": "(2) + (10) = 12, left: (2 + 10) = 12, 10, 5\n(12) / (5) = 12/5, left: ((2 + 10) / 5) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * ((2 + 10) / 5)) = 24\nreach 24! expression: (10 * ((2 + 10) / 5))"}, {"input": "2 10 5 10\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 2, 10\n(2) + (10) = 12, left: (2 + 10) = 12, (5 / 10) = 1/2\n(12) / (1/2) = 24, left: ((2 + 10) / (5 / 10)) = 24\nreach 24! expression: ((2 + 10) / (5 / 10))"}, {"input": "2 10 5 10\n", "output": "(2) + (10) = 12, left: (2 + 10) = 12, 5, 10\n(10) * (12) = 120, left: (10 * (2 + 10)) = 120, 5\n(120) / (5) = 24, left: ((10 * (2 + 10)) / 5) = 24\nreach 24! expression: ((10 * (2 + 10)) / 5)"}, {"input": "2 10 5 10\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 10, 10\nroll back, left: 2 10 5 10\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 10, 10\nroll back, left: 2 10 5 10\n(5) - (2) = 3, left: (5 - 2) = 3, 10, 10\nroll back, left: 2 10 5 10\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, 2, 10\n(2) + (10) = 12, left: (2 + 10) = 12, (5 / 10) = 1/2\n(12) / (1/2) = 24, left: ((2 + 10) / (5 / 10)) = 24\nreach 24! expression: ((2 + 10) / (5 / 10))"}, {"input": "2 10 5 10\n", "output": "(2) * (5) = 10, left: (2 * 5) = 10, 10, 10\nroll back, left: 2 10 5 10\n(2) - (10) = -8, left: (2 - 10) = -8, 5, 10\n(5) - (10) = -5, left: (5 - 10) = -5, (2 - 10) = -8\nroll back, left: (2 - 10) = -8, 5, 10\nroll back, left: 2 10 5 10\n(2) + (10) = 12, left: (2 + 10) = 12, 5, 10\n(10) * (12) = 120, left: (10 * (2 + 10)) = 120, 5\n(120) / (5) = 24, left: ((10 * (2 + 10)) / 5) = 24\nreach 24! expression: ((10 * (2 + 10)) / 5)"}, {"input": "2 4 6 2\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 2, 4\n(2) + (4) = 6, left: (2 + (6 - 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 + (6 - 2))) = 24\nreach 24! expression: (4 * (2 + (6 - 2)))"}, {"input": "2 4 6 2\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 6, 2\n(6) - (2) = 4, left: (6 - 2) = 4, (2 + 4) = 6\n(6) * (4) = 24, left: ((2 + 4) * (6 - 2)) = 24\nreach 24! expression: ((2 + 4) * (6 - 2))"}, {"input": "2 4 6 2\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 2, 4\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, (6 * 2) = 12\n(12) / (1/2) = 24, left: ((6 * 2) / (2 / 4)) = 24\nreach 24! expression: ((6 * 2) / (2 / 4))"}, {"input": "2 4 6 2\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 6, 2\n(6) - (2) = 4, left: ((2 + 4) - 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((2 + 4) - 2)) = 24\nreach 24! expression: (6 * ((2 + 4) - 2))"}, {"input": "2 4 6 2\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 2, 6\n(2) - (-2) = 4, left: (2 - (2 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 - (2 - 4))) = 24\nreach 24! expression: (6 * (2 - (2 - 4)))"}, {"input": "2 4 6 2\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 2, 4\n(2) - (4) = -2, left: (2 - (6 - 2)) = -2, 4\n(4) / (-2) = -2, left: (4 / (2 - (6 - 2))) = -2\nroll back, left: (2 - (6 - 2)) = -2, 4\nroll back, left: (6 - 2) = 4, 2, 4\n(2) * (4) = 8, left: (2 * (6 - 2)) = 8, 4\nroll back, left: (6 - 2) = 4, 2, 4\n(2) + (4) = 6, left: (2 + (6 - 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 + (6 - 2))) = 24\nreach 24! expression: (4 * (2 + (6 - 2)))"}, {"input": "2 4 6 2\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 6, 2\n(2) * (6) = 12, left: (2 * (2 + 4)) = 12, 6\nroll back, left: (2 + 4) = 6, 6, 2\n(2) + (6) = 8, left: (2 + (2 + 4)) = 8, 6\n(6) / (8) = 3/4, left: (6 / (2 + (2 + 4))) = 3/4\nroll back, left: (2 + (2 + 4)) = 8, 6\nroll back, left: (2 + 4) = 6, 6, 2\n(6) - (2) = 4, left: ((2 + 4) - 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((2 + 4) - 2)) = 24\nreach 24! expression: (6 * ((2 + 4) - 2))"}, {"input": "2 4 6 2\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 2, 6\n(2) - (-2) = 4, left: (2 - (2 - 4)) = 4, 6\n(4) / (6) = 2/3, left: ((2 - (2 - 4)) / 6) = 2/3\nroll back, left: (2 - (2 - 4)) = 4, 6\n(6) + (4) = 10, left: (6 + (2 - (2 - 4))) = 10\nroll back, left: (2 - (2 - 4)) = 4, 6\n(6) / (4) = 3/2, left: (6 / (2 - (2 - 4))) = 3/2\nroll back, left: (2 - (2 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 - (2 - 4))) = 24\nreach 24! expression: (6 * (2 - (2 - 4)))"}, {"input": "2 4 6 2\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 6, 2\n(2) - (6) = -4, left: (2 - 6) = -4, (2 + 4) = 6\nroll back, left: (2 + 4) = 6, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (2 + 4) = 6\n(8) / (6) = 4/3, left: ((6 + 2) / (2 + 4)) = 4/3\nroll back, left: (6 + 2) = 8, (2 + 4) = 6\nroll back, left: (2 + 4) = 6, 6, 2\n(6) - (2) = 4, left: (6 - 2) = 4, (2 + 4) = 6\n(6) * (4) = 24, left: ((2 + 4) * (6 - 2)) = 24\nreach 24! expression: ((2 + 4) * (6 - 2))"}, {"input": "2 12 4 12\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 12, 12\n(12) * (12) = 144, left: (12 * 12) = 144, (2 + 4) = 6\n(144) / (6) = 24, left: ((12 * 12) / (2 + 4)) = 24\nreach 24! expression: ((12 * 12) / (2 + 4))"}, {"input": "2 12 4 12\n", "output": "(12) * (12) = 144, left: (12 * 12) = 144, 2, 4\n(2) + (4) = 6, left: (2 + 4) = 6, (12 * 12) = 144\n(144) / (6) = 24, left: ((12 * 12) / (2 + 4)) = 24\nreach 24! expression: ((12 * 12) / (2 + 4))"}, {"input": "2 12 4 12\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 12, 12\n(6) / (12) = 1/2, left: ((2 + 4) / 12) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((2 + 4) / 12)) = 24\nreach 24! expression: (12 / ((2 + 4) / 12))"}, {"input": "2 12 4 12\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 12, 12\n(12) / (6) = 2, left: (12 / (2 + 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 / (2 + 4))) = 24\nreach 24! expression: (12 * (12 / (2 + 4)))"}, {"input": "2 12 4 12\n", "output": "(2) * (12) = 24, left: (2 * 12) = 24, 4, 12\n(4) * (12) = 48, left: (4 * 12) = 48, (2 * 12) = 24\n(48) - (24) = 24, left: ((4 * 12) - (2 * 12)) = 24\nreach 24! expression: ((4 * 12) - (2 * 12))"}, {"input": "2 12 4 12\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 12, 12\nroll back, left: 2 12 4 12\n(2) - (4) = -2, left: (2 - 4) = -2, 12, 12\nroll back, left: 2 12 4 12\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, 12, 12\nroll back, left: 2 12 4 12\n(2) + (4) = 6, left: (2 + 4) = 6, 12, 12\n(12) * (12) = 144, left: (12 * 12) = 144, (2 + 4) = 6\n(144) / (6) = 24, left: ((12 * 12) / (2 + 4)) = 24\nreach 24! expression: ((12 * 12) / (2 + 4))"}, {"input": "2 12 4 12\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 12, 12\n(12) / (12) = 1, left: (12 / 12) = 1, (4 / 2) = 2\nroll back, left: (4 / 2) = 2, 12, 12\nroll back, left: 2 12 4 12\n(2) - (4) = -2, left: (2 - 4) = -2, 12, 12\nroll back, left: 2 12 4 12\n(2) + (4) = 6, left: (2 + 4) = 6, 12, 12\n(12) / (6) = 2, left: (12 / (2 + 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 / (2 + 4))) = 24\nreach 24! expression: (12 * (12 / (2 + 4)))"}, {"input": "4 3 9 2\n", "output": "(2) / (3) = 2/3, left: (2 / 3) = 2/3, 4, 9\n(4) * (2/3) = 8/3, left: (4 * (2 / 3)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (4 * (2 / 3))) = 24\nreach 24! expression: (9 * (4 * (2 / 3)))"}, {"input": "4 3 9 2\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 9, 2\n(2) * (4/3) = 8/3, left: (2 * (4 / 3)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (2 * (4 / 3))) = 24\nreach 24! expression: (9 * (2 * (4 / 3)))"}, {"input": "4 3 9 2\n", "output": "(4) * (9) = 36, left: (4 * 9) = 36, 3, 2\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, (4 * 9) = 36\n(36) * (2/3) = 24, left: ((4 * 9) * (2 / 3)) = 24\nreach 24! expression: ((4 * 9) * (2 / 3))"}, {"input": "4 3 9 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 4, 3\n(4) * (18) = 72, left: (4 * (9 * 2)) = 72, 3\n(72) / (3) = 24, left: ((4 * (9 * 2)) / 3) = 24\nreach 24! expression: ((4 * (9 * 2)) / 3)"}, {"input": "4 3 9 2\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 9, 2\n(3/4) / (9) = 1/12, left: ((3 / 4) / 9) = 1/12, 2\n(2) / (1/12) = 24, left: (2 / ((3 / 4) / 9)) = 24\nreach 24! expression: (2 / ((3 / 4) / 9))"}, {"input": "4 3 9 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 4, 3\n(4) / (18) = 2/9, left: (4 / (9 * 2)) = 2/9, 3\nroll back, left: (9 * 2) = 18, 4, 3\n(4) - (18) = -14, left: (4 - (9 * 2)) = -14, 3\n(-14) / (3) = -14/3, left: ((4 - (9 * 2)) / 3) = -14/3\nroll back, left: (4 - (9 * 2)) = -14, 3\nroll back, left: (9 * 2) = 18, 4, 3\n(4) * (18) = 72, left: (4 * (9 * 2)) = 72, 3\n(72) / (3) = 24, left: ((4 * (9 * 2)) / 3) = 24\nreach 24! expression: ((4 * (9 * 2)) / 3)"}, {"input": "4 3 9 2\n", "output": "(3) + (2) = 5, left: (3 + 2) = 5, 4, 9\nroll back, left: 4 3 9 2\n(3) - (2) = 1, left: (3 - 2) = 1, 4, 9\nroll back, left: 4 3 9 2\n(2) - (3) = -1, left: (2 - 3) = -1, 4, 9\nroll back, left: 4 3 9 2\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 4, 9\n(4) * (2/3) = 8/3, left: (4 * (2 / 3)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (4 * (2 / 3))) = 24\nreach 24! expression: (9 * (4 * (2 / 3)))"}, {"input": "4 3 9 2\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 9, 2\n(12) / (9) = 4/3, left: ((4 * 3) / 9) = 4/3, 2\nroll back, left: (4 * 3) = 12, 9, 2\n(2) + (12) = 14, left: (2 + (4 * 3)) = 14, 9\nroll back, left: (4 * 3) = 12, 9, 2\nroll back, left: 4 3 9 2\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 9, 2\n(3/4) / (9) = 1/12, left: ((3 / 4) / 9) = 1/12, 2\n(2) / (1/12) = 24, left: (2 / ((3 / 4) / 9)) = 24\nreach 24! expression: (2 / ((3 / 4) / 9))"}, {"input": "5 7 11 13\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 11, 13\n(13) - (11) = 2, left: (13 - 11) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (13 - 11)) = 24\nreach 24! expression: ((5 + 7) * (13 - 11))"}, {"input": "5 7 11 13\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (13 - 11) = 2\n(2) * (12) = 24, left: ((13 - 11) * (5 + 7)) = 24\nreach 24! expression: ((13 - 11) * (5 + 7))"}, {"input": "5 7 11 13\n", "output": "(7) * (11) = 77, left: (7 * 11) = 77, 5, 13\nroll back, left: 5 7 11 13\n(5) * (13) = 65, left: (5 * 13) = 65, 7, 11\nroll back, left: 5 7 11 13\n(13) - (5) = 8, left: (13 - 5) = 8, 7, 11\nroll back, left: 5 7 11 13\n(5) + (7) = 12, left: (5 + 7) = 12, 11, 13\n(13) - (11) = 2, left: (13 - 11) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (13 - 11)) = 24\nreach 24! expression: ((5 + 7) * (13 - 11))"}, {"input": "6 10 1 12\n", "output": "(10) * (12) = 120, left: (10 * 12) = 120, 6, 1\n(6) - (1) = 5, left: (6 - 1) = 5, (10 * 12) = 120\n(120) / (5) = 24, left: ((10 * 12) / (6 - 1)) = 24\nreach 24! expression: ((10 * 12) / (6 - 1))"}, {"input": "6 10 1 12\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 10, 12\n(10) * (12) = 120, left: (10 * 12) = 120, (6 - 1) = 5\n(120) / (5) = 24, left: ((10 * 12) / (6 - 1)) = 24\nreach 24! expression: ((10 * 12) / (6 - 1))"}, {"input": "6 10 1 12\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 10, 12\n(10) / (5) = 2, left: (10 / (6 - 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 / (6 - 1))) = 24\nreach 24! expression: (12 * (10 / (6 - 1)))"}, {"input": "6 10 1 12\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 10, 12\n(5) / (10) = 1/2, left: ((6 - 1) / 10) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((6 - 1) / 10)) = 24\nreach 24! expression: (12 / ((6 - 1) / 10))"}, {"input": "6 10 1 12\n", "output": "(1) - (12) = -11, left: (1 - 12) = -11, 6, 10\nroll back, left: 6 10 1 12\n(1) + (12) = 13, left: (1 + 12) = 13, 6, 10\nroll back, left: 6 10 1 12\n(6) / (1) = 6, left: (6 / 1) = 6, 10, 12\nroll back, left: 6 10 1 12\n(6) - (1) = 5, left: (6 - 1) = 5, 10, 12\n(10) / (5) = 2, left: (10 / (6 - 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 / (6 - 1))) = 24\nreach 24! expression: (12 * (10 / (6 - 1)))"}, {"input": "6 10 1 12\n", "output": "(6) / (10) = 3/5, left: (6 / 10) = 3/5, 1, 12\nroll back, left: 6 10 1 12\n(1) - (6) = -5, left: (1 - 6) = -5, 10, 12\n(10) - (12) = -2, left: (10 - 12) = -2, (1 - 6) = -5\nroll back, left: (1 - 6) = -5, 10, 12\nroll back, left: 6 10 1 12\n(6) - (1) = 5, left: (6 - 1) = 5, 10, 12\n(5) / (10) = 1/2, left: ((6 - 1) / 10) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((6 - 1) / 10)) = 24\nreach 24! expression: (12 / ((6 - 1) / 10))"}, {"input": "6 10 1 12\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 1, 12\nroll back, left: 6 10 1 12\n(10) / (1) = 10, left: (10 / 1) = 10, 6, 12\nroll back, left: 6 10 1 12\n(6) + (1) = 7, left: (6 + 1) = 7, 10, 12\nroll back, left: 6 10 1 12\n(6) - (1) = 5, left: (6 - 1) = 5, 10, 12\n(10) * (12) = 120, left: (10 * 12) = 120, (6 - 1) = 5\n(120) / (5) = 24, left: ((10 * 12) / (6 - 1)) = 24\nreach 24! expression: ((10 * 12) / (6 - 1))"}, {"input": "6 10 1 12\n", "output": "(12) / (10) = 6/5, left: (12 / 10) = 6/5, 6, 1\nroll back, left: 6 10 1 12\n(12) - (10) = 2, left: (12 - 10) = 2, 6, 1\nroll back, left: 6 10 1 12\n(10) / (12) = 5/6, left: (10 / 12) = 5/6, 6, 1\nroll back, left: 6 10 1 12\n(10) * (12) = 120, left: (10 * 12) = 120, 6, 1\n(6) - (1) = 5, left: (6 - 1) = 5, (10 * 12) = 120\n(120) / (5) = 24, left: ((10 * 12) / (6 - 1)) = 24\nreach 24! expression: ((10 * 12) / (6 - 1))"}, {"input": "2 3 6 3\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 6, 3\n(3) - (-1) = 4, left: (3 - (2 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (2 - 3))) = 24\nreach 24! expression: (6 * (3 - (2 - 3)))"}, {"input": "2 3 6 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 2, 6\n(2) * (9) = 18, left: (2 * (3 * 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (2 * (3 * 3))) = 24\nreach 24! expression: (6 + (2 * (3 * 3)))"}, {"input": "2 3 6 3\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (6 - 2) = 4\n(4) * (6) = 24, left: ((6 - 2) * (3 + 3)) = 24\nreach 24! expression: ((6 - 2) * (3 + 3))"}, {"input": "2 3 6 3\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (3 * 6) = 18\n(18) + (6) = 24, left: ((3 * 6) + (2 * 3)) = 24\nreach 24! expression: ((3 * 6) + (2 * 3))"}, {"input": "2 3 6 3\n", "output": "(2) + (6) = 8, left: (2 + 6) = 8, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (2 + 6) = 8\nroll back, left: (2 + 6) = 8, 3, 3\nroll back, left: 2 3 6 3\n(6) - (2) = 4, left: (6 - 2) = 4, 3, 3\n(4) - (3) = 1, left: ((6 - 2) - 3) = 1, 3\nroll back, left: (6 - 2) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (6 - 2) = 4\n(4) * (6) = 24, left: ((6 - 2) * (3 + 3)) = 24\nreach 24! expression: ((6 - 2) * (3 + 3))"}, {"input": "2 3 6 3\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 3, 3\n(3) / (4) = 3/4, left: (3 / (6 - 2)) = 3/4, 3\nroll back, left: (6 - 2) = 4, 3, 3\n(3) + (4) = 7, left: (3 + (6 - 2)) = 7, 3\nroll back, left: (6 - 2) = 4, 3, 3\n(4) / (3) = 4/3, left: ((6 - 2) / 3) = 4/3, 3\nroll back, left: (6 - 2) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (6 - 2) = 4\n(4) * (6) = 24, left: ((6 - 2) * (3 + 3)) = 24\nreach 24! expression: ((6 - 2) * (3 + 3))"}, {"input": "2 3 6 3\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 6, 3\n(6) + (3) = 9, left: (6 + 3) = 9, (3 / 2) = 3/2\nroll back, left: (3 / 2) = 3/2, 6, 3\n(6) + (3/2) = 15/2, left: (6 + (3 / 2)) = 15/2, 3\nroll back, left: (3 / 2) = 3/2, 6, 3\nroll back, left: 2 3 6 3\n(2) - (3) = -1, left: (2 - 3) = -1, 6, 3\n(3) - (-1) = 4, left: (3 - (2 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (2 - 3))) = 24\nreach 24! expression: (6 * (3 - (2 - 3)))"}, {"input": "2 3 6 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 2, 6\n(2) * (0) = 0, left: (2 * (3 - 3)) = 0, 6\nroll back, left: (3 - 3) = 0, 2, 6\n(0) / (2) = 0, left: ((3 - 3) / 2) = 0, 6\nroll back, left: (3 - 3) = 0, 2, 6\nroll back, left: 2 3 6 3\n(3) * (3) = 9, left: (3 * 3) = 9, 2, 6\n(2) * (9) = 18, left: (2 * (3 * 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (2 * (3 * 3))) = 24\nreach 24! expression: (6 + (2 * (3 * 3)))"}, {"input": "3 11 4 1\n", "output": "(11) - (4) = 7, left: (11 - 4) = 7, 3, 1\n(1) + (7) = 8, left: (1 + (11 - 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (11 - 4))) = 24\nreach 24! expression: (3 * (1 + (11 - 4)))"}, {"input": "3 11 4 1\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 3, 1\n(1) - (-7) = 8, left: (1 - (4 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 - (4 - 11))) = 24\nreach 24! expression: (3 * (1 - (4 - 11)))"}, {"input": "3 11 4 1\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 11, 1\n(1) + (12) = 13, left: (1 + (3 * 4)) = 13, 11\n(11) + (13) = 24, left: (11 + (1 + (3 * 4))) = 24\nreach 24! expression: (11 + (1 + (3 * 4)))"}, {"input": "3 11 4 1\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 4, 1\n(1) - (4) = -3, left: (1 - 4) = -3, (3 - 11) = -8\n(-8) * (-3) = 24, left: ((3 - 11) * (1 - 4)) = 24\nreach 24! expression: ((3 - 11) * (1 - 4))"}, {"input": "3 11 4 1\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 3, 4\n(12) - (4) = 8, left: ((11 + 1) - 4) = 8, 3\n(3) * (8) = 24, left: (3 * ((11 + 1) - 4)) = 24\nreach 24! expression: (3 * ((11 + 1) - 4))"}, {"input": "3 11 4 1\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 11, 4\nroll back, left: 3 11 4 1\n(3) / (1) = 3, left: (3 / 1) = 3, 11, 4\nroll back, left: 3 11 4 1\n(3) + (1) = 4, left: (3 + 1) = 4, 11, 4\nroll back, left: 3 11 4 1\n(3) - (11) = -8, left: (3 - 11) = -8, 4, 1\n(1) - (4) = -3, left: (1 - 4) = -3, (3 - 11) = -8\n(-8) * (-3) = 24, left: ((3 - 11) * (1 - 4)) = 24\nreach 24! expression: ((3 - 11) * (1 - 4))"}, {"input": "3 11 4 1\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 3, 4\n(4) - (12) = -8, left: (4 - (11 + 1)) = -8, 3\n(3) * (-8) = -24, left: (3 * (4 - (11 + 1))) = -24\nroll back, left: (4 - (11 + 1)) = -8, 3\nroll back, left: (11 + 1) = 12, 3, 4\n(4) + (12) = 16, left: (4 + (11 + 1)) = 16, 3\nroll back, left: (11 + 1) = 12, 3, 4\n(12) - (4) = 8, left: ((11 + 1) - 4) = 8, 3\n(3) * (8) = 24, left: (3 * ((11 + 1) - 4)) = 24\nreach 24! expression: (3 * ((11 + 1) - 4))"}, {"input": "3 11 4 1\n", "output": "(11) / (4) = 11/4, left: (11 / 4) = 11/4, 3, 1\n(3) * (11/4) = 33/4, left: (3 * (11 / 4)) = 33/4, 1\nroll back, left: (11 / 4) = 11/4, 3, 1\nroll back, left: 3 11 4 1\n(11) * (4) = 44, left: (11 * 4) = 44, 3, 1\nroll back, left: 3 11 4 1\n(11) - (4) = 7, left: (11 - 4) = 7, 3, 1\n(1) + (7) = 8, left: (1 + (11 - 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (11 - 4))) = 24\nreach 24! expression: (3 * (1 + (11 - 4)))"}, {"input": "2 9 13 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (9 / 9))) = 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 2, 9\nroll back, left: 2 9 13 9\n(9) - (13) = -4, left: (9 - 13) = -4, 2, 9\n(9) - (-4) = 13, left: (9 - (9 - 13)) = 13, 2\nroll back, left: (9 - 13) = -4, 2, 9\nroll back, left: 2 9 13 9\n(9) / (9) = 1, left: (9 / 9) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (9 / 9))) = 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 9, 9\nroll back, left: 2 9 13 9\n(13) - (9) = 4, left: (13 - 9) = 4, 2, 9\nroll back, left: 2 9 13 9\n(13) / (9) = 13/9, left: (13 / 9) = 13/9, 2, 9\nroll back, left: 2 9 13 9\n(9) / (9) = 1, left: (9 / 9) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (9 / 9))) = 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 2, 9\nroll back, left: 2 9 13 9\n(9) / (2) = 9/2, left: (9 / 2) = 9/2, 13, 9\n(13) / (9) = 13/9, left: (13 / 9) = 13/9, (9 / 2) = 9/2\nroll back, left: (9 / 2) = 9/2, 13, 9\nroll back, left: 2 9 13 9\n(9) / (9) = 1, left: (9 / 9) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (9 / 9))) = 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 2, 13\n(0) / (13) = 0, left: ((9 - 9) / 13) = 0, 2\n(0) / (2) = 0, left: (((9 - 9) / 13) / 2) = 0\nroll back, left: ((9 - 9) / 13) = 0, 2\nroll back, left: (9 - 9) = 0, 2, 13\nroll back, left: 2 9 13 9\n(9) / (9) = 1, left: (9 / 9) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (9 / 9))) = 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "2 9 13 9\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 9, 13\nroll back, left: 2 9 13 9\n(9) - (2) = 7, left: (9 - 2) = 7, 9, 13\nroll back, left: 2 9 13 9\n(9) * (9) = 81, left: (9 * 9) = 81, 2, 13\nroll back, left: 2 9 13 9\n(9) / (9) = 1, left: (9 / 9) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (9 / 9))) = 24\nreach 24! expression: (2 * (13 - (9 / 9)))"}, {"input": "6 7 3 10\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 7, 10\n(7) / (1/2) = 14, left: (7 / (3 / 6)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 / (3 / 6))) = 24\nreach 24! expression: (10 + (7 / (3 / 6)))"}, {"input": "6 7 3 10\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (6 / 3)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (6 / 3))) = 24\nreach 24! expression: (10 + (7 * (6 / 3)))"}, {"input": "6 7 3 10\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 6, 10\n(6) / (3/7) = 14, left: (6 / (3 / 7)) = 14, 10\n(10) + (14) = 24, left: (10 + (6 / (3 / 7))) = 24\nreach 24! expression: (10 + (6 / (3 / 7)))"}, {"input": "6 7 3 10\n", "output": "(6) * (7) = 42, left: (6 * 7) = 42, 3, 10\n(42) / (3) = 14, left: ((6 * 7) / 3) = 14, 10\n(10) + (14) = 24, left: (10 + ((6 * 7) / 3)) = 24\nreach 24! expression: (10 + ((6 * 7) / 3))"}, {"input": "6 7 3 10\n", "output": "(7) * (10) = 70, left: (7 * 10) = 70, 6, 3\nroll back, left: 6 7 3 10\n(6) / (10) = 3/5, left: (6 / 10) = 3/5, 7, 3\n(3) - (3/5) = 12/5, left: (3 - (6 / 10)) = 12/5, 7\nroll back, left: (6 / 10) = 3/5, 7, 3\nroll back, left: 6 7 3 10\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 7, 10\n(7) / (1/2) = 14, left: (7 / (3 / 6)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 / (3 / 6))) = 24\nreach 24! expression: (10 + (7 / (3 / 6)))"}, {"input": "6 7 3 10\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 3, 10\nroll back, left: 6 7 3 10\n(6) - (7) = -1, left: (6 - 7) = -1, 3, 10\n(3) * (-1) = -3, left: (3 * (6 - 7)) = -3, 10\nroll back, left: (6 - 7) = -1, 3, 10\nroll back, left: 6 7 3 10\n(6) * (7) = 42, left: (6 * 7) = 42, 3, 10\n(42) / (3) = 14, left: ((6 * 7) / 3) = 14, 10\n(10) + (14) = 24, left: (10 + ((6 * 7) / 3)) = 24\nreach 24! expression: (10 + ((6 * 7) / 3))"}, {"input": "6 7 3 10\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 6, 7\nroll back, left: 6 7 3 10\n(7) + (10) = 17, left: (7 + 10) = 17, 6, 3\nroll back, left: 6 7 3 10\n(7) - (10) = -3, left: (7 - 10) = -3, 6, 3\nroll back, left: 6 7 3 10\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, 6, 10\n(6) / (3/7) = 14, left: (6 / (3 / 7)) = 14, 10\n(10) + (14) = 24, left: (10 + (6 / (3 / 7))) = 24\nreach 24! expression: (10 + (6 / (3 / 7)))"}, {"input": "3 12 11 2\n", "output": "(12) + (11) = 23, left: (12 + 11) = 23, 3, 2\n(3) + (23) = 26, left: (3 + (12 + 11)) = 26, 2\n(26) - (2) = 24, left: ((3 + (12 + 11)) - 2) = 24\nreach 24! expression: ((3 + (12 + 11)) - 2)"}, {"input": "3 12 11 2\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 3, 11\n(11) + (10) = 21, left: (11 + (12 - 2)) = 21, 3\n(3) + (21) = 24, left: (3 + (11 + (12 - 2))) = 24\nreach 24! expression: (3 + (11 + (12 - 2)))"}, {"input": "3 12 11 2\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 12, 11\n(12) + (11) = 23, left: (12 + 11) = 23, (2 - 3) = -1\n(23) - (-1) = 24, left: ((12 + 11) - (2 - 3)) = 24\nreach 24! expression: ((12 + 11) - (2 - 3))"}, {"input": "3 12 11 2\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 12, 2\n(12) - (2) = 10, left: (12 - 2) = 10, (3 + 11) = 14\n(14) + (10) = 24, left: ((3 + 11) + (12 - 2)) = 24\nreach 24! expression: ((3 + 11) + (12 - 2))"}, {"input": "3 12 11 2\n", "output": "(3) * (2) = 6, left: (3 * 2) = 6, 12, 11\n(6) / (12) = 1/2, left: ((3 * 2) / 12) = 1/2, 11\nroll back, left: (3 * 2) = 6, 12, 11\nroll back, left: 3 12 11 2\n(3) + (2) = 5, left: (3 + 2) = 5, 12, 11\nroll back, left: 3 12 11 2\n(2) - (3) = -1, left: (2 - 3) = -1, 12, 11\n(12) + (11) = 23, left: (12 + 11) = 23, (2 - 3) = -1\n(23) - (-1) = 24, left: ((12 + 11) - (2 - 3)) = 24\nreach 24! expression: ((12 + 11) - (2 - 3))"}, {"input": "3 12 11 2\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 3, 11\n(11) + (10) = 21, left: (11 + (12 - 2)) = 21, 3\n(3) / (21) = 1/7, left: (3 / (11 + (12 - 2))) = 1/7\nroll back, left: (11 + (12 - 2)) = 21, 3\n(21) - (3) = 18, left: ((11 + (12 - 2)) - 3) = 18\nroll back, left: (11 + (12 - 2)) = 21, 3\n(3) + (21) = 24, left: (3 + (11 + (12 - 2))) = 24\nreach 24! expression: (3 + (11 + (12 - 2)))"}, {"input": "3 12 11 2\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 3, 11\n(11) + (10) = 21, left: (11 + (12 - 2)) = 21, 3\n(3) / (21) = 1/7, left: (3 / (11 + (12 - 2))) = 1/7\nroll back, left: (11 + (12 - 2)) = 21, 3\n(21) - (3) = 18, left: ((11 + (12 - 2)) - 3) = 18\nroll back, left: (11 + (12 - 2)) = 21, 3\n(3) + (21) = 24, left: (3 + (11 + (12 - 2))) = 24\nreach 24! expression: (3 + (11 + (12 - 2)))"}, {"input": "3 12 11 2\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 3, 11\n(11) + (10) = 21, left: (11 + (12 - 2)) = 21, 3\n(3) / (21) = 1/7, left: (3 / (11 + (12 - 2))) = 1/7\nroll back, left: (11 + (12 - 2)) = 21, 3\n(21) - (3) = 18, left: ((11 + (12 - 2)) - 3) = 18\nroll back, left: (11 + (12 - 2)) = 21, 3\n(3) + (21) = 24, left: (3 + (11 + (12 - 2))) = 24\nreach 24! expression: (3 + (11 + (12 - 2)))"}, {"input": "3 12 11 2\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 3, 11\n(11) + (10) = 21, left: (11 + (12 - 2)) = 21, 3\n(3) / (21) = 1/7, left: (3 / (11 + (12 - 2))) = 1/7\nroll back, left: (11 + (12 - 2)) = 21, 3\n(21) - (3) = 18, left: ((11 + (12 - 2)) - 3) = 18\nroll back, left: (11 + (12 - 2)) = 21, 3\n(3) + (21) = 24, left: (3 + (11 + (12 - 2))) = 24\nreach 24! expression: (3 + (11 + (12 - 2)))"}, {"input": "1 5 12 9\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (5 - 1)) = 36, 12\n(36) - (12) = 24, left: ((9 * (5 - 1)) - 12) = 24\nreach 24! expression: ((9 * (5 - 1)) - 12)"}, {"input": "1 5 12 9\n", "output": "(5) / (12) = 5/12, left: (5 / 12) = 5/12, 1, 9\n(1) + (9) = 10, left: (1 + 9) = 10, (5 / 12) = 5/12\n(10) / (5/12) = 24, left: ((1 + 9) / (5 / 12)) = 24\nreach 24! expression: ((1 + 9) / (5 / 12))"}, {"input": "1 5 12 9\n", "output": "(12) / (5) = 12/5, left: (12 / 5) = 12/5, 1, 9\n(1) + (9) = 10, left: (1 + 9) = 10, (12 / 5) = 12/5\n(12/5) * (10) = 24, left: ((12 / 5) * (1 + 9)) = 24\nreach 24! expression: ((12 / 5) * (1 + 9))"}, {"input": "1 5 12 9\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 1, 12\n(12) - (4) = 8, left: (12 - (9 - 5)) = 8, 1\nroll back, left: (9 - 5) = 4, 1, 12\nroll back, left: 1 5 12 9\n(5) / (9) = 5/9, left: (5 / 9) = 5/9, 1, 12\nroll back, left: 1 5 12 9\n(5) - (1) = 4, left: (5 - 1) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (5 - 1)) = 36, 12\n(36) - (12) = 24, left: ((9 * (5 - 1)) - 12) = 24\nreach 24! expression: ((9 * (5 - 1)) - 12)"}, {"input": "1 5 12 9\n", "output": "(1) + (12) = 13, left: (1 + 12) = 13, 5, 9\n(5) * (13) = 65, left: (5 * (1 + 12)) = 65, 9\nroll back, left: (1 + 12) = 13, 5, 9\nroll back, left: 1 5 12 9\n(1) - (12) = -11, left: (1 - 12) = -11, 5, 9\nroll back, left: 1 5 12 9\n(5) / (12) = 5/12, left: (5 / 12) = 5/12, 1, 9\n(1) + (9) = 10, left: (1 + 9) = 10, (5 / 12) = 5/12\n(10) / (5/12) = 24, left: ((1 + 9) / (5 / 12)) = 24\nreach 24! expression: ((1 + 9) / (5 / 12))"}, {"input": "1 5 12 9\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 1, 9\nroll back, left: 1 5 12 9\n(5) + (12) = 17, left: (5 + 12) = 17, 1, 9\n(9) - (17) = -8, left: (9 - (5 + 12)) = -8, 1\nroll back, left: (5 + 12) = 17, 1, 9\nroll back, left: 1 5 12 9\n(12) / (5) = 12/5, left: (12 / 5) = 12/5, 1, 9\n(1) + (9) = 10, left: (1 + 9) = 10, (12 / 5) = 12/5\n(12/5) * (10) = 24, left: ((12 / 5) * (1 + 9)) = 24\nreach 24! expression: ((12 / 5) * (1 + 9))"}, {"input": "10 11 3 8\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 3, 8\n(3) / (1) = 3, left: (3 / (11 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 / (11 - 10))) = 24\nreach 24! expression: (8 * (3 / (11 - 10)))"}, {"input": "10 11 3 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 10, 11\n(11) - (10) = 1, left: (11 - 10) = 1, (3 * 8) = 24\n(24) / (1) = 24, left: ((3 * 8) / (11 - 10)) = 24\nreach 24! expression: ((3 * 8) / (11 - 10))"}, {"input": "10 11 3 8\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 10, 8\n(8) + (-8) = 0, left: (8 + (3 - 11)) = 0, 10\nroll back, left: (3 - 11) = -8, 10, 8\nroll back, left: 10 11 3 8\n(11) - (3) = 8, left: (11 - 3) = 8, 10, 8\nroll back, left: 10 11 3 8\n(11) - (10) = 1, left: (11 - 10) = 1, 3, 8\n(3) / (1) = 3, left: (3 / (11 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 / (11 - 10))) = 24\nreach 24! expression: (8 * (3 / (11 - 10)))"}, {"input": "10 11 3 8\n", "output": "(10) + (8) = 18, left: (10 + 8) = 18, 11, 3\nroll back, left: 10 11 3 8\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, 10, 3\n(3) * (11/8) = 33/8, left: (3 * (11 / 8)) = 33/8, 10\nroll back, left: (11 / 8) = 11/8, 10, 3\nroll back, left: 10 11 3 8\n(11) - (10) = 1, left: (11 - 10) = 1, 3, 8\n(3) / (1) = 3, left: (3 / (11 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 / (11 - 10))) = 24\nreach 24! expression: (8 * (3 / (11 - 10)))"}, {"input": "10 11 3 8\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 11, 8\nroll back, left: 10 11 3 8\n(3) + (8) = 11, left: (3 + 8) = 11, 10, 11\nroll back, left: 10 11 3 8\n(8) - (3) = 5, left: (8 - 3) = 5, 10, 11\nroll back, left: 10 11 3 8\n(3) * (8) = 24, left: (3 * 8) = 24, 10, 11\n(11) - (10) = 1, left: (11 - 10) = 1, (3 * 8) = 24\n(24) / (1) = 24, left: ((3 * 8) / (11 - 10)) = 24\nreach 24! expression: ((3 * 8) / (11 - 10))"}, {"input": "11 9 5 9\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 9, 9\n(9) + (6) = 15, left: (9 + (11 - 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (9 + (11 - 5))) = 24\nreach 24! expression: (9 + (9 + (11 - 5)))"}, {"input": "11 9 5 9\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 11, 5\n(11) + (18) = 29, left: (11 + (9 + 9)) = 29, 5\n(29) - (5) = 24, left: ((11 + (9 + 9)) - 5) = 24\nreach 24! expression: ((11 + (9 + 9)) - 5)"}, {"input": "11 9 5 9\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 11, 9\n(11) + (4) = 15, left: (11 + (9 - 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (11 + (9 - 5))) = 24\nreach 24! expression: (9 + (11 + (9 - 5)))"}, {"input": "11 9 5 9\n", "output": "(11) + (9) = 20, left: (11 + 9) = 20, 5, 9\n(20) - (5) = 15, left: ((11 + 9) - 5) = 15, 9\n(9) + (15) = 24, left: (9 + ((11 + 9) - 5)) = 24\nreach 24! expression: (9 + ((11 + 9) - 5))"}, {"input": "11 9 5 9\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 11, 5\n(18) - (5) = 13, left: ((9 + 9) - 5) = 13, 11\n(11) + (13) = 24, left: (11 + ((9 + 9) - 5)) = 24\nreach 24! expression: (11 + ((9 + 9) - 5))"}, {"input": "11 9 5 9\n", "output": "(11) * (5) = 55, left: (11 * 5) = 55, 9, 9\nroll back, left: 11 9 5 9\n(5) / (11) = 5/11, left: (5 / 11) = 5/11, 9, 9\n(9) * (9) = 81, left: (9 * 9) = 81, (5 / 11) = 5/11\nroll back, left: (5 / 11) = 5/11, 9, 9\nroll back, left: 11 9 5 9\n(11) - (5) = 6, left: (11 - 5) = 6, 9, 9\n(9) + (6) = 15, left: (9 + (11 - 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (9 + (11 - 5))) = 24\nreach 24! expression: (9 + (9 + (11 - 5)))"}, {"input": "11 9 5 9\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 11, 9\n(14) - (11) = 3, left: ((5 + 9) - 11) = 3, 9\nroll back, left: (5 + 9) = 14, 11, 9\nroll back, left: 11 9 5 9\n(9) - (5) = 4, left: (9 - 5) = 4, 11, 9\n(4) - (11) = -7, left: ((9 - 5) - 11) = -7, 9\nroll back, left: (9 - 5) = 4, 11, 9\n(11) + (4) = 15, left: (11 + (9 - 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (11 + (9 - 5))) = 24\nreach 24! expression: (9 + (11 + (9 - 5)))"}, {"input": "11 9 5 9\n", "output": "(9) / (11) = 9/11, left: (9 / 11) = 9/11, 5, 9\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, (9 / 11) = 9/11\nroll back, left: (9 / 11) = 9/11, 5, 9\nroll back, left: 11 9 5 9\n(11) - (9) = 2, left: (11 - 9) = 2, 5, 9\nroll back, left: 11 9 5 9\n(11) + (9) = 20, left: (11 + 9) = 20, 5, 9\n(20) - (5) = 15, left: ((11 + 9) - 5) = 15, 9\n(9) + (15) = 24, left: (9 + ((11 + 9) - 5)) = 24\nreach 24! expression: (9 + ((11 + 9) - 5))"}, {"input": "11 9 5 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 11, 5\n(11) / (5) = 11/5, left: (11 / 5) = 11/5, (9 / 9) = 1\nroll back, left: (9 / 9) = 1, 11, 5\n(1) / (5) = 1/5, left: ((9 / 9) / 5) = 1/5, 11\nroll back, left: (9 / 9) = 1, 11, 5\nroll back, left: 11 9 5 9\n(9) + (9) = 18, left: (9 + 9) = 18, 11, 5\n(11) + (18) = 29, left: (11 + (9 + 9)) = 29, 5\n(29) - (5) = 24, left: ((11 + (9 + 9)) - 5) = 24\nreach 24! expression: ((11 + (9 + 9)) - 5)"}, {"input": "11 9 5 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 11, 5\n(11) + (5) = 16, left: (11 + 5) = 16, (9 / 9) = 1\n(16) / (1) = 16, left: ((11 + 5) / (9 / 9)) = 16\nroll back, left: (11 + 5) = 16, (9 / 9) = 1\nroll back, left: (9 / 9) = 1, 11, 5\nroll back, left: 11 9 5 9\n(9) + (9) = 18, left: (9 + 9) = 18, 11, 5\n(18) - (5) = 13, left: ((9 + 9) - 5) = 13, 11\n(11) + (13) = 24, left: (11 + ((9 + 9) - 5)) = 24\nreach 24! expression: (11 + ((9 + 9) - 5))"}, {"input": "2 12 4 7\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 12, 4\n(4) - (7/2) = 1/2, left: (4 - (7 / 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (4 - (7 / 2))) = 24\nreach 24! expression: (12 / (4 - (7 / 2)))"}, {"input": "2 12 4 7\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (2 + 7)) = 36, 12\n(36) - (12) = 24, left: ((4 * (2 + 7)) - 12) = 24\nreach 24! expression: ((4 * (2 + 7)) - 12)"}, {"input": "2 12 4 7\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 4, 7\nroll back, left: 2 12 4 7\n(2) * (7) = 14, left: (2 * 7) = 14, 12, 4\n(12) / (14) = 6/7, left: (12 / (2 * 7)) = 6/7, 4\nroll back, left: (2 * 7) = 14, 12, 4\nroll back, left: 2 12 4 7\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, 12, 4\n(4) - (7/2) = 1/2, left: (4 - (7 / 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (4 - (7 / 2))) = 24\nreach 24! expression: (12 / (4 - (7 / 2)))"}, {"input": "2 12 4 7\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 12, 7\n(2) - (12) = -10, left: ((4 - 2) - 12) = -10, 7\nroll back, left: (4 - 2) = 2, 12, 7\nroll back, left: 2 12 4 7\n(2) + (4) = 6, left: (2 + 4) = 6, 12, 7\nroll back, left: 2 12 4 7\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, 12, 4\n(4) - (7/2) = 1/2, left: (4 - (7 / 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (4 - (7 / 2))) = 24\nreach 24! expression: (12 / (4 - (7 / 2)))"}, {"input": "2 12 4 7\n", "output": "(2) + (12) = 14, left: (2 + 12) = 14, 4, 7\nroll back, left: 2 12 4 7\n(12) + (7) = 19, left: (12 + 7) = 19, 2, 4\n(4) / (2) = 2, left: (4 / 2) = 2, (12 + 7) = 19\nroll back, left: (12 + 7) = 19, 2, 4\nroll back, left: 2 12 4 7\n(2) + (7) = 9, left: (2 + 7) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (2 + 7)) = 36, 12\n(36) - (12) = 24, left: ((4 * (2 + 7)) - 12) = 24\nreach 24! expression: ((4 * (2 + 7)) - 12)"}, {"input": "2 12 4 7\n", "output": "(12) * (7) = 84, left: (12 * 7) = 84, 2, 4\nroll back, left: 2 12 4 7\n(12) - (7) = 5, left: (12 - 7) = 5, 2, 4\nroll back, left: 2 12 4 7\n(4) / (12) = 1/3, left: (4 / 12) = 1/3, 2, 7\nroll back, left: 2 12 4 7\n(2) + (7) = 9, left: (2 + 7) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (2 + 7)) = 36, 12\n(36) - (12) = 24, left: ((4 * (2 + 7)) - 12) = 24\nreach 24! expression: ((4 * (2 + 7)) - 12)"}, {"input": "2 12 4 7\n", "output": "(4) + (7) = 11, left: (4 + 7) = 11, 2, 12\nroll back, left: 2 12 4 7\n(7) - (4) = 3, left: (7 - 4) = 3, 2, 12\nroll back, left: 2 12 4 7\n(12) / (2) = 6, left: (12 / 2) = 6, 4, 7\nroll back, left: 2 12 4 7\n(2) + (7) = 9, left: (2 + 7) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (2 + 7)) = 36, 12\n(36) - (12) = 24, left: ((4 * (2 + 7)) - 12) = 24\nreach 24! expression: ((4 * (2 + 7)) - 12)"}, {"input": "6 2 3 7\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 6, 2\n(6) / (2) = 3, left: (6 / 2) = 3, (3 * 7) = 21\n(21) + (3) = 24, left: ((3 * 7) + (6 / 2)) = 24\nreach 24! expression: ((3 * 7) + (6 / 2))"}, {"input": "6 2 3 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 6, 3\n(14) - (6) = 8, left: ((2 * 7) - 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((2 * 7) - 6)) = 24\nreach 24! expression: (3 * ((2 * 7) - 6))"}, {"input": "6 2 3 7\n", "output": "(2) / (7) = 2/7, left: (2 / 7) = 2/7, 6, 3\n(6) / (2/7) = 21, left: (6 / (2 / 7)) = 21, 3\n(3) + (21) = 24, left: (3 + (6 / (2 / 7))) = 24\nreach 24! expression: (3 + (6 / (2 / 7)))"}, {"input": "6 2 3 7\n", "output": "(6) * (7) = 42, left: (6 * 7) = 42, 2, 3\n(42) / (2) = 21, left: ((6 * 7) / 2) = 21, 3\n(3) + (21) = 24, left: (3 + ((6 * 7) / 2)) = 24\nreach 24! expression: (3 + ((6 * 7) / 2))"}, {"input": "6 2 3 7\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 2, 3\nroll back, left: 6 2 3 7\n(7) / (6) = 7/6, left: (7 / 6) = 7/6, 2, 3\n(2) - (7/6) = 5/6, left: (2 - (7 / 6)) = 5/6, 3\nroll back, left: (7 / 6) = 7/6, 2, 3\nroll back, left: 6 2 3 7\n(6) * (7) = 42, left: (6 * 7) = 42, 2, 3\n(42) / (2) = 21, left: ((6 * 7) / 2) = 21, 3\n(3) + (21) = 24, left: (3 + ((6 * 7) / 2)) = 24\nreach 24! expression: (3 + ((6 * 7) / 2))"}, {"input": "6 2 3 7\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 2, 7\n(2) * (7) = 14, left: (2 * 7) = 14, (6 / 3) = 2\n(2) - (14) = -12, left: ((6 / 3) - (2 * 7)) = -12\nroll back, left: (2 * 7) = 14, (6 / 3) = 2\nroll back, left: (6 / 3) = 2, 2, 7\nroll back, left: 6 2 3 7\n(2) / (7) = 2/7, left: (2 / 7) = 2/7, 6, 3\n(6) / (2/7) = 21, left: (6 / (2 / 7)) = 21, 3\n(3) + (21) = 24, left: (3 + (6 / (2 / 7))) = 24\nreach 24! expression: (3 + (6 / (2 / 7)))"}, {"input": "6 2 3 7\n", "output": "(3) + (7) = 10, left: (3 + 7) = 10, 6, 2\nroll back, left: 6 2 3 7\n(3) - (7) = -4, left: (3 - 7) = -4, 6, 2\n(2) * (-4) = -8, left: (2 * (3 - 7)) = -8, 6\nroll back, left: (3 - 7) = -4, 6, 2\nroll back, left: 6 2 3 7\n(3) * (7) = 21, left: (3 * 7) = 21, 6, 2\n(6) / (2) = 3, left: (6 / 2) = 3, (3 * 7) = 21\n(21) + (3) = 24, left: ((3 * 7) + (6 / 2)) = 24\nreach 24! expression: ((3 * 7) + (6 / 2))"}, {"input": "6 2 3 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 6, 3\n(3) / (14) = 3/14, left: (3 / (2 * 7)) = 3/14, 6\nroll back, left: (2 * 7) = 14, 6, 3\n(3) - (14) = -11, left: (3 - (2 * 7)) = -11, 6\nroll back, left: (2 * 7) = 14, 6, 3\n(6) - (14) = -8, left: (6 - (2 * 7)) = -8, 3\nroll back, left: (2 * 7) = 14, 6, 3\n(14) - (6) = 8, left: ((2 * 7) - 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((2 * 7) - 6)) = 24\nreach 24! expression: (3 * ((2 * 7) - 6))"}, {"input": "2 8 7 8\n", "output": "(7) * (8) = 56, left: (7 * 8) = 56, 2, 8\n(56) - (8) = 48, left: ((7 * 8) - 8) = 48, 2\n(48) / (2) = 24, left: (((7 * 8) - 8) / 2) = 24\nreach 24! expression: (((7 * 8) - 8) / 2)"}, {"input": "2 8 7 8\n", "output": "(2) - (7) = -5, left: (2 - 7) = -5, 8, 8\n(8) + (-5) = 3, left: (8 + (2 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (8 + (2 - 7))) = 24\nreach 24! expression: (8 * (8 + (2 - 7)))"}, {"input": "2 8 7 8\n", "output": "(2) + (8) = 10, left: (2 + 8) = 10, 8, 7\n(10) - (7) = 3, left: ((2 + 8) - 7) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 8) - 7)) = 24\nreach 24! expression: (8 * ((2 + 8) - 7))"}, {"input": "2 8 7 8\n", "output": "(2) + (8) = 10, left: (2 + 8) = 10, 7, 8\n(10) - (7) = 3, left: ((2 + 8) - 7) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 8) - 7)) = 24\nreach 24! expression: (8 * ((2 + 8) - 7))"}, {"input": "2 8 7 8\n", "output": "(2) + (8) = 10, left: (2 + 8) = 10, 7, 8\n(8) / (10) = 4/5, left: (8 / (2 + 8)) = 4/5, 7\n(4/5) - (7) = -31/5, left: ((8 / (2 + 8)) - 7) = -31/5\nroll back, left: (8 / (2 + 8)) = 4/5, 7\nroll back, left: (2 + 8) = 10, 7, 8\n(10) - (8) = 2, left: ((2 + 8) - 8) = 2, 7\nroll back, left: (2 + 8) = 10, 7, 8\n(10) - (7) = 3, left: ((2 + 8) - 7) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 8) - 7)) = 24\nreach 24! expression: (8 * ((2 + 8) - 7))"}, {"input": "2 8 7 8\n", "output": "(8) * (8) = 64, left: (8 * 8) = 64, 2, 7\n(2) / (7) = 2/7, left: (2 / 7) = 2/7, (8 * 8) = 64\nroll back, left: (8 * 8) = 64, 2, 7\nroll back, left: 2 8 7 8\n(8) - (8) = 0, left: (8 - 8) = 0, 2, 7\nroll back, left: 2 8 7 8\n(2) - (7) = -5, left: (2 - 7) = -5, 8, 8\n(8) + (-5) = 3, left: (8 + (2 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (8 + (2 - 7))) = 24\nreach 24! expression: (8 * (8 + (2 - 7)))"}, {"input": "2 8 7 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 2, 8\nroll back, left: 2 8 7 8\n(7) * (8) = 56, left: (7 * 8) = 56, 2, 8\n(8) + (56) = 64, left: (8 + (7 * 8)) = 64, 2\nroll back, left: (7 * 8) = 56, 2, 8\n(8) - (56) = -48, left: (8 - (7 * 8)) = -48, 2\nroll back, left: (7 * 8) = 56, 2, 8\n(56) - (8) = 48, left: ((7 * 8) - 8) = 48, 2\n(48) / (2) = 24, left: (((7 * 8) - 8) / 2) = 24\nreach 24! expression: (((7 * 8) - 8) / 2)"}, {"input": "2 8 7 8\n", "output": "(2) + (8) = 10, left: (2 + 8) = 10, 8, 7\n(8) * (7) = 56, left: (8 * 7) = 56, (2 + 8) = 10\nroll back, left: (2 + 8) = 10, 8, 7\n(8) / (10) = 4/5, left: (8 / (2 + 8)) = 4/5, 7\n(4/5) - (7) = -31/5, left: ((8 / (2 + 8)) - 7) = -31/5\nroll back, left: (8 / (2 + 8)) = 4/5, 7\nroll back, left: (2 + 8) = 10, 8, 7\n(10) - (7) = 3, left: ((2 + 8) - 7) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 8) - 7)) = 24\nreach 24! expression: (8 * ((2 + 8) - 7))"}, {"input": "2 8 7 8\n", "output": "(2) + (8) = 10, left: (2 + 8) = 10, 8, 7\n(7) * (10) = 70, left: (7 * (2 + 8)) = 70, 8\nroll back, left: (2 + 8) = 10, 8, 7\n(10) / (7) = 10/7, left: ((2 + 8) / 7) = 10/7, 8\n(8) / (10/7) = 28/5, left: (8 / ((2 + 8) / 7)) = 28/5\nroll back, left: ((2 + 8) / 7) = 10/7, 8\nroll back, left: (2 + 8) = 10, 8, 7\n(10) - (7) = 3, left: ((2 + 8) - 7) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 8) - 7)) = 24\nreach 24! expression: (8 * ((2 + 8) - 7))"}, {"input": "12 10 11 13\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 12, 10\n(-2) - (12) = -14, left: ((11 - 13) - 12) = -14, 10\n(10) - (-14) = 24, left: (10 - ((11 - 13) - 12)) = 24\nreach 24! expression: (10 - ((11 - 13) - 12))"}, {"input": "12 10 11 13\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 12, 13\n(13) - (1) = 12, left: (13 - (11 - 10)) = 12, 12\n(12) + (12) = 24, left: (12 + (13 - (11 - 10))) = 24\nreach 24! expression: (12 + (13 - (11 - 10)))"}, {"input": "12 10 11 13\n", "output": "(12) + (13) = 25, left: (12 + 13) = 25, 10, 11\n(10) + (25) = 35, left: (10 + (12 + 13)) = 35, 11\n(35) - (11) = 24, left: ((10 + (12 + 13)) - 11) = 24\nreach 24! expression: ((10 + (12 + 13)) - 11)"}, {"input": "12 10 11 13\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 12, 13\n(12) + (13) = 25, left: (12 + 13) = 25, (11 - 10) = 1\n(25) - (1) = 24, left: ((12 + 13) - (11 - 10)) = 24\nreach 24! expression: ((12 + 13) - (11 - 10))"}, {"input": "12 10 11 13\n", "output": "(12) + (10) = 22, left: (12 + 10) = 22, 11, 13\n(11) - (13) = -2, left: (11 - 13) = -2, (12 + 10) = 22\n(22) - (-2) = 24, left: ((12 + 10) - (11 - 13)) = 24\nreach 24! expression: ((12 + 10) - (11 - 13))"}, {"input": "3 1 2 5\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (3 + 5) = 8\n(8) * (3) = 24, left: ((3 + 5) * (1 + 2)) = 24\nreach 24! expression: ((3 + 5) * (1 + 2))"}, {"input": "3 1 2 5\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 3, 1\n(1) + (7) = 8, left: (1 + (2 + 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (2 + 5))) = 24\nreach 24! expression: (3 * (1 + (2 + 5)))"}, {"input": "3 1 2 5\n", "output": "(3) * (2) = 6, left: (3 * 2) = 6, 1, 5\n(5) - (1) = 4, left: (5 - 1) = 4, (3 * 2) = 6\n(6) * (4) = 24, left: ((3 * 2) * (5 - 1)) = 24\nreach 24! expression: ((3 * 2) * (5 - 1))"}, {"input": "3 1 2 5\n", "output": "(3) + (2) = 5, left: (3 + 2) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (3 + 2)) = 25, 1\n(25) - (1) = 24, left: ((5 * (3 + 2)) - 1) = 24\nreach 24! expression: ((5 * (3 + 2)) - 1)"}, {"input": "3 1 2 5\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (2 - 5) = -3\nroll back, left: (2 - 5) = -3, 3, 1\n(1) * (-3) = -3, left: (1 * (2 - 5)) = -3, 3\nroll back, left: (2 - 5) = -3, 3, 1\nroll back, left: 3 1 2 5\n(2) + (5) = 7, left: (2 + 5) = 7, 3, 1\n(1) + (7) = 8, left: (1 + (2 + 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (2 + 5))) = 24\nreach 24! expression: (3 * (1 + (2 + 5)))"}, {"input": "3 1 2 5\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 2, 5\nroll back, left: 3 1 2 5\n(3) * (1) = 3, left: (3 * 1) = 3, 2, 5\nroll back, left: 3 1 2 5\n(3) + (1) = 4, left: (3 + 1) = 4, 2, 5\nroll back, left: 3 1 2 5\n(3) + (5) = 8, left: (3 + 5) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (3 + 5) = 8\n(8) * (3) = 24, left: ((3 + 5) * (1 + 2)) = 24\nreach 24! expression: ((3 + 5) * (1 + 2))"}, {"input": "3 1 2 5\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 2, 5\nroll back, left: 3 1 2 5\n(3) + (1) = 4, left: (3 + 1) = 4, 2, 5\nroll back, left: 3 1 2 5\n(3) * (1) = 3, left: (3 * 1) = 3, 2, 5\nroll back, left: 3 1 2 5\n(3) * (2) = 6, left: (3 * 2) = 6, 1, 5\n(5) - (1) = 4, left: (5 - 1) = 4, (3 * 2) = 6\n(6) * (4) = 24, left: ((3 * 2) * (5 - 1)) = 24\nreach 24! expression: ((3 * 2) * (5 - 1))"}, {"input": "3 1 2 5\n", "output": "(1) / (3) = 1/3, left: (1 / 3) = 1/3, 2, 5\nroll back, left: 3 1 2 5\n(5) - (3) = 2, left: (5 - 3) = 2, 1, 2\n(1) * (2) = 2, left: (1 * 2) = 2, (5 - 3) = 2\nroll back, left: (5 - 3) = 2, 1, 2\nroll back, left: 3 1 2 5\n(3) + (5) = 8, left: (3 + 5) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (3 + 5) = 8\n(8) * (3) = 24, left: ((3 + 5) * (1 + 2)) = 24\nreach 24! expression: ((3 + 5) * (1 + 2))"}, {"input": "3 1 2 5\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 1, 5\n(1) - (3/2) = -1/2, left: (1 - (3 / 2)) = -1/2, 5\nroll back, left: (3 / 2) = 3/2, 1, 5\nroll back, left: 3 1 2 5\n(3) + (2) = 5, left: (3 + 2) = 5, 1, 5\n(5) / (5) = 1, left: ((3 + 2) / 5) = 1, 1\nroll back, left: (3 + 2) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (3 + 2)) = 25, 1\n(25) - (1) = 24, left: ((5 * (3 + 2)) - 1) = 24\nreach 24! expression: ((5 * (3 + 2)) - 1)"}, {"input": "4 9 7 11\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (9 - 4)) = 35, 11\n(35) - (11) = 24, left: ((7 * (9 - 4)) - 11) = 24\nreach 24! expression: ((7 * (9 - 4)) - 11)"}, {"input": "4 9 7 11\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (7 - 4)) = 33, 9\n(33) - (9) = 24, left: ((11 * (7 - 4)) - 9) = 24\nreach 24! expression: ((11 * (7 - 4)) - 9)"}, {"input": "4 9 7 11\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 7, 11\n(7) - (5) = 2, left: (7 - (9 - 4)) = 2, 11\nroll back, left: (9 - 4) = 5, 7, 11\n(5) - (7) = -2, left: ((9 - 4) - 7) = -2, 11\nroll back, left: (9 - 4) = 5, 7, 11\n(7) + (5) = 12, left: (7 + (9 - 4)) = 12, 11\nroll back, left: (9 - 4) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (9 - 4)) = 35, 11\n(35) - (11) = 24, left: ((7 * (9 - 4)) - 11) = 24\nreach 24! expression: ((7 * (9 - 4)) - 11)"}, {"input": "4 9 7 11\n", "output": "(4) * (7) = 28, left: (4 * 7) = 28, 9, 11\nroll back, left: 4 9 7 11\n(4) + (7) = 11, left: (4 + 7) = 11, 9, 11\nroll back, left: 4 9 7 11\n(4) - (7) = -3, left: (4 - 7) = -3, 9, 11\nroll back, left: 4 9 7 11\n(7) - (4) = 3, left: (7 - 4) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (7 - 4)) = 33, 9\n(33) - (9) = 24, left: ((11 * (7 - 4)) - 9) = 24\nreach 24! expression: ((11 * (7 - 4)) - 9)"}, {"input": "4 9 7 11\n", "output": "(7) + (11) = 18, left: (7 + 11) = 18, 4, 9\n(4) / (18) = 2/9, left: (4 / (7 + 11)) = 2/9, 9\nroll back, left: (7 + 11) = 18, 4, 9\nroll back, left: 4 9 7 11\n(9) + (11) = 20, left: (9 + 11) = 20, 4, 7\nroll back, left: 4 9 7 11\n(7) - (4) = 3, left: (7 - 4) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (7 - 4)) = 33, 9\n(33) - (9) = 24, left: ((11 * (7 - 4)) - 9) = 24\nreach 24! expression: ((11 * (7 - 4)) - 9)"}, {"input": "4 9 7 11\n", "output": "(9) * (11) = 99, left: (9 * 11) = 99, 4, 7\nroll back, left: 4 9 7 11\n(9) - (11) = -2, left: (9 - 11) = -2, 4, 7\nroll back, left: 4 9 7 11\n(4) + (11) = 15, left: (4 + 11) = 15, 9, 7\nroll back, left: 4 9 7 11\n(7) - (4) = 3, left: (7 - 4) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (7 - 4)) = 33, 9\n(33) - (9) = 24, left: ((11 * (7 - 4)) - 9) = 24\nreach 24! expression: ((11 * (7 - 4)) - 9)"}, {"input": "4 9 7 11\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 7, 11\n(7) * (11) = 77, left: (7 * 11) = 77, (4 / 9) = 4/9\nroll back, left: (4 / 9) = 4/9, 7, 11\nroll back, left: 4 9 7 11\n(9) / (4) = 9/4, left: (9 / 4) = 9/4, 7, 11\nroll back, left: 4 9 7 11\n(9) - (4) = 5, left: (9 - 4) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (9 - 4)) = 35, 11\n(35) - (11) = 24, left: ((7 * (9 - 4)) - 11) = 24\nreach 24! expression: ((7 * (9 - 4)) - 11)"}, {"input": "3 12 13 7\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 3, 12\n(3) / (6) = 1/2, left: (3 / (13 - 7)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (3 / (13 - 7))) = 24\nreach 24! expression: (12 / (3 / (13 - 7)))"}, {"input": "3 12 13 7\n", "output": "(13) + (7) = 20, left: (13 + 7) = 20, 3, 12\n(12) / (3) = 4, left: (12 / 3) = 4, (13 + 7) = 20\n(20) + (4) = 24, left: ((13 + 7) + (12 / 3)) = 24\nreach 24! expression: ((13 + 7) + (12 / 3))"}, {"input": "3 12 13 7\n", "output": "(12) - (13) = -1, left: (12 - 13) = -1, 3, 7\n(7) - (-1) = 8, left: (7 - (12 - 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (12 - 13))) = 24\nreach 24! expression: (3 * (7 - (12 - 13)))"}, {"input": "3 12 13 7\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 13, 7\n(13) - (7) = 6, left: (13 - 7) = 6, (3 / 12) = 1/4\n(6) / (1/4) = 24, left: ((13 - 7) / (3 / 12)) = 24\nreach 24! expression: ((13 - 7) / (3 / 12))"}, {"input": "3 12 13 7\n", "output": "(7) - (12) = -5, left: (7 - 12) = -5, 3, 13\n(13) + (-5) = 8, left: (13 + (7 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 + (7 - 12))) = 24\nreach 24! expression: (3 * (13 + (7 - 12)))"}, {"input": "3 12 13 7\n", "output": "(12) + (13) = 25, left: (12 + 13) = 25, 3, 7\n(3) + (25) = 28, left: (3 + (12 + 13)) = 28, 7\nroll back, left: (12 + 13) = 25, 3, 7\n(3) + (7) = 10, left: (3 + 7) = 10, (12 + 13) = 25\nroll back, left: (12 + 13) = 25, 3, 7\nroll back, left: 3 12 13 7\n(12) - (13) = -1, left: (12 - 13) = -1, 3, 7\n(7) - (-1) = 8, left: (7 - (12 - 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (12 - 13))) = 24\nreach 24! expression: (3 * (7 - (12 - 13)))"}, {"input": "3 12 13 7\n", "output": "(3) + (7) = 10, left: (3 + 7) = 10, 12, 13\nroll back, left: 3 12 13 7\n(13) * (7) = 91, left: (13 * 7) = 91, 3, 12\n(3) + (12) = 15, left: (3 + 12) = 15, (13 * 7) = 91\nroll back, left: (13 * 7) = 91, 3, 12\nroll back, left: 3 12 13 7\n(13) - (7) = 6, left: (13 - 7) = 6, 3, 12\n(3) / (6) = 1/2, left: (3 / (13 - 7)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (3 / (13 - 7))) = 24\nreach 24! expression: (12 / (3 / (13 - 7)))"}, {"input": "10 10 5 1\n", "output": "(1) - (10) = -9, left: (1 - 10) = -9, 10, 5\n(10) - (-9) = 19, left: (10 - (1 - 10)) = 19, 5\n(5) + (19) = 24, left: (5 + (10 - (1 - 10))) = 24\nreach 24! expression: (5 + (10 - (1 - 10)))"}, {"input": "10 10 5 1\n", "output": "(10) + (5) = 15, left: (10 + 5) = 15, 10, 1\n(1) - (10) = -9, left: (1 - 10) = -9, (10 + 5) = 15\n(15) - (-9) = 24, left: ((10 + 5) - (1 - 10)) = 24\nreach 24! expression: ((10 + 5) - (1 - 10))"}, {"input": "10 10 5 1\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 10, 10\n(10) + (4) = 14, left: (10 + (5 - 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 + (5 - 1))) = 24\nreach 24! expression: (10 + (10 + (5 - 1)))"}, {"input": "10 10 5 1\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 5, 1\n(20) - (1) = 19, left: ((10 + 10) - 1) = 19, 5\n(5) + (19) = 24, left: (5 + ((10 + 10) - 1)) = 24\nreach 24! expression: (5 + ((10 + 10) - 1))"}, {"input": "10 10 5 1\n", "output": "(10) + (5) = 15, left: (10 + 5) = 15, 10, 1\n(15) - (1) = 14, left: ((10 + 5) - 1) = 14, 10\n(10) + (14) = 24, left: (10 + ((10 + 5) - 1)) = 24\nreach 24! expression: (10 + ((10 + 5) - 1))"}, {"input": "10 10 5 1\n", "output": "(5) * (1) = 5, left: (5 * 1) = 5, 10, 10\nroll back, left: 10 10 5 1\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, 10, 10\n(10) + (1/5) = 51/5, left: (10 + (1 / 5)) = 51/5, 10\nroll back, left: (1 / 5) = 1/5, 10, 10\nroll back, left: 10 10 5 1\n(5) - (1) = 4, left: (5 - 1) = 4, 10, 10\n(10) + (4) = 14, left: (10 + (5 - 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 + (5 - 1))) = 24\nreach 24! expression: (10 + (10 + (5 - 1)))"}, {"input": "10 10 5 1\n", "output": "(10) * (1) = 10, left: (10 * 1) = 10, 10, 5\n(10) / (5) = 2, left: ((10 * 1) / 5) = 2, 10\n(10) * (2) = 20, left: (10 * ((10 * 1) / 5)) = 20\nroll back, left: ((10 * 1) / 5) = 2, 10\nroll back, left: (10 * 1) = 10, 10, 5\nroll back, left: 10 10 5 1\n(1) - (10) = -9, left: (1 - 10) = -9, 10, 5\n(10) - (-9) = 19, left: (10 - (1 - 10)) = 19, 5\n(5) + (19) = 24, left: (5 + (10 - (1 - 10))) = 24\nreach 24! expression: (5 + (10 - (1 - 10)))"}, {"input": "10 10 5 1\n", "output": "(10) * (5) = 50, left: (10 * 5) = 50, 10, 1\nroll back, left: 10 10 5 1\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, 10, 1\nroll back, left: 10 10 5 1\n(10) - (5) = 5, left: (10 - 5) = 5, 10, 1\nroll back, left: 10 10 5 1\n(10) + (5) = 15, left: (10 + 5) = 15, 10, 1\n(15) - (1) = 14, left: ((10 + 5) - 1) = 14, 10\n(10) + (14) = 24, left: (10 + ((10 + 5) - 1)) = 24\nreach 24! expression: (10 + ((10 + 5) - 1))"}, {"input": "10 10 5 1\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 10, 1\n(1) * (2) = 2, left: (1 * (10 / 5)) = 2, 10\nroll back, left: (10 / 5) = 2, 10, 1\nroll back, left: 10 10 5 1\n(10) * (5) = 50, left: (10 * 5) = 50, 10, 1\nroll back, left: 10 10 5 1\n(10) + (5) = 15, left: (10 + 5) = 15, 10, 1\n(1) - (10) = -9, left: (1 - 10) = -9, (10 + 5) = 15\n(15) - (-9) = 24, left: ((10 + 5) - (1 - 10)) = 24\nreach 24! expression: ((10 + 5) - (1 - 10))"}, {"input": "10 10 5 1\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 5, 1\nroll back, left: 10 10 5 1\n(10) / (10) = 1, left: (10 / 10) = 1, 5, 1\nroll back, left: 10 10 5 1\n(10) - (10) = 0, left: (10 - 10) = 0, 5, 1\nroll back, left: 10 10 5 1\n(10) + (10) = 20, left: (10 + 10) = 20, 5, 1\n(20) - (1) = 19, left: ((10 + 10) - 1) = 19, 5\n(5) + (19) = 24, left: (5 + ((10 + 10) - 1)) = 24\nreach 24! expression: (5 + ((10 + 10) - 1))"}, {"input": "13 12 11 13\n", "output": "(13) / (13) = 1, left: (13 / 13) = 1, 12, 11\n(12) + (1) = 13, left: (12 + (13 / 13)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (13 / 13))) = 24\nreach 24! expression: (11 + (12 + (13 / 13)))"}, {"input": "13 12 11 13\n", "output": "(12) - (13) = -1, left: (12 - 13) = -1, 11, 13\n(13) * (-1) = -13, left: (13 * (12 - 13)) = -13, 11\n(11) - (-13) = 24, left: (11 - (13 * (12 - 13))) = 24\nreach 24! expression: (11 - (13 * (12 - 13)))"}, {"input": "13 12 11 13\n", "output": "(11) + (13) = 24, left: (11 + 13) = 24, 13, 12\n(13) - (12) = 1, left: (13 - 12) = 1, (11 + 13) = 24\n(24) * (1) = 24, left: ((11 + 13) * (13 - 12)) = 24\nreach 24! expression: ((11 + 13) * (13 - 12))"}, {"input": "13 12 11 13\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 13, 11\n(13) * (1) = 13, left: (13 * (13 - 12)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 * (13 - 12))) = 24\nreach 24! expression: (11 + (13 * (13 - 12)))"}, {"input": "12 3 6 5\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 12, 6\n(12) - (8) = 4, left: (12 - (3 + 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (12 - (3 + 5))) = 24\nreach 24! expression: (6 * (12 - (3 + 5)))"}, {"input": "12 3 6 5\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 12, 6\n(8) - (6) = 2, left: ((3 + 5) - 6) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 + 5) - 6)) = 24\nreach 24! expression: (12 * ((3 + 5) - 6))"}, {"input": "12 3 6 5\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (6 - 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (6 - 3))) = 24\nreach 24! expression: (12 * (5 - (6 - 3)))"}, {"input": "12 3 6 5\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 3, 6\n(7) - (3) = 4, left: ((12 - 5) - 3) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 - 5) - 3)) = 24\nreach 24! expression: (6 * ((12 - 5) - 3))"}, {"input": "12 3 6 5\n", "output": "(12) * (5) = 60, left: (12 * 5) = 60, 3, 6\nroll back, left: 12 3 6 5\n(12) + (5) = 17, left: (12 + 5) = 17, 3, 6\n(6) - (3) = 3, left: (6 - 3) = 3, (12 + 5) = 17\nroll back, left: (12 + 5) = 17, 3, 6\nroll back, left: 12 3 6 5\n(12) - (5) = 7, left: (12 - 5) = 7, 3, 6\n(7) - (3) = 4, left: ((12 - 5) - 3) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 - 5) - 3)) = 24\nreach 24! expression: (6 * ((12 - 5) - 3))"}, {"input": "12 3 6 5\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 3, 5\nroll back, left: 12 3 6 5\n(6) - (12) = -6, left: (6 - 12) = -6, 3, 5\nroll back, left: 12 3 6 5\n(3) * (5) = 15, left: (3 * 5) = 15, 12, 6\nroll back, left: 12 3 6 5\n(3) + (5) = 8, left: (3 + 5) = 8, 12, 6\n(8) - (6) = 2, left: ((3 + 5) - 6) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 + 5) - 6)) = 24\nreach 24! expression: (12 * ((3 + 5) - 6))"}, {"input": "12 3 6 5\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 12, 6\n(12) - (6) = 6, left: (12 - 6) = 6, (3 + 5) = 8\nroll back, left: (3 + 5) = 8, 12, 6\n(8) - (12) = -4, left: ((3 + 5) - 12) = -4, 6\nroll back, left: (3 + 5) = 8, 12, 6\n(8) / (12) = 2/3, left: ((3 + 5) / 12) = 2/3, 6\nroll back, left: (3 + 5) = 8, 12, 6\n(12) - (8) = 4, left: (12 - (3 + 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (12 - (3 + 5))) = 24\nreach 24! expression: (6 * (12 - (3 + 5)))"}, {"input": "12 3 6 5\n", "output": "(12) * (5) = 60, left: (12 * 5) = 60, 3, 6\n(3) * (6) = 18, left: (3 * 6) = 18, (12 * 5) = 60\nroll back, left: (12 * 5) = 60, 3, 6\n(60) / (3) = 20, left: ((12 * 5) / 3) = 20, 6\nroll back, left: (12 * 5) = 60, 3, 6\nroll back, left: 12 3 6 5\n(12) - (5) = 7, left: (12 - 5) = 7, 3, 6\n(7) - (3) = 4, left: ((12 - 5) - 3) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 - 5) - 3)) = 24\nreach 24! expression: (6 * ((12 - 5) - 3))"}, {"input": "12 3 6 5\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 12, 5\n(3) - (5) = -2, left: ((6 - 3) - 5) = -2, 12\n(12) / (-2) = -6, left: (12 / ((6 - 3) - 5)) = -6\nroll back, left: ((6 - 3) - 5) = -2, 12\nroll back, left: (6 - 3) = 3, 12, 5\n(5) + (3) = 8, left: (5 + (6 - 3)) = 8, 12\nroll back, left: (6 - 3) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (6 - 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (6 - 3))) = 24\nreach 24! expression: (12 * (5 - (6 - 3)))"}, {"input": "6 5 13 9\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 6, 9\n(9) - (6) = 3, left: (9 - 6) = 3, (13 - 5) = 8\n(8) * (3) = 24, left: ((13 - 5) * (9 - 6)) = 24\nreach 24! expression: ((13 - 5) * (9 - 6))"}, {"input": "6 5 13 9\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 5, 13\n(5) - (13) = -8, left: (5 - 13) = -8, (6 - 9) = -3\n(-3) * (-8) = 24, left: ((6 - 9) * (5 - 13)) = 24\nreach 24! expression: ((6 - 9) * (5 - 13))"}, {"input": "6 5 13 9\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 6, 9\n(6) - (9) = -3, left: (6 - 9) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (6 - 9)) = 24\nreach 24! expression: ((5 - 13) * (6 - 9))"}, {"input": "6 5 13 9\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (9 - 6) = 3\n(3) * (8) = 24, left: ((9 - 6) * (13 - 5)) = 24\nreach 24! expression: ((9 - 6) * (13 - 5))"}, {"input": "6 5 13 9\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 13, 9\nroll back, left: 6 5 13 9\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 13, 9\n(5/6) - (13) = -73/6, left: ((5 / 6) - 13) = -73/6, 9\nroll back, left: (5 / 6) = 5/6, 13, 9\nroll back, left: 6 5 13 9\n(6) - (9) = -3, left: (6 - 9) = -3, 5, 13\n(5) - (13) = -8, left: (5 - 13) = -8, (6 - 9) = -3\n(-3) * (-8) = 24, left: ((6 - 9) * (5 - 13)) = 24\nreach 24! expression: ((6 - 9) * (5 - 13))"}, {"input": "6 5 13 9\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 13, 9\n(9) - (5/6) = 49/6, left: (9 - (5 / 6)) = 49/6, 13\nroll back, left: (5 / 6) = 5/6, 13, 9\nroll back, left: 6 5 13 9\n(6) * (5) = 30, left: (6 * 5) = 30, 13, 9\nroll back, left: 6 5 13 9\n(5) - (13) = -8, left: (5 - 13) = -8, 6, 9\n(6) - (9) = -3, left: (6 - 9) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (6 - 9)) = 24\nreach 24! expression: ((5 - 13) * (6 - 9))"}, {"input": "6 5 13 9\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 13, 9\nroll back, left: 6 5 13 9\n(6) + (13) = 19, left: (6 + 13) = 19, 5, 9\nroll back, left: 6 5 13 9\n(13) / (6) = 13/6, left: (13 / 6) = 13/6, 5, 9\nroll back, left: 6 5 13 9\n(13) - (5) = 8, left: (13 - 5) = 8, 6, 9\n(9) - (6) = 3, left: (9 - 6) = 3, (13 - 5) = 8\n(8) * (3) = 24, left: ((13 - 5) * (9 - 6)) = 24\nreach 24! expression: ((13 - 5) * (9 - 6))"}, {"input": "6 13 7 5\n", "output": "(6) * (7) = 42, left: (6 * 7) = 42, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (6 * 7) = 42\n(42) - (18) = 24, left: ((6 * 7) - (13 + 5)) = 24\nreach 24! expression: ((6 * 7) - (13 + 5))"}, {"input": "6 13 7 5\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 13, 7\n(13) + (7) = 20, left: (13 + 7) = 20, (6 / 5) = 6/5\n(6/5) * (20) = 24, left: ((6 / 5) * (13 + 7)) = 24\nreach 24! expression: ((6 / 5) * (13 + 7))"}, {"input": "6 13 7 5\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (7 - 13) = -6\n(-6) + (30) = 24, left: ((7 - 13) + (6 * 5)) = 24\nreach 24! expression: ((7 - 13) + (6 * 5))"}, {"input": "6 13 7 5\n", "output": "(6) * (7) = 42, left: (6 * 7) = 42, 13, 5\n(42) - (5) = 37, left: ((6 * 7) - 5) = 37, 13\n(37) - (13) = 24, left: (((6 * 7) - 5) - 13) = 24\nreach 24! expression: (((6 * 7) - 5) - 13)"}, {"input": "6 13 7 5\n", "output": "(7) * (5) = 35, left: (7 * 5) = 35, 6, 13\nroll back, left: 6 13 7 5\n(7) + (5) = 12, left: (7 + 5) = 12, 6, 13\n(12) / (13) = 12/13, left: ((7 + 5) / 13) = 12/13, 6\nroll back, left: (7 + 5) = 12, 6, 13\nroll back, left: 6 13 7 5\n(6) * (7) = 42, left: (6 * 7) = 42, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (6 * 7) = 42\n(42) - (18) = 24, left: ((6 * 7) - (13 + 5)) = 24\nreach 24! expression: ((6 * 7) - (13 + 5))"}, {"input": "6 13 7 5\n", "output": "(6) - (13) = -7, left: (6 - 13) = -7, 7, 5\n(7) * (-7) = -49, left: (7 * (6 - 13)) = -49, 5\nroll back, left: (6 - 13) = -7, 7, 5\nroll back, left: 6 13 7 5\n(6) - (7) = -1, left: (6 - 7) = -1, 13, 5\nroll back, left: 6 13 7 5\n(6) * (7) = 42, left: (6 * 7) = 42, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (6 * 7) = 42\n(42) - (18) = 24, left: ((6 * 7) - (13 + 5)) = 24\nreach 24! expression: ((6 * 7) - (13 + 5))"}, {"input": "6 13 7 5\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 13, 5\nroll back, left: 6 13 7 5\n(6) / (7) = 6/7, left: (6 / 7) = 6/7, 13, 5\n(13) / (5) = 13/5, left: (13 / 5) = 13/5, (6 / 7) = 6/7\nroll back, left: (6 / 7) = 6/7, 13, 5\nroll back, left: 6 13 7 5\n(6) * (7) = 42, left: (6 * 7) = 42, 13, 5\n(42) - (5) = 37, left: ((6 * 7) - 5) = 37, 13\n(37) - (13) = 24, left: (((6 * 7) - 5) - 13) = 24\nreach 24! expression: (((6 * 7) - 5) - 13)"}, {"input": "6 13 7 5\n", "output": "(13) / (7) = 13/7, left: (13 / 7) = 13/7, 6, 5\nroll back, left: 6 13 7 5\n(7) / (13) = 7/13, left: (7 / 13) = 7/13, 6, 5\n(5) / (7/13) = 65/7, left: (5 / (7 / 13)) = 65/7, 6\nroll back, left: (7 / 13) = 7/13, 6, 5\nroll back, left: 6 13 7 5\n(7) - (13) = -6, left: (7 - 13) = -6, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (7 - 13) = -6\n(-6) + (30) = 24, left: ((7 - 13) + (6 * 5)) = 24\nreach 24! expression: ((7 - 13) + (6 * 5))"}, {"input": "10 1 4 6\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (4 - 1)) = 30, 6\n(30) - (6) = 24, left: ((10 * (4 - 1)) - 6) = 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(6) / (10) = 3/5, left: (6 / 10) = 3/5, 1, 4\n(4) * (3/5) = 12/5, left: (4 * (6 / 10)) = 12/5, 1\nroll back, left: (6 / 10) = 3/5, 1, 4\nroll back, left: 10 1 4 6\n(6) / (1) = 6, left: (6 / 1) = 6, 10, 4\nroll back, left: 10 1 4 6\n(4) - (1) = 3, left: (4 - 1) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (4 - 1)) = 30, 6\n(30) - (6) = 24, left: ((10 * (4 - 1)) - 6) = 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 4, 6\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, (10 - 1) = 9\nroll back, left: (10 - 1) = 9, 4, 6\nroll back, left: 10 1 4 6\n(1) + (4) = 5, left: (1 + 4) = 5, 10, 6\nroll back, left: 10 1 4 6\n(4) - (1) = 3, left: (4 - 1) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (4 - 1)) = 30, 6\n(30) - (6) = 24, left: ((10 * (4 - 1)) - 6) = 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 10, 6\n(6) * (1/4) = 3/2, left: (6 * (1 / 4)) = 3/2, 10\nroll back, left: (1 / 4) = 1/4, 10, 6\nroll back, left: 10 1 4 6\n(1) - (4) = -3, left: (1 - 4) = -3, 10, 6\nroll back, left: 10 1 4 6\n(4) - (1) = 3, left: (4 - 1) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (4 - 1)) = 30, 6\n(30) - (6) = 24, left: ((10 * (4 - 1)) - 6) = 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 10, 1\nroll back, left: 10 1 4 6\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, 1, 4\nroll back, left: 10 1 4 6\n(1) - (10) = -9, left: (1 - 10) = -9, 4, 6\nroll back, left: 10 1 4 6\n(4) - (1) = 3, left: (4 - 1) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (4 - 1)) = 30, 6\n(30) - (6) = 24, left: ((10 * (4 - 1)) - 6) = 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "10 1 4 6\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 10, 6\nroll back, left: 10 1 4 6\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 10, 6\nroll back, left: 10 1 4 6\n(1) * (4) = 4, left: (1 * 4) = 4, 10, 6\nroll back, left: 10 1 4 6\n(4) - (1) = 3, left: (4 - 1) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (4 - 1)) = 30, 6\n(30) - (6) = 24, left: ((10 * (4 - 1)) - 6) = 24\nreach 24! expression: ((10 * (4 - 1)) - 6)"}, {"input": "12 8 8 2\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 8, 8\n(24) / (8) = 3, left: ((12 * 2) / 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 * 2) / 8)) = 24\nreach 24! expression: (8 * ((12 * 2) / 8))"}, {"input": "12 8 8 2\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 12, 2\n(2) - (0) = 2, left: (2 - (8 - 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 - (8 - 8))) = 24\nreach 24! expression: (12 * (2 - (8 - 8)))"}, {"input": "12 8 8 2\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 8, 8\n(8) * (24) = 192, left: (8 * (12 * 2)) = 192, 8\n(192) / (8) = 24, left: ((8 * (12 * 2)) / 8) = 24\nreach 24! expression: ((8 * (12 * 2)) / 8)"}, {"input": "12 8 8 2\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 8, 8\n(8) - (8) = 0, left: (8 - 8) = 0, (12 * 2) = 24\n(24) - (0) = 24, left: ((12 * 2) - (8 - 8)) = 24\nreach 24! expression: ((12 * 2) - (8 - 8))"}, {"input": "12 8 8 2\n", "output": "(12) + (8) = 20, left: (12 + 8) = 20, 8, 2\n(20) - (8) = 12, left: ((12 + 8) - 8) = 12, 2\n(2) * (12) = 24, left: (2 * ((12 + 8) - 8)) = 24\nreach 24! expression: (2 * ((12 + 8) - 8))"}, {"input": "12 8 8 2\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (12 - 2) = 10\nroll back, left: (12 - 2) = 10, 8, 8\n(10) - (8) = 2, left: ((12 - 2) - 8) = 2, 8\nroll back, left: (12 - 2) = 10, 8, 8\nroll back, left: 12 8 8 2\n(12) * (2) = 24, left: (12 * 2) = 24, 8, 8\n(24) / (8) = 3, left: ((12 * 2) / 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 * 2) / 8)) = 24\nreach 24! expression: (8 * ((12 * 2) / 8))"}, {"input": "12 8 8 2\n", "output": "(12) + (2) = 14, left: (12 + 2) = 14, 8, 8\nroll back, left: 12 8 8 2\n(2) - (12) = -10, left: (2 - 12) = -10, 8, 8\n(-10) - (8) = -18, left: ((2 - 12) - 8) = -18, 8\nroll back, left: (2 - 12) = -10, 8, 8\nroll back, left: 12 8 8 2\n(12) * (2) = 24, left: (12 * 2) = 24, 8, 8\n(8) - (8) = 0, left: (8 - 8) = 0, (12 * 2) = 24\n(24) - (0) = 24, left: ((12 * 2) - (8 - 8)) = 24\nreach 24! expression: ((12 * 2) - (8 - 8))"}, {"input": "12 8 8 2\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 8, 8\n(8) * (24) = 192, left: (8 * (12 * 2)) = 192, 8\n(192) - (8) = 184, left: ((8 * (12 * 2)) - 8) = 184\nroll back, left: (8 * (12 * 2)) = 192, 8\n(8) + (192) = 200, left: (8 + (8 * (12 * 2))) = 200\nroll back, left: (8 * (12 * 2)) = 192, 8\n(192) / (8) = 24, left: ((8 * (12 * 2)) / 8) = 24\nreach 24! expression: ((8 * (12 * 2)) / 8)"}, {"input": "12 8 8 2\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 12, 2\n(2) - (0) = 2, left: (2 - (8 - 8)) = 2, 12\n(2) - (12) = -10, left: ((2 - (8 - 8)) - 12) = -10\nroll back, left: (2 - (8 - 8)) = 2, 12\n(2) / (12) = 1/6, left: ((2 - (8 - 8)) / 12) = 1/6\nroll back, left: (2 - (8 - 8)) = 2, 12\n(12) / (2) = 6, left: (12 / (2 - (8 - 8))) = 6\nroll back, left: (2 - (8 - 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 - (8 - 8))) = 24\nreach 24! expression: (12 * (2 - (8 - 8)))"}, {"input": "12 8 8 2\n", "output": "(12) + (8) = 20, left: (12 + 8) = 20, 8, 2\n(20) - (8) = 12, left: ((12 + 8) - 8) = 12, 2\n(2) * (12) = 24, left: (2 * ((12 + 8) - 8)) = 24\nreach 24! expression: (2 * ((12 + 8) - 8))"}, {"input": "12 8 8 2\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 8, 8\n(8) * (24) = 192, left: (8 * (12 * 2)) = 192, 8\n(192) - (8) = 184, left: ((8 * (12 * 2)) - 8) = 184\nroll back, left: (8 * (12 * 2)) = 192, 8\n(8) + (192) = 200, left: (8 + (8 * (12 * 2))) = 200\nroll back, left: (8 * (12 * 2)) = 192, 8\n(192) / (8) = 24, left: ((8 * (12 * 2)) / 8) = 24\nreach 24! expression: ((8 * (12 * 2)) / 8)"}, {"input": "12 8 8 2\n", "output": "(12) + (8) = 20, left: (12 + 8) = 20, 8, 2\n(20) - (8) = 12, left: ((12 + 8) - 8) = 12, 2\n(2) * (12) = 24, left: (2 * ((12 + 8) - 8)) = 24\nreach 24! expression: (2 * ((12 + 8) - 8))"}, {"input": "12 8 8 2\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 8, 8\n(8) * (24) = 192, left: (8 * (12 * 2)) = 192, 8\n(192) - (8) = 184, left: ((8 * (12 * 2)) - 8) = 184\nroll back, left: (8 * (12 * 2)) = 192, 8\n(8) + (192) = 200, left: (8 + (8 * (12 * 2))) = 200\nroll back, left: (8 * (12 * 2)) = 192, 8\n(192) / (8) = 24, left: ((8 * (12 * 2)) / 8) = 24\nreach 24! expression: ((8 * (12 * 2)) / 8)"}, {"input": "12 8 8 2\n", "output": "(12) + (8) = 20, left: (12 + 8) = 20, 8, 2\n(20) - (8) = 12, left: ((12 + 8) - 8) = 12, 2\n(2) * (12) = 24, left: (2 * ((12 + 8) - 8)) = 24\nreach 24! expression: (2 * ((12 + 8) - 8))"}, {"input": "12 8 8 2\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 8, 8\n(8) * (24) = 192, left: (8 * (12 * 2)) = 192, 8\n(192) - (8) = 184, left: ((8 * (12 * 2)) - 8) = 184\nroll back, left: (8 * (12 * 2)) = 192, 8\n(8) + (192) = 200, left: (8 + (8 * (12 * 2))) = 200\nroll back, left: (8 * (12 * 2)) = 192, 8\n(192) / (8) = 24, left: ((8 * (12 * 2)) / 8) = 24\nreach 24! expression: ((8 * (12 * 2)) / 8)"}, {"input": "12 8 8 2\n", "output": "(12) + (8) = 20, left: (12 + 8) = 20, 8, 2\n(20) - (8) = 12, left: ((12 + 8) - 8) = 12, 2\n(2) * (12) = 24, left: (2 * ((12 + 8) - 8)) = 24\nreach 24! expression: (2 * ((12 + 8) - 8))"}, {"input": "4 1 12 5\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 4, 12\n(6) - (4) = 2, left: ((1 + 5) - 4) = 2, 12\n(12) * (2) = 24, left: (12 * ((1 + 5) - 4)) = 24\nreach 24! expression: (12 * ((1 + 5) - 4))"}, {"input": "4 1 12 5\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (5 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (5 - 4))) = 24\nreach 24! expression: (12 * (1 + (5 - 4)))"}, {"input": "4 1 12 5\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (4 - 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (4 - 1))) = 24\nreach 24! expression: (12 * (5 - (4 - 1)))"}, {"input": "4 1 12 5\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 1, 12\n(12) - (1) = 11, left: (12 - (5 - 4)) = 11, 1\nroll back, left: (5 - 4) = 1, 1, 12\n(1) - (1) = 0, left: (1 - (5 - 4)) = 0, 12\nroll back, left: (5 - 4) = 1, 1, 12\n(1) / (1) = 1, left: (1 / (5 - 4)) = 1, 12\nroll back, left: (5 - 4) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (5 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (5 - 4))) = 24\nreach 24! expression: (12 * (1 + (5 - 4)))"}, {"input": "4 1 12 5\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 4, 12\n(4) - (4) = 0, left: (4 - (5 - 1)) = 0, 12\nroll back, left: (5 - 1) = 4, 4, 12\nroll back, left: 4 1 12 5\n(1) - (5) = -4, left: (1 - 5) = -4, 4, 12\nroll back, left: 4 1 12 5\n(1) + (5) = 6, left: (1 + 5) = 6, 4, 12\n(6) - (4) = 2, left: ((1 + 5) - 4) = 2, 12\n(12) * (2) = 24, left: (12 * ((1 + 5) - 4)) = 24\nreach 24! expression: (12 * ((1 + 5) - 4))"}, {"input": "4 1 12 5\n", "output": "(4) + (5) = 9, left: (4 + 5) = 9, 1, 12\n(1) - (12) = -11, left: (1 - 12) = -11, (4 + 5) = 9\nroll back, left: (4 + 5) = 9, 1, 12\n(1) * (9) = 9, left: (1 * (4 + 5)) = 9, 12\nroll back, left: (4 + 5) = 9, 1, 12\nroll back, left: 4 1 12 5\n(5) - (4) = 1, left: (5 - 4) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (5 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (5 - 4))) = 24\nreach 24! expression: (12 * (1 + (5 - 4)))"}, {"input": "4 1 12 5\n", "output": "(4) + (5) = 9, left: (4 + 5) = 9, 1, 12\n(12) / (1) = 12, left: (12 / 1) = 12, (4 + 5) = 9\nroll back, left: (4 + 5) = 9, 1, 12\nroll back, left: 4 1 12 5\n(5) - (4) = 1, left: (5 - 4) = 1, 1, 12\n(1) * (12) = 12, left: (1 * 12) = 12, (5 - 4) = 1\nroll back, left: (5 - 4) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (5 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (5 - 4))) = 24\nreach 24! expression: (12 * (1 + (5 - 4)))"}, {"input": "4 1 12 5\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 12, 5\n(12) * (5) = 60, left: (12 * 5) = 60, (4 + 1) = 5\nroll back, left: (4 + 1) = 5, 12, 5\nroll back, left: 4 1 12 5\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 12, 5\nroll back, left: 4 1 12 5\n(4) - (1) = 3, left: (4 - 1) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (4 - 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (4 - 1))) = 24\nreach 24! expression: (12 * (5 - (4 - 1)))"}, {"input": "5 1 9 2\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 5, 9\n(5) * (3) = 15, left: (5 * (1 + 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (1 + 2))) = 24\nreach 24! expression: (9 + (5 * (1 + 2)))"}, {"input": "5 1 9 2\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 5, 2\n(5) - (2) = 3, left: (5 - 2) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (5 - 2)) = 24\nreach 24! expression: ((9 - 1) * (5 - 2))"}, {"input": "5 1 9 2\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 1, 9\n(1) - (9) = -8, left: (1 - 9) = -8, (2 - 5) = -3\n(-3) * (-8) = 24, left: ((2 - 5) * (1 - 9)) = 24\nreach 24! expression: ((2 - 5) * (1 - 9))"}, {"input": "5 1 9 2\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 5, 2\n(2) - (5) = -3, left: (2 - 5) = -3, (1 - 9) = -8\n(-8) * (-3) = 24, left: ((1 - 9) * (2 - 5)) = 24\nreach 24! expression: ((1 - 9) * (2 - 5))"}, {"input": "5 1 9 2\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 1, 2\nroll back, left: 5 1 9 2\n(5) + (9) = 14, left: (5 + 9) = 14, 1, 2\nroll back, left: 5 1 9 2\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, 1, 2\nroll back, left: 5 1 9 2\n(2) - (5) = -3, left: (2 - 5) = -3, 1, 9\n(1) - (9) = -8, left: (1 - 9) = -8, (2 - 5) = -3\n(-3) * (-8) = 24, left: ((2 - 5) * (1 - 9)) = 24\nreach 24! expression: ((2 - 5) * (1 - 9))"}, {"input": "5 1 9 2\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 5, 2\nroll back, left: 5 1 9 2\n(1) + (9) = 10, left: (1 + 9) = 10, 5, 2\nroll back, left: 5 1 9 2\n(9) - (1) = 8, left: (9 - 1) = 8, 5, 2\n(8) - (2) = 6, left: ((9 - 1) - 2) = 6, 5\nroll back, left: (9 - 1) = 8, 5, 2\n(5) - (2) = 3, left: (5 - 2) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (5 - 2)) = 24\nreach 24! expression: ((9 - 1) * (5 - 2))"}, {"input": "5 1 9 2\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 5, 2\nroll back, left: 5 1 9 2\n(1) + (9) = 10, left: (1 + 9) = 10, 5, 2\n(5) - (10) = -5, left: (5 - (1 + 9)) = -5, 2\nroll back, left: (1 + 9) = 10, 5, 2\nroll back, left: 5 1 9 2\n(1) - (9) = -8, left: (1 - 9) = -8, 5, 2\n(2) - (5) = -3, left: (2 - 5) = -3, (1 - 9) = -8\n(-8) * (-3) = 24, left: ((1 - 9) * (2 - 5)) = 24\nreach 24! expression: ((1 - 9) * (2 - 5))"}, {"input": "5 1 9 2\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 5, 9\nroll back, left: 5 1 9 2\n(1) - (2) = -1, left: (1 - 2) = -1, 5, 9\n(5) + (-1) = 4, left: (5 + (1 - 2)) = 4, 9\nroll back, left: (1 - 2) = -1, 5, 9\nroll back, left: 5 1 9 2\n(1) + (2) = 3, left: (1 + 2) = 3, 5, 9\n(5) * (3) = 15, left: (5 * (1 + 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (1 + 2))) = 24\nreach 24! expression: (9 + (5 * (1 + 2)))"}, {"input": "5 1 9 2\n", "output": "(1) / (9) = 1/9, left: (1 / 9) = 1/9, 5, 2\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, (1 / 9) = 1/9\nroll back, left: (1 / 9) = 1/9, 5, 2\nroll back, left: 5 1 9 2\n(9) - (1) = 8, left: (9 - 1) = 8, 5, 2\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, (9 - 1) = 8\nroll back, left: (9 - 1) = 8, 5, 2\n(5) - (2) = 3, left: (5 - 2) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (5 - 2)) = 24\nreach 24! expression: ((9 - 1) * (5 - 2))"}, {"input": "10 4 4 2\n", "output": "(10) + (4) = 14, left: (10 + 4) = 14, 4, 2\n(2) * (14) = 28, left: (2 * (10 + 4)) = 28, 4\n(28) - (4) = 24, left: ((2 * (10 + 4)) - 4) = 24\nreach 24! expression: ((2 * (10 + 4)) - 4)"}, {"input": "10 4 4 2\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 10, 4\n(10) * (-2) = -20, left: (10 * (2 - 4)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 * (2 - 4))) = 24\nreach 24! expression: (4 - (10 * (2 - 4)))"}, {"input": "10 4 4 2\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 10, 2\n(2) - (16) = -14, left: (2 - (4 * 4)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 - (4 * 4))) = 24\nreach 24! expression: (10 - (2 - (4 * 4)))"}, {"input": "10 4 4 2\n", "output": "(2) / (10) = 1/5, left: (2 / 10) = 1/5, 4, 4\n(4) / (1/5) = 20, left: (4 / (2 / 10)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 / (2 / 10))) = 24\nreach 24! expression: (4 + (4 / (2 / 10)))"}, {"input": "10 4 4 2\n", "output": "(10) * (4) = 40, left: (10 * 4) = 40, 4, 2\n(40) / (2) = 20, left: ((10 * 4) / 2) = 20, 4\n(4) + (20) = 24, left: (4 + ((10 * 4) / 2)) = 24\nreach 24! expression: (4 + ((10 * 4) / 2))"}, {"input": "10 4 4 2\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 4, 4\n(20) - (4) = 16, left: ((10 * 2) - 4) = 16, 4\nroll back, left: (10 * 2) = 20, 4, 4\n(4) - (20) = -16, left: (4 - (10 * 2)) = -16, 4\nroll back, left: (10 * 2) = 20, 4, 4\nroll back, left: 10 4 4 2\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, 4, 4\n(4) / (1/5) = 20, left: (4 / (2 / 10)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 / (2 / 10))) = 24\nreach 24! expression: (4 + (4 / (2 / 10)))"}, {"input": "10 4 4 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 10, 4\n(10) * (6) = 60, left: (10 * (4 + 2)) = 60, 4\nroll back, left: (4 + 2) = 6, 10, 4\nroll back, left: 10 4 4 2\n(2) - (4) = -2, left: (2 - 4) = -2, 10, 4\n(4) - (-2) = 6, left: (4 - (2 - 4)) = 6, 10\nroll back, left: (2 - 4) = -2, 10, 4\n(10) * (-2) = -20, left: (10 * (2 - 4)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 * (2 - 4))) = 24\nreach 24! expression: (4 - (10 * (2 - 4)))"}, {"input": "10 4 4 2\n", "output": "(10) / (4) = 5/2, left: (10 / 4) = 5/2, 4, 2\n(2) - (4) = -2, left: (2 - 4) = -2, (10 / 4) = 5/2\nroll back, left: (10 / 4) = 5/2, 4, 2\nroll back, left: 10 4 4 2\n(10) * (4) = 40, left: (10 * 4) = 40, 4, 2\n(4) - (40) = -36, left: (4 - (10 * 4)) = -36, 2\nroll back, left: (10 * 4) = 40, 4, 2\n(40) / (2) = 20, left: ((10 * 4) / 2) = 20, 4\n(4) + (20) = 24, left: (4 + ((10 * 4) / 2)) = 24\nreach 24! expression: (4 + ((10 * 4) / 2))"}, {"input": "10 4 4 2\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 10, 2\n(1) - (10) = -9, left: ((4 / 4) - 10) = -9, 2\nroll back, left: (4 / 4) = 1, 10, 2\nroll back, left: 10 4 4 2\n(4) - (4) = 0, left: (4 - 4) = 0, 10, 2\nroll back, left: 10 4 4 2\n(4) * (4) = 16, left: (4 * 4) = 16, 10, 2\n(2) - (16) = -14, left: (2 - (4 * 4)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 - (4 * 4))) = 24\nreach 24! expression: (10 - (2 - (4 * 4)))"}, {"input": "7 3 3 4\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (3 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (3 / 3))) = 24\nreach 24! expression: (4 * (7 - (3 / 3)))"}, {"input": "7 3 3 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (4 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (4 - 3))) = 24\nreach 24! expression: (3 * (7 + (4 - 3)))"}, {"input": "7 3 3 4\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 3, 4\n(4) + (4) = 8, left: (4 + (7 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (7 - 3))) = 24\nreach 24! expression: (3 * (4 + (7 - 3)))"}, {"input": "7 3 3 4\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 7, 3\n(7) - (-1) = 8, left: (7 - (3 - 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (3 - 4))) = 24\nreach 24! expression: (3 * (7 - (3 - 4)))"}, {"input": "7 3 3 4\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 7, 3\nroll back, left: 7 3 3 4\n(3) * (4) = 12, left: (3 * 4) = 12, 7, 3\nroll back, left: 7 3 3 4\n(3) + (4) = 7, left: (3 + 4) = 7, 7, 3\nroll back, left: 7 3 3 4\n(3) - (4) = -1, left: (3 - 4) = -1, 7, 3\n(7) - (-1) = 8, left: (7 - (3 - 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (3 - 4))) = 24\nreach 24! expression: (3 * (7 - (3 - 4)))"}, {"input": "7 3 3 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (4 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (4 - 3))) = 24\nreach 24! expression: (3 * (7 + (4 - 3)))"}, {"input": "7 3 3 4\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 7, 4\n(1) - (4) = -3, left: ((3 / 3) - 4) = -3, 7\nroll back, left: (3 / 3) = 1, 7, 4\n(4) + (1) = 5, left: (4 + (3 / 3)) = 5, 7\nroll back, left: (3 / 3) = 1, 7, 4\n(7) + (1) = 8, left: (7 + (3 / 3)) = 8, 4\nroll back, left: (3 / 3) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (3 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (3 / 3))) = 24\nreach 24! expression: (4 * (7 - (3 / 3)))"}, {"input": "7 3 3 4\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 3, 4\nroll back, left: 7 3 3 4\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, 3, 4\nroll back, left: 7 3 3 4\n(7) + (3) = 10, left: (7 + 3) = 10, 3, 4\nroll back, left: 7 3 3 4\n(7) - (3) = 4, left: (7 - 3) = 4, 3, 4\n(4) + (4) = 8, left: (4 + (7 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (7 - 3))) = 24\nreach 24! expression: (3 * (4 + (7 - 3)))"}, {"input": "7 3 3 4\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 3, 4\n(4) * (4) = 16, left: (4 * (7 - 3)) = 16, 3\n(3) / (16) = 3/16, left: (3 / (4 * (7 - 3))) = 3/16\nroll back, left: (4 * (7 - 3)) = 16, 3\nroll back, left: (7 - 3) = 4, 3, 4\n(4) - (4) = 0, left: ((7 - 3) - 4) = 0, 3\nroll back, left: (7 - 3) = 4, 3, 4\n(4) + (4) = 8, left: (4 + (7 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (7 - 3))) = 24\nreach 24! expression: (3 * (4 + (7 - 3)))"}, {"input": "7 3 3 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (4 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (4 - 3))) = 24\nreach 24! expression: (3 * (7 + (4 - 3)))"}, {"input": "7 3 3 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (4 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (4 - 3))) = 24\nreach 24! expression: (3 * (7 + (4 - 3)))"}, {"input": "7 3 3 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (4 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (4 - 3))) = 24\nreach 24! expression: (3 * (7 + (4 - 3)))"}, {"input": "11 6 1 5\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (11 - 6)) = 25, 1\n(25) - (1) = 24, left: ((5 * (11 - 6)) - 1) = 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "11 6 1 5\n", "output": "(6) + (1) = 7, left: (6 + 1) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (6 + 1)) = 35, 11\n(35) - (11) = 24, left: ((5 * (6 + 1)) - 11) = 24\nreach 24! expression: ((5 * (6 + 1)) - 11)"}, {"input": "11 6 1 5\n", "output": "(11) / (5) = 11/5, left: (11 / 5) = 11/5, 6, 1\nroll back, left: 11 6 1 5\n(6) * (5) = 30, left: (6 * 5) = 30, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (6 * 5) = 30\nroll back, left: (6 * 5) = 30, 11, 1\nroll back, left: 11 6 1 5\n(11) - (6) = 5, left: (11 - 6) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (11 - 6)) = 25, 1\n(25) - (1) = 24, left: ((5 * (11 - 6)) - 1) = 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "11 6 1 5\n", "output": "(11) * (5) = 55, left: (11 * 5) = 55, 6, 1\nroll back, left: 11 6 1 5\n(11) / (5) = 11/5, left: (11 / 5) = 11/5, 6, 1\n(1) - (6) = -5, left: (1 - 6) = -5, (11 / 5) = 11/5\nroll back, left: (11 / 5) = 11/5, 6, 1\nroll back, left: 11 6 1 5\n(11) - (6) = 5, left: (11 - 6) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (11 - 6)) = 25, 1\n(25) - (1) = 24, left: ((5 * (11 - 6)) - 1) = 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "11 6 1 5\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 1, 5\nroll back, left: 11 6 1 5\n(11) * (6) = 66, left: (11 * 6) = 66, 1, 5\n(5) + (66) = 71, left: (5 + (11 * 6)) = 71, 1\nroll back, left: (11 * 6) = 66, 1, 5\nroll back, left: 11 6 1 5\n(11) - (6) = 5, left: (11 - 6) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (11 - 6)) = 25, 1\n(25) - (1) = 24, left: ((5 * (11 - 6)) - 1) = 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "11 6 1 5\n", "output": "(5) / (11) = 5/11, left: (5 / 11) = 5/11, 6, 1\nroll back, left: 11 6 1 5\n(5) - (11) = -6, left: (5 - 11) = -6, 6, 1\nroll back, left: 11 6 1 5\n(11) - (5) = 6, left: (11 - 5) = 6, 6, 1\nroll back, left: 11 6 1 5\n(6) + (1) = 7, left: (6 + 1) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (6 + 1)) = 35, 11\n(35) - (11) = 24, left: ((5 * (6 + 1)) - 11) = 24\nreach 24! expression: ((5 * (6 + 1)) - 11)"}, {"input": "11 6 1 5\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 1, 5\n(1) * (5) = 5, left: (1 * (11 - 6)) = 5, 5\nroll back, left: (11 - 6) = 5, 1, 5\n(1) * (5) = 5, left: (1 * 5) = 5, (11 - 6) = 5\nroll back, left: (11 - 6) = 5, 1, 5\n(5) - (5) = 0, left: (5 - (11 - 6)) = 0, 1\nroll back, left: (11 - 6) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (11 - 6)) = 25, 1\n(25) - (1) = 24, left: ((5 * (11 - 6)) - 1) = 24\nreach 24! expression: ((5 * (11 - 6)) - 1)"}, {"input": "4 11 10 12\n", "output": "(11) + (10) = 21, left: (11 + 10) = 21, 4, 12\n(12) / (4) = 3, left: (12 / 4) = 3, (11 + 10) = 21\n(21) + (3) = 24, left: ((11 + 10) + (12 / 4)) = 24\nreach 24! expression: ((11 + 10) + (12 / 4))"}, {"input": "4 11 10 12\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 11, 10\n(11) + (10) = 21, left: (11 + 10) = 21, (12 / 4) = 3\n(3) + (21) = 24, left: ((12 / 4) + (11 + 10)) = 24\nreach 24! expression: ((12 / 4) + (11 + 10))"}, {"input": "4 11 10 12\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 11, 10\n(11) + (3) = 14, left: (11 + (12 / 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (11 + (12 / 4))) = 24\nreach 24! expression: (10 + (11 + (12 / 4)))"}, {"input": "4 11 10 12\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 11, 12\nroll back, left: 4 11 10 12\n(10) - (4) = 6, left: (10 - 4) = 6, 11, 12\nroll back, left: 4 11 10 12\n(4) / (10) = 2/5, left: (4 / 10) = 2/5, 11, 12\nroll back, left: 4 11 10 12\n(12) / (4) = 3, left: (12 / 4) = 3, 11, 10\n(11) + (3) = 14, left: (11 + (12 / 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (11 + (12 / 4))) = 24\nreach 24! expression: (10 + (11 + (12 / 4)))"}, {"input": "5 5 4 1\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (5 - 1) = 4\n(4) + (20) = 24, left: ((5 - 1) + (5 * 4)) = 24\nreach 24! expression: ((5 - 1) + (5 * 4))"}, {"input": "5 5 4 1\n", "output": "(5) * (4) = 20, left: (5 * 4) = 20, 5, 1\n(5) + (20) = 25, left: (5 + (5 * 4)) = 25, 1\n(25) - (1) = 24, left: ((5 + (5 * 4)) - 1) = 24\nreach 24! expression: ((5 + (5 * 4)) - 1)"}, {"input": "5 5 4 1\n", "output": "(5) * (4) = 20, left: (5 * 4) = 20, 5, 1\n(20) - (1) = 19, left: ((5 * 4) - 1) = 19, 5\n(5) + (19) = 24, left: (5 + ((5 * 4) - 1)) = 24\nreach 24! expression: (5 + ((5 * 4) - 1))"}, {"input": "5 5 4 1\n", "output": "(5) * (4) = 20, left: (5 * 4) = 20, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (5 * 4) = 20\n(20) + (4) = 24, left: ((5 * 4) + (5 - 1)) = 24\nreach 24! expression: ((5 * 4) + (5 - 1))"}, {"input": "5 5 4 1\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 5, 4\n(5) * (-4) = -20, left: (5 * (1 - 5)) = -20, 4\n(4) - (-20) = 24, left: (4 - (5 * (1 - 5))) = 24\nreach 24! expression: (4 - (5 * (1 - 5)))"}, {"input": "5 5 4 1\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 4, 1\nroll back, left: 5 5 4 1\n(5) - (5) = 0, left: (5 - 5) = 0, 4, 1\n(4) * (0) = 0, left: (4 * (5 - 5)) = 0, 1\nroll back, left: (5 - 5) = 0, 4, 1\nroll back, left: 5 5 4 1\n(5) * (4) = 20, left: (5 * 4) = 20, 5, 1\n(5) + (20) = 25, left: (5 + (5 * 4)) = 25, 1\n(25) - (1) = 24, left: ((5 + (5 * 4)) - 1) = 24\nreach 24! expression: ((5 + (5 * 4)) - 1)"}, {"input": "5 5 4 1\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 5, 1\nroll back, left: 5 5 4 1\n(5) + (4) = 9, left: (5 + 4) = 9, 5, 1\n(5) * (9) = 45, left: (5 * (5 + 4)) = 45, 1\nroll back, left: (5 + 4) = 9, 5, 1\nroll back, left: 5 5 4 1\n(5) * (4) = 20, left: (5 * 4) = 20, 5, 1\n(20) - (1) = 19, left: ((5 * 4) - 1) = 19, 5\n(5) + (19) = 24, left: (5 + ((5 * 4) - 1)) = 24\nreach 24! expression: (5 + ((5 * 4) - 1))"}, {"input": "5 5 4 1\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 4, 1\nroll back, left: 5 5 4 1\n(1) - (4) = -3, left: (1 - 4) = -3, 5, 5\n(-3) - (5) = -8, left: ((1 - 4) - 5) = -8, 5\nroll back, left: (1 - 4) = -3, 5, 5\nroll back, left: 5 5 4 1\n(1) - (5) = -4, left: (1 - 5) = -4, 5, 4\n(5) * (-4) = -20, left: (5 * (1 - 5)) = -20, 4\n(4) - (-20) = 24, left: (4 - (5 * (1 - 5))) = 24\nreach 24! expression: (4 - (5 * (1 - 5)))"}, {"input": "5 5 4 1\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 4, 1\n(0) / (1) = 0, left: ((5 - 5) / 1) = 0, 4\nroll back, left: (5 - 5) = 0, 4, 1\nroll back, left: 5 5 4 1\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, 5, 4\nroll back, left: 5 5 4 1\n(5) - (1) = 4, left: (5 - 1) = 4, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (5 - 1) = 4\n(4) + (20) = 24, left: ((5 - 1) + (5 * 4)) = 24\nreach 24! expression: ((5 - 1) + (5 * 4))"}, {"input": "5 5 4 1\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 4, 1\nroll back, left: 5 5 4 1\n(5) + (5) = 10, left: (5 + 5) = 10, 4, 1\n(1) - (10) = -9, left: (1 - (5 + 5)) = -9, 4\nroll back, left: (5 + 5) = 10, 4, 1\nroll back, left: 5 5 4 1\n(5) * (4) = 20, left: (5 * 4) = 20, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (5 * 4) = 20\n(20) + (4) = 24, left: ((5 * 4) + (5 - 1)) = 24\nreach 24! expression: ((5 * 4) + (5 - 1))"}, {"input": "7 12 8 4\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 12, 8\n(8) + (28) = 36, left: (8 + (7 * 4)) = 36, 12\n(36) - (12) = 24, left: ((8 + (7 * 4)) - 12) = 24\nreach 24! expression: ((8 + (7 * 4)) - 12)"}, {"input": "7 12 8 4\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 7, 4\n(7) * (4) = 28, left: (7 * 4) = 28, (8 - 12) = -4\n(-4) + (28) = 24, left: ((8 - 12) + (7 * 4)) = 24\nreach 24! expression: ((8 - 12) + (7 * 4))"}, {"input": "7 12 8 4\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 12, 8\n(28) - (12) = 16, left: ((7 * 4) - 12) = 16, 8\n(8) + (16) = 24, left: (8 + ((7 * 4) - 12)) = 24\nreach 24! expression: (8 + ((7 * 4) - 12))"}, {"input": "7 12 8 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 7, 12\nroll back, left: 7 12 8 4\n(7) + (8) = 15, left: (7 + 8) = 15, 12, 4\n(12) * (4) = 48, left: (12 * 4) = 48, (7 + 8) = 15\nroll back, left: (7 + 8) = 15, 12, 4\nroll back, left: 7 12 8 4\n(7) * (4) = 28, left: (7 * 4) = 28, 12, 8\n(28) - (12) = 16, left: ((7 * 4) - 12) = 16, 8\n(8) + (16) = 24, left: (8 + ((7 * 4) - 12)) = 24\nreach 24! expression: (8 + ((7 * 4) - 12))"}, {"input": "7 12 8 4\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 7, 4\n(7) * (-4) = -28, left: (7 * (8 - 12)) = -28, 4\nroll back, left: (8 - 12) = -4, 7, 4\n(7) - (4) = 3, left: (7 - 4) = 3, (8 - 12) = -4\n(3) - (-4) = 7, left: ((7 - 4) - (8 - 12)) = 7\nroll back, left: (7 - 4) = 3, (8 - 12) = -4\nroll back, left: (8 - 12) = -4, 7, 4\n(7) * (4) = 28, left: (7 * 4) = 28, (8 - 12) = -4\n(-4) + (28) = 24, left: ((8 - 12) + (7 * 4)) = 24\nreach 24! expression: ((8 - 12) + (7 * 4))"}, {"input": "7 12 8 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 7, 12\n(12) / (2) = 6, left: (12 / (8 / 4)) = 6, 7\nroll back, left: (8 / 4) = 2, 7, 12\nroll back, left: 7 12 8 4\n(7) * (8) = 56, left: (7 * 8) = 56, 12, 4\nroll back, left: 7 12 8 4\n(7) * (4) = 28, left: (7 * 4) = 28, 12, 8\n(8) + (28) = 36, left: (8 + (7 * 4)) = 36, 12\n(36) - (12) = 24, left: ((8 + (7 * 4)) - 12) = 24\nreach 24! expression: ((8 + (7 * 4)) - 12)"}, {"input": "7 12 8 4\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 12, 8\n(8) - (12) = -4, left: (8 - 12) = -4, (7 - 4) = 3\nroll back, left: (7 - 4) = 3, 12, 8\nroll back, left: 7 12 8 4\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 12, 8\nroll back, left: 7 12 8 4\n(7) * (4) = 28, left: (7 * 4) = 28, 12, 8\n(8) + (28) = 36, left: (8 + (7 * 4)) = 36, 12\n(36) - (12) = 24, left: ((8 + (7 * 4)) - 12) = 24\nreach 24! expression: ((8 + (7 * 4)) - 12)"}, {"input": "7 12 8 4\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 12, 4\n(4) * (-1) = -4, left: (4 * (7 - 8)) = -4, 12\nroll back, left: (7 - 8) = -1, 12, 4\nroll back, left: 7 12 8 4\n(8) / (7) = 8/7, left: (8 / 7) = 8/7, 12, 4\nroll back, left: 7 12 8 4\n(8) - (12) = -4, left: (8 - 12) = -4, 7, 4\n(7) * (4) = 28, left: (7 * 4) = 28, (8 - 12) = -4\n(-4) + (28) = 24, left: ((8 - 12) + (7 * 4)) = 24\nreach 24! expression: ((8 - 12) + (7 * 4))"}, {"input": "8 6 1 6\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 6, 1\n(1) - (3/4) = 1/4, left: (1 - (6 / 8)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (6 / 8))) = 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 1, 6\n(1) - (3/4) = 1/4, left: (1 - (6 / 8)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (6 / 8))) = 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 8, 1\nroll back, left: 8 6 1 6\n(8) - (1) = 7, left: (8 - 1) = 7, 6, 6\nroll back, left: 8 6 1 6\n(8) + (6) = 14, left: (8 + 6) = 14, 1, 6\nroll back, left: 8 6 1 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 1, 6\n(1) - (3/4) = 1/4, left: (1 - (6 / 8)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (6 / 8))) = 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(8) + (6) = 14, left: (8 + 6) = 14, 6, 1\n(1) + (14) = 15, left: (1 + (8 + 6)) = 15, 6\nroll back, left: (8 + 6) = 14, 6, 1\nroll back, left: 8 6 1 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 6, 1\n(1) * (3/4) = 3/4, left: (1 * (6 / 8)) = 3/4, 6\nroll back, left: (6 / 8) = 3/4, 6, 1\n(1) - (3/4) = 1/4, left: (1 - (6 / 8)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (6 / 8))) = 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 8, 6\n(6) / (6) = 1, left: (6 / (6 / 1)) = 1, 8\nroll back, left: (6 / 1) = 6, 8, 6\nroll back, left: 8 6 1 6\n(6) / (6) = 1, left: (6 / 6) = 1, 8, 1\nroll back, left: 8 6 1 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 1, 6\n(1) - (3/4) = 1/4, left: (1 - (6 / 8)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (6 / 8))) = 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "8 6 1 6\n", "output": "(1) + (6) = 7, left: (1 + 6) = 7, 8, 6\n(6) * (7) = 42, left: (6 * (1 + 6)) = 42, 8\nroll back, left: (1 + 6) = 7, 8, 6\nroll back, left: 8 6 1 6\n(6) - (8) = -2, left: (6 - 8) = -2, 6, 1\nroll back, left: 8 6 1 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 6, 1\n(1) - (3/4) = 1/4, left: (1 - (6 / 8)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (6 / 8))) = 24\nreach 24! expression: (6 / (1 - (6 / 8)))"}, {"input": "6 10 13 1\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 6, 13\n(13) - (9) = 4, left: (13 - (10 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (10 - 1))) = 24\nreach 24! expression: (6 * (13 - (10 - 1)))"}, {"input": "6 10 13 1\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 6, 1\n(1) + (3) = 4, left: (1 + (13 - 10)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (13 - 10))) = 24\nreach 24! expression: (6 * (1 + (13 - 10)))"}, {"input": "6 10 13 1\n", "output": "(13) + (1) = 14, left: (13 + 1) = 14, 6, 10\n(14) - (10) = 4, left: ((13 + 1) - 10) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 + 1) - 10)) = 24\nreach 24! expression: (6 * ((13 + 1) - 10))"}, {"input": "6 10 13 1\n", "output": "(10) / (6) = 5/3, left: (10 / 6) = 5/3, 13, 1\n(13) + (5/3) = 44/3, left: (13 + (10 / 6)) = 44/3, 1\nroll back, left: (10 / 6) = 5/3, 13, 1\nroll back, left: 6 10 13 1\n(6) / (1) = 6, left: (6 / 1) = 6, 10, 13\nroll back, left: 6 10 13 1\n(10) - (1) = 9, left: (10 - 1) = 9, 6, 13\n(13) - (9) = 4, left: (13 - (10 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (10 - 1))) = 24\nreach 24! expression: (6 * (13 - (10 - 1)))"}, {"input": "6 10 13 1\n", "output": "(6) * (13) = 78, left: (6 * 13) = 78, 10, 1\n(10) - (1) = 9, left: (10 - 1) = 9, (6 * 13) = 78\nroll back, left: (6 * 13) = 78, 10, 1\nroll back, left: 6 10 13 1\n(6) * (10) = 60, left: (6 * 10) = 60, 13, 1\nroll back, left: 6 10 13 1\n(13) + (1) = 14, left: (13 + 1) = 14, 6, 10\n(14) - (10) = 4, left: ((13 + 1) - 10) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 + 1) - 10)) = 24\nreach 24! expression: (6 * ((13 + 1) - 10))"}, {"input": "6 10 13 1\n", "output": "(10) * (1) = 10, left: (10 * 1) = 10, 6, 13\n(6) - (10) = -4, left: (6 - (10 * 1)) = -4, 13\nroll back, left: (10 * 1) = 10, 6, 13\nroll back, left: 6 10 13 1\n(10) + (1) = 11, left: (10 + 1) = 11, 6, 13\nroll back, left: 6 10 13 1\n(10) - (1) = 9, left: (10 - 1) = 9, 6, 13\n(13) - (9) = 4, left: (13 - (10 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (10 - 1))) = 24\nreach 24! expression: (6 * (13 - (10 - 1)))"}, {"input": "3 6 4 8\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 3, 6\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, (4 + 8) = 12\n(12) / (1/2) = 24, left: ((4 + 8) / (3 / 6)) = 24\nreach 24! expression: ((4 + 8) / (3 / 6))"}, {"input": "3 6 4 8\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (3 / 6) = 1/2\n(12) / (1/2) = 24, left: ((4 + 8) / (3 / 6)) = 24\nreach 24! expression: ((4 + 8) / (3 / 6))"}, {"input": "3 6 4 8\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 3, 4\n(3) * (2) = 6, left: (3 * (8 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 * (8 - 6))) = 24\nreach 24! expression: (4 * (3 * (8 - 6)))"}, {"input": "3 6 4 8\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 3, 4\n(3) * (2) = 6, left: (3 * (8 - 6)) = 6, 4\n(4) + (6) = 10, left: (4 + (3 * (8 - 6))) = 10\nroll back, left: (3 * (8 - 6)) = 6, 4\n(6) / (4) = 3/2, left: ((3 * (8 - 6)) / 4) = 3/2\nroll back, left: (3 * (8 - 6)) = 6, 4\n(6) - (4) = 2, left: ((3 * (8 - 6)) - 4) = 2\nroll back, left: (3 * (8 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 * (8 - 6))) = 24\nreach 24! expression: (4 * (3 * (8 - 6)))"}, {"input": "3 6 4 8\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 4, 8\n(8) / (18) = 4/9, left: (8 / (3 * 6)) = 4/9, 4\nroll back, left: (3 * 6) = 18, 4, 8\nroll back, left: 3 6 4 8\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 4, 8\n(8) + (1/2) = 17/2, left: (8 + (3 / 6)) = 17/2, 4\nroll back, left: (3 / 6) = 1/2, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (3 / 6) = 1/2\n(12) / (1/2) = 24, left: ((4 + 8) / (3 / 6)) = 24\nreach 24! expression: ((4 + 8) / (3 / 6))"}, {"input": "3 6 4 8\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 3, 4\n(3) - (4) = -1, left: (3 - 4) = -1, (8 / 6) = 4/3\nroll back, left: (8 / 6) = 4/3, 3, 4\n(4) + (4/3) = 16/3, left: (4 + (8 / 6)) = 16/3, 3\nroll back, left: (8 / 6) = 4/3, 3, 4\nroll back, left: 3 6 4 8\n(8) - (6) = 2, left: (8 - 6) = 2, 3, 4\n(3) * (2) = 6, left: (3 * (8 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 * (8 - 6))) = 24\nreach 24! expression: (4 * (3 * (8 - 6)))"}, {"input": "3 6 4 8\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 3, 6\n(4) - (6) = -2, left: ((8 - 4) - 6) = -2, 3\nroll back, left: (8 - 4) = 4, 3, 6\n(3) * (4) = 12, left: (3 * (8 - 4)) = 12, 6\nroll back, left: (8 - 4) = 4, 3, 6\nroll back, left: 3 6 4 8\n(4) + (8) = 12, left: (4 + 8) = 12, 3, 6\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, (4 + 8) = 12\n(12) / (1/2) = 24, left: ((4 + 8) / (3 / 6)) = 24\nreach 24! expression: ((4 + 8) / (3 / 6))"}, {"input": "3 6 4 8\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 3, 8\nroll back, left: 3 6 4 8\n(6) - (4) = 2, left: (6 - 4) = 2, 3, 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (6 - 4) = 2\nroll back, left: (6 - 4) = 2, 3, 8\nroll back, left: 3 6 4 8\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (3 / 6) = 1/2\n(12) / (1/2) = 24, left: ((4 + 8) / (3 / 6)) = 24\nreach 24! expression: ((4 + 8) / (3 / 6))"}, {"input": "13 13 6 5\n", "output": "(13) / (13) = 1, left: (13 / 13) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (13 / 13)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (13 / 13))) = 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "13 13 6 5\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 13, 6\n(13) - (6) = 7, left: (13 - 6) = 7, (13 + 5) = 18\nroll back, left: (13 + 5) = 18, 13, 6\nroll back, left: 13 13 6 5\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 13, 13\nroll back, left: 13 13 6 5\n(13) / (13) = 1, left: (13 / 13) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (13 / 13)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (13 / 13))) = 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "13 13 6 5\n", "output": "(6) - (13) = -7, left: (6 - 13) = -7, 13, 5\nroll back, left: 13 13 6 5\n(13) * (6) = 78, left: (13 * 6) = 78, 13, 5\nroll back, left: 13 13 6 5\n(6) + (5) = 11, left: (6 + 5) = 11, 13, 13\nroll back, left: 13 13 6 5\n(13) / (13) = 1, left: (13 / 13) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (13 / 13)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (13 / 13))) = 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "13 13 6 5\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 13, 6\n(13) / (18) = 13/18, left: (13 / (13 + 5)) = 13/18, 6\nroll back, left: (13 + 5) = 18, 13, 6\nroll back, left: 13 13 6 5\n(13) / (5) = 13/5, left: (13 / 5) = 13/5, 13, 6\nroll back, left: 13 13 6 5\n(13) / (13) = 1, left: (13 / 13) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (13 / 13)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (13 / 13))) = 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "13 13 6 5\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 13, 6\nroll back, left: 13 13 6 5\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 13, 13\nroll back, left: 13 13 6 5\n(6) * (5) = 30, left: (6 * 5) = 30, 13, 13\nroll back, left: 13 13 6 5\n(13) / (13) = 1, left: (13 / 13) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (13 / 13)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (13 / 13))) = 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "13 13 6 5\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 13, 13\nroll back, left: 13 13 6 5\n(6) + (5) = 11, left: (6 + 5) = 11, 13, 13\n(13) + (11) = 24, left: (13 + (6 + 5)) = 24, 13\nroll back, left: (6 + 5) = 11, 13, 13\nroll back, left: 13 13 6 5\n(13) / (13) = 1, left: (13 / 13) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (13 / 13)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (13 / 13))) = 24\nreach 24! expression: (6 * (5 - (13 / 13)))"}, {"input": "6 5 1 5\n", "output": "(6) * (5) = 30, left: (6 * 5) = 30, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (6 * 5) = 30\n(30) - (6) = 24, left: ((6 * 5) - (1 + 5)) = 24\nreach 24! expression: ((6 * 5) - (1 + 5))"}, {"input": "6 5 1 5\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 6, 5\n(5) * (6) = 30, left: (5 * (5 + 1)) = 30, 6\n(30) - (6) = 24, left: ((5 * (5 + 1)) - 6) = 24\nreach 24! expression: ((5 * (5 + 1)) - 6)"}, {"input": "6 5 1 5\n", "output": "(6) * (5) = 30, left: (6 * 5) = 30, 5, 1\n(30) - (5) = 25, left: ((6 * 5) - 5) = 25, 1\n(25) - (1) = 24, left: (((6 * 5) - 5) - 1) = 24\nreach 24! expression: (((6 * 5) - 5) - 1)"}, {"input": "6 5 1 5\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (5 + 1) = 6\n(30) - (6) = 24, left: ((6 * 5) - (5 + 1)) = 24\nreach 24! expression: ((6 * 5) - (5 + 1))"}, {"input": "6 5 1 5\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 5, 1\nroll back, left: 6 5 1 5\n(6) - (5) = 1, left: (6 - 5) = 1, 5, 1\nroll back, left: 6 5 1 5\n(6) + (5) = 11, left: (6 + 5) = 11, 5, 1\nroll back, left: 6 5 1 5\n(6) * (5) = 30, left: (6 * 5) = 30, 5, 1\n(30) - (5) = 25, left: ((6 * 5) - 5) = 25, 1\n(25) - (1) = 24, left: (((6 * 5) - 5) - 1) = 24\nreach 24! expression: (((6 * 5) - 5) - 1)"}, {"input": "6 5 1 5\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 5, 1\n(11) / (1) = 11, left: ((6 + 5) / 1) = 11, 5\nroll back, left: (6 + 5) = 11, 5, 1\nroll back, left: 6 5 1 5\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 5, 1\nroll back, left: 6 5 1 5\n(6) * (5) = 30, left: (6 * 5) = 30, 5, 1\n(30) - (5) = 25, left: ((6 * 5) - 5) = 25, 1\n(25) - (1) = 24, left: (((6 * 5) - 5) - 1) = 24\nreach 24! expression: (((6 * 5) - 5) - 1)"}, {"input": "6 5 1 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 1, 5\nroll back, left: 6 5 1 5\n(6) + (5) = 11, left: (6 + 5) = 11, 1, 5\nroll back, left: 6 5 1 5\n(5) - (6) = -1, left: (5 - 6) = -1, 1, 5\nroll back, left: 6 5 1 5\n(6) * (5) = 30, left: (6 * 5) = 30, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (6 * 5) = 30\n(30) - (6) = 24, left: ((6 * 5) - (1 + 5)) = 24\nreach 24! expression: ((6 * 5) - (1 + 5))"}, {"input": "6 5 1 5\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 6, 5\n(6) - (5) = 1, left: (6 - 5) = 1, (1 - 5) = -4\nroll back, left: (1 - 5) = -4, 6, 5\n(6) / (-4) = -3/2, left: (6 / (1 - 5)) = -3/2, 5\nroll back, left: (1 - 5) = -4, 6, 5\nroll back, left: 6 5 1 5\n(5) + (1) = 6, left: (5 + 1) = 6, 6, 5\n(5) * (6) = 30, left: (5 * (5 + 1)) = 30, 6\n(30) - (6) = 24, left: ((5 * (5 + 1)) - 6) = 24\nreach 24! expression: ((5 * (5 + 1)) - 6)"}, {"input": "6 5 1 5\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 6, 1\nroll back, left: 6 5 1 5\n(5) * (5) = 25, left: (5 * 5) = 25, 6, 1\nroll back, left: 6 5 1 5\n(5) - (5) = 0, left: (5 - 5) = 0, 6, 1\nroll back, left: 6 5 1 5\n(5) + (1) = 6, left: (5 + 1) = 6, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (5 + 1) = 6\n(30) - (6) = 24, left: ((6 * 5) - (5 + 1)) = 24\nreach 24! expression: ((6 * 5) - (5 + 1))"}, {"input": "11 1 11 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (11 - 9) = 2\n(2) * (12) = 24, left: ((11 - 9) * (11 + 1)) = 24\nreach 24! expression: ((11 - 9) * (11 + 1))"}, {"input": "11 1 11 9\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 11, 9\n(11) - (9) = 2, left: (11 - 9) = 2, (1 + 11) = 12\n(12) * (2) = 24, left: ((1 + 11) * (11 - 9)) = 24\nreach 24! expression: ((1 + 11) * (11 - 9))"}, {"input": "11 1 11 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (11 - 9) = 2\n(2) * (12) = 24, left: ((11 - 9) * (1 + 11)) = 24\nreach 24! expression: ((11 - 9) * (1 + 11))"}, {"input": "11 1 11 9\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 11, 11\nroll back, left: 11 1 11 9\n(9) - (11) = -2, left: (9 - 11) = -2, 11, 1\n(11) / (-2) = -11/2, left: (11 / (9 - 11)) = -11/2, 1\nroll back, left: (9 - 11) = -2, 11, 1\nroll back, left: 11 1 11 9\n(11) - (9) = 2, left: (11 - 9) = 2, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (11 - 9) = 2\n(2) * (12) = 24, left: ((11 - 9) * (11 + 1)) = 24\nreach 24! expression: ((11 - 9) * (11 + 1))"}, {"input": "7 3 10 9\n", "output": "(7) + (10) = 17, left: (7 + 10) = 17, 3, 9\n(17) - (9) = 8, left: ((7 + 10) - 9) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 10) - 9)) = 24\nreach 24! expression: (3 * ((7 + 10) - 9))"}, {"input": "7 3 10 9\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (10 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (10 - 9))) = 24\nreach 24! expression: (3 * (7 + (10 - 9)))"}, {"input": "7 3 10 9\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 3, 10\n(10) + (-2) = 8, left: (10 + (7 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 + (7 - 9))) = 24\nreach 24! expression: (3 * (10 + (7 - 9)))"}, {"input": "7 3 10 9\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 7, 10\n(7) + (27) = 34, left: (7 + (3 * 9)) = 34, 10\n(34) - (10) = 24, left: ((7 + (3 * 9)) - 10) = 24\nreach 24! expression: ((7 + (3 * 9)) - 10)"}, {"input": "7 3 10 9\n", "output": "(7) + (3) = 10, left: (7 + 3) = 10, 10, 9\nroll back, left: 7 3 10 9\n(7) * (9) = 63, left: (7 * 9) = 63, 3, 10\nroll back, left: 7 3 10 9\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, 3, 10\nroll back, left: 7 3 10 9\n(7) - (9) = -2, left: (7 - 9) = -2, 3, 10\n(10) + (-2) = 8, left: (10 + (7 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 + (7 - 9))) = 24\nreach 24! expression: (3 * (10 + (7 - 9)))"}, {"input": "7 3 10 9\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 10, 9\nroll back, left: 7 3 10 9\n(7) + (3) = 10, left: (7 + 3) = 10, 10, 9\nroll back, left: 7 3 10 9\n(7) - (9) = -2, left: (7 - 9) = -2, 3, 10\n(-2) - (3) = -5, left: ((7 - 9) - 3) = -5, 10\nroll back, left: (7 - 9) = -2, 3, 10\n(10) + (-2) = 8, left: (10 + (7 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 + (7 - 9))) = 24\nreach 24! expression: (3 * (10 + (7 - 9)))"}, {"input": "7 3 10 9\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 7, 10\n(12) / (7) = 12/7, left: ((3 + 9) / 7) = 12/7, 10\nroll back, left: (3 + 9) = 12, 7, 10\nroll back, left: 7 3 10 9\n(3) - (9) = -6, left: (3 - 9) = -6, 7, 10\nroll back, left: 7 3 10 9\n(3) * (9) = 27, left: (3 * 9) = 27, 7, 10\n(7) + (27) = 34, left: (7 + (3 * 9)) = 34, 10\n(34) - (10) = 24, left: ((7 + (3 * 9)) - 10) = 24\nreach 24! expression: ((7 + (3 * 9)) - 10)"}, {"input": "7 3 10 9\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 10, 9\n(9) - (10) = -1, left: (9 - 10) = -1, (3 - 7) = -4\nroll back, left: (3 - 7) = -4, 10, 9\nroll back, left: 7 3 10 9\n(7) + (10) = 17, left: (7 + 10) = 17, 3, 9\n(3) + (17) = 20, left: (3 + (7 + 10)) = 20, 9\nroll back, left: (7 + 10) = 17, 3, 9\n(17) - (9) = 8, left: ((7 + 10) - 9) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 10) - 9)) = 24\nreach 24! expression: (3 * ((7 + 10) - 9))"}, {"input": "7 3 10 9\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 7, 3\n(3) + (1) = 4, left: (3 + (10 - 9)) = 4, 7\nroll back, left: (10 - 9) = 1, 7, 3\n(3) / (1) = 3, left: (3 / (10 - 9)) = 3, 7\n(3) / (7) = 3/7, left: ((3 / (10 - 9)) / 7) = 3/7\nroll back, left: (3 / (10 - 9)) = 3, 7\nroll back, left: (10 - 9) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (10 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (10 - 9))) = 24\nreach 24! expression: (3 * (7 + (10 - 9)))"}, {"input": "2 7 12 1\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 2, 12\n(2) * (-6) = -12, left: (2 * (1 - 7)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 * (1 - 7))) = 24\nreach 24! expression: (12 - (2 * (1 - 7)))"}, {"input": "2 7 12 1\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (7 - 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (7 - 1))) = 24\nreach 24! expression: (12 + (2 * (7 - 1)))"}, {"input": "2 7 12 1\n", "output": "(7) * (12) = 84, left: (7 * 12) = 84, 2, 1\nroll back, left: 2 7 12 1\n(7) / (12) = 7/12, left: (7 / 12) = 7/12, 2, 1\n(7/12) / (1) = 7/12, left: ((7 / 12) / 1) = 7/12, 2\nroll back, left: (7 / 12) = 7/12, 2, 1\nroll back, left: 2 7 12 1\n(7) - (1) = 6, left: (7 - 1) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (7 - 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (7 - 1))) = 24\nreach 24! expression: (12 + (2 * (7 - 1)))"}, {"input": "2 7 12 1\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 12, 1\n(1) - (12) = -11, left: (1 - 12) = -11, (2 * 7) = 14\nroll back, left: (2 * 7) = 14, 12, 1\nroll back, left: 2 7 12 1\n(12) / (1) = 12, left: (12 / 1) = 12, 2, 7\nroll back, left: 2 7 12 1\n(7) - (1) = 6, left: (7 - 1) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (7 - 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (7 - 1))) = 24\nreach 24! expression: (12 + (2 * (7 - 1)))"}, {"input": "2 7 12 1\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 2, 12\n(12) + (1/7) = 85/7, left: (12 + (1 / 7)) = 85/7, 2\nroll back, left: (1 / 7) = 1/7, 2, 12\nroll back, left: 2 7 12 1\n(1) - (7) = -6, left: (1 - 7) = -6, 2, 12\n(2) + (12) = 14, left: (2 + 12) = 14, (1 - 7) = -6\nroll back, left: (1 - 7) = -6, 2, 12\n(2) * (-6) = -12, left: (2 * (1 - 7)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 * (1 - 7))) = 24\nreach 24! expression: (12 - (2 * (1 - 7)))"}, {"input": "2 7 12 1\n", "output": "(2) - (7) = -5, left: (2 - 7) = -5, 12, 1\nroll back, left: 2 7 12 1\n(2) / (7) = 2/7, left: (2 / 7) = 2/7, 12, 1\nroll back, left: 2 7 12 1\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 7, 12\nroll back, left: 2 7 12 1\n(1) - (7) = -6, left: (1 - 7) = -6, 2, 12\n(2) * (-6) = -12, left: (2 * (1 - 7)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 * (1 - 7))) = 24\nreach 24! expression: (12 - (2 * (1 - 7)))"}, {"input": "2 7 12 1\n", "output": "(12) / (7) = 12/7, left: (12 / 7) = 12/7, 2, 1\nroll back, left: 2 7 12 1\n(2) * (1) = 2, left: (2 * 1) = 2, 7, 12\nroll back, left: 2 7 12 1\n(2) + (1) = 3, left: (2 + 1) = 3, 7, 12\nroll back, left: 2 7 12 1\n(7) - (1) = 6, left: (7 - 1) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (7 - 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (7 - 1))) = 24\nreach 24! expression: (12 + (2 * (7 - 1)))"}, {"input": "10 6 13 8\n", "output": "(10) - (13) = -3, left: (10 - 13) = -3, 6, 8\n(6) + (-3) = 3, left: (6 + (10 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 + (10 - 13))) = 24\nreach 24! expression: (8 * (6 + (10 - 13)))"}, {"input": "10 6 13 8\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 6, 8\n(6) - (3) = 3, left: (6 - (13 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (13 - 10))) = 24\nreach 24! expression: (8 * (6 - (13 - 10)))"}, {"input": "10 6 13 8\n", "output": "(10) + (6) = 16, left: (10 + 6) = 16, 13, 8\n(16) - (13) = 3, left: ((10 + 6) - 13) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 + 6) - 13)) = 24\nreach 24! expression: (8 * ((10 + 6) - 13))"}, {"input": "10 6 13 8\n", "output": "(8) / (13) = 8/13, left: (8 / 13) = 8/13, 10, 6\nroll back, left: 10 6 13 8\n(13) / (8) = 13/8, left: (13 / 8) = 13/8, 10, 6\nroll back, left: 10 6 13 8\n(6) - (8) = -2, left: (6 - 8) = -2, 10, 13\nroll back, left: 10 6 13 8\n(10) - (13) = -3, left: (10 - 13) = -3, 6, 8\n(6) + (-3) = 3, left: (6 + (10 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 + (10 - 13))) = 24\nreach 24! expression: (8 * (6 + (10 - 13)))"}, {"input": "6 13 9 6\n", "output": "(9) * (6) = 54, left: (9 * 6) = 54, 6, 13\n(6) * (13) = 78, left: (6 * 13) = 78, (9 * 6) = 54\n(78) - (54) = 24, left: ((6 * 13) - (9 * 6)) = 24\nreach 24! expression: ((6 * 13) - (9 * 6))"}, {"input": "6 13 9 6\n", "output": "(6) * (9) = 54, left: (6 * 9) = 54, 13, 6\n(13) * (6) = 78, left: (13 * 6) = 78, (6 * 9) = 54\n(78) - (54) = 24, left: ((13 * 6) - (6 * 9)) = 24\nreach 24! expression: ((13 * 6) - (6 * 9))"}, {"input": "6 13 9 6\n", "output": "(13) * (6) = 78, left: (13 * 6) = 78, 6, 9\n(6) * (9) = 54, left: (6 * 9) = 54, (13 * 6) = 78\n(78) - (54) = 24, left: ((13 * 6) - (6 * 9)) = 24\nreach 24! expression: ((13 * 6) - (6 * 9))"}, {"input": "6 13 9 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 13, 9\n(13) * (9) = 117, left: (13 * 9) = 117, (6 - 6) = 0\nroll back, left: (6 - 6) = 0, 13, 9\nroll back, left: 6 13 9 6\n(6) + (6) = 12, left: (6 + 6) = 12, 13, 9\nroll back, left: 6 13 9 6\n(9) * (6) = 54, left: (9 * 6) = 54, 6, 13\n(6) * (13) = 78, left: (6 * 13) = 78, (9 * 6) = 54\n(78) - (54) = 24, left: ((6 * 13) - (9 * 6)) = 24\nreach 24! expression: ((6 * 13) - (9 * 6))"}, {"input": "6 13 9 6\n", "output": "(13) / (9) = 13/9, left: (13 / 9) = 13/9, 6, 6\nroll back, left: 6 13 9 6\n(6) - (6) = 0, left: (6 - 6) = 0, 13, 9\n(13) / (9) = 13/9, left: (13 / 9) = 13/9, (6 - 6) = 0\nroll back, left: (6 - 6) = 0, 13, 9\nroll back, left: 6 13 9 6\n(13) * (6) = 78, left: (13 * 6) = 78, 6, 9\n(6) * (9) = 54, left: (6 * 9) = 54, (13 * 6) = 78\n(78) - (54) = 24, left: ((13 * 6) - (6 * 9)) = 24\nreach 24! expression: ((13 * 6) - (6 * 9))"}, {"input": "3 3 7 11\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 3, 7\n(3) + (14) = 17, left: (3 + (3 + 11)) = 17, 7\n(7) + (17) = 24, left: (7 + (3 + (3 + 11))) = 24\nreach 24! expression: (7 + (3 + (3 + 11)))"}, {"input": "3 3 7 11\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 3, 7\n(3) + (7) = 10, left: (3 + 7) = 10, (3 + 11) = 14\n(14) + (10) = 24, left: ((3 + 11) + (3 + 7)) = 24\nreach 24! expression: ((3 + 11) + (3 + 7))"}, {"input": "3 3 7 11\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 7, 11\n(11) + (6) = 17, left: (11 + (3 + 3)) = 17, 7\n(7) + (17) = 24, left: (7 + (11 + (3 + 3))) = 24\nreach 24! expression: (7 + (11 + (3 + 3)))"}, {"input": "3 3 7 11\n", "output": "(3) + (7) = 10, left: (3 + 7) = 10, 3, 11\n(3) + (10) = 13, left: (3 + (3 + 7)) = 13, 11\n(11) + (13) = 24, left: (11 + (3 + (3 + 7))) = 24\nreach 24! expression: (11 + (3 + (3 + 7)))"}, {"input": "3 3 7 11\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 7, 11\n(7) + (11) = 18, left: (7 + 11) = 18, (3 + 3) = 6\n(6) + (18) = 24, left: ((3 + 3) + (7 + 11)) = 24\nreach 24! expression: ((3 + 3) + (7 + 11))"}, {"input": "3 3 7 11\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 7, 11\n(0) - (7) = -7, left: ((3 - 3) - 7) = -7, 11\nroll back, left: (3 - 3) = 0, 7, 11\nroll back, left: 3 3 7 11\n(3) / (3) = 1, left: (3 / 3) = 1, 7, 11\nroll back, left: 3 3 7 11\n(3) + (3) = 6, left: (3 + 3) = 6, 7, 11\n(7) + (11) = 18, left: (7 + 11) = 18, (3 + 3) = 6\n(6) + (18) = 24, left: ((3 + 3) + (7 + 11)) = 24\nreach 24! expression: ((3 + 3) + (7 + 11))"}, {"input": "3 3 7 11\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 3, 7\nroll back, left: 3 3 7 11\n(3) - (11) = -8, left: (3 - 11) = -8, 3, 7\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, (3 - 11) = -8\nroll back, left: (3 - 11) = -8, 3, 7\nroll back, left: 3 3 7 11\n(3) + (11) = 14, left: (3 + 11) = 14, 3, 7\n(3) + (14) = 17, left: (3 + (3 + 11)) = 17, 7\n(7) + (17) = 24, left: (7 + (3 + (3 + 11))) = 24\nreach 24! expression: (7 + (3 + (3 + 11)))"}, {"input": "3 3 7 11\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 7, 11\n(11) * (6) = 66, left: (11 * (3 + 3)) = 66, 7\nroll back, left: (3 + 3) = 6, 7, 11\n(6) - (11) = -5, left: ((3 + 3) - 11) = -5, 7\n(7) * (-5) = -35, left: (7 * ((3 + 3) - 11)) = -35\nroll back, left: ((3 + 3) - 11) = -5, 7\nroll back, left: (3 + 3) = 6, 7, 11\n(11) + (6) = 17, left: (11 + (3 + 3)) = 17, 7\n(7) + (17) = 24, left: (7 + (11 + (3 + 3))) = 24\nreach 24! expression: (7 + (11 + (3 + 3)))"}, {"input": "3 3 7 11\n", "output": "(11) / (3) = 11/3, left: (11 / 3) = 11/3, 3, 7\n(11/3) / (3) = 11/9, left: ((11 / 3) / 3) = 11/9, 7\nroll back, left: (11 / 3) = 11/3, 3, 7\nroll back, left: 3 3 7 11\n(3) - (11) = -8, left: (3 - 11) = -8, 3, 7\nroll back, left: 3 3 7 11\n(3) + (11) = 14, left: (3 + 11) = 14, 3, 7\n(3) + (7) = 10, left: (3 + 7) = 10, (3 + 11) = 14\n(14) + (10) = 24, left: ((3 + 11) + (3 + 7)) = 24\nreach 24! expression: ((3 + 11) + (3 + 7))"}, {"input": "11 3 1 9\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 11, 3\n(3) + (10) = 13, left: (3 + (1 + 9)) = 13, 11\n(11) + (13) = 24, left: (11 + (3 + (1 + 9))) = 24\nreach 24! expression: (11 + (3 + (1 + 9)))"}, {"input": "11 3 1 9\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (3 + 9) = 12\n(12) + (12) = 24, left: ((3 + 9) + (11 + 1)) = 24\nreach 24! expression: ((3 + 9) + (11 + 1))"}, {"input": "11 3 1 9\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 11, 1\n(1) + (12) = 13, left: (1 + (3 + 9)) = 13, 11\n(11) + (13) = 24, left: (11 + (1 + (3 + 9))) = 24\nreach 24! expression: (11 + (1 + (3 + 9)))"}, {"input": "11 3 1 9\n", "output": "(11) * (1) = 11, left: (11 * 1) = 11, 3, 9\n(3) * (11) = 33, left: (3 * (11 * 1)) = 33, 9\n(33) - (9) = 24, left: ((3 * (11 * 1)) - 9) = 24\nreach 24! expression: ((3 * (11 * 1)) - 9)"}, {"input": "11 3 1 9\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 11, 1\nroll back, left: 11 3 1 9\n(9) - (3) = 6, left: (9 - 3) = 6, 11, 1\nroll back, left: 11 3 1 9\n(3) * (9) = 27, left: (3 * 9) = 27, 11, 1\nroll back, left: 11 3 1 9\n(3) + (9) = 12, left: (3 + 9) = 12, 11, 1\n(1) + (12) = 13, left: (1 + (3 + 9)) = 13, 11\n(11) + (13) = 24, left: (11 + (1 + (3 + 9))) = 24\nreach 24! expression: (11 + (1 + (3 + 9)))"}, {"input": "11 3 1 9\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 3, 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, (11 - 1) = 10\nroll back, left: (11 - 1) = 10, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (11 - 1) = 10\nroll back, left: (11 - 1) = 10, 3, 9\nroll back, left: 11 3 1 9\n(11) * (1) = 11, left: (11 * 1) = 11, 3, 9\n(3) * (11) = 33, left: (3 * (11 * 1)) = 33, 9\n(33) - (9) = 24, left: ((3 * (11 * 1)) - 9) = 24\nreach 24! expression: ((3 * (11 * 1)) - 9)"}, {"input": "8 8 2 9\n", "output": "(8) - (9) = -1, left: (8 - 9) = -1, 8, 2\n(2) - (-1) = 3, left: (2 - (8 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (8 - 9))) = 24\nreach 24! expression: (8 * (2 - (8 - 9)))"}, {"input": "8 8 2 9\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 8, 9\n(9) + (-6) = 3, left: (9 + (2 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 + (2 - 8))) = 24\nreach 24! expression: (8 * (9 + (2 - 8)))"}, {"input": "8 8 2 9\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (9 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (9 - 8))) = 24\nreach 24! expression: (8 * (2 + (9 - 8)))"}, {"input": "8 8 2 9\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 8, 8\n(11) - (8) = 3, left: ((2 + 9) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 9) - 8)) = 24\nreach 24! expression: (8 * ((2 + 9) - 8))"}, {"input": "8 8 2 9\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 8, 2\n(8) + (2) = 10, left: (8 + 2) = 10, (8 * 9) = 72\nroll back, left: (8 * 9) = 72, 8, 2\n(8) / (2) = 4, left: (8 / 2) = 4, (8 * 9) = 72\nroll back, left: (8 * 9) = 72, 8, 2\nroll back, left: 8 8 2 9\n(9) - (8) = 1, left: (9 - 8) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (9 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (9 - 8))) = 24\nreach 24! expression: (8 * (2 + (9 - 8)))"}, {"input": "8 8 2 9\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 2, 9\n(9) / (1) = 9, left: (9 / (8 / 8)) = 9, 2\n(9) / (2) = 9/2, left: ((9 / (8 / 8)) / 2) = 9/2\nroll back, left: (9 / (8 / 8)) = 9, 2\nroll back, left: (8 / 8) = 1, 2, 9\nroll back, left: 8 8 2 9\n(2) - (8) = -6, left: (2 - 8) = -6, 8, 9\n(9) + (-6) = 3, left: (9 + (2 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 + (2 - 8))) = 24\nreach 24! expression: (8 * (9 + (2 - 8)))"}, {"input": "8 8 2 9\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 8, 8\n(11) - (8) = 3, left: ((2 + 9) - 8) = 3, 8\n(3) - (8) = -5, left: (((2 + 9) - 8) - 8) = -5\nroll back, left: ((2 + 9) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 9) - 8)) = 24\nreach 24! expression: (8 * ((2 + 9) - 8))"}, {"input": "8 8 2 9\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 8, 2\nroll back, left: 8 8 2 9\n(8) / (9) = 8/9, left: (8 / 9) = 8/9, 8, 2\n(2) + (8/9) = 26/9, left: (2 + (8 / 9)) = 26/9, 8\nroll back, left: (8 / 9) = 8/9, 8, 2\nroll back, left: 8 8 2 9\n(8) - (9) = -1, left: (8 - 9) = -1, 8, 2\n(2) - (-1) = 3, left: (2 - (8 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (8 - 9))) = 24\nreach 24! expression: (8 * (2 - (8 - 9)))"}, {"input": "8 8 2 9\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 8, 9\n(9) - (8) = 1, left: (9 - 8) = 1, (8 * 2) = 16\nroll back, left: (8 * 2) = 16, 8, 9\n(16) - (9) = 7, left: ((8 * 2) - 9) = 7, 8\nroll back, left: (8 * 2) = 16, 8, 9\nroll back, left: 8 8 2 9\n(2) - (8) = -6, left: (2 - 8) = -6, 8, 9\n(9) + (-6) = 3, left: (9 + (2 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 + (2 - 8))) = 24\nreach 24! expression: (8 * (9 + (2 - 8)))"}, {"input": "8 8 2 9\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 8, 8\n(11) - (8) = 3, left: ((2 + 9) - 8) = 3, 8\n(3) - (8) = -5, left: (((2 + 9) - 8) - 8) = -5\nroll back, left: ((2 + 9) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 9) - 8)) = 24\nreach 24! expression: (8 * ((2 + 9) - 8))"}, {"input": "8 8 2 9\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 8, 8\n(11) - (8) = 3, left: ((2 + 9) - 8) = 3, 8\n(3) - (8) = -5, left: (((2 + 9) - 8) - 8) = -5\nroll back, left: ((2 + 9) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 9) - 8)) = 24\nreach 24! expression: (8 * ((2 + 9) - 8))"}, {"input": "8 8 2 9\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 8, 8\n(11) - (8) = 3, left: ((2 + 9) - 8) = 3, 8\n(3) - (8) = -5, left: (((2 + 9) - 8) - 8) = -5\nroll back, left: ((2 + 9) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 9) - 8)) = 24\nreach 24! expression: (8 * ((2 + 9) - 8))"}, {"input": "8 11 9 2\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 11, 9\n(11) + (4) = 15, left: (11 + (8 / 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (11 + (8 / 2))) = 24\nreach 24! expression: (9 + (11 + (8 / 2)))"}, {"input": "8 11 9 2\n", "output": "(11) + (9) = 20, left: (11 + 9) = 20, 8, 2\n(20) - (8) = 12, left: ((11 + 9) - 8) = 12, 2\n(2) * (12) = 24, left: (2 * ((11 + 9) - 8)) = 24\nreach 24! expression: (2 * ((11 + 9) - 8))"}, {"input": "8 11 9 2\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 11, 9\n(11) + (9) = 20, left: (11 + 9) = 20, (8 / 2) = 4\n(4) + (20) = 24, left: ((8 / 2) + (11 + 9)) = 24\nreach 24! expression: ((8 / 2) + (11 + 9))"}, {"input": "8 11 9 2\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (11 - 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (11 - 8))) = 24\nreach 24! expression: (2 * (9 + (11 - 8)))"}, {"input": "8 11 9 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 8, 11\nroll back, left: 8 11 9 2\n(8) + (11) = 19, left: (8 + 11) = 19, 9, 2\nroll back, left: 8 11 9 2\n(8) * (11) = 88, left: (8 * 11) = 88, 9, 2\nroll back, left: 8 11 9 2\n(11) - (8) = 3, left: (11 - 8) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (11 - 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (11 - 8))) = 24\nreach 24! expression: (2 * (9 + (11 - 8)))"}, {"input": "8 11 9 2\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 8, 11\nroll back, left: 8 11 9 2\n(11) / (9) = 11/9, left: (11 / 9) = 11/9, 8, 2\n(8) * (11/9) = 88/9, left: (8 * (11 / 9)) = 88/9, 2\nroll back, left: (11 / 9) = 11/9, 8, 2\nroll back, left: 8 11 9 2\n(11) + (9) = 20, left: (11 + 9) = 20, 8, 2\n(20) - (8) = 12, left: ((11 + 9) - 8) = 12, 2\n(2) * (12) = 24, left: (2 * ((11 + 9) - 8)) = 24\nreach 24! expression: (2 * ((11 + 9) - 8))"}, {"input": "8 11 9 2\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 8, 9\nroll back, left: 8 11 9 2\n(8) + (2) = 10, left: (8 + 2) = 10, 11, 9\n(10) / (11) = 10/11, left: ((8 + 2) / 11) = 10/11, 9\nroll back, left: (8 + 2) = 10, 11, 9\nroll back, left: 8 11 9 2\n(8) / (2) = 4, left: (8 / 2) = 4, 11, 9\n(11) + (9) = 20, left: (11 + 9) = 20, (8 / 2) = 4\n(4) + (20) = 24, left: ((8 / 2) + (11 + 9)) = 24\nreach 24! expression: ((8 / 2) + (11 + 9))"}, {"input": "8 11 9 2\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 11, 9\n(9) - (16) = -7, left: (9 - (8 * 2)) = -7, 11\nroll back, left: (8 * 2) = 16, 11, 9\nroll back, left: 8 11 9 2\n(8) / (2) = 4, left: (8 / 2) = 4, 11, 9\n(11) / (4) = 11/4, left: (11 / (8 / 2)) = 11/4, 9\nroll back, left: (8 / 2) = 4, 11, 9\n(11) + (4) = 15, left: (11 + (8 / 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (11 + (8 / 2))) = 24\nreach 24! expression: (9 + (11 + (8 / 2)))"}, {"input": "10 13 7 12\n", "output": "(12) / (10) = 6/5, left: (12 / 10) = 6/5, 13, 7\n(13) + (7) = 20, left: (13 + 7) = 20, (12 / 10) = 6/5\n(6/5) * (20) = 24, left: ((12 / 10) * (13 + 7)) = 24\nreach 24! expression: ((12 / 10) * (13 + 7))"}, {"input": "10 13 7 12\n", "output": "(13) + (7) = 20, left: (13 + 7) = 20, 10, 12\n(12) * (20) = 240, left: (12 * (13 + 7)) = 240, 10\n(240) / (10) = 24, left: ((12 * (13 + 7)) / 10) = 24\nreach 24! expression: ((12 * (13 + 7)) / 10)"}, {"input": "4 4 1 4\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (4 - 1)) = 24\nreach 24! expression: ((4 + 4) * (4 - 1))"}, {"input": "4 4 1 4\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (4 + 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (4 + 1))) = 24\nreach 24! expression: (4 + (4 * (4 + 1)))"}, {"input": "4 4 1 4\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (4 - 1) = 3\n(3) * (8) = 24, left: ((4 - 1) * (4 + 4)) = 24\nreach 24! expression: ((4 - 1) * (4 + 4))"}, {"input": "4 4 1 4\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 4, 4\n(4) / (3) = 4/3, left: (4 / (4 - 1)) = 4/3, 4\n(4/3) / (4) = 1/3, left: ((4 / (4 - 1)) / 4) = 1/3\nroll back, left: (4 / (4 - 1)) = 4/3, 4\nroll back, left: (4 - 1) = 3, 4, 4\n(3) / (4) = 3/4, left: ((4 - 1) / 4) = 3/4, 4\nroll back, left: (4 - 1) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (4 - 1) = 3\n(3) * (8) = 24, left: ((4 - 1) * (4 + 4)) = 24\nreach 24! expression: ((4 - 1) * (4 + 4))"}, {"input": "4 4 1 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 1, 4\nroll back, left: 4 4 1 4\n(4) - (4) = 0, left: (4 - 4) = 0, 1, 4\nroll back, left: 4 4 1 4\n(4) / (4) = 1, left: (4 / 4) = 1, 1, 4\nroll back, left: 4 4 1 4\n(4) + (4) = 8, left: (4 + 4) = 8, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (4 - 1)) = 24\nreach 24! expression: ((4 + 4) * (4 - 1))"}, {"input": "4 4 1 4\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (1 / 4) = 1/4\nroll back, left: (1 / 4) = 1/4, 4, 4\n(4) - (4) = 0, left: (4 - 4) = 0, (1 / 4) = 1/4\nroll back, left: (1 / 4) = 1/4, 4, 4\nroll back, left: 4 4 1 4\n(4) - (1) = 3, left: (4 - 1) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (4 - 1) = 3\n(3) * (8) = 24, left: ((4 - 1) * (4 + 4)) = 24\nreach 24! expression: ((4 - 1) * (4 + 4))"}, {"input": "4 4 1 4\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 4, 4\nroll back, left: 4 4 1 4\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 4, 4\nroll back, left: 4 4 1 4\n(1) - (4) = -3, left: (1 - 4) = -3, 4, 4\nroll back, left: 4 4 1 4\n(4) - (1) = 3, left: (4 - 1) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (4 - 1) = 3\n(3) * (8) = 24, left: ((4 - 1) * (4 + 4)) = 24\nreach 24! expression: ((4 - 1) * (4 + 4))"}, {"input": "4 4 1 4\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 4, 4\n(4) / (-3) = -4/3, left: (4 / (1 - 4)) = -4/3, 4\nroll back, left: (1 - 4) = -3, 4, 4\nroll back, left: 4 4 1 4\n(4) + (1) = 5, left: (4 + 1) = 5, 4, 4\n(4) + (5) = 9, left: (4 + (4 + 1)) = 9, 4\nroll back, left: (4 + 1) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (4 + 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (4 + 1))) = 24\nreach 24! expression: (4 + (4 * (4 + 1)))"}, {"input": "13 13 10 8\n", "output": "(13) + (13) = 26, left: (13 + 13) = 26, 10, 8\n(10) - (8) = 2, left: (10 - 8) = 2, (13 + 13) = 26\n(26) - (2) = 24, left: ((13 + 13) - (10 - 8)) = 24\nreach 24! expression: ((13 + 13) - (10 - 8))"}, {"input": "13 13 10 8\n", "output": "(13) + (8) = 21, left: (13 + 8) = 21, 13, 10\n(10) - (13) = -3, left: (10 - 13) = -3, (13 + 8) = 21\n(21) - (-3) = 24, left: ((13 + 8) - (10 - 13)) = 24\nreach 24! expression: ((13 + 8) - (10 - 13))"}, {"input": "13 13 10 8\n", "output": "(13) + (8) = 21, left: (13 + 8) = 21, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (13 + 8) = 21\n(21) + (3) = 24, left: ((13 + 8) + (13 - 10)) = 24\nreach 24! expression: ((13 + 8) + (13 - 10))"}, {"input": "13 13 10 8\n", "output": "(10) - (13) = -3, left: (10 - 13) = -3, 13, 8\n(13) + (8) = 21, left: (13 + 8) = 21, (10 - 13) = -3\n(21) - (-3) = 24, left: ((13 + 8) - (10 - 13)) = 24\nreach 24! expression: ((13 + 8) - (10 - 13))"}, {"input": "13 13 10 8\n", "output": "(13) + (8) = 21, left: (13 + 8) = 21, 13, 10\n(10) - (21) = -11, left: (10 - (13 + 8)) = -11, 13\n(13) - (-11) = 24, left: (13 - (10 - (13 + 8))) = 24\nreach 24! expression: (13 - (10 - (13 + 8)))"}, {"input": "3 5 3 7\n", "output": "(3) * (5) = 15, left: (3 * 5) = 15, 3, 7\n(15) - (7) = 8, left: ((3 * 5) - 7) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 5) - 7)) = 24\nreach 24! expression: (3 * ((3 * 5) - 7))"}, {"input": "3 5 3 7\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 3, 7\n(15) - (7) = 8, left: ((5 * 3) - 7) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 * 3) - 7)) = 24\nreach 24! expression: (3 * ((5 * 3) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 5, 7\nroll back, left: 3 5 3 7\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, 3, 7\n(3) - (7) = -4, left: (3 - 7) = -4, (5 / 3) = 5/3\nroll back, left: (5 / 3) = 5/3, 3, 7\nroll back, left: 3 5 3 7\n(3) * (5) = 15, left: (3 * 5) = 15, 3, 7\n(15) - (7) = 8, left: ((3 * 5) - 7) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 5) - 7)) = 24\nreach 24! expression: (3 * ((3 * 5) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 5, 7\nroll back, left: 3 5 3 7\n(3) * (3) = 9, left: (3 * 3) = 9, 5, 7\nroll back, left: 3 5 3 7\n(5) - (3) = 2, left: (5 - 3) = 2, 3, 7\nroll back, left: 3 5 3 7\n(5) * (3) = 15, left: (5 * 3) = 15, 3, 7\n(15) - (7) = 8, left: ((5 * 3) - 7) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 * 3) - 7)) = 24\nreach 24! expression: (3 * ((5 * 3) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 3, 7\n(7) - (8) = -1, left: (7 - (3 + 5)) = -1, 3\nroll back, left: (3 + 5) = 8, 3, 7\n(3) + (7) = 10, left: (3 + 7) = 10, (3 + 5) = 8\nroll back, left: (3 + 5) = 8, 3, 7\nroll back, left: 3 5 3 7\n(3) * (5) = 15, left: (3 * 5) = 15, 3, 7\n(15) - (7) = 8, left: ((3 * 5) - 7) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 5) - 7)) = 24\nreach 24! expression: (3 * ((3 * 5) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 3, 5\n(-4) / (5) = -4/5, left: ((3 - 7) / 5) = -4/5, 3\nroll back, left: (3 - 7) = -4, 3, 5\nroll back, left: 3 5 3 7\n(5) - (3) = 2, left: (5 - 3) = 2, 3, 7\nroll back, left: 3 5 3 7\n(5) * (3) = 15, left: (5 * 3) = 15, 3, 7\n(15) - (7) = 8, left: ((5 * 3) - 7) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 * 3) - 7)) = 24\nreach 24! expression: (3 * ((5 * 3) - 7))"}, {"input": "3 5 3 7\n", "output": "(3) + (7) = 10, left: (3 + 7) = 10, 3, 5\n(5) - (10) = -5, left: (5 - (3 + 7)) = -5, 3\nroll back, left: (3 + 7) = 10, 3, 5\nroll back, left: 3 5 3 7\n(5) / (7) = 5/7, left: (5 / 7) = 5/7, 3, 3\nroll back, left: 3 5 3 7\n(3) * (5) = 15, left: (3 * 5) = 15, 3, 7\n(15) - (7) = 8, left: ((3 * 5) - 7) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 5) - 7)) = 24\nreach 24! expression: (3 * ((3 * 5) - 7))"}, {"input": "3 11 9 9\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 11, 9\n(11) / (1/3) = 33, left: (11 / (3 / 9)) = 33, 9\n(33) - (9) = 24, left: ((11 / (3 / 9)) - 9) = 24\nreach 24! expression: ((11 / (3 / 9)) - 9)"}, {"input": "3 11 9 9\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (9 / 3)) = 33, 9\n(33) - (9) = 24, left: ((11 * (9 / 3)) - 9) = 24\nreach 24! expression: ((11 * (9 / 3)) - 9)"}, {"input": "3 11 9 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (11 - 9) = 2\n(2) * (12) = 24, left: ((11 - 9) * (3 + 9)) = 24\nreach 24! expression: ((11 - 9) * (3 + 9))"}, {"input": "3 11 9 9\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 11, 9\n(9) / (11) = 9/11, left: (9 / 11) = 9/11, (3 * 9) = 27\nroll back, left: (3 * 9) = 27, 11, 9\n(27) - (11) = 16, left: ((3 * 9) - 11) = 16, 9\nroll back, left: (3 * 9) = 27, 11, 9\nroll back, left: 3 11 9 9\n(9) / (3) = 3, left: (9 / 3) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (9 / 3)) = 33, 9\n(33) - (9) = 24, left: ((11 * (9 / 3)) - 9) = 24\nreach 24! expression: ((11 * (9 / 3)) - 9)"}, {"input": "3 11 9 9\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 3, 11\n(11) * (18) = 198, left: (11 * (9 + 9)) = 198, 3\nroll back, left: (9 + 9) = 18, 3, 11\nroll back, left: 3 11 9 9\n(9) - (9) = 0, left: (9 - 9) = 0, 3, 11\nroll back, left: 3 11 9 9\n(9) / (3) = 3, left: (9 / 3) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (9 / 3)) = 33, 9\n(33) - (9) = 24, left: ((11 * (9 / 3)) - 9) = 24\nreach 24! expression: ((11 * (9 / 3)) - 9)"}, {"input": "3 11 9 9\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 3, 9\n(9) / (-2) = -9/2, left: (9 / (9 - 11)) = -9/2, 3\nroll back, left: (9 - 11) = -2, 3, 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, (9 - 11) = -2\nroll back, left: (9 - 11) = -2, 3, 9\nroll back, left: 3 11 9 9\n(11) - (9) = 2, left: (11 - 9) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (11 - 9) = 2\n(2) * (12) = 24, left: ((11 - 9) * (3 + 9)) = 24\nreach 24! expression: ((11 - 9) * (3 + 9))"}, {"input": "7 4 8 11\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 4, 8\n(4) * (4) = 16, left: (4 * (11 - 7)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (11 - 7))) = 24\nreach 24! expression: (8 + (4 * (11 - 7)))"}, {"input": "7 4 8 11\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 4, 8\n(4) * (-4) = -16, left: (4 * (7 - 11)) = -16, 8\n(8) - (-16) = 24, left: (8 - (4 * (7 - 11))) = 24\nreach 24! expression: (8 - (4 * (7 - 11)))"}, {"input": "7 4 8 11\n", "output": "(4) * (11) = 44, left: (4 * 11) = 44, 7, 8\nroll back, left: 7 4 8 11\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, 7, 4\nroll back, left: 7 4 8 11\n(8) + (11) = 19, left: (8 + 11) = 19, 7, 4\nroll back, left: 7 4 8 11\n(7) - (11) = -4, left: (7 - 11) = -4, 4, 8\n(4) * (-4) = -16, left: (4 * (7 - 11)) = -16, 8\n(8) - (-16) = 24, left: (8 - (4 * (7 - 11))) = 24\nreach 24! expression: (8 - (4 * (7 - 11)))"}, {"input": "7 4 8 11\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 8, 11\nroll back, left: 7 4 8 11\n(7) + (4) = 11, left: (7 + 4) = 11, 8, 11\n(8) / (11) = 8/11, left: (8 / 11) = 8/11, (7 + 4) = 11\nroll back, left: (7 + 4) = 11, 8, 11\nroll back, left: 7 4 8 11\n(11) - (7) = 4, left: (11 - 7) = 4, 4, 8\n(4) * (4) = 16, left: (4 * (11 - 7)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (11 - 7))) = 24\nreach 24! expression: (8 + (4 * (11 - 7)))"}, {"input": "7 4 8 11\n", "output": "(4) / (11) = 4/11, left: (4 / 11) = 4/11, 7, 8\nroll back, left: 7 4 8 11\n(7) + (4) = 11, left: (7 + 4) = 11, 8, 11\nroll back, left: 7 4 8 11\n(11) / (7) = 11/7, left: (11 / 7) = 11/7, 4, 8\nroll back, left: 7 4 8 11\n(7) - (11) = -4, left: (7 - 11) = -4, 4, 8\n(4) * (-4) = -16, left: (4 * (7 - 11)) = -16, 8\n(8) - (-16) = 24, left: (8 - (4 * (7 - 11))) = 24\nreach 24! expression: (8 - (4 * (7 - 11)))"}, {"input": "7 4 8 11\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 4, 8\n(4) - (8) = -4, left: (4 - 8) = -4, (11 - 7) = 4\nroll back, left: (11 - 7) = 4, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (11 - 7) = 4\nroll back, left: (11 - 7) = 4, 4, 8\n(8) / (4) = 2, left: (8 / 4) = 2, (11 - 7) = 4\nroll back, left: (11 - 7) = 4, 4, 8\n(4) * (4) = 16, left: (4 * (11 - 7)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (11 - 7))) = 24\nreach 24! expression: (8 + (4 * (11 - 7)))"}, {"input": "7 4 8 11\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 7, 11\nroll back, left: 7 4 8 11\n(4) * (11) = 44, left: (4 * 11) = 44, 7, 8\nroll back, left: 7 4 8 11\n(8) - (7) = 1, left: (8 - 7) = 1, 4, 11\nroll back, left: 7 4 8 11\n(11) - (7) = 4, left: (11 - 7) = 4, 4, 8\n(4) * (4) = 16, left: (4 * (11 - 7)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (11 - 7))) = 24\nreach 24! expression: (8 + (4 * (11 - 7)))"}, {"input": "10 3 6 1\n", "output": "(10) * (3) = 30, left: (10 * 3) = 30, 6, 1\n(1) * (30) = 30, left: (1 * (10 * 3)) = 30, 6\n(30) - (6) = 24, left: ((1 * (10 * 3)) - 6) = 24\nreach 24! expression: ((1 * (10 * 3)) - 6)"}, {"input": "10 3 6 1\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (6 / 1) = 6\n(30) - (6) = 24, left: ((10 * 3) - (6 / 1)) = 24\nreach 24! expression: ((10 * 3) - (6 / 1))"}, {"input": "10 3 6 1\n", "output": "(10) * (1) = 10, left: (10 * 1) = 10, 3, 6\n(3) * (10) = 30, left: (3 * (10 * 1)) = 30, 6\n(30) - (6) = 24, left: ((3 * (10 * 1)) - 6) = 24\nreach 24! expression: ((3 * (10 * 1)) - 6)"}, {"input": "10 3 6 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (6 * 1) = 6\n(30) - (6) = 24, left: ((10 * 3) - (6 * 1)) = 24\nreach 24! expression: ((10 * 3) - (6 * 1))"}, {"input": "10 3 6 1\n", "output": "(10) / (1) = 10, left: (10 / 1) = 10, 3, 6\n(3) * (10) = 30, left: (3 * (10 / 1)) = 30, 6\n(30) - (6) = 24, left: ((3 * (10 / 1)) - 6) = 24\nreach 24! expression: ((3 * (10 / 1)) - 6)"}, {"input": "10 3 6 1\n", "output": "(3) - (10) = -7, left: (3 - 10) = -7, 6, 1\n(1) - (6) = -5, left: (1 - 6) = -5, (3 - 10) = -7\nroll back, left: (3 - 10) = -7, 6, 1\n(6) - (1) = 5, left: (6 - 1) = 5, (3 - 10) = -7\nroll back, left: (3 - 10) = -7, 6, 1\nroll back, left: 10 3 6 1\n(10) * (3) = 30, left: (10 * 3) = 30, 6, 1\n(1) * (30) = 30, left: (1 * (10 * 3)) = 30, 6\n(30) - (6) = 24, left: ((1 * (10 * 3)) - 6) = 24\nreach 24! expression: ((1 * (10 * 3)) - 6)"}, {"input": "10 3 6 1\n", "output": "(10) * (6) = 60, left: (10 * 6) = 60, 3, 1\nroll back, left: 10 3 6 1\n(10) - (6) = 4, left: (10 - 6) = 4, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (10 - 6) = 4\nroll back, left: (10 - 6) = 4, 3, 1\nroll back, left: 10 3 6 1\n(6) / (1) = 6, left: (6 / 1) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (6 / 1) = 6\n(30) - (6) = 24, left: ((10 * 3) - (6 / 1)) = 24\nreach 24! expression: ((10 * 3) - (6 / 1))"}, {"input": "10 3 6 1\n", "output": "(6) + (1) = 7, left: (6 + 1) = 7, 10, 3\n(10) / (7) = 10/7, left: (10 / (6 + 1)) = 10/7, 3\nroll back, left: (6 + 1) = 7, 10, 3\nroll back, left: 10 3 6 1\n(6) * (1) = 6, left: (6 * 1) = 6, 10, 3\n(10) / (6) = 5/3, left: (10 / (6 * 1)) = 5/3, 3\nroll back, left: (6 * 1) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (6 * 1) = 6\n(30) - (6) = 24, left: ((10 * 3) - (6 * 1)) = 24\nreach 24! expression: ((10 * 3) - (6 * 1))"}, {"input": "10 3 6 1\n", "output": "(10) * (6) = 60, left: (10 * 6) = 60, 3, 1\n(60) / (3) = 20, left: ((10 * 6) / 3) = 20, 1\n(20) - (1) = 19, left: (((10 * 6) / 3) - 1) = 19\nroll back, left: ((10 * 6) / 3) = 20, 1\nroll back, left: (10 * 6) = 60, 3, 1\nroll back, left: 10 3 6 1\n(10) * (1) = 10, left: (10 * 1) = 10, 3, 6\n(3) * (10) = 30, left: (3 * (10 * 1)) = 30, 6\n(30) - (6) = 24, left: ((3 * (10 * 1)) - 6) = 24\nreach 24! expression: ((3 * (10 * 1)) - 6)"}, {"input": "10 3 6 1\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 3, 1\nroll back, left: 10 3 6 1\n(3) - (6) = -3, left: (3 - 6) = -3, 10, 1\n(1) * (-3) = -3, left: (1 * (3 - 6)) = -3, 10\nroll back, left: (3 - 6) = -3, 10, 1\nroll back, left: 10 3 6 1\n(10) / (1) = 10, left: (10 / 1) = 10, 3, 6\n(3) * (10) = 30, left: (3 * (10 / 1)) = 30, 6\n(30) - (6) = 24, left: ((3 * (10 / 1)) - 6) = 24\nreach 24! expression: ((3 * (10 / 1)) - 6)"}, {"input": "7 2 8 2\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 2, 8\n(2) + (8) = 10, left: (2 + 8) = 10, (7 * 2) = 14\n(14) + (10) = 24, left: ((7 * 2) + (2 + 8)) = 24\nreach 24! expression: ((7 * 2) + (2 + 8))"}, {"input": "7 2 8 2\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 8, 2\n(5) - (2) = 3, left: ((7 - 2) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 - 2) - 2)) = 24\nreach 24! expression: (8 * ((7 - 2) - 2))"}, {"input": "7 2 8 2\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 8, 2\n(8) + (14) = 22, left: (8 + (7 * 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (8 + (7 * 2))) = 24\nreach 24! expression: (2 + (8 + (7 * 2)))"}, {"input": "7 2 8 2\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 2, 8\n(8) + (14) = 22, left: (8 + (7 * 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (8 + (7 * 2))) = 24\nreach 24! expression: (2 + (8 + (7 * 2)))"}, {"input": "7 2 8 2\n", "output": "(7) + (2) = 9, left: (7 + 2) = 9, 8, 2\n(2) * (9) = 18, left: (2 * (7 + 2)) = 18, 8\nroll back, left: (7 + 2) = 9, 8, 2\nroll back, left: 7 2 8 2\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, 8, 2\nroll back, left: 7 2 8 2\n(7) - (2) = 5, left: (7 - 2) = 5, 8, 2\n(5) - (2) = 3, left: ((7 - 2) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 - 2) - 2)) = 24\nreach 24! expression: (8 * ((7 - 2) - 2))"}, {"input": "7 2 8 2\n", "output": "(2) - (7) = -5, left: (2 - 7) = -5, 8, 2\nroll back, left: 7 2 8 2\n(7) + (2) = 9, left: (7 + 2) = 9, 8, 2\n(9) - (2) = 7, left: ((7 + 2) - 2) = 7, 8\nroll back, left: (7 + 2) = 9, 8, 2\nroll back, left: 7 2 8 2\n(7) * (2) = 14, left: (7 * 2) = 14, 8, 2\n(8) + (14) = 22, left: (8 + (7 * 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (8 + (7 * 2))) = 24\nreach 24! expression: (2 + (8 + (7 * 2)))"}, {"input": "7 2 8 2\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 2, 2\nroll back, left: 7 2 8 2\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, 2, 2\nroll back, left: 7 2 8 2\n(7) + (8) = 15, left: (7 + 8) = 15, 2, 2\nroll back, left: 7 2 8 2\n(7) * (2) = 14, left: (7 * 2) = 14, 2, 8\n(2) + (8) = 10, left: (2 + 8) = 10, (7 * 2) = 14\n(14) + (10) = 24, left: ((7 * 2) + (2 + 8)) = 24\nreach 24! expression: ((7 * 2) + (2 + 8))"}, {"input": "7 2 8 2\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 2, 2\n(2) + (-1) = 1, left: (2 + (7 - 8)) = 1, 2\nroll back, left: (7 - 8) = -1, 2, 2\nroll back, left: 7 2 8 2\n(8) / (7) = 8/7, left: (8 / 7) = 8/7, 2, 2\nroll back, left: 7 2 8 2\n(7) * (2) = 14, left: (7 * 2) = 14, 2, 8\n(8) + (14) = 22, left: (8 + (7 * 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (8 + (7 * 2))) = 24\nreach 24! expression: (2 + (8 + (7 * 2)))"}, {"input": "7 2 8 2\n", "output": "(7) * (8) = 56, left: (7 * 8) = 56, 2, 2\nroll back, left: 7 2 8 2\n(8) - (7) = 1, left: (8 - 7) = 1, 2, 2\n(1) / (2) = 1/2, left: ((8 - 7) / 2) = 1/2, 2\nroll back, left: (8 - 7) = 1, 2, 2\nroll back, left: 7 2 8 2\n(7) * (2) = 14, left: (7 * 2) = 14, 8, 2\n(8) + (14) = 22, left: (8 + (7 * 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (8 + (7 * 2))) = 24\nreach 24! expression: (2 + (8 + (7 * 2)))"}, {"input": "10 6 8 3\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (8 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (8 - 6))) = 24\nreach 24! expression: (3 * (10 - (8 - 6)))"}, {"input": "10 6 8 3\n", "output": "(10) + (6) = 16, left: (10 + 6) = 16, 8, 3\n(16) - (8) = 8, left: ((10 + 6) - 8) = 8, 3\n(3) * (8) = 24, left: (3 * ((10 + 6) - 8)) = 24\nreach 24! expression: (3 * ((10 + 6) - 8))"}, {"input": "10 6 8 3\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 6, 3\n(6) - (-2) = 8, left: (6 - (8 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (8 - 10))) = 24\nreach 24! expression: (3 * (6 - (8 - 10)))"}, {"input": "10 6 8 3\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 6, 3\n(6) + (-2) = 4, left: (6 + (8 - 10)) = 4, 3\nroll back, left: (8 - 10) = -2, 6, 3\n(6) / (-2) = -3, left: (6 / (8 - 10)) = -3, 3\n(-3) - (3) = -6, left: ((6 / (8 - 10)) - 3) = -6\nroll back, left: (6 / (8 - 10)) = -3, 3\nroll back, left: (8 - 10) = -2, 6, 3\n(6) - (-2) = 8, left: (6 - (8 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (8 - 10))) = 24\nreach 24! expression: (3 * (6 - (8 - 10)))"}, {"input": "10 6 8 3\n", "output": "(6) / (10) = 3/5, left: (6 / 10) = 3/5, 8, 3\nroll back, left: 10 6 8 3\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, 8, 3\nroll back, left: 10 6 8 3\n(10) - (6) = 4, left: (10 - 6) = 4, 8, 3\nroll back, left: 10 6 8 3\n(10) + (6) = 16, left: (10 + 6) = 16, 8, 3\n(16) - (8) = 8, left: ((10 + 6) - 8) = 8, 3\n(3) * (8) = 24, left: (3 * ((10 + 6) - 8)) = 24\nreach 24! expression: (3 * ((10 + 6) - 8))"}, {"input": "10 6 8 3\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 10, 3\n(2) - (3) = -1, left: ((8 - 6) - 3) = -1, 10\nroll back, left: (8 - 6) = 2, 10, 3\n(3) / (2) = 3/2, left: (3 / (8 - 6)) = 3/2, 10\nroll back, left: (8 - 6) = 2, 10, 3\n(10) + (2) = 12, left: (10 + (8 - 6)) = 12, 3\nroll back, left: (8 - 6) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (8 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (8 - 6))) = 24\nreach 24! expression: (3 * (10 - (8 - 6)))"}, {"input": "10 6 8 3\n", "output": "(3) / (10) = 3/10, left: (3 / 10) = 3/10, 6, 8\nroll back, left: 10 6 8 3\n(10) - (3) = 7, left: (10 - 3) = 7, 6, 8\nroll back, left: 10 6 8 3\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, 8, 3\nroll back, left: 10 6 8 3\n(10) + (6) = 16, left: (10 + 6) = 16, 8, 3\n(16) - (8) = 8, left: ((10 + 6) - 8) = 8, 3\n(3) * (8) = 24, left: (3 * ((10 + 6) - 8)) = 24\nreach 24! expression: (3 * ((10 + 6) - 8))"}, {"input": "10 6 8 3\n", "output": "(3) / (10) = 3/10, left: (3 / 10) = 3/10, 6, 8\nroll back, left: 10 6 8 3\n(8) - (3) = 5, left: (8 - 3) = 5, 10, 6\nroll back, left: 10 6 8 3\n(8) * (3) = 24, left: (8 * 3) = 24, 10, 6\nroll back, left: 10 6 8 3\n(8) - (10) = -2, left: (8 - 10) = -2, 6, 3\n(6) - (-2) = 8, left: (6 - (8 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (8 - 10))) = 24\nreach 24! expression: (3 * (6 - (8 - 10)))"}, {"input": "11 4 10 9\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 4, 10\n(10) * (-2) = -20, left: (10 * (9 - 11)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 * (9 - 11))) = 24\nreach 24! expression: (4 - (10 * (9 - 11)))"}, {"input": "11 4 10 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (11 - 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (11 - 9))) = 24\nreach 24! expression: (4 + (10 * (11 - 9)))"}, {"input": "11 4 10 9\n", "output": "(10) / (11) = 10/11, left: (10 / 11) = 10/11, 4, 9\nroll back, left: 11 4 10 9\n(4) + (9) = 13, left: (4 + 9) = 13, 11, 10\nroll back, left: 11 4 10 9\n(11) * (9) = 99, left: (11 * 9) = 99, 4, 10\nroll back, left: 11 4 10 9\n(9) - (11) = -2, left: (9 - 11) = -2, 4, 10\n(10) * (-2) = -20, left: (10 * (9 - 11)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 * (9 - 11))) = 24\nreach 24! expression: (4 - (10 * (9 - 11)))"}, {"input": "11 4 10 9\n", "output": "(4) + (10) = 14, left: (4 + 10) = 14, 11, 9\nroll back, left: 11 4 10 9\n(10) / (4) = 5/2, left: (10 / 4) = 5/2, 11, 9\nroll back, left: 11 4 10 9\n(11) * (9) = 99, left: (11 * 9) = 99, 4, 10\nroll back, left: 11 4 10 9\n(11) - (9) = 2, left: (11 - 9) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (11 - 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (11 - 9))) = 24\nreach 24! expression: (4 + (10 * (11 - 9)))"}, {"input": "11 4 10 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 4, 10\n(4) + (2) = 6, left: (4 + (11 - 9)) = 6, 10\nroll back, left: (11 - 9) = 2, 4, 10\n(2) - (4) = -2, left: ((11 - 9) - 4) = -2, 10\nroll back, left: (11 - 9) = 2, 4, 10\n(10) - (4) = 6, left: (10 - 4) = 6, (11 - 9) = 2\nroll back, left: (11 - 9) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (11 - 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (11 - 9))) = 24\nreach 24! expression: (4 + (10 * (11 - 9)))"}, {"input": "11 4 10 9\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 11, 9\nroll back, left: 11 4 10 9\n(10) - (4) = 6, left: (10 - 4) = 6, 11, 9\n(6) / (11) = 6/11, left: ((10 - 4) / 11) = 6/11, 9\nroll back, left: (10 - 4) = 6, 11, 9\nroll back, left: 11 4 10 9\n(11) - (9) = 2, left: (11 - 9) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (11 - 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (11 - 9))) = 24\nreach 24! expression: (4 + (10 * (11 - 9)))"}, {"input": "11 4 10 9\n", "output": "(11) + (10) = 21, left: (11 + 10) = 21, 4, 9\nroll back, left: 11 4 10 9\n(11) + (9) = 20, left: (11 + 9) = 20, 4, 10\n(4) * (20) = 80, left: (4 * (11 + 9)) = 80, 10\nroll back, left: (11 + 9) = 20, 4, 10\nroll back, left: 11 4 10 9\n(11) - (9) = 2, left: (11 - 9) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (11 - 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (11 - 9))) = 24\nreach 24! expression: (4 + (10 * (11 - 9)))"}, {"input": "8 8 6 4\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 6, 4\n(1) / (4) = 1/4, left: ((8 / 8) / 4) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((8 / 8) / 4)) = 24\nreach 24! expression: (6 / ((8 / 8) / 4))"}, {"input": "8 8 6 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 8, 6\n(8) + (-4) = 4, left: (8 + (4 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 + (4 - 8))) = 24\nreach 24! expression: (6 * (8 + (4 - 8)))"}, {"input": "8 8 6 4\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 6, 4\n(4) - (0) = 4, left: (4 - (8 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 - (8 - 8))) = 24\nreach 24! expression: (6 * (4 - (8 - 8)))"}, {"input": "8 8 6 4\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (8 / 6) = 4/3\n(32) / (4/3) = 24, left: ((8 * 4) / (8 / 6)) = 24\nreach 24! expression: ((8 * 4) / (8 / 6))"}, {"input": "8 8 6 4\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 6, 4\n(4) - (0) = 4, left: (4 - (8 - 8)) = 4, 6\n(6) - (4) = 2, left: (6 - (4 - (8 - 8))) = 2\nroll back, left: (4 - (8 - 8)) = 4, 6\n(4) - (6) = -2, left: ((4 - (8 - 8)) - 6) = -2\nroll back, left: (4 - (8 - 8)) = 4, 6\n(4) / (6) = 2/3, left: ((4 - (8 - 8)) / 6) = 2/3\nroll back, left: (4 - (8 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 - (8 - 8))) = 24\nreach 24! expression: (6 * (4 - (8 - 8)))"}, {"input": "8 8 6 4\n", "output": "(8) * (8) = 64, left: (8 * 8) = 64, 6, 4\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, (8 * 8) = 64\nroll back, left: (8 * 8) = 64, 6, 4\n(6) + (64) = 70, left: (6 + (8 * 8)) = 70, 4\nroll back, left: (8 * 8) = 64, 6, 4\nroll back, left: 8 8 6 4\n(8) / (8) = 1, left: (8 / 8) = 1, 6, 4\n(1) / (4) = 1/4, left: ((8 / 8) / 4) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((8 / 8) / 4)) = 24\nreach 24! expression: (6 / ((8 / 8) / 4))"}, {"input": "8 8 6 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 8, 6\n(-4) - (8) = -12, left: ((4 - 8) - 8) = -12, 6\nroll back, left: (4 - 8) = -4, 8, 6\n(8) - (-4) = 12, left: (8 - (4 - 8)) = 12, 6\nroll back, left: (4 - 8) = -4, 8, 6\n(8) + (-4) = 4, left: (8 + (4 - 8)) = 4, 6\n(4) - (6) = -2, left: ((8 + (4 - 8)) - 6) = -2\nroll back, left: (8 + (4 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 + (4 - 8))) = 24\nreach 24! expression: (6 * (8 + (4 - 8)))"}, {"input": "8 11 4 13\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 11, 4\n(11) + (-5) = 6, left: (11 + (8 - 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 + (8 - 13))) = 24\nreach 24! expression: (4 * (11 + (8 - 13)))"}, {"input": "8 11 4 13\n", "output": "(8) + (4) = 12, left: (8 + 4) = 12, 11, 13\n(13) - (11) = 2, left: (13 - 11) = 2, (8 + 4) = 12\n(12) * (2) = 24, left: ((8 + 4) * (13 - 11)) = 24\nreach 24! expression: ((8 + 4) * (13 - 11))"}, {"input": "8 11 4 13\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 8, 4\n(8) + (4) = 12, left: (8 + 4) = 12, (13 - 11) = 2\n(2) * (12) = 24, left: ((13 - 11) * (8 + 4)) = 24\nreach 24! expression: ((13 - 11) * (8 + 4))"}, {"input": "8 11 4 13\n", "output": "(8) + (11) = 19, left: (8 + 11) = 19, 4, 13\n(19) - (13) = 6, left: ((8 + 11) - 13) = 6, 4\n(4) * (6) = 24, left: (4 * ((8 + 11) - 13)) = 24\nreach 24! expression: (4 * ((8 + 11) - 13))"}, {"input": "8 11 4 13\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 8, 4\n(8) + (-2) = 6, left: (8 + (11 - 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (8 + (11 - 13))) = 24\nreach 24! expression: (4 * (8 + (11 - 13)))"}, {"input": "8 11 4 13\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 8, 11\nroll back, left: 8 11 4 13\n(4) * (13) = 52, left: (4 * 13) = 52, 8, 11\n(8) / (11) = 8/11, left: (8 / 11) = 8/11, (4 * 13) = 52\nroll back, left: (4 * 13) = 52, 8, 11\nroll back, left: 8 11 4 13\n(8) + (11) = 19, left: (8 + 11) = 19, 4, 13\n(19) - (13) = 6, left: ((8 + 11) - 13) = 6, 4\n(4) * (6) = 24, left: (4 * ((8 + 11) - 13)) = 24\nreach 24! expression: (4 * ((8 + 11) - 13))"}, {"input": "8 11 4 13\n", "output": "(13) / (11) = 13/11, left: (13 / 11) = 13/11, 8, 4\nroll back, left: 8 11 4 13\n(11) + (13) = 24, left: (11 + 13) = 24, 8, 4\nroll back, left: 8 11 4 13\n(11) - (13) = -2, left: (11 - 13) = -2, 8, 4\n(-2) / (4) = -1/2, left: ((11 - 13) / 4) = -1/2, 8\nroll back, left: (11 - 13) = -2, 8, 4\n(8) + (-2) = 6, left: (8 + (11 - 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (8 + (11 - 13))) = 24\nreach 24! expression: (4 * (8 + (11 - 13)))"}, {"input": "1 1 5 5\n", "output": "(1) / (5) = 1/5, left: (1 / 5) = 1/5, 1, 5\n(5) / (1/5) = 25, left: (5 / (1 / 5)) = 25, 1\n(25) - (1) = 24, left: ((5 / (1 / 5)) - 1) = 24\nreach 24! expression: ((5 / (1 / 5)) - 1)"}, {"input": "1 1 5 5\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (1 + 5)) = 24\nreach 24! expression: ((5 - 1) * (1 + 5))"}, {"input": "1 1 5 5\n", "output": "(1) / (1) = 1, left: (1 / 1) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (1 / 1) = 1\n(25) - (1) = 24, left: ((5 * 5) - (1 / 1)) = 24\nreach 24! expression: ((5 * 5) - (1 / 1))"}, {"input": "1 1 5 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 1, 1\n(25) - (1) = 24, left: ((5 * 5) - 1) = 24, 1\n(24) / (1) = 24, left: (((5 * 5) - 1) / 1) = 24\nreach 24! expression: (((5 * 5) - 1) / 1)"}, {"input": "1 1 5 5\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 1, 1\n(1) - (0) = 1, left: (1 - (5 - 5)) = 1, 1\n(1) * (1) = 1, left: (1 * (1 - (5 - 5))) = 1\nroll back, left: (1 - (5 - 5)) = 1, 1\nroll back, left: (5 - 5) = 0, 1, 1\nroll back, left: 1 1 5 5\n(5) * (5) = 25, left: (5 * 5) = 25, 1, 1\n(25) - (1) = 24, left: ((5 * 5) - 1) = 24, 1\n(24) / (1) = 24, left: (((5 * 5) - 1) / 1) = 24\nreach 24! expression: (((5 * 5) - 1) / 1)"}, {"input": "1 1 5 5\n", "output": "(1) / (1) = 1, left: (1 / 1) = 1, 5, 5\n(5) / (1) = 5, left: (5 / (1 / 1)) = 5, 5\nroll back, left: (1 / 1) = 1, 5, 5\n(1) / (5) = 1/5, left: ((1 / 1) / 5) = 1/5, 5\nroll back, left: (1 / 1) = 1, 5, 5\n(5) + (5) = 10, left: (5 + 5) = 10, (1 / 1) = 1\nroll back, left: (1 / 1) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (1 / 1) = 1\n(25) - (1) = 24, left: ((5 * 5) - (1 / 1)) = 24\nreach 24! expression: ((5 * 5) - (1 / 1))"}, {"input": "1 1 5 5\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 1, 5\n(-4) / (5) = -4/5, left: ((1 - 5) / 5) = -4/5, 1\nroll back, left: (1 - 5) = -4, 1, 5\n(1) / (-4) = -1/4, left: (1 / (1 - 5)) = -1/4, 5\nroll back, left: (1 - 5) = -4, 1, 5\nroll back, left: 1 1 5 5\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, 1, 5\n(5) / (1/5) = 25, left: (5 / (1 / 5)) = 25, 1\n(25) - (1) = 24, left: ((5 / (1 / 5)) - 1) = 24\nreach 24! expression: ((5 / (1 / 5)) - 1)"}, {"input": "1 1 5 5\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 1, 5\n(1) + (4) = 5, left: (1 + (5 - 1)) = 5, 5\n(5) / (5) = 1, left: ((1 + (5 - 1)) / 5) = 1\nroll back, left: (1 + (5 - 1)) = 5, 5\nroll back, left: (5 - 1) = 4, 1, 5\n(1) - (5) = -4, left: (1 - 5) = -4, (5 - 1) = 4\nroll back, left: (5 - 1) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (1 + 5)) = 24\nreach 24! expression: ((5 - 1) * (1 + 5))"}, {"input": "1 1 5 5\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 1, 5\n(5) / (-4) = -5/4, left: (5 / (1 - 5)) = -5/4, 1\nroll back, left: (1 - 5) = -4, 1, 5\n(5) / (1) = 5, left: (5 / 1) = 5, (1 - 5) = -4\nroll back, left: (1 - 5) = -4, 1, 5\nroll back, left: 1 1 5 5\n(5) - (1) = 4, left: (5 - 1) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (1 + 5)) = 24\nreach 24! expression: ((5 - 1) * (1 + 5))"}, {"input": "10 8 10 4\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 8, 4\n(8) - (4) = 4, left: (8 - 4) = 4, (10 + 10) = 20\n(20) + (4) = 24, left: ((10 + 10) + (8 - 4)) = 24\nreach 24! expression: ((10 + 10) + (8 - 4))"}, {"input": "10 8 10 4\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 10, 8\n(-6) - (10) = -16, left: ((4 - 10) - 10) = -16, 8\n(8) - (-16) = 24, left: (8 - ((4 - 10) - 10)) = 24\nreach 24! expression: (8 - ((4 - 10) - 10))"}, {"input": "10 8 10 4\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 10, 8\n(8) + (6) = 14, left: (8 + (10 - 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (8 + (10 - 4))) = 24\nreach 24! expression: (10 + (8 + (10 - 4)))"}, {"input": "10 8 10 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 10, 10\n(10) + (10) = 20, left: (10 + 10) = 20, (4 - 8) = -4\n(20) - (-4) = 24, left: ((10 + 10) - (4 - 8)) = 24\nreach 24! expression: ((10 + 10) - (4 - 8))"}, {"input": "10 8 10 4\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 10, 10\n(10) + (4) = 14, left: (10 + (8 - 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 + (8 - 4))) = 24\nreach 24! expression: (10 + (10 + (8 - 4)))"}, {"input": "10 8 10 4\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 10, 8\n(8) - (6) = 2, left: (8 - (10 - 4)) = 2, 10\n(2) - (10) = -8, left: ((8 - (10 - 4)) - 10) = -8\nroll back, left: (8 - (10 - 4)) = 2, 10\nroll back, left: (10 - 4) = 6, 10, 8\n(6) - (8) = -2, left: ((10 - 4) - 8) = -2, 10\nroll back, left: (10 - 4) = 6, 10, 8\n(8) + (6) = 14, left: (8 + (10 - 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (8 + (10 - 4))) = 24\nreach 24! expression: (10 + (8 + (10 - 4)))"}, {"input": "12 1 8 9\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (9 / 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (9 / 1))) = 24\nreach 24! expression: (8 * (12 - (9 / 1)))"}, {"input": "12 1 8 9\n", "output": "(12) * (1) = 12, left: (12 * 1) = 12, 8, 9\n(12) - (9) = 3, left: ((12 * 1) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 * 1) - 9)) = 24\nreach 24! expression: (8 * ((12 * 1) - 9))"}, {"input": "12 1 8 9\n", "output": "(1) * (8) = 8, left: (1 * 8) = 8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (1 * 8) = 8\n(8) * (3) = 24, left: ((1 * 8) * (12 - 9)) = 24\nreach 24! expression: ((1 * 8) * (12 - 9))"}, {"input": "12 1 8 9\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (1 / 8) = 1/8\n(3) / (1/8) = 24, left: ((12 - 9) / (1 / 8)) = 24\nreach 24! expression: ((12 - 9) / (1 / 8))"}, {"input": "12 1 8 9\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 1, 8\n(4/3) - (1) = 1/3, left: ((12 / 9) - 1) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((12 / 9) - 1)) = 24\nreach 24! expression: (8 / ((12 / 9) - 1))"}, {"input": "12 1 8 9\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 1, 9\n(1) * (9) = 9, left: (1 * 9) = 9, (8 - 12) = -4\n(-4) * (9) = -36, left: ((8 - 12) * (1 * 9)) = -36\nroll back, left: (1 * 9) = 9, (8 - 12) = -4\nroll back, left: (8 - 12) = -4, 1, 9\nroll back, left: 12 1 8 9\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (1 / 8) = 1/8\n(3) / (1/8) = 24, left: ((12 - 9) / (1 / 8)) = 24\nreach 24! expression: ((12 - 9) / (1 / 8))"}, {"input": "12 1 8 9\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 12, 8\n(12) * (8) = 96, left: (12 * 8) = 96, (9 / 1) = 9\nroll back, left: (9 / 1) = 9, 12, 8\n(12) - (8) = 4, left: (12 - 8) = 4, (9 / 1) = 9\nroll back, left: (9 / 1) = 9, 12, 8\n(8) / (9) = 8/9, left: (8 / (9 / 1)) = 8/9, 12\nroll back, left: (9 / 1) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (9 / 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (9 / 1))) = 24\nreach 24! expression: (8 * (12 - (9 / 1)))"}, {"input": "12 1 8 9\n", "output": "(1) / (12) = 1/12, left: (1 / 12) = 1/12, 8, 9\nroll back, left: 12 1 8 9\n(12) - (1) = 11, left: (12 - 1) = 11, 8, 9\n(9) / (11) = 9/11, left: (9 / (12 - 1)) = 9/11, 8\nroll back, left: (12 - 1) = 11, 8, 9\nroll back, left: 12 1 8 9\n(12) * (1) = 12, left: (12 * 1) = 12, 8, 9\n(12) - (9) = 3, left: ((12 * 1) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 * 1) - 9)) = 24\nreach 24! expression: (8 * ((12 * 1) - 9))"}, {"input": "12 1 8 9\n", "output": "(1) * (8) = 8, left: (1 * 8) = 8, 12, 9\n(9) * (8) = 72, left: (9 * (1 * 8)) = 72, 12\nroll back, left: (1 * 8) = 8, 12, 9\n(12) * (8) = 96, left: (12 * (1 * 8)) = 96, 9\nroll back, left: (1 * 8) = 8, 12, 9\n(8) - (12) = -4, left: ((1 * 8) - 12) = -4, 9\nroll back, left: (1 * 8) = 8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (1 * 8) = 8\n(8) * (3) = 24, left: ((1 * 8) * (12 - 9)) = 24\nreach 24! expression: ((1 * 8) * (12 - 9))"}, {"input": "5 13 3 12\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 13, 12\n(15) - (13) = 2, left: ((5 * 3) - 13) = 2, 12\n(12) * (2) = 24, left: (12 * ((5 * 3) - 13)) = 24\nreach 24! expression: (12 * ((5 * 3) - 13))"}, {"input": "5 13 3 12\n", "output": "(13) - (3) = 10, left: (13 - 3) = 10, 5, 12\n(10) / (5) = 2, left: ((13 - 3) / 5) = 2, 12\n(12) * (2) = 24, left: (12 * ((13 - 3) / 5)) = 24\nreach 24! expression: (12 * ((13 - 3) / 5))"}, {"input": "5 13 3 12\n", "output": "(12) / (5) = 12/5, left: (12 / 5) = 12/5, 13, 3\n(13) - (3) = 10, left: (13 - 3) = 10, (12 / 5) = 12/5\n(12/5) * (10) = 24, left: ((12 / 5) * (13 - 3)) = 24\nreach 24! expression: ((12 / 5) * (13 - 3))"}, {"input": "5 13 3 12\n", "output": "(5) / (3) = 5/3, left: (5 / 3) = 5/3, 13, 12\n(5/3) - (12) = -31/3, left: ((5 / 3) - 12) = -31/3, 13\nroll back, left: (5 / 3) = 5/3, 13, 12\nroll back, left: 5 13 3 12\n(5) + (3) = 8, left: (5 + 3) = 8, 13, 12\nroll back, left: 5 13 3 12\n(5) * (3) = 15, left: (5 * 3) = 15, 13, 12\n(15) - (13) = 2, left: ((5 * 3) - 13) = 2, 12\n(12) * (2) = 24, left: (12 * ((5 * 3) - 13)) = 24\nreach 24! expression: (12 * ((5 * 3) - 13))"}, {"input": "5 13 3 12\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 13, 12\nroll back, left: 5 13 3 12\n(5) - (3) = 2, left: (5 - 3) = 2, 13, 12\n(12) - (2) = 10, left: (12 - (5 - 3)) = 10, 13\nroll back, left: (5 - 3) = 2, 13, 12\nroll back, left: 5 13 3 12\n(5) * (3) = 15, left: (5 * 3) = 15, 13, 12\n(15) - (13) = 2, left: ((5 * 3) - 13) = 2, 12\n(12) * (2) = 24, left: (12 * ((5 * 3) - 13)) = 24\nreach 24! expression: (12 * ((5 * 3) - 13))"}, {"input": "5 13 3 12\n", "output": "(3) / (5) = 3/5, left: (3 / 5) = 3/5, 13, 12\nroll back, left: 5 13 3 12\n(5) - (3) = 2, left: (5 - 3) = 2, 13, 12\nroll back, left: 5 13 3 12\n(5) + (3) = 8, left: (5 + 3) = 8, 13, 12\nroll back, left: 5 13 3 12\n(5) * (3) = 15, left: (5 * 3) = 15, 13, 12\n(15) - (13) = 2, left: ((5 * 3) - 13) = 2, 12\n(12) * (2) = 24, left: (12 * ((5 * 3) - 13)) = 24\nreach 24! expression: (12 * ((5 * 3) - 13))"}, {"input": "4 11 8 1\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 8, 1\n(8) + (1) = 9, left: (8 + 1) = 9, (4 + 11) = 15\n(15) + (9) = 24, left: ((4 + 11) + (8 + 1)) = 24\nreach 24! expression: ((4 + 11) + (8 + 1))"}, {"input": "4 11 8 1\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 8, 1\n(8) + (15) = 23, left: (8 + (4 + 11)) = 23, 1\n(1) + (23) = 24, left: (1 + (8 + (4 + 11))) = 24\nreach 24! expression: (1 + (8 + (4 + 11)))"}, {"input": "4 11 8 1\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 4, 8\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, (11 + 1) = 12\n(12) / (1/2) = 24, left: ((11 + 1) / (4 / 8)) = 24\nreach 24! expression: ((11 + 1) / (4 / 8))"}, {"input": "4 11 8 1\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 8, 1\n(1) + (15) = 16, left: (1 + (4 + 11)) = 16, 8\n(8) + (16) = 24, left: (8 + (1 + (4 + 11))) = 24\nreach 24! expression: (8 + (1 + (4 + 11)))"}, {"input": "4 11 8 1\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 11, 8\n(11) + (8) = 19, left: (11 + 8) = 19, (4 + 1) = 5\n(5) + (19) = 24, left: ((4 + 1) + (11 + 8)) = 24\nreach 24! expression: ((4 + 1) + (11 + 8))"}, {"input": "4 11 8 1\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 11, 8\n(11) - (-3) = 14, left: (11 - (1 - 4)) = 14, 8\nroll back, left: (1 - 4) = -3, 11, 8\nroll back, left: 4 11 8 1\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 11, 8\nroll back, left: 4 11 8 1\n(4) + (1) = 5, left: (4 + 1) = 5, 11, 8\n(11) + (8) = 19, left: (11 + 8) = 19, (4 + 1) = 5\n(5) + (19) = 24, left: ((4 + 1) + (11 + 8)) = 24\nreach 24! expression: ((4 + 1) + (11 + 8))"}, {"input": "4 11 8 1\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 8, 1\n(1) + (-7) = -6, left: (1 + (4 - 11)) = -6, 8\nroll back, left: (4 - 11) = -7, 8, 1\nroll back, left: 4 11 8 1\n(11) - (4) = 7, left: (11 - 4) = 7, 8, 1\nroll back, left: 4 11 8 1\n(4) + (11) = 15, left: (4 + 11) = 15, 8, 1\n(1) + (15) = 16, left: (1 + (4 + 11)) = 16, 8\n(8) + (16) = 24, left: (8 + (1 + (4 + 11))) = 24\nreach 24! expression: (8 + (1 + (4 + 11)))"}, {"input": "1 12 12 10\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 1, 12\n(12) * (2) = 24, left: (12 * (12 - 10)) = 24, 1\n(1) * (24) = 24, left: (1 * (12 * (12 - 10))) = 24\nreach 24! expression: (1 * (12 * (12 - 10)))"}, {"input": "1 12 12 10\n", "output": "(1) * (10) = 10, left: (1 * 10) = 10, 12, 12\n(12) - (10) = 2, left: (12 - (1 * 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 - (1 * 10))) = 24\nreach 24! expression: (12 * (12 - (1 * 10)))"}, {"input": "1 12 12 10\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 12, 10\n(12) - (10) = 2, left: ((12 / 1) - 10) = 2, 12\n(12) * (2) = 24, left: (12 * ((12 / 1) - 10)) = 24\nreach 24! expression: (12 * ((12 / 1) - 10))"}, {"input": "1 12 12 10\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 1, 12\n(1) * (2) = 2, left: (1 * (12 - 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (12 - 10))) = 24\nreach 24! expression: (12 * (1 * (12 - 10)))"}, {"input": "1 12 12 10\n", "output": "(12) / (12) = 1, left: (12 / 12) = 1, 1, 10\nroll back, left: 1 12 12 10\n(12) - (12) = 0, left: (12 - 12) = 0, 1, 10\n(0) / (1) = 0, left: ((12 - 12) / 1) = 0, 10\nroll back, left: (12 - 12) = 0, 1, 10\nroll back, left: 1 12 12 10\n(12) - (10) = 2, left: (12 - 10) = 2, 1, 12\n(1) * (2) = 2, left: (1 * (12 - 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (12 - 10))) = 24\nreach 24! expression: (12 * (1 * (12 - 10)))"}, {"input": "3 9 11 7\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 9, 11\n(11) + (4) = 15, left: (11 + (7 - 3)) = 15, 9\n(9) + (15) = 24, left: (9 + (11 + (7 - 3))) = 24\nreach 24! expression: (9 + (11 + (7 - 3)))"}, {"input": "3 9 11 7\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 9, 11\n(9) + (11) = 20, left: (9 + 11) = 20, (7 - 3) = 4\n(4) + (20) = 24, left: ((7 - 3) + (9 + 11)) = 24\nreach 24! expression: ((7 - 3) + (9 + 11))"}, {"input": "3 9 11 7\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 3, 9\n(3) - (9) = -6, left: (3 - 9) = -6, (7 - 11) = -4\n(-4) * (-6) = 24, left: ((7 - 11) * (3 - 9)) = 24\nreach 24! expression: ((7 - 11) * (3 - 9))"}, {"input": "3 9 11 7\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 11, 7\n(-6) - (7) = -13, left: ((3 - 9) - 7) = -13, 11\n(11) - (-13) = 24, left: (11 - ((3 - 9) - 7)) = 24\nreach 24! expression: (11 - ((3 - 9) - 7))"}, {"input": "3 9 11 7\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 11, 7\n(11) * (3) = 33, left: (11 * (9 / 3)) = 33, 7\nroll back, left: (9 / 3) = 3, 11, 7\n(7) + (3) = 10, left: (7 + (9 / 3)) = 10, 11\nroll back, left: (9 / 3) = 3, 11, 7\nroll back, left: 3 9 11 7\n(3) - (9) = -6, left: (3 - 9) = -6, 11, 7\n(-6) - (7) = -13, left: ((3 - 9) - 7) = -13, 11\n(11) - (-13) = 24, left: (11 - ((3 - 9) - 7)) = 24\nreach 24! expression: (11 - ((3 - 9) - 7))"}, {"input": "3 9 11 7\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 9, 11\n(11) + (3/7) = 80/7, left: (11 + (3 / 7)) = 80/7, 9\nroll back, left: (3 / 7) = 3/7, 9, 11\nroll back, left: 3 9 11 7\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 9, 11\nroll back, left: 3 9 11 7\n(7) - (3) = 4, left: (7 - 3) = 4, 9, 11\n(9) + (11) = 20, left: (9 + 11) = 20, (7 - 3) = 4\n(4) + (20) = 24, left: ((7 - 3) + (9 + 11)) = 24\nreach 24! expression: ((7 - 3) + (9 + 11))"}, {"input": "3 9 11 7\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 9, 11\n(11) * (4) = 44, left: (11 * (7 - 3)) = 44, 9\nroll back, left: (7 - 3) = 4, 9, 11\n(11) - (4) = 7, left: (11 - (7 - 3)) = 7, 9\nroll back, left: (7 - 3) = 4, 9, 11\n(4) / (11) = 4/11, left: ((7 - 3) / 11) = 4/11, 9\nroll back, left: (7 - 3) = 4, 9, 11\n(11) + (4) = 15, left: (11 + (7 - 3)) = 15, 9\n(9) + (15) = 24, left: (9 + (11 + (7 - 3))) = 24\nreach 24! expression: (9 + (11 + (7 - 3)))"}, {"input": "9 8 1 4\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 9, 8\n(9) / (3) = 3, left: (9 / (4 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 / (4 - 1))) = 24\nreach 24! expression: (8 * (9 / (4 - 1)))"}, {"input": "9 8 1 4\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (1 - 9) = -8\n(-8) + (32) = 24, left: ((1 - 9) + (8 * 4)) = 24\nreach 24! expression: ((1 - 9) + (8 * 4))"}, {"input": "9 8 1 4\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (4 - 1) = 3\n(72) / (3) = 24, left: ((9 * 8) / (4 - 1)) = 24\nreach 24! expression: ((9 * 8) / (4 - 1))"}, {"input": "9 8 1 4\n", "output": "(9) * (8) = 72, left: (9 * 8) = 72, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (9 * 8) = 72\n(72) / (3) = 24, left: ((9 * 8) / (4 - 1)) = 24\nreach 24! expression: ((9 * 8) / (4 - 1))"}, {"input": "9 8 1 4\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 9, 8\n(8) / (4) = 2, left: (8 / (1 * 4)) = 2, 9\nroll back, left: (1 * 4) = 4, 9, 8\nroll back, left: 9 8 1 4\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 9, 8\nroll back, left: 9 8 1 4\n(4) - (1) = 3, left: (4 - 1) = 3, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (4 - 1) = 3\n(72) / (3) = 24, left: ((9 * 8) / (4 - 1)) = 24\nreach 24! expression: ((9 * 8) / (4 - 1))"}, {"input": "9 8 1 4\n", "output": "(8) * (1) = 8, left: (8 * 1) = 8, 9, 4\nroll back, left: 9 8 1 4\n(8) + (1) = 9, left: (8 + 1) = 9, 9, 4\n(9) / (9) = 1, left: (9 / (8 + 1)) = 1, 4\nroll back, left: (8 + 1) = 9, 9, 4\nroll back, left: 9 8 1 4\n(9) * (8) = 72, left: (9 * 8) = 72, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (9 * 8) = 72\n(72) / (3) = 24, left: ((9 * 8) / (4 - 1)) = 24\nreach 24! expression: ((9 * 8) / (4 - 1))"}, {"input": "9 8 1 4\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 9, 8\nroll back, left: 9 8 1 4\n(1) * (4) = 4, left: (1 * 4) = 4, 9, 8\n(9) + (8) = 17, left: (9 + 8) = 17, (1 * 4) = 4\nroll back, left: (1 * 4) = 4, 9, 8\nroll back, left: 9 8 1 4\n(4) - (1) = 3, left: (4 - 1) = 3, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (4 - 1) = 3\n(72) / (3) = 24, left: ((9 * 8) / (4 - 1)) = 24\nreach 24! expression: ((9 * 8) / (4 - 1))"}, {"input": "9 8 1 4\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 8, 1\nroll back, left: 9 8 1 4\n(9) / (4) = 9/4, left: (9 / 4) = 9/4, 8, 1\nroll back, left: 9 8 1 4\n(4) / (9) = 4/9, left: (4 / 9) = 4/9, 8, 1\nroll back, left: 9 8 1 4\n(1) - (9) = -8, left: (1 - 9) = -8, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (1 - 9) = -8\n(-8) + (32) = 24, left: ((1 - 9) + (8 * 4)) = 24\nreach 24! expression: ((1 - 9) + (8 * 4))"}, {"input": "9 8 1 4\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 9, 8\n(9) / (3) = 3, left: (9 / (4 - 1)) = 3, 8\n(8) / (3) = 8/3, left: (8 / (9 / (4 - 1))) = 8/3\nroll back, left: (9 / (4 - 1)) = 3, 8\n(8) + (3) = 11, left: (8 + (9 / (4 - 1))) = 11\nroll back, left: (9 / (4 - 1)) = 3, 8\n(8) - (3) = 5, left: (8 - (9 / (4 - 1))) = 5\nroll back, left: (9 / (4 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 / (4 - 1))) = 24\nreach 24! expression: (8 * (9 / (4 - 1)))"}, {"input": "4 6 6 1\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (1 - 4)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (1 - 4))) = 24\nreach 24! expression: (6 - (6 * (1 - 4)))"}, {"input": "4 6 6 1\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (4 + 1)) = 30, 6\n(30) - (6) = 24, left: ((6 * (4 + 1)) - 6) = 24\nreach 24! expression: ((6 * (4 + 1)) - 6)"}, {"input": "4 6 6 1\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (4 - 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (4 - 1))) = 24\nreach 24! expression: (6 + (6 * (4 - 1)))"}, {"input": "4 6 6 1\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 6, 6\n(4) / (6) = 2/3, left: ((4 / 1) / 6) = 2/3, 6\n(6) / (2/3) = 9, left: (6 / ((4 / 1) / 6)) = 9\nroll back, left: ((4 / 1) / 6) = 2/3, 6\nroll back, left: (4 / 1) = 4, 6, 6\nroll back, left: 4 6 6 1\n(4) - (1) = 3, left: (4 - 1) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (4 - 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (4 - 1))) = 24\nreach 24! expression: (6 + (6 * (4 - 1)))"}, {"input": "4 6 6 1\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 6, 6\n(6) * (1/4) = 3/2, left: (6 * (1 / 4)) = 3/2, 6\nroll back, left: (1 / 4) = 1/4, 6, 6\n(6) - (1/4) = 23/4, left: (6 - (1 / 4)) = 23/4, 6\nroll back, left: (1 / 4) = 1/4, 6, 6\nroll back, left: 4 6 6 1\n(4) - (1) = 3, left: (4 - 1) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (4 - 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (4 - 1))) = 24\nreach 24! expression: (6 + (6 * (4 - 1)))"}, {"input": "4 6 6 1\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 4, 1\nroll back, left: 4 6 6 1\n(1) - (6) = -5, left: (1 - 6) = -5, 4, 6\nroll back, left: 4 6 6 1\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, 4, 6\nroll back, left: 4 6 6 1\n(1) - (4) = -3, left: (1 - 4) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (1 - 4)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (1 - 4))) = 24\nreach 24! expression: (6 - (6 * (1 - 4)))"}, {"input": "4 6 6 1\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 4, 6\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, (1 - 6) = -5\nroll back, left: (1 - 6) = -5, 4, 6\nroll back, left: 4 6 6 1\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, 4, 6\nroll back, left: 4 6 6 1\n(4) + (1) = 5, left: (4 + 1) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (4 + 1)) = 30, 6\n(30) - (6) = 24, left: ((6 * (4 + 1)) - 6) = 24\nreach 24! expression: ((6 * (4 + 1)) - 6)"}, {"input": "4 6 6 1\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 6, 6\n(6) * (4) = 24, left: (6 * (4 / 1)) = 24, 6\nroll back, left: (4 / 1) = 4, 6, 6\nroll back, left: 4 6 6 1\n(4) + (1) = 5, left: (4 + 1) = 5, 6, 6\n(6) + (6) = 12, left: (6 + 6) = 12, (4 + 1) = 5\nroll back, left: (4 + 1) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (4 + 1)) = 30, 6\n(30) - (6) = 24, left: ((6 * (4 + 1)) - 6) = 24\nreach 24! expression: ((6 * (4 + 1)) - 6)"}, {"input": "6 4 10 4\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 6, 10\n(10) + (8) = 18, left: (10 + (4 + 4)) = 18, 6\n(6) + (18) = 24, left: (6 + (10 + (4 + 4))) = 24\nreach 24! expression: (6 + (10 + (4 + 4)))"}, {"input": "6 4 10 4\n", "output": "(6) + (4) = 10, left: (6 + 4) = 10, 10, 4\n(10) + (10) = 20, left: (10 + (6 + 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 + (6 + 4))) = 24\nreach 24! expression: (4 + (10 + (6 + 4)))"}, {"input": "6 4 10 4\n", "output": "(4) + (10) = 14, left: (4 + 10) = 14, 6, 4\n(6) + (14) = 20, left: (6 + (4 + 10)) = 20, 4\n(4) + (20) = 24, left: (4 + (6 + (4 + 10))) = 24\nreach 24! expression: (4 + (6 + (4 + 10)))"}, {"input": "6 4 10 4\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 6, 4\n(6) / (6) = 1, left: (6 / (10 - 4)) = 1, 4\nroll back, left: (10 - 4) = 6, 6, 4\nroll back, left: 6 4 10 4\n(4) / (10) = 2/5, left: (4 / 10) = 2/5, 6, 4\nroll back, left: 6 4 10 4\n(4) + (10) = 14, left: (4 + 10) = 14, 6, 4\n(6) + (14) = 20, left: (6 + (4 + 10)) = 20, 4\n(4) + (20) = 24, left: (4 + (6 + (4 + 10))) = 24\nreach 24! expression: (4 + (6 + (4 + 10)))"}, {"input": "6 4 10 4\n", "output": "(10) / (4) = 5/2, left: (10 / 4) = 5/2, 6, 4\n(4) - (6) = -2, left: (4 - 6) = -2, (10 / 4) = 5/2\nroll back, left: (10 / 4) = 5/2, 6, 4\nroll back, left: 6 4 10 4\n(4) - (10) = -6, left: (4 - 10) = -6, 6, 4\nroll back, left: 6 4 10 4\n(4) + (10) = 14, left: (4 + 10) = 14, 6, 4\n(6) + (14) = 20, left: (6 + (4 + 10)) = 20, 4\n(4) + (20) = 24, left: (4 + (6 + (4 + 10))) = 24\nreach 24! expression: (4 + (6 + (4 + 10)))"}, {"input": "6 4 10 4\n", "output": "(4) / (10) = 2/5, left: (4 / 10) = 2/5, 6, 4\nroll back, left: 6 4 10 4\n(10) - (4) = 6, left: (10 - 4) = 6, 6, 4\n(6) / (6) = 1, left: ((10 - 4) / 6) = 1, 4\nroll back, left: (10 - 4) = 6, 6, 4\nroll back, left: 6 4 10 4\n(4) + (10) = 14, left: (4 + 10) = 14, 6, 4\n(6) + (14) = 20, left: (6 + (4 + 10)) = 20, 4\n(4) + (20) = 24, left: (4 + (6 + (4 + 10))) = 24\nreach 24! expression: (4 + (6 + (4 + 10)))"}, {"input": "6 4 10 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 6, 10\n(10) - (6) = 4, left: (10 - 6) = 4, (4 / 4) = 1\nroll back, left: (4 / 4) = 1, 6, 10\nroll back, left: 6 4 10 4\n(4) - (4) = 0, left: (4 - 4) = 0, 6, 10\nroll back, left: 6 4 10 4\n(4) + (4) = 8, left: (4 + 4) = 8, 6, 10\n(10) + (8) = 18, left: (10 + (4 + 4)) = 18, 6\n(6) + (18) = 24, left: (6 + (10 + (4 + 4))) = 24\nreach 24! expression: (6 + (10 + (4 + 4)))"}, {"input": "6 4 10 4\n", "output": "(6) + (4) = 10, left: (6 + 4) = 10, 10, 4\n(10) - (10) = 0, left: (10 - (6 + 4)) = 0, 4\n(4) + (0) = 4, left: (4 + (10 - (6 + 4))) = 4\nroll back, left: (10 - (6 + 4)) = 0, 4\nroll back, left: (6 + 4) = 10, 10, 4\n(10) + (10) = 20, left: (10 + (6 + 4)) = 20, 4\n(20) - (4) = 16, left: ((10 + (6 + 4)) - 4) = 16\nroll back, left: (10 + (6 + 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 + (6 + 4))) = 24\nreach 24! expression: (4 + (10 + (6 + 4)))"}, {"input": "1 4 2 6\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (4 - 1) = 3\n(3) * (8) = 24, left: ((4 - 1) * (2 + 6)) = 24\nreach 24! expression: ((4 - 1) * (2 + 6))"}, {"input": "1 4 2 6\n", "output": "(2) + (6) = 8, left: (2 + 6) = 8, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (2 + 6) = 8\n(8) * (3) = 24, left: ((2 + 6) * (4 - 1)) = 24\nreach 24! expression: ((2 + 6) * (4 - 1))"}, {"input": "1 4 2 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 1, 2\n(2) - (1) = 1, left: (2 - 1) = 1, (4 * 6) = 24\n(24) * (1) = 24, left: ((4 * 6) * (2 - 1)) = 24\nreach 24! expression: ((4 * 6) * (2 - 1))"}, {"input": "1 4 2 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 1, 2\n(24) / (2) = 12, left: ((4 * 6) / 2) = 12, 1\nroll back, left: (4 * 6) = 24, 1, 2\n(2) + (24) = 26, left: (2 + (4 * 6)) = 26, 1\nroll back, left: (4 * 6) = 24, 1, 2\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, (4 * 6) = 24\nroll back, left: (4 * 6) = 24, 1, 2\n(2) - (1) = 1, left: (2 - 1) = 1, (4 * 6) = 24\n(24) * (1) = 24, left: ((4 * 6) * (2 - 1)) = 24\nreach 24! expression: ((4 * 6) * (2 - 1))"}, {"input": "1 4 2 6\n", "output": "(2) + (6) = 8, left: (2 + 6) = 8, 1, 4\n(1) + (4) = 5, left: (1 + 4) = 5, (2 + 6) = 8\nroll back, left: (2 + 6) = 8, 1, 4\n(1) * (4) = 4, left: (1 * 4) = 4, (2 + 6) = 8\nroll back, left: (2 + 6) = 8, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (2 + 6) = 8\n(8) + (3) = 11, left: ((2 + 6) + (4 - 1)) = 11\nroll back, left: (4 - 1) = 3, (2 + 6) = 8\n(8) * (3) = 24, left: ((2 + 6) * (4 - 1)) = 24\nreach 24! expression: ((2 + 6) * (4 - 1))"}, {"input": "1 4 2 6\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 2, 6\nroll back, left: 1 4 2 6\n(1) + (4) = 5, left: (1 + 4) = 5, 2, 6\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, (1 + 4) = 5\nroll back, left: (1 + 4) = 5, 2, 6\nroll back, left: 1 4 2 6\n(4) - (1) = 3, left: (4 - 1) = 3, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (4 - 1) = 3\n(3) * (8) = 24, left: ((4 - 1) * (2 + 6)) = 24\nreach 24! expression: ((4 - 1) * (2 + 6))"}, {"input": "1 4 2 6\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 1, 6\n(1) + (6) = 7, left: (1 + 6) = 7, (4 * 2) = 8\nroll back, left: (4 * 2) = 8, 1, 6\nroll back, left: 1 4 2 6\n(4) - (2) = 2, left: (4 - 2) = 2, 1, 6\nroll back, left: 1 4 2 6\n(2) + (6) = 8, left: (2 + 6) = 8, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (2 + 6) = 8\n(8) * (3) = 24, left: ((2 + 6) * (4 - 1)) = 24\nreach 24! expression: ((2 + 6) * (4 - 1))"}, {"input": "1 4 2 6\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 2, 6\nroll back, left: 1 4 2 6\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 2, 6\nroll back, left: 1 4 2 6\n(1) + (4) = 5, left: (1 + 4) = 5, 2, 6\nroll back, left: 1 4 2 6\n(4) - (1) = 3, left: (4 - 1) = 3, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (4 - 1) = 3\n(3) * (8) = 24, left: ((4 - 1) * (2 + 6)) = 24\nreach 24! expression: ((4 - 1) * (2 + 6))"}, {"input": "2 4 2 3\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (2 * 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (2 * 2))) = 24\nreach 24! expression: (3 * (4 + (2 * 2)))"}, {"input": "2 4 2 3\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 2, 3\n(2) + (6) = 8, left: (2 + (4 + 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (4 + 2))) = 24\nreach 24! expression: (3 * (2 + (4 + 2)))"}, {"input": "2 4 2 3\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 2, 3\n(2) + (6) = 8, left: (2 + (2 + 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (2 + 4))) = 24\nreach 24! expression: (3 * (2 + (2 + 4)))"}, {"input": "2 4 2 3\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (2 + 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (2 + 2))) = 24\nreach 24! expression: (3 * (4 + (2 + 2)))"}, {"input": "2 4 2 3\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 4, 3\nroll back, left: 2 4 2 3\n(2) / (2) = 1, left: (2 / 2) = 1, 4, 3\nroll back, left: 2 4 2 3\n(2) - (2) = 0, left: (2 - 2) = 0, 4, 3\nroll back, left: 2 4 2 3\n(2) + (2) = 4, left: (2 + 2) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (2 + 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (2 + 2))) = 24\nreach 24! expression: (3 * (4 + (2 + 2)))"}, {"input": "2 4 2 3\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 2, 2\nroll back, left: 2 4 2 3\n(3) - (4) = -1, left: (3 - 4) = -1, 2, 2\nroll back, left: 2 4 2 3\n(3) - (2) = 1, left: (3 - 2) = 1, 4, 2\nroll back, left: 2 4 2 3\n(2) + (4) = 6, left: (2 + 4) = 6, 2, 3\n(2) + (6) = 8, left: (2 + (2 + 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (2 + 4))) = 24\nreach 24! expression: (3 * (2 + (2 + 4)))"}, {"input": "2 4 2 3\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 2, 3\n(2) / (2) = 1, left: ((4 - 2) / 2) = 1, 3\nroll back, left: (4 - 2) = 2, 2, 3\nroll back, left: 2 4 2 3\n(4) / (2) = 2, left: (4 / 2) = 2, 2, 3\nroll back, left: 2 4 2 3\n(4) + (2) = 6, left: (4 + 2) = 6, 2, 3\n(2) + (6) = 8, left: (2 + (4 + 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (4 + 2))) = 24\nreach 24! expression: (3 * (2 + (4 + 2)))"}, {"input": "2 4 2 3\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 4, 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, (2 - 2) = 0\nroll back, left: (2 - 2) = 0, 4, 3\nroll back, left: 2 4 2 3\n(2) * (2) = 4, left: (2 * 2) = 4, 4, 3\n(4) / (4) = 1, left: ((2 * 2) / 4) = 1, 3\nroll back, left: (2 * 2) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (2 * 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (2 * 2))) = 24\nreach 24! expression: (3 * (4 + (2 * 2)))"}, {"input": "2 4 2 3\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 4, 3\n(3) * (4) = 12, left: (3 * (2 + 2)) = 12, 4\nroll back, left: (2 + 2) = 4, 4, 3\n(4) / (3) = 4/3, left: ((2 + 2) / 3) = 4/3, 4\nroll back, left: (2 + 2) = 4, 4, 3\n(4) - (3) = 1, left: ((2 + 2) - 3) = 1, 4\nroll back, left: (2 + 2) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (2 + 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (2 + 2))) = 24\nreach 24! expression: (3 * (4 + (2 + 2)))"}, {"input": "4 6 2 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 6, 2\n(6) + (16) = 22, left: (6 + (4 * 4)) = 22, 2\n(2) + (22) = 24, left: (2 + (6 + (4 * 4))) = 24\nreach 24! expression: (2 + (6 + (4 * 4)))"}, {"input": "4 6 2 4\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (4 + 4)) = 24\nreach 24! expression: ((6 / 2) * (4 + 4))"}, {"input": "4 6 2 4\n", "output": "(4) + (6) = 10, left: (4 + 6) = 10, 2, 4\n(2) * (10) = 20, left: (2 * (4 + 6)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (4 + 6))) = 24\nreach 24! expression: (4 + (2 * (4 + 6)))"}, {"input": "4 6 2 4\n", "output": "(6) + (4) = 10, left: (6 + 4) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (6 + 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (6 + 4))) = 24\nreach 24! expression: (4 + (2 * (6 + 4)))"}, {"input": "4 6 2 4\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 4, 4\nroll back, left: 4 6 2 4\n(6) / (2) = 3, left: (6 / 2) = 3, 4, 4\n(4) - (3) = 1, left: (4 - (6 / 2)) = 1, 4\nroll back, left: (6 / 2) = 3, 4, 4\n(4) / (3) = 4/3, left: (4 / (6 / 2)) = 4/3, 4\nroll back, left: (6 / 2) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (4 + 4)) = 24\nreach 24! expression: ((6 / 2) * (4 + 4))"}, {"input": "4 6 2 4\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (6 * 4) = 24\nroll back, left: (6 * 4) = 24, 4, 2\nroll back, left: 4 6 2 4\n(6) + (4) = 10, left: (6 + 4) = 10, 4, 2\n(4) - (2) = 2, left: (4 - 2) = 2, (6 + 4) = 10\nroll back, left: (6 + 4) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (6 + 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (6 + 4))) = 24\nreach 24! expression: (4 + (2 * (6 + 4)))"}, {"input": "4 6 2 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 6, 2\n(16) / (6) = 8/3, left: ((4 * 4) / 6) = 8/3, 2\nroll back, left: (4 * 4) = 16, 6, 2\n(6) - (16) = -10, left: (6 - (4 * 4)) = -10, 2\n(2) + (-10) = -8, left: (2 + (6 - (4 * 4))) = -8\nroll back, left: (6 - (4 * 4)) = -10, 2\nroll back, left: (4 * 4) = 16, 6, 2\n(6) + (16) = 22, left: (6 + (4 * 4)) = 22, 2\n(2) + (22) = 24, left: (2 + (6 + (4 * 4))) = 24\nreach 24! expression: (2 + (6 + (4 * 4)))"}, {"input": "4 6 2 4\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 2, 4\n(24) - (4) = 20, left: ((4 * 6) - 4) = 20, 2\nroll back, left: (4 * 6) = 24, 2, 4\nroll back, left: 4 6 2 4\n(4) - (6) = -2, left: (4 - 6) = -2, 2, 4\nroll back, left: 4 6 2 4\n(4) + (6) = 10, left: (4 + 6) = 10, 2, 4\n(2) * (10) = 20, left: (2 * (4 + 6)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (4 + 6))) = 24\nreach 24! expression: (4 + (2 * (4 + 6)))"}, {"input": "4 6 2 4\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 4, 2\nroll back, left: 4 6 2 4\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, 4, 2\nroll back, left: 4 6 2 4\n(4) - (6) = -2, left: (4 - 6) = -2, 4, 2\nroll back, left: 4 6 2 4\n(6) + (4) = 10, left: (6 + 4) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (6 + 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (6 + 4))) = 24\nreach 24! expression: (4 + (2 * (6 + 4)))"}, {"input": "3 1 2 9\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 1, 2\n(27) - (1) = 26, left: ((3 * 9) - 1) = 26, 2\n(26) - (2) = 24, left: (((3 * 9) - 1) - 2) = 24\nreach 24! expression: (((3 * 9) - 1) - 2)"}, {"input": "3 1 2 9\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 1, 2\n(27) - (2) = 25, left: ((3 * 9) - 2) = 25, 1\n(25) - (1) = 24, left: (((3 * 9) - 2) - 1) = 24\nreach 24! expression: (((3 * 9) - 2) - 1)"}, {"input": "3 1 2 9\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 3, 2\n(3) + (9) = 12, left: (3 + (1 * 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 + (1 * 9))) = 24\nreach 24! expression: (2 * (3 + (1 * 9)))"}, {"input": "3 1 2 9\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 1, 2\n(2) * (12) = 24, left: (2 * (3 + 9)) = 24, 1\n(24) / (1) = 24, left: ((2 * (3 + 9)) / 1) = 24\nreach 24! expression: ((2 * (3 + 9)) / 1)"}, {"input": "3 1 2 9\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 3, 1\n(1) - (-7) = 8, left: (1 - (2 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 - (2 - 9))) = 24\nreach 24! expression: (3 * (1 - (2 - 9)))"}, {"input": "3 1 2 9\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 3, 2\n(9) - (3) = 6, left: ((1 * 9) - 3) = 6, 2\nroll back, left: (1 * 9) = 9, 3, 2\n(9) / (3) = 3, left: ((1 * 9) / 3) = 3, 2\nroll back, left: (1 * 9) = 9, 3, 2\n(3) + (9) = 12, left: (3 + (1 * 9)) = 12, 2\n(2) / (12) = 1/6, left: (2 / (3 + (1 * 9))) = 1/6\nroll back, left: (3 + (1 * 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 + (1 * 9))) = 24\nreach 24! expression: (2 * (3 + (1 * 9)))"}, {"input": "3 1 2 9\n", "output": "(2) / (3) = 2/3, left: (2 / 3) = 2/3, 1, 9\nroll back, left: 3 1 2 9\n(3) + (2) = 5, left: (3 + 2) = 5, 1, 9\n(9) + (5) = 14, left: (9 + (3 + 2)) = 14, 1\nroll back, left: (3 + 2) = 5, 1, 9\nroll back, left: 3 1 2 9\n(3) * (9) = 27, left: (3 * 9) = 27, 1, 2\n(27) - (1) = 26, left: ((3 * 9) - 1) = 26, 2\n(26) - (2) = 24, left: (((3 * 9) - 1) - 2) = 24\nreach 24! expression: (((3 * 9) - 1) - 2)"}, {"input": "3 1 2 9\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 1, 2\nroll back, left: 3 1 2 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, 1, 2\n(2) - (1) = 1, left: (2 - 1) = 1, (3 / 9) = 1/3\nroll back, left: (3 / 9) = 1/3, 1, 2\nroll back, left: 3 1 2 9\n(3) * (9) = 27, left: (3 * 9) = 27, 1, 2\n(27) - (2) = 25, left: ((3 * 9) - 2) = 25, 1\n(25) - (1) = 24, left: (((3 * 9) - 2) - 1) = 24\nreach 24! expression: (((3 * 9) - 2) - 1)"}, {"input": "3 1 2 9\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 3, 1\n(3) / (18) = 1/6, left: (3 / (2 * 9)) = 1/6, 1\nroll back, left: (2 * 9) = 18, 3, 1\nroll back, left: 3 1 2 9\n(2) + (9) = 11, left: (2 + 9) = 11, 3, 1\nroll back, left: 3 1 2 9\n(2) - (9) = -7, left: (2 - 9) = -7, 3, 1\n(1) - (-7) = 8, left: (1 - (2 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 - (2 - 9))) = 24\nreach 24! expression: (3 * (1 - (2 - 9)))"}, {"input": "5 4 2 5\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (5 + 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (5 + 5))) = 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 4, 2\n(4) - (2) = 2, left: (4 - 2) = 2, (5 / 5) = 1\nroll back, left: (5 / 5) = 1, 4, 2\nroll back, left: 5 4 2 5\n(5) * (5) = 25, left: (5 * 5) = 25, 4, 2\nroll back, left: 5 4 2 5\n(5) + (5) = 10, left: (5 + 5) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (5 + 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (5 + 5))) = 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(5) + (2) = 7, left: (5 + 2) = 7, 4, 5\nroll back, left: 5 4 2 5\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 2\n(2) * (1) = 2, left: (2 * (5 / 5)) = 2, 4\nroll back, left: (5 / 5) = 1, 4, 2\nroll back, left: 5 4 2 5\n(5) + (5) = 10, left: (5 + 5) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (5 + 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (5 + 5))) = 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 5, 4\n(3) / (4) = 3/4, left: ((5 - 2) / 4) = 3/4, 5\nroll back, left: (5 - 2) = 3, 5, 4\nroll back, left: 5 4 2 5\n(5) - (5) = 0, left: (5 - 5) = 0, 4, 2\nroll back, left: 5 4 2 5\n(5) + (5) = 10, left: (5 + 5) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (5 + 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (5 + 5))) = 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 4, 2\n(4) + (0) = 4, left: (4 + (5 - 5)) = 4, 2\n(2) + (4) = 6, left: (2 + (4 + (5 - 5))) = 6\nroll back, left: (4 + (5 - 5)) = 4, 2\nroll back, left: (5 - 5) = 0, 4, 2\nroll back, left: 5 4 2 5\n(5) + (5) = 10, left: (5 + 5) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (5 + 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (5 + 5))) = 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "5 4 2 5\n", "output": "(2) / (5) = 2/5, left: (2 / 5) = 2/5, 4, 5\nroll back, left: 5 4 2 5\n(4) / (2) = 2, left: (4 / 2) = 2, 5, 5\n(5) + (2) = 7, left: (5 + (4 / 2)) = 7, 5\nroll back, left: (4 / 2) = 2, 5, 5\nroll back, left: 5 4 2 5\n(5) + (5) = 10, left: (5 + 5) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (5 + 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (5 + 5))) = 24\nreach 24! expression: (4 + (2 * (5 + 5)))"}, {"input": "8 5 6 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (8 - 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (8 - 5))) = 24\nreach 24! expression: (8 * (6 - (8 - 5)))"}, {"input": "8 5 6 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (8 / 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (8 / 8))) = 24\nreach 24! expression: (6 * (5 - (8 / 8)))"}, {"input": "8 5 6 8\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 5, 8\n(5) + (-2) = 3, left: (5 + (6 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 + (6 - 8))) = 24\nreach 24! expression: (8 * (5 + (6 - 8)))"}, {"input": "8 5 6 8\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 5, 8\n(5) - (2) = 3, left: (5 - (8 - 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (8 - 6))) = 24\nreach 24! expression: (8 * (5 - (8 - 6)))"}, {"input": "8 5 6 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 5, 6\nroll back, left: 8 5 6 8\n(8) * (8) = 64, left: (8 * 8) = 64, 5, 6\nroll back, left: 8 5 6 8\n(8) - (8) = 0, left: (8 - 8) = 0, 5, 6\nroll back, left: 8 5 6 8\n(8) / (8) = 1, left: (8 / 8) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (8 / 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (8 / 8))) = 24\nreach 24! expression: (6 * (5 - (8 / 8)))"}, {"input": "8 5 6 8\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 5, 8\n(3/4) / (8) = 3/32, left: ((6 / 8) / 8) = 3/32, 5\n(3/32) / (5) = 3/160, left: (((6 / 8) / 8) / 5) = 3/160\nroll back, left: ((6 / 8) / 8) = 3/32, 5\nroll back, left: (6 / 8) = 3/4, 5, 8\nroll back, left: 8 5 6 8\n(6) - (8) = -2, left: (6 - 8) = -2, 5, 8\n(5) + (-2) = 3, left: (5 + (6 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 + (6 - 8))) = 24\nreach 24! expression: (8 * (5 + (6 - 8)))"}, {"input": "8 5 6 8\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 5, 8\n(2) / (5) = 2/5, left: ((8 - 6) / 5) = 2/5, 8\nroll back, left: (8 - 6) = 2, 5, 8\n(2) - (5) = -3, left: ((8 - 6) - 5) = -3, 8\n(8) - (-3) = 11, left: (8 - ((8 - 6) - 5)) = 11\nroll back, left: ((8 - 6) - 5) = -3, 8\nroll back, left: (8 - 6) = 2, 5, 8\n(5) - (2) = 3, left: (5 - (8 - 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (8 - 6))) = 24\nreach 24! expression: (8 * (5 - (8 - 6)))"}, {"input": "8 5 6 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 8, 6\nroll back, left: 8 5 6 8\n(5) * (8) = 40, left: (5 * 8) = 40, 8, 6\n(8) + (6) = 14, left: (8 + 6) = 14, (5 * 8) = 40\nroll back, left: (5 * 8) = 40, 8, 6\nroll back, left: 8 5 6 8\n(8) - (5) = 3, left: (8 - 5) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (8 - 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (8 - 5))) = 24\nreach 24! expression: (8 * (6 - (8 - 5)))"}, {"input": "8 5 6 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 5, 6\nroll back, left: 8 5 6 8\n(8) + (8) = 16, left: (8 + 8) = 16, 5, 6\n(16) - (6) = 10, left: ((8 + 8) - 6) = 10, 5\nroll back, left: (8 + 8) = 16, 5, 6\nroll back, left: 8 5 6 8\n(8) / (8) = 1, left: (8 / 8) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (8 / 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (8 / 8))) = 24\nreach 24! expression: (6 * (5 - (8 / 8)))"}, {"input": "2 3 8 12\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 2, 8\n(8) + (4) = 12, left: (8 + (12 / 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (8 + (12 / 3))) = 24\nreach 24! expression: (2 * (8 + (12 / 3)))"}, {"input": "2 3 8 12\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 3, 8\n(6) - (3) = 3, left: ((12 / 2) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 / 2) - 3)) = 24\nreach 24! expression: (8 * ((12 / 2) - 3))"}, {"input": "2 3 8 12\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 2, 12\n(24) - (12) = 12, left: ((3 * 8) - 12) = 12, 2\n(2) * (12) = 24, left: (2 * ((3 * 8) - 12)) = 24\nreach 24! expression: (2 * ((3 * 8) - 12))"}, {"input": "2 3 8 12\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 8, 12\n(12) - (8) = 4, left: (12 - 8) = 4, (2 * 3) = 6\n(6) * (4) = 24, left: ((2 * 3) * (12 - 8)) = 24\nreach 24! expression: ((2 * 3) * (12 - 8))"}, {"input": "2 3 8 12\n", "output": "(3) - (12) = -9, left: (3 - 12) = -9, 2, 8\n(-9) - (8) = -17, left: ((3 - 12) - 8) = -17, 2\nroll back, left: (3 - 12) = -9, 2, 8\n(2) - (-9) = 11, left: (2 - (3 - 12)) = 11, 8\nroll back, left: (3 - 12) = -9, 2, 8\nroll back, left: 2 3 8 12\n(12) / (3) = 4, left: (12 / 3) = 4, 2, 8\n(8) + (4) = 12, left: (8 + (12 / 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (8 + (12 / 3))) = 24\nreach 24! expression: (2 * (8 + (12 / 3)))"}, {"input": "2 3 8 12\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 3, 8\n(3) * (8) = 24, left: (3 * 8) = 24, (12 - 2) = 10\nroll back, left: (12 - 2) = 10, 3, 8\nroll back, left: 2 3 8 12\n(12) / (2) = 6, left: (12 / 2) = 6, 3, 8\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, (12 / 2) = 6\nroll back, left: (12 / 2) = 6, 3, 8\n(6) - (3) = 3, left: ((12 / 2) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 / 2) - 3)) = 24\nreach 24! expression: (8 * ((12 / 2) - 3))"}, {"input": "2 3 8 12\n", "output": "(3) + (12) = 15, left: (3 + 12) = 15, 2, 8\n(15) - (8) = 7, left: ((3 + 12) - 8) = 7, 2\nroll back, left: (3 + 12) = 15, 2, 8\nroll back, left: 2 3 8 12\n(3) - (12) = -9, left: (3 - 12) = -9, 2, 8\nroll back, left: 2 3 8 12\n(12) / (3) = 4, left: (12 / 3) = 4, 2, 8\n(8) + (4) = 12, left: (8 + (12 / 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (8 + (12 / 3))) = 24\nreach 24! expression: (2 * (8 + (12 / 3)))"}, {"input": "2 3 8 12\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 2, 12\n(24) / (12) = 2, left: ((3 * 8) / 12) = 2, 2\n(2) / (2) = 1, left: (((3 * 8) / 12) / 2) = 1\nroll back, left: ((3 * 8) / 12) = 2, 2\nroll back, left: (3 * 8) = 24, 2, 12\n(12) + (24) = 36, left: (12 + (3 * 8)) = 36, 2\nroll back, left: (3 * 8) = 24, 2, 12\n(24) - (12) = 12, left: ((3 * 8) - 12) = 12, 2\n(2) * (12) = 24, left: (2 * ((3 * 8) - 12)) = 24\nreach 24! expression: (2 * ((3 * 8) - 12))"}, {"input": "6 6 3 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (6 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (6 / 3))) = 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 3, 3\n(0) - (3) = -3, left: ((6 - 6) - 3) = -3, 3\nroll back, left: (6 - 6) = 0, 3, 3\nroll back, left: 6 6 3 3\n(6) / (6) = 1, left: (6 / 6) = 1, 3, 3\nroll back, left: 6 6 3 3\n(6) / (3) = 2, left: (6 / 3) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (6 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (6 / 3))) = 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 6, 3\n(6) + (3) = 9, left: (6 + 3) = 9, (6 + 3) = 9\nroll back, left: (6 + 3) = 9, 6, 3\nroll back, left: 6 6 3 3\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 6, 3\nroll back, left: 6 6 3 3\n(6) / (3) = 2, left: (6 / 3) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (6 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (6 / 3))) = 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 6, 3\nroll back, left: 6 6 3 3\n(6) * (3) = 18, left: (6 * 3) = 18, 6, 3\nroll back, left: 6 6 3 3\n(6) - (3) = 3, left: (6 - 3) = 3, 6, 3\nroll back, left: 6 6 3 3\n(6) / (3) = 2, left: (6 / 3) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (6 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (6 / 3))) = 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 6, 3\n(6) + (3) = 9, left: (6 + 3) = 9, (6 - 3) = 3\nroll back, left: (6 - 3) = 3, 6, 3\nroll back, left: 6 6 3 3\n(6) / (3) = 2, left: (6 / 3) = 2, 6, 3\n(6) - (2) = 4, left: (6 - (6 / 3)) = 4, 3\nroll back, left: (6 / 3) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (6 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (6 / 3))) = 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "6 6 3 3\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (6 + 6) = 12\nroll back, left: (6 + 6) = 12, 3, 3\nroll back, left: 6 6 3 3\n(6) - (6) = 0, left: (6 - 6) = 0, 3, 3\nroll back, left: 6 6 3 3\n(6) / (3) = 2, left: (6 / 3) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (6 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (6 / 3))) = 24\nreach 24! expression: (3 * (6 + (6 / 3)))"}, {"input": "10 3 8 8\n", "output": "(10) * (8) = 80, left: (10 * 8) = 80, 3, 8\n(80) - (8) = 72, left: ((10 * 8) - 8) = 72, 3\n(72) / (3) = 24, left: (((10 * 8) - 8) / 3) = 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(3) + (8) = 11, left: (3 + 8) = 11, 10, 8\nroll back, left: 10 3 8 8\n(8) - (3) = 5, left: (8 - 3) = 5, 10, 8\nroll back, left: 10 3 8 8\n(10) + (8) = 18, left: (10 + 8) = 18, 3, 8\nroll back, left: 10 3 8 8\n(10) * (8) = 80, left: (10 * 8) = 80, 3, 8\n(80) - (8) = 72, left: ((10 * 8) - 8) = 72, 3\n(72) / (3) = 24, left: (((10 * 8) - 8) / 3) = 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(8) / (10) = 4/5, left: (8 / 10) = 4/5, 3, 8\n(8) + (4/5) = 44/5, left: (8 + (8 / 10)) = 44/5, 3\nroll back, left: (8 / 10) = 4/5, 3, 8\nroll back, left: 10 3 8 8\n(10) + (8) = 18, left: (10 + 8) = 18, 3, 8\nroll back, left: 10 3 8 8\n(10) * (8) = 80, left: (10 * 8) = 80, 3, 8\n(80) - (8) = 72, left: ((10 * 8) - 8) = 72, 3\n(72) / (3) = 24, left: (((10 * 8) - 8) / 3) = 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 10, 8\nroll back, left: 10 3 8 8\n(8) - (3) = 5, left: (8 - 3) = 5, 10, 8\nroll back, left: 10 3 8 8\n(10) / (8) = 5/4, left: (10 / 8) = 5/4, 3, 8\nroll back, left: 10 3 8 8\n(10) * (8) = 80, left: (10 * 8) = 80, 3, 8\n(80) - (8) = 72, left: ((10 * 8) - 8) = 72, 3\n(72) / (3) = 24, left: (((10 * 8) - 8) / 3) = 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 10, 8\nroll back, left: 10 3 8 8\n(10) * (3) = 30, left: (10 * 3) = 30, 8, 8\nroll back, left: 10 3 8 8\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 3, 8\nroll back, left: 10 3 8 8\n(10) * (8) = 80, left: (10 * 8) = 80, 3, 8\n(80) - (8) = 72, left: ((10 * 8) - 8) = 72, 3\n(72) / (3) = 24, left: (((10 * 8) - 8) / 3) = 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "10 3 8 8\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 10, 8\nroll back, left: 10 3 8 8\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 3, 8\n(4/5) / (8) = 1/10, left: ((8 / 10) / 8) = 1/10, 3\nroll back, left: (8 / 10) = 4/5, 3, 8\nroll back, left: 10 3 8 8\n(10) * (8) = 80, left: (10 * 8) = 80, 3, 8\n(80) - (8) = 72, left: ((10 * 8) - 8) = 72, 3\n(72) / (3) = 24, left: (((10 * 8) - 8) / 3) = 24\nreach 24! expression: (((10 * 8) - 8) / 3)"}, {"input": "5 7 11 4\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (11 - 7) = 4\n(4) + (20) = 24, left: ((11 - 7) + (5 * 4)) = 24\nreach 24! expression: ((11 - 7) + (5 * 4))"}, {"input": "5 7 11 4\n", "output": "(5) * (4) = 20, left: (5 * 4) = 20, 7, 11\n(11) + (20) = 31, left: (11 + (5 * 4)) = 31, 7\n(31) - (7) = 24, left: ((11 + (5 * 4)) - 7) = 24\nreach 24! expression: ((11 + (5 * 4)) - 7)"}, {"input": "5 7 11 4\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 5, 4\n(5) * (4) = 20, left: (5 * (11 - 7)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 * (11 - 7))) = 24\nreach 24! expression: (4 + (5 * (11 - 7)))"}, {"input": "5 7 11 4\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 7, 11\nroll back, left: 5 7 11 4\n(5) + (4) = 9, left: (5 + 4) = 9, 7, 11\n(9) - (7) = 2, left: ((5 + 4) - 7) = 2, 11\nroll back, left: (5 + 4) = 9, 7, 11\nroll back, left: 5 7 11 4\n(5) * (4) = 20, left: (5 * 4) = 20, 7, 11\n(11) + (20) = 31, left: (11 + (5 * 4)) = 31, 7\n(31) - (7) = 24, left: ((11 + (5 * 4)) - 7) = 24\nreach 24! expression: ((11 + (5 * 4)) - 7)"}, {"input": "5 7 11 4\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 5, 11\n(5) / (7/4) = 20/7, left: (5 / (7 / 4)) = 20/7, 11\nroll back, left: (7 / 4) = 7/4, 5, 11\nroll back, left: 5 7 11 4\n(4) - (7) = -3, left: (4 - 7) = -3, 5, 11\nroll back, left: 5 7 11 4\n(11) - (7) = 4, left: (11 - 7) = 4, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (11 - 7) = 4\n(4) + (20) = 24, left: ((11 - 7) + (5 * 4)) = 24\nreach 24! expression: ((11 - 7) + (5 * 4))"}, {"input": "5 7 11 4\n", "output": "(11) * (4) = 44, left: (11 * 4) = 44, 5, 7\nroll back, left: 5 7 11 4\n(11) / (4) = 11/4, left: (11 / 4) = 11/4, 5, 7\nroll back, left: 5 7 11 4\n(5) * (11) = 55, left: (5 * 11) = 55, 7, 4\nroll back, left: 5 7 11 4\n(11) - (7) = 4, left: (11 - 7) = 4, 5, 4\n(5) * (4) = 20, left: (5 * (11 - 7)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 * (11 - 7))) = 24\nreach 24! expression: (4 + (5 * (11 - 7)))"}, {"input": "5 7 11 4\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 5, 7\nroll back, left: 5 7 11 4\n(11) - (4) = 7, left: (11 - 4) = 7, 5, 7\n(5) + (7) = 12, left: (5 + (11 - 4)) = 12, 7\nroll back, left: (11 - 4) = 7, 5, 7\nroll back, left: 5 7 11 4\n(11) - (7) = 4, left: (11 - 7) = 4, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (11 - 7) = 4\n(4) + (20) = 24, left: ((11 - 7) + (5 * 4)) = 24\nreach 24! expression: ((11 - 7) + (5 * 4))"}, {"input": "5 7 11 4\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 5, 11\nroll back, left: 5 7 11 4\n(5) + (7) = 12, left: (5 + 7) = 12, 11, 4\nroll back, left: 5 7 11 4\n(7) / (5) = 7/5, left: (7 / 5) = 7/5, 11, 4\nroll back, left: 5 7 11 4\n(11) - (7) = 4, left: (11 - 7) = 4, 5, 4\n(5) * (4) = 20, left: (5 * (11 - 7)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 * (11 - 7))) = 24\nreach 24! expression: (4 + (5 * (11 - 7)))"}, {"input": "8 6 6 2\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 6, 2\n(2) - (-2) = 4, left: (2 - (6 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 - (6 - 8))) = 24\nreach 24! expression: (6 * (2 - (6 - 8)))"}, {"input": "8 6 6 2\n", "output": "(8) + (2) = 10, left: (8 + 2) = 10, 6, 6\n(10) - (6) = 4, left: ((8 + 2) - 6) = 4, 6\n(6) * (4) = 24, left: (6 * ((8 + 2) - 6)) = 24\nreach 24! expression: (6 * ((8 + 2) - 6))"}, {"input": "8 6 6 2\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (8 - 6) = 2\n(2) * (12) = 24, left: ((8 - 6) * (6 * 2)) = 24\nreach 24! expression: ((8 - 6) * (6 * 2))"}, {"input": "8 6 6 2\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (6 / 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (6 / 6))) = 24\nreach 24! expression: (8 * (2 + (6 / 6)))"}, {"input": "8 6 6 2\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 6, 2\n(6) * (2) = 12, left: (6 * (8 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (6 * (8 - 6))) = 24\nreach 24! expression: (2 * (6 * (8 - 6)))"}, {"input": "8 6 6 2\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 6, 2\n(2) * (4/3) = 8/3, left: (2 * (8 / 6)) = 8/3, 6\nroll back, left: (8 / 6) = 4/3, 6, 2\nroll back, left: 8 6 6 2\n(8) * (6) = 48, left: (8 * 6) = 48, 6, 2\nroll back, left: 8 6 6 2\n(8) - (6) = 2, left: (8 - 6) = 2, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (8 - 6) = 2\n(2) * (12) = 24, left: ((8 - 6) * (6 * 2)) = 24\nreach 24! expression: ((8 - 6) * (6 * 2))"}, {"input": "8 6 6 2\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 6, 6\n(4) / (6) = 2/3, left: ((8 / 2) / 6) = 2/3, 6\nroll back, left: (8 / 2) = 4, 6, 6\nroll back, left: 8 6 6 2\n(8) - (2) = 6, left: (8 - 2) = 6, 6, 6\nroll back, left: 8 6 6 2\n(8) + (2) = 10, left: (8 + 2) = 10, 6, 6\n(10) - (6) = 4, left: ((8 + 2) - 6) = 4, 6\n(6) * (4) = 24, left: (6 * ((8 + 2) - 6)) = 24\nreach 24! expression: (6 * ((8 + 2) - 6))"}, {"input": "8 6 6 2\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 6, 2\nroll back, left: 8 6 6 2\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, 6, 2\nroll back, left: 8 6 6 2\n(6) - (8) = -2, left: (6 - 8) = -2, 6, 2\n(2) / (-2) = -1, left: (2 / (6 - 8)) = -1, 6\nroll back, left: (6 - 8) = -2, 6, 2\n(2) - (-2) = 4, left: (2 - (6 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 - (6 - 8))) = 24\nreach 24! expression: (6 * (2 - (6 - 8)))"}, {"input": "8 6 6 2\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 8, 2\n(8) / (12) = 2/3, left: (8 / (6 + 6)) = 2/3, 2\nroll back, left: (6 + 6) = 12, 8, 2\nroll back, left: 8 6 6 2\n(6) / (6) = 1, left: (6 / 6) = 1, 8, 2\n(8) - (1) = 7, left: (8 - (6 / 6)) = 7, 2\nroll back, left: (6 / 6) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (6 / 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (6 / 6))) = 24\nreach 24! expression: (8 * (2 + (6 / 6)))"}, {"input": "8 6 6 2\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 6, 2\n(2) - (6) = -4, left: ((8 - 6) - 6) = -4, 2\n(-4) / (2) = -2, left: (((8 - 6) - 6) / 2) = -2\nroll back, left: ((8 - 6) - 6) = -4, 2\nroll back, left: (8 - 6) = 2, 6, 2\n(6) - (2) = 4, left: (6 - (8 - 6)) = 4, 2\nroll back, left: (8 - 6) = 2, 6, 2\n(6) * (2) = 12, left: (6 * (8 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (6 * (8 - 6))) = 24\nreach 24! expression: (2 * (6 * (8 - 6)))"}, {"input": "9 12 1 11\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 12, 1\n(12) * (1) = 12, left: (12 * 1) = 12, (11 - 9) = 2\n(2) * (12) = 24, left: ((11 - 9) * (12 * 1)) = 24\nreach 24! expression: ((11 - 9) * (12 * 1))"}, {"input": "9 12 1 11\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 9, 12\n(11) - (9) = 2, left: ((11 / 1) - 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 / 1) - 9)) = 24\nreach 24! expression: (12 * ((11 / 1) - 9))"}, {"input": "9 12 1 11\n", "output": "(12) * (1) = 12, left: (12 * 1) = 12, 9, 11\n(11) - (9) = 2, left: (11 - 9) = 2, (12 * 1) = 12\n(12) * (2) = 24, left: ((12 * 1) * (11 - 9)) = 24\nreach 24! expression: ((12 * 1) * (11 - 9))"}, {"input": "9 12 1 11\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 9, 11\n(11) - (9) = 2, left: (11 - 9) = 2, (12 / 1) = 12\n(12) * (2) = 24, left: ((12 / 1) * (11 - 9)) = 24\nreach 24! expression: ((12 / 1) * (11 - 9))"}, {"input": "9 12 1 11\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 12, 1\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, (11 - 9) = 2\n(2) / (1/12) = 24, left: ((11 - 9) / (1 / 12)) = 24\nreach 24! expression: ((11 - 9) / (1 / 12))"}, {"input": "9 12 1 11\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 1, 11\nroll back, left: 9 12 1 11\n(9) + (12) = 21, left: (9 + 12) = 21, 1, 11\nroll back, left: 9 12 1 11\n(12) * (11) = 132, left: (12 * 11) = 132, 9, 1\nroll back, left: 9 12 1 11\n(12) / (1) = 12, left: (12 / 1) = 12, 9, 11\n(11) - (9) = 2, left: (11 - 9) = 2, (12 / 1) = 12\n(12) * (2) = 24, left: ((12 / 1) * (11 - 9)) = 24\nreach 24! expression: ((12 / 1) * (11 - 9))"}, {"input": "9 12 1 11\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 9, 12\n(11) - (9) = 2, left: ((11 / 1) - 9) = 2, 12\n(2) / (12) = 1/6, left: (((11 / 1) - 9) / 12) = 1/6\nroll back, left: ((11 / 1) - 9) = 2, 12\n(2) - (12) = -10, left: (((11 / 1) - 9) - 12) = -10\nroll back, left: ((11 / 1) - 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 / 1) - 9)) = 24\nreach 24! expression: (12 * ((11 / 1) - 9))"}, {"input": "9 12 1 11\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 9, 12\n(11) - (9) = 2, left: ((11 / 1) - 9) = 2, 12\n(2) / (12) = 1/6, left: (((11 / 1) - 9) / 12) = 1/6\nroll back, left: ((11 / 1) - 9) = 2, 12\n(2) - (12) = -10, left: (((11 / 1) - 9) - 12) = -10\nroll back, left: ((11 / 1) - 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 / 1) - 9)) = 24\nreach 24! expression: (12 * ((11 / 1) - 9))"}, {"input": "9 12 1 11\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 9, 12\n(11) - (9) = 2, left: ((11 / 1) - 9) = 2, 12\n(2) / (12) = 1/6, left: (((11 / 1) - 9) / 12) = 1/6\nroll back, left: ((11 / 1) - 9) = 2, 12\n(2) - (12) = -10, left: (((11 / 1) - 9) - 12) = -10\nroll back, left: ((11 / 1) - 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 / 1) - 9)) = 24\nreach 24! expression: (12 * ((11 / 1) - 9))"}, {"input": "9 12 1 11\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 9, 12\n(11) - (9) = 2, left: ((11 / 1) - 9) = 2, 12\n(2) / (12) = 1/6, left: (((11 / 1) - 9) / 12) = 1/6\nroll back, left: ((11 / 1) - 9) = 2, 12\n(2) - (12) = -10, left: (((11 / 1) - 9) - 12) = -10\nroll back, left: ((11 / 1) - 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 / 1) - 9)) = 24\nreach 24! expression: (12 * ((11 / 1) - 9))"}, {"input": "7 12 4 13\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (13 - 12)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (13 - 12))) = 24\nreach 24! expression: (4 * (7 - (13 - 12)))"}, {"input": "7 12 4 13\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 12, 4\n(12) + (-6) = 6, left: (12 + (7 - 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (12 + (7 - 13))) = 24\nreach 24! expression: (4 * (12 + (7 - 13)))"}, {"input": "7 12 4 13\n", "output": "(7) + (4) = 11, left: (7 + 4) = 11, 12, 13\n(13) - (11) = 2, left: (13 - (7 + 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (13 - (7 + 4))) = 24\nreach 24! expression: (12 * (13 - (7 + 4)))"}, {"input": "7 12 4 13\n", "output": "(12) - (13) = -1, left: (12 - 13) = -1, 7, 4\n(7) + (-1) = 6, left: (7 + (12 - 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (12 - 13))) = 24\nreach 24! expression: (4 * (7 + (12 - 13)))"}, {"input": "7 12 4 13\n", "output": "(7) + (12) = 19, left: (7 + 12) = 19, 4, 13\n(19) - (13) = 6, left: ((7 + 12) - 13) = 6, 4\n(4) * (6) = 24, left: (4 * ((7 + 12) - 13)) = 24\nreach 24! expression: (4 * ((7 + 12) - 13))"}, {"input": "7 12 4 13\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 7, 13\nroll back, left: 7 12 4 13\n(12) * (13) = 156, left: (12 * 13) = 156, 7, 4\nroll back, left: 7 12 4 13\n(12) / (13) = 12/13, left: (12 / 13) = 12/13, 7, 4\nroll back, left: 7 12 4 13\n(12) - (13) = -1, left: (12 - 13) = -1, 7, 4\n(7) + (-1) = 6, left: (7 + (12 - 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (12 - 13))) = 24\nreach 24! expression: (4 * (7 + (12 - 13)))"}, {"input": "7 12 4 13\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 7, 13\nroll back, left: 7 12 4 13\n(12) * (4) = 48, left: (12 * 4) = 48, 7, 13\nroll back, left: 7 12 4 13\n(7) - (12) = -5, left: (7 - 12) = -5, 4, 13\nroll back, left: 7 12 4 13\n(7) + (12) = 19, left: (7 + 12) = 19, 4, 13\n(19) - (13) = 6, left: ((7 + 12) - 13) = 6, 4\n(4) * (6) = 24, left: (4 * ((7 + 12) - 13)) = 24\nreach 24! expression: (4 * ((7 + 12) - 13))"}, {"input": "3 1 1 11\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 3, 1\n(3) - (1) = 2, left: (3 - 1) = 2, (1 + 11) = 12\n(12) * (2) = 24, left: ((1 + 11) * (3 - 1)) = 24\nreach 24! expression: ((1 + 11) * (3 - 1))"}, {"input": "3 1 1 11\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (3 - 1) = 2\n(2) * (12) = 24, left: ((3 - 1) * (1 + 11)) = 24\nreach 24! expression: ((3 - 1) * (1 + 11))"}, {"input": "3 1 1 11\n", "output": "(3) + (1) = 4, left: (3 + 1) = 4, 1, 11\n(4) / (1) = 4, left: ((3 + 1) / 1) = 4, 11\nroll back, left: (3 + 1) = 4, 1, 11\nroll back, left: 3 1 1 11\n(1) - (3) = -2, left: (1 - 3) = -2, 1, 11\nroll back, left: 3 1 1 11\n(3) - (1) = 2, left: (3 - 1) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (3 - 1) = 2\n(2) * (12) = 24, left: ((3 - 1) * (1 + 11)) = 24\nreach 24! expression: ((3 - 1) * (1 + 11))"}, {"input": "3 1 1 11\n", "output": "(1) * (11) = 11, left: (1 * 11) = 11, 3, 1\n(1) + (11) = 12, left: (1 + (1 * 11)) = 12, 3\nroll back, left: (1 * 11) = 11, 3, 1\nroll back, left: 3 1 1 11\n(1) / (11) = 1/11, left: (1 / 11) = 1/11, 3, 1\nroll back, left: 3 1 1 11\n(1) + (11) = 12, left: (1 + 11) = 12, 3, 1\n(3) - (1) = 2, left: (3 - 1) = 2, (1 + 11) = 12\n(12) * (2) = 24, left: ((1 + 11) * (3 - 1)) = 24\nreach 24! expression: ((1 + 11) * (3 - 1))"}, {"input": "3 1 1 11\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 3, 11\nroll back, left: 3 1 1 11\n(1) * (11) = 11, left: (1 * 11) = 11, 3, 1\n(11) - (1) = 10, left: ((1 * 11) - 1) = 10, 3\nroll back, left: (1 * 11) = 11, 3, 1\nroll back, left: 3 1 1 11\n(1) + (11) = 12, left: (1 + 11) = 12, 3, 1\n(3) - (1) = 2, left: (3 - 1) = 2, (1 + 11) = 12\n(12) * (2) = 24, left: ((1 + 11) * (3 - 1)) = 24\nreach 24! expression: ((1 + 11) * (3 - 1))"}, {"input": "13 12 4 3\n", "output": "(13) + (3) = 16, left: (13 + 3) = 16, 12, 4\n(4) - (12) = -8, left: (4 - 12) = -8, (13 + 3) = 16\n(16) - (-8) = 24, left: ((13 + 3) - (4 - 12)) = 24\nreach 24! expression: ((13 + 3) - (4 - 12))"}, {"input": "13 12 4 3\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 13, 12\n(13) - (1) = 12, left: (13 - (4 - 3)) = 12, 12\n(12) + (12) = 24, left: (12 + (13 - (4 - 3))) = 24\nreach 24! expression: (12 + (13 - (4 - 3)))"}, {"input": "13 12 4 3\n", "output": "(13) + (12) = 25, left: (13 + 12) = 25, 4, 3\n(4) - (3) = 1, left: (4 - 3) = 1, (13 + 12) = 25\n(25) - (1) = 24, left: ((13 + 12) - (4 - 3)) = 24\nreach 24! expression: ((13 + 12) - (4 - 3))"}, {"input": "13 12 4 3\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (4 - 12) = -8\n(16) - (-8) = 24, left: ((13 + 3) - (4 - 12)) = 24\nreach 24! expression: ((13 + 3) - (4 - 12))"}, {"input": "13 12 4 3\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 13, 4\n(13) + (15) = 28, left: (13 + (12 + 3)) = 28, 4\n(28) - (4) = 24, left: ((13 + (12 + 3)) - 4) = 24\nreach 24! expression: ((13 + (12 + 3)) - 4)"}, {"input": "13 12 4 3\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 13, 3\n(3) / (3) = 1, left: (3 / (12 / 4)) = 1, 13\nroll back, left: (12 / 4) = 3, 13, 3\nroll back, left: 13 12 4 3\n(4) / (12) = 1/3, left: (4 / 12) = 1/3, 13, 3\nroll back, left: 13 12 4 3\n(4) - (12) = -8, left: (4 - 12) = -8, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (4 - 12) = -8\n(16) - (-8) = 24, left: ((13 + 3) - (4 - 12)) = 24\nreach 24! expression: ((13 + 3) - (4 - 12))"}, {"input": "13 12 4 3\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 13, 4\nroll back, left: 13 12 4 3\n(3) - (12) = -9, left: (3 - 12) = -9, 13, 4\nroll back, left: 13 12 4 3\n(12) * (3) = 36, left: (12 * 3) = 36, 13, 4\nroll back, left: 13 12 4 3\n(12) + (3) = 15, left: (12 + 3) = 15, 13, 4\n(13) + (15) = 28, left: (13 + (12 + 3)) = 28, 4\n(28) - (4) = 24, left: ((13 + (12 + 3)) - 4) = 24\nreach 24! expression: ((13 + (12 + 3)) - 4)"}, {"input": "13 12 4 3\n", "output": "(13) / (12) = 13/12, left: (13 / 12) = 13/12, 4, 3\nroll back, left: 13 12 4 3\n(13) - (12) = 1, left: (13 - 12) = 1, 4, 3\n(4) / (1) = 4, left: (4 / (13 - 12)) = 4, 3\nroll back, left: (13 - 12) = 1, 4, 3\nroll back, left: 13 12 4 3\n(13) + (12) = 25, left: (13 + 12) = 25, 4, 3\n(4) - (3) = 1, left: (4 - 3) = 1, (13 + 12) = 25\n(25) - (1) = 24, left: ((13 + 12) - (4 - 3)) = 24\nreach 24! expression: ((13 + 12) - (4 - 3))"}, {"input": "8 11 13 9\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 11, 13\n(13) * (1) = 13, left: (13 * (9 - 8)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 * (9 - 8))) = 24\nreach 24! expression: (11 + (13 * (9 - 8)))"}, {"input": "8 11 13 9\n", "output": "(11) + (13) = 24, left: (11 + 13) = 24, 8, 9\n(9) - (8) = 1, left: (9 - 8) = 1, (11 + 13) = 24\n(24) * (1) = 24, left: ((11 + 13) * (9 - 8)) = 24\nreach 24! expression: ((11 + 13) * (9 - 8))"}, {"input": "8 11 13 9\n", "output": "(11) + (13) = 24, left: (11 + 13) = 24, 8, 9\n(9) - (8) = 1, left: (9 - 8) = 1, (11 + 13) = 24\n(24) / (1) = 24, left: ((11 + 13) / (9 - 8)) = 24\nreach 24! expression: ((11 + 13) / (9 - 8))"}, {"input": "8 11 13 9\n", "output": "(13) / (11) = 13/11, left: (13 / 11) = 13/11, 8, 9\nroll back, left: 8 11 13 9\n(11) - (13) = -2, left: (11 - 13) = -2, 8, 9\n(8) + (-2) = 6, left: (8 + (11 - 13)) = 6, 9\nroll back, left: (11 - 13) = -2, 8, 9\nroll back, left: 8 11 13 9\n(11) + (13) = 24, left: (11 + 13) = 24, 8, 9\n(9) - (8) = 1, left: (9 - 8) = 1, (11 + 13) = 24\n(24) * (1) = 24, left: ((11 + 13) * (9 - 8)) = 24\nreach 24! expression: ((11 + 13) * (9 - 8))"}, {"input": "8 11 13 9\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 13, 9\nroll back, left: 8 11 13 9\n(13) + (9) = 22, left: (13 + 9) = 22, 8, 11\nroll back, left: 8 11 13 9\n(9) / (13) = 9/13, left: (9 / 13) = 9/13, 8, 11\nroll back, left: 8 11 13 9\n(9) - (8) = 1, left: (9 - 8) = 1, 11, 13\n(13) * (1) = 13, left: (13 * (9 - 8)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 * (9 - 8))) = 24\nreach 24! expression: (11 + (13 * (9 - 8)))"}, {"input": "8 11 13 9\n", "output": "(8) / (13) = 8/13, left: (8 / 13) = 8/13, 11, 9\nroll back, left: 8 11 13 9\n(8) + (13) = 21, left: (8 + 13) = 21, 11, 9\nroll back, left: 8 11 13 9\n(13) / (11) = 13/11, left: (13 / 11) = 13/11, 8, 9\nroll back, left: 8 11 13 9\n(11) + (13) = 24, left: (11 + 13) = 24, 8, 9\n(9) - (8) = 1, left: (9 - 8) = 1, (11 + 13) = 24\n(24) / (1) = 24, left: ((11 + 13) / (9 - 8)) = 24\nreach 24! expression: ((11 + 13) / (9 - 8))"}, {"input": "13 3 2 10\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 13, 3\n(13) + (8) = 21, left: (13 + (10 - 2)) = 21, 3\n(3) + (21) = 24, left: (3 + (13 + (10 - 2))) = 24\nreach 24! expression: (3 + (13 + (10 - 2)))"}, {"input": "13 3 2 10\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 13, 3\n(-8) - (13) = -21, left: ((2 - 10) - 13) = -21, 3\n(3) - (-21) = 24, left: (3 - ((2 - 10) - 13)) = 24\nreach 24! expression: (3 - ((2 - 10) - 13))"}, {"input": "13 3 2 10\n", "output": "(3) + (10) = 13, left: (3 + 10) = 13, 13, 2\n(2) - (13) = -11, left: (2 - (3 + 10)) = -11, 13\n(13) - (-11) = 24, left: (13 - (2 - (3 + 10))) = 24\nreach 24! expression: (13 - (2 - (3 + 10)))"}, {"input": "13 3 2 10\n", "output": "(3) + (10) = 13, left: (3 + 10) = 13, 13, 2\n(13) - (2) = 11, left: (13 - 2) = 11, (3 + 10) = 13\n(13) + (11) = 24, left: ((3 + 10) + (13 - 2)) = 24\nreach 24! expression: ((3 + 10) + (13 - 2))"}, {"input": "13 3 2 10\n", "output": "(13) + (10) = 23, left: (13 + 10) = 23, 3, 2\n(2) - (23) = -21, left: (2 - (13 + 10)) = -21, 3\n(3) - (-21) = 24, left: (3 - (2 - (13 + 10))) = 24\nreach 24! expression: (3 - (2 - (13 + 10)))"}, {"input": "13 3 2 10\n", "output": "(13) * (10) = 130, left: (13 * 10) = 130, 3, 2\nroll back, left: 13 3 2 10\n(10) - (13) = -3, left: (10 - 13) = -3, 3, 2\n(3) / (-3) = -1, left: (3 / (10 - 13)) = -1, 2\nroll back, left: (10 - 13) = -3, 3, 2\nroll back, left: 13 3 2 10\n(13) + (10) = 23, left: (13 + 10) = 23, 3, 2\n(2) - (23) = -21, left: (2 - (13 + 10)) = -21, 3\n(3) - (-21) = 24, left: (3 - (2 - (13 + 10))) = 24\nreach 24! expression: (3 - (2 - (13 + 10)))"}, {"input": "8 7 2 4\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 7, 4\n(7) / (1/4) = 28, left: (7 / (2 / 8)) = 28, 4\n(28) - (4) = 24, left: ((7 / (2 / 8)) - 4) = 24\nreach 24! expression: ((7 / (2 / 8)) - 4)"}, {"input": "8 7 2 4\n", "output": "(2) / (7) = 2/7, left: (2 / 7) = 2/7, 8, 4\n(8) / (2/7) = 28, left: (8 / (2 / 7)) = 28, 4\n(28) - (4) = 24, left: ((8 / (2 / 7)) - 4) = 24\nreach 24! expression: ((8 / (2 / 7)) - 4)"}, {"input": "8 7 2 4\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 8, 4\n(8) * (7/2) = 28, left: (8 * (7 / 2)) = 28, 4\n(28) - (4) = 24, left: ((8 * (7 / 2)) - 4) = 24\nreach 24! expression: ((8 * (7 / 2)) - 4)"}, {"input": "8 7 2 4\n", "output": "(8) * (7) = 56, left: (8 * 7) = 56, 2, 4\n(56) / (2) = 28, left: ((8 * 7) / 2) = 28, 4\n(28) - (4) = 24, left: (((8 * 7) / 2) - 4) = 24\nreach 24! expression: (((8 * 7) / 2) - 4)"}, {"input": "8 7 2 4\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 2, 4\n(2) + (-1) = 1, left: (2 + (7 - 8)) = 1, 4\nroll back, left: (7 - 8) = -1, 2, 4\n(2) - (-1) = 3, left: (2 - (7 - 8)) = 3, 4\nroll back, left: (7 - 8) = -1, 2, 4\nroll back, left: 8 7 2 4\n(8) * (7) = 56, left: (8 * 7) = 56, 2, 4\n(56) / (2) = 28, left: ((8 * 7) / 2) = 28, 4\n(28) - (4) = 24, left: (((8 * 7) / 2) - 4) = 24\nreach 24! expression: (((8 * 7) / 2) - 4)"}, {"input": "8 7 2 4\n", "output": "(7) + (2) = 9, left: (7 + 2) = 9, 8, 4\n(4) - (9) = -5, left: (4 - (7 + 2)) = -5, 8\n(8) / (-5) = -8/5, left: (8 / (4 - (7 + 2))) = -8/5\nroll back, left: (4 - (7 + 2)) = -5, 8\nroll back, left: (7 + 2) = 9, 8, 4\nroll back, left: 8 7 2 4\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, 8, 4\n(8) * (7/2) = 28, left: (8 * (7 / 2)) = 28, 4\n(28) - (4) = 24, left: ((8 * (7 / 2)) - 4) = 24\nreach 24! expression: ((8 * (7 / 2)) - 4)"}, {"input": "8 7 2 4\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 2, 4\n(2) * (7/8) = 7/4, left: (2 * (7 / 8)) = 7/4, 4\n(4) * (7/4) = 7, left: (4 * (2 * (7 / 8))) = 7\nroll back, left: (2 * (7 / 8)) = 7/4, 4\nroll back, left: (7 / 8) = 7/8, 2, 4\nroll back, left: 8 7 2 4\n(8) * (7) = 56, left: (8 * 7) = 56, 2, 4\n(56) / (2) = 28, left: ((8 * 7) / 2) = 28, 4\n(28) - (4) = 24, left: (((8 * 7) / 2) - 4) = 24\nreach 24! expression: (((8 * 7) / 2) - 4)"}, {"input": "8 7 2 4\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 7, 2\n(7) - (2) = 5, left: (7 - 2) = 5, (4 / 8) = 1/2\nroll back, left: (4 / 8) = 1/2, 7, 2\nroll back, left: 8 7 2 4\n(8) + (4) = 12, left: (8 + 4) = 12, 7, 2\nroll back, left: 8 7 2 4\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 7, 4\n(7) / (1/4) = 28, left: (7 / (2 / 8)) = 28, 4\n(28) - (4) = 24, left: ((7 / (2 / 8)) - 4) = 24\nreach 24! expression: ((7 / (2 / 8)) - 4)"}, {"input": "13 6 4 9\n", "output": "(6) + (9) = 15, left: (6 + 9) = 15, 13, 4\n(15) - (4) = 11, left: ((6 + 9) - 4) = 11, 13\n(13) + (11) = 24, left: (13 + ((6 + 9) - 4)) = 24\nreach 24! expression: (13 + ((6 + 9) - 4))"}, {"input": "13 6 4 9\n", "output": "(4) - (6) = -2, left: (4 - 6) = -2, 13, 9\n(9) - (-2) = 11, left: (9 - (4 - 6)) = 11, 13\n(13) + (11) = 24, left: (13 + (9 - (4 - 6))) = 24\nreach 24! expression: (13 + (9 - (4 - 6)))"}, {"input": "13 6 4 9\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 6, 9\n(6) + (9) = 15, left: (6 + 9) = 15, (4 - 13) = -9\n(15) - (-9) = 24, left: ((6 + 9) - (4 - 13)) = 24\nreach 24! expression: ((6 + 9) - (4 - 13))"}, {"input": "13 6 4 9\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 6, 9\n(-9) - (9) = -18, left: ((4 - 13) - 9) = -18, 6\n(6) - (-18) = 24, left: (6 - ((4 - 13) - 9)) = 24\nreach 24! expression: (6 - ((4 - 13) - 9))"}, {"input": "13 6 4 9\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 6, 9\n(6) - (-9) = 15, left: (6 - (4 - 13)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 - (4 - 13))) = 24\nreach 24! expression: (9 + (6 - (4 - 13)))"}, {"input": "13 6 4 9\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 13, 9\n(9) - (3/2) = 15/2, left: (9 - (6 / 4)) = 15/2, 13\nroll back, left: (6 / 4) = 3/2, 13, 9\n(13) + (9) = 22, left: (13 + 9) = 22, (6 / 4) = 3/2\nroll back, left: (6 / 4) = 3/2, 13, 9\nroll back, left: 13 6 4 9\n(4) - (6) = -2, left: (4 - 6) = -2, 13, 9\n(9) - (-2) = 11, left: (9 - (4 - 6)) = 11, 13\n(13) + (11) = 24, left: (13 + (9 - (4 - 6))) = 24\nreach 24! expression: (13 + (9 - (4 - 6)))"}, {"input": "13 6 4 9\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 13, 4\nroll back, left: 13 6 4 9\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 13, 4\n(13) + (4) = 17, left: (13 + 4) = 17, (9 / 6) = 3/2\nroll back, left: (9 / 6) = 3/2, 13, 4\nroll back, left: 13 6 4 9\n(6) + (9) = 15, left: (6 + 9) = 15, 13, 4\n(15) - (4) = 11, left: ((6 + 9) - 4) = 11, 13\n(13) + (11) = 24, left: (13 + ((6 + 9) - 4)) = 24\nreach 24! expression: (13 + ((6 + 9) - 4))"}, {"input": "13 6 4 9\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 6, 9\nroll back, left: 13 6 4 9\n(13) * (4) = 52, left: (13 * 4) = 52, 6, 9\n(9) + (52) = 61, left: (9 + (13 * 4)) = 61, 6\nroll back, left: (13 * 4) = 52, 6, 9\nroll back, left: 13 6 4 9\n(4) - (13) = -9, left: (4 - 13) = -9, 6, 9\n(6) + (9) = 15, left: (6 + 9) = 15, (4 - 13) = -9\n(15) - (-9) = 24, left: ((6 + 9) - (4 - 13)) = 24\nreach 24! expression: ((6 + 9) - (4 - 13))"}, {"input": "13 6 4 9\n", "output": "(13) + (4) = 17, left: (13 + 4) = 17, 6, 9\n(17) / (6) = 17/6, left: ((13 + 4) / 6) = 17/6, 9\nroll back, left: (13 + 4) = 17, 6, 9\n(9) - (17) = -8, left: (9 - (13 + 4)) = -8, 6\nroll back, left: (13 + 4) = 17, 6, 9\nroll back, left: 13 6 4 9\n(4) - (13) = -9, left: (4 - 13) = -9, 6, 9\n(6) - (-9) = 15, left: (6 - (4 - 13)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 - (4 - 13))) = 24\nreach 24! expression: (9 + (6 - (4 - 13)))"}, {"input": "7 2 1 10\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 2, 10\n(2) / (1/7) = 14, left: (2 / (1 / 7)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 / (1 / 7))) = 24\nreach 24! expression: (10 + (2 / (1 / 7)))"}, {"input": "7 2 1 10\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 2, 10\n(2) * (7) = 14, left: (2 * (7 / 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (7 / 1))) = 24\nreach 24! expression: (10 + (2 * (7 / 1)))"}, {"input": "7 2 1 10\n", "output": "(1) * (10) = 10, left: (1 * 10) = 10, 7, 2\n(7) * (2) = 14, left: (7 * 2) = 14, (1 * 10) = 10\n(10) + (14) = 24, left: ((1 * 10) + (7 * 2)) = 24\nreach 24! expression: ((1 * 10) + (7 * 2))"}, {"input": "7 2 1 10\n", "output": "(7) * (1) = 7, left: (7 * 1) = 7, 2, 10\n(2) * (7) = 14, left: (2 * (7 * 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (7 * 1))) = 24\nreach 24! expression: (10 + (2 * (7 * 1)))"}, {"input": "7 2 1 10\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 7, 2\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, (10 - 1) = 9\nroll back, left: (10 - 1) = 9, 7, 2\nroll back, left: 7 2 1 10\n(1) / (10) = 1/10, left: (1 / 10) = 1/10, 7, 2\nroll back, left: 7 2 1 10\n(1) * (10) = 10, left: (1 * 10) = 10, 7, 2\n(7) * (2) = 14, left: (7 * 2) = 14, (1 * 10) = 10\n(10) + (14) = 24, left: ((1 * 10) + (7 * 2)) = 24\nreach 24! expression: ((1 * 10) + (7 * 2))"}, {"input": "7 2 1 10\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 7, 1\nroll back, left: 7 2 1 10\n(1) - (7) = -6, left: (1 - 7) = -6, 2, 10\n(10) + (-6) = 4, left: (10 + (1 - 7)) = 4, 2\nroll back, left: (1 - 7) = -6, 2, 10\nroll back, left: 7 2 1 10\n(7) * (1) = 7, left: (7 * 1) = 7, 2, 10\n(2) * (7) = 14, left: (2 * (7 * 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (7 * 1))) = 24\nreach 24! expression: (10 + (2 * (7 * 1)))"}, {"input": "7 2 1 10\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 7, 1\n(-8) - (1) = -9, left: ((2 - 10) - 1) = -9, 7\nroll back, left: (2 - 10) = -8, 7, 1\nroll back, left: 7 2 1 10\n(1) - (7) = -6, left: (1 - 7) = -6, 2, 10\nroll back, left: 7 2 1 10\n(1) / (7) = 1/7, left: (1 / 7) = 1/7, 2, 10\n(2) / (1/7) = 14, left: (2 / (1 / 7)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 / (1 / 7))) = 24\nreach 24! expression: (10 + (2 / (1 / 7)))"}, {"input": "2 13 5 6\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 2, 6\n(18) - (6) = 12, left: ((13 + 5) - 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((13 + 5) - 6)) = 24\nreach 24! expression: (2 * ((13 + 5) - 6))"}, {"input": "2 13 5 6\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (13 - 5)) = 24\nreach 24! expression: ((6 / 2) * (13 - 5))"}, {"input": "2 13 5 6\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 2, 6\n(6) / (2) = 3, left: (6 / 2) = 3, (13 - 5) = 8\n(8) * (3) = 24, left: ((13 - 5) * (6 / 2)) = 24\nreach 24! expression: ((13 - 5) * (6 / 2))"}, {"input": "2 13 5 6\n", "output": "(13) * (5) = 65, left: (13 * 5) = 65, 2, 6\n(6) / (65) = 6/65, left: (6 / (13 * 5)) = 6/65, 2\nroll back, left: (13 * 5) = 65, 2, 6\nroll back, left: 2 13 5 6\n(5) / (13) = 5/13, left: (5 / 13) = 5/13, 2, 6\nroll back, left: 2 13 5 6\n(13) + (5) = 18, left: (13 + 5) = 18, 2, 6\n(18) - (6) = 12, left: ((13 + 5) - 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((13 + 5) - 6)) = 24\nreach 24! expression: (2 * ((13 + 5) - 6))"}, {"input": "2 13 5 6\n", "output": "(2) - (6) = -4, left: (2 - 6) = -4, 13, 5\nroll back, left: 2 13 5 6\n(6) - (2) = 4, left: (6 - 2) = 4, 13, 5\nroll back, left: 2 13 5 6\n(2) * (6) = 12, left: (2 * 6) = 12, 13, 5\nroll back, left: 2 13 5 6\n(6) / (2) = 3, left: (6 / 2) = 3, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (13 - 5)) = 24\nreach 24! expression: ((6 / 2) * (13 - 5))"}, {"input": "2 13 5 6\n", "output": "(2) + (13) = 15, left: (2 + 13) = 15, 5, 6\n(15) / (6) = 5/2, left: ((2 + 13) / 6) = 5/2, 5\nroll back, left: (2 + 13) = 15, 5, 6\nroll back, left: 2 13 5 6\n(2) * (6) = 12, left: (2 * 6) = 12, 13, 5\nroll back, left: 2 13 5 6\n(6) / (2) = 3, left: (6 / 2) = 3, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (13 - 5)) = 24\nreach 24! expression: ((6 / 2) * (13 - 5))"}, {"input": "2 13 5 6\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 13, 6\n(6) - (-3) = 9, left: (6 - (2 - 5)) = 9, 13\n(13) + (9) = 22, left: (13 + (6 - (2 - 5))) = 22\nroll back, left: (6 - (2 - 5)) = 9, 13\nroll back, left: (2 - 5) = -3, 13, 6\nroll back, left: 2 13 5 6\n(13) - (5) = 8, left: (13 - 5) = 8, 2, 6\n(6) / (2) = 3, left: (6 / 2) = 3, (13 - 5) = 8\n(8) * (3) = 24, left: ((13 - 5) * (6 / 2)) = 24\nreach 24! expression: ((13 - 5) * (6 / 2))"}, {"input": "2 13 5 6\n", "output": "(13) / (5) = 13/5, left: (13 / 5) = 13/5, 2, 6\nroll back, left: 2 13 5 6\n(13) + (5) = 18, left: (13 + 5) = 18, 2, 6\n(2) - (18) = -16, left: (2 - (13 + 5)) = -16, 6\n(6) - (-16) = 22, left: (6 - (2 - (13 + 5))) = 22\nroll back, left: (2 - (13 + 5)) = -16, 6\nroll back, left: (13 + 5) = 18, 2, 6\n(18) - (6) = 12, left: ((13 + 5) - 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((13 + 5) - 6)) = 24\nreach 24! expression: (2 * ((13 + 5) - 6))"}, {"input": "2 11 11 12\n", "output": "(12) / (11) = 12/11, left: (12 / 11) = 12/11, 2, 11\n(2) * (12/11) = 24/11, left: (2 * (12 / 11)) = 24/11, 11\n(11) * (24/11) = 24, left: (11 * (2 * (12 / 11))) = 24\nreach 24! expression: (11 * (2 * (12 / 11)))"}, {"input": "2 11 11 12\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (12 - 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (12 - 11))) = 24\nreach 24! expression: (2 * (11 + (12 - 11)))"}, {"input": "2 11 11 12\n", "output": "(11) + (12) = 23, left: (11 + 12) = 23, 2, 11\n(23) - (11) = 12, left: ((11 + 12) - 11) = 12, 2\n(2) * (12) = 24, left: (2 * ((11 + 12) - 11)) = 24\nreach 24! expression: (2 * ((11 + 12) - 11))"}, {"input": "2 11 11 12\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 2, 12\n(12) / (1) = 12, left: (12 / (11 / 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (11 / 11))) = 24\nreach 24! expression: (2 * (12 / (11 / 11)))"}, {"input": "2 11 11 12\n", "output": "(2) * (11) = 22, left: (2 * 11) = 22, 11, 12\n(12) / (11) = 12/11, left: (12 / 11) = 12/11, (2 * 11) = 22\n(22) * (12/11) = 24, left: ((2 * 11) * (12 / 11)) = 24\nreach 24! expression: ((2 * 11) * (12 / 11))"}, {"input": "2 11 11 12\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 2, 12\n(12) / (1) = 12, left: (12 / (11 / 11)) = 12, 2\n(2) / (12) = 1/6, left: (2 / (12 / (11 / 11))) = 1/6\nroll back, left: (12 / (11 / 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (11 / 11))) = 24\nreach 24! expression: (2 * (12 / (11 / 11)))"}, {"input": "2 11 11 12\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 2, 12\n(12) / (1) = 12, left: (12 / (11 / 11)) = 12, 2\n(2) / (12) = 1/6, left: (2 / (12 / (11 / 11))) = 1/6\nroll back, left: (12 / (11 / 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (11 / 11))) = 24\nreach 24! expression: (2 * (12 / (11 / 11)))"}, {"input": "2 11 11 12\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 2, 12\n(12) / (1) = 12, left: (12 / (11 / 11)) = 12, 2\n(2) / (12) = 1/6, left: (2 / (12 / (11 / 11))) = 1/6\nroll back, left: (12 / (11 / 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (11 / 11))) = 24\nreach 24! expression: (2 * (12 / (11 / 11)))"}, {"input": "2 11 11 12\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 2, 12\n(12) / (1) = 12, left: (12 / (11 / 11)) = 12, 2\n(2) / (12) = 1/6, left: (2 / (12 / (11 / 11))) = 1/6\nroll back, left: (12 / (11 / 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (11 / 11))) = 24\nreach 24! expression: (2 * (12 / (11 / 11)))"}, {"input": "2 10 9 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (9 - 5) = 4\n(4) + (20) = 24, left: ((9 - 5) + (2 * 10)) = 24\nreach 24! expression: ((9 - 5) + (2 * 10))"}, {"input": "2 10 9 5\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (5 - 9) = -4\n(20) - (-4) = 24, left: ((2 * 10) - (5 - 9)) = 24\nreach 24! expression: ((2 * 10) - (5 - 9))"}, {"input": "2 10 9 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 2, 10\n(10) - (4) = 6, left: (10 - (9 - 5)) = 6, 2\nroll back, left: (9 - 5) = 4, 2, 10\n(4) / (10) = 2/5, left: ((9 - 5) / 10) = 2/5, 2\nroll back, left: (9 - 5) = 4, 2, 10\n(10) / (2) = 5, left: (10 / 2) = 5, (9 - 5) = 4\nroll back, left: (9 - 5) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (9 - 5) = 4\n(4) + (20) = 24, left: ((9 - 5) + (2 * 10)) = 24\nreach 24! expression: ((9 - 5) + (2 * 10))"}, {"input": "2 10 9 5\n", "output": "(10) / (9) = 10/9, left: (10 / 9) = 10/9, 2, 5\nroll back, left: 2 10 9 5\n(10) - (9) = 1, left: (10 - 9) = 1, 2, 5\nroll back, left: 2 10 9 5\n(2) * (9) = 18, left: (2 * 9) = 18, 10, 5\nroll back, left: 2 10 9 5\n(5) - (9) = -4, left: (5 - 9) = -4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (5 - 9) = -4\n(20) - (-4) = 24, left: ((2 * 10) - (5 - 9)) = 24\nreach 24! expression: ((2 * 10) - (5 - 9))"}, {"input": "2 10 9 5\n", "output": "(9) / (5) = 9/5, left: (9 / 5) = 9/5, 2, 10\n(10) * (9/5) = 18, left: (10 * (9 / 5)) = 18, 2\nroll back, left: (9 / 5) = 9/5, 2, 10\nroll back, left: 2 10 9 5\n(9) + (5) = 14, left: (9 + 5) = 14, 2, 10\nroll back, left: 2 10 9 5\n(9) - (5) = 4, left: (9 - 5) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (9 - 5) = 4\n(4) + (20) = 24, left: ((9 - 5) + (2 * 10)) = 24\nreach 24! expression: ((9 - 5) + (2 * 10))"}, {"input": "2 10 9 5\n", "output": "(10) * (9) = 90, left: (10 * 9) = 90, 2, 5\nroll back, left: 2 10 9 5\n(2) / (9) = 2/9, left: (2 / 9) = 2/9, 10, 5\nroll back, left: 2 10 9 5\n(5) - (2) = 3, left: (5 - 2) = 3, 10, 9\nroll back, left: 2 10 9 5\n(5) - (9) = -4, left: (5 - 9) = -4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (5 - 9) = -4\n(20) - (-4) = 24, left: ((2 * 10) - (5 - 9)) = 24\nreach 24! expression: ((2 * 10) - (5 - 9))"}, {"input": "2 10 9 5\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 10, 5\n(10) * (7) = 70, left: (10 * (9 - 2)) = 70, 5\n(5) / (70) = 1/14, left: (5 / (10 * (9 - 2))) = 1/14\nroll back, left: (10 * (9 - 2)) = 70, 5\nroll back, left: (9 - 2) = 7, 10, 5\nroll back, left: 2 10 9 5\n(9) - (5) = 4, left: (9 - 5) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (9 - 5) = 4\n(4) + (20) = 24, left: ((9 - 5) + (2 * 10)) = 24\nreach 24! expression: ((9 - 5) + (2 * 10))"}, {"input": "2 1 3 7\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 2, 1\n(1) + (21) = 22, left: (1 + (3 * 7)) = 22, 2\n(2) + (22) = 24, left: (2 + (1 + (3 * 7))) = 24\nreach 24! expression: (2 + (1 + (3 * 7)))"}, {"input": "2 1 3 7\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 2, 3\n(2) - (-6) = 8, left: (2 - (1 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 - (1 - 7))) = 24\nreach 24! expression: (3 * (2 - (1 - 7)))"}, {"input": "2 1 3 7\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 1, 3\n(9) - (1) = 8, left: ((2 + 7) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((2 + 7) - 1)) = 24\nreach 24! expression: (3 * ((2 + 7) - 1))"}, {"input": "2 1 3 7\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 2, 3\n(2) + (6) = 8, left: (2 + (7 - 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (7 - 1))) = 24\nreach 24! expression: (3 * (2 + (7 - 1)))"}, {"input": "2 1 3 7\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 3, 7\n(7) + (1) = 8, left: (7 + (2 - 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (2 - 1))) = 24\nreach 24! expression: (3 * (7 + (2 - 1)))"}, {"input": "2 1 3 7\n", "output": "(2) * (1) = 2, left: (2 * 1) = 2, 3, 7\n(2) - (7) = -5, left: ((2 * 1) - 7) = -5, 3\nroll back, left: (2 * 1) = 2, 3, 7\nroll back, left: 2 1 3 7\n(2) - (1) = 1, left: (2 - 1) = 1, 3, 7\n(1) - (7) = -6, left: ((2 - 1) - 7) = -6, 3\nroll back, left: (2 - 1) = 1, 3, 7\n(7) + (1) = 8, left: (7 + (2 - 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (2 - 1))) = 24\nreach 24! expression: (3 * (7 + (2 - 1)))"}, {"input": "2 1 3 7\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 2, 3\nroll back, left: 2 1 3 7\n(7) - (1) = 6, left: (7 - 1) = 6, 2, 3\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, (7 - 1) = 6\nroll back, left: (7 - 1) = 6, 2, 3\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, (7 - 1) = 6\nroll back, left: (7 - 1) = 6, 2, 3\n(2) + (6) = 8, left: (2 + (7 - 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (7 - 1))) = 24\nreach 24! expression: (3 * (2 + (7 - 1)))"}, {"input": "2 1 3 7\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (2 + 7) = 9\nroll back, left: (2 + 7) = 9, 1, 3\n(3) - (9) = -6, left: (3 - (2 + 7)) = -6, 1\nroll back, left: (2 + 7) = 9, 1, 3\n(1) / (9) = 1/9, left: (1 / (2 + 7)) = 1/9, 3\nroll back, left: (2 + 7) = 9, 1, 3\n(9) - (1) = 8, left: ((2 + 7) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((2 + 7) - 1)) = 24\nreach 24! expression: (3 * ((2 + 7) - 1))"}, {"input": "2 1 3 7\n", "output": "(3) + (7) = 10, left: (3 + 7) = 10, 2, 1\nroll back, left: 2 1 3 7\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 2, 1\n(1) * (7/3) = 7/3, left: (1 * (7 / 3)) = 7/3, 2\nroll back, left: (7 / 3) = 7/3, 2, 1\nroll back, left: 2 1 3 7\n(3) * (7) = 21, left: (3 * 7) = 21, 2, 1\n(1) + (21) = 22, left: (1 + (3 * 7)) = 22, 2\n(2) + (22) = 24, left: (2 + (1 + (3 * 7))) = 24\nreach 24! expression: (2 + (1 + (3 * 7)))"}, {"input": "2 1 3 7\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 2, 3\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, (1 - 7) = -6\nroll back, left: (1 - 7) = -6, 2, 3\n(-6) - (3) = -9, left: ((1 - 7) - 3) = -9, 2\n(-9) / (2) = -9/2, left: (((1 - 7) - 3) / 2) = -9/2\nroll back, left: ((1 - 7) - 3) = -9, 2\nroll back, left: (1 - 7) = -6, 2, 3\n(2) - (-6) = 8, left: (2 - (1 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 - (1 - 7))) = 24\nreach 24! expression: (3 * (2 - (1 - 7)))"}, {"input": "4 2 7 2\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 4, 2\n(2) * (14) = 28, left: (2 * (2 * 7)) = 28, 4\n(28) - (4) = 24, left: ((2 * (2 * 7)) - 4) = 24\nreach 24! expression: ((2 * (2 * 7)) - 4)"}, {"input": "4 2 7 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (2 / 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (2 / 2))) = 24\nreach 24! expression: (4 * (7 - (2 / 2)))"}, {"input": "4 2 7 2\n", "output": "(4) + (7) = 11, left: (4 + 7) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (4 + 7)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (4 + 7))) = 24\nreach 24! expression: (2 + (2 * (4 + 7)))"}, {"input": "4 2 7 2\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 4, 2\n(2) * (14) = 28, left: (2 * (7 * 2)) = 28, 4\n(28) - (4) = 24, left: ((2 * (7 * 2)) - 4) = 24\nreach 24! expression: ((2 * (7 * 2)) - 4)"}, {"input": "4 2 7 2\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 4, 2\nroll back, left: 4 2 7 2\n(2) + (7) = 9, left: (2 + 7) = 9, 4, 2\n(4) * (2) = 8, left: (4 * 2) = 8, (2 + 7) = 9\nroll back, left: (2 + 7) = 9, 4, 2\nroll back, left: 4 2 7 2\n(2) * (7) = 14, left: (2 * 7) = 14, 4, 2\n(2) * (14) = 28, left: (2 * (2 * 7)) = 28, 4\n(28) - (4) = 24, left: ((2 * (2 * 7)) - 4) = 24\nreach 24! expression: ((2 * (2 * 7)) - 4)"}, {"input": "4 2 7 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 4, 7\n(4) * (7) = 28, left: (4 * 7) = 28, (2 / 2) = 1\nroll back, left: (2 / 2) = 1, 4, 7\n(7) + (1) = 8, left: (7 + (2 / 2)) = 8, 4\n(4) - (8) = -4, left: (4 - (7 + (2 / 2))) = -4\nroll back, left: (7 + (2 / 2)) = 8, 4\nroll back, left: (2 / 2) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (2 / 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (2 / 2))) = 24\nreach 24! expression: (4 * (7 - (2 / 2)))"}, {"input": "4 2 7 2\n", "output": "(4) + (7) = 11, left: (4 + 7) = 11, 2, 2\n(2) + (11) = 13, left: (2 + (4 + 7)) = 13, 2\n(13) / (2) = 13/2, left: ((2 + (4 + 7)) / 2) = 13/2\nroll back, left: (2 + (4 + 7)) = 13, 2\n(2) * (13) = 26, left: (2 * (2 + (4 + 7))) = 26\nroll back, left: (2 + (4 + 7)) = 13, 2\nroll back, left: (4 + 7) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (4 + 7)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (4 + 7))) = 24\nreach 24! expression: (2 + (2 * (4 + 7)))"}, {"input": "4 2 7 2\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 4, 2\n(4) * (14) = 56, left: (4 * (7 * 2)) = 56, 2\nroll back, left: (7 * 2) = 14, 4, 2\n(2) - (14) = -12, left: (2 - (7 * 2)) = -12, 4\n(4) / (-12) = -1/3, left: (4 / (2 - (7 * 2))) = -1/3\nroll back, left: (2 - (7 * 2)) = -12, 4\nroll back, left: (7 * 2) = 14, 4, 2\n(2) * (14) = 28, left: (2 * (7 * 2)) = 28, 4\n(28) - (4) = 24, left: ((2 * (7 * 2)) - 4) = 24\nreach 24! expression: ((2 * (7 * 2)) - 4)"}, {"input": "4 2 7 2\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (7 / 2) = 7/2\n(7/2) + (6) = 19/2, left: ((7 / 2) + (4 + 2)) = 19/2\nroll back, left: (4 + 2) = 6, (7 / 2) = 7/2\nroll back, left: (7 / 2) = 7/2, 4, 2\nroll back, left: 4 2 7 2\n(7) * (2) = 14, left: (7 * 2) = 14, 4, 2\n(2) * (14) = 28, left: (2 * (7 * 2)) = 28, 4\n(28) - (4) = 24, left: ((2 * (7 * 2)) - 4) = 24\nreach 24! expression: ((2 * (7 * 2)) - 4)"}, {"input": "1 3 5 9\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (9 - 3)) = 24\nreach 24! expression: ((5 - 1) * (9 - 3))"}, {"input": "1 3 5 9\n", "output": "(1) / (5) = 1/5, left: (1 / 5) = 1/5, 3, 9\n(3) / (1/5) = 15, left: (3 / (1 / 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (3 / (1 / 5))) = 24\nreach 24! expression: (9 + (3 / (1 / 5)))"}, {"input": "1 3 5 9\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 3, 5\n(3) * (5) = 15, left: (3 * 5) = 15, (1 * 9) = 9\n(9) + (15) = 24, left: ((1 * 9) + (3 * 5)) = 24\nreach 24! expression: ((1 * 9) + (3 * 5))"}, {"input": "1 3 5 9\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 1, 5\n(1) - (5) = -4, left: (1 - 5) = -4, (3 - 9) = -6\n(-6) * (-4) = 24, left: ((3 - 9) * (1 - 5)) = 24\nreach 24! expression: ((3 - 9) * (1 - 5))"}, {"input": "1 3 5 9\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 3, 5\n(3) * (5) = 15, left: (3 * 5) = 15, (1 + 9) = 10\nroll back, left: (1 + 9) = 10, 3, 5\nroll back, left: 1 3 5 9\n(1) - (9) = -8, left: (1 - 9) = -8, 3, 5\nroll back, left: 1 3 5 9\n(1) * (9) = 9, left: (1 * 9) = 9, 3, 5\n(3) * (5) = 15, left: (3 * 5) = 15, (1 * 9) = 9\n(9) + (15) = 24, left: ((1 * 9) + (3 * 5)) = 24\nreach 24! expression: ((1 * 9) + (3 * 5))"}, {"input": "1 3 5 9\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 3, 5\n(5) / (-8) = -5/8, left: (5 / (1 - 9)) = -5/8, 3\nroll back, left: (1 - 9) = -8, 3, 5\n(-8) - (5) = -13, left: ((1 - 9) - 5) = -13, 3\nroll back, left: (1 - 9) = -8, 3, 5\nroll back, left: 1 3 5 9\n(1) * (9) = 9, left: (1 * 9) = 9, 3, 5\n(3) * (5) = 15, left: (3 * 5) = 15, (1 * 9) = 9\n(9) + (15) = 24, left: ((1 * 9) + (3 * 5)) = 24\nreach 24! expression: ((1 * 9) + (3 * 5))"}, {"input": "1 3 5 9\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (3 / 9) = 1/3\nroll back, left: (3 / 9) = 1/3, 1, 5\nroll back, left: 1 3 5 9\n(3) * (9) = 27, left: (3 * 9) = 27, 1, 5\nroll back, left: 1 3 5 9\n(3) - (9) = -6, left: (3 - 9) = -6, 1, 5\n(1) - (5) = -4, left: (1 - 5) = -4, (3 - 9) = -6\n(-6) * (-4) = 24, left: ((3 - 9) * (1 - 5)) = 24\nreach 24! expression: ((3 - 9) * (1 - 5))"}, {"input": "1 3 5 9\n", "output": "(1) / (5) = 1/5, left: (1 / 5) = 1/5, 3, 9\n(3) / (1/5) = 15, left: (3 / (1 / 5)) = 15, 9\n(15) / (9) = 5/3, left: ((3 / (1 / 5)) / 9) = 5/3\nroll back, left: (3 / (1 / 5)) = 15, 9\n(9) * (15) = 135, left: (9 * (3 / (1 / 5))) = 135\nroll back, left: (3 / (1 / 5)) = 15, 9\n(9) / (15) = 3/5, left: (9 / (3 / (1 / 5))) = 3/5\nroll back, left: (3 / (1 / 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (3 / (1 / 5))) = 24\nreach 24! expression: (9 + (3 / (1 / 5)))"}, {"input": "1 3 5 9\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 3, 9\n(3) * (9) = 27, left: (3 * 9) = 27, (5 - 1) = 4\nroll back, left: (5 - 1) = 4, 3, 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, (5 - 1) = 4\nroll back, left: (5 - 1) = 4, 3, 9\n(3) - (9) = -6, left: (3 - 9) = -6, (5 - 1) = 4\nroll back, left: (5 - 1) = 4, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (9 - 3)) = 24\nreach 24! expression: ((5 - 1) * (9 - 3))"}, {"input": "3 12 11 1\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 3, 12\n(3) * (12) = 36, left: (3 * 12) = 36, (11 + 1) = 12\n(36) - (12) = 24, left: ((3 * 12) - (11 + 1)) = 24\nreach 24! expression: ((3 * 12) - (11 + 1))"}, {"input": "3 12 11 1\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 11, 1\n(36) - (1) = 35, left: ((3 * 12) - 1) = 35, 11\n(35) - (11) = 24, left: (((3 * 12) - 1) - 11) = 24\nreach 24! expression: (((3 * 12) - 1) - 11)"}, {"input": "3 12 11 1\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 3, 12\n(3) * (12) = 36, left: (3 * (11 + 1)) = 36, 12\n(36) - (12) = 24, left: ((3 * (11 + 1)) - 12) = 24\nreach 24! expression: ((3 * (11 + 1)) - 12)"}, {"input": "3 12 11 1\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 3, 12\nroll back, left: 3 12 11 1\n(11) * (1) = 11, left: (11 * 1) = 11, 3, 12\nroll back, left: 3 12 11 1\n(1) / (11) = 1/11, left: (1 / 11) = 1/11, 3, 12\nroll back, left: 3 12 11 1\n(11) + (1) = 12, left: (11 + 1) = 12, 3, 12\n(3) * (12) = 36, left: (3 * (11 + 1)) = 36, 12\n(36) - (12) = 24, left: ((3 * (11 + 1)) - 12) = 24\nreach 24! expression: ((3 * (11 + 1)) - 12)"}, {"input": "3 9 3 13\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (13 - 9)) = 24\nreach 24! expression: ((3 + 3) * (13 - 9))"}, {"input": "3 9 3 13\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (13 - 9) = 4\n(4) * (6) = 24, left: ((13 - 9) * (3 + 3)) = 24\nreach 24! expression: ((13 - 9) * (3 + 3))"}, {"input": "3 9 3 13\n", "output": "(13) / (3) = 13/3, left: (13 / 3) = 13/3, 9, 3\n(3) / (13/3) = 9/13, left: (3 / (13 / 3)) = 9/13, 9\nroll back, left: (13 / 3) = 13/3, 9, 3\nroll back, left: 3 9 3 13\n(3) * (13) = 39, left: (3 * 13) = 39, 9, 3\nroll back, left: 3 9 3 13\n(13) - (9) = 4, left: (13 - 9) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (13 - 9) = 4\n(4) * (6) = 24, left: ((13 - 9) * (3 + 3)) = 24\nreach 24! expression: ((13 - 9) * (3 + 3))"}, {"input": "3 9 3 13\n", "output": "(3) + (13) = 16, left: (3 + 13) = 16, 9, 3\n(9) / (3) = 3, left: (9 / 3) = 3, (3 + 13) = 16\nroll back, left: (3 + 13) = 16, 9, 3\nroll back, left: 3 9 3 13\n(13) / (3) = 13/3, left: (13 / 3) = 13/3, 9, 3\nroll back, left: 3 9 3 13\n(3) + (3) = 6, left: (3 + 3) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (13 - 9)) = 24\nreach 24! expression: ((3 + 3) * (13 - 9))"}, {"input": "3 9 3 13\n", "output": "(13) / (3) = 13/3, left: (13 / 3) = 13/3, 3, 9\nroll back, left: 3 9 3 13\n(9) * (3) = 27, left: (9 * 3) = 27, 3, 13\n(3) * (27) = 81, left: (3 * (9 * 3)) = 81, 13\nroll back, left: (9 * 3) = 27, 3, 13\nroll back, left: 3 9 3 13\n(13) - (9) = 4, left: (13 - 9) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (13 - 9) = 4\n(4) * (6) = 24, left: ((13 - 9) * (3 + 3)) = 24\nreach 24! expression: ((13 - 9) * (3 + 3))"}, {"input": "3 9 3 13\n", "output": "(9) + (3) = 12, left: (9 + 3) = 12, 3, 13\nroll back, left: 3 9 3 13\n(13) - (3) = 10, left: (13 - 3) = 10, 9, 3\n(3) / (10) = 3/10, left: (3 / (13 - 3)) = 3/10, 9\nroll back, left: (13 - 3) = 10, 9, 3\nroll back, left: 3 9 3 13\n(3) + (3) = 6, left: (3 + 3) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (13 - 9)) = 24\nreach 24! expression: ((3 + 3) * (13 - 9))"}, {"input": "3 9 3 13\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 3, 13\nroll back, left: 3 9 3 13\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, 3, 13\n(3) + (1/3) = 10/3, left: (3 + (3 / 9)) = 10/3, 13\nroll back, left: (3 / 9) = 1/3, 3, 13\nroll back, left: 3 9 3 13\n(13) - (9) = 4, left: (13 - 9) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (13 - 9) = 4\n(4) * (6) = 24, left: ((13 - 9) * (3 + 3)) = 24\nreach 24! expression: ((13 - 9) * (3 + 3))"}, {"input": "13 9 6 12\n", "output": "(13) + (9) = 22, left: (13 + 9) = 22, 6, 12\n(12) / (6) = 2, left: (12 / 6) = 2, (13 + 9) = 22\n(22) + (2) = 24, left: ((13 + 9) + (12 / 6)) = 24\nreach 24! expression: ((13 + 9) + (12 / 6))"}, {"input": "13 9 6 12\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 9, 12\n(9) - (7) = 2, left: (9 - (13 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (9 - (13 - 6))) = 24\nreach 24! expression: (12 * (9 - (13 - 6)))"}, {"input": "13 9 6 12\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 13, 12\n(15) - (13) = 2, left: ((9 + 6) - 13) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 + 6) - 13)) = 24\nreach 24! expression: (12 * ((9 + 6) - 13))"}, {"input": "13 9 6 12\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 13, 9\n(9) - (13) = -4, left: (9 - 13) = -4, (6 - 12) = -6\n(-6) * (-4) = 24, left: ((6 - 12) * (9 - 13)) = 24\nreach 24! expression: ((6 - 12) * (9 - 13))"}, {"input": "12 2 9 6\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (6 - 2)) = 36, 12\n(36) - (12) = 24, left: ((9 * (6 - 2)) - 12) = 24\nreach 24! expression: ((9 * (6 - 2)) - 12)"}, {"input": "12 2 9 6\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (12 - 6) = 6\n(6) + (18) = 24, left: ((12 - 6) + (2 * 9)) = 24\nreach 24! expression: ((12 - 6) + (2 * 9))"}, {"input": "12 2 9 6\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 12, 6\n(12) + (18) = 30, left: (12 + (2 * 9)) = 30, 6\n(30) - (6) = 24, left: ((12 + (2 * 9)) - 6) = 24\nreach 24! expression: ((12 + (2 * 9)) - 6)"}, {"input": "12 2 9 6\n", "output": "(9) / (6) = 3/2, left: (9 / 6) = 3/2, 12, 2\n(2) - (3/2) = 1/2, left: (2 - (9 / 6)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (2 - (9 / 6))) = 24\nreach 24! expression: (12 / (2 - (9 / 6)))"}, {"input": "12 2 9 6\n", "output": "(2) * (6) = 12, left: (2 * 6) = 12, 12, 9\n(12) - (12) = 0, left: (12 - (2 * 6)) = 0, 9\nroll back, left: (2 * 6) = 12, 12, 9\n(12) / (12) = 1, left: (12 / (2 * 6)) = 1, 9\nroll back, left: (2 * 6) = 12, 12, 9\nroll back, left: 12 2 9 6\n(6) - (2) = 4, left: (6 - 2) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (6 - 2)) = 36, 12\n(36) - (12) = 24, left: ((9 * (6 - 2)) - 12) = 24\nreach 24! expression: ((9 * (6 - 2)) - 12)"}, {"input": "12 2 9 6\n", "output": "(12) * (6) = 72, left: (12 * 6) = 72, 2, 9\n(9) - (2) = 7, left: (9 - 2) = 7, (12 * 6) = 72\nroll back, left: (12 * 6) = 72, 2, 9\n(9) - (72) = -63, left: (9 - (12 * 6)) = -63, 2\nroll back, left: (12 * 6) = 72, 2, 9\nroll back, left: 12 2 9 6\n(12) - (6) = 6, left: (12 - 6) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (12 - 6) = 6\n(6) + (18) = 24, left: ((12 - 6) + (2 * 9)) = 24\nreach 24! expression: ((12 - 6) + (2 * 9))"}, {"input": "12 2 9 6\n", "output": "(9) * (6) = 54, left: (9 * 6) = 54, 12, 2\n(12) / (54) = 2/9, left: (12 / (9 * 6)) = 2/9, 2\nroll back, left: (9 * 6) = 54, 12, 2\nroll back, left: 12 2 9 6\n(9) + (6) = 15, left: (9 + 6) = 15, 12, 2\nroll back, left: 12 2 9 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 12, 2\n(2) - (3/2) = 1/2, left: (2 - (9 / 6)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (2 - (9 / 6))) = 24\nreach 24! expression: (12 / (2 - (9 / 6)))"}, {"input": "12 2 9 6\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 9, 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, (12 * 2) = 24\nroll back, left: (12 * 2) = 24, 9, 6\nroll back, left: 12 2 9 6\n(2) - (9) = -7, left: (2 - 9) = -7, 12, 6\nroll back, left: 12 2 9 6\n(2) * (9) = 18, left: (2 * 9) = 18, 12, 6\n(12) + (18) = 30, left: (12 + (2 * 9)) = 30, 6\n(30) - (6) = 24, left: ((12 + (2 * 9)) - 6) = 24\nreach 24! expression: ((12 + (2 * 9)) - 6)"}, {"input": "3 3 4 6\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 4, 6\n(4) * (6) = 24, left: (4 * 6) = 24, (3 - 3) = 0\n(0) + (24) = 24, left: ((3 - 3) + (4 * 6)) = 24\nreach 24! expression: ((3 - 3) + (4 * 6))"}, {"input": "3 3 4 6\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 3, 6\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, (3 * 4) = 12\n(12) / (1/2) = 24, left: ((3 * 4) / (3 / 6)) = 24\nreach 24! expression: ((3 * 4) / (3 / 6))"}, {"input": "3 3 4 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 3, 3\n(3) - (24) = -21, left: (3 - (4 * 6)) = -21, 3\n(3) - (-21) = 24, left: (3 - (3 - (4 * 6))) = 24\nreach 24! expression: (3 - (3 - (4 * 6)))"}, {"input": "3 3 4 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 3, 3\n(3) * (24) = 72, left: (3 * (4 * 6)) = 72, 3\n(72) / (3) = 24, left: ((3 * (4 * 6)) / 3) = 24\nreach 24! expression: ((3 * (4 * 6)) / 3)"}, {"input": "3 3 4 6\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 3, 6\n(6) * (4/3) = 8, left: (6 * (4 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 * (4 / 3))) = 24\nreach 24! expression: (3 * (6 * (4 / 3)))"}, {"input": "3 3 4 6\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 3, 3\nroll back, left: 3 3 4 6\n(4) - (6) = -2, left: (4 - 6) = -2, 3, 3\n(-2) - (3) = -5, left: ((4 - 6) - 3) = -5, 3\nroll back, left: (4 - 6) = -2, 3, 3\nroll back, left: 3 3 4 6\n(4) * (6) = 24, left: (4 * 6) = 24, 3, 3\n(3) - (24) = -21, left: (3 - (4 * 6)) = -21, 3\n(3) - (-21) = 24, left: (3 - (3 - (4 * 6))) = 24\nreach 24! expression: (3 - (3 - (4 * 6)))"}, {"input": "3 3 4 6\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (6 - 4) = 2\nroll back, left: (6 - 4) = 2, 3, 3\nroll back, left: 3 3 4 6\n(4) - (6) = -2, left: (4 - 6) = -2, 3, 3\nroll back, left: 3 3 4 6\n(4) * (6) = 24, left: (4 * 6) = 24, 3, 3\n(3) * (24) = 72, left: (3 * (4 * 6)) = 72, 3\n(72) / (3) = 24, left: ((3 * (4 * 6)) / 3) = 24\nreach 24! expression: ((3 * (4 * 6)) / 3)"}, {"input": "3 3 4 6\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 3, 6\n(4/3) / (6) = 2/9, left: ((4 / 3) / 6) = 2/9, 3\n(3) - (2/9) = 25/9, left: (3 - ((4 / 3) / 6)) = 25/9\nroll back, left: ((4 / 3) / 6) = 2/9, 3\nroll back, left: (4 / 3) = 4/3, 3, 6\n(6) * (4/3) = 8, left: (6 * (4 / 3)) = 8, 3\n(3) + (8) = 11, left: (3 + (6 * (4 / 3))) = 11\nroll back, left: (6 * (4 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 * (4 / 3))) = 24\nreach 24! expression: (3 * (6 * (4 / 3)))"}, {"input": "3 3 4 6\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 4, 6\n(6) * (6) = 36, left: (6 * (3 + 3)) = 36, 4\nroll back, left: (3 + 3) = 6, 4, 6\n(4) * (6) = 24, left: (4 * 6) = 24, (3 + 3) = 6\nroll back, left: (3 + 3) = 6, 4, 6\nroll back, left: 3 3 4 6\n(3) - (3) = 0, left: (3 - 3) = 0, 4, 6\n(4) * (6) = 24, left: (4 * 6) = 24, (3 - 3) = 0\n(0) + (24) = 24, left: ((3 - 3) + (4 * 6)) = 24\nreach 24! expression: ((3 - 3) + (4 * 6))"}, {"input": "7 9 8 4\n", "output": "(8) + (4) = 12, left: (8 + 4) = 12, 7, 9\n(9) - (7) = 2, left: (9 - 7) = 2, (8 + 4) = 12\n(12) * (2) = 24, left: ((8 + 4) * (9 - 7)) = 24\nreach 24! expression: ((8 + 4) * (9 - 7))"}, {"input": "7 9 8 4\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 8, 4\n(8) + (4) = 12, left: (8 + 4) = 12, (9 - 7) = 2\n(2) * (12) = 24, left: ((9 - 7) * (8 + 4)) = 24\nreach 24! expression: ((9 - 7) * (8 + 4))"}, {"input": "7 9 8 4\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (9 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (9 - 8))) = 24\nreach 24! expression: (4 * (7 - (9 - 8)))"}, {"input": "7 9 8 4\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 8, 4\n(8) - (2) = 6, left: (8 - (9 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (8 - (9 - 7))) = 24\nreach 24! expression: (4 * (8 - (9 - 7)))"}, {"input": "7 9 8 4\n", "output": "(8) + (4) = 12, left: (8 + 4) = 12, 7, 9\n(12) - (7) = 5, left: ((8 + 4) - 7) = 5, 9\n(9) + (5) = 14, left: (9 + ((8 + 4) - 7)) = 14\nroll back, left: ((8 + 4) - 7) = 5, 9\nroll back, left: (8 + 4) = 12, 7, 9\n(9) / (7) = 9/7, left: (9 / 7) = 9/7, (8 + 4) = 12\nroll back, left: (8 + 4) = 12, 7, 9\n(9) - (7) = 2, left: (9 - 7) = 2, (8 + 4) = 12\n(12) * (2) = 24, left: ((8 + 4) * (9 - 7)) = 24\nreach 24! expression: ((8 + 4) * (9 - 7))"}, {"input": "7 9 8 4\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 7, 9\nroll back, left: 7 9 8 4\n(4) - (8) = -4, left: (4 - 8) = -4, 7, 9\n(-4) / (9) = -4/9, left: ((4 - 8) / 9) = -4/9, 7\nroll back, left: (4 - 8) = -4, 7, 9\nroll back, left: 7 9 8 4\n(8) + (4) = 12, left: (8 + 4) = 12, 7, 9\n(9) - (7) = 2, left: (9 - 7) = 2, (8 + 4) = 12\n(12) * (2) = 24, left: ((8 + 4) * (9 - 7)) = 24\nreach 24! expression: ((8 + 4) * (9 - 7))"}, {"input": "7 9 8 4\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 8, 4\n(16) / (8) = 2, left: ((7 + 9) / 8) = 2, 4\nroll back, left: (7 + 9) = 16, 8, 4\nroll back, left: 7 9 8 4\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, 8, 4\nroll back, left: 7 9 8 4\n(9) - (7) = 2, left: (9 - 7) = 2, 8, 4\n(8) + (4) = 12, left: (8 + 4) = 12, (9 - 7) = 2\n(2) * (12) = 24, left: ((9 - 7) * (8 + 4)) = 24\nreach 24! expression: ((9 - 7) * (8 + 4))"}, {"input": "7 9 8 4\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 8, 4\n(16) - (4) = 12, left: ((7 + 9) - 4) = 12, 8\n(12) / (8) = 3/2, left: (((7 + 9) - 4) / 8) = 3/2\nroll back, left: ((7 + 9) - 4) = 12, 8\nroll back, left: (7 + 9) = 16, 8, 4\nroll back, left: 7 9 8 4\n(9) - (7) = 2, left: (9 - 7) = 2, 8, 4\n(8) - (2) = 6, left: (8 - (9 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (8 - (9 - 7))) = 24\nreach 24! expression: (4 * (8 - (9 - 7)))"}, {"input": "7 9 8 4\n", "output": "(9) / (8) = 9/8, left: (9 / 8) = 9/8, 7, 4\nroll back, left: 7 9 8 4\n(9) - (8) = 1, left: (9 - 8) = 1, 7, 4\n(4) / (1) = 4, left: (4 / (9 - 8)) = 4, 7\n(7) - (4) = 3, left: (7 - (4 / (9 - 8))) = 3\nroll back, left: (4 / (9 - 8)) = 4, 7\nroll back, left: (9 - 8) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (9 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (9 - 8))) = 24\nreach 24! expression: (4 * (7 - (9 - 8)))"}, {"input": "4 6 1 11\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (6 - 4) = 2\n(2) * (12) = 24, left: ((6 - 4) * (1 + 11)) = 24\nreach 24! expression: ((6 - 4) * (1 + 11))"}, {"input": "4 6 1 11\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 4, 6\n(12) - (6) = 6, left: ((1 + 11) - 6) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 + 11) - 6)) = 24\nreach 24! expression: (4 * ((1 + 11) - 6))"}, {"input": "4 6 1 11\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (6 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (6 - 1))) = 24\nreach 24! expression: (4 * (11 - (6 - 1)))"}, {"input": "4 6 1 11\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 4, 1\n(1) + (5) = 6, left: (1 + (11 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (11 - 6))) = 24\nreach 24! expression: (4 * (1 + (11 - 6)))"}, {"input": "4 6 1 11\n", "output": "(11) - (4) = 7, left: (11 - 4) = 7, 6, 1\n(1) - (6) = -5, left: (1 - 6) = -5, (11 - 4) = 7\nroll back, left: (11 - 4) = 7, 6, 1\n(6) - (7) = -1, left: (6 - (11 - 4)) = -1, 1\nroll back, left: (11 - 4) = 7, 6, 1\nroll back, left: 4 6 1 11\n(1) + (11) = 12, left: (1 + 11) = 12, 4, 6\n(12) - (6) = 6, left: ((1 + 11) - 6) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 + 11) - 6)) = 24\nreach 24! expression: (4 * ((1 + 11) - 6))"}, {"input": "4 6 1 11\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 6, 11\nroll back, left: 4 6 1 11\n(4) / (1) = 4, left: (4 / 1) = 4, 6, 11\nroll back, left: 4 6 1 11\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 6, 11\nroll back, left: 4 6 1 11\n(11) - (6) = 5, left: (11 - 6) = 5, 4, 1\n(1) + (5) = 6, left: (1 + (11 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (11 - 6))) = 24\nreach 24! expression: (4 * (1 + (11 - 6)))"}, {"input": "4 6 1 11\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 4, 1\n(4) / (1) = 4, left: (4 / 1) = 4, (6 / 11) = 6/11\nroll back, left: (6 / 11) = 6/11, 4, 1\nroll back, left: 4 6 1 11\n(11) - (6) = 5, left: (11 - 6) = 5, 4, 1\n(5) - (4) = 1, left: ((11 - 6) - 4) = 1, 1\nroll back, left: (11 - 6) = 5, 4, 1\n(1) + (5) = 6, left: (1 + (11 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (11 - 6))) = 24\nreach 24! expression: (4 * (1 + (11 - 6)))"}, {"input": "4 6 1 11\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 6, 11\n(6) + (-3) = 3, left: (6 + (1 - 4)) = 3, 11\nroll back, left: (1 - 4) = -3, 6, 11\nroll back, left: 4 6 1 11\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, 4, 11\nroll back, left: 4 6 1 11\n(6) - (1) = 5, left: (6 - 1) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (6 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (6 - 1))) = 24\nreach 24! expression: (4 * (11 - (6 - 1)))"}, {"input": "9 7 4 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (9 / 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (9 / 9))) = 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 9, 9\n(9) * (3) = 27, left: (9 * (7 - 4)) = 27, 9\nroll back, left: (7 - 4) = 3, 9, 9\nroll back, left: 9 7 4 9\n(7) + (4) = 11, left: (7 + 4) = 11, 9, 9\nroll back, left: 9 7 4 9\n(9) / (9) = 1, left: (9 / 9) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (9 / 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (9 / 9))) = 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 7, 9\nroll back, left: 9 7 4 9\n(4) + (9) = 13, left: (4 + 9) = 13, 9, 7\n(9) / (13) = 9/13, left: (9 / (4 + 9)) = 9/13, 7\nroll back, left: (4 + 9) = 13, 9, 7\nroll back, left: 9 7 4 9\n(9) / (9) = 1, left: (9 / 9) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (9 / 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (9 / 9))) = 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 4, 9\nroll back, left: 9 7 4 9\n(9) - (4) = 5, left: (9 - 4) = 5, 9, 7\n(9) - (5) = 4, left: (9 - (9 - 4)) = 4, 7\nroll back, left: (9 - 4) = 5, 9, 7\nroll back, left: 9 7 4 9\n(9) / (9) = 1, left: (9 / 9) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (9 / 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (9 / 9))) = 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 9, 7\nroll back, left: 9 7 4 9\n(9) + (9) = 18, left: (9 + 9) = 18, 7, 4\n(4) + (18) = 22, left: (4 + (9 + 9)) = 22, 7\nroll back, left: (9 + 9) = 18, 7, 4\nroll back, left: 9 7 4 9\n(9) / (9) = 1, left: (9 / 9) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (9 / 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (9 / 9))) = 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "9 7 4 9\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 7, 9\n(9) / (5) = 9/5, left: (9 / (9 - 4)) = 9/5, 7\nroll back, left: (9 - 4) = 5, 7, 9\nroll back, left: 9 7 4 9\n(9) / (9) = 1, left: (9 / 9) = 1, 7, 4\n(1) / (4) = 1/4, left: ((9 / 9) / 4) = 1/4, 7\nroll back, left: (9 / 9) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (9 / 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (9 / 9))) = 24\nreach 24! expression: (4 * (7 - (9 / 9)))"}, {"input": "11 6 10 4\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 6, 4\n(4) / (1) = 4, left: (4 / (11 - 10)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 / (11 - 10))) = 24\nreach 24! expression: (6 * (4 / (11 - 10)))"}, {"input": "11 6 10 4\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 11, 10\n(11) - (10) = 1, left: (11 - 10) = 1, (6 * 4) = 24\n(24) * (1) = 24, left: ((6 * 4) * (11 - 10)) = 24\nreach 24! expression: ((6 * 4) * (11 - 10))"}, {"input": "11 6 10 4\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 11, 10\n(11) - (10) = 1, left: (11 - 10) = 1, (6 * 4) = 24\n(24) / (1) = 24, left: ((6 * 4) / (11 - 10)) = 24\nreach 24! expression: ((6 * 4) / (11 - 10))"}, {"input": "11 6 10 4\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 6, 4\n(1) / (4) = 1/4, left: ((11 - 10) / 4) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((11 - 10) / 4)) = 24\nreach 24! expression: (6 / ((11 - 10) / 4))"}, {"input": "11 6 10 4\n", "output": "(6) / (10) = 3/5, left: (6 / 10) = 3/5, 11, 4\nroll back, left: 11 6 10 4\n(10) - (6) = 4, left: (10 - 6) = 4, 11, 4\nroll back, left: 11 6 10 4\n(11) / (4) = 11/4, left: (11 / 4) = 11/4, 6, 10\nroll back, left: 11 6 10 4\n(11) - (10) = 1, left: (11 - 10) = 1, 6, 4\n(1) / (4) = 1/4, left: ((11 - 10) / 4) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((11 - 10) / 4)) = 24\nreach 24! expression: (6 / ((11 - 10) / 4))"}, {"input": "11 6 10 4\n", "output": "(4) / (10) = 2/5, left: (4 / 10) = 2/5, 11, 6\nroll back, left: 11 6 10 4\n(6) + (10) = 16, left: (6 + 10) = 16, 11, 4\nroll back, left: 11 6 10 4\n(6) * (10) = 60, left: (6 * 10) = 60, 11, 4\nroll back, left: 11 6 10 4\n(11) - (10) = 1, left: (11 - 10) = 1, 6, 4\n(4) / (1) = 4, left: (4 / (11 - 10)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 / (11 - 10))) = 24\nreach 24! expression: (6 * (4 / (11 - 10)))"}, {"input": "9 1 5 10\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 5, 10\n(5) + (10) = 15, left: (5 + 10) = 15, (9 / 1) = 9\n(9) + (15) = 24, left: ((9 / 1) + (5 + 10)) = 24\nreach 24! expression: ((9 / 1) + (5 + 10))"}, {"input": "9 1 5 10\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 9, 10\n(9) + (5) = 14, left: (9 + (1 * 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (9 + (1 * 5))) = 24\nreach 24! expression: (10 + (9 + (1 * 5)))"}, {"input": "9 1 5 10\n", "output": "(9) * (1) = 9, left: (9 * 1) = 9, 5, 10\n(10) + (9) = 19, left: (10 + (9 * 1)) = 19, 5\n(5) + (19) = 24, left: (5 + (10 + (9 * 1))) = 24\nreach 24! expression: (5 + (10 + (9 * 1)))"}, {"input": "9 1 5 10\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 1, 10\n(14) / (1) = 14, left: ((9 + 5) / 1) = 14, 10\n(10) + (14) = 24, left: (10 + ((9 + 5) / 1)) = 24\nreach 24! expression: (10 + ((9 + 5) / 1))"}, {"input": "9 1 5 10\n", "output": "(9) / (5) = 9/5, left: (9 / 5) = 9/5, 1, 10\nroll back, left: 9 1 5 10\n(5) / (9) = 5/9, left: (5 / 9) = 5/9, 1, 10\n(1) / (5/9) = 9/5, left: (1 / (5 / 9)) = 9/5, 10\nroll back, left: (5 / 9) = 5/9, 1, 10\nroll back, left: 9 1 5 10\n(9) + (5) = 14, left: (9 + 5) = 14, 1, 10\n(14) / (1) = 14, left: ((9 + 5) / 1) = 14, 10\n(10) + (14) = 24, left: (10 + ((9 + 5) / 1)) = 24\nreach 24! expression: (10 + ((9 + 5) / 1))"}, {"input": "9 1 5 10\n", "output": "(1) / (9) = 1/9, left: (1 / 9) = 1/9, 5, 10\nroll back, left: 9 1 5 10\n(9) + (1) = 10, left: (9 + 1) = 10, 5, 10\n(5) + (10) = 15, left: (5 + (9 + 1)) = 15, 10\nroll back, left: (9 + 1) = 10, 5, 10\nroll back, left: 9 1 5 10\n(9) * (1) = 9, left: (9 * 1) = 9, 5, 10\n(10) + (9) = 19, left: (10 + (9 * 1)) = 19, 5\n(5) + (19) = 24, left: (5 + (10 + (9 * 1))) = 24\nreach 24! expression: (5 + (10 + (9 * 1)))"}, {"input": "9 1 5 10\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 1, 10\n(10) - (1) = 9, left: (10 - 1) = 9, (5 / 9) = 5/9\nroll back, left: (5 / 9) = 5/9, 1, 10\nroll back, left: 9 1 5 10\n(9) * (5) = 45, left: (9 * 5) = 45, 1, 10\nroll back, left: 9 1 5 10\n(9) + (5) = 14, left: (9 + 5) = 14, 1, 10\n(14) / (1) = 14, left: ((9 + 5) / 1) = 14, 10\n(10) + (14) = 24, left: (10 + ((9 + 5) / 1)) = 24\nreach 24! expression: (10 + ((9 + 5) / 1))"}, {"input": "9 1 5 10\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 9, 10\nroll back, left: 9 1 5 10\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, 9, 10\n(9) - (1/5) = 44/5, left: (9 - (1 / 5)) = 44/5, 10\nroll back, left: (1 / 5) = 1/5, 9, 10\nroll back, left: 9 1 5 10\n(1) * (5) = 5, left: (1 * 5) = 5, 9, 10\n(9) + (5) = 14, left: (9 + (1 * 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (9 + (1 * 5))) = 24\nreach 24! expression: (10 + (9 + (1 * 5)))"}, {"input": "8 11 6 6\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (8 - 11)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (8 - 11))) = 24\nreach 24! expression: (6 - (6 * (8 - 11)))"}, {"input": "8 11 6 6\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (11 - 8)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (11 - 8))) = 24\nreach 24! expression: (6 + (6 * (11 - 8)))"}, {"input": "8 11 6 6\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 8, 6\nroll back, left: 8 11 6 6\n(11) * (6) = 66, left: (11 * 6) = 66, 8, 6\n(6) * (66) = 396, left: (6 * (11 * 6)) = 396, 8\nroll back, left: (11 * 6) = 66, 8, 6\nroll back, left: 8 11 6 6\n(8) - (11) = -3, left: (8 - 11) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (8 - 11)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (8 - 11))) = 24\nreach 24! expression: (6 - (6 * (8 - 11)))"}, {"input": "8 11 6 6\n", "output": "(11) / (6) = 11/6, left: (11 / 6) = 11/6, 8, 6\nroll back, left: 8 11 6 6\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, 11, 6\n(6) / (4/3) = 9/2, left: (6 / (8 / 6)) = 9/2, 11\nroll back, left: (8 / 6) = 4/3, 11, 6\nroll back, left: 8 11 6 6\n(11) - (8) = 3, left: (11 - 8) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (11 - 8)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (11 - 8))) = 24\nreach 24! expression: (6 + (6 * (11 - 8)))"}, {"input": "8 11 6 6\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 11, 6\nroll back, left: 8 11 6 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 11, 6\nroll back, left: 8 11 6 6\n(8) + (6) = 14, left: (8 + 6) = 14, 11, 6\nroll back, left: 8 11 6 6\n(8) - (11) = -3, left: (8 - 11) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (8 - 11)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (8 - 11))) = 24\nreach 24! expression: (6 - (6 * (8 - 11)))"}, {"input": "8 11 6 6\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 8, 6\n(8) / (-5) = -8/5, left: (8 / (6 - 11)) = -8/5, 6\nroll back, left: (6 - 11) = -5, 8, 6\nroll back, left: 8 11 6 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 11, 6\nroll back, left: 8 11 6 6\n(11) - (8) = 3, left: (11 - 8) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (11 - 8)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (11 - 8))) = 24\nreach 24! expression: (6 + (6 * (11 - 8)))"}, {"input": "10 5 3 9\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (3 + 9)) = 120, 5\n(120) / (5) = 24, left: ((10 * (3 + 9)) / 5) = 24\nreach 24! expression: ((10 * (3 + 9)) / 5)"}, {"input": "10 5 3 9\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 3, 9\n(3) * (5) = 15, left: (3 * (10 - 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (3 * (10 - 5))) = 24\nreach 24! expression: (9 + (3 * (10 - 5)))"}, {"input": "10 5 3 9\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (3 + 9)) = 24\nreach 24! expression: ((10 / 5) * (3 + 9))"}, {"input": "10 5 3 9\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 10, 3\nroll back, left: 10 5 3 9\n(5) - (9) = -4, left: (5 - 9) = -4, 10, 3\nroll back, left: 10 5 3 9\n(5) * (9) = 45, left: (5 * 9) = 45, 10, 3\nroll back, left: 10 5 3 9\n(10) - (5) = 5, left: (10 - 5) = 5, 3, 9\n(3) * (5) = 15, left: (3 * (10 - 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (3 * (10 - 5))) = 24\nreach 24! expression: (9 + (3 * (10 - 5)))"}, {"input": "10 5 3 9\n", "output": "(9) / (5) = 9/5, left: (9 / 5) = 9/5, 10, 3\n(3) + (9/5) = 24/5, left: (3 + (9 / 5)) = 24/5, 10\nroll back, left: (9 / 5) = 9/5, 10, 3\nroll back, left: 10 5 3 9\n(10) / (5) = 2, left: (10 / 5) = 2, 3, 9\n(9) / (2) = 9/2, left: (9 / (10 / 5)) = 9/2, 3\nroll back, left: (10 / 5) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (3 + 9)) = 24\nreach 24! expression: ((10 / 5) * (3 + 9))"}, {"input": "10 5 3 9\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 10, 5\nroll back, left: 10 5 3 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, 10, 5\nroll back, left: 10 5 3 9\n(9) - (3) = 6, left: (9 - 3) = 6, 10, 5\nroll back, left: 10 5 3 9\n(3) + (9) = 12, left: (3 + 9) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (3 + 9)) = 120, 5\n(120) / (5) = 24, left: ((10 * (3 + 9)) / 5) = 24\nreach 24! expression: ((10 * (3 + 9)) / 5)"}, {"input": "10 5 3 9\n", "output": "(3) / (5) = 3/5, left: (3 / 5) = 3/5, 10, 9\nroll back, left: 10 5 3 9\n(5) * (3) = 15, left: (5 * 3) = 15, 10, 9\n(15) - (10) = 5, left: ((5 * 3) - 10) = 5, 9\nroll back, left: (5 * 3) = 15, 10, 9\nroll back, left: 10 5 3 9\n(10) / (5) = 2, left: (10 / 5) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (3 + 9)) = 24\nreach 24! expression: ((10 / 5) * (3 + 9))"}, {"input": "10 5 3 9\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 10, 5\nroll back, left: 10 5 3 9\n(9) / (3) = 3, left: (9 / 3) = 3, 10, 5\n(5) - (10) = -5, left: (5 - 10) = -5, (9 / 3) = 3\nroll back, left: (9 / 3) = 3, 10, 5\nroll back, left: 10 5 3 9\n(3) + (9) = 12, left: (3 + 9) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (3 + 9)) = 120, 5\n(120) / (5) = 24, left: ((10 * (3 + 9)) / 5) = 24\nreach 24! expression: ((10 * (3 + 9)) / 5)"}, {"input": "12 12 2 5\n", "output": "(5) / (12) = 5/12, left: (5 / 12) = 5/12, 12, 2\n(12) - (2) = 10, left: (12 - 2) = 10, (5 / 12) = 5/12\n(10) / (5/12) = 24, left: ((12 - 2) / (5 / 12)) = 24\nreach 24! expression: ((12 - 2) / (5 / 12))"}, {"input": "12 12 2 5\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 12, 5\n(12) * (10) = 120, left: (12 * (12 - 2)) = 120, 5\n(120) / (5) = 24, left: ((12 * (12 - 2)) / 5) = 24\nreach 24! expression: ((12 * (12 - 2)) / 5)"}, {"input": "12 12 2 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (5 - 2)) = 36, 12\n(36) - (12) = 24, left: ((12 * (5 - 2)) - 12) = 24\nreach 24! expression: ((12 * (5 - 2)) - 12)"}, {"input": "12 12 2 5\n", "output": "(12) * (5) = 60, left: (12 * 5) = 60, 12, 2\n(60) - (12) = 48, left: ((12 * 5) - 12) = 48, 2\n(48) / (2) = 24, left: (((12 * 5) - 12) / 2) = 24\nreach 24! expression: (((12 * 5) - 12) / 2)"}, {"input": "12 12 2 5\n", "output": "(12) / (5) = 12/5, left: (12 / 5) = 12/5, 12, 2\n(12) - (2) = 10, left: (12 - 2) = 10, (12 / 5) = 12/5\n(12/5) * (10) = 24, left: ((12 / 5) * (12 - 2)) = 24\nreach 24! expression: ((12 / 5) * (12 - 2))"}, {"input": "12 12 2 5\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 12, 12\n(12) - (7) = 5, left: (12 - (2 + 5)) = 5, 12\nroll back, left: (2 + 5) = 7, 12, 12\nroll back, left: 12 12 2 5\n(2) - (5) = -3, left: (2 - 5) = -3, 12, 12\nroll back, left: 12 12 2 5\n(5) - (2) = 3, left: (5 - 2) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (5 - 2)) = 36, 12\n(36) - (12) = 24, left: ((12 * (5 - 2)) - 12) = 24\nreach 24! expression: ((12 * (5 - 2)) - 12)"}, {"input": "10 1 1 12\n", "output": "(10) + (1) = 11, left: (10 + 1) = 11, 1, 12\n(1) + (12) = 13, left: (1 + 12) = 13, (10 + 1) = 11\n(11) + (13) = 24, left: ((10 + 1) + (1 + 12)) = 24\nreach 24! expression: ((10 + 1) + (1 + 12))"}, {"input": "10 1 1 12\n", "output": "(1) + (12) = 13, left: (1 + 12) = 13, 10, 1\n(10) + (13) = 23, left: (10 + (1 + 12)) = 23, 1\n(1) + (23) = 24, left: (1 + (10 + (1 + 12))) = 24\nreach 24! expression: (1 + (10 + (1 + 12)))"}, {"input": "10 1 1 12\n", "output": "(10) + (1) = 11, left: (10 + 1) = 11, 1, 12\n(12) + (11) = 23, left: (12 + (10 + 1)) = 23, 1\n(1) + (23) = 24, left: (1 + (12 + (10 + 1))) = 24\nreach 24! expression: (1 + (12 + (10 + 1)))"}, {"input": "10 1 1 12\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 10, 12\n(10) + (12) = 22, left: (10 + 12) = 22, (1 + 1) = 2\n(2) + (22) = 24, left: ((1 + 1) + (10 + 12)) = 24\nreach 24! expression: ((1 + 1) + (10 + 12))"}, {"input": "10 1 1 12\n", "output": "(1) + (12) = 13, left: (1 + 12) = 13, 10, 1\n(1) + (13) = 14, left: (1 + (1 + 12)) = 14, 10\n(10) + (14) = 24, left: (10 + (1 + (1 + 12))) = 24\nreach 24! expression: (10 + (1 + (1 + 12)))"}, {"input": "10 1 1 12\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 10, 1\nroll back, left: 10 1 1 12\n(1) * (12) = 12, left: (1 * 12) = 12, 10, 1\n(12) - (10) = 2, left: ((1 * 12) - 10) = 2, 1\nroll back, left: (1 * 12) = 12, 10, 1\nroll back, left: 10 1 1 12\n(1) + (12) = 13, left: (1 + 12) = 13, 10, 1\n(1) + (13) = 14, left: (1 + (1 + 12)) = 14, 10\n(10) + (14) = 24, left: (10 + (1 + (1 + 12))) = 24\nreach 24! expression: (10 + (1 + (1 + 12)))"}, {"input": "10 1 1 12\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 1, 12\nroll back, left: 10 1 1 12\n(10) * (1) = 10, left: (10 * 1) = 10, 1, 12\nroll back, left: 10 1 1 12\n(1) / (10) = 1/10, left: (1 / 10) = 1/10, 1, 12\nroll back, left: 10 1 1 12\n(10) + (1) = 11, left: (10 + 1) = 11, 1, 12\n(12) + (11) = 23, left: (12 + (10 + 1)) = 23, 1\n(1) + (23) = 24, left: (1 + (12 + (10 + 1))) = 24\nreach 24! expression: (1 + (12 + (10 + 1)))"}, {"input": "8 12 3 3\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 8, 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) * (8/3) = 24, left: ((12 - 3) * (8 / 3)) = 24\nreach 24! expression: ((12 - 3) * (8 / 3))"}, {"input": "8 12 3 3\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (12 - 8) = 4\n(4) * (6) = 24, left: ((12 - 8) * (3 + 3)) = 24\nreach 24! expression: ((12 - 8) * (3 + 3))"}, {"input": "8 12 3 3\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 8, 3\n(9) / (3) = 3, left: ((12 - 3) / 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 3) / 3)) = 24\nreach 24! expression: (8 * ((12 - 3) / 3))"}, {"input": "8 12 3 3\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 8, 3\n(3) / (9) = 1/3, left: (3 / (12 - 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 / (12 - 3))) = 24\nreach 24! expression: (8 / (3 / (12 - 3)))"}, {"input": "8 12 3 3\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 8, 3\n(8) - (3) = 5, left: (8 - 3) = 5, (3 / 12) = 1/4\nroll back, left: (3 / 12) = 1/4, 8, 3\nroll back, left: 8 12 3 3\n(12) + (3) = 15, left: (12 + 3) = 15, 8, 3\nroll back, left: 8 12 3 3\n(12) - (3) = 9, left: (12 - 3) = 9, 8, 3\n(9) / (3) = 3, left: ((12 - 3) / 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 3) / 3)) = 24\nreach 24! expression: (8 * ((12 - 3) / 3))"}, {"input": "8 12 3 3\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 8, 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) + (8/3) = 35/3, left: ((12 - 3) + (8 / 3)) = 35/3\nroll back, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) / (8/3) = 27/8, left: ((12 - 3) / (8 / 3)) = 27/8\nroll back, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) * (8/3) = 24, left: ((12 - 3) * (8 / 3)) = 24\nreach 24! expression: ((12 - 3) * (8 / 3))"}, {"input": "8 12 3 3\n", "output": "(12) * (3) = 36, left: (12 * 3) = 36, 8, 3\nroll back, left: 8 12 3 3\n(3) - (12) = -9, left: (3 - 12) = -9, 8, 3\n(-9) / (3) = -3, left: ((3 - 12) / 3) = -3, 8\nroll back, left: (3 - 12) = -9, 8, 3\nroll back, left: 8 12 3 3\n(12) - (3) = 9, left: (12 - 3) = 9, 8, 3\n(3) / (9) = 1/3, left: (3 / (12 - 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 / (12 - 3))) = 24\nreach 24! expression: (8 / (3 / (12 - 3)))"}, {"input": "8 12 3 3\n", "output": "(12) * (3) = 36, left: (12 * 3) = 36, 8, 3\n(3) - (36) = -33, left: (3 - (12 * 3)) = -33, 8\nroll back, left: (12 * 3) = 36, 8, 3\n(3) + (36) = 39, left: (3 + (12 * 3)) = 39, 8\nroll back, left: (12 * 3) = 36, 8, 3\nroll back, left: 8 12 3 3\n(12) - (3) = 9, left: (12 - 3) = 9, 8, 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) * (8/3) = 24, left: ((12 - 3) * (8 / 3)) = 24\nreach 24! expression: ((12 - 3) * (8 / 3))"}, {"input": "8 12 3 3\n", "output": "(8) + (12) = 20, left: (8 + 12) = 20, 3, 3\nroll back, left: 8 12 3 3\n(8) * (12) = 96, left: (8 * 12) = 96, 3, 3\nroll back, left: 8 12 3 3\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 3, 3\nroll back, left: 8 12 3 3\n(12) - (8) = 4, left: (12 - 8) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (12 - 8) = 4\n(4) * (6) = 24, left: ((12 - 8) * (3 + 3)) = 24\nreach 24! expression: ((12 - 8) * (3 + 3))"}, {"input": "8 12 3 3\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 8, 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) + (8/3) = 35/3, left: ((12 - 3) + (8 / 3)) = 35/3\nroll back, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) / (8/3) = 27/8, left: ((12 - 3) / (8 / 3)) = 27/8\nroll back, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) * (8/3) = 24, left: ((12 - 3) * (8 / 3)) = 24\nreach 24! expression: ((12 - 3) * (8 / 3))"}, {"input": "8 12 3 3\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 8, 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) + (8/3) = 35/3, left: ((12 - 3) + (8 / 3)) = 35/3\nroll back, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) / (8/3) = 27/8, left: ((12 - 3) / (8 / 3)) = 27/8\nroll back, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) * (8/3) = 24, left: ((12 - 3) * (8 / 3)) = 24\nreach 24! expression: ((12 - 3) * (8 / 3))"}, {"input": "8 12 3 3\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 8, 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) + (8/3) = 35/3, left: ((12 - 3) + (8 / 3)) = 35/3\nroll back, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) / (8/3) = 27/8, left: ((12 - 3) / (8 / 3)) = 27/8\nroll back, left: (8 / 3) = 8/3, (12 - 3) = 9\n(9) * (8/3) = 24, left: ((12 - 3) * (8 / 3)) = 24\nreach 24! expression: ((12 - 3) * (8 / 3))"}, {"input": "6 12 1 8\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 12, 8\n(8) - (6) = 2, left: (8 - (6 / 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (8 - (6 / 1))) = 24\nreach 24! expression: (12 * (8 - (6 / 1)))"}, {"input": "6 12 1 8\n", "output": "(1) * (8) = 8, left: (1 * 8) = 8, 6, 12\n(12) - (8) = 4, left: (12 - (1 * 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (12 - (1 * 8))) = 24\nreach 24! expression: (6 * (12 - (1 * 8)))"}, {"input": "6 12 1 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 6, 1\n(1) / (4) = 1/4, left: (1 / (12 - 8)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (12 - 8))) = 24\nreach 24! expression: (6 / (1 / (12 - 8)))"}, {"input": "6 12 1 8\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 12, 1\n(12) * (2) = 24, left: (12 * (8 - 6)) = 24, 1\n(24) / (1) = 24, left: ((12 * (8 - 6)) / 1) = 24\nreach 24! expression: ((12 * (8 - 6)) / 1)"}, {"input": "6 12 1 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 6, 1\n(6) * (4) = 24, left: (6 * (12 - 8)) = 24, 1\n(24) / (1) = 24, left: ((6 * (12 - 8)) / 1) = 24\nreach 24! expression: ((6 * (12 - 8)) / 1)"}, {"input": "6 12 1 8\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 12, 8\n(-5) - (8) = -13, left: ((1 - 6) - 8) = -13, 12\nroll back, left: (1 - 6) = -5, 12, 8\n(12) - (8) = 4, left: (12 - 8) = 4, (1 - 6) = -5\nroll back, left: (1 - 6) = -5, 12, 8\nroll back, left: 6 12 1 8\n(6) / (1) = 6, left: (6 / 1) = 6, 12, 8\n(8) - (6) = 2, left: (8 - (6 / 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (8 - (6 / 1))) = 24\nreach 24! expression: (12 * (8 - (6 / 1)))"}, {"input": "6 12 1 8\n", "output": "(12) + (8) = 20, left: (12 + 8) = 20, 6, 1\nroll back, left: 6 12 1 8\n(12) * (8) = 96, left: (12 * 8) = 96, 6, 1\n(1) * (96) = 96, left: (1 * (12 * 8)) = 96, 6\nroll back, left: (12 * 8) = 96, 6, 1\nroll back, left: 6 12 1 8\n(12) - (8) = 4, left: (12 - 8) = 4, 6, 1\n(6) * (4) = 24, left: (6 * (12 - 8)) = 24, 1\n(24) / (1) = 24, left: ((6 * (12 - 8)) / 1) = 24\nreach 24! expression: ((6 * (12 - 8)) / 1)"}, {"input": "6 12 1 8\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 6, 1\n(1) + (3/2) = 5/2, left: (1 + (12 / 8)) = 5/2, 6\nroll back, left: (12 / 8) = 3/2, 6, 1\nroll back, left: 6 12 1 8\n(8) - (12) = -4, left: (8 - 12) = -4, 6, 1\nroll back, left: 6 12 1 8\n(12) - (8) = 4, left: (12 - 8) = 4, 6, 1\n(1) / (4) = 1/4, left: (1 / (12 - 8)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (12 - 8))) = 24\nreach 24! expression: (6 / (1 / (12 - 8)))"}, {"input": "6 12 1 8\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 12, 1\n(12) / (1) = 12, left: (12 / 1) = 12, (6 - 8) = -2\nroll back, left: (6 - 8) = -2, 12, 1\n(12) - (-2) = 14, left: (12 - (6 - 8)) = 14, 1\nroll back, left: (6 - 8) = -2, 12, 1\nroll back, left: 6 12 1 8\n(8) - (6) = 2, left: (8 - 6) = 2, 12, 1\n(12) * (2) = 24, left: (12 * (8 - 6)) = 24, 1\n(24) / (1) = 24, left: ((12 * (8 - 6)) / 1) = 24\nreach 24! expression: ((12 * (8 - 6)) / 1)"}, {"input": "6 12 1 8\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 6, 12\nroll back, left: 6 12 1 8\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, 6, 12\n(6) - (1/8) = 47/8, left: (6 - (1 / 8)) = 47/8, 12\nroll back, left: (1 / 8) = 1/8, 6, 12\nroll back, left: 6 12 1 8\n(1) * (8) = 8, left: (1 * 8) = 8, 6, 12\n(12) - (8) = 4, left: (12 - (1 * 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (12 - (1 * 8))) = 24\nreach 24! expression: (6 * (12 - (1 * 8)))"}, {"input": "5 2 1 7\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 2, 1\n(2) * (12) = 24, left: (2 * (5 + 7)) = 24, 1\n(1) * (24) = 24, left: (1 * (2 * (5 + 7))) = 24\nreach 24! expression: (1 * (2 * (5 + 7)))"}, {"input": "5 2 1 7\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 5, 2\n(5) + (7) = 12, left: (5 + (7 / 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (5 + (7 / 1))) = 24\nreach 24! expression: (2 * (5 + (7 / 1)))"}, {"input": "5 2 1 7\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (1 / 2) = 1/2\n(12) / (1/2) = 24, left: ((5 + 7) / (1 / 2)) = 24\nreach 24! expression: ((5 + 7) / (1 / 2))"}, {"input": "5 2 1 7\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (7 - 2)) = 25, 1\n(25) - (1) = 24, left: ((5 * (7 - 2)) - 1) = 24\nreach 24! expression: ((5 * (7 - 2)) - 1)"}, {"input": "5 2 1 7\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 5, 1\nroll back, left: 5 2 1 7\n(2) * (7) = 14, left: (2 * 7) = 14, 5, 1\n(1) / (14) = 1/14, left: (1 / (2 * 7)) = 1/14, 5\nroll back, left: (2 * 7) = 14, 5, 1\nroll back, left: 5 2 1 7\n(7) - (2) = 5, left: (7 - 2) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (7 - 2)) = 25, 1\n(25) - (1) = 24, left: ((5 * (7 - 2)) - 1) = 24\nreach 24! expression: ((5 * (7 - 2)) - 1)"}, {"input": "5 2 1 7\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 5, 2\n(5) - (2) = 3, left: (5 - 2) = 3, (7 / 1) = 7\nroll back, left: (7 / 1) = 7, 5, 2\n(5) + (2) = 7, left: (5 + 2) = 7, (7 / 1) = 7\n(7) * (7) = 49, left: ((7 / 1) * (5 + 2)) = 49\nroll back, left: (5 + 2) = 7, (7 / 1) = 7\nroll back, left: (7 / 1) = 7, 5, 2\n(5) + (7) = 12, left: (5 + (7 / 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (5 + (7 / 1))) = 24\nreach 24! expression: (2 * (5 + (7 / 1)))"}, {"input": "5 2 1 7\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 2, 1\n(2) * (12) = 24, left: (2 * (5 + 7)) = 24, 1\n(1) - (24) = -23, left: (1 - (2 * (5 + 7))) = -23\nroll back, left: (2 * (5 + 7)) = 24, 1\n(24) - (1) = 23, left: ((2 * (5 + 7)) - 1) = 23\nroll back, left: (2 * (5 + 7)) = 24, 1\n(1) / (24) = 1/24, left: (1 / (2 * (5 + 7))) = 1/24\nroll back, left: (2 * (5 + 7)) = 24, 1\n(1) * (24) = 24, left: (1 * (2 * (5 + 7))) = 24\nreach 24! expression: (1 * (2 * (5 + 7)))"}, {"input": "5 2 1 7\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 5, 1\n(1) / (7/2) = 2/7, left: (1 / (7 / 2)) = 2/7, 5\nroll back, left: (7 / 2) = 7/2, 5, 1\nroll back, left: 5 2 1 7\n(7) - (2) = 5, left: (7 - 2) = 5, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (7 - 2) = 5\nroll back, left: (7 - 2) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (7 - 2)) = 25, 1\n(25) - (1) = 24, left: ((5 * (7 - 2)) - 1) = 24\nreach 24! expression: ((5 * (7 - 2)) - 1)"}, {"input": "5 2 1 7\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 5, 7\n(5) / (-1) = -5, left: (5 / (1 - 2)) = -5, 7\nroll back, left: (1 - 2) = -1, 5, 7\nroll back, left: 5 2 1 7\n(2) + (1) = 3, left: (2 + 1) = 3, 5, 7\nroll back, left: 5 2 1 7\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (1 / 2) = 1/2\n(12) / (1/2) = 24, left: ((5 + 7) / (1 / 2)) = 24\nreach 24! expression: ((5 + 7) / (1 / 2))"}, {"input": "5 2 1 7\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 2, 1\n(2) * (12) = 24, left: (2 * (5 + 7)) = 24, 1\n(1) - (24) = -23, left: (1 - (2 * (5 + 7))) = -23\nroll back, left: (2 * (5 + 7)) = 24, 1\n(24) - (1) = 23, left: ((2 * (5 + 7)) - 1) = 23\nroll back, left: (2 * (5 + 7)) = 24, 1\n(1) / (24) = 1/24, left: (1 / (2 * (5 + 7))) = 1/24\nroll back, left: (2 * (5 + 7)) = 24, 1\n(1) * (24) = 24, left: (1 * (2 * (5 + 7))) = 24\nreach 24! expression: (1 * (2 * (5 + 7)))"}, {"input": "5 2 1 7\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 2, 1\n(2) * (12) = 24, left: (2 * (5 + 7)) = 24, 1\n(1) - (24) = -23, left: (1 - (2 * (5 + 7))) = -23\nroll back, left: (2 * (5 + 7)) = 24, 1\n(24) - (1) = 23, left: ((2 * (5 + 7)) - 1) = 23\nroll back, left: (2 * (5 + 7)) = 24, 1\n(1) / (24) = 1/24, left: (1 / (2 * (5 + 7))) = 1/24\nroll back, left: (2 * (5 + 7)) = 24, 1\n(1) * (24) = 24, left: (1 * (2 * (5 + 7))) = 24\nreach 24! expression: (1 * (2 * (5 + 7)))"}, {"input": "5 2 1 7\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 2, 1\n(2) * (12) = 24, left: (2 * (5 + 7)) = 24, 1\n(1) - (24) = -23, left: (1 - (2 * (5 + 7))) = -23\nroll back, left: (2 * (5 + 7)) = 24, 1\n(24) - (1) = 23, left: ((2 * (5 + 7)) - 1) = 23\nroll back, left: (2 * (5 + 7)) = 24, 1\n(1) / (24) = 1/24, left: (1 / (2 * (5 + 7))) = 1/24\nroll back, left: (2 * (5 + 7)) = 24, 1\n(1) * (24) = 24, left: (1 * (2 * (5 + 7))) = 24\nreach 24! expression: (1 * (2 * (5 + 7)))"}, {"input": "3 7 13 8\n", "output": "(3) * (13) = 39, left: (3 * 13) = 39, 7, 8\n(7) + (8) = 15, left: (7 + 8) = 15, (3 * 13) = 39\n(39) - (15) = 24, left: ((3 * 13) - (7 + 8)) = 24\nreach 24! expression: ((3 * 13) - (7 + 8))"}, {"input": "3 7 13 8\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 3, 8\n(6) - (3) = 3, left: ((13 - 7) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 7) - 3)) = 24\nreach 24! expression: (8 * ((13 - 7) - 3))"}, {"input": "3 7 13 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 3, 13\n(3) * (13) = 39, left: (3 * 13) = 39, (7 + 8) = 15\n(39) - (15) = 24, left: ((3 * 13) - (7 + 8)) = 24\nreach 24! expression: ((3 * 13) - (7 + 8))"}, {"input": "3 7 13 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 7, 13\n(24) - (13) = 11, left: ((3 * 8) - 13) = 11, 7\nroll back, left: (3 * 8) = 24, 7, 13\nroll back, left: 3 7 13 8\n(8) / (7) = 8/7, left: (8 / 7) = 8/7, 3, 13\nroll back, left: 3 7 13 8\n(7) + (8) = 15, left: (7 + 8) = 15, 3, 13\n(3) * (13) = 39, left: (3 * 13) = 39, (7 + 8) = 15\n(39) - (15) = 24, left: ((3 * 13) - (7 + 8)) = 24\nreach 24! expression: ((3 * 13) - (7 + 8))"}, {"input": "3 7 13 8\n", "output": "(7) + (13) = 20, left: (7 + 13) = 20, 3, 8\nroll back, left: 3 7 13 8\n(7) / (13) = 7/13, left: (7 / 13) = 7/13, 3, 8\nroll back, left: 3 7 13 8\n(13) - (7) = 6, left: (13 - 7) = 6, 3, 8\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, (13 - 7) = 6\nroll back, left: (13 - 7) = 6, 3, 8\n(6) - (3) = 3, left: ((13 - 7) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 7) - 3)) = 24\nreach 24! expression: (8 * ((13 - 7) - 3))"}, {"input": "3 7 13 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 7, 13\n(13) - (7) = 6, left: (13 - 7) = 6, (3 * 8) = 24\nroll back, left: (3 * 8) = 24, 7, 13\nroll back, left: 3 7 13 8\n(13) * (8) = 104, left: (13 * 8) = 104, 3, 7\nroll back, left: 3 7 13 8\n(3) * (13) = 39, left: (3 * 13) = 39, 7, 8\n(7) + (8) = 15, left: (7 + 8) = 15, (3 * 13) = 39\n(39) - (15) = 24, left: ((3 * 13) - (7 + 8)) = 24\nreach 24! expression: ((3 * 13) - (7 + 8))"}, {"input": "3 7 13 8\n", "output": "(7) + (13) = 20, left: (7 + 13) = 20, 3, 8\n(3) - (8) = -5, left: (3 - 8) = -5, (7 + 13) = 20\nroll back, left: (7 + 13) = 20, 3, 8\nroll back, left: 3 7 13 8\n(7) * (13) = 91, left: (7 * 13) = 91, 3, 8\nroll back, left: 3 7 13 8\n(13) - (7) = 6, left: (13 - 7) = 6, 3, 8\n(6) - (3) = 3, left: ((13 - 7) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 7) - 3)) = 24\nreach 24! expression: (8 * ((13 - 7) - 3))"}, {"input": "3 7 13 8\n", "output": "(13) / (8) = 13/8, left: (13 / 8) = 13/8, 3, 7\n(7) * (13/8) = 91/8, left: (7 * (13 / 8)) = 91/8, 3\nroll back, left: (13 / 8) = 13/8, 3, 7\nroll back, left: 3 7 13 8\n(8) - (13) = -5, left: (8 - 13) = -5, 3, 7\nroll back, left: 3 7 13 8\n(7) + (8) = 15, left: (7 + 8) = 15, 3, 13\n(3) * (13) = 39, left: (3 * 13) = 39, (7 + 8) = 15\n(39) - (15) = 24, left: ((3 * 13) - (7 + 8)) = 24\nreach 24! expression: ((3 * 13) - (7 + 8))"}, {"input": "12 12 6 8\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 12, 6\n(12) * (6) = 72, left: (12 * 6) = 72, (12 * 8) = 96\n(96) - (72) = 24, left: ((12 * 8) - (12 * 6)) = 24\nreach 24! expression: ((12 * 8) - (12 * 6))"}, {"input": "12 12 6 8\n", "output": "(12) * (6) = 72, left: (12 * 6) = 72, 12, 8\n(12) * (8) = 96, left: (12 * 8) = 96, (12 * 6) = 72\n(96) - (72) = 24, left: ((12 * 8) - (12 * 6)) = 24\nreach 24! expression: ((12 * 8) - (12 * 6))"}, {"input": "12 12 6 8\n", "output": "(6) + (8) = 14, left: (6 + 8) = 14, 12, 12\n(14) - (12) = 2, left: ((6 + 8) - 12) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 + 8) - 12)) = 24\nreach 24! expression: (12 * ((6 + 8) - 12))"}, {"input": "12 12 6 8\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 12, 8\n(8) - (6) = 2, left: (8 - (12 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (8 - (12 - 6))) = 24\nreach 24! expression: (12 * (8 - (12 - 6)))"}, {"input": "12 12 6 8\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 12, 12\n(2) / (12) = 1/6, left: ((8 - 6) / 12) = 1/6, 12\nroll back, left: (8 - 6) = 2, 12, 12\n(12) - (2) = 10, left: (12 - (8 - 6)) = 10, 12\nroll back, left: (8 - 6) = 2, 12, 12\nroll back, left: 12 12 6 8\n(6) + (8) = 14, left: (6 + 8) = 14, 12, 12\n(14) - (12) = 2, left: ((6 + 8) - 12) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 + 8) - 12)) = 24\nreach 24! expression: (12 * ((6 + 8) - 12))"}, {"input": "5 4 9 12\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 5, 9\n(5) / (1/3) = 15, left: (5 / (4 / 12)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 / (4 / 12))) = 24\nreach 24! expression: (9 + (5 / (4 / 12)))"}, {"input": "5 4 9 12\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 9, 12\n(12) * (5/4) = 15, left: (12 * (5 / 4)) = 15, 9\n(9) + (15) = 24, left: (9 + (12 * (5 / 4))) = 24\nreach 24! expression: (9 + (12 * (5 / 4)))"}, {"input": "5 4 9 12\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 9, 12\n(12) / (4/5) = 15, left: (12 / (4 / 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (12 / (4 / 5))) = 24\nreach 24! expression: (9 + (12 / (4 / 5)))"}, {"input": "5 4 9 12\n", "output": "(5) * (12) = 60, left: (5 * 12) = 60, 4, 9\n(4) * (9) = 36, left: (4 * 9) = 36, (5 * 12) = 60\n(60) - (36) = 24, left: ((5 * 12) - (4 * 9)) = 24\nreach 24! expression: ((5 * 12) - (4 * 9))"}, {"input": "5 4 9 12\n", "output": "(9) * (12) = 108, left: (9 * 12) = 108, 5, 4\n(108) - (5) = 103, left: ((9 * 12) - 5) = 103, 4\nroll back, left: (9 * 12) = 108, 5, 4\nroll back, left: 5 4 9 12\n(9) + (12) = 21, left: (9 + 12) = 21, 5, 4\nroll back, left: 5 4 9 12\n(5) * (12) = 60, left: (5 * 12) = 60, 4, 9\n(4) * (9) = 36, left: (4 * 9) = 36, (5 * 12) = 60\n(60) - (36) = 24, left: ((5 * 12) - (4 * 9)) = 24\nreach 24! expression: ((5 * 12) - (4 * 9))"}, {"input": "5 4 9 12\n", "output": "(5) + (4) = 9, left: (5 + 4) = 9, 9, 12\n(12) * (9) = 108, left: (12 * (5 + 4)) = 108, 9\nroll back, left: (5 + 4) = 9, 9, 12\nroll back, left: 5 4 9 12\n(5) - (4) = 1, left: (5 - 4) = 1, 9, 12\nroll back, left: 5 4 9 12\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, 9, 12\n(12) / (4/5) = 15, left: (12 / (4 / 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (12 / (4 / 5))) = 24\nreach 24! expression: (9 + (12 / (4 / 5)))"}, {"input": "5 4 9 12\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 9, 12\nroll back, left: 5 4 9 12\n(5) + (4) = 9, left: (5 + 4) = 9, 9, 12\n(12) * (9) = 108, left: (12 * (5 + 4)) = 108, 9\nroll back, left: (5 + 4) = 9, 9, 12\nroll back, left: 5 4 9 12\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 9, 12\n(12) * (5/4) = 15, left: (12 * (5 / 4)) = 15, 9\n(9) + (15) = 24, left: (9 + (12 * (5 / 4))) = 24\nreach 24! expression: (9 + (12 * (5 / 4)))"}, {"input": "5 4 9 12\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 5, 4\n(4/3) - (5) = -11/3, left: ((12 / 9) - 5) = -11/3, 4\nroll back, left: (12 / 9) = 4/3, 5, 4\nroll back, left: 5 4 9 12\n(9) * (12) = 108, left: (9 * 12) = 108, 5, 4\nroll back, left: 5 4 9 12\n(4) / (12) = 1/3, left: (4 / 12) = 1/3, 5, 9\n(5) / (1/3) = 15, left: (5 / (4 / 12)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 / (4 / 12))) = 24\nreach 24! expression: (9 + (5 / (4 / 12)))"}, {"input": "3 7 13 5\n", "output": "(13) * (5) = 65, left: (13 * 5) = 65, 3, 7\n(7) + (65) = 72, left: (7 + (13 * 5)) = 72, 3\n(72) / (3) = 24, left: ((7 + (13 * 5)) / 3) = 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(13) - (3) = 10, left: (13 - 3) = 10, 7, 5\nroll back, left: 3 7 13 5\n(7) - (3) = 4, left: (7 - 3) = 4, 13, 5\nroll back, left: 3 7 13 5\n(7) * (13) = 91, left: (7 * 13) = 91, 3, 5\nroll back, left: 3 7 13 5\n(13) * (5) = 65, left: (13 * 5) = 65, 3, 7\n(7) + (65) = 72, left: (7 + (13 * 5)) = 72, 3\n(72) / (3) = 24, left: ((7 + (13 * 5)) / 3) = 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(7) * (5) = 35, left: (7 * 5) = 35, 3, 13\nroll back, left: 3 7 13 5\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 7, 13\nroll back, left: 3 7 13 5\n(7) * (13) = 91, left: (7 * 13) = 91, 3, 5\nroll back, left: 3 7 13 5\n(13) * (5) = 65, left: (13 * 5) = 65, 3, 7\n(7) + (65) = 72, left: (7 + (13 * 5)) = 72, 3\n(72) / (3) = 24, left: ((7 + (13 * 5)) / 3) = 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(7) * (5) = 35, left: (7 * 5) = 35, 3, 13\nroll back, left: 3 7 13 5\n(3) * (13) = 39, left: (3 * 13) = 39, 7, 5\n(7) / (5) = 7/5, left: (7 / 5) = 7/5, (3 * 13) = 39\nroll back, left: (3 * 13) = 39, 7, 5\nroll back, left: 3 7 13 5\n(13) * (5) = 65, left: (13 * 5) = 65, 3, 7\n(7) + (65) = 72, left: (7 + (13 * 5)) = 72, 3\n(72) / (3) = 24, left: ((7 + (13 * 5)) / 3) = 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "3 7 13 5\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 3, 13\nroll back, left: 3 7 13 5\n(5) - (7) = -2, left: (5 - 7) = -2, 3, 13\n(13) - (3) = 10, left: (13 - 3) = 10, (5 - 7) = -2\nroll back, left: (5 - 7) = -2, 3, 13\nroll back, left: 3 7 13 5\n(13) * (5) = 65, left: (13 * 5) = 65, 3, 7\n(7) + (65) = 72, left: (7 + (13 * 5)) = 72, 3\n(72) / (3) = 24, left: ((7 + (13 * 5)) / 3) = 24\nreach 24! expression: ((7 + (13 * 5)) / 3)"}, {"input": "2 9 3 10\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 3, 10\n(3) + (10) = 13, left: (3 + 10) = 13, (2 + 9) = 11\n(11) + (13) = 24, left: ((2 + 9) + (3 + 10)) = 24\nreach 24! expression: ((2 + 9) + (3 + 10))"}, {"input": "2 9 3 10\n", "output": "(9) + (10) = 19, left: (9 + 10) = 19, 2, 3\n(2) + (19) = 21, left: (2 + (9 + 10)) = 21, 3\n(3) + (21) = 24, left: (3 + (2 + (9 + 10))) = 24\nreach 24! expression: (3 + (2 + (9 + 10)))"}, {"input": "2 9 3 10\n", "output": "(2) + (10) = 12, left: (2 + 10) = 12, 9, 3\n(9) + (12) = 21, left: (9 + (2 + 10)) = 21, 3\n(3) + (21) = 24, left: (3 + (9 + (2 + 10))) = 24\nreach 24! expression: (3 + (9 + (2 + 10)))"}, {"input": "2 9 3 10\n", "output": "(2) / (10) = 1/5, left: (2 / 10) = 1/5, 9, 3\n(3) / (1/5) = 15, left: (3 / (2 / 10)) = 15, 9\n(9) + (15) = 24, left: (9 + (3 / (2 / 10))) = 24\nreach 24! expression: (9 + (3 / (2 / 10)))"}, {"input": "2 9 3 10\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 2, 10\n(10) - (2) = 8, left: (10 - 2) = 8, (3 / 9) = 1/3\n(8) / (1/3) = 24, left: ((10 - 2) / (3 / 9)) = 24\nreach 24! expression: ((10 - 2) / (3 / 9))"}, {"input": "2 9 3 10\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 2, 3\n(3) / (-1) = -3, left: (3 / (9 - 10)) = -3, 2\nroll back, left: (9 - 10) = -1, 2, 3\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, (9 - 10) = -1\nroll back, left: (9 - 10) = -1, 2, 3\nroll back, left: 2 9 3 10\n(9) + (10) = 19, left: (9 + 10) = 19, 2, 3\n(2) + (19) = 21, left: (2 + (9 + 10)) = 21, 3\n(3) + (21) = 24, left: (3 + (2 + (9 + 10))) = 24\nreach 24! expression: (3 + (2 + (9 + 10)))"}, {"input": "8 12 4 9\n", "output": "(4) * (9) = 36, left: (4 * 9) = 36, 8, 12\n(8) * (36) = 288, left: (8 * (4 * 9)) = 288, 12\n(288) / (12) = 24, left: ((8 * (4 * 9)) / 12) = 24\nreach 24! expression: ((8 * (4 * 9)) / 12)"}, {"input": "8 12 4 9\n", "output": "(8) * (4) = 32, left: (8 * 4) = 32, 12, 9\n(9) * (32) = 288, left: (9 * (8 * 4)) = 288, 12\n(288) / (12) = 24, left: ((9 * (8 * 4)) / 12) = 24\nreach 24! expression: ((9 * (8 * 4)) / 12)"}, {"input": "8 12 4 9\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 12, 4\n(12) / (72) = 1/6, left: (12 / (8 * 9)) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / (12 / (8 * 9))) = 24\nreach 24! expression: (4 / (12 / (8 * 9)))"}, {"input": "8 12 4 9\n", "output": "(4) * (9) = 36, left: (4 * 9) = 36, 8, 12\n(12) / (8) = 3/2, left: (12 / 8) = 3/2, (4 * 9) = 36\n(36) / (3/2) = 24, left: ((4 * 9) / (12 / 8)) = 24\nreach 24! expression: ((4 * 9) / (12 / 8))"}, {"input": "8 12 4 9\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 8, 9\n(8) * (9) = 72, left: (8 * 9) = 72, (4 / 12) = 1/3\n(1/3) * (72) = 24, left: ((4 / 12) * (8 * 9)) = 24\nreach 24! expression: ((4 / 12) * (8 * 9))"}, {"input": "8 12 4 9\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 8, 12\nroll back, left: 8 12 4 9\n(4) + (9) = 13, left: (4 + 9) = 13, 8, 12\n(8) * (13) = 104, left: (8 * (4 + 9)) = 104, 12\nroll back, left: (4 + 9) = 13, 8, 12\nroll back, left: 8 12 4 9\n(4) * (9) = 36, left: (4 * 9) = 36, 8, 12\n(12) / (8) = 3/2, left: (12 / 8) = 3/2, (4 * 9) = 36\n(36) / (3/2) = 24, left: ((4 * 9) / (12 / 8)) = 24\nreach 24! expression: ((4 * 9) / (12 / 8))"}, {"input": "8 12 4 9\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 8, 12\nroll back, left: 8 12 4 9\n(4) * (9) = 36, left: (4 * 9) = 36, 8, 12\n(8) - (36) = -28, left: (8 - (4 * 9)) = -28, 12\n(12) * (-28) = -336, left: (12 * (8 - (4 * 9))) = -336\nroll back, left: (8 - (4 * 9)) = -28, 12\nroll back, left: (4 * 9) = 36, 8, 12\n(8) * (36) = 288, left: (8 * (4 * 9)) = 288, 12\n(288) / (12) = 24, left: ((8 * (4 * 9)) / 12) = 24\nreach 24! expression: ((8 * (4 * 9)) / 12)"}, {"input": "8 12 4 9\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 12, 9\nroll back, left: 8 12 4 9\n(4) - (8) = -4, left: (4 - 8) = -4, 12, 9\n(9) - (-4) = 13, left: (9 - (4 - 8)) = 13, 12\nroll back, left: (4 - 8) = -4, 12, 9\nroll back, left: 8 12 4 9\n(8) * (4) = 32, left: (8 * 4) = 32, 12, 9\n(9) * (32) = 288, left: (9 * (8 * 4)) = 288, 12\n(288) / (12) = 24, left: ((9 * (8 * 4)) / 12) = 24\nreach 24! expression: ((9 * (8 * 4)) / 12)"}, {"input": "2 13 11 1\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 2, 1\n(2) - (1) = 1, left: (2 - 1) = 1, (13 + 11) = 24\n(24) * (1) = 24, left: ((13 + 11) * (2 - 1)) = 24\nreach 24! expression: ((13 + 11) * (2 - 1))"}, {"input": "2 13 11 1\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 13, 11\n(11) * (-1) = -11, left: (11 * (1 - 2)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 * (1 - 2))) = 24\nreach 24! expression: (13 - (11 * (1 - 2)))"}, {"input": "2 13 11 1\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 2, 1\n(2) - (1) = 1, left: (2 - 1) = 1, (13 + 11) = 24\n(24) / (1) = 24, left: ((13 + 11) / (2 - 1)) = 24\nreach 24! expression: ((13 + 11) / (2 - 1))"}, {"input": "2 13 11 1\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 13, 11\n(11) / (-1) = -11, left: (11 / (1 - 2)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 / (1 - 2))) = 24\nreach 24! expression: (13 - (11 / (1 - 2)))"}, {"input": "2 13 11 1\n", "output": "(2) - (11) = -9, left: (2 - 11) = -9, 13, 1\nroll back, left: 2 13 11 1\n(11) + (1) = 12, left: (11 + 1) = 12, 2, 13\n(2) - (12) = -10, left: (2 - (11 + 1)) = -10, 13\nroll back, left: (11 + 1) = 12, 2, 13\nroll back, left: 2 13 11 1\n(1) - (2) = -1, left: (1 - 2) = -1, 13, 11\n(11) / (-1) = -11, left: (11 / (1 - 2)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 / (1 - 2))) = 24\nreach 24! expression: (13 - (11 / (1 - 2)))"}, {"input": "2 13 11 1\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 2, 13\nroll back, left: 2 13 11 1\n(1) / (11) = 1/11, left: (1 / 11) = 1/11, 2, 13\nroll back, left: 2 13 11 1\n(11) - (13) = -2, left: (11 - 13) = -2, 2, 1\nroll back, left: 2 13 11 1\n(13) + (11) = 24, left: (13 + 11) = 24, 2, 1\n(2) - (1) = 1, left: (2 - 1) = 1, (13 + 11) = 24\n(24) / (1) = 24, left: ((13 + 11) / (2 - 1)) = 24\nreach 24! expression: ((13 + 11) / (2 - 1))"}, {"input": "2 13 11 1\n", "output": "(11) * (1) = 11, left: (11 * 1) = 11, 2, 13\nroll back, left: 2 13 11 1\n(11) / (1) = 11, left: (11 / 1) = 11, 2, 13\nroll back, left: 2 13 11 1\n(2) - (11) = -9, left: (2 - 11) = -9, 13, 1\nroll back, left: 2 13 11 1\n(1) - (2) = -1, left: (1 - 2) = -1, 13, 11\n(11) * (-1) = -11, left: (11 * (1 - 2)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 * (1 - 2))) = 24\nreach 24! expression: (13 - (11 * (1 - 2)))"}, {"input": "5 5 5 6\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (5 / 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (5 / 5))) = 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 5, 6\n(5) - (6) = -1, left: (5 - 6) = -1, (5 * 5) = 25\n(25) + (-1) = 24, left: ((5 * 5) + (5 - 6)) = 24\nreach 24! expression: ((5 * 5) + (5 - 6))"}, {"input": "5 5 5 6\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 5, 6\nroll back, left: 5 5 5 6\n(5) - (5) = 0, left: (5 - 5) = 0, 5, 6\nroll back, left: 5 5 5 6\n(5) / (5) = 1, left: (5 / 5) = 1, 5, 6\n(6) - (5) = 1, left: (6 - 5) = 1, (5 / 5) = 1\nroll back, left: (5 / 5) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (5 / 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (5 / 5))) = 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 5, 6\n(6) / (10) = 3/5, left: (6 / (5 + 5)) = 3/5, 5\nroll back, left: (5 + 5) = 10, 5, 6\nroll back, left: 5 5 5 6\n(5) / (5) = 1, left: (5 / 5) = 1, 5, 6\n(1) - (5) = -4, left: ((5 / 5) - 5) = -4, 6\nroll back, left: (5 / 5) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (5 / 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (5 / 5))) = 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 5, 6\n(6) - (1) = 5, left: (6 - (5 / 5)) = 5, 5\nroll back, left: (5 / 5) = 1, 5, 6\n(5) + (1) = 6, left: (5 + (5 / 5)) = 6, 6\nroll back, left: (5 / 5) = 1, 5, 6\n(5) * (1) = 5, left: (5 * (5 / 5)) = 5, 6\nroll back, left: (5 / 5) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (5 / 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (5 / 5))) = 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 5, 6\n(6) + (0) = 6, left: (6 + (5 - 5)) = 6, 5\nroll back, left: (5 - 5) = 0, 5, 6\n(0) - (6) = -6, left: ((5 - 5) - 6) = -6, 5\nroll back, left: (5 - 5) = 0, 5, 6\nroll back, left: 5 5 5 6\n(5) / (5) = 1, left: (5 / 5) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (5 / 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (5 / 5))) = 24\nreach 24! expression: (6 * (5 - (5 / 5)))"}, {"input": "5 5 5 6\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 5, 6\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, (5 - 5) = 0\nroll back, left: (5 - 5) = 0, 5, 6\nroll back, left: 5 5 5 6\n(5) + (5) = 10, left: (5 + 5) = 10, 5, 6\nroll back, left: 5 5 5 6\n(5) * (5) = 25, left: (5 * 5) = 25, 5, 6\n(5) - (6) = -1, left: (5 - 6) = -1, (5 * 5) = 25\n(25) + (-1) = 24, left: ((5 * 5) + (5 - 6)) = 24\nreach 24! expression: ((5 * 5) + (5 - 6))"}, {"input": "1 12 8 5\n", "output": "(8) + (5) = 13, left: (8 + 5) = 13, 1, 12\n(13) - (1) = 12, left: ((8 + 5) - 1) = 12, 12\n(12) + (12) = 24, left: (12 + ((8 + 5) - 1)) = 24\nreach 24! expression: (12 + ((8 + 5) - 1))"}, {"input": "1 12 8 5\n", "output": "(12) + (5) = 17, left: (12 + 5) = 17, 1, 8\n(8) + (17) = 25, left: (8 + (12 + 5)) = 25, 1\n(25) - (1) = 24, left: ((8 + (12 + 5)) - 1) = 24\nreach 24! expression: ((8 + (12 + 5)) - 1)"}, {"input": "1 12 8 5\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 1, 12\n(3) - (1) = 2, left: ((8 - 5) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((8 - 5) - 1)) = 24\nreach 24! expression: (12 * ((8 - 5) - 1))"}, {"input": "1 12 8 5\n", "output": "(1) - (12) = -11, left: (1 - 12) = -11, 8, 5\n(5) - (-11) = 16, left: (5 - (1 - 12)) = 16, 8\n(8) + (16) = 24, left: (8 + (5 - (1 - 12))) = 24\nreach 24! expression: (8 + (5 - (1 - 12)))"}, {"input": "1 12 8 5\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 12, 8\n(12) * (8) = 96, left: (12 * 8) = 96, (5 - 1) = 4\n(96) / (4) = 24, left: ((12 * 8) / (5 - 1)) = 24\nreach 24! expression: ((12 * 8) / (5 - 1))"}, {"input": "1 12 8 5\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 1, 12\n(1) - (3) = -2, left: (1 - (8 - 5)) = -2, 12\n(-2) - (12) = -14, left: ((1 - (8 - 5)) - 12) = -14\nroll back, left: (1 - (8 - 5)) = -2, 12\nroll back, left: (8 - 5) = 3, 1, 12\n(1) * (3) = 3, left: (1 * (8 - 5)) = 3, 12\nroll back, left: (8 - 5) = 3, 1, 12\n(3) - (1) = 2, left: ((8 - 5) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((8 - 5) - 1)) = 24\nreach 24! expression: (12 * ((8 - 5) - 1))"}, {"input": "1 12 8 5\n", "output": "(12) / (5) = 12/5, left: (12 / 5) = 12/5, 1, 8\n(1) + (8) = 9, left: (1 + 8) = 9, (12 / 5) = 12/5\nroll back, left: (12 / 5) = 12/5, 1, 8\nroll back, left: 1 12 8 5\n(12) + (5) = 17, left: (12 + 5) = 17, 1, 8\n(17) - (8) = 9, left: ((12 + 5) - 8) = 9, 1\nroll back, left: (12 + 5) = 17, 1, 8\n(8) + (17) = 25, left: (8 + (12 + 5)) = 25, 1\n(25) - (1) = 24, left: ((8 + (12 + 5)) - 1) = 24\nreach 24! expression: ((8 + (12 + 5)) - 1)"}, {"input": "1 12 8 5\n", "output": "(1) * (12) = 12, left: (1 * 12) = 12, 8, 5\n(12) / (8) = 3/2, left: ((1 * 12) / 8) = 3/2, 5\n(3/2) - (5) = -7/2, left: (((1 * 12) / 8) - 5) = -7/2\nroll back, left: ((1 * 12) / 8) = 3/2, 5\nroll back, left: (1 * 12) = 12, 8, 5\nroll back, left: 1 12 8 5\n(1) - (12) = -11, left: (1 - 12) = -11, 8, 5\n(5) - (-11) = 16, left: (5 - (1 - 12)) = 16, 8\n(8) + (16) = 24, left: (8 + (5 - (1 - 12))) = 24\nreach 24! expression: (8 + (5 - (1 - 12)))"}, {"input": "3 1 12 9\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 1, 12\n(1) * (12) = 12, left: (1 * 12) = 12, (3 + 9) = 12\n(12) + (12) = 24, left: ((3 + 9) + (1 * 12)) = 24\nreach 24! expression: ((3 + 9) + (1 * 12))"}, {"input": "3 1 12 9\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 12, 9\n(9) + (3) = 12, left: (9 + (3 / 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 + (3 / 1))) = 24\nreach 24! expression: (12 + (9 + (3 / 1)))"}, {"input": "3 1 12 9\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 3, 9\n(3) + (12) = 15, left: (3 + (12 / 1)) = 15, 9\n(9) + (15) = 24, left: (9 + (3 + (12 / 1))) = 24\nreach 24! expression: (9 + (3 + (12 / 1)))"}, {"input": "3 1 12 9\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 1, 12\n(3) - (1) = 2, left: ((9 / 3) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 / 3) - 1)) = 24\nreach 24! expression: (12 * ((9 / 3) - 1))"}, {"input": "3 1 12 9\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 12, 9\n(12) + (2) = 14, left: (12 + (3 - 1)) = 14, 9\n(14) - (9) = 5, left: ((12 + (3 - 1)) - 9) = 5\nroll back, left: (12 + (3 - 1)) = 14, 9\nroll back, left: (3 - 1) = 2, 12, 9\nroll back, left: 3 1 12 9\n(3) / (1) = 3, left: (3 / 1) = 3, 12, 9\n(9) + (3) = 12, left: (9 + (3 / 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 + (3 / 1))) = 24\nreach 24! expression: (12 + (9 + (3 / 1)))"}, {"input": "3 1 12 9\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 3, 9\n(3) / (12) = 1/4, left: (3 / (12 / 1)) = 1/4, 9\nroll back, left: (12 / 1) = 12, 3, 9\n(12) - (3) = 9, left: ((12 / 1) - 3) = 9, 9\nroll back, left: (12 / 1) = 12, 3, 9\n(3) - (12) = -9, left: (3 - (12 / 1)) = -9, 9\nroll back, left: (12 / 1) = 12, 3, 9\n(3) + (12) = 15, left: (3 + (12 / 1)) = 15, 9\n(9) + (15) = 24, left: (9 + (3 + (12 / 1))) = 24\nreach 24! expression: (9 + (3 + (12 / 1)))"}, {"input": "3 1 12 9\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 1, 12\n(12) - (-6) = 18, left: (12 - (3 - 9)) = 18, 1\nroll back, left: (3 - 9) = -6, 1, 12\nroll back, left: 3 1 12 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, 1, 12\nroll back, left: 3 1 12 9\n(9) / (3) = 3, left: (9 / 3) = 3, 1, 12\n(3) - (1) = 2, left: ((9 / 3) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 / 3) - 1)) = 24\nreach 24! expression: (12 * ((9 / 3) - 1))"}, {"input": "5 3 4 10\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 5, 10\n(10) * (12) = 120, left: (10 * (3 * 4)) = 120, 5\n(120) / (5) = 24, left: ((10 * (3 * 4)) / 5) = 24\nreach 24! expression: ((10 * (3 * 4)) / 5)"}, {"input": "5 3 4 10\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 3, 10\n(3) * (4/5) = 12/5, left: (3 * (4 / 5)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (3 * (4 / 5))) = 24\nreach 24! expression: (10 * (3 * (4 / 5)))"}, {"input": "5 3 4 10\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 3, 4\n(1/2) / (3) = 1/6, left: ((5 / 10) / 3) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / ((5 / 10) / 3)) = 24\nreach 24! expression: (4 / ((5 / 10) / 3))"}, {"input": "5 3 4 10\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 5, 4\n(4) * (30) = 120, left: (4 * (3 * 10)) = 120, 5\n(120) / (5) = 24, left: ((4 * (3 * 10)) / 5) = 24\nreach 24! expression: ((4 * (3 * 10)) / 5)"}, {"input": "5 3 4 10\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (5 / 4) = 5/4\n(30) / (5/4) = 24, left: ((3 * 10) / (5 / 4)) = 24\nreach 24! expression: ((3 * 10) / (5 / 4))"}, {"input": "5 3 4 10\n", "output": "(5) * (10) = 50, left: (5 * 10) = 50, 3, 4\nroll back, left: 5 3 4 10\n(5) + (10) = 15, left: (5 + 10) = 15, 3, 4\n(15) - (3) = 12, left: ((5 + 10) - 3) = 12, 4\nroll back, left: (5 + 10) = 15, 3, 4\nroll back, left: 5 3 4 10\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, 3, 4\n(1/2) / (3) = 1/6, left: ((5 / 10) / 3) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / ((5 / 10) / 3)) = 24\nreach 24! expression: (4 / ((5 / 10) / 3))"}, {"input": "5 3 4 10\n", "output": "(3) + (10) = 13, left: (3 + 10) = 13, 5, 4\nroll back, left: 5 3 4 10\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, 5, 4\n(10/3) / (5) = 2/3, left: ((10 / 3) / 5) = 2/3, 4\nroll back, left: (10 / 3) = 10/3, 5, 4\nroll back, left: 5 3 4 10\n(3) * (10) = 30, left: (3 * 10) = 30, 5, 4\n(4) * (30) = 120, left: (4 * (3 * 10)) = 120, 5\n(120) / (5) = 24, left: ((4 * (3 * 10)) / 5) = 24\nreach 24! expression: ((4 * (3 * 10)) / 5)"}, {"input": "5 3 4 10\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 3, 10\n(-1) / (3) = -1/3, left: ((4 - 5) / 3) = -1/3, 10\nroll back, left: (4 - 5) = -1, 3, 10\n(3) - (10) = -7, left: (3 - 10) = -7, (4 - 5) = -1\nroll back, left: (4 - 5) = -1, 3, 10\nroll back, left: 5 3 4 10\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (5 / 4) = 5/4\n(30) / (5/4) = 24, left: ((3 * 10) / (5 / 4)) = 24\nreach 24! expression: ((3 * 10) / (5 / 4))"}, {"input": "3 7 11 4\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 7, 11\n(7) + (11) = 18, left: (7 + 11) = 18, (3 / 4) = 3/4\n(18) / (3/4) = 24, left: ((7 + 11) / (3 / 4)) = 24\nreach 24! expression: ((7 + 11) / (3 / 4))"}, {"input": "3 7 11 4\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 3, 4\n(4) + (4) = 8, left: (4 + (11 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (11 - 7))) = 24\nreach 24! expression: (3 * (4 + (11 - 7)))"}, {"input": "3 7 11 4\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 3, 4\n(4) - (-4) = 8, left: (4 - (7 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 - (7 - 11))) = 24\nreach 24! expression: (3 * (4 - (7 - 11)))"}, {"input": "3 7 11 4\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 3, 11\n(11) + (-3) = 8, left: (11 + (4 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 + (4 - 7))) = 24\nreach 24! expression: (3 * (11 + (4 - 7)))"}, {"input": "3 7 11 4\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 3, 4\n(3) + (4) = 7, left: (3 + 4) = 7, (7 - 11) = -4\nroll back, left: (7 - 11) = -4, 3, 4\n(4) / (-4) = -1, left: (4 / (7 - 11)) = -1, 3\n(-1) - (3) = -4, left: ((4 / (7 - 11)) - 3) = -4\nroll back, left: (4 / (7 - 11)) = -1, 3\nroll back, left: (7 - 11) = -4, 3, 4\n(4) - (-4) = 8, left: (4 - (7 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 - (7 - 11))) = 24\nreach 24! expression: (3 * (4 - (7 - 11)))"}, {"input": "3 7 11 4\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 3, 4\n(-4) / (4) = -1, left: ((7 - 11) / 4) = -1, 3\n(3) * (-1) = -3, left: (3 * ((7 - 11) / 4)) = -3\nroll back, left: ((7 - 11) / 4) = -1, 3\n(-1) - (3) = -4, left: (((7 - 11) / 4) - 3) = -4\nroll back, left: ((7 - 11) / 4) = -1, 3\nroll back, left: (7 - 11) = -4, 3, 4\n(4) - (-4) = 8, left: (4 - (7 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 - (7 - 11))) = 24\nreach 24! expression: (3 * (4 - (7 - 11)))"}, {"input": "3 7 11 4\n", "output": "(7) + (4) = 11, left: (7 + 4) = 11, 3, 11\nroll back, left: 3 7 11 4\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 3, 11\n(7/4) / (11) = 7/44, left: ((7 / 4) / 11) = 7/44, 3\nroll back, left: (7 / 4) = 7/4, 3, 11\nroll back, left: 3 7 11 4\n(4) - (7) = -3, left: (4 - 7) = -3, 3, 11\n(11) + (-3) = 8, left: (11 + (4 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 + (4 - 7))) = 24\nreach 24! expression: (3 * (11 + (4 - 7)))"}, {"input": "3 7 11 4\n", "output": "(11) / (7) = 11/7, left: (11 / 7) = 11/7, 3, 4\n(11/7) - (3) = -10/7, left: ((11 / 7) - 3) = -10/7, 4\nroll back, left: (11 / 7) = 11/7, 3, 4\nroll back, left: 3 7 11 4\n(7) * (11) = 77, left: (7 * 11) = 77, 3, 4\nroll back, left: 3 7 11 4\n(11) - (7) = 4, left: (11 - 7) = 4, 3, 4\n(4) + (4) = 8, left: (4 + (11 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (11 - 7))) = 24\nreach 24! expression: (3 * (4 + (11 - 7)))"}, {"input": "4 3 9 3\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 3, 3\n(3) + (5) = 8, left: (3 + (9 - 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (3 + (9 - 4))) = 24\nreach 24! expression: (3 * (3 + (9 - 4)))"}, {"input": "4 3 9 3\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (3 + 9) = 12\n(12) + (12) = 24, left: ((3 + 9) + (4 * 3)) = 24\nreach 24! expression: ((3 + 9) + (4 * 3))"}, {"input": "4 3 9 3\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 9, 3\n(9) + (12) = 21, left: (9 + (4 * 3)) = 21, 3\n(3) + (21) = 24, left: (3 + (9 + (4 * 3))) = 24\nreach 24! expression: (3 + (9 + (4 * 3)))"}, {"input": "4 3 9 3\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 4, 3\n(3) + (3) = 6, left: (3 + (9 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (9 / 3))) = 24\nreach 24! expression: (4 * (3 + (9 / 3)))"}, {"input": "4 3 9 3\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 4, 3\n(12) - (4) = 8, left: ((3 + 9) - 4) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 + 9) - 4)) = 24\nreach 24! expression: (3 * ((3 + 9) - 4))"}, {"input": "4 3 9 3\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 9, 3\n(9) / (12) = 3/4, left: (9 / (4 * 3)) = 3/4, 3\n(3/4) - (3) = -9/4, left: ((9 / (4 * 3)) - 3) = -9/4\nroll back, left: (9 / (4 * 3)) = 3/4, 3\nroll back, left: (4 * 3) = 12, 9, 3\n(12) - (9) = 3, left: ((4 * 3) - 9) = 3, 3\nroll back, left: (4 * 3) = 12, 9, 3\n(9) + (12) = 21, left: (9 + (4 * 3)) = 21, 3\n(3) + (21) = 24, left: (3 + (9 + (4 * 3))) = 24\nreach 24! expression: (3 + (9 + (4 * 3)))"}, {"input": "4 3 9 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 4, 9\n(9) - (9) = 0, left: (9 - (3 * 3)) = 0, 4\nroll back, left: (3 * 3) = 9, 4, 9\nroll back, left: 4 3 9 3\n(3) + (3) = 6, left: (3 + 3) = 6, 4, 9\nroll back, left: 4 3 9 3\n(9) - (4) = 5, left: (9 - 4) = 5, 3, 3\n(3) + (5) = 8, left: (3 + (9 - 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (3 + (9 - 4))) = 24\nreach 24! expression: (3 * (3 + (9 - 4)))"}, {"input": "4 3 9 3\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 4, 3\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, (3 / 9) = 1/3\nroll back, left: (3 / 9) = 1/3, 4, 3\nroll back, left: 4 3 9 3\n(9) / (3) = 3, left: (9 / 3) = 3, 4, 3\n(4) - (3) = 1, left: (4 - 3) = 1, (9 / 3) = 3\nroll back, left: (9 / 3) = 3, 4, 3\n(3) + (3) = 6, left: (3 + (9 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (9 / 3))) = 24\nreach 24! expression: (4 * (3 + (9 / 3)))"}, {"input": "4 3 9 3\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 4, 3\n(3) / (1/3) = 9, left: (3 / (3 / 9)) = 9, 4\nroll back, left: (3 / 9) = 1/3, 4, 3\nroll back, left: 4 3 9 3\n(3) - (9) = -6, left: (3 - 9) = -6, 4, 3\nroll back, left: 4 3 9 3\n(3) + (9) = 12, left: (3 + 9) = 12, 4, 3\n(12) - (4) = 8, left: ((3 + 9) - 4) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 + 9) - 4)) = 24\nreach 24! expression: (3 * ((3 + 9) - 4))"}, {"input": "4 3 9 3\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 4, 3\n(4) + (3) = 7, left: (4 + 3) = 7, (3 / 9) = 1/3\nroll back, left: (3 / 9) = 1/3, 4, 3\nroll back, left: 4 3 9 3\n(3) * (9) = 27, left: (3 * 9) = 27, 4, 3\nroll back, left: 4 3 9 3\n(3) + (9) = 12, left: (3 + 9) = 12, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (3 + 9) = 12\n(12) + (12) = 24, left: ((3 + 9) + (4 * 3)) = 24\nreach 24! expression: ((3 + 9) + (4 * 3))"}, {"input": "5 11 6 3\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 11, 6\n(15) - (11) = 4, left: ((5 * 3) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 * 3) - 11)) = 24\nreach 24! expression: (6 * ((5 * 3) - 11))"}, {"input": "5 11 6 3\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 5, 11\n(5) - (11) = -6, left: (5 - 11) = -6, (6 * 3) = 18\n(18) - (-6) = 24, left: ((6 * 3) - (5 - 11)) = 24\nreach 24! expression: ((6 * 3) - (5 - 11))"}, {"input": "5 11 6 3\n", "output": "(5) / (3) = 5/3, left: (5 / 3) = 5/3, 11, 6\n(5/3) / (6) = 5/18, left: ((5 / 3) / 6) = 5/18, 11\nroll back, left: (5 / 3) = 5/3, 11, 6\n(6) * (5/3) = 10, left: (6 * (5 / 3)) = 10, 11\nroll back, left: (5 / 3) = 5/3, 11, 6\nroll back, left: 5 11 6 3\n(5) * (3) = 15, left: (5 * 3) = 15, 11, 6\n(15) - (11) = 4, left: ((5 * 3) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 * 3) - 11)) = 24\nreach 24! expression: (6 * ((5 * 3) - 11))"}, {"input": "5 11 6 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 11, 6\n(6) + (8) = 14, left: (6 + (5 + 3)) = 14, 11\nroll back, left: (5 + 3) = 8, 11, 6\nroll back, left: 5 11 6 3\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 11, 6\nroll back, left: 5 11 6 3\n(5) * (3) = 15, left: (5 * 3) = 15, 11, 6\n(15) - (11) = 4, left: ((5 * 3) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 * 3) - 11)) = 24\nreach 24! expression: (6 * ((5 * 3) - 11))"}, {"input": "5 11 6 3\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 5, 11\n(5) - (11) = -6, left: (5 - 11) = -6, (6 + 3) = 9\nroll back, left: (6 + 3) = 9, 5, 11\n(9) / (5) = 9/5, left: ((6 + 3) / 5) = 9/5, 11\nroll back, left: (6 + 3) = 9, 5, 11\nroll back, left: 5 11 6 3\n(6) * (3) = 18, left: (6 * 3) = 18, 5, 11\n(5) - (11) = -6, left: (5 - 11) = -6, (6 * 3) = 18\n(18) - (-6) = 24, left: ((6 * 3) - (5 - 11)) = 24\nreach 24! expression: ((6 * 3) - (5 - 11))"}, {"input": "5 11 6 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 5, 11\n(11) - (2) = 9, left: (11 - (6 / 3)) = 9, 5\n(9) - (5) = 4, left: ((11 - (6 / 3)) - 5) = 4\nroll back, left: (11 - (6 / 3)) = 9, 5\nroll back, left: (6 / 3) = 2, 5, 11\nroll back, left: 5 11 6 3\n(6) * (3) = 18, left: (6 * 3) = 18, 5, 11\n(5) - (11) = -6, left: (5 - 11) = -6, (6 * 3) = 18\n(18) - (-6) = 24, left: ((6 * 3) - (5 - 11)) = 24\nreach 24! expression: ((6 * 3) - (5 - 11))"}, {"input": "5 11 6 3\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 11, 3\n(11) - (3) = 8, left: (11 - 3) = 8, (5 / 6) = 5/6\nroll back, left: (5 / 6) = 5/6, 11, 3\nroll back, left: 5 11 6 3\n(5) * (6) = 30, left: (5 * 6) = 30, 11, 3\nroll back, left: 5 11 6 3\n(5) * (3) = 15, left: (5 * 3) = 15, 11, 6\n(15) - (11) = 4, left: ((5 * 3) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 * 3) - 11)) = 24\nreach 24! expression: (6 * ((5 * 3) - 11))"}, {"input": "12 13 4 8\n", "output": "(13) + (8) = 21, left: (13 + 8) = 21, 12, 4\n(12) / (4) = 3, left: (12 / 4) = 3, (13 + 8) = 21\n(21) + (3) = 24, left: ((13 + 8) + (12 / 4)) = 24\nreach 24! expression: ((13 + 8) + (12 / 4))"}, {"input": "12 13 4 8\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (13 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (13 - 4))) = 24\nreach 24! expression: (8 * (12 - (13 - 4)))"}, {"input": "12 13 4 8\n", "output": "(12) - (13) = -1, left: (12 - 13) = -1, 4, 8\n(4) + (-1) = 3, left: (4 + (12 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 + (12 - 13))) = 24\nreach 24! expression: (8 * (4 + (12 - 13)))"}, {"input": "12 13 4 8\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 13, 8\n(13) + (8) = 21, left: (13 + 8) = 21, (12 / 4) = 3\n(3) + (21) = 24, left: ((12 / 4) + (13 + 8)) = 24\nreach 24! expression: ((12 / 4) + (13 + 8))"}, {"input": "12 13 4 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 13, 4\nroll back, left: 12 13 4 8\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 13, 4\nroll back, left: 12 13 4 8\n(12) + (8) = 20, left: (12 + 8) = 20, 13, 4\nroll back, left: 12 13 4 8\n(13) - (4) = 9, left: (13 - 4) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (13 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (13 - 4))) = 24\nreach 24! expression: (8 * (12 - (13 - 4)))"}, {"input": "12 13 4 8\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 12, 13\nroll back, left: 12 13 4 8\n(4) + (8) = 12, left: (4 + 8) = 12, 12, 13\n(12) - (13) = -1, left: (12 - 13) = -1, (4 + 8) = 12\nroll back, left: (4 + 8) = 12, 12, 13\nroll back, left: 12 13 4 8\n(12) - (13) = -1, left: (12 - 13) = -1, 4, 8\n(4) + (-1) = 3, left: (4 + (12 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 + (12 - 13))) = 24\nreach 24! expression: (8 * (4 + (12 - 13)))"}, {"input": "9 2 11 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (9 / 9))) = 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 9, 2\nroll back, left: 9 2 11 9\n(9) - (9) = 0, left: (9 - 9) = 0, 2, 11\n(2) + (11) = 13, left: (2 + 11) = 13, (9 - 9) = 0\nroll back, left: (9 - 9) = 0, 2, 11\nroll back, left: 9 2 11 9\n(9) / (9) = 1, left: (9 / 9) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (9 / 9))) = 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 2, 11\n(11) - (2) = 9, left: (11 - 2) = 9, (9 / 9) = 1\n(1) / (9) = 1/9, left: ((9 / 9) / (11 - 2)) = 1/9\nroll back, left: (11 - 2) = 9, (9 / 9) = 1\nroll back, left: (9 / 9) = 1, 2, 11\n(11) / (1) = 11, left: (11 / (9 / 9)) = 11, 2\nroll back, left: (9 / 9) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (9 / 9))) = 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 2, 9\nroll back, left: 9 2 11 9\n(9) + (11) = 20, left: (9 + 11) = 20, 2, 9\nroll back, left: 9 2 11 9\n(2) + (11) = 13, left: (2 + 11) = 13, 9, 9\nroll back, left: 9 2 11 9\n(9) / (9) = 1, left: (9 / 9) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (9 / 9))) = 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(9) + (11) = 20, left: (9 + 11) = 20, 2, 9\nroll back, left: 9 2 11 9\n(9) / (11) = 9/11, left: (9 / 11) = 9/11, 9, 2\nroll back, left: 9 2 11 9\n(9) / (9) = 1, left: (9 / 9) = 1, 2, 11\n(11) / (2) = 11/2, left: (11 / 2) = 11/2, (9 / 9) = 1\nroll back, left: (9 / 9) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (9 / 9))) = 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 11 9\n", "output": "(2) * (11) = 22, left: (2 * 11) = 22, 9, 9\nroll back, left: 9 2 11 9\n(9) - (11) = -2, left: (9 - 11) = -2, 9, 2\nroll back, left: 9 2 11 9\n(9) / (9) = 1, left: (9 / 9) = 1, 2, 11\n(2) + (11) = 13, left: (2 + 11) = 13, (9 / 9) = 1\nroll back, left: (9 / 9) = 1, 2, 11\n(11) + (1) = 12, left: (11 + (9 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (9 / 9))) = 24\nreach 24! expression: (2 * (11 + (9 / 9)))"}, {"input": "9 2 8 2\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (2 - 8) = -6\n(18) - (-6) = 24, left: ((9 * 2) - (2 - 8)) = 24\nreach 24! expression: ((9 * 2) - (2 - 8))"}, {"input": "9 2 8 2\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (8 - 2) = 6\n(6) + (18) = 24, left: ((8 - 2) + (9 * 2)) = 24\nreach 24! expression: ((8 - 2) + (9 * 2))"}, {"input": "9 2 8 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 2, 8\n(8) + (18) = 26, left: (8 + (9 * 2)) = 26, 2\n(26) - (2) = 24, left: ((8 + (9 * 2)) - 2) = 24\nreach 24! expression: ((8 + (9 * 2)) - 2)"}, {"input": "9 2 8 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 8, 2\n(2) - (18) = -16, left: (2 - (9 * 2)) = -16, 8\n(8) - (-16) = 24, left: (8 - (2 - (9 * 2))) = 24\nreach 24! expression: (8 - (2 - (9 * 2)))"}, {"input": "9 2 8 2\n", "output": "(2) / (9) = 2/9, left: (2 / 9) = 2/9, 8, 2\n(2/9) - (2) = -16/9, left: ((2 / 9) - 2) = -16/9, 8\nroll back, left: (2 / 9) = 2/9, 8, 2\nroll back, left: 9 2 8 2\n(9) / (2) = 9/2, left: (9 / 2) = 9/2, 8, 2\nroll back, left: 9 2 8 2\n(9) * (2) = 18, left: (9 * 2) = 18, 8, 2\n(2) - (18) = -16, left: (2 - (9 * 2)) = -16, 8\n(8) - (-16) = 24, left: (8 - (2 - (9 * 2))) = 24\nreach 24! expression: (8 - (2 - (9 * 2)))"}, {"input": "9 2 8 2\n", "output": "(9) + (2) = 11, left: (9 + 2) = 11, 2, 8\n(11) / (8) = 11/8, left: ((9 + 2) / 8) = 11/8, 2\nroll back, left: (9 + 2) = 11, 2, 8\n(2) + (11) = 13, left: (2 + (9 + 2)) = 13, 8\nroll back, left: (9 + 2) = 11, 2, 8\nroll back, left: 9 2 8 2\n(9) * (2) = 18, left: (9 * 2) = 18, 2, 8\n(8) + (18) = 26, left: (8 + (9 * 2)) = 26, 2\n(26) - (2) = 24, left: ((8 + (9 * 2)) - 2) = 24\nreach 24! expression: ((8 + (9 * 2)) - 2)"}, {"input": "9 2 8 2\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 9, 2\n(2) - (6) = -4, left: (2 - (8 - 2)) = -4, 9\nroll back, left: (8 - 2) = 6, 9, 2\n(2) / (6) = 1/3, left: (2 / (8 - 2)) = 1/3, 9\nroll back, left: (8 - 2) = 6, 9, 2\n(9) + (6) = 15, left: (9 + (8 - 2)) = 15, 2\nroll back, left: (8 - 2) = 6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (8 - 2) = 6\n(6) + (18) = 24, left: ((8 - 2) + (9 * 2)) = 24\nreach 24! expression: ((8 - 2) + (9 * 2))"}, {"input": "9 2 8 2\n", "output": "(9) + (8) = 17, left: (9 + 8) = 17, 2, 2\n(2) / (17) = 2/17, left: (2 / (9 + 8)) = 2/17, 2\nroll back, left: (9 + 8) = 17, 2, 2\nroll back, left: 9 2 8 2\n(9) / (8) = 9/8, left: (9 / 8) = 9/8, 2, 2\nroll back, left: 9 2 8 2\n(8) - (2) = 6, left: (8 - 2) = 6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (8 - 2) = 6\n(6) + (18) = 24, left: ((8 - 2) + (9 * 2)) = 24\nreach 24! expression: ((8 - 2) + (9 * 2))"}, {"input": "9 2 8 2\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 9, 8\n(9) - (8) = 1, left: (9 - 8) = 1, (2 + 2) = 4\n(4) * (1) = 4, left: ((2 + 2) * (9 - 8)) = 4\nroll back, left: (9 - 8) = 1, (2 + 2) = 4\nroll back, left: (2 + 2) = 4, 9, 8\nroll back, left: 9 2 8 2\n(2) - (8) = -6, left: (2 - 8) = -6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (2 - 8) = -6\n(18) - (-6) = 24, left: ((9 * 2) - (2 - 8)) = 24\nreach 24! expression: ((9 * 2) - (2 - 8))"}, {"input": "5 9 5 8\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 5, 9\n(5) * (-3) = -15, left: (5 * (5 - 8)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (5 - 8))) = 24\nreach 24! expression: (9 - (5 * (5 - 8)))"}, {"input": "5 9 5 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (8 - 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (8 - 5))) = 24\nreach 24! expression: (9 + (5 * (8 - 5)))"}, {"input": "5 9 5 8\n", "output": "(8) - (9) = -1, left: (8 - 9) = -1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (8 - 9) = -1\n(-1) + (25) = 24, left: ((8 - 9) + (5 * 5)) = 24\nreach 24! expression: ((8 - 9) + (5 * 5))"}, {"input": "5 9 5 8\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 9, 8\n(8) + (25) = 33, left: (8 + (5 * 5)) = 33, 9\n(33) - (9) = 24, left: ((8 + (5 * 5)) - 9) = 24\nreach 24! expression: ((8 + (5 * 5)) - 9)"}, {"input": "5 9 5 8\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 5, 8\nroll back, left: 5 9 5 8\n(5) - (9) = -4, left: (5 - 9) = -4, 5, 8\nroll back, left: 5 9 5 8\n(5) + (9) = 14, left: (5 + 9) = 14, 5, 8\nroll back, left: 5 9 5 8\n(5) * (5) = 25, left: (5 * 5) = 25, 9, 8\n(8) + (25) = 33, left: (8 + (5 * 5)) = 33, 9\n(33) - (9) = 24, left: ((8 + (5 * 5)) - 9) = 24\nreach 24! expression: ((8 + (5 * 5)) - 9)"}, {"input": "5 9 5 8\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 5, 8\n(5/9) - (5) = -40/9, left: ((5 / 9) - 5) = -40/9, 8\nroll back, left: (5 / 9) = 5/9, 5, 8\nroll back, left: 5 9 5 8\n(9) + (5) = 14, left: (9 + 5) = 14, 5, 8\nroll back, left: 5 9 5 8\n(8) - (9) = -1, left: (8 - 9) = -1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (8 - 9) = -1\n(-1) + (25) = 24, left: ((8 - 9) + (5 * 5)) = 24\nreach 24! expression: ((8 - 9) + (5 * 5))"}, {"input": "5 9 5 8\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 5, 9\nroll back, left: 5 9 5 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 5, 9\n(5/8) - (9) = -67/8, left: ((5 / 8) - 9) = -67/8, 5\nroll back, left: (5 / 8) = 5/8, 5, 9\nroll back, left: 5 9 5 8\n(5) - (8) = -3, left: (5 - 8) = -3, 5, 9\n(5) * (-3) = -15, left: (5 * (5 - 8)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (5 - 8))) = 24\nreach 24! expression: (9 - (5 * (5 - 8)))"}, {"input": "5 9 5 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 9, 5\n(9) / (3) = 3, left: (9 / (8 - 5)) = 3, 5\n(3) - (5) = -2, left: ((9 / (8 - 5)) - 5) = -2\nroll back, left: (9 / (8 - 5)) = 3, 5\nroll back, left: (8 - 5) = 3, 9, 5\n(5) - (3) = 2, left: (5 - (8 - 5)) = 2, 9\nroll back, left: (8 - 5) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (8 - 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (8 - 5))) = 24\nreach 24! expression: (9 + (5 * (8 - 5)))"}, {"input": "5 9 5 8\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 5, 9\n(5) * (9) = 45, left: (5 * 9) = 45, (5 - 8) = -3\nroll back, left: (5 - 8) = -3, 5, 9\n(9) - (-3) = 12, left: (9 - (5 - 8)) = 12, 5\n(12) / (5) = 12/5, left: ((9 - (5 - 8)) / 5) = 12/5\nroll back, left: (9 - (5 - 8)) = 12, 5\nroll back, left: (5 - 8) = -3, 5, 9\n(5) * (-3) = -15, left: (5 * (5 - 8)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (5 - 8))) = 24\nreach 24! expression: (9 - (5 * (5 - 8)))"}, {"input": "13 3 10 7\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 13, 10\n(10) - (13) = -3, left: (10 - 13) = -3, (3 * 7) = 21\n(21) - (-3) = 24, left: ((3 * 7) - (10 - 13)) = 24\nreach 24! expression: ((3 * 7) - (10 - 13))"}, {"input": "13 3 10 7\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (7 - 13) = -6\n(-6) + (30) = 24, left: ((7 - 13) + (3 * 10)) = 24\nreach 24! expression: ((7 - 13) + (3 * 10))"}, {"input": "13 3 10 7\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 13, 7\n(7) - (13) = -6, left: (7 - 13) = -6, (3 * 10) = 30\n(30) + (-6) = 24, left: ((3 * 10) + (7 - 13)) = 24\nreach 24! expression: ((3 * 10) + (7 - 13))"}, {"input": "13 3 10 7\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 3, 7\n(3) * (7) = 21, left: (3 * 7) = 21, (13 - 10) = 3\n(3) + (21) = 24, left: ((13 - 10) + (3 * 7)) = 24\nreach 24! expression: ((13 - 10) + (3 * 7))"}, {"input": "13 3 10 7\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 10, 7\nroll back, left: 13 3 10 7\n(7) - (10) = -3, left: (7 - 10) = -3, 13, 3\nroll back, left: 13 3 10 7\n(10) - (7) = 3, left: (10 - 7) = 3, 13, 3\nroll back, left: 13 3 10 7\n(13) - (10) = 3, left: (13 - 10) = 3, 3, 7\n(3) * (7) = 21, left: (3 * 7) = 21, (13 - 10) = 3\n(3) + (21) = 24, left: ((13 - 10) + (3 * 7)) = 24\nreach 24! expression: ((13 - 10) + (3 * 7))"}, {"input": "13 3 10 7\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 10, 7\nroll back, left: 13 3 10 7\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, 10, 7\nroll back, left: 13 3 10 7\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, 13, 7\nroll back, left: 13 3 10 7\n(3) * (10) = 30, left: (3 * 10) = 30, 13, 7\n(7) - (13) = -6, left: (7 - 13) = -6, (3 * 10) = 30\n(30) + (-6) = 24, left: ((3 * 10) + (7 - 13)) = 24\nreach 24! expression: ((3 * 10) + (7 - 13))"}, {"input": "13 3 10 7\n", "output": "(13) / (3) = 13/3, left: (13 / 3) = 13/3, 10, 7\nroll back, left: 13 3 10 7\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 13, 10\nroll back, left: 13 3 10 7\n(3) + (7) = 10, left: (3 + 7) = 10, 13, 10\nroll back, left: 13 3 10 7\n(3) * (7) = 21, left: (3 * 7) = 21, 13, 10\n(10) - (13) = -3, left: (10 - 13) = -3, (3 * 7) = 21\n(21) - (-3) = 24, left: ((3 * 7) - (10 - 13)) = 24\nreach 24! expression: ((3 * 7) - (10 - 13))"}, {"input": "5 1 12 6\n", "output": "(1) + (6) = 7, left: (1 + 6) = 7, 5, 12\n(5) + (7) = 12, left: (5 + (1 + 6)) = 12, 12\n(12) + (12) = 24, left: (12 + (5 + (1 + 6))) = 24\nreach 24! expression: (12 + (5 + (1 + 6)))"}, {"input": "5 1 12 6\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (12 - 6) = 6\n(6) * (4) = 24, left: ((12 - 6) * (5 - 1)) = 24\nreach 24! expression: ((12 - 6) * (5 - 1))"}, {"input": "5 1 12 6\n", "output": "(1) + (12) = 13, left: (1 + 12) = 13, 5, 6\n(5) + (13) = 18, left: (5 + (1 + 12)) = 18, 6\n(6) + (18) = 24, left: (6 + (5 + (1 + 12))) = 24\nreach 24! expression: (6 + (5 + (1 + 12)))"}, {"input": "5 1 12 6\n", "output": "(1) + (12) = 13, left: (1 + 12) = 13, 5, 6\n(5) + (6) = 11, left: (5 + 6) = 11, (1 + 12) = 13\n(13) + (11) = 24, left: ((1 + 12) + (5 + 6)) = 24\nreach 24! expression: ((1 + 12) + (5 + 6))"}, {"input": "5 1 12 6\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 12, 6\n(6) * (6) = 36, left: (6 * (5 + 1)) = 36, 12\n(36) - (12) = 24, left: ((6 * (5 + 1)) - 12) = 24\nreach 24! expression: ((6 * (5 + 1)) - 12)"}, {"input": "5 1 12 6\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 5, 6\n(6) * (11) = 66, left: (6 * (12 - 1)) = 66, 5\nroll back, left: (12 - 1) = 11, 5, 6\n(6) - (5) = 1, left: (6 - 5) = 1, (12 - 1) = 11\nroll back, left: (12 - 1) = 11, 5, 6\nroll back, left: 5 1 12 6\n(1) + (12) = 13, left: (1 + 12) = 13, 5, 6\n(5) + (6) = 11, left: (5 + 6) = 11, (1 + 12) = 13\n(13) + (11) = 24, left: ((1 + 12) + (5 + 6)) = 24\nreach 24! expression: ((1 + 12) + (5 + 6))"}, {"input": "5 1 12 6\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 5, 1\nroll back, left: 5 1 12 6\n(12) / (6) = 2, left: (12 / 6) = 2, 5, 1\n(1) - (2) = -1, left: (1 - (12 / 6)) = -1, 5\nroll back, left: (12 / 6) = 2, 5, 1\nroll back, left: 5 1 12 6\n(12) - (6) = 6, left: (12 - 6) = 6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (12 - 6) = 6\n(6) * (4) = 24, left: ((12 - 6) * (5 - 1)) = 24\nreach 24! expression: ((12 - 6) * (5 - 1))"}, {"input": "6 3 6 9\n", "output": "(6) + (9) = 15, left: (6 + 9) = 15, 6, 3\n(6) + (15) = 21, left: (6 + (6 + 9)) = 21, 3\n(3) + (21) = 24, left: (3 + (6 + (6 + 9))) = 24\nreach 24! expression: (3 + (6 + (6 + 9)))"}, {"input": "6 3 6 9\n", "output": "(6) + (9) = 15, left: (6 + 9) = 15, 3, 6\n(3) + (15) = 18, left: (3 + (6 + 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 + (6 + 9))) = 24\nreach 24! expression: (6 + (3 + (6 + 9)))"}, {"input": "6 3 6 9\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (6 / 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (6 / 6))) = 24\nreach 24! expression: (3 * (9 - (6 / 6)))"}, {"input": "6 3 6 9\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 6, 9\n(9) + (9) = 18, left: (9 + (6 + 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 + (6 + 3))) = 24\nreach 24! expression: (6 + (9 + (6 + 3)))"}, {"input": "6 3 6 9\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 6, 6\n(6) / (1/3) = 18, left: (6 / (3 / 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 / (3 / 9))) = 24\nreach 24! expression: (6 + (6 / (3 / 9)))"}, {"input": "6 3 6 9\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 6, 9\n(9) + (9) = 18, left: (9 + (6 + 3)) = 18, 6\n(6) / (18) = 1/3, left: (6 / (9 + (6 + 3))) = 1/3\nroll back, left: (9 + (6 + 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 + (6 + 3))) = 24\nreach 24! expression: (6 + (9 + (6 + 3)))"}, {"input": "6 3 6 9\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (6 / 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (6 / 6))) = 24\nreach 24! expression: (3 * (9 - (6 / 6)))"}, {"input": "6 3 6 9\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 6, 3\nroll back, left: 6 3 6 9\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, 6, 3\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, (6 / 9) = 2/3\nroll back, left: (6 / 9) = 2/3, 6, 3\nroll back, left: 6 3 6 9\n(6) + (9) = 15, left: (6 + 9) = 15, 6, 3\n(6) + (15) = 21, left: (6 + (6 + 9)) = 21, 3\n(3) + (21) = 24, left: (3 + (6 + (6 + 9))) = 24\nreach 24! expression: (3 + (6 + (6 + 9)))"}, {"input": "6 3 6 9\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 6, 6\n(6) / (6) = 1, left: ((9 - 3) / 6) = 1, 6\nroll back, left: (9 - 3) = 6, 6, 6\n(6) - (6) = 0, left: (6 - 6) = 0, (9 - 3) = 6\nroll back, left: (9 - 3) = 6, 6, 6\nroll back, left: 6 3 6 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, 6, 6\n(6) / (1/3) = 18, left: (6 / (3 / 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 / (3 / 9))) = 24\nreach 24! expression: (6 + (6 / (3 / 9)))"}, {"input": "6 3 6 9\n", "output": "(9) / (6) = 3/2, left: (9 / 6) = 3/2, 3, 6\n(3) + (6) = 9, left: (3 + 6) = 9, (9 / 6) = 3/2\n(3/2) - (9) = -15/2, left: ((9 / 6) - (3 + 6)) = -15/2\nroll back, left: (3 + 6) = 9, (9 / 6) = 3/2\nroll back, left: (9 / 6) = 3/2, 3, 6\nroll back, left: 6 3 6 9\n(6) + (9) = 15, left: (6 + 9) = 15, 3, 6\n(3) + (15) = 18, left: (3 + (6 + 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 + (6 + 9))) = 24\nreach 24! expression: (6 + (3 + (6 + 9)))"}, {"input": "6 3 6 9\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 6, 9\n(9) + (9) = 18, left: (9 + (6 + 3)) = 18, 6\n(6) / (18) = 1/3, left: (6 / (9 + (6 + 3))) = 1/3\nroll back, left: (9 + (6 + 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 + (6 + 3))) = 24\nreach 24! expression: (6 + (9 + (6 + 3)))"}, {"input": "6 3 6 9\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (6 / 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (6 / 6))) = 24\nreach 24! expression: (3 * (9 - (6 / 6)))"}, {"input": "6 3 6 9\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 6, 9\n(9) + (9) = 18, left: (9 + (6 + 3)) = 18, 6\n(6) / (18) = 1/3, left: (6 / (9 + (6 + 3))) = 1/3\nroll back, left: (9 + (6 + 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 + (6 + 3))) = 24\nreach 24! expression: (6 + (9 + (6 + 3)))"}, {"input": "6 3 6 9\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (6 / 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (6 / 6))) = 24\nreach 24! expression: (3 * (9 - (6 / 6)))"}, {"input": "6 3 6 9\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 6, 9\n(9) + (9) = 18, left: (9 + (6 + 3)) = 18, 6\n(6) / (18) = 1/3, left: (6 / (9 + (6 + 3))) = 1/3\nroll back, left: (9 + (6 + 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 + (6 + 3))) = 24\nreach 24! expression: (6 + (9 + (6 + 3)))"}, {"input": "6 3 6 9\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (6 / 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (6 / 6))) = 24\nreach 24! expression: (3 * (9 - (6 / 6)))"}, {"input": "10 12 11 3\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 10, 12\n(10) - (8) = 2, left: (10 - (11 - 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 - (11 - 3))) = 24\nreach 24! expression: (12 * (10 - (11 - 3)))"}, {"input": "10 12 11 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 12, 11\n(13) - (11) = 2, left: ((10 + 3) - 11) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 3) - 11)) = 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "10 12 11 3\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 11, 3\nroll back, left: 10 12 11 3\n(10) * (12) = 120, left: (10 * 12) = 120, 11, 3\nroll back, left: 10 12 11 3\n(3) - (10) = -7, left: (3 - 10) = -7, 12, 11\nroll back, left: 10 12 11 3\n(10) + (3) = 13, left: (10 + 3) = 13, 12, 11\n(13) - (11) = 2, left: ((10 + 3) - 11) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 3) - 11)) = 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "10 12 11 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 12, 11\n(13) - (11) = 2, left: ((10 + 3) - 11) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 3) - 11)) = 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "10 12 11 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 12, 11\n(13) - (11) = 2, left: ((10 + 3) - 11) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 3) - 11)) = 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "10 12 11 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 12, 11\n(13) - (11) = 2, left: ((10 + 3) - 11) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 3) - 11)) = 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "10 12 11 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 12, 11\n(13) - (11) = 2, left: ((10 + 3) - 11) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 3) - 11)) = 24\nreach 24! expression: (12 * ((10 + 3) - 11))"}, {"input": "12 10 7 10\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 7, 10\n(7) * (-2) = -14, left: (7 * (10 - 12)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (10 - 12))) = 24\nreach 24! expression: (10 - (7 * (10 - 12)))"}, {"input": "12 10 7 10\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (12 - 10)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (12 - 10))) = 24\nreach 24! expression: (10 + (7 * (12 - 10)))"}, {"input": "12 10 7 10\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 10, 7\n(7) * (-2) = -14, left: (7 * (10 - 12)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (10 - 12))) = 24\nreach 24! expression: (10 - (7 * (10 - 12)))"}, {"input": "12 10 7 10\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 10, 7\n(7) * (2) = 14, left: (7 * (12 - 10)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (12 - 10))) = 24\nreach 24! expression: (10 + (7 * (12 - 10)))"}, {"input": "1 1 2 8\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 1, 8\n(8) / (1) = 8, left: (8 / 1) = 8, (1 + 2) = 3\n(3) * (8) = 24, left: ((1 + 2) * (8 / 1)) = 24\nreach 24! expression: ((1 + 2) * (8 / 1))"}, {"input": "1 1 2 8\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (8 / 1) = 8\n(8) * (3) = 24, left: ((8 / 1) * (1 + 2)) = 24\nreach 24! expression: ((8 / 1) * (1 + 2))"}, {"input": "1 1 2 8\n", "output": "(1) * (8) = 8, left: (1 * 8) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (1 * 8) = 8\n(8) * (3) = 24, left: ((1 * 8) * (1 + 2)) = 24\nreach 24! expression: ((1 * 8) * (1 + 2))"}, {"input": "1 1 2 8\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 1, 8\n(1) + (2) = 3, left: (1 + (2 / 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (2 / 1))) = 24\nreach 24! expression: (8 * (1 + (2 / 1)))"}, {"input": "1 1 2 8\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 1, 2\n(8) / (2) = 4, left: ((8 / 1) / 2) = 4, 1\nroll back, left: (8 / 1) = 8, 1, 2\n(2) + (8) = 10, left: (2 + (8 / 1)) = 10, 1\n(1) - (10) = -9, left: (1 - (2 + (8 / 1))) = -9\nroll back, left: (2 + (8 / 1)) = 10, 1\nroll back, left: (8 / 1) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (8 / 1) = 8\n(8) * (3) = 24, left: ((8 / 1) * (1 + 2)) = 24\nreach 24! expression: ((8 / 1) * (1 + 2))"}, {"input": "1 1 2 8\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 1, 8\n(1) - (2) = -1, left: (1 - (2 / 1)) = -1, 8\n(-1) / (8) = -1/8, left: ((1 - (2 / 1)) / 8) = -1/8\nroll back, left: (1 - (2 / 1)) = -1, 8\n(8) * (-1) = -8, left: (8 * (1 - (2 / 1))) = -8\nroll back, left: (1 - (2 / 1)) = -1, 8\nroll back, left: (2 / 1) = 2, 1, 8\n(1) + (2) = 3, left: (1 + (2 / 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (2 / 1))) = 24\nreach 24! expression: (8 * (1 + (2 / 1)))"}, {"input": "1 1 2 8\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 1, 8\n(8) / (1) = 8, left: (8 / 1) = 8, (1 + 2) = 3\n(3) / (8) = 3/8, left: ((1 + 2) / (8 / 1)) = 3/8\nroll back, left: (8 / 1) = 8, (1 + 2) = 3\n(3) * (8) = 24, left: ((1 + 2) * (8 / 1)) = 24\nreach 24! expression: ((1 + 2) * (8 / 1))"}, {"input": "1 1 2 8\n", "output": "(1) + (8) = 9, left: (1 + 8) = 9, 1, 2\n(2) / (1) = 2, left: (2 / 1) = 2, (1 + 8) = 9\n(9) * (2) = 18, left: ((1 + 8) * (2 / 1)) = 18\nroll back, left: (2 / 1) = 2, (1 + 8) = 9\nroll back, left: (1 + 8) = 9, 1, 2\nroll back, left: 1 1 2 8\n(8) / (1) = 8, left: (8 / 1) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (8 / 1) = 8\n(8) * (3) = 24, left: ((8 / 1) * (1 + 2)) = 24\nreach 24! expression: ((8 / 1) * (1 + 2))"}, {"input": "1 1 2 8\n", "output": "(1) * (8) = 8, left: (1 * 8) = 8, 1, 2\n(2) + (8) = 10, left: (2 + (1 * 8)) = 10, 1\nroll back, left: (1 * 8) = 8, 1, 2\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, (1 * 8) = 8\n(1/2) - (8) = -15/2, left: ((1 / 2) - (1 * 8)) = -15/2\nroll back, left: (1 / 2) = 1/2, (1 * 8) = 8\nroll back, left: (1 * 8) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (1 * 8) = 8\n(8) * (3) = 24, left: ((1 * 8) * (1 + 2)) = 24\nreach 24! expression: ((1 * 8) * (1 + 2))"}, {"input": "1 1 2 8\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 1, 8\n(8) / (1) = 8, left: (8 / 1) = 8, (1 + 2) = 3\n(3) / (8) = 3/8, left: ((1 + 2) / (8 / 1)) = 3/8\nroll back, left: (8 / 1) = 8, (1 + 2) = 3\n(3) * (8) = 24, left: ((1 + 2) * (8 / 1)) = 24\nreach 24! expression: ((1 + 2) * (8 / 1))"}, {"input": "1 1 2 8\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 1, 8\n(8) / (1) = 8, left: (8 / 1) = 8, (1 + 2) = 3\n(3) / (8) = 3/8, left: ((1 + 2) / (8 / 1)) = 3/8\nroll back, left: (8 / 1) = 8, (1 + 2) = 3\n(3) * (8) = 24, left: ((1 + 2) * (8 / 1)) = 24\nreach 24! expression: ((1 + 2) * (8 / 1))"}, {"input": "1 1 2 8\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 1, 8\n(8) / (1) = 8, left: (8 / 1) = 8, (1 + 2) = 3\n(3) / (8) = 3/8, left: ((1 + 2) / (8 / 1)) = 3/8\nroll back, left: (8 / 1) = 8, (1 + 2) = 3\n(3) * (8) = 24, left: ((1 + 2) * (8 / 1)) = 24\nreach 24! expression: ((1 + 2) * (8 / 1))"}, {"input": "6 2 9 4\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 6, 9\n(9) * (-2) = -18, left: (9 * (2 - 4)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (2 - 4))) = 24\nreach 24! expression: (6 - (9 * (2 - 4)))"}, {"input": "6 2 9 4\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (4 - 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (4 - 2))) = 24\nreach 24! expression: (6 + (9 * (4 - 2)))"}, {"input": "6 2 9 4\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 2, 4\n(2) * (4) = 8, left: (2 * 4) = 8, (9 - 6) = 3\n(3) * (8) = 24, left: ((9 - 6) * (2 * 4)) = 24\nreach 24! expression: ((9 - 6) * (2 * 4))"}, {"input": "6 2 9 4\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (6 * 2) = 12\n(36) - (12) = 24, left: ((9 * 4) - (6 * 2)) = 24\nreach 24! expression: ((9 * 4) - (6 * 2))"}, {"input": "6 2 9 4\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (6 / 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (6 / 2))) = 24\nreach 24! expression: (4 * (9 - (6 / 2)))"}, {"input": "6 2 9 4\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 6, 9\n(2) / (6) = 1/3, left: ((4 - 2) / 6) = 1/3, 9\n(9) + (1/3) = 28/3, left: (9 + ((4 - 2) / 6)) = 28/3\nroll back, left: ((4 - 2) / 6) = 1/3, 9\nroll back, left: (4 - 2) = 2, 6, 9\n(6) - (9) = -3, left: (6 - 9) = -3, (4 - 2) = 2\nroll back, left: (4 - 2) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (4 - 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (4 - 2))) = 24\nreach 24! expression: (6 + (9 * (4 - 2)))"}, {"input": "6 2 9 4\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 2, 4\nroll back, left: 6 2 9 4\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, 2, 4\nroll back, left: 6 2 9 4\n(9) - (6) = 3, left: (9 - 6) = 3, 2, 4\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, (9 - 6) = 3\nroll back, left: (9 - 6) = 3, 2, 4\n(2) * (4) = 8, left: (2 * 4) = 8, (9 - 6) = 3\n(3) * (8) = 24, left: ((9 - 6) * (2 * 4)) = 24\nreach 24! expression: ((9 - 6) * (2 * 4))"}, {"input": "6 2 9 4\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 6, 9\n(6) + (-2) = 4, left: (6 + (2 - 4)) = 4, 9\n(9) * (4) = 36, left: (9 * (6 + (2 - 4))) = 36\nroll back, left: (6 + (2 - 4)) = 4, 9\nroll back, left: (2 - 4) = -2, 6, 9\n(-2) / (9) = -2/9, left: ((2 - 4) / 9) = -2/9, 6\nroll back, left: (2 - 4) = -2, 6, 9\n(9) * (-2) = -18, left: (9 * (2 - 4)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (2 - 4))) = 24\nreach 24! expression: (6 - (9 * (2 - 4)))"}, {"input": "6 2 9 4\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 9, 4\n(9) / (3) = 3, left: (9 / (6 / 2)) = 3, 4\nroll back, left: (6 / 2) = 3, 9, 4\n(3) - (9) = -6, left: ((6 / 2) - 9) = -6, 4\nroll back, left: (6 / 2) = 3, 9, 4\n(9) * (3) = 27, left: (9 * (6 / 2)) = 27, 4\nroll back, left: (6 / 2) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (6 / 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (6 / 2))) = 24\nreach 24! expression: (4 * (9 - (6 / 2)))"}, {"input": "8 10 8 8\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (10 - 8)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (10 - 8))) = 24\nreach 24! expression: (8 + (8 * (10 - 8)))"}, {"input": "8 10 8 8\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (8 - 10)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (8 - 10))) = 24\nreach 24! expression: (8 - (8 * (8 - 10)))"}, {"input": "8 10 8 8\n", "output": "(8) * (8) = 64, left: (8 * 8) = 64, 10, 8\nroll back, left: 8 10 8 8\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 8, 8\nroll back, left: 8 10 8 8\n(10) * (8) = 80, left: (10 * 8) = 80, 8, 8\nroll back, left: 8 10 8 8\n(10) - (8) = 2, left: (10 - 8) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (10 - 8)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (10 - 8))) = 24\nreach 24! expression: (8 + (8 * (10 - 8)))"}, {"input": "8 10 8 8\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 8, 8\n(8) - (18) = -10, left: (8 - (8 + 10)) = -10, 8\nroll back, left: (8 + 10) = 18, 8, 8\n(18) - (8) = 10, left: ((8 + 10) - 8) = 10, 8\nroll back, left: (8 + 10) = 18, 8, 8\nroll back, left: 8 10 8 8\n(8) - (10) = -2, left: (8 - 10) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (8 - 10)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (8 - 10))) = 24\nreach 24! expression: (8 - (8 * (8 - 10)))"}, {"input": "8 10 8 8\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 8, 8\n(8) + (-2) = 6, left: (8 + (8 - 10)) = 6, 8\nroll back, left: (8 - 10) = -2, 8, 8\n(8) / (-2) = -4, left: (8 / (8 - 10)) = -4, 8\n(8) - (-4) = 12, left: (8 - (8 / (8 - 10))) = 12\nroll back, left: (8 / (8 - 10)) = -4, 8\nroll back, left: (8 - 10) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (8 - 10)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (8 - 10))) = 24\nreach 24! expression: (8 - (8 * (8 - 10)))"}, {"input": "8 10 8 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 10, 8\nroll back, left: 8 10 8 8\n(8) * (10) = 80, left: (8 * 10) = 80, 8, 8\n(80) / (8) = 10, left: ((8 * 10) / 8) = 10, 8\nroll back, left: (8 * 10) = 80, 8, 8\nroll back, left: 8 10 8 8\n(8) - (10) = -2, left: (8 - 10) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (8 - 10)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (8 - 10))) = 24\nreach 24! expression: (8 - (8 * (8 - 10)))"}, {"input": "8 10 8 8\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 8, 8\n(8) - (8) = 0, left: (8 - 8) = 0, (8 + 10) = 18\nroll back, left: (8 + 10) = 18, 8, 8\nroll back, left: 8 10 8 8\n(10) - (8) = 2, left: (10 - 8) = 2, 8, 8\n(8) - (2) = 6, left: (8 - (10 - 8)) = 6, 8\nroll back, left: (10 - 8) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (10 - 8)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (10 - 8))) = 24\nreach 24! expression: (8 + (8 * (10 - 8)))"}, {"input": "12 4 6 10\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 6, 10\n(6) + (10) = 16, left: (6 + 10) = 16, (4 - 12) = -8\n(16) - (-8) = 24, left: ((6 + 10) - (4 - 12)) = 24\nreach 24! expression: ((6 + 10) - (4 - 12))"}, {"input": "12 4 6 10\n", "output": "(10) / (4) = 5/2, left: (10 / 4) = 5/2, 12, 6\n(12) * (5/2) = 30, left: (12 * (10 / 4)) = 30, 6\n(30) - (6) = 24, left: ((12 * (10 / 4)) - 6) = 24\nreach 24! expression: ((12 * (10 / 4)) - 6)"}, {"input": "12 4 6 10\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 6, 10\n(6) + (8) = 14, left: (6 + (12 - 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (6 + (12 - 4))) = 24\nreach 24! expression: (10 + (6 + (12 - 4)))"}, {"input": "12 4 6 10\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (12 / 6)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (12 / 6))) = 24\nreach 24! expression: (4 + (10 * (12 / 6)))"}, {"input": "12 4 6 10\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 12, 10\n(12) + (10) = 22, left: (12 + 10) = 22, (6 - 4) = 2\n(2) + (22) = 24, left: ((6 - 4) + (12 + 10)) = 24\nreach 24! expression: ((6 - 4) + (12 + 10))"}, {"input": "5 6 10 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (11 - 10)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (11 - 10))) = 24\nreach 24! expression: (6 * (5 - (11 - 10)))"}, {"input": "5 6 10 11\n", "output": "(5) + (10) = 15, left: (5 + 10) = 15, 6, 11\n(15) - (11) = 4, left: ((5 + 10) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 + 10) - 11)) = 24\nreach 24! expression: (6 * ((5 + 10) - 11))"}, {"input": "5 6 10 11\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (10 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (10 - 11))) = 24\nreach 24! expression: (6 * (5 + (10 - 11)))"}, {"input": "5 6 10 11\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 10, 11\n(6/5) - (11) = -49/5, left: ((6 / 5) - 11) = -49/5, 10\nroll back, left: (6 / 5) = 6/5, 10, 11\nroll back, left: 5 6 10 11\n(5) - (6) = -1, left: (5 - 6) = -1, 10, 11\nroll back, left: 5 6 10 11\n(10) - (11) = -1, left: (10 - 11) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (10 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (10 - 11))) = 24\nreach 24! expression: (6 * (5 + (10 - 11)))"}, {"input": "5 6 10 11\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 5, 10\nroll back, left: 5 6 10 11\n(6) + (11) = 17, left: (6 + 11) = 17, 5, 10\n(5) * (10) = 50, left: (5 * 10) = 50, (6 + 11) = 17\nroll back, left: (6 + 11) = 17, 5, 10\nroll back, left: 5 6 10 11\n(5) + (10) = 15, left: (5 + 10) = 15, 6, 11\n(15) - (11) = 4, left: ((5 + 10) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 + 10) - 11)) = 24\nreach 24! expression: (6 * ((5 + 10) - 11))"}, {"input": "5 6 10 11\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 10, 11\nroll back, left: 5 6 10 11\n(11) / (10) = 11/10, left: (11 / 10) = 11/10, 5, 6\nroll back, left: 5 6 10 11\n(10) * (11) = 110, left: (10 * 11) = 110, 5, 6\nroll back, left: 5 6 10 11\n(10) - (11) = -1, left: (10 - 11) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (10 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (10 - 11))) = 24\nreach 24! expression: (6 * (5 + (10 - 11)))"}, {"input": "4 2 9 4\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (9 - 2)) = 28, 4\n(28) - (4) = 24, left: ((4 * (9 - 2)) - 4) = 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 2, 4\nroll back, left: 4 2 9 4\n(9) / (2) = 9/2, left: (9 / 2) = 9/2, 4, 4\n(4) + (9/2) = 17/2, left: (4 + (9 / 2)) = 17/2, 4\nroll back, left: (9 / 2) = 9/2, 4, 4\nroll back, left: 4 2 9 4\n(9) - (2) = 7, left: (9 - 2) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (9 - 2)) = 28, 4\n(28) - (4) = 24, left: ((4 * (9 - 2)) - 4) = 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 9, 4\nroll back, left: 4 2 9 4\n(4) * (9) = 36, left: (4 * 9) = 36, 2, 4\nroll back, left: 4 2 9 4\n(2) / (9) = 2/9, left: (2 / 9) = 2/9, 4, 4\nroll back, left: 4 2 9 4\n(9) - (2) = 7, left: (9 - 2) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (9 - 2)) = 28, 4\n(28) - (4) = 24, left: ((4 * (9 - 2)) - 4) = 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 4, 9\nroll back, left: 4 2 9 4\n(9) - (4) = 5, left: (9 - 4) = 5, 2, 4\nroll back, left: 4 2 9 4\n(9) + (4) = 13, left: (9 + 4) = 13, 4, 2\nroll back, left: 4 2 9 4\n(9) - (2) = 7, left: (9 - 2) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (9 - 2)) = 28, 4\n(28) - (4) = 24, left: ((4 * (9 - 2)) - 4) = 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(9) / (2) = 9/2, left: (9 / 2) = 9/2, 4, 4\nroll back, left: 4 2 9 4\n(2) - (9) = -7, left: (2 - 9) = -7, 4, 4\nroll back, left: 4 2 9 4\n(2) * (9) = 18, left: (2 * 9) = 18, 4, 4\nroll back, left: 4 2 9 4\n(9) - (2) = 7, left: (9 - 2) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (9 - 2)) = 28, 4\n(28) - (4) = 24, left: ((4 * (9 - 2)) - 4) = 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "4 2 9 4\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 4, 2\nroll back, left: 4 2 9 4\n(9) * (4) = 36, left: (9 * 4) = 36, 4, 2\n(36) / (4) = 9, left: ((9 * 4) / 4) = 9, 2\nroll back, left: (9 * 4) = 36, 4, 2\nroll back, left: 4 2 9 4\n(9) - (2) = 7, left: (9 - 2) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (9 - 2)) = 28, 4\n(28) - (4) = 24, left: ((4 * (9 - 2)) - 4) = 24\nreach 24! expression: ((4 * (9 - 2)) - 4)"}, {"input": "3 9 9 8\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 9, 8\n(8) / (3) = 8/3, left: (8 / (9 / 3)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (8 / (9 / 3))) = 24\nreach 24! expression: (9 * (8 / (9 / 3)))"}, {"input": "3 9 9 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 9, 9\n(9) / (9) = 1, left: (9 / 9) = 1, (3 * 8) = 24\n(24) * (1) = 24, left: ((3 * 8) * (9 / 9)) = 24\nreach 24! expression: ((3 * 8) * (9 / 9))"}, {"input": "3 9 9 8\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 9, 8\n(3) / (8) = 3/8, left: ((9 / 3) / 8) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / ((9 / 3) / 8)) = 24\nreach 24! expression: (9 / ((9 / 3) / 8))"}, {"input": "3 9 9 8\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 3, 8\n(3) - (0) = 3, left: (3 - (9 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 - (9 - 9))) = 24\nreach 24! expression: (8 * (3 - (9 - 9)))"}, {"input": "3 9 9 8\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 3, 8\n(3) * (8) = 24, left: (3 * 8) = 24, (9 / 9) = 1\n(1) * (24) = 24, left: ((9 / 9) * (3 * 8)) = 24\nreach 24! expression: ((9 / 9) * (3 * 8))"}, {"input": "3 9 9 8\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 9, 8\n(3) / (8) = 3/8, left: ((9 / 3) / 8) = 3/8, 9\n(3/8) - (9) = -69/8, left: (((9 / 3) / 8) - 9) = -69/8\nroll back, left: ((9 / 3) / 8) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / ((9 / 3) / 8)) = 24\nreach 24! expression: (9 / ((9 / 3) / 8))"}, {"input": "3 9 9 8\n", "output": "(9) * (9) = 81, left: (9 * 9) = 81, 3, 8\n(3) + (81) = 84, left: (3 + (9 * 9)) = 84, 8\nroll back, left: (9 * 9) = 81, 3, 8\nroll back, left: 3 9 9 8\n(9) / (9) = 1, left: (9 / 9) = 1, 3, 8\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, (9 / 9) = 1\nroll back, left: (9 / 9) = 1, 3, 8\n(3) * (8) = 24, left: (3 * 8) = 24, (9 / 9) = 1\n(1) * (24) = 24, left: ((9 / 9) * (3 * 8)) = 24\nreach 24! expression: ((9 / 9) * (3 * 8))"}, {"input": "3 9 9 8\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 3, 8\n(3) - (0) = 3, left: (3 - (9 - 9)) = 3, 8\n(3) / (8) = 3/8, left: ((3 - (9 - 9)) / 8) = 3/8\nroll back, left: (3 - (9 - 9)) = 3, 8\n(8) - (3) = 5, left: (8 - (3 - (9 - 9))) = 5\nroll back, left: (3 - (9 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 - (9 - 9))) = 24\nreach 24! expression: (8 * (3 - (9 - 9)))"}, {"input": "3 9 9 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 9, 9\nroll back, left: 3 9 9 8\n(8) - (3) = 5, left: (8 - 3) = 5, 9, 9\n(9) + (9) = 18, left: (9 + 9) = 18, (8 - 3) = 5\nroll back, left: (8 - 3) = 5, 9, 9\nroll back, left: 3 9 9 8\n(3) * (8) = 24, left: (3 * 8) = 24, 9, 9\n(9) / (9) = 1, left: (9 / 9) = 1, (3 * 8) = 24\n(24) * (1) = 24, left: ((3 * 8) * (9 / 9)) = 24\nreach 24! expression: ((3 * 8) * (9 / 9))"}, {"input": "3 9 9 8\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 9, 8\n(3) / (8) = 3/8, left: ((9 / 3) / 8) = 3/8, 9\n(3/8) - (9) = -69/8, left: (((9 / 3) / 8) - 9) = -69/8\nroll back, left: ((9 / 3) / 8) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / ((9 / 3) / 8)) = 24\nreach 24! expression: (9 / ((9 / 3) / 8))"}, {"input": "3 9 9 8\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 3, 8\n(3) - (0) = 3, left: (3 - (9 - 9)) = 3, 8\n(3) / (8) = 3/8, left: ((3 - (9 - 9)) / 8) = 3/8\nroll back, left: (3 - (9 - 9)) = 3, 8\n(8) - (3) = 5, left: (8 - (3 - (9 - 9))) = 5\nroll back, left: (3 - (9 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 - (9 - 9))) = 24\nreach 24! expression: (8 * (3 - (9 - 9)))"}, {"input": "3 9 9 8\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 9, 8\n(3) / (8) = 3/8, left: ((9 / 3) / 8) = 3/8, 9\n(3/8) - (9) = -69/8, left: (((9 / 3) / 8) - 9) = -69/8\nroll back, left: ((9 / 3) / 8) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / ((9 / 3) / 8)) = 24\nreach 24! expression: (9 / ((9 / 3) / 8))"}, {"input": "3 9 9 8\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 3, 8\n(3) - (0) = 3, left: (3 - (9 - 9)) = 3, 8\n(3) / (8) = 3/8, left: ((3 - (9 - 9)) / 8) = 3/8\nroll back, left: (3 - (9 - 9)) = 3, 8\n(8) - (3) = 5, left: (8 - (3 - (9 - 9))) = 5\nroll back, left: (3 - (9 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 - (9 - 9))) = 24\nreach 24! expression: (8 * (3 - (9 - 9)))"}, {"input": "3 9 9 8\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 9, 8\n(3) / (8) = 3/8, left: ((9 / 3) / 8) = 3/8, 9\n(3/8) - (9) = -69/8, left: (((9 / 3) / 8) - 9) = -69/8\nroll back, left: ((9 / 3) / 8) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / ((9 / 3) / 8)) = 24\nreach 24! expression: (9 / ((9 / 3) / 8))"}, {"input": "3 9 9 8\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 3, 8\n(3) - (0) = 3, left: (3 - (9 - 9)) = 3, 8\n(3) / (8) = 3/8, left: ((3 - (9 - 9)) / 8) = 3/8\nroll back, left: (3 - (9 - 9)) = 3, 8\n(8) - (3) = 5, left: (8 - (3 - (9 - 9))) = 5\nroll back, left: (3 - (9 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 - (9 - 9))) = 24\nreach 24! expression: (8 * (3 - (9 - 9)))"}, {"input": "4 1 11 10\n", "output": "(4) + (10) = 14, left: (4 + 10) = 14, 1, 11\n(11) + (14) = 25, left: (11 + (4 + 10)) = 25, 1\n(25) - (1) = 24, left: ((11 + (4 + 10)) - 1) = 24\nreach 24! expression: ((11 + (4 + 10)) - 1)"}, {"input": "4 1 11 10\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 4, 10\n(-10) - (4) = -14, left: ((1 - 11) - 4) = -14, 10\n(10) - (-14) = 24, left: (10 - ((1 - 11) - 4)) = 24\nreach 24! expression: (10 - ((1 - 11) - 4))"}, {"input": "4 1 11 10\n", "output": "(11) + (10) = 21, left: (11 + 10) = 21, 4, 1\n(4) + (21) = 25, left: (4 + (11 + 10)) = 25, 1\n(25) - (1) = 24, left: ((4 + (11 + 10)) - 1) = 24\nreach 24! expression: ((4 + (11 + 10)) - 1)"}, {"input": "4 1 11 10\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 1, 10\n(10) + (15) = 25, left: (10 + (4 + 11)) = 25, 1\n(25) - (1) = 24, left: ((10 + (4 + 11)) - 1) = 24\nreach 24! expression: ((10 + (4 + 11)) - 1)"}, {"input": "4 1 11 10\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 1, 10\n(10) + (15) = 25, left: (10 + (4 + 11)) = 25, 1\n(1) / (25) = 1/25, left: (1 / (10 + (4 + 11))) = 1/25\nroll back, left: (10 + (4 + 11)) = 25, 1\n(1) + (25) = 26, left: (1 + (10 + (4 + 11))) = 26\nroll back, left: (10 + (4 + 11)) = 25, 1\n(25) - (1) = 24, left: ((10 + (4 + 11)) - 1) = 24\nreach 24! expression: ((10 + (4 + 11)) - 1)"}, {"input": "4 1 11 10\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 4, 1\n(-1) - (4) = -5, left: ((10 - 11) - 4) = -5, 1\nroll back, left: (10 - 11) = -1, 4, 1\nroll back, left: 4 1 11 10\n(11) - (10) = 1, left: (11 - 10) = 1, 4, 1\nroll back, left: 4 1 11 10\n(11) + (10) = 21, left: (11 + 10) = 21, 4, 1\n(4) + (21) = 25, left: (4 + (11 + 10)) = 25, 1\n(25) - (1) = 24, left: ((4 + (11 + 10)) - 1) = 24\nreach 24! expression: ((4 + (11 + 10)) - 1)"}, {"input": "4 1 11 10\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 4, 10\n(-10) - (4) = -14, left: ((1 - 11) - 4) = -14, 10\n(10) / (-14) = -5/7, left: (10 / ((1 - 11) - 4)) = -5/7\nroll back, left: ((1 - 11) - 4) = -14, 10\n(10) - (-14) = 24, left: (10 - ((1 - 11) - 4)) = 24\nreach 24! expression: (10 - ((1 - 11) - 4))"}, {"input": "4 1 11 10\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 1, 10\n(10) + (15) = 25, left: (10 + (4 + 11)) = 25, 1\n(1) / (25) = 1/25, left: (1 / (10 + (4 + 11))) = 1/25\nroll back, left: (10 + (4 + 11)) = 25, 1\n(1) + (25) = 26, left: (1 + (10 + (4 + 11))) = 26\nroll back, left: (10 + (4 + 11)) = 25, 1\n(25) - (1) = 24, left: ((10 + (4 + 11)) - 1) = 24\nreach 24! expression: ((10 + (4 + 11)) - 1)"}, {"input": "4 1 11 10\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 4, 10\n(-10) - (4) = -14, left: ((1 - 11) - 4) = -14, 10\n(10) / (-14) = -5/7, left: (10 / ((1 - 11) - 4)) = -5/7\nroll back, left: ((1 - 11) - 4) = -14, 10\n(10) - (-14) = 24, left: (10 - ((1 - 11) - 4)) = 24\nreach 24! expression: (10 - ((1 - 11) - 4))"}, {"input": "4 1 11 10\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 1, 10\n(10) + (15) = 25, left: (10 + (4 + 11)) = 25, 1\n(1) / (25) = 1/25, left: (1 / (10 + (4 + 11))) = 1/25\nroll back, left: (10 + (4 + 11)) = 25, 1\n(1) + (25) = 26, left: (1 + (10 + (4 + 11))) = 26\nroll back, left: (10 + (4 + 11)) = 25, 1\n(25) - (1) = 24, left: ((10 + (4 + 11)) - 1) = 24\nreach 24! expression: ((10 + (4 + 11)) - 1)"}, {"input": "4 1 11 10\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 4, 10\n(-10) - (4) = -14, left: ((1 - 11) - 4) = -14, 10\n(10) / (-14) = -5/7, left: (10 / ((1 - 11) - 4)) = -5/7\nroll back, left: ((1 - 11) - 4) = -14, 10\n(10) - (-14) = 24, left: (10 - ((1 - 11) - 4)) = 24\nreach 24! expression: (10 - ((1 - 11) - 4))"}, {"input": "4 1 11 10\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 1, 10\n(10) + (15) = 25, left: (10 + (4 + 11)) = 25, 1\n(1) / (25) = 1/25, left: (1 / (10 + (4 + 11))) = 1/25\nroll back, left: (10 + (4 + 11)) = 25, 1\n(1) + (25) = 26, left: (1 + (10 + (4 + 11))) = 26\nroll back, left: (10 + (4 + 11)) = 25, 1\n(25) - (1) = 24, left: ((10 + (4 + 11)) - 1) = 24\nreach 24! expression: ((10 + (4 + 11)) - 1)"}, {"input": "4 1 11 10\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 4, 10\n(-10) - (4) = -14, left: ((1 - 11) - 4) = -14, 10\n(10) / (-14) = -5/7, left: (10 / ((1 - 11) - 4)) = -5/7\nroll back, left: ((1 - 11) - 4) = -14, 10\n(10) - (-14) = 24, left: (10 - ((1 - 11) - 4)) = 24\nreach 24! expression: (10 - ((1 - 11) - 4))"}, {"input": "4 3 7 8\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 4, 8\n(4) * (-4) = -16, left: (4 * (3 - 7)) = -16, 8\n(8) - (-16) = 24, left: (8 - (4 * (3 - 7))) = 24\nreach 24! expression: (8 - (4 * (3 - 7)))"}, {"input": "4 3 7 8\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 4, 8\n(4) * (4) = 16, left: (4 * (7 - 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (7 - 3))) = 24\nreach 24! expression: (8 + (4 * (7 - 3)))"}, {"input": "4 3 7 8\n", "output": "(4) * (8) = 32, left: (4 * 8) = 32, 3, 7\nroll back, left: 4 3 7 8\n(3) - (8) = -5, left: (3 - 8) = -5, 4, 7\n(7) / (-5) = -7/5, left: (7 / (3 - 8)) = -7/5, 4\nroll back, left: (3 - 8) = -5, 4, 7\nroll back, left: 4 3 7 8\n(3) - (7) = -4, left: (3 - 7) = -4, 4, 8\n(4) * (-4) = -16, left: (4 * (3 - 7)) = -16, 8\n(8) - (-16) = 24, left: (8 - (4 * (3 - 7))) = 24\nreach 24! expression: (8 - (4 * (3 - 7)))"}, {"input": "4 3 7 8\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 7, 8\n(8) - (7) = 1, left: (8 - 7) = 1, (4 + 3) = 7\nroll back, left: (4 + 3) = 7, 7, 8\nroll back, left: 4 3 7 8\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 7, 8\nroll back, left: 4 3 7 8\n(7) - (3) = 4, left: (7 - 3) = 4, 4, 8\n(4) * (4) = 16, left: (4 * (7 - 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (7 - 3))) = 24\nreach 24! expression: (8 + (4 * (7 - 3)))"}, {"input": "4 3 7 8\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 7, 8\nroll back, left: 4 3 7 8\n(4) * (8) = 32, left: (4 * 8) = 32, 3, 7\nroll back, left: 4 3 7 8\n(8) / (4) = 2, left: (8 / 4) = 2, 3, 7\nroll back, left: 4 3 7 8\n(7) - (3) = 4, left: (7 - 3) = 4, 4, 8\n(4) * (4) = 16, left: (4 * (7 - 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (7 - 3))) = 24\nreach 24! expression: (8 + (4 * (7 - 3)))"}, {"input": "4 3 7 8\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 7, 8\nroll back, left: 4 3 7 8\n(7) - (4) = 3, left: (7 - 4) = 3, 3, 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (7 - 4) = 3\nroll back, left: (7 - 4) = 3, 3, 8\nroll back, left: 4 3 7 8\n(7) - (3) = 4, left: (7 - 3) = 4, 4, 8\n(4) * (4) = 16, left: (4 * (7 - 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (7 - 3))) = 24\nreach 24! expression: (8 + (4 * (7 - 3)))"}, {"input": "4 3 7 8\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 7, 8\n(7) * (3/4) = 21/4, left: (7 * (3 / 4)) = 21/4, 8\nroll back, left: (3 / 4) = 3/4, 7, 8\nroll back, left: 4 3 7 8\n(3) - (7) = -4, left: (3 - 7) = -4, 4, 8\n(-4) - (8) = -12, left: ((3 - 7) - 8) = -12, 4\nroll back, left: (3 - 7) = -4, 4, 8\n(4) * (-4) = -16, left: (4 * (3 - 7)) = -16, 8\n(8) - (-16) = 24, left: (8 - (4 * (3 - 7))) = 24\nreach 24! expression: (8 - (4 * (3 - 7)))"}, {"input": "6 2 13 2\n", "output": "(2) + (13) = 15, left: (2 + 13) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (2 + 13)) = 30, 6\n(30) - (6) = 24, left: ((2 * (2 + 13)) - 6) = 24\nreach 24! expression: ((2 * (2 + 13)) - 6)"}, {"input": "6 2 13 2\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (13 + 2)) = 30, 6\n(30) - (6) = 24, left: ((2 * (13 + 2)) - 6) = 24\nreach 24! expression: ((2 * (13 + 2)) - 6)"}, {"input": "6 2 13 2\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 6, 2\nroll back, left: 6 2 13 2\n(13) - (2) = 11, left: (13 - 2) = 11, 6, 2\nroll back, left: 6 2 13 2\n(13) + (2) = 15, left: (13 + 2) = 15, 6, 2\n(15) / (2) = 15/2, left: ((13 + 2) / 2) = 15/2, 6\nroll back, left: (13 + 2) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (13 + 2)) = 30, 6\n(30) - (6) = 24, left: ((2 * (13 + 2)) - 6) = 24\nreach 24! expression: ((2 * (13 + 2)) - 6)"}, {"input": "6 2 13 2\n", "output": "(2) / (13) = 2/13, left: (2 / 13) = 2/13, 6, 2\nroll back, left: 6 2 13 2\n(13) / (2) = 13/2, left: (13 / 2) = 13/2, 6, 2\n(6) * (13/2) = 39, left: (6 * (13 / 2)) = 39, 2\nroll back, left: (13 / 2) = 13/2, 6, 2\nroll back, left: 6 2 13 2\n(2) + (13) = 15, left: (2 + 13) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (2 + 13)) = 30, 6\n(30) - (6) = 24, left: ((2 * (2 + 13)) - 6) = 24\nreach 24! expression: ((2 * (2 + 13)) - 6)"}, {"input": "6 2 13 2\n", "output": "(2) - (13) = -11, left: (2 - 13) = -11, 6, 2\nroll back, left: 6 2 13 2\n(13) - (2) = 11, left: (13 - 2) = 11, 6, 2\nroll back, left: 6 2 13 2\n(2) + (13) = 15, left: (2 + 13) = 15, 6, 2\n(6) + (15) = 21, left: (6 + (2 + 13)) = 21, 2\nroll back, left: (2 + 13) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (2 + 13)) = 30, 6\n(30) - (6) = 24, left: ((2 * (2 + 13)) - 6) = 24\nreach 24! expression: ((2 * (2 + 13)) - 6)"}, {"input": "6 2 13 2\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 2, 2\nroll back, left: 6 2 13 2\n(2) / (13) = 2/13, left: (2 / 13) = 2/13, 6, 2\n(2/13) - (2) = -24/13, left: ((2 / 13) - 2) = -24/13, 6\nroll back, left: (2 / 13) = 2/13, 6, 2\nroll back, left: 6 2 13 2\n(2) + (13) = 15, left: (2 + 13) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (2 + 13)) = 30, 6\n(30) - (6) = 24, left: ((2 * (2 + 13)) - 6) = 24\nreach 24! expression: ((2 * (2 + 13)) - 6)"}, {"input": "6 2 13 2\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 2, 2\n(2) / (2) = 1, left: (2 / 2) = 1, (6 + 13) = 19\nroll back, left: (6 + 13) = 19, 2, 2\nroll back, left: 6 2 13 2\n(6) * (13) = 78, left: (6 * 13) = 78, 2, 2\nroll back, left: 6 2 13 2\n(13) + (2) = 15, left: (13 + 2) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (13 + 2)) = 30, 6\n(30) - (6) = 24, left: ((2 * (13 + 2)) - 6) = 24\nreach 24! expression: ((2 * (13 + 2)) - 6)"}, {"input": "13 4 2 3\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (4 * 2) = 8\n(8) + (16) = 24, left: ((4 * 2) + (13 + 3)) = 24\nreach 24! expression: ((4 * 2) + (13 + 3))"}, {"input": "13 4 2 3\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (4 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (4 - 3))) = 24\nreach 24! expression: (2 * (13 - (4 - 3)))"}, {"input": "13 4 2 3\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 2, 3\n(3) - (-9) = 12, left: (3 - (4 - 13)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 - (4 - 13))) = 24\nreach 24! expression: (2 * (3 - (4 - 13)))"}, {"input": "13 4 2 3\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 13, 2\n(13) + (-1) = 12, left: (13 + (3 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 + (3 - 4))) = 24\nreach 24! expression: (2 * (13 + (3 - 4)))"}, {"input": "13 4 2 3\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 2, 3\n(2) + (-9) = -7, left: (2 + (4 - 13)) = -7, 3\nroll back, left: (4 - 13) = -9, 2, 3\n(2) / (-9) = -2/9, left: (2 / (4 - 13)) = -2/9, 3\n(-2/9) / (3) = -2/27, left: ((2 / (4 - 13)) / 3) = -2/27\nroll back, left: (2 / (4 - 13)) = -2/9, 3\nroll back, left: (4 - 13) = -9, 2, 3\n(3) - (-9) = 12, left: (3 - (4 - 13)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 - (4 - 13))) = 24\nreach 24! expression: (2 * (3 - (4 - 13)))"}, {"input": "13 4 2 3\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 13, 2\nroll back, left: 13 4 2 3\n(4) - (3) = 1, left: (4 - 3) = 1, 13, 2\n(2) + (1) = 3, left: (2 + (4 - 3)) = 3, 13\nroll back, left: (4 - 3) = 1, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (4 - 3) = 1\nroll back, left: (4 - 3) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (4 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (4 - 3))) = 24\nreach 24! expression: (2 * (13 - (4 - 3)))"}, {"input": "13 4 2 3\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 13, 4\nroll back, left: 13 4 2 3\n(2) * (3) = 6, left: (2 * 3) = 6, 13, 4\nroll back, left: 13 4 2 3\n(2) - (3) = -1, left: (2 - 3) = -1, 13, 4\nroll back, left: 13 4 2 3\n(4) * (2) = 8, left: (4 * 2) = 8, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (4 * 2) = 8\n(8) + (16) = 24, left: ((4 * 2) + (13 + 3)) = 24\nreach 24! expression: ((4 * 2) + (13 + 3))"}, {"input": "13 4 2 3\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 13, 2\n(2) * (7) = 14, left: (2 * (4 + 3)) = 14, 13\nroll back, left: (4 + 3) = 7, 13, 2\n(13) + (2) = 15, left: (13 + 2) = 15, (4 + 3) = 7\nroll back, left: (4 + 3) = 7, 13, 2\nroll back, left: 13 4 2 3\n(4) - (3) = 1, left: (4 - 3) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (4 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (4 - 3))) = 24\nreach 24! expression: (2 * (13 - (4 - 3)))"}, {"input": "1 4 1 5\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 1, 4\n(4) * (6) = 24, left: (4 * (1 + 5)) = 24, 1\n(24) / (1) = 24, left: ((4 * (1 + 5)) / 1) = 24\nreach 24! expression: ((4 * (1 + 5)) / 1)"}, {"input": "1 4 1 5\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 4, 1\n(1) + (5) = 6, left: (1 + (5 / 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (5 / 1))) = 24\nreach 24! expression: (4 * (1 + (5 / 1)))"}, {"input": "1 4 1 5\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (1 / 4) = 1/4\n(6) / (1/4) = 24, left: ((1 + 5) / (1 / 4)) = 24\nreach 24! expression: ((1 + 5) / (1 / 4))"}, {"input": "1 4 1 5\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 1, 4\n(1) + (5) = 6, left: (1 + (5 / 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (5 / 1))) = 24\nreach 24! expression: (4 * (1 + (5 / 1)))"}, {"input": "1 4 1 5\n", "output": "(4) * (1) = 4, left: (4 * 1) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (4 * 1) = 4\n(4) * (6) = 24, left: ((4 * 1) * (1 + 5)) = 24\nreach 24! expression: ((4 * 1) * (1 + 5))"}, {"input": "1 4 1 5\n", "output": "(1) / (5) = 1/5, left: (1 / 5) = 1/5, 4, 1\nroll back, left: 1 4 1 5\n(1) - (5) = -4, left: (1 - 5) = -4, 4, 1\n(4) * (-4) = -16, left: (4 * (1 - 5)) = -16, 1\nroll back, left: (1 - 5) = -4, 4, 1\nroll back, left: 1 4 1 5\n(5) / (1) = 5, left: (5 / 1) = 5, 4, 1\n(1) + (5) = 6, left: (1 + (5 / 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (5 / 1))) = 24\nreach 24! expression: (4 * (1 + (5 / 1)))"}, {"input": "1 4 1 5\n", "output": "(4) * (1) = 4, left: (4 * 1) = 4, 1, 5\n(1) + (4) = 5, left: (1 + (4 * 1)) = 5, 5\nroll back, left: (4 * 1) = 4, 1, 5\n(1) / (4) = 1/4, left: (1 / (4 * 1)) = 1/4, 5\nroll back, left: (4 * 1) = 4, 1, 5\n(5) / (1) = 5, left: (5 / 1) = 5, (4 * 1) = 4\nroll back, left: (4 * 1) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (4 * 1) = 4\n(4) * (6) = 24, left: ((4 * 1) * (1 + 5)) = 24\nreach 24! expression: ((4 * 1) * (1 + 5))"}, {"input": "1 4 1 5\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 1, 4\n(4) * (5) = 20, left: (4 * (5 / 1)) = 20, 1\nroll back, left: (5 / 1) = 5, 1, 4\n(5) / (4) = 5/4, left: ((5 / 1) / 4) = 5/4, 1\nroll back, left: (5 / 1) = 5, 1, 4\n(1) / (5) = 1/5, left: (1 / (5 / 1)) = 1/5, 4\nroll back, left: (5 / 1) = 5, 1, 4\n(1) + (5) = 6, left: (1 + (5 / 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (5 / 1))) = 24\nreach 24! expression: (4 * (1 + (5 / 1)))"}, {"input": "1 4 1 5\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 1, 1\n(1) - (1) = 0, left: (1 - 1) = 0, (5 - 4) = 1\n(0) / (1) = 0, left: ((1 - 1) / (5 - 4)) = 0\nroll back, left: (1 - 1) = 0, (5 - 4) = 1\nroll back, left: (5 - 4) = 1, 1, 1\nroll back, left: 1 4 1 5\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (1 / 4) = 1/4\n(6) / (1/4) = 24, left: ((1 + 5) / (1 / 4)) = 24\nreach 24! expression: ((1 + 5) / (1 / 4))"}, {"input": "1 4 1 5\n", "output": "(1) / (5) = 1/5, left: (1 / 5) = 1/5, 1, 4\nroll back, left: 1 4 1 5\n(1) - (5) = -4, left: (1 - 5) = -4, 1, 4\n(1) / (-4) = -1/4, left: (1 / (1 - 5)) = -1/4, 4\nroll back, left: (1 - 5) = -4, 1, 4\nroll back, left: 1 4 1 5\n(1) + (5) = 6, left: (1 + 5) = 6, 1, 4\n(4) * (6) = 24, left: (4 * (1 + 5)) = 24, 1\n(24) / (1) = 24, left: ((4 * (1 + 5)) / 1) = 24\nreach 24! expression: ((4 * (1 + 5)) / 1)"}, {"input": "8 13 2 5\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (13 - 5) = 8\n(8) + (16) = 24, left: ((13 - 5) + (8 * 2)) = 24\nreach 24! expression: ((13 - 5) + (8 * 2))"}, {"input": "8 13 2 5\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 8, 5\n(5) + (11) = 16, left: (5 + (13 - 2)) = 16, 8\n(8) + (16) = 24, left: (8 + (5 + (13 - 2))) = 24\nreach 24! expression: (8 + (5 + (13 - 2)))"}, {"input": "8 13 2 5\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 13, 2\n(13) + (2) = 15, left: (13 + 2) = 15, (8 / 5) = 8/5\n(8/5) * (15) = 24, left: ((8 / 5) * (13 + 2)) = 24\nreach 24! expression: ((8 / 5) * (13 + 2))"}, {"input": "8 13 2 5\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 13, 5\n(13) + (16) = 29, left: (13 + (8 * 2)) = 29, 5\n(29) - (5) = 24, left: ((13 + (8 * 2)) - 5) = 24\nreach 24! expression: ((13 + (8 * 2)) - 5)"}, {"input": "8 13 2 5\n", "output": "(8) + (13) = 21, left: (8 + 13) = 21, 2, 5\n(5) - (2) = 3, left: (5 - 2) = 3, (8 + 13) = 21\n(21) + (3) = 24, left: ((8 + 13) + (5 - 2)) = 24\nreach 24! expression: ((8 + 13) + (5 - 2))"}, {"input": "8 13 2 5\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (8 / 2) = 4\nroll back, left: (8 / 2) = 4, 13, 5\n(4) - (13) = -9, left: ((8 / 2) - 13) = -9, 5\nroll back, left: (8 / 2) = 4, 13, 5\nroll back, left: 8 13 2 5\n(8) * (2) = 16, left: (8 * 2) = 16, 13, 5\n(13) + (16) = 29, left: (13 + (8 * 2)) = 29, 5\n(29) - (5) = 24, left: ((13 + (8 * 2)) - 5) = 24\nreach 24! expression: ((13 + (8 * 2)) - 5)"}, {"input": "8 13 2 5\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 8, 5\n(8) / (5) = 8/5, left: (8 / 5) = 8/5, (13 * 2) = 26\nroll back, left: (13 * 2) = 26, 8, 5\nroll back, left: 8 13 2 5\n(13) / (2) = 13/2, left: (13 / 2) = 13/2, 8, 5\nroll back, left: 8 13 2 5\n(13) - (2) = 11, left: (13 - 2) = 11, 8, 5\n(5) + (11) = 16, left: (5 + (13 - 2)) = 16, 8\n(8) + (16) = 24, left: (8 + (5 + (13 - 2))) = 24\nreach 24! expression: (8 + (5 + (13 - 2)))"}, {"input": "8 13 2 5\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (8 - 5) = 3\nroll back, left: (8 - 5) = 3, 13, 2\n(2) + (3) = 5, left: (2 + (8 - 5)) = 5, 13\nroll back, left: (8 - 5) = 3, 13, 2\nroll back, left: 8 13 2 5\n(8) / (5) = 8/5, left: (8 / 5) = 8/5, 13, 2\n(13) + (2) = 15, left: (13 + 2) = 15, (8 / 5) = 8/5\n(8/5) * (15) = 24, left: ((8 / 5) * (13 + 2)) = 24\nreach 24! expression: ((8 / 5) * (13 + 2))"}, {"input": "11 3 3 2\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (3 / 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (3 / 3))) = 24\nreach 24! expression: (2 * (11 + (3 / 3)))"}, {"input": "11 3 3 2\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (11 - 2)) = 27, 3\n(27) - (3) = 24, left: ((3 * (11 - 2)) - 3) = 24\nreach 24! expression: ((3 * (11 - 2)) - 3)"}, {"input": "11 3 3 2\n", "output": "(11) * (3) = 33, left: (11 * 3) = 33, 3, 2\n(3) + (2) = 5, left: (3 + 2) = 5, (11 * 3) = 33\n(33) * (5) = 165, left: ((11 * 3) * (3 + 2)) = 165\nroll back, left: (3 + 2) = 5, (11 * 3) = 33\nroll back, left: (11 * 3) = 33, 3, 2\nroll back, left: 11 3 3 2\n(11) - (2) = 9, left: (11 - 2) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (11 - 2)) = 27, 3\n(27) - (3) = 24, left: ((3 * (11 - 2)) - 3) = 24\nreach 24! expression: ((3 * (11 - 2)) - 3)"}, {"input": "11 3 3 2\n", "output": "(11) / (2) = 11/2, left: (11 / 2) = 11/2, 3, 3\nroll back, left: 11 3 3 2\n(11) * (2) = 22, left: (11 * 2) = 22, 3, 3\nroll back, left: 11 3 3 2\n(2) - (11) = -9, left: (2 - 11) = -9, 3, 3\nroll back, left: 11 3 3 2\n(11) - (2) = 9, left: (11 - 2) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (11 - 2)) = 27, 3\n(27) - (3) = 24, left: ((3 * (11 - 2)) - 3) = 24\nreach 24! expression: ((3 * (11 - 2)) - 3)"}, {"input": "11 3 3 2\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 11, 3\nroll back, left: 11 3 3 2\n(3) + (2) = 5, left: (3 + 2) = 5, 11, 3\nroll back, left: 11 3 3 2\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 11, 3\nroll back, left: 11 3 3 2\n(3) / (3) = 1, left: (3 / 3) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (3 / 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (3 / 3))) = 24\nreach 24! expression: (2 * (11 + (3 / 3)))"}, {"input": "11 3 3 2\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 11, 2\n(11) / (2) = 11/2, left: (11 / 2) = 11/2, (3 - 3) = 0\nroll back, left: (3 - 3) = 0, 11, 2\nroll back, left: 11 3 3 2\n(3) * (3) = 9, left: (3 * 3) = 9, 11, 2\nroll back, left: 11 3 3 2\n(3) / (3) = 1, left: (3 / 3) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (3 / 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (3 / 3))) = 24\nreach 24! expression: (2 * (11 + (3 / 3)))"}, {"input": "11 3 3 2\n", "output": "(11) + (3) = 14, left: (11 + 3) = 14, 3, 2\n(14) - (2) = 12, left: ((11 + 3) - 2) = 12, 3\nroll back, left: (11 + 3) = 14, 3, 2\nroll back, left: 11 3 3 2\n(11) / (3) = 11/3, left: (11 / 3) = 11/3, 3, 2\nroll back, left: 11 3 3 2\n(3) / (3) = 1, left: (3 / 3) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (3 / 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (3 / 3))) = 24\nreach 24! expression: (2 * (11 + (3 / 3)))"}, {"input": "10 10 5 7\n", "output": "(10) * (7) = 70, left: (10 * 7) = 70, 10, 5\n(70) / (5) = 14, left: ((10 * 7) / 5) = 14, 10\n(10) + (14) = 24, left: (10 + ((10 * 7) / 5)) = 24\nreach 24! expression: (10 + ((10 * 7) / 5))"}, {"input": "10 10 5 7\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 10, 7\n(7) / (1/2) = 14, left: (7 / (5 / 10)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 / (5 / 10))) = 24\nreach 24! expression: (10 + (7 / (5 / 10)))"}, {"input": "10 10 5 7\n", "output": "(7) / (5) = 7/5, left: (7 / 5) = 7/5, 10, 10\n(10) * (7/5) = 14, left: (10 * (7 / 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 * (7 / 5))) = 24\nreach 24! expression: (10 + (10 * (7 / 5)))"}, {"input": "10 10 5 7\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 10, 10\n(10) / (5/7) = 14, left: (10 / (5 / 7)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 / (5 / 7))) = 24\nreach 24! expression: (10 + (10 / (5 / 7)))"}, {"input": "10 10 5 7\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 5, 7\nroll back, left: 10 10 5 7\n(10) - (10) = 0, left: (10 - 10) = 0, 5, 7\nroll back, left: 10 10 5 7\n(5) + (7) = 12, left: (5 + 7) = 12, 10, 10\nroll back, left: 10 10 5 7\n(7) / (5) = 7/5, left: (7 / 5) = 7/5, 10, 10\n(10) * (7/5) = 14, left: (10 * (7 / 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 * (7 / 5))) = 24\nreach 24! expression: (10 + (10 * (7 / 5)))"}, {"input": "10 10 5 7\n", "output": "(10) + (7) = 17, left: (10 + 7) = 17, 10, 5\nroll back, left: 10 10 5 7\n(7) - (10) = -3, left: (7 - 10) = -3, 10, 5\nroll back, left: 10 10 5 7\n(10) / (7) = 10/7, left: (10 / 7) = 10/7, 10, 5\nroll back, left: 10 10 5 7\n(10) * (7) = 70, left: (10 * 7) = 70, 10, 5\n(70) / (5) = 14, left: ((10 * 7) / 5) = 14, 10\n(10) + (14) = 24, left: (10 + ((10 * 7) / 5)) = 24\nreach 24! expression: (10 + ((10 * 7) / 5))"}, {"input": "7 12 7 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 7, 7\n(7) - (7) = 0, left: (7 - 7) = 0, (12 + 12) = 24\n(24) + (0) = 24, left: ((12 + 12) + (7 - 7)) = 24\nreach 24! expression: ((12 + 12) + (7 - 7))"}, {"input": "7 12 7 12\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 12, 12\n(14) - (12) = 2, left: ((7 + 7) - 12) = 2, 12\n(12) * (2) = 24, left: (12 * ((7 + 7) - 12)) = 24\nreach 24! expression: (12 * ((7 + 7) - 12))"}, {"input": "7 12 7 12\n", "output": "(12) / (7) = 12/7, left: (12 / 7) = 12/7, 12, 7\n(7) * (12/7) = 12, left: (7 * (12 / 7)) = 12, 12\n(12) + (12) = 24, left: (12 + (7 * (12 / 7))) = 24\nreach 24! expression: (12 + (7 * (12 / 7)))"}, {"input": "7 12 7 12\n", "output": "(7) / (12) = 7/12, left: (7 / 12) = 7/12, 7, 12\n(7) / (7/12) = 12, left: (7 / (7 / 12)) = 12, 12\n(12) + (12) = 24, left: (12 + (7 / (7 / 12))) = 24\nreach 24! expression: (12 + (7 / (7 / 12)))"}, {"input": "7 12 7 12\n", "output": "(12) - (12) = 0, left: (12 - 12) = 0, 7, 7\nroll back, left: 7 12 7 12\n(12) / (12) = 1, left: (12 / 12) = 1, 7, 7\n(1) - (7) = -6, left: ((12 / 12) - 7) = -6, 7\nroll back, left: (12 / 12) = 1, 7, 7\nroll back, left: 7 12 7 12\n(12) + (12) = 24, left: (12 + 12) = 24, 7, 7\n(7) - (7) = 0, left: (7 - 7) = 0, (12 + 12) = 24\n(24) + (0) = 24, left: ((12 + 12) + (7 - 7)) = 24\nreach 24! expression: ((12 + 12) + (7 - 7))"}, {"input": "4 2 3 7\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 4, 7\n(7) + (-1) = 6, left: (7 + (2 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (2 - 3))) = 24\nreach 24! expression: (4 * (7 + (2 - 3)))"}, {"input": "4 2 3 7\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 3, 7\n(7) - (3) = 4, left: (7 - 3) = 4, (4 + 2) = 6\n(6) * (4) = 24, left: ((4 + 2) * (7 - 3)) = 24\nreach 24! expression: ((4 + 2) * (7 - 3))"}, {"input": "4 2 3 7\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (3 - 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (3 - 2))) = 24\nreach 24! expression: (4 * (7 - (3 - 2)))"}, {"input": "4 2 3 7\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (7 - 3) = 4\n(4) * (6) = 24, left: ((7 - 3) * (4 + 2)) = 24\nreach 24! expression: ((7 - 3) * (4 + 2))"}, {"input": "4 2 3 7\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 3, 7\nroll back, left: 4 2 3 7\n(4) / (2) = 2, left: (4 / 2) = 2, 3, 7\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, (4 / 2) = 2\nroll back, left: (4 / 2) = 2, 3, 7\nroll back, left: 4 2 3 7\n(4) + (2) = 6, left: (4 + 2) = 6, 3, 7\n(7) - (3) = 4, left: (7 - 3) = 4, (4 + 2) = 6\n(6) * (4) = 24, left: ((4 + 2) * (7 - 3)) = 24\nreach 24! expression: ((4 + 2) * (7 - 3))"}, {"input": "4 2 3 7\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 4, 2\n(2) + (3/7) = 17/7, left: (2 + (3 / 7)) = 17/7, 4\nroll back, left: (3 / 7) = 3/7, 4, 2\n(3/7) / (2) = 3/14, left: ((3 / 7) / 2) = 3/14, 4\nroll back, left: (3 / 7) = 3/7, 4, 2\nroll back, left: 4 2 3 7\n(7) - (3) = 4, left: (7 - 3) = 4, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (7 - 3) = 4\n(4) * (6) = 24, left: ((7 - 3) * (4 + 2)) = 24\nreach 24! expression: ((7 - 3) * (4 + 2))"}, {"input": "4 2 3 7\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 4, 7\nroll back, left: 4 2 3 7\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, 4, 7\n(4) - (7) = -3, left: (4 - 7) = -3, (3 / 2) = 3/2\nroll back, left: (3 / 2) = 3/2, 4, 7\nroll back, left: 4 2 3 7\n(2) - (3) = -1, left: (2 - 3) = -1, 4, 7\n(7) + (-1) = 6, left: (7 + (2 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (2 - 3))) = 24\nreach 24! expression: (4 * (7 + (2 - 3)))"}, {"input": "4 2 3 7\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 2, 3\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, (7 / 4) = 7/4\n(7/4) + (2/3) = 29/12, left: ((7 / 4) + (2 / 3)) = 29/12\nroll back, left: (2 / 3) = 2/3, (7 / 4) = 7/4\nroll back, left: (7 / 4) = 7/4, 2, 3\nroll back, left: 4 2 3 7\n(2) - (3) = -1, left: (2 - 3) = -1, 4, 7\n(7) + (-1) = 6, left: (7 + (2 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (2 - 3))) = 24\nreach 24! expression: (4 * (7 + (2 - 3)))"}, {"input": "4 2 3 7\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 2, 3\nroll back, left: 4 2 3 7\n(4) + (7) = 11, left: (4 + 7) = 11, 2, 3\n(2) + (11) = 13, left: (2 + (4 + 7)) = 13, 3\nroll back, left: (4 + 7) = 11, 2, 3\nroll back, left: 4 2 3 7\n(3) - (2) = 1, left: (3 - 2) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (3 - 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (3 - 2))) = 24\nreach 24! expression: (4 * (7 - (3 - 2)))"}, {"input": "2 9 5 4\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 5, 4\n(11) - (5) = 6, left: ((2 + 9) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((2 + 9) - 5)) = 24\nreach 24! expression: (4 * ((2 + 9) - 5))"}, {"input": "2 9 5 4\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 2, 4\n(2) * (14) = 28, left: (2 * (9 + 5)) = 28, 4\n(28) - (4) = 24, left: ((2 * (9 + 5)) - 4) = 24\nreach 24! expression: ((2 * (9 + 5)) - 4)"}, {"input": "2 9 5 4\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 9, 4\n(9) + (-3) = 6, left: (9 + (2 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (2 - 5))) = 24\nreach 24! expression: (4 * (9 + (2 - 5)))"}, {"input": "2 9 5 4\n", "output": "(2) / (5) = 2/5, left: (2 / 5) = 2/5, 9, 4\n(9) * (2/5) = 18/5, left: (9 * (2 / 5)) = 18/5, 4\nroll back, left: (2 / 5) = 2/5, 9, 4\nroll back, left: 2 9 5 4\n(2) * (5) = 10, left: (2 * 5) = 10, 9, 4\nroll back, left: 2 9 5 4\n(2) - (5) = -3, left: (2 - 5) = -3, 9, 4\n(9) + (-3) = 6, left: (9 + (2 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (2 - 5))) = 24\nreach 24! expression: (4 * (9 + (2 - 5)))"}, {"input": "2 9 5 4\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 2, 5\nroll back, left: 2 9 5 4\n(9) - (4) = 5, left: (9 - 4) = 5, 2, 5\n(5) / (5) = 1, left: ((9 - 4) / 5) = 1, 2\nroll back, left: (9 - 4) = 5, 2, 5\nroll back, left: 2 9 5 4\n(9) + (5) = 14, left: (9 + 5) = 14, 2, 4\n(2) * (14) = 28, left: (2 * (9 + 5)) = 28, 4\n(28) - (4) = 24, left: ((2 * (9 + 5)) - 4) = 24\nreach 24! expression: ((2 * (9 + 5)) - 4)"}, {"input": "2 9 5 4\n", "output": "(2) * (5) = 10, left: (2 * 5) = 10, 9, 4\nroll back, left: 2 9 5 4\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 9, 4\n(4) - (9) = -5, left: (4 - 9) = -5, (2 / 5) = 2/5\nroll back, left: (2 / 5) = 2/5, 9, 4\nroll back, left: 2 9 5 4\n(2) - (5) = -3, left: (2 - 5) = -3, 9, 4\n(9) + (-3) = 6, left: (9 + (2 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (2 - 5))) = 24\nreach 24! expression: (4 * (9 + (2 - 5)))"}, {"input": "2 9 5 4\n", "output": "(2) * (5) = 10, left: (2 * 5) = 10, 9, 4\nroll back, left: 2 9 5 4\n(2) - (5) = -3, left: (2 - 5) = -3, 9, 4\n(4) - (-3) = 7, left: (4 - (2 - 5)) = 7, 9\n(7) - (9) = -2, left: ((4 - (2 - 5)) - 9) = -2\nroll back, left: (4 - (2 - 5)) = 7, 9\nroll back, left: (2 - 5) = -3, 9, 4\n(9) + (-3) = 6, left: (9 + (2 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (2 - 5))) = 24\nreach 24! expression: (4 * (9 + (2 - 5)))"}, {"input": "2 9 5 4\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 2, 9\nroll back, left: 2 9 5 4\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, 2, 9\nroll back, left: 2 9 5 4\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 2, 9\nroll back, left: 2 9 5 4\n(2) + (9) = 11, left: (2 + 9) = 11, 5, 4\n(11) - (5) = 6, left: ((2 + 9) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((2 + 9) - 5)) = 24\nreach 24! expression: (4 * ((2 + 9) - 5))"}, {"input": "4 11 4 13\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 4, 4\n(4) + (2) = 6, left: (4 + (13 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (4 + (13 - 11))) = 24\nreach 24! expression: (4 * (4 + (13 - 11)))"}, {"input": "4 11 4 13\n", "output": "(11) - (4) = 7, left: (11 - 4) = 7, 4, 13\n(4) + (13) = 17, left: (4 + 13) = 17, (11 - 4) = 7\n(7) + (17) = 24, left: ((11 - 4) + (4 + 13)) = 24\nreach 24! expression: ((11 - 4) + (4 + 13))"}, {"input": "4 11 4 13\n", "output": "(4) / (11) = 4/11, left: (4 / 11) = 4/11, 4, 13\n(4) / (4/11) = 11, left: (4 / (4 / 11)) = 11, 13\n(13) + (11) = 24, left: (13 + (4 / (4 / 11))) = 24\nreach 24! expression: (13 + (4 / (4 / 11)))"}, {"input": "4 11 4 13\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 11, 13\n(11) + (13) = 24, left: (11 + 13) = 24, (4 / 4) = 1\n(1) * (24) = 24, left: ((4 / 4) * (11 + 13)) = 24\nreach 24! expression: ((4 / 4) * (11 + 13))"}, {"input": "4 11 4 13\n", "output": "(11) + (13) = 24, left: (11 + 13) = 24, 4, 4\n(4) - (4) = 0, left: (4 - 4) = 0, (11 + 13) = 24\n(24) + (0) = 24, left: ((11 + 13) + (4 - 4)) = 24\nreach 24! expression: ((11 + 13) + (4 - 4))"}, {"input": "4 11 4 13\n", "output": "(11) + (13) = 24, left: (11 + 13) = 24, 4, 4\n(4) - (4) = 0, left: (4 - 4) = 0, (11 + 13) = 24\n(24) + (0) = 24, left: ((11 + 13) + (4 - 4)) = 24\nreach 24! expression: ((11 + 13) + (4 - 4))"}, {"input": "4 11 4 13\n", "output": "(11) + (13) = 24, left: (11 + 13) = 24, 4, 4\n(4) - (4) = 0, left: (4 - 4) = 0, (11 + 13) = 24\n(24) + (0) = 24, left: ((11 + 13) + (4 - 4)) = 24\nreach 24! expression: ((11 + 13) + (4 - 4))"}, {"input": "4 11 4 13\n", "output": "(11) + (13) = 24, left: (11 + 13) = 24, 4, 4\n(4) - (4) = 0, left: (4 - 4) = 0, (11 + 13) = 24\n(24) + (0) = 24, left: ((11 + 13) + (4 - 4)) = 24\nreach 24! expression: ((11 + 13) + (4 - 4))"}, {"input": "4 11 4 13\n", "output": "(11) + (13) = 24, left: (11 + 13) = 24, 4, 4\n(4) - (4) = 0, left: (4 - 4) = 0, (11 + 13) = 24\n(24) + (0) = 24, left: ((11 + 13) + (4 - 4)) = 24\nreach 24! expression: ((11 + 13) + (4 - 4))"}, {"input": "4 11 7 2\n", "output": "(11) + (7) = 18, left: (11 + 7) = 18, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (11 + 7) = 18\n(18) + (6) = 24, left: ((11 + 7) + (4 + 2)) = 24\nreach 24! expression: ((11 + 7) + (4 + 2))"}, {"input": "4 11 7 2\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 7, 2\n(2) + (15) = 17, left: (2 + (4 + 11)) = 17, 7\n(7) + (17) = 24, left: (7 + (2 + (4 + 11))) = 24\nreach 24! expression: (7 + (2 + (4 + 11)))"}, {"input": "4 11 7 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 11, 7\n(11) + (6) = 17, left: (11 + (4 + 2)) = 17, 7\n(7) + (17) = 24, left: (7 + (11 + (4 + 2))) = 24\nreach 24! expression: (7 + (11 + (4 + 2)))"}, {"input": "4 11 7 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 11, 7\n(11) - (7) = 4, left: (11 - 7) = 4, (4 + 2) = 6\n(6) * (4) = 24, left: ((4 + 2) * (11 - 7)) = 24\nreach 24! expression: ((4 + 2) * (11 - 7))"}, {"input": "4 11 7 2\n", "output": "(11) + (7) = 18, left: (11 + 7) = 18, 4, 2\n(2) + (18) = 20, left: (2 + (11 + 7)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 + (11 + 7))) = 24\nreach 24! expression: (4 + (2 + (11 + 7)))"}, {"input": "4 11 7 2\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 7, 2\n(7) * (-7) = -49, left: (7 * (4 - 11)) = -49, 2\nroll back, left: (4 - 11) = -7, 7, 2\nroll back, left: 4 11 7 2\n(4) * (11) = 44, left: (4 * 11) = 44, 7, 2\nroll back, left: 4 11 7 2\n(4) + (11) = 15, left: (4 + 11) = 15, 7, 2\n(2) + (15) = 17, left: (2 + (4 + 11)) = 17, 7\n(7) + (17) = 24, left: (7 + (2 + (4 + 11))) = 24\nreach 24! expression: (7 + (2 + (4 + 11)))"}, {"input": "4 11 7 2\n", "output": "(11) * (7) = 77, left: (11 * 7) = 77, 4, 2\n(77) - (4) = 73, left: ((11 * 7) - 4) = 73, 2\nroll back, left: (11 * 7) = 77, 4, 2\n(4) / (2) = 2, left: (4 / 2) = 2, (11 * 7) = 77\nroll back, left: (11 * 7) = 77, 4, 2\nroll back, left: 4 11 7 2\n(11) + (7) = 18, left: (11 + 7) = 18, 4, 2\n(2) + (18) = 20, left: (2 + (11 + 7)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 + (11 + 7))) = 24\nreach 24! expression: (4 + (2 + (11 + 7)))"}, {"input": "4 11 7 2\n", "output": "(7) / (11) = 7/11, left: (7 / 11) = 7/11, 4, 2\n(7/11) / (2) = 7/22, left: ((7 / 11) / 2) = 7/22, 4\nroll back, left: (7 / 11) = 7/11, 4, 2\nroll back, left: 4 11 7 2\n(11) * (7) = 77, left: (11 * 7) = 77, 4, 2\nroll back, left: 4 11 7 2\n(11) + (7) = 18, left: (11 + 7) = 18, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (11 + 7) = 18\n(18) + (6) = 24, left: ((11 + 7) + (4 + 2)) = 24\nreach 24! expression: ((11 + 7) + (4 + 2))"}, {"input": "4 11 7 2\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 11, 7\nroll back, left: 4 11 7 2\n(4) * (2) = 8, left: (4 * 2) = 8, 11, 7\n(7) + (8) = 15, left: (7 + (4 * 2)) = 15, 11\nroll back, left: (4 * 2) = 8, 11, 7\nroll back, left: 4 11 7 2\n(4) + (2) = 6, left: (4 + 2) = 6, 11, 7\n(11) + (6) = 17, left: (11 + (4 + 2)) = 17, 7\n(7) + (17) = 24, left: (7 + (11 + (4 + 2))) = 24\nreach 24! expression: (7 + (11 + (4 + 2)))"}, {"input": "9 1 5 13\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (1 + 5) = 6\n(6) * (4) = 24, left: ((1 + 5) * (13 - 9)) = 24\nreach 24! expression: ((1 + 5) * (13 - 9))"}, {"input": "9 1 5 13\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (13 - 9) = 4\n(4) * (6) = 24, left: ((13 - 9) * (1 + 5)) = 24\nreach 24! expression: ((13 - 9) * (1 + 5))"}, {"input": "9 1 5 13\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 1, 13\n(13) - (5/9) = 112/9, left: (13 - (5 / 9)) = 112/9, 1\nroll back, left: (5 / 9) = 5/9, 1, 13\nroll back, left: 9 1 5 13\n(5) / (1) = 5, left: (5 / 1) = 5, 9, 13\nroll back, left: 9 1 5 13\n(1) + (5) = 6, left: (1 + 5) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (1 + 5) = 6\n(6) * (4) = 24, left: ((1 + 5) * (13 - 9)) = 24\nreach 24! expression: ((1 + 5) * (13 - 9))"}, {"input": "9 1 5 13\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 9, 13\n(9) + (5) = 14, left: (9 + (1 * 5)) = 14, 13\nroll back, left: (1 * 5) = 5, 9, 13\nroll back, left: 9 1 5 13\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, 9, 13\nroll back, left: 9 1 5 13\n(1) + (5) = 6, left: (1 + 5) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (1 + 5) = 6\n(6) * (4) = 24, left: ((1 + 5) * (13 - 9)) = 24\nreach 24! expression: ((1 + 5) * (13 - 9))"}, {"input": "9 1 5 13\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 1, 13\n(1) * (4) = 4, left: (1 * (9 - 5)) = 4, 13\nroll back, left: (9 - 5) = 4, 1, 13\nroll back, left: 9 1 5 13\n(9) * (13) = 117, left: (9 * 13) = 117, 1, 5\nroll back, left: 9 1 5 13\n(13) - (9) = 4, left: (13 - 9) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (13 - 9) = 4\n(4) * (6) = 24, left: ((13 - 9) * (1 + 5)) = 24\nreach 24! expression: ((13 - 9) * (1 + 5))"}, {"input": "9 1 5 13\n", "output": "(1) / (13) = 1/13, left: (1 / 13) = 1/13, 9, 5\nroll back, left: 9 1 5 13\n(1) - (13) = -12, left: (1 - 13) = -12, 9, 5\nroll back, left: 9 1 5 13\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, 1, 13\nroll back, left: 9 1 5 13\n(13) - (9) = 4, left: (13 - 9) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (13 - 9) = 4\n(4) * (6) = 24, left: ((13 - 9) * (1 + 5)) = 24\nreach 24! expression: ((13 - 9) * (1 + 5))"}, {"input": "8 9 3 5\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (8 - 5) = 3\n(27) - (3) = 24, left: ((9 * 3) - (8 - 5)) = 24\nreach 24! expression: ((9 * 3) - (8 - 5))"}, {"input": "8 9 3 5\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 8, 5\n(27) - (8) = 19, left: ((9 * 3) - 8) = 19, 5\n(5) + (19) = 24, left: (5 + ((9 * 3) - 8)) = 24\nreach 24! expression: (5 + ((9 * 3) - 8))"}, {"input": "8 9 3 5\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 8, 5\n(5) + (27) = 32, left: (5 + (9 * 3)) = 32, 8\n(32) - (8) = 24, left: ((5 + (9 * 3)) - 8) = 24\nreach 24! expression: ((5 + (9 * 3)) - 8)"}, {"input": "8 9 3 5\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 8, 5\n(8) - (5) = 3, left: (8 - 5) = 3, (9 * 3) = 27\n(27) - (3) = 24, left: ((9 * 3) - (8 - 5)) = 24\nreach 24! expression: ((9 * 3) - (8 - 5))"}, {"input": "8 9 3 5\n", "output": "(8) + (9) = 17, left: (8 + 9) = 17, 3, 5\nroll back, left: 8 9 3 5\n(8) - (9) = -1, left: (8 - 9) = -1, 3, 5\nroll back, left: 8 9 3 5\n(8) * (5) = 40, left: (8 * 5) = 40, 9, 3\nroll back, left: 8 9 3 5\n(8) - (5) = 3, left: (8 - 5) = 3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (8 - 5) = 3\n(27) - (3) = 24, left: ((9 * 3) - (8 - 5)) = 24\nreach 24! expression: ((9 * 3) - (8 - 5))"}, {"input": "8 9 3 5\n", "output": "(9) + (3) = 12, left: (9 + 3) = 12, 8, 5\nroll back, left: 8 9 3 5\n(9) / (3) = 3, left: (9 / 3) = 3, 8, 5\n(3) / (8) = 3/8, left: ((9 / 3) / 8) = 3/8, 5\nroll back, left: (9 / 3) = 3, 8, 5\nroll back, left: 8 9 3 5\n(9) * (3) = 27, left: (9 * 3) = 27, 8, 5\n(8) - (5) = 3, left: (8 - 5) = 3, (9 * 3) = 27\n(27) - (3) = 24, left: ((9 * 3) - (8 - 5)) = 24\nreach 24! expression: ((9 * 3) - (8 - 5))"}, {"input": "8 9 3 5\n", "output": "(8) / (9) = 8/9, left: (8 / 9) = 8/9, 3, 5\nroll back, left: 8 9 3 5\n(8) - (9) = -1, left: (8 - 9) = -1, 3, 5\n(3) / (-1) = -3, left: (3 / (8 - 9)) = -3, 5\nroll back, left: (8 - 9) = -1, 3, 5\nroll back, left: 8 9 3 5\n(9) * (3) = 27, left: (9 * 3) = 27, 8, 5\n(27) - (8) = 19, left: ((9 * 3) - 8) = 19, 5\n(5) + (19) = 24, left: (5 + ((9 * 3) - 8)) = 24\nreach 24! expression: (5 + ((9 * 3) - 8))"}, {"input": "8 9 3 5\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 9, 5\n(9) * (5) = 45, left: (9 * 5) = 45, (8 - 3) = 5\nroll back, left: (8 - 3) = 5, 9, 5\nroll back, left: 8 9 3 5\n(8) + (9) = 17, left: (8 + 9) = 17, 3, 5\nroll back, left: 8 9 3 5\n(9) * (3) = 27, left: (9 * 3) = 27, 8, 5\n(5) + (27) = 32, left: (5 + (9 * 3)) = 32, 8\n(32) - (8) = 24, left: ((5 + (9 * 3)) - 8) = 24\nreach 24! expression: ((5 + (9 * 3)) - 8)"}, {"input": "8 9 3 5\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 9, 3\n(8/5) / (3) = 8/15, left: ((8 / 5) / 3) = 8/15, 9\nroll back, left: (8 / 5) = 8/5, 9, 3\nroll back, left: 8 9 3 5\n(8) * (5) = 40, left: (8 * 5) = 40, 9, 3\nroll back, left: 8 9 3 5\n(8) - (5) = 3, left: (8 - 5) = 3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (8 - 5) = 3\n(27) - (3) = 24, left: ((9 * 3) - (8 - 5)) = 24\nreach 24! expression: ((9 * 3) - (8 - 5))"}, {"input": "2 4 4 5\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (2 + 5)) = 28, 4\n(28) - (4) = 24, left: ((4 * (2 + 5)) - 4) = 24\nreach 24! expression: ((4 * (2 + 5)) - 4)"}, {"input": "2 4 4 5\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 2, 5\n(5) - (2) = 3, left: (5 - 2) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (5 - 2)) = 24\nreach 24! expression: ((4 + 4) * (5 - 2))"}, {"input": "2 4 4 5\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 4, 5\nroll back, left: 2 4 4 5\n(2) + (4) = 6, left: (2 + 4) = 6, 4, 5\n(5) / (6) = 5/6, left: (5 / (2 + 4)) = 5/6, 4\nroll back, left: (2 + 4) = 6, 4, 5\nroll back, left: 2 4 4 5\n(4) + (4) = 8, left: (4 + 4) = 8, 2, 5\n(5) - (2) = 3, left: (5 - 2) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (5 - 2)) = 24\nreach 24! expression: ((4 + 4) * (5 - 2))"}, {"input": "2 4 4 5\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 4, 5\nroll back, left: 2 4 4 5\n(4) * (4) = 16, left: (4 * 4) = 16, 2, 5\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, (4 * 4) = 16\nroll back, left: (4 * 4) = 16, 2, 5\nroll back, left: 2 4 4 5\n(4) + (4) = 8, left: (4 + 4) = 8, 2, 5\n(5) - (2) = 3, left: (5 - 2) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (5 - 2)) = 24\nreach 24! expression: ((4 + 4) * (5 - 2))"}, {"input": "2 4 4 5\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 4, 4\n(7) - (4) = 3, left: ((2 + 5) - 4) = 3, 4\n(4) - (3) = 1, left: (4 - ((2 + 5) - 4)) = 1\nroll back, left: ((2 + 5) - 4) = 3, 4\nroll back, left: (2 + 5) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (2 + 5)) = 28, 4\n(28) / (4) = 7, left: ((4 * (2 + 5)) / 4) = 7\nroll back, left: (4 * (2 + 5)) = 28, 4\n(28) - (4) = 24, left: ((4 * (2 + 5)) - 4) = 24\nreach 24! expression: ((4 * (2 + 5)) - 4)"}, {"input": "2 4 4 5\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 4, 4\n(5/2) / (4) = 5/8, left: ((5 / 2) / 4) = 5/8, 4\nroll back, left: (5 / 2) = 5/2, 4, 4\n(5/2) / (4) = 5/8, left: ((5 / 2) / 4) = 5/8, 4\nroll back, left: (5 / 2) = 5/2, 4, 4\nroll back, left: 2 4 4 5\n(2) + (5) = 7, left: (2 + 5) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (2 + 5)) = 28, 4\n(28) - (4) = 24, left: ((4 * (2 + 5)) - 4) = 24\nreach 24! expression: ((4 * (2 + 5)) - 4)"}, {"input": "2 4 4 5\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 4, 4\n(4) + (7) = 11, left: (4 + (2 + 5)) = 11, 4\nroll back, left: (2 + 5) = 7, 4, 4\n(4) / (7) = 4/7, left: (4 / (2 + 5)) = 4/7, 4\n(4) - (4/7) = 24/7, left: (4 - (4 / (2 + 5))) = 24/7\nroll back, left: (4 / (2 + 5)) = 4/7, 4\nroll back, left: (2 + 5) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (2 + 5)) = 28, 4\n(28) - (4) = 24, left: ((4 * (2 + 5)) - 4) = 24\nreach 24! expression: ((4 * (2 + 5)) - 4)"}, {"input": "2 13 13 13\n", "output": "(13) / (13) = 1, left: (13 / 13) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (13 / 13)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (13 / 13))) = 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 13 13 13\n", "output": "(2) - (13) = -11, left: (2 - 13) = -11, 13, 13\nroll back, left: 2 13 13 13\n(2) + (13) = 15, left: (2 + 13) = 15, 13, 13\nroll back, left: 2 13 13 13\n(2) / (13) = 2/13, left: (2 / 13) = 2/13, 13, 13\nroll back, left: 2 13 13 13\n(13) / (13) = 1, left: (13 / 13) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (13 / 13)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (13 / 13))) = 24\nreach 24! expression: (2 * (13 - (13 / 13)))"}, {"input": "2 6 12 5\n", "output": "(12) * (5) = 60, left: (12 * 5) = 60, 2, 6\n(60) / (2) = 30, left: ((12 * 5) / 2) = 30, 6\n(30) - (6) = 24, left: (((12 * 5) / 2) - 6) = 24\nreach 24! expression: (((12 * 5) / 2) - 6)"}, {"input": "2 6 12 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 2, 12\n(12) / (1) = 12, left: (12 / (6 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (6 - 5))) = 24\nreach 24! expression: (2 * (12 / (6 - 5)))"}, {"input": "2 6 12 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 2, 12\n(2) / (1) = 2, left: (2 / (6 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 / (6 - 5))) = 24\nreach 24! expression: (12 * (2 / (6 - 5)))"}, {"input": "2 6 12 5\n", "output": "(2) * (12) = 24, left: (2 * 12) = 24, 6, 5\n(6) - (5) = 1, left: (6 - 5) = 1, (2 * 12) = 24\n(24) * (1) = 24, left: ((2 * 12) * (6 - 5)) = 24\nreach 24! expression: ((2 * 12) * (6 - 5))"}, {"input": "2 6 12 5\n", "output": "(6) * (5) = 30, left: (6 * 5) = 30, 2, 12\n(12) / (2) = 6, left: (12 / 2) = 6, (6 * 5) = 30\n(30) - (6) = 24, left: ((6 * 5) - (12 / 2)) = 24\nreach 24! expression: ((6 * 5) - (12 / 2))"}, {"input": "2 6 12 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 2, 12\n(2) / (1) = 2, left: (2 / (6 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 / (6 - 5))) = 24\nreach 24! expression: (12 * (2 / (6 - 5)))"}, {"input": "2 6 12 5\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 2, 12\n(2) * (12) = 24, left: (2 * 12) = 24, (6 + 5) = 11\nroll back, left: (6 + 5) = 11, 2, 12\n(11) - (12) = -1, left: ((6 + 5) - 12) = -1, 2\nroll back, left: (6 + 5) = 11, 2, 12\nroll back, left: 2 6 12 5\n(6) * (5) = 30, left: (6 * 5) = 30, 2, 12\n(12) / (2) = 6, left: (12 / 2) = 6, (6 * 5) = 30\n(30) - (6) = 24, left: ((6 * 5) - (12 / 2)) = 24\nreach 24! expression: ((6 * 5) - (12 / 2))"}, {"input": "2 6 12 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 2, 12\n(2) / (1) = 2, left: (2 / (6 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 / (6 - 5))) = 24\nreach 24! expression: (12 * (2 / (6 - 5)))"}, {"input": "2 6 12 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 2, 12\n(2) / (1) = 2, left: (2 / (6 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 / (6 - 5))) = 24\nreach 24! expression: (12 * (2 / (6 - 5)))"}, {"input": "2 6 12 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 2, 12\n(2) / (1) = 2, left: (2 / (6 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 / (6 - 5))) = 24\nreach 24! expression: (12 * (2 / (6 - 5)))"}, {"input": "7 8 10 11\n", "output": "(8) / (7) = 8/7, left: (8 / 7) = 8/7, 10, 11\n(10) + (11) = 21, left: (10 + 11) = 21, (8 / 7) = 8/7\n(8/7) * (21) = 24, left: ((8 / 7) * (10 + 11)) = 24\nreach 24! expression: ((8 / 7) * (10 + 11))"}, {"input": "7 8 10 11\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 10, 11\n(10) + (11) = 21, left: (10 + 11) = 21, (7 / 8) = 7/8\n(21) / (7/8) = 24, left: ((10 + 11) / (7 / 8)) = 24\nreach 24! expression: ((10 + 11) / (7 / 8))"}, {"input": "7 8 10 11\n", "output": "(10) / (8) = 5/4, left: (10 / 8) = 5/4, 7, 11\nroll back, left: 7 8 10 11\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 7, 11\nroll back, left: 7 8 10 11\n(8) - (7) = 1, left: (8 - 7) = 1, 10, 11\nroll back, left: 7 8 10 11\n(8) / (7) = 8/7, left: (8 / 7) = 8/7, 10, 11\n(10) + (11) = 21, left: (10 + 11) = 21, (8 / 7) = 8/7\n(8/7) * (21) = 24, left: ((8 / 7) * (10 + 11)) = 24\nreach 24! expression: ((8 / 7) * (10 + 11))"}, {"input": "7 8 10 11\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 7, 11\nroll back, left: 7 8 10 11\n(7) / (10) = 7/10, left: (7 / 10) = 7/10, 8, 11\nroll back, left: 7 8 10 11\n(8) - (7) = 1, left: (8 - 7) = 1, 10, 11\nroll back, left: 7 8 10 11\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, 10, 11\n(10) + (11) = 21, left: (10 + 11) = 21, (7 / 8) = 7/8\n(21) / (7/8) = 24, left: ((10 + 11) / (7 / 8)) = 24\nreach 24! expression: ((10 + 11) / (7 / 8))"}, {"input": "12 3 11 6\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 11, 6\n(15) - (11) = 4, left: ((12 + 3) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 + 3) - 11)) = 24\nreach 24! expression: (6 * ((12 + 3) - 11))"}, {"input": "12 3 11 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 12, 3\n(5) - (3) = 2, left: ((11 - 6) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 6) - 3)) = 24\nreach 24! expression: (12 * ((11 - 6) - 3))"}, {"input": "12 3 11 6\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 12, 6\n(12) + (-8) = 4, left: (12 + (3 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (12 + (3 - 11))) = 24\nreach 24! expression: (6 * (12 + (3 - 11)))"}, {"input": "12 3 11 6\n", "output": "(11) - (12) = -1, left: (11 - 12) = -1, 3, 6\n(3) - (-1) = 4, left: (3 - (11 - 12)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (11 - 12))) = 24\nreach 24! expression: (6 * (3 - (11 - 12)))"}, {"input": "12 3 11 6\n", "output": "(12) * (6) = 72, left: (12 * 6) = 72, 3, 11\nroll back, left: 12 3 11 6\n(6) - (12) = -6, left: (6 - 12) = -6, 3, 11\nroll back, left: 12 3 11 6\n(11) + (6) = 17, left: (11 + 6) = 17, 12, 3\nroll back, left: 12 3 11 6\n(11) - (6) = 5, left: (11 - 6) = 5, 12, 3\n(5) - (3) = 2, left: ((11 - 6) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 6) - 3)) = 24\nreach 24! expression: (12 * ((11 - 6) - 3))"}, {"input": "12 3 11 6\n", "output": "(11) + (6) = 17, left: (11 + 6) = 17, 12, 3\n(3) - (12) = -9, left: (3 - 12) = -9, (11 + 6) = 17\nroll back, left: (11 + 6) = 17, 12, 3\nroll back, left: 12 3 11 6\n(11) / (6) = 11/6, left: (11 / 6) = 11/6, 12, 3\nroll back, left: 12 3 11 6\n(11) - (6) = 5, left: (11 - 6) = 5, 12, 3\n(5) - (3) = 2, left: ((11 - 6) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 6) - 3)) = 24\nreach 24! expression: (12 * ((11 - 6) - 3))"}, {"input": "12 3 11 6\n", "output": "(11) - (12) = -1, left: (11 - 12) = -1, 3, 6\n(6) * (-1) = -6, left: (6 * (11 - 12)) = -6, 3\n(-6) - (3) = -9, left: ((6 * (11 - 12)) - 3) = -9\nroll back, left: (6 * (11 - 12)) = -6, 3\nroll back, left: (11 - 12) = -1, 3, 6\n(-1) - (6) = -7, left: ((11 - 12) - 6) = -7, 3\nroll back, left: (11 - 12) = -1, 3, 6\n(3) - (-1) = 4, left: (3 - (11 - 12)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (11 - 12))) = 24\nreach 24! expression: (6 * (3 - (11 - 12)))"}, {"input": "12 3 11 6\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 11, 6\n(6) - (9) = -3, left: (6 - (12 - 3)) = -3, 11\nroll back, left: (12 - 3) = 9, 11, 6\nroll back, left: 12 3 11 6\n(3) / (12) = 1/4, left: (3 / 12) = 1/4, 11, 6\nroll back, left: 12 3 11 6\n(12) + (3) = 15, left: (12 + 3) = 15, 11, 6\n(15) - (11) = 4, left: ((12 + 3) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 + 3) - 11)) = 24\nreach 24! expression: (6 * ((12 + 3) - 11))"}, {"input": "12 3 11 6\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 3, 11\nroll back, left: 12 3 11 6\n(12) / (6) = 2, left: (12 / 6) = 2, 3, 11\n(11) - (2) = 9, left: (11 - (12 / 6)) = 9, 3\nroll back, left: (12 / 6) = 2, 3, 11\nroll back, left: 12 3 11 6\n(3) - (11) = -8, left: (3 - 11) = -8, 12, 6\n(12) + (-8) = 4, left: (12 + (3 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (12 + (3 - 11))) = 24\nreach 24! expression: (6 * (12 + (3 - 11)))"}, {"input": "6 6 4 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 6, 4\n(6) / (36) = 1/6, left: (6 / (6 * 6)) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / (6 / (6 * 6))) = 24\nreach 24! expression: (4 / (6 / (6 * 6)))"}, {"input": "6 6 4 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 6, 4\n(4) * (36) = 144, left: (4 * (6 * 6)) = 144, 6\n(144) / (6) = 24, left: ((4 * (6 * 6)) / 6) = 24\nreach 24! expression: ((4 * (6 * 6)) / 6)"}, {"input": "6 6 4 6\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 6, 6\n(6) - (2) = 4, left: (6 - (6 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 - (6 - 4))) = 24\nreach 24! expression: (6 * (6 - (6 - 4)))"}, {"input": "6 6 4 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 4, 6\n(6) / (1) = 6, left: (6 / (6 / 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (6 / 6))) = 24\nreach 24! expression: (4 * (6 / (6 / 6)))"}, {"input": "6 6 4 6\n", "output": "(4) - (6) = -2, left: (4 - 6) = -2, 6, 6\n(6) + (-2) = 4, left: (6 + (4 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 + (4 - 6))) = 24\nreach 24! expression: (6 * (6 + (4 - 6)))"}, {"input": "6 6 4 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 6, 4\n(6) - (36) = -30, left: (6 - (6 * 6)) = -30, 4\n(4) * (-30) = -120, left: (4 * (6 - (6 * 6))) = -120\nroll back, left: (6 - (6 * 6)) = -30, 4\n(4) / (-30) = -2/15, left: (4 / (6 - (6 * 6))) = -2/15\nroll back, left: (6 - (6 * 6)) = -30, 4\nroll back, left: (6 * 6) = 36, 6, 4\n(6) / (36) = 1/6, left: (6 / (6 * 6)) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / (6 / (6 * 6))) = 24\nreach 24! expression: (4 / (6 / (6 * 6)))"}, {"input": "6 6 4 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 4, 6\n(6) / (1) = 6, left: (6 / (6 / 6)) = 6, 4\n(4) + (6) = 10, left: (4 + (6 / (6 / 6))) = 10\nroll back, left: (6 / (6 / 6)) = 6, 4\n(6) / (4) = 3/2, left: ((6 / (6 / 6)) / 4) = 3/2\nroll back, left: (6 / (6 / 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (6 / 6))) = 24\nreach 24! expression: (4 * (6 / (6 / 6)))"}, {"input": "6 6 4 6\n", "output": "(4) - (6) = -2, left: (4 - 6) = -2, 6, 6\n(-2) / (6) = -1/3, left: ((4 - 6) / 6) = -1/3, 6\nroll back, left: (4 - 6) = -2, 6, 6\n(6) - (-2) = 8, left: (6 - (4 - 6)) = 8, 6\nroll back, left: (4 - 6) = -2, 6, 6\n(6) * (-2) = -12, left: (6 * (4 - 6)) = -12, 6\nroll back, left: (4 - 6) = -2, 6, 6\n(6) + (-2) = 4, left: (6 + (4 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 + (4 - 6))) = 24\nreach 24! expression: (6 * (6 + (4 - 6)))"}, {"input": "6 6 4 6\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 6, 6\n(6) * (2) = 12, left: (6 * (6 - 4)) = 12, 6\n(6) + (12) = 18, left: (6 + (6 * (6 - 4))) = 18\nroll back, left: (6 * (6 - 4)) = 12, 6\nroll back, left: (6 - 4) = 2, 6, 6\n(6) / (2) = 3, left: (6 / (6 - 4)) = 3, 6\nroll back, left: (6 - 4) = 2, 6, 6\n(6) - (2) = 4, left: (6 - (6 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 - (6 - 4))) = 24\nreach 24! expression: (6 * (6 - (6 - 4)))"}, {"input": "6 6 4 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 6, 4\n(36) - (4) = 32, left: ((6 * 6) - 4) = 32, 6\n(6) + (32) = 38, left: (6 + ((6 * 6) - 4)) = 38\nroll back, left: ((6 * 6) - 4) = 32, 6\n(6) * (32) = 192, left: (6 * ((6 * 6) - 4)) = 192\nroll back, left: ((6 * 6) - 4) = 32, 6\nroll back, left: (6 * 6) = 36, 6, 4\n(4) * (36) = 144, left: (4 * (6 * 6)) = 144, 6\n(144) / (6) = 24, left: ((4 * (6 * 6)) / 6) = 24\nreach 24! expression: ((4 * (6 * 6)) / 6)"}, {"input": "6 6 4 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 4, 6\n(6) / (1) = 6, left: (6 / (6 / 6)) = 6, 4\n(4) + (6) = 10, left: (4 + (6 / (6 / 6))) = 10\nroll back, left: (6 / (6 / 6)) = 6, 4\n(6) / (4) = 3/2, left: ((6 / (6 / 6)) / 4) = 3/2\nroll back, left: (6 / (6 / 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (6 / 6))) = 24\nreach 24! expression: (4 * (6 / (6 / 6)))"}, {"input": "6 6 4 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 4, 6\n(6) / (1) = 6, left: (6 / (6 / 6)) = 6, 4\n(4) + (6) = 10, left: (4 + (6 / (6 / 6))) = 10\nroll back, left: (6 / (6 / 6)) = 6, 4\n(6) / (4) = 3/2, left: ((6 / (6 / 6)) / 4) = 3/2\nroll back, left: (6 / (6 / 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (6 / 6))) = 24\nreach 24! expression: (4 * (6 / (6 / 6)))"}, {"input": "6 6 4 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 4, 6\n(6) / (1) = 6, left: (6 / (6 / 6)) = 6, 4\n(4) + (6) = 10, left: (4 + (6 / (6 / 6))) = 10\nroll back, left: (6 / (6 / 6)) = 6, 4\n(6) / (4) = 3/2, left: ((6 / (6 / 6)) / 4) = 3/2\nroll back, left: (6 / (6 / 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (6 / 6))) = 24\nreach 24! expression: (4 * (6 / (6 / 6)))"}, {"input": "9 9 6 2\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 6, 2\n(18) - (6) = 12, left: ((9 + 9) - 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((9 + 9) - 6)) = 24\nreach 24! expression: (2 * ((9 + 9) - 6))"}, {"input": "9 9 6 2\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 9, 2\n(2) + (2/3) = 8/3, left: (2 + (6 / 9)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (2 + (6 / 9))) = 24\nreach 24! expression: (9 * (2 + (6 / 9)))"}, {"input": "9 9 6 2\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 9, 2\n(9) - (-3) = 12, left: (9 - (6 - 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (6 - 9))) = 24\nreach 24! expression: (2 * (9 - (6 - 9)))"}, {"input": "9 9 6 2\n", "output": "(2) / (9) = 2/9, left: (2 / 9) = 2/9, 9, 6\nroll back, left: 9 9 6 2\n(9) / (2) = 9/2, left: (9 / 2) = 9/2, 9, 6\n(9) * (9/2) = 81/2, left: (9 * (9 / 2)) = 81/2, 6\nroll back, left: (9 / 2) = 9/2, 9, 6\nroll back, left: 9 9 6 2\n(6) - (9) = -3, left: (6 - 9) = -3, 9, 2\n(9) - (-3) = 12, left: (9 - (6 - 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (6 - 9))) = 24\nreach 24! expression: (2 * (9 - (6 - 9)))"}, {"input": "9 9 6 2\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 9, 2\n(2) + (15) = 17, left: (2 + (9 + 6)) = 17, 9\nroll back, left: (9 + 6) = 15, 9, 2\n(2) - (9) = -7, left: (2 - 9) = -7, (9 + 6) = 15\nroll back, left: (9 + 6) = 15, 9, 2\nroll back, left: 9 9 6 2\n(6) - (9) = -3, left: (6 - 9) = -3, 9, 2\n(9) - (-3) = 12, left: (9 - (6 - 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (6 - 9))) = 24\nreach 24! expression: (2 * (9 - (6 - 9)))"}, {"input": "9 9 6 2\n", "output": "(9) + (2) = 11, left: (9 + 2) = 11, 9, 6\nroll back, left: 9 9 6 2\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 9, 2\n(3/2) / (2) = 3/4, left: ((9 / 6) / 2) = 3/4, 9\nroll back, left: (9 / 6) = 3/2, 9, 2\nroll back, left: 9 9 6 2\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, 9, 2\n(2) + (2/3) = 8/3, left: (2 + (6 / 9)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (2 + (6 / 9))) = 24\nreach 24! expression: (9 * (2 + (6 / 9)))"}, {"input": "9 9 6 2\n", "output": "(9) * (9) = 81, left: (9 * 9) = 81, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (9 * 9) = 81\n(12) / (81) = 4/27, left: ((6 * 2) / (9 * 9)) = 4/27\nroll back, left: (6 * 2) = 12, (9 * 9) = 81\nroll back, left: (9 * 9) = 81, 6, 2\nroll back, left: 9 9 6 2\n(9) + (9) = 18, left: (9 + 9) = 18, 6, 2\n(18) - (6) = 12, left: ((9 + 9) - 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((9 + 9) - 6)) = 24\nreach 24! expression: (2 * ((9 + 9) - 6))"}, {"input": "9 9 6 2\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 9, 2\nroll back, left: 9 9 6 2\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, 9, 2\n(9) / (2) = 9/2, left: (9 / 2) = 9/2, (6 / 9) = 2/3\nroll back, left: (6 / 9) = 2/3, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (6 / 9) = 2/3\nroll back, left: (6 / 9) = 2/3, 9, 2\n(2) + (2/3) = 8/3, left: (2 + (6 / 9)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (2 + (6 / 9))) = 24\nreach 24! expression: (9 * (2 + (6 / 9)))"}, {"input": "1 2 5 6\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (6 - 2) = 4\n(4) * (6) = 24, left: ((6 - 2) * (1 + 5)) = 24\nreach 24! expression: ((6 - 2) * (1 + 5))"}, {"input": "1 2 5 6\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 2, 6\n(6) - (2) = 4, left: (6 - 2) = 4, (1 + 5) = 6\n(6) * (4) = 24, left: ((1 + 5) * (6 - 2)) = 24\nreach 24! expression: ((1 + 5) * (6 - 2))"}, {"input": "1 2 5 6\n", "output": "(1) + (6) = 7, left: (1 + 6) = 7, 2, 5\n(5) + (7) = 12, left: (5 + (1 + 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (5 + (1 + 6))) = 24\nreach 24! expression: (2 * (5 + (1 + 6)))"}, {"input": "1 2 5 6\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 1, 6\n(1) - (-3) = 4, left: (1 - (2 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 - (2 - 5))) = 24\nreach 24! expression: (6 * (1 - (2 - 5)))"}, {"input": "1 2 5 6\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 2, 6\n(6) + (6) = 12, left: (6 + (1 + 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (6 + (1 + 5))) = 24\nreach 24! expression: (2 * (6 + (1 + 5)))"}, {"input": "1 2 5 6\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 1, 5\nroll back, left: 1 2 5 6\n(2) * (6) = 12, left: (2 * 6) = 12, 1, 5\nroll back, left: 1 2 5 6\n(6) - (2) = 4, left: (6 - 2) = 4, 1, 5\n(4) / (5) = 4/5, left: ((6 - 2) / 5) = 4/5, 1\nroll back, left: (6 - 2) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (6 - 2) = 4\n(4) * (6) = 24, left: ((6 - 2) * (1 + 5)) = 24\nreach 24! expression: ((6 - 2) * (1 + 5))"}, {"input": "1 2 5 6\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 2, 6\n(2) * (6) = 12, left: (2 * 6) = 12, (1 - 5) = -4\nroll back, left: (1 - 5) = -4, 2, 6\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, (1 - 5) = -4\nroll back, left: (1 - 5) = -4, 2, 6\nroll back, left: 1 2 5 6\n(1) + (5) = 6, left: (1 + 5) = 6, 2, 6\n(6) + (6) = 12, left: (6 + (1 + 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (6 + (1 + 5))) = 24\nreach 24! expression: (2 * (6 + (1 + 5)))"}, {"input": "1 2 5 6\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 2, 5\n(2) + (5) = 7, left: (2 + 5) = 7, (1 / 6) = 1/6\n(1/6) + (7) = 43/6, left: ((1 / 6) + (2 + 5)) = 43/6\nroll back, left: (2 + 5) = 7, (1 / 6) = 1/6\nroll back, left: (1 / 6) = 1/6, 2, 5\nroll back, left: 1 2 5 6\n(1) + (6) = 7, left: (1 + 6) = 7, 2, 5\n(5) + (7) = 12, left: (5 + (1 + 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (5 + (1 + 6))) = 24\nreach 24! expression: (2 * (5 + (1 + 6)))"}, {"input": "1 2 5 6\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 2, 6\n(2) + (4) = 6, left: (2 + (5 - 1)) = 6, 6\nroll back, left: (5 - 1) = 4, 2, 6\nroll back, left: 1 2 5 6\n(1) + (5) = 6, left: (1 + 5) = 6, 2, 6\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, (1 + 5) = 6\nroll back, left: (1 + 5) = 6, 2, 6\n(6) - (2) = 4, left: (6 - 2) = 4, (1 + 5) = 6\n(6) * (4) = 24, left: ((1 + 5) * (6 - 2)) = 24\nreach 24! expression: ((1 + 5) * (6 - 2))"}, {"input": "1 2 5 6\n", "output": "(2) / (5) = 2/5, left: (2 / 5) = 2/5, 1, 6\n(6) + (2/5) = 32/5, left: (6 + (2 / 5)) = 32/5, 1\nroll back, left: (2 / 5) = 2/5, 1, 6\n(1) + (2/5) = 7/5, left: (1 + (2 / 5)) = 7/5, 6\nroll back, left: (2 / 5) = 2/5, 1, 6\nroll back, left: 1 2 5 6\n(2) - (5) = -3, left: (2 - 5) = -3, 1, 6\n(1) - (-3) = 4, left: (1 - (2 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 - (2 - 5))) = 24\nreach 24! expression: (6 * (1 - (2 - 5)))"}, {"input": "2 3 8 1\n", "output": "(2) / (3) = 2/3, left: (2 / 3) = 2/3, 8, 1\n(1) - (2/3) = 1/3, left: (1 - (2 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (1 - (2 / 3))) = 24\nreach 24! expression: (8 / (1 - (2 / 3)))"}, {"input": "2 3 8 1\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (8 - 2) = 6\n(6) * (4) = 24, left: ((8 - 2) * (3 + 1)) = 24\nreach 24! expression: ((8 - 2) * (3 + 1))"}, {"input": "2 3 8 1\n", "output": "(3) + (1) = 4, left: (3 + 1) = 4, 2, 8\n(8) - (2) = 6, left: (8 - 2) = 6, (3 + 1) = 4\n(4) * (6) = 24, left: ((3 + 1) * (8 - 2)) = 24\nreach 24! expression: ((3 + 1) * (8 - 2))"}, {"input": "2 3 8 1\n", "output": "(8) + (1) = 9, left: (8 + 1) = 9, 2, 3\n(3) + (9) = 12, left: (3 + (8 + 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 + (8 + 1))) = 24\nreach 24! expression: (2 * (3 + (8 + 1)))"}, {"input": "2 3 8 1\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 2, 1\n(2) - (1) = 1, left: (2 - 1) = 1, (3 * 8) = 24\n(24) / (1) = 24, left: ((3 * 8) / (2 - 1)) = 24\nreach 24! expression: ((3 * 8) / (2 - 1))"}, {"input": "2 3 8 1\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 2, 3\nroll back, left: 2 3 8 1\n(8) / (1) = 8, left: (8 / 1) = 8, 2, 3\n(2) / (8) = 1/4, left: (2 / (8 / 1)) = 1/4, 3\nroll back, left: (8 / 1) = 8, 2, 3\nroll back, left: 2 3 8 1\n(8) + (1) = 9, left: (8 + 1) = 9, 2, 3\n(3) + (9) = 12, left: (3 + (8 + 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 + (8 + 1))) = 24\nreach 24! expression: (2 * (3 + (8 + 1)))"}, {"input": "2 3 8 1\n", "output": "(2) * (8) = 16, left: (2 * 8) = 16, 3, 1\nroll back, left: 2 3 8 1\n(8) / (2) = 4, left: (8 / 2) = 4, 3, 1\nroll back, left: 2 3 8 1\n(2) - (8) = -6, left: (2 - 8) = -6, 3, 1\nroll back, left: 2 3 8 1\n(8) - (2) = 6, left: (8 - 2) = 6, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (8 - 2) = 6\n(6) * (4) = 24, left: ((8 - 2) * (3 + 1)) = 24\nreach 24! expression: ((8 - 2) * (3 + 1))"}, {"input": "2 3 8 1\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 2, 1\n(2) * (1) = 2, left: (2 * 1) = 2, (8 / 3) = 8/3\nroll back, left: (8 / 3) = 8/3, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (8 / 3) = 8/3\nroll back, left: (8 / 3) = 8/3, 2, 1\nroll back, left: 2 3 8 1\n(3) * (8) = 24, left: (3 * 8) = 24, 2, 1\n(2) - (1) = 1, left: (2 - 1) = 1, (3 * 8) = 24\n(24) / (1) = 24, left: ((3 * 8) / (2 - 1)) = 24\nreach 24! expression: ((3 * 8) / (2 - 1))"}, {"input": "2 3 8 1\n", "output": "(3) + (1) = 4, left: (3 + 1) = 4, 2, 8\n(2) / (4) = 1/2, left: (2 / (3 + 1)) = 1/2, 8\n(8) - (1/2) = 15/2, left: (8 - (2 / (3 + 1))) = 15/2\nroll back, left: (2 / (3 + 1)) = 1/2, 8\nroll back, left: (3 + 1) = 4, 2, 8\n(2) - (8) = -6, left: (2 - 8) = -6, (3 + 1) = 4\nroll back, left: (3 + 1) = 4, 2, 8\n(8) - (2) = 6, left: (8 - 2) = 6, (3 + 1) = 4\n(4) * (6) = 24, left: ((3 + 1) * (8 - 2)) = 24\nreach 24! expression: ((3 + 1) * (8 - 2))"}, {"input": "2 3 8 1\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 8, 1\nroll back, left: 2 3 8 1\n(2) - (3) = -1, left: (2 - 3) = -1, 8, 1\n(-1) / (8) = -1/8, left: ((2 - 3) / 8) = -1/8, 1\nroll back, left: (2 - 3) = -1, 8, 1\nroll back, left: 2 3 8 1\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 8, 1\n(1) - (2/3) = 1/3, left: (1 - (2 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (1 - (2 / 3))) = 24\nreach 24! expression: (8 / (1 - (2 / 3)))"}, {"input": "5 6 9 8\n", "output": "(6) + (9) = 15, left: (6 + 9) = 15, 5, 8\n(15) / (5) = 3, left: ((6 + 9) / 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 + 9) / 5)) = 24\nreach 24! expression: (8 * ((6 + 9) / 5))"}, {"input": "5 6 9 8\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (9 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (9 - 8))) = 24\nreach 24! expression: (6 * (5 - (9 - 8)))"}, {"input": "5 6 9 8\n", "output": "(8) - (9) = -1, left: (8 - 9) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (8 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (8 - 9))) = 24\nreach 24! expression: (6 * (5 + (8 - 9)))"}, {"input": "5 6 9 8\n", "output": "(6) + (9) = 15, left: (6 + 9) = 15, 5, 8\n(8) * (15) = 120, left: (8 * (6 + 9)) = 120, 5\n(120) / (5) = 24, left: ((8 * (6 + 9)) / 5) = 24\nreach 24! expression: ((8 * (6 + 9)) / 5)"}, {"input": "5 6 9 8\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 5, 9\nroll back, left: 5 6 9 8\n(6) - (8) = -2, left: (6 - 8) = -2, 5, 9\n(9) + (-2) = 7, left: (9 + (6 - 8)) = 7, 5\nroll back, left: (6 - 8) = -2, 5, 9\nroll back, left: 5 6 9 8\n(6) + (9) = 15, left: (6 + 9) = 15, 5, 8\n(15) / (5) = 3, left: ((6 + 9) / 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 + 9) / 5)) = 24\nreach 24! expression: (8 * ((6 + 9) / 5))"}, {"input": "5 6 9 8\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 5, 9\n(9) - (5) = 4, left: (9 - 5) = 4, (6 - 8) = -2\n(-2) - (4) = -6, left: ((6 - 8) - (9 - 5)) = -6\nroll back, left: (9 - 5) = 4, (6 - 8) = -2\nroll back, left: (6 - 8) = -2, 5, 9\nroll back, left: 5 6 9 8\n(8) - (9) = -1, left: (8 - 9) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (8 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (8 - 9))) = 24\nreach 24! expression: (6 * (5 + (8 - 9)))"}, {"input": "5 6 9 8\n", "output": "(5) + (6) = 11, left: (5 + 6) = 11, 9, 8\n(8) / (11) = 8/11, left: (8 / (5 + 6)) = 8/11, 9\nroll back, left: (5 + 6) = 11, 9, 8\nroll back, left: 5 6 9 8\n(6) * (9) = 54, left: (6 * 9) = 54, 5, 8\nroll back, left: 5 6 9 8\n(6) + (9) = 15, left: (6 + 9) = 15, 5, 8\n(15) / (5) = 3, left: ((6 + 9) / 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 + 9) / 5)) = 24\nreach 24! expression: (8 * ((6 + 9) / 5))"}, {"input": "5 6 9 8\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 9, 8\nroll back, left: 5 6 9 8\n(9) * (8) = 72, left: (9 * 8) = 72, 5, 6\nroll back, left: 5 6 9 8\n(9) / (8) = 9/8, left: (9 / 8) = 9/8, 5, 6\nroll back, left: 5 6 9 8\n(9) - (8) = 1, left: (9 - 8) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (9 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (9 - 8))) = 24\nreach 24! expression: (6 * (5 - (9 - 8)))"}, {"input": "5 6 9 8\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 5, 8\nroll back, left: 5 6 9 8\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 5, 8\nroll back, left: 5 6 9 8\n(6) - (9) = -3, left: (6 - 9) = -3, 5, 8\nroll back, left: 5 6 9 8\n(6) + (9) = 15, left: (6 + 9) = 15, 5, 8\n(8) * (15) = 120, left: (8 * (6 + 9)) = 120, 5\n(120) / (5) = 24, left: ((8 * (6 + 9)) / 5) = 24\nreach 24! expression: ((8 * (6 + 9)) / 5)"}, {"input": "4 9 10 12\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 10, 12\n(10) / (5) = 2, left: (10 / (9 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 / (9 - 4))) = 24\nreach 24! expression: (12 * (10 / (9 - 4)))"}, {"input": "4 9 10 12\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 10, 12\n(10) * (12) = 120, left: (10 * 12) = 120, (9 - 4) = 5\n(120) / (5) = 24, left: ((10 * 12) / (9 - 4)) = 24\nreach 24! expression: ((10 * 12) / (9 - 4))"}, {"input": "4 9 10 12\n", "output": "(10) * (12) = 120, left: (10 * 12) = 120, 4, 9\n(9) - (4) = 5, left: (9 - 4) = 5, (10 * 12) = 120\n(120) / (5) = 24, left: ((10 * 12) / (9 - 4)) = 24\nreach 24! expression: ((10 * 12) / (9 - 4))"}, {"input": "4 9 10 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 4, 10\nroll back, left: 4 9 10 12\n(9) - (12) = -3, left: (9 - 12) = -3, 4, 10\nroll back, left: 4 9 10 12\n(4) - (9) = -5, left: (4 - 9) = -5, 10, 12\nroll back, left: 4 9 10 12\n(9) - (4) = 5, left: (9 - 4) = 5, 10, 12\n(10) * (12) = 120, left: (10 * 12) = 120, (9 - 4) = 5\n(120) / (5) = 24, left: ((10 * 12) / (9 - 4)) = 24\nreach 24! expression: ((10 * 12) / (9 - 4))"}, {"input": "4 9 10 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 4, 10\nroll back, left: 4 9 10 12\n(12) / (9) = 4/3, left: (12 / 9) = 4/3, 4, 10\n(4/3) - (10) = -26/3, left: ((12 / 9) - 10) = -26/3, 4\nroll back, left: (12 / 9) = 4/3, 4, 10\nroll back, left: 4 9 10 12\n(9) - (4) = 5, left: (9 - 4) = 5, 10, 12\n(10) / (5) = 2, left: (10 / (9 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 / (9 - 4))) = 24\nreach 24! expression: (12 * (10 / (9 - 4)))"}, {"input": "4 9 10 12\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 9, 10\nroll back, left: 4 9 10 12\n(4) - (12) = -8, left: (4 - 12) = -8, 9, 10\n(9) - (-8) = 17, left: (9 - (4 - 12)) = 17, 10\nroll back, left: (4 - 12) = -8, 9, 10\nroll back, left: 4 9 10 12\n(10) * (12) = 120, left: (10 * 12) = 120, 4, 9\n(9) - (4) = 5, left: (9 - 4) = 5, (10 * 12) = 120\n(120) / (5) = 24, left: ((10 * 12) / (9 - 4)) = 24\nreach 24! expression: ((10 * 12) / (9 - 4))"}, {"input": "12 13 13 1\n", "output": "(13) / (13) = 1, left: (13 / 13) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (13 / 13)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (13 / 13))) = 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "12 13 13 1\n", "output": "(12) * (13) = 156, left: (12 * 13) = 156, 13, 1\nroll back, left: 12 13 13 1\n(13) - (12) = 1, left: (13 - 12) = 1, 13, 1\n(1) + (1) = 2, left: (1 + (13 - 12)) = 2, 13\nroll back, left: (13 - 12) = 1, 13, 1\nroll back, left: 12 13 13 1\n(13) / (13) = 1, left: (13 / 13) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (13 / 13)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (13 / 13))) = 24\nreach 24! expression: (12 * (1 + (13 / 13)))"}, {"input": "13 5 12 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 13, 12\n(12) - (1) = 11, left: (12 - (5 / 5)) = 11, 13\n(13) + (11) = 24, left: (13 + (12 - (5 / 5))) = 24\nreach 24! expression: (13 + (12 - (5 / 5)))"}, {"input": "13 5 12 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 13, 12\n(12) - (13) = -1, left: (12 - 13) = -1, (5 * 5) = 25\n(25) + (-1) = 24, left: ((5 * 5) + (12 - 13)) = 24\nreach 24! expression: ((5 * 5) + (12 - 13))"}, {"input": "13 5 12 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 13, 12\n(13) + (12) = 25, left: (13 + 12) = 25, (5 / 5) = 1\n(25) - (1) = 24, left: ((13 + 12) - (5 / 5)) = 24\nreach 24! expression: ((13 + 12) - (5 / 5))"}, {"input": "13 5 12 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 13, 12\n(13) - (1) = 12, left: (13 - (5 / 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (13 - (5 / 5))) = 24\nreach 24! expression: (12 + (13 - (5 / 5)))"}, {"input": "13 5 12 5\n", "output": "(5) / (13) = 5/13, left: (5 / 13) = 5/13, 12, 5\nroll back, left: 13 5 12 5\n(5) - (12) = -7, left: (5 - 12) = -7, 13, 5\n(13) + (-7) = 6, left: (13 + (5 - 12)) = 6, 5\nroll back, left: (5 - 12) = -7, 13, 5\nroll back, left: 13 5 12 5\n(5) * (5) = 25, left: (5 * 5) = 25, 13, 12\n(12) - (13) = -1, left: (12 - 13) = -1, (5 * 5) = 25\n(25) + (-1) = 24, left: ((5 * 5) + (12 - 13)) = 24\nreach 24! expression: ((5 * 5) + (12 - 13))"}, {"input": "13 5 12 5\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 13, 12\nroll back, left: 13 5 12 5\n(5) - (5) = 0, left: (5 - 5) = 0, 13, 12\n(0) - (12) = -12, left: ((5 - 5) - 12) = -12, 13\nroll back, left: (5 - 5) = 0, 13, 12\nroll back, left: 13 5 12 5\n(5) / (5) = 1, left: (5 / 5) = 1, 13, 12\n(13) - (1) = 12, left: (13 - (5 / 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (13 - (5 / 5))) = 24\nreach 24! expression: (12 + (13 - (5 / 5)))"}, {"input": "13 5 12 5\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 13, 12\n(12) * (0) = 0, left: (12 * (5 - 5)) = 0, 13\nroll back, left: (5 - 5) = 0, 13, 12\nroll back, left: 13 5 12 5\n(5) / (5) = 1, left: (5 / 5) = 1, 13, 12\n(12) + (1) = 13, left: (12 + (5 / 5)) = 13, 13\nroll back, left: (5 / 5) = 1, 13, 12\n(12) - (1) = 11, left: (12 - (5 / 5)) = 11, 13\n(13) + (11) = 24, left: (13 + (12 - (5 / 5))) = 24\nreach 24! expression: (13 + (12 - (5 / 5)))"}, {"input": "10 9 6 2\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 10, 2\n(2) - (10) = -8, left: (2 - 10) = -8, (6 - 9) = -3\n(-3) * (-8) = 24, left: ((6 - 9) * (2 - 10)) = 24\nreach 24! expression: ((6 - 9) * (2 - 10))"}, {"input": "10 9 6 2\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (10 / 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (10 / 2))) = 24\nreach 24! expression: (6 * (9 - (10 / 2)))"}, {"input": "10 9 6 2\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (10 - 2) = 8\n(8) * (3) = 24, left: ((10 - 2) * (9 - 6)) = 24\nreach 24! expression: ((10 - 2) * (9 - 6))"}, {"input": "10 9 6 2\n", "output": "(10) + (2) = 12, left: (10 + 2) = 12, 9, 6\n(6) / (12) = 1/2, left: (6 / (10 + 2)) = 1/2, 9\nroll back, left: (10 + 2) = 12, 9, 6\nroll back, left: 10 9 6 2\n(10) / (2) = 5, left: (10 / 2) = 5, 9, 6\n(9) / (5) = 9/5, left: (9 / (10 / 2)) = 9/5, 6\nroll back, left: (10 / 2) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (10 / 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (10 / 2))) = 24\nreach 24! expression: (6 * (9 - (10 / 2)))"}, {"input": "10 9 6 2\n", "output": "(9) + (2) = 11, left: (9 + 2) = 11, 10, 6\nroll back, left: 10 9 6 2\n(9) - (2) = 7, left: (9 - 2) = 7, 10, 6\nroll back, left: 10 9 6 2\n(2) - (9) = -7, left: (2 - 9) = -7, 10, 6\nroll back, left: 10 9 6 2\n(10) - (2) = 8, left: (10 - 2) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (10 - 2) = 8\n(8) * (3) = 24, left: ((10 - 2) * (9 - 6)) = 24\nreach 24! expression: ((10 - 2) * (9 - 6))"}, {"input": "10 9 6 2\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 9, 6\n(9) * (20) = 180, left: (9 * (10 * 2)) = 180, 6\n(6) - (180) = -174, left: (6 - (9 * (10 * 2))) = -174\nroll back, left: (9 * (10 * 2)) = 180, 6\nroll back, left: (10 * 2) = 20, 9, 6\nroll back, left: 10 9 6 2\n(10) / (2) = 5, left: (10 / 2) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (10 / 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (10 / 2))) = 24\nreach 24! expression: (6 * (9 - (10 / 2)))"}, {"input": "10 9 6 2\n", "output": "(9) / (10) = 9/10, left: (9 / 10) = 9/10, 6, 2\nroll back, left: 10 9 6 2\n(10) - (9) = 1, left: (10 - 9) = 1, 6, 2\nroll back, left: 10 9 6 2\n(6) - (10) = -4, left: (6 - 10) = -4, 9, 2\nroll back, left: 10 9 6 2\n(10) - (2) = 8, left: (10 - 2) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (10 - 2) = 8\n(8) * (3) = 24, left: ((10 - 2) * (9 - 6)) = 24\nreach 24! expression: ((10 - 2) * (9 - 6))"}, {"input": "13 8 2 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (8 / 4) = 2\n(26) - (2) = 24, left: ((13 * 2) - (8 / 4)) = 24\nreach 24! expression: ((13 * 2) - (8 / 4))"}, {"input": "13 8 2 4\n", "output": "(13) * (8) = 104, left: (13 * 8) = 104, 2, 4\n(104) / (4) = 26, left: ((13 * 8) / 4) = 26, 2\n(26) - (2) = 24, left: (((13 * 8) / 4) - 2) = 24\nreach 24! expression: (((13 * 8) / 4) - 2)"}, {"input": "13 8 2 4\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 8, 2\n(8) / (4/13) = 26, left: (8 / (4 / 13)) = 26, 2\n(26) - (2) = 24, left: ((8 / (4 / 13)) - 2) = 24\nreach 24! expression: ((8 / (4 / 13)) - 2)"}, {"input": "13 8 2 4\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 8, 4\n(8) / (4) = 2, left: (8 / 4) = 2, (13 * 2) = 26\n(26) - (2) = 24, left: ((13 * 2) - (8 / 4)) = 24\nreach 24! expression: ((13 * 2) - (8 / 4))"}, {"input": "13 8 2 4\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 13, 8\n(13) - (8) = 5, left: (13 - 8) = 5, (2 - 4) = -2\nroll back, left: (2 - 4) = -2, 13, 8\nroll back, left: 13 8 2 4\n(13) - (4) = 9, left: (13 - 4) = 9, 8, 2\nroll back, left: 13 8 2 4\n(4) / (13) = 4/13, left: (4 / 13) = 4/13, 8, 2\n(8) / (4/13) = 26, left: (8 / (4 / 13)) = 26, 2\n(26) - (2) = 24, left: ((8 / (4 / 13)) - 2) = 24\nreach 24! expression: ((8 / (4 / 13)) - 2)"}, {"input": "13 8 2 4\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 8, 4\nroll back, left: 13 8 2 4\n(2) - (13) = -11, left: (2 - 13) = -11, 8, 4\n(4) * (-11) = -44, left: (4 * (2 - 13)) = -44, 8\nroll back, left: (2 - 13) = -11, 8, 4\nroll back, left: 13 8 2 4\n(13) * (2) = 26, left: (13 * 2) = 26, 8, 4\n(8) / (4) = 2, left: (8 / 4) = 2, (13 * 2) = 26\n(26) - (2) = 24, left: ((13 * 2) - (8 / 4)) = 24\nreach 24! expression: ((13 * 2) - (8 / 4))"}, {"input": "13 8 2 4\n", "output": "(13) / (8) = 13/8, left: (13 / 8) = 13/8, 2, 4\n(4) + (13/8) = 45/8, left: (4 + (13 / 8)) = 45/8, 2\nroll back, left: (13 / 8) = 13/8, 2, 4\nroll back, left: 13 8 2 4\n(13) - (8) = 5, left: (13 - 8) = 5, 2, 4\nroll back, left: 13 8 2 4\n(13) * (8) = 104, left: (13 * 8) = 104, 2, 4\n(104) / (4) = 26, left: ((13 * 8) / 4) = 26, 2\n(26) - (2) = 24, left: (((13 * 8) / 4) - 2) = 24\nreach 24! expression: (((13 * 8) / 4) - 2)"}, {"input": "13 8 2 4\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 13, 4\n(13) + (4) = 17, left: (13 + 4) = 17, (8 / 2) = 4\nroll back, left: (8 / 2) = 4, 13, 4\nroll back, left: 13 8 2 4\n(13) + (8) = 21, left: (13 + 8) = 21, 2, 4\nroll back, left: 13 8 2 4\n(13) * (8) = 104, left: (13 * 8) = 104, 2, 4\n(104) / (4) = 26, left: ((13 * 8) / 4) = 26, 2\n(26) - (2) = 24, left: (((13 * 8) / 4) - 2) = 24\nreach 24! expression: (((13 * 8) / 4) - 2)"}, {"input": "13 8 2 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 13, 2\n(2) + (2) = 4, left: (2 + (8 / 4)) = 4, 13\nroll back, left: (8 / 4) = 2, 13, 2\n(2) - (2) = 0, left: (2 - (8 / 4)) = 0, 13\nroll back, left: (8 / 4) = 2, 13, 2\n(2) / (13) = 2/13, left: (2 / 13) = 2/13, (8 / 4) = 2\nroll back, left: (8 / 4) = 2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (8 / 4) = 2\n(26) - (2) = 24, left: ((13 * 2) - (8 / 4)) = 24\nreach 24! expression: ((13 * 2) - (8 / 4))"}, {"input": "11 12 10 9\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 11, 10\n(-3) - (11) = -14, left: ((9 - 12) - 11) = -14, 10\n(10) - (-14) = 24, left: (10 - ((9 - 12) - 11)) = 24\nreach 24! expression: (10 - ((9 - 12) - 11))"}, {"input": "11 12 10 9\n", "output": "(11) + (12) = 23, left: (11 + 12) = 23, 10, 9\n(10) + (23) = 33, left: (10 + (11 + 12)) = 33, 9\n(33) - (9) = 24, left: ((10 + (11 + 12)) - 9) = 24\nreach 24! expression: ((10 + (11 + 12)) - 9)"}, {"input": "11 12 10 9\n", "output": "(12) / (10) = 6/5, left: (12 / 10) = 6/5, 11, 9\n(11) + (9) = 20, left: (11 + 9) = 20, (12 / 10) = 6/5\n(6/5) * (20) = 24, left: ((12 / 10) * (11 + 9)) = 24\nreach 24! expression: ((12 / 10) * (11 + 9))"}, {"input": "11 12 10 9\n", "output": "(11) + (10) = 21, left: (11 + 10) = 21, 12, 9\n(9) - (12) = -3, left: (9 - 12) = -3, (11 + 10) = 21\n(21) - (-3) = 24, left: ((11 + 10) - (9 - 12)) = 24\nreach 24! expression: ((11 + 10) - (9 - 12))"}, {"input": "11 12 10 9\n", "output": "(11) + (12) = 23, left: (11 + 12) = 23, 10, 9\n(10) + (23) = 33, left: (10 + (11 + 12)) = 33, 9\n(9) - (33) = -24, left: (9 - (10 + (11 + 12))) = -24\nroll back, left: (10 + (11 + 12)) = 33, 9\n(9) / (33) = 3/11, left: (9 / (10 + (11 + 12))) = 3/11\nroll back, left: (10 + (11 + 12)) = 33, 9\n(33) - (9) = 24, left: ((10 + (11 + 12)) - 9) = 24\nreach 24! expression: ((10 + (11 + 12)) - 9)"}, {"input": "11 12 10 9\n", "output": "(11) + (12) = 23, left: (11 + 12) = 23, 10, 9\n(10) + (23) = 33, left: (10 + (11 + 12)) = 33, 9\n(9) - (33) = -24, left: (9 - (10 + (11 + 12))) = -24\nroll back, left: (10 + (11 + 12)) = 33, 9\n(9) / (33) = 3/11, left: (9 / (10 + (11 + 12))) = 3/11\nroll back, left: (10 + (11 + 12)) = 33, 9\n(33) - (9) = 24, left: ((10 + (11 + 12)) - 9) = 24\nreach 24! expression: ((10 + (11 + 12)) - 9)"}, {"input": "11 12 10 9\n", "output": "(11) + (12) = 23, left: (11 + 12) = 23, 10, 9\n(10) + (23) = 33, left: (10 + (11 + 12)) = 33, 9\n(9) - (33) = -24, left: (9 - (10 + (11 + 12))) = -24\nroll back, left: (10 + (11 + 12)) = 33, 9\n(9) / (33) = 3/11, left: (9 / (10 + (11 + 12))) = 3/11\nroll back, left: (10 + (11 + 12)) = 33, 9\n(33) - (9) = 24, left: ((10 + (11 + 12)) - 9) = 24\nreach 24! expression: ((10 + (11 + 12)) - 9)"}, {"input": "11 12 10 9\n", "output": "(11) + (12) = 23, left: (11 + 12) = 23, 10, 9\n(10) + (23) = 33, left: (10 + (11 + 12)) = 33, 9\n(9) - (33) = -24, left: (9 - (10 + (11 + 12))) = -24\nroll back, left: (10 + (11 + 12)) = 33, 9\n(9) / (33) = 3/11, left: (9 / (10 + (11 + 12))) = 3/11\nroll back, left: (10 + (11 + 12)) = 33, 9\n(33) - (9) = 24, left: ((10 + (11 + 12)) - 9) = 24\nreach 24! expression: ((10 + (11 + 12)) - 9)"}, {"input": "7 6 2 13\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 7, 2\n(19) - (2) = 17, left: ((6 + 13) - 2) = 17, 7\n(7) + (17) = 24, left: (7 + ((6 + 13) - 2)) = 24\nreach 24! expression: (7 + ((6 + 13) - 2))"}, {"input": "7 6 2 13\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 7, 2\n(19) - (7) = 12, left: ((6 + 13) - 7) = 12, 2\n(2) * (12) = 24, left: (2 * ((6 + 13) - 7)) = 24\nreach 24! expression: (2 * ((6 + 13) - 7))"}, {"input": "7 6 2 13\n", "output": "(7) + (6) = 13, left: (7 + 6) = 13, 2, 13\n(13) - (2) = 11, left: (13 - 2) = 11, (7 + 6) = 13\n(13) + (11) = 24, left: ((7 + 6) + (13 - 2)) = 24\nreach 24! expression: ((7 + 6) + (13 - 2))"}, {"input": "7 6 2 13\n", "output": "(7) + (13) = 20, left: (7 + 13) = 20, 6, 2\n(6) - (2) = 4, left: (6 - 2) = 4, (7 + 13) = 20\n(20) + (4) = 24, left: ((7 + 13) + (6 - 2)) = 24\nreach 24! expression: ((7 + 13) + (6 - 2))"}, {"input": "7 6 2 13\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 7, 6\n(7) + (11) = 18, left: (7 + (13 - 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (7 + (13 - 2))) = 24\nreach 24! expression: (6 + (7 + (13 - 2)))"}, {"input": "7 6 2 13\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 7, 2\nroll back, left: 7 6 2 13\n(6) - (13) = -7, left: (6 - 13) = -7, 7, 2\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, (6 - 13) = -7\nroll back, left: (6 - 13) = -7, 7, 2\nroll back, left: 7 6 2 13\n(6) + (13) = 19, left: (6 + 13) = 19, 7, 2\n(19) - (2) = 17, left: ((6 + 13) - 2) = 17, 7\n(7) + (17) = 24, left: (7 + ((6 + 13) - 2)) = 24\nreach 24! expression: (7 + ((6 + 13) - 2))"}, {"input": "7 6 2 13\n", "output": "(7) * (13) = 91, left: (7 * 13) = 91, 6, 2\n(6) * (91) = 546, left: (6 * (7 * 13)) = 546, 2\nroll back, left: (7 * 13) = 91, 6, 2\n(2) - (91) = -89, left: (2 - (7 * 13)) = -89, 6\nroll back, left: (7 * 13) = 91, 6, 2\nroll back, left: 7 6 2 13\n(7) + (13) = 20, left: (7 + 13) = 20, 6, 2\n(6) - (2) = 4, left: (6 - 2) = 4, (7 + 13) = 20\n(20) + (4) = 24, left: ((7 + 13) + (6 - 2)) = 24\nreach 24! expression: ((7 + 13) + (6 - 2))"}, {"input": "1 7 11 4\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (1 + 4)) = 35, 11\n(35) - (11) = 24, left: ((7 * (1 + 4)) - 11) = 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 7, 11\n(7) * (11) = 77, left: (7 * 11) = 77, (1 / 4) = 1/4\nroll back, left: (1 / 4) = 1/4, 7, 11\nroll back, left: 1 7 11 4\n(4) / (1) = 4, left: (4 / 1) = 4, 7, 11\nroll back, left: 1 7 11 4\n(1) + (4) = 5, left: (1 + 4) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (1 + 4)) = 35, 11\n(35) - (11) = 24, left: ((7 * (1 + 4)) - 11) = 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(1) * (7) = 7, left: (1 * 7) = 7, 11, 4\n(7) - (4) = 3, left: ((1 * 7) - 4) = 3, 11\nroll back, left: (1 * 7) = 7, 11, 4\nroll back, left: 1 7 11 4\n(1) + (4) = 5, left: (1 + 4) = 5, 7, 11\n(7) + (5) = 12, left: (7 + (1 + 4)) = 12, 11\nroll back, left: (1 + 4) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (1 + 4)) = 35, 11\n(35) - (11) = 24, left: ((7 * (1 + 4)) - 11) = 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 1, 4\nroll back, left: 1 7 11 4\n(1) * (4) = 4, left: (1 * 4) = 4, 7, 11\nroll back, left: 1 7 11 4\n(1) - (4) = -3, left: (1 - 4) = -3, 7, 11\nroll back, left: 1 7 11 4\n(1) + (4) = 5, left: (1 + 4) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (1 + 4)) = 35, 11\n(35) - (11) = 24, left: ((7 * (1 + 4)) - 11) = 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 7, 4\nroll back, left: 1 7 11 4\n(7) - (11) = -4, left: (7 - 11) = -4, 1, 4\nroll back, left: 1 7 11 4\n(4) / (1) = 4, left: (4 / 1) = 4, 7, 11\nroll back, left: 1 7 11 4\n(1) + (4) = 5, left: (1 + 4) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (1 + 4)) = 35, 11\n(35) - (11) = 24, left: ((7 * (1 + 4)) - 11) = 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "1 7 11 4\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 1, 4\nroll back, left: 1 7 11 4\n(11) + (4) = 15, left: (11 + 4) = 15, 1, 7\n(15) / (1) = 15, left: ((11 + 4) / 1) = 15, 7\nroll back, left: (11 + 4) = 15, 1, 7\nroll back, left: 1 7 11 4\n(1) + (4) = 5, left: (1 + 4) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (1 + 4)) = 35, 11\n(35) - (11) = 24, left: ((7 * (1 + 4)) - 11) = 24\nreach 24! expression: ((7 * (1 + 4)) - 11)"}, {"input": "5 11 4 3\n", "output": "(11) * (3) = 33, left: (11 * 3) = 33, 5, 4\n(33) - (5) = 28, left: ((11 * 3) - 5) = 28, 4\n(28) - (4) = 24, left: (((11 * 3) - 5) - 4) = 24\nreach 24! expression: (((11 * 3) - 5) - 4)"}, {"input": "5 11 4 3\n", "output": "(5) + (4) = 9, left: (5 + 4) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (5 + 4) = 9\n(33) - (9) = 24, left: ((11 * 3) - (5 + 4)) = 24\nreach 24! expression: ((11 * 3) - (5 + 4))"}, {"input": "5 11 4 3\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 5, 11\n(5) * (7) = 35, left: (5 * (4 + 3)) = 35, 11\n(35) - (11) = 24, left: ((5 * (4 + 3)) - 11) = 24\nreach 24! expression: ((5 * (4 + 3)) - 11)"}, {"input": "5 11 4 3\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (4 - 5) = -1\nroll back, left: (4 - 5) = -1, 11, 3\nroll back, left: 5 11 4 3\n(5) + (4) = 9, left: (5 + 4) = 9, 11, 3\n(3) / (9) = 1/3, left: (3 / (5 + 4)) = 1/3, 11\nroll back, left: (5 + 4) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (5 + 4) = 9\n(33) - (9) = 24, left: ((11 * 3) - (5 + 4)) = 24\nreach 24! expression: ((11 * 3) - (5 + 4))"}, {"input": "5 11 4 3\n", "output": "(11) + (3) = 14, left: (11 + 3) = 14, 5, 4\nroll back, left: 5 11 4 3\n(3) - (11) = -8, left: (3 - 11) = -8, 5, 4\nroll back, left: 5 11 4 3\n(11) / (3) = 11/3, left: (11 / 3) = 11/3, 5, 4\nroll back, left: 5 11 4 3\n(11) * (3) = 33, left: (11 * 3) = 33, 5, 4\n(33) - (5) = 28, left: ((11 * 3) - 5) = 28, 4\n(28) - (4) = 24, left: (((11 * 3) - 5) - 4) = 24\nreach 24! expression: (((11 * 3) - 5) - 4)"}, {"input": "5 11 4 3\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 11, 4\nroll back, left: 5 11 4 3\n(5) * (3) = 15, left: (5 * 3) = 15, 11, 4\nroll back, left: 5 11 4 3\n(11) - (3) = 8, left: (11 - 3) = 8, 5, 4\nroll back, left: 5 11 4 3\n(11) * (3) = 33, left: (11 * 3) = 33, 5, 4\n(33) - (5) = 28, left: ((11 * 3) - 5) = 28, 4\n(28) - (4) = 24, left: (((11 * 3) - 5) - 4) = 24\nreach 24! expression: (((11 * 3) - 5) - 4)"}, {"input": "2 13 11 2\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 11, 2\n(26) / (2) = 13, left: ((2 * 13) / 2) = 13, 11\n(11) + (13) = 24, left: (11 + ((2 * 13) / 2)) = 24\nreach 24! expression: (11 + ((2 * 13) / 2))"}, {"input": "2 13 11 2\n", "output": "(11) + (2) = 13, left: (11 + 2) = 13, 2, 13\n(13) - (2) = 11, left: ((11 + 2) - 2) = 11, 13\n(13) + (11) = 24, left: (13 + ((11 + 2) - 2)) = 24\nreach 24! expression: (13 + ((11 + 2) - 2))"}, {"input": "2 13 11 2\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 13, 11\n(0) - (11) = -11, left: ((2 - 2) - 11) = -11, 13\n(13) - (-11) = 24, left: (13 - ((2 - 2) - 11)) = 24\nreach 24! expression: (13 - ((2 - 2) - 11))"}, {"input": "2 13 11 2\n", "output": "(2) - (13) = -11, left: (2 - 13) = -11, 2, 11\n(11) - (-11) = 22, left: (11 - (2 - 13)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 - (2 - 13))) = 24\nreach 24! expression: (2 + (11 - (2 - 13)))"}, {"input": "2 13 11 2\n", "output": "(2) / (11) = 2/11, left: (2 / 11) = 2/11, 13, 2\n(2) / (2/11) = 11, left: (2 / (2 / 11)) = 11, 13\n(13) + (11) = 24, left: (13 + (2 / (2 / 11))) = 24\nreach 24! expression: (13 + (2 / (2 / 11)))"}, {"input": "10 3 8 1\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 3, 8\n(9) / (3) = 3, left: ((10 - 1) / 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 - 1) / 3)) = 24\nreach 24! expression: (8 * ((10 - 1) / 3))"}, {"input": "10 3 8 1\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 3, 8\n(3) / (9) = 1/3, left: (3 / (10 - 1)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 / (10 - 1))) = 24\nreach 24! expression: (8 / (3 / (10 - 1)))"}, {"input": "10 3 8 1\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 10, 1\n(10) - (1) = 9, left: (10 - 1) = 9, (8 / 3) = 8/3\n(8/3) * (9) = 24, left: ((8 / 3) * (10 - 1)) = 24\nreach 24! expression: ((8 / 3) * (10 - 1))"}, {"input": "10 3 8 1\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 10, 1\n(1) - (-5) = 6, left: (1 - (3 - 8)) = 6, 10\nroll back, left: (3 - 8) = -5, 10, 1\n(1) - (10) = -9, left: (1 - 10) = -9, (3 - 8) = -5\nroll back, left: (3 - 8) = -5, 10, 1\nroll back, left: 10 3 8 1\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 10, 1\n(10) - (1) = 9, left: (10 - 1) = 9, (8 / 3) = 8/3\n(8/3) * (9) = 24, left: ((8 / 3) * (10 - 1)) = 24\nreach 24! expression: ((8 / 3) * (10 - 1))"}, {"input": "10 3 8 1\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 3, 1\n(-2) / (3) = -2/3, left: ((8 - 10) / 3) = -2/3, 1\nroll back, left: (8 - 10) = -2, 3, 1\nroll back, left: 10 3 8 1\n(3) * (1) = 3, left: (3 * 1) = 3, 10, 8\nroll back, left: 10 3 8 1\n(10) - (1) = 9, left: (10 - 1) = 9, 3, 8\n(3) / (9) = 1/3, left: (3 / (10 - 1)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (3 / (10 - 1))) = 24\nreach 24! expression: (8 / (3 / (10 - 1)))"}, {"input": "10 3 8 1\n", "output": "(3) - (10) = -7, left: (3 - 10) = -7, 8, 1\n(8) / (1) = 8, left: (8 / 1) = 8, (3 - 10) = -7\nroll back, left: (3 - 10) = -7, 8, 1\nroll back, left: 10 3 8 1\n(3) + (8) = 11, left: (3 + 8) = 11, 10, 1\nroll back, left: 10 3 8 1\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 10, 1\n(10) - (1) = 9, left: (10 - 1) = 9, (8 / 3) = 8/3\n(8/3) * (9) = 24, left: ((8 / 3) * (10 - 1)) = 24\nreach 24! expression: ((8 / 3) * (10 - 1))"}, {"input": "10 3 8 1\n", "output": "(3) / (10) = 3/10, left: (3 / 10) = 3/10, 8, 1\nroll back, left: 10 3 8 1\n(1) - (8) = -7, left: (1 - 8) = -7, 10, 3\nroll back, left: 10 3 8 1\n(8) * (1) = 8, left: (8 * 1) = 8, 10, 3\nroll back, left: 10 3 8 1\n(10) - (1) = 9, left: (10 - 1) = 9, 3, 8\n(9) / (3) = 3, left: ((10 - 1) / 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 - 1) / 3)) = 24\nreach 24! expression: (8 * ((10 - 1) / 3))"}, {"input": "10 3 8 1\n", "output": "(10) * (8) = 80, left: (10 * 8) = 80, 3, 1\nroll back, left: 10 3 8 1\n(10) + (3) = 13, left: (10 + 3) = 13, 8, 1\nroll back, left: 10 3 8 1\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, 8, 1\nroll back, left: 10 3 8 1\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 10, 1\n(10) - (1) = 9, left: (10 - 1) = 9, (8 / 3) = 8/3\n(8/3) * (9) = 24, left: ((8 / 3) * (10 - 1)) = 24\nreach 24! expression: ((8 / 3) * (10 - 1))"}, {"input": "4 2 8 1\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 2, 8\n(5) - (2) = 3, left: ((4 + 1) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((4 + 1) - 2)) = 24\nreach 24! expression: (8 * ((4 + 1) - 2))"}, {"input": "4 2 8 1\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (2 / 1) = 2\n(2) * (12) = 24, left: ((2 / 1) * (4 + 8)) = 24\nreach 24! expression: ((2 / 1) * (4 + 8))"}, {"input": "4 2 8 1\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 8, 1\n(1) - (-2) = 3, left: (1 - (2 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (2 - 4))) = 24\nreach 24! expression: (8 * (1 - (2 - 4)))"}, {"input": "4 2 8 1\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 4, 1\n(4) / (1) = 4, left: (4 / 1) = 4, (8 - 2) = 6\n(6) * (4) = 24, left: ((8 - 2) * (4 / 1)) = 24\nreach 24! expression: ((8 - 2) * (4 / 1))"}, {"input": "4 2 8 1\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 2, 8\n(8) - (2) = 6, left: (8 - 2) = 6, (4 / 1) = 4\n(4) * (6) = 24, left: ((4 / 1) * (8 - 2)) = 24\nreach 24! expression: ((4 / 1) * (8 - 2))"}, {"input": "4 2 8 1\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 4, 8\n(8) / (4) = 2, left: (8 / 4) = 2, (2 / 1) = 2\n(2) / (2) = 1, left: ((2 / 1) / (8 / 4)) = 1\nroll back, left: (8 / 4) = 2, (2 / 1) = 2\n(2) / (2) = 1, left: ((8 / 4) / (2 / 1)) = 1\nroll back, left: (8 / 4) = 2, (2 / 1) = 2\nroll back, left: (2 / 1) = 2, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (2 / 1) = 2\n(2) * (12) = 24, left: ((2 / 1) * (4 + 8)) = 24\nreach 24! expression: ((2 / 1) * (4 + 8))"}, {"input": "4 2 8 1\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 8, 1\n(-2) / (1) = -2, left: ((2 - 4) / 1) = -2, 8\n(-2) / (8) = -1/4, left: (((2 - 4) / 1) / 8) = -1/4\nroll back, left: ((2 - 4) / 1) = -2, 8\nroll back, left: (2 - 4) = -2, 8, 1\n(1) * (-2) = -2, left: (1 * (2 - 4)) = -2, 8\nroll back, left: (2 - 4) = -2, 8, 1\n(1) - (-2) = 3, left: (1 - (2 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (2 - 4))) = 24\nreach 24! expression: (8 * (1 - (2 - 4)))"}, {"input": "4 2 8 1\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 4, 1\n(4) / (1) = 4, left: (4 / 1) = 4, (8 - 2) = 6\n(6) * (4) = 24, left: ((8 - 2) * (4 / 1)) = 24\nreach 24! expression: ((8 - 2) * (4 / 1))"}, {"input": "4 2 8 1\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 2, 8\n(2) * (5) = 10, left: (2 * (4 + 1)) = 10, 8\n(8) * (10) = 80, left: (8 * (2 * (4 + 1))) = 80\nroll back, left: (2 * (4 + 1)) = 10, 8\nroll back, left: (4 + 1) = 5, 2, 8\n(5) - (2) = 3, left: ((4 + 1) - 2) = 3, 8\n(8) - (3) = 5, left: (8 - ((4 + 1) - 2)) = 5\nroll back, left: ((4 + 1) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((4 + 1) - 2)) = 24\nreach 24! expression: (8 * ((4 + 1) - 2))"}, {"input": "4 2 8 1\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 2, 8\n(-3) - (8) = -11, left: ((1 - 4) - 8) = -11, 2\nroll back, left: (1 - 4) = -3, 2, 8\nroll back, left: 4 2 8 1\n(4) / (1) = 4, left: (4 / 1) = 4, 2, 8\n(4) / (2) = 2, left: ((4 / 1) / 2) = 2, 8\nroll back, left: (4 / 1) = 4, 2, 8\n(8) - (2) = 6, left: (8 - 2) = 6, (4 / 1) = 4\n(4) * (6) = 24, left: ((4 / 1) * (8 - 2)) = 24\nreach 24! expression: ((4 / 1) * (8 - 2))"}, {"input": "4 2 8 1\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 4, 1\n(4) / (1) = 4, left: (4 / 1) = 4, (8 - 2) = 6\n(6) * (4) = 24, left: ((8 - 2) * (4 / 1)) = 24\nreach 24! expression: ((8 - 2) * (4 / 1))"}, {"input": "4 2 8 1\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 4, 1\n(4) / (1) = 4, left: (4 / 1) = 4, (8 - 2) = 6\n(6) * (4) = 24, left: ((8 - 2) * (4 / 1)) = 24\nreach 24! expression: ((8 - 2) * (4 / 1))"}, {"input": "4 2 8 1\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 4, 1\n(4) / (1) = 4, left: (4 / 1) = 4, (8 - 2) = 6\n(6) * (4) = 24, left: ((8 - 2) * (4 / 1)) = 24\nreach 24! expression: ((8 - 2) * (4 / 1))"}, {"input": "7 8 5 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 5, 8\n(5) / (15) = 1/3, left: (5 / (7 + 8)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (5 / (7 + 8))) = 24\nreach 24! expression: (8 / (5 / (7 + 8)))"}, {"input": "7 8 5 8\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (5 - 7)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (5 - 7))) = 24\nreach 24! expression: (8 - (8 * (5 - 7)))"}, {"input": "7 8 5 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 5, 8\n(15) / (5) = 3, left: ((7 + 8) / 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 8) / 5)) = 24\nreach 24! expression: (8 * ((7 + 8) / 5))"}, {"input": "7 8 5 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 8, 5\n(8) * (15) = 120, left: (8 * (7 + 8)) = 120, 5\n(120) / (5) = 24, left: ((8 * (7 + 8)) / 5) = 24\nreach 24! expression: ((8 * (7 + 8)) / 5)"}, {"input": "7 8 5 8\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 5, 8\nroll back, left: 7 8 5 8\n(7) - (8) = -1, left: (7 - 8) = -1, 5, 8\n(-1) / (5) = -1/5, left: ((7 - 8) / 5) = -1/5, 8\nroll back, left: (7 - 8) = -1, 5, 8\nroll back, left: 7 8 5 8\n(7) + (8) = 15, left: (7 + 8) = 15, 5, 8\n(15) / (5) = 3, left: ((7 + 8) / 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 8) / 5)) = 24\nreach 24! expression: (8 * ((7 + 8) / 5))"}, {"input": "7 8 5 8\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 8, 5\nroll back, left: 7 8 5 8\n(8) / (7) = 8/7, left: (8 / 7) = 8/7, 8, 5\nroll back, left: 7 8 5 8\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, 8, 5\nroll back, left: 7 8 5 8\n(7) + (8) = 15, left: (7 + 8) = 15, 8, 5\n(8) * (15) = 120, left: (8 * (7 + 8)) = 120, 5\n(120) / (5) = 24, left: ((8 * (7 + 8)) / 5) = 24\nreach 24! expression: ((8 * (7 + 8)) / 5)"}, {"input": "7 8 5 8\n", "output": "(7) * (8) = 56, left: (7 * 8) = 56, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (7 * 8) = 56\nroll back, left: (7 * 8) = 56, 5, 8\n(5) + (8) = 13, left: (5 + 8) = 13, (7 * 8) = 56\nroll back, left: (7 * 8) = 56, 5, 8\nroll back, left: 7 8 5 8\n(7) + (8) = 15, left: (7 + 8) = 15, 5, 8\n(5) / (15) = 1/3, left: (5 / (7 + 8)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (5 / (7 + 8))) = 24\nreach 24! expression: (8 / (5 / (7 + 8)))"}, {"input": "7 8 5 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 7, 5\n(7) * (5) = 35, left: (7 * 5) = 35, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 7, 5\nroll back, left: 7 8 5 8\n(8) - (8) = 0, left: (8 - 8) = 0, 7, 5\nroll back, left: 7 8 5 8\n(5) - (7) = -2, left: (5 - 7) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (5 - 7)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (5 - 7))) = 24\nreach 24! expression: (8 - (8 * (5 - 7)))"}, {"input": "7 8 5 8\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 5, 8\n(8) - (7/8) = 57/8, left: (8 - (7 / 8)) = 57/8, 5\nroll back, left: (7 / 8) = 7/8, 5, 8\nroll back, left: 7 8 5 8\n(7) - (8) = -1, left: (7 - 8) = -1, 5, 8\nroll back, left: 7 8 5 8\n(7) + (8) = 15, left: (7 + 8) = 15, 5, 8\n(15) / (5) = 3, left: ((7 + 8) / 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 8) / 5)) = 24\nreach 24! expression: (8 * ((7 + 8) / 5))"}, {"input": "8 4 2 4\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (4 * 2) = 8\n(32) - (8) = 24, left: ((8 * 4) - (4 * 2)) = 24\nreach 24! expression: ((8 * 4) - (4 * 2))"}, {"input": "8 4 2 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 2, 4\n(2) - (-4) = 6, left: (2 - (4 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 - (4 - 8))) = 24\nreach 24! expression: (4 * (2 - (4 - 8)))"}, {"input": "8 4 2 4\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 2, 4\n(2) + (4) = 6, left: (2 + 4) = 6, (8 - 4) = 4\n(4) * (6) = 24, left: ((8 - 4) * (2 + 4)) = 24\nreach 24! expression: ((8 - 4) * (2 + 4))"}, {"input": "8 4 2 4\n", "output": "(8) + (4) = 12, left: (8 + 4) = 12, 4, 2\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, (8 + 4) = 12\n(12) / (1/2) = 24, left: ((8 + 4) / (2 / 4)) = 24\nreach 24! expression: ((8 + 4) / (2 / 4))"}, {"input": "8 4 2 4\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 4, 4\n(4) + (16) = 20, left: (4 + (8 * 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 + (8 * 2))) = 24\nreach 24! expression: (4 + (4 + (8 * 2)))"}, {"input": "8 4 2 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 2, 4\n(2) / (-4) = -1/2, left: (2 / (4 - 8)) = -1/2, 4\n(-1/2) / (4) = -1/8, left: ((2 / (4 - 8)) / 4) = -1/8\nroll back, left: (2 / (4 - 8)) = -1/2, 4\nroll back, left: (4 - 8) = -4, 2, 4\n(-4) / (2) = -2, left: ((4 - 8) / 2) = -2, 4\nroll back, left: (4 - 8) = -4, 2, 4\n(2) - (-4) = 6, left: (2 - (4 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 - (4 - 8))) = 24\nreach 24! expression: (4 * (2 - (4 - 8)))"}, {"input": "8 4 2 4\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 8, 4\n(8) - (4) = 4, left: (8 - 4) = 4, (4 * 2) = 8\nroll back, left: (4 * 2) = 8, 8, 4\n(4) - (8) = -4, left: (4 - 8) = -4, (4 * 2) = 8\n(8) + (-4) = 4, left: ((4 * 2) + (4 - 8)) = 4\nroll back, left: (4 - 8) = -4, (4 * 2) = 8\nroll back, left: (4 * 2) = 8, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (4 * 2) = 8\n(32) - (8) = 24, left: ((8 * 4) - (4 * 2)) = 24\nreach 24! expression: ((8 * 4) - (4 * 2))"}, {"input": "8 4 2 4\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 4, 4\n(4) / (-6) = -2/3, left: (4 / (2 - 8)) = -2/3, 4\nroll back, left: (2 - 8) = -6, 4, 4\nroll back, left: 8 4 2 4\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 4, 4\nroll back, left: 8 4 2 4\n(8) * (2) = 16, left: (8 * 2) = 16, 4, 4\n(4) + (16) = 20, left: (4 + (8 * 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 + (8 * 2))) = 24\nreach 24! expression: (4 + (4 + (8 * 2)))"}, {"input": "8 4 2 4\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 2, 4\n(4) / (2) = 2, left: (4 / 2) = 2, (8 - 4) = 4\nroll back, left: (8 - 4) = 4, 2, 4\n(4) - (2) = 2, left: (4 - 2) = 2, (8 - 4) = 4\nroll back, left: (8 - 4) = 4, 2, 4\n(2) - (4) = -2, left: (2 - 4) = -2, (8 - 4) = 4\nroll back, left: (8 - 4) = 4, 2, 4\n(2) + (4) = 6, left: (2 + 4) = 6, (8 - 4) = 4\n(4) * (6) = 24, left: ((8 - 4) * (2 + 4)) = 24\nreach 24! expression: ((8 - 4) * (2 + 4))"}, {"input": "13 3 3 4\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (13 - 4)) = 27, 3\n(27) - (3) = 24, left: ((3 * (13 - 4)) - 3) = 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 13, 3\nroll back, left: 13 3 3 4\n(13) * (4) = 52, left: (13 * 4) = 52, 3, 3\nroll back, left: 13 3 3 4\n(13) + (4) = 17, left: (13 + 4) = 17, 3, 3\nroll back, left: 13 3 3 4\n(13) - (4) = 9, left: (13 - 4) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (13 - 4)) = 27, 3\n(27) - (3) = 24, left: ((3 * (13 - 4)) - 3) = 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 13, 3\nroll back, left: 13 3 3 4\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, 13, 3\nroll back, left: 13 3 3 4\n(4) - (13) = -9, left: (4 - 13) = -9, 3, 3\nroll back, left: 13 3 3 4\n(13) - (4) = 9, left: (13 - 4) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (13 - 4)) = 27, 3\n(27) - (3) = 24, left: ((3 * (13 - 4)) - 3) = 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(13) + (3) = 16, left: (13 + 3) = 16, 3, 4\nroll back, left: 13 3 3 4\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, 3, 4\n(3/13) / (3) = 1/13, left: ((3 / 13) / 3) = 1/13, 4\nroll back, left: (3 / 13) = 3/13, 3, 4\nroll back, left: 13 3 3 4\n(13) - (4) = 9, left: (13 - 4) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (13 - 4)) = 27, 3\n(27) - (3) = 24, left: ((3 * (13 - 4)) - 3) = 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 3, 4\n(3) / (-10) = -3/10, left: (3 / (3 - 13)) = -3/10, 4\nroll back, left: (3 - 13) = -10, 3, 4\nroll back, left: 13 3 3 4\n(3) - (3) = 0, left: (3 - 3) = 0, 13, 4\nroll back, left: 13 3 3 4\n(13) - (4) = 9, left: (13 - 4) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (13 - 4)) = 27, 3\n(27) - (3) = 24, left: ((3 * (13 - 4)) - 3) = 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "13 3 3 4\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 13, 4\nroll back, left: 13 3 3 4\n(3) - (4) = -1, left: (3 - 4) = -1, 13, 3\nroll back, left: 13 3 3 4\n(3) + (4) = 7, left: (3 + 4) = 7, 13, 3\nroll back, left: 13 3 3 4\n(13) - (4) = 9, left: (13 - 4) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (13 - 4)) = 27, 3\n(27) - (3) = 24, left: ((3 * (13 - 4)) - 3) = 24\nreach 24! expression: ((3 * (13 - 4)) - 3)"}, {"input": "7 3 9 13\n", "output": "(7) * (9) = 63, left: (7 * 9) = 63, 3, 13\n(3) * (13) = 39, left: (3 * 13) = 39, (7 * 9) = 63\n(63) - (39) = 24, left: ((7 * 9) - (3 * 13)) = 24\nreach 24! expression: ((7 * 9) - (3 * 13))"}, {"input": "7 3 9 13\n", "output": "(13) / (3) = 13/3, left: (13 / 3) = 13/3, 7, 9\n(7) - (13/3) = 8/3, left: (7 - (13 / 3)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (7 - (13 / 3))) = 24\nreach 24! expression: (9 * (7 - (13 / 3)))"}, {"input": "7 3 9 13\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 9, 13\nroll back, left: 7 3 9 13\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (3 / 7) = 3/7\nroll back, left: (3 / 7) = 3/7, 9, 13\nroll back, left: 7 3 9 13\n(13) / (3) = 13/3, left: (13 / 3) = 13/3, 7, 9\n(7) - (13/3) = 8/3, left: (7 - (13 / 3)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (7 - (13 / 3))) = 24\nreach 24! expression: (9 * (7 - (13 / 3)))"}, {"input": "7 3 9 13\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 9, 13\n(9) + (3/7) = 66/7, left: (9 + (3 / 7)) = 66/7, 13\nroll back, left: (3 / 7) = 3/7, 9, 13\nroll back, left: 7 3 9 13\n(9) / (3) = 3, left: (9 / 3) = 3, 7, 13\nroll back, left: 7 3 9 13\n(13) / (3) = 13/3, left: (13 / 3) = 13/3, 7, 9\n(7) - (13/3) = 8/3, left: (7 - (13 / 3)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (7 - (13 / 3))) = 24\nreach 24! expression: (9 * (7 - (13 / 3)))"}, {"input": "7 3 9 13\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 3, 13\n(13) - (16) = -3, left: (13 - (7 + 9)) = -3, 3\n(3) * (-3) = -9, left: (3 * (13 - (7 + 9))) = -9\nroll back, left: (13 - (7 + 9)) = -3, 3\nroll back, left: (7 + 9) = 16, 3, 13\nroll back, left: 7 3 9 13\n(7) * (9) = 63, left: (7 * 9) = 63, 3, 13\n(3) * (13) = 39, left: (3 * 13) = 39, (7 * 9) = 63\n(63) - (39) = 24, left: ((7 * 9) - (3 * 13)) = 24\nreach 24! expression: ((7 * 9) - (3 * 13))"}, {"input": "7 3 9 13\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 9, 13\nroll back, left: 7 3 9 13\n(3) - (7) = -4, left: (3 - 7) = -4, 9, 13\nroll back, left: 7 3 9 13\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, 9, 13\nroll back, left: 7 3 9 13\n(7) * (9) = 63, left: (7 * 9) = 63, 3, 13\n(3) * (13) = 39, left: (3 * 13) = 39, (7 * 9) = 63\n(63) - (39) = 24, left: ((7 * 9) - (3 * 13)) = 24\nreach 24! expression: ((7 * 9) - (3 * 13))"}, {"input": "11 5 11 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 11, 11\n(11) / (11) = 1, left: (11 / 11) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (11 / 11)) = 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "11 5 11 5\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (11 / 11) = 1\n(25) - (1) = 24, left: ((5 * 5) - (11 / 11)) = 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "11 5 11 5\n", "output": "(11) * (5) = 55, left: (11 * 5) = 55, 5, 11\nroll back, left: 11 5 11 5\n(11) - (5) = 6, left: (11 - 5) = 6, 11, 5\n(5) + (6) = 11, left: (5 + (11 - 5)) = 11, 11\nroll back, left: (11 - 5) = 6, 11, 5\nroll back, left: 11 5 11 5\n(5) * (5) = 25, left: (5 * 5) = 25, 11, 11\n(11) / (11) = 1, left: (11 / 11) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (11 / 11)) = 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "11 5 11 5\n", "output": "(11) / (5) = 11/5, left: (11 / 5) = 11/5, 11, 5\nroll back, left: 11 5 11 5\n(5) - (5) = 0, left: (5 - 5) = 0, 11, 11\n(11) - (11) = 0, left: (11 - 11) = 0, (5 - 5) = 0\nroll back, left: (5 - 5) = 0, 11, 11\nroll back, left: 11 5 11 5\n(5) * (5) = 25, left: (5 * 5) = 25, 11, 11\n(11) / (11) = 1, left: (11 / 11) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (11 / 11)) = 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "11 5 11 5\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 11, 5\nroll back, left: 11 5 11 5\n(11) - (5) = 6, left: (11 - 5) = 6, 11, 5\nroll back, left: 11 5 11 5\n(5) + (5) = 10, left: (5 + 5) = 10, 11, 11\nroll back, left: 11 5 11 5\n(5) * (5) = 25, left: (5 * 5) = 25, 11, 11\n(11) / (11) = 1, left: (11 / 11) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (11 / 11)) = 24\nreach 24! expression: ((5 * 5) - (11 / 11))"}, {"input": "4 2 13 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (4 / 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (4 / 4))) = 24\nreach 24! expression: (2 * (13 - (4 / 4)))"}, {"input": "4 2 13 4\n", "output": "(13) * (4) = 52, left: (13 * 4) = 52, 4, 2\n(52) - (4) = 48, left: ((13 * 4) - 4) = 48, 2\n(48) / (2) = 24, left: (((13 * 4) - 4) / 2) = 24\nreach 24! expression: (((13 * 4) - 4) / 2)"}, {"input": "4 2 13 4\n", "output": "(4) * (13) = 52, left: (4 * 13) = 52, 2, 4\n(52) - (4) = 48, left: ((4 * 13) - 4) = 48, 2\n(48) / (2) = 24, left: (((4 * 13) - 4) / 2) = 24\nreach 24! expression: (((4 * 13) - 4) / 2)"}, {"input": "4 2 13 4\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (4 - 4) = 0\nroll back, left: (4 - 4) = 0, 2, 13\nroll back, left: 4 2 13 4\n(4) / (4) = 1, left: (4 / 4) = 1, 2, 13\n(2) / (1) = 2, left: (2 / (4 / 4)) = 2, 13\nroll back, left: (4 / 4) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (4 / 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (4 / 4))) = 24\nreach 24! expression: (2 * (13 - (4 / 4)))"}, {"input": "4 2 13 4\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 2, 13\n(2) + (13) = 15, left: (2 + 13) = 15, (4 - 4) = 0\nroll back, left: (4 - 4) = 0, 2, 13\nroll back, left: 4 2 13 4\n(4) * (4) = 16, left: (4 * 4) = 16, 2, 13\nroll back, left: 4 2 13 4\n(4) / (4) = 1, left: (4 / 4) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (4 / 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (4 / 4))) = 24\nreach 24! expression: (2 * (13 - (4 / 4)))"}, {"input": "4 2 13 4\n", "output": "(13) / (4) = 13/4, left: (13 / 4) = 13/4, 2, 4\n(4) - (13/4) = 3/4, left: (4 - (13 / 4)) = 3/4, 2\nroll back, left: (13 / 4) = 13/4, 2, 4\nroll back, left: 4 2 13 4\n(4) / (13) = 4/13, left: (4 / 13) = 4/13, 2, 4\nroll back, left: 4 2 13 4\n(4) * (13) = 52, left: (4 * 13) = 52, 2, 4\n(52) - (4) = 48, left: ((4 * 13) - 4) = 48, 2\n(48) / (2) = 24, left: (((4 * 13) - 4) / 2) = 24\nreach 24! expression: (((4 * 13) - 4) / 2)"}, {"input": "4 2 13 4\n", "output": "(13) / (4) = 13/4, left: (13 / 4) = 13/4, 4, 2\nroll back, left: 4 2 13 4\n(13) - (4) = 9, left: (13 - 4) = 9, 4, 2\n(9) - (4) = 5, left: ((13 - 4) - 4) = 5, 2\nroll back, left: (13 - 4) = 9, 4, 2\nroll back, left: 4 2 13 4\n(13) * (4) = 52, left: (13 * 4) = 52, 4, 2\n(52) - (4) = 48, left: ((13 * 4) - 4) = 48, 2\n(48) / (2) = 24, left: (((13 * 4) - 4) / 2) = 24\nreach 24! expression: (((13 * 4) - 4) / 2)"}, {"input": "5 10 1 5\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (10 - 5)) = 25, 1\n(25) - (1) = 24, left: ((5 * (10 - 5)) - 1) = 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (10 - 5)) = 25, 1\n(25) - (1) = 24, left: ((5 * (10 - 5)) - 1) = 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 10, 1\nroll back, left: 5 10 1 5\n(10) - (1) = 9, left: (10 - 1) = 9, 5, 5\nroll back, left: 5 10 1 5\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, 10, 5\nroll back, left: 5 10 1 5\n(10) - (5) = 5, left: (10 - 5) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (10 - 5)) = 25, 1\n(25) - (1) = 24, left: ((5 * (10 - 5)) - 1) = 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 10, 1\n(1) / (1) = 1, left: (1 / (5 / 5)) = 1, 10\nroll back, left: (5 / 5) = 1, 10, 1\nroll back, left: 5 10 1 5\n(5) * (1) = 5, left: (5 * 1) = 5, 10, 5\nroll back, left: 5 10 1 5\n(10) - (5) = 5, left: (10 - 5) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (10 - 5)) = 25, 1\n(25) - (1) = 24, left: ((5 * (10 - 5)) - 1) = 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(10) * (5) = 50, left: (10 * 5) = 50, 5, 1\nroll back, left: 5 10 1 5\n(10) / (5) = 2, left: (10 / 5) = 2, 5, 1\n(5) * (1) = 5, left: (5 * 1) = 5, (10 / 5) = 2\nroll back, left: (10 / 5) = 2, 5, 1\nroll back, left: 5 10 1 5\n(10) - (5) = 5, left: (10 - 5) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (10 - 5)) = 25, 1\n(25) - (1) = 24, left: ((5 * (10 - 5)) - 1) = 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(10) + (5) = 15, left: (10 + 5) = 15, 5, 1\n(15) / (5) = 3, left: ((10 + 5) / 5) = 3, 1\nroll back, left: (10 + 5) = 15, 5, 1\nroll back, left: 5 10 1 5\n(10) - (5) = 5, left: (10 - 5) = 5, 5, 1\n(1) - (5) = -4, left: (1 - 5) = -4, (10 - 5) = 5\nroll back, left: (10 - 5) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (10 - 5)) = 25, 1\n(25) - (1) = 24, left: ((5 * (10 - 5)) - 1) = 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "5 10 1 5\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 5, 5\nroll back, left: 5 10 1 5\n(5) / (1) = 5, left: (5 / 1) = 5, 5, 10\n(5) - (10) = -5, left: ((5 / 1) - 10) = -5, 5\nroll back, left: (5 / 1) = 5, 5, 10\nroll back, left: 5 10 1 5\n(10) - (5) = 5, left: (10 - 5) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (10 - 5)) = 25, 1\n(25) - (1) = 24, left: ((5 * (10 - 5)) - 1) = 24\nreach 24! expression: ((5 * (10 - 5)) - 1)"}, {"input": "9 7 12 6\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (12 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (12 - 7))) = 24\nreach 24! expression: (6 * (9 - (12 - 7)))"}, {"input": "9 7 12 6\n", "output": "(9) + (7) = 16, left: (9 + 7) = 16, 12, 6\n(16) - (12) = 4, left: ((9 + 7) - 12) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 + 7) - 12)) = 24\nreach 24! expression: (6 * ((9 + 7) - 12))"}, {"input": "9 7 12 6\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (12 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (12 - 9))) = 24\nreach 24! expression: (6 * (7 - (12 - 9)))"}, {"input": "9 7 12 6\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (7 - 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (7 - 9))) = 24\nreach 24! expression: (12 - (6 * (7 - 9)))"}, {"input": "9 7 12 6\n", "output": "(7) * (6) = 42, left: (7 * 6) = 42, 9, 12\n(9) - (42) = -33, left: (9 - (7 * 6)) = -33, 12\nroll back, left: (7 * 6) = 42, 9, 12\nroll back, left: 9 7 12 6\n(7) + (6) = 13, left: (7 + 6) = 13, 9, 12\nroll back, left: 9 7 12 6\n(9) + (7) = 16, left: (9 + 7) = 16, 12, 6\n(16) - (12) = 4, left: ((9 + 7) - 12) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 + 7) - 12)) = 24\nreach 24! expression: (6 * ((9 + 7) - 12))"}, {"input": "9 7 12 6\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 12, 6\n(12) - (6) = 6, left: (12 - 6) = 6, (7 - 9) = -2\nroll back, left: (7 - 9) = -2, 12, 6\n(-2) - (12) = -14, left: ((7 - 9) - 12) = -14, 6\nroll back, left: (7 - 9) = -2, 12, 6\n(12) / (-2) = -6, left: (12 / (7 - 9)) = -6, 6\nroll back, left: (7 - 9) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (7 - 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (7 - 9))) = 24\nreach 24! expression: (12 - (6 * (7 - 9)))"}, {"input": "9 7 12 6\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 7, 6\n(7) + (6) = 13, left: (7 + 6) = 13, (9 + 12) = 21\nroll back, left: (9 + 12) = 21, 7, 6\n(7) / (6) = 7/6, left: (7 / 6) = 7/6, (9 + 12) = 21\nroll back, left: (9 + 12) = 21, 7, 6\nroll back, left: 9 7 12 6\n(12) - (9) = 3, left: (12 - 9) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (12 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (12 - 9))) = 24\nreach 24! expression: (6 * (7 - (12 - 9)))"}, {"input": "9 7 12 6\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 7, 6\n(21) / (6) = 7/2, left: ((9 + 12) / 6) = 7/2, 7\nroll back, left: (9 + 12) = 21, 7, 6\n(21) - (6) = 15, left: ((9 + 12) - 6) = 15, 7\nroll back, left: (9 + 12) = 21, 7, 6\nroll back, left: 9 7 12 6\n(12) - (9) = 3, left: (12 - 9) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (12 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (12 - 9))) = 24\nreach 24! expression: (6 * (7 - (12 - 9)))"}, {"input": "9 7 12 6\n", "output": "(6) / (7) = 6/7, left: (6 / 7) = 6/7, 9, 12\n(6/7) - (12) = -78/7, left: ((6 / 7) - 12) = -78/7, 9\nroll back, left: (6 / 7) = 6/7, 9, 12\nroll back, left: 9 7 12 6\n(12) - (7) = 5, left: (12 - 7) = 5, 9, 6\n(9) + (6) = 15, left: (9 + 6) = 15, (12 - 7) = 5\nroll back, left: (12 - 7) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (12 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (12 - 7))) = 24\nreach 24! expression: (6 * (9 - (12 - 7)))"}, {"input": "12 11 6 5\n", "output": "(11) + (6) = 17, left: (11 + 6) = 17, 12, 5\n(12) - (5) = 7, left: (12 - 5) = 7, (11 + 6) = 17\n(17) + (7) = 24, left: ((11 + 6) + (12 - 5)) = 24\nreach 24! expression: ((11 + 6) + (12 - 5))"}, {"input": "12 11 6 5\n", "output": "(11) + (6) = 17, left: (11 + 6) = 17, 12, 5\n(12) + (17) = 29, left: (12 + (11 + 6)) = 29, 5\n(29) - (5) = 24, left: ((12 + (11 + 6)) - 5) = 24\nreach 24! expression: ((12 + (11 + 6)) - 5)"}, {"input": "12 11 6 5\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 11, 6\n(6) + (7) = 13, left: (6 + (12 - 5)) = 13, 11\n(11) + (13) = 24, left: (11 + (6 + (12 - 5))) = 24\nreach 24! expression: (11 + (6 + (12 - 5)))"}, {"input": "12 11 6 5\n", "output": "(12) + (6) = 18, left: (12 + 6) = 18, 11, 5\n(11) + (18) = 29, left: (11 + (12 + 6)) = 29, 5\n(29) - (5) = 24, left: ((11 + (12 + 6)) - 5) = 24\nreach 24! expression: ((11 + (12 + 6)) - 5)"}, {"input": "12 11 6 5\n", "output": "(11) - (12) = -1, left: (11 - 12) = -1, 6, 5\n(5) + (-1) = 4, left: (5 + (11 - 12)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (11 - 12))) = 24\nreach 24! expression: (6 * (5 + (11 - 12)))"}, {"input": "12 11 6 5\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 11, 6\n(6) * (7) = 42, left: (6 * (12 - 5)) = 42, 11\nroll back, left: (12 - 5) = 7, 11, 6\n(6) - (7) = -1, left: (6 - (12 - 5)) = -1, 11\n(11) + (-1) = 10, left: (11 + (6 - (12 - 5))) = 10\nroll back, left: (6 - (12 - 5)) = -1, 11\nroll back, left: (12 - 5) = 7, 11, 6\n(6) + (7) = 13, left: (6 + (12 - 5)) = 13, 11\n(11) + (13) = 24, left: (11 + (6 + (12 - 5))) = 24\nreach 24! expression: (11 + (6 + (12 - 5)))"}, {"input": "13 9 7 2\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 9, 7\n(7) + (26) = 33, left: (7 + (13 * 2)) = 33, 9\n(33) - (9) = 24, left: ((7 + (13 * 2)) - 9) = 24\nreach 24! expression: ((7 + (13 * 2)) - 9)"}, {"input": "13 9 7 2\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (7 - 13) = -6\n(18) - (-6) = 24, left: ((9 * 2) - (7 - 13)) = 24\nreach 24! expression: ((9 * 2) - (7 - 13))"}, {"input": "13 9 7 2\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 9, 7\n(7) - (9) = -2, left: (7 - 9) = -2, (13 * 2) = 26\n(26) + (-2) = 24, left: ((13 * 2) + (7 - 9)) = 24\nreach 24! expression: ((13 * 2) + (7 - 9))"}, {"input": "13 9 7 2\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 13, 2\n(13) * (2) = 26, left: (13 * (9 - 7)) = 26, 2\n(26) - (2) = 24, left: ((13 * (9 - 7)) - 2) = 24\nreach 24! expression: ((13 * (9 - 7)) - 2)"}, {"input": "13 9 7 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 13, 7\n(13) + (18) = 31, left: (13 + (9 * 2)) = 31, 7\n(31) - (7) = 24, left: ((13 + (9 * 2)) - 7) = 24\nreach 24! expression: ((13 + (9 * 2)) - 7)"}, {"input": "13 9 7 2\n", "output": "(13) / (2) = 13/2, left: (13 / 2) = 13/2, 9, 7\nroll back, left: 13 9 7 2\n(2) - (13) = -11, left: (2 - 13) = -11, 9, 7\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, (2 - 13) = -11\nroll back, left: (2 - 13) = -11, 9, 7\nroll back, left: 13 9 7 2\n(13) * (2) = 26, left: (13 * 2) = 26, 9, 7\n(7) - (9) = -2, left: (7 - 9) = -2, (13 * 2) = 26\n(26) + (-2) = 24, left: ((13 * 2) + (7 - 9)) = 24\nreach 24! expression: ((13 * 2) + (7 - 9))"}, {"input": "13 9 7 2\n", "output": "(7) + (2) = 9, left: (7 + 2) = 9, 13, 9\n(9) - (13) = -4, left: ((7 + 2) - 13) = -4, 9\nroll back, left: (7 + 2) = 9, 13, 9\nroll back, left: 13 9 7 2\n(2) - (13) = -11, left: (2 - 13) = -11, 9, 7\nroll back, left: 13 9 7 2\n(13) * (2) = 26, left: (13 * 2) = 26, 9, 7\n(7) + (26) = 33, left: (7 + (13 * 2)) = 33, 9\n(33) - (9) = 24, left: ((7 + (13 * 2)) - 9) = 24\nreach 24! expression: ((7 + (13 * 2)) - 9)"}, {"input": "13 9 7 2\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 13, 7\n(13) * (7) = 91, left: (13 * (9 - 2)) = 91, 7\nroll back, left: (9 - 2) = 7, 13, 7\nroll back, left: 13 9 7 2\n(2) - (9) = -7, left: (2 - 9) = -7, 13, 7\nroll back, left: 13 9 7 2\n(9) * (2) = 18, left: (9 * 2) = 18, 13, 7\n(13) + (18) = 31, left: (13 + (9 * 2)) = 31, 7\n(31) - (7) = 24, left: ((13 + (9 * 2)) - 7) = 24\nreach 24! expression: ((13 + (9 * 2)) - 7)"}, {"input": "13 9 7 2\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 9, 2\n(9) + (-6) = 3, left: (9 + (7 - 13)) = 3, 2\nroll back, left: (7 - 13) = -6, 9, 2\n(9) / (-6) = -3/2, left: (9 / (7 - 13)) = -3/2, 2\n(2) * (-3/2) = -3, left: (2 * (9 / (7 - 13))) = -3\nroll back, left: (9 / (7 - 13)) = -3/2, 2\nroll back, left: (7 - 13) = -6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (7 - 13) = -6\n(18) - (-6) = 24, left: ((9 * 2) - (7 - 13)) = 24\nreach 24! expression: ((9 * 2) - (7 - 13))"}, {"input": "13 9 7 2\n", "output": "(7) / (9) = 7/9, left: (7 / 9) = 7/9, 13, 2\n(13) * (7/9) = 91/9, left: (13 * (7 / 9)) = 91/9, 2\nroll back, left: (7 / 9) = 7/9, 13, 2\nroll back, left: 13 9 7 2\n(9) + (7) = 16, left: (9 + 7) = 16, 13, 2\nroll back, left: 13 9 7 2\n(9) - (7) = 2, left: (9 - 7) = 2, 13, 2\n(13) * (2) = 26, left: (13 * (9 - 7)) = 26, 2\n(26) - (2) = 24, left: ((13 * (9 - 7)) - 2) = 24\nreach 24! expression: ((13 * (9 - 7)) - 2)"}, {"input": "7 2 1 1\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 7, 1\n(7) + (1) = 8, left: (7 + 1) = 8, (2 + 1) = 3\n(3) * (8) = 24, left: ((2 + 1) * (7 + 1)) = 24\nreach 24! expression: ((2 + 1) * (7 + 1))"}, {"input": "7 2 1 1\n", "output": "(7) + (1) = 8, left: (7 + 1) = 8, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (7 + 1) = 8\n(8) * (3) = 24, left: ((7 + 1) * (2 + 1)) = 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 1, 1\nroll back, left: 7 2 1 1\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, 1, 1\n(1) + (7/2) = 9/2, left: (1 + (7 / 2)) = 9/2, 1\nroll back, left: (7 / 2) = 7/2, 1, 1\nroll back, left: 7 2 1 1\n(2) + (1) = 3, left: (2 + 1) = 3, 7, 1\n(7) + (1) = 8, left: (7 + 1) = 8, (2 + 1) = 3\n(3) * (8) = 24, left: ((2 + 1) * (7 + 1)) = 24\nreach 24! expression: ((2 + 1) * (7 + 1))"}, {"input": "7 2 1 1\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 2, 1\n(1/7) - (2) = -13/7, left: ((1 / 7) - 2) = -13/7, 1\n(1) / (-13/7) = -7/13, left: (1 / ((1 / 7) - 2)) = -7/13\nroll back, left: ((1 / 7) - 2) = -13/7, 1\nroll back, left: (1 / 7) = 1/7, 2, 1\nroll back, left: 7 2 1 1\n(7) + (1) = 8, left: (7 + 1) = 8, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (7 + 1) = 8\n(8) * (3) = 24, left: ((7 + 1) * (2 + 1)) = 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(7) + (1) = 8, left: (7 + 1) = 8, 2, 1\n(2) * (8) = 16, left: (2 * (7 + 1)) = 16, 1\nroll back, left: (7 + 1) = 8, 2, 1\n(8) - (2) = 6, left: ((7 + 1) - 2) = 6, 1\nroll back, left: (7 + 1) = 8, 2, 1\n(2) * (1) = 2, left: (2 * 1) = 2, (7 + 1) = 8\nroll back, left: (7 + 1) = 8, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (7 + 1) = 8\n(8) * (3) = 24, left: ((7 + 1) * (2 + 1)) = 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 2, 1\n(2) * (1/7) = 2/7, left: (2 * (1 / 7)) = 2/7, 1\nroll back, left: (1 / 7) = 1/7, 2, 1\n(1) - (1/7) = 6/7, left: (1 - (1 / 7)) = 6/7, 2\nroll back, left: (1 / 7) = 1/7, 2, 1\nroll back, left: 7 2 1 1\n(7) + (1) = 8, left: (7 + 1) = 8, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (7 + 1) = 8\n(8) * (3) = 24, left: ((7 + 1) * (2 + 1)) = 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "7 2 1 1\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 2, 1\n(7) / (1) = 7, left: ((7 / 1) / 1) = 7, 2\nroll back, left: (7 / 1) = 7, 2, 1\nroll back, left: 7 2 1 1\n(7) * (1) = 7, left: (7 * 1) = 7, 2, 1\nroll back, left: 7 2 1 1\n(7) + (1) = 8, left: (7 + 1) = 8, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (7 + 1) = 8\n(8) * (3) = 24, left: ((7 + 1) * (2 + 1)) = 24\nreach 24! expression: ((7 + 1) * (2 + 1))"}, {"input": "12 4 12 12\n", "output": "(12) * (12) = 144, left: (12 * 12) = 144, 12, 4\n(144) / (4) = 36, left: ((12 * 12) / 4) = 36, 12\n(36) - (12) = 24, left: (((12 * 12) / 4) - 12) = 24\nreach 24! expression: (((12 * 12) / 4) - 12)"}, {"input": "12 4 12 12\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (12 / 4)) = 36, 12\n(36) - (12) = 24, left: ((12 * (12 / 4)) - 12) = 24\nreach 24! expression: ((12 * (12 / 4)) - 12)"}, {"input": "12 4 12 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 4, 12\n(4) * (12) = 48, left: (4 * 12) = 48, (12 + 12) = 24\n(48) - (24) = 24, left: ((4 * 12) - (12 + 12)) = 24\nreach 24! expression: ((4 * 12) - (12 + 12))"}, {"input": "12 4 12 12\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 12, 12\n(48) - (12) = 36, left: ((4 * 12) - 12) = 36, 12\n(36) - (12) = 24, left: (((4 * 12) - 12) - 12) = 24\nreach 24! expression: (((4 * 12) - 12) - 12)"}, {"input": "12 4 12 12\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 12, 12\nroll back, left: 12 4 12 12\n(4) - (12) = -8, left: (4 - 12) = -8, 12, 12\n(12) * (-8) = -96, left: (12 * (4 - 12)) = -96, 12\nroll back, left: (4 - 12) = -8, 12, 12\nroll back, left: 12 4 12 12\n(12) / (4) = 3, left: (12 / 4) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (12 / 4)) = 36, 12\n(36) - (12) = 24, left: ((12 * (12 / 4)) - 12) = 24\nreach 24! expression: ((12 * (12 / 4)) - 12)"}, {"input": "10 3 8 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 3, 8\n(3) + (13) = 16, left: (3 + (10 + 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (3 + (10 + 3))) = 24\nreach 24! expression: (8 + (3 + (10 + 3)))"}, {"input": "10 3 8 3\n", "output": "(8) + (3) = 11, left: (8 + 3) = 11, 10, 3\n(10) + (3) = 13, left: (10 + 3) = 13, (8 + 3) = 11\n(11) + (13) = 24, left: ((8 + 3) + (10 + 3)) = 24\nreach 24! expression: ((8 + 3) + (10 + 3))"}, {"input": "10 3 8 3\n", "output": "(10) / (3) = 10/3, left: (10 / 3) = 10/3, 8, 3\n(10/3) - (3) = 1/3, left: ((10 / 3) - 3) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((10 / 3) - 3)) = 24\nreach 24! expression: (8 / ((10 / 3) - 3))"}, {"input": "10 3 8 3\n", "output": "(10) + (8) = 18, left: (10 + 8) = 18, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (10 + 8) = 18\n(18) + (6) = 24, left: ((10 + 8) + (3 + 3)) = 24\nreach 24! expression: ((10 + 8) + (3 + 3))"}, {"input": "10 3 8 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 3, 8\n(8) + (13) = 21, left: (8 + (10 + 3)) = 21, 3\n(3) + (21) = 24, left: (3 + (8 + (10 + 3))) = 24\nreach 24! expression: (3 + (8 + (10 + 3)))"}, {"input": "10 3 8 3\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 3, 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (10 - 3) = 7\nroll back, left: (10 - 3) = 7, 3, 8\n(8) * (7) = 56, left: (8 * (10 - 3)) = 56, 3\nroll back, left: (10 - 3) = 7, 3, 8\nroll back, left: 10 3 8 3\n(10) + (3) = 13, left: (10 + 3) = 13, 3, 8\n(8) + (13) = 21, left: (8 + (10 + 3)) = 21, 3\n(3) + (21) = 24, left: (3 + (8 + (10 + 3))) = 24\nreach 24! expression: (3 + (8 + (10 + 3)))"}, {"input": "10 3 8 3\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 10, 3\nroll back, left: 10 3 8 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 10, 3\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, (8 / 3) = 8/3\nroll back, left: (8 / 3) = 8/3, 10, 3\nroll back, left: 10 3 8 3\n(8) + (3) = 11, left: (8 + 3) = 11, 10, 3\n(10) + (3) = 13, left: (10 + 3) = 13, (8 + 3) = 11\n(11) + (13) = 24, left: ((8 + 3) + (10 + 3)) = 24\nreach 24! expression: ((8 + 3) + (10 + 3))"}, {"input": "10 3 8 3\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 3, 3\nroll back, left: 10 3 8 3\n(10) - (8) = 2, left: (10 - 8) = 2, 3, 3\nroll back, left: 10 3 8 3\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 3, 3\nroll back, left: 10 3 8 3\n(10) + (8) = 18, left: (10 + 8) = 18, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (10 + 8) = 18\n(18) + (6) = 24, left: ((10 + 8) + (3 + 3)) = 24\nreach 24! expression: ((10 + 8) + (3 + 3))"}, {"input": "8 12 2 4\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 8, 12\n(12) - (8) = 4, left: (12 - 8) = 4, (2 + 4) = 6\n(6) * (4) = 24, left: ((2 + 4) * (12 - 8)) = 24\nreach 24! expression: ((2 + 4) * (12 - 8))"}, {"input": "8 12 2 4\n", "output": "(2) / (12) = 1/6, left: (2 / 12) = 1/6, 8, 4\n(8) - (4) = 4, left: (8 - 4) = 4, (2 / 12) = 1/6\n(4) / (1/6) = 24, left: ((8 - 4) / (2 / 12)) = 24\nreach 24! expression: ((8 - 4) / (2 / 12))"}, {"input": "8 12 2 4\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 12, 4\n(6) - (4) = 2, left: ((8 - 2) - 4) = 2, 12\n(12) * (2) = 24, left: (12 * ((8 - 2) - 4)) = 24\nreach 24! expression: (12 * ((8 - 2) - 4))"}, {"input": "8 12 2 4\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 2, 4\n(2) + (4) = 6, left: (2 + (12 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 + (12 - 8))) = 24\nreach 24! expression: (4 * (2 + (12 - 8)))"}, {"input": "8 12 2 4\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 12, 2\n(4) - (2) = 2, left: ((8 - 4) - 2) = 2, 12\n(12) * (2) = 24, left: (12 * ((8 - 4) - 2)) = 24\nreach 24! expression: (12 * ((8 - 4) - 2))"}, {"input": "8 12 2 4\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 2, 4\n(4) - (2) = 2, left: (4 - 2) = 2, (12 / 8) = 3/2\nroll back, left: (12 / 8) = 3/2, 2, 4\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, (12 / 8) = 3/2\nroll back, left: (12 / 8) = 3/2, 2, 4\nroll back, left: 8 12 2 4\n(12) - (8) = 4, left: (12 - 8) = 4, 2, 4\n(2) + (4) = 6, left: (2 + (12 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 + (12 - 8))) = 24\nreach 24! expression: (4 * (2 + (12 - 8)))"}, {"input": "8 12 2 4\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 12, 4\n(4) / (12) = 1/3, left: ((8 / 2) / 12) = 1/3, 4\nroll back, left: (8 / 2) = 4, 12, 4\nroll back, left: 8 12 2 4\n(8) - (2) = 6, left: (8 - 2) = 6, 12, 4\n(4) + (6) = 10, left: (4 + (8 - 2)) = 10, 12\nroll back, left: (8 - 2) = 6, 12, 4\n(6) - (4) = 2, left: ((8 - 2) - 4) = 2, 12\n(12) * (2) = 24, left: (12 * ((8 - 2) - 4)) = 24\nreach 24! expression: (12 * ((8 - 2) - 4))"}, {"input": "8 12 2 4\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 8, 12\nroll back, left: 8 12 2 4\n(2) * (4) = 8, left: (2 * 4) = 8, 8, 12\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, (2 * 4) = 8\nroll back, left: (2 * 4) = 8, 8, 12\nroll back, left: 8 12 2 4\n(2) + (4) = 6, left: (2 + 4) = 6, 8, 12\n(12) - (8) = 4, left: (12 - 8) = 4, (2 + 4) = 6\n(6) * (4) = 24, left: ((2 + 4) * (12 - 8)) = 24\nreach 24! expression: ((2 + 4) * (12 - 8))"}, {"input": "8 12 2 4\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 12, 2\nroll back, left: 8 12 2 4\n(8) * (4) = 32, left: (8 * 4) = 32, 12, 2\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, (8 * 4) = 32\nroll back, left: (8 * 4) = 32, 12, 2\nroll back, left: 8 12 2 4\n(8) - (4) = 4, left: (8 - 4) = 4, 12, 2\n(4) - (2) = 2, left: ((8 - 4) - 2) = 2, 12\n(12) * (2) = 24, left: (12 * ((8 - 4) - 2)) = 24\nreach 24! expression: (12 * ((8 - 4) - 2))"}, {"input": "8 8 10 2\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 8, 10\n(-6) - (8) = -14, left: ((2 - 8) - 8) = -14, 10\n(10) - (-14) = 24, left: (10 - ((2 - 8) - 8)) = 24\nreach 24! expression: (10 - ((2 - 8) - 8))"}, {"input": "8 8 10 2\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 8, 2\n(2) - (18) = -16, left: (2 - (8 + 10)) = -16, 8\n(8) - (-16) = 24, left: (8 - (2 - (8 + 10))) = 24\nreach 24! expression: (8 - (2 - (8 + 10)))"}, {"input": "8 8 10 2\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 8, 2\n(8) + (18) = 26, left: (8 + (8 + 10)) = 26, 2\n(26) - (2) = 24, left: ((8 + (8 + 10)) - 2) = 24\nreach 24! expression: ((8 + (8 + 10)) - 2)"}, {"input": "8 8 10 2\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 8, 2\n(18) - (2) = 16, left: ((8 + 10) - 2) = 16, 8\n(8) + (16) = 24, left: (8 + ((8 + 10) - 2)) = 24\nreach 24! expression: (8 + ((8 + 10) - 2))"}, {"input": "8 8 10 2\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 8, 2\n(8) - (2) = 6, left: (8 - 2) = 6, (8 - 10) = -2\nroll back, left: (8 - 10) = -2, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (8 - 10) = -2\nroll back, left: (8 - 10) = -2, 8, 2\nroll back, left: 8 8 10 2\n(8) + (10) = 18, left: (8 + 10) = 18, 8, 2\n(8) + (18) = 26, left: (8 + (8 + 10)) = 26, 2\n(26) - (2) = 24, left: ((8 + (8 + 10)) - 2) = 24\nreach 24! expression: ((8 + (8 + 10)) - 2)"}, {"input": "8 8 10 2\n", "output": "(8) * (10) = 80, left: (8 * 10) = 80, 8, 2\n(80) / (8) = 10, left: ((8 * 10) / 8) = 10, 2\n(2) - (10) = -8, left: (2 - ((8 * 10) / 8)) = -8\nroll back, left: ((8 * 10) / 8) = 10, 2\nroll back, left: (8 * 10) = 80, 8, 2\nroll back, left: 8 8 10 2\n(8) + (10) = 18, left: (8 + 10) = 18, 8, 2\n(18) - (2) = 16, left: ((8 + 10) - 2) = 16, 8\n(8) + (16) = 24, left: (8 + ((8 + 10) - 2)) = 24\nreach 24! expression: (8 + ((8 + 10) - 2))"}, {"input": "12 4 1 2\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 12, 1\n(1) * (2) = 2, left: (1 * (4 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (4 - 2))) = 24\nreach 24! expression: (12 * (1 * (4 - 2)))"}, {"input": "12 4 1 2\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 12, 2\n(4) - (2) = 2, left: ((4 / 1) - 2) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 / 1) - 2)) = 24\nreach 24! expression: (12 * ((4 / 1) - 2))"}, {"input": "12 4 1 2\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 12, 4\n(12) / (2) = 6, left: (12 / (2 / 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (12 / (2 / 1))) = 24\nreach 24! expression: (4 * (12 / (2 / 1)))"}, {"input": "12 4 1 2\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 12, 1\n(1) * (2) = 2, left: (1 * (4 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (4 / 2))) = 24\nreach 24! expression: (12 * (1 * (4 / 2)))"}, {"input": "12 4 1 2\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 12, 4\n(4) * (3) = 12, left: (4 * (1 + 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (4 * (1 + 2))) = 24\nreach 24! expression: (12 + (4 * (1 + 2)))"}, {"input": "12 4 1 2\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 12, 1\n(1) * (2) = 2, left: (1 * (4 - 2)) = 2, 12\n(12) / (2) = 6, left: (12 / (1 * (4 - 2))) = 6\nroll back, left: (1 * (4 - 2)) = 2, 12\n(2) - (12) = -10, left: ((1 * (4 - 2)) - 12) = -10\nroll back, left: (1 * (4 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (4 - 2))) = 24\nreach 24! expression: (12 * (1 * (4 - 2)))"}, {"input": "12 4 1 2\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 12, 4\n(4) / (1) = 4, left: (4 / (2 - 1)) = 4, 12\nroll back, left: (2 - 1) = 1, 12, 4\nroll back, left: 12 4 1 2\n(2) / (1) = 2, left: (2 / 1) = 2, 12, 4\n(12) / (2) = 6, left: (12 / (2 / 1)) = 6, 4\n(6) / (4) = 3/2, left: ((12 / (2 / 1)) / 4) = 3/2\nroll back, left: (12 / (2 / 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (12 / (2 / 1))) = 24\nreach 24! expression: (4 * (12 / (2 / 1)))"}, {"input": "12 4 1 2\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 12, 4\n(12) + (4) = 16, left: (12 + 4) = 16, (2 - 1) = 1\nroll back, left: (2 - 1) = 1, 12, 4\nroll back, left: 12 4 1 2\n(1) + (2) = 3, left: (1 + 2) = 3, 12, 4\n(12) / (3) = 4, left: (12 / (1 + 2)) = 4, 4\nroll back, left: (1 + 2) = 3, 12, 4\n(4) * (3) = 12, left: (4 * (1 + 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (4 * (1 + 2))) = 24\nreach 24! expression: (12 + (4 * (1 + 2)))"}, {"input": "12 4 1 2\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 12, 2\n(4) - (2) = 2, left: ((4 / 1) - 2) = 2, 12\n(12) + (2) = 14, left: (12 + ((4 / 1) - 2)) = 14\nroll back, left: ((4 / 1) - 2) = 2, 12\n(2) / (12) = 1/6, left: (((4 / 1) - 2) / 12) = 1/6\nroll back, left: ((4 / 1) - 2) = 2, 12\n(12) / (2) = 6, left: (12 / ((4 / 1) - 2)) = 6\nroll back, left: ((4 / 1) - 2) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 / 1) - 2)) = 24\nreach 24! expression: (12 * ((4 / 1) - 2))"}, {"input": "12 4 1 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 12, 1\n(1) * (6) = 6, left: (1 * (4 + 2)) = 6, 12\n(12) + (6) = 18, left: (12 + (1 * (4 + 2))) = 18\nroll back, left: (1 * (4 + 2)) = 6, 12\nroll back, left: (4 + 2) = 6, 12, 1\nroll back, left: 12 4 1 2\n(4) / (2) = 2, left: (4 / 2) = 2, 12, 1\n(1) * (2) = 2, left: (1 * (4 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (4 / 2))) = 24\nreach 24! expression: (12 * (1 * (4 / 2)))"}, {"input": "12 4 1 2\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 12, 1\n(1) * (2) = 2, left: (1 * (4 - 2)) = 2, 12\n(12) / (2) = 6, left: (12 / (1 * (4 - 2))) = 6\nroll back, left: (1 * (4 - 2)) = 2, 12\n(2) - (12) = -10, left: ((1 * (4 - 2)) - 12) = -10\nroll back, left: (1 * (4 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (4 - 2))) = 24\nreach 24! expression: (12 * (1 * (4 - 2)))"}, {"input": "12 4 1 2\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 12, 1\n(1) * (2) = 2, left: (1 * (4 - 2)) = 2, 12\n(12) / (2) = 6, left: (12 / (1 * (4 - 2))) = 6\nroll back, left: (1 * (4 - 2)) = 2, 12\n(2) - (12) = -10, left: ((1 * (4 - 2)) - 12) = -10\nroll back, left: (1 * (4 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (4 - 2))) = 24\nreach 24! expression: (12 * (1 * (4 - 2)))"}, {"input": "12 4 1 2\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 12, 1\n(1) * (2) = 2, left: (1 * (4 - 2)) = 2, 12\n(12) / (2) = 6, left: (12 / (1 * (4 - 2))) = 6\nroll back, left: (1 * (4 - 2)) = 2, 12\n(2) - (12) = -10, left: ((1 * (4 - 2)) - 12) = -10\nroll back, left: (1 * (4 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (4 - 2))) = 24\nreach 24! expression: (12 * (1 * (4 - 2)))"}, {"input": "8 1 7 4\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 7, 4\n(7) - (4) = 3, left: (7 - 4) = 3, (8 / 1) = 8\n(8) * (3) = 24, left: ((8 / 1) * (7 - 4)) = 24\nreach 24! expression: ((8 / 1) * (7 - 4))"}, {"input": "8 1 7 4\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 7, 4\n(7) - (4) = 3, left: (7 - 4) = 3, (1 / 8) = 1/8\n(3) / (1/8) = 24, left: ((7 - 4) / (1 / 8)) = 24\nreach 24! expression: ((7 - 4) / (1 / 8))"}, {"input": "8 1 7 4\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 8, 7\n(7) - (4) = 3, left: (7 - (4 / 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (4 / 1))) = 24\nreach 24! expression: (8 * (7 - (4 / 1)))"}, {"input": "8 1 7 4\n", "output": "(8) * (4) = 32, left: (8 * 4) = 32, 1, 7\n(32) - (1) = 31, left: ((8 * 4) - 1) = 31, 7\n(31) - (7) = 24, left: (((8 * 4) - 1) - 7) = 24\nreach 24! expression: (((8 * 4) - 1) - 7)"}, {"input": "8 1 7 4\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 8, 7\n(7) - (4) = 3, left: (7 - (1 * 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (1 * 4))) = 24\nreach 24! expression: (8 * (7 - (1 * 4)))"}, {"input": "8 1 7 4\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 7, 4\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, (8 / 1) = 8\nroll back, left: (8 / 1) = 8, 7, 4\n(7) - (4) = 3, left: (7 - 4) = 3, (8 / 1) = 8\n(8) + (3) = 11, left: ((8 / 1) + (7 - 4)) = 11\nroll back, left: (7 - 4) = 3, (8 / 1) = 8\n(8) - (3) = 5, left: ((8 / 1) - (7 - 4)) = 5\nroll back, left: (7 - 4) = 3, (8 / 1) = 8\n(8) * (3) = 24, left: ((8 / 1) * (7 - 4)) = 24\nreach 24! expression: ((8 / 1) * (7 - 4))"}, {"input": "8 1 7 4\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 8, 7\n(8) + (7) = 15, left: (8 + 7) = 15, (1 - 4) = -3\nroll back, left: (1 - 4) = -3, 8, 7\n(7) - (8) = -1, left: (7 - 8) = -1, (1 - 4) = -3\nroll back, left: (1 - 4) = -3, 8, 7\nroll back, left: 8 1 7 4\n(4) / (1) = 4, left: (4 / 1) = 4, 8, 7\n(7) - (4) = 3, left: (7 - (4 / 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (4 / 1))) = 24\nreach 24! expression: (8 * (7 - (4 / 1)))"}, {"input": "8 1 7 4\n", "output": "(8) / (7) = 8/7, left: (8 / 7) = 8/7, 1, 4\nroll back, left: 8 1 7 4\n(8) * (7) = 56, left: (8 * 7) = 56, 1, 4\nroll back, left: 8 1 7 4\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, 1, 7\nroll back, left: 8 1 7 4\n(8) * (4) = 32, left: (8 * 4) = 32, 1, 7\n(32) - (1) = 31, left: ((8 * 4) - 1) = 31, 7\n(31) - (7) = 24, left: (((8 * 4) - 1) - 7) = 24\nreach 24! expression: (((8 * 4) - 1) - 7)"}, {"input": "8 1 7 4\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 8, 7\nroll back, left: 8 1 7 4\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 8, 7\nroll back, left: 8 1 7 4\n(1) - (4) = -3, left: (1 - 4) = -3, 8, 7\nroll back, left: 8 1 7 4\n(1) * (4) = 4, left: (1 * 4) = 4, 8, 7\n(7) - (4) = 3, left: (7 - (1 * 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (1 * 4))) = 24\nreach 24! expression: (8 * (7 - (1 * 4)))"}, {"input": "5 5 12 3\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 12, 3\n(3) - (1) = 2, left: (3 - (5 / 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (5 / 5))) = 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 5, 12\n(12) / (8) = 3/2, left: (12 / (5 + 3)) = 3/2, 5\nroll back, left: (5 + 3) = 8, 5, 12\nroll back, left: 5 5 12 3\n(5) * (12) = 60, left: (5 * 12) = 60, 5, 3\nroll back, left: 5 5 12 3\n(5) / (5) = 1, left: (5 / 5) = 1, 12, 3\n(3) - (1) = 2, left: (3 - (5 / 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (5 / 5))) = 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 5, 12\nroll back, left: 5 5 12 3\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 5, 12\n(12) - (5) = 7, left: (12 - 5) = 7, (3 / 5) = 3/5\nroll back, left: (3 / 5) = 3/5, 5, 12\nroll back, left: 5 5 12 3\n(5) / (5) = 1, left: (5 / 5) = 1, 12, 3\n(3) - (1) = 2, left: (3 - (5 / 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (5 / 5))) = 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(12) / (5) = 12/5, left: (12 / 5) = 12/5, 5, 3\nroll back, left: 5 5 12 3\n(5) - (12) = -7, left: (5 - 12) = -7, 5, 3\nroll back, left: 5 5 12 3\n(3) / (12) = 1/4, left: (3 / 12) = 1/4, 5, 5\nroll back, left: 5 5 12 3\n(5) / (5) = 1, left: (5 / 5) = 1, 12, 3\n(3) - (1) = 2, left: (3 - (5 / 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (5 / 5))) = 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(12) * (3) = 36, left: (12 * 3) = 36, 5, 5\nroll back, left: 5 5 12 3\n(3) - (5) = -2, left: (3 - 5) = -2, 5, 12\n(-2) - (5) = -7, left: ((3 - 5) - 5) = -7, 12\nroll back, left: (3 - 5) = -2, 5, 12\nroll back, left: 5 5 12 3\n(5) / (5) = 1, left: (5 / 5) = 1, 12, 3\n(3) - (1) = 2, left: (3 - (5 / 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (5 / 5))) = 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "5 5 12 3\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 5, 12\nroll back, left: 5 5 12 3\n(5) - (3) = 2, left: (5 - 3) = 2, 5, 12\n(5) * (12) = 60, left: (5 * 12) = 60, (5 - 3) = 2\nroll back, left: (5 - 3) = 2, 5, 12\nroll back, left: 5 5 12 3\n(5) / (5) = 1, left: (5 / 5) = 1, 12, 3\n(3) - (1) = 2, left: (3 - (5 / 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (5 / 5))) = 24\nreach 24! expression: (12 * (3 - (5 / 5)))"}, {"input": "6 3 10 12\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 3, 12\n(3) * (-4) = -12, left: (3 * (6 - 10)) = -12, 12\n(12) - (-12) = 24, left: (12 - (3 * (6 - 10))) = 24\nreach 24! expression: (12 - (3 * (6 - 10)))"}, {"input": "6 3 10 12\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 6, 3\n(6) - (-2) = 8, left: (6 - (10 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (10 - 12))) = 24\nreach 24! expression: (3 * (6 - (10 - 12)))"}, {"input": "6 3 10 12\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (12 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (12 - 10))) = 24\nreach 24! expression: (3 * (6 + (12 - 10)))"}, {"input": "6 3 10 12\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 6, 10\n(6) * (10) = 60, left: (6 * 10) = 60, (3 * 12) = 36\n(60) - (36) = 24, left: ((6 * 10) - (3 * 12)) = 24\nreach 24! expression: ((6 * 10) - (3 * 12))"}, {"input": "6 3 10 12\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 3, 12\n(3) - (-4) = 7, left: (3 - (6 - 10)) = 7, 12\nroll back, left: (6 - 10) = -4, 3, 12\n(-4) / (3) = -4/3, left: ((6 - 10) / 3) = -4/3, 12\nroll back, left: (6 - 10) = -4, 3, 12\n(-4) - (3) = -7, left: ((6 - 10) - 3) = -7, 12\nroll back, left: (6 - 10) = -4, 3, 12\n(3) * (-4) = -12, left: (3 * (6 - 10)) = -12, 12\n(12) - (-12) = 24, left: (12 - (3 * (6 - 10))) = 24\nreach 24! expression: (12 - (3 * (6 - 10)))"}, {"input": "6 3 10 12\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 6, 3\n(2) - (3) = -1, left: ((12 - 10) - 3) = -1, 6\nroll back, left: (12 - 10) = 2, 6, 3\n(6) / (2) = 3, left: (6 / (12 - 10)) = 3, 3\n(3) - (3) = 0, left: (3 - (6 / (12 - 10))) = 0\nroll back, left: (6 / (12 - 10)) = 3, 3\nroll back, left: (12 - 10) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (12 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (12 - 10))) = 24\nreach 24! expression: (3 * (6 + (12 - 10)))"}, {"input": "6 3 10 12\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 6, 3\n(3) + (-2) = 1, left: (3 + (10 - 12)) = 1, 6\nroll back, left: (10 - 12) = -2, 6, 3\n(-2) - (6) = -8, left: ((10 - 12) - 6) = -8, 3\n(3) / (-8) = -3/8, left: (3 / ((10 - 12) - 6)) = -3/8\nroll back, left: ((10 - 12) - 6) = -8, 3\nroll back, left: (10 - 12) = -2, 6, 3\n(6) - (-2) = 8, left: (6 - (10 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (10 - 12))) = 24\nreach 24! expression: (3 * (6 - (10 - 12)))"}, {"input": "7 9 12 12\n", "output": "(9) * (12) = 108, left: (9 * 12) = 108, 7, 12\n(7) * (12) = 84, left: (7 * 12) = 84, (9 * 12) = 108\n(108) - (84) = 24, left: ((9 * 12) - (7 * 12)) = 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "7 9 12 12\n", "output": "(7) * (12) = 84, left: (7 * 12) = 84, 9, 12\n(9) * (12) = 108, left: (9 * 12) = 108, (7 * 12) = 84\n(108) - (84) = 24, left: ((9 * 12) - (7 * 12)) = 24\nreach 24! expression: ((9 * 12) - (7 * 12))"}, {"input": "10 5 13 12\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 5, 12\n(5) - (3) = 2, left: (5 - (13 - 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (13 - 10))) = 24\nreach 24! expression: (12 * (5 - (13 - 10)))"}, {"input": "10 5 13 12\n", "output": "(10) - (13) = -3, left: (10 - 13) = -3, 5, 12\n(5) + (-3) = 2, left: (5 + (10 - 13)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 + (10 - 13))) = 24\nreach 24! expression: (12 * (5 + (10 - 13)))"}, {"input": "10 5 13 12\n", "output": "(10) + (5) = 15, left: (10 + 5) = 15, 13, 12\n(15) - (13) = 2, left: ((10 + 5) - 13) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 5) - 13)) = 24\nreach 24! expression: (12 * ((10 + 5) - 13))"}, {"input": "5 4 2 10\n", "output": "(5) * (2) = 10, left: (5 * 2) = 10, 4, 10\n(4) + (10) = 14, left: (4 + (5 * 2)) = 14, 10\n(10) + (14) = 24, left: (10 + (4 + (5 * 2))) = 24\nreach 24! expression: (10 + (4 + (5 * 2)))"}, {"input": "5 4 2 10\n", "output": "(4) + (10) = 14, left: (4 + 10) = 14, 5, 2\n(5) * (2) = 10, left: (5 * 2) = 10, (4 + 10) = 14\n(14) + (10) = 24, left: ((4 + 10) + (5 * 2)) = 24\nreach 24! expression: ((4 + 10) + (5 * 2))"}, {"input": "5 4 2 10\n", "output": "(5) * (2) = 10, left: (5 * 2) = 10, 4, 10\n(10) + (10) = 20, left: (10 + (5 * 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 + (5 * 2))) = 24\nreach 24! expression: (4 + (10 + (5 * 2)))"}, {"input": "5 4 2 10\n", "output": "(5) - (10) = -5, left: (5 - 10) = -5, 4, 2\n(-5) / (4) = -5/4, left: ((5 - 10) / 4) = -5/4, 2\nroll back, left: (5 - 10) = -5, 4, 2\nroll back, left: 5 4 2 10\n(5) + (10) = 15, left: (5 + 10) = 15, 4, 2\nroll back, left: 5 4 2 10\n(4) + (10) = 14, left: (4 + 10) = 14, 5, 2\n(5) * (2) = 10, left: (5 * 2) = 10, (4 + 10) = 14\n(14) + (10) = 24, left: ((4 + 10) + (5 * 2)) = 24\nreach 24! expression: ((4 + 10) + (5 * 2))"}, {"input": "5 4 2 10\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 4, 10\n(4) / (10) = 2/5, left: (4 / 10) = 2/5, (5 - 2) = 3\n(3) * (2/5) = 6/5, left: ((5 - 2) * (4 / 10)) = 6/5\nroll back, left: (4 / 10) = 2/5, (5 - 2) = 3\nroll back, left: (5 - 2) = 3, 4, 10\nroll back, left: 5 4 2 10\n(5) * (2) = 10, left: (5 * 2) = 10, 4, 10\n(4) + (10) = 14, left: (4 + (5 * 2)) = 14, 10\n(10) + (14) = 24, left: (10 + (4 + (5 * 2))) = 24\nreach 24! expression: (10 + (4 + (5 * 2)))"}, {"input": "5 4 2 10\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 2, 10\nroll back, left: 5 4 2 10\n(2) + (10) = 12, left: (2 + 10) = 12, 5, 4\n(4) / (12) = 1/3, left: (4 / (2 + 10)) = 1/3, 5\nroll back, left: (2 + 10) = 12, 5, 4\nroll back, left: 5 4 2 10\n(5) * (2) = 10, left: (5 * 2) = 10, 4, 10\n(10) + (10) = 20, left: (10 + (5 * 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 + (5 * 2))) = 24\nreach 24! expression: (4 + (10 + (5 * 2)))"}, {"input": "5 4 2 10\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 5, 2\nroll back, left: 5 4 2 10\n(10) / (4) = 5/2, left: (10 / 4) = 5/2, 5, 2\n(5/2) - (2) = 1/2, left: ((10 / 4) - 2) = 1/2, 5\nroll back, left: (10 / 4) = 5/2, 5, 2\nroll back, left: 5 4 2 10\n(4) + (10) = 14, left: (4 + 10) = 14, 5, 2\n(5) * (2) = 10, left: (5 * 2) = 10, (4 + 10) = 14\n(14) + (10) = 24, left: ((4 + 10) + (5 * 2)) = 24\nreach 24! expression: ((4 + 10) + (5 * 2))"}, {"input": "12 4 3 11\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 3, 11\n(11) - (3) = 8, left: (11 - (12 / 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 - (12 / 4))) = 24\nreach 24! expression: (3 * (11 - (12 / 4)))"}, {"input": "12 4 3 11\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 4, 11\n(4) + (11) = 15, left: (4 + 11) = 15, (12 - 3) = 9\n(9) + (15) = 24, left: ((12 - 3) + (4 + 11)) = 24\nreach 24! expression: ((12 - 3) + (4 + 11))"}, {"input": "12 4 3 11\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 12, 4\n(12) + (4) = 16, left: (12 + 4) = 16, (3 - 11) = -8\n(16) - (-8) = 24, left: ((12 + 4) - (3 - 11)) = 24\nreach 24! expression: ((12 + 4) - (3 - 11))"}, {"input": "12 4 3 11\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 12, 3\n(15) - (3) = 12, left: ((4 + 11) - 3) = 12, 12\n(12) + (12) = 24, left: (12 + ((4 + 11) - 3)) = 24\nreach 24! expression: (12 + ((4 + 11) - 3))"}, {"input": "12 4 3 11\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 4, 11\n(4) + (9) = 13, left: (4 + (12 - 3)) = 13, 11\n(11) + (13) = 24, left: (11 + (4 + (12 - 3))) = 24\nreach 24! expression: (11 + (4 + (12 - 3)))"}, {"input": "12 4 3 11\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 4, 11\n(11) - (15) = -4, left: (11 - (12 + 3)) = -4, 4\n(4) * (-4) = -16, left: (4 * (11 - (12 + 3))) = -16\nroll back, left: (11 - (12 + 3)) = -4, 4\nroll back, left: (12 + 3) = 15, 4, 11\nroll back, left: 12 4 3 11\n(12) - (3) = 9, left: (12 - 3) = 9, 4, 11\n(4) + (9) = 13, left: (4 + (12 - 3)) = 13, 11\n(11) + (13) = 24, left: (11 + (4 + (12 - 3))) = 24\nreach 24! expression: (11 + (4 + (12 - 3)))"}, {"input": "5 12 10 8\n", "output": "(5) - (12) = -7, left: (5 - 12) = -7, 10, 8\n(10) + (-7) = 3, left: (10 + (5 - 12)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 + (5 - 12))) = 24\nreach 24! expression: (8 * (10 + (5 - 12)))"}, {"input": "5 12 10 8\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 10, 8\n(10) - (7) = 3, left: (10 - (12 - 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 - (12 - 5))) = 24\nreach 24! expression: (8 * (10 - (12 - 5)))"}, {"input": "5 12 10 8\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 5, 8\n(5) - (2) = 3, left: (5 - (12 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (12 - 10))) = 24\nreach 24! expression: (8 * (5 - (12 - 10)))"}, {"input": "5 12 10 8\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 5, 10\nroll back, left: 5 12 10 8\n(5) * (12) = 60, left: (5 * 12) = 60, 10, 8\n(10) + (8) = 18, left: (10 + 8) = 18, (5 * 12) = 60\nroll back, left: (5 * 12) = 60, 10, 8\nroll back, left: 5 12 10 8\n(12) - (5) = 7, left: (12 - 5) = 7, 10, 8\n(10) - (7) = 3, left: (10 - (12 - 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 - (12 - 5))) = 24\nreach 24! expression: (8 * (10 - (12 - 5)))"}, {"input": "5 12 10 8\n", "output": "(8) / (12) = 2/3, left: (8 / 12) = 2/3, 5, 10\nroll back, left: 5 12 10 8\n(12) / (10) = 6/5, left: (12 / 10) = 6/5, 5, 8\n(6/5) - (5) = -19/5, left: ((12 / 10) - 5) = -19/5, 8\nroll back, left: (12 / 10) = 6/5, 5, 8\nroll back, left: 5 12 10 8\n(12) - (10) = 2, left: (12 - 10) = 2, 5, 8\n(5) - (2) = 3, left: (5 - (12 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (12 - 10))) = 24\nreach 24! expression: (8 * (5 - (12 - 10)))"}, {"input": "5 12 10 8\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 10, 8\n(7) - (10) = -3, left: ((12 - 5) - 10) = -3, 8\n(8) * (-3) = -24, left: (8 * ((12 - 5) - 10)) = -24\nroll back, left: ((12 - 5) - 10) = -3, 8\nroll back, left: (12 - 5) = 7, 10, 8\n(10) - (7) = 3, left: (10 - (12 - 5)) = 3, 8\n(8) + (3) = 11, left: (8 + (10 - (12 - 5))) = 11\nroll back, left: (10 - (12 - 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 - (12 - 5))) = 24\nreach 24! expression: (8 * (10 - (12 - 5)))"}, {"input": "5 12 10 8\n", "output": "(10) * (8) = 80, left: (10 * 8) = 80, 5, 12\nroll back, left: 5 12 10 8\n(10) - (8) = 2, left: (10 - 8) = 2, 5, 12\nroll back, left: 5 12 10 8\n(10) / (8) = 5/4, left: (10 / 8) = 5/4, 5, 12\nroll back, left: 5 12 10 8\n(5) - (12) = -7, left: (5 - 12) = -7, 10, 8\n(10) + (-7) = 3, left: (10 + (5 - 12)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 + (5 - 12))) = 24\nreach 24! expression: (8 * (10 + (5 - 12)))"}, {"input": "7 4 1 13\n", "output": "(4) + (13) = 17, left: (4 + 13) = 17, 7, 1\n(17) / (1) = 17, left: ((4 + 13) / 1) = 17, 7\n(7) + (17) = 24, left: (7 + ((4 + 13) / 1)) = 24\nreach 24! expression: (7 + ((4 + 13) / 1))"}, {"input": "7 4 1 13\n", "output": "(1) * (13) = 13, left: (1 * 13) = 13, 7, 4\n(13) - (7) = 6, left: ((1 * 13) - 7) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 * 13) - 7)) = 24\nreach 24! expression: (4 * ((1 * 13) - 7))"}, {"input": "7 4 1 13\n", "output": "(7) + (13) = 20, left: (7 + 13) = 20, 4, 1\n(4) + (20) = 24, left: (4 + (7 + 13)) = 24, 1\n(1) * (24) = 24, left: (1 * (4 + (7 + 13))) = 24\nreach 24! expression: (1 * (4 + (7 + 13)))"}, {"input": "7 4 1 13\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 4, 1\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, (13 - 7) = 6\n(6) / (1/4) = 24, left: ((13 - 7) / (1 / 4)) = 24\nreach 24! expression: ((13 - 7) / (1 / 4))"}, {"input": "7 4 1 13\n", "output": "(7) + (13) = 20, left: (7 + 13) = 20, 4, 1\n(20) - (4) = 16, left: ((7 + 13) - 4) = 16, 1\nroll back, left: (7 + 13) = 20, 4, 1\n(4) * (20) = 80, left: (4 * (7 + 13)) = 80, 1\n(80) / (1) = 80, left: ((4 * (7 + 13)) / 1) = 80\nroll back, left: (4 * (7 + 13)) = 80, 1\nroll back, left: (7 + 13) = 20, 4, 1\n(4) + (20) = 24, left: (4 + (7 + 13)) = 24, 1\n(1) * (24) = 24, left: (1 * (4 + (7 + 13))) = 24\nreach 24! expression: (1 * (4 + (7 + 13)))"}, {"input": "7 4 1 13\n", "output": "(1) * (13) = 13, left: (1 * 13) = 13, 7, 4\n(13) - (7) = 6, left: ((1 * 13) - 7) = 6, 4\n(6) / (4) = 3/2, left: (((1 * 13) - 7) / 4) = 3/2\nroll back, left: ((1 * 13) - 7) = 6, 4\n(4) + (6) = 10, left: (4 + ((1 * 13) - 7)) = 10\nroll back, left: ((1 * 13) - 7) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 * 13) - 7)) = 24\nreach 24! expression: (4 * ((1 * 13) - 7))"}, {"input": "7 4 1 13\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 4, 1\nroll back, left: 7 4 1 13\n(13) / (7) = 13/7, left: (13 / 7) = 13/7, 4, 1\nroll back, left: 7 4 1 13\n(13) - (7) = 6, left: (13 - 7) = 6, 4, 1\n(1) - (4) = -3, left: (1 - 4) = -3, (13 - 7) = 6\nroll back, left: (13 - 7) = 6, 4, 1\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, (13 - 7) = 6\n(6) / (1/4) = 24, left: ((13 - 7) / (1 / 4)) = 24\nreach 24! expression: ((13 - 7) / (1 / 4))"}, {"input": "7 4 1 13\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 7, 1\n(7) + (-9) = -2, left: (7 + (4 - 13)) = -2, 1\n(-2) - (1) = -3, left: ((7 + (4 - 13)) - 1) = -3\nroll back, left: (7 + (4 - 13)) = -2, 1\nroll back, left: (4 - 13) = -9, 7, 1\nroll back, left: 7 4 1 13\n(4) + (13) = 17, left: (4 + 13) = 17, 7, 1\n(17) / (1) = 17, left: ((4 + 13) / 1) = 17, 7\n(7) + (17) = 24, left: (7 + ((4 + 13) / 1)) = 24\nreach 24! expression: (7 + ((4 + 13) / 1))"}, {"input": "7 4 1 13\n", "output": "(4) * (13) = 52, left: (4 * 13) = 52, 7, 1\nroll back, left: 7 4 1 13\n(13) / (4) = 13/4, left: (13 / 4) = 13/4, 7, 1\n(7) * (13/4) = 91/4, left: (7 * (13 / 4)) = 91/4, 1\nroll back, left: (13 / 4) = 13/4, 7, 1\nroll back, left: 7 4 1 13\n(4) + (13) = 17, left: (4 + 13) = 17, 7, 1\n(17) / (1) = 17, left: ((4 + 13) / 1) = 17, 7\n(7) + (17) = 24, left: (7 + ((4 + 13) / 1)) = 24\nreach 24! expression: (7 + ((4 + 13) / 1))"}, {"input": "7 4 1 13\n", "output": "(1) * (13) = 13, left: (1 * 13) = 13, 7, 4\n(13) - (7) = 6, left: ((1 * 13) - 7) = 6, 4\n(6) / (4) = 3/2, left: (((1 * 13) - 7) / 4) = 3/2\nroll back, left: ((1 * 13) - 7) = 6, 4\n(4) + (6) = 10, left: (4 + ((1 * 13) - 7)) = 10\nroll back, left: ((1 * 13) - 7) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 * 13) - 7)) = 24\nreach 24! expression: (4 * ((1 * 13) - 7))"}, {"input": "7 4 1 13\n", "output": "(1) * (13) = 13, left: (1 * 13) = 13, 7, 4\n(13) - (7) = 6, left: ((1 * 13) - 7) = 6, 4\n(6) / (4) = 3/2, left: (((1 * 13) - 7) / 4) = 3/2\nroll back, left: ((1 * 13) - 7) = 6, 4\n(4) + (6) = 10, left: (4 + ((1 * 13) - 7)) = 10\nroll back, left: ((1 * 13) - 7) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 * 13) - 7)) = 24\nreach 24! expression: (4 * ((1 * 13) - 7))"}, {"input": "7 4 1 13\n", "output": "(1) * (13) = 13, left: (1 * 13) = 13, 7, 4\n(13) - (7) = 6, left: ((1 * 13) - 7) = 6, 4\n(6) / (4) = 3/2, left: (((1 * 13) - 7) / 4) = 3/2\nroll back, left: ((1 * 13) - 7) = 6, 4\n(4) + (6) = 10, left: (4 + ((1 * 13) - 7)) = 10\nroll back, left: ((1 * 13) - 7) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 * 13) - 7)) = 24\nreach 24! expression: (4 * ((1 * 13) - 7))"}, {"input": "12 11 12 9\n", "output": "(12) * (9) = 108, left: (12 * 9) = 108, 11, 12\n(11) * (12) = 132, left: (11 * 12) = 132, (12 * 9) = 108\n(132) - (108) = 24, left: ((11 * 12) - (12 * 9)) = 24\nreach 24! expression: ((11 * 12) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(11) * (12) = 132, left: (11 * 12) = 132, 12, 9\n(12) * (9) = 108, left: (12 * 9) = 108, (11 * 12) = 132\n(132) - (108) = 24, left: ((11 * 12) - (12 * 9)) = 24\nreach 24! expression: ((11 * 12) - (12 * 9))"}, {"input": "12 11 12 9\n", "output": "(12) * (9) = 108, left: (12 * 9) = 108, 12, 11\n(12) * (11) = 132, left: (12 * 11) = 132, (12 * 9) = 108\n(132) - (108) = 24, left: ((12 * 11) - (12 * 9)) = 24\nreach 24! expression: ((12 * 11) - (12 * 9))"}, {"input": "5 3 6 4\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 6, 4\n(8) - (4) = 4, left: ((5 + 3) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 + 3) - 4)) = 24\nreach 24! expression: (6 * ((5 + 3) - 4))"}, {"input": "5 3 6 4\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 3, 6\n(3) - (-1) = 4, left: (3 - (4 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (4 - 5))) = 24\nreach 24! expression: (6 * (3 - (4 - 5)))"}, {"input": "5 3 6 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (4 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (4 - 3))) = 24\nreach 24! expression: (6 * (5 - (4 - 3)))"}, {"input": "5 3 6 4\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (3 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (3 - 4))) = 24\nreach 24! expression: (6 * (5 + (3 - 4)))"}, {"input": "5 3 6 4\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 5, 6\n(5) + (6) = 11, left: (5 + 6) = 11, (3 / 4) = 3/4\n(3/4) / (11) = 3/44, left: ((3 / 4) / (5 + 6)) = 3/44\nroll back, left: (5 + 6) = 11, (3 / 4) = 3/4\nroll back, left: (3 / 4) = 3/4, 5, 6\nroll back, left: 5 3 6 4\n(3) - (4) = -1, left: (3 - 4) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (3 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (3 - 4))) = 24\nreach 24! expression: (6 * (5 + (3 - 4)))"}, {"input": "5 3 6 4\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 6, 4\nroll back, left: 5 3 6 4\n(5) + (3) = 8, left: (5 + 3) = 8, 6, 4\n(4) + (8) = 12, left: (4 + (5 + 3)) = 12, 6\n(12) - (6) = 6, left: ((4 + (5 + 3)) - 6) = 6\nroll back, left: (4 + (5 + 3)) = 12, 6\nroll back, left: (5 + 3) = 8, 6, 4\n(8) - (4) = 4, left: ((5 + 3) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 + 3) - 4)) = 24\nreach 24! expression: (6 * ((5 + 3) - 4))"}, {"input": "5 3 6 4\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 3, 4\n(30) / (3) = 10, left: ((5 * 6) / 3) = 10, 4\nroll back, left: (5 * 6) = 30, 3, 4\n(4) / (30) = 2/15, left: (4 / (5 * 6)) = 2/15, 3\nroll back, left: (5 * 6) = 30, 3, 4\nroll back, left: 5 3 6 4\n(4) - (5) = -1, left: (4 - 5) = -1, 3, 6\n(3) - (-1) = 4, left: (3 - (4 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (4 - 5))) = 24\nreach 24! expression: (6 * (3 - (4 - 5)))"}, {"input": "5 3 6 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 5, 6\nroll back, left: 5 3 6 4\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 5, 6\nroll back, left: 5 3 6 4\n(4) - (3) = 1, left: (4 - 3) = 1, 5, 6\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, (4 - 3) = 1\nroll back, left: (4 - 3) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (4 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (4 - 3))) = 24\nreach 24! expression: (6 * (5 - (4 - 3)))"}, {"input": "5 3 6 4\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 3, 4\nroll back, left: 5 3 6 4\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 3, 4\nroll back, left: 5 3 6 4\n(3) - (5) = -2, left: (3 - 5) = -2, 6, 4\nroll back, left: 5 3 6 4\n(5) + (3) = 8, left: (5 + 3) = 8, 6, 4\n(8) - (4) = 4, left: ((5 + 3) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 + 3) - 4)) = 24\nreach 24! expression: (6 * ((5 + 3) - 4))"}, {"input": "11 8 2 11\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (11 / 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (11 / 11))) = 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "11 8 2 11\n", "output": "(2) - (11) = -9, left: (2 - 11) = -9, 11, 8\n(8) / (-9) = -8/9, left: (8 / (2 - 11)) = -8/9, 11\nroll back, left: (2 - 11) = -9, 11, 8\nroll back, left: 11 8 2 11\n(11) - (2) = 9, left: (11 - 2) = 9, 11, 8\nroll back, left: 11 8 2 11\n(11) / (11) = 1, left: (11 / 11) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (11 / 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (11 / 11))) = 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "11 8 2 11\n", "output": "(8) + (11) = 19, left: (8 + 11) = 19, 11, 2\nroll back, left: 11 8 2 11\n(11) + (2) = 13, left: (11 + 2) = 13, 8, 11\n(8) / (11) = 8/11, left: (8 / 11) = 8/11, (11 + 2) = 13\nroll back, left: (11 + 2) = 13, 8, 11\nroll back, left: 11 8 2 11\n(11) / (11) = 1, left: (11 / 11) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (11 / 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (11 / 11))) = 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "11 8 2 11\n", "output": "(11) * (8) = 88, left: (11 * 8) = 88, 2, 11\nroll back, left: 11 8 2 11\n(8) + (11) = 19, left: (8 + 11) = 19, 11, 2\nroll back, left: 11 8 2 11\n(8) - (2) = 6, left: (8 - 2) = 6, 11, 11\nroll back, left: 11 8 2 11\n(11) / (11) = 1, left: (11 / 11) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (11 / 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (11 / 11))) = 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "11 8 2 11\n", "output": "(8) / (11) = 8/11, left: (8 / 11) = 8/11, 11, 2\nroll back, left: 11 8 2 11\n(8) / (2) = 4, left: (8 / 2) = 4, 11, 11\nroll back, left: 11 8 2 11\n(11) - (11) = 0, left: (11 - 11) = 0, 8, 2\nroll back, left: 11 8 2 11\n(11) / (11) = 1, left: (11 / 11) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (11 / 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (11 / 11))) = 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "11 8 2 11\n", "output": "(11) - (11) = 0, left: (11 - 11) = 0, 8, 2\nroll back, left: 11 8 2 11\n(11) + (11) = 22, left: (11 + 11) = 22, 8, 2\n(2) * (22) = 44, left: (2 * (11 + 11)) = 44, 8\nroll back, left: (11 + 11) = 22, 8, 2\nroll back, left: 11 8 2 11\n(11) / (11) = 1, left: (11 / 11) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (11 / 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (11 / 11))) = 24\nreach 24! expression: (8 * (2 + (11 / 11)))"}, {"input": "10 6 6 1\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 6, 1\n(1) / (4) = 1/4, left: (1 / (10 - 6)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (10 - 6))) = 24\nreach 24! expression: (6 / (1 / (10 - 6)))"}, {"input": "10 6 6 1\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 10, 6\n(10) - (6) = 4, left: (10 - 6) = 4, (6 / 1) = 6\n(6) * (4) = 24, left: ((6 / 1) * (10 - 6)) = 24\nreach 24! expression: ((6 / 1) * (10 - 6))"}, {"input": "10 6 6 1\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 6, 1\n(6) * (4) = 24, left: (6 * (10 - 6)) = 24, 1\n(24) / (1) = 24, left: ((6 * (10 - 6)) / 1) = 24\nreach 24! expression: ((6 * (10 - 6)) / 1)"}, {"input": "10 6 6 1\n", "output": "(10) / (1) = 10, left: (10 / 1) = 10, 6, 6\n(10) - (6) = 4, left: ((10 / 1) - 6) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 / 1) - 6)) = 24\nreach 24! expression: (6 * ((10 / 1) - 6))"}, {"input": "10 6 6 1\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 10, 6\nroll back, left: 10 6 6 1\n(6) - (1) = 5, left: (6 - 1) = 5, 10, 6\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, (6 - 1) = 5\nroll back, left: (6 - 1) = 5, 10, 6\nroll back, left: 10 6 6 1\n(6) / (1) = 6, left: (6 / 1) = 6, 10, 6\n(10) - (6) = 4, left: (10 - 6) = 4, (6 / 1) = 6\n(6) * (4) = 24, left: ((6 / 1) * (10 - 6)) = 24\nreach 24! expression: ((6 / 1) * (10 - 6))"}, {"input": "10 6 6 1\n", "output": "(1) / (10) = 1/10, left: (1 / 10) = 1/10, 6, 6\nroll back, left: 10 6 6 1\n(1) - (10) = -9, left: (1 - 10) = -9, 6, 6\n(6) * (-9) = -54, left: (6 * (1 - 10)) = -54, 6\nroll back, left: (1 - 10) = -9, 6, 6\nroll back, left: 10 6 6 1\n(10) / (1) = 10, left: (10 / 1) = 10, 6, 6\n(10) - (6) = 4, left: ((10 / 1) - 6) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 / 1) - 6)) = 24\nreach 24! expression: (6 * ((10 / 1) - 6))"}, {"input": "10 6 6 1\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 6, 1\n(1) / (4) = 1/4, left: (1 / (10 - 6)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (10 - 6))) = 24\nreach 24! expression: (6 / (1 / (10 - 6)))"}, {"input": "10 6 6 1\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 10, 6\n(6) - (6) = 0, left: (6 - (6 / 1)) = 0, 10\n(0) / (10) = 0, left: ((6 - (6 / 1)) / 10) = 0\nroll back, left: (6 - (6 / 1)) = 0, 10\nroll back, left: (6 / 1) = 6, 10, 6\n(6) / (6) = 1, left: (6 / (6 / 1)) = 1, 10\nroll back, left: (6 / 1) = 6, 10, 6\n(10) - (6) = 4, left: (10 - 6) = 4, (6 / 1) = 6\n(6) * (4) = 24, left: ((6 / 1) * (10 - 6)) = 24\nreach 24! expression: ((6 / 1) * (10 - 6))"}, {"input": "10 6 6 1\n", "output": "(10) / (6) = 5/3, left: (10 / 6) = 5/3, 6, 1\nroll back, left: 10 6 6 1\n(6) / (10) = 3/5, left: (6 / 10) = 3/5, 6, 1\n(6) / (1) = 6, left: (6 / 1) = 6, (6 / 10) = 3/5\nroll back, left: (6 / 10) = 3/5, 6, 1\nroll back, left: 10 6 6 1\n(10) - (6) = 4, left: (10 - 6) = 4, 6, 1\n(6) * (4) = 24, left: (6 * (10 - 6)) = 24, 1\n(24) / (1) = 24, left: ((6 * (10 - 6)) / 1) = 24\nreach 24! expression: ((6 * (10 - 6)) / 1)"}, {"input": "10 6 6 1\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 6, 1\n(1) / (4) = 1/4, left: (1 / (10 - 6)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (10 - 6))) = 24\nreach 24! expression: (6 / (1 / (10 - 6)))"}, {"input": "10 6 6 1\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 6, 1\n(1) / (4) = 1/4, left: (1 / (10 - 6)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (10 - 6))) = 24\nreach 24! expression: (6 / (1 / (10 - 6)))"}, {"input": "10 6 6 1\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 6, 1\n(1) / (4) = 1/4, left: (1 / (10 - 6)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (10 - 6))) = 24\nreach 24! expression: (6 / (1 / (10 - 6)))"}, {"input": "9 11 12 4\n", "output": "(4) / (11) = 4/11, left: (4 / 11) = 4/11, 9, 12\n(12) / (4/11) = 33, left: (12 / (4 / 11)) = 33, 9\n(33) - (9) = 24, left: ((12 / (4 / 11)) - 9) = 24\nreach 24! expression: ((12 / (4 / 11)) - 9)"}, {"input": "9 11 12 4\n", "output": "(9) + (4) = 13, left: (9 + 4) = 13, 11, 12\n(13) - (11) = 2, left: ((9 + 4) - 11) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 + 4) - 11)) = 24\nreach 24! expression: (12 * ((9 + 4) - 11))"}, {"input": "9 11 12 4\n", "output": "(12) * (4) = 48, left: (12 * 4) = 48, 9, 11\n(11) - (9) = 2, left: (11 - 9) = 2, (12 * 4) = 48\n(48) / (2) = 24, left: ((12 * 4) / (11 - 9)) = 24\nreach 24! expression: ((12 * 4) / (11 - 9))"}, {"input": "4 3 6 4\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (4 + 4)) = 24\nreach 24! expression: ((6 - 3) * (4 + 4))"}, {"input": "4 3 6 4\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 4, 3\n(4) - (3) = 1, left: (4 - 3) = 1, (6 * 4) = 24\n(24) / (1) = 24, left: ((6 * 4) / (4 - 3)) = 24\nreach 24! expression: ((6 * 4) / (4 - 3))"}, {"input": "4 3 6 4\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 6, 4\n(12) - (6) = 6, left: ((4 * 3) - 6) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 * 3) - 6)) = 24\nreach 24! expression: (4 * ((4 * 3) - 6))"}, {"input": "4 3 6 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 6, 4\n(4) * (1) = 4, left: (4 * (4 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 * (4 - 3))) = 24\nreach 24! expression: (6 * (4 * (4 - 3)))"}, {"input": "4 3 6 4\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 4, 3\n(4) - (24) = -20, left: (4 - (6 * 4)) = -20, 3\n(-20) - (3) = -23, left: ((4 - (6 * 4)) - 3) = -23\nroll back, left: (4 - (6 * 4)) = -20, 3\nroll back, left: (6 * 4) = 24, 4, 3\n(4) / (24) = 1/6, left: (4 / (6 * 4)) = 1/6, 3\nroll back, left: (6 * 4) = 24, 4, 3\n(4) - (3) = 1, left: (4 - 3) = 1, (6 * 4) = 24\n(24) / (1) = 24, left: ((6 * 4) / (4 - 3)) = 24\nreach 24! expression: ((6 * 4) / (4 - 3))"}, {"input": "4 3 6 4\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 6, 4\n(-1) / (4) = -1/4, left: ((3 - 4) / 4) = -1/4, 6\nroll back, left: (3 - 4) = -1, 6, 4\n(-1) / (6) = -1/6, left: ((3 - 4) / 6) = -1/6, 4\nroll back, left: (3 - 4) = -1, 6, 4\nroll back, left: 4 3 6 4\n(4) * (3) = 12, left: (4 * 3) = 12, 6, 4\n(12) - (6) = 6, left: ((4 * 3) - 6) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 * 3) - 6)) = 24\nreach 24! expression: (4 * ((4 * 3) - 6))"}, {"input": "4 3 6 4\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 6, 4\nroll back, left: 4 3 6 4\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 6, 4\n(4) * (3/4) = 3, left: (4 * (3 / 4)) = 3, 6\nroll back, left: (3 / 4) = 3/4, 6, 4\nroll back, left: 4 3 6 4\n(4) - (3) = 1, left: (4 - 3) = 1, 6, 4\n(4) * (1) = 4, left: (4 * (4 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 * (4 - 3))) = 24\nreach 24! expression: (6 * (4 * (4 - 3)))"}, {"input": "4 3 6 4\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 4, 4\n(3) / (4) = 3/4, left: ((6 - 3) / 4) = 3/4, 4\n(4) / (3/4) = 16/3, left: (4 / ((6 - 3) / 4)) = 16/3\nroll back, left: ((6 - 3) / 4) = 3/4, 4\nroll back, left: (6 - 3) = 3, 4, 4\n(4) - (3) = 1, left: (4 - (6 - 3)) = 1, 4\nroll back, left: (6 - 3) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (4 + 4)) = 24\nreach 24! expression: ((6 - 3) * (4 + 4))"}, {"input": "4 3 6 4\n", "output": "(6) + (4) = 10, left: (6 + 4) = 10, 4, 3\n(3) - (4) = -1, left: (3 - 4) = -1, (6 + 4) = 10\nroll back, left: (6 + 4) = 10, 4, 3\n(3) - (10) = -7, left: (3 - (6 + 4)) = -7, 4\nroll back, left: (6 + 4) = 10, 4, 3\nroll back, left: 4 3 6 4\n(6) * (4) = 24, left: (6 * 4) = 24, 4, 3\n(4) - (3) = 1, left: (4 - 3) = 1, (6 * 4) = 24\n(24) / (1) = 24, left: ((6 * 4) / (4 - 3)) = 24\nreach 24! expression: ((6 * 4) / (4 - 3))"}, {"input": "13 10 6 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 6, 10\n(10) * (3) = 30, left: (10 * (13 - 10)) = 30, 6\n(30) - (6) = 24, left: ((10 * (13 - 10)) - 6) = 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "13 10 6 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (13 - 10)) = 30, 6\n(30) - (6) = 24, left: ((10 * (13 - 10)) - 6) = 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "13 10 6 10\n", "output": "(10) * (10) = 100, left: (10 * 10) = 100, 13, 6\nroll back, left: 13 10 6 10\n(10) / (10) = 1, left: (10 / 10) = 1, 13, 6\nroll back, left: 13 10 6 10\n(13) + (10) = 23, left: (13 + 10) = 23, 10, 6\nroll back, left: 13 10 6 10\n(13) - (10) = 3, left: (13 - 10) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (13 - 10)) = 30, 6\n(30) - (6) = 24, left: ((10 * (13 - 10)) - 6) = 24\nreach 24! expression: ((10 * (13 - 10)) - 6)"}, {"input": "8 8 9 13\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (13 - 9)) = 32, 8\n(32) - (8) = 24, left: ((8 * (13 - 9)) - 8) = 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(13) / (8) = 13/8, left: (13 / 8) = 13/8, 8, 9\nroll back, left: 8 8 9 13\n(13) - (8) = 5, left: (13 - 8) = 5, 8, 9\nroll back, left: 8 8 9 13\n(13) / (8) = 13/8, left: (13 / 8) = 13/8, 8, 9\nroll back, left: 8 8 9 13\n(13) - (9) = 4, left: (13 - 9) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (13 - 9)) = 32, 8\n(32) - (8) = 24, left: ((8 * (13 - 9)) - 8) = 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(8) - (9) = -1, left: (8 - 9) = -1, 8, 13\nroll back, left: 8 8 9 13\n(9) / (8) = 9/8, left: (9 / 8) = 9/8, 8, 13\nroll back, left: 8 8 9 13\n(8) * (9) = 72, left: (8 * 9) = 72, 8, 13\nroll back, left: 8 8 9 13\n(13) - (9) = 4, left: (13 - 9) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (13 - 9)) = 32, 8\n(32) - (8) = 24, left: ((8 * (13 - 9)) - 8) = 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(8) + (9) = 17, left: (8 + 9) = 17, 8, 13\nroll back, left: 8 8 9 13\n(13) / (8) = 13/8, left: (13 / 8) = 13/8, 8, 9\nroll back, left: 8 8 9 13\n(8) * (13) = 104, left: (8 * 13) = 104, 8, 9\nroll back, left: 8 8 9 13\n(13) - (9) = 4, left: (13 - 9) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (13 - 9)) = 32, 8\n(32) - (8) = 24, left: ((8 * (13 - 9)) - 8) = 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "8 8 9 13\n", "output": "(9) - (13) = -4, left: (9 - 13) = -4, 8, 8\n(8) - (-4) = 12, left: (8 - (9 - 13)) = 12, 8\nroll back, left: (9 - 13) = -4, 8, 8\nroll back, left: 8 8 9 13\n(13) / (9) = 13/9, left: (13 / 9) = 13/9, 8, 8\nroll back, left: 8 8 9 13\n(13) - (9) = 4, left: (13 - 9) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (13 - 9)) = 32, 8\n(32) - (8) = 24, left: ((8 * (13 - 9)) - 8) = 24\nreach 24! expression: ((8 * (13 - 9)) - 8)"}, {"input": "3 7 12 5\n", "output": "(5) / (12) = 5/12, left: (5 / 12) = 5/12, 3, 7\n(3) + (7) = 10, left: (3 + 7) = 10, (5 / 12) = 5/12\n(10) / (5/12) = 24, left: ((3 + 7) / (5 / 12)) = 24\nreach 24! expression: ((3 + 7) / (5 / 12))"}, {"input": "3 7 12 5\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 3, 12\n(3) * (12) = 36, left: (3 * 12) = 36, (7 + 5) = 12\n(36) - (12) = 24, left: ((3 * 12) - (7 + 5)) = 24\nreach 24! expression: ((3 * 12) - (7 + 5))"}, {"input": "3 7 12 5\n", "output": "(3) + (7) = 10, left: (3 + 7) = 10, 12, 5\n(12) * (10) = 120, left: (12 * (3 + 7)) = 120, 5\n(120) / (5) = 24, left: ((12 * (3 + 7)) / 5) = 24\nreach 24! expression: ((12 * (3 + 7)) / 5)"}, {"input": "3 7 12 5\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 12, 5\nroll back, left: 3 7 12 5\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 12, 5\n(12) + (7/3) = 43/3, left: (12 + (7 / 3)) = 43/3, 5\nroll back, left: (7 / 3) = 7/3, 12, 5\nroll back, left: 3 7 12 5\n(3) + (7) = 10, left: (3 + 7) = 10, 12, 5\n(12) * (10) = 120, left: (12 * (3 + 7)) = 120, 5\n(120) / (5) = 24, left: ((12 * (3 + 7)) / 5) = 24\nreach 24! expression: ((12 * (3 + 7)) / 5)"}, {"input": "3 7 12 5\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 3, 5\nroll back, left: 3 7 12 5\n(7) - (12) = -5, left: (7 - 12) = -5, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (7 - 12) = -5\nroll back, left: (7 - 12) = -5, 3, 5\nroll back, left: 3 7 12 5\n(7) + (5) = 12, left: (7 + 5) = 12, 3, 12\n(3) * (12) = 36, left: (3 * 12) = 36, (7 + 5) = 12\n(36) - (12) = 24, left: ((3 * 12) - (7 + 5)) = 24\nreach 24! expression: ((3 * 12) - (7 + 5))"}, {"input": "3 7 12 5\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 3, 12\n(3) + (-2) = 1, left: (3 + (5 - 7)) = 1, 12\nroll back, left: (5 - 7) = -2, 3, 12\nroll back, left: 3 7 12 5\n(5) / (7) = 5/7, left: (5 / 7) = 5/7, 3, 12\nroll back, left: 3 7 12 5\n(7) + (5) = 12, left: (7 + 5) = 12, 3, 12\n(3) * (12) = 36, left: (3 * 12) = 36, (7 + 5) = 12\n(36) - (12) = 24, left: ((3 * 12) - (7 + 5)) = 24\nreach 24! expression: ((3 * 12) - (7 + 5))"}, {"input": "3 12 2 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 12, 2\n(12) / (1) = 12, left: (12 / (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (3 - 2))) = 24\nreach 24! expression: (2 * (12 / (3 - 2)))"}, {"input": "3 12 2 2\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 12, 2\n(2) - (3/2) = 1/2, left: (2 - (3 / 2)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (2 - (3 / 2))) = 24\nreach 24! expression: (12 / (2 - (3 / 2)))"}, {"input": "3 12 2 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 3, 12\n(3) - (1) = 2, left: (3 - (2 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (2 / 2))) = 24\nreach 24! expression: (12 * (3 - (2 / 2)))"}, {"input": "3 12 2 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 12, 2\n(2) / (1) = 2, left: (2 / (3 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 / (3 - 2))) = 24\nreach 24! expression: (12 * (2 / (3 - 2)))"}, {"input": "3 12 2 2\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (12 * 2) = 24\n(24) / (1) = 24, left: ((12 * 2) / (3 - 2)) = 24\nreach 24! expression: ((12 * 2) / (3 - 2))"}, {"input": "3 12 2 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 12, 2\n(12) / (1) = 12, left: (12 / (3 - 2)) = 12, 2\n(2) - (12) = -10, left: (2 - (12 / (3 - 2))) = -10\nroll back, left: (12 / (3 - 2)) = 12, 2\n(2) / (12) = 1/6, left: (2 / (12 / (3 - 2))) = 1/6\nroll back, left: (12 / (3 - 2)) = 12, 2\n(12) / (2) = 6, left: ((12 / (3 - 2)) / 2) = 6\nroll back, left: (12 / (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (3 - 2))) = 24\nreach 24! expression: (2 * (12 / (3 - 2)))"}, {"input": "3 12 2 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 12, 2\n(2) / (1) = 2, left: (2 / (3 - 2)) = 2, 12\n(12) - (2) = 10, left: (12 - (2 / (3 - 2))) = 10\nroll back, left: (2 / (3 - 2)) = 2, 12\n(12) / (2) = 6, left: (12 / (2 / (3 - 2))) = 6\nroll back, left: (2 / (3 - 2)) = 2, 12\n(12) + (2) = 14, left: (12 + (2 / (3 - 2))) = 14\nroll back, left: (2 / (3 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 / (3 - 2))) = 24\nreach 24! expression: (12 * (2 / (3 - 2)))"}, {"input": "3 12 2 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 3, 12\n(3) - (1) = 2, left: (3 - (2 / 2)) = 2, 12\n(12) - (2) = 10, left: (12 - (3 - (2 / 2))) = 10\nroll back, left: (3 - (2 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (2 / 2))) = 24\nreach 24! expression: (12 * (3 - (2 / 2)))"}, {"input": "3 12 2 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 12, 2\n(12) / (1) = 12, left: (12 / (3 - 2)) = 12, 2\n(2) - (12) = -10, left: (2 - (12 / (3 - 2))) = -10\nroll back, left: (12 / (3 - 2)) = 12, 2\n(2) / (12) = 1/6, left: (2 / (12 / (3 - 2))) = 1/6\nroll back, left: (12 / (3 - 2)) = 12, 2\n(12) / (2) = 6, left: ((12 / (3 - 2)) / 2) = 6\nroll back, left: (12 / (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (3 - 2))) = 24\nreach 24! expression: (2 * (12 / (3 - 2)))"}, {"input": "3 12 2 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 3, 12\n(3) - (1) = 2, left: (3 - (2 / 2)) = 2, 12\n(12) - (2) = 10, left: (12 - (3 - (2 / 2))) = 10\nroll back, left: (3 - (2 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (2 / 2))) = 24\nreach 24! expression: (12 * (3 - (2 / 2)))"}, {"input": "3 12 2 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 12, 2\n(12) / (1) = 12, left: (12 / (3 - 2)) = 12, 2\n(2) - (12) = -10, left: (2 - (12 / (3 - 2))) = -10\nroll back, left: (12 / (3 - 2)) = 12, 2\n(2) / (12) = 1/6, left: (2 / (12 / (3 - 2))) = 1/6\nroll back, left: (12 / (3 - 2)) = 12, 2\n(12) / (2) = 6, left: ((12 / (3 - 2)) / 2) = 6\nroll back, left: (12 / (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (3 - 2))) = 24\nreach 24! expression: (2 * (12 / (3 - 2)))"}, {"input": "3 12 2 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 3, 12\n(3) - (1) = 2, left: (3 - (2 / 2)) = 2, 12\n(12) - (2) = 10, left: (12 - (3 - (2 / 2))) = 10\nroll back, left: (3 - (2 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (2 / 2))) = 24\nreach 24! expression: (12 * (3 - (2 / 2)))"}, {"input": "3 12 2 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 12, 2\n(12) / (1) = 12, left: (12 / (3 - 2)) = 12, 2\n(2) - (12) = -10, left: (2 - (12 / (3 - 2))) = -10\nroll back, left: (12 / (3 - 2)) = 12, 2\n(2) / (12) = 1/6, left: (2 / (12 / (3 - 2))) = 1/6\nroll back, left: (12 / (3 - 2)) = 12, 2\n(12) / (2) = 6, left: ((12 / (3 - 2)) / 2) = 6\nroll back, left: (12 / (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 / (3 - 2))) = 24\nreach 24! expression: (2 * (12 / (3 - 2)))"}, {"input": "3 12 2 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 3, 12\n(3) - (1) = 2, left: (3 - (2 / 2)) = 2, 12\n(12) - (2) = 10, left: (12 - (3 - (2 / 2))) = 10\nroll back, left: (3 - (2 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (2 / 2))) = 24\nreach 24! expression: (12 * (3 - (2 / 2)))"}, {"input": "6 11 4 11\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 4, 11\n(11) + (-5) = 6, left: (11 + (6 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 + (6 - 11))) = 24\nreach 24! expression: (4 * (11 + (6 - 11)))"}, {"input": "6 11 4 11\n", "output": "(11) + (11) = 22, left: (11 + 11) = 22, 6, 4\n(4) - (6) = -2, left: (4 - 6) = -2, (11 + 11) = 22\n(22) - (-2) = 24, left: ((11 + 11) - (4 - 6)) = 24\nreach 24! expression: ((11 + 11) - (4 - 6))"}, {"input": "6 11 4 11\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 6, 11\n(6) - (-7) = 13, left: (6 - (4 - 11)) = 13, 11\n(11) + (13) = 24, left: (11 + (6 - (4 - 11))) = 24\nreach 24! expression: (11 + (6 - (4 - 11)))"}, {"input": "6 11 4 11\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 4, 11\n(4) * (11) = 44, left: (4 * 11) = 44, (6 / 11) = 6/11\n(6/11) * (44) = 24, left: ((6 / 11) * (4 * 11)) = 24\nreach 24! expression: ((6 / 11) * (4 * 11))"}, {"input": "6 11 4 11\n", "output": "(4) * (11) = 44, left: (4 * 11) = 44, 6, 11\n(6) * (44) = 264, left: (6 * (4 * 11)) = 264, 11\n(264) / (11) = 24, left: ((6 * (4 * 11)) / 11) = 24\nreach 24! expression: ((6 * (4 * 11)) / 11)"}, {"input": "6 11 4 11\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 4, 11\n(4) * (11) = 44, left: (4 * 11) = 44, (6 / 11) = 6/11\n(6/11) * (44) = 24, left: ((6 / 11) * (4 * 11)) = 24\nreach 24! expression: ((6 / 11) * (4 * 11))"}, {"input": "6 11 4 11\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 4, 11\n(4) * (11) = 44, left: (4 * 11) = 44, (6 / 11) = 6/11\n(6/11) * (44) = 24, left: ((6 / 11) * (4 * 11)) = 24\nreach 24! expression: ((6 / 11) * (4 * 11))"}, {"input": "6 11 4 11\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 4, 11\n(4) * (11) = 44, left: (4 * 11) = 44, (6 / 11) = 6/11\n(6/11) * (44) = 24, left: ((6 / 11) * (4 * 11)) = 24\nreach 24! expression: ((6 / 11) * (4 * 11))"}, {"input": "6 11 4 11\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 4, 11\n(4) * (11) = 44, left: (4 * 11) = 44, (6 / 11) = 6/11\n(6/11) * (44) = 24, left: ((6 / 11) * (4 * 11)) = 24\nreach 24! expression: ((6 / 11) * (4 * 11))"}, {"input": "7 13 4 5\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 7, 4\n(4) - (7) = -3, left: (4 - 7) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (4 - 7)) = 24\nreach 24! expression: ((5 - 13) * (4 - 7))"}, {"input": "7 13 4 5\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 13, 5\n(5) - (13) = -8, left: (5 - 13) = -8, (4 - 7) = -3\n(-3) * (-8) = 24, left: ((4 - 7) * (5 - 13)) = 24\nreach 24! expression: ((4 - 7) * (5 - 13))"}, {"input": "7 13 4 5\n", "output": "(7) * (13) = 91, left: (7 * 13) = 91, 4, 5\n(5) + (91) = 96, left: (5 + (7 * 13)) = 96, 4\n(96) / (4) = 24, left: ((5 + (7 * 13)) / 4) = 24\nreach 24! expression: ((5 + (7 * 13)) / 4)"}, {"input": "7 13 4 5\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 13, 4\nroll back, left: 7 13 4 5\n(7) - (5) = 2, left: (7 - 5) = 2, 13, 4\nroll back, left: 7 13 4 5\n(7) + (4) = 11, left: (7 + 4) = 11, 13, 5\nroll back, left: 7 13 4 5\n(4) - (7) = -3, left: (4 - 7) = -3, 13, 5\n(5) - (13) = -8, left: (5 - 13) = -8, (4 - 7) = -3\n(-3) * (-8) = 24, left: ((4 - 7) * (5 - 13)) = 24\nreach 24! expression: ((4 - 7) * (5 - 13))"}, {"input": "7 13 4 5\n", "output": "(5) / (13) = 5/13, left: (5 / 13) = 5/13, 7, 4\n(5/13) / (4) = 5/52, left: ((5 / 13) / 4) = 5/52, 7\nroll back, left: (5 / 13) = 5/13, 7, 4\nroll back, left: 7 13 4 5\n(13) * (5) = 65, left: (13 * 5) = 65, 7, 4\nroll back, left: 7 13 4 5\n(5) - (13) = -8, left: (5 - 13) = -8, 7, 4\n(4) - (7) = -3, left: (4 - 7) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (4 - 7)) = 24\nreach 24! expression: ((5 - 13) * (4 - 7))"}, {"input": "7 13 4 5\n", "output": "(13) * (5) = 65, left: (13 * 5) = 65, 7, 4\nroll back, left: 7 13 4 5\n(5) / (13) = 5/13, left: (5 / 13) = 5/13, 7, 4\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, (5 / 13) = 5/13\nroll back, left: (5 / 13) = 5/13, 7, 4\nroll back, left: 7 13 4 5\n(5) - (13) = -8, left: (5 - 13) = -8, 7, 4\n(4) - (7) = -3, left: (4 - 7) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (4 - 7)) = 24\nreach 24! expression: ((5 - 13) * (4 - 7))"}, {"input": "7 13 4 5\n", "output": "(7) / (5) = 7/5, left: (7 / 5) = 7/5, 13, 4\nroll back, left: 7 13 4 5\n(7) + (5) = 12, left: (7 + 5) = 12, 13, 4\nroll back, left: 7 13 4 5\n(4) - (5) = -1, left: (4 - 5) = -1, 7, 13\nroll back, left: 7 13 4 5\n(7) * (13) = 91, left: (7 * 13) = 91, 4, 5\n(5) + (91) = 96, left: (5 + (7 * 13)) = 96, 4\n(96) / (4) = 24, left: ((5 + (7 * 13)) / 4) = 24\nreach 24! expression: ((5 + (7 * 13)) / 4)"}, {"input": "7 13 4 5\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 4, 5\n(4) * (5) = 20, left: (4 * 5) = 20, (13 - 7) = 6\nroll back, left: (13 - 7) = 6, 4, 5\nroll back, left: 7 13 4 5\n(7) / (13) = 7/13, left: (7 / 13) = 7/13, 4, 5\nroll back, left: 7 13 4 5\n(7) * (13) = 91, left: (7 * 13) = 91, 4, 5\n(5) + (91) = 96, left: (5 + (7 * 13)) = 96, 4\n(96) / (4) = 24, left: ((5 + (7 * 13)) / 4) = 24\nreach 24! expression: ((5 + (7 * 13)) / 4)"}, {"input": "9 6 13 8\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 13, 8\n(-3) - (8) = -11, left: ((6 - 9) - 8) = -11, 13\n(13) - (-11) = 24, left: (13 - ((6 - 9) - 8)) = 24\nreach 24! expression: (13 - ((6 - 9) - 8))"}, {"input": "9 6 13 8\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 13, 8\n(13) + (8) = 21, left: (13 + 8) = 21, (9 - 6) = 3\n(3) + (21) = 24, left: ((9 - 6) + (13 + 8)) = 24\nreach 24! expression: ((9 - 6) + (13 + 8))"}, {"input": "9 6 13 8\n", "output": "(6) - (13) = -7, left: (6 - 13) = -7, 9, 8\n(8) - (-7) = 15, left: (8 - (6 - 13)) = 15, 9\n(9) + (15) = 24, left: (9 + (8 - (6 - 13))) = 24\nreach 24! expression: (9 + (8 - (6 - 13)))"}, {"input": "9 6 13 8\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 9, 13\n(9) + (13) = 22, left: (9 + 13) = 22, (8 - 6) = 2\n(2) + (22) = 24, left: ((8 - 6) + (9 + 13)) = 24\nreach 24! expression: ((8 - 6) + (9 + 13))"}, {"input": "9 6 13 8\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 13, 8\nroll back, left: 9 6 13 8\n(9) * (6) = 54, left: (9 * 6) = 54, 13, 8\n(13) * (8) = 104, left: (13 * 8) = 104, (9 * 6) = 54\nroll back, left: (9 * 6) = 54, 13, 8\nroll back, left: 9 6 13 8\n(6) - (9) = -3, left: (6 - 9) = -3, 13, 8\n(-3) - (8) = -11, left: ((6 - 9) - 8) = -11, 13\n(13) - (-11) = 24, left: (13 - ((6 - 9) - 8)) = 24\nreach 24! expression: (13 - ((6 - 9) - 8))"}, {"input": "9 6 13 8\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 9, 8\n(9) + (19) = 28, left: (9 + (6 + 13)) = 28, 8\nroll back, left: (6 + 13) = 19, 9, 8\n(9) + (8) = 17, left: (9 + 8) = 17, (6 + 13) = 19\nroll back, left: (6 + 13) = 19, 9, 8\nroll back, left: 9 6 13 8\n(6) - (13) = -7, left: (6 - 13) = -7, 9, 8\n(8) - (-7) = 15, left: (8 - (6 - 13)) = 15, 9\n(9) + (15) = 24, left: (9 + (8 - (6 - 13))) = 24\nreach 24! expression: (9 + (8 - (6 - 13)))"}, {"input": "9 6 13 8\n", "output": "(6) * (13) = 78, left: (6 * 13) = 78, 9, 8\n(78) - (9) = 69, left: ((6 * 13) - 9) = 69, 8\nroll back, left: (6 * 13) = 78, 9, 8\n(9) * (78) = 702, left: (9 * (6 * 13)) = 702, 8\nroll back, left: (6 * 13) = 78, 9, 8\nroll back, left: 9 6 13 8\n(6) - (13) = -7, left: (6 - 13) = -7, 9, 8\n(8) - (-7) = 15, left: (8 - (6 - 13)) = 15, 9\n(9) + (15) = 24, left: (9 + (8 - (6 - 13))) = 24\nreach 24! expression: (9 + (8 - (6 - 13)))"}, {"input": "10 12 1 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (10 / 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (10 / 10))) = 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "10 12 1 10\n", "output": "(10) / (1) = 10, left: (10 / 1) = 10, 10, 12\nroll back, left: 10 12 1 10\n(12) / (1) = 12, left: (12 / 1) = 12, 10, 10\n(12) - (10) = 2, left: ((12 / 1) - 10) = 2, 10\nroll back, left: (12 / 1) = 12, 10, 10\nroll back, left: 10 12 1 10\n(10) / (10) = 1, left: (10 / 10) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (10 / 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (10 / 10))) = 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "10 12 1 10\n", "output": "(10) / (1) = 10, left: (10 / 1) = 10, 10, 12\nroll back, left: 10 12 1 10\n(1) - (10) = -9, left: (1 - 10) = -9, 10, 12\nroll back, left: 10 12 1 10\n(1) / (10) = 1/10, left: (1 / 10) = 1/10, 10, 12\nroll back, left: 10 12 1 10\n(10) / (10) = 1, left: (10 / 10) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (10 / 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (10 / 10))) = 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "10 12 1 10\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 10, 10\nroll back, left: 10 12 1 10\n(12) / (10) = 6/5, left: (12 / 10) = 6/5, 10, 1\nroll back, left: 10 12 1 10\n(10) + (10) = 20, left: (10 + 10) = 20, 12, 1\nroll back, left: 10 12 1 10\n(10) / (10) = 1, left: (10 / 10) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (10 / 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (10 / 10))) = 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "10 12 1 10\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 1, 10\nroll back, left: 10 12 1 10\n(1) - (10) = -9, left: (1 - 10) = -9, 10, 12\n(12) / (-9) = -4/3, left: (12 / (1 - 10)) = -4/3, 10\nroll back, left: (1 - 10) = -9, 10, 12\nroll back, left: 10 12 1 10\n(10) / (10) = 1, left: (10 / 10) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (10 / 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (10 / 10))) = 24\nreach 24! expression: (12 * (1 + (10 / 10)))"}, {"input": "4 11 2 11\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 2, 11\n(15) - (2) = 13, left: ((4 + 11) - 2) = 13, 11\n(11) + (13) = 24, left: (11 + ((4 + 11) - 2)) = 24\nreach 24! expression: (11 + ((4 + 11) - 2))"}, {"input": "4 11 2 11\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 4, 11\n(11) + (9) = 20, left: (11 + (11 - 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (11 + (11 - 2))) = 24\nreach 24! expression: (4 + (11 + (11 - 2)))"}, {"input": "4 11 2 11\n", "output": "(11) + (11) = 22, left: (11 + 11) = 22, 4, 2\n(4) + (22) = 26, left: (4 + (11 + 11)) = 26, 2\n(26) - (2) = 24, left: ((4 + (11 + 11)) - 2) = 24\nreach 24! expression: ((4 + (11 + 11)) - 2)"}, {"input": "4 11 2 11\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 11, 2\n(11) - (2) = 9, left: (11 - 2) = 9, (4 + 11) = 15\n(15) + (9) = 24, left: ((4 + 11) + (11 - 2)) = 24\nreach 24! expression: ((4 + 11) + (11 - 2))"}, {"input": "4 11 2 11\n", "output": "(11) + (11) = 22, left: (11 + 11) = 22, 4, 2\n(22) - (2) = 20, left: ((11 + 11) - 2) = 20, 4\n(4) + (20) = 24, left: (4 + ((11 + 11) - 2)) = 24\nreach 24! expression: (4 + ((11 + 11) - 2))"}, {"input": "4 11 2 11\n", "output": "(11) - (11) = 0, left: (11 - 11) = 0, 4, 2\nroll back, left: 4 11 2 11\n(11) / (11) = 1, left: (11 / 11) = 1, 4, 2\n(2) * (1) = 2, left: (2 * (11 / 11)) = 2, 4\nroll back, left: (11 / 11) = 1, 4, 2\nroll back, left: 4 11 2 11\n(11) + (11) = 22, left: (11 + 11) = 22, 4, 2\n(4) + (22) = 26, left: (4 + (11 + 11)) = 26, 2\n(26) - (2) = 24, left: ((4 + (11 + 11)) - 2) = 24\nreach 24! expression: ((4 + (11 + 11)) - 2)"}, {"input": "4 11 2 11\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 11, 2\nroll back, left: 4 11 2 11\n(4) * (11) = 44, left: (4 * 11) = 44, 11, 2\n(11) * (44) = 484, left: (11 * (4 * 11)) = 484, 2\nroll back, left: (4 * 11) = 44, 11, 2\nroll back, left: 4 11 2 11\n(4) + (11) = 15, left: (4 + 11) = 15, 11, 2\n(11) - (2) = 9, left: (11 - 2) = 9, (4 + 11) = 15\n(15) + (9) = 24, left: ((4 + 11) + (11 - 2)) = 24\nreach 24! expression: ((4 + 11) + (11 - 2))"}, {"input": "4 11 2 11\n", "output": "(2) * (11) = 22, left: (2 * 11) = 22, 4, 11\n(4) - (11) = -7, left: (4 - 11) = -7, (2 * 11) = 22\nroll back, left: (2 * 11) = 22, 4, 11\nroll back, left: 4 11 2 11\n(11) / (2) = 11/2, left: (11 / 2) = 11/2, 4, 11\nroll back, left: 4 11 2 11\n(11) - (2) = 9, left: (11 - 2) = 9, 4, 11\n(11) + (9) = 20, left: (11 + (11 - 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (11 + (11 - 2))) = 24\nreach 24! expression: (4 + (11 + (11 - 2)))"}, {"input": "4 11 2 11\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 2, 11\nroll back, left: 4 11 2 11\n(11) - (4) = 7, left: (11 - 4) = 7, 2, 11\n(11) - (2) = 9, left: (11 - 2) = 9, (11 - 4) = 7\nroll back, left: (11 - 4) = 7, 2, 11\nroll back, left: 4 11 2 11\n(4) + (11) = 15, left: (4 + 11) = 15, 2, 11\n(15) - (2) = 13, left: ((4 + 11) - 2) = 13, 11\n(11) + (13) = 24, left: (11 + ((4 + 11) - 2)) = 24\nreach 24! expression: (11 + ((4 + 11) - 2))"}, {"input": "4 11 2 11\n", "output": "(11) - (11) = 0, left: (11 - 11) = 0, 4, 2\nroll back, left: 4 11 2 11\n(11) * (11) = 121, left: (11 * 11) = 121, 4, 2\nroll back, left: 4 11 2 11\n(11) / (11) = 1, left: (11 / 11) = 1, 4, 2\nroll back, left: 4 11 2 11\n(11) + (11) = 22, left: (11 + 11) = 22, 4, 2\n(22) - (2) = 20, left: ((11 + 11) - 2) = 20, 4\n(4) + (20) = 24, left: (4 + ((11 + 11) - 2)) = 24\nreach 24! expression: (4 + ((11 + 11) - 2))"}, {"input": "13 13 7 4\n", "output": "(13) / (13) = 1, left: (13 / 13) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (13 / 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (13 / 13))) = 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "13 13 7 4\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 13, 7\n(7) - (9) = -2, left: (7 - (13 - 4)) = -2, 13\nroll back, left: (13 - 4) = 9, 13, 7\nroll back, left: 13 13 7 4\n(13) * (4) = 52, left: (13 * 4) = 52, 13, 7\nroll back, left: 13 13 7 4\n(13) / (13) = 1, left: (13 / 13) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (13 / 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (13 / 13))) = 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "13 13 7 4\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 13, 4\n(13) - (4) = 9, left: (13 - 4) = 9, (13 - 7) = 6\nroll back, left: (13 - 7) = 6, 13, 4\nroll back, left: 13 13 7 4\n(13) / (13) = 1, left: (13 / 13) = 1, 7, 4\n(7) * (1) = 7, left: (7 * (13 / 13)) = 7, 4\nroll back, left: (13 / 13) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (13 / 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (13 / 13))) = 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "13 13 7 4\n", "output": "(13) + (4) = 17, left: (13 + 4) = 17, 13, 7\nroll back, left: 13 13 7 4\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 13, 13\nroll back, left: 13 13 7 4\n(4) - (7) = -3, left: (4 - 7) = -3, 13, 13\nroll back, left: 13 13 7 4\n(13) / (13) = 1, left: (13 / 13) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (13 / 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (13 / 13))) = 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "13 13 7 4\n", "output": "(13) + (4) = 17, left: (13 + 4) = 17, 13, 7\nroll back, left: 13 13 7 4\n(13) / (4) = 13/4, left: (13 / 4) = 13/4, 13, 7\nroll back, left: 13 13 7 4\n(13) - (13) = 0, left: (13 - 13) = 0, 7, 4\nroll back, left: 13 13 7 4\n(13) / (13) = 1, left: (13 / 13) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (13 / 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (13 / 13))) = 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "13 13 7 4\n", "output": "(13) + (13) = 26, left: (13 + 13) = 26, 7, 4\n(26) - (7) = 19, left: ((13 + 13) - 7) = 19, 4\nroll back, left: (13 + 13) = 26, 7, 4\nroll back, left: 13 13 7 4\n(13) / (13) = 1, left: (13 / 13) = 1, 7, 4\n(4) + (1) = 5, left: (4 + (13 / 13)) = 5, 7\nroll back, left: (13 / 13) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (13 / 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (13 / 13))) = 24\nreach 24! expression: (4 * (7 - (13 / 13)))"}, {"input": "2 10 10 4\n", "output": "(4) / (10) = 2/5, left: (4 / 10) = 2/5, 2, 10\n(2) + (2/5) = 12/5, left: (2 + (4 / 10)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (2 + (4 / 10))) = 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "2 10 10 4\n", "output": "(10) - (10) = 0, left: (10 - 10) = 0, 2, 4\n(4) - (0) = 4, left: (4 - (10 - 10)) = 4, 2\nroll back, left: (10 - 10) = 0, 2, 4\nroll back, left: 2 10 10 4\n(2) - (10) = -8, left: (2 - 10) = -8, 10, 4\nroll back, left: 2 10 10 4\n(4) / (10) = 2/5, left: (4 / 10) = 2/5, 2, 10\n(2) + (2/5) = 12/5, left: (2 + (4 / 10)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (2 + (4 / 10))) = 24\nreach 24! expression: (10 * (2 + (4 / 10)))"}, {"input": "11 5 10 9\n", "output": "(5) * (9) = 45, left: (5 * 9) = 45, 11, 10\n(45) - (10) = 35, left: ((5 * 9) - 10) = 35, 11\n(35) - (11) = 24, left: (((5 * 9) - 10) - 11) = 24\nreach 24! expression: (((5 * 9) - 10) - 11)"}, {"input": "11 5 10 9\n", "output": "(11) + (10) = 21, left: (11 + 10) = 21, 5, 9\n(5) * (9) = 45, left: (5 * 9) = 45, (11 + 10) = 21\n(45) - (21) = 24, left: ((5 * 9) - (11 + 10)) = 24\nreach 24! expression: ((5 * 9) - (11 + 10))"}, {"input": "11 5 10 9\n", "output": "(5) * (9) = 45, left: (5 * 9) = 45, 11, 10\n(45) - (11) = 34, left: ((5 * 9) - 11) = 34, 10\n(34) - (10) = 24, left: (((5 * 9) - 11) - 10) = 24\nreach 24! expression: (((5 * 9) - 11) - 10)"}, {"input": "11 5 10 9\n", "output": "(10) / (9) = 10/9, left: (10 / 9) = 10/9, 11, 5\nroll back, left: 11 5 10 9\n(9) / (10) = 9/10, left: (9 / 10) = 9/10, 11, 5\nroll back, left: 11 5 10 9\n(5) - (9) = -4, left: (5 - 9) = -4, 11, 10\nroll back, left: 11 5 10 9\n(5) * (9) = 45, left: (5 * 9) = 45, 11, 10\n(45) - (10) = 35, left: ((5 * 9) - 10) = 35, 11\n(35) - (11) = 24, left: (((5 * 9) - 10) - 11) = 24\nreach 24! expression: (((5 * 9) - 10) - 11)"}, {"input": "11 5 10 9\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 10, 9\nroll back, left: 11 5 10 9\n(11) - (5) = 6, left: (11 - 5) = 6, 10, 9\n(9) + (6) = 15, left: (9 + (11 - 5)) = 15, 10\nroll back, left: (11 - 5) = 6, 10, 9\nroll back, left: 11 5 10 9\n(5) * (9) = 45, left: (5 * 9) = 45, 11, 10\n(45) - (11) = 34, left: ((5 * 9) - 11) = 34, 10\n(34) - (10) = 24, left: (((5 * 9) - 11) - 10) = 24\nreach 24! expression: (((5 * 9) - 11) - 10)"}, {"input": "1 2 6 9\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 1, 9\n(9) - (1) = 8, left: (9 - 1) = 8, (2 / 6) = 1/3\n(8) / (1/3) = 24, left: ((9 - 1) / (2 / 6)) = 24\nreach 24! expression: ((9 - 1) / (2 / 6))"}, {"input": "1 2 6 9\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 1, 9\n(9) - (1) = 8, left: (9 - 1) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (9 - 1)) = 24\nreach 24! expression: ((6 / 2) * (9 - 1))"}, {"input": "1 2 6 9\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (6 / 1) = 6\n(6) + (18) = 24, left: ((6 / 1) + (2 * 9)) = 24\nreach 24! expression: ((6 / 1) + (2 * 9))"}, {"input": "1 2 6 9\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 6, 9\n(9) / (1/2) = 18, left: (9 / (1 / 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 / (1 / 2))) = 24\nreach 24! expression: (6 + (9 / (1 / 2)))"}, {"input": "1 2 6 9\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (1 * 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (1 * 2))) = 24\nreach 24! expression: (6 + (9 * (1 * 2)))"}, {"input": "1 2 6 9\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 6, 9\n(9) - (6) = 3, left: (9 - 6) = 3, (1 * 2) = 2\nroll back, left: (1 * 2) = 2, 6, 9\n(6) / (2) = 3, left: (6 / (1 * 2)) = 3, 9\n(3) - (9) = -6, left: ((6 / (1 * 2)) - 9) = -6\nroll back, left: (6 / (1 * 2)) = 3, 9\nroll back, left: (1 * 2) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (1 * 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (1 * 2))) = 24\nreach 24! expression: (6 + (9 * (1 * 2)))"}, {"input": "1 2 6 9\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 1, 9\n(9) - (3) = 6, left: (9 - (6 / 2)) = 6, 1\nroll back, left: (6 / 2) = 3, 1, 9\n(1) + (9) = 10, left: (1 + 9) = 10, (6 / 2) = 3\n(3) / (10) = 3/10, left: ((6 / 2) / (1 + 9)) = 3/10\nroll back, left: (1 + 9) = 10, (6 / 2) = 3\nroll back, left: (6 / 2) = 3, 1, 9\n(9) - (1) = 8, left: (9 - 1) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (9 - 1)) = 24\nreach 24! expression: ((6 / 2) * (9 - 1))"}, {"input": "1 2 6 9\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 6, 9\n(6) / (1) = 6, left: (6 / (2 - 1)) = 6, 9\nroll back, left: (2 - 1) = 1, 6, 9\n(1) - (9) = -8, left: ((2 - 1) - 9) = -8, 6\nroll back, left: (2 - 1) = 1, 6, 9\nroll back, left: 1 2 6 9\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 6, 9\n(9) / (1/2) = 18, left: (9 / (1 / 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 / (1 / 2))) = 24\nreach 24! expression: (6 + (9 / (1 / 2)))"}, {"input": "1 2 6 9\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 1, 2\nroll back, left: 1 2 6 9\n(6) + (9) = 15, left: (6 + 9) = 15, 1, 2\n(2) * (15) = 30, left: (2 * (6 + 9)) = 30, 1\nroll back, left: (6 + 9) = 15, 1, 2\nroll back, left: 1 2 6 9\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, 1, 9\n(9) - (1) = 8, left: (9 - 1) = 8, (2 / 6) = 1/3\n(8) / (1/3) = 24, left: ((9 - 1) / (2 / 6)) = 24\nreach 24! expression: ((9 - 1) / (2 / 6))"}, {"input": "1 2 6 9\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 2, 9\nroll back, left: 1 2 6 9\n(1) + (6) = 7, left: (1 + 6) = 7, 2, 9\n(9) + (7) = 16, left: (9 + (1 + 6)) = 16, 2\nroll back, left: (1 + 6) = 7, 2, 9\nroll back, left: 1 2 6 9\n(6) / (1) = 6, left: (6 / 1) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (6 / 1) = 6\n(6) + (18) = 24, left: ((6 / 1) + (2 * 9)) = 24\nreach 24! expression: ((6 / 1) + (2 * 9))"}, {"input": "3 1 9 8\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 3, 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (1 * 9) = 9\n(9) * (8/3) = 24, left: ((1 * 9) * (8 / 3)) = 24\nreach 24! expression: ((1 * 9) * (8 / 3))"}, {"input": "3 1 9 8\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 1, 8\n(1) / (3) = 1/3, left: (1 / (9 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (1 / (9 / 3))) = 24\nreach 24! expression: (8 / (1 / (9 / 3)))"}, {"input": "3 1 9 8\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 1, 8\n(8) / (1/3) = 24, left: (8 / (3 / 9)) = 24, 1\n(1) * (24) = 24, left: (1 * (8 / (3 / 9))) = 24\nreach 24! expression: (1 * (8 / (3 / 9)))"}, {"input": "3 1 9 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 1, 9\n(8/3) / (1) = 8/3, left: ((8 / 3) / 1) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * ((8 / 3) / 1)) = 24\nreach 24! expression: (9 * ((8 / 3) / 1))"}, {"input": "3 1 9 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 1, 9\n(1) / (8/3) = 3/8, left: (1 / (8 / 3)) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / (1 / (8 / 3))) = 24\nreach 24! expression: (9 / (1 / (8 / 3)))"}, {"input": "3 1 9 8\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 3, 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (1 * 9) = 9\n(9) * (8/3) = 24, left: ((1 * 9) * (8 / 3)) = 24\nreach 24! expression: ((1 * 9) * (8 / 3))"}, {"input": "3 1 9 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 1, 9\n(8/3) / (1) = 8/3, left: ((8 / 3) / 1) = 8/3, 9\n(9) + (8/3) = 35/3, left: (9 + ((8 / 3) / 1)) = 35/3\nroll back, left: ((8 / 3) / 1) = 8/3, 9\n(9) / (8/3) = 27/8, left: (9 / ((8 / 3) / 1)) = 27/8\nroll back, left: ((8 / 3) / 1) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * ((8 / 3) / 1)) = 24\nreach 24! expression: (9 * ((8 / 3) / 1))"}, {"input": "3 1 9 8\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 1, 8\nroll back, left: 3 1 9 8\n(3) * (9) = 27, left: (3 * 9) = 27, 1, 8\n(1) - (27) = -26, left: (1 - (3 * 9)) = -26, 8\nroll back, left: (3 * 9) = 27, 1, 8\nroll back, left: 3 1 9 8\n(9) / (3) = 3, left: (9 / 3) = 3, 1, 8\n(1) / (3) = 1/3, left: (1 / (9 / 3)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (1 / (9 / 3))) = 24\nreach 24! expression: (8 / (1 / (9 / 3)))"}, {"input": "3 1 9 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 1, 9\n(24) - (1) = 23, left: ((3 * 8) - 1) = 23, 9\nroll back, left: (3 * 8) = 24, 1, 9\n(9) * (24) = 216, left: (9 * (3 * 8)) = 216, 1\nroll back, left: (3 * 8) = 24, 1, 9\nroll back, left: 3 1 9 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 1, 9\n(1) / (8/3) = 3/8, left: (1 / (8 / 3)) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / (1 / (8 / 3))) = 24\nreach 24! expression: (9 / (1 / (8 / 3)))"}, {"input": "3 1 9 8\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 3, 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (1 * 9) = 9\n(9) * (8/3) = 24, left: ((1 * 9) * (8 / 3)) = 24\nreach 24! expression: ((1 * 9) * (8 / 3))"}, {"input": "3 1 9 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 1, 9\n(8/3) / (1) = 8/3, left: ((8 / 3) / 1) = 8/3, 9\n(9) + (8/3) = 35/3, left: (9 + ((8 / 3) / 1)) = 35/3\nroll back, left: ((8 / 3) / 1) = 8/3, 9\n(9) / (8/3) = 27/8, left: (9 / ((8 / 3) / 1)) = 27/8\nroll back, left: ((8 / 3) / 1) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * ((8 / 3) / 1)) = 24\nreach 24! expression: (9 * ((8 / 3) / 1))"}, {"input": "3 1 9 8\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 3, 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (1 * 9) = 9\n(9) * (8/3) = 24, left: ((1 * 9) * (8 / 3)) = 24\nreach 24! expression: ((1 * 9) * (8 / 3))"}, {"input": "3 1 9 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 1, 9\n(8/3) / (1) = 8/3, left: ((8 / 3) / 1) = 8/3, 9\n(9) + (8/3) = 35/3, left: (9 + ((8 / 3) / 1)) = 35/3\nroll back, left: ((8 / 3) / 1) = 8/3, 9\n(9) / (8/3) = 27/8, left: (9 / ((8 / 3) / 1)) = 27/8\nroll back, left: ((8 / 3) / 1) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * ((8 / 3) / 1)) = 24\nreach 24! expression: (9 * ((8 / 3) / 1))"}, {"input": "3 1 9 8\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 3, 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (1 * 9) = 9\n(9) * (8/3) = 24, left: ((1 * 9) * (8 / 3)) = 24\nreach 24! expression: ((1 * 9) * (8 / 3))"}, {"input": "3 1 9 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 1, 9\n(8/3) / (1) = 8/3, left: ((8 / 3) / 1) = 8/3, 9\n(9) + (8/3) = 35/3, left: (9 + ((8 / 3) / 1)) = 35/3\nroll back, left: ((8 / 3) / 1) = 8/3, 9\n(9) / (8/3) = 27/8, left: (9 / ((8 / 3) / 1)) = 27/8\nroll back, left: ((8 / 3) / 1) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * ((8 / 3) / 1)) = 24\nreach 24! expression: (9 * ((8 / 3) / 1))"}, {"input": "6 3 5 10\n", "output": "(6) + (10) = 16, left: (6 + 10) = 16, 3, 5\n(3) + (16) = 19, left: (3 + (6 + 10)) = 19, 5\n(5) + (19) = 24, left: (5 + (3 + (6 + 10))) = 24\nreach 24! expression: (5 + (3 + (6 + 10)))"}, {"input": "6 3 5 10\n", "output": "(3) + (10) = 13, left: (3 + 10) = 13, 6, 5\n(6) + (13) = 19, left: (6 + (3 + 10)) = 19, 5\n(5) + (19) = 24, left: (5 + (6 + (3 + 10))) = 24\nreach 24! expression: (5 + (6 + (3 + 10)))"}, {"input": "6 3 5 10\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 5, 10\n(10) + (9) = 19, left: (10 + (6 + 3)) = 19, 5\n(5) + (19) = 24, left: (5 + (10 + (6 + 3))) = 24\nreach 24! expression: (5 + (10 + (6 + 3)))"}, {"input": "6 3 5 10\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 3, 10\n(3) + (11) = 14, left: (3 + (6 + 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (3 + (6 + 5))) = 24\nreach 24! expression: (10 + (3 + (6 + 5)))"}, {"input": "6 3 5 10\n", "output": "(6) + (10) = 16, left: (6 + 10) = 16, 3, 5\n(3) + (5) = 8, left: (3 + 5) = 8, (6 + 10) = 16\n(16) + (8) = 24, left: ((6 + 10) + (3 + 5)) = 24\nreach 24! expression: ((6 + 10) + (3 + 5))"}, {"input": "6 3 5 10\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 6, 5\n(6) - (30) = -24, left: (6 - (3 * 10)) = -24, 5\nroll back, left: (3 * 10) = 30, 6, 5\nroll back, left: 6 3 5 10\n(3) + (10) = 13, left: (3 + 10) = 13, 6, 5\n(6) * (13) = 78, left: (6 * (3 + 10)) = 78, 5\nroll back, left: (3 + 10) = 13, 6, 5\n(6) + (13) = 19, left: (6 + (3 + 10)) = 19, 5\n(5) + (19) = 24, left: (5 + (6 + (3 + 10))) = 24\nreach 24! expression: (5 + (6 + (3 + 10)))"}, {"input": "6 3 5 10\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 5, 10\nroll back, left: 6 3 5 10\n(6) / (3) = 2, left: (6 / 3) = 2, 5, 10\n(5) - (2) = 3, left: (5 - (6 / 3)) = 3, 10\nroll back, left: (6 / 3) = 2, 5, 10\nroll back, left: 6 3 5 10\n(6) + (3) = 9, left: (6 + 3) = 9, 5, 10\n(10) + (9) = 19, left: (10 + (6 + 3)) = 19, 5\n(5) + (19) = 24, left: (5 + (10 + (6 + 3))) = 24\nreach 24! expression: (5 + (10 + (6 + 3)))"}, {"input": "6 3 5 10\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 3, 5\nroll back, left: 6 3 5 10\n(6) * (10) = 60, left: (6 * 10) = 60, 3, 5\n(5) + (60) = 65, left: (5 + (6 * 10)) = 65, 3\nroll back, left: (6 * 10) = 60, 3, 5\nroll back, left: 6 3 5 10\n(6) + (10) = 16, left: (6 + 10) = 16, 3, 5\n(3) + (16) = 19, left: (3 + (6 + 10)) = 19, 5\n(5) + (19) = 24, left: (5 + (3 + (6 + 10))) = 24\nreach 24! expression: (5 + (3 + (6 + 10)))"}, {"input": "6 3 5 10\n", "output": "(10) / (6) = 5/3, left: (10 / 6) = 5/3, 3, 5\n(3) - (5/3) = 4/3, left: (3 - (10 / 6)) = 4/3, 5\nroll back, left: (10 / 6) = 5/3, 3, 5\nroll back, left: 6 3 5 10\n(10) - (6) = 4, left: (10 - 6) = 4, 3, 5\nroll back, left: 6 3 5 10\n(6) + (10) = 16, left: (6 + 10) = 16, 3, 5\n(3) + (5) = 8, left: (3 + 5) = 8, (6 + 10) = 16\n(16) + (8) = 24, left: ((6 + 10) + (3 + 5)) = 24\nreach 24! expression: ((6 + 10) + (3 + 5))"}, {"input": "5 9 6 3\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 6, 3\n(14) - (6) = 8, left: ((5 + 9) - 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 + 9) - 6)) = 24\nreach 24! expression: (3 * ((5 + 9) - 6))"}, {"input": "5 9 6 3\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 5, 6\n(5) * (6) = 30, left: (5 * (9 - 3)) = 30, 6\n(30) - (6) = 24, left: ((5 * (9 - 3)) - 6) = 24\nreach 24! expression: ((5 * (9 - 3)) - 6)"}, {"input": "5 9 6 3\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 5, 3\n(5) + (3) = 8, left: (5 + (9 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 + (9 - 6))) = 24\nreach 24! expression: (3 * (5 + (9 - 6)))"}, {"input": "5 9 6 3\n", "output": "(5) * (9) = 45, left: (5 * 9) = 45, 6, 3\nroll back, left: 5 9 6 3\n(5) / (9) = 5/9, left: (5 / 9) = 5/9, 6, 3\n(6) * (5/9) = 10/3, left: (6 * (5 / 9)) = 10/3, 3\nroll back, left: (5 / 9) = 5/9, 6, 3\nroll back, left: 5 9 6 3\n(5) + (9) = 14, left: (5 + 9) = 14, 6, 3\n(14) - (6) = 8, left: ((5 + 9) - 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 + 9) - 6)) = 24\nreach 24! expression: (3 * ((5 + 9) - 6))"}, {"input": "5 9 6 3\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 5, 6\n(5) - (6) = -1, left: (5 - (9 - 3)) = -1, 6\nroll back, left: (9 - 3) = 6, 5, 6\n(6) / (5) = 6/5, left: ((9 - 3) / 5) = 6/5, 6\n(6) * (6/5) = 36/5, left: (6 * ((9 - 3) / 5)) = 36/5\nroll back, left: ((9 - 3) / 5) = 6/5, 6\nroll back, left: (9 - 3) = 6, 5, 6\n(5) * (6) = 30, left: (5 * (9 - 3)) = 30, 6\n(30) - (6) = 24, left: ((5 * (9 - 3)) - 6) = 24\nreach 24! expression: ((5 * (9 - 3)) - 6)"}, {"input": "5 9 6 3\n", "output": "(5) * (9) = 45, left: (5 * 9) = 45, 6, 3\n(3) / (45) = 1/15, left: (3 / (5 * 9)) = 1/15, 6\nroll back, left: (5 * 9) = 45, 6, 3\nroll back, left: 5 9 6 3\n(5) + (9) = 14, left: (5 + 9) = 14, 6, 3\n(6) + (3) = 9, left: (6 + 3) = 9, (5 + 9) = 14\nroll back, left: (5 + 9) = 14, 6, 3\n(14) - (6) = 8, left: ((5 + 9) - 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 + 9) - 6)) = 24\nreach 24! expression: (3 * ((5 + 9) - 6))"}, {"input": "5 9 6 3\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 6, 3\n(6) / (3) = 2, left: (6 / 3) = 2, (5 - 9) = -4\nroll back, left: (5 - 9) = -4, 6, 3\nroll back, left: 5 9 6 3\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, 6, 3\nroll back, left: 5 9 6 3\n(5) + (9) = 14, left: (5 + 9) = 14, 6, 3\n(14) - (6) = 8, left: ((5 + 9) - 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 + 9) - 6)) = 24\nreach 24! expression: (3 * ((5 + 9) - 6))"}, {"input": "5 9 6 3\n", "output": "(9) / (6) = 3/2, left: (9 / 6) = 3/2, 5, 3\n(5) - (3/2) = 7/2, left: (5 - (9 / 6)) = 7/2, 3\nroll back, left: (9 / 6) = 3/2, 5, 3\nroll back, left: 5 9 6 3\n(9) + (6) = 15, left: (9 + 6) = 15, 5, 3\nroll back, left: 5 9 6 3\n(9) - (6) = 3, left: (9 - 6) = 3, 5, 3\n(5) + (3) = 8, left: (5 + (9 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 + (9 - 6))) = 24\nreach 24! expression: (3 * (5 + (9 - 6)))"}, {"input": "7 4 6 7\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (7 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (7 - 4))) = 24\nreach 24! expression: (6 * (7 - (7 - 4)))"}, {"input": "7 4 6 7\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 7, 6\n(7) * (4/7) = 4, left: (7 * (4 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 * (4 / 7))) = 24\nreach 24! expression: (6 * (7 * (4 / 7)))"}, {"input": "7 4 6 7\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 6, 7\n(28) / (7) = 4, left: ((7 * 4) / 7) = 4, 6\n(6) * (4) = 24, left: (6 * ((7 * 4) / 7)) = 24\nreach 24! expression: (6 * ((7 * 4) / 7))"}, {"input": "7 4 6 7\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 4, 7\n(7) + (-1) = 6, left: (7 + (6 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (6 - 7))) = 24\nreach 24! expression: (4 * (7 + (6 - 7)))"}, {"input": "7 4 6 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 4, 6\n(4) + (14) = 18, left: (4 + (7 + 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (4 + (7 + 7))) = 24\nreach 24! expression: (6 + (4 + (7 + 7)))"}, {"input": "7 4 6 7\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 6, 7\n(7) - (28) = -21, left: (7 - (7 * 4)) = -21, 6\n(6) - (-21) = 27, left: (6 - (7 - (7 * 4))) = 27\nroll back, left: (7 - (7 * 4)) = -21, 6\nroll back, left: (7 * 4) = 28, 6, 7\n(28) / (7) = 4, left: ((7 * 4) / 7) = 4, 6\n(6) / (4) = 3/2, left: (6 / ((7 * 4) / 7)) = 3/2\nroll back, left: ((7 * 4) / 7) = 4, 6\n(6) * (4) = 24, left: (6 * ((7 * 4) / 7)) = 24\nreach 24! expression: (6 * ((7 * 4) / 7))"}, {"input": "7 4 6 7\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 4, 7\n(7) + (-1) = 6, left: (7 + (6 - 7)) = 6, 4\n(6) - (4) = 2, left: ((7 + (6 - 7)) - 4) = 2\nroll back, left: (7 + (6 - 7)) = 6, 4\n(6) / (4) = 3/2, left: ((7 + (6 - 7)) / 4) = 3/2\nroll back, left: (7 + (6 - 7)) = 6, 4\n(4) / (6) = 2/3, left: (4 / (7 + (6 - 7))) = 2/3\nroll back, left: (7 + (6 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (6 - 7))) = 24\nreach 24! expression: (4 * (7 + (6 - 7)))"}, {"input": "7 4 6 7\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 7, 6\n(7) * (4/7) = 4, left: (7 * (4 / 7)) = 4, 6\n(4) / (6) = 2/3, left: ((7 * (4 / 7)) / 6) = 2/3\nroll back, left: (7 * (4 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 * (4 / 7))) = 24\nreach 24! expression: (6 * (7 * (4 / 7)))"}, {"input": "7 4 6 7\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 7, 6\n(7) * (3) = 21, left: (7 * (7 - 4)) = 21, 6\n(21) / (6) = 7/2, left: ((7 * (7 - 4)) / 6) = 7/2\nroll back, left: (7 * (7 - 4)) = 21, 6\nroll back, left: (7 - 4) = 3, 7, 6\n(3) - (7) = -4, left: ((7 - 4) - 7) = -4, 6\nroll back, left: (7 - 4) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (7 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (7 - 4))) = 24\nreach 24! expression: (6 * (7 - (7 - 4)))"}, {"input": "7 4 6 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 4, 6\n(4) + (14) = 18, left: (4 + (7 + 7)) = 18, 6\n(18) / (6) = 3, left: ((4 + (7 + 7)) / 6) = 3\nroll back, left: (4 + (7 + 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (4 + (7 + 7))) = 24\nreach 24! expression: (6 + (4 + (7 + 7)))"}, {"input": "7 4 6 7\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 7, 6\n(7) * (4/7) = 4, left: (7 * (4 / 7)) = 4, 6\n(4) / (6) = 2/3, left: ((7 * (4 / 7)) / 6) = 2/3\nroll back, left: (7 * (4 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 * (4 / 7))) = 24\nreach 24! expression: (6 * (7 * (4 / 7)))"}, {"input": "7 4 6 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 4, 6\n(4) + (14) = 18, left: (4 + (7 + 7)) = 18, 6\n(18) / (6) = 3, left: ((4 + (7 + 7)) / 6) = 3\nroll back, left: (4 + (7 + 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (4 + (7 + 7))) = 24\nreach 24! expression: (6 + (4 + (7 + 7)))"}, {"input": "7 4 6 7\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 7, 6\n(7) * (4/7) = 4, left: (7 * (4 / 7)) = 4, 6\n(4) / (6) = 2/3, left: ((7 * (4 / 7)) / 6) = 2/3\nroll back, left: (7 * (4 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 * (4 / 7))) = 24\nreach 24! expression: (6 * (7 * (4 / 7)))"}, {"input": "7 4 6 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 4, 6\n(4) + (14) = 18, left: (4 + (7 + 7)) = 18, 6\n(18) / (6) = 3, left: ((4 + (7 + 7)) / 6) = 3\nroll back, left: (4 + (7 + 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (4 + (7 + 7))) = 24\nreach 24! expression: (6 + (4 + (7 + 7)))"}, {"input": "7 4 6 7\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 7, 6\n(7) * (4/7) = 4, left: (7 * (4 / 7)) = 4, 6\n(4) / (6) = 2/3, left: ((7 * (4 / 7)) / 6) = 2/3\nroll back, left: (7 * (4 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 * (4 / 7))) = 24\nreach 24! expression: (6 * (7 * (4 / 7)))"}, {"input": "7 4 6 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 4, 6\n(4) + (14) = 18, left: (4 + (7 + 7)) = 18, 6\n(18) / (6) = 3, left: ((4 + (7 + 7)) / 6) = 3\nroll back, left: (4 + (7 + 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (4 + (7 + 7))) = 24\nreach 24! expression: (6 + (4 + (7 + 7)))"}, {"input": "2 2 3 3\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 2, 3\n(2) + (6) = 8, left: (2 + (2 * 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (2 * 3))) = 24\nreach 24! expression: (3 * (2 + (2 * 3)))"}, {"input": "2 2 3 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 2, 2\n(2) * (6) = 12, left: (2 * (3 + 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 * (3 + 3))) = 24\nreach 24! expression: (2 * (2 * (3 + 3)))"}, {"input": "2 2 3 3\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (2 * 2) = 4\n(4) * (6) = 24, left: ((2 * 2) * (3 + 3)) = 24\nreach 24! expression: ((2 * 2) * (3 + 3))"}, {"input": "2 2 3 3\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (2 + 2) = 4\n(4) * (6) = 24, left: ((2 + 2) * (3 + 3)) = 24\nreach 24! expression: ((2 + 2) * (3 + 3))"}, {"input": "2 2 3 3\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 3, 3\n(0) / (3) = 0, left: ((2 - 2) / 3) = 0, 3\nroll back, left: (2 - 2) = 0, 3, 3\nroll back, left: 2 2 3 3\n(2) / (2) = 1, left: (2 / 2) = 1, 3, 3\nroll back, left: 2 2 3 3\n(2) + (2) = 4, left: (2 + 2) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (2 + 2) = 4\n(4) * (6) = 24, left: ((2 + 2) * (3 + 3)) = 24\nreach 24! expression: ((2 + 2) * (3 + 3))"}, {"input": "2 2 3 3\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 3, 3\n(4) - (3) = 1, left: ((2 * 2) - 3) = 1, 3\nroll back, left: (2 * 2) = 4, 3, 3\n(3) + (4) = 7, left: (3 + (2 * 2)) = 7, 3\n(7) - (3) = 4, left: ((3 + (2 * 2)) - 3) = 4\nroll back, left: (3 + (2 * 2)) = 7, 3\nroll back, left: (2 * 2) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (2 * 2) = 4\n(4) * (6) = 24, left: ((2 * 2) * (3 + 3)) = 24\nreach 24! expression: ((2 * 2) * (3 + 3))"}, {"input": "2 2 3 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 2, 2\nroll back, left: 2 2 3 3\n(3) - (3) = 0, left: (3 - 3) = 0, 2, 2\n(2) - (2) = 0, left: (2 - 2) = 0, (3 - 3) = 0\nroll back, left: (3 - 3) = 0, 2, 2\nroll back, left: 2 2 3 3\n(3) + (3) = 6, left: (3 + 3) = 6, 2, 2\n(2) * (6) = 12, left: (2 * (3 + 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 * (3 + 3))) = 24\nreach 24! expression: (2 * (2 * (3 + 3)))"}, {"input": "2 2 3 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 2, 2\n(0) - (2) = -2, left: ((3 - 3) - 2) = -2, 2\n(2) / (-2) = -1, left: (2 / ((3 - 3) - 2)) = -1\nroll back, left: ((3 - 3) - 2) = -2, 2\nroll back, left: (3 - 3) = 0, 2, 2\nroll back, left: 2 2 3 3\n(3) + (3) = 6, left: (3 + 3) = 6, 2, 2\n(2) * (6) = 12, left: (2 * (3 + 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 * (3 + 3))) = 24\nreach 24! expression: (2 * (2 * (3 + 3)))"}, {"input": "2 2 3 3\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 2, 3\nroll back, left: 2 2 3 3\n(2) + (3) = 5, left: (2 + 3) = 5, 2, 3\n(2) * (5) = 10, left: (2 * (2 + 3)) = 10, 3\nroll back, left: (2 + 3) = 5, 2, 3\nroll back, left: 2 2 3 3\n(2) * (3) = 6, left: (2 * 3) = 6, 2, 3\n(2) + (6) = 8, left: (2 + (2 * 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (2 * 3))) = 24\nreach 24! expression: (3 * (2 + (2 * 3)))"}, {"input": "10 2 3 7\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 3, 7\n(3) - (20) = -17, left: (3 - (10 * 2)) = -17, 7\n(7) - (-17) = 24, left: (7 - (3 - (10 * 2))) = 24\nreach 24! expression: (7 - (3 - (10 * 2)))"}, {"input": "10 2 3 7\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 3, 7\n(20) - (3) = 17, left: ((10 * 2) - 3) = 17, 7\n(7) + (17) = 24, left: (7 + ((10 * 2) - 3)) = 24\nreach 24! expression: (7 + ((10 * 2) - 3))"}, {"input": "10 2 3 7\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (3 - 7) = -4\n(20) - (-4) = 24, left: ((10 * 2) - (3 - 7)) = 24\nreach 24! expression: ((10 * 2) - (3 - 7))"}, {"input": "10 2 3 7\n", "output": "(3) / (10) = 3/10, left: (3 / 10) = 3/10, 2, 7\nroll back, left: 10 2 3 7\n(3) + (7) = 10, left: (3 + 7) = 10, 10, 2\n(2) * (10) = 20, left: (2 * (3 + 7)) = 20, 10\nroll back, left: (3 + 7) = 10, 10, 2\nroll back, left: 10 2 3 7\n(3) - (7) = -4, left: (3 - 7) = -4, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (3 - 7) = -4\n(20) - (-4) = 24, left: ((10 * 2) - (3 - 7)) = 24\nreach 24! expression: ((10 * 2) - (3 - 7))"}, {"input": "10 2 3 7\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 10, 3\nroll back, left: 10 2 3 7\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, 2, 7\nroll back, left: 10 2 3 7\n(3) / (10) = 3/10, left: (3 / 10) = 3/10, 2, 7\nroll back, left: 10 2 3 7\n(3) - (7) = -4, left: (3 - 7) = -4, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (3 - 7) = -4\n(20) - (-4) = 24, left: ((10 * 2) - (3 - 7)) = 24\nreach 24! expression: ((10 * 2) - (3 - 7))"}, {"input": "10 2 3 7\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 3, 7\nroll back, left: 10 2 3 7\n(10) - (2) = 8, left: (10 - 2) = 8, 3, 7\n(8) / (7) = 8/7, left: ((10 - 2) / 7) = 8/7, 3\nroll back, left: (10 - 2) = 8, 3, 7\nroll back, left: 10 2 3 7\n(10) * (2) = 20, left: (10 * 2) = 20, 3, 7\n(3) - (20) = -17, left: (3 - (10 * 2)) = -17, 7\n(7) - (-17) = 24, left: (7 - (3 - (10 * 2))) = 24\nreach 24! expression: (7 - (3 - (10 * 2)))"}, {"input": "10 2 3 7\n", "output": "(2) / (7) = 2/7, left: (2 / 7) = 2/7, 10, 3\nroll back, left: 10 2 3 7\n(2) + (7) = 9, left: (2 + 7) = 9, 10, 3\n(10) - (3) = 7, left: (10 - 3) = 7, (2 + 7) = 9\nroll back, left: (2 + 7) = 9, 10, 3\nroll back, left: 10 2 3 7\n(10) * (2) = 20, left: (10 * 2) = 20, 3, 7\n(20) - (3) = 17, left: ((10 * 2) - 3) = 17, 7\n(7) + (17) = 24, left: (7 + ((10 * 2) - 3)) = 24\nreach 24! expression: (7 + ((10 * 2) - 3))"}, {"input": "10 2 3 7\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 10, 2\nroll back, left: 10 2 3 7\n(3) + (7) = 10, left: (3 + 7) = 10, 10, 2\nroll back, left: 10 2 3 7\n(3) - (7) = -4, left: (3 - 7) = -4, 10, 2\n(2) / (-4) = -1/2, left: (2 / (3 - 7)) = -1/2, 10\nroll back, left: (3 - 7) = -4, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (3 - 7) = -4\n(20) - (-4) = 24, left: ((10 * 2) - (3 - 7)) = 24\nreach 24! expression: ((10 * 2) - (3 - 7))"}, {"input": "13 9 11 10\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 9, 10\n(10) - (9) = 1, left: (10 - 9) = 1, (13 + 11) = 24\n(24) * (1) = 24, left: ((13 + 11) * (10 - 9)) = 24\nreach 24! expression: ((13 + 11) * (10 - 9))"}, {"input": "13 9 11 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (13 - 10)) = 33, 9\n(33) - (9) = 24, left: ((11 * (13 - 10)) - 9) = 24\nreach 24! expression: ((11 * (13 - 10)) - 9)"}, {"input": "10 4 2 11\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 10, 2\n(2) * (-7) = -14, left: (2 * (4 - 11)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (4 - 11))) = 24\nreach 24! expression: (10 - (2 * (4 - 11)))"}, {"input": "10 4 2 11\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (10 / 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (10 / 2))) = 24\nreach 24! expression: (4 * (11 - (10 / 2)))"}, {"input": "10 4 2 11\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 10, 11\nroll back, left: 10 4 2 11\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, 10, 11\nroll back, left: 10 4 2 11\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, 4, 11\nroll back, left: 10 4 2 11\n(10) / (2) = 5, left: (10 / 2) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (10 / 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (10 / 2))) = 24\nreach 24! expression: (4 * (11 - (10 / 2)))"}, {"input": "10 4 2 11\n", "output": "(10) + (4) = 14, left: (10 + 4) = 14, 2, 11\nroll back, left: 10 4 2 11\n(4) / (2) = 2, left: (4 / 2) = 2, 10, 11\nroll back, left: 10 4 2 11\n(10) - (11) = -1, left: (10 - 11) = -1, 4, 2\nroll back, left: 10 4 2 11\n(10) / (2) = 5, left: (10 / 2) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (10 / 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (10 / 2))) = 24\nreach 24! expression: (4 * (11 - (10 / 2)))"}, {"input": "10 4 2 11\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 2, 11\n(6) / (11) = 6/11, left: ((10 - 4) / 11) = 6/11, 2\nroll back, left: (10 - 4) = 6, 2, 11\nroll back, left: 10 4 2 11\n(2) - (4) = -2, left: (2 - 4) = -2, 10, 11\nroll back, left: 10 4 2 11\n(4) - (11) = -7, left: (4 - 11) = -7, 10, 2\n(2) * (-7) = -14, left: (2 * (4 - 11)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (4 - 11))) = 24\nreach 24! expression: (10 - (2 * (4 - 11)))"}, {"input": "7 3 10 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (11 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (11 - 10))) = 24\nreach 24! expression: (3 * (7 + (11 - 10)))"}, {"input": "7 3 10 11\n", "output": "(7) + (11) = 18, left: (7 + 11) = 18, 3, 10\n(18) - (10) = 8, left: ((7 + 11) - 10) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 11) - 10)) = 24\nreach 24! expression: (3 * ((7 + 11) - 10))"}, {"input": "7 3 10 11\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 7, 10\n(7) - (10) = -3, left: (7 - 10) = -3, (3 - 11) = -8\n(-8) * (-3) = 24, left: ((3 - 11) * (7 - 10)) = 24\nreach 24! expression: ((3 - 11) * (7 - 10))"}, {"input": "7 3 10 11\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 3, 11\n(3) - (11) = -8, left: (3 - 11) = -8, (7 - 10) = -3\n(-3) * (-8) = 24, left: ((7 - 10) * (3 - 11)) = 24\nreach 24! expression: ((7 - 10) * (3 - 11))"}, {"input": "7 3 10 11\n", "output": "(3) / (10) = 3/10, left: (3 / 10) = 3/10, 7, 11\nroll back, left: 7 3 10 11\n(7) - (3) = 4, left: (7 - 3) = 4, 10, 11\n(10) + (4) = 14, left: (10 + (7 - 3)) = 14, 11\nroll back, left: (7 - 3) = 4, 10, 11\nroll back, left: 7 3 10 11\n(11) - (10) = 1, left: (11 - 10) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (11 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (11 - 10))) = 24\nreach 24! expression: (3 * (7 + (11 - 10)))"}, {"input": "7 3 10 11\n", "output": "(10) * (11) = 110, left: (10 * 11) = 110, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (10 * 11) = 110\nroll back, left: (10 * 11) = 110, 7, 3\nroll back, left: 7 3 10 11\n(11) - (10) = 1, left: (11 - 10) = 1, 7, 3\n(3) + (1) = 4, left: (3 + (11 - 10)) = 4, 7\nroll back, left: (11 - 10) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (11 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (11 - 10))) = 24\nreach 24! expression: (3 * (7 + (11 - 10)))"}, {"input": "4 1 5 13\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 4, 1\n(1) - (4) = -3, left: (1 - 4) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (1 - 4)) = 24\nreach 24! expression: ((5 - 13) * (1 - 4))"}, {"input": "4 1 5 13\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (4 - 1) = 3\n(3) * (8) = 24, left: ((4 - 1) * (13 - 5)) = 24\nreach 24! expression: ((4 - 1) * (13 - 5))"}, {"input": "4 1 5 13\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 5, 13\n(5) - (13) = -8, left: (5 - 13) = -8, (1 - 4) = -3\n(-3) * (-8) = 24, left: ((1 - 4) * (5 - 13)) = 24\nreach 24! expression: ((1 - 4) * (5 - 13))"}, {"input": "4 1 5 13\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 5, 13\n(4) / (5) = 4/5, left: ((4 / 1) / 5) = 4/5, 13\nroll back, left: (4 / 1) = 4, 5, 13\nroll back, left: 4 1 5 13\n(4) + (1) = 5, left: (4 + 1) = 5, 5, 13\nroll back, left: 4 1 5 13\n(1) - (4) = -3, left: (1 - 4) = -3, 5, 13\n(5) - (13) = -8, left: (5 - 13) = -8, (1 - 4) = -3\n(-3) * (-8) = 24, left: ((1 - 4) * (5 - 13)) = 24\nreach 24! expression: ((1 - 4) * (5 - 13))"}, {"input": "4 1 5 13\n", "output": "(4) * (13) = 52, left: (4 * 13) = 52, 1, 5\n(1) - (5) = -4, left: (1 - 5) = -4, (4 * 13) = 52\nroll back, left: (4 * 13) = 52, 1, 5\nroll back, left: 4 1 5 13\n(13) / (4) = 13/4, left: (13 / 4) = 13/4, 1, 5\nroll back, left: 4 1 5 13\n(4) - (1) = 3, left: (4 - 1) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (4 - 1) = 3\n(3) * (8) = 24, left: ((4 - 1) * (13 - 5)) = 24\nreach 24! expression: ((4 - 1) * (13 - 5))"}, {"input": "4 1 5 13\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 4, 13\n(5) - (4) = 1, left: ((5 / 1) - 4) = 1, 13\nroll back, left: (5 / 1) = 5, 4, 13\nroll back, left: 4 1 5 13\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, 4, 13\nroll back, left: 4 1 5 13\n(1) - (4) = -3, left: (1 - 4) = -3, 5, 13\n(5) - (13) = -8, left: (5 - 13) = -8, (1 - 4) = -3\n(-3) * (-8) = 24, left: ((1 - 4) * (5 - 13)) = 24\nreach 24! expression: ((1 - 4) * (5 - 13))"}, {"input": "4 1 5 13\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 1, 13\n(13) / (4/5) = 65/4, left: (13 / (4 / 5)) = 65/4, 1\nroll back, left: (4 / 5) = 4/5, 1, 13\nroll back, left: 4 1 5 13\n(4) - (13) = -9, left: (4 - 13) = -9, 1, 5\nroll back, left: 4 1 5 13\n(5) - (13) = -8, left: (5 - 13) = -8, 4, 1\n(1) - (4) = -3, left: (1 - 4) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (1 - 4)) = 24\nreach 24! expression: ((5 - 13) * (1 - 4))"}, {"input": "4 1 5 13\n", "output": "(1) + (13) = 14, left: (1 + 13) = 14, 4, 5\nroll back, left: 4 1 5 13\n(5) - (1) = 4, left: (5 - 1) = 4, 4, 13\n(13) - (4) = 9, left: (13 - (5 - 1)) = 9, 4\nroll back, left: (5 - 1) = 4, 4, 13\nroll back, left: 4 1 5 13\n(1) - (4) = -3, left: (1 - 4) = -3, 5, 13\n(5) - (13) = -8, left: (5 - 13) = -8, (1 - 4) = -3\n(-3) * (-8) = 24, left: ((1 - 4) * (5 - 13)) = 24\nreach 24! expression: ((1 - 4) * (5 - 13))"}, {"input": "2 5 1 12\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (12 / 2) = 6\n(6) * (4) = 24, left: ((12 / 2) * (5 - 1)) = 24\nreach 24! expression: ((12 / 2) * (5 - 1))"}, {"input": "2 5 1 12\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 5, 12\n(5) - (3) = 2, left: (5 - (2 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (2 + 1))) = 24\nreach 24! expression: (12 * (5 - (2 + 1)))"}, {"input": "2 5 1 12\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (5 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (5 + 1))) = 24\nreach 24! expression: (12 + (2 * (5 + 1)))"}, {"input": "2 5 1 12\n", "output": "(2) / (12) = 1/6, left: (2 / 12) = 1/6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (2 / 12) = 1/6\n(4) / (1/6) = 24, left: ((5 - 1) / (2 / 12)) = 24\nreach 24! expression: ((5 - 1) / (2 / 12))"}, {"input": "2 5 1 12\n", "output": "(2) + (12) = 14, left: (2 + 12) = 14, 5, 1\nroll back, left: 2 5 1 12\n(12) - (2) = 10, left: (12 - 2) = 10, 5, 1\nroll back, left: 2 5 1 12\n(2) * (12) = 24, left: (2 * 12) = 24, 5, 1\nroll back, left: 2 5 1 12\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (2 / 12) = 1/6\n(4) / (1/6) = 24, left: ((5 - 1) / (2 / 12)) = 24\nreach 24! expression: ((5 - 1) / (2 / 12))"}, {"input": "2 5 1 12\n", "output": "(2) + (12) = 14, left: (2 + 12) = 14, 5, 1\nroll back, left: 2 5 1 12\n(12) / (2) = 6, left: (12 / 2) = 6, 5, 1\n(6) - (1) = 5, left: ((12 / 2) - 1) = 5, 5\n(5) / (5) = 1, left: (5 / ((12 / 2) - 1)) = 1\nroll back, left: ((12 / 2) - 1) = 5, 5\nroll back, left: (12 / 2) = 6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (12 / 2) = 6\n(6) * (4) = 24, left: ((12 / 2) * (5 - 1)) = 24\nreach 24! expression: ((12 / 2) * (5 - 1))"}, {"input": "2 5 1 12\n", "output": "(1) / (5) = 1/5, left: (1 / 5) = 1/5, 2, 12\n(12) / (2) = 6, left: (12 / 2) = 6, (1 / 5) = 1/5\nroll back, left: (1 / 5) = 1/5, 2, 12\nroll back, left: 2 5 1 12\n(5) + (1) = 6, left: (5 + 1) = 6, 2, 12\n(2) / (6) = 1/3, left: (2 / (5 + 1)) = 1/3, 12\nroll back, left: (5 + 1) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (5 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (5 + 1))) = 24\nreach 24! expression: (12 + (2 * (5 + 1)))"}, {"input": "2 5 1 12\n", "output": "(5) + (12) = 17, left: (5 + 12) = 17, 2, 1\nroll back, left: 2 5 1 12\n(12) - (5) = 7, left: (12 - 5) = 7, 2, 1\nroll back, left: 2 5 1 12\n(2) + (1) = 3, left: (2 + 1) = 3, 5, 12\n(3) / (12) = 1/4, left: ((2 + 1) / 12) = 1/4, 5\nroll back, left: (2 + 1) = 3, 5, 12\n(5) - (3) = 2, left: (5 - (2 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (2 + 1))) = 24\nreach 24! expression: (12 * (5 - (2 + 1)))"}, {"input": "6 10 2 3\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 2, 3\n(3) * (4) = 12, left: (3 * (10 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 * (10 - 6))) = 24\nreach 24! expression: (2 * (3 * (10 - 6)))"}, {"input": "6 10 2 3\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 6, 3\n(3) - (6) = -3, left: (3 - 6) = -3, (2 - 10) = -8\n(-8) * (-3) = 24, left: ((2 - 10) * (3 - 6)) = 24\nreach 24! expression: ((2 - 10) * (3 - 6))"}, {"input": "6 10 2 3\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 6, 10\n(10) - (6) = 4, left: (10 - 6) = 4, (2 * 3) = 6\n(6) * (4) = 24, left: ((2 * 3) * (10 - 6)) = 24\nreach 24! expression: ((2 * 3) * (10 - 6))"}, {"input": "6 10 2 3\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (10 - 6) = 4\n(4) * (6) = 24, left: ((10 - 6) * (2 * 3)) = 24\nreach 24! expression: ((10 - 6) * (2 * 3))"}, {"input": "6 10 2 3\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 6, 3\n(6) - (3) = 3, left: (6 - 3) = 3, (2 - 10) = -8\n(-8) - (3) = -11, left: ((2 - 10) - (6 - 3)) = -11\nroll back, left: (6 - 3) = 3, (2 - 10) = -8\nroll back, left: (2 - 10) = -8, 6, 3\n(6) + (3) = 9, left: (6 + 3) = 9, (2 - 10) = -8\nroll back, left: (2 - 10) = -8, 6, 3\n(3) - (6) = -3, left: (3 - 6) = -3, (2 - 10) = -8\n(-8) * (-3) = 24, left: ((2 - 10) * (3 - 6)) = 24\nreach 24! expression: ((2 - 10) * (3 - 6))"}, {"input": "6 10 2 3\n", "output": "(6) * (10) = 60, left: (6 * 10) = 60, 2, 3\n(3) - (2) = 1, left: (3 - 2) = 1, (6 * 10) = 60\nroll back, left: (6 * 10) = 60, 2, 3\n(3) * (60) = 180, left: (3 * (6 * 10)) = 180, 2\nroll back, left: (6 * 10) = 60, 2, 3\nroll back, left: 6 10 2 3\n(10) - (6) = 4, left: (10 - 6) = 4, 2, 3\n(3) * (4) = 12, left: (3 * (10 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 * (10 - 6))) = 24\nreach 24! expression: (2 * (3 * (10 - 6)))"}, {"input": "6 10 2 3\n", "output": "(10) / (3) = 10/3, left: (10 / 3) = 10/3, 6, 2\nroll back, left: 6 10 2 3\n(10) + (3) = 13, left: (10 + 3) = 13, 6, 2\nroll back, left: 6 10 2 3\n(3) / (10) = 3/10, left: (3 / 10) = 3/10, 6, 2\nroll back, left: 6 10 2 3\n(10) - (6) = 4, left: (10 - 6) = 4, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (10 - 6) = 4\n(4) * (6) = 24, left: ((10 - 6) * (2 * 3)) = 24\nreach 24! expression: ((10 - 6) * (2 * 3))"}, {"input": "6 10 2 3\n", "output": "(10) / (6) = 5/3, left: (10 / 6) = 5/3, 2, 3\nroll back, left: 6 10 2 3\n(6) / (10) = 3/5, left: (6 / 10) = 3/5, 2, 3\nroll back, left: 6 10 2 3\n(6) - (10) = -4, left: (6 - 10) = -4, 2, 3\nroll back, left: 6 10 2 3\n(10) - (6) = 4, left: (10 - 6) = 4, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (10 - 6) = 4\n(4) * (6) = 24, left: ((10 - 6) * (2 * 3)) = 24\nreach 24! expression: ((10 - 6) * (2 * 3))"}, {"input": "6 10 2 3\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 6, 10\nroll back, left: 6 10 2 3\n(3) - (2) = 1, left: (3 - 2) = 1, 6, 10\nroll back, left: 6 10 2 3\n(2) * (3) = 6, left: (2 * 3) = 6, 6, 10\n(6) + (6) = 12, left: (6 + (2 * 3)) = 12, 10\nroll back, left: (2 * 3) = 6, 6, 10\n(10) - (6) = 4, left: (10 - 6) = 4, (2 * 3) = 6\n(6) * (4) = 24, left: ((2 * 3) * (10 - 6)) = 24\nreach 24! expression: ((2 * 3) * (10 - 6))"}, {"input": "3 13 13 8\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 3, 13\n(13) + (-5) = 8, left: (13 + (8 - 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 + (8 - 13))) = 24\nreach 24! expression: (3 * (13 + (8 - 13)))"}, {"input": "3 13 13 8\n", "output": "(13) / (13) = 1, left: (13 / 13) = 1, 3, 8\n(3) * (8) = 24, left: (3 * 8) = 24, (13 / 13) = 1\n(24) / (1) = 24, left: ((3 * 8) / (13 / 13)) = 24\nreach 24! expression: ((3 * 8) / (13 / 13))"}, {"input": "3 13 13 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 13, 13\n(13) / (24) = 13/24, left: (13 / (3 * 8)) = 13/24, 13\n(13) / (13/24) = 24, left: (13 / (13 / (3 * 8))) = 24\nreach 24! expression: (13 / (13 / (3 * 8)))"}, {"input": "11 8 8 1\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 8, 1\n(8) / (1) = 8, left: (8 / 1) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (8 / 1)) = 24\nreach 24! expression: ((11 - 8) * (8 / 1))"}, {"input": "11 8 8 1\n", "output": "(11) * (1) = 11, left: (11 * 1) = 11, 8, 8\n(11) - (8) = 3, left: ((11 * 1) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 * 1) - 8)) = 24\nreach 24! expression: (8 * ((11 * 1) - 8))"}, {"input": "11 8 8 1\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 8, 1\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, (11 - 8) = 3\n(3) / (1/8) = 24, left: ((11 - 8) / (1 / 8)) = 24\nreach 24! expression: ((11 - 8) / (1 / 8))"}, {"input": "11 8 8 1\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 8, 8\n(11) - (8) = 3, left: ((11 / 1) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 / 1) - 8)) = 24\nreach 24! expression: (8 * ((11 / 1) - 8))"}, {"input": "11 8 8 1\n", "output": "(8) * (1) = 8, left: (8 * 1) = 8, 11, 8\n(11) - (8) = 3, left: (11 - (8 * 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (11 - (8 * 1))) = 24\nreach 24! expression: (8 * (11 - (8 * 1)))"}, {"input": "11 8 8 1\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 11, 1\n(11) / (1) = 11, left: (11 / 1) = 11, (8 - 8) = 0\n(0) - (11) = -11, left: ((8 - 8) - (11 / 1)) = -11\nroll back, left: (11 / 1) = 11, (8 - 8) = 0\nroll back, left: (8 - 8) = 0, 11, 1\nroll back, left: 11 8 8 1\n(11) - (8) = 3, left: (11 - 8) = 3, 8, 1\n(8) / (1) = 8, left: (8 / 1) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (8 / 1)) = 24\nreach 24! expression: ((11 - 8) * (8 / 1))"}, {"input": "11 8 8 1\n", "output": "(1) / (11) = 1/11, left: (1 / 11) = 1/11, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (1 / 11) = 1/11\nroll back, left: (1 / 11) = 1/11, 8, 8\nroll back, left: 11 8 8 1\n(11) + (1) = 12, left: (11 + 1) = 12, 8, 8\nroll back, left: 11 8 8 1\n(11) / (1) = 11, left: (11 / 1) = 11, 8, 8\n(11) - (8) = 3, left: ((11 / 1) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 / 1) - 8)) = 24\nreach 24! expression: (8 * ((11 / 1) - 8))"}, {"input": "11 8 8 1\n", "output": "(11) / (8) = 11/8, left: (11 / 8) = 11/8, 8, 1\nroll back, left: 11 8 8 1\n(11) + (8) = 19, left: (11 + 8) = 19, 8, 1\n(8) * (19) = 152, left: (8 * (11 + 8)) = 152, 1\nroll back, left: (11 + 8) = 19, 8, 1\nroll back, left: 11 8 8 1\n(11) - (8) = 3, left: (11 - 8) = 3, 8, 1\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, (11 - 8) = 3\n(3) / (1/8) = 24, left: ((11 - 8) / (1 / 8)) = 24\nreach 24! expression: ((11 - 8) / (1 / 8))"}, {"input": "11 8 8 1\n", "output": "(8) + (1) = 9, left: (8 + 1) = 9, 11, 8\n(9) - (11) = -2, left: ((8 + 1) - 11) = -2, 8\nroll back, left: (8 + 1) = 9, 11, 8\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, (8 + 1) = 9\nroll back, left: (8 + 1) = 9, 11, 8\nroll back, left: 11 8 8 1\n(8) * (1) = 8, left: (8 * 1) = 8, 11, 8\n(11) - (8) = 3, left: (11 - (8 * 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (11 - (8 * 1))) = 24\nreach 24! expression: (8 * (11 - (8 * 1)))"}, {"input": "6 2 8 9\n", "output": "(2) * (8) = 16, left: (2 * 8) = 16, 6, 9\n(6) / (16) = 3/8, left: (6 / (2 * 8)) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / (6 / (2 * 8))) = 24\nreach 24! expression: (9 / (6 / (2 * 8)))"}, {"input": "6 2 8 9\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 6, 8\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, (2 * 9) = 18\n(18) * (4/3) = 24, left: ((2 * 9) * (8 / 6)) = 24\nreach 24! expression: ((2 * 9) * (8 / 6))"}, {"input": "6 2 8 9\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 6, 2\n(72) / (6) = 12, left: ((8 * 9) / 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((8 * 9) / 6)) = 24\nreach 24! expression: (2 * ((8 * 9) / 6))"}, {"input": "6 2 8 9\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 6, 8\n(18) / (6) = 3, left: ((2 * 9) / 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 * 9) / 6)) = 24\nreach 24! expression: (8 * ((2 * 9) / 6))"}, {"input": "6 2 8 9\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 8, 9\n(12) - (9) = 3, left: ((6 * 2) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 * 2) - 9)) = 24\nreach 24! expression: (8 * ((6 * 2) - 9))"}, {"input": "6 2 8 9\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 6, 9\n(6) - (9) = -3, left: ((8 - 2) - 9) = -3, 6\n(6) * (-3) = -18, left: (6 * ((8 - 2) - 9)) = -18\nroll back, left: ((8 - 2) - 9) = -3, 6\nroll back, left: (8 - 2) = 6, 6, 9\nroll back, left: 6 2 8 9\n(2) * (8) = 16, left: (2 * 8) = 16, 6, 9\n(6) / (16) = 3/8, left: (6 / (2 * 8)) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / (6 / (2 * 8))) = 24\nreach 24! expression: (9 / (6 / (2 * 8)))"}, {"input": "6 2 8 9\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 6, 8\n(-7) - (6) = -13, left: ((2 - 9) - 6) = -13, 8\nroll back, left: (2 - 9) = -7, 6, 8\n(6) - (8) = -2, left: (6 - 8) = -2, (2 - 9) = -7\nroll back, left: (2 - 9) = -7, 6, 8\nroll back, left: 6 2 8 9\n(2) * (9) = 18, left: (2 * 9) = 18, 6, 8\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, (2 * 9) = 18\n(18) * (4/3) = 24, left: ((2 * 9) * (8 / 6)) = 24\nreach 24! expression: ((2 * 9) * (8 / 6))"}, {"input": "6 2 8 9\n", "output": "(8) - (9) = -1, left: (8 - 9) = -1, 6, 2\n(6) + (-1) = 5, left: (6 + (8 - 9)) = 5, 2\n(5) / (2) = 5/2, left: ((6 + (8 - 9)) / 2) = 5/2\nroll back, left: (6 + (8 - 9)) = 5, 2\nroll back, left: (8 - 9) = -1, 6, 2\nroll back, left: 6 2 8 9\n(8) * (9) = 72, left: (8 * 9) = 72, 6, 2\n(72) / (6) = 12, left: ((8 * 9) / 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((8 * 9) / 6)) = 24\nreach 24! expression: (2 * ((8 * 9) / 6))"}, {"input": "6 2 8 9\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 8, 9\n(9) + (12) = 21, left: (9 + (6 * 2)) = 21, 8\n(21) - (8) = 13, left: ((9 + (6 * 2)) - 8) = 13\nroll back, left: (9 + (6 * 2)) = 21, 8\n(8) * (21) = 168, left: (8 * (9 + (6 * 2))) = 168\nroll back, left: (9 + (6 * 2)) = 21, 8\nroll back, left: (6 * 2) = 12, 8, 9\n(12) - (9) = 3, left: ((6 * 2) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 * 2) - 9)) = 24\nreach 24! expression: (8 * ((6 * 2) - 9))"}, {"input": "6 2 8 9\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 6, 8\n(6) + (18) = 24, left: (6 + (2 * 9)) = 24, 8\n(8) + (24) = 32, left: (8 + (6 + (2 * 9))) = 32\nroll back, left: (6 + (2 * 9)) = 24, 8\nroll back, left: (2 * 9) = 18, 6, 8\n(18) / (6) = 3, left: ((2 * 9) / 6) = 3, 8\n(8) + (3) = 11, left: (8 + ((2 * 9) / 6)) = 11\nroll back, left: ((2 * 9) / 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 * 9) / 6)) = 24\nreach 24! expression: (8 * ((2 * 9) / 6))"}, {"input": "3 11 8 2\n", "output": "(3) + (8) = 11, left: (3 + 8) = 11, 11, 2\n(11) + (11) = 22, left: (11 + (3 + 8)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 + (3 + 8))) = 24\nreach 24! expression: (2 + (11 + (3 + 8)))"}, {"input": "3 11 8 2\n", "output": "(11) + (8) = 19, left: (11 + 8) = 19, 3, 2\n(2) + (19) = 21, left: (2 + (11 + 8)) = 21, 3\n(3) + (21) = 24, left: (3 + (2 + (11 + 8))) = 24\nreach 24! expression: (3 + (2 + (11 + 8)))"}, {"input": "3 11 8 2\n", "output": "(3) + (2) = 5, left: (3 + 2) = 5, 11, 8\n(11) + (5) = 16, left: (11 + (3 + 2)) = 16, 8\n(8) + (16) = 24, left: (8 + (11 + (3 + 2))) = 24\nreach 24! expression: (8 + (11 + (3 + 2)))"}, {"input": "3 11 8 2\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 8, 2\n(2) * (-8) = -16, left: (2 * (3 - 11)) = -16, 8\n(8) - (-16) = 24, left: (8 - (2 * (3 - 11))) = 24\nreach 24! expression: (8 - (2 * (3 - 11)))"}, {"input": "3 11 8 2\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 11, 8\n(8) - (11) = -3, left: (8 - 11) = -3, (2 - 3) = -1\nroll back, left: (2 - 3) = -1, 11, 8\nroll back, left: 3 11 8 2\n(3) + (2) = 5, left: (3 + 2) = 5, 11, 8\n(5) - (11) = -6, left: ((3 + 2) - 11) = -6, 8\nroll back, left: (3 + 2) = 5, 11, 8\n(11) + (5) = 16, left: (11 + (3 + 2)) = 16, 8\n(8) + (16) = 24, left: (8 + (11 + (3 + 2))) = 24\nreach 24! expression: (8 + (11 + (3 + 2)))"}, {"input": "3 11 8 2\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 3, 2\nroll back, left: 3 11 8 2\n(11) - (8) = 3, left: (11 - 8) = 3, 3, 2\n(3) * (3) = 9, left: (3 * (11 - 8)) = 9, 2\nroll back, left: (11 - 8) = 3, 3, 2\nroll back, left: 3 11 8 2\n(11) + (8) = 19, left: (11 + 8) = 19, 3, 2\n(2) + (19) = 21, left: (2 + (11 + 8)) = 21, 3\n(3) + (21) = 24, left: (3 + (2 + (11 + 8))) = 24\nreach 24! expression: (3 + (2 + (11 + 8)))"}, {"input": "3 11 8 2\n", "output": "(3) * (11) = 33, left: (3 * 11) = 33, 8, 2\nroll back, left: 3 11 8 2\n(11) / (3) = 11/3, left: (11 / 3) = 11/3, 8, 2\nroll back, left: 3 11 8 2\n(3) / (11) = 3/11, left: (3 / 11) = 3/11, 8, 2\nroll back, left: 3 11 8 2\n(3) - (11) = -8, left: (3 - 11) = -8, 8, 2\n(2) * (-8) = -16, left: (2 * (3 - 11)) = -16, 8\n(8) - (-16) = 24, left: (8 - (2 * (3 - 11))) = 24\nreach 24! expression: (8 - (2 * (3 - 11)))"}, {"input": "3 11 8 2\n", "output": "(3) + (8) = 11, left: (3 + 8) = 11, 11, 2\n(11) - (11) = 0, left: ((3 + 8) - 11) = 0, 2\n(2) + (0) = 2, left: (2 + ((3 + 8) - 11)) = 2\nroll back, left: ((3 + 8) - 11) = 0, 2\nroll back, left: (3 + 8) = 11, 11, 2\n(11) + (11) = 22, left: (11 + (3 + 8)) = 22, 2\n(22) / (2) = 11, left: ((11 + (3 + 8)) / 2) = 11\nroll back, left: (11 + (3 + 8)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 + (3 + 8))) = 24\nreach 24! expression: (2 + (11 + (3 + 8)))"}, {"input": "12 3 1 7\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (12 / 3) = 4\n(4) * (6) = 24, left: ((12 / 3) * (7 - 1)) = 24\nreach 24! expression: ((12 / 3) * (7 - 1))"}, {"input": "12 3 1 7\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 12, 3\n(6) / (3) = 2, left: ((7 - 1) / 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((7 - 1) / 3)) = 24\nreach 24! expression: (12 * ((7 - 1) / 3))"}, {"input": "12 3 1 7\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (3 / 12) = 1/4\n(6) / (1/4) = 24, left: ((7 - 1) / (3 / 12)) = 24\nreach 24! expression: ((7 - 1) / (3 / 12))"}, {"input": "12 3 1 7\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 12, 3\n(12) * (6) = 72, left: (12 * (7 - 1)) = 72, 3\n(72) / (3) = 24, left: ((12 * (7 - 1)) / 3) = 24\nreach 24! expression: ((12 * (7 - 1)) / 3)"}, {"input": "12 3 1 7\n", "output": "(12) * (1) = 12, left: (12 * 1) = 12, 3, 7\n(12) - (3) = 9, left: ((12 * 1) - 3) = 9, 7\nroll back, left: (12 * 1) = 12, 3, 7\nroll back, left: 12 3 1 7\n(12) - (1) = 11, left: (12 - 1) = 11, 3, 7\nroll back, left: 12 3 1 7\n(12) / (3) = 4, left: (12 / 3) = 4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (12 / 3) = 4\n(4) * (6) = 24, left: ((12 / 3) * (7 - 1)) = 24\nreach 24! expression: ((12 / 3) * (7 - 1))"}, {"input": "12 3 1 7\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 12, 1\nroll back, left: 12 3 1 7\n(12) + (7) = 19, left: (12 + 7) = 19, 3, 1\nroll back, left: 12 3 1 7\n(12) + (3) = 15, left: (12 + 3) = 15, 1, 7\nroll back, left: 12 3 1 7\n(3) / (12) = 1/4, left: (3 / 12) = 1/4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (3 / 12) = 1/4\n(6) / (1/4) = 24, left: ((7 - 1) / (3 / 12)) = 24\nreach 24! expression: ((7 - 1) / (3 / 12))"}, {"input": "12 3 1 7\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 12, 1\nroll back, left: 12 3 1 7\n(3) - (7) = -4, left: (3 - 7) = -4, 12, 1\n(1) * (-4) = -4, left: (1 * (3 - 7)) = -4, 12\nroll back, left: (3 - 7) = -4, 12, 1\nroll back, left: 12 3 1 7\n(3) / (12) = 1/4, left: (3 / 12) = 1/4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (3 / 12) = 1/4\n(6) / (1/4) = 24, left: ((7 - 1) / (3 / 12)) = 24\nreach 24! expression: ((7 - 1) / (3 / 12))"}, {"input": "12 3 1 7\n", "output": "(1) / (3) = 1/3, left: (1 / 3) = 1/3, 12, 7\nroll back, left: 12 3 1 7\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, 3, 7\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, (1 / 12) = 1/12\nroll back, left: (1 / 12) = 1/12, 3, 7\nroll back, left: 12 3 1 7\n(7) - (1) = 6, left: (7 - 1) = 6, 12, 3\n(6) / (3) = 2, left: ((7 - 1) / 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((7 - 1) / 3)) = 24\nreach 24! expression: (12 * ((7 - 1) / 3))"}, {"input": "12 3 1 7\n", "output": "(12) / (7) = 12/7, left: (12 / 7) = 12/7, 3, 1\nroll back, left: 12 3 1 7\n(12) / (1) = 12, left: (12 / 1) = 12, 3, 7\nroll back, left: 12 3 1 7\n(1) + (7) = 8, left: (1 + 7) = 8, 12, 3\nroll back, left: 12 3 1 7\n(7) - (1) = 6, left: (7 - 1) = 6, 12, 3\n(12) * (6) = 72, left: (12 * (7 - 1)) = 72, 3\n(72) / (3) = 24, left: ((12 * (7 - 1)) / 3) = 24\nreach 24! expression: ((12 * (7 - 1)) / 3)"}, {"input": "8 3 9 11\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 8, 11\n(8) + (27) = 35, left: (8 + (3 * 9)) = 35, 11\n(35) - (11) = 24, left: ((8 + (3 * 9)) - 11) = 24\nreach 24! expression: ((8 + (3 * 9)) - 11)"}, {"input": "8 3 9 11\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 3, 9\n(3) * (9) = 27, left: (3 * 9) = 27, (8 - 11) = -3\n(-3) + (27) = 24, left: ((8 - 11) + (3 * 9)) = 24\nreach 24! expression: ((8 - 11) + (3 * 9))"}, {"input": "8 3 9 11\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 8, 11\n(11) - (8) = 3, left: (11 - 8) = 3, (3 * 9) = 27\n(27) - (3) = 24, left: ((3 * 9) - (11 - 8)) = 24\nreach 24! expression: ((3 * 9) - (11 - 8))"}, {"input": "8 3 9 11\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 3, 9\n(9) * (3) = 27, left: (9 * (11 - 8)) = 27, 3\n(27) - (3) = 24, left: ((9 * (11 - 8)) - 3) = 24\nreach 24! expression: ((9 * (11 - 8)) - 3)"}, {"input": "8 3 9 11\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 3, 9\n(9) * (3) = 27, left: (9 * (11 - 8)) = 27, 3\n(3) * (27) = 81, left: (3 * (9 * (11 - 8))) = 81\nroll back, left: (9 * (11 - 8)) = 27, 3\n(3) + (27) = 30, left: (3 + (9 * (11 - 8))) = 30\nroll back, left: (9 * (11 - 8)) = 27, 3\n(27) / (3) = 9, left: ((9 * (11 - 8)) / 3) = 9\nroll back, left: (9 * (11 - 8)) = 27, 3\n(27) - (3) = 24, left: ((9 * (11 - 8)) - 3) = 24\nreach 24! expression: ((9 * (11 - 8)) - 3)"}, {"input": "8 3 9 11\n", "output": "(8) * (3) = 24, left: (8 * 3) = 24, 9, 11\n(11) / (9) = 11/9, left: (11 / 9) = 11/9, (8 * 3) = 24\nroll back, left: (8 * 3) = 24, 9, 11\nroll back, left: 8 3 9 11\n(8) + (3) = 11, left: (8 + 3) = 11, 9, 11\nroll back, left: 8 3 9 11\n(8) - (11) = -3, left: (8 - 11) = -3, 3, 9\n(3) * (9) = 27, left: (3 * 9) = 27, (8 - 11) = -3\n(-3) + (27) = 24, left: ((8 - 11) + (3 * 9)) = 24\nreach 24! expression: ((8 - 11) + (3 * 9))"}, {"input": "8 3 9 11\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 8, 11\nroll back, left: 8 3 9 11\n(9) - (3) = 6, left: (9 - 3) = 6, 8, 11\n(6) - (11) = -5, left: ((9 - 3) - 11) = -5, 8\nroll back, left: (9 - 3) = 6, 8, 11\nroll back, left: 8 3 9 11\n(3) * (9) = 27, left: (3 * 9) = 27, 8, 11\n(8) + (27) = 35, left: (8 + (3 * 9)) = 35, 11\n(35) - (11) = 24, left: ((8 + (3 * 9)) - 11) = 24\nreach 24! expression: ((8 + (3 * 9)) - 11)"}, {"input": "8 3 9 11\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 8, 9\n(8) - (14) = -6, left: (8 - (3 + 11)) = -6, 9\nroll back, left: (3 + 11) = 14, 8, 9\nroll back, left: 8 3 9 11\n(8) / (9) = 8/9, left: (8 / 9) = 8/9, 3, 11\nroll back, left: 8 3 9 11\n(8) - (11) = -3, left: (8 - 11) = -3, 3, 9\n(3) * (9) = 27, left: (3 * 9) = 27, (8 - 11) = -3\n(-3) + (27) = 24, left: ((8 - 11) + (3 * 9)) = 24\nreach 24! expression: ((8 - 11) + (3 * 9))"}, {"input": "8 3 9 11\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 8, 9\nroll back, left: 8 3 9 11\n(11) / (3) = 11/3, left: (11 / 3) = 11/3, 8, 9\n(11/3) - (8) = -13/3, left: ((11 / 3) - 8) = -13/3, 9\nroll back, left: (11 / 3) = 11/3, 8, 9\nroll back, left: 8 3 9 11\n(3) * (9) = 27, left: (3 * 9) = 27, 8, 11\n(11) - (8) = 3, left: (11 - 8) = 3, (3 * 9) = 27\n(27) - (3) = 24, left: ((3 * 9) - (11 - 8)) = 24\nreach 24! expression: ((3 * 9) - (11 - 8))"}, {"input": "9 1 13 11\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 1, 13\n(1) - (13) = -12, left: (1 - 13) = -12, (9 - 11) = -2\n(-2) * (-12) = 24, left: ((9 - 11) * (1 - 13)) = 24\nreach 24! expression: ((9 - 11) * (1 - 13))"}, {"input": "9 1 13 11\n", "output": "(1) - (13) = -12, left: (1 - 13) = -12, 9, 11\n(9) - (11) = -2, left: (9 - 11) = -2, (1 - 13) = -12\n(-12) * (-2) = 24, left: ((1 - 13) * (9 - 11)) = 24\nreach 24! expression: ((1 - 13) * (9 - 11))"}, {"input": "9 1 13 11\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (11 - 9) = 2\n(2) * (12) = 24, left: ((11 - 9) * (13 - 1)) = 24\nreach 24! expression: ((11 - 9) * (13 - 1))"}, {"input": "9 1 13 11\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 13, 11\nroll back, left: 9 1 13 11\n(1) - (9) = -8, left: (1 - 9) = -8, 13, 11\n(13) * (11) = 143, left: (13 * 11) = 143, (1 - 9) = -8\nroll back, left: (1 - 9) = -8, 13, 11\nroll back, left: 9 1 13 11\n(11) - (9) = 2, left: (11 - 9) = 2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (11 - 9) = 2\n(2) * (12) = 24, left: ((11 - 9) * (13 - 1)) = 24\nreach 24! expression: ((11 - 9) * (13 - 1))"}, {"input": "9 1 13 11\n", "output": "(13) * (11) = 143, left: (13 * 11) = 143, 9, 1\nroll back, left: 9 1 13 11\n(13) + (11) = 24, left: (13 + 11) = 24, 9, 1\n(1) - (24) = -23, left: (1 - (13 + 11)) = -23, 9\nroll back, left: (13 + 11) = 24, 9, 1\nroll back, left: 9 1 13 11\n(11) - (9) = 2, left: (11 - 9) = 2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (11 - 9) = 2\n(2) * (12) = 24, left: ((11 - 9) * (13 - 1)) = 24\nreach 24! expression: ((11 - 9) * (13 - 1))"}, {"input": "9 1 13 11\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 9, 1\nroll back, left: 9 1 13 11\n(11) - (1) = 10, left: (11 - 1) = 10, 9, 13\nroll back, left: 9 1 13 11\n(11) / (1) = 11, left: (11 / 1) = 11, 9, 13\nroll back, left: 9 1 13 11\n(9) - (11) = -2, left: (9 - 11) = -2, 1, 13\n(1) - (13) = -12, left: (1 - 13) = -12, (9 - 11) = -2\n(-2) * (-12) = 24, left: ((9 - 11) * (1 - 13)) = 24\nreach 24! expression: ((9 - 11) * (1 - 13))"}, {"input": "3 5 2 5\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 5, 2\n(5) - (2) = 3, left: (5 - 2) = 3, (3 + 5) = 8\n(8) * (3) = 24, left: ((3 + 5) * (5 - 2)) = 24\nreach 24! expression: ((3 + 5) * (5 - 2))"}, {"input": "3 5 2 5\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (3 - 2) = 1\n(25) - (1) = 24, left: ((5 * 5) - (3 - 2)) = 24\nreach 24! expression: ((5 * 5) - (3 - 2))"}, {"input": "3 5 2 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 3, 5\n(3) + (5) = 8, left: (3 + 5) = 8, (5 - 2) = 3\n(3) * (8) = 24, left: ((5 - 2) * (3 + 5)) = 24\nreach 24! expression: ((5 - 2) * (3 + 5))"}, {"input": "3 5 2 5\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 3, 2\n(10) - (2) = 8, left: ((5 + 5) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 + 5) - 2)) = 24\nreach 24! expression: (3 * ((5 + 5) - 2))"}, {"input": "3 5 2 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 3, 2\n(3) - (25) = -22, left: (3 - (5 * 5)) = -22, 2\n(2) - (-22) = 24, left: (2 - (3 - (5 * 5))) = 24\nreach 24! expression: (2 - (3 - (5 * 5)))"}, {"input": "3 5 2 5\n", "output": "(3) * (5) = 15, left: (3 * 5) = 15, 5, 2\nroll back, left: 3 5 2 5\n(3) + (5) = 8, left: (3 + 5) = 8, 5, 2\n(5) + (2) = 7, left: (5 + 2) = 7, (3 + 5) = 8\n(8) + (7) = 15, left: ((3 + 5) + (5 + 2)) = 15\nroll back, left: (5 + 2) = 7, (3 + 5) = 8\nroll back, left: (3 + 5) = 8, 5, 2\n(5) - (2) = 3, left: (5 - 2) = 3, (3 + 5) = 8\n(8) * (3) = 24, left: ((3 + 5) * (5 - 2)) = 24\nreach 24! expression: ((3 + 5) * (5 - 2))"}, {"input": "3 5 2 5\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 3, 5\nroll back, left: 3 5 2 5\n(2) * (5) = 10, left: (2 * 5) = 10, 3, 5\n(10) / (5) = 2, left: ((2 * 5) / 5) = 2, 3\nroll back, left: (2 * 5) = 10, 3, 5\nroll back, left: 3 5 2 5\n(5) - (2) = 3, left: (5 - 2) = 3, 3, 5\n(3) + (5) = 8, left: (3 + 5) = 8, (5 - 2) = 3\n(3) * (8) = 24, left: ((5 - 2) * (3 + 5)) = 24\nreach 24! expression: ((5 - 2) * (3 + 5))"}, {"input": "3 5 2 5\n", "output": "(3) + (2) = 5, left: (3 + 2) = 5, 5, 5\n(5) - (5) = 0, left: (5 - 5) = 0, (3 + 2) = 5\nroll back, left: (3 + 2) = 5, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (3 + 2) = 5\nroll back, left: (3 + 2) = 5, 5, 5\nroll back, left: 3 5 2 5\n(3) - (2) = 1, left: (3 - 2) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (3 - 2) = 1\n(25) - (1) = 24, left: ((5 * 5) - (3 - 2)) = 24\nreach 24! expression: ((5 * 5) - (3 - 2))"}, {"input": "3 5 2 5\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 3, 2\n(2) + (0) = 2, left: (2 + (5 - 5)) = 2, 3\nroll back, left: (5 - 5) = 0, 3, 2\n(0) / (2) = 0, left: ((5 - 5) / 2) = 0, 3\nroll back, left: (5 - 5) = 0, 3, 2\nroll back, left: 3 5 2 5\n(5) + (5) = 10, left: (5 + 5) = 10, 3, 2\n(10) - (2) = 8, left: ((5 + 5) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 + 5) - 2)) = 24\nreach 24! expression: (3 * ((5 + 5) - 2))"}, {"input": "12 12 12 12\n", "output": "(12) - (12) = 0, left: (12 - 12) = 0, 12, 12\n(12) - (0) = 12, left: (12 - (12 - 12)) = 12, 12\n(12) + (12) = 24, left: (12 + (12 - (12 - 12))) = 24\nreach 24! expression: (12 + (12 - (12 - 12)))"}, {"input": "12 12 12 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 12, 12\n(12) / (24) = 1/2, left: (12 / (12 + 12)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (12 / (12 + 12))) = 24\nreach 24! expression: (12 / (12 / (12 + 12)))"}, {"input": "12 12 12 12\n", "output": "(12) * (12) = 144, left: (12 * 12) = 144, 12, 12\n(144) / (12) = 12, left: ((12 * 12) / 12) = 12, 12\n(12) + (12) = 24, left: (12 + ((12 * 12) / 12)) = 24\nreach 24! expression: (12 + ((12 * 12) / 12))"}, {"input": "3 12 11 9\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 3, 11\n(11) + (-3) = 8, left: (11 + (9 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 + (9 - 12))) = 24\nreach 24! expression: (3 * (11 + (9 - 12)))"}, {"input": "3 12 11 9\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 3, 11\n(11) - (3) = 8, left: (11 - (12 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 - (12 - 9))) = 24\nreach 24! expression: (3 * (11 - (12 - 9)))"}, {"input": "3 12 11 9\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 12, 9\n(9) - (12) = -3, left: (9 - 12) = -3, (3 - 11) = -8\n(-8) * (-3) = 24, left: ((3 - 11) * (9 - 12)) = 24\nreach 24! expression: ((3 - 11) * (9 - 12))"}, {"input": "3 12 11 9\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (12 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (12 - 11))) = 24\nreach 24! expression: (3 * (9 - (12 - 11)))"}, {"input": "3 12 11 9\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 3, 9\n(3) / (1) = 3, left: (3 / (12 - 11)) = 3, 9\n(9) / (3) = 3, left: (9 / (3 / (12 - 11))) = 3\nroll back, left: (3 / (12 - 11)) = 3, 9\nroll back, left: (12 - 11) = 1, 3, 9\n(9) * (1) = 9, left: (9 * (12 - 11)) = 9, 3\nroll back, left: (12 - 11) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (12 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (12 - 11))) = 24\nreach 24! expression: (3 * (9 - (12 - 11)))"}, {"input": "3 12 11 9\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 12, 11\nroll back, left: 3 12 11 9\n(3) - (9) = -6, left: (3 - 9) = -6, 12, 11\nroll back, left: 3 12 11 9\n(3) * (9) = 27, left: (3 * 9) = 27, 12, 11\nroll back, left: 3 12 11 9\n(9) - (12) = -3, left: (9 - 12) = -3, 3, 11\n(11) + (-3) = 8, left: (11 + (9 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 + (9 - 12))) = 24\nreach 24! expression: (3 * (11 + (9 - 12)))"}, {"input": "3 7 9 5\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 3, 7\n(3) + (14) = 17, left: (3 + (9 + 5)) = 17, 7\n(7) + (17) = 24, left: (7 + (3 + (9 + 5))) = 24\nreach 24! expression: (7 + (3 + (9 + 5)))"}, {"input": "3 7 9 5\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 3, 5\n(5) + (16) = 21, left: (5 + (7 + 9)) = 21, 3\n(3) + (21) = 24, left: (3 + (5 + (7 + 9))) = 24\nreach 24! expression: (3 + (5 + (7 + 9)))"}, {"input": "3 7 9 5\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 7, 5\n(7) - (5) = 2, left: (7 - 5) = 2, (3 + 9) = 12\n(12) * (2) = 24, left: ((3 + 9) * (7 - 5)) = 24\nreach 24! expression: ((3 + 9) * (7 - 5))"}, {"input": "3 7 9 5\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 9, 5\n(9) * (5) = 45, left: (9 * 5) = 45, (3 * 7) = 21\n(45) - (21) = 24, left: ((9 * 5) - (3 * 7)) = 24\nreach 24! expression: ((9 * 5) - (3 * 7))"}, {"input": "3 7 9 5\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 3, 5\n(3) + (5) = 8, left: (3 + 5) = 8, (7 + 9) = 16\n(16) + (8) = 24, left: ((7 + 9) + (3 + 5)) = 24\nreach 24! expression: ((7 + 9) + (3 + 5))"}, {"input": "3 7 9 5\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 9, 5\n(5) / (21) = 5/21, left: (5 / (3 * 7)) = 5/21, 9\nroll back, left: (3 * 7) = 21, 9, 5\n(5) + (21) = 26, left: (5 + (3 * 7)) = 26, 9\nroll back, left: (3 * 7) = 21, 9, 5\n(21) / (9) = 7/3, left: ((3 * 7) / 9) = 7/3, 5\nroll back, left: (3 * 7) = 21, 9, 5\n(9) * (5) = 45, left: (9 * 5) = 45, (3 * 7) = 21\n(45) - (21) = 24, left: ((9 * 5) - (3 * 7)) = 24\nreach 24! expression: ((9 * 5) - (3 * 7))"}, {"input": "3 7 9 5\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 3, 7\n(7) * (5/9) = 35/9, left: (7 * (5 / 9)) = 35/9, 3\nroll back, left: (5 / 9) = 5/9, 3, 7\nroll back, left: 3 7 9 5\n(9) - (5) = 4, left: (9 - 5) = 4, 3, 7\nroll back, left: 3 7 9 5\n(9) + (5) = 14, left: (9 + 5) = 14, 3, 7\n(3) + (14) = 17, left: (3 + (9 + 5)) = 17, 7\n(7) + (17) = 24, left: (7 + (3 + (9 + 5))) = 24\nreach 24! expression: (7 + (3 + (9 + 5)))"}, {"input": "3 7 9 5\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 7, 5\n(7) - (5) = 2, left: (7 - 5) = 2, (3 + 9) = 12\n(12) * (2) = 24, left: ((3 + 9) * (7 - 5)) = 24\nreach 24! expression: ((3 + 9) * (7 - 5))"}, {"input": "3 7 9 5\n", "output": "(7) * (9) = 63, left: (7 * 9) = 63, 3, 5\n(3) - (63) = -60, left: (3 - (7 * 9)) = -60, 5\n(5) - (-60) = 65, left: (5 - (3 - (7 * 9))) = 65\nroll back, left: (3 - (7 * 9)) = -60, 5\nroll back, left: (7 * 9) = 63, 3, 5\nroll back, left: 3 7 9 5\n(7) + (9) = 16, left: (7 + 9) = 16, 3, 5\n(3) + (5) = 8, left: (3 + 5) = 8, (7 + 9) = 16\n(16) + (8) = 24, left: ((7 + 9) + (3 + 5)) = 24\nreach 24! expression: ((7 + 9) + (3 + 5))"}, {"input": "3 7 9 5\n", "output": "(9) / (7) = 9/7, left: (9 / 7) = 9/7, 3, 5\nroll back, left: 3 7 9 5\n(7) * (9) = 63, left: (7 * 9) = 63, 3, 5\n(63) - (5) = 58, left: ((7 * 9) - 5) = 58, 3\nroll back, left: (7 * 9) = 63, 3, 5\nroll back, left: 3 7 9 5\n(7) + (9) = 16, left: (7 + 9) = 16, 3, 5\n(5) + (16) = 21, left: (5 + (7 + 9)) = 21, 3\n(3) + (21) = 24, left: (3 + (5 + (7 + 9))) = 24\nreach 24! expression: (3 + (5 + (7 + 9)))"}, {"input": "3 7 9 5\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 7, 5\n(7) - (5) = 2, left: (7 - 5) = 2, (3 + 9) = 12\n(12) * (2) = 24, left: ((3 + 9) * (7 - 5)) = 24\nreach 24! expression: ((3 + 9) * (7 - 5))"}, {"input": "3 7 9 5\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 7, 5\n(7) - (5) = 2, left: (7 - 5) = 2, (3 + 9) = 12\n(12) * (2) = 24, left: ((3 + 9) * (7 - 5)) = 24\nreach 24! expression: ((3 + 9) * (7 - 5))"}, {"input": "3 7 9 5\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 7, 5\n(7) - (5) = 2, left: (7 - 5) = 2, (3 + 9) = 12\n(12) * (2) = 24, left: ((3 + 9) * (7 - 5)) = 24\nreach 24! expression: ((3 + 9) * (7 - 5))"}, {"input": "11 1 7 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 11, 1\n(11) + (14) = 25, left: (11 + (7 + 7)) = 25, 1\n(25) - (1) = 24, left: ((11 + (7 + 7)) - 1) = 24\nreach 24! expression: ((11 + (7 + 7)) - 1)"}, {"input": "11 1 7 7\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 7, 7\n(7) + (7) = 14, left: (7 + 7) = 14, (1 - 11) = -10\n(14) - (-10) = 24, left: ((7 + 7) - (1 - 11)) = 24\nreach 24! expression: ((7 + 7) - (1 - 11))"}, {"input": "11 1 7 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 11, 1\n(14) - (1) = 13, left: ((7 + 7) - 1) = 13, 11\n(11) + (13) = 24, left: (11 + ((7 + 7) - 1)) = 24\nreach 24! expression: (11 + ((7 + 7) - 1))"}, {"input": "11 1 7 7\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (11 - 7) = 4\n(4) * (6) = 24, left: ((11 - 7) * (7 - 1)) = 24\nreach 24! expression: ((11 - 7) * (7 - 1))"}, {"input": "11 1 7 7\n", "output": "(7) - (7) = 0, left: (7 - 7) = 0, 11, 1\n(11) - (0) = 11, left: (11 - (7 - 7)) = 11, 1\nroll back, left: (7 - 7) = 0, 11, 1\nroll back, left: 11 1 7 7\n(7) * (7) = 49, left: (7 * 7) = 49, 11, 1\nroll back, left: 11 1 7 7\n(7) + (7) = 14, left: (7 + 7) = 14, 11, 1\n(11) + (14) = 25, left: (11 + (7 + 7)) = 25, 1\n(25) - (1) = 24, left: ((11 + (7 + 7)) - 1) = 24\nreach 24! expression: ((11 + (7 + 7)) - 1)"}, {"input": "11 1 7 7\n", "output": "(7) - (7) = 0, left: (7 - 7) = 0, 11, 1\nroll back, left: 11 1 7 7\n(7) / (7) = 1, left: (7 / 7) = 1, 11, 1\n(11) * (1) = 11, left: (11 * (7 / 7)) = 11, 1\nroll back, left: (7 / 7) = 1, 11, 1\nroll back, left: 11 1 7 7\n(7) + (7) = 14, left: (7 + 7) = 14, 11, 1\n(14) - (1) = 13, left: ((7 + 7) - 1) = 13, 11\n(11) + (13) = 24, left: (11 + ((7 + 7) - 1)) = 24\nreach 24! expression: (11 + ((7 + 7) - 1))"}, {"input": "11 1 7 7\n", "output": "(11) * (7) = 77, left: (11 * 7) = 77, 1, 7\n(1) * (77) = 77, left: (1 * (11 * 7)) = 77, 7\nroll back, left: (11 * 7) = 77, 1, 7\n(1) + (77) = 78, left: (1 + (11 * 7)) = 78, 7\nroll back, left: (11 * 7) = 77, 1, 7\nroll back, left: 11 1 7 7\n(11) - (7) = 4, left: (11 - 7) = 4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (11 - 7) = 4\n(4) * (6) = 24, left: ((11 - 7) * (7 - 1)) = 24\nreach 24! expression: ((11 - 7) * (7 - 1))"}, {"input": "11 1 7 7\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 7, 7\n(7) - (12) = -5, left: (7 - (11 + 1)) = -5, 7\nroll back, left: (11 + 1) = 12, 7, 7\n(7) / (12) = 7/12, left: (7 / (11 + 1)) = 7/12, 7\nroll back, left: (11 + 1) = 12, 7, 7\nroll back, left: 11 1 7 7\n(1) - (11) = -10, left: (1 - 11) = -10, 7, 7\n(7) + (7) = 14, left: (7 + 7) = 14, (1 - 11) = -10\n(14) - (-10) = 24, left: ((7 + 7) - (1 - 11)) = 24\nreach 24! expression: ((7 + 7) - (1 - 11))"}, {"input": "1 11 5 3\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (1 + 11)) = 24\nreach 24! expression: ((5 - 3) * (1 + 11))"}, {"input": "1 11 5 3\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 11, 5\n(11) - (5) = 6, left: (11 - 5) = 6, (1 + 3) = 4\n(4) * (6) = 24, left: ((1 + 3) * (11 - 5)) = 24\nreach 24! expression: ((1 + 3) * (11 - 5))"}, {"input": "1 11 5 3\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 5, 3\n(5) - (3) = 2, left: (5 - 3) = 2, (1 + 11) = 12\n(12) * (2) = 24, left: ((1 + 11) * (5 - 3)) = 24\nreach 24! expression: ((1 + 11) * (5 - 3))"}, {"input": "1 11 5 3\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 1, 11\n(-2) - (1) = -3, left: ((3 - 5) - 1) = -3, 11\nroll back, left: (3 - 5) = -2, 1, 11\nroll back, left: 1 11 5 3\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, 1, 11\nroll back, left: 1 11 5 3\n(5) - (3) = 2, left: (5 - 3) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (1 + 11)) = 24\nreach 24! expression: ((5 - 3) * (1 + 11))"}, {"input": "1 11 5 3\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 11, 5\n(11) - (4) = 7, left: (11 - (1 + 3)) = 7, 5\n(7) - (5) = 2, left: ((11 - (1 + 3)) - 5) = 2\nroll back, left: (11 - (1 + 3)) = 7, 5\nroll back, left: (1 + 3) = 4, 11, 5\n(11) * (5) = 55, left: (11 * 5) = 55, (1 + 3) = 4\nroll back, left: (1 + 3) = 4, 11, 5\n(11) - (5) = 6, left: (11 - 5) = 6, (1 + 3) = 4\n(4) * (6) = 24, left: ((1 + 3) * (11 - 5)) = 24\nreach 24! expression: ((1 + 3) * (11 - 5))"}, {"input": "1 11 5 3\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 5, 3\n(10) - (5) = 5, left: ((11 - 1) - 5) = 5, 3\n(3) * (5) = 15, left: (3 * ((11 - 1) - 5)) = 15\nroll back, left: ((11 - 1) - 5) = 5, 3\nroll back, left: (11 - 1) = 10, 5, 3\nroll back, left: 1 11 5 3\n(1) + (11) = 12, left: (1 + 11) = 12, 5, 3\n(5) - (3) = 2, left: (5 - 3) = 2, (1 + 11) = 12\n(12) * (2) = 24, left: ((1 + 11) * (5 - 3)) = 24\nreach 24! expression: ((1 + 11) * (5 - 3))"}, {"input": "8 10 4 11\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 8, 4\n(4) + (-1) = 3, left: (4 + (10 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 + (10 - 11))) = 24\nreach 24! expression: (8 * (4 + (10 - 11)))"}, {"input": "8 10 4 11\n", "output": "(10) + (4) = 14, left: (10 + 4) = 14, 8, 11\n(14) - (11) = 3, left: ((10 + 4) - 11) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 + 4) - 11)) = 24\nreach 24! expression: (8 * ((10 + 4) - 11))"}, {"input": "8 10 4 11\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 8, 10\n(10) + (-7) = 3, left: (10 + (4 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 + (4 - 11))) = 24\nreach 24! expression: (8 * (10 + (4 - 11)))"}, {"input": "8 10 4 11\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 4, 11\nroll back, left: 8 10 4 11\n(8) / (11) = 8/11, left: (8 / 11) = 8/11, 10, 4\n(4) + (8/11) = 52/11, left: (4 + (8 / 11)) = 52/11, 10\nroll back, left: (8 / 11) = 8/11, 10, 4\nroll back, left: 8 10 4 11\n(10) - (11) = -1, left: (10 - 11) = -1, 8, 4\n(4) + (-1) = 3, left: (4 + (10 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 + (10 - 11))) = 24\nreach 24! expression: (8 * (4 + (10 - 11)))"}, {"input": "8 10 4 11\n", "output": "(4) / (11) = 4/11, left: (4 / 11) = 4/11, 8, 10\nroll back, left: 8 10 4 11\n(4) * (11) = 44, left: (4 * 11) = 44, 8, 10\n(10) + (44) = 54, left: (10 + (4 * 11)) = 54, 8\nroll back, left: (4 * 11) = 44, 8, 10\nroll back, left: 8 10 4 11\n(4) - (11) = -7, left: (4 - 11) = -7, 8, 10\n(10) + (-7) = 3, left: (10 + (4 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 + (4 - 11))) = 24\nreach 24! expression: (8 * (10 + (4 - 11)))"}, {"input": "8 10 4 11\n", "output": "(8) * (11) = 88, left: (8 * 11) = 88, 10, 4\nroll back, left: 8 10 4 11\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, 10, 11\n(10) + (11) = 21, left: (10 + 11) = 21, (4 / 8) = 1/2\nroll back, left: (4 / 8) = 1/2, 10, 11\nroll back, left: 8 10 4 11\n(10) - (11) = -1, left: (10 - 11) = -1, 8, 4\n(4) + (-1) = 3, left: (4 + (10 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 + (10 - 11))) = 24\nreach 24! expression: (8 * (4 + (10 - 11)))"}, {"input": "8 10 4 11\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 4, 11\n(4) - (11) = -7, left: (4 - 11) = -7, (8 - 10) = -2\nroll back, left: (8 - 10) = -2, 4, 11\nroll back, left: 8 10 4 11\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 4, 11\nroll back, left: 8 10 4 11\n(10) + (4) = 14, left: (10 + 4) = 14, 8, 11\n(14) - (11) = 3, left: ((10 + 4) - 11) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 + 4) - 11)) = 24\nreach 24! expression: (8 * ((10 + 4) - 11))"}, {"input": "7 2 11 8\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 11, 8\n(8) + (5) = 13, left: (8 + (7 - 2)) = 13, 11\n(11) + (13) = 24, left: (11 + (8 + (7 - 2))) = 24\nreach 24! expression: (11 + (8 + (7 - 2)))"}, {"input": "7 2 11 8\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 7, 8\n(8) + (9) = 17, left: (8 + (11 - 2)) = 17, 7\n(7) + (17) = 24, left: (7 + (8 + (11 - 2))) = 24\nreach 24! expression: (7 + (8 + (11 - 2)))"}, {"input": "7 2 11 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 2, 11\n(11) + (15) = 26, left: (11 + (7 + 8)) = 26, 2\n(26) - (2) = 24, left: ((11 + (7 + 8)) - 2) = 24\nreach 24! expression: ((11 + (7 + 8)) - 2)"}, {"input": "7 2 11 8\n", "output": "(11) + (8) = 19, left: (11 + 8) = 19, 7, 2\n(19) - (2) = 17, left: ((11 + 8) - 2) = 17, 7\n(7) + (17) = 24, left: (7 + ((11 + 8) - 2)) = 24\nreach 24! expression: (7 + ((11 + 8) - 2))"}, {"input": "7 2 11 8\n", "output": "(11) * (8) = 88, left: (11 * 8) = 88, 7, 2\n(2) - (88) = -86, left: (2 - (11 * 8)) = -86, 7\nroll back, left: (11 * 8) = 88, 7, 2\nroll back, left: 7 2 11 8\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, 7, 2\nroll back, left: 7 2 11 8\n(11) + (8) = 19, left: (11 + 8) = 19, 7, 2\n(19) - (2) = 17, left: ((11 + 8) - 2) = 17, 7\n(7) + (17) = 24, left: (7 + ((11 + 8) - 2)) = 24\nreach 24! expression: (7 + ((11 + 8) - 2))"}, {"input": "7 2 11 8\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 11, 8\n(8) / (5) = 8/5, left: (8 / (7 - 2)) = 8/5, 11\nroll back, left: (7 - 2) = 5, 11, 8\n(5) - (8) = -3, left: ((7 - 2) - 8) = -3, 11\n(11) + (-3) = 8, left: (11 + ((7 - 2) - 8)) = 8\nroll back, left: ((7 - 2) - 8) = -3, 11\nroll back, left: (7 - 2) = 5, 11, 8\n(8) + (5) = 13, left: (8 + (7 - 2)) = 13, 11\n(11) + (13) = 24, left: (11 + (8 + (7 - 2))) = 24\nreach 24! expression: (11 + (8 + (7 - 2)))"}, {"input": "7 2 11 8\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 7, 8\n(8) / (9) = 8/9, left: (8 / (11 - 2)) = 8/9, 7\n(7) * (8/9) = 56/9, left: (7 * (8 / (11 - 2))) = 56/9\nroll back, left: (8 / (11 - 2)) = 8/9, 7\nroll back, left: (11 - 2) = 9, 7, 8\n(8) - (9) = -1, left: (8 - (11 - 2)) = -1, 7\nroll back, left: (11 - 2) = 9, 7, 8\n(8) + (9) = 17, left: (8 + (11 - 2)) = 17, 7\n(7) + (17) = 24, left: (7 + (8 + (11 - 2))) = 24\nreach 24! expression: (7 + (8 + (11 - 2)))"}, {"input": "7 2 11 8\n", "output": "(7) * (8) = 56, left: (7 * 8) = 56, 2, 11\n(2) + (11) = 13, left: (2 + 11) = 13, (7 * 8) = 56\nroll back, left: (7 * 8) = 56, 2, 11\nroll back, left: 7 2 11 8\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, 2, 11\nroll back, left: 7 2 11 8\n(7) + (8) = 15, left: (7 + 8) = 15, 2, 11\n(11) + (15) = 26, left: (11 + (7 + 8)) = 26, 2\n(26) - (2) = 24, left: ((11 + (7 + 8)) - 2) = 24\nreach 24! expression: ((11 + (7 + 8)) - 2)"}, {"input": "9 10 12 1\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 10, 12\n(10) + (-8) = 2, left: (10 + (1 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 + (1 - 9))) = 24\nreach 24! expression: (12 * (10 + (1 - 9)))"}, {"input": "9 10 12 1\n", "output": "(10) + (1) = 11, left: (10 + 1) = 11, 9, 12\n(11) - (9) = 2, left: ((10 + 1) - 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 1) - 9)) = 24\nreach 24! expression: (12 * ((10 + 1) - 9))"}, {"input": "9 10 12 1\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (10 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (10 - 9))) = 24\nreach 24! expression: (12 * (1 + (10 - 9)))"}, {"input": "9 10 12 1\n", "output": "(12) / (10) = 6/5, left: (12 / 10) = 6/5, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (12 / 10) = 6/5\nroll back, left: (12 / 10) = 6/5, 9, 1\nroll back, left: 9 10 12 1\n(12) - (10) = 2, left: (12 - 10) = 2, 9, 1\nroll back, left: 9 10 12 1\n(1) - (9) = -8, left: (1 - 9) = -8, 10, 12\n(10) + (-8) = 2, left: (10 + (1 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 + (1 - 9))) = 24\nreach 24! expression: (12 * (10 + (1 - 9)))"}, {"input": "9 10 12 1\n", "output": "(10) / (1) = 10, left: (10 / 1) = 10, 9, 12\nroll back, left: 9 10 12 1\n(10) * (1) = 10, left: (10 * 1) = 10, 9, 12\n(12) / (10) = 6/5, left: (12 / (10 * 1)) = 6/5, 9\nroll back, left: (10 * 1) = 10, 9, 12\nroll back, left: 9 10 12 1\n(10) + (1) = 11, left: (10 + 1) = 11, 9, 12\n(11) - (9) = 2, left: ((10 + 1) - 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 1) - 9)) = 24\nreach 24! expression: (12 * ((10 + 1) - 9))"}, {"input": "9 10 12 1\n", "output": "(9) / (10) = 9/10, left: (9 / 10) = 9/10, 12, 1\n(12) - (1) = 11, left: (12 - 1) = 11, (9 / 10) = 9/10\nroll back, left: (9 / 10) = 9/10, 12, 1\nroll back, left: 9 10 12 1\n(9) * (10) = 90, left: (9 * 10) = 90, 12, 1\nroll back, left: 9 10 12 1\n(10) - (9) = 1, left: (10 - 9) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (10 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (10 - 9))) = 24\nreach 24! expression: (12 * (1 + (10 - 9)))"}, {"input": "9 10 12 1\n", "output": "(10) / (12) = 5/6, left: (10 / 12) = 5/6, 9, 1\n(9) + (5/6) = 59/6, left: (9 + (10 / 12)) = 59/6, 1\nroll back, left: (10 / 12) = 5/6, 9, 1\nroll back, left: 9 10 12 1\n(10) * (12) = 120, left: (10 * 12) = 120, 9, 1\nroll back, left: 9 10 12 1\n(1) - (9) = -8, left: (1 - 9) = -8, 10, 12\n(10) + (-8) = 2, left: (10 + (1 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 + (1 - 9))) = 24\nreach 24! expression: (12 * (10 + (1 - 9)))"}, {"input": "9 10 12 1\n", "output": "(1) - (12) = -11, left: (1 - 12) = -11, 9, 10\nroll back, left: 9 10 12 1\n(12) / (1) = 12, left: (12 / 1) = 12, 9, 10\n(12) - (10) = 2, left: ((12 / 1) - 10) = 2, 9\nroll back, left: (12 / 1) = 12, 9, 10\nroll back, left: 9 10 12 1\n(1) - (9) = -8, left: (1 - 9) = -8, 10, 12\n(10) + (-8) = 2, left: (10 + (1 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 + (1 - 9))) = 24\nreach 24! expression: (12 * (10 + (1 - 9)))"}, {"input": "2 7 10 10\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 2, 10\n(2) - (10) = -8, left: (2 - 10) = -8, (7 - 10) = -3\n(-3) * (-8) = 24, left: ((7 - 10) * (2 - 10)) = 24\nreach 24! expression: ((7 - 10) * (2 - 10))"}, {"input": "2 7 10 10\n", "output": "(7) + (10) = 17, left: (7 + 10) = 17, 2, 10\n(2) * (17) = 34, left: (2 * (7 + 10)) = 34, 10\n(34) - (10) = 24, left: ((2 * (7 + 10)) - 10) = 24\nreach 24! expression: ((2 * (7 + 10)) - 10)"}, {"input": "2 7 10 10\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 2, 10\n(10) - (2) = 8, left: (10 - 2) = 8, (10 - 7) = 3\n(3) * (8) = 24, left: ((10 - 7) * (10 - 2)) = 24\nreach 24! expression: ((10 - 7) * (10 - 2))"}, {"input": "2 7 10 10\n", "output": "(10) * (10) = 100, left: (10 * 10) = 100, 2, 7\nroll back, left: 2 7 10 10\n(10) / (10) = 1, left: (10 / 10) = 1, 2, 7\n(2) + (1) = 3, left: (2 + (10 / 10)) = 3, 7\nroll back, left: (10 / 10) = 1, 2, 7\nroll back, left: 2 7 10 10\n(7) + (10) = 17, left: (7 + 10) = 17, 2, 10\n(2) * (17) = 34, left: (2 * (7 + 10)) = 34, 10\n(34) - (10) = 24, left: ((2 * (7 + 10)) - 10) = 24\nreach 24! expression: ((2 * (7 + 10)) - 10)"}, {"input": "2 7 10 10\n", "output": "(10) - (10) = 0, left: (10 - 10) = 0, 2, 7\nroll back, left: 2 7 10 10\n(2) + (7) = 9, left: (2 + 7) = 9, 10, 10\n(10) + (9) = 19, left: (10 + (2 + 7)) = 19, 10\nroll back, left: (2 + 7) = 9, 10, 10\nroll back, left: 2 7 10 10\n(7) - (10) = -3, left: (7 - 10) = -3, 2, 10\n(2) - (10) = -8, left: (2 - 10) = -8, (7 - 10) = -3\n(-3) * (-8) = 24, left: ((7 - 10) * (2 - 10)) = 24\nreach 24! expression: ((7 - 10) * (2 - 10))"}, {"input": "2 12 9 9\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 12, 9\n(9) + (-7) = 2, left: (9 + (2 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (9 + (2 - 9))) = 24\nreach 24! expression: (12 * (9 + (2 - 9)))"}, {"input": "2 12 9 9\n", "output": "(12) + (9) = 21, left: (12 + 9) = 21, 2, 9\n(21) - (9) = 12, left: ((12 + 9) - 9) = 12, 2\n(2) * (12) = 24, left: (2 * ((12 + 9) - 9)) = 24\nreach 24! expression: (2 * ((12 + 9) - 9))"}, {"input": "2 12 9 9\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 12, 9\n(9) / (12) = 3/4, left: (9 / 12) = 3/4, (2 * 9) = 18\n(18) / (3/4) = 24, left: ((2 * 9) / (9 / 12)) = 24\nreach 24! expression: ((2 * 9) / (9 / 12))"}, {"input": "2 12 9 9\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 2, 9\n(9) * (4/3) = 12, left: (9 * (12 / 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 * (12 / 9))) = 24\nreach 24! expression: (2 * (9 * (12 / 9)))"}, {"input": "2 12 9 9\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (9 / 12) = 3/4\n(18) / (3/4) = 24, left: ((2 * 9) / (9 / 12)) = 24\nreach 24! expression: ((2 * 9) / (9 / 12))"}, {"input": "2 12 9 9\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (2 - 9) = -7\nroll back, left: (2 - 9) = -7, 12, 9\n(12) * (9) = 108, left: (12 * 9) = 108, (2 - 9) = -7\nroll back, left: (2 - 9) = -7, 12, 9\n(9) + (-7) = 2, left: (9 + (2 - 9)) = 2, 12\n(12) / (2) = 6, left: (12 / (9 + (2 - 9))) = 6\nroll back, left: (9 + (2 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (9 + (2 - 9))) = 24\nreach 24! expression: (12 * (9 + (2 - 9)))"}, {"input": "2 12 9 9\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (9 / 12) = 3/4\n(18) / (3/4) = 24, left: ((2 * 9) / (9 / 12)) = 24\nreach 24! expression: ((2 * 9) / (9 / 12))"}, {"input": "2 12 9 9\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (9 / 12) = 3/4\n(18) / (3/4) = 24, left: ((2 * 9) / (9 / 12)) = 24\nreach 24! expression: ((2 * 9) / (9 / 12))"}, {"input": "2 12 9 9\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (9 / 12) = 3/4\n(18) / (3/4) = 24, left: ((2 * 9) / (9 / 12)) = 24\nreach 24! expression: ((2 * 9) / (9 / 12))"}, {"input": "2 12 9 9\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (9 / 12) = 3/4\n(18) / (3/4) = 24, left: ((2 * 9) / (9 / 12)) = 24\nreach 24! expression: ((2 * 9) / (9 / 12))"}, {"input": "9 5 8 1\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 9, 1\n(1) - (9) = -8, left: (1 - 9) = -8, (5 - 8) = -3\n(-3) * (-8) = 24, left: ((5 - 8) * (1 - 9)) = 24\nreach 24! expression: ((5 - 8) * (1 - 9))"}, {"input": "9 5 8 1\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (8 - 5)) = 24\nreach 24! expression: ((9 - 1) * (8 - 5))"}, {"input": "9 5 8 1\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 5, 8\n(8) - (5) = 3, left: ((9 - 1) - 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 1) - 5)) = 24\nreach 24! expression: (8 * ((9 - 1) - 5))"}, {"input": "9 5 8 1\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 9, 1\n(1) - (5/8) = 3/8, left: (1 - (5 / 8)) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / (1 - (5 / 8))) = 24\nreach 24! expression: (9 / (1 - (5 / 8)))"}, {"input": "9 5 8 1\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 8, 1\n(4) - (1) = 3, left: ((9 - 5) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 5) - 1)) = 24\nreach 24! expression: (8 * ((9 - 5) - 1))"}, {"input": "9 5 8 1\n", "output": "(9) * (1) = 9, left: (9 * 1) = 9, 5, 8\n(9) / (8) = 9/8, left: ((9 * 1) / 8) = 9/8, 5\n(5) + (9/8) = 49/8, left: (5 + ((9 * 1) / 8)) = 49/8\nroll back, left: ((9 * 1) / 8) = 9/8, 5\nroll back, left: (9 * 1) = 9, 5, 8\nroll back, left: 9 5 8 1\n(9) - (1) = 8, left: (9 - 1) = 8, 5, 8\n(8) - (5) = 3, left: ((9 - 1) - 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 1) - 5)) = 24\nreach 24! expression: (8 * ((9 - 1) - 5))"}, {"input": "9 5 8 1\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 9, 5\nroll back, left: 9 5 8 1\n(8) - (1) = 7, left: (8 - 1) = 7, 9, 5\nroll back, left: 9 5 8 1\n(8) / (1) = 8, left: (8 / 1) = 8, 9, 5\nroll back, left: 9 5 8 1\n(5) - (8) = -3, left: (5 - 8) = -3, 9, 1\n(1) - (9) = -8, left: (1 - 9) = -8, (5 - 8) = -3\n(-3) * (-8) = 24, left: ((5 - 8) * (1 - 9)) = 24\nreach 24! expression: ((5 - 8) * (1 - 9))"}, {"input": "9 5 8 1\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (9 - 1) = 8\n(3) / (8) = 3/8, left: ((8 - 5) / (9 - 1)) = 3/8\nroll back, left: (8 - 5) = 3, (9 - 1) = 8\n(8) + (3) = 11, left: ((9 - 1) + (8 - 5)) = 11\nroll back, left: (8 - 5) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (8 - 5)) = 24\nreach 24! expression: ((9 - 1) * (8 - 5))"}, {"input": "9 5 8 1\n", "output": "(9) / (5) = 9/5, left: (9 / 5) = 9/5, 8, 1\nroll back, left: 9 5 8 1\n(9) * (5) = 45, left: (9 * 5) = 45, 8, 1\n(8) * (45) = 360, left: (8 * (9 * 5)) = 360, 1\nroll back, left: (9 * 5) = 45, 8, 1\nroll back, left: 9 5 8 1\n(9) - (5) = 4, left: (9 - 5) = 4, 8, 1\n(4) - (1) = 3, left: ((9 - 5) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 5) - 1)) = 24\nreach 24! expression: (8 * ((9 - 5) - 1))"}, {"input": "9 5 8 1\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (9 - 1) = 8\n(3) / (8) = 3/8, left: ((8 - 5) / (9 - 1)) = 3/8\nroll back, left: (8 - 5) = 3, (9 - 1) = 8\n(8) + (3) = 11, left: ((9 - 1) + (8 - 5)) = 11\nroll back, left: (8 - 5) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (8 - 5)) = 24\nreach 24! expression: ((9 - 1) * (8 - 5))"}, {"input": "9 5 8 1\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (9 - 1) = 8\n(3) / (8) = 3/8, left: ((8 - 5) / (9 - 1)) = 3/8\nroll back, left: (8 - 5) = 3, (9 - 1) = 8\n(8) + (3) = 11, left: ((9 - 1) + (8 - 5)) = 11\nroll back, left: (8 - 5) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (8 - 5)) = 24\nreach 24! expression: ((9 - 1) * (8 - 5))"}, {"input": "9 5 8 1\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (9 - 1) = 8\n(3) / (8) = 3/8, left: ((8 - 5) / (9 - 1)) = 3/8\nroll back, left: (8 - 5) = 3, (9 - 1) = 8\n(8) + (3) = 11, left: ((9 - 1) + (8 - 5)) = 11\nroll back, left: (8 - 5) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (8 - 5)) = 24\nreach 24! expression: ((9 - 1) * (8 - 5))"}, {"input": "4 5 9 1\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 5, 9\n(5) * (3) = 15, left: (5 * (4 - 1)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (4 - 1))) = 24\nreach 24! expression: (9 + (5 * (4 - 1)))"}, {"input": "4 5 9 1\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 5, 9\n(5) * (-3) = -15, left: (5 * (1 - 4)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (1 - 4))) = 24\nreach 24! expression: (9 - (5 * (1 - 4)))"}, {"input": "4 5 9 1\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (9 - 4)) = 25, 1\n(25) - (1) = 24, left: ((5 * (9 - 4)) - 1) = 24\nreach 24! expression: ((5 * (9 - 4)) - 1)"}, {"input": "4 5 9 1\n", "output": "(1) / (9) = 1/9, left: (1 / 9) = 1/9, 4, 5\n(4) / (1/9) = 36, left: (4 / (1 / 9)) = 36, 5\n(36) - (5) = 31, left: ((4 / (1 / 9)) - 5) = 31\nroll back, left: (4 / (1 / 9)) = 36, 5\nroll back, left: (1 / 9) = 1/9, 4, 5\nroll back, left: 4 5 9 1\n(4) - (1) = 3, left: (4 - 1) = 3, 5, 9\n(5) * (3) = 15, left: (5 * (4 - 1)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (4 - 1))) = 24\nreach 24! expression: (9 + (5 * (4 - 1)))"}, {"input": "4 5 9 1\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 4, 1\nroll back, left: 4 5 9 1\n(9) / (4) = 9/4, left: (9 / 4) = 9/4, 5, 1\n(1) - (9/4) = -5/4, left: (1 - (9 / 4)) = -5/4, 5\nroll back, left: (9 / 4) = 9/4, 5, 1\nroll back, left: 4 5 9 1\n(9) - (4) = 5, left: (9 - 4) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (9 - 4)) = 25, 1\n(25) - (1) = 24, left: ((5 * (9 - 4)) - 1) = 24\nreach 24! expression: ((5 * (9 - 4)) - 1)"}, {"input": "4 5 9 1\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 5, 1\nroll back, left: 4 5 9 1\n(4) + (9) = 13, left: (4 + 9) = 13, 5, 1\n(13) / (5) = 13/5, left: ((4 + 9) / 5) = 13/5, 1\nroll back, left: (4 + 9) = 13, 5, 1\nroll back, left: 4 5 9 1\n(9) - (4) = 5, left: (9 - 4) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (9 - 4)) = 25, 1\n(25) - (1) = 24, left: ((5 * (9 - 4)) - 1) = 24\nreach 24! expression: ((5 * (9 - 4)) - 1)"}, {"input": "4 5 9 1\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 4, 1\nroll back, left: 4 5 9 1\n(5) / (9) = 5/9, left: (5 / 9) = 5/9, 4, 1\nroll back, left: 4 5 9 1\n(5) * (9) = 45, left: (5 * 9) = 45, 4, 1\nroll back, left: 4 5 9 1\n(9) - (4) = 5, left: (9 - 4) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (9 - 4)) = 25, 1\n(25) - (1) = 24, left: ((5 * (9 - 4)) - 1) = 24\nreach 24! expression: ((5 * (9 - 4)) - 1)"}, {"input": "4 5 9 1\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 9, 1\n(1) - (1) = 0, left: (1 - (5 - 4)) = 0, 9\nroll back, left: (5 - 4) = 1, 9, 1\nroll back, left: 4 5 9 1\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 5, 9\nroll back, left: 4 5 9 1\n(1) - (4) = -3, left: (1 - 4) = -3, 5, 9\n(5) * (-3) = -15, left: (5 * (1 - 4)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (1 - 4))) = 24\nreach 24! expression: (9 - (5 * (1 - 4)))"}, {"input": "8 4 13 5\n", "output": "(8) * (4) = 32, left: (8 * 4) = 32, 13, 5\n(5) + (32) = 37, left: (5 + (8 * 4)) = 37, 13\n(37) - (13) = 24, left: ((5 + (8 * 4)) - 13) = 24\nreach 24! expression: ((5 + (8 * 4)) - 13)"}, {"input": "8 4 13 5\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (5 - 13) = -8\n(-8) + (32) = 24, left: ((5 - 13) + (8 * 4)) = 24\nreach 24! expression: ((5 - 13) + (8 * 4))"}, {"input": "8 4 13 5\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (13 - 5) = 8\n(32) - (8) = 24, left: ((8 * 4) - (13 - 5)) = 24\nreach 24! expression: ((8 * 4) - (13 - 5))"}, {"input": "8 4 13 5\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 8, 5\nroll back, left: 8 4 13 5\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 4, 13\n(5/8) - (13) = -99/8, left: ((5 / 8) - 13) = -99/8, 4\nroll back, left: (5 / 8) = 5/8, 4, 13\nroll back, left: 8 4 13 5\n(5) - (13) = -8, left: (5 - 13) = -8, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (5 - 13) = -8\n(-8) + (32) = 24, left: ((5 - 13) + (8 * 4)) = 24\nreach 24! expression: ((5 - 13) + (8 * 4))"}, {"input": "8 4 13 5\n", "output": "(13) / (8) = 13/8, left: (13 / 8) = 13/8, 4, 5\nroll back, left: 8 4 13 5\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 8, 13\n(5/4) - (13) = -47/4, left: ((5 / 4) - 13) = -47/4, 8\nroll back, left: (5 / 4) = 5/4, 8, 13\nroll back, left: 8 4 13 5\n(13) - (5) = 8, left: (13 - 5) = 8, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (13 - 5) = 8\n(32) - (8) = 24, left: ((8 * 4) - (13 - 5)) = 24\nreach 24! expression: ((8 * 4) - (13 - 5))"}, {"input": "8 4 13 5\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 8, 4\n(8) / (-8) = -1, left: (8 / (5 - 13)) = -1, 4\nroll back, left: (5 - 13) = -8, 8, 4\n(-8) / (8) = -1, left: ((5 - 13) / 8) = -1, 4\nroll back, left: (5 - 13) = -8, 8, 4\n(4) * (-8) = -32, left: (4 * (5 - 13)) = -32, 8\nroll back, left: (5 - 13) = -8, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (5 - 13) = -8\n(-8) + (32) = 24, left: ((5 - 13) + (8 * 4)) = 24\nreach 24! expression: ((5 - 13) + (8 * 4))"}, {"input": "8 4 13 5\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 4, 5\n(-5) - (4) = -9, left: ((8 - 13) - 4) = -9, 5\nroll back, left: (8 - 13) = -5, 4, 5\nroll back, left: 8 4 13 5\n(8) / (13) = 8/13, left: (8 / 13) = 8/13, 4, 5\nroll back, left: 8 4 13 5\n(8) * (4) = 32, left: (8 * 4) = 32, 13, 5\n(5) + (32) = 37, left: (5 + (8 * 4)) = 37, 13\n(37) - (13) = 24, left: ((5 + (8 * 4)) - 13) = 24\nreach 24! expression: ((5 + (8 * 4)) - 13)"}, {"input": "12 10 7 12\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 10, 12\n(12) / (5) = 12/5, left: (12 / (12 - 7)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (12 / (12 - 7))) = 24\nreach 24! expression: (10 * (12 / (12 - 7)))"}, {"input": "12 10 7 12\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 12, 10\n(5) / (12) = 5/12, left: ((12 - 7) / 12) = 5/12, 10\n(10) / (5/12) = 24, left: (10 / ((12 - 7) / 12)) = 24\nreach 24! expression: (10 / ((12 - 7) / 12))"}, {"input": "12 10 7 12\n", "output": "(12) * (10) = 120, left: (12 * 10) = 120, 7, 12\n(12) - (7) = 5, left: (12 - 7) = 5, (12 * 10) = 120\n(120) / (5) = 24, left: ((12 * 10) / (12 - 7)) = 24\nreach 24! expression: ((12 * 10) / (12 - 7))"}, {"input": "12 10 7 12\n", "output": "(10) * (12) = 120, left: (10 * 12) = 120, 12, 7\n(12) - (7) = 5, left: (12 - 7) = 5, (10 * 12) = 120\n(120) / (5) = 24, left: ((10 * 12) / (12 - 7)) = 24\nreach 24! expression: ((10 * 12) / (12 - 7))"}, {"input": "7 4 12 9\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 7, 9\n(9) - (-8) = 17, left: (9 - (4 - 12)) = 17, 7\n(7) + (17) = 24, left: (7 + (9 - (4 - 12))) = 24\nreach 24! expression: (7 + (9 - (4 - 12)))"}, {"input": "7 4 12 9\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 4, 12\n(12) + (16) = 28, left: (12 + (7 + 9)) = 28, 4\n(28) - (4) = 24, left: ((12 + (7 + 9)) - 4) = 24\nreach 24! expression: ((12 + (7 + 9)) - 4)"}, {"input": "7 4 12 9\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 4, 12\n(4) + (-2) = 2, left: (4 + (7 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (4 + (7 - 9))) = 24\nreach 24! expression: (12 * (4 + (7 - 9)))"}, {"input": "7 4 12 9\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 7, 9\n(9) - (7) = 2, left: (9 - 7) = 2, (4 * 12) = 48\n(48) / (2) = 24, left: ((4 * 12) / (9 - 7)) = 24\nreach 24! expression: ((4 * 12) / (9 - 7))"}, {"input": "7 4 12 9\n", "output": "(12) + (9) = 21, left: (12 + 9) = 21, 7, 4\n(4) - (7) = -3, left: (4 - 7) = -3, (12 + 9) = 21\n(21) - (-3) = 24, left: ((12 + 9) - (4 - 7)) = 24\nreach 24! expression: ((12 + 9) - (4 - 7))"}, {"input": "7 4 12 9\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 4, 12\n(12) - (16) = -4, left: (12 - (7 + 9)) = -4, 4\n(4) * (-4) = -16, left: (4 * (12 - (7 + 9))) = -16\nroll back, left: (12 - (7 + 9)) = -4, 4\nroll back, left: (7 + 9) = 16, 4, 12\n(12) / (16) = 3/4, left: (12 / (7 + 9)) = 3/4, 4\nroll back, left: (7 + 9) = 16, 4, 12\n(12) + (16) = 28, left: (12 + (7 + 9)) = 28, 4\n(28) - (4) = 24, left: ((12 + (7 + 9)) - 4) = 24\nreach 24! expression: ((12 + (7 + 9)) - 4)"}, {"input": "7 4 12 9\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 4, 12\n(4) - (-2) = 6, left: (4 - (7 - 9)) = 6, 12\nroll back, left: (7 - 9) = -2, 4, 12\n(-2) - (4) = -6, left: ((7 - 9) - 4) = -6, 12\n(12) / (-6) = -2, left: (12 / ((7 - 9) - 4)) = -2\nroll back, left: ((7 - 9) - 4) = -6, 12\nroll back, left: (7 - 9) = -2, 4, 12\n(4) + (-2) = 2, left: (4 + (7 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (4 + (7 - 9))) = 24\nreach 24! expression: (12 * (4 + (7 - 9)))"}, {"input": "13 10 11 7\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 10, 7\n(7) * (-2) = -14, left: (7 * (11 - 13)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (11 - 13))) = 24\nreach 24! expression: (10 - (7 * (11 - 13)))"}, {"input": "13 10 11 7\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 10, 7\n(7) * (2) = 14, left: (7 * (13 - 11)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (13 - 11))) = 24\nreach 24! expression: (10 + (7 * (13 - 11)))"}, {"input": "13 10 11 7\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 13, 11\nroll back, left: 13 10 11 7\n(13) / (10) = 13/10, left: (13 / 10) = 13/10, 11, 7\nroll back, left: 13 10 11 7\n(13) - (10) = 3, left: (13 - 10) = 3, 11, 7\nroll back, left: 13 10 11 7\n(11) - (13) = -2, left: (11 - 13) = -2, 10, 7\n(7) * (-2) = -14, left: (7 * (11 - 13)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (11 - 13))) = 24\nreach 24! expression: (10 - (7 * (11 - 13)))"}, {"input": "5 6 6 12\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 5, 12\n(5) * (12) = 60, left: (5 * 12) = 60, (6 * 6) = 36\n(60) - (36) = 24, left: ((5 * 12) - (6 * 6)) = 24\nreach 24! expression: ((5 * 12) - (6 * 6))"}, {"input": "5 6 6 12\n", "output": "(5) * (12) = 60, left: (5 * 12) = 60, 6, 6\n(6) * (6) = 36, left: (6 * 6) = 36, (5 * 12) = 60\n(60) - (36) = 24, left: ((5 * 12) - (6 * 6)) = 24\nreach 24! expression: ((5 * 12) - (6 * 6))"}, {"input": "5 6 6 12\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 5, 6\n(5) * (6) = 30, left: (5 * 6) = 30, (6 - 12) = -6\n(-6) + (30) = 24, left: ((6 - 12) + (5 * 6)) = 24\nreach 24! expression: ((6 - 12) + (5 * 6))"}, {"input": "5 6 6 12\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 6, 6\n(6) + (6) = 12, left: (6 + 6) = 12, (12 - 5) = 7\nroll back, left: (12 - 5) = 7, 6, 6\n(6) / (7) = 6/7, left: (6 / (12 - 5)) = 6/7, 6\nroll back, left: (12 - 5) = 7, 6, 6\nroll back, left: 5 6 6 12\n(5) * (12) = 60, left: (5 * 12) = 60, 6, 6\n(6) * (6) = 36, left: (6 * 6) = 36, (5 * 12) = 60\n(60) - (36) = 24, left: ((5 * 12) - (6 * 6)) = 24\nreach 24! expression: ((5 * 12) - (6 * 6))"}, {"input": "5 6 6 12\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 5, 6\n(6) + (-6) = 0, left: (6 + (6 - 12)) = 0, 5\nroll back, left: (6 - 12) = -6, 5, 6\n(-6) - (6) = -12, left: ((6 - 12) - 6) = -12, 5\nroll back, left: (6 - 12) = -6, 5, 6\n(6) - (5) = 1, left: (6 - 5) = 1, (6 - 12) = -6\nroll back, left: (6 - 12) = -6, 5, 6\n(5) * (6) = 30, left: (5 * 6) = 30, (6 - 12) = -6\n(-6) + (30) = 24, left: ((6 - 12) + (5 * 6)) = 24\nreach 24! expression: ((6 - 12) + (5 * 6))"}, {"input": "5 6 6 12\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 5, 12\n(12) - (5) = 7, left: (12 - 5) = 7, (6 / 6) = 1\nroll back, left: (6 / 6) = 1, 5, 12\n(5) + (12) = 17, left: (5 + 12) = 17, (6 / 6) = 1\nroll back, left: (6 / 6) = 1, 5, 12\nroll back, left: 5 6 6 12\n(6) * (6) = 36, left: (6 * 6) = 36, 5, 12\n(5) * (12) = 60, left: (5 * 12) = 60, (6 * 6) = 36\n(60) - (36) = 24, left: ((5 * 12) - (6 * 6)) = 24\nreach 24! expression: ((5 * 12) - (6 * 6))"}, {"input": "5 6 6 12\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 5, 6\n(6) * (2) = 12, left: (6 * (12 / 6)) = 12, 5\nroll back, left: (12 / 6) = 2, 5, 6\nroll back, left: 5 6 6 12\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 5, 6\nroll back, left: 5 6 6 12\n(6) - (12) = -6, left: (6 - 12) = -6, 5, 6\n(5) * (6) = 30, left: (5 * 6) = 30, (6 - 12) = -6\n(-6) + (30) = 24, left: ((6 - 12) + (5 * 6)) = 24\nreach 24! expression: ((6 - 12) + (5 * 6))"}, {"input": "12 13 6 3\n", "output": "(12) - (13) = -1, left: (12 - 13) = -1, 6, 3\n(3) - (-1) = 4, left: (3 - (12 - 13)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (12 - 13))) = 24\nreach 24! expression: (6 * (3 - (12 - 13)))"}, {"input": "12 13 6 3\n", "output": "(13) + (3) = 16, left: (13 + 3) = 16, 12, 6\n(16) - (12) = 4, left: ((13 + 3) - 12) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 + 3) - 12)) = 24\nreach 24! expression: (6 * ((13 + 3) - 12))"}, {"input": "12 13 6 3\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (13 - 12)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (13 - 12))) = 24\nreach 24! expression: (6 * (3 + (13 - 12)))"}, {"input": "12 13 6 3\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 13, 6\n(13) - (9) = 4, left: (13 - (12 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (12 - 3))) = 24\nreach 24! expression: (6 * (13 - (12 - 3)))"}, {"input": "12 13 6 3\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 13, 3\nroll back, left: 12 13 6 3\n(12) / (6) = 2, left: (12 / 6) = 2, 13, 3\nroll back, left: 12 13 6 3\n(12) + (6) = 18, left: (12 + 6) = 18, 13, 3\nroll back, left: 12 13 6 3\n(12) - (3) = 9, left: (12 - 3) = 9, 13, 6\n(13) - (9) = 4, left: (13 - (12 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (12 - 3))) = 24\nreach 24! expression: (6 * (13 - (12 - 3)))"}, {"input": "11 8 1 9\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 11, 8\n(11) - (8) = 3, left: (11 - (9 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (11 - (9 - 1))) = 24\nreach 24! expression: (8 * (11 - (9 - 1)))"}, {"input": "11 8 1 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 8, 1\n(1) + (2) = 3, left: (1 + (11 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (11 - 9))) = 24\nreach 24! expression: (8 * (1 + (11 - 9)))"}, {"input": "11 8 1 9\n", "output": "(11) / (8) = 11/8, left: (11 / 8) = 11/8, 1, 9\n(11/8) - (1) = 3/8, left: ((11 / 8) - 1) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / ((11 / 8) - 1)) = 24\nreach 24! expression: (9 / ((11 / 8) - 1))"}, {"input": "11 8 1 9\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 8, 1\n(1) - (-2) = 3, left: (1 - (9 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (9 - 11))) = 24\nreach 24! expression: (8 * (1 - (9 - 11)))"}, {"input": "11 8 1 9\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 8, 9\n(12) - (9) = 3, left: ((11 + 1) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 + 1) - 9)) = 24\nreach 24! expression: (8 * ((11 + 1) - 9))"}, {"input": "11 8 1 9\n", "output": "(9) / (8) = 9/8, left: (9 / 8) = 9/8, 11, 1\n(9/8) - (11) = -79/8, left: ((9 / 8) - 11) = -79/8, 1\nroll back, left: (9 / 8) = 9/8, 11, 1\nroll back, left: 11 8 1 9\n(8) + (9) = 17, left: (8 + 9) = 17, 11, 1\nroll back, left: 11 8 1 9\n(11) - (9) = 2, left: (11 - 9) = 2, 8, 1\n(1) + (2) = 3, left: (1 + (11 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (11 - 9))) = 24\nreach 24! expression: (8 * (1 + (11 - 9)))"}, {"input": "11 8 1 9\n", "output": "(8) * (1) = 8, left: (8 * 1) = 8, 11, 9\nroll back, left: 11 8 1 9\n(1) - (8) = -7, left: (1 - 8) = -7, 11, 9\nroll back, left: 11 8 1 9\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, 11, 9\nroll back, left: 11 8 1 9\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, 1, 9\n(11/8) - (1) = 3/8, left: ((11 / 8) - 1) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / ((11 / 8) - 1)) = 24\nreach 24! expression: (9 / ((11 / 8) - 1))"}, {"input": "11 8 1 9\n", "output": "(1) / (9) = 1/9, left: (1 / 9) = 1/9, 11, 8\n(8) - (1/9) = 71/9, left: (8 - (1 / 9)) = 71/9, 11\nroll back, left: (1 / 9) = 1/9, 11, 8\n(11) * (8) = 88, left: (11 * 8) = 88, (1 / 9) = 1/9\nroll back, left: (1 / 9) = 1/9, 11, 8\nroll back, left: 11 8 1 9\n(9) - (1) = 8, left: (9 - 1) = 8, 11, 8\n(11) - (8) = 3, left: (11 - (9 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (11 - (9 - 1))) = 24\nreach 24! expression: (8 * (11 - (9 - 1)))"}, {"input": "11 8 1 9\n", "output": "(8) / (9) = 8/9, left: (8 / 9) = 8/9, 11, 1\nroll back, left: 11 8 1 9\n(8) - (9) = -1, left: (8 - 9) = -1, 11, 1\nroll back, left: 11 8 1 9\n(9) - (11) = -2, left: (9 - 11) = -2, 8, 1\n(8) * (-2) = -16, left: (8 * (9 - 11)) = -16, 1\nroll back, left: (9 - 11) = -2, 8, 1\n(1) - (-2) = 3, left: (1 - (9 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (9 - 11))) = 24\nreach 24! expression: (8 * (1 - (9 - 11)))"}, {"input": "11 8 1 9\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 8, 9\n(8) - (12) = -4, left: (8 - (11 + 1)) = -4, 9\n(9) * (-4) = -36, left: (9 * (8 - (11 + 1))) = -36\nroll back, left: (8 - (11 + 1)) = -4, 9\n(-4) - (9) = -13, left: ((8 - (11 + 1)) - 9) = -13\nroll back, left: (8 - (11 + 1)) = -4, 9\nroll back, left: (11 + 1) = 12, 8, 9\n(12) - (9) = 3, left: ((11 + 1) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 + 1) - 9)) = 24\nreach 24! expression: (8 * ((11 + 1) - 9))"}, {"input": "6 7 6 5\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 7, 6\n(6) + (11) = 17, left: (6 + (6 + 5)) = 17, 7\n(7) + (17) = 24, left: (7 + (6 + (6 + 5))) = 24\nreach 24! expression: (7 + (6 + (6 + 5)))"}, {"input": "6 7 6 5\n", "output": "(7) + (6) = 13, left: (7 + 6) = 13, 6, 5\n(6) + (13) = 19, left: (6 + (7 + 6)) = 19, 5\n(5) + (19) = 24, left: (5 + (6 + (7 + 6))) = 24\nreach 24! expression: (5 + (6 + (7 + 6)))"}, {"input": "6 7 6 5\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 7, 6\n(11) - (7) = 4, left: ((6 + 5) - 7) = 4, 6\n(6) * (4) = 24, left: (6 * ((6 + 5) - 7)) = 24\nreach 24! expression: (6 * ((6 + 5) - 7))"}, {"input": "6 7 6 5\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 6, 6\n(6) + (12) = 18, left: (6 + (7 + 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 + (7 + 5))) = 24\nreach 24! expression: (6 + (6 + (7 + 5)))"}, {"input": "6 7 6 5\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (7 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (7 - 6))) = 24\nreach 24! expression: (6 * (5 - (7 - 6)))"}, {"input": "6 7 6 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 7, 6\n(6) * (1) = 6, left: (6 * (6 - 5)) = 6, 7\nroll back, left: (6 - 5) = 1, 7, 6\n(1) / (7) = 1/7, left: ((6 - 5) / 7) = 1/7, 6\nroll back, left: (6 - 5) = 1, 7, 6\nroll back, left: 6 7 6 5\n(6) + (5) = 11, left: (6 + 5) = 11, 7, 6\n(6) + (11) = 17, left: (6 + (6 + 5)) = 17, 7\n(7) + (17) = 24, left: (7 + (6 + (6 + 5))) = 24\nreach 24! expression: (7 + (6 + (6 + 5)))"}, {"input": "6 7 6 5\n", "output": "(6) / (7) = 6/7, left: (6 / 7) = 6/7, 6, 5\n(5) * (6/7) = 30/7, left: (5 * (6 / 7)) = 30/7, 6\n(30/7) - (6) = -12/7, left: ((5 * (6 / 7)) - 6) = -12/7\nroll back, left: (5 * (6 / 7)) = 30/7, 6\nroll back, left: (6 / 7) = 6/7, 6, 5\nroll back, left: 6 7 6 5\n(7) - (6) = 1, left: (7 - 6) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (7 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (7 - 6))) = 24\nreach 24! expression: (6 * (5 - (7 - 6)))"}, {"input": "6 7 6 5\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 7, 6\n(7) / (6) = 7/6, left: (7 / 6) = 7/6, (5 / 6) = 5/6\nroll back, left: (5 / 6) = 5/6, 7, 6\nroll back, left: 6 7 6 5\n(6) - (5) = 1, left: (6 - 5) = 1, 7, 6\nroll back, left: 6 7 6 5\n(6) + (5) = 11, left: (6 + 5) = 11, 7, 6\n(11) - (7) = 4, left: ((6 + 5) - 7) = 4, 6\n(6) * (4) = 24, left: (6 * ((6 + 5) - 7)) = 24\nreach 24! expression: (6 * ((6 + 5) - 7))"}, {"input": "6 7 6 5\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 6, 6\n(12) / (6) = 2, left: ((7 + 5) / 6) = 2, 6\n(2) / (6) = 1/3, left: (((7 + 5) / 6) / 6) = 1/3\nroll back, left: ((7 + 5) / 6) = 2, 6\n(6) * (2) = 12, left: (6 * ((7 + 5) / 6)) = 12\nroll back, left: ((7 + 5) / 6) = 2, 6\nroll back, left: (7 + 5) = 12, 6, 6\n(6) + (12) = 18, left: (6 + (7 + 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 + (7 + 5))) = 24\nreach 24! expression: (6 + (6 + (7 + 5)))"}, {"input": "2 12 8 13\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 8, 13\n(13) + (-10) = 3, left: (13 + (2 - 12)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 + (2 - 12))) = 24\nreach 24! expression: (8 * (13 + (2 - 12)))"}, {"input": "2 12 8 13\n", "output": "(12) - (13) = -1, left: (12 - 13) = -1, 2, 8\n(2) - (-1) = 3, left: (2 - (12 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (12 - 13))) = 24\nreach 24! expression: (8 * (2 - (12 - 13)))"}, {"input": "2 12 8 13\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 8, 13\n(13) - (10) = 3, left: (13 - (12 - 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (12 - 2))) = 24\nreach 24! expression: (8 * (13 - (12 - 2)))"}, {"input": "2 12 8 13\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 2, 13\n(2) - (3/2) = 1/2, left: (2 - (12 / 8)) = 1/2, 13\nroll back, left: (12 / 8) = 3/2, 2, 13\nroll back, left: 2 12 8 13\n(8) - (12) = -4, left: (8 - 12) = -4, 2, 13\nroll back, left: 2 12 8 13\n(12) - (13) = -1, left: (12 - 13) = -1, 2, 8\n(2) - (-1) = 3, left: (2 - (12 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (12 - 13))) = 24\nreach 24! expression: (8 * (2 - (12 - 13)))"}, {"input": "2 12 8 13\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 12, 13\nroll back, left: 2 12 8 13\n(8) * (13) = 104, left: (8 * 13) = 104, 2, 12\nroll back, left: 2 12 8 13\n(2) + (12) = 14, left: (2 + 12) = 14, 8, 13\nroll back, left: 2 12 8 13\n(2) - (12) = -10, left: (2 - 12) = -10, 8, 13\n(13) + (-10) = 3, left: (13 + (2 - 12)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 + (2 - 12))) = 24\nreach 24! expression: (8 * (13 + (2 - 12)))"}, {"input": "2 12 8 13\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 2, 13\n(96) / (2) = 48, left: ((12 * 8) / 2) = 48, 13\nroll back, left: (12 * 8) = 96, 2, 13\nroll back, left: 2 12 8 13\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 2, 13\nroll back, left: 2 12 8 13\n(12) - (13) = -1, left: (12 - 13) = -1, 2, 8\n(2) - (-1) = 3, left: (2 - (12 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (12 - 13))) = 24\nreach 24! expression: (8 * (2 - (12 - 13)))"}, {"input": "2 12 12 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 2, 12\n(2) / (4) = 1/2, left: (2 / (12 - 8)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (2 / (12 - 8))) = 24\nreach 24! expression: (12 / (2 / (12 - 8)))"}, {"input": "2 12 12 8\n", "output": "(12) * (12) = 144, left: (12 * 12) = 144, 2, 8\n(8) - (2) = 6, left: (8 - 2) = 6, (12 * 12) = 144\n(144) / (6) = 24, left: ((12 * 12) / (8 - 2)) = 24\nreach 24! expression: ((12 * 12) / (8 - 2))"}, {"input": "2 12 12 8\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 2, 12\n(2) - (3/2) = 1/2, left: (2 - (12 / 8)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (2 - (12 / 8))) = 24\nreach 24! expression: (12 / (2 - (12 / 8)))"}, {"input": "2 12 12 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 2, 12\n(12) * (4) = 48, left: (12 * (12 - 8)) = 48, 2\n(48) / (2) = 24, left: ((12 * (12 - 8)) / 2) = 24\nreach 24! expression: ((12 * (12 - 8)) / 2)"}, {"input": "2 12 12 8\n", "output": "(12) + (8) = 20, left: (12 + 8) = 20, 2, 12\n(12) - (2) = 10, left: (12 - 2) = 10, (12 + 8) = 20\nroll back, left: (12 + 8) = 20, 2, 12\nroll back, left: 2 12 12 8\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 2, 12\nroll back, left: 2 12 12 8\n(12) - (8) = 4, left: (12 - 8) = 4, 2, 12\n(2) / (4) = 1/2, left: (2 / (12 - 8)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (2 / (12 - 8))) = 24\nreach 24! expression: (12 / (2 / (12 - 8)))"}, {"input": "2 12 12 8\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 2, 12\n(-4) - (12) = -16, left: ((8 - 12) - 12) = -16, 2\nroll back, left: (8 - 12) = -4, 2, 12\nroll back, left: 2 12 12 8\n(12) * (8) = 96, left: (12 * 8) = 96, 2, 12\nroll back, left: 2 12 12 8\n(12) - (8) = 4, left: (12 - 8) = 4, 2, 12\n(12) * (4) = 48, left: (12 * (12 - 8)) = 48, 2\n(48) / (2) = 24, left: ((12 * (12 - 8)) / 2) = 24\nreach 24! expression: ((12 * (12 - 8)) / 2)"}, {"input": "9 12 7 3\n", "output": "(7) - (12) = -5, left: (7 - 12) = -5, 9, 3\n(3) * (-5) = -15, left: (3 * (7 - 12)) = -15, 9\n(9) - (-15) = 24, left: (9 - (3 * (7 - 12))) = 24\nreach 24! expression: (9 - (3 * (7 - 12)))"}, {"input": "9 12 7 3\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 9, 3\n(3) * (5) = 15, left: (3 * (12 - 7)) = 15, 9\n(9) + (15) = 24, left: (9 + (3 * (12 - 7))) = 24\nreach 24! expression: (9 + (3 * (12 - 7)))"}, {"input": "9 12 7 3\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (9 - 12) = -3\n(21) - (-3) = 24, left: ((7 * 3) - (9 - 12)) = 24\nreach 24! expression: ((7 * 3) - (9 - 12))"}, {"input": "9 12 7 3\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 9, 12\n(9) * (4) = 36, left: (9 * (7 - 3)) = 36, 12\n(36) - (12) = 24, left: ((9 * (7 - 3)) - 12) = 24\nreach 24! expression: ((9 * (7 - 3)) - 12)"}, {"input": "9 12 7 3\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 9, 12\nroll back, left: 9 12 7 3\n(7) + (3) = 10, left: (7 + 3) = 10, 9, 12\nroll back, left: 9 12 7 3\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 9, 12\nroll back, left: 9 12 7 3\n(7) - (3) = 4, left: (7 - 3) = 4, 9, 12\n(9) * (4) = 36, left: (9 * (7 - 3)) = 36, 12\n(36) - (12) = 24, left: ((9 * (7 - 3)) - 12) = 24\nreach 24! expression: ((9 * (7 - 3)) - 12)"}, {"input": "9 12 7 3\n", "output": "(9) / (7) = 9/7, left: (9 / 7) = 9/7, 12, 3\nroll back, left: 9 12 7 3\n(7) - (9) = -2, left: (7 - 9) = -2, 12, 3\nroll back, left: 9 12 7 3\n(12) / (3) = 4, left: (12 / 3) = 4, 9, 7\nroll back, left: 9 12 7 3\n(9) - (12) = -3, left: (9 - 12) = -3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (9 - 12) = -3\n(21) - (-3) = 24, left: ((7 * 3) - (9 - 12)) = 24\nreach 24! expression: ((7 * 3) - (9 - 12))"}, {"input": "9 12 7 3\n", "output": "(12) + (7) = 19, left: (12 + 7) = 19, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (12 + 7) = 19\nroll back, left: (12 + 7) = 19, 9, 3\n(3) / (19) = 3/19, left: (3 / (12 + 7)) = 3/19, 9\nroll back, left: (12 + 7) = 19, 9, 3\nroll back, left: 9 12 7 3\n(7) - (12) = -5, left: (7 - 12) = -5, 9, 3\n(3) * (-5) = -15, left: (3 * (7 - 12)) = -15, 9\n(9) - (-15) = 24, left: (9 - (3 * (7 - 12))) = 24\nreach 24! expression: (9 - (3 * (7 - 12)))"}, {"input": "9 12 7 3\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 9, 7\nroll back, left: 9 12 7 3\n(12) * (3) = 36, left: (12 * 3) = 36, 9, 7\nroll back, left: 9 12 7 3\n(12) - (3) = 9, left: (12 - 3) = 9, 9, 7\nroll back, left: 9 12 7 3\n(12) - (7) = 5, left: (12 - 7) = 5, 9, 3\n(3) * (5) = 15, left: (3 * (12 - 7)) = 15, 9\n(9) + (15) = 24, left: (9 + (3 * (12 - 7))) = 24\nreach 24! expression: (9 + (3 * (12 - 7)))"}, {"input": "9 12 7 3\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 12, 7\nroll back, left: 9 12 7 3\n(9) - (3) = 6, left: (9 - 3) = 6, 12, 7\nroll back, left: 9 12 7 3\n(3) - (9) = -6, left: (3 - 9) = -6, 12, 7\nroll back, left: 9 12 7 3\n(9) - (12) = -3, left: (9 - 12) = -3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (9 - 12) = -3\n(21) - (-3) = 24, left: ((7 * 3) - (9 - 12)) = 24\nreach 24! expression: ((7 * 3) - (9 - 12))"}, {"input": "1 3 4 13\n", "output": "(1) - (13) = -12, left: (1 - 13) = -12, 3, 4\n(3) * (4) = 12, left: (3 * 4) = 12, (1 - 13) = -12\n(12) - (-12) = 24, left: ((3 * 4) - (1 - 13)) = 24\nreach 24! expression: ((3 * 4) - (1 - 13))"}, {"input": "1 3 4 13\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 1, 13\n(1) - (13) = -12, left: (1 - 13) = -12, (3 * 4) = 12\n(12) - (-12) = 24, left: ((3 * 4) - (1 - 13)) = 24\nreach 24! expression: ((3 * 4) - (1 - 13))"}, {"input": "1 3 4 13\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (3 * 4) = 12\n(12) + (12) = 24, left: ((3 * 4) + (13 - 1)) = 24\nreach 24! expression: ((3 * 4) + (13 - 1))"}, {"input": "1 3 4 13\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 3, 13\n(13) - (5) = 8, left: (13 - (1 + 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (1 + 4))) = 24\nreach 24! expression: (3 * (13 - (1 + 4)))"}, {"input": "1 3 4 13\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 1, 3\n(9) - (1) = 8, left: ((13 - 4) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((13 - 4) - 1)) = 24\nreach 24! expression: (3 * ((13 - 4) - 1))"}, {"input": "1 3 4 13\n", "output": "(4) + (13) = 17, left: (4 + 13) = 17, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (4 + 13) = 17\nroll back, left: (4 + 13) = 17, 1, 3\nroll back, left: 1 3 4 13\n(4) / (13) = 4/13, left: (4 / 13) = 4/13, 1, 3\nroll back, left: 1 3 4 13\n(13) - (4) = 9, left: (13 - 4) = 9, 1, 3\n(9) - (1) = 8, left: ((13 - 4) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((13 - 4) - 1)) = 24\nreach 24! expression: (3 * ((13 - 4) - 1))"}, {"input": "1 3 4 13\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 3, 13\n(1/4) / (3) = 1/12, left: ((1 / 4) / 3) = 1/12, 13\nroll back, left: (1 / 4) = 1/4, 3, 13\nroll back, left: 1 3 4 13\n(1) * (4) = 4, left: (1 * 4) = 4, 3, 13\nroll back, left: 1 3 4 13\n(1) + (4) = 5, left: (1 + 4) = 5, 3, 13\n(13) - (5) = 8, left: (13 - (1 + 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (1 + 4))) = 24\nreach 24! expression: (3 * (13 - (1 + 4)))"}, {"input": "10 6 6 6\n", "output": "(10) * (6) = 60, left: (10 * 6) = 60, 6, 6\n(6) * (6) = 36, left: (6 * 6) = 36, (10 * 6) = 60\n(60) - (36) = 24, left: ((10 * 6) - (6 * 6)) = 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "10 6 6 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 10, 6\n(10) * (6) = 60, left: (10 * 6) = 60, (6 * 6) = 36\n(60) - (36) = 24, left: ((10 * 6) - (6 * 6)) = 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "10 6 6 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 10, 6\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, (6 - 6) = 0\nroll back, left: (6 - 6) = 0, 10, 6\nroll back, left: 10 6 6 6\n(6) * (6) = 36, left: (6 * 6) = 36, 10, 6\n(6) * (36) = 216, left: (6 * (6 * 6)) = 216, 10\nroll back, left: (6 * 6) = 36, 10, 6\n(10) * (6) = 60, left: (10 * 6) = 60, (6 * 6) = 36\n(60) - (36) = 24, left: ((10 * 6) - (6 * 6)) = 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "10 6 6 6\n", "output": "(6) / (10) = 3/5, left: (6 / 10) = 3/5, 6, 6\nroll back, left: 10 6 6 6\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, 6, 6\n(6) / (6) = 1, left: (6 / 6) = 1, (10 / 6) = 5/3\nroll back, left: (10 / 6) = 5/3, 6, 6\nroll back, left: 10 6 6 6\n(10) * (6) = 60, left: (10 * 6) = 60, 6, 6\n(6) * (6) = 36, left: (6 * 6) = 36, (10 * 6) = 60\n(60) - (36) = 24, left: ((10 * 6) - (6 * 6)) = 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "10 6 6 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 10, 6\nroll back, left: 10 6 6 6\n(6) + (6) = 12, left: (6 + 6) = 12, 10, 6\nroll back, left: 10 6 6 6\n(6) - (6) = 0, left: (6 - 6) = 0, 10, 6\nroll back, left: 10 6 6 6\n(6) * (6) = 36, left: (6 * 6) = 36, 10, 6\n(10) * (6) = 60, left: (10 * 6) = 60, (6 * 6) = 36\n(60) - (36) = 24, left: ((10 * 6) - (6 * 6)) = 24\nreach 24! expression: ((10 * 6) - (6 * 6))"}, {"input": "3 2 13 2\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 2, 13\n(13) + (-1) = 12, left: (13 + (2 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 + (2 - 3))) = 24\nreach 24! expression: (2 * (13 + (2 - 3)))"}, {"input": "3 2 13 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (3 - 2))) = 24\nreach 24! expression: (2 * (13 - (3 - 2)))"}, {"input": "3 2 13 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (3 - 2))) = 24\nreach 24! expression: (2 * (13 - (3 - 2)))"}, {"input": "3 2 13 2\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 3, 2\n(15) - (3) = 12, left: ((13 + 2) - 3) = 12, 2\n(2) * (12) = 24, left: (2 * ((13 + 2) - 3)) = 24\nreach 24! expression: (2 * ((13 + 2) - 3))"}, {"input": "3 2 13 2\n", "output": "(3) * (2) = 6, left: (3 * 2) = 6, 2, 13\nroll back, left: 3 2 13 2\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 2, 13\n(2) * (2/3) = 4/3, left: (2 * (2 / 3)) = 4/3, 13\nroll back, left: (2 / 3) = 2/3, 2, 13\nroll back, left: 3 2 13 2\n(2) - (3) = -1, left: (2 - 3) = -1, 2, 13\n(13) + (-1) = 12, left: (13 + (2 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 + (2 - 3))) = 24\nreach 24! expression: (2 * (13 + (2 - 3)))"}, {"input": "3 2 13 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 13, 2\n(1) / (2) = 1/2, left: ((3 - 2) / 2) = 1/2, 13\nroll back, left: (3 - 2) = 1, 13, 2\n(1) - (2) = -1, left: ((3 - 2) - 2) = -1, 13\nroll back, left: (3 - 2) = 1, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (3 - 2) = 1\nroll back, left: (3 - 2) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (3 - 2))) = 24\nreach 24! expression: (2 * (13 - (3 - 2)))"}, {"input": "3 2 13 2\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 2, 13\n(-1) - (13) = -14, left: ((2 - 3) - 13) = -14, 2\nroll back, left: (2 - 3) = -1, 2, 13\n(13) * (-1) = -13, left: (13 * (2 - 3)) = -13, 2\n(2) - (-13) = 15, left: (2 - (13 * (2 - 3))) = 15\nroll back, left: (13 * (2 - 3)) = -13, 2\nroll back, left: (2 - 3) = -1, 2, 13\n(13) + (-1) = 12, left: (13 + (2 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 + (2 - 3))) = 24\nreach 24! expression: (2 * (13 + (2 - 3)))"}, {"input": "3 2 13 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (3 - 2)) = 12, 2\n(12) / (2) = 6, left: ((13 - (3 - 2)) / 2) = 6\nroll back, left: (13 - (3 - 2)) = 12, 2\n(2) - (12) = -10, left: (2 - (13 - (3 - 2))) = -10\nroll back, left: (13 - (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (3 - 2))) = 24\nreach 24! expression: (2 * (13 - (3 - 2)))"}, {"input": "3 2 13 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (3 - 2)) = 12, 2\n(12) / (2) = 6, left: ((13 - (3 - 2)) / 2) = 6\nroll back, left: (13 - (3 - 2)) = 12, 2\n(2) - (12) = -10, left: (2 - (13 - (3 - 2))) = -10\nroll back, left: (13 - (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (3 - 2))) = 24\nreach 24! expression: (2 * (13 - (3 - 2)))"}, {"input": "3 2 13 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (3 - 2)) = 12, 2\n(12) / (2) = 6, left: ((13 - (3 - 2)) / 2) = 6\nroll back, left: (13 - (3 - 2)) = 12, 2\n(2) - (12) = -10, left: (2 - (13 - (3 - 2))) = -10\nroll back, left: (13 - (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (3 - 2))) = 24\nreach 24! expression: (2 * (13 - (3 - 2)))"}, {"input": "3 2 13 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (3 - 2)) = 12, 2\n(12) / (2) = 6, left: ((13 - (3 - 2)) / 2) = 6\nroll back, left: (13 - (3 - 2)) = 12, 2\n(2) - (12) = -10, left: (2 - (13 - (3 - 2))) = -10\nroll back, left: (13 - (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (3 - 2))) = 24\nreach 24! expression: (2 * (13 - (3 - 2)))"}, {"input": "11 13 6 5\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 11, 13\n(13) / (-1) = -13, left: (13 / (5 - 6)) = -13, 11\n(11) - (-13) = 24, left: (11 - (13 / (5 - 6))) = 24\nreach 24! expression: (11 - (13 / (5 - 6)))"}, {"input": "11 13 6 5\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 11, 13\n(11) / (-1) = -11, left: (11 / (5 - 6)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 / (5 - 6))) = 24\nreach 24! expression: (13 - (11 / (5 - 6)))"}, {"input": "11 13 6 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 11, 13\n(11) / (1) = 11, left: (11 / (6 - 5)) = 11, 13\n(13) + (11) = 24, left: (13 + (11 / (6 - 5))) = 24\nreach 24! expression: (13 + (11 / (6 - 5)))"}, {"input": "11 13 6 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 11, 13\n(13) * (1) = 13, left: (13 * (6 - 5)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 * (6 - 5))) = 24\nreach 24! expression: (11 + (13 * (6 - 5)))"}, {"input": "11 13 6 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 11, 13\n(11) + (13) = 24, left: (11 + 13) = 24, (6 - 5) = 1\n(24) / (1) = 24, left: ((11 + 13) / (6 - 5)) = 24\nreach 24! expression: ((11 + 13) / (6 - 5))"}, {"input": "11 13 6 5\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 11, 13\n(11) - (11) = 0, left: (11 - (6 + 5)) = 0, 13\nroll back, left: (6 + 5) = 11, 11, 13\n(13) + (11) = 24, left: (13 + (6 + 5)) = 24, 11\nroll back, left: (6 + 5) = 11, 11, 13\nroll back, left: 11 13 6 5\n(5) - (6) = -1, left: (5 - 6) = -1, 11, 13\n(11) / (-1) = -11, left: (11 / (5 - 6)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 / (5 - 6))) = 24\nreach 24! expression: (13 - (11 / (5 - 6)))"}, {"input": "11 13 6 5\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 11, 6\nroll back, left: 11 13 6 5\n(13) / (5) = 13/5, left: (13 / 5) = 13/5, 11, 6\nroll back, left: 11 13 6 5\n(11) * (5) = 55, left: (11 * 5) = 55, 13, 6\nroll back, left: 11 13 6 5\n(6) - (5) = 1, left: (6 - 5) = 1, 11, 13\n(11) + (13) = 24, left: (11 + 13) = 24, (6 - 5) = 1\n(24) / (1) = 24, left: ((11 + 13) / (6 - 5)) = 24\nreach 24! expression: ((11 + 13) / (6 - 5))"}, {"input": "11 13 6 5\n", "output": "(5) / (13) = 5/13, left: (5 / 13) = 5/13, 11, 6\nroll back, left: 11 13 6 5\n(13) + (5) = 18, left: (13 + 5) = 18, 11, 6\nroll back, left: 11 13 6 5\n(13) - (5) = 8, left: (13 - 5) = 8, 11, 6\nroll back, left: 11 13 6 5\n(5) - (6) = -1, left: (5 - 6) = -1, 11, 13\n(13) / (-1) = -13, left: (13 / (5 - 6)) = -13, 11\n(11) - (-13) = 24, left: (11 - (13 / (5 - 6))) = 24\nreach 24! expression: (11 - (13 / (5 - 6)))"}, {"input": "5 10 11 7\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (10 - 5)) = 35, 11\n(35) - (11) = 24, left: ((7 * (10 - 5)) - 11) = 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "5 10 11 7\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 10, 7\nroll back, left: 5 10 11 7\n(10) - (11) = -1, left: (10 - 11) = -1, 5, 7\nroll back, left: 5 10 11 7\n(11) / (7) = 11/7, left: (11 / 7) = 11/7, 5, 10\nroll back, left: 5 10 11 7\n(10) - (5) = 5, left: (10 - 5) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (10 - 5)) = 35, 11\n(35) - (11) = 24, left: ((7 * (10 - 5)) - 11) = 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "5 10 11 7\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 5, 10\nroll back, left: 5 10 11 7\n(11) + (7) = 18, left: (11 + 7) = 18, 5, 10\nroll back, left: 5 10 11 7\n(11) / (7) = 11/7, left: (11 / 7) = 11/7, 5, 10\nroll back, left: 5 10 11 7\n(10) - (5) = 5, left: (10 - 5) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (10 - 5)) = 35, 11\n(35) - (11) = 24, left: ((7 * (10 - 5)) - 11) = 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "5 10 11 7\n", "output": "(5) + (11) = 16, left: (5 + 11) = 16, 10, 7\nroll back, left: 5 10 11 7\n(5) * (11) = 55, left: (5 * 11) = 55, 10, 7\nroll back, left: 5 10 11 7\n(5) - (10) = -5, left: (5 - 10) = -5, 11, 7\nroll back, left: 5 10 11 7\n(10) - (5) = 5, left: (10 - 5) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (10 - 5)) = 35, 11\n(35) - (11) = 24, left: ((7 * (10 - 5)) - 11) = 24\nreach 24! expression: ((7 * (10 - 5)) - 11)"}, {"input": "8 8 9 7\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (9 - 7)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (9 - 7))) = 24\nreach 24! expression: (8 + (8 * (9 - 7)))"}, {"input": "8 8 9 7\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (7 - 9)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (7 - 9))) = 24\nreach 24! expression: (8 - (8 * (7 - 9)))"}, {"input": "8 8 9 7\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 8, 7\nroll back, left: 8 8 9 7\n(7) - (8) = -1, left: (7 - 8) = -1, 8, 9\nroll back, left: 8 8 9 7\n(9) / (8) = 9/8, left: (9 / 8) = 9/8, 8, 7\nroll back, left: 8 8 9 7\n(9) - (7) = 2, left: (9 - 7) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (9 - 7)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (9 - 7))) = 24\nreach 24! expression: (8 + (8 * (9 - 7)))"}, {"input": "8 8 9 7\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 9, 7\n(9) * (16) = 144, left: (9 * (8 + 8)) = 144, 7\nroll back, left: (8 + 8) = 16, 9, 7\nroll back, left: 8 8 9 7\n(8) - (7) = 1, left: (8 - 7) = 1, 8, 9\nroll back, left: 8 8 9 7\n(7) - (9) = -2, left: (7 - 9) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (7 - 9)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (7 - 9))) = 24\nreach 24! expression: (8 - (8 * (7 - 9)))"}, {"input": "8 8 9 7\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 8, 9\nroll back, left: 8 8 9 7\n(8) / (9) = 8/9, left: (8 / 9) = 8/9, 8, 7\nroll back, left: 8 8 9 7\n(8) + (8) = 16, left: (8 + 8) = 16, 9, 7\nroll back, left: 8 8 9 7\n(9) - (7) = 2, left: (9 - 7) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (9 - 7)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (9 - 7))) = 24\nreach 24! expression: (8 + (8 * (9 - 7)))"}, {"input": "8 8 9 7\n", "output": "(7) / (9) = 7/9, left: (7 / 9) = 7/9, 8, 8\nroll back, left: 8 8 9 7\n(9) * (7) = 63, left: (9 * 7) = 63, 8, 8\n(63) - (8) = 55, left: ((9 * 7) - 8) = 55, 8\nroll back, left: (9 * 7) = 63, 8, 8\nroll back, left: 8 8 9 7\n(7) - (9) = -2, left: (7 - 9) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (7 - 9)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (7 - 9))) = 24\nreach 24! expression: (8 - (8 * (7 - 9)))"}, {"input": "8 8 9 7\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 8, 9\nroll back, left: 8 8 9 7\n(8) / (8) = 1, left: (8 / 8) = 1, 9, 7\nroll back, left: 8 8 9 7\n(8) - (9) = -1, left: (8 - 9) = -1, 8, 7\nroll back, left: 8 8 9 7\n(7) - (9) = -2, left: (7 - 9) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (7 - 9)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (7 - 9))) = 24\nreach 24! expression: (8 - (8 * (7 - 9)))"}, {"input": "6 8 13 3\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 8, 3\n(3) - (19) = -16, left: (3 - (6 + 13)) = -16, 8\n(8) - (-16) = 24, left: (8 - (3 - (6 + 13))) = 24\nreach 24! expression: (8 - (3 - (6 + 13)))"}, {"input": "6 8 13 3\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 6, 13\n(6) + (13) = 19, left: (6 + 13) = 19, (3 - 8) = -5\n(19) - (-5) = 24, left: ((6 + 13) - (3 - 8)) = 24\nreach 24! expression: ((6 + 13) - (3 - 8))"}, {"input": "6 8 13 3\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 8, 3\n(3) - (8) = -5, left: (3 - 8) = -5, (6 + 13) = 19\n(19) - (-5) = 24, left: ((6 + 13) - (3 - 8)) = 24\nreach 24! expression: ((6 + 13) - (3 - 8))"}, {"input": "6 8 13 3\n", "output": "(6) + (8) = 14, left: (6 + 8) = 14, 13, 3\n(3) - (13) = -10, left: (3 - 13) = -10, (6 + 8) = 14\n(14) - (-10) = 24, left: ((6 + 8) - (3 - 13)) = 24\nreach 24! expression: ((6 + 8) - (3 - 13))"}, {"input": "6 8 13 3\n", "output": "(13) - (3) = 10, left: (13 - 3) = 10, 6, 8\n(6) + (10) = 16, left: (6 + (13 - 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (6 + (13 - 3))) = 24\nreach 24! expression: (8 + (6 + (13 - 3)))"}, {"input": "6 8 13 3\n", "output": "(3) / (13) = 3/13, left: (3 / 13) = 3/13, 6, 8\nroll back, left: 6 8 13 3\n(13) + (3) = 16, left: (13 + 3) = 16, 6, 8\n(6) + (16) = 22, left: (6 + (13 + 3)) = 22, 8\nroll back, left: (13 + 3) = 16, 6, 8\nroll back, left: 6 8 13 3\n(13) - (3) = 10, left: (13 - 3) = 10, 6, 8\n(6) + (10) = 16, left: (6 + (13 - 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (6 + (13 - 3))) = 24\nreach 24! expression: (8 + (6 + (13 - 3)))"}, {"input": "6 8 13 3\n", "output": "(6) / (13) = 6/13, left: (6 / 13) = 6/13, 8, 3\nroll back, left: 6 8 13 3\n(6) * (13) = 78, left: (6 * 13) = 78, 8, 3\n(8) * (3) = 24, left: (8 * 3) = 24, (6 * 13) = 78\nroll back, left: (6 * 13) = 78, 8, 3\nroll back, left: 6 8 13 3\n(6) + (13) = 19, left: (6 + 13) = 19, 8, 3\n(3) - (19) = -16, left: (3 - (6 + 13)) = -16, 8\n(8) - (-16) = 24, left: (8 - (3 - (6 + 13))) = 24\nreach 24! expression: (8 - (3 - (6 + 13)))"}, {"input": "6 8 13 3\n", "output": "(6) * (13) = 78, left: (6 * 13) = 78, 8, 3\nroll back, left: 6 8 13 3\n(6) / (13) = 6/13, left: (6 / 13) = 6/13, 8, 3\nroll back, left: 6 8 13 3\n(6) - (13) = -7, left: (6 - 13) = -7, 8, 3\nroll back, left: 6 8 13 3\n(6) + (13) = 19, left: (6 + 13) = 19, 8, 3\n(3) - (8) = -5, left: (3 - 8) = -5, (6 + 13) = 19\n(19) - (-5) = 24, left: ((6 + 13) - (3 - 8)) = 24\nreach 24! expression: ((6 + 13) - (3 - 8))"}, {"input": "10 4 4 3\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (10 - 3)) = 28, 4\n(28) - (4) = 24, left: ((4 * (10 - 3)) - 4) = 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 10, 4\nroll back, left: 10 4 4 3\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, 10, 4\nroll back, left: 10 4 4 3\n(10) * (3) = 30, left: (10 * 3) = 30, 4, 4\nroll back, left: 10 4 4 3\n(10) - (3) = 7, left: (10 - 3) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (10 - 3)) = 28, 4\n(28) - (4) = 24, left: ((4 * (10 - 3)) - 4) = 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 10, 4\nroll back, left: 10 4 4 3\n(10) * (4) = 40, left: (10 * 4) = 40, 4, 3\nroll back, left: 10 4 4 3\n(4) / (10) = 2/5, left: (4 / 10) = 2/5, 4, 3\nroll back, left: 10 4 4 3\n(10) - (3) = 7, left: (10 - 3) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (10 - 3)) = 28, 4\n(28) - (4) = 24, left: ((4 * (10 - 3)) - 4) = 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 10, 4\nroll back, left: 10 4 4 3\n(10) * (4) = 40, left: (10 * 4) = 40, 4, 3\nroll back, left: 10 4 4 3\n(10) + (4) = 14, left: (10 + 4) = 14, 4, 3\nroll back, left: 10 4 4 3\n(10) - (3) = 7, left: (10 - 3) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (10 - 3)) = 28, 4\n(28) - (4) = 24, left: ((4 * (10 - 3)) - 4) = 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(3) / (10) = 3/10, left: (3 / 10) = 3/10, 4, 4\n(4) - (3/10) = 37/10, left: (4 - (3 / 10)) = 37/10, 4\nroll back, left: (3 / 10) = 3/10, 4, 4\nroll back, left: 10 4 4 3\n(10) + (3) = 13, left: (10 + 3) = 13, 4, 4\nroll back, left: 10 4 4 3\n(10) - (3) = 7, left: (10 - 3) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (10 - 3)) = 28, 4\n(28) - (4) = 24, left: ((4 * (10 - 3)) - 4) = 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "10 4 4 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 4, 4\nroll back, left: 10 4 4 3\n(3) - (10) = -7, left: (3 - 10) = -7, 4, 4\nroll back, left: 10 4 4 3\n(10) * (3) = 30, left: (10 * 3) = 30, 4, 4\nroll back, left: 10 4 4 3\n(10) - (3) = 7, left: (10 - 3) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (10 - 3)) = 28, 4\n(28) - (4) = 24, left: ((4 * (10 - 3)) - 4) = 24\nreach 24! expression: ((4 * (10 - 3)) - 4)"}, {"input": "3 8 1 7\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 3, 8\n(6) - (3) = 3, left: ((7 - 1) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 - 1) - 3)) = 24\nreach 24! expression: (8 * ((7 - 1) - 3))"}, {"input": "3 8 1 7\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 8, 1\n(4) - (1) = 3, left: ((7 - 3) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 - 3) - 1)) = 24\nreach 24! expression: (8 * ((7 - 3) - 1))"}, {"input": "3 8 1 7\n", "output": "(3) + (1) = 4, left: (3 + 1) = 4, 8, 7\n(7) - (4) = 3, left: (7 - (3 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (3 + 1))) = 24\nreach 24! expression: (8 * (7 - (3 + 1)))"}, {"input": "3 8 1 7\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 3, 7\n(3) / (1/8) = 24, left: (3 / (1 / 8)) = 24, 7\nroll back, left: (1 / 8) = 1/8, 3, 7\nroll back, left: 3 8 1 7\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, 1, 7\nroll back, left: 3 8 1 7\n(7) - (1) = 6, left: (7 - 1) = 6, 3, 8\n(6) - (3) = 3, left: ((7 - 1) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 - 1) - 3)) = 24\nreach 24! expression: (8 * ((7 - 1) - 3))"}, {"input": "3 8 1 7\n", "output": "(8) * (1) = 8, left: (8 * 1) = 8, 3, 7\n(3) - (7) = -4, left: (3 - 7) = -4, (8 * 1) = 8\nroll back, left: (8 * 1) = 8, 3, 7\nroll back, left: 3 8 1 7\n(1) / (3) = 1/3, left: (1 / 3) = 1/3, 8, 7\nroll back, left: 3 8 1 7\n(3) + (1) = 4, left: (3 + 1) = 4, 8, 7\n(7) - (4) = 3, left: (7 - (3 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (3 + 1))) = 24\nreach 24! expression: (8 * (7 - (3 + 1)))"}, {"input": "3 8 1 7\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 3, 8\nroll back, left: 3 8 1 7\n(1) + (7) = 8, left: (1 + 7) = 8, 3, 8\nroll back, left: 3 8 1 7\n(1) * (7) = 7, left: (1 * 7) = 7, 3, 8\nroll back, left: 3 8 1 7\n(7) - (1) = 6, left: (7 - 1) = 6, 3, 8\n(6) - (3) = 3, left: ((7 - 1) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 - 1) - 3)) = 24\nreach 24! expression: (8 * ((7 - 1) - 3))"}, {"input": "3 8 1 7\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 1, 7\n(24) / (1) = 24, left: ((3 * 8) / 1) = 24, 7\nroll back, left: (3 * 8) = 24, 1, 7\nroll back, left: 3 8 1 7\n(3) + (7) = 10, left: (3 + 7) = 10, 8, 1\nroll back, left: 3 8 1 7\n(7) - (3) = 4, left: (7 - 3) = 4, 8, 1\n(4) - (1) = 3, left: ((7 - 3) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 - 3) - 1)) = 24\nreach 24! expression: (8 * ((7 - 3) - 1))"}, {"input": "3 8 1 7\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 3, 8\n(8) - (3) = 5, left: (8 - 3) = 5, (7 - 1) = 6\nroll back, left: (7 - 1) = 6, 3, 8\n(8) - (6) = 2, left: (8 - (7 - 1)) = 2, 3\nroll back, left: (7 - 1) = 6, 3, 8\n(8) * (6) = 48, left: (8 * (7 - 1)) = 48, 3\nroll back, left: (7 - 1) = 6, 3, 8\n(6) - (3) = 3, left: ((7 - 1) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 - 1) - 3)) = 24\nreach 24! expression: (8 * ((7 - 1) - 3))"}, {"input": "5 7 5 10\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (5 + 7)) = 24\nreach 24! expression: ((10 / 5) * (5 + 7))"}, {"input": "5 7 5 10\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 5, 10\n(10) * (12) = 120, left: (10 * (7 + 5)) = 120, 5\n(120) / (5) = 24, left: ((10 * (7 + 5)) / 5) = 24\nreach 24! expression: ((10 * (7 + 5)) / 5)"}, {"input": "5 7 5 10\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (5 / 10) = 1/2\n(12) / (1/2) = 24, left: ((7 + 5) / (5 / 10)) = 24\nreach 24! expression: ((7 + 5) / (5 / 10))"}, {"input": "5 7 5 10\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 7, 10\nroll back, left: 5 7 5 10\n(5) * (5) = 25, left: (5 * 5) = 25, 7, 10\nroll back, left: 5 7 5 10\n(10) / (5) = 2, left: (10 / 5) = 2, 5, 7\n(2) - (7) = -5, left: ((10 / 5) - 7) = -5, 5\nroll back, left: (10 / 5) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (5 + 7)) = 24\nreach 24! expression: ((10 / 5) * (5 + 7))"}, {"input": "5 7 5 10\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 5, 5\nroll back, left: 5 7 5 10\n(7) + (10) = 17, left: (7 + 10) = 17, 5, 5\nroll back, left: 5 7 5 10\n(10) - (5) = 5, left: (10 - 5) = 5, 7, 5\nroll back, left: 5 7 5 10\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (5 / 10) = 1/2\n(12) / (1/2) = 24, left: ((7 + 5) / (5 / 10)) = 24\nreach 24! expression: ((7 + 5) / (5 / 10))"}, {"input": "5 7 5 10\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 5, 10\n(5) + (10) = 15, left: (5 + 10) = 15, (5 / 7) = 5/7\nroll back, left: (5 / 7) = 5/7, 5, 10\nroll back, left: 5 7 5 10\n(7) / (5) = 7/5, left: (7 / 5) = 7/5, 5, 10\nroll back, left: 5 7 5 10\n(7) + (5) = 12, left: (7 + 5) = 12, 5, 10\n(10) * (12) = 120, left: (10 * (7 + 5)) = 120, 5\n(120) / (5) = 24, left: ((10 * (7 + 5)) / 5) = 24\nreach 24! expression: ((10 * (7 + 5)) / 5)"}, {"input": "5 7 5 10\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 7, 10\n(7) + (25) = 32, left: (7 + (5 * 5)) = 32, 10\nroll back, left: (5 * 5) = 25, 7, 10\nroll back, left: 5 7 5 10\n(5) + (5) = 10, left: (5 + 5) = 10, 7, 10\nroll back, left: 5 7 5 10\n(10) / (5) = 2, left: (10 / 5) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (5 + 7)) = 24\nreach 24! expression: ((10 / 5) * (5 + 7))"}, {"input": "5 7 5 10\n", "output": "(5) * (10) = 50, left: (5 * 10) = 50, 5, 7\nroll back, left: 5 7 5 10\n(5) + (10) = 15, left: (5 + 10) = 15, 5, 7\n(5) / (15) = 1/3, left: (5 / (5 + 10)) = 1/3, 7\nroll back, left: (5 + 10) = 15, 5, 7\nroll back, left: 5 7 5 10\n(10) / (5) = 2, left: (10 / 5) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (5 + 7)) = 24\nreach 24! expression: ((10 / 5) * (5 + 7))"}, {"input": "10 1 12 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (11 - 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (11 - 10))) = 24\nreach 24! expression: (12 * (1 + (11 - 10)))"}, {"input": "10 1 12 11\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 10, 12\n(12) - (10) = 2, left: (12 - 10) = 2, (1 + 11) = 12\n(12) * (2) = 24, left: ((1 + 11) * (12 - 10)) = 24\nreach 24! expression: ((1 + 11) * (12 - 10))"}, {"input": "10 1 12 11\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (12 - 10) = 2\n(2) * (12) = 24, left: ((12 - 10) * (1 + 11)) = 24\nreach 24! expression: ((12 - 10) * (1 + 11))"}, {"input": "10 1 12 11\n", "output": "(1) - (10) = -9, left: (1 - 10) = -9, 12, 11\n(11) + (-9) = 2, left: (11 + (1 - 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (11 + (1 - 10))) = 24\nreach 24! expression: (12 * (11 + (1 - 10)))"}, {"input": "10 1 12 11\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 10, 12\n(12) - (10) = 2, left: ((1 + 11) - 10) = 2, 12\n(12) * (2) = 24, left: (12 * ((1 + 11) - 10)) = 24\nreach 24! expression: (12 * ((1 + 11) - 10))"}, {"input": "10 1 12 11\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 10, 11\n(11) - (11) = 0, left: ((12 - 1) - 11) = 0, 10\nroll back, left: (12 - 1) = 11, 10, 11\nroll back, left: 10 1 12 11\n(10) * (1) = 10, left: (10 * 1) = 10, 12, 11\nroll back, left: 10 1 12 11\n(1) - (10) = -9, left: (1 - 10) = -9, 12, 11\n(11) + (-9) = 2, left: (11 + (1 - 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (11 + (1 - 10))) = 24\nreach 24! expression: (12 * (11 + (1 - 10)))"}, {"input": "5 6 10 4\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 5, 4\n(5) * (-4) = -20, left: (5 * (6 - 10)) = -20, 4\n(4) - (-20) = 24, left: (4 - (5 * (6 - 10))) = 24\nreach 24! expression: (4 - (5 * (6 - 10)))"}, {"input": "5 6 10 4\n", "output": "(5) * (4) = 20, left: (5 * 4) = 20, 6, 10\n(10) - (6) = 4, left: (10 - 6) = 4, (5 * 4) = 20\n(20) + (4) = 24, left: ((5 * 4) + (10 - 6)) = 24\nreach 24! expression: ((5 * 4) + (10 - 6))"}, {"input": "5 6 10 4\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 10, 4\n(10) - (30) = -20, left: (10 - (5 * 6)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 - (5 * 6))) = 24\nreach 24! expression: (4 - (10 - (5 * 6)))"}, {"input": "5 6 10 4\n", "output": "(5) * (4) = 20, left: (5 * 4) = 20, 6, 10\n(10) + (20) = 30, left: (10 + (5 * 4)) = 30, 6\n(30) - (6) = 24, left: ((10 + (5 * 4)) - 6) = 24\nreach 24! expression: ((10 + (5 * 4)) - 6)"}, {"input": "5 6 10 4\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 10, 4\n(4) + (30) = 34, left: (4 + (5 * 6)) = 34, 10\n(34) - (10) = 24, left: ((4 + (5 * 6)) - 10) = 24\nreach 24! expression: ((4 + (5 * 6)) - 10)"}, {"input": "5 6 10 4\n", "output": "(5) + (4) = 9, left: (5 + 4) = 9, 6, 10\nroll back, left: 5 6 10 4\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, 6, 10\n(10) / (4/5) = 25/2, left: (10 / (4 / 5)) = 25/2, 6\nroll back, left: (4 / 5) = 4/5, 6, 10\nroll back, left: 5 6 10 4\n(5) * (4) = 20, left: (5 * 4) = 20, 6, 10\n(10) - (6) = 4, left: (10 - 6) = 4, (5 * 4) = 20\n(20) + (4) = 24, left: ((5 * 4) + (10 - 6)) = 24\nreach 24! expression: ((5 * 4) + (10 - 6))"}, {"input": "5 6 10 4\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 5, 4\n(-4) / (5) = -4/5, left: ((6 - 10) / 5) = -4/5, 4\nroll back, left: (6 - 10) = -4, 5, 4\n(5) - (-4) = 9, left: (5 - (6 - 10)) = 9, 4\nroll back, left: (6 - 10) = -4, 5, 4\n(5) + (-4) = 1, left: (5 + (6 - 10)) = 1, 4\nroll back, left: (6 - 10) = -4, 5, 4\n(5) * (-4) = -20, left: (5 * (6 - 10)) = -20, 4\n(4) - (-20) = 24, left: (4 - (5 * (6 - 10))) = 24\nreach 24! expression: (4 - (5 * (6 - 10)))"}, {"input": "5 6 10 4\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 10, 4\n(10) * (4) = 40, left: (10 * 4) = 40, (5 / 6) = 5/6\nroll back, left: (5 / 6) = 5/6, 10, 4\nroll back, left: 5 6 10 4\n(5) - (6) = -1, left: (5 - 6) = -1, 10, 4\nroll back, left: 5 6 10 4\n(5) * (6) = 30, left: (5 * 6) = 30, 10, 4\n(10) - (30) = -20, left: (10 - (5 * 6)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 - (5 * 6))) = 24\nreach 24! expression: (4 - (10 - (5 * 6)))"}, {"input": "5 6 10 4\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 6, 10\n(6) / (1) = 6, left: (6 / (5 - 4)) = 6, 10\nroll back, left: (5 - 4) = 1, 6, 10\nroll back, left: 5 6 10 4\n(4) - (5) = -1, left: (4 - 5) = -1, 6, 10\nroll back, left: 5 6 10 4\n(5) * (4) = 20, left: (5 * 4) = 20, 6, 10\n(10) + (20) = 30, left: (10 + (5 * 4)) = 30, 6\n(30) - (6) = 24, left: ((10 + (5 * 4)) - 6) = 24\nreach 24! expression: ((10 + (5 * 4)) - 6)"}, {"input": "10 5 1 3\n", "output": "(1) - (10) = -9, left: (1 - 10) = -9, 5, 3\n(5) * (3) = 15, left: (5 * 3) = 15, (1 - 10) = -9\n(15) - (-9) = 24, left: ((5 * 3) - (1 - 10)) = 24\nreach 24! expression: ((5 * 3) - (1 - 10))"}, {"input": "10 5 1 3\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (5 + 1) = 6\n(30) - (6) = 24, left: ((10 * 3) - (5 + 1)) = 24\nreach 24! expression: ((10 * 3) - (5 + 1))"}, {"input": "10 5 1 3\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 10, 1\n(10) + (15) = 25, left: (10 + (5 * 3)) = 25, 1\n(25) - (1) = 24, left: ((10 + (5 * 3)) - 1) = 24\nreach 24! expression: ((10 + (5 * 3)) - 1)"}, {"input": "10 5 1 3\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 5, 3\n(5) * (3) = 15, left: (5 * 3) = 15, (10 - 1) = 9\n(9) + (15) = 24, left: ((10 - 1) + (5 * 3)) = 24\nreach 24! expression: ((10 - 1) + (5 * 3))"}, {"input": "10 5 1 3\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 10, 5\n(10) / (2) = 5, left: (10 / (3 - 1)) = 5, 5\nroll back, left: (3 - 1) = 2, 10, 5\nroll back, left: 10 5 1 3\n(10) / (5) = 2, left: (10 / 5) = 2, 1, 3\nroll back, left: 10 5 1 3\n(1) - (10) = -9, left: (1 - 10) = -9, 5, 3\n(5) * (3) = 15, left: (5 * 3) = 15, (1 - 10) = -9\n(15) - (-9) = 24, left: ((5 * 3) - (1 - 10)) = 24\nreach 24! expression: ((5 * 3) - (1 - 10))"}, {"input": "10 5 1 3\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 5, 3\n(3) - (9) = -6, left: (3 - (10 - 1)) = -6, 5\nroll back, left: (10 - 1) = 9, 5, 3\n(3) * (9) = 27, left: (3 * (10 - 1)) = 27, 5\nroll back, left: (10 - 1) = 9, 5, 3\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, (10 - 1) = 9\nroll back, left: (10 - 1) = 9, 5, 3\n(5) * (3) = 15, left: (5 * 3) = 15, (10 - 1) = 9\n(9) + (15) = 24, left: ((10 - 1) + (5 * 3)) = 24\nreach 24! expression: ((10 - 1) + (5 * 3))"}, {"input": "10 5 1 3\n", "output": "(5) * (1) = 5, left: (5 * 1) = 5, 10, 3\nroll back, left: 10 5 1 3\n(1) - (5) = -4, left: (1 - 5) = -4, 10, 3\nroll back, left: 10 5 1 3\n(5) + (1) = 6, left: (5 + 1) = 6, 10, 3\n(3) / (6) = 1/2, left: (3 / (5 + 1)) = 1/2, 10\nroll back, left: (5 + 1) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (5 + 1) = 6\n(30) - (6) = 24, left: ((10 * 3) - (5 + 1)) = 24\nreach 24! expression: ((10 * 3) - (5 + 1))"}, {"input": "10 5 1 3\n", "output": "(10) * (5) = 50, left: (10 * 5) = 50, 1, 3\nroll back, left: 10 5 1 3\n(1) + (3) = 4, left: (1 + 3) = 4, 10, 5\nroll back, left: 10 5 1 3\n(3) / (1) = 3, left: (3 / 1) = 3, 10, 5\nroll back, left: 10 5 1 3\n(5) * (3) = 15, left: (5 * 3) = 15, 10, 1\n(10) + (15) = 25, left: (10 + (5 * 3)) = 25, 1\n(25) - (1) = 24, left: ((10 + (5 * 3)) - 1) = 24\nreach 24! expression: ((10 + (5 * 3)) - 1)"}, {"input": "10 5 1 3\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 1, 3\nroll back, left: 10 5 1 3\n(10) * (5) = 50, left: (10 * 5) = 50, 1, 3\nroll back, left: 10 5 1 3\n(10) - (5) = 5, left: (10 - 5) = 5, 1, 3\nroll back, left: 10 5 1 3\n(5) + (1) = 6, left: (5 + 1) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (5 + 1) = 6\n(30) - (6) = 24, left: ((10 * 3) - (5 + 1)) = 24\nreach 24! expression: ((10 * 3) - (5 + 1))"}, {"input": "9 8 3 6\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 9, 8\n(9) / (3) = 3, left: (9 / (6 - 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 / (6 - 3))) = 24\nreach 24! expression: (8 * (9 / (6 - 3)))"}, {"input": "9 8 3 6\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (8 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (8 - 3))) = 24\nreach 24! expression: (6 * (9 - (8 - 3)))"}, {"input": "9 8 3 6\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (9 / 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (9 / 3))) = 24\nreach 24! expression: (8 * (6 - (9 / 3)))"}, {"input": "9 8 3 6\n", "output": "(9) * (8) = 72, left: (9 * 8) = 72, 3, 6\n(6) - (3) = 3, left: (6 - 3) = 3, (9 * 8) = 72\n(72) / (3) = 24, left: ((9 * 8) / (6 - 3)) = 24\nreach 24! expression: ((9 * 8) / (6 - 3))"}, {"input": "9 8 3 6\n", "output": "(8) + (3) = 11, left: (8 + 3) = 11, 9, 6\n(9) - (11) = -2, left: (9 - (8 + 3)) = -2, 6\nroll back, left: (8 + 3) = 11, 9, 6\nroll back, left: 9 8 3 6\n(8) - (3) = 5, left: (8 - 3) = 5, 9, 6\n(6) - (5) = 1, left: (6 - (8 - 3)) = 1, 9\nroll back, left: (8 - 3) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (8 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (8 - 3))) = 24\nreach 24! expression: (6 * (9 - (8 - 3)))"}, {"input": "9 8 3 6\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 9, 8\n(9) + (3) = 12, left: (9 + (6 - 3)) = 12, 8\n(8) - (12) = -4, left: (8 - (9 + (6 - 3))) = -4\nroll back, left: (9 + (6 - 3)) = 12, 8\nroll back, left: (6 - 3) = 3, 9, 8\n(9) / (3) = 3, left: (9 / (6 - 3)) = 3, 8\n(3) / (8) = 3/8, left: ((9 / (6 - 3)) / 8) = 3/8\nroll back, left: (9 / (6 - 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 / (6 - 3))) = 24\nreach 24! expression: (8 * (9 / (6 - 3)))"}, {"input": "9 8 3 6\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 8, 3\nroll back, left: 9 8 3 6\n(6) / (3) = 2, left: (6 / 3) = 2, 9, 8\nroll back, left: 9 8 3 6\n(3) + (6) = 9, left: (3 + 6) = 9, 9, 8\nroll back, left: 9 8 3 6\n(6) - (3) = 3, left: (6 - 3) = 3, 9, 8\n(9) / (3) = 3, left: (9 / (6 - 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 / (6 - 3))) = 24\nreach 24! expression: (8 * (9 / (6 - 3)))"}, {"input": "9 8 3 6\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 8, 6\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, (3 / 9) = 1/3\nroll back, left: (3 / 9) = 1/3, 8, 6\nroll back, left: 9 8 3 6\n(9) - (3) = 6, left: (9 - 3) = 6, 8, 6\nroll back, left: 9 8 3 6\n(9) / (3) = 3, left: (9 / 3) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (9 / 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (9 / 3))) = 24\nreach 24! expression: (8 * (6 - (9 / 3)))"}, {"input": "9 8 3 6\n", "output": "(9) * (6) = 54, left: (9 * 6) = 54, 8, 3\n(54) - (8) = 46, left: ((9 * 6) - 8) = 46, 3\nroll back, left: (9 * 6) = 54, 8, 3\nroll back, left: 9 8 3 6\n(6) - (9) = -3, left: (6 - 9) = -3, 8, 3\nroll back, left: 9 8 3 6\n(9) * (8) = 72, left: (9 * 8) = 72, 3, 6\n(6) - (3) = 3, left: (6 - 3) = 3, (9 * 8) = 72\n(72) / (3) = 24, left: ((9 * 8) / (6 - 3)) = 24\nreach 24! expression: ((9 * 8) / (6 - 3))"}, {"input": "11 12 11 6\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 11, 11\n(11) + (2) = 13, left: (11 + (12 / 6)) = 13, 11\n(11) + (13) = 24, left: (11 + (11 + (12 / 6))) = 24\nreach 24! expression: (11 + (11 + (12 / 6)))"}, {"input": "11 12 11 6\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 11, 11\n(11) + (11) = 22, left: (11 + 11) = 22, (12 / 6) = 2\n(2) + (22) = 24, left: ((12 / 6) + (11 + 11)) = 24\nreach 24! expression: ((12 / 6) + (11 + 11))"}, {"input": "11 12 11 6\n", "output": "(11) + (11) = 22, left: (11 + 11) = 22, 12, 6\n(12) / (6) = 2, left: (12 / 6) = 2, (11 + 11) = 22\n(22) + (2) = 24, left: ((11 + 11) + (12 / 6)) = 24\nreach 24! expression: ((11 + 11) + (12 / 6))"}, {"input": "11 12 11 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 11, 12\nroll back, left: 11 12 11 6\n(11) + (6) = 17, left: (11 + 6) = 17, 11, 12\nroll back, left: 11 12 11 6\n(11) / (12) = 11/12, left: (11 / 12) = 11/12, 11, 6\nroll back, left: 11 12 11 6\n(12) / (6) = 2, left: (12 / 6) = 2, 11, 11\n(11) + (2) = 13, left: (11 + (12 / 6)) = 13, 11\n(11) + (13) = 24, left: (11 + (11 + (12 / 6))) = 24\nreach 24! expression: (11 + (11 + (12 / 6)))"}, {"input": "4 12 4 11\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 12, 11\n(12) + (1) = 13, left: (12 + (4 / 4)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (4 / 4))) = 24\nreach 24! expression: (11 + (12 + (4 / 4)))"}, {"input": "4 12 4 11\n", "output": "(12) + (11) = 23, left: (12 + 11) = 23, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (12 + 11) = 23\n(23) + (1) = 24, left: ((12 + 11) + (4 / 4)) = 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "4 12 4 11\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 4, 11\nroll back, left: 4 12 4 11\n(12) - (4) = 8, left: (12 - 4) = 8, 4, 11\n(4) * (11) = 44, left: (4 * 11) = 44, (12 - 4) = 8\nroll back, left: (12 - 4) = 8, 4, 11\nroll back, left: 4 12 4 11\n(12) + (11) = 23, left: (12 + 11) = 23, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (12 + 11) = 23\n(23) + (1) = 24, left: ((12 + 11) + (4 / 4)) = 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "4 12 4 11\n", "output": "(11) / (4) = 11/4, left: (11 / 4) = 11/4, 4, 12\nroll back, left: 4 12 4 11\n(4) - (11) = -7, left: (4 - 11) = -7, 4, 12\n(12) - (4) = 8, left: (12 - 4) = 8, (4 - 11) = -7\nroll back, left: (4 - 11) = -7, 4, 12\nroll back, left: 4 12 4 11\n(4) / (4) = 1, left: (4 / 4) = 1, 12, 11\n(12) + (1) = 13, left: (12 + (4 / 4)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (4 / 4))) = 24\nreach 24! expression: (11 + (12 + (4 / 4)))"}, {"input": "4 12 4 11\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 4, 11\nroll back, left: 4 12 4 11\n(12) - (4) = 8, left: (12 - 4) = 8, 4, 11\n(4) + (8) = 12, left: (4 + (12 - 4)) = 12, 11\nroll back, left: (12 - 4) = 8, 4, 11\nroll back, left: 4 12 4 11\n(12) + (11) = 23, left: (12 + 11) = 23, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (12 + 11) = 23\n(23) + (1) = 24, left: ((12 + 11) + (4 / 4)) = 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "4 12 4 11\n", "output": "(11) / (4) = 11/4, left: (11 / 4) = 11/4, 4, 12\nroll back, left: 4 12 4 11\n(4) + (11) = 15, left: (4 + 11) = 15, 4, 12\nroll back, left: 4 12 4 11\n(12) - (4) = 8, left: (12 - 4) = 8, 4, 11\nroll back, left: 4 12 4 11\n(12) + (11) = 23, left: (12 + 11) = 23, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (12 + 11) = 23\n(23) + (1) = 24, left: ((12 + 11) + (4 / 4)) = 24\nreach 24! expression: ((12 + 11) + (4 / 4))"}, {"input": "13 13 3 5\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 13, 3\n(3) - (-8) = 11, left: (3 - (5 - 13)) = 11, 13\n(13) + (11) = 24, left: (13 + (3 - (5 - 13))) = 24\nreach 24! expression: (13 + (3 - (5 - 13)))"}, {"input": "13 13 3 5\n", "output": "(13) + (3) = 16, left: (13 + 3) = 16, 13, 5\n(13) + (16) = 29, left: (13 + (13 + 3)) = 29, 5\n(29) - (5) = 24, left: ((13 + (13 + 3)) - 5) = 24\nreach 24! expression: ((13 + (13 + 3)) - 5)"}, {"input": "13 13 3 5\n", "output": "(13) + (3) = 16, left: (13 + 3) = 16, 13, 5\n(5) - (13) = -8, left: (5 - 13) = -8, (13 + 3) = 16\n(16) - (-8) = 24, left: ((13 + 3) - (5 - 13)) = 24\nreach 24! expression: ((13 + 3) - (5 - 13))"}, {"input": "12 5 4 13\n", "output": "(5) + (13) = 18, left: (5 + 13) = 18, 12, 4\n(18) - (12) = 6, left: ((5 + 13) - 12) = 6, 4\n(4) * (6) = 24, left: (4 * ((5 + 13) - 12)) = 24\nreach 24! expression: (4 * ((5 + 13) - 12))"}, {"input": "12 5 4 13\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 12, 4\n(12) * (8) = 96, left: (12 * (13 - 5)) = 96, 4\n(96) / (4) = 24, left: ((12 * (13 - 5)) / 4) = 24\nreach 24! expression: ((12 * (13 - 5)) / 4)"}, {"input": "12 5 4 13\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 12, 13\n(12) - (1) = 11, left: (12 - (5 - 4)) = 11, 13\n(13) + (11) = 24, left: (13 + (12 - (5 - 4))) = 24\nreach 24! expression: (13 + (12 - (5 - 4)))"}, {"input": "12 5 4 13\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 12, 4\n(-8) - (4) = -12, left: ((5 - 13) - 4) = -12, 12\n(12) - (-12) = 24, left: (12 - ((5 - 13) - 4)) = 24\nreach 24! expression: (12 - ((5 - 13) - 4))"}, {"input": "12 5 4 13\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 4, 13\n(4) + (13) = 17, left: (4 + 13) = 17, (12 - 5) = 7\n(7) + (17) = 24, left: ((12 - 5) + (4 + 13)) = 24\nreach 24! expression: ((12 - 5) + (4 + 13))"}, {"input": "12 5 4 13\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 12, 13\n(12) - (1) = 11, left: (12 - (5 - 4)) = 11, 13\n(13) + (11) = 24, left: (13 + (12 - (5 - 4))) = 24\nreach 24! expression: (13 + (12 - (5 - 4)))"}, {"input": "12 5 4 13\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 12, 13\n(12) - (1) = 11, left: (12 - (5 - 4)) = 11, 13\n(13) + (11) = 24, left: (13 + (12 - (5 - 4))) = 24\nreach 24! expression: (13 + (12 - (5 - 4)))"}, {"input": "12 5 4 13\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 12, 13\n(12) - (1) = 11, left: (12 - (5 - 4)) = 11, 13\n(13) + (11) = 24, left: (13 + (12 - (5 - 4))) = 24\nreach 24! expression: (13 + (12 - (5 - 4)))"}, {"input": "12 5 4 13\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 12, 13\n(12) - (1) = 11, left: (12 - (5 - 4)) = 11, 13\n(13) + (11) = 24, left: (13 + (12 - (5 - 4))) = 24\nreach 24! expression: (13 + (12 - (5 - 4)))"}, {"input": "3 8 9 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 3, 9\n(3) - (9) = -6, left: (3 - 9) = -6, (4 - 8) = -4\n(-4) * (-6) = 24, left: ((4 - 8) * (3 - 9)) = 24\nreach 24! expression: ((4 - 8) * (3 - 9))"}, {"input": "3 8 9 4\n", "output": "(8) + (9) = 17, left: (8 + 9) = 17, 3, 4\n(3) + (4) = 7, left: (3 + 4) = 7, (8 + 9) = 17\n(17) + (7) = 24, left: ((8 + 9) + (3 + 4)) = 24\nreach 24! expression: ((8 + 9) + (3 + 4))"}, {"input": "3 8 9 4\n", "output": "(3) + (8) = 11, left: (3 + 8) = 11, 9, 4\n(9) + (11) = 20, left: (9 + (3 + 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (9 + (3 + 8))) = 24\nreach 24! expression: (4 + (9 + (3 + 8)))"}, {"input": "3 8 9 4\n", "output": "(9) + (4) = 13, left: (9 + 4) = 13, 3, 8\n(3) + (13) = 16, left: (3 + (9 + 4)) = 16, 8\n(8) + (16) = 24, left: (8 + (3 + (9 + 4))) = 24\nreach 24! expression: (8 + (3 + (9 + 4)))"}, {"input": "3 8 9 4\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 8, 4\n(4) + (12) = 16, left: (4 + (3 + 9)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 + (3 + 9))) = 24\nreach 24! expression: (8 + (4 + (3 + 9)))"}, {"input": "3 8 9 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 3, 9\n(3) - (9) = -6, left: (3 - 9) = -6, (4 - 8) = -4\n(-4) * (-6) = 24, left: ((4 - 8) * (3 - 9)) = 24\nreach 24! expression: ((4 - 8) * (3 - 9))"}, {"input": "3 8 9 4\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 3, 4\n(3) - (72) = -69, left: (3 - (8 * 9)) = -69, 4\nroll back, left: (8 * 9) = 72, 3, 4\n(3) / (72) = 1/24, left: (3 / (8 * 9)) = 1/24, 4\nroll back, left: (8 * 9) = 72, 3, 4\nroll back, left: 3 8 9 4\n(8) + (9) = 17, left: (8 + 9) = 17, 3, 4\n(3) + (4) = 7, left: (3 + 4) = 7, (8 + 9) = 17\n(17) + (7) = 24, left: ((8 + 9) + (3 + 4)) = 24\nreach 24! expression: ((8 + 9) + (3 + 4))"}, {"input": "3 8 9 4\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 3, 8\nroll back, left: 3 8 9 4\n(4) / (9) = 4/9, left: (4 / 9) = 4/9, 3, 8\nroll back, left: 3 8 9 4\n(4) - (9) = -5, left: (4 - 9) = -5, 3, 8\nroll back, left: 3 8 9 4\n(9) + (4) = 13, left: (9 + 4) = 13, 3, 8\n(3) + (13) = 16, left: (3 + (9 + 4)) = 16, 8\n(8) + (16) = 24, left: (8 + (3 + (9 + 4))) = 24\nreach 24! expression: (8 + (3 + (9 + 4)))"}, {"input": "3 8 9 4\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 9, 4\n(9) / (3/8) = 24, left: (9 / (3 / 8)) = 24, 4\n(4) / (24) = 1/6, left: (4 / (9 / (3 / 8))) = 1/6\nroll back, left: (9 / (3 / 8)) = 24, 4\nroll back, left: (3 / 8) = 3/8, 9, 4\nroll back, left: 3 8 9 4\n(3) + (8) = 11, left: (3 + 8) = 11, 9, 4\n(9) + (11) = 20, left: (9 + (3 + 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (9 + (3 + 8))) = 24\nreach 24! expression: (4 + (9 + (3 + 8)))"}, {"input": "3 8 9 4\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 8, 4\n(4) + (12) = 16, left: (4 + (3 + 9)) = 16, 8\n(16) - (8) = 8, left: ((4 + (3 + 9)) - 8) = 8\nroll back, left: (4 + (3 + 9)) = 16, 8\n(8) * (16) = 128, left: (8 * (4 + (3 + 9))) = 128\nroll back, left: (4 + (3 + 9)) = 16, 8\n(8) / (16) = 1/2, left: (8 / (4 + (3 + 9))) = 1/2\nroll back, left: (4 + (3 + 9)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 + (3 + 9))) = 24\nreach 24! expression: (8 + (4 + (3 + 9)))"}, {"input": "3 8 9 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 3, 9\n(3) - (9) = -6, left: (3 - 9) = -6, (4 - 8) = -4\n(-4) * (-6) = 24, left: ((4 - 8) * (3 - 9)) = 24\nreach 24! expression: ((4 - 8) * (3 - 9))"}, {"input": "3 8 9 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 3, 9\n(3) - (9) = -6, left: (3 - 9) = -6, (4 - 8) = -4\n(-4) * (-6) = 24, left: ((4 - 8) * (3 - 9)) = 24\nreach 24! expression: ((4 - 8) * (3 - 9))"}, {"input": "3 8 9 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 3, 9\n(3) - (9) = -6, left: (3 - 9) = -6, (4 - 8) = -4\n(-4) * (-6) = 24, left: ((4 - 8) * (3 - 9)) = 24\nreach 24! expression: ((4 - 8) * (3 - 9))"}, {"input": "9 3 10 9\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 3, 9\n(9) + (-1) = 8, left: (9 + (9 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 + (9 - 10))) = 24\nreach 24! expression: (3 * (9 + (9 - 10)))"}, {"input": "9 3 10 9\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 3, 10\n(18) - (10) = 8, left: ((9 + 9) - 10) = 8, 3\n(3) * (8) = 24, left: (3 * ((9 + 9) - 10)) = 24\nreach 24! expression: (3 * ((9 + 9) - 10))"}, {"input": "9 3 10 9\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 3, 10\nroll back, left: 9 3 10 9\n(9) / (9) = 1, left: (9 / 9) = 1, 3, 10\n(3) - (1) = 2, left: (3 - (9 / 9)) = 2, 10\nroll back, left: (9 / 9) = 1, 3, 10\nroll back, left: 9 3 10 9\n(9) + (9) = 18, left: (9 + 9) = 18, 3, 10\n(18) - (10) = 8, left: ((9 + 9) - 10) = 8, 3\n(3) * (8) = 24, left: (3 * ((9 + 9) - 10)) = 24\nreach 24! expression: (3 * ((9 + 9) - 10))"}, {"input": "9 3 10 9\n", "output": "(9) * (10) = 90, left: (9 * 10) = 90, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (9 * 10) = 90\nroll back, left: (9 * 10) = 90, 3, 9\nroll back, left: 9 3 10 9\n(9) - (10) = -1, left: (9 - 10) = -1, 3, 9\n(9) - (-1) = 10, left: (9 - (9 - 10)) = 10, 3\nroll back, left: (9 - 10) = -1, 3, 9\n(9) + (-1) = 8, left: (9 + (9 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 + (9 - 10))) = 24\nreach 24! expression: (3 * (9 + (9 - 10)))"}, {"input": "1 4 9 12\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 4, 9\n(4) * (9) = 36, left: (4 * 9) = 36, (12 / 1) = 12\n(36) - (12) = 24, left: ((4 * 9) - (12 / 1)) = 24\nreach 24! expression: ((4 * 9) - (12 / 1))"}, {"input": "1 4 9 12\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 9, 12\n(12) + (3) = 15, left: (12 + (4 - 1)) = 15, 9\n(9) + (15) = 24, left: (9 + (12 + (4 - 1))) = 24\nreach 24! expression: (9 + (12 + (4 - 1)))"}, {"input": "1 4 9 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 1, 4\n(4) + (21) = 25, left: (4 + (9 + 12)) = 25, 1\n(25) - (1) = 24, left: ((4 + (9 + 12)) - 1) = 24\nreach 24! expression: ((4 + (9 + 12)) - 1)"}, {"input": "1 4 9 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 1, 4\n(1) - (4) = -3, left: (1 - 4) = -3, (9 + 12) = 21\n(21) - (-3) = 24, left: ((9 + 12) - (1 - 4)) = 24\nreach 24! expression: ((9 + 12) - (1 - 4))"}, {"input": "1 4 9 12\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 4, 9\n(4) + (11) = 15, left: (4 + (12 - 1)) = 15, 9\n(9) + (15) = 24, left: (9 + (4 + (12 - 1))) = 24\nreach 24! expression: (9 + (4 + (12 - 1)))"}, {"input": "1 4 9 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 1, 4\n(1) - (4) = -3, left: (1 - 4) = -3, (9 + 12) = 21\n(-3) - (21) = -24, left: ((1 - 4) - (9 + 12)) = -24\nroll back, left: (1 - 4) = -3, (9 + 12) = 21\n(21) - (-3) = 24, left: ((9 + 12) - (1 - 4)) = 24\nreach 24! expression: ((9 + 12) - (1 - 4))"}, {"input": "1 4 9 12\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 9, 12\n(12) * (3) = 36, left: (12 * (4 - 1)) = 36, 9\nroll back, left: (4 - 1) = 3, 9, 12\n(12) - (3) = 9, left: (12 - (4 - 1)) = 9, 9\n(9) / (9) = 1, left: ((12 - (4 - 1)) / 9) = 1\nroll back, left: (12 - (4 - 1)) = 9, 9\nroll back, left: (4 - 1) = 3, 9, 12\n(12) + (3) = 15, left: (12 + (4 - 1)) = 15, 9\n(9) + (15) = 24, left: (9 + (12 + (4 - 1))) = 24\nreach 24! expression: (9 + (12 + (4 - 1)))"}, {"input": "1 4 9 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 1, 4\n(1) - (4) = -3, left: (1 - 4) = -3, (9 + 12) = 21\n(-3) - (21) = -24, left: ((1 - 4) - (9 + 12)) = -24\nroll back, left: (1 - 4) = -3, (9 + 12) = 21\n(21) - (-3) = 24, left: ((9 + 12) - (1 - 4)) = 24\nreach 24! expression: ((9 + 12) - (1 - 4))"}, {"input": "1 4 9 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 1, 4\n(1) - (4) = -3, left: (1 - 4) = -3, (9 + 12) = 21\n(-3) - (21) = -24, left: ((1 - 4) - (9 + 12)) = -24\nroll back, left: (1 - 4) = -3, (9 + 12) = 21\n(21) - (-3) = 24, left: ((9 + 12) - (1 - 4)) = 24\nreach 24! expression: ((9 + 12) - (1 - 4))"}, {"input": "1 4 9 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 1, 4\n(1) - (4) = -3, left: (1 - 4) = -3, (9 + 12) = 21\n(-3) - (21) = -24, left: ((1 - 4) - (9 + 12)) = -24\nroll back, left: (1 - 4) = -3, (9 + 12) = 21\n(21) - (-3) = 24, left: ((9 + 12) - (1 - 4)) = 24\nreach 24! expression: ((9 + 12) - (1 - 4))"}, {"input": "11 11 3 5\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 11, 3\n(3) - (16) = -13, left: (3 - (11 + 5)) = -13, 11\n(11) - (-13) = 24, left: (11 - (3 - (11 + 5))) = 24\nreach 24! expression: (11 - (3 - (11 + 5)))"}, {"input": "11 11 3 5\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 11, 5\n(11) + (5) = 16, left: (11 + 5) = 16, (11 - 3) = 8\n(8) + (16) = 24, left: ((11 - 3) + (11 + 5)) = 24\nreach 24! expression: ((11 - 3) + (11 + 5))"}, {"input": "11 11 3 5\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 11, 3\n(16) - (3) = 13, left: ((11 + 5) - 3) = 13, 11\n(11) + (13) = 24, left: (11 + ((11 + 5) - 3)) = 24\nreach 24! expression: (11 + ((11 + 5) - 3))"}, {"input": "11 11 3 5\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 11, 3\n(3) - (11) = -8, left: (3 - 11) = -8, (11 + 5) = 16\n(16) - (-8) = 24, left: ((11 + 5) - (3 - 11)) = 24\nreach 24! expression: ((11 + 5) - (3 - 11))"}, {"input": "11 11 3 5\n", "output": "(5) / (11) = 5/11, left: (5 / 11) = 5/11, 11, 3\nroll back, left: 11 11 3 5\n(5) - (11) = -6, left: (5 - 11) = -6, 11, 3\n(11) * (-6) = -66, left: (11 * (5 - 11)) = -66, 3\nroll back, left: (5 - 11) = -6, 11, 3\nroll back, left: 11 11 3 5\n(11) + (5) = 16, left: (11 + 5) = 16, 11, 3\n(3) - (16) = -13, left: (3 - (11 + 5)) = -13, 11\n(11) - (-13) = 24, left: (11 - (3 - (11 + 5))) = 24\nreach 24! expression: (11 - (3 - (11 + 5)))"}, {"input": "12 7 6 8\n", "output": "(12) / (7) = 12/7, left: (12 / 7) = 12/7, 6, 8\n(6) + (8) = 14, left: (6 + 8) = 14, (12 / 7) = 12/7\n(12/7) * (14) = 24, left: ((12 / 7) * (6 + 8)) = 24\nreach 24! expression: ((12 / 7) * (6 + 8))"}, {"input": "12 7 6 8\n", "output": "(6) + (8) = 14, left: (6 + 8) = 14, 12, 7\n(7) / (14) = 1/2, left: (7 / (6 + 8)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (7 / (6 + 8))) = 24\nreach 24! expression: (12 / (7 / (6 + 8)))"}, {"input": "12 7 6 8\n", "output": "(6) + (8) = 14, left: (6 + 8) = 14, 12, 7\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, (6 + 8) = 14\n(14) * (12/7) = 24, left: ((6 + 8) * (12 / 7)) = 24\nreach 24! expression: ((6 + 8) * (12 / 7))"}, {"input": "12 7 6 8\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 7, 6\nroll back, left: 12 7 6 8\n(12) * (8) = 96, left: (12 * 8) = 96, 7, 6\nroll back, left: 12 7 6 8\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 7, 6\nroll back, left: 12 7 6 8\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, 6, 8\n(6) + (8) = 14, left: (6 + 8) = 14, (12 / 7) = 12/7\n(12/7) * (14) = 24, left: ((12 / 7) * (6 + 8)) = 24\nreach 24! expression: ((12 / 7) * (6 + 8))"}, {"input": "12 7 6 8\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 12, 6\nroll back, left: 12 7 6 8\n(6) * (8) = 48, left: (6 * 8) = 48, 12, 7\nroll back, left: 12 7 6 8\n(8) - (6) = 2, left: (8 - 6) = 2, 12, 7\nroll back, left: 12 7 6 8\n(6) + (8) = 14, left: (6 + 8) = 14, 12, 7\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, (6 + 8) = 14\n(14) * (12/7) = 24, left: ((6 + 8) * (12 / 7)) = 24\nreach 24! expression: ((6 + 8) * (12 / 7))"}, {"input": "12 7 6 8\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 7, 8\nroll back, left: 12 7 6 8\n(7) - (12) = -5, left: (7 - 12) = -5, 6, 8\nroll back, left: 12 7 6 8\n(12) * (7) = 84, left: (12 * 7) = 84, 6, 8\nroll back, left: 12 7 6 8\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, 6, 8\n(6) + (8) = 14, left: (6 + 8) = 14, (12 / 7) = 12/7\n(12/7) * (14) = 24, left: ((12 / 7) * (6 + 8)) = 24\nreach 24! expression: ((12 / 7) * (6 + 8))"}, {"input": "12 7 6 8\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 12, 7\nroll back, left: 12 7 6 8\n(6) * (8) = 48, left: (6 * 8) = 48, 12, 7\n(12) - (7) = 5, left: (12 - 7) = 5, (6 * 8) = 48\nroll back, left: (6 * 8) = 48, 12, 7\nroll back, left: 12 7 6 8\n(6) + (8) = 14, left: (6 + 8) = 14, 12, 7\n(7) / (14) = 1/2, left: (7 / (6 + 8)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (7 / (6 + 8))) = 24\nreach 24! expression: (12 / (7 / (6 + 8)))"}, {"input": "12 7 6 8\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 7, 6\nroll back, left: 12 7 6 8\n(8) - (12) = -4, left: (8 - 12) = -4, 7, 6\n(7) + (6) = 13, left: (7 + 6) = 13, (8 - 12) = -4\nroll back, left: (8 - 12) = -4, 7, 6\nroll back, left: 12 7 6 8\n(6) + (8) = 14, left: (6 + 8) = 14, 12, 7\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, (6 + 8) = 14\n(14) * (12/7) = 24, left: ((6 + 8) * (12 / 7)) = 24\nreach 24! expression: ((6 + 8) * (12 / 7))"}, {"input": "10 12 1 8\n", "output": "(10) * (1) = 10, left: (10 * 1) = 10, 12, 8\n(10) - (8) = 2, left: ((10 * 1) - 8) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 * 1) - 8)) = 24\nreach 24! expression: (12 * ((10 * 1) - 8))"}, {"input": "10 12 1 8\n", "output": "(12) * (1) = 12, left: (12 * 1) = 12, 10, 8\n(10) - (8) = 2, left: (10 - 8) = 2, (12 * 1) = 12\n(12) * (2) = 24, left: ((12 * 1) * (10 - 8)) = 24\nreach 24! expression: ((12 * 1) * (10 - 8))"}, {"input": "10 12 1 8\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 1, 8\n(1) - (-2) = 3, left: (1 - (10 - 12)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (10 - 12))) = 24\nreach 24! expression: (8 * (1 - (10 - 12)))"}, {"input": "10 12 1 8\n", "output": "(1) - (10) = -9, left: (1 - 10) = -9, 12, 8\n(12) + (-9) = 3, left: (12 + (1 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 + (1 - 10))) = 24\nreach 24! expression: (8 * (12 + (1 - 10)))"}, {"input": "10 12 1 8\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 10, 12\n(10) - (8) = 2, left: (10 - (8 / 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 - (8 / 1))) = 24\nreach 24! expression: (12 * (10 - (8 / 1)))"}, {"input": "10 12 1 8\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 10, 1\n(10) / (-4) = -5/2, left: (10 / (8 - 12)) = -5/2, 1\nroll back, left: (8 - 12) = -4, 10, 1\nroll back, left: 10 12 1 8\n(12) * (8) = 96, left: (12 * 8) = 96, 10, 1\nroll back, left: 10 12 1 8\n(1) - (10) = -9, left: (1 - 10) = -9, 12, 8\n(12) + (-9) = 3, left: (12 + (1 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 + (1 - 10))) = 24\nreach 24! expression: (8 * (12 + (1 - 10)))"}, {"input": "10 12 1 8\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 1, 8\n(1) + (8) = 9, left: (1 + 8) = 9, (10 - 12) = -2\nroll back, left: (10 - 12) = -2, 1, 8\n(1) * (8) = 8, left: (1 * 8) = 8, (10 - 12) = -2\nroll back, left: (10 - 12) = -2, 1, 8\n(1) * (-2) = -2, left: (1 * (10 - 12)) = -2, 8\nroll back, left: (10 - 12) = -2, 1, 8\n(1) - (-2) = 3, left: (1 - (10 - 12)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (10 - 12))) = 24\nreach 24! expression: (8 * (1 - (10 - 12)))"}, {"input": "11 8 7 12\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 11, 12\n(11) + (1) = 12, left: (11 + (8 - 7)) = 12, 12\n(12) + (12) = 24, left: (12 + (11 + (8 - 7))) = 24\nreach 24! expression: (12 + (11 + (8 - 7)))"}, {"input": "11 8 7 12\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 8, 12\n(12) / (4) = 3, left: (12 / (11 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 / (11 - 7))) = 24\nreach 24! expression: (8 * (12 / (11 - 7)))"}, {"input": "11 8 7 12\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 8, 12\n(-4) - (8) = -12, left: ((7 - 11) - 8) = -12, 12\n(12) - (-12) = 24, left: (12 - ((7 - 11) - 8)) = 24\nreach 24! expression: (12 - ((7 - 11) - 8))"}, {"input": "11 8 7 12\n", "output": "(11) + (8) = 19, left: (11 + 8) = 19, 7, 12\n(19) - (7) = 12, left: ((11 + 8) - 7) = 12, 12\n(12) + (12) = 24, left: (12 + ((11 + 8) - 7)) = 24\nreach 24! expression: (12 + ((11 + 8) - 7))"}, {"input": "11 8 7 12\n", "output": "(7) - (12) = -5, left: (7 - 12) = -5, 11, 8\n(11) + (8) = 19, left: (11 + 8) = 19, (7 - 12) = -5\n(19) - (-5) = 24, left: ((11 + 8) - (7 - 12)) = 24\nreach 24! expression: ((11 + 8) - (7 - 12))"}, {"input": "11 8 7 12\n", "output": "(8) * (7) = 56, left: (8 * 7) = 56, 11, 12\n(12) - (11) = 1, left: (12 - 11) = 1, (8 * 7) = 56\nroll back, left: (8 * 7) = 56, 11, 12\nroll back, left: 11 8 7 12\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, 11, 12\nroll back, left: 11 8 7 12\n(8) - (7) = 1, left: (8 - 7) = 1, 11, 12\n(11) + (1) = 12, left: (11 + (8 - 7)) = 12, 12\n(12) + (12) = 24, left: (12 + (11 + (8 - 7))) = 24\nreach 24! expression: (12 + (11 + (8 - 7)))"}, {"input": "1 12 13 6\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (12 / 6) = 2\n(2) * (12) = 24, left: ((12 / 6) * (13 - 1)) = 24\nreach 24! expression: ((12 / 6) * (13 - 1))"}, {"input": "1 12 13 6\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 12, 6\n(12) * (12) = 144, left: (12 * (13 - 1)) = 144, 6\n(144) / (6) = 24, left: ((12 * (13 - 1)) / 6) = 24\nreach 24! expression: ((12 * (13 - 1)) / 6)"}, {"input": "1 12 13 6\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 12, 6\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, (13 - 1) = 12\n(12) / (1/2) = 24, left: ((13 - 1) / (6 / 12)) = 24\nreach 24! expression: ((13 - 1) / (6 / 12))"}, {"input": "1 12 13 6\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 12, 6\n(12) / (6) = 2, left: (12 / 6) = 2, (13 - 1) = 12\n(12) * (2) = 24, left: ((13 - 1) * (12 / 6)) = 24\nreach 24! expression: ((13 - 1) * (12 / 6))"}, {"input": "1 12 13 6\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 13, 6\nroll back, left: 1 12 13 6\n(13) / (6) = 13/6, left: (13 / 6) = 13/6, 1, 12\nroll back, left: 1 12 13 6\n(13) / (1) = 13, left: (13 / 1) = 13, 12, 6\nroll back, left: 1 12 13 6\n(13) - (1) = 12, left: (13 - 1) = 12, 12, 6\n(12) / (6) = 2, left: (12 / 6) = 2, (13 - 1) = 12\n(12) * (2) = 24, left: ((13 - 1) * (12 / 6)) = 24\nreach 24! expression: ((13 - 1) * (12 / 6))"}, {"input": "9 5 7 4\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 7, 4\n(7) * (4) = 28, left: (7 * 4) = 28, (5 - 9) = -4\n(-4) + (28) = 24, left: ((5 - 9) + (7 * 4)) = 24\nreach 24! expression: ((5 - 9) + (7 * 4))"}, {"input": "9 5 7 4\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (5 + 7) = 12\n(36) - (12) = 24, left: ((9 * 4) - (5 + 7)) = 24\nreach 24! expression: ((9 * 4) - (5 + 7))"}, {"input": "9 5 7 4\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (9 * 4) = 36\n(36) - (12) = 24, left: ((9 * 4) - (5 + 7)) = 24\nreach 24! expression: ((9 * 4) - (5 + 7))"}, {"input": "9 5 7 4\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 9, 5\n(5) - (9) = -4, left: (5 - 9) = -4, (7 * 4) = 28\n(28) + (-4) = 24, left: ((7 * 4) + (5 - 9)) = 24\nreach 24! expression: ((7 * 4) + (5 - 9))"}, {"input": "9 5 7 4\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 5, 7\n(36) - (7) = 29, left: ((9 * 4) - 7) = 29, 5\n(29) - (5) = 24, left: (((9 * 4) - 7) - 5) = 24\nreach 24! expression: (((9 * 4) - 7) - 5)"}, {"input": "9 5 7 4\n", "output": "(9) * (7) = 63, left: (9 * 7) = 63, 5, 4\nroll back, left: 9 5 7 4\n(7) - (9) = -2, left: (7 - 9) = -2, 5, 4\nroll back, left: 9 5 7 4\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 9, 7\nroll back, left: 9 5 7 4\n(7) * (4) = 28, left: (7 * 4) = 28, 9, 5\n(5) - (9) = -4, left: (5 - 9) = -4, (7 * 4) = 28\n(28) + (-4) = 24, left: ((7 * 4) + (5 - 9)) = 24\nreach 24! expression: ((7 * 4) + (5 - 9))"}, {"input": "9 5 7 4\n", "output": "(9) * (5) = 45, left: (9 * 5) = 45, 7, 4\nroll back, left: 9 5 7 4\n(5) / (9) = 5/9, left: (5 / 9) = 5/9, 7, 4\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, (5 / 9) = 5/9\nroll back, left: (5 / 9) = 5/9, 7, 4\nroll back, left: 9 5 7 4\n(5) - (9) = -4, left: (5 - 9) = -4, 7, 4\n(7) * (4) = 28, left: (7 * 4) = 28, (5 - 9) = -4\n(-4) + (28) = 24, left: ((5 - 9) + (7 * 4)) = 24\nreach 24! expression: ((5 - 9) + (7 * 4))"}, {"input": "9 5 7 4\n", "output": "(9) * (7) = 63, left: (9 * 7) = 63, 5, 4\nroll back, left: 9 5 7 4\n(9) - (4) = 5, left: (9 - 4) = 5, 5, 7\n(7) + (5) = 12, left: (7 + (9 - 4)) = 12, 5\nroll back, left: (9 - 4) = 5, 5, 7\nroll back, left: 9 5 7 4\n(9) * (4) = 36, left: (9 * 4) = 36, 5, 7\n(36) - (7) = 29, left: ((9 * 4) - 7) = 29, 5\n(29) - (5) = 24, left: (((9 * 4) - 7) - 5) = 24\nreach 24! expression: (((9 * 4) - 7) - 5)"}, {"input": "9 5 7 4\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (4 / 9) = 4/9\nroll back, left: (4 / 9) = 4/9, 5, 7\nroll back, left: 9 5 7 4\n(4) - (9) = -5, left: (4 - 9) = -5, 5, 7\nroll back, left: 9 5 7 4\n(9) * (4) = 36, left: (9 * 4) = 36, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (9 * 4) = 36\n(36) - (12) = 24, left: ((9 * 4) - (5 + 7)) = 24\nreach 24! expression: ((9 * 4) - (5 + 7))"}, {"input": "9 5 7 4\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 9, 4\n(4) - (9) = -5, left: (4 - 9) = -5, (7 - 5) = 2\n(2) - (-5) = 7, left: ((7 - 5) - (4 - 9)) = 7\nroll back, left: (4 - 9) = -5, (7 - 5) = 2\nroll back, left: (7 - 5) = 2, 9, 4\nroll back, left: 9 5 7 4\n(5) + (7) = 12, left: (5 + 7) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (5 + 7) = 12\n(36) - (12) = 24, left: ((9 * 4) - (5 + 7)) = 24\nreach 24! expression: ((9 * 4) - (5 + 7))"}, {"input": "10 3 1 11\n", "output": "(1) * (11) = 11, left: (1 * 11) = 11, 10, 3\n(10) + (3) = 13, left: (10 + 3) = 13, (1 * 11) = 11\n(11) + (13) = 24, left: ((1 * 11) + (10 + 3)) = 24\nreach 24! expression: ((1 * 11) + (10 + 3))"}, {"input": "10 3 1 11\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 1, 11\n(11) + (13) = 24, left: (11 + (10 + 3)) = 24, 1\n(1) * (24) = 24, left: (1 * (11 + (10 + 3))) = 24\nreach 24! expression: (1 * (11 + (10 + 3)))"}, {"input": "10 3 1 11\n", "output": "(3) * (11) = 33, left: (3 * 11) = 33, 10, 1\n(1) + (33) = 34, left: (1 + (3 * 11)) = 34, 10\n(34) - (10) = 24, left: ((1 + (3 * 11)) - 10) = 24\nreach 24! expression: ((1 + (3 * 11)) - 10)"}, {"input": "10 3 1 11\n", "output": "(10) + (11) = 21, left: (10 + 11) = 21, 3, 1\n(1) * (21) = 21, left: (1 * (10 + 11)) = 21, 3\n(3) + (21) = 24, left: (3 + (1 * (10 + 11))) = 24\nreach 24! expression: (3 + (1 * (10 + 11)))"}, {"input": "10 3 1 11\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 3, 11\n(3) * (11) = 33, left: (3 * 11) = 33, (10 - 1) = 9\n(33) - (9) = 24, left: ((3 * 11) - (10 - 1)) = 24\nreach 24! expression: ((3 * 11) - (10 - 1))"}, {"input": "12 8 4 3\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (12 - 8)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (12 - 8))) = 24\nreach 24! expression: (3 * (4 + (12 - 8)))"}, {"input": "12 8 4 3\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 12, 8\n(12) * (4/3) = 16, left: (12 * (4 / 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (12 * (4 / 3))) = 24\nreach 24! expression: (8 + (12 * (4 / 3)))"}, {"input": "12 8 4 3\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 12, 8\n(12) / (3/4) = 16, left: (12 / (3 / 4)) = 16, 8\n(8) + (16) = 24, left: (8 + (12 / (3 / 4))) = 24\nreach 24! expression: (8 + (12 / (3 / 4)))"}, {"input": "12 8 4 3\n", "output": "(12) * (3) = 36, left: (12 * 3) = 36, 8, 4\n(36) - (4) = 32, left: ((12 * 3) - 4) = 32, 8\n(32) - (8) = 24, left: (((12 * 3) - 4) - 8) = 24\nreach 24! expression: (((12 * 3) - 4) - 8)"}, {"input": "12 8 4 3\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 4, 3\n(4) - (-4) = 8, left: (4 - (8 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 - (8 - 12))) = 24\nreach 24! expression: (3 * (4 - (8 - 12)))"}, {"input": "12 8 4 3\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 4, 3\n(4) - (3) = 1, left: ((12 - 8) - 3) = 1, 4\n(1) / (4) = 1/4, left: (((12 - 8) - 3) / 4) = 1/4\nroll back, left: ((12 - 8) - 3) = 1, 4\nroll back, left: (12 - 8) = 4, 4, 3\n(3) / (4) = 3/4, left: (3 / (12 - 8)) = 3/4, 4\nroll back, left: (12 - 8) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (12 - 8)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (12 - 8))) = 24\nreach 24! expression: (3 * (4 + (12 - 8)))"}, {"input": "12 8 4 3\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 12, 8\nroll back, left: 12 8 4 3\n(3) - (4) = -1, left: (3 - 4) = -1, 12, 8\n(8) / (-1) = -8, left: (8 / (3 - 4)) = -8, 12\nroll back, left: (3 - 4) = -1, 12, 8\nroll back, left: 12 8 4 3\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, 12, 8\n(12) * (4/3) = 16, left: (12 * (4 / 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (12 * (4 / 3))) = 24\nreach 24! expression: (8 + (12 * (4 / 3)))"}, {"input": "12 8 4 3\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 12, 8\n(7) - (12) = -5, left: ((4 + 3) - 12) = -5, 8\n(8) / (-5) = -8/5, left: (8 / ((4 + 3) - 12)) = -8/5\nroll back, left: ((4 + 3) - 12) = -5, 8\nroll back, left: (4 + 3) = 7, 12, 8\nroll back, left: 12 8 4 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 12, 8\n(12) / (3/4) = 16, left: (12 / (3 / 4)) = 16, 8\n(8) + (16) = 24, left: (8 + (12 / (3 / 4))) = 24\nreach 24! expression: (8 + (12 / (3 / 4)))"}, {"input": "12 8 4 3\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (12 * 8) = 96\nroll back, left: (12 * 8) = 96, 4, 3\n(3) - (96) = -93, left: (3 - (12 * 8)) = -93, 4\nroll back, left: (12 * 8) = 96, 4, 3\nroll back, left: 12 8 4 3\n(8) - (12) = -4, left: (8 - 12) = -4, 4, 3\n(4) - (-4) = 8, left: (4 - (8 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 - (8 - 12))) = 24\nreach 24! expression: (3 * (4 - (8 - 12)))"}, {"input": "1 6 9 6\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 6, 9\n(9) - (5) = 4, left: (9 - (6 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (6 - 1))) = 24\nreach 24! expression: (6 * (9 - (6 - 1)))"}, {"input": "1 6 9 6\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 9, 6\n(9) + (-5) = 4, left: (9 + (1 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 + (1 - 6))) = 24\nreach 24! expression: (6 * (9 + (1 - 6)))"}, {"input": "1 6 9 6\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 1, 6\n(1) - (-3) = 4, left: (1 - (6 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 - (6 - 9))) = 24\nreach 24! expression: (6 * (1 - (6 - 9)))"}, {"input": "1 6 9 6\n", "output": "(1) + (6) = 7, left: (1 + 6) = 7, 6, 9\nroll back, left: 1 6 9 6\n(6) - (1) = 5, left: (6 - 1) = 5, 6, 9\n(5) / (6) = 5/6, left: ((6 - 1) / 6) = 5/6, 9\n(5/6) - (9) = -49/6, left: (((6 - 1) / 6) - 9) = -49/6\nroll back, left: ((6 - 1) / 6) = 5/6, 9\nroll back, left: (6 - 1) = 5, 6, 9\n(9) - (5) = 4, left: (9 - (6 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (6 - 1))) = 24\nreach 24! expression: (6 * (9 - (6 - 1)))"}, {"input": "1 6 9 6\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 1, 6\n(6) / (1) = 6, left: (6 / 1) = 6, (6 - 9) = -3\nroll back, left: (6 - 9) = -3, 1, 6\n(1) + (6) = 7, left: (1 + 6) = 7, (6 - 9) = -3\nroll back, left: (6 - 9) = -3, 1, 6\n(1) / (-3) = -1/3, left: (1 / (6 - 9)) = -1/3, 6\nroll back, left: (6 - 9) = -3, 1, 6\n(1) - (-3) = 4, left: (1 - (6 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 - (6 - 9))) = 24\nreach 24! expression: (6 * (1 - (6 - 9)))"}, {"input": "1 6 9 6\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 9, 6\n(6) - (9) = -3, left: (6 - 9) = -3, (1 - 6) = -5\nroll back, left: (1 - 6) = -5, 9, 6\n(9) + (6) = 15, left: (9 + 6) = 15, (1 - 6) = -5\nroll back, left: (1 - 6) = -5, 9, 6\n(-5) - (6) = -11, left: ((1 - 6) - 6) = -11, 9\nroll back, left: (1 - 6) = -5, 9, 6\n(9) + (-5) = 4, left: (9 + (1 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 + (1 - 6))) = 24\nreach 24! expression: (6 * (9 + (1 - 6)))"}, {"input": "1 6 9 6\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 1, 6\n(6) - (1) = 5, left: (6 - 1) = 5, (6 / 9) = 2/3\nroll back, left: (6 / 9) = 2/3, 1, 6\n(2/3) - (6) = -16/3, left: ((6 / 9) - 6) = -16/3, 1\nroll back, left: (6 / 9) = 2/3, 1, 6\nroll back, left: 1 6 9 6\n(6) - (9) = -3, left: (6 - 9) = -3, 1, 6\n(1) - (-3) = 4, left: (1 - (6 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 - (6 - 9))) = 24\nreach 24! expression: (6 * (1 - (6 - 9)))"}, {"input": "1 6 9 6\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 6, 9\n(6) - (6) = 0, left: ((6 / 1) - 6) = 0, 9\nroll back, left: (6 / 1) = 6, 6, 9\nroll back, left: 1 6 9 6\n(6) - (1) = 5, left: (6 - 1) = 5, 6, 9\n(5) - (9) = -4, left: ((6 - 1) - 9) = -4, 6\nroll back, left: (6 - 1) = 5, 6, 9\n(9) - (5) = 4, left: (9 - (6 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (6 - 1))) = 24\nreach 24! expression: (6 * (9 - (6 - 1)))"}, {"input": "13 7 3 13\n", "output": "(13) / (13) = 1, left: (13 / 13) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (13 / 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (13 / 13))) = 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "13 7 3 13\n", "output": "(7) * (13) = 91, left: (7 * 13) = 91, 13, 3\nroll back, left: 13 7 3 13\n(13) / (3) = 13/3, left: (13 / 3) = 13/3, 7, 13\nroll back, left: 13 7 3 13\n(3) - (7) = -4, left: (3 - 7) = -4, 13, 13\nroll back, left: 13 7 3 13\n(13) / (13) = 1, left: (13 / 13) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (13 / 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (13 / 13))) = 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "13 7 3 13\n", "output": "(13) - (13) = 0, left: (13 - 13) = 0, 7, 3\nroll back, left: 13 7 3 13\n(13) / (13) = 1, left: (13 / 13) = 1, 7, 3\n(1) - (3) = -2, left: ((13 / 13) - 3) = -2, 7\n(-2) - (7) = -9, left: (((13 / 13) - 3) - 7) = -9\nroll back, left: ((13 / 13) - 3) = -2, 7\nroll back, left: (13 / 13) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (13 / 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (13 / 13))) = 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "13 7 3 13\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 13, 13\n(21) / (13) = 21/13, left: ((7 * 3) / 13) = 21/13, 13\nroll back, left: (7 * 3) = 21, 13, 13\nroll back, left: 13 7 3 13\n(7) + (3) = 10, left: (7 + 3) = 10, 13, 13\nroll back, left: 13 7 3 13\n(13) / (13) = 1, left: (13 / 13) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (13 / 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (13 / 13))) = 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "13 7 3 13\n", "output": "(13) / (3) = 13/3, left: (13 / 3) = 13/3, 13, 7\nroll back, left: 13 7 3 13\n(13) - (7) = 6, left: (13 - 7) = 6, 3, 13\n(6) - (3) = 3, left: ((13 - 7) - 3) = 3, 13\nroll back, left: (13 - 7) = 6, 3, 13\nroll back, left: 13 7 3 13\n(13) / (13) = 1, left: (13 / 13) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (13 / 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (13 / 13))) = 24\nreach 24! expression: (3 * (7 + (13 / 13)))"}, {"input": "5 10 2 7\n", "output": "(5) - (10) = -5, left: (5 - 10) = -5, 2, 7\n(7) - (-5) = 12, left: (7 - (5 - 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 - (5 - 10))) = 24\nreach 24! expression: (2 * (7 - (5 - 10)))"}, {"input": "5 10 2 7\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 10, 2\n(10) + (12) = 22, left: (10 + (5 + 7)) = 22, 2\n(2) + (22) = 24, left: (2 + (10 + (5 + 7))) = 24\nreach 24! expression: (2 + (10 + (5 + 7)))"}, {"input": "5 10 2 7\n", "output": "(10) + (2) = 12, left: (10 + 2) = 12, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (10 + 2) = 12\n(12) + (12) = 24, left: ((10 + 2) + (5 + 7)) = 24\nreach 24! expression: ((10 + 2) + (5 + 7))"}, {"input": "5 10 2 7\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 10, 2\n(10) + (2) = 12, left: (10 + 2) = 12, (5 + 7) = 12\n(12) + (12) = 24, left: ((5 + 7) + (10 + 2)) = 24\nreach 24! expression: ((5 + 7) + (10 + 2))"}, {"input": "5 10 2 7\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 5, 10\n(5) + (10) = 15, left: (5 + 10) = 15, (2 + 7) = 9\n(9) + (15) = 24, left: ((2 + 7) + (5 + 10)) = 24\nreach 24! expression: ((2 + 7) + (5 + 10))"}, {"input": "5 10 2 7\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 5, 10\n(5) * (10) = 50, left: (5 * 10) = 50, (7 - 2) = 5\nroll back, left: (7 - 2) = 5, 5, 10\nroll back, left: 5 10 2 7\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, 5, 10\nroll back, left: 5 10 2 7\n(2) + (7) = 9, left: (2 + 7) = 9, 5, 10\n(5) + (10) = 15, left: (5 + 10) = 15, (2 + 7) = 9\n(9) + (15) = 24, left: ((2 + 7) + (5 + 10)) = 24\nreach 24! expression: ((2 + 7) + (5 + 10))"}, {"input": "5 10 2 7\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 5, 7\n(7) * (5) = 35, left: (7 * (10 / 2)) = 35, 5\n(5) * (35) = 175, left: (5 * (7 * (10 / 2))) = 175\nroll back, left: (7 * (10 / 2)) = 35, 5\nroll back, left: (10 / 2) = 5, 5, 7\nroll back, left: 5 10 2 7\n(10) + (2) = 12, left: (10 + 2) = 12, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (10 + 2) = 12\n(12) + (12) = 24, left: ((10 + 2) + (5 + 7)) = 24\nreach 24! expression: ((10 + 2) + (5 + 7))"}, {"input": "5 10 2 7\n", "output": "(5) - (10) = -5, left: (5 - 10) = -5, 2, 7\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, (5 - 10) = -5\nroll back, left: (5 - 10) = -5, 2, 7\n(2) + (7) = 9, left: (2 + 7) = 9, (5 - 10) = -5\nroll back, left: (5 - 10) = -5, 2, 7\n(7) / (-5) = -7/5, left: (7 / (5 - 10)) = -7/5, 2\nroll back, left: (5 - 10) = -5, 2, 7\n(7) - (-5) = 12, left: (7 - (5 - 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 - (5 - 10))) = 24\nreach 24! expression: (2 * (7 - (5 - 10)))"}, {"input": "5 10 2 7\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 10, 2\n(5/7) - (10) = -65/7, left: ((5 / 7) - 10) = -65/7, 2\nroll back, left: (5 / 7) = 5/7, 10, 2\nroll back, left: 5 10 2 7\n(5) + (7) = 12, left: (5 + 7) = 12, 10, 2\n(12) - (10) = 2, left: ((5 + 7) - 10) = 2, 2\nroll back, left: (5 + 7) = 12, 10, 2\n(10) + (12) = 22, left: (10 + (5 + 7)) = 22, 2\n(2) + (22) = 24, left: (2 + (10 + (5 + 7))) = 24\nreach 24! expression: (2 + (10 + (5 + 7)))"}, {"input": "2 8 10 3\n", "output": "(10) * (3) = 30, left: (10 * 3) = 30, 2, 8\n(8) - (2) = 6, left: (8 - 2) = 6, (10 * 3) = 30\n(30) - (6) = 24, left: ((10 * 3) - (8 - 2)) = 24\nreach 24! expression: ((10 * 3) - (8 - 2))"}, {"input": "2 8 10 3\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (8 - 2) = 6\n(30) - (6) = 24, left: ((10 * 3) - (8 - 2)) = 24\nreach 24! expression: ((10 * 3) - (8 - 2))"}, {"input": "2 8 10 3\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 8, 10\n(10) + (6) = 16, left: (10 + (2 * 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (10 + (2 * 3))) = 24\nreach 24! expression: (8 + (10 + (2 * 3)))"}, {"input": "2 8 10 3\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (8 + 10) = 18\n(18) + (6) = 24, left: ((8 + 10) + (2 * 3)) = 24\nreach 24! expression: ((8 + 10) + (2 * 3))"}, {"input": "2 8 10 3\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (2 - 8) = -6\n(-6) + (30) = 24, left: ((2 - 8) + (10 * 3)) = 24\nreach 24! expression: ((2 - 8) + (10 * 3))"}, {"input": "2 8 10 3\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 2, 10\nroll back, left: 2 8 10 3\n(8) + (3) = 11, left: (8 + 3) = 11, 2, 10\nroll back, left: 2 8 10 3\n(2) + (3) = 5, left: (2 + 3) = 5, 8, 10\nroll back, left: 2 8 10 3\n(2) * (3) = 6, left: (2 * 3) = 6, 8, 10\n(10) + (6) = 16, left: (10 + (2 * 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (10 + (2 * 3))) = 24\nreach 24! expression: (8 + (10 + (2 * 3)))"}, {"input": "2 8 10 3\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 2, 8\nroll back, left: 2 8 10 3\n(10) + (3) = 13, left: (10 + 3) = 13, 2, 8\n(8) - (2) = 6, left: (8 - 2) = 6, (10 + 3) = 13\nroll back, left: (10 + 3) = 13, 2, 8\nroll back, left: 2 8 10 3\n(10) * (3) = 30, left: (10 * 3) = 30, 2, 8\n(8) - (2) = 6, left: (8 - 2) = 6, (10 * 3) = 30\n(30) - (6) = 24, left: ((10 * 3) - (8 - 2)) = 24\nreach 24! expression: ((10 * 3) - (8 - 2))"}, {"input": "2 8 10 3\n", "output": "(10) / (8) = 5/4, left: (10 / 8) = 5/4, 2, 3\n(5/4) / (2) = 5/8, left: ((10 / 8) / 2) = 5/8, 3\nroll back, left: (10 / 8) = 5/4, 2, 3\nroll back, left: 2 8 10 3\n(8) * (10) = 80, left: (8 * 10) = 80, 2, 3\nroll back, left: 2 8 10 3\n(8) + (10) = 18, left: (8 + 10) = 18, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (8 + 10) = 18\n(18) + (6) = 24, left: ((8 + 10) + (2 * 3)) = 24\nreach 24! expression: ((8 + 10) + (2 * 3))"}, {"input": "2 8 10 3\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 2, 10\nroll back, left: 2 8 10 3\n(3) - (8) = -5, left: (3 - 8) = -5, 2, 10\nroll back, left: 2 8 10 3\n(2) - (10) = -8, left: (2 - 10) = -8, 8, 3\nroll back, left: 2 8 10 3\n(8) - (2) = 6, left: (8 - 2) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (8 - 2) = 6\n(30) - (6) = 24, left: ((10 * 3) - (8 - 2)) = 24\nreach 24! expression: ((10 * 3) - (8 - 2))"}, {"input": "8 9 8 6\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (8 * 6) = 48\n(72) - (48) = 24, left: ((9 * 8) - (8 * 6)) = 24\nreach 24! expression: ((9 * 8) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 9, 6\n(6) / (16) = 3/8, left: (6 / (8 + 8)) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / (6 / (8 + 8))) = 24\nreach 24! expression: (9 / (6 / (8 + 8)))"}, {"input": "8 9 8 6\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (8 * 9) = 72\n(72) - (48) = 24, left: ((8 * 9) - (8 * 6)) = 24\nreach 24! expression: ((8 * 9) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 8, 9\n(8) * (9) = 72, left: (8 * 9) = 72, (8 * 6) = 48\n(72) - (48) = 24, left: ((8 * 9) - (8 * 6)) = 24\nreach 24! expression: ((8 * 9) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) + (6) = 14, left: (8 + 6) = 14, 9, 8\nroll back, left: 8 9 8 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 9, 8\nroll back, left: 8 9 8 6\n(8) * (6) = 48, left: (8 * 6) = 48, 9, 8\n(9) - (48) = -39, left: (9 - (8 * 6)) = -39, 8\nroll back, left: (8 * 6) = 48, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (8 * 6) = 48\n(72) - (48) = 24, left: ((9 * 8) - (8 * 6)) = 24\nreach 24! expression: ((9 * 8) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) + (6) = 14, left: (8 + 6) = 14, 9, 8\n(9) * (14) = 126, left: (9 * (8 + 6)) = 126, 8\nroll back, left: (8 + 6) = 14, 9, 8\nroll back, left: 8 9 8 6\n(8) * (6) = 48, left: (8 * 6) = 48, 9, 8\n(9) - (8) = 1, left: (9 - 8) = 1, (8 * 6) = 48\nroll back, left: (8 * 6) = 48, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (8 * 6) = 48\n(72) - (48) = 24, left: ((9 * 8) - (8 * 6)) = 24\nreach 24! expression: ((9 * 8) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(9) / (8) = 9/8, left: (9 / 8) = 9/8, 8, 6\nroll back, left: 8 9 8 6\n(8) + (9) = 17, left: (8 + 9) = 17, 8, 6\nroll back, left: 8 9 8 6\n(8) - (9) = -1, left: (8 - 9) = -1, 8, 6\nroll back, left: 8 9 8 6\n(8) * (9) = 72, left: (8 * 9) = 72, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (8 * 9) = 72\n(72) - (48) = 24, left: ((8 * 9) - (8 * 6)) = 24\nreach 24! expression: ((8 * 9) - (8 * 6))"}, {"input": "8 9 8 6\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 9, 6\nroll back, left: 8 9 8 6\n(8) * (8) = 64, left: (8 * 8) = 64, 9, 6\nroll back, left: 8 9 8 6\n(8) - (8) = 0, left: (8 - 8) = 0, 9, 6\nroll back, left: 8 9 8 6\n(8) + (8) = 16, left: (8 + 8) = 16, 9, 6\n(6) / (16) = 3/8, left: (6 / (8 + 8)) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / (6 / (8 + 8))) = 24\nreach 24! expression: (9 / (6 / (8 + 8)))"}, {"input": "9 10 12 7\n", "output": "(7) - (12) = -5, left: (7 - 12) = -5, 9, 10\n(9) + (10) = 19, left: (9 + 10) = 19, (7 - 12) = -5\n(19) - (-5) = 24, left: ((9 + 10) - (7 - 12)) = 24\nreach 24! expression: ((9 + 10) - (7 - 12))"}, {"input": "9 10 12 7\n", "output": "(7) - (12) = -5, left: (7 - 12) = -5, 9, 10\n(-5) - (9) = -14, left: ((7 - 12) - 9) = -14, 10\n(10) - (-14) = 24, left: (10 - ((7 - 12) - 9)) = 24\nreach 24! expression: (10 - ((7 - 12) - 9))"}, {"input": "9 10 12 7\n", "output": "(10) + (12) = 22, left: (10 + 12) = 22, 9, 7\n(7) - (22) = -15, left: (7 - (10 + 12)) = -15, 9\n(9) - (-15) = 24, left: (9 - (7 - (10 + 12))) = 24\nreach 24! expression: (9 - (7 - (10 + 12)))"}, {"input": "9 10 12 7\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 9, 12\n(9) + (3) = 12, left: (9 + (10 - 7)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 + (10 - 7))) = 24\nreach 24! expression: (12 + (9 + (10 - 7)))"}, {"input": "9 10 12 7\n", "output": "(12) * (7) = 84, left: (12 * 7) = 84, 9, 10\n(9) * (84) = 756, left: (9 * (12 * 7)) = 756, 10\nroll back, left: (12 * 7) = 84, 9, 10\nroll back, left: 9 10 12 7\n(7) / (12) = 7/12, left: (7 / 12) = 7/12, 9, 10\nroll back, left: 9 10 12 7\n(7) - (12) = -5, left: (7 - 12) = -5, 9, 10\n(-5) - (9) = -14, left: ((7 - 12) - 9) = -14, 10\n(10) - (-14) = 24, left: (10 - ((7 - 12) - 9)) = 24\nreach 24! expression: (10 - ((7 - 12) - 9))"}, {"input": "10 10 5 13\n", "output": "(10) * (13) = 130, left: (10 * 13) = 130, 10, 5\n(130) - (10) = 120, left: ((10 * 13) - 10) = 120, 5\n(120) / (5) = 24, left: (((10 * 13) - 10) / 5) = 24\nreach 24! expression: (((10 * 13) - 10) / 5)"}, {"input": "13 10 3 4\n", "output": "(13) + (4) = 17, left: (13 + 4) = 17, 10, 3\n(3) - (10) = -7, left: (3 - 10) = -7, (13 + 4) = 17\n(17) - (-7) = 24, left: ((13 + 4) - (3 - 10)) = 24\nreach 24! expression: ((13 + 4) - (3 - 10))"}, {"input": "13 10 3 4\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 13, 10\n(13) + (10) = 23, left: (13 + 10) = 23, (3 - 4) = -1\n(23) - (-1) = 24, left: ((13 + 10) - (3 - 4)) = 24\nreach 24! expression: ((13 + 10) - (3 - 4))"}, {"input": "13 10 3 4\n", "output": "(13) + (4) = 17, left: (13 + 4) = 17, 10, 3\n(10) - (3) = 7, left: (10 - 3) = 7, (13 + 4) = 17\n(17) + (7) = 24, left: ((13 + 4) + (10 - 3)) = 24\nreach 24! expression: ((13 + 4) + (10 - 3))"}, {"input": "13 10 3 4\n", "output": "(13) + (10) = 23, left: (13 + 10) = 23, 3, 4\n(23) - (3) = 20, left: ((13 + 10) - 3) = 20, 4\n(4) + (20) = 24, left: (4 + ((13 + 10) - 3)) = 24\nreach 24! expression: (4 + ((13 + 10) - 3))"}, {"input": "13 10 3 4\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 10, 3\nroll back, left: 13 10 3 4\n(13) * (4) = 52, left: (13 * 4) = 52, 10, 3\n(10) + (3) = 13, left: (10 + 3) = 13, (13 * 4) = 52\nroll back, left: (13 * 4) = 52, 10, 3\nroll back, left: 13 10 3 4\n(13) + (4) = 17, left: (13 + 4) = 17, 10, 3\n(10) - (3) = 7, left: (10 - 3) = 7, (13 + 4) = 17\n(17) + (7) = 24, left: ((13 + 4) + (10 - 3)) = 24\nreach 24! expression: ((13 + 4) + (10 - 3))"}, {"input": "9 2 10 13\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 2, 13\n(13) + (-1) = 12, left: (13 + (9 - 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 + (9 - 10))) = 24\nreach 24! expression: (2 * (13 + (9 - 10)))"}, {"input": "9 2 10 13\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (10 - 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (10 - 9))) = 24\nreach 24! expression: (2 * (13 - (10 - 9)))"}, {"input": "9 2 10 13\n", "output": "(2) * (10) = 20, left: (2 * 10) = 20, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (2 * 10) = 20\n(20) + (4) = 24, left: ((2 * 10) + (13 - 9)) = 24\nreach 24! expression: ((2 * 10) + (13 - 9))"}, {"input": "9 2 10 13\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (13 - 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (13 - 10))) = 24\nreach 24! expression: (2 * (9 + (13 - 10)))"}, {"input": "9 2 10 13\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (13 - 9) = 4\n(4) + (20) = 24, left: ((13 - 9) + (2 * 10)) = 24\nreach 24! expression: ((13 - 9) + (2 * 10))"}, {"input": "9 2 10 13\n", "output": "(2) + (13) = 15, left: (2 + 13) = 15, 9, 10\n(9) - (10) = -1, left: (9 - 10) = -1, (2 + 13) = 15\nroll back, left: (2 + 13) = 15, 9, 10\nroll back, left: 9 2 10 13\n(2) * (13) = 26, left: (2 * 13) = 26, 9, 10\nroll back, left: 9 2 10 13\n(10) - (9) = 1, left: (10 - 9) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (10 - 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (10 - 9))) = 24\nreach 24! expression: (2 * (13 - (10 - 9)))"}, {"input": "9 2 10 13\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 10, 13\nroll back, left: 9 2 10 13\n(9) - (2) = 7, left: (9 - 2) = 7, 10, 13\n(13) / (7) = 13/7, left: (13 / (9 - 2)) = 13/7, 10\nroll back, left: (9 - 2) = 7, 10, 13\nroll back, left: 9 2 10 13\n(13) - (10) = 3, left: (13 - 10) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (13 - 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (13 - 10))) = 24\nreach 24! expression: (2 * (9 + (13 - 10)))"}, {"input": "9 2 10 13\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 9, 10\n(10) / (26) = 5/13, left: (10 / (2 * 13)) = 5/13, 9\nroll back, left: (2 * 13) = 26, 9, 10\nroll back, left: 9 2 10 13\n(2) - (13) = -11, left: (2 - 13) = -11, 9, 10\nroll back, left: 9 2 10 13\n(9) - (10) = -1, left: (9 - 10) = -1, 2, 13\n(13) + (-1) = 12, left: (13 + (9 - 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 + (9 - 10))) = 24\nreach 24! expression: (2 * (13 + (9 - 10)))"}, {"input": "13 5 2 7\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (13 - 2) = 11\n(35) - (11) = 24, left: ((5 * 7) - (13 - 2)) = 24\nreach 24! expression: ((5 * 7) - (13 - 2))"}, {"input": "13 5 2 7\n", "output": "(2) - (13) = -11, left: (2 - 13) = -11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (2 - 13) = -11\n(-11) + (35) = 24, left: ((2 - 13) + (5 * 7)) = 24\nreach 24! expression: ((2 - 13) + (5 * 7))"}, {"input": "13 5 2 7\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 2, 7\nroll back, left: 13 5 2 7\n(13) - (5) = 8, left: (13 - 5) = 8, 2, 7\n(7) * (8) = 56, left: (7 * (13 - 5)) = 56, 2\nroll back, left: (13 - 5) = 8, 2, 7\nroll back, left: 13 5 2 7\n(13) - (2) = 11, left: (13 - 2) = 11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (13 - 2) = 11\n(35) - (11) = 24, left: ((5 * 7) - (13 - 2)) = 24\nreach 24! expression: ((5 * 7) - (13 - 2))"}, {"input": "13 5 2 7\n", "output": "(13) * (5) = 65, left: (13 * 5) = 65, 2, 7\n(65) - (2) = 63, left: ((13 * 5) - 2) = 63, 7\nroll back, left: (13 * 5) = 65, 2, 7\nroll back, left: 13 5 2 7\n(2) / (13) = 2/13, left: (2 / 13) = 2/13, 5, 7\nroll back, left: 13 5 2 7\n(2) - (13) = -11, left: (2 - 13) = -11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (2 - 13) = -11\n(-11) + (35) = 24, left: ((2 - 13) + (5 * 7)) = 24\nreach 24! expression: ((2 - 13) + (5 * 7))"}, {"input": "13 5 2 7\n", "output": "(13) * (7) = 91, left: (13 * 7) = 91, 5, 2\nroll back, left: 13 5 2 7\n(7) - (13) = -6, left: (7 - 13) = -6, 5, 2\n(5) * (-6) = -30, left: (5 * (7 - 13)) = -30, 2\nroll back, left: (7 - 13) = -6, 5, 2\nroll back, left: 13 5 2 7\n(13) - (2) = 11, left: (13 - 2) = 11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (13 - 2) = 11\n(35) - (11) = 24, left: ((5 * 7) - (13 - 2)) = 24\nreach 24! expression: ((5 * 7) - (13 - 2))"}, {"input": "10 6 8 6\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 8, 6\n(8) - (4) = 4, left: (8 - (10 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (10 - 6))) = 24\nreach 24! expression: (6 * (8 - (10 - 6)))"}, {"input": "10 6 8 6\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 6, 8\n(8) + (-4) = 4, left: (8 + (6 - 10)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 + (6 - 10))) = 24\nreach 24! expression: (6 * (8 + (6 - 10)))"}, {"input": "10 6 8 6\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 6, 8\n(8) - (4) = 4, left: (8 - (10 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (10 - 6))) = 24\nreach 24! expression: (6 * (8 - (10 - 6)))"}, {"input": "10 6 8 6\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 6, 8\n(4) - (6) = -2, left: ((10 - 6) - 6) = -2, 8\nroll back, left: (10 - 6) = 4, 6, 8\n(6) + (4) = 10, left: (6 + (10 - 6)) = 10, 8\nroll back, left: (10 - 6) = 4, 6, 8\n(8) * (4) = 32, left: (8 * (10 - 6)) = 32, 6\nroll back, left: (10 - 6) = 4, 6, 8\n(8) - (4) = 4, left: (8 - (10 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (10 - 6))) = 24\nreach 24! expression: (6 * (8 - (10 - 6)))"}, {"input": "10 6 8 6\n", "output": "(10) * (6) = 60, left: (10 * 6) = 60, 6, 8\n(8) / (60) = 2/15, left: (8 / (10 * 6)) = 2/15, 6\n(6) / (2/15) = 45, left: (6 / (8 / (10 * 6))) = 45\nroll back, left: (8 / (10 * 6)) = 2/15, 6\nroll back, left: (10 * 6) = 60, 6, 8\nroll back, left: 10 6 8 6\n(10) - (6) = 4, left: (10 - 6) = 4, 6, 8\n(8) - (4) = 4, left: (8 - (10 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (10 - 6))) = 24\nreach 24! expression: (6 * (8 - (10 - 6)))"}, {"input": "10 6 8 6\n", "output": "(6) / (10) = 3/5, left: (6 / 10) = 3/5, 6, 8\n(3/5) - (8) = -37/5, left: ((6 / 10) - 8) = -37/5, 6\nroll back, left: (6 / 10) = 3/5, 6, 8\nroll back, left: 10 6 8 6\n(6) - (10) = -4, left: (6 - 10) = -4, 6, 8\n(6) + (-4) = 2, left: (6 + (6 - 10)) = 2, 8\nroll back, left: (6 - 10) = -4, 6, 8\n(8) + (-4) = 4, left: (8 + (6 - 10)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 + (6 - 10))) = 24\nreach 24! expression: (6 * (8 + (6 - 10)))"}, {"input": "10 6 8 6\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 8, 6\n(8) / (4) = 2, left: (8 / (10 - 6)) = 2, 6\nroll back, left: (10 - 6) = 4, 8, 6\n(8) + (4) = 12, left: (8 + (10 - 6)) = 12, 6\nroll back, left: (10 - 6) = 4, 8, 6\n(8) - (4) = 4, left: (8 - (10 - 6)) = 4, 6\n(6) + (4) = 10, left: (6 + (8 - (10 - 6))) = 10\nroll back, left: (8 - (10 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (10 - 6))) = 24\nreach 24! expression: (6 * (8 - (10 - 6)))"}, {"input": "9 3 9 12\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 9, 12\n(12) - (27) = -15, left: (12 - (9 * 3)) = -15, 9\n(9) - (-15) = 24, left: (9 - (12 - (9 * 3))) = 24\nreach 24! expression: (9 - (12 - (9 * 3)))"}, {"input": "9 3 9 12\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 9, 12\n(12) - (9) = 3, left: (12 - 9) = 3, (3 * 9) = 27\n(27) - (3) = 24, left: ((3 * 9) - (12 - 9)) = 24\nreach 24! expression: ((3 * 9) - (12 - 9))"}, {"input": "9 3 9 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (12 - 9) = 3\n(27) - (3) = 24, left: ((9 * 3) - (12 - 9)) = 24\nreach 24! expression: ((9 * 3) - (12 - 9))"}, {"input": "9 3 9 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 9, 3\n(9) * (3) = 27, left: (9 * (12 - 9)) = 27, 3\n(27) - (3) = 24, left: ((9 * (12 - 9)) - 3) = 24\nreach 24! expression: ((9 * (12 - 9)) - 3)"}, {"input": "9 3 9 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 9, 3\n(3) - (3) = 0, left: ((12 - 9) - 3) = 0, 9\n(9) + (0) = 9, left: (9 + ((12 - 9) - 3)) = 9\nroll back, left: ((12 - 9) - 3) = 0, 9\nroll back, left: (12 - 9) = 3, 9, 3\n(3) / (9) = 1/3, left: ((12 - 9) / 9) = 1/3, 3\nroll back, left: (12 - 9) = 3, 9, 3\n(9) * (3) = 27, left: (9 * (12 - 9)) = 27, 3\n(27) - (3) = 24, left: ((9 * (12 - 9)) - 3) = 24\nreach 24! expression: ((9 * (12 - 9)) - 3)"}, {"input": "9 3 9 12\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 9, 12\n(12) - (27) = -15, left: (12 - (9 * 3)) = -15, 9\n(9) * (-15) = -135, left: (9 * (12 - (9 * 3))) = -135\nroll back, left: (12 - (9 * 3)) = -15, 9\n(9) / (-15) = -3/5, left: (9 / (12 - (9 * 3))) = -3/5\nroll back, left: (12 - (9 * 3)) = -15, 9\n(9) + (-15) = -6, left: (9 + (12 - (9 * 3))) = -6\nroll back, left: (12 - (9 * 3)) = -15, 9\n(9) - (-15) = 24, left: (9 - (12 - (9 * 3))) = 24\nreach 24! expression: (9 - (12 - (9 * 3)))"}, {"input": "9 3 9 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 9, 3\n(3) + (3) = 6, left: (3 + (12 - 9)) = 6, 9\nroll back, left: (12 - 9) = 3, 9, 3\n(3) - (3) = 0, left: ((12 - 9) - 3) = 0, 9\n(0) / (9) = 0, left: (((12 - 9) - 3) / 9) = 0\nroll back, left: ((12 - 9) - 3) = 0, 9\nroll back, left: (12 - 9) = 3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (12 - 9) = 3\n(27) - (3) = 24, left: ((9 * 3) - (12 - 9)) = 24\nreach 24! expression: ((9 * 3) - (12 - 9))"}, {"input": "9 3 9 12\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 9, 12\n(12) - (9) = 3, left: (12 - 9) = 3, (3 * 9) = 27\n(3) / (27) = 1/9, left: ((12 - 9) / (3 * 9)) = 1/9\nroll back, left: (12 - 9) = 3, (3 * 9) = 27\n(27) - (3) = 24, left: ((3 * 9) - (12 - 9)) = 24\nreach 24! expression: ((3 * 9) - (12 - 9))"}, {"input": "9 3 9 12\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 9, 12\n(12) - (9) = 3, left: (12 - 9) = 3, (3 * 9) = 27\n(3) / (27) = 1/9, left: ((12 - 9) / (3 * 9)) = 1/9\nroll back, left: (12 - 9) = 3, (3 * 9) = 27\n(27) - (3) = 24, left: ((3 * 9) - (12 - 9)) = 24\nreach 24! expression: ((3 * 9) - (12 - 9))"}, {"input": "9 3 9 12\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 9, 12\n(12) - (9) = 3, left: (12 - 9) = 3, (3 * 9) = 27\n(3) / (27) = 1/9, left: ((12 - 9) / (3 * 9)) = 1/9\nroll back, left: (12 - 9) = 3, (3 * 9) = 27\n(27) - (3) = 24, left: ((3 * 9) - (12 - 9)) = 24\nreach 24! expression: ((3 * 9) - (12 - 9))"}, {"input": "9 3 9 12\n", "output": "(3) * (9) = 27, left: (3 * 9) = 27, 9, 12\n(12) - (9) = 3, left: (12 - 9) = 3, (3 * 9) = 27\n(3) / (27) = 1/9, left: ((12 - 9) / (3 * 9)) = 1/9\nroll back, left: (12 - 9) = 3, (3 * 9) = 27\n(27) - (3) = 24, left: ((3 * 9) - (12 - 9)) = 24\nreach 24! expression: ((3 * 9) - (12 - 9))"}, {"input": "10 13 2 11\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 10, 2\n(10) + (2) = 12, left: (10 + (13 - 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (10 + (13 - 11))) = 24\nreach 24! expression: (2 * (10 + (13 - 11)))"}, {"input": "10 13 2 11\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 10, 2\n(10) - (-2) = 12, left: (10 - (11 - 13)) = 12, 2\n(2) * (12) = 24, left: (2 * (10 - (11 - 13))) = 24\nreach 24! expression: (2 * (10 - (11 - 13)))"}, {"input": "10 13 2 11\n", "output": "(10) + (13) = 23, left: (10 + 13) = 23, 2, 11\n(23) - (11) = 12, left: ((10 + 13) - 11) = 12, 2\n(2) * (12) = 24, left: (2 * ((10 + 13) - 11)) = 24\nreach 24! expression: (2 * ((10 + 13) - 11))"}, {"input": "10 13 2 11\n", "output": "(10) + (2) = 12, left: (10 + 2) = 12, 13, 11\n(13) - (11) = 2, left: (13 - 11) = 2, (10 + 2) = 12\n(12) * (2) = 24, left: ((10 + 2) * (13 - 11)) = 24\nreach 24! expression: ((10 + 2) * (13 - 11))"}, {"input": "10 13 2 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (11 - 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (11 - 10))) = 24\nreach 24! expression: (2 * (13 - (11 - 10)))"}, {"input": "6 10 1 2\n", "output": "(6) + (1) = 7, left: (6 + 1) = 7, 10, 2\n(2) * (7) = 14, left: (2 * (6 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (6 + 1))) = 24\nreach 24! expression: (10 + (2 * (6 + 1)))"}, {"input": "6 10 1 2\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 6, 10\n(10) * (3) = 30, left: (10 * (1 + 2)) = 30, 6\n(30) - (6) = 24, left: ((10 * (1 + 2)) - 6) = 24\nreach 24! expression: ((10 * (1 + 2)) - 6)"}, {"input": "6 10 1 2\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 6, 1\n(5) - (1) = 4, left: ((10 / 2) - 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 / 2) - 1)) = 24\nreach 24! expression: (6 * ((10 / 2) - 1))"}, {"input": "6 10 1 2\n", "output": "(1) - (10) = -9, left: (1 - 10) = -9, 6, 2\n(2) * (-9) = -18, left: (2 * (1 - 10)) = -18, 6\n(6) - (-18) = 24, left: (6 - (2 * (1 - 10))) = 24\nreach 24! expression: (6 - (2 * (1 - 10)))"}, {"input": "6 10 1 2\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 6, 1\n(1) / (5) = 1/5, left: (1 / (10 / 2)) = 1/5, 6\nroll back, left: (10 / 2) = 5, 6, 1\n(1) - (5) = -4, left: (1 - (10 / 2)) = -4, 6\n(6) * (-4) = -24, left: (6 * (1 - (10 / 2))) = -24\nroll back, left: (1 - (10 / 2)) = -4, 6\nroll back, left: (10 / 2) = 5, 6, 1\n(5) - (1) = 4, left: ((10 / 2) - 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 / 2) - 1)) = 24\nreach 24! expression: (6 * ((10 / 2) - 1))"}, {"input": "6 10 1 2\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 10, 2\nroll back, left: 6 10 1 2\n(6) - (1) = 5, left: (6 - 1) = 5, 10, 2\nroll back, left: 6 10 1 2\n(1) - (6) = -5, left: (1 - 6) = -5, 10, 2\nroll back, left: 6 10 1 2\n(6) + (1) = 7, left: (6 + 1) = 7, 10, 2\n(2) * (7) = 14, left: (2 * (6 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (6 + 1))) = 24\nreach 24! expression: (10 + (2 * (6 + 1)))"}, {"input": "6 10 1 2\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 6, 10\n(6) + (10) = 16, left: (6 + 10) = 16, (2 / 1) = 2\nroll back, left: (2 / 1) = 2, 6, 10\n(6) + (2) = 8, left: (6 + (2 / 1)) = 8, 10\nroll back, left: (2 / 1) = 2, 6, 10\nroll back, left: 6 10 1 2\n(1) + (2) = 3, left: (1 + 2) = 3, 6, 10\n(10) * (3) = 30, left: (10 * (1 + 2)) = 30, 6\n(30) - (6) = 24, left: ((10 * (1 + 2)) - 6) = 24\nreach 24! expression: ((10 * (1 + 2)) - 6)"}, {"input": "10 9 6 9\n", "output": "(10) * (9) = 90, left: (10 * 9) = 90, 6, 9\n(90) / (6) = 15, left: ((10 * 9) / 6) = 15, 9\n(9) + (15) = 24, left: (9 + ((10 * 9) / 6)) = 24\nreach 24! expression: (9 + ((10 * 9) / 6))"}, {"input": "10 9 6 9\n", "output": "(9) / (6) = 3/2, left: (9 / 6) = 3/2, 10, 9\n(10) * (3/2) = 15, left: (10 * (9 / 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 * (9 / 6))) = 24\nreach 24! expression: (9 + (10 * (9 / 6)))"}, {"input": "10 9 6 9\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 10, 9\n(10) / (2/3) = 15, left: (10 / (6 / 9)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 / (6 / 9))) = 24\nreach 24! expression: (9 + (10 / (6 / 9)))"}, {"input": "10 9 6 9\n", "output": "(10) / (6) = 5/3, left: (10 / 6) = 5/3, 9, 9\n(9) * (5/3) = 15, left: (9 * (10 / 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (9 * (10 / 6))) = 24\nreach 24! expression: (9 + (9 * (10 / 6)))"}, {"input": "10 9 6 9\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 10, 6\nroll back, left: 10 9 6 9\n(9) + (9) = 18, left: (9 + 9) = 18, 10, 6\n(6) - (10) = -4, left: (6 - 10) = -4, (9 + 9) = 18\nroll back, left: (9 + 9) = 18, 10, 6\nroll back, left: 10 9 6 9\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 10, 9\n(10) * (3/2) = 15, left: (10 * (9 / 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 * (9 / 6))) = 24\nreach 24! expression: (9 + (10 * (9 / 6)))"}, {"input": "10 9 6 9\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 10, 9\n(9) - (10) = -1, left: (9 - 10) = -1, (9 - 6) = 3\nroll back, left: (9 - 6) = 3, 10, 9\nroll back, left: 10 9 6 9\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, 10, 9\n(2/3) / (9) = 2/27, left: ((6 / 9) / 9) = 2/27, 10\nroll back, left: (6 / 9) = 2/3, 10, 9\n(10) / (2/3) = 15, left: (10 / (6 / 9)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 / (6 / 9))) = 24\nreach 24! expression: (9 + (10 / (6 / 9)))"}, {"input": "10 9 6 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 10, 6\nroll back, left: 10 9 6 9\n(9) - (9) = 0, left: (9 - 9) = 0, 10, 6\nroll back, left: 10 9 6 9\n(10) + (6) = 16, left: (10 + 6) = 16, 9, 9\nroll back, left: 10 9 6 9\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, 9, 9\n(9) * (5/3) = 15, left: (9 * (10 / 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (9 * (10 / 6))) = 24\nreach 24! expression: (9 + (9 * (10 / 6)))"}, {"input": "7 8 8 11\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (11 - 7)) = 32, 8\n(32) - (8) = 24, left: ((8 * (11 - 7)) - 8) = 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 8, 8\n(4) - (8) = -4, left: ((11 - 7) - 8) = -4, 8\n(8) / (-4) = -2, left: (8 / ((11 - 7) - 8)) = -2\nroll back, left: ((11 - 7) - 8) = -4, 8\nroll back, left: (11 - 7) = 4, 8, 8\n(8) / (4) = 2, left: (8 / (11 - 7)) = 2, 8\nroll back, left: (11 - 7) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (11 - 7)) = 32, 8\n(32) - (8) = 24, left: ((8 * (11 - 7)) - 8) = 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 8, 11\nroll back, left: 7 8 8 11\n(8) * (11) = 88, left: (8 * 11) = 88, 7, 8\nroll back, left: 7 8 8 11\n(11) / (7) = 11/7, left: (11 / 7) = 11/7, 8, 8\nroll back, left: 7 8 8 11\n(11) - (7) = 4, left: (11 - 7) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (11 - 7)) = 32, 8\n(32) - (8) = 24, left: ((8 * (11 - 7)) - 8) = 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(8) / (11) = 8/11, left: (8 / 11) = 8/11, 7, 8\n(8) + (8/11) = 96/11, left: (8 + (8 / 11)) = 96/11, 7\nroll back, left: (8 / 11) = 8/11, 7, 8\nroll back, left: 7 8 8 11\n(8) * (11) = 88, left: (8 * 11) = 88, 7, 8\nroll back, left: 7 8 8 11\n(11) - (7) = 4, left: (11 - 7) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (11 - 7)) = 32, 8\n(32) - (8) = 24, left: ((8 * (11 - 7)) - 8) = 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(7) * (8) = 56, left: (7 * 8) = 56, 8, 11\n(11) * (56) = 616, left: (11 * (7 * 8)) = 616, 8\nroll back, left: (7 * 8) = 56, 8, 11\nroll back, left: 7 8 8 11\n(8) + (11) = 19, left: (8 + 11) = 19, 7, 8\nroll back, left: 7 8 8 11\n(11) - (7) = 4, left: (11 - 7) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (11 - 7)) = 32, 8\n(32) - (8) = 24, left: ((8 * (11 - 7)) - 8) = 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "7 8 8 11\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 7, 8\nroll back, left: 7 8 8 11\n(8) / (7) = 8/7, left: (8 / 7) = 8/7, 8, 11\n(8/7) - (8) = -48/7, left: ((8 / 7) - 8) = -48/7, 11\nroll back, left: (8 / 7) = 8/7, 8, 11\nroll back, left: 7 8 8 11\n(11) - (7) = 4, left: (11 - 7) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (11 - 7)) = 32, 8\n(32) - (8) = 24, left: ((8 * (11 - 7)) - 8) = 24\nreach 24! expression: ((8 * (11 - 7)) - 8)"}, {"input": "4 6 7 2\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 4, 6\n(6) + (14) = 20, left: (6 + (7 * 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (6 + (7 * 2))) = 24\nreach 24! expression: (4 + (6 + (7 * 2)))"}, {"input": "4 6 7 2\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (7 - 4) = 3\n(3) * (8) = 24, left: ((7 - 4) * (6 + 2)) = 24\nreach 24! expression: ((7 - 4) * (6 + 2))"}, {"input": "4 6 7 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 4, 7\n(7) - (4) = 3, left: (7 - 4) = 3, (6 + 2) = 8\n(8) * (3) = 24, left: ((6 + 2) * (7 - 4)) = 24\nreach 24! expression: ((6 + 2) * (7 - 4))"}, {"input": "4 6 7 2\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 4, 7\n(7) * (4) = 28, left: (7 * (6 - 2)) = 28, 4\n(28) - (4) = 24, left: ((7 * (6 - 2)) - 4) = 24\nreach 24! expression: ((7 * (6 - 2)) - 4)"}, {"input": "4 6 7 2\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 4, 6\n(14) - (6) = 8, left: ((7 * 2) - 6) = 8, 4\nroll back, left: (7 * 2) = 14, 4, 6\n(6) / (14) = 3/7, left: (6 / (7 * 2)) = 3/7, 4\nroll back, left: (7 * 2) = 14, 4, 6\n(6) + (14) = 20, left: (6 + (7 * 2)) = 20, 4\n(20) - (4) = 16, left: ((6 + (7 * 2)) - 4) = 16\nroll back, left: (6 + (7 * 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (6 + (7 * 2))) = 24\nreach 24! expression: (4 + (6 + (7 * 2)))"}, {"input": "4 6 7 2\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (7 - 4) = 3\n(3) - (8) = -5, left: ((7 - 4) - (6 + 2)) = -5\nroll back, left: (6 + 2) = 8, (7 - 4) = 3\n(8) / (3) = 8/3, left: ((6 + 2) / (7 - 4)) = 8/3\nroll back, left: (6 + 2) = 8, (7 - 4) = 3\n(3) * (8) = 24, left: ((7 - 4) * (6 + 2)) = 24\nreach 24! expression: ((7 - 4) * (6 + 2))"}, {"input": "4 6 7 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 4, 7\n(8) / (7) = 8/7, left: ((6 + 2) / 7) = 8/7, 4\nroll back, left: (6 + 2) = 8, 4, 7\n(4) + (7) = 11, left: (4 + 7) = 11, (6 + 2) = 8\n(11) - (8) = 3, left: ((4 + 7) - (6 + 2)) = 3\nroll back, left: (4 + 7) = 11, (6 + 2) = 8\nroll back, left: (6 + 2) = 8, 4, 7\n(7) - (4) = 3, left: (7 - 4) = 3, (6 + 2) = 8\n(8) * (3) = 24, left: ((6 + 2) * (7 - 4)) = 24\nreach 24! expression: ((6 + 2) * (7 - 4))"}, {"input": "4 6 7 2\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 6, 2\n(3) - (6) = -3, left: ((7 - 4) - 6) = -3, 2\n(-3) - (2) = -5, left: (((7 - 4) - 6) - 2) = -5\nroll back, left: ((7 - 4) - 6) = -3, 2\nroll back, left: (7 - 4) = 3, 6, 2\n(6) / (2) = 3, left: (6 / 2) = 3, (7 - 4) = 3\nroll back, left: (7 - 4) = 3, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (7 - 4) = 3\n(3) * (8) = 24, left: ((7 - 4) * (6 + 2)) = 24\nreach 24! expression: ((7 - 4) * (6 + 2))"}, {"input": "4 6 7 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 6, 7\nroll back, left: 4 6 7 2\n(4) / (2) = 2, left: (4 / 2) = 2, 6, 7\n(7) - (2) = 5, left: (7 - (4 / 2)) = 5, 6\nroll back, left: (4 / 2) = 2, 6, 7\nroll back, left: 4 6 7 2\n(6) - (2) = 4, left: (6 - 2) = 4, 4, 7\n(7) * (4) = 28, left: (7 * (6 - 2)) = 28, 4\n(28) - (4) = 24, left: ((7 * (6 - 2)) - 4) = 24\nreach 24! expression: ((7 * (6 - 2)) - 4)"}, {"input": "4 6 7 2\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (7 - 4) = 3\n(3) - (8) = -5, left: ((7 - 4) - (6 + 2)) = -5\nroll back, left: (6 + 2) = 8, (7 - 4) = 3\n(8) / (3) = 8/3, left: ((6 + 2) / (7 - 4)) = 8/3\nroll back, left: (6 + 2) = 8, (7 - 4) = 3\n(3) * (8) = 24, left: ((7 - 4) * (6 + 2)) = 24\nreach 24! expression: ((7 - 4) * (6 + 2))"}, {"input": "4 6 7 2\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (7 - 4) = 3\n(3) - (8) = -5, left: ((7 - 4) - (6 + 2)) = -5\nroll back, left: (6 + 2) = 8, (7 - 4) = 3\n(8) / (3) = 8/3, left: ((6 + 2) / (7 - 4)) = 8/3\nroll back, left: (6 + 2) = 8, (7 - 4) = 3\n(3) * (8) = 24, left: ((7 - 4) * (6 + 2)) = 24\nreach 24! expression: ((7 - 4) * (6 + 2))"}, {"input": "4 6 7 2\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (7 - 4) = 3\n(3) - (8) = -5, left: ((7 - 4) - (6 + 2)) = -5\nroll back, left: (6 + 2) = 8, (7 - 4) = 3\n(8) / (3) = 8/3, left: ((6 + 2) / (7 - 4)) = 8/3\nroll back, left: (6 + 2) = 8, (7 - 4) = 3\n(3) * (8) = 24, left: ((7 - 4) * (6 + 2)) = 24\nreach 24! expression: ((7 - 4) * (6 + 2))"}, {"input": "11 4 11 7\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (11 / 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (11 / 11))) = 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "11 4 11 7\n", "output": "(11) - (11) = 0, left: (11 - 11) = 0, 4, 7\n(7) - (4) = 3, left: (7 - 4) = 3, (11 - 11) = 0\nroll back, left: (11 - 11) = 0, 4, 7\nroll back, left: 11 4 11 7\n(11) / (11) = 1, left: (11 / 11) = 1, 4, 7\n(7) / (1) = 7, left: (7 / (11 / 11)) = 7, 4\nroll back, left: (11 / 11) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (11 / 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (11 / 11))) = 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "11 4 11 7\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 11, 4\nroll back, left: 11 4 11 7\n(4) + (7) = 11, left: (4 + 7) = 11, 11, 11\nroll back, left: 11 4 11 7\n(11) * (11) = 121, left: (11 * 11) = 121, 4, 7\nroll back, left: 11 4 11 7\n(11) / (11) = 1, left: (11 / 11) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (11 / 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (11 / 11))) = 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "11 4 11 7\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 4, 11\nroll back, left: 11 4 11 7\n(11) - (7) = 4, left: (11 - 7) = 4, 4, 11\nroll back, left: 11 4 11 7\n(4) * (7) = 28, left: (4 * 7) = 28, 11, 11\nroll back, left: 11 4 11 7\n(11) / (11) = 1, left: (11 / 11) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (11 / 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (11 / 11))) = 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "11 4 11 7\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 11, 7\nroll back, left: 11 4 11 7\n(11) - (4) = 7, left: (11 - 4) = 7, 11, 7\nroll back, left: 11 4 11 7\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 11, 11\nroll back, left: 11 4 11 7\n(11) / (11) = 1, left: (11 / 11) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (11 / 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (11 / 11))) = 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "11 4 11 7\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 11, 11\nroll back, left: 11 4 11 7\n(7) - (4) = 3, left: (7 - 4) = 3, 11, 11\n(11) / (11) = 1, left: (11 / 11) = 1, (7 - 4) = 3\nroll back, left: (7 - 4) = 3, 11, 11\nroll back, left: 11 4 11 7\n(11) / (11) = 1, left: (11 / 11) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (11 / 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (11 / 11))) = 24\nreach 24! expression: (4 * (7 - (11 / 11)))"}, {"input": "6 12 4 11\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 6, 4\n(6) / (1) = 6, left: (6 / (12 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (12 - 11))) = 24\nreach 24! expression: (4 * (6 / (12 - 11)))"}, {"input": "6 12 4 11\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 12, 11\n(12) - (11) = 1, left: (12 - 11) = 1, (6 * 4) = 24\n(24) / (1) = 24, left: ((6 * 4) / (12 - 11)) = 24\nreach 24! expression: ((6 * 4) / (12 - 11))"}, {"input": "6 12 4 11\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 12, 11\n(12) - (11) = 1, left: (12 - 11) = 1, (6 * 4) = 24\n(24) * (1) = 24, left: ((6 * 4) * (12 - 11)) = 24\nreach 24! expression: ((6 * 4) * (12 - 11))"}, {"input": "6 12 4 11\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 6, 4\n(6) * (1) = 6, left: (6 * (12 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 * (12 - 11))) = 24\nreach 24! expression: (4 * (6 * (12 - 11)))"}, {"input": "6 12 4 11\n", "output": "(6) + (12) = 18, left: (6 + 12) = 18, 4, 11\nroll back, left: 6 12 4 11\n(12) / (6) = 2, left: (12 / 6) = 2, 4, 11\n(4) + (2) = 6, left: (4 + (12 / 6)) = 6, 11\nroll back, left: (12 / 6) = 2, 4, 11\nroll back, left: 6 12 4 11\n(12) - (11) = 1, left: (12 - 11) = 1, 6, 4\n(6) * (1) = 6, left: (6 * (12 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 * (12 - 11))) = 24\nreach 24! expression: (4 * (6 * (12 - 11)))"}, {"input": "6 12 4 11\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 6, 11\nroll back, left: 6 12 4 11\n(11) - (6) = 5, left: (11 - 6) = 5, 12, 4\nroll back, left: 6 12 4 11\n(6) + (12) = 18, left: (6 + 12) = 18, 4, 11\nroll back, left: 6 12 4 11\n(6) * (4) = 24, left: (6 * 4) = 24, 12, 11\n(12) - (11) = 1, left: (12 - 11) = 1, (6 * 4) = 24\n(24) / (1) = 24, left: ((6 * 4) / (12 - 11)) = 24\nreach 24! expression: ((6 * 4) / (12 - 11))"}, {"input": "6 12 4 11\n", "output": "(12) * (4) = 48, left: (12 * 4) = 48, 6, 11\nroll back, left: 6 12 4 11\n(12) + (4) = 16, left: (12 + 4) = 16, 6, 11\n(11) / (16) = 11/16, left: (11 / (12 + 4)) = 11/16, 6\nroll back, left: (12 + 4) = 16, 6, 11\nroll back, left: 6 12 4 11\n(12) - (11) = 1, left: (12 - 11) = 1, 6, 4\n(6) / (1) = 6, left: (6 / (12 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (12 - 11))) = 24\nreach 24! expression: (4 * (6 / (12 - 11)))"}, {"input": "6 12 4 11\n", "output": "(12) * (4) = 48, left: (12 * 4) = 48, 6, 11\nroll back, left: 6 12 4 11\n(12) + (4) = 16, left: (12 + 4) = 16, 6, 11\nroll back, left: 6 12 4 11\n(6) / (11) = 6/11, left: (6 / 11) = 6/11, 12, 4\nroll back, left: 6 12 4 11\n(6) * (4) = 24, left: (6 * 4) = 24, 12, 11\n(12) - (11) = 1, left: (12 - 11) = 1, (6 * 4) = 24\n(24) * (1) = 24, left: ((6 * 4) * (12 - 11)) = 24\nreach 24! expression: ((6 * 4) * (12 - 11))"}, {"input": "13 7 5 1\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 5, 1\n(1) - (5) = -4, left: (1 - 5) = -4, (7 - 13) = -6\n(-6) * (-4) = 24, left: ((7 - 13) * (1 - 5)) = 24\nreach 24! expression: ((7 - 13) * (1 - 5))"}, {"input": "13 7 5 1\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 13, 7\n(-4) - (7) = -11, left: ((1 - 5) - 7) = -11, 13\n(13) - (-11) = 24, left: (13 - ((1 - 5) - 7)) = 24\nreach 24! expression: (13 - ((1 - 5) - 7))"}, {"input": "13 7 5 1\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 13, 1\n(1) - (13) = -12, left: (1 - 13) = -12, (5 - 7) = -2\n(-2) * (-12) = 24, left: ((5 - 7) * (1 - 13)) = 24\nreach 24! expression: ((5 - 7) * (1 - 13))"}, {"input": "13 7 5 1\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 7, 1\n(7) + (18) = 25, left: (7 + (13 + 5)) = 25, 1\n(25) - (1) = 24, left: ((7 + (13 + 5)) - 1) = 24\nreach 24! expression: ((7 + (13 + 5)) - 1)"}, {"input": "13 7 5 1\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 13, 7\n(13) - (7) = 6, left: (13 - 7) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (13 - 7)) = 24\nreach 24! expression: ((5 - 1) * (13 - 7))"}, {"input": "13 7 5 1\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 13, 7\n(5) - (7) = -2, left: ((5 / 1) - 7) = -2, 13\nroll back, left: (5 / 1) = 5, 13, 7\n(13) * (5) = 65, left: (13 * (5 / 1)) = 65, 7\nroll back, left: (5 / 1) = 5, 13, 7\nroll back, left: 13 7 5 1\n(1) - (5) = -4, left: (1 - 5) = -4, 13, 7\n(-4) - (7) = -11, left: ((1 - 5) - 7) = -11, 13\n(13) - (-11) = 24, left: (13 - ((1 - 5) - 7)) = 24\nreach 24! expression: (13 - ((1 - 5) - 7))"}, {"input": "13 7 5 1\n", "output": "(1) / (5) = 1/5, left: (1 / 5) = 1/5, 13, 7\n(13) + (7) = 20, left: (13 + 7) = 20, (1 / 5) = 1/5\nroll back, left: (1 / 5) = 1/5, 13, 7\nroll back, left: 13 7 5 1\n(5) / (1) = 5, left: (5 / 1) = 5, 13, 7\nroll back, left: 13 7 5 1\n(5) - (1) = 4, left: (5 - 1) = 4, 13, 7\n(13) - (7) = 6, left: (13 - 7) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (13 - 7)) = 24\nreach 24! expression: ((5 - 1) * (13 - 7))"}, {"input": "2 2 11 4\n", "output": "(11) * (4) = 44, left: (11 * 4) = 44, 2, 2\n(44) / (2) = 22, left: ((11 * 4) / 2) = 22, 2\n(2) + (22) = 24, left: (2 + ((11 * 4) / 2)) = 24\nreach 24! expression: (2 + ((11 * 4) / 2))"}, {"input": "2 2 11 4\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 2, 11\n(11) * (2) = 22, left: (11 * (4 - 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 * (4 - 2))) = 24\nreach 24! expression: (2 + (11 * (4 - 2)))"}, {"input": "2 2 11 4\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 2, 11\n(11) * (-2) = -22, left: (11 * (2 - 4)) = -22, 2\n(2) - (-22) = 24, left: (2 - (11 * (2 - 4))) = 24\nreach 24! expression: (2 - (11 * (2 - 4)))"}, {"input": "2 2 11 4\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 2, 11\n(11) / (1/2) = 22, left: (11 / (2 / 4)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 / (2 / 4))) = 24\nreach 24! expression: (2 + (11 / (2 / 4)))"}, {"input": "2 2 11 4\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 2, 11\n(11) + (-2) = 9, left: (11 + (2 - 4)) = 9, 2\n(2) / (9) = 2/9, left: (2 / (11 + (2 - 4))) = 2/9\nroll back, left: (11 + (2 - 4)) = 9, 2\nroll back, left: (2 - 4) = -2, 2, 11\n(11) * (-2) = -22, left: (11 * (2 - 4)) = -22, 2\n(-22) - (2) = -24, left: ((11 * (2 - 4)) - 2) = -24\nroll back, left: (11 * (2 - 4)) = -22, 2\n(2) - (-22) = 24, left: (2 - (11 * (2 - 4))) = 24\nreach 24! expression: (2 - (11 * (2 - 4)))"}, {"input": "2 2 11 4\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 11, 4\n(1) / (11) = 1/11, left: ((2 / 2) / 11) = 1/11, 4\nroll back, left: (2 / 2) = 1, 11, 4\nroll back, left: 2 2 11 4\n(4) - (11) = -7, left: (4 - 11) = -7, 2, 2\nroll back, left: 2 2 11 4\n(11) * (4) = 44, left: (11 * 4) = 44, 2, 2\n(44) / (2) = 22, left: ((11 * 4) / 2) = 22, 2\n(2) + (22) = 24, left: (2 + ((11 * 4) / 2)) = 24\nreach 24! expression: (2 + ((11 * 4) / 2))"}, {"input": "2 2 11 4\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 11, 4\nroll back, left: 2 2 11 4\n(2) + (2) = 4, left: (2 + 2) = 4, 11, 4\nroll back, left: 2 2 11 4\n(2) - (2) = 0, left: (2 - 2) = 0, 11, 4\nroll back, left: 2 2 11 4\n(4) - (2) = 2, left: (4 - 2) = 2, 2, 11\n(11) * (2) = 22, left: (11 * (4 - 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 * (4 - 2))) = 24\nreach 24! expression: (2 + (11 * (4 - 2)))"}, {"input": "3 12 2 1\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 12, 1\n(1) - (-1) = 2, left: (1 - (2 - 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 - (2 - 3))) = 24\nreach 24! expression: (12 * (1 - (2 - 3)))"}, {"input": "3 12 2 1\n", "output": "(3) + (1) = 4, left: (3 + 1) = 4, 12, 2\n(12) * (4) = 48, left: (12 * (3 + 1)) = 48, 2\n(48) / (2) = 24, left: ((12 * (3 + 1)) / 2) = 24\nreach 24! expression: ((12 * (3 + 1)) / 2)"}, {"input": "3 12 2 1\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 3, 12\n(3) + (-1) = 2, left: (3 + (1 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 + (1 - 2))) = 24\nreach 24! expression: (12 * (3 + (1 - 2)))"}, {"input": "3 12 2 1\n", "output": "(1) / (3) = 1/3, left: (1 / 3) = 1/3, 12, 2\nroll back, left: 3 12 2 1\n(1) - (3) = -2, left: (1 - 3) = -2, 12, 2\n(-2) / (12) = -1/6, left: ((1 - 3) / 12) = -1/6, 2\nroll back, left: (1 - 3) = -2, 12, 2\nroll back, left: 3 12 2 1\n(3) + (1) = 4, left: (3 + 1) = 4, 12, 2\n(12) * (4) = 48, left: (12 * (3 + 1)) = 48, 2\n(48) / (2) = 24, left: ((12 * (3 + 1)) / 2) = 24\nreach 24! expression: ((12 * (3 + 1)) / 2)"}, {"input": "3 12 2 1\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 2, 1\nroll back, left: 3 12 2 1\n(3) + (12) = 15, left: (3 + 12) = 15, 2, 1\nroll back, left: 3 12 2 1\n(3) - (12) = -9, left: (3 - 12) = -9, 2, 1\nroll back, left: 3 12 2 1\n(2) - (3) = -1, left: (2 - 3) = -1, 12, 1\n(1) - (-1) = 2, left: (1 - (2 - 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 - (2 - 3))) = 24\nreach 24! expression: (12 * (1 - (2 - 3)))"}, {"input": "3 12 2 1\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 12, 2\nroll back, left: 3 12 2 1\n(1) / (3) = 1/3, left: (1 / 3) = 1/3, 12, 2\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, (1 / 3) = 1/3\nroll back, left: (1 / 3) = 1/3, 12, 2\nroll back, left: 3 12 2 1\n(3) + (1) = 4, left: (3 + 1) = 4, 12, 2\n(12) * (4) = 48, left: (12 * (3 + 1)) = 48, 2\n(48) / (2) = 24, left: ((12 * (3 + 1)) / 2) = 24\nreach 24! expression: ((12 * (3 + 1)) / 2)"}, {"input": "3 12 2 1\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 3, 12\n(1/2) / (12) = 1/24, left: ((1 / 2) / 12) = 1/24, 3\nroll back, left: (1 / 2) = 1/2, 3, 12\nroll back, left: 3 12 2 1\n(2) * (1) = 2, left: (2 * 1) = 2, 3, 12\nroll back, left: 3 12 2 1\n(1) - (2) = -1, left: (1 - 2) = -1, 3, 12\n(3) + (-1) = 2, left: (3 + (1 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 + (1 - 2))) = 24\nreach 24! expression: (12 * (3 + (1 - 2)))"}, {"input": "3 12 2 1\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 2, 1\nroll back, left: 3 12 2 1\n(3) - (12) = -9, left: (3 - 12) = -9, 2, 1\nroll back, left: 3 12 2 1\n(3) * (12) = 36, left: (3 * 12) = 36, 2, 1\nroll back, left: 3 12 2 1\n(3) + (1) = 4, left: (3 + 1) = 4, 12, 2\n(12) * (4) = 48, left: (12 * (3 + 1)) = 48, 2\n(48) / (2) = 24, left: ((12 * (3 + 1)) / 2) = 24\nreach 24! expression: ((12 * (3 + 1)) / 2)"}, {"input": "8 2 3 4\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 3, 4\n(4) + (4) = 8, left: (4 + (8 / 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (8 / 2))) = 24\nreach 24! expression: (3 * (4 + (8 / 2)))"}, {"input": "8 2 3 4\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 8, 3\n(6) - (3) = 3, left: ((2 + 4) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 4) - 3)) = 24\nreach 24! expression: (8 * ((2 + 4) - 3))"}, {"input": "8 2 3 4\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (3 - 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (3 - 2))) = 24\nreach 24! expression: (8 * (4 - (3 - 2)))"}, {"input": "8 2 3 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (4 - 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (4 - 3))) = 24\nreach 24! expression: (8 * (2 + (4 - 3)))"}, {"input": "8 2 3 4\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 2, 4\n(-5) - (4) = -9, left: ((3 - 8) - 4) = -9, 2\nroll back, left: (3 - 8) = -5, 2, 4\nroll back, left: 8 2 3 4\n(2) - (4) = -2, left: (2 - 4) = -2, 8, 3\nroll back, left: 8 2 3 4\n(2) + (4) = 6, left: (2 + 4) = 6, 8, 3\n(6) - (3) = 3, left: ((2 + 4) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 4) - 3)) = 24\nreach 24! expression: (8 * ((2 + 4) - 3))"}, {"input": "8 2 3 4\n", "output": "(8) + (2) = 10, left: (8 + 2) = 10, 3, 4\nroll back, left: 8 2 3 4\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 3, 4\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, (2 / 8) = 1/4\nroll back, left: (2 / 8) = 1/4, 3, 4\nroll back, left: 8 2 3 4\n(8) / (2) = 4, left: (8 / 2) = 4, 3, 4\n(4) + (4) = 8, left: (4 + (8 / 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (8 / 2))) = 24\nreach 24! expression: (3 * (4 + (8 / 2)))"}, {"input": "8 2 3 4\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 8, 4\n(4) / (1) = 4, left: (4 / (3 - 2)) = 4, 8\n(8) + (4) = 12, left: (8 + (4 / (3 - 2))) = 12\nroll back, left: (4 / (3 - 2)) = 4, 8\nroll back, left: (3 - 2) = 1, 8, 4\n(4) * (1) = 4, left: (4 * (3 - 2)) = 4, 8\nroll back, left: (3 - 2) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (3 - 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (3 - 2))) = 24\nreach 24! expression: (8 * (4 - (3 - 2)))"}, {"input": "8 2 3 4\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 8, 3\n(8) + (3) = 11, left: (8 + 3) = 11, (2 / 4) = 1/2\n(11) - (1/2) = 21/2, left: ((8 + 3) - (2 / 4)) = 21/2\nroll back, left: (8 + 3) = 11, (2 / 4) = 1/2\nroll back, left: (2 / 4) = 1/2, 8, 3\nroll back, left: 8 2 3 4\n(2) + (4) = 6, left: (2 + 4) = 6, 8, 3\n(6) - (3) = 3, left: ((2 + 4) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 4) - 3)) = 24\nreach 24! expression: (8 * ((2 + 4) - 3))"}, {"input": "8 2 3 4\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 8, 2\n(12) / (8) = 3/2, left: ((3 * 4) / 8) = 3/2, 2\nroll back, left: (3 * 4) = 12, 8, 2\nroll back, left: 8 2 3 4\n(3) + (4) = 7, left: (3 + 4) = 7, 8, 2\nroll back, left: 8 2 3 4\n(4) - (3) = 1, left: (4 - 3) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (4 - 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (4 - 3))) = 24\nreach 24! expression: (8 * (2 + (4 - 3)))"}, {"input": "1 2 11 3\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (11 - 3) = 8\n(8) * (3) = 24, left: ((11 - 3) * (1 + 2)) = 24\nreach 24! expression: ((11 - 3) * (1 + 2))"}, {"input": "1 2 11 3\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 2, 11\n(11) * (-2) = -22, left: (11 * (1 - 3)) = -22, 2\n(2) - (-22) = 24, left: (2 - (11 * (1 - 3))) = 24\nreach 24! expression: (2 - (11 * (1 - 3)))"}, {"input": "1 2 11 3\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 11, 3\n(11) - (3) = 8, left: (11 - (1 + 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 - (1 + 2))) = 24\nreach 24! expression: (3 * (11 - (1 + 2)))"}, {"input": "1 2 11 3\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 1, 11\n(11) + (1) = 12, left: (11 + (3 - 2)) = 12, 1\nroll back, left: (3 - 2) = 1, 1, 11\nroll back, left: 1 2 11 3\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, 1, 11\nroll back, left: 1 2 11 3\n(11) - (3) = 8, left: (11 - 3) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (11 - 3) = 8\n(8) * (3) = 24, left: ((11 - 3) * (1 + 2)) = 24\nreach 24! expression: ((11 - 3) * (1 + 2))"}, {"input": "1 2 11 3\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 1, 2\nroll back, left: 1 2 11 3\n(11) / (3) = 11/3, left: (11 / 3) = 11/3, 1, 2\nroll back, left: 1 2 11 3\n(11) + (3) = 14, left: (11 + 3) = 14, 1, 2\nroll back, left: 1 2 11 3\n(11) - (3) = 8, left: (11 - 3) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (11 - 3) = 8\n(8) * (3) = 24, left: ((11 - 3) * (1 + 2)) = 24\nreach 24! expression: ((11 - 3) * (1 + 2))"}, {"input": "1 2 11 3\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 2, 11\n(11) + (-2) = 9, left: (11 + (1 - 3)) = 9, 2\n(2) + (9) = 11, left: (2 + (11 + (1 - 3))) = 11\nroll back, left: (11 + (1 - 3)) = 9, 2\n(9) / (2) = 9/2, left: ((11 + (1 - 3)) / 2) = 9/2\nroll back, left: (11 + (1 - 3)) = 9, 2\nroll back, left: (1 - 3) = -2, 2, 11\n(11) * (-2) = -22, left: (11 * (1 - 3)) = -22, 2\n(2) - (-22) = 24, left: (2 - (11 * (1 - 3))) = 24\nreach 24! expression: (2 - (11 * (1 - 3)))"}, {"input": "1 2 11 3\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 11, 3\nroll back, left: 1 2 11 3\n(1) - (2) = -1, left: (1 - 2) = -1, 11, 3\n(-1) - (11) = -12, left: ((1 - 2) - 11) = -12, 3\nroll back, left: (1 - 2) = -1, 11, 3\nroll back, left: 1 2 11 3\n(1) + (2) = 3, left: (1 + 2) = 3, 11, 3\n(11) - (3) = 8, left: (11 - (1 + 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 - (1 + 2))) = 24\nreach 24! expression: (3 * (11 - (1 + 2)))"}, {"input": "1 2 11 3\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 2, 11\n(11) + (3) = 14, left: (11 + (1 * 3)) = 14, 2\nroll back, left: (1 * 3) = 3, 2, 11\n(2) / (11) = 2/11, left: (2 / 11) = 2/11, (1 * 3) = 3\nroll back, left: (1 * 3) = 3, 2, 11\nroll back, left: 1 2 11 3\n(1) - (3) = -2, left: (1 - 3) = -2, 2, 11\n(11) * (-2) = -22, left: (11 * (1 - 3)) = -22, 2\n(2) - (-22) = 24, left: (2 - (11 * (1 - 3))) = 24\nreach 24! expression: (2 - (11 * (1 - 3)))"}, {"input": "2 6 9 5\n", "output": "(2) / (5) = 2/5, left: (2 / 5) = 2/5, 6, 9\n(6) / (2/5) = 15, left: (6 / (2 / 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 / (2 / 5))) = 24\nreach 24! expression: (9 + (6 / (2 / 5)))"}, {"input": "2 6 9 5\n", "output": "(6) * (5) = 30, left: (6 * 5) = 30, 2, 9\n(30) / (2) = 15, left: ((6 * 5) / 2) = 15, 9\n(9) + (15) = 24, left: (9 + ((6 * 5) / 2)) = 24\nreach 24! expression: (9 + ((6 * 5) / 2))"}, {"input": "2 6 9 5\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 9, 5\n(5) / (1/3) = 15, left: (5 / (2 / 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 / (2 / 6))) = 24\nreach 24! expression: (9 + (5 / (2 / 6)))"}, {"input": "2 6 9 5\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 6, 9\n(6) * (5/2) = 15, left: (6 * (5 / 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 * (5 / 2))) = 24\nreach 24! expression: (9 + (6 * (5 / 2)))"}, {"input": "2 6 9 5\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 6, 9\n(6) * (-3) = -18, left: (6 * (2 - 5)) = -18, 9\nroll back, left: (2 - 5) = -3, 6, 9\n(9) + (-3) = 6, left: (9 + (2 - 5)) = 6, 6\nroll back, left: (2 - 5) = -3, 6, 9\nroll back, left: 2 6 9 5\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 6, 9\n(6) / (2/5) = 15, left: (6 / (2 / 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 / (2 / 5))) = 24\nreach 24! expression: (9 + (6 / (2 / 5)))"}, {"input": "2 6 9 5\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 2, 6\nroll back, left: 2 6 9 5\n(9) - (5) = 4, left: (9 - 5) = 4, 2, 6\n(2) * (6) = 12, left: (2 * 6) = 12, (9 - 5) = 4\nroll back, left: (9 - 5) = 4, 2, 6\nroll back, left: 2 6 9 5\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 6, 9\n(6) * (5/2) = 15, left: (6 * (5 / 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 * (5 / 2))) = 24\nreach 24! expression: (9 + (6 * (5 / 2)))"}, {"input": "2 6 9 5\n", "output": "(2) * (5) = 10, left: (2 * 5) = 10, 6, 9\nroll back, left: 2 6 9 5\n(2) + (5) = 7, left: (2 + 5) = 7, 6, 9\n(7) - (9) = -2, left: ((2 + 5) - 9) = -2, 6\nroll back, left: (2 + 5) = 7, 6, 9\nroll back, left: 2 6 9 5\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 6, 9\n(6) * (5/2) = 15, left: (6 * (5 / 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 * (5 / 2))) = 24\nreach 24! expression: (9 + (6 * (5 / 2)))"}, {"input": "2 6 9 5\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 9, 5\n(9) + (4) = 13, left: (9 + (6 - 2)) = 13, 5\n(5) + (13) = 18, left: (5 + (9 + (6 - 2))) = 18\nroll back, left: (9 + (6 - 2)) = 13, 5\nroll back, left: (6 - 2) = 4, 9, 5\nroll back, left: 2 6 9 5\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, 9, 5\n(5) / (1/3) = 15, left: (5 / (2 / 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 / (2 / 6))) = 24\nreach 24! expression: (9 + (5 / (2 / 6)))"}, {"input": "2 6 9 5\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 2, 9\nroll back, left: 2 6 9 5\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 2, 9\n(9) / (2) = 9/2, left: (9 / 2) = 9/2, (5 / 6) = 5/6\nroll back, left: (5 / 6) = 5/6, 2, 9\nroll back, left: 2 6 9 5\n(6) * (5) = 30, left: (6 * 5) = 30, 2, 9\n(30) / (2) = 15, left: ((6 * 5) / 2) = 15, 9\n(9) + (15) = 24, left: (9 + ((6 * 5) / 2)) = 24\nreach 24! expression: (9 + ((6 * 5) / 2))"}, {"input": "6 1 2 12\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (1 * 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (1 * 2))) = 24\nreach 24! expression: (12 + (6 * (1 * 2)))"}, {"input": "6 1 2 12\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (6 / 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (6 / 1))) = 24\nreach 24! expression: (12 + (2 * (6 / 1)))"}, {"input": "6 1 2 12\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (12 / 1) = 12\n(12) + (12) = 24, left: ((12 / 1) + (6 * 2)) = 24\nreach 24! expression: ((12 / 1) + (6 * 2))"}, {"input": "6 1 2 12\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 1, 12\n(3) - (1) = 2, left: ((6 / 2) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 / 2) - 1)) = 24\nreach 24! expression: (12 * ((6 / 2) - 1))"}, {"input": "6 1 2 12\n", "output": "(2) + (12) = 14, left: (2 + 12) = 14, 6, 1\nroll back, left: 6 1 2 12\n(2) - (12) = -10, left: (2 - 12) = -10, 6, 1\nroll back, left: 6 1 2 12\n(12) / (2) = 6, left: (12 / 2) = 6, 6, 1\nroll back, left: 6 1 2 12\n(12) / (1) = 12, left: (12 / 1) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (12 / 1) = 12\n(12) + (12) = 24, left: ((12 / 1) + (6 * 2)) = 24\nreach 24! expression: ((12 / 1) + (6 * 2))"}, {"input": "6 1 2 12\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 6, 1\nroll back, left: 6 1 2 12\n(6) + (1) = 7, left: (6 + 1) = 7, 2, 12\n(2) - (7) = -5, left: (2 - (6 + 1)) = -5, 12\nroll back, left: (6 + 1) = 7, 2, 12\nroll back, left: 6 1 2 12\n(6) / (1) = 6, left: (6 / 1) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (6 / 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (6 / 1))) = 24\nreach 24! expression: (12 + (2 * (6 / 1)))"}, {"input": "6 1 2 12\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 1, 12\n(1) - (1/3) = 2/3, left: (1 - (2 / 6)) = 2/3, 12\nroll back, left: (2 / 6) = 1/3, 1, 12\nroll back, left: 6 1 2 12\n(2) - (6) = -4, left: (2 - 6) = -4, 1, 12\nroll back, left: 6 1 2 12\n(6) / (2) = 3, left: (6 / 2) = 3, 1, 12\n(3) - (1) = 2, left: ((6 / 2) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 / 2) - 1)) = 24\nreach 24! expression: (12 * ((6 / 2) - 1))"}, {"input": "6 1 2 12\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 6, 12\n(12) + (2) = 14, left: (12 + (1 * 2)) = 14, 6\nroll back, left: (1 * 2) = 2, 6, 12\n(2) / (12) = 1/6, left: ((1 * 2) / 12) = 1/6, 6\nroll back, left: (1 * 2) = 2, 6, 12\n(2) - (12) = -10, left: ((1 * 2) - 12) = -10, 6\nroll back, left: (1 * 2) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (1 * 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (1 * 2))) = 24\nreach 24! expression: (12 + (6 * (1 * 2)))"}, {"input": "10 4 7 4\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 10, 7\n(10) - (7) = 3, left: (10 - 7) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (10 - 7)) = 24\nreach 24! expression: ((4 + 4) * (10 - 7))"}, {"input": "10 4 7 4\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (10 - 7) = 3\n(3) * (8) = 24, left: ((10 - 7) * (4 + 4)) = 24\nreach 24! expression: ((10 - 7) * (4 + 4))"}, {"input": "10 4 7 4\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 10, 4\nroll back, left: 10 4 7 4\n(7) * (4) = 28, left: (7 * 4) = 28, 10, 4\nroll back, left: 10 4 7 4\n(4) + (4) = 8, left: (4 + 4) = 8, 10, 7\n(7) + (8) = 15, left: (7 + (4 + 4)) = 15, 10\nroll back, left: (4 + 4) = 8, 10, 7\n(10) - (7) = 3, left: (10 - 7) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (10 - 7)) = 24\nreach 24! expression: ((4 + 4) * (10 - 7))"}, {"input": "10 4 7 4\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 10, 4\nroll back, left: 10 4 7 4\n(4) / (4) = 1, left: (4 / 4) = 1, 10, 7\nroll back, left: 10 4 7 4\n(4) * (4) = 16, left: (4 * 4) = 16, 10, 7\nroll back, left: 10 4 7 4\n(4) + (4) = 8, left: (4 + 4) = 8, 10, 7\n(10) - (7) = 3, left: (10 - 7) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (10 - 7)) = 24\nreach 24! expression: ((4 + 4) * (10 - 7))"}, {"input": "10 4 7 4\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 10, 4\nroll back, left: 10 4 7 4\n(7) - (4) = 3, left: (7 - 4) = 3, 10, 4\nroll back, left: 10 4 7 4\n(7) * (4) = 28, left: (7 * 4) = 28, 10, 4\nroll back, left: 10 4 7 4\n(10) - (7) = 3, left: (10 - 7) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (10 - 7) = 3\n(3) * (8) = 24, left: ((10 - 7) * (4 + 4)) = 24\nreach 24! expression: ((10 - 7) * (4 + 4))"}, {"input": "10 4 7 4\n", "output": "(7) / (10) = 7/10, left: (7 / 10) = 7/10, 4, 4\nroll back, left: 10 4 7 4\n(10) + (7) = 17, left: (10 + 7) = 17, 4, 4\n(4) - (17) = -13, left: (4 - (10 + 7)) = -13, 4\nroll back, left: (10 + 7) = 17, 4, 4\nroll back, left: 10 4 7 4\n(10) - (7) = 3, left: (10 - 7) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (10 - 7) = 3\n(3) * (8) = 24, left: ((10 - 7) * (4 + 4)) = 24\nreach 24! expression: ((10 - 7) * (4 + 4))"}, {"input": "10 4 7 4\n", "output": "(10) + (4) = 14, left: (10 + 4) = 14, 7, 4\n(7) * (14) = 98, left: (7 * (10 + 4)) = 98, 4\nroll back, left: (10 + 4) = 14, 7, 4\nroll back, left: 10 4 7 4\n(10) * (4) = 40, left: (10 * 4) = 40, 7, 4\nroll back, left: 10 4 7 4\n(4) + (4) = 8, left: (4 + 4) = 8, 10, 7\n(10) - (7) = 3, left: (10 - 7) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (10 - 7)) = 24\nreach 24! expression: ((4 + 4) * (10 - 7))"}, {"input": "5 10 3 10\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (10 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (10 / 5))) = 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "5 10 3 10\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 3, 10\n(10) - (2) = 8, left: (10 - (10 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (10 / 5))) = 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "5 10 3 10\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 10, 3\n(5) / (10) = 1/2, left: ((10 - 5) / 10) = 1/2, 3\nroll back, left: (10 - 5) = 5, 10, 3\nroll back, left: 5 10 3 10\n(10) / (5) = 2, left: (10 / 5) = 2, 10, 3\n(10) + (2) = 12, left: (10 + (10 / 5)) = 12, 3\nroll back, left: (10 / 5) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (10 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (10 / 5))) = 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "5 10 3 10\n", "output": "(3) - (10) = -7, left: (3 - 10) = -7, 5, 10\nroll back, left: 5 10 3 10\n(10) - (3) = 7, left: (10 - 3) = 7, 5, 10\n(7) - (10) = -3, left: ((10 - 3) - 10) = -3, 5\nroll back, left: (10 - 3) = 7, 5, 10\nroll back, left: 5 10 3 10\n(10) / (5) = 2, left: (10 / 5) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (10 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (10 / 5))) = 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "5 10 3 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 5, 3\nroll back, left: 5 10 3 10\n(3) / (10) = 3/10, left: (3 / 10) = 3/10, 5, 10\nroll back, left: 5 10 3 10\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, 5, 10\nroll back, left: 5 10 3 10\n(10) / (5) = 2, left: (10 / 5) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (10 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (10 / 5))) = 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "5 10 3 10\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 5, 10\nroll back, left: 5 10 3 10\n(10) - (10) = 0, left: (10 - 10) = 0, 5, 3\n(0) - (5) = -5, left: ((10 - 10) - 5) = -5, 3\nroll back, left: (10 - 10) = 0, 5, 3\nroll back, left: 5 10 3 10\n(10) / (5) = 2, left: (10 / 5) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (10 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (10 / 5))) = 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "5 10 3 10\n", "output": "(3) - (10) = -7, left: (3 - 10) = -7, 5, 10\nroll back, left: 5 10 3 10\n(3) - (10) = -7, left: (3 - 10) = -7, 5, 10\nroll back, left: 5 10 3 10\n(3) / (10) = 3/10, left: (3 / 10) = 3/10, 5, 10\nroll back, left: 5 10 3 10\n(10) / (5) = 2, left: (10 / 5) = 2, 3, 10\n(10) - (2) = 8, left: (10 - (10 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (10 / 5))) = 24\nreach 24! expression: (3 * (10 - (10 / 5)))"}, {"input": "6 9 6 12\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 6, 12\n(12) / (2/3) = 18, left: (12 / (6 / 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (12 / (6 / 9))) = 24\nreach 24! expression: (6 + (12 / (6 / 9)))"}, {"input": "6 9 6 12\n", "output": "(6) * (12) = 72, left: (6 * 12) = 72, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (6 * 12) = 72\n(72) / (3) = 24, left: ((6 * 12) / (9 - 6)) = 24\nreach 24! expression: ((6 * 12) / (9 - 6))"}, {"input": "6 9 6 12\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 6, 9\n(9) / (1/2) = 18, left: (9 / (6 / 12)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 / (6 / 12))) = 24\nreach 24! expression: (6 + (9 / (6 / 12)))"}, {"input": "6 9 6 12\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (9 - 12)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (9 - 12))) = 24\nreach 24! expression: (6 - (6 * (9 - 12)))"}, {"input": "6 9 6 12\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 9, 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, (12 - 6) = 6\nroll back, left: (12 - 6) = 6, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (12 - 6) = 6\nroll back, left: (12 - 6) = 6, 9, 6\nroll back, left: 6 9 6 12\n(6) * (12) = 72, left: (6 * 12) = 72, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (6 * 12) = 72\n(72) / (3) = 24, left: ((6 * 12) / (9 - 6)) = 24\nreach 24! expression: ((6 * 12) / (9 - 6))"}, {"input": "6 9 6 12\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 6, 12\n(12) / (2/3) = 18, left: (12 / (6 / 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (12 / (6 / 9))) = 24\nreach 24! expression: (6 + (12 / (6 / 9)))"}, {"input": "6 9 6 12\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 6, 9\n(6) / (-6) = -1, left: (6 / (6 - 12)) = -1, 9\nroll back, left: (6 - 12) = -6, 6, 9\nroll back, left: 6 9 6 12\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 6, 9\n(9) * (1/2) = 9/2, left: (9 * (6 / 12)) = 9/2, 6\nroll back, left: (6 / 12) = 1/2, 6, 9\n(9) / (1/2) = 18, left: (9 / (6 / 12)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 / (6 / 12))) = 24\nreach 24! expression: (6 + (9 / (6 / 12)))"}, {"input": "6 9 6 12\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 6, 12\n(-3) / (6) = -1/2, left: ((6 - 9) / 6) = -1/2, 12\nroll back, left: (6 - 9) = -3, 6, 12\n(-3) - (6) = -9, left: ((6 - 9) - 6) = -9, 12\nroll back, left: (6 - 9) = -3, 6, 12\nroll back, left: 6 9 6 12\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, 6, 12\n(12) / (2/3) = 18, left: (12 / (6 / 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (12 / (6 / 9))) = 24\nreach 24! expression: (6 + (12 / (6 / 9)))"}, {"input": "6 9 6 12\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 6, 6\n(4/3) - (6) = -14/3, left: ((12 / 9) - 6) = -14/3, 6\nroll back, left: (12 / 9) = 4/3, 6, 6\nroll back, left: 6 9 6 12\n(9) - (12) = -3, left: (9 - 12) = -3, 6, 6\n(6) - (-3) = 9, left: (6 - (9 - 12)) = 9, 6\nroll back, left: (9 - 12) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (9 - 12)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (9 - 12))) = 24\nreach 24! expression: (6 - (6 * (9 - 12)))"}, {"input": "6 9 6 12\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 6, 12\n(12) / (2/3) = 18, left: (12 / (6 / 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (12 / (6 / 9))) = 24\nreach 24! expression: (6 + (12 / (6 / 9)))"}, {"input": "6 9 6 12\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 6, 12\n(12) / (2/3) = 18, left: (12 / (6 / 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (12 / (6 / 9))) = 24\nreach 24! expression: (6 + (12 / (6 / 9)))"}, {"input": "6 9 6 12\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 6, 12\n(12) / (2/3) = 18, left: (12 / (6 / 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (12 / (6 / 9))) = 24\nreach 24! expression: (6 + (12 / (6 / 9)))"}, {"input": "10 12 1 5\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 12, 1\n(1/2) / (12) = 1/24, left: ((5 / 10) / 12) = 1/24, 1\n(1) / (1/24) = 24, left: (1 / ((5 / 10) / 12)) = 24\nreach 24! expression: (1 / ((5 / 10) / 12))"}, {"input": "10 12 1 5\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 12, 1\n(1) * (2) = 2, left: (1 * (10 / 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (10 / 5))) = 24\nreach 24! expression: (12 * (1 * (10 / 5)))"}, {"input": "10 12 1 5\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 12, 1\n(1) * (1/2) = 1/2, left: (1 * (5 / 10)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (1 * (5 / 10))) = 24\nreach 24! expression: (12 / (1 * (5 / 10)))"}, {"input": "10 12 1 5\n", "output": "(10) * (12) = 120, left: (10 * 12) = 120, 1, 5\n(120) / (5) = 24, left: ((10 * 12) / 5) = 24, 1\n(1) * (24) = 24, left: (1 * ((10 * 12) / 5)) = 24\nreach 24! expression: (1 * ((10 * 12) / 5))"}, {"input": "10 12 1 5\n", "output": "(1) / (10) = 1/10, left: (1 / 10) = 1/10, 12, 5\n(12) / (5) = 12/5, left: (12 / 5) = 12/5, (1 / 10) = 1/10\n(12/5) / (1/10) = 24, left: ((12 / 5) / (1 / 10)) = 24\nreach 24! expression: ((12 / 5) / (1 / 10))"}, {"input": "10 12 1 5\n", "output": "(5) - (10) = -5, left: (5 - 10) = -5, 12, 1\n(12) / (-5) = -12/5, left: (12 / (5 - 10)) = -12/5, 1\nroll back, left: (5 - 10) = -5, 12, 1\nroll back, left: 10 12 1 5\n(10) * (5) = 50, left: (10 * 5) = 50, 12, 1\nroll back, left: 10 12 1 5\n(10) / (5) = 2, left: (10 / 5) = 2, 12, 1\n(1) * (2) = 2, left: (1 * (10 / 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 * (10 / 5))) = 24\nreach 24! expression: (12 * (1 * (10 / 5)))"}, {"input": "10 12 1 5\n", "output": "(10) * (5) = 50, left: (10 * 5) = 50, 12, 1\nroll back, left: 10 12 1 5\n(10) - (5) = 5, left: (10 - 5) = 5, 12, 1\n(12) - (5) = 7, left: (12 - (10 - 5)) = 7, 1\nroll back, left: (10 - 5) = 5, 12, 1\nroll back, left: 10 12 1 5\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, 12, 1\n(1) * (1/2) = 1/2, left: (1 * (5 / 10)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (1 * (5 / 10))) = 24\nreach 24! expression: (12 / (1 * (5 / 10)))"}, {"input": "11 1 9 5\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 9, 5\n(9) + (10) = 19, left: (9 + (11 - 1)) = 19, 5\n(5) + (19) = 24, left: (5 + (9 + (11 - 1))) = 24\nreach 24! expression: (5 + (9 + (11 - 1)))"}, {"input": "11 1 9 5\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 11, 1\n(11) + (14) = 25, left: (11 + (9 + 5)) = 25, 1\n(25) - (1) = 24, left: ((11 + (9 + 5)) - 1) = 24\nreach 24! expression: ((11 + (9 + 5)) - 1)"}, {"input": "11 1 9 5\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 11, 5\n(-8) - (5) = -13, left: ((1 - 9) - 5) = -13, 11\n(11) - (-13) = 24, left: (11 - ((1 - 9) - 5)) = 24\nreach 24! expression: (11 - ((1 - 9) - 5))"}, {"input": "11 1 9 5\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 9, 5\n(-10) - (9) = -19, left: ((1 - 11) - 9) = -19, 5\n(5) - (-19) = 24, left: (5 - ((1 - 11) - 9)) = 24\nreach 24! expression: (5 - ((1 - 11) - 9))"}, {"input": "11 1 9 5\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 11, 5\n(5) - (9) = -4, left: (5 - (1 * 9)) = -4, 11\nroll back, left: (1 * 9) = 9, 11, 5\nroll back, left: 11 1 9 5\n(1) / (9) = 1/9, left: (1 / 9) = 1/9, 11, 5\nroll back, left: 11 1 9 5\n(1) - (9) = -8, left: (1 - 9) = -8, 11, 5\n(-8) - (5) = -13, left: ((1 - 9) - 5) = -13, 11\n(11) - (-13) = 24, left: (11 - ((1 - 9) - 5)) = 24\nreach 24! expression: (11 - ((1 - 9) - 5))"}, {"input": "11 1 9 5\n", "output": "(1) / (11) = 1/11, left: (1 / 11) = 1/11, 9, 5\nroll back, left: 11 1 9 5\n(11) / (1) = 11, left: (11 / 1) = 11, 9, 5\nroll back, left: 11 1 9 5\n(1) - (11) = -10, left: (1 - 11) = -10, 9, 5\n(9) * (-10) = -90, left: (9 * (1 - 11)) = -90, 5\nroll back, left: (1 - 11) = -10, 9, 5\n(-10) - (9) = -19, left: ((1 - 11) - 9) = -19, 5\n(5) - (-19) = 24, left: (5 - ((1 - 11) - 9)) = 24\nreach 24! expression: (5 - ((1 - 11) - 9))"}, {"input": "11 1 9 5\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 11, 1\nroll back, left: 11 1 9 5\n(5) - (9) = -4, left: (5 - 9) = -4, 11, 1\n(11) - (-4) = 15, left: (11 - (5 - 9)) = 15, 1\nroll back, left: (5 - 9) = -4, 11, 1\nroll back, left: 11 1 9 5\n(9) + (5) = 14, left: (9 + 5) = 14, 11, 1\n(11) + (14) = 25, left: (11 + (9 + 5)) = 25, 1\n(25) - (1) = 24, left: ((11 + (9 + 5)) - 1) = 24\nreach 24! expression: ((11 + (9 + 5)) - 1)"}, {"input": "2 1 11 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 1, 11\n(11) + (14) = 25, left: (11 + (2 * 7)) = 25, 1\n(25) - (1) = 24, left: ((11 + (2 * 7)) - 1) = 24\nreach 24! expression: ((11 + (2 * 7)) - 1)"}, {"input": "2 1 11 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 1, 11\n(1) - (14) = -13, left: (1 - (2 * 7)) = -13, 11\n(11) - (-13) = 24, left: (11 - (1 - (2 * 7))) = 24\nreach 24! expression: (11 - (1 - (2 * 7)))"}, {"input": "2 1 11 7\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 2, 7\n(2) * (7) = 14, left: (2 * 7) = 14, (11 - 1) = 10\n(10) + (14) = 24, left: ((11 - 1) + (2 * 7)) = 24\nreach 24! expression: ((11 - 1) + (2 * 7))"}, {"input": "2 1 11 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 1, 11\n(14) - (1) = 13, left: ((2 * 7) - 1) = 13, 11\n(11) + (13) = 24, left: (11 + ((2 * 7) - 1)) = 24\nreach 24! expression: (11 + ((2 * 7) - 1))"}, {"input": "2 1 11 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 1, 11\n(1) - (11) = -10, left: (1 - 11) = -10, (2 * 7) = 14\n(14) - (-10) = 24, left: ((2 * 7) - (1 - 11)) = 24\nreach 24! expression: ((2 * 7) - (1 - 11))"}, {"input": "2 1 11 7\n", "output": "(2) - (7) = -5, left: (2 - 7) = -5, 1, 11\nroll back, left: 2 1 11 7\n(7) - (2) = 5, left: (7 - 2) = 5, 1, 11\n(1) - (11) = -10, left: (1 - 11) = -10, (7 - 2) = 5\nroll back, left: (7 - 2) = 5, 1, 11\nroll back, left: 2 1 11 7\n(2) * (7) = 14, left: (2 * 7) = 14, 1, 11\n(14) - (1) = 13, left: ((2 * 7) - 1) = 13, 11\n(11) + (13) = 24, left: (11 + ((2 * 7) - 1)) = 24\nreach 24! expression: (11 + ((2 * 7) - 1))"}, {"input": "2 1 11 7\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 2, 1\n(1) / (-4) = -1/4, left: (1 / (7 - 11)) = -1/4, 2\nroll back, left: (7 - 11) = -4, 2, 1\nroll back, left: 2 1 11 7\n(11) / (7) = 11/7, left: (11 / 7) = 11/7, 2, 1\nroll back, left: 2 1 11 7\n(2) * (7) = 14, left: (2 * 7) = 14, 1, 11\n(11) + (14) = 25, left: (11 + (2 * 7)) = 25, 1\n(25) - (1) = 24, left: ((11 + (2 * 7)) - 1) = 24\nreach 24! expression: ((11 + (2 * 7)) - 1)"}, {"input": "2 1 11 7\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 2, 11\nroll back, left: 2 1 11 7\n(7) / (1) = 7, left: (7 / 1) = 7, 2, 11\nroll back, left: 2 1 11 7\n(7) - (2) = 5, left: (7 - 2) = 5, 1, 11\nroll back, left: 2 1 11 7\n(2) * (7) = 14, left: (2 * 7) = 14, 1, 11\n(1) - (11) = -10, left: (1 - 11) = -10, (2 * 7) = 14\n(14) - (-10) = 24, left: ((2 * 7) - (1 - 11)) = 24\nreach 24! expression: ((2 * 7) - (1 - 11))"}, {"input": "4 1 10 4\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 10, 4\n(10) - (4) = 6, left: (10 - 4) = 6, (1 / 4) = 1/4\n(6) / (1/4) = 24, left: ((10 - 4) / (1 / 4)) = 24\nreach 24! expression: ((10 - 4) / (1 / 4))"}, {"input": "4 1 10 4\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 1, 4\n(4) / (1) = 4, left: (4 / 1) = 4, (10 - 4) = 6\n(6) * (4) = 24, left: ((10 - 4) * (4 / 1)) = 24\nreach 24! expression: ((10 - 4) * (4 / 1))"}, {"input": "4 1 10 4\n", "output": "(10) / (1) = 10, left: (10 / 1) = 10, 4, 4\n(10) - (4) = 6, left: ((10 / 1) - 4) = 6, 4\n(4) * (6) = 24, left: (4 * ((10 / 1) - 4)) = 24\nreach 24! expression: (4 * ((10 / 1) - 4))"}, {"input": "4 1 10 4\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 4, 1\n(4) * (1) = 4, left: (4 * 1) = 4, (10 - 4) = 6\n(6) * (4) = 24, left: ((10 - 4) * (4 * 1)) = 24\nreach 24! expression: ((10 - 4) * (4 * 1))"}, {"input": "4 1 10 4\n", "output": "(10) * (4) = 40, left: (10 * 4) = 40, 4, 1\nroll back, left: 4 1 10 4\n(4) / (10) = 2/5, left: (4 / 10) = 2/5, 4, 1\nroll back, left: 4 1 10 4\n(10) + (4) = 14, left: (10 + 4) = 14, 4, 1\nroll back, left: 4 1 10 4\n(10) - (4) = 6, left: (10 - 4) = 6, 4, 1\n(4) * (1) = 4, left: (4 * 1) = 4, (10 - 4) = 6\n(6) * (4) = 24, left: ((10 - 4) * (4 * 1)) = 24\nreach 24! expression: ((10 - 4) * (4 * 1))"}, {"input": "4 1 10 4\n", "output": "(10) / (1) = 10, left: (10 / 1) = 10, 4, 4\n(4) - (10) = -6, left: (4 - (10 / 1)) = -6, 4\n(4) / (-6) = -2/3, left: (4 / (4 - (10 / 1))) = -2/3\nroll back, left: (4 - (10 / 1)) = -6, 4\nroll back, left: (10 / 1) = 10, 4, 4\n(4) + (10) = 14, left: (4 + (10 / 1)) = 14, 4\nroll back, left: (10 / 1) = 10, 4, 4\n(10) - (4) = 6, left: ((10 / 1) - 4) = 6, 4\n(4) * (6) = 24, left: (4 * ((10 / 1) - 4)) = 24\nreach 24! expression: (4 * ((10 / 1) - 4))"}, {"input": "4 1 10 4\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 10, 4\n(5) - (10) = -5, left: ((4 + 1) - 10) = -5, 4\nroll back, left: (4 + 1) = 5, 10, 4\n(10) / (5) = 2, left: (10 / (4 + 1)) = 2, 4\nroll back, left: (4 + 1) = 5, 10, 4\nroll back, left: 4 1 10 4\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 10, 4\n(10) - (4) = 6, left: (10 - 4) = 6, (1 / 4) = 1/4\n(6) / (1/4) = 24, left: ((10 - 4) / (1 / 4)) = 24\nreach 24! expression: ((10 - 4) / (1 / 4))"}, {"input": "4 1 10 4\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 1, 4\nroll back, left: 4 1 10 4\n(4) * (10) = 40, left: (4 * 10) = 40, 1, 4\n(4) / (1) = 4, left: (4 / 1) = 4, (4 * 10) = 40\nroll back, left: (4 * 10) = 40, 1, 4\nroll back, left: 4 1 10 4\n(10) - (4) = 6, left: (10 - 4) = 6, 1, 4\n(4) / (1) = 4, left: (4 / 1) = 4, (10 - 4) = 6\n(6) * (4) = 24, left: ((10 - 4) * (4 / 1)) = 24\nreach 24! expression: ((10 - 4) * (4 / 1))"}, {"input": "4 1 10 4\n", "output": "(1) - (10) = -9, left: (1 - 10) = -9, 4, 4\nroll back, left: 4 1 10 4\n(10) / (1) = 10, left: (10 / 1) = 10, 4, 4\n(4) + (10) = 14, left: (4 + (10 / 1)) = 14, 4\nroll back, left: (10 / 1) = 10, 4, 4\n(4) - (10) = -6, left: (4 - (10 / 1)) = -6, 4\nroll back, left: (10 / 1) = 10, 4, 4\n(10) - (4) = 6, left: ((10 / 1) - 4) = 6, 4\n(4) * (6) = 24, left: (4 * ((10 / 1) - 4)) = 24\nreach 24! expression: (4 * ((10 / 1) - 4))"}, {"input": "7 8 13 9\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 7, 8\n(7) - (4) = 3, left: (7 - (13 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (13 - 9))) = 24\nreach 24! expression: (8 * (7 - (13 - 9)))"}, {"input": "7 8 13 9\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 8, 13\n(16) - (13) = 3, left: ((7 + 9) - 13) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 9) - 13)) = 24\nreach 24! expression: (8 * ((7 + 9) - 13))"}, {"input": "7 8 13 9\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 8, 9\n(9) + (-6) = 3, left: (9 + (7 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 + (7 - 13))) = 24\nreach 24! expression: (8 * (9 + (7 - 13)))"}, {"input": "7 8 13 9\n", "output": "(7) / (9) = 7/9, left: (7 / 9) = 7/9, 8, 13\n(13) + (7/9) = 124/9, left: (13 + (7 / 9)) = 124/9, 8\nroll back, left: (7 / 9) = 7/9, 8, 13\nroll back, left: 7 8 13 9\n(7) + (9) = 16, left: (7 + 9) = 16, 8, 13\n(13) - (16) = -3, left: (13 - (7 + 9)) = -3, 8\nroll back, left: (7 + 9) = 16, 8, 13\n(16) - (13) = 3, left: ((7 + 9) - 13) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 9) - 13)) = 24\nreach 24! expression: (8 * ((7 + 9) - 13))"}, {"input": "7 8 13 9\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 8, 9\n(9) * (-6) = -54, left: (9 * (7 - 13)) = -54, 8\n(8) - (-54) = 62, left: (8 - (9 * (7 - 13))) = 62\nroll back, left: (9 * (7 - 13)) = -54, 8\nroll back, left: (7 - 13) = -6, 8, 9\n(9) - (-6) = 15, left: (9 - (7 - 13)) = 15, 8\nroll back, left: (7 - 13) = -6, 8, 9\n(9) + (-6) = 3, left: (9 + (7 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 + (7 - 13))) = 24\nreach 24! expression: (8 * (9 + (7 - 13)))"}, {"input": "7 8 13 9\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 7, 9\nroll back, left: 7 8 13 9\n(8) * (13) = 104, left: (8 * 13) = 104, 7, 9\nroll back, left: 7 8 13 9\n(8) + (13) = 21, left: (8 + 13) = 21, 7, 9\nroll back, left: 7 8 13 9\n(13) - (9) = 4, left: (13 - 9) = 4, 7, 8\n(7) - (4) = 3, left: (7 - (13 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (13 - 9))) = 24\nreach 24! expression: (8 * (7 - (13 - 9)))"}, {"input": "7 8 13 9\n", "output": "(8) + (9) = 17, left: (8 + 9) = 17, 7, 13\nroll back, left: 7 8 13 9\n(8) * (9) = 72, left: (8 * 9) = 72, 7, 13\n(72) - (13) = 59, left: ((8 * 9) - 13) = 59, 7\nroll back, left: (8 * 9) = 72, 7, 13\nroll back, left: 7 8 13 9\n(7) + (9) = 16, left: (7 + 9) = 16, 8, 13\n(16) - (13) = 3, left: ((7 + 9) - 13) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 9) - 13)) = 24\nreach 24! expression: (8 * ((7 + 9) - 13))"}, {"input": "7 8 13 9\n", "output": "(9) / (7) = 9/7, left: (9 / 7) = 9/7, 8, 13\nroll back, left: 7 8 13 9\n(9) - (7) = 2, left: (9 - 7) = 2, 8, 13\nroll back, left: 7 8 13 9\n(7) + (9) = 16, left: (7 + 9) = 16, 8, 13\n(8) / (16) = 1/2, left: (8 / (7 + 9)) = 1/2, 13\nroll back, left: (7 + 9) = 16, 8, 13\n(16) - (13) = 3, left: ((7 + 9) - 13) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 9) - 13)) = 24\nreach 24! expression: (8 * ((7 + 9) - 13))"}, {"input": "7 3 3 1\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 3, 1\n(21) / (1) = 21, left: ((7 * 3) / 1) = 21, 3\n(3) + (21) = 24, left: (3 + ((7 * 3) / 1)) = 24\nreach 24! expression: (3 + ((7 * 3) / 1))"}, {"input": "7 3 3 1\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 3, 1\n(3) + (21) = 24, left: (3 + (7 * 3)) = 24, 1\n(24) / (1) = 24, left: ((3 + (7 * 3)) / 1) = 24\nreach 24! expression: ((3 + (7 * 3)) / 1)"}, {"input": "7 3 3 1\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (3 / 1) = 3\n(3) + (21) = 24, left: ((3 / 1) + (7 * 3)) = 24\nreach 24! expression: ((3 / 1) + (7 * 3))"}, {"input": "7 3 3 1\n", "output": "(7) * (1) = 7, left: (7 * 1) = 7, 3, 3\n(3) * (7) = 21, left: (3 * (7 * 1)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 * (7 * 1))) = 24\nreach 24! expression: (3 + (3 * (7 * 1)))"}, {"input": "7 3 3 1\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 3, 1\n(3) / (1) = 3, left: (3 / 1) = 3, (7 * 3) = 21\n(21) + (3) = 24, left: ((7 * 3) + (3 / 1)) = 24\nreach 24! expression: ((7 * 3) + (3 / 1))"}, {"input": "7 3 3 1\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 7, 3\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, (3 / 1) = 3\nroll back, left: (3 / 1) = 3, 7, 3\n(7) + (3) = 10, left: (7 + 3) = 10, (3 / 1) = 3\n(3) + (10) = 13, left: ((3 / 1) + (7 + 3)) = 13\nroll back, left: (7 + 3) = 10, (3 / 1) = 3\nroll back, left: (3 / 1) = 3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (3 / 1) = 3\n(3) + (21) = 24, left: ((3 / 1) + (7 * 3)) = 24\nreach 24! expression: ((3 / 1) + (7 * 3))"}, {"input": "7 3 3 1\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 3, 1\n(3) + (4) = 7, left: (3 + (7 - 3)) = 7, 1\n(1) - (7) = -6, left: (1 - (3 + (7 - 3))) = -6\nroll back, left: (3 + (7 - 3)) = 7, 1\nroll back, left: (7 - 3) = 4, 3, 1\nroll back, left: 7 3 3 1\n(7) * (3) = 21, left: (7 * 3) = 21, 3, 1\n(21) / (1) = 21, left: ((7 * 3) / 1) = 21, 3\n(3) + (21) = 24, left: (3 + ((7 * 3) / 1)) = 24\nreach 24! expression: (3 + ((7 * 3) / 1))"}, {"input": "7 3 3 1\n", "output": "(7) * (1) = 7, left: (7 * 1) = 7, 3, 3\n(3) - (3) = 0, left: (3 - 3) = 0, (7 * 1) = 7\nroll back, left: (7 * 1) = 7, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (7 * 1) = 7\nroll back, left: (7 * 1) = 7, 3, 3\n(7) - (3) = 4, left: ((7 * 1) - 3) = 4, 3\nroll back, left: (7 * 1) = 7, 3, 3\n(3) * (7) = 21, left: (3 * (7 * 1)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 * (7 * 1))) = 24\nreach 24! expression: (3 + (3 * (7 * 1)))"}, {"input": "7 3 3 1\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 3, 1\nroll back, left: 7 3 3 1\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 3, 1\n(1) / (7/3) = 3/7, left: (1 / (7 / 3)) = 3/7, 3\nroll back, left: (7 / 3) = 7/3, 3, 1\nroll back, left: 7 3 3 1\n(7) * (3) = 21, left: (7 * 3) = 21, 3, 1\n(3) + (21) = 24, left: (3 + (7 * 3)) = 24, 1\n(24) / (1) = 24, left: ((3 + (7 * 3)) / 1) = 24\nreach 24! expression: ((3 + (7 * 3)) / 1)"}, {"input": "7 3 3 1\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 3, 1\n(3) / (1) = 3, left: (3 / 1) = 3, (7 * 3) = 21\n(21) / (3) = 7, left: ((7 * 3) / (3 / 1)) = 7\nroll back, left: (3 / 1) = 3, (7 * 3) = 21\n(3) / (21) = 1/7, left: ((3 / 1) / (7 * 3)) = 1/7\nroll back, left: (3 / 1) = 3, (7 * 3) = 21\n(21) + (3) = 24, left: ((7 * 3) + (3 / 1)) = 24\nreach 24! expression: ((7 * 3) + (3 / 1))"}, {"input": "7 3 3 1\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 3, 1\n(3) / (1) = 3, left: (3 / 1) = 3, (7 * 3) = 21\n(21) / (3) = 7, left: ((7 * 3) / (3 / 1)) = 7\nroll back, left: (3 / 1) = 3, (7 * 3) = 21\n(3) / (21) = 1/7, left: ((3 / 1) / (7 * 3)) = 1/7\nroll back, left: (3 / 1) = 3, (7 * 3) = 21\n(21) + (3) = 24, left: ((7 * 3) + (3 / 1)) = 24\nreach 24! expression: ((7 * 3) + (3 / 1))"}, {"input": "7 3 3 1\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 3, 1\n(3) / (1) = 3, left: (3 / 1) = 3, (7 * 3) = 21\n(21) / (3) = 7, left: ((7 * 3) / (3 / 1)) = 7\nroll back, left: (3 / 1) = 3, (7 * 3) = 21\n(3) / (21) = 1/7, left: ((3 / 1) / (7 * 3)) = 1/7\nroll back, left: (3 / 1) = 3, (7 * 3) = 21\n(21) + (3) = 24, left: ((7 * 3) + (3 / 1)) = 24\nreach 24! expression: ((7 * 3) + (3 / 1))"}, {"input": "7 3 3 1\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 3, 1\n(3) / (1) = 3, left: (3 / 1) = 3, (7 * 3) = 21\n(21) / (3) = 7, left: ((7 * 3) / (3 / 1)) = 7\nroll back, left: (3 / 1) = 3, (7 * 3) = 21\n(3) / (21) = 1/7, left: ((3 / 1) / (7 * 3)) = 1/7\nroll back, left: (3 / 1) = 3, (7 * 3) = 21\n(21) + (3) = 24, left: ((7 * 3) + (3 / 1)) = 24\nreach 24! expression: ((7 * 3) + (3 / 1))"}, {"input": "12 5 7 12\n", "output": "(5) * (12) = 60, left: (5 * 12) = 60, 12, 7\n(12) * (7) = 84, left: (12 * 7) = 84, (5 * 12) = 60\n(84) - (60) = 24, left: ((12 * 7) - (5 * 12)) = 24\nreach 24! expression: ((12 * 7) - (5 * 12))"}, {"input": "12 5 7 12\n", "output": "(7) * (12) = 84, left: (7 * 12) = 84, 12, 5\n(12) * (5) = 60, left: (12 * 5) = 60, (7 * 12) = 84\n(84) - (60) = 24, left: ((7 * 12) - (12 * 5)) = 24\nreach 24! expression: ((7 * 12) - (12 * 5))"}, {"input": "12 5 7 12\n", "output": "(12) * (5) = 60, left: (12 * 5) = 60, 7, 12\n(7) * (12) = 84, left: (7 * 12) = 84, (12 * 5) = 60\n(84) - (60) = 24, left: ((7 * 12) - (12 * 5)) = 24\nreach 24! expression: ((7 * 12) - (12 * 5))"}, {"input": "12 5 7 12\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 12, 12\nroll back, left: 12 5 7 12\n(7) / (12) = 7/12, left: (7 / 12) = 7/12, 12, 5\nroll back, left: 12 5 7 12\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, 12, 5\nroll back, left: 12 5 7 12\n(7) * (12) = 84, left: (7 * 12) = 84, 12, 5\n(12) * (5) = 60, left: (12 * 5) = 60, (7 * 12) = 84\n(84) - (60) = 24, left: ((7 * 12) - (12 * 5)) = 24\nreach 24! expression: ((7 * 12) - (12 * 5))"}, {"input": "9 13 2 11\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 9, 11\n(9) + (26) = 35, left: (9 + (13 * 2)) = 35, 11\n(35) - (11) = 24, left: ((9 + (13 * 2)) - 11) = 24\nreach 24! expression: ((9 + (13 * 2)) - 11)"}, {"input": "9 13 2 11\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 9, 11\n(26) - (11) = 15, left: ((13 * 2) - 11) = 15, 9\n(9) + (15) = 24, left: (9 + ((13 * 2) - 11)) = 24\nreach 24! expression: (9 + ((13 * 2) - 11))"}, {"input": "9 13 2 11\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (9 - 11) = -2\n(-2) + (26) = 24, left: ((9 - 11) + (13 * 2)) = 24\nreach 24! expression: ((9 - 11) + (13 * 2))"}, {"input": "9 13 2 11\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (11 - 9) = 2\n(26) - (2) = 24, left: ((13 * 2) - (11 - 9)) = 24\nreach 24! expression: ((13 * 2) - (11 - 9))"}, {"input": "9 13 2 11\n", "output": "(9) * (13) = 117, left: (9 * 13) = 117, 2, 11\nroll back, left: 9 13 2 11\n(13) - (9) = 4, left: (13 - 9) = 4, 2, 11\nroll back, left: 9 13 2 11\n(9) - (13) = -4, left: (9 - 13) = -4, 2, 11\nroll back, left: 9 13 2 11\n(11) - (9) = 2, left: (11 - 9) = 2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (11 - 9) = 2\n(26) - (2) = 24, left: ((13 * 2) - (11 - 9)) = 24\nreach 24! expression: ((13 * 2) - (11 - 9))"}, {"input": "9 13 2 11\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 9, 2\nroll back, left: 9 13 2 11\n(11) - (2) = 9, left: (11 - 2) = 9, 9, 13\nroll back, left: 9 13 2 11\n(9) / (2) = 9/2, left: (9 / 2) = 9/2, 13, 11\nroll back, left: 9 13 2 11\n(9) - (11) = -2, left: (9 - 11) = -2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (9 - 11) = -2\n(-2) + (26) = 24, left: ((9 - 11) + (13 * 2)) = 24\nreach 24! expression: ((9 - 11) + (13 * 2))"}, {"input": "9 13 2 11\n", "output": "(2) / (9) = 2/9, left: (2 / 9) = 2/9, 13, 11\nroll back, left: 9 13 2 11\n(2) - (9) = -7, left: (2 - 9) = -7, 13, 11\n(11) + (-7) = 4, left: (11 + (2 - 9)) = 4, 13\nroll back, left: (2 - 9) = -7, 13, 11\nroll back, left: 9 13 2 11\n(13) * (2) = 26, left: (13 * 2) = 26, 9, 11\n(9) + (26) = 35, left: (9 + (13 * 2)) = 35, 11\n(35) - (11) = 24, left: ((9 + (13 * 2)) - 11) = 24\nreach 24! expression: ((9 + (13 * 2)) - 11)"}, {"input": "2 8 1 13\n", "output": "(8) + (13) = 21, left: (8 + 13) = 21, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (8 + 13) = 21\n(21) + (3) = 24, left: ((8 + 13) + (2 + 1)) = 24\nreach 24! expression: ((8 + 13) + (2 + 1))"}, {"input": "2 8 1 13\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 8, 13\n(13) + (3) = 16, left: (13 + (2 + 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (13 + (2 + 1))) = 24\nreach 24! expression: (8 + (13 + (2 + 1)))"}, {"input": "2 8 1 13\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 8, 13\n(8) + (13) = 21, left: (8 + 13) = 21, (2 + 1) = 3\n(3) + (21) = 24, left: ((2 + 1) + (8 + 13)) = 24\nreach 24! expression: ((2 + 1) + (8 + 13))"}, {"input": "2 8 1 13\n", "output": "(2) + (13) = 15, left: (2 + 13) = 15, 8, 1\n(8) + (1) = 9, left: (8 + 1) = 9, (2 + 13) = 15\n(15) + (9) = 24, left: ((2 + 13) + (8 + 1)) = 24\nreach 24! expression: ((2 + 13) + (8 + 1))"}, {"input": "2 8 1 13\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 2, 1\n(2) * (5) = 10, left: (2 * (13 - 8)) = 10, 1\n(10) - (1) = 9, left: ((2 * (13 - 8)) - 1) = 9\nroll back, left: (2 * (13 - 8)) = 10, 1\nroll back, left: (13 - 8) = 5, 2, 1\nroll back, left: 2 8 1 13\n(8) + (13) = 21, left: (8 + 13) = 21, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (8 + 13) = 21\n(21) + (3) = 24, left: ((8 + 13) + (2 + 1)) = 24\nreach 24! expression: ((8 + 13) + (2 + 1))"}, {"input": "2 8 1 13\n", "output": "(13) / (2) = 13/2, left: (13 / 2) = 13/2, 8, 1\nroll back, left: 2 8 1 13\n(13) - (2) = 11, left: (13 - 2) = 11, 8, 1\n(8) * (1) = 8, left: (8 * 1) = 8, (13 - 2) = 11\nroll back, left: (13 - 2) = 11, 8, 1\nroll back, left: 2 8 1 13\n(2) + (13) = 15, left: (2 + 13) = 15, 8, 1\n(8) + (1) = 9, left: (8 + 1) = 9, (2 + 13) = 15\n(15) + (9) = 24, left: ((2 + 13) + (8 + 1)) = 24\nreach 24! expression: ((2 + 13) + (8 + 1))"}, {"input": "2 8 1 13\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 8, 13\nroll back, left: 2 8 1 13\n(2) / (1) = 2, left: (2 / 1) = 2, 8, 13\n(8) * (13) = 104, left: (8 * 13) = 104, (2 / 1) = 2\nroll back, left: (2 / 1) = 2, 8, 13\nroll back, left: 2 8 1 13\n(2) + (1) = 3, left: (2 + 1) = 3, 8, 13\n(8) + (13) = 21, left: (8 + 13) = 21, (2 + 1) = 3\n(3) + (21) = 24, left: ((2 + 1) + (8 + 13)) = 24\nreach 24! expression: ((2 + 1) + (8 + 13))"}, {"input": "2 8 1 13\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 8, 13\nroll back, left: 2 8 1 13\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 8, 13\nroll back, left: 2 8 1 13\n(1) - (2) = -1, left: (1 - 2) = -1, 8, 13\nroll back, left: 2 8 1 13\n(2) + (1) = 3, left: (2 + 1) = 3, 8, 13\n(13) + (3) = 16, left: (13 + (2 + 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (13 + (2 + 1))) = 24\nreach 24! expression: (8 + (13 + (2 + 1)))"}, {"input": "11 1 5 12\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 5, 12\n(12) * (10) = 120, left: (12 * (11 - 1)) = 120, 5\n(120) / (5) = 24, left: ((12 * (11 - 1)) / 5) = 24\nreach 24! expression: ((12 * (11 - 1)) / 5)"}, {"input": "11 1 5 12\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 5, 12\n(10) / (5) = 2, left: ((11 - 1) / 5) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 1) / 5)) = 24\nreach 24! expression: (12 * ((11 - 1) / 5))"}, {"input": "11 1 5 12\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 5, 12\n(12) / (5) = 12/5, left: (12 / 5) = 12/5, (11 - 1) = 10\n(10) * (12/5) = 24, left: ((11 - 1) * (12 / 5)) = 24\nreach 24! expression: ((11 - 1) * (12 / 5))"}, {"input": "11 1 5 12\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 5, 12\n(5) / (10) = 1/2, left: (5 / (11 - 1)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (5 / (11 - 1))) = 24\nreach 24! expression: (12 / (5 / (11 - 1)))"}, {"input": "11 1 5 12\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 11, 5\nroll back, left: 11 1 5 12\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, 11, 5\nroll back, left: 11 1 5 12\n(5) / (11) = 5/11, left: (5 / 11) = 5/11, 1, 12\nroll back, left: 11 1 5 12\n(11) - (1) = 10, left: (11 - 1) = 10, 5, 12\n(12) * (10) = 120, left: (12 * (11 - 1)) = 120, 5\n(120) / (5) = 24, left: ((12 * (11 - 1)) / 5) = 24\nreach 24! expression: ((12 * (11 - 1)) / 5)"}, {"input": "1 4 5 11\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (1 * 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (1 * 5))) = 24\nreach 24! expression: (4 * (11 - (1 * 5)))"}, {"input": "1 4 5 11\n", "output": "(1) * (11) = 11, left: (1 * 11) = 11, 4, 5\n(11) - (5) = 6, left: ((1 * 11) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 * 11) - 5)) = 24\nreach 24! expression: (4 * ((1 * 11) - 5))"}, {"input": "1 4 5 11\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (5 / 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (5 / 1))) = 24\nreach 24! expression: (4 * (11 - (5 / 1)))"}, {"input": "1 4 5 11\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (1 * 4) = 4\n(4) * (6) = 24, left: ((1 * 4) * (11 - 5)) = 24\nreach 24! expression: ((1 * 4) * (11 - 5))"}, {"input": "1 4 5 11\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 4, 5\nroll back, left: 1 4 5 11\n(1) * (11) = 11, left: (1 * 11) = 11, 4, 5\n(4) + (5) = 9, left: (4 + 5) = 9, (1 * 11) = 11\nroll back, left: (1 * 11) = 11, 4, 5\n(4) - (5) = -1, left: (4 - 5) = -1, (1 * 11) = 11\nroll back, left: (1 * 11) = 11, 4, 5\n(11) - (5) = 6, left: ((1 * 11) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 * 11) - 5)) = 24\nreach 24! expression: (4 * ((1 * 11) - 5))"}, {"input": "1 4 5 11\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 4, 11\nroll back, left: 1 4 5 11\n(1) * (5) = 5, left: (1 * 5) = 5, 4, 11\n(5) / (11) = 5/11, left: ((1 * 5) / 11) = 5/11, 4\n(4) + (5/11) = 49/11, left: (4 + ((1 * 5) / 11)) = 49/11\nroll back, left: ((1 * 5) / 11) = 5/11, 4\nroll back, left: (1 * 5) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (1 * 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (1 * 5))) = 24\nreach 24! expression: (4 * (11 - (1 * 5)))"}, {"input": "1 4 5 11\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 4, 11\n(4) * (6) = 24, left: (4 * (1 + 5)) = 24, 11\nroll back, left: (1 + 5) = 6, 4, 11\n(4) / (11) = 4/11, left: (4 / 11) = 4/11, (1 + 5) = 6\nroll back, left: (1 + 5) = 6, 4, 11\nroll back, left: 1 4 5 11\n(1) * (5) = 5, left: (1 * 5) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (1 * 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (1 * 5))) = 24\nreach 24! expression: (4 * (11 - (1 * 5)))"}, {"input": "1 4 5 11\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 4, 11\n(11) + (5) = 16, left: (11 + (5 / 1)) = 16, 4\n(16) / (4) = 4, left: ((11 + (5 / 1)) / 4) = 4\nroll back, left: (11 + (5 / 1)) = 16, 4\nroll back, left: (5 / 1) = 5, 4, 11\n(11) / (5) = 11/5, left: (11 / (5 / 1)) = 11/5, 4\nroll back, left: (5 / 1) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (5 / 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (5 / 1))) = 24\nreach 24! expression: (4 * (11 - (5 / 1)))"}, {"input": "1 4 5 11\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (1 * 4) = 4\n(4) / (6) = 2/3, left: ((1 * 4) / (11 - 5)) = 2/3\nroll back, left: (11 - 5) = 6, (1 * 4) = 4\n(6) - (4) = 2, left: ((11 - 5) - (1 * 4)) = 2\nroll back, left: (11 - 5) = 6, (1 * 4) = 4\n(4) * (6) = 24, left: ((1 * 4) * (11 - 5)) = 24\nreach 24! expression: ((1 * 4) * (11 - 5))"}, {"input": "1 4 5 11\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (1 * 4) = 4\n(4) / (6) = 2/3, left: ((1 * 4) / (11 - 5)) = 2/3\nroll back, left: (11 - 5) = 6, (1 * 4) = 4\n(6) - (4) = 2, left: ((11 - 5) - (1 * 4)) = 2\nroll back, left: (11 - 5) = 6, (1 * 4) = 4\n(4) * (6) = 24, left: ((1 * 4) * (11 - 5)) = 24\nreach 24! expression: ((1 * 4) * (11 - 5))"}, {"input": "1 4 5 11\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (1 * 4) = 4\n(4) / (6) = 2/3, left: ((1 * 4) / (11 - 5)) = 2/3\nroll back, left: (11 - 5) = 6, (1 * 4) = 4\n(6) - (4) = 2, left: ((11 - 5) - (1 * 4)) = 2\nroll back, left: (11 - 5) = 6, (1 * 4) = 4\n(4) * (6) = 24, left: ((1 * 4) * (11 - 5)) = 24\nreach 24! expression: ((1 * 4) * (11 - 5))"}, {"input": "1 4 5 11\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (1 * 4) = 4\n(4) / (6) = 2/3, left: ((1 * 4) / (11 - 5)) = 2/3\nroll back, left: (11 - 5) = 6, (1 * 4) = 4\n(6) - (4) = 2, left: ((11 - 5) - (1 * 4)) = 2\nroll back, left: (11 - 5) = 6, (1 * 4) = 4\n(4) * (6) = 24, left: ((1 * 4) * (11 - 5)) = 24\nreach 24! expression: ((1 * 4) * (11 - 5))"}, {"input": "8 9 6 9\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (8 * 9) = 72\n(72) / (3) = 24, left: ((8 * 9) / (9 - 6)) = 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "8 9 6 9\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 6, 9\n(9) - (6) = 3, left: (9 - 6) = 3, (8 * 9) = 72\n(72) / (3) = 24, left: ((8 * 9) / (9 - 6)) = 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "8 9 6 9\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 8, 6\n(8) * (18) = 144, left: (8 * (9 + 9)) = 144, 6\n(144) / (6) = 24, left: ((8 * (9 + 9)) / 6) = 24\nreach 24! expression: ((8 * (9 + 9)) / 6)"}, {"input": "8 9 6 9\n", "output": "(8) - (9) = -1, left: (8 - 9) = -1, 9, 6\nroll back, left: 8 9 6 9\n(8) + (9) = 17, left: (8 + 9) = 17, 9, 6\nroll back, left: 8 9 6 9\n(9) / (8) = 9/8, left: (9 / 8) = 9/8, 9, 6\nroll back, left: 8 9 6 9\n(8) * (9) = 72, left: (8 * 9) = 72, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (8 * 9) = 72\n(72) / (3) = 24, left: ((8 * 9) / (9 - 6)) = 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "8 9 6 9\n", "output": "(9) / (8) = 9/8, left: (9 / 8) = 9/8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (9 / 8) = 9/8\nroll back, left: (9 / 8) = 9/8, 9, 6\nroll back, left: 8 9 6 9\n(8) / (9) = 8/9, left: (8 / 9) = 8/9, 9, 6\nroll back, left: 8 9 6 9\n(8) * (9) = 72, left: (8 * 9) = 72, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (8 * 9) = 72\n(72) / (3) = 24, left: ((8 * 9) / (9 - 6)) = 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "8 9 6 9\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 6, 9\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, (9 - 8) = 1\nroll back, left: (9 - 8) = 1, 6, 9\n(6) * (9) = 54, left: (6 * 9) = 54, (9 - 8) = 1\nroll back, left: (9 - 8) = 1, 6, 9\nroll back, left: 8 9 6 9\n(8) * (9) = 72, left: (8 * 9) = 72, 6, 9\n(9) - (6) = 3, left: (9 - 6) = 3, (8 * 9) = 72\n(72) / (3) = 24, left: ((8 * 9) / (9 - 6)) = 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "8 9 6 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (9 / 9) = 1\nroll back, left: (9 / 9) = 1, 8, 6\nroll back, left: 8 9 6 9\n(9) + (9) = 18, left: (9 + 9) = 18, 8, 6\n(8) - (18) = -10, left: (8 - (9 + 9)) = -10, 6\nroll back, left: (9 + 9) = 18, 8, 6\n(8) * (18) = 144, left: (8 * (9 + 9)) = 144, 6\n(144) / (6) = 24, left: ((8 * (9 + 9)) / 6) = 24\nreach 24! expression: ((8 * (9 + 9)) / 6)"}, {"input": "8 9 6 9\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 6, 9\n(9) * (1) = 9, left: (9 * (9 - 8)) = 9, 6\nroll back, left: (9 - 8) = 1, 6, 9\nroll back, left: 8 9 6 9\n(8) / (9) = 8/9, left: (8 / 9) = 8/9, 6, 9\nroll back, left: 8 9 6 9\n(8) * (9) = 72, left: (8 * 9) = 72, 6, 9\n(9) - (6) = 3, left: (9 - 6) = 3, (8 * 9) = 72\n(72) / (3) = 24, left: ((8 * 9) / (9 - 6)) = 24\nreach 24! expression: ((8 * 9) / (9 - 6))"}, {"input": "13 3 2 11\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (13 + 11) = 24\n(24) / (1) = 24, left: ((13 + 11) / (3 - 2)) = 24\nreach 24! expression: ((13 + 11) / (3 - 2))"}, {"input": "13 3 2 11\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 13, 11\n(11) / (-1) = -11, left: (11 / (2 - 3)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 / (2 - 3))) = 24\nreach 24! expression: (13 - (11 / (2 - 3)))"}, {"input": "13 3 2 11\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (13 + 11) = 24\n(24) * (1) = 24, left: ((13 + 11) * (3 - 2)) = 24\nreach 24! expression: ((13 + 11) * (3 - 2))"}, {"input": "13 3 2 11\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 13, 11\n(13) / (1) = 13, left: (13 / (3 - 2)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 / (3 - 2))) = 24\nreach 24! expression: (11 + (13 / (3 - 2)))"}, {"input": "13 3 2 11\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 13, 2\nroll back, left: 13 3 2 11\n(3) + (11) = 14, left: (3 + 11) = 14, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (3 + 11) = 14\nroll back, left: (3 + 11) = 14, 13, 2\nroll back, left: 13 3 2 11\n(13) + (11) = 24, left: (13 + 11) = 24, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (13 + 11) = 24\n(24) * (1) = 24, left: ((13 + 11) * (3 - 2)) = 24\nreach 24! expression: ((13 + 11) * (3 - 2))"}, {"input": "13 3 2 11\n", "output": "(3) + (2) = 5, left: (3 + 2) = 5, 13, 11\nroll back, left: 13 3 2 11\n(3) * (2) = 6, left: (3 * 2) = 6, 13, 11\n(6) - (13) = -7, left: ((3 * 2) - 13) = -7, 11\nroll back, left: (3 * 2) = 6, 13, 11\nroll back, left: 13 3 2 11\n(3) - (2) = 1, left: (3 - 2) = 1, 13, 11\n(13) / (1) = 13, left: (13 / (3 - 2)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 / (3 - 2))) = 24\nreach 24! expression: (11 + (13 / (3 - 2)))"}, {"input": "13 3 2 11\n", "output": "(13) * (11) = 143, left: (13 * 11) = 143, 3, 2\nroll back, left: 13 3 2 11\n(13) - (11) = 2, left: (13 - 11) = 2, 3, 2\n(3) + (2) = 5, left: (3 + (13 - 11)) = 5, 2\nroll back, left: (13 - 11) = 2, 3, 2\nroll back, left: 13 3 2 11\n(13) + (11) = 24, left: (13 + 11) = 24, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (13 + 11) = 24\n(24) / (1) = 24, left: ((13 + 11) / (3 - 2)) = 24\nreach 24! expression: ((13 + 11) / (3 - 2))"}, {"input": "3 6 1 13\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 3, 13\n(13) + (-5) = 8, left: (13 + (1 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 + (1 - 6))) = 24\nreach 24! expression: (3 * (13 + (1 - 6)))"}, {"input": "3 6 1 13\n", "output": "(6) - (13) = -7, left: (6 - 13) = -7, 3, 1\n(1) - (-7) = 8, left: (1 - (6 - 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 - (6 - 13))) = 24\nreach 24! expression: (3 * (1 - (6 - 13)))"}, {"input": "3 6 1 13\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 3, 1\n(1) + (7) = 8, left: (1 + (13 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (13 - 6))) = 24\nreach 24! expression: (3 * (1 + (13 - 6)))"}, {"input": "3 6 1 13\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 3, 13\n(13) - (5) = 8, left: (13 - (6 - 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (6 - 1))) = 24\nreach 24! expression: (3 * (13 - (6 - 1)))"}, {"input": "3 6 1 13\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (6 / 3) = 2\n(2) * (12) = 24, left: ((6 / 3) * (13 - 1)) = 24\nreach 24! expression: ((6 / 3) * (13 - 1))"}, {"input": "3 6 1 13\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 3, 1\n(3) / (1) = 3, left: (3 / 1) = 3, (6 + 13) = 19\nroll back, left: (6 + 13) = 19, 3, 1\nroll back, left: 3 6 1 13\n(6) * (13) = 78, left: (6 * 13) = 78, 3, 1\nroll back, left: 3 6 1 13\n(13) - (6) = 7, left: (13 - 6) = 7, 3, 1\n(1) + (7) = 8, left: (1 + (13 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (13 - 6))) = 24\nreach 24! expression: (3 * (1 + (13 - 6)))"}, {"input": "3 6 1 13\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 3, 13\n(5) - (13) = -8, left: ((6 - 1) - 13) = -8, 3\nroll back, left: (6 - 1) = 5, 3, 13\n(13) * (5) = 65, left: (13 * (6 - 1)) = 65, 3\n(3) - (65) = -62, left: (3 - (13 * (6 - 1))) = -62\nroll back, left: (13 * (6 - 1)) = 65, 3\nroll back, left: (6 - 1) = 5, 3, 13\n(13) - (5) = 8, left: (13 - (6 - 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (6 - 1))) = 24\nreach 24! expression: (3 * (13 - (6 - 1)))"}, {"input": "3 6 1 13\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 3, 13\n(3) + (-5) = -2, left: (3 + (1 - 6)) = -2, 13\n(13) / (-2) = -13/2, left: (13 / (3 + (1 - 6))) = -13/2\nroll back, left: (3 + (1 - 6)) = -2, 13\nroll back, left: (1 - 6) = -5, 3, 13\n(3) / (-5) = -3/5, left: (3 / (1 - 6)) = -3/5, 13\nroll back, left: (1 - 6) = -5, 3, 13\n(13) + (-5) = 8, left: (13 + (1 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 + (1 - 6))) = 24\nreach 24! expression: (3 * (13 + (1 - 6)))"}, {"input": "3 6 1 13\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 6, 13\nroll back, left: 3 6 1 13\n(3) + (1) = 4, left: (3 + 1) = 4, 6, 13\nroll back, left: 3 6 1 13\n(3) / (1) = 3, left: (3 / 1) = 3, 6, 13\nroll back, left: 3 6 1 13\n(6) - (13) = -7, left: (6 - 13) = -7, 3, 1\n(1) - (-7) = 8, left: (1 - (6 - 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 - (6 - 13))) = 24\nreach 24! expression: (3 * (1 - (6 - 13)))"}, {"input": "3 6 1 13\n", "output": "(3) * (13) = 39, left: (3 * 13) = 39, 6, 1\nroll back, left: 3 6 1 13\n(3) - (13) = -10, left: (3 - 13) = -10, 6, 1\nroll back, left: 3 6 1 13\n(3) * (6) = 18, left: (3 * 6) = 18, 1, 13\nroll back, left: 3 6 1 13\n(6) / (3) = 2, left: (6 / 3) = 2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (6 / 3) = 2\n(2) * (12) = 24, left: ((6 / 3) * (13 - 1)) = 24\nreach 24! expression: ((6 / 3) * (13 - 1))"}, {"input": "7 8 6 4\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (7 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (7 - 4))) = 24\nreach 24! expression: (8 * (6 - (7 - 4)))"}, {"input": "7 8 6 4\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 8, 6\n(6) + (-3) = 3, left: (6 + (4 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 + (4 - 7))) = 24\nreach 24! expression: (8 * (6 + (4 - 7)))"}, {"input": "7 8 6 4\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 8, 4\n(4) + (-1) = 3, left: (4 + (6 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 + (6 - 7))) = 24\nreach 24! expression: (8 * (4 + (6 - 7)))"}, {"input": "7 8 6 4\n", "output": "(7) / (6) = 7/6, left: (7 / 6) = 7/6, 8, 4\n(4) - (8) = -4, left: (4 - 8) = -4, (7 / 6) = 7/6\nroll back, left: (7 / 6) = 7/6, 8, 4\n(7/6) / (8) = 7/48, left: ((7 / 6) / 8) = 7/48, 4\nroll back, left: (7 / 6) = 7/6, 8, 4\nroll back, left: 7 8 6 4\n(6) - (7) = -1, left: (6 - 7) = -1, 8, 4\n(4) + (-1) = 3, left: (4 + (6 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 + (6 - 7))) = 24\nreach 24! expression: (8 * (4 + (6 - 7)))"}, {"input": "7 8 6 4\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 7, 4\nroll back, left: 7 8 6 4\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, 7, 4\n(7) - (4) = 3, left: (7 - 4) = 3, (8 / 6) = 4/3\nroll back, left: (8 / 6) = 4/3, 7, 4\nroll back, left: 7 8 6 4\n(7) - (4) = 3, left: (7 - 4) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (7 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (7 - 4))) = 24\nreach 24! expression: (8 * (6 - (7 - 4)))"}, {"input": "7 8 6 4\n", "output": "(7) + (4) = 11, left: (7 + 4) = 11, 8, 6\nroll back, left: 7 8 6 4\n(7) * (4) = 28, left: (7 * 4) = 28, 8, 6\n(6) + (28) = 34, left: (6 + (7 * 4)) = 34, 8\nroll back, left: (7 * 4) = 28, 8, 6\nroll back, left: 7 8 6 4\n(7) - (4) = 3, left: (7 - 4) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (7 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (7 - 4))) = 24\nreach 24! expression: (8 * (6 - (7 - 4)))"}, {"input": "7 8 6 4\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (4 - 7) = -3\nroll back, left: (4 - 7) = -3, 8, 6\n(-3) / (6) = -1/2, left: ((4 - 7) / 6) = -1/2, 8\nroll back, left: (4 - 7) = -3, 8, 6\n(6) - (-3) = 9, left: (6 - (4 - 7)) = 9, 8\nroll back, left: (4 - 7) = -3, 8, 6\n(6) + (-3) = 3, left: (6 + (4 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 + (4 - 7))) = 24\nreach 24! expression: (8 * (6 + (4 - 7)))"}, {"input": "7 8 6 4\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 8, 6\n(28) - (8) = 20, left: ((7 * 4) - 8) = 20, 6\nroll back, left: (7 * 4) = 28, 8, 6\n(28) / (8) = 7/2, left: ((7 * 4) / 8) = 7/2, 6\nroll back, left: (7 * 4) = 28, 8, 6\nroll back, left: 7 8 6 4\n(7) - (4) = 3, left: (7 - 4) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (7 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (7 - 4))) = 24\nreach 24! expression: (8 * (6 - (7 - 4)))"}, {"input": "13 3 11 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (3 - 3) = 0\n(24) - (0) = 24, left: ((13 + 11) - (3 - 3)) = 24\nreach 24! expression: ((13 + 11) - (3 - 3))"}, {"input": "13 3 11 3\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 13, 3\n(13) + (14) = 27, left: (13 + (3 + 11)) = 27, 3\n(27) - (3) = 24, left: ((13 + (3 + 11)) - 3) = 24\nreach 24! expression: ((13 + (3 + 11)) - 3)"}, {"input": "13 3 11 3\n", "output": "(3) / (11) = 3/11, left: (3 / 11) = 3/11, 13, 3\n(3) / (3/11) = 11, left: (3 / (3 / 11)) = 11, 13\n(13) + (11) = 24, left: (13 + (3 / (3 / 11))) = 24\nreach 24! expression: (13 + (3 / (3 / 11)))"}, {"input": "13 3 11 3\n", "output": "(13) + (3) = 16, left: (13 + 3) = 16, 11, 3\n(11) + (16) = 27, left: (11 + (13 + 3)) = 27, 3\n(27) - (3) = 24, left: ((11 + (13 + 3)) - 3) = 24\nreach 24! expression: ((11 + (13 + 3)) - 3)"}, {"input": "13 3 11 3\n", "output": "(3) / (13) = 3/13, left: (3 / 13) = 3/13, 3, 11\n(3) / (3/13) = 13, left: (3 / (3 / 13)) = 13, 11\n(11) + (13) = 24, left: (11 + (3 / (3 / 13))) = 24\nreach 24! expression: (11 + (3 / (3 / 13)))"}, {"input": "13 3 11 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (3 - 3) = 0\n(24) - (0) = 24, left: ((13 + 11) - (3 - 3)) = 24\nreach 24! expression: ((13 + 11) - (3 - 3))"}, {"input": "13 3 11 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (3 - 3) = 0\n(24) - (0) = 24, left: ((13 + 11) - (3 - 3)) = 24\nreach 24! expression: ((13 + 11) - (3 - 3))"}, {"input": "13 3 11 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (3 - 3) = 0\n(24) - (0) = 24, left: ((13 + 11) - (3 - 3)) = 24\nreach 24! expression: ((13 + 11) - (3 - 3))"}, {"input": "13 3 11 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (3 - 3) = 0\n(24) - (0) = 24, left: ((13 + 11) - (3 - 3)) = 24\nreach 24! expression: ((13 + 11) - (3 - 3))"}, {"input": "11 2 7 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (7 / 7)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (7 / 7))) = 24\nreach 24! expression: (2 * (11 + (7 / 7)))"}, {"input": "11 2 7 7\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (7 - 2)) = 35, 11\n(35) - (11) = 24, left: ((7 * (7 - 2)) - 11) = 24\nreach 24! expression: ((7 * (7 - 2)) - 11)"}, {"input": "11 2 7 7\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 11, 7\n(7) - (11) = -4, left: (7 - 11) = -4, (2 + 7) = 9\nroll back, left: (2 + 7) = 9, 11, 7\n(11) - (9) = 2, left: (11 - (2 + 7)) = 2, 7\nroll back, left: (2 + 7) = 9, 11, 7\nroll back, left: 11 2 7 7\n(7) - (2) = 5, left: (7 - 2) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (7 - 2)) = 35, 11\n(35) - (11) = 24, left: ((7 * (7 - 2)) - 11) = 24\nreach 24! expression: ((7 * (7 - 2)) - 11)"}, {"input": "11 2 7 7\n", "output": "(2) / (7) = 2/7, left: (2 / 7) = 2/7, 11, 7\nroll back, left: 11 2 7 7\n(2) - (7) = -5, left: (2 - 7) = -5, 11, 7\n(11) + (7) = 18, left: (11 + 7) = 18, (2 - 7) = -5\nroll back, left: (2 - 7) = -5, 11, 7\nroll back, left: 11 2 7 7\n(7) - (2) = 5, left: (7 - 2) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (7 - 2)) = 35, 11\n(35) - (11) = 24, left: ((7 * (7 - 2)) - 11) = 24\nreach 24! expression: ((7 * (7 - 2)) - 11)"}, {"input": "11 2 7 7\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 2, 7\nroll back, left: 11 2 7 7\n(11) + (7) = 18, left: (11 + 7) = 18, 2, 7\nroll back, left: 11 2 7 7\n(7) - (11) = -4, left: (7 - 11) = -4, 2, 7\nroll back, left: 11 2 7 7\n(7) - (2) = 5, left: (7 - 2) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (7 - 2)) = 35, 11\n(35) - (11) = 24, left: ((7 * (7 - 2)) - 11) = 24\nreach 24! expression: ((7 * (7 - 2)) - 11)"}, {"input": "11 2 7 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 11, 2\n(14) - (11) = 3, left: ((7 + 7) - 11) = 3, 2\nroll back, left: (7 + 7) = 14, 11, 2\n(2) / (11) = 2/11, left: (2 / 11) = 2/11, (7 + 7) = 14\nroll back, left: (7 + 7) = 14, 11, 2\nroll back, left: 11 2 7 7\n(7) / (7) = 1, left: (7 / 7) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (7 / 7)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (7 / 7))) = 24\nreach 24! expression: (2 * (11 + (7 / 7)))"}, {"input": "9 13 8 1\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 9, 8\n(12) - (9) = 3, left: ((13 - 1) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 1) - 9)) = 24\nreach 24! expression: (8 * ((13 - 1) - 9))"}, {"input": "9 13 8 1\n", "output": "(9) + (1) = 10, left: (9 + 1) = 10, 13, 8\n(13) - (10) = 3, left: (13 - (9 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (9 + 1))) = 24\nreach 24! expression: (8 * (13 - (9 + 1)))"}, {"input": "9 13 8 1\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 9, 13\nroll back, left: 9 13 8 1\n(1) - (13) = -12, left: (1 - 13) = -12, 9, 8\n(-12) - (9) = -21, left: ((1 - 13) - 9) = -21, 8\nroll back, left: (1 - 13) = -12, 9, 8\nroll back, left: 9 13 8 1\n(13) - (1) = 12, left: (13 - 1) = 12, 9, 8\n(12) - (9) = 3, left: ((13 - 1) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 1) - 9)) = 24\nreach 24! expression: (8 * ((13 - 1) - 9))"}, {"input": "9 13 8 1\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 9, 1\nroll back, left: 9 13 8 1\n(1) - (9) = -8, left: (1 - 9) = -8, 13, 8\n(8) - (-8) = 16, left: (8 - (1 - 9)) = 16, 13\nroll back, left: (1 - 9) = -8, 13, 8\nroll back, left: 9 13 8 1\n(9) + (1) = 10, left: (9 + 1) = 10, 13, 8\n(13) - (10) = 3, left: (13 - (9 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (9 + 1))) = 24\nreach 24! expression: (8 * (13 - (9 + 1)))"}, {"input": "9 13 8 1\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 9, 1\nroll back, left: 9 13 8 1\n(1) - (9) = -8, left: (1 - 9) = -8, 13, 8\n(13) + (-8) = 5, left: (13 + (1 - 9)) = 5, 8\nroll back, left: (1 - 9) = -8, 13, 8\nroll back, left: 9 13 8 1\n(9) + (1) = 10, left: (9 + 1) = 10, 13, 8\n(13) - (10) = 3, left: (13 - (9 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (9 + 1))) = 24\nreach 24! expression: (8 * (13 - (9 + 1)))"}, {"input": "9 13 8 1\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 13, 8\n(13) / (8) = 13/8, left: (13 / (9 - 1)) = 13/8, 8\nroll back, left: (9 - 1) = 8, 13, 8\nroll back, left: 9 13 8 1\n(9) / (1) = 9, left: (9 / 1) = 9, 13, 8\nroll back, left: 9 13 8 1\n(9) + (1) = 10, left: (9 + 1) = 10, 13, 8\n(13) - (10) = 3, left: (13 - (9 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (9 + 1))) = 24\nreach 24! expression: (8 * (13 - (9 + 1)))"}, {"input": "13 4 6 3\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (4 / 6) = 2/3\n(16) / (2/3) = 24, left: ((13 + 3) / (4 / 6)) = 24\nreach 24! expression: ((13 + 3) / (4 / 6))"}, {"input": "13 4 6 3\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (6 / 4) = 3/2\n(3/2) * (16) = 24, left: ((6 / 4) * (13 + 3)) = 24\nreach 24! expression: ((6 / 4) * (13 + 3))"}, {"input": "13 4 6 3\n", "output": "(13) / (4) = 13/4, left: (13 / 4) = 13/4, 6, 3\n(13/4) - (3) = 1/4, left: ((13 / 4) - 3) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((13 / 4) - 3)) = 24\nreach 24! expression: (6 / ((13 / 4) - 3))"}, {"input": "13 4 6 3\n", "output": "(13) + (3) = 16, left: (13 + 3) = 16, 4, 6\n(6) * (16) = 96, left: (6 * (13 + 3)) = 96, 4\n(96) / (4) = 24, left: ((6 * (13 + 3)) / 4) = 24\nreach 24! expression: ((6 * (13 + 3)) / 4)"}, {"input": "13 4 6 3\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 13, 4\nroll back, left: 13 4 6 3\n(6) + (3) = 9, left: (6 + 3) = 9, 13, 4\n(9) - (13) = -4, left: ((6 + 3) - 13) = -4, 4\nroll back, left: (6 + 3) = 9, 13, 4\nroll back, left: 13 4 6 3\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (6 / 4) = 3/2\n(3/2) * (16) = 24, left: ((6 / 4) * (13 + 3)) = 24\nreach 24! expression: ((6 / 4) * (13 + 3))"}, {"input": "13 4 6 3\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 13, 4\n(13) + (18) = 31, left: (13 + (6 * 3)) = 31, 4\n(31) - (4) = 27, left: ((13 + (6 * 3)) - 4) = 27\nroll back, left: (13 + (6 * 3)) = 31, 4\nroll back, left: (6 * 3) = 18, 13, 4\nroll back, left: 13 4 6 3\n(13) + (3) = 16, left: (13 + 3) = 16, 4, 6\n(6) * (16) = 96, left: (6 * (13 + 3)) = 96, 4\n(96) / (4) = 24, left: ((6 * (13 + 3)) / 4) = 24\nreach 24! expression: ((6 * (13 + 3)) / 4)"}, {"input": "13 4 6 3\n", "output": "(13) - (3) = 10, left: (13 - 3) = 10, 4, 6\nroll back, left: 13 4 6 3\n(13) / (3) = 13/3, left: (13 / 3) = 13/3, 4, 6\n(13/3) / (6) = 13/18, left: ((13 / 3) / 6) = 13/18, 4\nroll back, left: (13 / 3) = 13/3, 4, 6\nroll back, left: 13 4 6 3\n(13) + (3) = 16, left: (13 + 3) = 16, 4, 6\n(6) * (16) = 96, left: (6 * (13 + 3)) = 96, 4\n(96) / (4) = 24, left: ((6 * (13 + 3)) / 4) = 24\nreach 24! expression: ((6 * (13 + 3)) / 4)"}, {"input": "13 4 6 3\n", "output": "(6) / (13) = 6/13, left: (6 / 13) = 6/13, 4, 3\nroll back, left: 13 4 6 3\n(13) / (6) = 13/6, left: (13 / 6) = 13/6, 4, 3\nroll back, left: 13 4 6 3\n(13) - (4) = 9, left: (13 - 4) = 9, 6, 3\nroll back, left: 13 4 6 3\n(13) / (4) = 13/4, left: (13 / 4) = 13/4, 6, 3\n(13/4) - (3) = 1/4, left: ((13 / 4) - 3) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((13 / 4) - 3)) = 24\nreach 24! expression: (6 / ((13 / 4) - 3))"}, {"input": "13 4 6 3\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 13, 4\nroll back, left: 13 4 6 3\n(4) * (6) = 24, left: (4 * 6) = 24, 13, 3\n(13) + (24) = 37, left: (13 + (4 * 6)) = 37, 3\nroll back, left: (4 * 6) = 24, 13, 3\nroll back, left: 13 4 6 3\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (4 / 6) = 2/3\n(16) / (2/3) = 24, left: ((13 + 3) / (4 / 6)) = 24\nreach 24! expression: ((13 + 3) / (4 / 6))"}, {"input": "6 2 3 5\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 6, 2\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, (3 + 5) = 8\n(8) / (1/3) = 24, left: ((3 + 5) / (2 / 6)) = 24\nreach 24! expression: ((3 + 5) / (2 / 6))"}, {"input": "6 2 3 5\n", "output": "(6) * (5) = 30, left: (6 * 5) = 30, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (6 * 5) = 30\n(30) - (6) = 24, left: ((6 * 5) - (2 * 3)) = 24\nreach 24! expression: ((6 * 5) - (2 * 3))"}, {"input": "6 2 3 5\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 6, 5\n(5) + (-1) = 4, left: (5 + (2 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (2 - 3))) = 24\nreach 24! expression: (6 * (5 + (2 - 3)))"}, {"input": "6 2 3 5\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (2 * 3) = 6\n(30) - (6) = 24, left: ((6 * 5) - (2 * 3)) = 24\nreach 24! expression: ((6 * 5) - (2 * 3))"}, {"input": "6 2 3 5\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 2, 3\n(2) * (6/5) = 12/5, left: (2 * (6 / 5)) = 12/5, 3\nroll back, left: (6 / 5) = 6/5, 2, 3\nroll back, left: 6 2 3 5\n(6) * (5) = 30, left: (6 * 5) = 30, 2, 3\n(3) * (30) = 90, left: (3 * (6 * 5)) = 90, 2\nroll back, left: (6 * 5) = 30, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (6 * 5) = 30\n(30) - (6) = 24, left: ((6 * 5) - (2 * 3)) = 24\nreach 24! expression: ((6 * 5) - (2 * 3))"}, {"input": "6 2 3 5\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 6, 5\n(6) - (6) = 0, left: (6 - (2 * 3)) = 0, 5\nroll back, left: (2 * 3) = 6, 6, 5\n(6) + (6) = 12, left: (6 + (2 * 3)) = 12, 5\nroll back, left: (2 * 3) = 6, 6, 5\n(6) * (6) = 36, left: (6 * (2 * 3)) = 36, 5\nroll back, left: (2 * 3) = 6, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (2 * 3) = 6\n(30) - (6) = 24, left: ((6 * 5) - (2 * 3)) = 24\nreach 24! expression: ((6 * 5) - (2 * 3))"}, {"input": "6 2 3 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 2, 3\nroll back, left: 6 2 3 5\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 2, 3\nroll back, left: 6 2 3 5\n(5) - (6) = -1, left: (5 - 6) = -1, 2, 3\nroll back, left: 6 2 3 5\n(6) * (5) = 30, left: (6 * 5) = 30, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (6 * 5) = 30\n(30) - (6) = 24, left: ((6 * 5) - (2 * 3)) = 24\nreach 24! expression: ((6 * 5) - (2 * 3))"}, {"input": "6 2 3 5\n", "output": "(5) / (3) = 5/3, left: (5 / 3) = 5/3, 6, 2\n(5/3) - (2) = -1/3, left: ((5 / 3) - 2) = -1/3, 6\nroll back, left: (5 / 3) = 5/3, 6, 2\n(6) / (2) = 3, left: (6 / 2) = 3, (5 / 3) = 5/3\nroll back, left: (5 / 3) = 5/3, 6, 2\nroll back, left: 6 2 3 5\n(3) + (5) = 8, left: (3 + 5) = 8, 6, 2\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, (3 + 5) = 8\n(8) / (1/3) = 24, left: ((3 + 5) / (2 / 6)) = 24\nreach 24! expression: ((3 + 5) / (2 / 6))"}, {"input": "6 2 3 5\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 6, 5\n(6) - (-1) = 7, left: (6 - (2 - 3)) = 7, 5\nroll back, left: (2 - 3) = -1, 6, 5\n(6) * (-1) = -6, left: (6 * (2 - 3)) = -6, 5\nroll back, left: (2 - 3) = -1, 6, 5\n(5) / (-1) = -5, left: (5 / (2 - 3)) = -5, 6\nroll back, left: (2 - 3) = -1, 6, 5\n(5) + (-1) = 4, left: (5 + (2 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (2 - 3))) = 24\nreach 24! expression: (6 * (5 + (2 - 3)))"}, {"input": "8 5 11 1\n", "output": "(8) + (11) = 19, left: (8 + 11) = 19, 5, 1\n(1) * (19) = 19, left: (1 * (8 + 11)) = 19, 5\n(5) + (19) = 24, left: (5 + (1 * (8 + 11))) = 24\nreach 24! expression: (5 + (1 * (8 + 11)))"}, {"input": "8 5 11 1\n", "output": "(5) + (11) = 16, left: (5 + 11) = 16, 8, 1\n(8) * (1) = 8, left: (8 * 1) = 8, (5 + 11) = 16\n(16) + (8) = 24, left: ((5 + 11) + (8 * 1)) = 24\nreach 24! expression: ((5 + 11) + (8 * 1))"}, {"input": "8 5 11 1\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 8, 5\n(5) + (11) = 16, left: (5 + (11 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (5 + (11 / 1))) = 24\nreach 24! expression: (8 + (5 + (11 / 1)))"}, {"input": "8 5 11 1\n", "output": "(8) + (5) = 13, left: (8 + 5) = 13, 11, 1\n(11) / (1) = 11, left: (11 / 1) = 11, (8 + 5) = 13\n(13) + (11) = 24, left: ((8 + 5) + (11 / 1)) = 24\nreach 24! expression: ((8 + 5) + (11 / 1))"}, {"input": "8 5 11 1\n", "output": "(11) * (1) = 11, left: (11 * 1) = 11, 8, 5\n(8) + (11) = 19, left: (8 + (11 * 1)) = 19, 5\n(5) + (19) = 24, left: (5 + (8 + (11 * 1))) = 24\nreach 24! expression: (5 + (8 + (11 * 1)))"}, {"input": "8 5 11 1\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 8, 1\n(8) / (6) = 4/3, left: (8 / (11 - 5)) = 4/3, 1\n(4/3) - (1) = 1/3, left: ((8 / (11 - 5)) - 1) = 1/3\nroll back, left: (8 / (11 - 5)) = 4/3, 1\nroll back, left: (11 - 5) = 6, 8, 1\nroll back, left: 8 5 11 1\n(5) + (11) = 16, left: (5 + 11) = 16, 8, 1\n(8) * (1) = 8, left: (8 * 1) = 8, (5 + 11) = 16\n(16) + (8) = 24, left: ((5 + 11) + (8 * 1)) = 24\nreach 24! expression: ((5 + 11) + (8 * 1))"}, {"input": "8 5 11 1\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 8, 5\n(-10) / (8) = -5/4, left: ((1 - 11) / 8) = -5/4, 5\nroll back, left: (1 - 11) = -10, 8, 5\nroll back, left: 8 5 11 1\n(11) * (1) = 11, left: (11 * 1) = 11, 8, 5\n(8) - (11) = -3, left: (8 - (11 * 1)) = -3, 5\nroll back, left: (11 * 1) = 11, 8, 5\n(8) + (11) = 19, left: (8 + (11 * 1)) = 19, 5\n(5) + (19) = 24, left: (5 + (8 + (11 * 1))) = 24\nreach 24! expression: (5 + (8 + (11 * 1)))"}, {"input": "8 5 11 1\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 8, 5\nroll back, left: 8 5 11 1\n(11) - (1) = 10, left: (11 - 1) = 10, 8, 5\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, (11 - 1) = 10\nroll back, left: (11 - 1) = 10, 8, 5\nroll back, left: 8 5 11 1\n(11) / (1) = 11, left: (11 / 1) = 11, 8, 5\n(5) + (11) = 16, left: (5 + (11 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (5 + (11 / 1))) = 24\nreach 24! expression: (8 + (5 + (11 / 1)))"}, {"input": "3 10 6 3\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 3, 6\n(7) - (3) = 4, left: ((10 - 3) - 3) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 - 3) - 3)) = 24\nreach 24! expression: (6 * ((10 - 3) - 3))"}, {"input": "3 10 6 3\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 10, 3\n(18) - (10) = 8, left: ((3 * 6) - 10) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 6) - 10)) = 24\nreach 24! expression: (3 * ((3 * 6) - 10))"}, {"input": "3 10 6 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 3, 10\n(10) - (2) = 8, left: (10 - (6 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (6 / 3))) = 24\nreach 24! expression: (3 * (10 - (6 / 3)))"}, {"input": "3 10 6 3\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 6, 3\n(7) - (3) = 4, left: ((10 - 3) - 3) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 - 3) - 3)) = 24\nreach 24! expression: (6 * ((10 - 3) - 3))"}, {"input": "3 10 6 3\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (10 - 6) = 4\n(4) * (6) = 24, left: ((10 - 6) * (3 + 3)) = 24\nreach 24! expression: ((10 - 6) * (3 + 3))"}, {"input": "3 10 6 3\n", "output": "(10) / (3) = 10/3, left: (10 / 3) = 10/3, 6, 3\nroll back, left: 3 10 6 3\n(3) / (10) = 3/10, left: (3 / 10) = 3/10, 6, 3\nroll back, left: 3 10 6 3\n(3) - (10) = -7, left: (3 - 10) = -7, 6, 3\nroll back, left: 3 10 6 3\n(10) - (3) = 7, left: (10 - 3) = 7, 6, 3\n(7) - (3) = 4, left: ((10 - 3) - 3) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 - 3) - 3)) = 24\nreach 24! expression: (6 * ((10 - 3) - 3))"}, {"input": "3 10 6 3\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 3, 10\n(1/2) / (10) = 1/20, left: ((3 / 6) / 10) = 1/20, 3\nroll back, left: (3 / 6) = 1/2, 3, 10\n(10) - (3) = 7, left: (10 - 3) = 7, (3 / 6) = 1/2\nroll back, left: (3 / 6) = 1/2, 3, 10\nroll back, left: 3 10 6 3\n(6) / (3) = 2, left: (6 / 3) = 2, 3, 10\n(10) - (2) = 8, left: (10 - (6 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (6 / 3))) = 24\nreach 24! expression: (3 * (10 - (6 / 3)))"}, {"input": "3 10 6 3\n", "output": "(10) + (6) = 16, left: (10 + 6) = 16, 3, 3\n(16) / (3) = 16/3, left: ((10 + 6) / 3) = 16/3, 3\nroll back, left: (10 + 6) = 16, 3, 3\nroll back, left: 3 10 6 3\n(6) - (10) = -4, left: (6 - 10) = -4, 3, 3\nroll back, left: 3 10 6 3\n(10) - (6) = 4, left: (10 - 6) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (10 - 6) = 4\n(4) * (6) = 24, left: ((10 - 6) * (3 + 3)) = 24\nreach 24! expression: ((10 - 6) * (3 + 3))"}, {"input": "3 10 6 3\n", "output": "(3) - (10) = -7, left: (3 - 10) = -7, 3, 6\nroll back, left: 3 10 6 3\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, 3, 6\nroll back, left: 3 10 6 3\n(10) - (3) = 7, left: (10 - 3) = 7, 3, 6\n(3) - (6) = -3, left: (3 - 6) = -3, (10 - 3) = 7\nroll back, left: (10 - 3) = 7, 3, 6\n(7) - (3) = 4, left: ((10 - 3) - 3) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 - 3) - 3)) = 24\nreach 24! expression: (6 * ((10 - 3) - 3))"}, {"input": "3 10 6 3\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 10, 3\n(3) / (3) = 1, left: (3 / (6 - 3)) = 1, 10\nroll back, left: (6 - 3) = 3, 10, 3\n(3) / (10) = 3/10, left: ((6 - 3) / 10) = 3/10, 3\nroll back, left: (6 - 3) = 3, 10, 3\nroll back, left: 3 10 6 3\n(3) * (6) = 18, left: (3 * 6) = 18, 10, 3\n(18) - (10) = 8, left: ((3 * 6) - 10) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 6) - 10)) = 24\nreach 24! expression: (3 * ((3 * 6) - 10))"}, {"input": "13 5 10 13\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (13 - 5) = 8\n(8) * (3) = 24, left: ((13 - 5) * (13 - 10)) = 24\nreach 24! expression: ((13 - 5) * (13 - 10))"}, {"input": "13 5 10 13\n", "output": "(13) + (13) = 26, left: (13 + 13) = 26, 5, 10\n(5) * (10) = 50, left: (5 * 10) = 50, (13 + 13) = 26\n(50) - (26) = 24, left: ((5 * 10) - (13 + 13)) = 24\nreach 24! expression: ((5 * 10) - (13 + 13))"}, {"input": "13 5 10 13\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (13 - 10) = 3\n(3) * (8) = 24, left: ((13 - 10) * (13 - 5)) = 24\nreach 24! expression: ((13 - 10) * (13 - 5))"}, {"input": "13 5 10 13\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (13 - 10) = 3\n(3) * (8) = 24, left: ((13 - 10) * (13 - 5)) = 24\nreach 24! expression: ((13 - 10) * (13 - 5))"}, {"input": "6 5 12 7\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (7 - 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (7 - 5))) = 24\nreach 24! expression: (12 + (6 * (7 - 5)))"}, {"input": "6 5 12 7\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 6, 12\n(6) * (-2) = -12, left: (6 * (5 - 7)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (5 - 7))) = 24\nreach 24! expression: (12 - (6 * (5 - 7)))"}, {"input": "6 5 12 7\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 6, 12\n(12) / (6) = 2, left: (12 / 6) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (12 / 6)) = 24\nreach 24! expression: ((5 + 7) * (12 / 6))"}, {"input": "6 5 12 7\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (6 / 12) = 1/2\n(12) / (1/2) = 24, left: ((5 + 7) / (6 / 12)) = 24\nreach 24! expression: ((5 + 7) / (6 / 12))"}, {"input": "6 5 12 7\n", "output": "(6) * (5) = 30, left: (6 * 5) = 30, 12, 7\nroll back, left: 6 5 12 7\n(7) / (6) = 7/6, left: (7 / 6) = 7/6, 5, 12\n(12) - (7/6) = 65/6, left: (12 - (7 / 6)) = 65/6, 5\nroll back, left: (7 / 6) = 7/6, 5, 12\nroll back, left: 6 5 12 7\n(7) - (5) = 2, left: (7 - 5) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (7 - 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (7 - 5))) = 24\nreach 24! expression: (12 + (6 * (7 - 5)))"}, {"input": "6 5 12 7\n", "output": "(6) + (7) = 13, left: (6 + 7) = 13, 5, 12\n(5) + (13) = 18, left: (5 + (6 + 7)) = 18, 12\nroll back, left: (6 + 7) = 13, 5, 12\nroll back, left: 6 5 12 7\n(7) - (6) = 1, left: (7 - 6) = 1, 5, 12\nroll back, left: 6 5 12 7\n(7) - (5) = 2, left: (7 - 5) = 2, 6, 12\n(6) * (2) = 12, left: (6 * (7 - 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (7 - 5))) = 24\nreach 24! expression: (12 + (6 * (7 - 5)))"}, {"input": "6 5 12 7\n", "output": "(6) * (7) = 42, left: (6 * 7) = 42, 5, 12\nroll back, left: 6 5 12 7\n(7) - (6) = 1, left: (7 - 6) = 1, 5, 12\n(12) / (1) = 12, left: (12 / (7 - 6)) = 12, 5\nroll back, left: (7 - 6) = 1, 5, 12\nroll back, left: 6 5 12 7\n(5) + (7) = 12, left: (5 + 7) = 12, 6, 12\n(12) / (6) = 2, left: (12 / 6) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (12 / 6)) = 24\nreach 24! expression: ((5 + 7) * (12 / 6))"}, {"input": "6 5 12 7\n", "output": "(6) + (7) = 13, left: (6 + 7) = 13, 5, 12\nroll back, left: 6 5 12 7\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 12, 7\nroll back, left: 6 5 12 7\n(12) + (7) = 19, left: (12 + 7) = 19, 6, 5\nroll back, left: 6 5 12 7\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (6 / 12) = 1/2\n(12) / (1/2) = 24, left: ((5 + 7) / (6 / 12)) = 24\nreach 24! expression: ((5 + 7) / (6 / 12))"}, {"input": "6 5 12 7\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 12, 7\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, (6 + 5) = 11\nroll back, left: (6 + 5) = 11, 12, 7\nroll back, left: 6 5 12 7\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 12, 7\nroll back, left: 6 5 12 7\n(5) - (7) = -2, left: (5 - 7) = -2, 6, 12\n(6) * (-2) = -12, left: (6 * (5 - 7)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (5 - 7))) = 24\nreach 24! expression: (12 - (6 * (5 - 7)))"}, {"input": "12 7 5 4\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (7 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (7 - 4))) = 24\nreach 24! expression: (12 * (5 - (7 - 4)))"}, {"input": "12 7 5 4\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 12, 5\n(5) + (-3) = 2, left: (5 + (4 - 7)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 + (4 - 7))) = 24\nreach 24! expression: (12 * (5 + (4 - 7)))"}, {"input": "12 7 5 4\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 12, 4\n(12) * (4) = 48, left: (12 * 4) = 48, (7 - 5) = 2\n(48) / (2) = 24, left: ((12 * 4) / (7 - 5)) = 24\nreach 24! expression: ((12 * 4) / (7 - 5))"}, {"input": "12 7 5 4\n", "output": "(12) * (7) = 84, left: (12 * 7) = 84, 5, 4\n(5) - (4) = 1, left: (5 - 4) = 1, (12 * 7) = 84\nroll back, left: (12 * 7) = 84, 5, 4\nroll back, left: 12 7 5 4\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, 5, 4\nroll back, left: 12 7 5 4\n(4) - (7) = -3, left: (4 - 7) = -3, 12, 5\n(5) + (-3) = 2, left: (5 + (4 - 7)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 + (4 - 7))) = 24\nreach 24! expression: (12 * (5 + (4 - 7)))"}, {"input": "12 7 5 4\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 12, 4\n(4) * (12) = 48, left: (4 * (7 + 5)) = 48, 12\n(12) - (48) = -36, left: (12 - (4 * (7 + 5))) = -36\nroll back, left: (4 * (7 + 5)) = 48, 12\nroll back, left: (7 + 5) = 12, 12, 4\nroll back, left: 12 7 5 4\n(7) - (5) = 2, left: (7 - 5) = 2, 12, 4\n(12) * (4) = 48, left: (12 * 4) = 48, (7 - 5) = 2\n(48) / (2) = 24, left: ((12 * 4) / (7 - 5)) = 24\nreach 24! expression: ((12 * 4) / (7 - 5))"}, {"input": "12 7 5 4\n", "output": "(12) * (5) = 60, left: (12 * 5) = 60, 7, 4\nroll back, left: 12 7 5 4\n(12) / (5) = 12/5, left: (12 / 5) = 12/5, 7, 4\n(4) + (12/5) = 32/5, left: (4 + (12 / 5)) = 32/5, 7\nroll back, left: (12 / 5) = 12/5, 7, 4\nroll back, left: 12 7 5 4\n(7) - (4) = 3, left: (7 - 4) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (7 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (7 - 4))) = 24\nreach 24! expression: (12 * (5 - (7 - 4)))"}, {"input": "12 7 5 4\n", "output": "(7) + (4) = 11, left: (7 + 4) = 11, 12, 5\n(11) - (5) = 6, left: ((7 + 4) - 5) = 6, 12\nroll back, left: (7 + 4) = 11, 12, 5\nroll back, left: 12 7 5 4\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, 12, 5\nroll back, left: 12 7 5 4\n(7) - (4) = 3, left: (7 - 4) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (7 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (7 - 4))) = 24\nreach 24! expression: (12 * (5 - (7 - 4)))"}, {"input": "8 3 5 1\n", "output": "(8) + (1) = 9, left: (8 + 1) = 9, 3, 5\n(3) * (5) = 15, left: (3 * 5) = 15, (8 + 1) = 9\n(9) + (15) = 24, left: ((8 + 1) + (3 * 5)) = 24\nreach 24! expression: ((8 + 1) + (3 * 5))"}, {"input": "8 3 5 1\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (8 - 3)) = 25, 1\n(25) - (1) = 24, left: ((5 * (8 - 3)) - 1) = 24\nreach 24! expression: ((5 * (8 - 3)) - 1)"}, {"input": "8 3 5 1\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (3 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (3 - 1))) = 24\nreach 24! expression: (8 * (5 - (3 - 1)))"}, {"input": "8 3 5 1\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 8, 5\n(3) / (8) = 3/8, left: ((3 / 1) / 8) = 3/8, 5\nroll back, left: (3 / 1) = 3, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (3 / 1) = 3\nroll back, left: (3 / 1) = 3, 8, 5\nroll back, left: 8 3 5 1\n(3) - (1) = 2, left: (3 - 1) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (3 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (3 - 1))) = 24\nreach 24! expression: (8 * (5 - (3 - 1)))"}, {"input": "8 3 5 1\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 5, 1\nroll back, left: 8 3 5 1\n(8) * (3) = 24, left: (8 * 3) = 24, 5, 1\n(5) * (1) = 5, left: (5 * 1) = 5, (8 * 3) = 24\nroll back, left: (8 * 3) = 24, 5, 1\nroll back, left: 8 3 5 1\n(8) - (3) = 5, left: (8 - 3) = 5, 5, 1\n(5) * (5) = 25, left: (5 * (8 - 3)) = 25, 1\n(25) - (1) = 24, left: ((5 * (8 - 3)) - 1) = 24\nreach 24! expression: ((5 * (8 - 3)) - 1)"}, {"input": "8 3 5 1\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 3, 5\n(-7) - (5) = -12, left: ((1 - 8) - 5) = -12, 3\nroll back, left: (1 - 8) = -7, 3, 5\nroll back, left: 8 3 5 1\n(8) - (1) = 7, left: (8 - 1) = 7, 3, 5\nroll back, left: 8 3 5 1\n(8) + (1) = 9, left: (8 + 1) = 9, 3, 5\n(3) * (5) = 15, left: (3 * 5) = 15, (8 + 1) = 9\n(9) + (15) = 24, left: ((8 + 1) + (3 * 5)) = 24\nreach 24! expression: ((8 + 1) + (3 * 5))"}, {"input": "8 3 5 1\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (3 / 1) = 3\nroll back, left: (3 / 1) = 3, 8, 5\nroll back, left: 8 3 5 1\n(3) - (1) = 2, left: (3 - 1) = 2, 8, 5\n(5) * (2) = 10, left: (5 * (3 - 1)) = 10, 8\nroll back, left: (3 - 1) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (3 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (3 - 1))) = 24\nreach 24! expression: (8 * (5 - (3 - 1)))"}, {"input": "8 3 5 1\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 3, 1\n(-3) - (1) = -4, left: ((5 - 8) - 1) = -4, 3\nroll back, left: (5 - 8) = -3, 3, 1\nroll back, left: 8 3 5 1\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 3, 1\nroll back, left: 8 3 5 1\n(3) - (1) = 2, left: (3 - 1) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (3 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (3 - 1))) = 24\nreach 24! expression: (8 * (5 - (3 - 1)))"}, {"input": "13 9 13 3\n", "output": "(13) / (13) = 1, left: (13 / 13) = 1, 9, 3\n(9) - (1) = 8, left: (9 - (13 / 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (13 / 13))) = 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "13 9 13 3\n", "output": "(13) + (3) = 16, left: (13 + 3) = 16, 9, 13\nroll back, left: 13 9 13 3\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, 13, 9\nroll back, left: 13 9 13 3\n(3) - (13) = -10, left: (3 - 13) = -10, 13, 9\nroll back, left: 13 9 13 3\n(13) / (13) = 1, left: (13 / 13) = 1, 9, 3\n(9) - (1) = 8, left: (9 - (13 / 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (13 / 13))) = 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "13 9 13 3\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 9, 13\nroll back, left: 13 9 13 3\n(13) * (3) = 39, left: (13 * 3) = 39, 9, 13\nroll back, left: 13 9 13 3\n(13) / (3) = 13/3, left: (13 / 3) = 13/3, 9, 13\nroll back, left: 13 9 13 3\n(13) / (13) = 1, left: (13 / 13) = 1, 9, 3\n(9) - (1) = 8, left: (9 - (13 / 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (13 / 13))) = 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "13 9 13 3\n", "output": "(13) + (3) = 16, left: (13 + 3) = 16, 9, 13\nroll back, left: 13 9 13 3\n(13) - (9) = 4, left: (13 - 9) = 4, 13, 3\n(13) * (4) = 52, left: (13 * (13 - 9)) = 52, 3\nroll back, left: (13 - 9) = 4, 13, 3\nroll back, left: 13 9 13 3\n(13) / (13) = 1, left: (13 / 13) = 1, 9, 3\n(9) - (1) = 8, left: (9 - (13 / 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (13 / 13))) = 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "13 9 13 3\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 13, 9\n(-10) / (9) = -10/9, left: ((3 - 13) / 9) = -10/9, 13\nroll back, left: (3 - 13) = -10, 13, 9\nroll back, left: 13 9 13 3\n(13) * (3) = 39, left: (13 * 3) = 39, 13, 9\nroll back, left: 13 9 13 3\n(13) / (13) = 1, left: (13 / 13) = 1, 9, 3\n(9) - (1) = 8, left: (9 - (13 / 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (13 / 13))) = 24\nreach 24! expression: (3 * (9 - (13 / 13)))"}, {"input": "3 12 9 5\n", "output": "(12) + (5) = 17, left: (12 + 5) = 17, 3, 9\n(17) - (9) = 8, left: ((12 + 5) - 9) = 8, 3\n(3) * (8) = 24, left: (3 * ((12 + 5) - 9)) = 24\nreach 24! expression: (3 * ((12 + 5) - 9))"}, {"input": "3 12 9 5\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (3 + 5) = 8\n(8) * (3) = 24, left: ((3 + 5) * (12 - 9)) = 24\nreach 24! expression: ((3 + 5) * (12 - 9))"}, {"input": "3 12 9 5\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 3, 5\n(5) - (-3) = 8, left: (5 - (9 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 - (9 - 12))) = 24\nreach 24! expression: (3 * (5 - (9 - 12)))"}, {"input": "3 12 9 5\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (9 / 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (9 / 3))) = 24\nreach 24! expression: (12 * (5 - (9 / 3)))"}, {"input": "3 12 9 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 3, 12\n(3) * (4) = 12, left: (3 * (9 - 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (3 * (9 - 5))) = 24\nreach 24! expression: (12 + (3 * (9 - 5)))"}, {"input": "3 12 9 5\n", "output": "(3) * (5) = 15, left: (3 * 5) = 15, 12, 9\nroll back, left: 3 12 9 5\n(5) - (3) = 2, left: (5 - 3) = 2, 12, 9\n(12) - (2) = 10, left: (12 - (5 - 3)) = 10, 9\nroll back, left: (5 - 3) = 2, 12, 9\nroll back, left: 3 12 9 5\n(3) + (5) = 8, left: (3 + 5) = 8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (3 + 5) = 8\n(8) * (3) = 24, left: ((3 + 5) * (12 - 9)) = 24\nreach 24! expression: ((3 + 5) * (12 - 9))"}, {"input": "3 12 9 5\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 3, 9\n(3) - (9) = -6, left: (3 - 9) = -6, (12 - 5) = 7\nroll back, left: (12 - 5) = 7, 3, 9\nroll back, left: 3 12 9 5\n(5) / (12) = 5/12, left: (5 / 12) = 5/12, 3, 9\nroll back, left: 3 12 9 5\n(12) + (5) = 17, left: (12 + 5) = 17, 3, 9\n(17) - (9) = 8, left: ((12 + 5) - 9) = 8, 3\n(3) * (8) = 24, left: (3 * ((12 + 5) - 9)) = 24\nreach 24! expression: (3 * ((12 + 5) - 9))"}, {"input": "3 12 9 5\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 3, 5\n(3) * (4/3) = 4, left: (3 * (12 / 9)) = 4, 5\nroll back, left: (12 / 9) = 4/3, 3, 5\n(5) / (4/3) = 15/4, left: (5 / (12 / 9)) = 15/4, 3\nroll back, left: (12 / 9) = 4/3, 3, 5\nroll back, left: 3 12 9 5\n(9) - (12) = -3, left: (9 - 12) = -3, 3, 5\n(5) - (-3) = 8, left: (5 - (9 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 - (9 - 12))) = 24\nreach 24! expression: (3 * (5 - (9 - 12)))"}, {"input": "3 12 9 5\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 3, 12\n(14) / (3) = 14/3, left: ((9 + 5) / 3) = 14/3, 12\nroll back, left: (9 + 5) = 14, 3, 12\n(3) * (12) = 36, left: (3 * 12) = 36, (9 + 5) = 14\nroll back, left: (9 + 5) = 14, 3, 12\nroll back, left: 3 12 9 5\n(9) - (5) = 4, left: (9 - 5) = 4, 3, 12\n(3) * (4) = 12, left: (3 * (9 - 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (3 * (9 - 5))) = 24\nreach 24! expression: (12 + (3 * (9 - 5)))"}, {"input": "3 12 9 5\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 12, 5\nroll back, left: 3 12 9 5\n(3) - (9) = -6, left: (3 - 9) = -6, 12, 5\nroll back, left: 3 12 9 5\n(3) + (9) = 12, left: (3 + 9) = 12, 12, 5\nroll back, left: 3 12 9 5\n(9) / (3) = 3, left: (9 / 3) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (9 / 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (9 / 3))) = 24\nreach 24! expression: (12 * (5 - (9 / 3)))"}, {"input": "3 9 6 13\n", "output": "(3) + (13) = 16, left: (3 + 13) = 16, 9, 6\n(6) / (16) = 3/8, left: (6 / (3 + 13)) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / (6 / (3 + 13))) = 24\nreach 24! expression: (9 / (6 / (3 + 13)))"}, {"input": "3 9 6 13\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 9, 13\n(9) + (13) = 22, left: (9 + 13) = 22, (6 / 3) = 2\n(2) + (22) = 24, left: ((6 / 3) + (9 + 13)) = 24\nreach 24! expression: ((6 / 3) + (9 + 13))"}, {"input": "3 9 6 13\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 3, 13\n(3) * (13) = 39, left: (3 * 13) = 39, (9 + 6) = 15\n(39) - (15) = 24, left: ((3 * 13) - (9 + 6)) = 24\nreach 24! expression: ((3 * 13) - (9 + 6))"}, {"input": "3 9 6 13\n", "output": "(3) + (13) = 16, left: (3 + 13) = 16, 9, 6\n(9) * (16) = 144, left: (9 * (3 + 13)) = 144, 6\n(144) / (6) = 24, left: ((9 * (3 + 13)) / 6) = 24\nreach 24! expression: ((9 * (3 + 13)) / 6)"}, {"input": "3 9 6 13\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 3, 6\n(6) / (3) = 2, left: (6 / 3) = 2, (9 + 13) = 22\n(22) + (2) = 24, left: ((9 + 13) + (6 / 3)) = 24\nreach 24! expression: ((9 + 13) + (6 / 3))"}, {"input": "3 9 6 13\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 3, 6\n(3) + (6) = 9, left: (3 + 6) = 9, (13 - 9) = 4\n(4) + (9) = 13, left: ((13 - 9) + (3 + 6)) = 13\nroll back, left: (3 + 6) = 9, (13 - 9) = 4\nroll back, left: (13 - 9) = 4, 3, 6\nroll back, left: 3 9 6 13\n(9) + (13) = 22, left: (9 + 13) = 22, 3, 6\n(6) / (3) = 2, left: (6 / 3) = 2, (9 + 13) = 22\n(22) + (2) = 24, left: ((9 + 13) + (6 / 3)) = 24\nreach 24! expression: ((9 + 13) + (6 / 3))"}, {"input": "3 9 6 13\n", "output": "(13) - (3) = 10, left: (13 - 3) = 10, 9, 6\n(9) * (6) = 54, left: (9 * 6) = 54, (13 - 3) = 10\nroll back, left: (13 - 3) = 10, 9, 6\n(9) - (10) = -1, left: (9 - (13 - 3)) = -1, 6\nroll back, left: (13 - 3) = 10, 9, 6\nroll back, left: 3 9 6 13\n(3) + (13) = 16, left: (3 + 13) = 16, 9, 6\n(9) * (16) = 144, left: (9 * (3 + 13)) = 144, 6\n(144) / (6) = 24, left: ((9 * (3 + 13)) / 6) = 24\nreach 24! expression: ((9 * (3 + 13)) / 6)"}, {"input": "3 9 6 13\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 6, 13\nroll back, left: 3 9 6 13\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 9, 13\nroll back, left: 3 9 6 13\n(3) + (6) = 9, left: (3 + 6) = 9, 9, 13\nroll back, left: 3 9 6 13\n(6) / (3) = 2, left: (6 / 3) = 2, 9, 13\n(9) + (13) = 22, left: (9 + 13) = 22, (6 / 3) = 2\n(2) + (22) = 24, left: ((6 / 3) + (9 + 13)) = 24\nreach 24! expression: ((6 / 3) + (9 + 13))"}, {"input": "3 9 6 13\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 3, 9\nroll back, left: 3 9 6 13\n(6) - (13) = -7, left: (6 - 13) = -7, 3, 9\n(3) * (9) = 27, left: (3 * 9) = 27, (6 - 13) = -7\nroll back, left: (6 - 13) = -7, 3, 9\nroll back, left: 3 9 6 13\n(3) + (13) = 16, left: (3 + 13) = 16, 9, 6\n(6) / (16) = 3/8, left: (6 / (3 + 13)) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / (6 / (3 + 13))) = 24\nreach 24! expression: (9 / (6 / (3 + 13)))"}, {"input": "8 10 12 6\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 8, 10\n(8) + (6) = 14, left: (8 + (12 - 6)) = 14, 10\n(10) + (14) = 24, left: (10 + (8 + (12 - 6))) = 24\nreach 24! expression: (10 + (8 + (12 - 6)))"}, {"input": "8 10 12 6\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (12 - 10) = 2\n(48) / (2) = 24, left: ((8 * 6) / (12 - 10)) = 24\nreach 24! expression: ((8 * 6) / (12 - 10))"}, {"input": "8 10 12 6\n", "output": "(10) + (6) = 16, left: (10 + 6) = 16, 8, 12\n(16) / (8) = 2, left: ((10 + 6) / 8) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 6) / 8)) = 24\nreach 24! expression: (12 * ((10 + 6) / 8))"}, {"input": "8 10 12 6\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (8 - 10)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (8 - 10))) = 24\nreach 24! expression: (12 - (6 * (8 - 10)))"}, {"input": "8 10 12 6\n", "output": "(8) * (10) = 80, left: (8 * 10) = 80, 12, 6\nroll back, left: 8 10 12 6\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 12, 6\nroll back, left: 8 10 12 6\n(8) - (10) = -2, left: (8 - 10) = -2, 12, 6\n(-2) / (6) = -1/3, left: ((8 - 10) / 6) = -1/3, 12\nroll back, left: (8 - 10) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (8 - 10)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (8 - 10))) = 24\nreach 24! expression: (12 - (6 * (8 - 10)))"}, {"input": "8 10 12 6\n", "output": "(12) / (10) = 6/5, left: (12 / 10) = 6/5, 8, 6\nroll back, left: 8 10 12 6\n(10) - (12) = -2, left: (10 - 12) = -2, 8, 6\nroll back, left: 8 10 12 6\n(10) / (12) = 5/6, left: (10 / 12) = 5/6, 8, 6\nroll back, left: 8 10 12 6\n(12) - (10) = 2, left: (12 - 10) = 2, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (12 - 10) = 2\n(48) / (2) = 24, left: ((8 * 6) / (12 - 10)) = 24\nreach 24! expression: ((8 * 6) / (12 - 10))"}, {"input": "7 5 1 4\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 5, 1\n(1) + (28) = 29, left: (1 + (7 * 4)) = 29, 5\n(29) - (5) = 24, left: ((1 + (7 * 4)) - 5) = 24\nreach 24! expression: ((1 + (7 * 4)) - 5)"}, {"input": "7 5 1 4\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 5, 1\n(1) - (5) = -4, left: (1 - 5) = -4, (7 * 4) = 28\n(28) + (-4) = 24, left: ((7 * 4) + (1 - 5)) = 24\nreach 24! expression: ((7 * 4) + (1 - 5))"}, {"input": "7 5 1 4\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 5, 1\n(5) - (28) = -23, left: (5 - (7 * 4)) = -23, 1\n(1) - (-23) = 24, left: (1 - (5 - (7 * 4))) = 24\nreach 24! expression: (1 - (5 - (7 * 4)))"}, {"input": "7 5 1 4\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 7, 1\nroll back, left: 7 5 1 4\n(5) + (4) = 9, left: (5 + 4) = 9, 7, 1\nroll back, left: 7 5 1 4\n(7) - (4) = 3, left: (7 - 4) = 3, 5, 1\nroll back, left: 7 5 1 4\n(7) * (4) = 28, left: (7 * 4) = 28, 5, 1\n(1) - (5) = -4, left: (1 - 5) = -4, (7 * 4) = 28\n(28) + (-4) = 24, left: ((7 * 4) + (1 - 5)) = 24\nreach 24! expression: ((7 * 4) + (1 - 5))"}, {"input": "7 5 1 4\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 1, 4\nroll back, left: 7 5 1 4\n(7) * (5) = 35, left: (7 * 5) = 35, 1, 4\n(1) * (4) = 4, left: (1 * 4) = 4, (7 * 5) = 35\nroll back, left: (7 * 5) = 35, 1, 4\nroll back, left: 7 5 1 4\n(7) * (4) = 28, left: (7 * 4) = 28, 5, 1\n(1) + (28) = 29, left: (1 + (7 * 4)) = 29, 5\n(29) - (5) = 24, left: ((1 + (7 * 4)) - 5) = 24\nreach 24! expression: ((1 + (7 * 4)) - 5)"}, {"input": "7 5 1 4\n", "output": "(5) * (4) = 20, left: (5 * 4) = 20, 7, 1\n(1) / (7) = 1/7, left: (1 / 7) = 1/7, (5 * 4) = 20\nroll back, left: (5 * 4) = 20, 7, 1\nroll back, left: 7 5 1 4\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 7, 5\nroll back, left: 7 5 1 4\n(7) * (4) = 28, left: (7 * 4) = 28, 5, 1\n(1) + (28) = 29, left: (1 + (7 * 4)) = 29, 5\n(29) - (5) = 24, left: ((1 + (7 * 4)) - 5) = 24\nreach 24! expression: ((1 + (7 * 4)) - 5)"}, {"input": "7 5 1 4\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 7, 1\n(7) * (1) = 7, left: (7 * 1) = 7, (5 / 4) = 5/4\nroll back, left: (5 / 4) = 5/4, 7, 1\nroll back, left: 7 5 1 4\n(5) * (4) = 20, left: (5 * 4) = 20, 7, 1\nroll back, left: 7 5 1 4\n(7) * (4) = 28, left: (7 * 4) = 28, 5, 1\n(1) + (28) = 29, left: (1 + (7 * 4)) = 29, 5\n(29) - (5) = 24, left: ((1 + (7 * 4)) - 5) = 24\nreach 24! expression: ((1 + (7 * 4)) - 5)"}, {"input": "7 5 1 4\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 7, 1\n(7) * (1) = 7, left: (7 * 1) = 7, (4 / 5) = 4/5\n(7) - (4/5) = 31/5, left: ((7 * 1) - (4 / 5)) = 31/5\nroll back, left: (7 * 1) = 7, (4 / 5) = 4/5\nroll back, left: (4 / 5) = 4/5, 7, 1\nroll back, left: 7 5 1 4\n(7) * (4) = 28, left: (7 * 4) = 28, 5, 1\n(5) - (28) = -23, left: (5 - (7 * 4)) = -23, 1\n(1) - (-23) = 24, left: (1 - (5 - (7 * 4))) = 24\nreach 24! expression: (1 - (5 - (7 * 4)))"}, {"input": "5 2 9 2\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 9, 2\n(9) - (-3) = 12, left: (9 - (2 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (2 - 5))) = 24\nreach 24! expression: (2 * (9 - (2 - 5)))"}, {"input": "5 2 9 2\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 2, 2\n(14) - (2) = 12, left: ((5 + 9) - 2) = 12, 2\n(2) * (12) = 24, left: (2 * ((5 + 9) - 2)) = 24\nreach 24! expression: (2 * ((5 + 9) - 2))"}, {"input": "5 2 9 2\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 5, 2\n(5) + (7) = 12, left: (5 + (9 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (5 + (9 - 2))) = 24\nreach 24! expression: (2 * (5 + (9 - 2)))"}, {"input": "5 2 9 2\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 2, 9\n(9) - (-3) = 12, left: (9 - (2 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (2 - 5))) = 24\nreach 24! expression: (2 * (9 - (2 - 5)))"}, {"input": "5 2 9 2\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (5 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (5 - 2))) = 24\nreach 24! expression: (2 * (9 + (5 - 2)))"}, {"input": "5 2 9 2\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 9, 2\n(-3) / (9) = -1/3, left: ((2 - 5) / 9) = -1/3, 2\nroll back, left: (2 - 5) = -3, 9, 2\n(9) + (-3) = 6, left: (9 + (2 - 5)) = 6, 2\n(6) - (2) = 4, left: ((9 + (2 - 5)) - 2) = 4\nroll back, left: (9 + (2 - 5)) = 6, 2\nroll back, left: (2 - 5) = -3, 9, 2\n(9) - (-3) = 12, left: (9 - (2 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (2 - 5))) = 24\nreach 24! expression: (2 * (9 - (2 - 5)))"}, {"input": "5 2 9 2\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 5, 2\n(5) * (7) = 35, left: (5 * (9 - 2)) = 35, 2\n(2) - (35) = -33, left: (2 - (5 * (9 - 2))) = -33\nroll back, left: (5 * (9 - 2)) = 35, 2\nroll back, left: (9 - 2) = 7, 5, 2\n(7) / (5) = 7/5, left: ((9 - 2) / 5) = 7/5, 2\nroll back, left: (9 - 2) = 7, 5, 2\n(5) + (7) = 12, left: (5 + (9 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (5 + (9 - 2))) = 24\nreach 24! expression: (2 * (5 + (9 - 2)))"}, {"input": "5 2 9 2\n", "output": "(5) + (2) = 7, left: (5 + 2) = 7, 2, 9\n(9) + (7) = 16, left: (9 + (5 + 2)) = 16, 2\nroll back, left: (5 + 2) = 7, 2, 9\nroll back, left: 5 2 9 2\n(2) - (5) = -3, left: (2 - 5) = -3, 2, 9\n(2) + (-3) = -1, left: (2 + (2 - 5)) = -1, 9\nroll back, left: (2 - 5) = -3, 2, 9\n(9) - (-3) = 12, left: (9 - (2 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (2 - 5))) = 24\nreach 24! expression: (2 * (9 - (2 - 5)))"}, {"input": "5 2 9 2\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 2, 2\n(2) - (2) = 0, left: (2 - 2) = 0, (5 + 9) = 14\nroll back, left: (5 + 9) = 14, 2, 2\n(2) / (2) = 1, left: (2 / 2) = 1, (5 + 9) = 14\n(14) * (1) = 14, left: ((5 + 9) * (2 / 2)) = 14\nroll back, left: (2 / 2) = 1, (5 + 9) = 14\nroll back, left: (5 + 9) = 14, 2, 2\n(14) - (2) = 12, left: ((5 + 9) - 2) = 12, 2\n(2) * (12) = 24, left: (2 * ((5 + 9) - 2)) = 24\nreach 24! expression: (2 * ((5 + 9) - 2))"}, {"input": "5 2 9 2\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 9, 2\n(9) + (2) = 11, left: (9 + 2) = 11, (5 - 2) = 3\nroll back, left: (5 - 2) = 3, 9, 2\n(2) / (9) = 2/9, left: (2 / 9) = 2/9, (5 - 2) = 3\nroll back, left: (5 - 2) = 3, 9, 2\n(2) - (3) = -1, left: (2 - (5 - 2)) = -1, 9\nroll back, left: (5 - 2) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (5 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (5 - 2))) = 24\nreach 24! expression: (2 * (9 + (5 - 2)))"}, {"input": "5 3 8 2\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (8 * 2) = 16\n(16) + (8) = 24, left: ((8 * 2) + (5 + 3)) = 24\nreach 24! expression: ((8 * 2) + (5 + 3))"}, {"input": "5 3 8 2\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 5, 3\n(5) + (16) = 21, left: (5 + (8 * 2)) = 21, 3\n(3) + (21) = 24, left: (3 + (5 + (8 * 2))) = 24\nreach 24! expression: (3 + (5 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 5, 3\n(3) + (16) = 19, left: (3 + (8 * 2)) = 19, 5\n(5) + (19) = 24, left: (5 + (3 + (8 * 2))) = 24\nreach 24! expression: (5 + (3 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 5, 3\nroll back, left: 5 3 8 2\n(8) / (2) = 4, left: (8 / 2) = 4, 5, 3\nroll back, left: 5 3 8 2\n(8) + (2) = 10, left: (8 + 2) = 10, 5, 3\nroll back, left: 5 3 8 2\n(8) * (2) = 16, left: (8 * 2) = 16, 5, 3\n(3) + (16) = 19, left: (3 + (8 * 2)) = 19, 5\n(5) + (19) = 24, left: (5 + (3 + (8 * 2))) = 24\nreach 24! expression: (5 + (3 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 5, 3\nroll back, left: 5 3 8 2\n(8) / (2) = 4, left: (8 / 2) = 4, 5, 3\nroll back, left: 5 3 8 2\n(8) - (2) = 6, left: (8 - 2) = 6, 5, 3\nroll back, left: 5 3 8 2\n(8) * (2) = 16, left: (8 * 2) = 16, 5, 3\n(5) + (16) = 21, left: (5 + (8 * 2)) = 21, 3\n(3) + (21) = 24, left: (3 + (5 + (8 * 2))) = 24\nreach 24! expression: (3 + (5 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 5, 8\nroll back, left: 5 3 8 2\n(3) - (2) = 1, left: (3 - 2) = 1, 5, 8\nroll back, left: 5 3 8 2\n(8) / (2) = 4, left: (8 / 2) = 4, 5, 3\nroll back, left: 5 3 8 2\n(8) * (2) = 16, left: (8 * 2) = 16, 5, 3\n(5) + (16) = 21, left: (5 + (8 * 2)) = 21, 3\n(3) + (21) = 24, left: (3 + (5 + (8 * 2))) = 24\nreach 24! expression: (3 + (5 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 5, 2\nroll back, left: 5 3 8 2\n(8) + (2) = 10, left: (8 + 2) = 10, 5, 3\n(5) + (10) = 15, left: (5 + (8 + 2)) = 15, 3\nroll back, left: (8 + 2) = 10, 5, 3\nroll back, left: 5 3 8 2\n(8) * (2) = 16, left: (8 * 2) = 16, 5, 3\n(3) + (16) = 19, left: (3 + (8 * 2)) = 19, 5\n(5) + (19) = 24, left: (5 + (3 + (8 * 2))) = 24\nreach 24! expression: (5 + (3 + (8 * 2)))"}, {"input": "5 3 8 2\n", "output": "(3) + (2) = 5, left: (3 + 2) = 5, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (3 + 2) = 5\nroll back, left: (3 + 2) = 5, 5, 8\nroll back, left: 5 3 8 2\n(5) + (2) = 7, left: (5 + 2) = 7, 3, 8\nroll back, left: 5 3 8 2\n(8) * (2) = 16, left: (8 * 2) = 16, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (8 * 2) = 16\n(16) + (8) = 24, left: ((8 * 2) + (5 + 3)) = 24\nreach 24! expression: ((8 * 2) + (5 + 3))"}, {"input": "10 12 9 6\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (10 - 6)) = 36, 12\n(36) - (12) = 24, left: ((9 * (10 - 6)) - 12) = 24\nreach 24! expression: ((9 * (10 - 6)) - 12)"}, {"input": "10 12 9 6\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (12 - 9)) = 30, 6\n(30) - (6) = 24, left: ((10 * (12 - 9)) - 6) = 24\nreach 24! expression: ((10 * (12 - 9)) - 6)"}, {"input": "10 12 9 6\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (10 - 12)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (10 - 12))) = 24\nreach 24! expression: (6 - (9 * (10 - 12)))"}, {"input": "10 12 9 6\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (12 - 9)) = 30, 6\n(30) - (6) = 24, left: ((10 * (12 - 9)) - 6) = 24\nreach 24! expression: ((10 * (12 - 9)) - 6)"}, {"input": "10 12 9 6\n", "output": "(9) * (6) = 54, left: (9 * 6) = 54, 10, 12\nroll back, left: 10 12 9 6\n(6) - (9) = -3, left: (6 - 9) = -3, 10, 12\nroll back, left: 10 12 9 6\n(10) * (6) = 60, left: (10 * 6) = 60, 12, 9\nroll back, left: 10 12 9 6\n(10) - (6) = 4, left: (10 - 6) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (10 - 6)) = 36, 12\n(36) - (12) = 24, left: ((9 * (10 - 6)) - 12) = 24\nreach 24! expression: ((9 * (10 - 6)) - 12)"}, {"input": "10 12 9 6\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 12, 6\nroll back, left: 10 12 9 6\n(12) / (10) = 6/5, left: (12 / 10) = 6/5, 9, 6\n(6/5) - (9) = -39/5, left: ((12 / 10) - 9) = -39/5, 6\nroll back, left: (12 / 10) = 6/5, 9, 6\nroll back, left: 10 12 9 6\n(10) - (12) = -2, left: (10 - 12) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (10 - 12)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (10 - 12))) = 24\nreach 24! expression: (6 - (9 * (10 - 12)))"}, {"input": "10 12 9 6\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (12 - 9)) = 30, 6\n(30) - (6) = 24, left: ((10 * (12 - 9)) - 6) = 24\nreach 24! expression: ((10 * (12 - 9)) - 6)"}, {"input": "10 12 9 6\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (12 - 9)) = 30, 6\n(30) - (6) = 24, left: ((10 * (12 - 9)) - 6) = 24\nreach 24! expression: ((10 * (12 - 9)) - 6)"}, {"input": "10 12 9 6\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (12 - 9)) = 30, 6\n(30) - (6) = 24, left: ((10 * (12 - 9)) - 6) = 24\nreach 24! expression: ((10 * (12 - 9)) - 6)"}, {"input": "7 8 13 11\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 13, 11\n(13) + (11) = 24, left: (13 + 11) = 24, (8 - 7) = 1\n(24) / (1) = 24, left: ((13 + 11) / (8 - 7)) = 24\nreach 24! expression: ((13 + 11) / (8 - 7))"}, {"input": "7 8 13 11\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 13, 11\n(13) / (1) = 13, left: (13 / (8 - 7)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 / (8 - 7))) = 24\nreach 24! expression: (11 + (13 / (8 - 7)))"}, {"input": "7 8 13 11\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 13, 11\n(11) * (-1) = -11, left: (11 * (7 - 8)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 * (7 - 8))) = 24\nreach 24! expression: (13 - (11 * (7 - 8)))"}, {"input": "7 8 13 11\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (13 - 8)) = 35, 11\n(35) - (11) = 24, left: ((7 * (13 - 8)) - 11) = 24\nreach 24! expression: ((7 * (13 - 8)) - 11)"}, {"input": "7 8 13 11\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 7, 8\n(8) - (7) = 1, left: (8 - 7) = 1, (13 + 11) = 24\n(24) * (1) = 24, left: ((13 + 11) * (8 - 7)) = 24\nreach 24! expression: ((13 + 11) * (8 - 7))"}, {"input": "7 8 13 11\n", "output": "(11) / (8) = 11/8, left: (11 / 8) = 11/8, 7, 13\nroll back, left: 7 8 13 11\n(8) - (11) = -3, left: (8 - 11) = -3, 7, 13\n(7) - (13) = -6, left: (7 - 13) = -6, (8 - 11) = -3\nroll back, left: (8 - 11) = -3, 7, 13\nroll back, left: 7 8 13 11\n(7) - (8) = -1, left: (7 - 8) = -1, 13, 11\n(11) * (-1) = -11, left: (11 * (7 - 8)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 * (7 - 8))) = 24\nreach 24! expression: (13 - (11 * (7 - 8)))"}, {"input": "7 8 13 11\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 8, 13\n(13) + (-4) = 9, left: (13 + (7 - 11)) = 9, 8\nroll back, left: (7 - 11) = -4, 8, 13\nroll back, left: 7 8 13 11\n(7) + (11) = 18, left: (7 + 11) = 18, 8, 13\nroll back, left: 7 8 13 11\n(13) - (8) = 5, left: (13 - 8) = 5, 7, 11\n(7) * (5) = 35, left: (7 * (13 - 8)) = 35, 11\n(35) - (11) = 24, left: ((7 * (13 - 8)) - 11) = 24\nreach 24! expression: ((7 * (13 - 8)) - 11)"}, {"input": "7 8 13 11\n", "output": "(7) * (11) = 77, left: (7 * 11) = 77, 8, 13\nroll back, left: 7 8 13 11\n(7) / (11) = 7/11, left: (7 / 11) = 7/11, 8, 13\nroll back, left: 7 8 13 11\n(7) - (11) = -4, left: (7 - 11) = -4, 8, 13\nroll back, left: 7 8 13 11\n(13) + (11) = 24, left: (13 + 11) = 24, 7, 8\n(8) - (7) = 1, left: (8 - 7) = 1, (13 + 11) = 24\n(24) * (1) = 24, left: ((13 + 11) * (8 - 7)) = 24\nreach 24! expression: ((13 + 11) * (8 - 7))"}, {"input": "4 5 2 1\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 4, 2\n(2) - (-4) = 6, left: (2 - (1 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 - (1 - 5))) = 24\nreach 24! expression: (4 * (2 - (1 - 5)))"}, {"input": "4 5 2 1\n", "output": "(5) + (2) = 7, left: (5 + 2) = 7, 4, 1\n(7) - (1) = 6, left: ((5 + 2) - 1) = 6, 4\n(4) * (6) = 24, left: (4 * ((5 + 2) - 1)) = 24\nreach 24! expression: (4 * ((5 + 2) - 1))"}, {"input": "4 5 2 1\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (2 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (2 - 1))) = 24\nreach 24! expression: (4 * (5 + (2 - 1)))"}, {"input": "4 5 2 1\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 4, 2\n(2) + (4) = 6, left: (2 + (5 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 + (5 - 1))) = 24\nreach 24! expression: (4 * (2 + (5 - 1)))"}, {"input": "4 5 2 1\n", "output": "(2) * (1) = 2, left: (2 * 1) = 2, 4, 5\nroll back, left: 4 5 2 1\n(2) + (1) = 3, left: (2 + 1) = 3, 4, 5\nroll back, left: 4 5 2 1\n(2) - (1) = 1, left: (2 - 1) = 1, 4, 5\n(1) / (5) = 1/5, left: ((2 - 1) / 5) = 1/5, 4\nroll back, left: (2 - 1) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (2 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (2 - 1))) = 24\nreach 24! expression: (4 * (5 + (2 - 1)))"}, {"input": "4 5 2 1\n", "output": "(5) * (1) = 5, left: (5 * 1) = 5, 4, 2\nroll back, left: 4 5 2 1\n(5) + (1) = 6, left: (5 + 1) = 6, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (5 + 1) = 6\nroll back, left: (5 + 1) = 6, 4, 2\nroll back, left: 4 5 2 1\n(5) - (1) = 4, left: (5 - 1) = 4, 4, 2\n(2) + (4) = 6, left: (2 + (5 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 + (5 - 1))) = 24\nreach 24! expression: (4 * (2 + (5 - 1)))"}, {"input": "4 5 2 1\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 4, 1\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, (2 - 5) = -3\nroll back, left: (2 - 5) = -3, 4, 1\nroll back, left: 4 5 2 1\n(5) + (2) = 7, left: (5 + 2) = 7, 4, 1\n(4) / (7) = 4/7, left: (4 / (5 + 2)) = 4/7, 1\nroll back, left: (5 + 2) = 7, 4, 1\n(7) - (1) = 6, left: ((5 + 2) - 1) = 6, 4\n(4) * (6) = 24, left: (4 * ((5 + 2) - 1)) = 24\nreach 24! expression: (4 * ((5 + 2) - 1))"}, {"input": "4 5 2 1\n", "output": "(5) * (1) = 5, left: (5 * 1) = 5, 4, 2\n(2) + (5) = 7, left: (2 + (5 * 1)) = 7, 4\nroll back, left: (5 * 1) = 5, 4, 2\n(5) - (4) = 1, left: ((5 * 1) - 4) = 1, 2\nroll back, left: (5 * 1) = 5, 4, 2\nroll back, left: 4 5 2 1\n(1) - (5) = -4, left: (1 - 5) = -4, 4, 2\n(2) - (-4) = 6, left: (2 - (1 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 - (1 - 5))) = 24\nreach 24! expression: (4 * (2 - (1 - 5)))"}, {"input": "4 5 2 1\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 2, 1\n(5/4) - (1) = 1/4, left: ((5 / 4) - 1) = 1/4, 2\nroll back, left: (5 / 4) = 5/4, 2, 1\nroll back, left: 4 5 2 1\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, 2, 1\nroll back, left: 4 5 2 1\n(5) - (1) = 4, left: (5 - 1) = 4, 4, 2\n(2) + (4) = 6, left: (2 + (5 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (2 + (5 - 1))) = 24\nreach 24! expression: (4 * (2 + (5 - 1)))"}, {"input": "2 8 1 9\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (8 * 9) = 72\n(72) / (3) = 24, left: ((8 * 9) / (2 + 1)) = 24\nreach 24! expression: ((8 * 9) / (2 + 1))"}, {"input": "2 8 1 9\n", "output": "(2) * (8) = 16, left: (2 * 8) = 16, 1, 9\n(9) - (1) = 8, left: (9 - 1) = 8, (2 * 8) = 16\n(16) + (8) = 24, left: ((2 * 8) + (9 - 1)) = 24\nreach 24! expression: ((2 * 8) + (9 - 1))"}, {"input": "2 8 1 9\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 8, 9\n(9) / (3) = 3, left: (9 / (2 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 / (2 + 1))) = 24\nreach 24! expression: (8 * (9 / (2 + 1)))"}, {"input": "2 8 1 9\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 8, 9\n(8) / (3) = 8/3, left: (8 / (2 + 1)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (8 / (2 + 1))) = 24\nreach 24! expression: (9 * (8 / (2 + 1)))"}, {"input": "2 8 1 9\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 2, 8\n(2) * (8) = 16, left: (2 * (9 - 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (2 * (9 - 1))) = 24\nreach 24! expression: (8 + (2 * (9 - 1)))"}, {"input": "2 8 1 9\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 2, 8\n(9) - (2) = 7, left: ((9 / 1) - 2) = 7, 8\nroll back, left: (9 / 1) = 9, 2, 8\n(2) - (8) = -6, left: (2 - 8) = -6, (9 / 1) = 9\nroll back, left: (9 / 1) = 9, 2, 8\nroll back, left: 2 8 1 9\n(9) - (1) = 8, left: (9 - 1) = 8, 2, 8\n(2) * (8) = 16, left: (2 * (9 - 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (2 * (9 - 1))) = 24\nreach 24! expression: (8 + (2 * (9 - 1)))"}, {"input": "2 8 1 9\n", "output": "(2) * (1) = 2, left: (2 * 1) = 2, 8, 9\nroll back, left: 2 8 1 9\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 8, 9\nroll back, left: 2 8 1 9\n(2) - (1) = 1, left: (2 - 1) = 1, 8, 9\nroll back, left: 2 8 1 9\n(2) + (1) = 3, left: (2 + 1) = 3, 8, 9\n(9) / (3) = 3, left: (9 / (2 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 / (2 + 1))) = 24\nreach 24! expression: (8 * (9 / (2 + 1)))"}, {"input": "2 8 1 9\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 1, 9\nroll back, left: 2 8 1 9\n(8) - (2) = 6, left: (8 - 2) = 6, 1, 9\nroll back, left: 2 8 1 9\n(8) / (2) = 4, left: (8 / 2) = 4, 1, 9\nroll back, left: 2 8 1 9\n(2) * (8) = 16, left: (2 * 8) = 16, 1, 9\n(9) - (1) = 8, left: (9 - 1) = 8, (2 * 8) = 16\n(16) + (8) = 24, left: ((2 * 8) + (9 - 1)) = 24\nreach 24! expression: ((2 * 8) + (9 - 1))"}, {"input": "2 8 1 9\n", "output": "(8) / (9) = 8/9, left: (8 / 9) = 8/9, 2, 1\nroll back, left: 2 8 1 9\n(8) - (9) = -1, left: (8 - 9) = -1, 2, 1\nroll back, left: 2 8 1 9\n(9) - (8) = 1, left: (9 - 8) = 1, 2, 1\nroll back, left: 2 8 1 9\n(8) * (9) = 72, left: (8 * 9) = 72, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (8 * 9) = 72\n(72) / (3) = 24, left: ((8 * 9) / (2 + 1)) = 24\nreach 24! expression: ((8 * 9) / (2 + 1))"}, {"input": "2 8 1 9\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 2, 9\n(2) / (-7) = -2/7, left: (2 / (1 - 8)) = -2/7, 9\nroll back, left: (1 - 8) = -7, 2, 9\nroll back, left: 2 8 1 9\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, 2, 9\nroll back, left: 2 8 1 9\n(2) + (1) = 3, left: (2 + 1) = 3, 8, 9\n(8) / (3) = 8/3, left: (8 / (2 + 1)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (8 / (2 + 1))) = 24\nreach 24! expression: (9 * (8 / (2 + 1)))"}, {"input": "2 8 1 10\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 2, 10\n(2) * (7) = 14, left: (2 * (8 - 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (8 - 1))) = 24\nreach 24! expression: (10 + (2 * (8 - 1)))"}, {"input": "2 8 1 10\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 2, 10\n(2) * (-7) = -14, left: (2 * (1 - 8)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (1 - 8))) = 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "2 8 1 10\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 8, 1\nroll back, left: 2 8 1 10\n(1) - (2) = -1, left: (1 - 2) = -1, 8, 10\nroll back, left: 2 8 1 10\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 8, 10\nroll back, left: 2 8 1 10\n(1) - (8) = -7, left: (1 - 8) = -7, 2, 10\n(2) * (-7) = -14, left: (2 * (1 - 8)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (1 - 8))) = 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "2 8 1 10\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 2, 10\n(10) - (2) = 8, left: (10 - 2) = 8, (8 / 1) = 8\nroll back, left: (8 / 1) = 8, 2, 10\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, (8 / 1) = 8\nroll back, left: (8 / 1) = 8, 2, 10\nroll back, left: 2 8 1 10\n(1) - (8) = -7, left: (1 - 8) = -7, 2, 10\n(2) * (-7) = -14, left: (2 * (1 - 8)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (1 - 8))) = 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "2 8 1 10\n", "output": "(10) / (8) = 5/4, left: (10 / 8) = 5/4, 2, 1\n(5/4) / (2) = 5/8, left: ((10 / 8) / 2) = 5/8, 1\nroll back, left: (10 / 8) = 5/4, 2, 1\nroll back, left: 2 8 1 10\n(2) - (10) = -8, left: (2 - 10) = -8, 8, 1\nroll back, left: 2 8 1 10\n(8) - (1) = 7, left: (8 - 1) = 7, 2, 10\n(2) * (7) = 14, left: (2 * (8 - 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (8 - 1))) = 24\nreach 24! expression: (10 + (2 * (8 - 1)))"}, {"input": "2 8 1 10\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 8, 1\n(5) / (1) = 5, left: ((10 / 2) / 1) = 5, 8\nroll back, left: (10 / 2) = 5, 8, 1\nroll back, left: 2 8 1 10\n(10) - (2) = 8, left: (10 - 2) = 8, 8, 1\nroll back, left: 2 8 1 10\n(1) - (8) = -7, left: (1 - 8) = -7, 2, 10\n(2) * (-7) = -14, left: (2 * (1 - 8)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (1 - 8))) = 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "2 8 1 10\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 2, 1\nroll back, left: 2 8 1 10\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, 8, 1\n(1/5) - (8) = -39/5, left: ((2 / 10) - 8) = -39/5, 1\nroll back, left: (2 / 10) = 1/5, 8, 1\nroll back, left: 2 8 1 10\n(1) - (8) = -7, left: (1 - 8) = -7, 2, 10\n(2) * (-7) = -14, left: (2 * (1 - 8)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (1 - 8))) = 24\nreach 24! expression: (10 - (2 * (1 - 8)))"}, {"input": "10 9 11 3\n", "output": "(10) + (9) = 19, left: (10 + 9) = 19, 11, 3\n(19) - (11) = 8, left: ((10 + 9) - 11) = 8, 3\n(3) * (8) = 24, left: (3 * ((10 + 9) - 11)) = 24\nreach 24! expression: (3 * ((10 + 9) - 11))"}, {"input": "10 9 11 3\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (11 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (11 - 9))) = 24\nreach 24! expression: (3 * (10 - (11 - 9)))"}, {"input": "10 9 11 3\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 9, 3\n(9) + (-1) = 8, left: (9 + (10 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 + (10 - 11))) = 24\nreach 24! expression: (3 * (9 + (10 - 11)))"}, {"input": "10 9 11 3\n", "output": "(3) / (10) = 3/10, left: (3 / 10) = 3/10, 9, 11\n(9) * (3/10) = 27/10, left: (9 * (3 / 10)) = 27/10, 11\nroll back, left: (3 / 10) = 3/10, 9, 11\nroll back, left: 10 9 11 3\n(3) - (10) = -7, left: (3 - 10) = -7, 9, 11\nroll back, left: 10 9 11 3\n(10) - (11) = -1, left: (10 - 11) = -1, 9, 3\n(9) + (-1) = 8, left: (9 + (10 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 + (10 - 11))) = 24\nreach 24! expression: (3 * (9 + (10 - 11)))"}, {"input": "10 9 11 3\n", "output": "(10) * (3) = 30, left: (10 * 3) = 30, 9, 11\nroll back, left: 10 9 11 3\n(10) - (3) = 7, left: (10 - 3) = 7, 9, 11\nroll back, left: 10 9 11 3\n(11) - (3) = 8, left: (11 - 3) = 8, 10, 9\nroll back, left: 10 9 11 3\n(11) - (9) = 2, left: (11 - 9) = 2, 10, 3\n(10) - (2) = 8, left: (10 - (11 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (11 - 9))) = 24\nreach 24! expression: (3 * (10 - (11 - 9)))"}, {"input": "10 9 11 3\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 11, 3\nroll back, left: 10 9 11 3\n(10) * (9) = 90, left: (10 * 9) = 90, 11, 3\nroll back, left: 10 9 11 3\n(10) + (9) = 19, left: (10 + 9) = 19, 11, 3\n(11) + (19) = 30, left: (11 + (10 + 9)) = 30, 3\nroll back, left: (10 + 9) = 19, 11, 3\n(19) - (11) = 8, left: ((10 + 9) - 11) = 8, 3\n(3) * (8) = 24, left: (3 * ((10 + 9) - 11)) = 24\nreach 24! expression: (3 * ((10 + 9) - 11))"}, {"input": "2 2 12 9\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (2 + 2)) = 36, 12\n(36) - (12) = 24, left: ((9 * (2 + 2)) - 12) = 24\nreach 24! expression: ((9 * (2 + 2)) - 12)"}, {"input": "2 2 12 9\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (2 * 2)) = 36, 12\n(36) - (12) = 24, left: ((9 * (2 * 2)) - 12) = 24\nreach 24! expression: ((9 * (2 * 2)) - 12)"}, {"input": "2 2 12 9\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (12 / 2) = 6\n(6) + (18) = 24, left: ((12 / 2) + (2 * 9)) = 24\nreach 24! expression: ((12 / 2) + (2 * 9))"}, {"input": "2 2 12 9\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 2, 12\n(2) * (18) = 36, left: (2 * (2 * 9)) = 36, 12\n(36) - (12) = 24, left: ((2 * (2 * 9)) - 12) = 24\nreach 24! expression: ((2 * (2 * 9)) - 12)"}, {"input": "2 2 12 9\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 12, 9\n(12) * (9) = 108, left: (12 * 9) = 108, (2 - 2) = 0\nroll back, left: (2 - 2) = 0, 12, 9\nroll back, left: 2 2 12 9\n(2) / (2) = 1, left: (2 / 2) = 1, 12, 9\nroll back, left: 2 2 12 9\n(2) + (2) = 4, left: (2 + 2) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (2 + 2)) = 36, 12\n(36) - (12) = 24, left: ((9 * (2 + 2)) - 12) = 24\nreach 24! expression: ((9 * (2 + 2)) - 12)"}, {"input": "2 2 12 9\n", "output": "(12) * (9) = 108, left: (12 * 9) = 108, 2, 2\nroll back, left: 2 2 12 9\n(12) / (9) = 4/3, left: (12 / 9) = 4/3, 2, 2\n(4/3) / (2) = 2/3, left: ((12 / 9) / 2) = 2/3, 2\nroll back, left: (12 / 9) = 4/3, 2, 2\nroll back, left: 2 2 12 9\n(2) * (9) = 18, left: (2 * 9) = 18, 2, 12\n(2) * (18) = 36, left: (2 * (2 * 9)) = 36, 12\n(36) - (12) = 24, left: ((2 * (2 * 9)) - 12) = 24\nreach 24! expression: ((2 * (2 * 9)) - 12)"}, {"input": "2 2 12 9\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 2, 12\n(2) * (-7) = -14, left: (2 * (2 - 9)) = -14, 12\n(-14) / (12) = -7/6, left: ((2 * (2 - 9)) / 12) = -7/6\nroll back, left: (2 * (2 - 9)) = -14, 12\nroll back, left: (2 - 9) = -7, 2, 12\nroll back, left: 2 2 12 9\n(2) * (9) = 18, left: (2 * 9) = 18, 2, 12\n(2) * (18) = 36, left: (2 * (2 * 9)) = 36, 12\n(36) - (12) = 24, left: ((2 * (2 * 9)) - 12) = 24\nreach 24! expression: ((2 * (2 * 9)) - 12)"}, {"input": "2 2 12 9\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 12, 9\nroll back, left: 2 2 12 9\n(2) / (2) = 1, left: (2 / 2) = 1, 12, 9\n(9) - (1) = 8, left: (9 - (2 / 2)) = 8, 12\nroll back, left: (2 / 2) = 1, 12, 9\nroll back, left: 2 2 12 9\n(2) * (2) = 4, left: (2 * 2) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (2 * 2)) = 36, 12\n(36) - (12) = 24, left: ((9 * (2 * 2)) - 12) = 24\nreach 24! expression: ((9 * (2 * 2)) - 12)"}, {"input": "2 2 12 9\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 2, 2\nroll back, left: 2 2 12 9\n(2) * (12) = 24, left: (2 * 12) = 24, 2, 9\n(2) * (24) = 48, left: (2 * (2 * 12)) = 48, 9\nroll back, left: (2 * 12) = 24, 2, 9\nroll back, left: 2 2 12 9\n(12) / (2) = 6, left: (12 / 2) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (12 / 2) = 6\n(6) + (18) = 24, left: ((12 / 2) + (2 * 9)) = 24\nreach 24! expression: ((12 / 2) + (2 * 9))"}, {"input": "2 12 6 2\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 6, 2\n(6) - (2) = 4, left: ((12 / 2) - 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 / 2) - 2)) = 24\nreach 24! expression: (6 * ((12 / 2) - 2))"}, {"input": "2 12 6 2\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 6, 2\n(6) - (2) = 4, left: (6 - 2) = 4, (12 / 2) = 6\n(6) * (4) = 24, left: ((12 / 2) * (6 - 2)) = 24\nreach 24! expression: ((12 / 2) * (6 - 2))"}, {"input": "2 12 6 2\n", "output": "(2) / (12) = 1/6, left: (2 / 12) = 1/6, 2, 6\n(6) - (2) = 4, left: (6 - 2) = 4, (2 / 12) = 1/6\n(4) / (1/6) = 24, left: ((6 - 2) / (2 / 12)) = 24\nreach 24! expression: ((6 - 2) / (2 / 12))"}, {"input": "2 12 6 2\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 12, 2\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, (6 - 2) = 4\n(4) / (1/6) = 24, left: ((6 - 2) / (2 / 12)) = 24\nreach 24! expression: ((6 - 2) / (2 / 12))"}, {"input": "2 12 6 2\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 12, 2\n(4) / (2) = 2, left: ((6 - 2) / 2) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 - 2) / 2)) = 24\nreach 24! expression: (12 * ((6 - 2) / 2))"}, {"input": "2 12 6 2\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 6, 2\n(6) / (2) = 3, left: ((12 / 2) / 2) = 3, 6\n(3) / (6) = 1/2, left: (((12 / 2) / 2) / 6) = 1/2\nroll back, left: ((12 / 2) / 2) = 3, 6\nroll back, left: (12 / 2) = 6, 6, 2\n(2) - (6) = -4, left: (2 - (12 / 2)) = -4, 6\nroll back, left: (12 / 2) = 6, 6, 2\n(6) - (2) = 4, left: ((12 / 2) - 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 / 2) - 2)) = 24\nreach 24! expression: (6 * ((12 / 2) - 2))"}, {"input": "2 12 6 2\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 12, 2\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, (6 / 2) = 3\nroll back, left: (6 / 2) = 3, 12, 2\nroll back, left: 2 12 6 2\n(2) - (6) = -4, left: (2 - 6) = -4, 12, 2\nroll back, left: 2 12 6 2\n(6) - (2) = 4, left: (6 - 2) = 4, 12, 2\n(4) / (2) = 2, left: ((6 - 2) / 2) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 - 2) / 2)) = 24\nreach 24! expression: (12 * ((6 - 2) / 2))"}, {"input": "1 7 1 5\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (7 + 5) = 12\n(12) * (2) = 24, left: ((7 + 5) * (1 + 1)) = 24\nreach 24! expression: ((7 + 5) * (1 + 1))"}, {"input": "1 7 1 5\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (1 + 1) = 2\n(2) * (12) = 24, left: ((1 + 1) * (7 + 5)) = 24\nreach 24! expression: ((1 + 1) * (7 + 5))"}, {"input": "1 7 1 5\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (7 - 1)) = 24\nreach 24! expression: ((5 - 1) * (7 - 1))"}, {"input": "1 7 1 5\n", "output": "(1) - (1) = 0, left: (1 - 1) = 0, 7, 5\n(7) + (0) = 7, left: (7 + (1 - 1)) = 7, 5\nroll back, left: (1 - 1) = 0, 7, 5\nroll back, left: 1 7 1 5\n(1) + (1) = 2, left: (1 + 1) = 2, 7, 5\n(2) - (5) = -3, left: ((1 + 1) - 5) = -3, 7\nroll back, left: (1 + 1) = 2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (1 + 1) = 2\n(2) * (12) = 24, left: ((1 + 1) * (7 + 5)) = 24\nreach 24! expression: ((1 + 1) * (7 + 5))"}, {"input": "1 7 1 5\n", "output": "(7) / (5) = 7/5, left: (7 / 5) = 7/5, 1, 1\n(7/5) - (1) = 2/5, left: ((7 / 5) - 1) = 2/5, 1\n(1) - (2/5) = 3/5, left: (1 - ((7 / 5) - 1)) = 3/5\nroll back, left: ((7 / 5) - 1) = 2/5, 1\nroll back, left: (7 / 5) = 7/5, 1, 1\nroll back, left: 1 7 1 5\n(7) + (5) = 12, left: (7 + 5) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (7 + 5) = 12\n(12) * (2) = 24, left: ((7 + 5) * (1 + 1)) = 24\nreach 24! expression: ((7 + 5) * (1 + 1))"}, {"input": "1 7 1 5\n", "output": "(7) / (5) = 7/5, left: (7 / 5) = 7/5, 1, 1\nroll back, left: 1 7 1 5\n(7) + (5) = 12, left: (7 + 5) = 12, 1, 1\n(1) - (12) = -11, left: (1 - (7 + 5)) = -11, 1\n(-11) / (1) = -11, left: ((1 - (7 + 5)) / 1) = -11\nroll back, left: (1 - (7 + 5)) = -11, 1\nroll back, left: (7 + 5) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (7 + 5) = 12\n(12) * (2) = 24, left: ((7 + 5) * (1 + 1)) = 24\nreach 24! expression: ((7 + 5) * (1 + 1))"}, {"input": "1 7 1 5\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 1, 7\nroll back, left: 1 7 1 5\n(1) + (5) = 6, left: (1 + 5) = 6, 1, 7\n(1) * (6) = 6, left: (1 * (1 + 5)) = 6, 7\nroll back, left: (1 + 5) = 6, 1, 7\nroll back, left: 1 7 1 5\n(5) - (1) = 4, left: (5 - 1) = 4, 1, 7\n(7) - (1) = 6, left: (7 - 1) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (7 - 1)) = 24\nreach 24! expression: ((5 - 1) * (7 - 1))"}, {"input": "1 7 1 5\n", "output": "(1) * (1) = 1, left: (1 * 1) = 1, 7, 5\n(1) - (7) = -6, left: ((1 * 1) - 7) = -6, 5\nroll back, left: (1 * 1) = 1, 7, 5\n(5) / (7) = 5/7, left: (5 / 7) = 5/7, (1 * 1) = 1\nroll back, left: (1 * 1) = 1, 7, 5\nroll back, left: 1 7 1 5\n(1) + (1) = 2, left: (1 + 1) = 2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (1 + 1) = 2\n(2) * (12) = 24, left: ((1 + 1) * (7 + 5)) = 24\nreach 24! expression: ((1 + 1) * (7 + 5))"}, {"input": "10 2 2 4\n", "output": "(10) + (2) = 12, left: (10 + 2) = 12, 2, 4\n(4) * (12) = 48, left: (4 * (10 + 2)) = 48, 2\n(48) / (2) = 24, left: ((4 * (10 + 2)) / 2) = 24\nreach 24! expression: ((4 * (10 + 2)) / 2)"}, {"input": "10 2 2 4\n", "output": "(10) + (4) = 14, left: (10 + 4) = 14, 2, 2\n(14) - (2) = 12, left: ((10 + 4) - 2) = 12, 2\n(2) * (12) = 24, left: (2 * ((10 + 4) - 2)) = 24\nreach 24! expression: (2 * ((10 + 4) - 2))"}, {"input": "10 2 2 4\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 10, 2\n(10) - (-2) = 12, left: (10 - (2 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (10 - (2 - 4))) = 24\nreach 24! expression: (2 * (10 - (2 - 4)))"}, {"input": "10 2 2 4\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 2, 4\n(4) + (8) = 12, left: (4 + (10 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (4 + (10 - 2))) = 24\nreach 24! expression: (2 * (4 + (10 - 2)))"}, {"input": "10 2 2 4\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 2, 4\nroll back, left: 10 2 2 4\n(10) - (2) = 8, left: (10 - 2) = 8, 2, 4\n(8) / (4) = 2, left: ((10 - 2) / 4) = 2, 2\n(2) - (2) = 0, left: (2 - ((10 - 2) / 4)) = 0\nroll back, left: ((10 - 2) / 4) = 2, 2\nroll back, left: (10 - 2) = 8, 2, 4\n(4) + (8) = 12, left: (4 + (10 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (4 + (10 - 2))) = 24\nreach 24! expression: (2 * (4 + (10 - 2)))"}, {"input": "10 2 2 4\n", "output": "(10) + (4) = 14, left: (10 + 4) = 14, 2, 2\n(14) / (2) = 7, left: ((10 + 4) / 2) = 7, 2\nroll back, left: (10 + 4) = 14, 2, 2\n(2) + (14) = 16, left: (2 + (10 + 4)) = 16, 2\nroll back, left: (10 + 4) = 14, 2, 2\n(2) - (14) = -12, left: (2 - (10 + 4)) = -12, 2\nroll back, left: (10 + 4) = 14, 2, 2\n(14) - (2) = 12, left: ((10 + 4) - 2) = 12, 2\n(2) * (12) = 24, left: (2 * ((10 + 4) - 2)) = 24\nreach 24! expression: (2 * ((10 + 4) - 2))"}, {"input": "10 2 2 4\n", "output": "(2) * (4) = 8, left: (2 * 4) = 8, 10, 2\n(10) + (8) = 18, left: (10 + (2 * 4)) = 18, 2\n(18) / (2) = 9, left: ((10 + (2 * 4)) / 2) = 9\nroll back, left: (10 + (2 * 4)) = 18, 2\nroll back, left: (2 * 4) = 8, 10, 2\nroll back, left: 10 2 2 4\n(2) - (4) = -2, left: (2 - 4) = -2, 10, 2\n(10) - (-2) = 12, left: (10 - (2 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (10 - (2 - 4))) = 24\nreach 24! expression: (2 * (10 - (2 - 4)))"}, {"input": "10 2 2 4\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 2, 4\n(20) / (4) = 5, left: ((10 * 2) / 4) = 5, 2\n(5) - (2) = 3, left: (((10 * 2) / 4) - 2) = 3\nroll back, left: ((10 * 2) / 4) = 5, 2\nroll back, left: (10 * 2) = 20, 2, 4\nroll back, left: 10 2 2 4\n(10) + (2) = 12, left: (10 + 2) = 12, 2, 4\n(4) * (12) = 48, left: (4 * (10 + 2)) = 48, 2\n(48) / (2) = 24, left: ((4 * (10 + 2)) / 2) = 24\nreach 24! expression: ((4 * (10 + 2)) / 2)"}, {"input": "10 2 2 4\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 2, 4\n(8) / (4) = 2, left: ((10 - 2) / 4) = 2, 2\n(2) / (2) = 1, left: (((10 - 2) / 4) / 2) = 1\nroll back, left: ((10 - 2) / 4) = 2, 2\nroll back, left: (10 - 2) = 8, 2, 4\n(4) / (8) = 1/2, left: (4 / (10 - 2)) = 1/2, 2\nroll back, left: (10 - 2) = 8, 2, 4\n(4) + (8) = 12, left: (4 + (10 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (4 + (10 - 2))) = 24\nreach 24! expression: (2 * (4 + (10 - 2)))"}, {"input": "8 5 5 12\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 8, 12\n(10) - (8) = 2, left: ((5 + 5) - 8) = 2, 12\n(12) * (2) = 24, left: (12 * ((5 + 5) - 8)) = 24\nreach 24! expression: (12 * ((5 + 5) - 8))"}, {"input": "8 5 5 12\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 5, 12\n(5) - (3) = 2, left: (5 - (8 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (8 - 5))) = 24\nreach 24! expression: (12 * (5 - (8 - 5)))"}, {"input": "8 5 5 12\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 5, 12\n(5) + (-3) = 2, left: (5 + (5 - 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 + (5 - 8))) = 24\nreach 24! expression: (12 * (5 + (5 - 8)))"}, {"input": "8 5 5 12\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 5, 12\n(12) / (-3) = -4, left: (12 / (5 - 8)) = -4, 5\n(5) - (-4) = 9, left: (5 - (12 / (5 - 8))) = 9\nroll back, left: (12 / (5 - 8)) = -4, 5\nroll back, left: (5 - 8) = -3, 5, 12\n(-3) / (5) = -3/5, left: ((5 - 8) / 5) = -3/5, 12\nroll back, left: (5 - 8) = -3, 5, 12\n(5) + (-3) = 2, left: (5 + (5 - 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 + (5 - 8))) = 24\nreach 24! expression: (12 * (5 + (5 - 8)))"}, {"input": "8 5 5 12\n", "output": "(5) + (12) = 17, left: (5 + 12) = 17, 8, 5\nroll back, left: 8 5 5 12\n(5) / (12) = 5/12, left: (5 / 12) = 5/12, 8, 5\n(5) - (5/12) = 55/12, left: (5 - (5 / 12)) = 55/12, 8\nroll back, left: (5 / 12) = 5/12, 8, 5\nroll back, left: 8 5 5 12\n(8) - (5) = 3, left: (8 - 5) = 3, 5, 12\n(5) - (3) = 2, left: (5 - (8 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (8 - 5))) = 24\nreach 24! expression: (12 * (5 - (8 - 5)))"}, {"input": "8 5 5 12\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 5, 12\n(12) - (3) = 9, left: (12 - (8 - 5)) = 9, 5\nroll back, left: (8 - 5) = 3, 5, 12\n(12) * (3) = 36, left: (12 * (8 - 5)) = 36, 5\nroll back, left: (8 - 5) = 3, 5, 12\n(3) / (12) = 1/4, left: ((8 - 5) / 12) = 1/4, 5\nroll back, left: (8 - 5) = 3, 5, 12\n(5) - (3) = 2, left: (5 - (8 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (8 - 5))) = 24\nreach 24! expression: (12 * (5 - (8 - 5)))"}, {"input": "8 5 5 12\n", "output": "(5) + (12) = 17, left: (5 + 12) = 17, 8, 5\nroll back, left: 8 5 5 12\n(5) * (5) = 25, left: (5 * 5) = 25, 8, 12\nroll back, left: 8 5 5 12\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 12\nroll back, left: 8 5 5 12\n(5) + (5) = 10, left: (5 + 5) = 10, 8, 12\n(10) - (8) = 2, left: ((5 + 5) - 8) = 2, 12\n(12) * (2) = 24, left: (12 * ((5 + 5) - 8)) = 24\nreach 24! expression: (12 * ((5 + 5) - 8))"}, {"input": "8 5 5 12\n", "output": "(5) + (12) = 17, left: (5 + 12) = 17, 8, 5\nroll back, left: 8 5 5 12\n(5) / (12) = 5/12, left: (5 / 12) = 5/12, 8, 5\n(5) + (5/12) = 65/12, left: (5 + (5 / 12)) = 65/12, 8\nroll back, left: (5 / 12) = 5/12, 8, 5\nroll back, left: 8 5 5 12\n(8) - (5) = 3, left: (8 - 5) = 3, 5, 12\n(5) - (3) = 2, left: (5 - (8 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (8 - 5))) = 24\nreach 24! expression: (12 * (5 - (8 - 5)))"}, {"input": "8 3 6 6\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 3, 6\n(3/4) / (6) = 1/8, left: ((6 / 8) / 6) = 1/8, 3\n(3) / (1/8) = 24, left: (3 / ((6 / 8) / 6)) = 24\nreach 24! expression: (3 / ((6 / 8) / 6))"}, {"input": "8 3 6 6\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 8, 6\n(8) * (18) = 144, left: (8 * (3 * 6)) = 144, 6\n(144) / (6) = 24, left: ((8 * (3 * 6)) / 6) = 24\nreach 24! expression: ((8 * (3 * 6)) / 6)"}, {"input": "8 3 6 6\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 3, 6\n(48) / (6) = 8, left: ((8 * 6) / 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((8 * 6) / 6)) = 24\nreach 24! expression: (3 * ((8 * 6) / 6))"}, {"input": "8 3 6 6\n", "output": "(8) * (3) = 24, left: (8 * 3) = 24, 6, 6\n(6) * (24) = 144, left: (6 * (8 * 3)) = 144, 6\n(144) / (6) = 24, left: ((6 * (8 * 3)) / 6) = 24\nreach 24! expression: ((6 * (8 * 3)) / 6)"}, {"input": "8 3 6 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 8, 3\n(3) + (0) = 3, left: (3 + (6 - 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 + (6 - 6))) = 24\nreach 24! expression: (8 * (3 + (6 - 6)))"}, {"input": "8 3 6 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 8, 3\n(3) * (0) = 0, left: (3 * (6 - 6)) = 0, 8\n(8) + (0) = 8, left: (8 + (3 * (6 - 6))) = 8\nroll back, left: (3 * (6 - 6)) = 0, 8\n(8) - (0) = 8, left: (8 - (3 * (6 - 6))) = 8\nroll back, left: (3 * (6 - 6)) = 0, 8\nroll back, left: (6 - 6) = 0, 8, 3\n(3) + (0) = 3, left: (3 + (6 - 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 + (6 - 6))) = 24\nreach 24! expression: (8 * (3 + (6 - 6)))"}, {"input": "8 3 6 6\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 6, 6\n(6) - (3/8) = 45/8, left: (6 - (3 / 8)) = 45/8, 6\nroll back, left: (3 / 8) = 3/8, 6, 6\nroll back, left: 8 3 6 6\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 6, 6\nroll back, left: 8 3 6 6\n(8) * (3) = 24, left: (8 * 3) = 24, 6, 6\n(6) * (24) = 144, left: (6 * (8 * 3)) = 144, 6\n(144) / (6) = 24, left: ((6 * (8 * 3)) / 6) = 24\nreach 24! expression: ((6 * (8 * 3)) / 6)"}, {"input": "8 3 6 6\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 3, 6\n(48) / (6) = 8, left: ((8 * 6) / 6) = 8, 3\n(3) + (8) = 11, left: (3 + ((8 * 6) / 6)) = 11\nroll back, left: ((8 * 6) / 6) = 8, 3\n(8) - (3) = 5, left: (((8 * 6) / 6) - 3) = 5\nroll back, left: ((8 * 6) / 6) = 8, 3\n(8) / (3) = 8/3, left: (((8 * 6) / 6) / 3) = 8/3\nroll back, left: ((8 * 6) / 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((8 * 6) / 6)) = 24\nreach 24! expression: (3 * ((8 * 6) / 6))"}, {"input": "8 3 6 6\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 8, 6\n(18) - (8) = 10, left: ((3 * 6) - 8) = 10, 6\nroll back, left: (3 * 6) = 18, 8, 6\n(18) / (8) = 9/4, left: ((3 * 6) / 8) = 9/4, 6\nroll back, left: (3 * 6) = 18, 8, 6\n(8) + (18) = 26, left: (8 + (3 * 6)) = 26, 6\nroll back, left: (3 * 6) = 18, 8, 6\n(8) * (18) = 144, left: (8 * (3 * 6)) = 144, 6\n(144) / (6) = 24, left: ((8 * (3 * 6)) / 6) = 24\nreach 24! expression: ((8 * (3 * 6)) / 6)"}, {"input": "2 10 3 2\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (10 + 3)) = 26, 2\n(26) - (2) = 24, left: ((2 * (10 + 3)) - 2) = 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 2, 3\nroll back, left: 2 10 3 2\n(10) * (2) = 20, left: (10 * 2) = 20, 2, 3\n(20) / (2) = 10, left: ((10 * 2) / 2) = 10, 3\nroll back, left: (10 * 2) = 20, 2, 3\nroll back, left: 2 10 3 2\n(10) + (3) = 13, left: (10 + 3) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (10 + 3)) = 26, 2\n(26) - (2) = 24, left: ((2 * (10 + 3)) - 2) = 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 10, 3\nroll back, left: 2 10 3 2\n(2) * (2) = 4, left: (2 * 2) = 4, 10, 3\nroll back, left: 2 10 3 2\n(2) - (3) = -1, left: (2 - 3) = -1, 2, 10\nroll back, left: 2 10 3 2\n(10) + (3) = 13, left: (10 + 3) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (10 + 3)) = 26, 2\n(26) - (2) = 24, left: ((2 * (10 + 3)) - 2) = 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 2, 10\nroll back, left: 2 10 3 2\n(2) - (10) = -8, left: (2 - 10) = -8, 2, 3\nroll back, left: 2 10 3 2\n(3) - (10) = -7, left: (3 - 10) = -7, 2, 2\nroll back, left: 2 10 3 2\n(10) + (3) = 13, left: (10 + 3) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (10 + 3)) = 26, 2\n(26) - (2) = 24, left: ((2 * (10 + 3)) - 2) = 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 10, 3\nroll back, left: 2 10 3 2\n(10) + (2) = 12, left: (10 + 2) = 12, 2, 3\nroll back, left: 2 10 3 2\n(10) / (2) = 5, left: (10 / 2) = 5, 2, 3\nroll back, left: 2 10 3 2\n(10) + (3) = 13, left: (10 + 3) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (10 + 3)) = 26, 2\n(26) - (2) = 24, left: ((2 * (10 + 3)) - 2) = 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "2 10 3 2\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 2, 3\n(3) - (-8) = 11, left: (3 - (2 - 10)) = 11, 2\nroll back, left: (2 - 10) = -8, 2, 3\nroll back, left: 2 10 3 2\n(2) + (3) = 5, left: (2 + 3) = 5, 10, 2\nroll back, left: 2 10 3 2\n(10) + (3) = 13, left: (10 + 3) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (10 + 3)) = 26, 2\n(26) - (2) = 24, left: ((2 * (10 + 3)) - 2) = 24\nreach 24! expression: ((2 * (10 + 3)) - 2)"}, {"input": "6 13 6 12\n", "output": "(13) + (12) = 25, left: (13 + 12) = 25, 6, 6\n(6) / (6) = 1, left: (6 / 6) = 1, (13 + 12) = 25\n(25) - (1) = 24, left: ((13 + 12) - (6 / 6)) = 24\nreach 24! expression: ((13 + 12) - (6 / 6))"}, {"input": "6 13 6 12\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 13, 12\n(13) + (12) = 25, left: (13 + 12) = 25, (6 / 6) = 1\n(25) - (1) = 24, left: ((13 + 12) - (6 / 6)) = 24\nreach 24! expression: ((13 + 12) - (6 / 6))"}, {"input": "6 13 6 12\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 13, 12\n(1) - (12) = -11, left: ((6 / 6) - 12) = -11, 13\n(13) - (-11) = 24, left: (13 - ((6 / 6) - 12)) = 24\nreach 24! expression: (13 - ((6 / 6) - 12))"}, {"input": "6 13 6 12\n", "output": "(13) / (6) = 13/6, left: (13 / 6) = 13/6, 6, 12\nroll back, left: 6 13 6 12\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 6, 13\nroll back, left: 6 13 6 12\n(6) - (6) = 0, left: (6 - 6) = 0, 13, 12\nroll back, left: 6 13 6 12\n(6) / (6) = 1, left: (6 / 6) = 1, 13, 12\n(13) + (12) = 25, left: (13 + 12) = 25, (6 / 6) = 1\n(25) - (1) = 24, left: ((13 + 12) - (6 / 6)) = 24\nreach 24! expression: ((13 + 12) - (6 / 6))"}, {"input": "6 13 6 12\n", "output": "(13) * (6) = 78, left: (13 * 6) = 78, 6, 12\nroll back, left: 6 13 6 12\n(6) - (12) = -6, left: (6 - 12) = -6, 6, 13\nroll back, left: 6 13 6 12\n(12) - (6) = 6, left: (12 - 6) = 6, 6, 13\nroll back, left: 6 13 6 12\n(13) + (12) = 25, left: (13 + 12) = 25, 6, 6\n(6) / (6) = 1, left: (6 / 6) = 1, (13 + 12) = 25\n(25) - (1) = 24, left: ((13 + 12) - (6 / 6)) = 24\nreach 24! expression: ((13 + 12) - (6 / 6))"}, {"input": "6 13 6 12\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 6, 12\nroll back, left: 6 13 6 12\n(13) / (6) = 13/6, left: (13 / 6) = 13/6, 6, 12\nroll back, left: 6 13 6 12\n(6) - (13) = -7, left: (6 - 13) = -7, 6, 12\nroll back, left: 6 13 6 12\n(6) / (6) = 1, left: (6 / 6) = 1, 13, 12\n(1) - (12) = -11, left: ((6 / 6) - 12) = -11, 13\n(13) - (-11) = 24, left: (13 - ((6 / 6) - 12)) = 24\nreach 24! expression: (13 - ((6 / 6) - 12))"}, {"input": "6 13 6 12\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 6, 12\nroll back, left: 6 13 6 12\n(6) + (13) = 19, left: (6 + 13) = 19, 6, 12\nroll back, left: 6 13 6 12\n(13) / (6) = 13/6, left: (13 / 6) = 13/6, 6, 12\nroll back, left: 6 13 6 12\n(6) / (6) = 1, left: (6 / 6) = 1, 13, 12\n(13) + (12) = 25, left: (13 + 12) = 25, (6 / 6) = 1\n(25) - (1) = 24, left: ((13 + 12) - (6 / 6)) = 24\nreach 24! expression: ((13 + 12) - (6 / 6))"}, {"input": "3 5 2 7\n", "output": "(3) * (5) = 15, left: (3 * 5) = 15, 2, 7\n(7) + (15) = 22, left: (7 + (3 * 5)) = 22, 2\n(2) + (22) = 24, left: (2 + (7 + (3 * 5))) = 24\nreach 24! expression: (2 + (7 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(3) * (5) = 15, left: (3 * 5) = 15, 2, 7\n(2) + (15) = 17, left: (2 + (3 * 5)) = 17, 7\n(7) + (17) = 24, left: (7 + (2 + (3 * 5))) = 24\nreach 24! expression: (7 + (2 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 5, 2\n(21) - (2) = 19, left: ((3 * 7) - 2) = 19, 5\n(5) + (19) = 24, left: (5 + ((3 * 7) - 2)) = 24\nreach 24! expression: (5 + ((3 * 7) - 2))"}, {"input": "3 5 2 7\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 3, 5\n(3) * (5) = 15, left: (3 * 5) = 15, (2 + 7) = 9\n(9) + (15) = 24, left: ((2 + 7) + (3 * 5)) = 24\nreach 24! expression: ((2 + 7) + (3 * 5))"}, {"input": "3 5 2 7\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 3, 2\n(3) + (2) = 5, left: (3 + (7 - 5)) = 5, 2\nroll back, left: (7 - 5) = 2, 3, 2\nroll back, left: 3 5 2 7\n(5) * (7) = 35, left: (5 * 7) = 35, 3, 2\nroll back, left: 3 5 2 7\n(3) * (5) = 15, left: (3 * 5) = 15, 2, 7\n(7) + (15) = 22, left: (7 + (3 * 5)) = 22, 2\n(2) + (22) = 24, left: (2 + (7 + (3 * 5))) = 24\nreach 24! expression: (2 + (7 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(3) + (7) = 10, left: (3 + 7) = 10, 5, 2\n(5) - (10) = -5, left: (5 - (3 + 7)) = -5, 2\nroll back, left: (3 + 7) = 10, 5, 2\nroll back, left: 3 5 2 7\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 5, 2\nroll back, left: 3 5 2 7\n(3) * (7) = 21, left: (3 * 7) = 21, 5, 2\n(21) - (2) = 19, left: ((3 * 7) - 2) = 19, 5\n(5) + (19) = 24, left: (5 + ((3 * 7) - 2)) = 24\nreach 24! expression: (5 + ((3 * 7) - 2))"}, {"input": "3 5 2 7\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 2, 7\nroll back, left: 3 5 2 7\n(3) + (5) = 8, left: (3 + 5) = 8, 2, 7\n(2) / (7) = 2/7, left: (2 / 7) = 2/7, (3 + 5) = 8\nroll back, left: (3 + 5) = 8, 2, 7\nroll back, left: 3 5 2 7\n(3) * (5) = 15, left: (3 * 5) = 15, 2, 7\n(7) + (15) = 22, left: (7 + (3 * 5)) = 22, 2\n(2) + (22) = 24, left: (2 + (7 + (3 * 5))) = 24\nreach 24! expression: (2 + (7 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(3) * (5) = 15, left: (3 * 5) = 15, 2, 7\n(2) * (15) = 30, left: (2 * (3 * 5)) = 30, 7\n(30) / (7) = 30/7, left: ((2 * (3 * 5)) / 7) = 30/7\nroll back, left: (2 * (3 * 5)) = 30, 7\n(7) / (30) = 7/30, left: (7 / (2 * (3 * 5))) = 7/30\nroll back, left: (2 * (3 * 5)) = 30, 7\nroll back, left: (3 * 5) = 15, 2, 7\n(2) + (15) = 17, left: (2 + (3 * 5)) = 17, 7\n(7) + (17) = 24, left: (7 + (2 + (3 * 5))) = 24\nreach 24! expression: (7 + (2 + (3 * 5)))"}, {"input": "3 5 2 7\n", "output": "(2) / (3) = 2/3, left: (2 / 3) = 2/3, 5, 7\nroll back, left: 3 5 2 7\n(5) + (7) = 12, left: (5 + 7) = 12, 3, 2\n(3) + (12) = 15, left: (3 + (5 + 7)) = 15, 2\nroll back, left: (5 + 7) = 12, 3, 2\nroll back, left: 3 5 2 7\n(2) + (7) = 9, left: (2 + 7) = 9, 3, 5\n(3) * (5) = 15, left: (3 * 5) = 15, (2 + 7) = 9\n(9) + (15) = 24, left: ((2 + 7) + (3 * 5)) = 24\nreach 24! expression: ((2 + 7) + (3 * 5))"}, {"input": "3 11 2 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (3 - 2))) = 24\nreach 24! expression: (2 * (11 + (3 - 2)))"}, {"input": "3 11 2 2\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 11, 2\n(11) - (-1) = 12, left: (11 - (2 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 - (2 - 3))) = 24\nreach 24! expression: (2 * (11 - (2 - 3)))"}, {"input": "3 11 2 2\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 2, 2\n(14) - (2) = 12, left: ((3 + 11) - 2) = 12, 2\n(2) * (12) = 24, left: (2 * ((3 + 11) - 2)) = 24\nreach 24! expression: (2 * ((3 + 11) - 2))"}, {"input": "3 11 2 2\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 2, 2\n(2) - (14) = -12, left: (2 - (3 + 11)) = -12, 2\n(2) - (-12) = 14, left: (2 - (2 - (3 + 11))) = 14\nroll back, left: (2 - (3 + 11)) = -12, 2\n(-12) / (2) = -6, left: ((2 - (3 + 11)) / 2) = -6\nroll back, left: (2 - (3 + 11)) = -12, 2\nroll back, left: (3 + 11) = 14, 2, 2\n(14) - (2) = 12, left: ((3 + 11) - 2) = 12, 2\n(2) * (12) = 24, left: (2 * ((3 + 11) - 2)) = 24\nreach 24! expression: (2 * ((3 + 11) - 2))"}, {"input": "3 11 2 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 3, 11\n(3) * (1) = 3, left: (3 * (2 / 2)) = 3, 11\nroll back, left: (2 / 2) = 1, 3, 11\nroll back, left: 3 11 2 2\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, 11, 2\nroll back, left: 3 11 2 2\n(2) - (3) = -1, left: (2 - 3) = -1, 11, 2\n(11) - (-1) = 12, left: (11 - (2 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 - (2 - 3))) = 24\nreach 24! expression: (2 * (11 - (2 - 3)))"}, {"input": "3 11 2 2\n", "output": "(3) + (2) = 5, left: (3 + 2) = 5, 11, 2\nroll back, left: 3 11 2 2\n(3) * (2) = 6, left: (3 * 2) = 6, 11, 2\n(11) / (6) = 11/6, left: (11 / (3 * 2)) = 11/6, 2\nroll back, left: (3 * 2) = 6, 11, 2\nroll back, left: 3 11 2 2\n(2) - (3) = -1, left: (2 - 3) = -1, 11, 2\n(11) - (-1) = 12, left: (11 - (2 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 - (2 - 3))) = 24\nreach 24! expression: (2 * (11 - (2 - 3)))"}, {"input": "3 11 2 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 3, 11\nroll back, left: 3 11 2 2\n(2) - (2) = 0, left: (2 - 2) = 0, 3, 11\nroll back, left: 3 11 2 2\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 11, 2\nroll back, left: 3 11 2 2\n(2) - (3) = -1, left: (2 - 3) = -1, 11, 2\n(11) - (-1) = 12, left: (11 - (2 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 - (2 - 3))) = 24\nreach 24! expression: (2 * (11 - (2 - 3)))"}, {"input": "3 11 2 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 11, 2\n(2) / (1) = 2, left: (2 / (3 - 2)) = 2, 11\nroll back, left: (3 - 2) = 1, 11, 2\n(1) / (11) = 1/11, left: ((3 - 2) / 11) = 1/11, 2\nroll back, left: (3 - 2) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (3 - 2)) = 12, 2\n(12) - (2) = 10, left: ((11 + (3 - 2)) - 2) = 10\nroll back, left: (11 + (3 - 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (3 - 2))) = 24\nreach 24! expression: (2 * (11 + (3 - 2)))"}, {"input": "12 2 9 10\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 12, 2\n(2) / (1) = 2, left: (2 / (10 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 / (10 - 9))) = 24\nreach 24! expression: (12 * (2 / (10 - 9)))"}, {"input": "12 2 9 10\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 9, 10\n(10) - (9) = 1, left: (10 - 9) = 1, (12 * 2) = 24\n(24) / (1) = 24, left: ((12 * 2) / (10 - 9)) = 24\nreach 24! expression: ((12 * 2) / (10 - 9))"}, {"input": "12 2 9 10\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 9, 10\n(10) - (9) = 1, left: (10 - 9) = 1, (12 * 2) = 24\n(24) * (1) = 24, left: ((12 * 2) * (10 - 9)) = 24\nreach 24! expression: ((12 * 2) * (10 - 9))"}, {"input": "12 2 9 10\n", "output": "(10) / (12) = 5/6, left: (10 / 12) = 5/6, 2, 9\n(2) - (9) = -7, left: (2 - 9) = -7, (10 / 12) = 5/6\nroll back, left: (10 / 12) = 5/6, 2, 9\nroll back, left: 12 2 9 10\n(10) - (12) = -2, left: (10 - 12) = -2, 2, 9\nroll back, left: 12 2 9 10\n(10) - (9) = 1, left: (10 - 9) = 1, 12, 2\n(2) / (1) = 2, left: (2 / (10 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (2 / (10 - 9))) = 24\nreach 24! expression: (12 * (2 / (10 - 9)))"}, {"input": "12 2 9 10\n", "output": "(12) + (10) = 22, left: (12 + 10) = 22, 2, 9\n(2) - (22) = -20, left: (2 - (12 + 10)) = -20, 9\nroll back, left: (12 + 10) = 22, 2, 9\nroll back, left: 12 2 9 10\n(12) - (2) = 10, left: (12 - 2) = 10, 9, 10\nroll back, left: 12 2 9 10\n(12) * (2) = 24, left: (12 * 2) = 24, 9, 10\n(10) - (9) = 1, left: (10 - 9) = 1, (12 * 2) = 24\n(24) * (1) = 24, left: ((12 * 2) * (10 - 9)) = 24\nreach 24! expression: ((12 * 2) * (10 - 9))"}, {"input": "12 2 9 10\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 2, 9\nroll back, left: 12 2 9 10\n(12) * (10) = 120, left: (12 * 10) = 120, 2, 9\nroll back, left: 12 2 9 10\n(12) + (10) = 22, left: (12 + 10) = 22, 2, 9\nroll back, left: 12 2 9 10\n(12) * (2) = 24, left: (12 * 2) = 24, 9, 10\n(10) - (9) = 1, left: (10 - 9) = 1, (12 * 2) = 24\n(24) / (1) = 24, left: ((12 * 2) / (10 - 9)) = 24\nreach 24! expression: ((12 * 2) / (10 - 9))"}, {"input": "12 2 9 10\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 9, 10\nroll back, left: 12 2 9 10\n(12) - (2) = 10, left: (12 - 2) = 10, 9, 10\n(10) - (10) = 0, left: ((12 - 2) - 10) = 0, 9\nroll back, left: (12 - 2) = 10, 9, 10\nroll back, left: 12 2 9 10\n(12) * (2) = 24, left: (12 * 2) = 24, 9, 10\n(10) - (9) = 1, left: (10 - 9) = 1, (12 * 2) = 24\n(24) / (1) = 24, left: ((12 * 2) / (10 - 9)) = 24\nreach 24! expression: ((12 * 2) / (10 - 9))"}, {"input": "4 3 8 5\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 4, 5\n(4) + (5) = 9, left: (4 + 5) = 9, (8 / 3) = 8/3\n(8/3) * (9) = 24, left: ((8 / 3) * (4 + 5)) = 24\nreach 24! expression: ((8 / 3) * (4 + 5))"}, {"input": "4 3 8 5\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (4 + 8) = 12\n(12) * (2) = 24, left: ((4 + 8) * (5 - 3)) = 24\nreach 24! expression: ((4 + 8) * (5 - 3))"}, {"input": "4 3 8 5\n", "output": "(4) * (8) = 32, left: (4 * 8) = 32, 3, 5\n(32) - (5) = 27, left: ((4 * 8) - 5) = 27, 3\n(27) - (3) = 24, left: (((4 * 8) - 5) - 3) = 24\nreach 24! expression: (((4 * 8) - 5) - 3)"}, {"input": "4 3 8 5\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (4 + 8)) = 24\nreach 24! expression: ((5 - 3) * (4 + 8))"}, {"input": "4 3 8 5\n", "output": "(4) * (8) = 32, left: (4 * 8) = 32, 3, 5\n(3) + (5) = 8, left: (3 + 5) = 8, (4 * 8) = 32\n(32) - (8) = 24, left: ((4 * 8) - (3 + 5)) = 24\nreach 24! expression: ((4 * 8) - (3 + 5))"}, {"input": "4 3 8 5\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 3, 5\n(1/2) / (5) = 1/10, left: ((4 / 8) / 5) = 1/10, 3\nroll back, left: (4 / 8) = 1/2, 3, 5\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, (4 / 8) = 1/2\nroll back, left: (4 / 8) = 1/2, 3, 5\nroll back, left: 4 3 8 5\n(4) * (8) = 32, left: (4 * 8) = 32, 3, 5\n(32) - (5) = 27, left: ((4 * 8) - 5) = 27, 3\n(27) - (3) = 24, left: (((4 * 8) - 5) - 3) = 24\nreach 24! expression: (((4 * 8) - 5) - 3)"}, {"input": "4 3 8 5\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 4, 8\n(4) / (2) = 2, left: (4 / (5 - 3)) = 2, 8\nroll back, left: (5 - 3) = 2, 4, 8\n(4) - (2) = 2, left: (4 - (5 - 3)) = 2, 8\nroll back, left: (5 - 3) = 2, 4, 8\n(8) / (4) = 2, left: (8 / 4) = 2, (5 - 3) = 2\nroll back, left: (5 - 3) = 2, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (4 + 8)) = 24\nreach 24! expression: ((5 - 3) * (4 + 8))"}, {"input": "4 3 8 5\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 3, 5\nroll back, left: 4 3 8 5\n(8) / (4) = 2, left: (8 / 4) = 2, 3, 5\nroll back, left: 4 3 8 5\n(4) + (8) = 12, left: (4 + 8) = 12, 3, 5\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, (4 + 8) = 12\nroll back, left: (4 + 8) = 12, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (4 + 8) = 12\n(12) * (2) = 24, left: ((4 + 8) * (5 - 3)) = 24\nreach 24! expression: ((4 + 8) * (5 - 3))"}, {"input": "4 3 8 5\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 3, 5\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, (8 / 4) = 2\n(5/3) - (2) = -1/3, left: ((5 / 3) - (8 / 4)) = -1/3\nroll back, left: (5 / 3) = 5/3, (8 / 4) = 2\nroll back, left: (8 / 4) = 2, 3, 5\nroll back, left: 4 3 8 5\n(4) * (8) = 32, left: (4 * 8) = 32, 3, 5\n(3) + (5) = 8, left: (3 + 5) = 8, (4 * 8) = 32\n(32) - (8) = 24, left: ((4 * 8) - (3 + 5)) = 24\nreach 24! expression: ((4 * 8) - (3 + 5))"}, {"input": "4 3 8 5\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 4, 5\n(4) * (5) = 20, left: (4 * 5) = 20, (8 - 3) = 5\n(20) / (5) = 4, left: ((4 * 5) / (8 - 3)) = 4\nroll back, left: (4 * 5) = 20, (8 - 3) = 5\nroll back, left: (8 - 3) = 5, 4, 5\nroll back, left: 4 3 8 5\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 4, 5\n(4) + (5) = 9, left: (4 + 5) = 9, (8 / 3) = 8/3\n(8/3) * (9) = 24, left: ((8 / 3) * (4 + 5)) = 24\nreach 24! expression: ((8 / 3) * (4 + 5))"}, {"input": "2 9 9 3\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 9, 9\n(9) + (6) = 15, left: (9 + (2 * 3)) = 15, 9\n(9) + (15) = 24, left: (9 + (9 + (2 * 3))) = 24\nreach 24! expression: (9 + (9 + (2 * 3)))"}, {"input": "2 9 9 3\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 9, 3\n(18) - (3) = 15, left: ((2 * 9) - 3) = 15, 9\n(9) + (15) = 24, left: (9 + ((2 * 9) - 3)) = 24\nreach 24! expression: (9 + ((2 * 9) - 3))"}, {"input": "2 9 9 3\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 9, 3\n(3) * (11) = 33, left: (3 * (2 + 9)) = 33, 9\n(33) - (9) = 24, left: ((3 * (2 + 9)) - 9) = 24\nreach 24! expression: ((3 * (2 + 9)) - 9)"}, {"input": "2 9 9 3\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (9 - 3) = 6\n(6) + (18) = 24, left: ((9 - 3) + (2 * 9)) = 24\nreach 24! expression: ((9 - 3) + (2 * 9))"}, {"input": "2 9 9 3\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 9, 3\n(3) - (9) = -6, left: (3 - 9) = -6, (2 * 9) = 18\n(18) - (-6) = 24, left: ((2 * 9) - (3 - 9)) = 24\nreach 24! expression: ((2 * 9) - (3 - 9))"}, {"input": "2 9 9 3\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 9, 3\n(9) / (3) = 3, left: (9 / 3) = 3, (2 - 9) = -7\nroll back, left: (2 - 9) = -7, 9, 3\n(-7) / (3) = -7/3, left: ((2 - 9) / 3) = -7/3, 9\nroll back, left: (2 - 9) = -7, 9, 3\nroll back, left: 2 9 9 3\n(2) + (9) = 11, left: (2 + 9) = 11, 9, 3\n(3) * (11) = 33, left: (3 * (2 + 9)) = 33, 9\n(33) - (9) = 24, left: ((3 * (2 + 9)) - 9) = 24\nreach 24! expression: ((3 * (2 + 9)) - 9)"}, {"input": "2 9 9 3\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 9, 3\n(3) + (7) = 10, left: (3 + (9 - 2)) = 10, 9\nroll back, left: (9 - 2) = 7, 9, 3\nroll back, left: 2 9 9 3\n(2) / (9) = 2/9, left: (2 / 9) = 2/9, 9, 3\nroll back, left: 2 9 9 3\n(2) * (9) = 18, left: (2 * 9) = 18, 9, 3\n(3) - (9) = -6, left: (3 - 9) = -6, (2 * 9) = 18\n(18) - (-6) = 24, left: ((2 * 9) - (3 - 9)) = 24\nreach 24! expression: ((2 * 9) - (3 - 9))"}, {"input": "2 9 9 3\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 9, 9\nroll back, left: 2 9 9 3\n(2) * (3) = 6, left: (2 * 3) = 6, 9, 9\n(6) / (9) = 2/3, left: ((2 * 3) / 9) = 2/3, 9\n(2/3) - (9) = -25/3, left: (((2 * 3) / 9) - 9) = -25/3\nroll back, left: ((2 * 3) / 9) = 2/3, 9\nroll back, left: (2 * 3) = 6, 9, 9\n(9) + (6) = 15, left: (9 + (2 * 3)) = 15, 9\n(9) + (15) = 24, left: (9 + (9 + (2 * 3))) = 24\nreach 24! expression: (9 + (9 + (2 * 3)))"}, {"input": "2 9 9 3\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 2, 9\n(6) / (2) = 3, left: ((9 - 3) / 2) = 3, 9\n(3) - (9) = -6, left: (((9 - 3) / 2) - 9) = -6\nroll back, left: ((9 - 3) / 2) = 3, 9\nroll back, left: (9 - 3) = 6, 2, 9\n(9) * (6) = 54, left: (9 * (9 - 3)) = 54, 2\nroll back, left: (9 - 3) = 6, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (9 - 3) = 6\n(6) + (18) = 24, left: ((9 - 3) + (2 * 9)) = 24\nreach 24! expression: ((9 - 3) + (2 * 9))"}, {"input": "2 9 9 3\n", "output": "(2) * (9) = 18, left: (2 * 9) = 18, 9, 3\n(3) / (18) = 1/6, left: (3 / (2 * 9)) = 1/6, 9\nroll back, left: (2 * 9) = 18, 9, 3\n(18) - (3) = 15, left: ((2 * 9) - 3) = 15, 9\n(9) * (15) = 135, left: (9 * ((2 * 9) - 3)) = 135\nroll back, left: ((2 * 9) - 3) = 15, 9\n(9) - (15) = -6, left: (9 - ((2 * 9) - 3)) = -6\nroll back, left: ((2 * 9) - 3) = 15, 9\n(9) + (15) = 24, left: (9 + ((2 * 9) - 3)) = 24\nreach 24! expression: (9 + ((2 * 9) - 3))"}, {"input": "9 5 6 9\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (9 - 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (9 - 6))) = 24\nreach 24! expression: (9 + (5 * (9 - 6)))"}, {"input": "9 5 6 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (9 / 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (9 / 9))) = 24\nreach 24! expression: (6 * (5 - (9 / 9)))"}, {"input": "9 5 6 9\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 9, 5\n(5) * (-3) = -15, left: (5 * (6 - 9)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (6 - 9))) = 24\nreach 24! expression: (9 - (5 * (6 - 9)))"}, {"input": "9 5 6 9\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 9, 9\nroll back, left: 9 5 6 9\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 9, 9\nroll back, left: 9 5 6 9\n(9) - (6) = 3, left: (9 - 6) = 3, 9, 5\n(9) - (3) = 6, left: (9 - (9 - 6)) = 6, 5\nroll back, left: (9 - 6) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (9 - 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (9 - 6))) = 24\nreach 24! expression: (9 + (5 * (9 - 6)))"}, {"input": "9 5 6 9\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 9, 5\n(5) * (2/3) = 10/3, left: (5 * (6 / 9)) = 10/3, 9\nroll back, left: (6 / 9) = 2/3, 9, 5\nroll back, left: 9 5 6 9\n(6) - (9) = -3, left: (6 - 9) = -3, 9, 5\n(-3) / (9) = -1/3, left: ((6 - 9) / 9) = -1/3, 5\nroll back, left: (6 - 9) = -3, 9, 5\n(5) * (-3) = -15, left: (5 * (6 - 9)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (6 - 9))) = 24\nreach 24! expression: (9 - (5 * (6 - 9)))"}, {"input": "9 5 6 9\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 6, 9\n(6) - (5/9) = 49/9, left: (6 - (5 / 9)) = 49/9, 9\nroll back, left: (5 / 9) = 5/9, 6, 9\nroll back, left: 9 5 6 9\n(9) * (5) = 45, left: (9 * 5) = 45, 6, 9\nroll back, left: 9 5 6 9\n(9) - (6) = 3, left: (9 - 6) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (9 - 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (9 - 6))) = 24\nreach 24! expression: (9 + (5 * (9 - 6)))"}, {"input": "9 5 6 9\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 5, 6\n(5) * (18) = 90, left: (5 * (9 + 9)) = 90, 6\nroll back, left: (9 + 9) = 18, 5, 6\nroll back, left: 9 5 6 9\n(9) / (9) = 1, left: (9 / 9) = 1, 5, 6\n(1) - (6) = -5, left: ((9 / 9) - 6) = -5, 5\nroll back, left: (9 / 9) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (9 / 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (9 / 9))) = 24\nreach 24! expression: (6 * (5 - (9 / 9)))"}, {"input": "9 5 6 9\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 9, 9\nroll back, left: 9 5 6 9\n(5) - (6) = -1, left: (5 - 6) = -1, 9, 9\nroll back, left: 9 5 6 9\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 9, 9\nroll back, left: 9 5 6 9\n(9) / (9) = 1, left: (9 / 9) = 1, 5, 6\n(5) - (1) = 4, left: (5 - (9 / 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (9 / 9))) = 24\nreach 24! expression: (6 * (5 - (9 / 9)))"}, {"input": "8 3 6 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 8, 6\n(9) - (6) = 3, left: ((3 * 3) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((3 * 3) - 6)) = 24\nreach 24! expression: (8 * ((3 * 3) - 6))"}, {"input": "8 3 6 3\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 3, 6\n(3) + (6) = 9, left: (3 + 6) = 9, (3 / 8) = 3/8\n(9) / (3/8) = 24, left: ((3 + 6) / (3 / 8)) = 24\nreach 24! expression: ((3 + 6) / (3 / 8))"}, {"input": "8 3 6 3\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 8, 3\n(8) * (9) = 72, left: (8 * (6 + 3)) = 72, 3\n(72) / (3) = 24, left: ((8 * (6 + 3)) / 3) = 24\nreach 24! expression: ((8 * (6 + 3)) / 3)"}, {"input": "8 3 6 3\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 8, 3\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, (6 + 3) = 9\n(9) / (3/8) = 24, left: ((6 + 3) / (3 / 8)) = 24\nreach 24! expression: ((6 + 3) / (3 / 8))"}, {"input": "8 3 6 3\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 3, 6\n(3) + (6) = 9, left: (3 + 6) = 9, (8 / 3) = 8/3\n(8/3) * (9) = 24, left: ((8 / 3) * (3 + 6)) = 24\nreach 24! expression: ((8 / 3) * (3 + 6))"}, {"input": "8 3 6 3\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 3, 3\n(3) - (3) = 0, left: (3 - 3) = 0, (8 / 6) = 4/3\nroll back, left: (8 / 6) = 4/3, 3, 3\nroll back, left: 8 3 6 3\n(6) - (8) = -2, left: (6 - 8) = -2, 3, 3\nroll back, left: 8 3 6 3\n(6) + (3) = 9, left: (6 + 3) = 9, 8, 3\n(8) * (9) = 72, left: (8 * (6 + 3)) = 72, 3\n(72) / (3) = 24, left: ((8 * (6 + 3)) / 3) = 24\nreach 24! expression: ((8 * (6 + 3)) / 3)"}, {"input": "8 3 6 3\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 8, 3\nroll back, left: 8 3 6 3\n(6) / (3) = 2, left: (6 / 3) = 2, 8, 3\n(3) - (8) = -5, left: (3 - 8) = -5, (6 / 3) = 2\nroll back, left: (6 / 3) = 2, 8, 3\nroll back, left: 8 3 6 3\n(6) + (3) = 9, left: (6 + 3) = 9, 8, 3\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, (6 + 3) = 9\n(9) / (3/8) = 24, left: ((6 + 3) / (3 / 8)) = 24\nreach 24! expression: ((6 + 3) / (3 / 8))"}, {"input": "8 3 6 3\n", "output": "(8) * (3) = 24, left: (8 * 3) = 24, 3, 6\n(24) - (3) = 21, left: ((8 * 3) - 3) = 21, 6\nroll back, left: (8 * 3) = 24, 3, 6\nroll back, left: 8 3 6 3\n(8) - (3) = 5, left: (8 - 3) = 5, 3, 6\nroll back, left: 8 3 6 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 3, 6\n(3) + (6) = 9, left: (3 + 6) = 9, (8 / 3) = 8/3\n(8/3) * (9) = 24, left: ((8 / 3) * (3 + 6)) = 24\nreach 24! expression: ((8 / 3) * (3 + 6))"}, {"input": "8 3 6 3\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (8 * 6) = 48\nroll back, left: (8 * 6) = 48, 3, 3\nroll back, left: 8 3 6 3\n(6) - (8) = -2, left: (6 - 8) = -2, 3, 3\nroll back, left: 8 3 6 3\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, 3, 6\n(3) + (6) = 9, left: (3 + 6) = 9, (3 / 8) = 3/8\n(9) / (3/8) = 24, left: ((3 + 6) / (3 / 8)) = 24\nreach 24! expression: ((3 + 6) / (3 / 8))"}, {"input": "8 3 6 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 8, 6\n(6) - (6) = 0, left: (6 - (3 + 3)) = 0, 8\nroll back, left: (3 + 3) = 6, 8, 6\nroll back, left: 8 3 6 3\n(3) - (3) = 0, left: (3 - 3) = 0, 8, 6\nroll back, left: 8 3 6 3\n(3) * (3) = 9, left: (3 * 3) = 9, 8, 6\n(9) - (6) = 3, left: ((3 * 3) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((3 * 3) - 6)) = 24\nreach 24! expression: (8 * ((3 * 3) - 6))"}, {"input": "5 1 2 2\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 2, 2\n(2) * (6) = 12, left: (2 * (5 + 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 * (5 + 1))) = 24\nreach 24! expression: (2 * (2 * (5 + 1)))"}, {"input": "5 1 2 2\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (2 * 2)) = 24\nreach 24! expression: ((5 + 1) * (2 * 2))"}, {"input": "5 1 2 2\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (2 * 2) = 4\n(4) * (6) = 24, left: ((2 * 2) * (5 + 1)) = 24\nreach 24! expression: ((2 * 2) * (5 + 1))"}, {"input": "5 1 2 2\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (2 + 2) = 4\n(4) * (6) = 24, left: ((2 + 2) * (5 + 1)) = 24\nreach 24! expression: ((2 + 2) * (5 + 1))"}, {"input": "5 1 2 2\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 5, 2\nroll back, left: 5 1 2 2\n(2) - (5) = -3, left: (2 - 5) = -3, 1, 2\nroll back, left: 5 1 2 2\n(5) - (2) = 3, left: (5 - 2) = 3, 1, 2\nroll back, left: 5 1 2 2\n(2) + (2) = 4, left: (2 + 2) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (2 + 2) = 4\n(4) * (6) = 24, left: ((2 + 2) * (5 + 1)) = 24\nreach 24! expression: ((2 + 2) * (5 + 1))"}, {"input": "5 1 2 2\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 2, 2\n(5) / (2) = 5/2, left: ((5 / 1) / 2) = 5/2, 2\n(2) + (5/2) = 9/2, left: (2 + ((5 / 1) / 2)) = 9/2\nroll back, left: ((5 / 1) / 2) = 5/2, 2\nroll back, left: (5 / 1) = 5, 2, 2\nroll back, left: 5 1 2 2\n(5) + (1) = 6, left: (5 + 1) = 6, 2, 2\n(2) * (6) = 12, left: (2 * (5 + 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 * (5 + 1))) = 24\nreach 24! expression: (2 * (2 * (5 + 1)))"}, {"input": "5 1 2 2\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 5, 1\n(5) / (4) = 5/4, left: (5 / (2 * 2)) = 5/4, 1\nroll back, left: (2 * 2) = 4, 5, 1\n(4) / (5) = 4/5, left: ((2 * 2) / 5) = 4/5, 1\n(4/5) / (1) = 4/5, left: (((2 * 2) / 5) / 1) = 4/5\nroll back, left: ((2 * 2) / 5) = 4/5, 1\nroll back, left: (2 * 2) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (2 * 2) = 4\n(4) * (6) = 24, left: ((2 * 2) * (5 + 1)) = 24\nreach 24! expression: ((2 * 2) * (5 + 1))"}, {"input": "5 1 2 2\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 5, 2\n(2) + (1/2) = 5/2, left: (2 + (1 / 2)) = 5/2, 5\nroll back, left: (1 / 2) = 1/2, 5, 2\nroll back, left: 5 1 2 2\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 1, 2\nroll back, left: 5 1 2 2\n(5) + (1) = 6, left: (5 + 1) = 6, 2, 2\n(2) * (6) = 12, left: (2 * (5 + 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 * (5 + 1))) = 24\nreach 24! expression: (2 * (2 * (5 + 1)))"}, {"input": "5 1 2 2\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 5, 2\nroll back, left: 5 1 2 2\n(1) * (2) = 2, left: (1 * 2) = 2, 5, 2\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, (1 * 2) = 2\nroll back, left: (1 * 2) = 2, 5, 2\nroll back, left: 5 1 2 2\n(5) + (1) = 6, left: (5 + 1) = 6, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (2 * 2)) = 24\nreach 24! expression: ((5 + 1) * (2 * 2))"}, {"input": "5 8 2 2\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (5 + 8)) = 26, 2\n(26) - (2) = 24, left: ((2 * (5 + 8)) - 2) = 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 8, 2\nroll back, left: 5 8 2 2\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 8, 2\nroll back, left: 5 8 2 2\n(5) + (2) = 7, left: (5 + 2) = 7, 8, 2\nroll back, left: 5 8 2 2\n(5) + (8) = 13, left: (5 + 8) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (5 + 8)) = 26, 2\n(26) - (2) = 24, left: ((2 * (5 + 8)) - 2) = 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 5, 2\nroll back, left: 5 8 2 2\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 5, 2\nroll back, left: 5 8 2 2\n(5) - (8) = -3, left: (5 - 8) = -3, 2, 2\nroll back, left: 5 8 2 2\n(5) + (8) = 13, left: (5 + 8) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (5 + 8)) = 26, 2\n(26) - (2) = 24, left: ((2 * (5 + 8)) - 2) = 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 5, 2\nroll back, left: 5 8 2 2\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 8, 2\nroll back, left: 5 8 2 2\n(5) - (2) = 3, left: (5 - 2) = 3, 8, 2\nroll back, left: 5 8 2 2\n(5) + (8) = 13, left: (5 + 8) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (5 + 8)) = 26, 2\n(26) - (2) = 24, left: ((2 * (5 + 8)) - 2) = 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(5) * (2) = 10, left: (5 * 2) = 10, 8, 2\nroll back, left: 5 8 2 2\n(5) + (2) = 7, left: (5 + 2) = 7, 8, 2\n(7) - (2) = 5, left: ((5 + 2) - 2) = 5, 8\nroll back, left: (5 + 2) = 7, 8, 2\nroll back, left: 5 8 2 2\n(5) + (8) = 13, left: (5 + 8) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (5 + 8)) = 26, 2\n(26) - (2) = 24, left: ((2 * (5 + 8)) - 2) = 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "5 8 2 2\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 5, 2\nroll back, left: 5 8 2 2\n(2) - (8) = -6, left: (2 - 8) = -6, 5, 2\n(2) - (-6) = 8, left: (2 - (2 - 8)) = 8, 5\nroll back, left: (2 - 8) = -6, 5, 2\nroll back, left: 5 8 2 2\n(5) + (8) = 13, left: (5 + 8) = 13, 2, 2\n(2) * (13) = 26, left: (2 * (5 + 8)) = 26, 2\n(26) - (2) = 24, left: ((2 * (5 + 8)) - 2) = 24\nreach 24! expression: ((2 * (5 + 8)) - 2)"}, {"input": "3 13 2 5\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (3 - 5) = -2\n(-2) + (26) = 24, left: ((3 - 5) + (13 * 2)) = 24\nreach 24! expression: ((3 - 5) + (13 * 2))"}, {"input": "3 13 2 5\n", "output": "(3) * (2) = 6, left: (3 * 2) = 6, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (3 * 2) = 6\n(6) + (18) = 24, left: ((3 * 2) + (13 + 5)) = 24\nreach 24! expression: ((3 * 2) + (13 + 5))"}, {"input": "3 13 2 5\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (5 - 3) = 2\n(26) - (2) = 24, left: ((13 * 2) - (5 - 3)) = 24\nreach 24! expression: ((13 * 2) - (5 - 3))"}, {"input": "3 13 2 5\n", "output": "(13) * (2) = 26, left: (13 * 2) = 26, 3, 5\n(3) + (26) = 29, left: (3 + (13 * 2)) = 29, 5\n(29) - (5) = 24, left: ((3 + (13 * 2)) - 5) = 24\nreach 24! expression: ((3 + (13 * 2)) - 5)"}, {"input": "3 13 2 5\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 3, 2\n(3) * (2) = 6, left: (3 * 2) = 6, (13 + 5) = 18\n(18) + (6) = 24, left: ((13 + 5) + (3 * 2)) = 24\nreach 24! expression: ((13 + 5) + (3 * 2))"}, {"input": "3 13 2 5\n", "output": "(3) * (5) = 15, left: (3 * 5) = 15, 13, 2\n(13) + (15) = 28, left: (13 + (3 * 5)) = 28, 2\nroll back, left: (3 * 5) = 15, 13, 2\n(15) - (2) = 13, left: ((3 * 5) - 2) = 13, 13\nroll back, left: (3 * 5) = 15, 13, 2\nroll back, left: 3 13 2 5\n(3) - (5) = -2, left: (3 - 5) = -2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (3 - 5) = -2\n(-2) + (26) = 24, left: ((3 - 5) + (13 * 2)) = 24\nreach 24! expression: ((3 - 5) + (13 * 2))"}, {"input": "3 13 2 5\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 13, 2\nroll back, left: 3 13 2 5\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, 13, 2\n(2) * (5/3) = 10/3, left: (2 * (5 / 3)) = 10/3, 13\nroll back, left: (5 / 3) = 5/3, 13, 2\nroll back, left: 3 13 2 5\n(5) - (3) = 2, left: (5 - 3) = 2, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (5 - 3) = 2\n(26) - (2) = 24, left: ((13 * 2) - (5 - 3)) = 24\nreach 24! expression: ((13 * 2) - (5 - 3))"}, {"input": "3 13 2 5\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 3, 2\n(3) + (2) = 5, left: (3 + 2) = 5, (13 - 5) = 8\n(5) - (8) = -3, left: ((3 + 2) - (13 - 5)) = -3\nroll back, left: (3 + 2) = 5, (13 - 5) = 8\nroll back, left: (13 - 5) = 8, 3, 2\nroll back, left: 3 13 2 5\n(13) + (5) = 18, left: (13 + 5) = 18, 3, 2\n(3) * (2) = 6, left: (3 * 2) = 6, (13 + 5) = 18\n(18) + (6) = 24, left: ((13 + 5) + (3 * 2)) = 24\nreach 24! expression: ((13 + 5) + (3 * 2))"}, {"input": "3 13 2 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 3, 13\n(3) / (3) = 1, left: (3 / (5 - 2)) = 1, 13\n(1) / (13) = 1/13, left: ((3 / (5 - 2)) / 13) = 1/13\nroll back, left: (3 / (5 - 2)) = 1, 13\nroll back, left: (5 - 2) = 3, 3, 13\nroll back, left: 3 13 2 5\n(3) * (2) = 6, left: (3 * 2) = 6, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (3 * 2) = 6\n(6) + (18) = 24, left: ((3 * 2) + (13 + 5)) = 24\nreach 24! expression: ((3 * 2) + (13 + 5))"}, {"input": "3 13 2 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 3, 13\nroll back, left: 3 13 2 5\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 3, 13\nroll back, left: 3 13 2 5\n(13) + (2) = 15, left: (13 + 2) = 15, 3, 5\nroll back, left: 3 13 2 5\n(13) * (2) = 26, left: (13 * 2) = 26, 3, 5\n(3) + (26) = 29, left: (3 + (13 * 2)) = 29, 5\n(29) - (5) = 24, left: ((3 + (13 * 2)) - 5) = 24\nreach 24! expression: ((3 + (13 * 2)) - 5)"}, {"input": "7 8 6 2\n", "output": "(7) + (2) = 9, left: (7 + 2) = 9, 8, 6\n(9) - (6) = 3, left: ((7 + 2) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 2) - 6)) = 24\nreach 24! expression: (8 * ((7 + 2) - 6))"}, {"input": "7 8 6 2\n", "output": "(2) - (6) = -4, left: (2 - 6) = -4, 7, 8\n(7) + (-4) = 3, left: (7 + (2 - 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 + (2 - 6))) = 24\nreach 24! expression: (8 * (7 + (2 - 6)))"}, {"input": "7 8 6 2\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 8, 2\n(2) - (-1) = 3, left: (2 - (6 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (6 - 7))) = 24\nreach 24! expression: (8 * (2 - (6 - 7)))"}, {"input": "7 8 6 2\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (7 + 8)) = 30, 6\n(30) - (6) = 24, left: ((2 * (7 + 8)) - 6) = 24\nreach 24! expression: ((2 * (7 + 8)) - 6)"}, {"input": "7 8 6 2\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (7 / 8) = 7/8\nroll back, left: (7 / 8) = 7/8, 6, 2\n(6) - (7/8) = 41/8, left: (6 - (7 / 8)) = 41/8, 2\nroll back, left: (7 / 8) = 7/8, 6, 2\nroll back, left: 7 8 6 2\n(7) + (8) = 15, left: (7 + 8) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (7 + 8)) = 30, 6\n(30) - (6) = 24, left: ((2 * (7 + 8)) - 6) = 24\nreach 24! expression: ((2 * (7 + 8)) - 6)"}, {"input": "7 8 6 2\n", "output": "(2) - (7) = -5, left: (2 - 7) = -5, 8, 6\n(6) * (-5) = -30, left: (6 * (2 - 7)) = -30, 8\nroll back, left: (2 - 7) = -5, 8, 6\nroll back, left: 7 8 6 2\n(7) * (2) = 14, left: (7 * 2) = 14, 8, 6\nroll back, left: 7 8 6 2\n(7) + (2) = 9, left: (7 + 2) = 9, 8, 6\n(9) - (6) = 3, left: ((7 + 2) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 2) - 6)) = 24\nreach 24! expression: (8 * ((7 + 2) - 6))"}, {"input": "7 8 6 2\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 7, 2\nroll back, left: 7 8 6 2\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, 7, 2\nroll back, left: 7 8 6 2\n(8) - (6) = 2, left: (8 - 6) = 2, 7, 2\nroll back, left: 7 8 6 2\n(6) - (7) = -1, left: (6 - 7) = -1, 8, 2\n(2) - (-1) = 3, left: (2 - (6 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (6 - 7))) = 24\nreach 24! expression: (8 * (2 - (6 - 7)))"}, {"input": "7 8 6 2\n", "output": "(7) / (6) = 7/6, left: (7 / 6) = 7/6, 8, 2\nroll back, left: 7 8 6 2\n(7) * (6) = 42, left: (7 * 6) = 42, 8, 2\n(42) - (2) = 40, left: ((7 * 6) - 2) = 40, 8\nroll back, left: (7 * 6) = 42, 8, 2\nroll back, left: 7 8 6 2\n(6) - (7) = -1, left: (6 - 7) = -1, 8, 2\n(2) - (-1) = 3, left: (2 - (6 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (6 - 7))) = 24\nreach 24! expression: (8 * (2 - (6 - 7)))"}, {"input": "7 8 6 2\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 7, 6\nroll back, left: 7 8 6 2\n(6) * (2) = 12, left: (6 * 2) = 12, 7, 8\n(7) + (8) = 15, left: (7 + 8) = 15, (6 * 2) = 12\nroll back, left: (6 * 2) = 12, 7, 8\nroll back, left: 7 8 6 2\n(2) - (6) = -4, left: (2 - 6) = -4, 7, 8\n(7) + (-4) = 3, left: (7 + (2 - 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 + (2 - 6))) = 24\nreach 24! expression: (8 * (7 + (2 - 6)))"}, {"input": "1 9 13 3\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 1, 3\n(22) - (1) = 21, left: ((9 + 13) - 1) = 21, 3\n(3) + (21) = 24, left: (3 + ((9 + 13) - 1)) = 24\nreach 24! expression: (3 + ((9 + 13) - 1))"}, {"input": "1 9 13 3\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 13, 3\n(-8) - (3) = -11, left: ((1 - 9) - 3) = -11, 13\n(13) - (-11) = 24, left: (13 - ((1 - 9) - 3)) = 24\nreach 24! expression: (13 - ((1 - 9) - 3))"}, {"input": "1 9 13 3\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (9 - 1) = 8\n(8) + (16) = 24, left: ((9 - 1) + (13 + 3)) = 24\nreach 24! expression: ((9 - 1) + (13 + 3))"}, {"input": "1 9 13 3\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 9, 13\n(-2) - (13) = -15, left: ((1 - 3) - 13) = -15, 9\n(9) - (-15) = 24, left: (9 - ((1 - 3) - 13)) = 24\nreach 24! expression: (9 - ((1 - 3) - 13))"}, {"input": "1 9 13 3\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 9, 13\n(9) + (13) = 22, left: (9 + 13) = 22, (3 - 1) = 2\n(2) + (22) = 24, left: ((3 - 1) + (9 + 13)) = 24\nreach 24! expression: ((3 - 1) + (9 + 13))"}, {"input": "1 9 13 3\n", "output": "(13) / (9) = 13/9, left: (13 / 9) = 13/9, 1, 3\nroll back, left: 1 9 13 3\n(9) - (13) = -4, left: (9 - 13) = -4, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (9 - 13) = -4\nroll back, left: (9 - 13) = -4, 1, 3\nroll back, left: 1 9 13 3\n(9) + (13) = 22, left: (9 + 13) = 22, 1, 3\n(22) - (1) = 21, left: ((9 + 13) - 1) = 21, 3\n(3) + (21) = 24, left: (3 + ((9 + 13) - 1)) = 24\nreach 24! expression: (3 + ((9 + 13) - 1))"}, {"input": "1 9 13 3\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 13, 3\nroll back, left: 1 9 13 3\n(1) * (9) = 9, left: (1 * 9) = 9, 13, 3\n(13) / (3) = 13/3, left: (13 / 3) = 13/3, (1 * 9) = 9\nroll back, left: (1 * 9) = 9, 13, 3\nroll back, left: 1 9 13 3\n(9) - (1) = 8, left: (9 - 1) = 8, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (9 - 1) = 8\n(8) + (16) = 24, left: ((9 - 1) + (13 + 3)) = 24\nreach 24! expression: ((9 - 1) + (13 + 3))"}, {"input": "1 9 13 3\n", "output": "(1) / (3) = 1/3, left: (1 / 3) = 1/3, 9, 13\nroll back, left: 1 9 13 3\n(1) * (3) = 3, left: (1 * 3) = 3, 9, 13\n(13) + (3) = 16, left: (13 + (1 * 3)) = 16, 9\nroll back, left: (1 * 3) = 3, 9, 13\nroll back, left: 1 9 13 3\n(1) - (3) = -2, left: (1 - 3) = -2, 9, 13\n(-2) - (13) = -15, left: ((1 - 3) - 13) = -15, 9\n(9) - (-15) = 24, left: (9 - ((1 - 3) - 13)) = 24\nreach 24! expression: (9 - ((1 - 3) - 13))"}, {"input": "9 1 6 7\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 1, 7\n(1) + (7) = 8, left: (1 + 7) = 8, (9 - 6) = 3\n(3) * (8) = 24, left: ((9 - 6) * (1 + 7)) = 24\nreach 24! expression: ((9 - 6) * (1 + 7))"}, {"input": "9 1 6 7\n", "output": "(1) + (7) = 8, left: (1 + 7) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (1 + 7) = 8\n(8) * (3) = 24, left: ((1 + 7) * (9 - 6)) = 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "9 1 6 7\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 1, 7\n(1) + (7) = 8, left: (1 + 7) = 8, (9 - 6) = 3\n(3) - (8) = -5, left: ((9 - 6) - (1 + 7)) = -5\nroll back, left: (1 + 7) = 8, (9 - 6) = 3\n(3) / (8) = 3/8, left: ((9 - 6) / (1 + 7)) = 3/8\nroll back, left: (1 + 7) = 8, (9 - 6) = 3\n(8) / (3) = 8/3, left: ((1 + 7) / (9 - 6)) = 8/3\nroll back, left: (1 + 7) = 8, (9 - 6) = 3\n(3) * (8) = 24, left: ((9 - 6) * (1 + 7)) = 24\nreach 24! expression: ((9 - 6) * (1 + 7))"}, {"input": "9 1 6 7\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 9, 6\nroll back, left: 9 1 6 7\n(1) / (7) = 1/7, left: (1 / 7) = 1/7, 9, 6\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, (1 / 7) = 1/7\nroll back, left: (1 / 7) = 1/7, 9, 6\nroll back, left: 9 1 6 7\n(1) + (7) = 8, left: (1 + 7) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (1 + 7) = 8\n(8) * (3) = 24, left: ((1 + 7) * (9 - 6)) = 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "9 1 6 7\n", "output": "(1) / (9) = 1/9, left: (1 / 9) = 1/9, 6, 7\nroll back, left: 9 1 6 7\n(1) * (7) = 7, left: (1 * 7) = 7, 9, 6\n(7) / (9) = 7/9, left: ((1 * 7) / 9) = 7/9, 6\nroll back, left: (1 * 7) = 7, 9, 6\nroll back, left: 9 1 6 7\n(1) + (7) = 8, left: (1 + 7) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (1 + 7) = 8\n(8) * (3) = 24, left: ((1 + 7) * (9 - 6)) = 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "9 1 6 7\n", "output": "(1) * (7) = 7, left: (1 * 7) = 7, 9, 6\nroll back, left: 9 1 6 7\n(1) / (7) = 1/7, left: (1 / 7) = 1/7, 9, 6\nroll back, left: 9 1 6 7\n(1) + (7) = 8, left: (1 + 7) = 8, 9, 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, (1 + 7) = 8\nroll back, left: (1 + 7) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (1 + 7) = 8\n(8) * (3) = 24, left: ((1 + 7) * (9 - 6)) = 24\nreach 24! expression: ((1 + 7) * (9 - 6))"}, {"input": "8 8 5 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (8 / 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (8 / 4))) = 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 8, 4\n(8) / (4) = 2, left: (8 / 4) = 2, (5 - 8) = -3\nroll back, left: (5 - 8) = -3, 8, 4\nroll back, left: 8 8 5 4\n(4) - (8) = -4, left: (4 - 8) = -4, 8, 5\nroll back, left: 8 8 5 4\n(8) / (4) = 2, left: (8 / 4) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (8 / 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (8 / 4))) = 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 8, 8\nroll back, left: 8 8 5 4\n(5) - (8) = -3, left: (5 - 8) = -3, 8, 4\n(8) / (-3) = -8/3, left: (8 / (5 - 8)) = -8/3, 4\nroll back, left: (5 - 8) = -3, 8, 4\nroll back, left: 8 8 5 4\n(8) / (4) = 2, left: (8 / 4) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (8 / 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (8 / 4))) = 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 8, 8\nroll back, left: 8 8 5 4\n(8) - (4) = 4, left: (8 - 4) = 4, 8, 5\n(5) * (4) = 20, left: (5 * (8 - 4)) = 20, 8\nroll back, left: (8 - 4) = 4, 8, 5\nroll back, left: 8 8 5 4\n(8) / (4) = 2, left: (8 / 4) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (8 / 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (8 / 4))) = 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 8, 8\nroll back, left: 8 8 5 4\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 8, 8\nroll back, left: 8 8 5 4\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, 8, 5\nroll back, left: 8 8 5 4\n(8) / (4) = 2, left: (8 / 4) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (8 / 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (8 / 4))) = 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "8 8 5 4\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 8, 5\n(4) / (5) = 4/5, left: ((8 - 4) / 5) = 4/5, 8\nroll back, left: (8 - 4) = 4, 8, 5\nroll back, left: 8 8 5 4\n(4) - (8) = -4, left: (4 - 8) = -4, 8, 5\nroll back, left: 8 8 5 4\n(8) / (4) = 2, left: (8 / 4) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (8 / 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (8 / 4))) = 24\nreach 24! expression: (8 * (5 - (8 / 4)))"}, {"input": "10 12 12 10\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 10, 10\n(10) + (24) = 34, left: (10 + (12 + 12)) = 34, 10\n(34) - (10) = 24, left: ((10 + (12 + 12)) - 10) = 24\nreach 24! expression: ((10 + (12 + 12)) - 10)"}, {"input": "10 12 12 10\n", "output": "(12) + (10) = 22, left: (12 + 10) = 22, 10, 12\n(10) - (12) = -2, left: (10 - 12) = -2, (12 + 10) = 22\n(22) - (-2) = 24, left: ((12 + 10) - (10 - 12)) = 24\nreach 24! expression: ((12 + 10) - (10 - 12))"}, {"input": "10 12 12 10\n", "output": "(12) / (10) = 6/5, left: (12 / 10) = 6/5, 12, 10\n(10) * (6/5) = 12, left: (10 * (12 / 10)) = 12, 12\n(12) + (12) = 24, left: (12 + (10 * (12 / 10))) = 24\nreach 24! expression: (12 + (10 * (12 / 10)))"}, {"input": "10 12 12 10\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 12, 10\n(-2) - (10) = -12, left: ((10 - 12) - 10) = -12, 12\n(12) - (-12) = 24, left: (12 - ((10 - 12) - 10)) = 24\nreach 24! expression: (12 - ((10 - 12) - 10))"}, {"input": "10 12 12 10\n", "output": "(12) / (10) = 6/5, left: (12 / 10) = 6/5, 10, 12\n(10) * (6/5) = 12, left: (10 * (12 / 10)) = 12, 12\n(12) + (12) = 24, left: (12 + (10 * (12 / 10))) = 24\nreach 24! expression: (12 + (10 * (12 / 10)))"}, {"input": "13 13 12 6\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 13, 13\n(13) + (13) = 26, left: (13 + 13) = 26, (12 / 6) = 2\n(26) - (2) = 24, left: ((13 + 13) - (12 / 6)) = 24\nreach 24! expression: ((13 + 13) - (12 / 6))"}, {"input": "13 13 12 6\n", "output": "(13) + (13) = 26, left: (13 + 13) = 26, 12, 6\n(12) / (6) = 2, left: (12 / 6) = 2, (13 + 13) = 26\n(26) - (2) = 24, left: ((13 + 13) - (12 / 6)) = 24\nreach 24! expression: ((13 + 13) - (12 / 6))"}, {"input": "13 13 12 6\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 13, 13\n(2) - (13) = -11, left: ((12 / 6) - 13) = -11, 13\n(13) - (-11) = 24, left: (13 - ((12 / 6) - 13)) = 24\nreach 24! expression: (13 - ((12 / 6) - 13))"}, {"input": "13 13 12 6\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 13, 13\n(13) - (2) = 11, left: (13 - (12 / 6)) = 11, 13\n(13) + (11) = 24, left: (13 + (13 - (12 / 6))) = 24\nreach 24! expression: (13 + (13 - (12 / 6)))"}, {"input": "13 13 12 6\n", "output": "(12) * (6) = 72, left: (12 * 6) = 72, 13, 13\nroll back, left: 13 13 12 6\n(12) + (6) = 18, left: (12 + 6) = 18, 13, 13\nroll back, left: 13 13 12 6\n(6) - (12) = -6, left: (6 - 12) = -6, 13, 13\nroll back, left: 13 13 12 6\n(12) / (6) = 2, left: (12 / 6) = 2, 13, 13\n(13) + (13) = 26, left: (13 + 13) = 26, (12 / 6) = 2\n(26) - (2) = 24, left: ((13 + 13) - (12 / 6)) = 24\nreach 24! expression: ((13 + 13) - (12 / 6))"}, {"input": "13 13 12 6\n", "output": "(12) + (6) = 18, left: (12 + 6) = 18, 13, 13\nroll back, left: 13 13 12 6\n(12) * (6) = 72, left: (12 * 6) = 72, 13, 13\nroll back, left: 13 13 12 6\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 13, 13\nroll back, left: 13 13 12 6\n(12) / (6) = 2, left: (12 / 6) = 2, 13, 13\n(13) - (2) = 11, left: (13 - (12 / 6)) = 11, 13\n(13) + (11) = 24, left: (13 + (13 - (12 / 6))) = 24\nreach 24! expression: (13 + (13 - (12 / 6)))"}, {"input": "5 10 12 4\n", "output": "(12) * (4) = 48, left: (12 * 4) = 48, 5, 10\n(5) * (48) = 240, left: (5 * (12 * 4)) = 240, 10\n(240) / (10) = 24, left: ((5 * (12 * 4)) / 10) = 24\nreach 24! expression: ((5 * (12 * 4)) / 10)"}, {"input": "5 10 12 4\n", "output": "(12) * (4) = 48, left: (12 * 4) = 48, 5, 10\n(10) / (48) = 5/24, left: (10 / (12 * 4)) = 5/24, 5\n(5) / (5/24) = 24, left: (5 / (10 / (12 * 4))) = 24\nreach 24! expression: (5 / (10 / (12 * 4)))"}, {"input": "5 10 12 4\n", "output": "(12) * (4) = 48, left: (12 * 4) = 48, 5, 10\n(10) / (5) = 2, left: (10 / 5) = 2, (12 * 4) = 48\n(48) / (2) = 24, left: ((12 * 4) / (10 / 5)) = 24\nreach 24! expression: ((12 * 4) / (10 / 5))"}, {"input": "5 10 12 4\n", "output": "(12) / (10) = 6/5, left: (12 / 10) = 6/5, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (12 / 10) = 6/5\n(6/5) * (20) = 24, left: ((12 / 10) * (5 * 4)) = 24\nreach 24! expression: ((12 / 10) * (5 * 4))"}, {"input": "5 10 12 4\n", "output": "(10) / (12) = 5/6, left: (10 / 12) = 5/6, 5, 4\n(5/6) / (4) = 5/24, left: ((10 / 12) / 4) = 5/24, 5\n(5) / (5/24) = 24, left: (5 / ((10 / 12) / 4)) = 24\nreach 24! expression: (5 / ((10 / 12) / 4))"}, {"input": "5 10 12 4\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 5, 10\n(-8) / (10) = -4/5, left: ((4 - 12) / 10) = -4/5, 5\nroll back, left: (4 - 12) = -8, 5, 10\nroll back, left: 5 10 12 4\n(12) / (4) = 3, left: (12 / 4) = 3, 5, 10\nroll back, left: 5 10 12 4\n(12) * (4) = 48, left: (12 * 4) = 48, 5, 10\n(10) / (48) = 5/24, left: (10 / (12 * 4)) = 5/24, 5\n(5) / (5/24) = 24, left: (5 / (10 / (12 * 4))) = 24\nreach 24! expression: (5 / (10 / (12 * 4)))"}, {"input": "2 4 3 1\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 2, 4\n(2) * (4) = 8, left: (2 * 4) = 8, (3 / 1) = 3\n(3) * (8) = 24, left: ((3 / 1) * (2 * 4)) = 24\nreach 24! expression: ((3 / 1) * (2 * 4))"}, {"input": "2 4 3 1\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 2, 1\n(1) * (12) = 12, left: (1 * (4 * 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 * (4 * 3))) = 24\nreach 24! expression: (2 * (1 * (4 * 3)))"}, {"input": "2 4 3 1\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 4, 1\n(4) * (6) = 24, left: (4 * (2 * 3)) = 24, 1\n(24) / (1) = 24, left: ((4 * (2 * 3)) / 1) = 24\nreach 24! expression: ((4 * (2 * 3)) / 1)"}, {"input": "2 4 3 1\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 2, 1\n(2) * (12) = 24, left: (2 * (4 * 3)) = 24, 1\n(1) * (24) = 24, left: (1 * (2 * (4 * 3))) = 24\nreach 24! expression: (1 * (2 * (4 * 3)))"}, {"input": "2 4 3 1\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 2, 1\nroll back, left: 2 4 3 1\n(3) - (4) = -1, left: (3 - 4) = -1, 2, 1\n(-1) / (1) = -1, left: ((3 - 4) / 1) = -1, 2\nroll back, left: (3 - 4) = -1, 2, 1\nroll back, left: 2 4 3 1\n(4) * (3) = 12, left: (4 * 3) = 12, 2, 1\n(1) * (12) = 12, left: (1 * (4 * 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 * (4 * 3))) = 24\nreach 24! expression: (2 * (1 * (4 * 3)))"}, {"input": "2 4 3 1\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 2, 1\n(2) / (12) = 1/6, left: (2 / (4 * 3)) = 1/6, 1\n(1) + (1/6) = 7/6, left: (1 + (2 / (4 * 3))) = 7/6\nroll back, left: (2 / (4 * 3)) = 1/6, 1\nroll back, left: (4 * 3) = 12, 2, 1\n(2) + (12) = 14, left: (2 + (4 * 3)) = 14, 1\nroll back, left: (4 * 3) = 12, 2, 1\n(2) * (12) = 24, left: (2 * (4 * 3)) = 24, 1\n(1) * (24) = 24, left: (1 * (2 * (4 * 3))) = 24\nreach 24! expression: (1 * (2 * (4 * 3)))"}, {"input": "2 4 3 1\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 2, 4\nroll back, left: 2 4 3 1\n(3) - (1) = 2, left: (3 - 1) = 2, 2, 4\n(2) / (4) = 1/2, left: ((3 - 1) / 4) = 1/2, 2\nroll back, left: (3 - 1) = 2, 2, 4\nroll back, left: 2 4 3 1\n(3) / (1) = 3, left: (3 / 1) = 3, 2, 4\n(2) * (4) = 8, left: (2 * 4) = 8, (3 / 1) = 3\n(3) * (8) = 24, left: ((3 / 1) * (2 * 4)) = 24\nreach 24! expression: ((3 / 1) * (2 * 4))"}, {"input": "2 4 3 1\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 4, 1\n(4) + (1) = 5, left: (4 + 1) = 5, (3 - 2) = 1\nroll back, left: (3 - 2) = 1, 4, 1\n(1) / (1) = 1, left: ((3 - 2) / 1) = 1, 4\nroll back, left: (3 - 2) = 1, 4, 1\nroll back, left: 2 4 3 1\n(2) * (3) = 6, left: (2 * 3) = 6, 4, 1\n(4) * (6) = 24, left: (4 * (2 * 3)) = 24, 1\n(24) / (1) = 24, left: ((4 * (2 * 3)) / 1) = 24\nreach 24! expression: ((4 * (2 * 3)) / 1)"}, {"input": "2 4 3 1\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 2, 1\nroll back, left: 2 4 3 1\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 2, 1\n(1) * (3/4) = 3/4, left: (1 * (3 / 4)) = 3/4, 2\nroll back, left: (3 / 4) = 3/4, 2, 1\nroll back, left: 2 4 3 1\n(4) * (3) = 12, left: (4 * 3) = 12, 2, 1\n(1) * (12) = 12, left: (1 * (4 * 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 * (4 * 3))) = 24\nreach 24! expression: (2 * (1 * (4 * 3)))"}, {"input": "9 5 10 10\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 10, 10\n(10) + (4) = 14, left: (10 + (9 - 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 + (9 - 5))) = 24\nreach 24! expression: (10 + (10 + (9 - 5)))"}, {"input": "9 5 10 10\n", "output": "(9) + (10) = 19, left: (9 + 10) = 19, 5, 10\n(10) + (19) = 29, left: (10 + (9 + 10)) = 29, 5\n(29) - (5) = 24, left: ((10 + (9 + 10)) - 5) = 24\nreach 24! expression: ((10 + (9 + 10)) - 5)"}, {"input": "9 5 10 10\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 9, 10\n(9) + (5) = 14, left: (9 + (10 - 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (9 + (10 - 5))) = 24\nreach 24! expression: (10 + (9 + (10 - 5)))"}, {"input": "9 5 10 10\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 9, 5\n(5) - (20) = -15, left: (5 - (10 + 10)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 - (10 + 10))) = 24\nreach 24! expression: (9 - (5 - (10 + 10)))"}, {"input": "9 5 10 10\n", "output": "(5) * (10) = 50, left: (5 * 10) = 50, 9, 10\nroll back, left: 9 5 10 10\n(5) + (10) = 15, left: (5 + 10) = 15, 9, 10\n(10) * (15) = 150, left: (10 * (5 + 10)) = 150, 9\nroll back, left: (5 + 10) = 15, 9, 10\nroll back, left: 9 5 10 10\n(10) - (5) = 5, left: (10 - 5) = 5, 9, 10\n(9) + (5) = 14, left: (9 + (10 - 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (9 + (10 - 5))) = 24\nreach 24! expression: (10 + (9 + (10 - 5)))"}, {"input": "9 5 10 10\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 10, 10\n(10) + (4) = 14, left: (10 + (9 - 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 + (9 - 5))) = 24\nreach 24! expression: (10 + (10 + (9 - 5)))"}, {"input": "9 5 10 10\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 10, 10\n(10) + (4) = 14, left: (10 + (9 - 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 + (9 - 5))) = 24\nreach 24! expression: (10 + (10 + (9 - 5)))"}, {"input": "9 5 10 10\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 10, 10\n(10) + (4) = 14, left: (10 + (9 - 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 + (9 - 5))) = 24\nreach 24! expression: (10 + (10 + (9 - 5)))"}, {"input": "9 5 10 10\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 10, 10\n(10) + (4) = 14, left: (10 + (9 - 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 + (9 - 5))) = 24\nreach 24! expression: (10 + (10 + (9 - 5)))"}, {"input": "6 1 13 9\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 13, 9\n(13) - (9) = 4, left: (13 - 9) = 4, (6 / 1) = 6\n(6) * (4) = 24, left: ((6 / 1) * (13 - 9)) = 24\nreach 24! expression: ((6 / 1) * (13 - 9))"}, {"input": "6 1 13 9\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 6, 9\n(13) - (9) = 4, left: ((13 / 1) - 9) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 / 1) - 9)) = 24\nreach 24! expression: (6 * ((13 / 1) - 9))"}, {"input": "6 1 13 9\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 13, 9\n(13) - (9) = 4, left: (13 - 9) = 4, (1 / 6) = 1/6\n(4) / (1/6) = 24, left: ((13 - 9) / (1 / 6)) = 24\nreach 24! expression: ((13 - 9) / (1 / 6))"}, {"input": "6 1 13 9\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 6, 13\n(13) - (9) = 4, left: (13 - (1 * 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (1 * 9))) = 24\nreach 24! expression: (6 * (13 - (1 * 9)))"}, {"input": "6 1 13 9\n", "output": "(6) * (13) = 78, left: (6 * 13) = 78, 1, 9\n(9) + (78) = 87, left: (9 + (6 * 13)) = 87, 1\nroll back, left: (6 * 13) = 78, 1, 9\nroll back, left: 6 1 13 9\n(13) - (6) = 7, left: (13 - 6) = 7, 1, 9\nroll back, left: 6 1 13 9\n(6) / (1) = 6, left: (6 / 1) = 6, 13, 9\n(13) - (9) = 4, left: (13 - 9) = 4, (6 / 1) = 6\n(6) * (4) = 24, left: ((6 / 1) * (13 - 9)) = 24\nreach 24! expression: ((6 / 1) * (13 - 9))"}, {"input": "6 1 13 9\n", "output": "(13) / (6) = 13/6, left: (13 / 6) = 13/6, 1, 9\n(13/6) - (1) = 7/6, left: ((13 / 6) - 1) = 7/6, 9\nroll back, left: (13 / 6) = 13/6, 1, 9\nroll back, left: 6 1 13 9\n(1) * (9) = 9, left: (1 * 9) = 9, 6, 13\n(6) + (13) = 19, left: (6 + 13) = 19, (1 * 9) = 9\nroll back, left: (1 * 9) = 9, 6, 13\n(13) - (9) = 4, left: (13 - (1 * 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (1 * 9))) = 24\nreach 24! expression: (6 * (13 - (1 * 9)))"}, {"input": "6 1 13 9\n", "output": "(6) - (13) = -7, left: (6 - 13) = -7, 1, 9\n(-7) - (1) = -8, left: ((6 - 13) - 1) = -8, 9\n(-8) - (9) = -17, left: (((6 - 13) - 1) - 9) = -17\nroll back, left: ((6 - 13) - 1) = -8, 9\nroll back, left: (6 - 13) = -7, 1, 9\nroll back, left: 6 1 13 9\n(1) * (9) = 9, left: (1 * 9) = 9, 6, 13\n(13) - (9) = 4, left: (13 - (1 * 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (1 * 9))) = 24\nreach 24! expression: (6 * (13 - (1 * 9)))"}, {"input": "12 9 1 9\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 9, 1\n(1) - (9) = -8, left: (1 - 9) = -8, (9 - 12) = -3\n(-3) * (-8) = 24, left: ((9 - 12) * (1 - 9)) = 24\nreach 24! expression: ((9 - 12) * (1 - 9))"}, {"input": "12 9 1 9\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 1, 9\n(9) - (1) = 8, left: (9 - 1) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (9 - 1)) = 24\nreach 24! expression: ((12 - 9) * (9 - 1))"}, {"input": "12 9 1 9\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (9 - 1)) = 24\nreach 24! expression: ((12 - 9) * (9 - 1))"}, {"input": "12 9 1 9\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 12, 9\n(9) - (12) = -3, left: (9 - 12) = -3, (1 - 9) = -8\n(-8) * (-3) = 24, left: ((1 - 9) * (9 - 12)) = 24\nreach 24! expression: ((1 - 9) * (9 - 12))"}, {"input": "12 9 1 9\n", "output": "(1) / (12) = 1/12, left: (1 / 12) = 1/12, 9, 9\nroll back, left: 12 9 1 9\n(12) + (1) = 13, left: (12 + 1) = 13, 9, 9\nroll back, left: 12 9 1 9\n(12) / (1) = 12, left: (12 / 1) = 12, 9, 9\nroll back, left: 12 9 1 9\n(12) - (9) = 3, left: (12 - 9) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (9 - 1)) = 24\nreach 24! expression: ((12 - 9) * (9 - 1))"}, {"input": "12 9 1 9\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 1, 9\n(1) / (9) = 1/9, left: (1 / 9) = 1/9, (9 / 12) = 3/4\nroll back, left: (9 / 12) = 3/4, 1, 9\nroll back, left: 12 9 1 9\n(12) - (9) = 3, left: (12 - 9) = 3, 1, 9\n(1) * (9) = 9, left: (1 * 9) = 9, (12 - 9) = 3\nroll back, left: (12 - 9) = 3, 1, 9\n(9) - (1) = 8, left: (9 - 1) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (9 - 1)) = 24\nreach 24! expression: ((12 - 9) * (9 - 1))"}, {"input": "12 9 1 9\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 12, 9\n(10) - (12) = -2, left: ((1 + 9) - 12) = -2, 9\nroll back, left: (1 + 9) = 10, 12, 9\n(12) * (9) = 108, left: (12 * 9) = 108, (1 + 9) = 10\nroll back, left: (1 + 9) = 10, 12, 9\nroll back, left: 12 9 1 9\n(1) - (9) = -8, left: (1 - 9) = -8, 12, 9\n(9) - (12) = -3, left: (9 - 12) = -3, (1 - 9) = -8\n(-8) * (-3) = 24, left: ((1 - 9) * (9 - 12)) = 24\nreach 24! expression: ((1 - 9) * (9 - 12))"}, {"input": "12 9 1 9\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 9, 1\n(3/4) - (9) = -33/4, left: ((9 / 12) - 9) = -33/4, 1\nroll back, left: (9 / 12) = 3/4, 9, 1\nroll back, left: 12 9 1 9\n(9) - (12) = -3, left: (9 - 12) = -3, 9, 1\n(9) * (1) = 9, left: (9 * 1) = 9, (9 - 12) = -3\nroll back, left: (9 - 12) = -3, 9, 1\n(1) - (9) = -8, left: (1 - 9) = -8, (9 - 12) = -3\n(-3) * (-8) = 24, left: ((9 - 12) * (1 - 9)) = 24\nreach 24! expression: ((9 - 12) * (1 - 9))"}, {"input": "4 3 4 4\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (4 + 3)) = 28, 4\n(28) - (4) = 24, left: ((4 * (4 + 3)) - 4) = 24\nreach 24! expression: ((4 * (4 + 3)) - 4)"}, {"input": "4 3 4 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (3 + 4)) = 28, 4\n(28) - (4) = 24, left: ((4 * (3 + 4)) - 4) = 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 3, 4\n(3) - (4) = -1, left: (3 - 4) = -1, (4 - 4) = 0\nroll back, left: (4 - 4) = 0, 3, 4\nroll back, left: 4 3 4 4\n(4) - (4) = 0, left: (4 - 4) = 0, 3, 4\nroll back, left: 4 3 4 4\n(3) + (4) = 7, left: (3 + 4) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (3 + 4)) = 28, 4\n(28) - (4) = 24, left: ((4 * (3 + 4)) - 4) = 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 3, 4\nroll back, left: 4 3 4 4\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (3 / 4) = 3/4\nroll back, left: (3 / 4) = 3/4, 4, 4\nroll back, left: 4 3 4 4\n(3) + (4) = 7, left: (3 + 4) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (3 + 4)) = 28, 4\n(28) - (4) = 24, left: ((4 * (3 + 4)) - 4) = 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 4, 4\nroll back, left: 4 3 4 4\n(3) * (4) = 12, left: (3 * 4) = 12, 4, 4\nroll back, left: 4 3 4 4\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, 4, 4\nroll back, left: 4 3 4 4\n(3) + (4) = 7, left: (3 + 4) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (3 + 4)) = 28, 4\n(28) - (4) = 24, left: ((4 * (3 + 4)) - 4) = 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 4, 4\n(4) / (12) = 1/3, left: (4 / (4 * 3)) = 1/3, 4\nroll back, left: (4 * 3) = 12, 4, 4\nroll back, left: 4 3 4 4\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, 4, 4\nroll back, left: 4 3 4 4\n(4) + (3) = 7, left: (4 + 3) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (4 + 3)) = 28, 4\n(28) - (4) = 24, left: ((4 * (4 + 3)) - 4) = 24\nreach 24! expression: ((4 * (4 + 3)) - 4)"}, {"input": "4 3 4 4\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 4, 3\nroll back, left: 4 3 4 4\n(3) * (4) = 12, left: (3 * 4) = 12, 4, 4\n(12) / (4) = 3, left: ((3 * 4) / 4) = 3, 4\nroll back, left: (3 * 4) = 12, 4, 4\nroll back, left: 4 3 4 4\n(3) + (4) = 7, left: (3 + 4) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (3 + 4)) = 28, 4\n(28) - (4) = 24, left: ((4 * (3 + 4)) - 4) = 24\nreach 24! expression: ((4 * (3 + 4)) - 4)"}, {"input": "7 6 3 3\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 6, 3\n(6) + (21) = 27, left: (6 + (7 * 3)) = 27, 3\n(27) - (3) = 24, left: ((6 + (7 * 3)) - 3) = 24\nreach 24! expression: ((6 + (7 * 3)) - 3)"}, {"input": "7 6 3 3\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (3 - 6) = -3\n(21) - (-3) = 24, left: ((7 * 3) - (3 - 6)) = 24\nreach 24! expression: ((7 * 3) - (3 - 6))"}, {"input": "7 6 3 3\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (6 - 3) = 3\n(3) + (21) = 24, left: ((6 - 3) + (7 * 3)) = 24\nreach 24! expression: ((6 - 3) + (7 * 3))"}, {"input": "7 6 3 3\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 7, 3\n(7) * (-3) = -21, left: (7 * (3 - 6)) = -21, 3\n(3) - (-21) = 24, left: (3 - (7 * (3 - 6))) = 24\nreach 24! expression: (3 - (7 * (3 - 6)))"}, {"input": "7 6 3 3\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 7, 3\nroll back, left: 7 6 3 3\n(3) - (6) = -3, left: (3 - 6) = -3, 7, 3\n(7) - (-3) = 10, left: (7 - (3 - 6)) = 10, 3\nroll back, left: (3 - 6) = -3, 7, 3\n(-3) / (7) = -3/7, left: ((3 - 6) / 7) = -3/7, 3\nroll back, left: (3 - 6) = -3, 7, 3\n(7) * (-3) = -21, left: (7 * (3 - 6)) = -21, 3\n(3) - (-21) = 24, left: (3 - (7 * (3 - 6))) = 24\nreach 24! expression: (3 - (7 * (3 - 6)))"}, {"input": "7 6 3 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 7, 3\n(7) + (2) = 9, left: (7 + (6 / 3)) = 9, 3\n(9) / (3) = 3, left: ((7 + (6 / 3)) / 3) = 3\nroll back, left: (7 + (6 / 3)) = 9, 3\nroll back, left: (6 / 3) = 2, 7, 3\nroll back, left: 7 6 3 3\n(3) - (6) = -3, left: (3 - 6) = -3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (3 - 6) = -3\n(21) - (-3) = 24, left: ((7 * 3) - (3 - 6)) = 24\nreach 24! expression: ((7 * 3) - (3 - 6))"}, {"input": "7 6 3 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 7, 6\nroll back, left: 7 6 3 3\n(3) - (3) = 0, left: (3 - 3) = 0, 7, 6\nroll back, left: 7 6 3 3\n(3) / (3) = 1, left: (3 / 3) = 1, 7, 6\nroll back, left: 7 6 3 3\n(3) - (6) = -3, left: (3 - 6) = -3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (3 - 6) = -3\n(21) - (-3) = 24, left: ((7 * 3) - (3 - 6)) = 24\nreach 24! expression: ((7 * 3) - (3 - 6))"}, {"input": "7 6 3 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 7, 3\n(3) - (7) = -4, left: (3 - 7) = -4, (6 / 3) = 2\nroll back, left: (6 / 3) = 2, 7, 3\nroll back, left: 7 6 3 3\n(6) + (3) = 9, left: (6 + 3) = 9, 7, 3\nroll back, left: 7 6 3 3\n(6) - (3) = 3, left: (6 - 3) = 3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (6 - 3) = 3\n(3) + (21) = 24, left: ((6 - 3) + (7 * 3)) = 24\nreach 24! expression: ((6 - 3) + (7 * 3))"}, {"input": "7 6 3 3\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 6, 3\n(-4) / (6) = -2/3, left: ((3 - 7) / 6) = -2/3, 3\n(-2/3) - (3) = -11/3, left: (((3 - 7) / 6) - 3) = -11/3\nroll back, left: ((3 - 7) / 6) = -2/3, 3\nroll back, left: (3 - 7) = -4, 6, 3\nroll back, left: 7 6 3 3\n(7) * (3) = 21, left: (7 * 3) = 21, 6, 3\n(6) + (21) = 27, left: (6 + (7 * 3)) = 27, 3\n(27) - (3) = 24, left: ((6 + (7 * 3)) - 3) = 24\nreach 24! expression: ((6 + (7 * 3)) - 3)"}, {"input": "13 12 1 1\n", "output": "(1) - (13) = -12, left: (1 - 13) = -12, 12, 1\n(12) - (-12) = 24, left: (12 - (1 - 13)) = 24, 1\n(24) / (1) = 24, left: ((12 - (1 - 13)) / 1) = 24\nreach 24! expression: ((12 - (1 - 13)) / 1)"}, {"input": "13 12 1 1\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 13, 1\n(13) * (1) = 13, left: (13 * 1) = 13, (12 - 1) = 11\n(11) + (13) = 24, left: ((12 - 1) + (13 * 1)) = 24\nreach 24! expression: ((12 - 1) + (13 * 1))"}, {"input": "13 12 1 1\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 13, 1\n(13) + (11) = 24, left: (13 + (12 - 1)) = 24, 1\n(24) / (1) = 24, left: ((13 + (12 - 1)) / 1) = 24\nreach 24! expression: ((13 + (12 - 1)) / 1)"}, {"input": "13 12 1 1\n", "output": "(12) * (1) = 12, left: (12 * 1) = 12, 13, 1\n(12) - (1) = 11, left: ((12 * 1) - 1) = 11, 13\n(13) + (11) = 24, left: (13 + ((12 * 1) - 1)) = 24\nreach 24! expression: (13 + ((12 * 1) - 1))"}, {"input": "13 12 1 1\n", "output": "(13) + (12) = 25, left: (13 + 12) = 25, 1, 1\n(25) / (1) = 25, left: ((13 + 12) / 1) = 25, 1\n(25) - (1) = 24, left: (((13 + 12) / 1) - 1) = 24\nreach 24! expression: (((13 + 12) / 1) - 1)"}, {"input": "13 12 1 1\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 1, 1\n(1) / (1) = 1, left: ((13 - 12) / 1) = 1, 1\n(1) + (1) = 2, left: (1 + ((13 - 12) / 1)) = 2\nroll back, left: ((13 - 12) / 1) = 1, 1\nroll back, left: (13 - 12) = 1, 1, 1\nroll back, left: 13 12 1 1\n(13) + (12) = 25, left: (13 + 12) = 25, 1, 1\n(25) / (1) = 25, left: ((13 + 12) / 1) = 25, 1\n(25) - (1) = 24, left: (((13 + 12) / 1) - 1) = 24\nreach 24! expression: (((13 + 12) / 1) - 1)"}, {"input": "5 7 3 1\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 7, 3\n(7) - (3) = 4, left: (7 - 3) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (7 - 3)) = 24\nreach 24! expression: ((5 + 1) * (7 - 3))"}, {"input": "5 7 3 1\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (7 - 3) = 4\n(4) * (6) = 24, left: ((7 - 3) * (5 + 1)) = 24\nreach 24! expression: ((7 - 3) * (5 + 1))"}, {"input": "5 7 3 1\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 3, 1\n(3) - (1) = 2, left: (3 - 1) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (3 - 1)) = 24\nreach 24! expression: ((5 + 7) * (3 - 1))"}, {"input": "5 7 3 1\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 3, 1\n(-2) / (1) = -2, left: ((5 - 7) / 1) = -2, 3\nroll back, left: (5 - 7) = -2, 3, 1\nroll back, left: 5 7 3 1\n(5) + (7) = 12, left: (5 + 7) = 12, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (5 + 7) = 12\nroll back, left: (5 + 7) = 12, 3, 1\n(3) - (1) = 2, left: (3 - 1) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (3 - 1)) = 24\nreach 24! expression: ((5 + 7) * (3 - 1))"}, {"input": "5 7 3 1\n", "output": "(1) / (5) = 1/5, left: (1 / 5) = 1/5, 7, 3\n(7) + (1/5) = 36/5, left: (7 + (1 / 5)) = 36/5, 3\nroll back, left: (1 / 5) = 1/5, 7, 3\n(1/5) / (3) = 1/15, left: ((1 / 5) / 3) = 1/15, 7\nroll back, left: (1 / 5) = 1/5, 7, 3\nroll back, left: 5 7 3 1\n(5) + (1) = 6, left: (5 + 1) = 6, 7, 3\n(7) - (3) = 4, left: (7 - 3) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (7 - 3)) = 24\nreach 24! expression: ((5 + 1) * (7 - 3))"}, {"input": "5 7 3 1\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 5, 1\n(7/3) / (1) = 7/3, left: ((7 / 3) / 1) = 7/3, 5\nroll back, left: (7 / 3) = 7/3, 5, 1\n(1) + (7/3) = 10/3, left: (1 + (7 / 3)) = 10/3, 5\nroll back, left: (7 / 3) = 7/3, 5, 1\nroll back, left: 5 7 3 1\n(7) - (3) = 4, left: (7 - 3) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (7 - 3) = 4\n(4) * (6) = 24, left: ((7 - 3) * (5 + 1)) = 24\nreach 24! expression: ((7 - 3) * (5 + 1))"}, {"input": "5 7 3 1\n", "output": "(5) * (7) = 35, left: (5 * 7) = 35, 3, 1\n(3) * (35) = 105, left: (3 * (5 * 7)) = 105, 1\nroll back, left: (5 * 7) = 35, 3, 1\nroll back, left: 5 7 3 1\n(5) / (7) = 5/7, left: (5 / 7) = 5/7, 3, 1\nroll back, left: 5 7 3 1\n(5) + (7) = 12, left: (5 + 7) = 12, 3, 1\n(3) - (1) = 2, left: (3 - 1) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (3 - 1)) = 24\nreach 24! expression: ((5 + 7) * (3 - 1))"}, {"input": "5 7 3 1\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 7, 1\nroll back, left: 5 7 3 1\n(5) / (7) = 5/7, left: (5 / 7) = 5/7, 3, 1\nroll back, left: 5 7 3 1\n(5) + (7) = 12, left: (5 + 7) = 12, 3, 1\n(3) - (12) = -9, left: (3 - (5 + 7)) = -9, 1\nroll back, left: (5 + 7) = 12, 3, 1\n(3) - (1) = 2, left: (3 - 1) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (3 - 1)) = 24\nreach 24! expression: ((5 + 7) * (3 - 1))"}, {"input": "3 2 12 6\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 3, 6\n(3) * (10) = 30, left: (3 * (12 - 2)) = 30, 6\n(30) - (6) = 24, left: ((3 * (12 - 2)) - 6) = 24\nreach 24! expression: ((3 * (12 - 2)) - 6)"}, {"input": "3 2 12 6\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 3, 2\n(2) + (6) = 8, left: (2 + (12 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (12 - 6))) = 24\nreach 24! expression: (3 * (2 + (12 - 6)))"}, {"input": "3 2 12 6\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 3, 6\n(3) * (6) = 18, left: (3 * 6) = 18, (12 / 2) = 6\n(6) + (18) = 24, left: ((12 / 2) + (3 * 6)) = 24\nreach 24! expression: ((12 / 2) + (3 * 6))"}, {"input": "3 2 12 6\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 3, 12\n(3) * (4) = 12, left: (3 * (6 - 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (3 * (6 - 2))) = 24\nreach 24! expression: (12 + (3 * (6 - 2)))"}, {"input": "3 2 12 6\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 12, 6\n(12) * (3/2) = 18, left: (12 * (3 / 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (12 * (3 / 2))) = 24\nreach 24! expression: (6 + (12 * (3 / 2)))"}, {"input": "3 2 12 6\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 3, 12\n(3) + (3) = 6, left: (3 + (6 / 2)) = 6, 12\n(12) + (6) = 18, left: (12 + (3 + (6 / 2))) = 18\nroll back, left: (3 + (6 / 2)) = 6, 12\nroll back, left: (6 / 2) = 3, 3, 12\nroll back, left: 3 2 12 6\n(6) - (2) = 4, left: (6 - 2) = 4, 3, 12\n(3) * (4) = 12, left: (3 * (6 - 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (3 * (6 - 2))) = 24\nreach 24! expression: (12 + (3 * (6 - 2)))"}, {"input": "3 2 12 6\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 3, 6\nroll back, left: 3 2 12 6\n(12) - (2) = 10, left: (12 - 2) = 10, 3, 6\n(10) - (3) = 7, left: ((12 - 2) - 3) = 7, 6\n(7) / (6) = 7/6, left: (((12 - 2) - 3) / 6) = 7/6\nroll back, left: ((12 - 2) - 3) = 7, 6\nroll back, left: (12 - 2) = 10, 3, 6\n(3) * (10) = 30, left: (3 * (12 - 2)) = 30, 6\n(30) - (6) = 24, left: ((3 * (12 - 2)) - 6) = 24\nreach 24! expression: ((3 * (12 - 2)) - 6)"}, {"input": "3 2 12 6\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 3, 2\n(2) * (6) = 12, left: (2 * (12 - 6)) = 12, 3\n(12) / (3) = 4, left: ((2 * (12 - 6)) / 3) = 4\nroll back, left: (2 * (12 - 6)) = 12, 3\nroll back, left: (12 - 6) = 6, 3, 2\n(2) - (6) = -4, left: (2 - (12 - 6)) = -4, 3\nroll back, left: (12 - 6) = 6, 3, 2\n(2) + (6) = 8, left: (2 + (12 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (12 - 6))) = 24\nreach 24! expression: (3 * (2 + (12 - 6)))"}, {"input": "2 6 6 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 2, 6\n(6) * (8) = 48, left: (6 * (6 + 2)) = 48, 2\n(48) / (2) = 24, left: ((6 * (6 + 2)) / 2) = 24\nreach 24! expression: ((6 * (6 + 2)) / 2)"}, {"input": "2 6 6 2\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (2 + 6)) = 24\nreach 24! expression: ((6 / 2) * (2 + 6))"}, {"input": "2 6 6 2\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 2, 6\n(2) * (6) = 12, left: (2 * 6) = 12, (6 * 2) = 12\n(12) + (12) = 24, left: ((6 * 2) + (2 * 6)) = 24\nreach 24! expression: ((6 * 2) + (2 * 6))"}, {"input": "2 6 6 2\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (2 / 6) = 1/3\n(8) / (1/3) = 24, left: ((6 + 2) / (2 / 6)) = 24\nreach 24! expression: ((6 + 2) / (2 / 6))"}, {"input": "2 6 6 2\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 6, 6\nroll back, left: 2 6 6 2\n(2) / (2) = 1, left: (2 / 2) = 1, 6, 6\n(1) - (6) = -5, left: ((2 / 2) - 6) = -5, 6\nroll back, left: (2 / 2) = 1, 6, 6\nroll back, left: 2 6 6 2\n(6) * (2) = 12, left: (6 * 2) = 12, 2, 6\n(2) * (6) = 12, left: (2 * 6) = 12, (6 * 2) = 12\n(12) + (12) = 24, left: ((6 * 2) + (2 * 6)) = 24\nreach 24! expression: ((6 * 2) + (2 * 6))"}, {"input": "2 6 6 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 2, 6\n(6) - (8) = -2, left: (6 - (6 + 2)) = -2, 2\n(2) - (-2) = 4, left: (2 - (6 - (6 + 2))) = 4\nroll back, left: (6 - (6 + 2)) = -2, 2\n(2) + (-2) = 0, left: (2 + (6 - (6 + 2))) = 0\nroll back, left: (6 - (6 + 2)) = -2, 2\nroll back, left: (6 + 2) = 8, 2, 6\n(6) * (8) = 48, left: (6 * (6 + 2)) = 48, 2\n(48) / (2) = 24, left: ((6 * (6 + 2)) / 2) = 24\nreach 24! expression: ((6 * (6 + 2)) / 2)"}, {"input": "2 6 6 2\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 2, 6\n(2) / (3) = 2/3, left: (2 / (6 / 2)) = 2/3, 6\nroll back, left: (6 / 2) = 3, 2, 6\n(2) + (3) = 5, left: (2 + (6 / 2)) = 5, 6\nroll back, left: (6 / 2) = 3, 2, 6\n(3) - (2) = 1, left: ((6 / 2) - 2) = 1, 6\nroll back, left: (6 / 2) = 3, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (6 / 2) = 3\n(3) * (8) = 24, left: ((6 / 2) * (2 + 6)) = 24\nreach 24! expression: ((6 / 2) * (2 + 6))"}, {"input": "11 4 2 3\n", "output": "(11) + (4) = 15, left: (11 + 4) = 15, 2, 3\n(15) - (3) = 12, left: ((11 + 4) - 3) = 12, 2\n(2) * (12) = 24, left: (2 * ((11 + 4) - 3)) = 24\nreach 24! expression: (2 * ((11 + 4) - 3))"}, {"input": "11 4 2 3\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 4, 3\n(9) - (3) = 6, left: ((11 - 2) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((11 - 2) - 3)) = 24\nreach 24! expression: (4 * ((11 - 2) - 3))"}, {"input": "11 4 2 3\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (4 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (4 - 3))) = 24\nreach 24! expression: (2 * (11 + (4 - 3)))"}, {"input": "11 4 2 3\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 11, 3\nroll back, left: 11 4 2 3\n(4) * (2) = 8, left: (4 * 2) = 8, 11, 3\n(8) / (3) = 8/3, left: ((4 * 2) / 3) = 8/3, 11\nroll back, left: (4 * 2) = 8, 11, 3\nroll back, left: 11 4 2 3\n(11) - (2) = 9, left: (11 - 2) = 9, 4, 3\n(9) - (3) = 6, left: ((11 - 2) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((11 - 2) - 3)) = 24\nreach 24! expression: (4 * ((11 - 2) - 3))"}, {"input": "11 4 2 3\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 2, 3\nroll back, left: 11 4 2 3\n(4) / (11) = 4/11, left: (4 / 11) = 4/11, 2, 3\n(2) - (4/11) = 18/11, left: (2 - (4 / 11)) = 18/11, 3\nroll back, left: (4 / 11) = 4/11, 2, 3\nroll back, left: 11 4 2 3\n(11) + (4) = 15, left: (11 + 4) = 15, 2, 3\n(15) - (3) = 12, left: ((11 + 4) - 3) = 12, 2\n(2) * (12) = 24, left: (2 * ((11 + 4) - 3)) = 24\nreach 24! expression: (2 * ((11 + 4) - 3))"}, {"input": "11 4 2 3\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 11, 2\nroll back, left: 11 4 2 3\n(4) * (3) = 12, left: (4 * 3) = 12, 11, 2\n(11) - (12) = -1, left: (11 - (4 * 3)) = -1, 2\nroll back, left: (4 * 3) = 12, 11, 2\nroll back, left: 11 4 2 3\n(4) - (3) = 1, left: (4 - 3) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (4 - 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (4 - 3))) = 24\nreach 24! expression: (2 * (11 + (4 - 3)))"}, {"input": "4 5 7 8\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (8 / 4) = 2\n(2) * (12) = 24, left: ((8 / 4) * (5 + 7)) = 24\nreach 24! expression: ((8 / 4) * (5 + 7))"}, {"input": "4 5 7 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 4, 5\n(5) + (15) = 20, left: (5 + (7 + 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 + (7 + 8))) = 24\nreach 24! expression: (4 + (5 + (7 + 8)))"}, {"input": "4 5 7 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 4, 7\n(4) + (13) = 17, left: (4 + (5 + 8)) = 17, 7\n(7) + (17) = 24, left: (7 + (4 + (5 + 8))) = 24\nreach 24! expression: (7 + (4 + (5 + 8)))"}, {"input": "4 5 7 8\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (8 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (8 - 7))) = 24\nreach 24! expression: (4 * (5 + (8 - 7)))"}, {"input": "4 5 7 8\n", "output": "(4) + (5) = 9, left: (4 + 5) = 9, 7, 8\n(7) + (9) = 16, left: (7 + (4 + 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (7 + (4 + 5))) = 24\nreach 24! expression: (8 + (7 + (4 + 5)))"}, {"input": "4 5 7 8\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 4, 7\n(4) - (8/5) = 12/5, left: (4 - (8 / 5)) = 12/5, 7\nroll back, left: (8 / 5) = 8/5, 4, 7\n(4) + (8/5) = 28/5, left: (4 + (8 / 5)) = 28/5, 7\nroll back, left: (8 / 5) = 8/5, 4, 7\nroll back, left: 4 5 7 8\n(5) + (8) = 13, left: (5 + 8) = 13, 4, 7\n(4) + (13) = 17, left: (4 + (5 + 8)) = 17, 7\n(7) + (17) = 24, left: (7 + (4 + (5 + 8))) = 24\nreach 24! expression: (7 + (4 + (5 + 8)))"}, {"input": "4 5 7 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 4, 5\n(5) + (15) = 20, left: (5 + (7 + 8)) = 20, 4\n(4) / (20) = 1/5, left: (4 / (5 + (7 + 8))) = 1/5\nroll back, left: (5 + (7 + 8)) = 20, 4\n(4) * (20) = 80, left: (4 * (5 + (7 + 8))) = 80\nroll back, left: (5 + (7 + 8)) = 20, 4\n(20) / (4) = 5, left: ((5 + (7 + 8)) / 4) = 5\nroll back, left: (5 + (7 + 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 + (7 + 8))) = 24\nreach 24! expression: (4 + (5 + (7 + 8)))"}, {"input": "4 5 7 8\n", "output": "(4) * (8) = 32, left: (4 * 8) = 32, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (4 * 8) = 32\nroll back, left: (4 * 8) = 32, 5, 7\nroll back, left: 4 5 7 8\n(8) / (4) = 2, left: (8 / 4) = 2, 5, 7\n(7) / (5) = 7/5, left: (7 / 5) = 7/5, (8 / 4) = 2\nroll back, left: (8 / 4) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (8 / 4) = 2\n(2) * (12) = 24, left: ((8 / 4) * (5 + 7)) = 24\nreach 24! expression: ((8 / 4) * (5 + 7))"}, {"input": "4 5 7 8\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 7, 8\n(8) - (7) = 1, left: (8 - 7) = 1, (5 / 4) = 5/4\nroll back, left: (5 / 4) = 5/4, 7, 8\nroll back, left: 4 5 7 8\n(4) * (5) = 20, left: (4 * 5) = 20, 7, 8\nroll back, left: 4 5 7 8\n(4) + (5) = 9, left: (4 + 5) = 9, 7, 8\n(7) + (9) = 16, left: (7 + (4 + 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (7 + (4 + 5))) = 24\nreach 24! expression: (8 + (7 + (4 + 5)))"}, {"input": "4 5 7 8\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 4, 5\n(4) + (5) = 9, left: (4 + 5) = 9, (8 - 7) = 1\nroll back, left: (8 - 7) = 1, 4, 5\n(1) - (4) = -3, left: ((8 - 7) - 4) = -3, 5\nroll back, left: (8 - 7) = 1, 4, 5\n(4) + (1) = 5, left: (4 + (8 - 7)) = 5, 5\nroll back, left: (8 - 7) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (8 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (8 - 7))) = 24\nreach 24! expression: (4 * (5 + (8 - 7)))"}, {"input": "4 5 7 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 4, 5\n(5) + (15) = 20, left: (5 + (7 + 8)) = 20, 4\n(4) / (20) = 1/5, left: (4 / (5 + (7 + 8))) = 1/5\nroll back, left: (5 + (7 + 8)) = 20, 4\n(4) * (20) = 80, left: (4 * (5 + (7 + 8))) = 80\nroll back, left: (5 + (7 + 8)) = 20, 4\n(20) / (4) = 5, left: ((5 + (7 + 8)) / 4) = 5\nroll back, left: (5 + (7 + 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 + (7 + 8))) = 24\nreach 24! expression: (4 + (5 + (7 + 8)))"}, {"input": "4 5 7 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 4, 5\n(5) + (15) = 20, left: (5 + (7 + 8)) = 20, 4\n(4) / (20) = 1/5, left: (4 / (5 + (7 + 8))) = 1/5\nroll back, left: (5 + (7 + 8)) = 20, 4\n(4) * (20) = 80, left: (4 * (5 + (7 + 8))) = 80\nroll back, left: (5 + (7 + 8)) = 20, 4\n(20) / (4) = 5, left: ((5 + (7 + 8)) / 4) = 5\nroll back, left: (5 + (7 + 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 + (7 + 8))) = 24\nreach 24! expression: (4 + (5 + (7 + 8)))"}, {"input": "4 5 7 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 4, 5\n(5) + (15) = 20, left: (5 + (7 + 8)) = 20, 4\n(4) / (20) = 1/5, left: (4 / (5 + (7 + 8))) = 1/5\nroll back, left: (5 + (7 + 8)) = 20, 4\n(4) * (20) = 80, left: (4 * (5 + (7 + 8))) = 80\nroll back, left: (5 + (7 + 8)) = 20, 4\n(20) / (4) = 5, left: ((5 + (7 + 8)) / 4) = 5\nroll back, left: (5 + (7 + 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 + (7 + 8))) = 24\nreach 24! expression: (4 + (5 + (7 + 8)))"}, {"input": "5 4 1 3\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 5, 4\n(5) * (4) = 20, left: (5 * (1 + 3)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 * (1 + 3))) = 24\nreach 24! expression: (4 + (5 * (1 + 3)))"}, {"input": "5 4 1 3\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (1 + 3) = 4\n(4) + (20) = 24, left: ((1 + 3) + (5 * 4)) = 24\nreach 24! expression: ((1 + 3) + (5 * 4))"}, {"input": "5 4 1 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 4, 1\n(4) - (1) = 3, left: (4 - 1) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (4 - 1)) = 24\nreach 24! expression: ((5 + 3) * (4 - 1))"}, {"input": "5 4 1 3\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 5, 4\n(5) * (2) = 10, left: (5 * (3 - 1)) = 10, 4\n(10) / (4) = 5/2, left: ((5 * (3 - 1)) / 4) = 5/2\nroll back, left: (5 * (3 - 1)) = 10, 4\nroll back, left: (3 - 1) = 2, 5, 4\nroll back, left: 5 4 1 3\n(1) + (3) = 4, left: (1 + 3) = 4, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (1 + 3) = 4\n(4) + (20) = 24, left: ((1 + 3) + (5 * 4)) = 24\nreach 24! expression: ((1 + 3) + (5 * 4))"}, {"input": "5 4 1 3\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 4, 1\nroll back, left: 5 4 1 3\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 4, 1\n(1) * (3/5) = 3/5, left: (1 * (3 / 5)) = 3/5, 4\nroll back, left: (3 / 5) = 3/5, 4, 1\nroll back, left: 5 4 1 3\n(5) + (3) = 8, left: (5 + 3) = 8, 4, 1\n(4) - (1) = 3, left: (4 - 1) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (4 - 1)) = 24\nreach 24! expression: ((5 + 3) * (4 - 1))"}, {"input": "5 4 1 3\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 5, 4\n(-2) - (5) = -7, left: ((1 - 3) - 5) = -7, 4\nroll back, left: (1 - 3) = -2, 5, 4\nroll back, left: 5 4 1 3\n(1) + (3) = 4, left: (1 + 3) = 4, 5, 4\n(5) / (4) = 5/4, left: (5 / (1 + 3)) = 5/4, 4\nroll back, left: (1 + 3) = 4, 5, 4\n(5) * (4) = 20, left: (5 * (1 + 3)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 * (1 + 3))) = 24\nreach 24! expression: (4 + (5 * (1 + 3)))"}, {"input": "5 4 1 3\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 5, 1\nroll back, left: 5 4 1 3\n(4) - (3) = 1, left: (4 - 3) = 1, 5, 1\nroll back, left: 5 4 1 3\n(3) / (1) = 3, left: (3 / 1) = 3, 5, 4\nroll back, left: 5 4 1 3\n(1) + (3) = 4, left: (1 + 3) = 4, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (1 + 3) = 4\n(4) + (20) = 24, left: ((1 + 3) + (5 * 4)) = 24\nreach 24! expression: ((1 + 3) + (5 * 4))"}, {"input": "5 4 1 3\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 5, 1\n(7) - (5) = 2, left: ((4 + 3) - 5) = 2, 1\nroll back, left: (4 + 3) = 7, 5, 1\nroll back, left: 5 4 1 3\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, 5, 1\nroll back, left: 5 4 1 3\n(5) + (3) = 8, left: (5 + 3) = 8, 4, 1\n(4) - (1) = 3, left: (4 - 1) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (4 - 1)) = 24\nreach 24! expression: ((5 + 3) * (4 - 1))"}, {"input": "1 1 2 10\n", "output": "(1) + (10) = 11, left: (1 + 10) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (1 + 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (1 + 10))) = 24\nreach 24! expression: (2 * (1 + (1 + 10)))"}, {"input": "1 1 2 10\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 2, 10\n(10) + (2) = 12, left: (10 + (1 + 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (10 + (1 + 1))) = 24\nreach 24! expression: (2 * (10 + (1 + 1)))"}, {"input": "1 1 2 10\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 1, 2\n(1) / (9) = 1/9, left: (1 / (10 - 1)) = 1/9, 2\nroll back, left: (10 - 1) = 9, 1, 2\nroll back, left: 1 1 2 10\n(10) / (1) = 10, left: (10 / 1) = 10, 1, 2\nroll back, left: 1 1 2 10\n(1) + (10) = 11, left: (1 + 10) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (1 + 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (1 + 10))) = 24\nreach 24! expression: (2 * (1 + (1 + 10)))"}, {"input": "1 1 2 10\n", "output": "(1) / (10) = 1/10, left: (1 / 10) = 1/10, 1, 2\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, (1 / 10) = 1/10\nroll back, left: (1 / 10) = 1/10, 1, 2\nroll back, left: 1 1 2 10\n(1) - (10) = -9, left: (1 - 10) = -9, 1, 2\nroll back, left: 1 1 2 10\n(1) + (10) = 11, left: (1 + 10) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (1 + 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (1 + 10))) = 24\nreach 24! expression: (2 * (1 + (1 + 10)))"}, {"input": "1 1 2 10\n", "output": "(1) - (1) = 0, left: (1 - 1) = 0, 2, 10\nroll back, left: 1 1 2 10\n(1) * (1) = 1, left: (1 * 1) = 1, 2, 10\n(10) - (1) = 9, left: (10 - (1 * 1)) = 9, 2\nroll back, left: (1 * 1) = 1, 2, 10\nroll back, left: 1 1 2 10\n(1) + (1) = 2, left: (1 + 1) = 2, 2, 10\n(10) + (2) = 12, left: (10 + (1 + 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (10 + (1 + 1))) = 24\nreach 24! expression: (2 * (10 + (1 + 1)))"}, {"input": "1 1 2 10\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 1, 10\nroll back, left: 1 1 2 10\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 1, 10\nroll back, left: 1 1 2 10\n(10) / (1) = 10, left: (10 / 1) = 10, 1, 2\nroll back, left: 1 1 2 10\n(1) + (10) = 11, left: (1 + 10) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (1 + 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (1 + 10))) = 24\nreach 24! expression: (2 * (1 + (1 + 10)))"}, {"input": "1 1 2 10\n", "output": "(1) * (10) = 10, left: (1 * 10) = 10, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (1 * 10) = 10\nroll back, left: (1 * 10) = 10, 1, 2\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, (1 * 10) = 10\nroll back, left: (1 * 10) = 10, 1, 2\nroll back, left: 1 1 2 10\n(1) + (10) = 11, left: (1 + 10) = 11, 1, 2\n(1) + (11) = 12, left: (1 + (1 + 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (1 + 10))) = 24\nreach 24! expression: (2 * (1 + (1 + 10)))"}, {"input": "4 3 3 4\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (3 * 4) = 12\n(12) + (12) = 24, left: ((3 * 4) + (4 * 3)) = 24\nreach 24! expression: ((3 * 4) + (4 * 3))"}, {"input": "4 3 3 4\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 3, 4\n(3) * (4) = 12, left: (3 * 4) = 12, (4 * 3) = 12\n(12) + (12) = 24, left: ((4 * 3) + (3 * 4)) = 24\nreach 24! expression: ((4 * 3) + (3 * 4))"}, {"input": "4 3 3 4\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 4, 3\n(12) - (4) = 8, left: ((3 * 4) - 4) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 4) - 4)) = 24\nreach 24! expression: (3 * ((3 * 4) - 4))"}, {"input": "4 3 3 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (4 / 4) = 1\n(9) / (1) = 9, left: ((3 * 3) / (4 / 4)) = 9\nroll back, left: (3 * 3) = 9, (4 / 4) = 1\nroll back, left: (4 / 4) = 1, 3, 3\nroll back, left: 4 3 3 4\n(3) * (4) = 12, left: (3 * 4) = 12, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (3 * 4) = 12\n(12) + (12) = 24, left: ((3 * 4) + (4 * 3)) = 24\nreach 24! expression: ((3 * 4) + (4 * 3))"}, {"input": "4 3 3 4\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 3, 4\nroll back, left: 4 3 3 4\n(4) - (3) = 1, left: (4 - 3) = 1, 3, 4\n(3) + (4) = 7, left: (3 + 4) = 7, (4 - 3) = 1\nroll back, left: (4 - 3) = 1, 3, 4\nroll back, left: 4 3 3 4\n(4) * (3) = 12, left: (4 * 3) = 12, 3, 4\n(3) * (4) = 12, left: (3 * 4) = 12, (4 * 3) = 12\n(12) + (12) = 24, left: ((4 * 3) + (3 * 4)) = 24\nreach 24! expression: ((4 * 3) + (3 * 4))"}, {"input": "4 3 3 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 4, 3\nroll back, left: 4 3 3 4\n(4) - (3) = 1, left: (4 - 3) = 1, 4, 3\n(1) / (4) = 1/4, left: ((4 - 3) / 4) = 1/4, 3\nroll back, left: (4 - 3) = 1, 4, 3\nroll back, left: 4 3 3 4\n(3) * (4) = 12, left: (3 * 4) = 12, 4, 3\n(12) - (4) = 8, left: ((3 * 4) - 4) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 4) - 4)) = 24\nreach 24! expression: (3 * ((3 * 4) - 4))"}, {"input": "4 3 3 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 3, 4\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, (4 - 3) = 1\nroll back, left: (4 - 3) = 1, 3, 4\nroll back, left: 4 3 3 4\n(4) + (3) = 7, left: (4 + 3) = 7, 3, 4\nroll back, left: 4 3 3 4\n(4) * (3) = 12, left: (4 * 3) = 12, 3, 4\n(3) * (4) = 12, left: (3 * 4) = 12, (4 * 3) = 12\n(12) + (12) = 24, left: ((4 * 3) + (3 * 4)) = 24\nreach 24! expression: ((4 * 3) + (3 * 4))"}, {"input": "4 3 3 4\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 3, 3\nroll back, left: 4 3 3 4\n(3) * (3) = 9, left: (3 * 3) = 9, 4, 4\n(9) - (4) = 5, left: ((3 * 3) - 4) = 5, 4\nroll back, left: (3 * 3) = 9, 4, 4\nroll back, left: 4 3 3 4\n(4) * (3) = 12, left: (4 * 3) = 12, 3, 4\n(3) * (4) = 12, left: (3 * 4) = 12, (4 * 3) = 12\n(12) + (12) = 24, left: ((4 * 3) + (3 * 4)) = 24\nreach 24! expression: ((4 * 3) + (3 * 4))"}, {"input": "3 1 3 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (1 + 3)) = 24\nreach 24! expression: ((3 + 3) * (1 + 3))"}, {"input": "3 1 3 3\n", "output": "(3) + (1) = 4, left: (3 + 1) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (3 + 1) = 4\n(4) * (6) = 24, left: ((3 + 1) * (3 + 3)) = 24\nreach 24! expression: ((3 + 1) * (3 + 3))"}, {"input": "3 1 3 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (3 + 1)) = 24\nreach 24! expression: ((3 + 3) * (3 + 1))"}, {"input": "3 1 3 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 3, 1\n(9) - (1) = 8, left: ((3 * 3) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 3) - 1)) = 24\nreach 24! expression: (3 * ((3 * 3) - 1))"}, {"input": "3 1 3 3\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 1, 3\n(3) / (1) = 3, left: (3 / (3 / 3)) = 3, 1\nroll back, left: (3 / 3) = 1, 1, 3\nroll back, left: 3 1 3 3\n(3) + (3) = 6, left: (3 + 3) = 6, 1, 3\n(3) / (1) = 3, left: (3 / 1) = 3, (3 + 3) = 6\nroll back, left: (3 + 3) = 6, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (1 + 3)) = 24\nreach 24! expression: ((3 + 3) * (1 + 3))"}, {"input": "3 1 3 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 3, 1\n(9) / (1) = 9, left: ((3 * 3) / 1) = 9, 3\n(3) + (9) = 12, left: (3 + ((3 * 3) / 1)) = 12\nroll back, left: ((3 * 3) / 1) = 9, 3\nroll back, left: (3 * 3) = 9, 3, 1\n(9) - (1) = 8, left: ((3 * 3) - 1) = 8, 3\n(8) / (3) = 8/3, left: (((3 * 3) - 1) / 3) = 8/3\nroll back, left: ((3 * 3) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 3) - 1)) = 24\nreach 24! expression: (3 * ((3 * 3) - 1))"}, {"input": "3 1 3 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 3, 1\n(6) - (3) = 3, left: ((3 + 3) - 3) = 3, 1\nroll back, left: (3 + 3) = 6, 3, 1\n(3) / (1) = 3, left: (3 / 1) = 3, (3 + 3) = 6\n(3) - (6) = -3, left: ((3 / 1) - (3 + 3)) = -3\nroll back, left: (3 / 1) = 3, (3 + 3) = 6\nroll back, left: (3 + 3) = 6, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (3 + 1)) = 24\nreach 24! expression: ((3 + 3) * (3 + 1))"}, {"input": "3 1 3 3\n", "output": "(3) * (1) = 3, left: (3 * 1) = 3, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (3 * 1) = 3\n(3) * (6) = 18, left: ((3 * 1) * (3 + 3)) = 18\nroll back, left: (3 + 3) = 6, (3 * 1) = 3\nroll back, left: (3 * 1) = 3, 3, 3\nroll back, left: 3 1 3 3\n(3) + (1) = 4, left: (3 + 1) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (3 + 1) = 4\n(4) * (6) = 24, left: ((3 + 1) * (3 + 3)) = 24\nreach 24! expression: ((3 + 1) * (3 + 3))"}, {"input": "3 1 3 3\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 3, 3\nroll back, left: 3 1 3 3\n(3) + (1) = 4, left: (3 + 1) = 4, 3, 3\n(4) - (3) = 1, left: ((3 + 1) - 3) = 1, 3\nroll back, left: (3 + 1) = 4, 3, 3\n(4) / (3) = 4/3, left: ((3 + 1) / 3) = 4/3, 3\nroll back, left: (3 + 1) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (3 + 1) = 4\n(4) * (6) = 24, left: ((3 + 1) * (3 + 3)) = 24\nreach 24! expression: ((3 + 1) * (3 + 3))"}, {"input": "8 2 3 9\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (9 - 3)) = 48, 2\n(48) / (2) = 24, left: ((8 * (9 - 3)) / 2) = 24\nreach 24! expression: ((8 * (9 - 3)) / 2)"}, {"input": "8 2 3 9\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 8, 2\n(6) / (2) = 3, left: ((9 - 3) / 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 3) / 2)) = 24\nreach 24! expression: (8 * ((9 - 3) / 2))"}, {"input": "8 2 3 9\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((9 - 3) / (2 / 8)) = 24\nreach 24! expression: ((9 - 3) / (2 / 8))"}, {"input": "8 2 3 9\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (8 / 2) = 4\n(4) * (6) = 24, left: ((8 / 2) * (9 - 3)) = 24\nreach 24! expression: ((8 / 2) * (9 - 3))"}, {"input": "8 2 3 9\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (3 / 9) = 1/3\nroll back, left: (3 / 9) = 1/3, 8, 2\n(1/3) / (2) = 1/6, left: ((3 / 9) / 2) = 1/6, 8\nroll back, left: (3 / 9) = 1/3, 8, 2\nroll back, left: 8 2 3 9\n(9) - (3) = 6, left: (9 - 3) = 6, 8, 2\n(6) / (2) = 3, left: ((9 - 3) / 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 3) / 2)) = 24\nreach 24! expression: (8 * ((9 - 3) / 2))"}, {"input": "8 2 3 9\n", "output": "(8) + (3) = 11, left: (8 + 3) = 11, 2, 9\n(11) - (9) = 2, left: ((8 + 3) - 9) = 2, 2\nroll back, left: (8 + 3) = 11, 2, 9\nroll back, left: 8 2 3 9\n(8) - (2) = 6, left: (8 - 2) = 6, 3, 9\nroll back, left: 8 2 3 9\n(8) / (2) = 4, left: (8 / 2) = 4, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (8 / 2) = 4\n(4) * (6) = 24, left: ((8 / 2) * (9 - 3)) = 24\nreach 24! expression: ((8 / 2) * (9 - 3))"}, {"input": "8 2 3 9\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 3, 9\n(9) - (4) = 5, left: (9 - (8 / 2)) = 5, 3\nroll back, left: (8 / 2) = 4, 3, 9\n(9) + (4) = 13, left: (9 + (8 / 2)) = 13, 3\n(13) / (3) = 13/3, left: ((9 + (8 / 2)) / 3) = 13/3\nroll back, left: (9 + (8 / 2)) = 13, 3\nroll back, left: (8 / 2) = 4, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (8 / 2) = 4\n(4) * (6) = 24, left: ((8 / 2) * (9 - 3)) = 24\nreach 24! expression: ((8 / 2) * (9 - 3))"}, {"input": "8 2 3 9\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 2, 9\n(2) - (9) = -7, left: (2 - 9) = -7, (3 / 8) = 3/8\nroll back, left: (3 / 8) = 3/8, 2, 9\nroll back, left: 8 2 3 9\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 2, 9\nroll back, left: 8 2 3 9\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((9 - 3) / (2 / 8)) = 24\nreach 24! expression: ((9 - 3) / (2 / 8))"}, {"input": "8 2 3 9\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 8, 2\n(8) / (6) = 4/3, left: (8 / (9 - 3)) = 4/3, 2\n(4/3) / (2) = 2/3, left: ((8 / (9 - 3)) / 2) = 2/3\nroll back, left: (8 / (9 - 3)) = 4/3, 2\n(4/3) - (2) = -2/3, left: ((8 / (9 - 3)) - 2) = -2/3\nroll back, left: (8 / (9 - 3)) = 4/3, 2\nroll back, left: (9 - 3) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (9 - 3)) = 48, 2\n(48) / (2) = 24, left: ((8 * (9 - 3)) / 2) = 24\nreach 24! expression: ((8 * (9 - 3)) / 2)"}, {"input": "3 1 12 12\n", "output": "(1) * (12) = 12, left: (1 * 12) = 12, 3, 12\n(3) * (12) = 36, left: (3 * (1 * 12)) = 36, 12\n(36) - (12) = 24, left: ((3 * (1 * 12)) - 12) = 24\nreach 24! expression: ((3 * (1 * 12)) - 12)"}, {"input": "3 1 12 12\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 1, 12\n(12) / (1) = 12, left: (12 / 1) = 12, (3 * 12) = 36\n(36) - (12) = 24, left: ((3 * 12) - (12 / 1)) = 24\nreach 24! expression: ((3 * 12) - (12 / 1))"}, {"input": "3 1 12 12\n", "output": "(1) / (12) = 1/12, left: (1 / 12) = 1/12, 3, 12\n(3) / (1/12) = 36, left: (3 / (1 / 12)) = 36, 12\n(36) - (12) = 24, left: ((3 / (1 / 12)) - 12) = 24\nreach 24! expression: ((3 / (1 / 12)) - 12)"}, {"input": "3 1 12 12\n", "output": "(1) / (3) = 1/3, left: (1 / 3) = 1/3, 12, 12\n(12) / (1/3) = 36, left: (12 / (1 / 3)) = 36, 12\n(36) - (12) = 24, left: ((12 / (1 / 3)) - 12) = 24\nreach 24! expression: ((12 / (1 / 3)) - 12)"}, {"input": "3 1 12 12\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 1, 12\n(36) - (12) = 24, left: ((3 * 12) - 12) = 24, 1\n(24) / (1) = 24, left: (((3 * 12) - 12) / 1) = 24\nreach 24! expression: (((3 * 12) - 12) / 1)"}, {"input": "3 1 12 12\n", "output": "(3) - (12) = -9, left: (3 - 12) = -9, 1, 12\n(12) - (-9) = 21, left: (12 - (3 - 12)) = 21, 1\nroll back, left: (3 - 12) = -9, 1, 12\nroll back, left: 3 1 12 12\n(12) / (3) = 4, left: (12 / 3) = 4, 1, 12\nroll back, left: 3 1 12 12\n(3) * (12) = 36, left: (3 * 12) = 36, 1, 12\n(12) / (1) = 12, left: (12 / 1) = 12, (3 * 12) = 36\n(36) - (12) = 24, left: ((3 * 12) - (12 / 1)) = 24\nreach 24! expression: ((3 * 12) - (12 / 1))"}, {"input": "10 3 4 10\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (10 - 4) = 6\n(30) - (6) = 24, left: ((10 * 3) - (10 - 4)) = 24\nreach 24! expression: ((10 * 3) - (10 - 4))"}, {"input": "10 3 4 10\n", "output": "(10) * (3) = 30, left: (10 * 3) = 30, 4, 10\n(10) - (30) = -20, left: (10 - (10 * 3)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 - (10 * 3))) = 24\nreach 24! expression: (4 - (10 - (10 * 3)))"}, {"input": "10 3 4 10\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 3, 10\n(3) * (10) = 30, left: (3 * 10) = 30, (10 - 4) = 6\n(30) - (6) = 24, left: ((3 * 10) - (10 - 4)) = 24\nreach 24! expression: ((3 * 10) - (10 - 4))"}, {"input": "10 3 4 10\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 10, 4\n(4) + (30) = 34, left: (4 + (3 * 10)) = 34, 10\n(34) - (10) = 24, left: ((4 + (3 * 10)) - 10) = 24\nreach 24! expression: ((4 + (3 * 10)) - 10)"}, {"input": "10 3 4 10\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 10, 4\n(30) - (10) = 20, left: ((3 * 10) - 10) = 20, 4\n(4) + (20) = 24, left: (4 + ((3 * 10) - 10)) = 24\nreach 24! expression: (4 + ((3 * 10) - 10))"}, {"input": "10 3 4 10\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 4, 10\nroll back, left: 10 3 4 10\n(10) + (3) = 13, left: (10 + 3) = 13, 4, 10\n(4) - (10) = -6, left: (4 - 10) = -6, (10 + 3) = 13\nroll back, left: (10 + 3) = 13, 4, 10\nroll back, left: 10 3 4 10\n(10) * (3) = 30, left: (10 * 3) = 30, 4, 10\n(10) - (30) = -20, left: (10 - (10 * 3)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 - (10 * 3))) = 24\nreach 24! expression: (4 - (10 - (10 * 3)))"}, {"input": "10 3 4 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 3, 4\nroll back, left: 10 3 4 10\n(10) * (10) = 100, left: (10 * 10) = 100, 3, 4\nroll back, left: 10 3 4 10\n(10) / (10) = 1, left: (10 / 10) = 1, 3, 4\nroll back, left: 10 3 4 10\n(3) * (10) = 30, left: (3 * 10) = 30, 10, 4\n(30) - (10) = 20, left: ((3 * 10) - 10) = 20, 4\n(4) + (20) = 24, left: (4 + ((3 * 10) - 10)) = 24\nreach 24! expression: (4 + ((3 * 10) - 10))"}, {"input": "10 3 4 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 3, 4\nroll back, left: 10 3 4 10\n(4) * (10) = 40, left: (4 * 10) = 40, 10, 3\nroll back, left: 10 3 4 10\n(4) / (10) = 2/5, left: (4 / 10) = 2/5, 10, 3\nroll back, left: 10 3 4 10\n(10) - (4) = 6, left: (10 - 4) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (10 - 4) = 6\n(30) - (6) = 24, left: ((10 * 3) - (10 - 4)) = 24\nreach 24! expression: ((10 * 3) - (10 - 4))"}, {"input": "3 11 7 5\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 11, 5\n(11) - (5) = 6, left: (11 - 5) = 6, (7 - 3) = 4\n(4) * (6) = 24, left: ((7 - 3) * (11 - 5)) = 24\nreach 24! expression: ((7 - 3) * (11 - 5))"}, {"input": "3 11 7 5\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 3, 7\n(7) - (3) = 4, left: (7 - 3) = 4, (11 - 5) = 6\n(6) * (4) = 24, left: ((11 - 5) * (7 - 3)) = 24\nreach 24! expression: ((11 - 5) * (7 - 3))"}, {"input": "3 11 7 5\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 11, 5\n(5) - (11) = -6, left: (5 - 11) = -6, (3 - 7) = -4\n(-4) * (-6) = 24, left: ((3 - 7) * (5 - 11)) = 24\nreach 24! expression: ((3 - 7) * (5 - 11))"}, {"input": "3 11 7 5\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 3, 7\n(7) - (6) = 1, left: (7 - (11 - 5)) = 1, 3\nroll back, left: (11 - 5) = 6, 3, 7\n(7) * (6) = 42, left: (7 * (11 - 5)) = 42, 3\nroll back, left: (11 - 5) = 6, 3, 7\n(7) / (6) = 7/6, left: (7 / (11 - 5)) = 7/6, 3\nroll back, left: (11 - 5) = 6, 3, 7\n(7) - (3) = 4, left: (7 - 3) = 4, (11 - 5) = 6\n(6) * (4) = 24, left: ((11 - 5) * (7 - 3)) = 24\nreach 24! expression: ((11 - 5) * (7 - 3))"}, {"input": "3 11 7 5\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 11, 7\nroll back, left: 3 11 7 5\n(5) - (7) = -2, left: (5 - 7) = -2, 3, 11\n(11) - (-2) = 13, left: (11 - (5 - 7)) = 13, 3\nroll back, left: (5 - 7) = -2, 3, 11\nroll back, left: 3 11 7 5\n(3) - (7) = -4, left: (3 - 7) = -4, 11, 5\n(5) - (11) = -6, left: (5 - 11) = -6, (3 - 7) = -4\n(-4) * (-6) = 24, left: ((3 - 7) * (5 - 11)) = 24\nreach 24! expression: ((3 - 7) * (5 - 11))"}, {"input": "3 11 7 5\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 3, 11\nroll back, left: 3 11 7 5\n(3) * (7) = 21, left: (3 * 7) = 21, 11, 5\nroll back, left: 3 11 7 5\n(3) + (7) = 10, left: (3 + 7) = 10, 11, 5\nroll back, left: 3 11 7 5\n(3) - (7) = -4, left: (3 - 7) = -4, 11, 5\n(5) - (11) = -6, left: (5 - 11) = -6, (3 - 7) = -4\n(-4) * (-6) = 24, left: ((3 - 7) * (5 - 11)) = 24\nreach 24! expression: ((3 - 7) * (5 - 11))"}, {"input": "3 11 7 5\n", "output": "(3) * (5) = 15, left: (3 * 5) = 15, 11, 7\nroll back, left: 3 11 7 5\n(5) - (3) = 2, left: (5 - 3) = 2, 11, 7\nroll back, left: 3 11 7 5\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, 11, 7\nroll back, left: 3 11 7 5\n(7) - (3) = 4, left: (7 - 3) = 4, 11, 5\n(11) - (5) = 6, left: (11 - 5) = 6, (7 - 3) = 4\n(4) * (6) = 24, left: ((7 - 3) * (11 - 5)) = 24\nreach 24! expression: ((7 - 3) * (11 - 5))"}, {"input": "3 11 7 5\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 3, 7\n(3) - (6) = -3, left: (3 - (11 - 5)) = -3, 7\nroll back, left: (11 - 5) = 6, 3, 7\n(7) - (6) = 1, left: (7 - (11 - 5)) = 1, 3\n(1) - (3) = -2, left: ((7 - (11 - 5)) - 3) = -2\nroll back, left: (7 - (11 - 5)) = 1, 3\nroll back, left: (11 - 5) = 6, 3, 7\n(7) - (3) = 4, left: (7 - 3) = 4, (11 - 5) = 6\n(6) * (4) = 24, left: ((11 - 5) * (7 - 3)) = 24\nreach 24! expression: ((11 - 5) * (7 - 3))"}, {"input": "11 10 11 2\n", "output": "(11) + (11) = 22, left: (11 + 11) = 22, 10, 2\n(22) - (10) = 12, left: ((11 + 11) - 10) = 12, 2\n(2) * (12) = 24, left: (2 * ((11 + 11) - 10)) = 24\nreach 24! expression: (2 * ((11 + 11) - 10))"}, {"input": "11 10 11 2\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (11 - 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (11 - 10))) = 24\nreach 24! expression: (2 * (11 + (11 - 10)))"}, {"input": "11 10 11 2\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 11, 2\n(11) - (-1) = 12, left: (11 - (10 - 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 - (10 - 11))) = 24\nreach 24! expression: (2 * (11 - (10 - 11)))"}, {"input": "9 6 5 4\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 5, 4\n(4) + (15) = 19, left: (4 + (9 + 6)) = 19, 5\n(5) + (19) = 24, left: (5 + (4 + (9 + 6))) = 24\nreach 24! expression: (5 + (4 + (9 + 6)))"}, {"input": "9 6 5 4\n", "output": "(5) + (4) = 9, left: (5 + 4) = 9, 9, 6\n(9) + (6) = 15, left: (9 + 6) = 15, (5 + 4) = 9\n(9) + (15) = 24, left: ((5 + 4) + (9 + 6)) = 24\nreach 24! expression: ((5 + 4) + (9 + 6))"}, {"input": "9 6 5 4\n", "output": "(9) + (4) = 13, left: (9 + 4) = 13, 6, 5\n(6) + (5) = 11, left: (6 + 5) = 11, (9 + 4) = 13\n(13) + (11) = 24, left: ((9 + 4) + (6 + 5)) = 24\nreach 24! expression: ((9 + 4) + (6 + 5))"}, {"input": "9 6 5 4\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 6, 4\n(4) + (14) = 18, left: (4 + (9 + 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (4 + (9 + 5))) = 24\nreach 24! expression: (6 + (4 + (9 + 5)))"}, {"input": "9 6 5 4\n", "output": "(9) + (4) = 13, left: (9 + 4) = 13, 6, 5\n(6) + (13) = 19, left: (6 + (9 + 4)) = 19, 5\n(5) + (19) = 24, left: (5 + (6 + (9 + 4))) = 24\nreach 24! expression: (5 + (6 + (9 + 4)))"}, {"input": "9 6 5 4\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 5, 4\n(4) + (15) = 19, left: (4 + (9 + 6)) = 19, 5\n(5) - (19) = -14, left: (5 - (4 + (9 + 6))) = -14\nroll back, left: (4 + (9 + 6)) = 19, 5\n(19) / (5) = 19/5, left: ((4 + (9 + 6)) / 5) = 19/5\nroll back, left: (4 + (9 + 6)) = 19, 5\n(19) - (5) = 14, left: ((4 + (9 + 6)) - 5) = 14\nroll back, left: (4 + (9 + 6)) = 19, 5\n(5) + (19) = 24, left: (5 + (4 + (9 + 6))) = 24\nreach 24! expression: (5 + (4 + (9 + 6)))"}, {"input": "9 6 5 4\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 6, 5\n(5) / (4/9) = 45/4, left: (5 / (4 / 9)) = 45/4, 6\nroll back, left: (4 / 9) = 4/9, 6, 5\nroll back, left: 9 6 5 4\n(4) - (9) = -5, left: (4 - 9) = -5, 6, 5\nroll back, left: 9 6 5 4\n(9) + (4) = 13, left: (9 + 4) = 13, 6, 5\n(6) + (13) = 19, left: (6 + (9 + 4)) = 19, 5\n(5) + (19) = 24, left: (5 + (6 + (9 + 4))) = 24\nreach 24! expression: (5 + (6 + (9 + 4)))"}, {"input": "9 6 5 4\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 6, 5\nroll back, left: 9 6 5 4\n(9) * (4) = 36, left: (9 * 4) = 36, 6, 5\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, (9 * 4) = 36\nroll back, left: (9 * 4) = 36, 6, 5\nroll back, left: 9 6 5 4\n(9) + (4) = 13, left: (9 + 4) = 13, 6, 5\n(6) + (5) = 11, left: (6 + 5) = 11, (9 + 4) = 13\n(13) + (11) = 24, left: ((9 + 4) + (6 + 5)) = 24\nreach 24! expression: ((9 + 4) + (6 + 5))"}, {"input": "9 6 5 4\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 9, 6\n(9) + (6) = 15, left: (9 + 6) = 15, (4 / 5) = 4/5\nroll back, left: (4 / 5) = 4/5, 9, 6\n(9) * (6) = 54, left: (9 * 6) = 54, (4 / 5) = 4/5\nroll back, left: (4 / 5) = 4/5, 9, 6\nroll back, left: 9 6 5 4\n(5) + (4) = 9, left: (5 + 4) = 9, 9, 6\n(9) + (6) = 15, left: (9 + 6) = 15, (5 + 4) = 9\n(9) + (15) = 24, left: ((5 + 4) + (9 + 6)) = 24\nreach 24! expression: ((5 + 4) + (9 + 6))"}, {"input": "9 6 5 4\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 6, 4\n(14) - (4) = 10, left: ((9 + 5) - 4) = 10, 6\nroll back, left: (9 + 5) = 14, 6, 4\n(4) / (14) = 2/7, left: (4 / (9 + 5)) = 2/7, 6\nroll back, left: (9 + 5) = 14, 6, 4\n(4) - (14) = -10, left: (4 - (9 + 5)) = -10, 6\nroll back, left: (9 + 5) = 14, 6, 4\n(4) + (14) = 18, left: (4 + (9 + 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (4 + (9 + 5))) = 24\nreach 24! expression: (6 + (4 + (9 + 5)))"}, {"input": "9 6 5 4\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 5, 4\n(4) + (15) = 19, left: (4 + (9 + 6)) = 19, 5\n(5) - (19) = -14, left: (5 - (4 + (9 + 6))) = -14\nroll back, left: (4 + (9 + 6)) = 19, 5\n(19) / (5) = 19/5, left: ((4 + (9 + 6)) / 5) = 19/5\nroll back, left: (4 + (9 + 6)) = 19, 5\n(19) - (5) = 14, left: ((4 + (9 + 6)) - 5) = 14\nroll back, left: (4 + (9 + 6)) = 19, 5\n(5) + (19) = 24, left: (5 + (4 + (9 + 6))) = 24\nreach 24! expression: (5 + (4 + (9 + 6)))"}, {"input": "9 6 5 4\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 5, 4\n(4) + (15) = 19, left: (4 + (9 + 6)) = 19, 5\n(5) - (19) = -14, left: (5 - (4 + (9 + 6))) = -14\nroll back, left: (4 + (9 + 6)) = 19, 5\n(19) / (5) = 19/5, left: ((4 + (9 + 6)) / 5) = 19/5\nroll back, left: (4 + (9 + 6)) = 19, 5\n(19) - (5) = 14, left: ((4 + (9 + 6)) - 5) = 14\nroll back, left: (4 + (9 + 6)) = 19, 5\n(5) + (19) = 24, left: (5 + (4 + (9 + 6))) = 24\nreach 24! expression: (5 + (4 + (9 + 6)))"}, {"input": "9 6 5 4\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 5, 4\n(4) + (15) = 19, left: (4 + (9 + 6)) = 19, 5\n(5) - (19) = -14, left: (5 - (4 + (9 + 6))) = -14\nroll back, left: (4 + (9 + 6)) = 19, 5\n(19) / (5) = 19/5, left: ((4 + (9 + 6)) / 5) = 19/5\nroll back, left: (4 + (9 + 6)) = 19, 5\n(19) - (5) = 14, left: ((4 + (9 + 6)) - 5) = 14\nroll back, left: (4 + (9 + 6)) = 19, 5\n(5) + (19) = 24, left: (5 + (4 + (9 + 6))) = 24\nreach 24! expression: (5 + (4 + (9 + 6)))"}, {"input": "3 6 9 7\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 6, 7\n(7) - (3) = 4, left: (7 - (9 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (9 / 3))) = 24\nreach 24! expression: (6 * (7 - (9 / 3)))"}, {"input": "3 6 9 7\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 6, 9\n(6) - (9) = -3, left: (6 - 9) = -3, (3 * 7) = 21\n(21) - (-3) = 24, left: ((3 * 7) - (6 - 9)) = 24\nreach 24! expression: ((3 * 7) - (6 - 9))"}, {"input": "3 6 9 7\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 3, 6\n(6) - (-2) = 8, left: (6 - (7 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (7 - 9))) = 24\nreach 24! expression: (3 * (6 - (7 - 9)))"}, {"input": "3 6 9 7\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 6, 9\n(21) - (6) = 15, left: ((3 * 7) - 6) = 15, 9\n(9) + (15) = 24, left: (9 + ((3 * 7) - 6)) = 24\nreach 24! expression: (9 + ((3 * 7) - 6))"}, {"input": "3 6 9 7\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 6, 7\n(6) + (7) = 13, left: (6 + 7) = 13, (9 - 3) = 6\nroll back, left: (9 - 3) = 6, 6, 7\nroll back, left: 3 6 9 7\n(3) * (9) = 27, left: (3 * 9) = 27, 6, 7\nroll back, left: 3 6 9 7\n(9) / (3) = 3, left: (9 / 3) = 3, 6, 7\n(7) - (3) = 4, left: (7 - (9 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (9 / 3))) = 24\nreach 24! expression: (6 * (7 - (9 / 3)))"}, {"input": "3 6 9 7\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 6, 9\nroll back, left: 3 6 9 7\n(3) * (7) = 21, left: (3 * 7) = 21, 6, 9\n(6) * (9) = 54, left: (6 * 9) = 54, (3 * 7) = 21\nroll back, left: (3 * 7) = 21, 6, 9\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, (3 * 7) = 21\nroll back, left: (3 * 7) = 21, 6, 9\n(6) - (9) = -3, left: (6 - 9) = -3, (3 * 7) = 21\n(21) - (-3) = 24, left: ((3 * 7) - (6 - 9)) = 24\nreach 24! expression: ((3 * 7) - (6 - 9))"}, {"input": "3 6 9 7\n", "output": "(9) + (7) = 16, left: (9 + 7) = 16, 3, 6\nroll back, left: 3 6 9 7\n(9) / (7) = 9/7, left: (9 / 7) = 9/7, 3, 6\n(6) - (3) = 3, left: (6 - 3) = 3, (9 / 7) = 9/7\nroll back, left: (9 / 7) = 9/7, 3, 6\nroll back, left: 3 6 9 7\n(7) - (9) = -2, left: (7 - 9) = -2, 3, 6\n(6) - (-2) = 8, left: (6 - (7 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (7 - 9))) = 24\nreach 24! expression: (3 * (6 - (7 - 9)))"}, {"input": "3 6 9 7\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 6, 9\n(-4) / (9) = -4/9, left: ((3 - 7) / 9) = -4/9, 6\nroll back, left: (3 - 7) = -4, 6, 9\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, (3 - 7) = -4\nroll back, left: (3 - 7) = -4, 6, 9\nroll back, left: 3 6 9 7\n(3) * (7) = 21, left: (3 * 7) = 21, 6, 9\n(21) - (6) = 15, left: ((3 * 7) - 6) = 15, 9\n(9) + (15) = 24, left: (9 + ((3 * 7) - 6)) = 24\nreach 24! expression: (9 + ((3 * 7) - 6))"}, {"input": "3 6 9 7\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 6, 7\nroll back, left: 3 6 9 7\n(9) - (3) = 6, left: (9 - 3) = 6, 6, 7\n(7) * (6) = 42, left: (7 * (9 - 3)) = 42, 6\nroll back, left: (9 - 3) = 6, 6, 7\nroll back, left: 3 6 9 7\n(9) / (3) = 3, left: (9 / 3) = 3, 6, 7\n(7) - (3) = 4, left: (7 - (9 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (9 / 3))) = 24\nreach 24! expression: (6 * (7 - (9 / 3)))"}, {"input": "12 5 2 10\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 2, 10\n(2) * (7) = 14, left: (2 * (12 - 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (12 - 5))) = 24\nreach 24! expression: (10 + (2 * (12 - 5)))"}, {"input": "12 5 2 10\n", "output": "(5) - (12) = -7, left: (5 - 12) = -7, 2, 10\n(2) * (-7) = -14, left: (2 * (5 - 12)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (5 - 12))) = 24\nreach 24! expression: (10 - (2 * (5 - 12)))"}, {"input": "12 5 2 10\n", "output": "(12) + (5) = 17, left: (12 + 5) = 17, 2, 10\n(2) * (17) = 34, left: (2 * (12 + 5)) = 34, 10\n(34) - (10) = 24, left: ((2 * (12 + 5)) - 10) = 24\nreach 24! expression: ((2 * (12 + 5)) - 10)"}, {"input": "12 5 2 10\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 12, 2\n(12) - (2) = 10, left: (12 - 2) = 10, (10 / 5) = 2\nroll back, left: (10 / 5) = 2, 12, 2\nroll back, left: 12 5 2 10\n(2) + (10) = 12, left: (2 + 10) = 12, 12, 5\nroll back, left: 12 5 2 10\n(5) - (12) = -7, left: (5 - 12) = -7, 2, 10\n(2) * (-7) = -14, left: (2 * (5 - 12)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (5 - 12))) = 24\nreach 24! expression: (10 - (2 * (5 - 12)))"}, {"input": "12 5 2 10\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 12, 5\nroll back, left: 12 5 2 10\n(10) / (5) = 2, left: (10 / 5) = 2, 12, 2\nroll back, left: 12 5 2 10\n(10) - (5) = 5, left: (10 - 5) = 5, 12, 2\nroll back, left: 12 5 2 10\n(12) + (5) = 17, left: (12 + 5) = 17, 2, 10\n(2) * (17) = 34, left: (2 * (12 + 5)) = 34, 10\n(34) - (10) = 24, left: ((2 * (12 + 5)) - 10) = 24\nreach 24! expression: ((2 * (12 + 5)) - 10)"}, {"input": "12 5 2 10\n", "output": "(2) / (5) = 2/5, left: (2 / 5) = 2/5, 12, 10\nroll back, left: 12 5 2 10\n(12) * (10) = 120, left: (12 * 10) = 120, 5, 2\n(2) + (120) = 122, left: (2 + (12 * 10)) = 122, 5\nroll back, left: (12 * 10) = 120, 5, 2\nroll back, left: 12 5 2 10\n(12) - (5) = 7, left: (12 - 5) = 7, 2, 10\n(2) * (7) = 14, left: (2 * (12 - 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (12 - 5))) = 24\nreach 24! expression: (10 + (2 * (12 - 5)))"}, {"input": "13 13 4 2\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 13, 4\n(15) - (4) = 11, left: ((13 + 2) - 4) = 11, 13\n(13) + (11) = 24, left: (13 + ((13 + 2) - 4)) = 24\nreach 24! expression: (13 + ((13 + 2) - 4))"}, {"input": "13 13 4 2\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 13, 4\n(13) - (4) = 9, left: (13 - 4) = 9, (13 + 2) = 15\n(15) + (9) = 24, left: ((13 + 2) + (13 - 4)) = 24\nreach 24! expression: ((13 + 2) + (13 - 4))"}, {"input": "13 13 4 2\n", "output": "(13) + (13) = 26, left: (13 + 13) = 26, 4, 2\n(2) + (26) = 28, left: (2 + (13 + 13)) = 28, 4\n(28) - (4) = 24, left: ((2 + (13 + 13)) - 4) = 24\nreach 24! expression: ((2 + (13 + 13)) - 4)"}, {"input": "13 13 4 2\n", "output": "(13) + (13) = 26, left: (13 + 13) = 26, 4, 2\n(26) - (4) = 22, left: ((13 + 13) - 4) = 22, 2\n(2) + (22) = 24, left: (2 + ((13 + 13) - 4)) = 24\nreach 24! expression: (2 + ((13 + 13) - 4))"}, {"input": "12 12 9 4\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 12, 9\n(9) + (3) = 12, left: (9 + (12 / 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 + (12 / 4))) = 24\nreach 24! expression: (12 + (9 + (12 / 4)))"}, {"input": "12 12 9 4\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (12 - 4) = 8\n(8) * (3) = 24, left: ((12 - 4) * (12 - 9)) = 24\nreach 24! expression: ((12 - 4) * (12 - 9))"}, {"input": "12 12 9 4\n", "output": "(12) + (9) = 21, left: (12 + 9) = 21, 12, 4\n(12) / (4) = 3, left: (12 / 4) = 3, (12 + 9) = 21\n(21) + (3) = 24, left: ((12 + 9) + (12 / 4)) = 24\nreach 24! expression: ((12 + 9) + (12 / 4))"}, {"input": "12 12 9 4\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 12, 12\n(12) + (9/4) = 57/4, left: (12 + (9 / 4)) = 57/4, 12\nroll back, left: (9 / 4) = 9/4, 12, 12\nroll back, left: 12 12 9 4\n(9) * (4) = 36, left: (9 * 4) = 36, 12, 12\nroll back, left: 12 12 9 4\n(12) - (4) = 8, left: (12 - 4) = 8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (12 - 4) = 8\n(8) * (3) = 24, left: ((12 - 4) * (12 - 9)) = 24\nreach 24! expression: ((12 - 4) * (12 - 9))"}, {"input": "12 12 9 4\n", "output": "(12) / (12) = 1, left: (12 / 12) = 1, 9, 4\nroll back, left: 12 12 9 4\n(12) - (12) = 0, left: (12 - 12) = 0, 9, 4\nroll back, left: 12 12 9 4\n(12) - (12) = 0, left: (12 - 12) = 0, 9, 4\nroll back, left: 12 12 9 4\n(12) + (9) = 21, left: (12 + 9) = 21, 12, 4\n(12) / (4) = 3, left: (12 / 4) = 3, (12 + 9) = 21\n(21) + (3) = 24, left: ((12 + 9) + (12 / 4)) = 24\nreach 24! expression: ((12 + 9) + (12 / 4))"}, {"input": "2 2 12 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 2, 12\n(12) + (14) = 26, left: (12 + (2 * 7)) = 26, 2\n(26) - (2) = 24, left: ((12 + (2 * 7)) - 2) = 24\nreach 24! expression: ((12 + (2 * 7)) - 2)"}, {"input": "2 2 12 7\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 2, 7\n(2) * (7) = 14, left: (2 * 7) = 14, (2 - 12) = -10\n(14) - (-10) = 24, left: ((2 * 7) - (2 - 12)) = 24\nreach 24! expression: ((2 * 7) - (2 - 12))"}, {"input": "2 2 12 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 2, 12\n(12) - (2) = 10, left: (12 - 2) = 10, (2 * 7) = 14\n(14) + (10) = 24, left: ((2 * 7) + (12 - 2)) = 24\nreach 24! expression: ((2 * 7) + (12 - 2))"}, {"input": "2 2 12 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 2, 12\n(2) - (12) = -10, left: (2 - 12) = -10, (2 * 7) = 14\n(14) - (-10) = 24, left: ((2 * 7) - (2 - 12)) = 24\nreach 24! expression: ((2 * 7) - (2 - 12))"}, {"input": "2 2 12 7\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 12, 7\nroll back, left: 2 2 12 7\n(2) / (2) = 1, left: (2 / 2) = 1, 12, 7\n(7) + (1) = 8, left: (7 + (2 / 2)) = 8, 12\nroll back, left: (2 / 2) = 1, 12, 7\nroll back, left: 2 2 12 7\n(2) - (12) = -10, left: (2 - 12) = -10, 2, 7\n(2) * (7) = 14, left: (2 * 7) = 14, (2 - 12) = -10\n(14) - (-10) = 24, left: ((2 * 7) - (2 - 12)) = 24\nreach 24! expression: ((2 * 7) - (2 - 12))"}, {"input": "2 2 12 7\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 12, 7\nroll back, left: 2 2 12 7\n(2) * (2) = 4, left: (2 * 2) = 4, 12, 7\nroll back, left: 2 2 12 7\n(2) / (2) = 1, left: (2 / 2) = 1, 12, 7\nroll back, left: 2 2 12 7\n(2) - (12) = -10, left: (2 - 12) = -10, 2, 7\n(2) * (7) = 14, left: (2 * 7) = 14, (2 - 12) = -10\n(14) - (-10) = 24, left: ((2 * 7) - (2 - 12)) = 24\nreach 24! expression: ((2 * 7) - (2 - 12))"}, {"input": "2 2 12 7\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 2, 12\nroll back, left: 2 2 12 7\n(2) / (7) = 2/7, left: (2 / 7) = 2/7, 2, 12\n(12) / (2/7) = 42, left: (12 / (2 / 7)) = 42, 2\nroll back, left: (2 / 7) = 2/7, 2, 12\nroll back, left: 2 2 12 7\n(2) * (7) = 14, left: (2 * 7) = 14, 2, 12\n(2) - (12) = -10, left: (2 - 12) = -10, (2 * 7) = 14\n(14) - (-10) = 24, left: ((2 * 7) - (2 - 12)) = 24\nreach 24! expression: ((2 * 7) - (2 - 12))"}, {"input": "2 2 12 7\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 2, 2\nroll back, left: 2 2 12 7\n(2) - (2) = 0, left: (2 - 2) = 0, 12, 7\nroll back, left: 2 2 12 7\n(2) * (2) = 4, left: (2 * 2) = 4, 12, 7\nroll back, left: 2 2 12 7\n(2) * (7) = 14, left: (2 * 7) = 14, 2, 12\n(12) + (14) = 26, left: (12 + (2 * 7)) = 26, 2\n(26) - (2) = 24, left: ((12 + (2 * 7)) - 2) = 24\nreach 24! expression: ((12 + (2 * 7)) - 2)"}, {"input": "12 4 10 12\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 10, 12\n(10) - (8) = 2, left: (10 - (12 - 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 - (12 - 4))) = 24\nreach 24! expression: (12 * (10 - (12 - 4)))"}, {"input": "12 4 10 12\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 12, 10\n(12) - (10) = 2, left: (12 - 10) = 2, (4 * 12) = 48\n(48) / (2) = 24, left: ((4 * 12) / (12 - 10)) = 24\nreach 24! expression: ((4 * 12) / (12 - 10))"}, {"input": "12 4 10 12\n", "output": "(12) * (4) = 48, left: (12 * 4) = 48, 10, 12\n(12) - (10) = 2, left: (12 - 10) = 2, (12 * 4) = 48\n(48) / (2) = 24, left: ((12 * 4) / (12 - 10)) = 24\nreach 24! expression: ((12 * 4) / (12 - 10))"}, {"input": "12 4 10 12\n", "output": "(4) + (10) = 14, left: (4 + 10) = 14, 12, 12\n(14) - (12) = 2, left: ((4 + 10) - 12) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 + 10) - 12)) = 24\nreach 24! expression: (12 * ((4 + 10) - 12))"}, {"input": "12 4 10 12\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 12, 4\n(12) * (4) = 48, left: (12 * 4) = 48, (12 - 10) = 2\n(48) / (2) = 24, left: ((12 * 4) / (12 - 10)) = 24\nreach 24! expression: ((12 * 4) / (12 - 10))"}, {"input": "4 10 1 2\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 4, 1\n(1) + (5) = 6, left: (1 + (10 / 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (10 / 2))) = 24\nreach 24! expression: (4 * (1 + (10 / 2)))"}, {"input": "4 10 1 2\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 4, 1\n(4) / (1) = 4, left: (4 / 1) = 4, (10 * 2) = 20\n(20) + (4) = 24, left: ((10 * 2) + (4 / 1)) = 24\nreach 24! expression: ((10 * 2) + (4 / 1))"}, {"input": "4 10 1 2\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 4, 1\n(1) * (20) = 20, left: (1 * (10 * 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (1 * (10 * 2))) = 24\nreach 24! expression: (4 + (1 * (10 * 2)))"}, {"input": "4 10 1 2\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 4, 1\n(4) - (1) = 3, left: (4 - 1) = 3, (10 - 2) = 8\n(8) * (3) = 24, left: ((10 - 2) * (4 - 1)) = 24\nreach 24! expression: ((10 - 2) * (4 - 1))"}, {"input": "4 10 1 2\n", "output": "(10) * (1) = 10, left: (10 * 1) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (10 * 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (10 * 1))) = 24\nreach 24! expression: (4 + (2 * (10 * 1)))"}, {"input": "4 10 1 2\n", "output": "(2) / (10) = 1/5, left: (2 / 10) = 1/5, 4, 1\n(4) - (1) = 3, left: (4 - 1) = 3, (2 / 10) = 1/5\nroll back, left: (2 / 10) = 1/5, 4, 1\nroll back, left: 4 10 1 2\n(10) - (2) = 8, left: (10 - 2) = 8, 4, 1\n(4) / (8) = 1/2, left: (4 / (10 - 2)) = 1/2, 1\nroll back, left: (10 - 2) = 8, 4, 1\n(4) - (1) = 3, left: (4 - 1) = 3, (10 - 2) = 8\n(8) * (3) = 24, left: ((10 - 2) * (4 - 1)) = 24\nreach 24! expression: ((10 - 2) * (4 - 1))"}, {"input": "4 10 1 2\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 1, 2\nroll back, left: 4 10 1 2\n(10) - (4) = 6, left: (10 - 4) = 6, 1, 2\n(2) / (1) = 2, left: (2 / 1) = 2, (10 - 4) = 6\nroll back, left: (10 - 4) = 6, 1, 2\nroll back, left: 4 10 1 2\n(10) * (1) = 10, left: (10 * 1) = 10, 4, 2\n(2) * (10) = 20, left: (2 * (10 * 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 * (10 * 1))) = 24\nreach 24! expression: (4 + (2 * (10 * 1)))"}, {"input": "4 10 1 2\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 1, 2\nroll back, left: 4 10 1 2\n(4) / (10) = 2/5, left: (4 / 10) = 2/5, 1, 2\nroll back, left: 4 10 1 2\n(10) / (4) = 5/2, left: (10 / 4) = 5/2, 1, 2\nroll back, left: 4 10 1 2\n(10) * (2) = 20, left: (10 * 2) = 20, 4, 1\n(1) * (20) = 20, left: (1 * (10 * 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (1 * (10 * 2))) = 24\nreach 24! expression: (4 + (1 * (10 * 2)))"}, {"input": "6 6 6 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 6, 6\n(6) + (12) = 18, left: (6 + (6 + 6)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 + (6 + 6))) = 24\nreach 24! expression: (6 + (6 + (6 + 6)))"}, {"input": "6 6 6 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 6, 6\n(6) + (6) = 12, left: (6 + 6) = 12, (6 * 6) = 36\n(36) - (12) = 24, left: ((6 * 6) - (6 + 6)) = 24\nreach 24! expression: ((6 * 6) - (6 + 6))"}, {"input": "6 6 6 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 6, 6\n(36) - (6) = 30, left: ((6 * 6) - 6) = 30, 6\n(30) - (6) = 24, left: (((6 * 6) - 6) - 6) = 24\nreach 24! expression: (((6 * 6) - 6) - 6)"}, {"input": "6 6 6 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 6, 6\n(6) / (36) = 1/6, left: (6 / (6 * 6)) = 1/6, 6\nroll back, left: (6 * 6) = 36, 6, 6\n(6) - (36) = -30, left: (6 - (6 * 6)) = -30, 6\nroll back, left: (6 * 6) = 36, 6, 6\n(6) + (36) = 42, left: (6 + (6 * 6)) = 42, 6\nroll back, left: (6 * 6) = 36, 6, 6\n(36) - (6) = 30, left: ((6 * 6) - 6) = 30, 6\n(30) - (6) = 24, left: (((6 * 6) - 6) - 6) = 24\nreach 24! expression: (((6 * 6) - 6) - 6)"}, {"input": "6 6 6 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 6, 6\n(6) - (0) = 6, left: (6 - (6 - 6)) = 6, 6\nroll back, left: (6 - 6) = 0, 6, 6\nroll back, left: 6 6 6 6\n(6) / (6) = 1, left: (6 / 6) = 1, 6, 6\nroll back, left: 6 6 6 6\n(6) * (6) = 36, left: (6 * 6) = 36, 6, 6\n(36) - (6) = 30, left: ((6 * 6) - 6) = 30, 6\n(30) - (6) = 24, left: (((6 * 6) - 6) - 6) = 24\nreach 24! expression: (((6 * 6) - 6) - 6)"}, {"input": "6 6 6 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 6, 6\n(6) - (1) = 5, left: (6 - (6 / 6)) = 5, 6\n(6) + (5) = 11, left: (6 + (6 - (6 / 6))) = 11\nroll back, left: (6 - (6 / 6)) = 5, 6\nroll back, left: (6 / 6) = 1, 6, 6\nroll back, left: 6 6 6 6\n(6) + (6) = 12, left: (6 + 6) = 12, 6, 6\n(6) + (12) = 18, left: (6 + (6 + 6)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 + (6 + 6))) = 24\nreach 24! expression: (6 + (6 + (6 + 6)))"}, {"input": "6 6 6 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 6, 6\n(6) - (12) = -6, left: (6 - (6 + 6)) = -6, 6\n(-6) - (6) = -12, left: ((6 - (6 + 6)) - 6) = -12\nroll back, left: (6 - (6 + 6)) = -6, 6\nroll back, left: (6 + 6) = 12, 6, 6\n(12) / (6) = 2, left: ((6 + 6) / 6) = 2, 6\nroll back, left: (6 + 6) = 12, 6, 6\n(6) + (12) = 18, left: (6 + (6 + 6)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 + (6 + 6))) = 24\nreach 24! expression: (6 + (6 + (6 + 6)))"}, {"input": "8 9 11 5\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (11 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (11 - 9))) = 24\nreach 24! expression: (8 * (5 - (11 - 9)))"}, {"input": "8 9 11 5\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (11 - 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (11 - 8))) = 24\nreach 24! expression: (9 + (5 * (11 - 8)))"}, {"input": "8 9 11 5\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (8 - 5)) = 33, 9\n(33) - (9) = 24, left: ((11 * (8 - 5)) - 9) = 24\nreach 24! expression: ((11 * (8 - 5)) - 9)"}, {"input": "8 9 11 5\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 9, 11\n(-3) - (11) = -14, left: ((5 - 8) - 11) = -14, 9\n(-14) / (9) = -14/9, left: (((5 - 8) - 11) / 9) = -14/9\nroll back, left: ((5 - 8) - 11) = -14, 9\nroll back, left: (5 - 8) = -3, 9, 11\nroll back, left: 8 9 11 5\n(8) - (5) = 3, left: (8 - 5) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (8 - 5)) = 33, 9\n(33) - (9) = 24, left: ((11 * (8 - 5)) - 9) = 24\nreach 24! expression: ((11 * (8 - 5)) - 9)"}, {"input": "8 9 11 5\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (11 - 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (11 - 8))) = 24\nreach 24! expression: (9 + (5 * (11 - 8)))"}, {"input": "8 9 11 5\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 9, 5\n(5) / (3) = 5/3, left: (5 / (11 - 8)) = 5/3, 9\nroll back, left: (11 - 8) = 3, 9, 5\n(5) + (3) = 8, left: (5 + (11 - 8)) = 8, 9\nroll back, left: (11 - 8) = 3, 9, 5\n(3) / (5) = 3/5, left: ((11 - 8) / 5) = 3/5, 9\nroll back, left: (11 - 8) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (11 - 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (11 - 8))) = 24\nreach 24! expression: (9 + (5 * (11 - 8)))"}, {"input": "8 9 11 5\n", "output": "(8) + (5) = 13, left: (8 + 5) = 13, 9, 11\nroll back, left: 8 9 11 5\n(5) - (8) = -3, left: (5 - 8) = -3, 9, 11\n(11) - (9) = 2, left: (11 - 9) = 2, (5 - 8) = -3\nroll back, left: (5 - 8) = -3, 9, 11\nroll back, left: 8 9 11 5\n(8) - (5) = 3, left: (8 - 5) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (8 - 5)) = 33, 9\n(33) - (9) = 24, left: ((11 * (8 - 5)) - 9) = 24\nreach 24! expression: ((11 * (8 - 5)) - 9)"}, {"input": "8 9 11 5\n", "output": "(11) / (9) = 11/9, left: (11 / 9) = 11/9, 8, 5\n(8) + (11/9) = 83/9, left: (8 + (11 / 9)) = 83/9, 5\nroll back, left: (11 / 9) = 11/9, 8, 5\nroll back, left: 8 9 11 5\n(9) + (11) = 20, left: (9 + 11) = 20, 8, 5\nroll back, left: 8 9 11 5\n(11) - (9) = 2, left: (11 - 9) = 2, 8, 5\n(5) - (2) = 3, left: (5 - (11 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (11 - 9))) = 24\nreach 24! expression: (8 * (5 - (11 - 9)))"}, {"input": "8 9 11 5\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (11 - 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (11 - 8))) = 24\nreach 24! expression: (9 + (5 * (11 - 8)))"}, {"input": "8 9 11 5\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (11 - 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (11 - 8))) = 24\nreach 24! expression: (9 + (5 * (11 - 8)))"}, {"input": "8 9 11 5\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 9, 5\n(5) * (3) = 15, left: (5 * (11 - 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (11 - 8))) = 24\nreach 24! expression: (9 + (5 * (11 - 8)))"}, {"input": "2 5 8 10\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 8, 10\n(10) - (7) = 3, left: (10 - (2 + 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 - (2 + 5))) = 24\nreach 24! expression: (8 * (10 - (2 + 5)))"}, {"input": "2 5 8 10\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 2, 8\n(5) - (2) = 3, left: ((10 - 5) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 - 5) - 2)) = 24\nreach 24! expression: (8 * ((10 - 5) - 2))"}, {"input": "2 5 8 10\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 2, 10\n(2) - (10) = -8, left: (2 - 10) = -8, (5 - 8) = -3\n(-3) * (-8) = 24, left: ((5 - 8) * (2 - 10)) = 24\nreach 24! expression: ((5 - 8) * (2 - 10))"}, {"input": "2 5 8 10\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 5, 8\n(5) - (8) = -3, left: (5 - 8) = -3, (2 - 10) = -8\n(-8) * (-3) = 24, left: ((2 - 10) * (5 - 8)) = 24\nreach 24! expression: ((2 - 10) * (5 - 8))"}, {"input": "2 5 8 10\n", "output": "(5) + (10) = 15, left: (5 + 10) = 15, 2, 8\nroll back, left: 2 5 8 10\n(5) - (10) = -5, left: (5 - 10) = -5, 2, 8\nroll back, left: 2 5 8 10\n(10) / (5) = 2, left: (10 / 5) = 2, 2, 8\nroll back, left: 2 5 8 10\n(10) - (5) = 5, left: (10 - 5) = 5, 2, 8\n(5) - (2) = 3, left: ((10 - 5) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 - 5) - 2)) = 24\nreach 24! expression: (8 * ((10 - 5) - 2))"}, {"input": "2 5 8 10\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 5, 10\n(-6) - (10) = -16, left: ((2 - 8) - 10) = -16, 5\nroll back, left: (2 - 8) = -6, 5, 10\nroll back, left: 2 5 8 10\n(2) * (10) = 20, left: (2 * 10) = 20, 5, 8\nroll back, left: 2 5 8 10\n(2) - (10) = -8, left: (2 - 10) = -8, 5, 8\n(5) - (8) = -3, left: (5 - 8) = -3, (2 - 10) = -8\n(-8) * (-3) = 24, left: ((2 - 10) * (5 - 8)) = 24\nreach 24! expression: ((2 - 10) * (5 - 8))"}, {"input": "2 5 8 10\n", "output": "(5) - (10) = -5, left: (5 - 10) = -5, 2, 8\n(2) - (8) = -6, left: (2 - 8) = -6, (5 - 10) = -5\nroll back, left: (5 - 10) = -5, 2, 8\nroll back, left: 2 5 8 10\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, 2, 8\nroll back, left: 2 5 8 10\n(10) - (5) = 5, left: (10 - 5) = 5, 2, 8\n(5) - (2) = 3, left: ((10 - 5) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 - 5) - 2)) = 24\nreach 24! expression: (8 * ((10 - 5) - 2))"}, {"input": "2 5 8 10\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 2, 10\n(13) / (10) = 13/10, left: ((5 + 8) / 10) = 13/10, 2\nroll back, left: (5 + 8) = 13, 2, 10\n(2) * (13) = 26, left: (2 * (5 + 8)) = 26, 10\nroll back, left: (5 + 8) = 13, 2, 10\nroll back, left: 2 5 8 10\n(5) - (8) = -3, left: (5 - 8) = -3, 2, 10\n(2) - (10) = -8, left: (2 - 10) = -8, (5 - 8) = -3\n(-3) * (-8) = 24, left: ((5 - 8) * (2 - 10)) = 24\nreach 24! expression: ((5 - 8) * (2 - 10))"}, {"input": "2 5 8 10\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 8, 10\n(5/2) - (8) = -11/2, left: ((5 / 2) - 8) = -11/2, 10\nroll back, left: (5 / 2) = 5/2, 8, 10\nroll back, left: 2 5 8 10\n(2) - (5) = -3, left: (2 - 5) = -3, 8, 10\nroll back, left: 2 5 8 10\n(2) + (5) = 7, left: (2 + 5) = 7, 8, 10\n(10) - (7) = 3, left: (10 - (2 + 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 - (2 + 5))) = 24\nreach 24! expression: (8 * (10 - (2 + 5)))"}, {"input": "3 5 5 9\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (5 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (5 / 5))) = 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "3 5 5 9\n", "output": "(9) / (5) = 9/5, left: (9 / 5) = 9/5, 3, 5\n(3) + (9/5) = 24/5, left: (3 + (9 / 5)) = 24/5, 5\n(5) * (24/5) = 24, left: (5 * (3 + (9 / 5))) = 24\nreach 24! expression: (5 * (3 + (9 / 5)))"}, {"input": "3 5 5 9\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (5 / 5) = 1\nroll back, left: (5 / 5) = 1, 3, 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, (5 / 5) = 1\n(1) / (1/3) = 3, left: ((5 / 5) / (3 / 9)) = 3\nroll back, left: (3 / 9) = 1/3, (5 / 5) = 1\nroll back, left: (5 / 5) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (5 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (5 / 5))) = 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "3 5 5 9\n", "output": "(3) * (5) = 15, left: (3 * 5) = 15, 5, 9\nroll back, left: 3 5 5 9\n(3) + (5) = 8, left: (3 + 5) = 8, 5, 9\nroll back, left: 3 5 5 9\n(5) / (5) = 1, left: (5 / 5) = 1, 3, 9\n(3) - (9) = -6, left: (3 - 9) = -6, (5 / 5) = 1\nroll back, left: (5 / 5) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (5 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (5 / 5))) = 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "3 5 5 9\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 5, 5\nroll back, left: 3 5 5 9\n(9) - (3) = 6, left: (9 - 3) = 6, 5, 5\n(5) + (5) = 10, left: (5 + 5) = 10, (9 - 3) = 6\nroll back, left: (9 - 3) = 6, 5, 5\nroll back, left: 3 5 5 9\n(5) / (5) = 1, left: (5 / 5) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (5 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (5 / 5))) = 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "3 5 5 9\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 5, 5\nroll back, left: 3 5 5 9\n(3) * (5) = 15, left: (3 * 5) = 15, 5, 9\nroll back, left: 3 5 5 9\n(5) + (5) = 10, left: (5 + 5) = 10, 3, 9\nroll back, left: 3 5 5 9\n(5) / (5) = 1, left: (5 / 5) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (5 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (5 / 5))) = 24\nreach 24! expression: (3 * (9 - (5 / 5)))"}, {"input": "13 3 2 13\n", "output": "(2) + (13) = 15, left: (2 + 13) = 15, 13, 3\n(13) * (3) = 39, left: (13 * 3) = 39, (2 + 13) = 15\n(39) - (15) = 24, left: ((13 * 3) - (2 + 13)) = 24\nreach 24! expression: ((13 * 3) - (2 + 13))"}, {"input": "13 3 2 13\n", "output": "(13) * (3) = 39, left: (13 * 3) = 39, 2, 13\n(39) - (13) = 26, left: ((13 * 3) - 13) = 26, 2\n(26) - (2) = 24, left: (((13 * 3) - 13) - 2) = 24\nreach 24! expression: (((13 * 3) - 13) - 2)"}, {"input": "13 3 2 13\n", "output": "(13) * (3) = 39, left: (13 * 3) = 39, 2, 13\n(39) - (2) = 37, left: ((13 * 3) - 2) = 37, 13\n(37) - (13) = 24, left: (((13 * 3) - 2) - 13) = 24\nreach 24! expression: (((13 * 3) - 2) - 13)"}, {"input": "13 3 2 13\n", "output": "(13) / (13) = 1, left: (13 / 13) = 1, 3, 2\nroll back, left: 13 3 2 13\n(13) / (13) = 1, left: (13 / 13) = 1, 3, 2\n(2) * (1) = 2, left: (2 * (13 / 13)) = 2, 3\nroll back, left: (13 / 13) = 1, 3, 2\nroll back, left: 13 3 2 13\n(13) * (3) = 39, left: (13 * 3) = 39, 2, 13\n(39) - (2) = 37, left: ((13 * 3) - 2) = 37, 13\n(37) - (13) = 24, left: (((13 * 3) - 2) - 13) = 24\nreach 24! expression: (((13 * 3) - 2) - 13)"}, {"input": "13 3 2 13\n", "output": "(13) - (13) = 0, left: (13 - 13) = 0, 3, 2\n(2) + (0) = 2, left: (2 + (13 - 13)) = 2, 3\nroll back, left: (13 - 13) = 0, 3, 2\nroll back, left: 13 3 2 13\n(13) - (13) = 0, left: (13 - 13) = 0, 3, 2\nroll back, left: 13 3 2 13\n(13) * (3) = 39, left: (13 * 3) = 39, 2, 13\n(39) - (2) = 37, left: ((13 * 3) - 2) = 37, 13\n(37) - (13) = 24, left: (((13 * 3) - 2) - 13) = 24\nreach 24! expression: (((13 * 3) - 2) - 13)"}, {"input": "3 7 7 9\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (7 / 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (7 / 7))) = 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(7) / (9) = 7/9, left: (7 / 9) = 7/9, 3, 7\nroll back, left: 3 7 7 9\n(3) * (9) = 27, left: (3 * 9) = 27, 7, 7\n(7) - (7) = 0, left: (7 - 7) = 0, (3 * 9) = 27\nroll back, left: (3 * 9) = 27, 7, 7\nroll back, left: 3 7 7 9\n(7) / (7) = 1, left: (7 / 7) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (7 / 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (7 / 7))) = 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 3, 9\n(1) - (9) = -8, left: ((7 / 7) - 9) = -8, 3\nroll back, left: (7 / 7) = 1, 3, 9\n(1) / (9) = 1/9, left: ((7 / 7) / 9) = 1/9, 3\n(3) - (1/9) = 26/9, left: (3 - ((7 / 7) / 9)) = 26/9\nroll back, left: ((7 / 7) / 9) = 1/9, 3\nroll back, left: (7 / 7) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (7 / 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (7 / 7))) = 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 7, 7\nroll back, left: 3 7 7 9\n(7) * (7) = 49, left: (7 * 7) = 49, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (7 * 7) = 49\nroll back, left: (7 * 7) = 49, 3, 9\nroll back, left: 3 7 7 9\n(7) / (7) = 1, left: (7 / 7) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (7 / 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (7 / 7))) = 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 7, 9\nroll back, left: 3 7 7 9\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 7, 9\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, (7 / 3) = 7/3\nroll back, left: (7 / 3) = 7/3, 7, 9\nroll back, left: 3 7 7 9\n(7) / (7) = 1, left: (7 / 7) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (7 / 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (7 / 7))) = 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "3 7 7 9\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 7, 9\nroll back, left: 3 7 7 9\n(9) / (3) = 3, left: (9 / 3) = 3, 7, 7\n(7) - (7) = 0, left: (7 - 7) = 0, (9 / 3) = 3\nroll back, left: (9 / 3) = 3, 7, 7\nroll back, left: 3 7 7 9\n(7) / (7) = 1, left: (7 / 7) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (7 / 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (7 / 7))) = 24\nreach 24! expression: (3 * (9 - (7 / 7)))"}, {"input": "2 6 11 5\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 2, 6\n(6) + (16) = 22, left: (6 + (11 + 5)) = 22, 2\n(2) + (22) = 24, left: (2 + (6 + (11 + 5))) = 24\nreach 24! expression: (2 + (6 + (11 + 5)))"}, {"input": "2 6 11 5\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (11 + 5) = 16\n(16) + (8) = 24, left: ((11 + 5) + (2 + 6)) = 24\nreach 24! expression: ((11 + 5) + (2 + 6))"}, {"input": "2 6 11 5\n", "output": "(2) + (11) = 13, left: (2 + 11) = 13, 6, 5\n(6) + (13) = 19, left: (6 + (2 + 11)) = 19, 5\n(5) + (19) = 24, left: (5 + (6 + (2 + 11))) = 24\nreach 24! expression: (5 + (6 + (2 + 11)))"}, {"input": "2 6 11 5\n", "output": "(2) - (6) = -4, left: (2 - 6) = -4, 11, 5\n(5) - (11) = -6, left: (5 - 11) = -6, (2 - 6) = -4\n(-4) * (-6) = 24, left: ((2 - 6) * (5 - 11)) = 24\nreach 24! expression: ((2 - 6) * (5 - 11))"}, {"input": "2 6 11 5\n", "output": "(6) + (11) = 17, left: (6 + 11) = 17, 2, 5\n(2) + (17) = 19, left: (2 + (6 + 11)) = 19, 5\n(5) + (19) = 24, left: (5 + (2 + (6 + 11))) = 24\nreach 24! expression: (5 + (2 + (6 + 11)))"}, {"input": "2 6 11 5\n", "output": "(6) * (11) = 66, left: (6 * 11) = 66, 2, 5\n(5) / (66) = 5/66, left: (5 / (6 * 11)) = 5/66, 2\nroll back, left: (6 * 11) = 66, 2, 5\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, (6 * 11) = 66\nroll back, left: (6 * 11) = 66, 2, 5\nroll back, left: 2 6 11 5\n(6) + (11) = 17, left: (6 + 11) = 17, 2, 5\n(2) + (17) = 19, left: (2 + (6 + 11)) = 19, 5\n(5) + (19) = 24, left: (5 + (2 + (6 + 11))) = 24\nreach 24! expression: (5 + (2 + (6 + 11)))"}, {"input": "13 8 5 9\n", "output": "(5) * (9) = 45, left: (5 * 9) = 45, 13, 8\n(45) - (13) = 32, left: ((5 * 9) - 13) = 32, 8\n(32) - (8) = 24, left: (((5 * 9) - 13) - 8) = 24\nreach 24! expression: (((5 * 9) - 13) - 8)"}, {"input": "13 8 5 9\n", "output": "(5) * (9) = 45, left: (5 * 9) = 45, 13, 8\n(45) - (8) = 37, left: ((5 * 9) - 8) = 37, 13\n(37) - (13) = 24, left: (((5 * 9) - 8) - 13) = 24\nreach 24! expression: (((5 * 9) - 8) - 13)"}, {"input": "13 8 5 9\n", "output": "(13) + (8) = 21, left: (13 + 8) = 21, 5, 9\n(5) * (9) = 45, left: (5 * 9) = 45, (13 + 8) = 21\n(45) - (21) = 24, left: ((5 * 9) - (13 + 8)) = 24\nreach 24! expression: ((5 * 9) - (13 + 8))"}, {"input": "13 8 5 9\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 13, 8\n(8) - (13) = -5, left: (8 - 13) = -5, (5 + 9) = 14\nroll back, left: (5 + 9) = 14, 13, 8\nroll back, left: 13 8 5 9\n(5) / (9) = 5/9, left: (5 / 9) = 5/9, 13, 8\nroll back, left: 13 8 5 9\n(5) * (9) = 45, left: (5 * 9) = 45, 13, 8\n(45) - (8) = 37, left: ((5 * 9) - 8) = 37, 13\n(37) - (13) = 24, left: (((5 * 9) - 8) - 13) = 24\nreach 24! expression: (((5 * 9) - 8) - 13)"}, {"input": "13 8 5 9\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 13, 8\nroll back, left: 13 8 5 9\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, 13, 8\n(9/5) - (13) = -56/5, left: ((9 / 5) - 13) = -56/5, 8\nroll back, left: (9 / 5) = 9/5, 13, 8\nroll back, left: 13 8 5 9\n(5) * (9) = 45, left: (5 * 9) = 45, 13, 8\n(45) - (13) = 32, left: ((5 * 9) - 13) = 32, 8\n(32) - (8) = 24, left: (((5 * 9) - 13) - 8) = 24\nreach 24! expression: (((5 * 9) - 13) - 8)"}, {"input": "13 8 5 9\n", "output": "(9) - (13) = -4, left: (9 - 13) = -4, 8, 5\n(8) * (-4) = -32, left: (8 * (9 - 13)) = -32, 5\nroll back, left: (9 - 13) = -4, 8, 5\nroll back, left: 13 8 5 9\n(13) + (9) = 22, left: (13 + 9) = 22, 8, 5\nroll back, left: 13 8 5 9\n(13) + (8) = 21, left: (13 + 8) = 21, 5, 9\n(5) * (9) = 45, left: (5 * 9) = 45, (13 + 8) = 21\n(45) - (21) = 24, left: ((5 * 9) - (13 + 8)) = 24\nreach 24! expression: ((5 * 9) - (13 + 8))"}, {"input": "13 8 5 9\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 5, 9\n(9) / (5) = 9/5, left: (9 / (13 - 8)) = 9/5, 5\nroll back, left: (13 - 8) = 5, 5, 9\nroll back, left: 13 8 5 9\n(13) * (8) = 104, left: (13 * 8) = 104, 5, 9\nroll back, left: 13 8 5 9\n(13) + (8) = 21, left: (13 + 8) = 21, 5, 9\n(5) * (9) = 45, left: (5 * 9) = 45, (13 + 8) = 21\n(45) - (21) = 24, left: ((5 * 9) - (13 + 8)) = 24\nreach 24! expression: ((5 * 9) - (13 + 8))"}, {"input": "1 3 9 1\n", "output": "(1) * (1) = 1, left: (1 * 1) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (1 * 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (1 * 1))) = 24\nreach 24! expression: (3 * (9 - (1 * 1)))"}, {"input": "1 3 9 1\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 3, 1\n(9) - (1) = 8, left: ((1 * 9) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((1 * 9) - 1)) = 24\nreach 24! expression: (3 * ((1 * 9) - 1))"}, {"input": "1 3 9 1\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (3 / 1) = 3\n(3) * (8) = 24, left: ((3 / 1) * (9 - 1)) = 24\nreach 24! expression: ((3 / 1) * (9 - 1))"}, {"input": "1 3 9 1\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (1 + 1) = 2\n(2) * (12) = 24, left: ((1 + 1) * (3 + 9)) = 24\nreach 24! expression: ((1 + 1) * (3 + 9))"}, {"input": "1 3 9 1\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (3 + 9) = 12\n(12) * (2) = 24, left: ((3 + 9) * (1 + 1)) = 24\nreach 24! expression: ((3 + 9) * (1 + 1))"}, {"input": "1 3 9 1\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 1, 1\nroll back, left: 1 3 9 1\n(9) / (3) = 3, left: (9 / 3) = 3, 1, 1\n(3) / (1) = 3, left: ((9 / 3) / 1) = 3, 1\nroll back, left: (9 / 3) = 3, 1, 1\nroll back, left: 1 3 9 1\n(3) + (9) = 12, left: (3 + 9) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (3 + 9) = 12\n(12) * (2) = 24, left: ((3 + 9) * (1 + 1)) = 24\nreach 24! expression: ((3 + 9) * (1 + 1))"}, {"input": "1 3 9 1\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 3, 9\n(3) * (9) = 27, left: (3 * 9) = 27, (1 + 1) = 2\n(2) + (27) = 29, left: ((1 + 1) + (3 * 9)) = 29\nroll back, left: (3 * 9) = 27, (1 + 1) = 2\n(2) * (27) = 54, left: ((1 + 1) * (3 * 9)) = 54\nroll back, left: (3 * 9) = 27, (1 + 1) = 2\nroll back, left: (1 + 1) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (1 + 1) = 2\n(2) * (12) = 24, left: ((1 + 1) * (3 + 9)) = 24\nreach 24! expression: ((1 + 1) * (3 + 9))"}, {"input": "1 3 9 1\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 3, 1\n(3) * (1) = 3, left: (3 * 1) = 3, (1 + 9) = 10\nroll back, left: (1 + 9) = 10, 3, 1\nroll back, left: 1 3 9 1\n(1) * (9) = 9, left: (1 * 9) = 9, 3, 1\n(1) / (9) = 1/9, left: (1 / (1 * 9)) = 1/9, 3\nroll back, left: (1 * 9) = 9, 3, 1\n(9) - (1) = 8, left: ((1 * 9) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((1 * 9) - 1)) = 24\nreach 24! expression: (3 * ((1 * 9) - 1))"}, {"input": "1 3 9 1\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 9, 1\n(-2) - (9) = -11, left: ((1 - 3) - 9) = -11, 1\nroll back, left: (1 - 3) = -2, 9, 1\nroll back, left: 1 3 9 1\n(3) / (1) = 3, left: (3 / 1) = 3, 9, 1\n(3) / (1) = 3, left: ((3 / 1) / 1) = 3, 9\nroll back, left: (3 / 1) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (3 / 1) = 3\n(3) * (8) = 24, left: ((3 / 1) * (9 - 1)) = 24\nreach 24! expression: ((3 / 1) * (9 - 1))"}, {"input": "1 3 9 1\n", "output": "(1) * (1) = 1, left: (1 * 1) = 1, 3, 9\n(1) - (9) = -8, left: ((1 * 1) - 9) = -8, 3\nroll back, left: (1 * 1) = 1, 3, 9\n(1) / (9) = 1/9, left: ((1 * 1) / 9) = 1/9, 3\nroll back, left: (1 * 1) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (1 * 1)) = 8, 3\n(8) / (3) = 8/3, left: ((9 - (1 * 1)) / 3) = 8/3\nroll back, left: (9 - (1 * 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (1 * 1))) = 24\nreach 24! expression: (3 * (9 - (1 * 1)))"}, {"input": "2 8 1 5\n", "output": "(8) + (5) = 13, left: (8 + 5) = 13, 2, 1\n(13) - (1) = 12, left: ((8 + 5) - 1) = 12, 2\n(2) * (12) = 24, left: (2 * ((8 + 5) - 1)) = 24\nreach 24! expression: (2 * ((8 + 5) - 1))"}, {"input": "2 8 1 5\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 2, 8\n(5) - (2) = 3, left: ((1 * 5) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((1 * 5) - 2)) = 24\nreach 24! expression: (8 * ((1 * 5) - 2))"}, {"input": "2 8 1 5\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (8 / 2) = 4\n(4) * (6) = 24, left: ((8 / 2) * (1 + 5)) = 24\nreach 24! expression: ((8 / 2) * (1 + 5))"}, {"input": "2 8 1 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 8, 1\n(8) * (1) = 8, left: (8 * 1) = 8, (5 - 2) = 3\n(3) * (8) = 24, left: ((5 - 2) * (8 * 1)) = 24\nreach 24! expression: ((5 - 2) * (8 * 1))"}, {"input": "2 8 1 5\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 2, 5\n(5) + (7) = 12, left: (5 + (8 - 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (5 + (8 - 1))) = 24\nreach 24! expression: (2 * (5 + (8 - 1)))"}, {"input": "2 8 1 5\n", "output": "(2) * (5) = 10, left: (2 * 5) = 10, 8, 1\n(10) / (1) = 10, left: ((2 * 5) / 1) = 10, 8\nroll back, left: (2 * 5) = 10, 8, 1\nroll back, left: 2 8 1 5\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 8, 1\nroll back, left: 2 8 1 5\n(5) - (2) = 3, left: (5 - 2) = 3, 8, 1\n(8) * (1) = 8, left: (8 * 1) = 8, (5 - 2) = 3\n(3) * (8) = 24, left: ((5 - 2) * (8 * 1)) = 24\nreach 24! expression: ((5 - 2) * (8 * 1))"}, {"input": "2 8 1 5\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 2, 5\n(5) - (7) = -2, left: (5 - (8 - 1)) = -2, 2\nroll back, left: (8 - 1) = 7, 2, 5\n(5) + (7) = 12, left: (5 + (8 - 1)) = 12, 2\n(2) / (12) = 1/6, left: (2 / (5 + (8 - 1))) = 1/6\nroll back, left: (5 + (8 - 1)) = 12, 2\n(12) / (2) = 6, left: ((5 + (8 - 1)) / 2) = 6\nroll back, left: (5 + (8 - 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (5 + (8 - 1))) = 24\nreach 24! expression: (2 * (5 + (8 - 1)))"}, {"input": "2 8 1 5\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 2, 8\n(2) - (5) = -3, left: (2 - (1 * 5)) = -3, 8\n(8) + (-3) = 5, left: (8 + (2 - (1 * 5))) = 5\nroll back, left: (2 - (1 * 5)) = -3, 8\n(8) - (-3) = 11, left: (8 - (2 - (1 * 5))) = 11\nroll back, left: (2 - (1 * 5)) = -3, 8\nroll back, left: (1 * 5) = 5, 2, 8\n(5) - (2) = 3, left: ((1 * 5) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((1 * 5) - 2)) = 24\nreach 24! expression: (8 * ((1 * 5) - 2))"}, {"input": "2 8 1 5\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 1, 5\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, (8 / 2) = 4\nroll back, left: (8 / 2) = 4, 1, 5\n(1) * (5) = 5, left: (1 * 5) = 5, (8 / 2) = 4\n(4) / (5) = 4/5, left: ((8 / 2) / (1 * 5)) = 4/5\nroll back, left: (1 * 5) = 5, (8 / 2) = 4\nroll back, left: (8 / 2) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (8 / 2) = 4\n(4) * (6) = 24, left: ((8 / 2) * (1 + 5)) = 24\nreach 24! expression: ((8 / 2) * (1 + 5))"}, {"input": "2 8 1 5\n", "output": "(8) * (5) = 40, left: (8 * 5) = 40, 2, 1\nroll back, left: 2 8 1 5\n(5) - (8) = -3, left: (5 - 8) = -3, 2, 1\n(2) / (1) = 2, left: (2 / 1) = 2, (5 - 8) = -3\nroll back, left: (5 - 8) = -3, 2, 1\nroll back, left: 2 8 1 5\n(8) + (5) = 13, left: (8 + 5) = 13, 2, 1\n(13) - (1) = 12, left: ((8 + 5) - 1) = 12, 2\n(2) * (12) = 24, left: (2 * ((8 + 5) - 1)) = 24\nreach 24! expression: (2 * ((8 + 5) - 1))"}, {"input": "3 9 7 3\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (7 - 3) = 4\n(4) * (6) = 24, left: ((7 - 3) * (9 - 3)) = 24\nreach 24! expression: ((7 - 3) * (9 - 3))"}, {"input": "3 9 7 3\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 7, 3\n(7) / (1/3) = 21, left: (7 / (3 / 9)) = 21, 3\n(3) + (21) = 24, left: (3 + (7 / (3 / 9))) = 24\nreach 24! expression: (3 + (7 / (3 / 9)))"}, {"input": "3 9 7 3\n", "output": "(9) * (7) = 63, left: (9 * 7) = 63, 3, 3\n(63) / (3) = 21, left: ((9 * 7) / 3) = 21, 3\n(3) + (21) = 24, left: (3 + ((9 * 7) / 3)) = 24\nreach 24! expression: (3 + ((9 * 7) / 3))"}, {"input": "3 9 7 3\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 3, 9\n(9) / (3/7) = 21, left: (9 / (3 / 7)) = 21, 3\n(3) + (21) = 24, left: (3 + (9 / (3 / 7))) = 24\nreach 24! expression: (3 + (9 / (3 / 7)))"}, {"input": "3 9 7 3\n", "output": "(7) + (3) = 10, left: (7 + 3) = 10, 3, 9\n(9) * (10) = 90, left: (9 * (7 + 3)) = 90, 3\nroll back, left: (7 + 3) = 10, 3, 9\nroll back, left: 3 9 7 3\n(7) - (3) = 4, left: (7 - 3) = 4, 3, 9\n(9) / (4) = 9/4, left: (9 / (7 - 3)) = 9/4, 3\nroll back, left: (7 - 3) = 4, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (7 - 3) = 4\n(4) * (6) = 24, left: ((7 - 3) * (9 - 3)) = 24\nreach 24! expression: ((7 - 3) * (9 - 3))"}, {"input": "3 9 7 3\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 3, 9\n(3) / (3/7) = 7, left: (3 / (3 / 7)) = 7, 9\nroll back, left: (3 / 7) = 3/7, 3, 9\n(3) * (3/7) = 9/7, left: (3 * (3 / 7)) = 9/7, 9\nroll back, left: (3 / 7) = 3/7, 3, 9\n(3/7) - (9) = -60/7, left: ((3 / 7) - 9) = -60/7, 3\nroll back, left: (3 / 7) = 3/7, 3, 9\n(9) / (3/7) = 21, left: (9 / (3 / 7)) = 21, 3\n(3) + (21) = 24, left: (3 + (9 / (3 / 7))) = 24\nreach 24! expression: (3 + (9 / (3 / 7)))"}, {"input": "3 9 7 3\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 7, 3\n(3) - (7) = -4, left: (3 - 7) = -4, (3 / 9) = 1/3\nroll back, left: (3 / 9) = 1/3, 7, 3\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, (3 / 9) = 1/3\nroll back, left: (3 / 9) = 1/3, 7, 3\n(3) / (1/3) = 9, left: (3 / (3 / 9)) = 9, 7\nroll back, left: (3 / 9) = 1/3, 7, 3\n(7) / (1/3) = 21, left: (7 / (3 / 9)) = 21, 3\n(3) + (21) = 24, left: (3 + (7 / (3 / 9))) = 24\nreach 24! expression: (3 + (7 / (3 / 9)))"}, {"input": "3 9 7 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 9, 7\n(6) / (9) = 2/3, left: ((3 + 3) / 9) = 2/3, 7\nroll back, left: (3 + 3) = 6, 9, 7\nroll back, left: 3 9 7 3\n(9) - (7) = 2, left: (9 - 7) = 2, 3, 3\nroll back, left: 3 9 7 3\n(9) * (7) = 63, left: (9 * 7) = 63, 3, 3\n(63) / (3) = 21, left: ((9 * 7) / 3) = 21, 3\n(3) + (21) = 24, left: (3 + ((9 * 7) / 3)) = 24\nreach 24! expression: (3 + ((9 * 7) / 3))"}, {"input": "6 10 7 1\n", "output": "(7) + (1) = 8, left: (7 + 1) = 8, 6, 10\n(10) + (8) = 18, left: (10 + (7 + 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (10 + (7 + 1))) = 24\nreach 24! expression: (6 + (10 + (7 + 1)))"}, {"input": "6 10 7 1\n", "output": "(6) + (1) = 7, left: (6 + 1) = 7, 10, 7\n(10) + (7) = 17, left: (10 + 7) = 17, (6 + 1) = 7\n(7) + (17) = 24, left: ((6 + 1) + (10 + 7)) = 24\nreach 24! expression: ((6 + 1) + (10 + 7))"}, {"input": "6 10 7 1\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 6, 10\n(10) - (6) = 4, left: (10 - 6) = 4, (7 - 1) = 6\n(6) * (4) = 24, left: ((7 - 1) * (10 - 6)) = 24\nreach 24! expression: ((7 - 1) * (10 - 6))"}, {"input": "6 10 7 1\n", "output": "(6) + (7) = 13, left: (6 + 7) = 13, 10, 1\n(10) + (1) = 11, left: (10 + 1) = 11, (6 + 7) = 13\n(13) + (11) = 24, left: ((6 + 7) + (10 + 1)) = 24\nreach 24! expression: ((6 + 7) + (10 + 1))"}, {"input": "6 10 7 1\n", "output": "(6) + (7) = 13, left: (6 + 7) = 13, 10, 1\n(10) + (13) = 23, left: (10 + (6 + 7)) = 23, 1\n(1) + (23) = 24, left: (1 + (10 + (6 + 7))) = 24\nreach 24! expression: (1 + (10 + (6 + 7)))"}, {"input": "6 10 7 1\n", "output": "(7) + (1) = 8, left: (7 + 1) = 8, 6, 10\n(8) - (10) = -2, left: ((7 + 1) - 10) = -2, 6\n(6) * (-2) = -12, left: (6 * ((7 + 1) - 10)) = -12\nroll back, left: ((7 + 1) - 10) = -2, 6\nroll back, left: (7 + 1) = 8, 6, 10\n(10) + (8) = 18, left: (10 + (7 + 1)) = 18, 6\n(6) - (18) = -12, left: (6 - (10 + (7 + 1))) = -12\nroll back, left: (10 + (7 + 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (10 + (7 + 1))) = 24\nreach 24! expression: (6 + (10 + (7 + 1)))"}, {"input": "10 8 7 10\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (10 - 8)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (10 - 8))) = 24\nreach 24! expression: (10 + (7 * (10 - 8)))"}, {"input": "10 8 7 10\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 10, 7\n(7) * (2) = 14, left: (7 * (10 - 8)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (10 - 8))) = 24\nreach 24! expression: (10 + (7 * (10 - 8)))"}, {"input": "10 8 7 10\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 10, 7\n(7) * (-2) = -14, left: (7 * (8 - 10)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (8 - 10))) = 24\nreach 24! expression: (10 - (7 * (8 - 10)))"}, {"input": "10 8 7 10\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 10, 8\nroll back, left: 10 8 7 10\n(7) + (10) = 17, left: (7 + 10) = 17, 10, 8\nroll back, left: 10 8 7 10\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, 10, 10\nroll back, left: 10 8 7 10\n(8) - (10) = -2, left: (8 - 10) = -2, 10, 7\n(7) * (-2) = -14, left: (7 * (8 - 10)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (8 - 10))) = 24\nreach 24! expression: (10 - (7 * (8 - 10)))"}, {"input": "10 8 7 10\n", "output": "(10) * (8) = 80, left: (10 * 8) = 80, 7, 10\n(7) * (80) = 560, left: (7 * (10 * 8)) = 560, 10\nroll back, left: (10 * 8) = 80, 7, 10\nroll back, left: 10 8 7 10\n(10) - (8) = 2, left: (10 - 8) = 2, 7, 10\n(10) - (2) = 8, left: (10 - (10 - 8)) = 8, 7\nroll back, left: (10 - 8) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (10 - 8)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (10 - 8))) = 24\nreach 24! expression: (10 + (7 * (10 - 8)))"}, {"input": "10 8 7 10\n", "output": "(10) / (7) = 10/7, left: (10 / 7) = 10/7, 8, 10\nroll back, left: 10 8 7 10\n(10) * (7) = 70, left: (10 * 7) = 70, 8, 10\nroll back, left: 10 8 7 10\n(10) / (8) = 5/4, left: (10 / 8) = 5/4, 10, 7\nroll back, left: 10 8 7 10\n(8) - (10) = -2, left: (8 - 10) = -2, 10, 7\n(7) * (-2) = -14, left: (7 * (8 - 10)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (8 - 10))) = 24\nreach 24! expression: (10 - (7 * (8 - 10)))"}, {"input": "13 4 3 11\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 13, 11\n(13) - (11) = 2, left: (13 - 11) = 2, (4 * 3) = 12\n(12) * (2) = 24, left: ((4 * 3) * (13 - 11)) = 24\nreach 24! expression: ((4 * 3) * (13 - 11))"}, {"input": "13 4 3 11\n", "output": "(3) * (11) = 33, left: (3 * 11) = 33, 13, 4\n(4) + (33) = 37, left: (4 + (3 * 11)) = 37, 13\n(37) - (13) = 24, left: ((4 + (3 * 11)) - 13) = 24\nreach 24! expression: ((4 + (3 * 11)) - 13)"}, {"input": "13 4 3 11\n", "output": "(13) * (3) = 39, left: (13 * 3) = 39, 4, 11\n(39) - (4) = 35, left: ((13 * 3) - 4) = 35, 11\n(35) - (11) = 24, left: (((13 * 3) - 4) - 11) = 24\nreach 24! expression: (((13 * 3) - 4) - 11)"}, {"input": "13 4 3 11\n", "output": "(3) * (11) = 33, left: (3 * 11) = 33, 13, 4\n(33) - (13) = 20, left: ((3 * 11) - 13) = 20, 4\n(4) + (20) = 24, left: (4 + ((3 * 11) - 13)) = 24\nreach 24! expression: (4 + ((3 * 11) - 13))"}, {"input": "9 12 8 9\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 9, 12\n(12) - (9) = 3, left: (12 - 9) = 3, (8 * 9) = 72\n(72) / (3) = 24, left: ((8 * 9) / (12 - 9)) = 24\nreach 24! expression: ((8 * 9) / (12 - 9))"}, {"input": "9 12 8 9\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 9, 8\n(3) / (9) = 1/3, left: ((12 - 9) / 9) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((12 - 9) / 9)) = 24\nreach 24! expression: (8 / ((12 - 9) / 9))"}, {"input": "9 12 8 9\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 9, 8\n(9) / (3) = 3, left: (9 / (12 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 / (12 - 9))) = 24\nreach 24! expression: (8 * (9 / (12 - 9)))"}, {"input": "9 12 8 9\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 8, 9\n(8) / (3) = 8/3, left: (8 / (12 - 9)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (8 / (12 - 9))) = 24\nreach 24! expression: (9 * (8 / (12 - 9)))"}, {"input": "9 12 8 9\n", "output": "(9) * (8) = 72, left: (9 * 8) = 72, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (9 * 8) = 72\n(72) / (3) = 24, left: ((9 * 8) / (12 - 9)) = 24\nreach 24! expression: ((9 * 8) / (12 - 9))"}, {"input": "9 12 8 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 12, 8\nroll back, left: 9 12 8 9\n(9) - (9) = 0, left: (9 - 9) = 0, 12, 8\nroll back, left: 9 12 8 9\n(9) / (9) = 1, left: (9 / 9) = 1, 12, 8\nroll back, left: 9 12 8 9\n(8) * (9) = 72, left: (8 * 9) = 72, 9, 12\n(12) - (9) = 3, left: (12 - 9) = 3, (8 * 9) = 72\n(72) / (3) = 24, left: ((8 * 9) / (12 - 9)) = 24\nreach 24! expression: ((8 * 9) / (12 - 9))"}, {"input": "9 12 8 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 12, 8\n(1) - (8) = -7, left: ((9 / 9) - 8) = -7, 12\nroll back, left: (9 / 9) = 1, 12, 8\nroll back, left: 9 12 8 9\n(9) + (12) = 21, left: (9 + 12) = 21, 8, 9\nroll back, left: 9 12 8 9\n(12) - (9) = 3, left: (12 - 9) = 3, 8, 9\n(8) / (3) = 8/3, left: (8 / (12 - 9)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (8 / (12 - 9))) = 24\nreach 24! expression: (9 * (8 / (12 - 9)))"}, {"input": "9 12 8 9\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 9, 8\nroll back, left: 9 12 8 9\n(9) / (12) = 3/4, left: (9 / 12) = 3/4, 9, 8\nroll back, left: 9 12 8 9\n(12) + (9) = 21, left: (12 + 9) = 21, 9, 8\nroll back, left: 9 12 8 9\n(12) - (9) = 3, left: (12 - 9) = 3, 9, 8\n(3) / (9) = 1/3, left: ((12 - 9) / 9) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((12 - 9) / 9)) = 24\nreach 24! expression: (8 / ((12 - 9) / 9))"}, {"input": "9 12 8 9\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 9, 9\n(9) - (-4) = 13, left: (9 - (8 - 12)) = 13, 9\nroll back, left: (8 - 12) = -4, 9, 9\nroll back, left: 9 12 8 9\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 9, 9\nroll back, left: 9 12 8 9\n(9) * (8) = 72, left: (9 * 8) = 72, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (9 * 8) = 72\n(72) / (3) = 24, left: ((9 * 8) / (12 - 9)) = 24\nreach 24! expression: ((9 * 8) / (12 - 9))"}, {"input": "9 12 8 9\n", "output": "(12) + (9) = 21, left: (12 + 9) = 21, 9, 8\n(9) * (21) = 189, left: (9 * (12 + 9)) = 189, 8\nroll back, left: (12 + 9) = 21, 9, 8\n(21) / (8) = 21/8, left: ((12 + 9) / 8) = 21/8, 9\nroll back, left: (12 + 9) = 21, 9, 8\nroll back, left: 9 12 8 9\n(12) - (9) = 3, left: (12 - 9) = 3, 9, 8\n(9) / (3) = 3, left: (9 / (12 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 / (12 - 9))) = 24\nreach 24! expression: (8 * (9 / (12 - 9)))"}, {"input": "10 7 5 9\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 5, 9\n(5) * (-3) = -15, left: (5 * (7 - 10)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (7 - 10))) = 24\nreach 24! expression: (9 - (5 * (7 - 10)))"}, {"input": "10 7 5 9\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 5, 9\n(5) * (3) = 15, left: (5 * (10 - 7)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (10 - 7))) = 24\nreach 24! expression: (9 + (5 * (10 - 7)))"}, {"input": "10 7 5 9\n", "output": "(7) / (9) = 7/9, left: (7 / 9) = 7/9, 10, 5\nroll back, left: 10 7 5 9\n(10) * (7) = 70, left: (10 * 7) = 70, 5, 9\n(5) + (70) = 75, left: (5 + (10 * 7)) = 75, 9\nroll back, left: (10 * 7) = 70, 5, 9\nroll back, left: 10 7 5 9\n(10) - (7) = 3, left: (10 - 7) = 3, 5, 9\n(5) * (3) = 15, left: (5 * (10 - 7)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (10 - 7))) = 24\nreach 24! expression: (9 + (5 * (10 - 7)))"}, {"input": "10 7 5 9\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 10, 7\nroll back, left: 10 7 5 9\n(5) / (7) = 5/7, left: (5 / 7) = 5/7, 10, 9\nroll back, left: 10 7 5 9\n(10) / (7) = 10/7, left: (10 / 7) = 10/7, 5, 9\nroll back, left: 10 7 5 9\n(10) - (7) = 3, left: (10 - 7) = 3, 5, 9\n(5) * (3) = 15, left: (5 * (10 - 7)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 * (10 - 7))) = 24\nreach 24! expression: (9 + (5 * (10 - 7)))"}, {"input": "10 7 5 9\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 7, 9\n(7) - (2) = 5, left: (7 - (10 / 5)) = 5, 9\nroll back, left: (10 / 5) = 2, 7, 9\nroll back, left: 10 7 5 9\n(7) * (9) = 63, left: (7 * 9) = 63, 10, 5\nroll back, left: 10 7 5 9\n(7) - (10) = -3, left: (7 - 10) = -3, 5, 9\n(5) * (-3) = -15, left: (5 * (7 - 10)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (7 - 10))) = 24\nreach 24! expression: (9 - (5 * (7 - 10)))"}, {"input": "10 7 5 9\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 7, 9\n(7) / (2) = 7/2, left: (7 / (10 / 5)) = 7/2, 9\nroll back, left: (10 / 5) = 2, 7, 9\nroll back, left: 10 7 5 9\n(10) * (5) = 50, left: (10 * 5) = 50, 7, 9\nroll back, left: 10 7 5 9\n(7) - (10) = -3, left: (7 - 10) = -3, 5, 9\n(5) * (-3) = -15, left: (5 * (7 - 10)) = -15, 9\n(9) - (-15) = 24, left: (9 - (5 * (7 - 10))) = 24\nreach 24! expression: (9 - (5 * (7 - 10)))"}, {"input": "10 10 11 4\n", "output": "(11) * (4) = 44, left: (11 * 4) = 44, 10, 10\n(10) + (10) = 20, left: (10 + 10) = 20, (11 * 4) = 44\n(44) - (20) = 24, left: ((11 * 4) - (10 + 10)) = 24\nreach 24! expression: ((11 * 4) - (10 + 10))"}, {"input": "10 10 11 4\n", "output": "(11) * (4) = 44, left: (11 * 4) = 44, 10, 10\n(44) - (10) = 34, left: ((11 * 4) - 10) = 34, 10\n(34) - (10) = 24, left: (((11 * 4) - 10) - 10) = 24\nreach 24! expression: (((11 * 4) - 10) - 10)"}, {"input": "10 10 11 4\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 11, 4\n(11) * (4) = 44, left: (11 * 4) = 44, (10 + 10) = 20\n(44) - (20) = 24, left: ((11 * 4) - (10 + 10)) = 24\nreach 24! expression: ((11 * 4) - (10 + 10))"}, {"input": "4 9 3 7\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (9 - 7) = 2\n(2) * (12) = 24, left: ((9 - 7) * (4 * 3)) = 24\nreach 24! expression: ((9 - 7) * (4 * 3))"}, {"input": "4 9 3 7\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (4 - 7) = -3\n(-3) + (27) = 24, left: ((4 - 7) + (9 * 3)) = 24\nreach 24! expression: ((4 - 7) + (9 * 3))"}, {"input": "4 9 3 7\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 4, 3\n(3) * (2) = 6, left: (3 * (9 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 * (9 - 7))) = 24\nreach 24! expression: (4 * (3 * (9 - 7)))"}, {"input": "4 9 3 7\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 4, 3\n(4) * (2) = 8, left: (4 * (9 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 * (9 - 7))) = 24\nreach 24! expression: (3 * (4 * (9 - 7)))"}, {"input": "4 9 3 7\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 4, 7\n(4) + (27) = 31, left: (4 + (9 * 3)) = 31, 7\n(31) - (7) = 24, left: ((4 + (9 * 3)) - 7) = 24\nreach 24! expression: ((4 + (9 * 3)) - 7)"}, {"input": "4 9 3 7\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 4, 9\nroll back, left: 4 9 3 7\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 9, 3\n(9) - (3) = 6, left: (9 - 3) = 6, (7 / 4) = 7/4\nroll back, left: (7 / 4) = 7/4, 9, 3\nroll back, left: 4 9 3 7\n(4) - (7) = -3, left: (4 - 7) = -3, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (4 - 7) = -3\n(-3) + (27) = 24, left: ((4 - 7) + (9 * 3)) = 24\nreach 24! expression: ((4 - 7) + (9 * 3))"}, {"input": "4 9 3 7\n", "output": "(7) / (9) = 7/9, left: (7 / 9) = 7/9, 4, 3\n(3) + (7/9) = 34/9, left: (3 + (7 / 9)) = 34/9, 4\nroll back, left: (7 / 9) = 7/9, 4, 3\nroll back, left: 4 9 3 7\n(9) * (7) = 63, left: (9 * 7) = 63, 4, 3\nroll back, left: 4 9 3 7\n(9) - (7) = 2, left: (9 - 7) = 2, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (9 - 7) = 2\n(2) * (12) = 24, left: ((9 - 7) * (4 * 3)) = 24\nreach 24! expression: ((9 - 7) * (4 * 3))"}, {"input": "4 9 3 7\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 3, 7\n(9/4) / (3) = 3/4, left: ((9 / 4) / 3) = 3/4, 7\nroll back, left: (9 / 4) = 9/4, 3, 7\nroll back, left: 4 9 3 7\n(4) * (9) = 36, left: (4 * 9) = 36, 3, 7\nroll back, left: 4 9 3 7\n(9) - (7) = 2, left: (9 - 7) = 2, 4, 3\n(4) * (2) = 8, left: (4 * (9 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 * (9 - 7))) = 24\nreach 24! expression: (3 * (4 * (9 - 7)))"}, {"input": "4 9 3 7\n", "output": "(9) / (7) = 9/7, left: (9 / 7) = 9/7, 4, 3\nroll back, left: 4 9 3 7\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, 4, 3\n(4) - (3) = 1, left: (4 - 3) = 1, (7 / 9) = 7/9\nroll back, left: (7 / 9) = 7/9, 4, 3\nroll back, left: 4 9 3 7\n(9) - (7) = 2, left: (9 - 7) = 2, 4, 3\n(3) * (2) = 6, left: (3 * (9 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 * (9 - 7))) = 24\nreach 24! expression: (4 * (3 * (9 - 7)))"}, {"input": "4 9 3 7\n", "output": "(4) * (9) = 36, left: (4 * 9) = 36, 3, 7\nroll back, left: 4 9 3 7\n(9) / (4) = 9/4, left: (9 / 4) = 9/4, 3, 7\n(3) * (7) = 21, left: (3 * 7) = 21, (9 / 4) = 9/4\nroll back, left: (9 / 4) = 9/4, 3, 7\nroll back, left: 4 9 3 7\n(9) * (3) = 27, left: (9 * 3) = 27, 4, 7\n(4) + (27) = 31, left: (4 + (9 * 3)) = 31, 7\n(31) - (7) = 24, left: ((4 + (9 * 3)) - 7) = 24\nreach 24! expression: ((4 + (9 * 3)) - 7)"}, {"input": "1 12 4 10\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 12, 10\n(12) / (5) = 12/5, left: (12 / (1 + 4)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (12 / (1 + 4))) = 24\nreach 24! expression: (10 * (12 / (1 + 4)))"}, {"input": "1 12 4 10\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 12, 10\n(5) / (10) = 1/2, left: ((1 + 4) / 10) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((1 + 4) / 10)) = 24\nreach 24! expression: (12 / ((1 + 4) / 10))"}, {"input": "1 12 4 10\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 12, 10\n(10) / (5) = 2, left: (10 / (1 + 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 / (1 + 4))) = 24\nreach 24! expression: (12 * (10 / (1 + 4)))"}, {"input": "1 12 4 10\n", "output": "(10) / (12) = 5/6, left: (10 / 12) = 5/6, 1, 4\n(1) - (5/6) = 1/6, left: (1 - (10 / 12)) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / (1 - (10 / 12))) = 24\nreach 24! expression: (4 / (1 - (10 / 12)))"}, {"input": "1 12 4 10\n", "output": "(10) / (4) = 5/2, left: (10 / 4) = 5/2, 1, 12\nroll back, left: 1 12 4 10\n(4) * (10) = 40, left: (4 * 10) = 40, 1, 12\n(12) + (40) = 52, left: (12 + (4 * 10)) = 52, 1\nroll back, left: (4 * 10) = 40, 1, 12\nroll back, left: 1 12 4 10\n(1) + (4) = 5, left: (1 + 4) = 5, 12, 10\n(10) / (5) = 2, left: (10 / (1 + 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 / (1 + 4))) = 24\nreach 24! expression: (12 * (10 / (1 + 4)))"}, {"input": "1 12 4 10\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 1, 10\nroll back, left: 1 12 4 10\n(1) * (12) = 12, left: (1 * 12) = 12, 4, 10\nroll back, left: 1 12 4 10\n(1) + (12) = 13, left: (1 + 12) = 13, 4, 10\nroll back, left: 1 12 4 10\n(10) / (12) = 5/6, left: (10 / 12) = 5/6, 1, 4\n(1) - (5/6) = 1/6, left: (1 - (10 / 12)) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / (1 - (10 / 12))) = 24\nreach 24! expression: (4 / (1 - (10 / 12)))"}, {"input": "1 12 4 10\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 1, 12\nroll back, left: 1 12 4 10\n(4) * (10) = 40, left: (4 * 10) = 40, 1, 12\nroll back, left: 1 12 4 10\n(4) / (10) = 2/5, left: (4 / 10) = 2/5, 1, 12\nroll back, left: 1 12 4 10\n(1) + (4) = 5, left: (1 + 4) = 5, 12, 10\n(12) / (5) = 12/5, left: (12 / (1 + 4)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (12 / (1 + 4))) = 24\nreach 24! expression: (10 * (12 / (1 + 4)))"}, {"input": "10 9 8 12\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 10, 8\n(10) + (8) = 18, left: (10 + 8) = 18, (9 / 12) = 3/4\n(18) / (3/4) = 24, left: ((10 + 8) / (9 / 12)) = 24\nreach 24! expression: ((10 + 8) / (9 / 12))"}, {"input": "10 9 8 12\n", "output": "(10) + (8) = 18, left: (10 + 8) = 18, 9, 12\n(18) / (9) = 2, left: ((10 + 8) / 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 8) / 9)) = 24\nreach 24! expression: (12 * ((10 + 8) / 9))"}, {"input": "10 9 8 12\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 10, 9\n(10) * (3/2) = 15, left: (10 * (12 / 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 * (12 / 8))) = 24\nreach 24! expression: (9 + (10 * (12 / 8)))"}, {"input": "10 9 8 12\n", "output": "(10) * (12) = 120, left: (10 * 12) = 120, 9, 8\n(120) / (8) = 15, left: ((10 * 12) / 8) = 15, 9\n(9) + (15) = 24, left: (9 + ((10 * 12) / 8)) = 24\nreach 24! expression: (9 + ((10 * 12) / 8))"}, {"input": "10 9 8 12\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 9, 12\nroll back, left: 10 9 8 12\n(10) - (8) = 2, left: (10 - 8) = 2, 9, 12\n(9) * (12) = 108, left: (9 * 12) = 108, (10 - 8) = 2\nroll back, left: (10 - 8) = 2, 9, 12\nroll back, left: 10 9 8 12\n(10) + (8) = 18, left: (10 + 8) = 18, 9, 12\n(18) / (9) = 2, left: ((10 + 8) / 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 8) / 9)) = 24\nreach 24! expression: (12 * ((10 + 8) / 9))"}, {"input": "10 9 8 12\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 10, 9\nroll back, left: 10 9 8 12\n(8) + (12) = 20, left: (8 + 12) = 20, 10, 9\n(10) * (9) = 90, left: (10 * 9) = 90, (8 + 12) = 20\nroll back, left: (8 + 12) = 20, 10, 9\nroll back, left: 10 9 8 12\n(12) / (8) = 3/2, left: (12 / 8) = 3/2, 10, 9\n(10) * (3/2) = 15, left: (10 * (12 / 8)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 * (12 / 8))) = 24\nreach 24! expression: (9 + (10 * (12 / 8)))"}, {"input": "10 9 8 12\n", "output": "(10) * (9) = 90, left: (10 * 9) = 90, 8, 12\nroll back, left: 10 9 8 12\n(9) / (10) = 9/10, left: (9 / 10) = 9/10, 8, 12\nroll back, left: 10 9 8 12\n(10) + (12) = 22, left: (10 + 12) = 22, 9, 8\nroll back, left: 10 9 8 12\n(10) * (12) = 120, left: (10 * 12) = 120, 9, 8\n(120) / (8) = 15, left: ((10 * 12) / 8) = 15, 9\n(9) + (15) = 24, left: (9 + ((10 * 12) / 8)) = 24\nreach 24! expression: (9 + ((10 * 12) / 8))"}, {"input": "8 4 4 13\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 4, 4\n(4) * (-5) = -20, left: (4 * (8 - 13)) = -20, 4\n(4) - (-20) = 24, left: (4 - (4 * (8 - 13))) = 24\nreach 24! expression: (4 - (4 * (8 - 13)))"}, {"input": "8 4 4 13\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (13 - 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (13 - 8))) = 24\nreach 24! expression: (4 + (4 * (13 - 8)))"}, {"input": "8 4 4 13\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 8, 4\n(4) - (8) = -4, left: (4 - 8) = -4, (4 - 13) = -9\n(-9) + (-4) = -13, left: ((4 - 13) + (4 - 8)) = -13\nroll back, left: (4 - 8) = -4, (4 - 13) = -9\nroll back, left: (4 - 13) = -9, 8, 4\nroll back, left: 8 4 4 13\n(13) - (8) = 5, left: (13 - 8) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (13 - 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (13 - 8))) = 24\nreach 24! expression: (4 + (4 * (13 - 8)))"}, {"input": "8 4 4 13\n", "output": "(8) * (13) = 104, left: (8 * 13) = 104, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (8 * 13) = 104\nroll back, left: (8 * 13) = 104, 4, 4\nroll back, left: 8 4 4 13\n(13) / (8) = 13/8, left: (13 / 8) = 13/8, 4, 4\nroll back, left: 8 4 4 13\n(8) - (13) = -5, left: (8 - 13) = -5, 4, 4\n(4) * (-5) = -20, left: (4 * (8 - 13)) = -20, 4\n(4) - (-20) = 24, left: (4 - (4 * (8 - 13))) = 24\nreach 24! expression: (4 - (4 * (8 - 13)))"}, {"input": "8 4 4 13\n", "output": "(13) / (4) = 13/4, left: (13 / 4) = 13/4, 8, 4\nroll back, left: 8 4 4 13\n(8) * (13) = 104, left: (8 * 13) = 104, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (8 * 13) = 104\nroll back, left: (8 * 13) = 104, 4, 4\nroll back, left: 8 4 4 13\n(13) - (8) = 5, left: (13 - 8) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (13 - 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (13 - 8))) = 24\nreach 24! expression: (4 + (4 * (13 - 8)))"}, {"input": "8 4 4 13\n", "output": "(8) + (13) = 21, left: (8 + 13) = 21, 4, 4\nroll back, left: 8 4 4 13\n(13) / (8) = 13/8, left: (13 / 8) = 13/8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (13 / 8) = 13/8\nroll back, left: (13 / 8) = 13/8, 4, 4\nroll back, left: 8 4 4 13\n(8) - (13) = -5, left: (8 - 13) = -5, 4, 4\n(4) * (-5) = -20, left: (4 * (8 - 13)) = -20, 4\n(4) - (-20) = 24, left: (4 - (4 * (8 - 13))) = 24\nreach 24! expression: (4 - (4 * (8 - 13)))"}, {"input": "8 4 4 13\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 8, 4\nroll back, left: 8 4 4 13\n(13) / (4) = 13/4, left: (13 / 4) = 13/4, 8, 4\n(13/4) / (8) = 13/32, left: ((13 / 4) / 8) = 13/32, 4\nroll back, left: (13 / 4) = 13/4, 8, 4\nroll back, left: 8 4 4 13\n(13) - (8) = 5, left: (13 - 8) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (13 - 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (13 - 8))) = 24\nreach 24! expression: (4 + (4 * (13 - 8)))"}, {"input": "9 10 10 2\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 9, 10\n(10) + (5) = 15, left: (10 + (10 / 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 + (10 / 2))) = 24\nreach 24! expression: (9 + (10 + (10 / 2)))"}, {"input": "9 10 10 2\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 9, 10\n(9) + (10) = 19, left: (9 + 10) = 19, (10 / 2) = 5\n(5) + (19) = 24, left: ((10 / 2) + (9 + 10)) = 24\nreach 24! expression: ((10 / 2) + (9 + 10))"}, {"input": "9 10 10 2\n", "output": "(9) + (10) = 19, left: (9 + 10) = 19, 10, 2\n(10) / (2) = 5, left: (10 / 2) = 5, (9 + 10) = 19\n(19) + (5) = 24, left: ((9 + 10) + (10 / 2)) = 24\nreach 24! expression: ((9 + 10) + (10 / 2))"}, {"input": "9 10 10 2\n", "output": "(9) / (2) = 9/2, left: (9 / 2) = 9/2, 10, 10\nroll back, left: 9 10 10 2\n(9) - (2) = 7, left: (9 - 2) = 7, 10, 10\nroll back, left: 9 10 10 2\n(10) / (9) = 10/9, left: (10 / 9) = 10/9, 10, 2\nroll back, left: 9 10 10 2\n(9) + (10) = 19, left: (9 + 10) = 19, 10, 2\n(10) / (2) = 5, left: (10 / 2) = 5, (9 + 10) = 19\n(19) + (5) = 24, left: ((9 + 10) + (10 / 2)) = 24\nreach 24! expression: ((9 + 10) + (10 / 2))"}, {"input": "9 10 10 2\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 10, 2\nroll back, left: 9 10 10 2\n(10) / (9) = 10/9, left: (10 / 9) = 10/9, 10, 2\nroll back, left: 9 10 10 2\n(9) * (10) = 90, left: (9 * 10) = 90, 10, 2\nroll back, left: 9 10 10 2\n(9) + (10) = 19, left: (9 + 10) = 19, 10, 2\n(10) / (2) = 5, left: (10 / 2) = 5, (9 + 10) = 19\n(19) + (5) = 24, left: ((9 + 10) + (10 / 2)) = 24\nreach 24! expression: ((9 + 10) + (10 / 2))"}, {"input": "9 10 10 2\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 9, 10\nroll back, left: 9 10 10 2\n(10) - (2) = 8, left: (10 - 2) = 8, 9, 10\n(10) - (9) = 1, left: (10 - 9) = 1, (10 - 2) = 8\nroll back, left: (10 - 2) = 8, 9, 10\nroll back, left: 9 10 10 2\n(10) / (2) = 5, left: (10 / 2) = 5, 9, 10\n(10) + (5) = 15, left: (10 + (10 / 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 + (10 / 2))) = 24\nreach 24! expression: (9 + (10 + (10 / 2)))"}, {"input": "13 1 8 11\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 1, 8\n(1) - (-2) = 3, left: (1 - (11 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (11 - 13))) = 24\nreach 24! expression: (8 * (1 - (11 - 13)))"}, {"input": "13 1 8 11\n", "output": "(13) + (1) = 14, left: (13 + 1) = 14, 8, 11\n(14) - (11) = 3, left: ((13 + 1) - 11) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 + 1) - 11)) = 24\nreach 24! expression: (8 * ((13 + 1) - 11))"}, {"input": "13 1 8 11\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 13, 8\n(13) + (-10) = 3, left: (13 + (1 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 + (1 - 11))) = 24\nreach 24! expression: (8 * (13 + (1 - 11)))"}, {"input": "13 1 8 11\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 1, 8\n(1) + (2) = 3, left: (1 + (13 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (13 - 11))) = 24\nreach 24! expression: (8 * (1 + (13 - 11)))"}, {"input": "13 1 8 11\n", "output": "(13) * (8) = 104, left: (13 * 8) = 104, 1, 11\n(11) + (104) = 115, left: (11 + (13 * 8)) = 115, 1\nroll back, left: (13 * 8) = 104, 1, 11\nroll back, left: 13 1 8 11\n(13) + (8) = 21, left: (13 + 8) = 21, 1, 11\nroll back, left: 13 1 8 11\n(13) + (1) = 14, left: (13 + 1) = 14, 8, 11\n(14) - (11) = 3, left: ((13 + 1) - 11) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 + 1) - 11)) = 24\nreach 24! expression: (8 * ((13 + 1) - 11))"}, {"input": "13 1 8 11\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 13, 1\nroll back, left: 13 1 8 11\n(8) * (11) = 88, left: (8 * 11) = 88, 13, 1\n(88) / (1) = 88, left: ((8 * 11) / 1) = 88, 13\nroll back, left: (8 * 11) = 88, 13, 1\nroll back, left: 13 1 8 11\n(13) - (11) = 2, left: (13 - 11) = 2, 1, 8\n(1) + (2) = 3, left: (1 + (13 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (13 - 11))) = 24\nreach 24! expression: (8 * (1 + (13 - 11)))"}, {"input": "13 1 8 11\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 13, 11\n(8) - (13) = -5, left: ((8 / 1) - 13) = -5, 11\nroll back, left: (8 / 1) = 8, 13, 11\nroll back, left: 13 1 8 11\n(1) * (8) = 8, left: (1 * 8) = 8, 13, 11\nroll back, left: 13 1 8 11\n(11) - (13) = -2, left: (11 - 13) = -2, 1, 8\n(1) - (-2) = 3, left: (1 - (11 - 13)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (11 - 13))) = 24\nreach 24! expression: (8 * (1 - (11 - 13)))"}, {"input": "2 6 12 11\n", "output": "(12) * (11) = 132, left: (12 * 11) = 132, 2, 6\n(132) / (6) = 22, left: ((12 * 11) / 6) = 22, 2\n(2) + (22) = 24, left: (2 + ((12 * 11) / 6)) = 24\nreach 24! expression: (2 + ((12 * 11) / 6))"}, {"input": "2 6 12 11\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 2, 12\n(12) / (6/11) = 22, left: (12 / (6 / 11)) = 22, 2\n(2) + (22) = 24, left: (2 + (12 / (6 / 11))) = 24\nreach 24! expression: (2 + (12 / (6 / 11)))"}, {"input": "2 6 12 11\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 2, 11\n(11) / (1/2) = 22, left: (11 / (6 / 12)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 / (6 / 12))) = 24\nreach 24! expression: (2 + (11 / (6 / 12)))"}, {"input": "2 6 12 11\n", "output": "(2) * (11) = 22, left: (2 * 11) = 22, 6, 12\n(12) / (6) = 2, left: (12 / 6) = 2, (2 * 11) = 22\n(22) + (2) = 24, left: ((2 * 11) + (12 / 6)) = 24\nreach 24! expression: ((2 * 11) + (12 / 6))"}, {"input": "2 6 12 11\n", "output": "(2) * (12) = 24, left: (2 * 12) = 24, 6, 11\n(11) + (24) = 35, left: (11 + (2 * 12)) = 35, 6\nroll back, left: (2 * 12) = 24, 6, 11\nroll back, left: 2 6 12 11\n(2) + (12) = 14, left: (2 + 12) = 14, 6, 11\nroll back, left: 2 6 12 11\n(6) / (11) = 6/11, left: (6 / 11) = 6/11, 2, 12\n(12) / (6/11) = 22, left: (12 / (6 / 11)) = 22, 2\n(2) + (22) = 24, left: (2 + (12 / (6 / 11))) = 24\nreach 24! expression: (2 + (12 / (6 / 11)))"}, {"input": "2 6 12 11\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 2, 11\nroll back, left: 2 6 12 11\n(12) - (6) = 6, left: (12 - 6) = 6, 2, 11\n(11) / (2) = 11/2, left: (11 / 2) = 11/2, (12 - 6) = 6\nroll back, left: (12 - 6) = 6, 2, 11\nroll back, left: 2 6 12 11\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 2, 11\n(11) / (1/2) = 22, left: (11 / (6 / 12)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 / (6 / 12))) = 24\nreach 24! expression: (2 + (11 / (6 / 12)))"}, {"input": "11 2 6 3\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 6, 3\n(6) / (3) = 2, left: (6 / 3) = 2, (11 * 2) = 22\n(22) + (2) = 24, left: ((11 * 2) + (6 / 3)) = 24\nreach 24! expression: ((11 * 2) + (6 / 3))"}, {"input": "11 2 6 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (6 / 3) = 2\n(2) + (22) = 24, left: ((6 / 3) + (11 * 2)) = 24\nreach 24! expression: ((6 / 3) + (11 * 2))"}, {"input": "11 2 6 3\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 11, 2\n(11) / (1/2) = 22, left: (11 / (3 / 6)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 / (3 / 6))) = 24\nreach 24! expression: (2 + (11 / (3 / 6)))"}, {"input": "11 2 6 3\n", "output": "(11) * (6) = 66, left: (11 * 6) = 66, 2, 3\n(66) / (3) = 22, left: ((11 * 6) / 3) = 22, 2\n(2) + (22) = 24, left: (2 + ((11 * 6) / 3)) = 24\nreach 24! expression: (2 + ((11 * 6) / 3))"}, {"input": "11 2 6 3\n", "output": "(2) - (11) = -9, left: (2 - 11) = -9, 6, 3\nroll back, left: 11 2 6 3\n(11) - (2) = 9, left: (11 - 2) = 9, 6, 3\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, (11 - 2) = 9\nroll back, left: (11 - 2) = 9, 6, 3\nroll back, left: 11 2 6 3\n(11) * (2) = 22, left: (11 * 2) = 22, 6, 3\n(6) / (3) = 2, left: (6 / 3) = 2, (11 * 2) = 22\n(22) + (2) = 24, left: ((11 * 2) + (6 / 3)) = 24\nreach 24! expression: ((11 * 2) + (6 / 3))"}, {"input": "11 2 6 3\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 11, 6\n(11) + (6) = 17, left: (11 + (2 * 3)) = 17, 6\nroll back, left: (2 * 3) = 6, 11, 6\nroll back, left: 11 2 6 3\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, 11, 6\nroll back, left: 11 2 6 3\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 11, 2\n(11) / (1/2) = 22, left: (11 / (3 / 6)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 / (3 / 6))) = 24\nreach 24! expression: (2 + (11 / (3 / 6)))"}, {"input": "11 2 6 3\n", "output": "(11) + (6) = 17, left: (11 + 6) = 17, 2, 3\n(3) / (17) = 3/17, left: (3 / (11 + 6)) = 3/17, 2\nroll back, left: (11 + 6) = 17, 2, 3\nroll back, left: 11 2 6 3\n(6) - (11) = -5, left: (6 - 11) = -5, 2, 3\nroll back, left: 11 2 6 3\n(11) * (6) = 66, left: (11 * 6) = 66, 2, 3\n(66) / (3) = 22, left: ((11 * 6) / 3) = 22, 2\n(2) + (22) = 24, left: (2 + ((11 * 6) / 3)) = 24\nreach 24! expression: (2 + ((11 * 6) / 3))"}, {"input": "11 2 6 3\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 11, 6\n(1) - (6) = -5, left: ((3 - 2) - 6) = -5, 11\nroll back, left: (3 - 2) = 1, 11, 6\nroll back, left: 11 2 6 3\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 11, 6\nroll back, left: 11 2 6 3\n(6) / (3) = 2, left: (6 / 3) = 2, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (6 / 3) = 2\n(2) + (22) = 24, left: ((6 / 3) + (11 * 2)) = 24\nreach 24! expression: ((6 / 3) + (11 * 2))"}, {"input": "8 5 12 9\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 12, 9\n(12) + (9) = 21, left: (12 + 9) = 21, (5 - 8) = -3\n(21) - (-3) = 24, left: ((12 + 9) - (5 - 8)) = 24\nreach 24! expression: ((12 + 9) - (5 - 8))"}, {"input": "8 5 12 9\n", "output": "(8) + (9) = 17, left: (8 + 9) = 17, 5, 12\n(12) + (17) = 29, left: (12 + (8 + 9)) = 29, 5\n(29) - (5) = 24, left: ((12 + (8 + 9)) - 5) = 24\nreach 24! expression: ((12 + (8 + 9)) - 5)"}, {"input": "8 5 12 9\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 8, 9\n(9) + (7) = 16, left: (9 + (12 - 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (9 + (12 - 5))) = 24\nreach 24! expression: (8 + (9 + (12 - 5)))"}, {"input": "8 5 12 9\n", "output": "(5) - (12) = -7, left: (5 - 12) = -7, 8, 9\n(8) + (9) = 17, left: (8 + 9) = 17, (5 - 12) = -7\n(17) - (-7) = 24, left: ((8 + 9) - (5 - 12)) = 24\nreach 24! expression: ((8 + 9) - (5 - 12))"}, {"input": "8 5 12 9\n", "output": "(12) + (9) = 21, left: (12 + 9) = 21, 8, 5\n(5) - (8) = -3, left: (5 - 8) = -3, (12 + 9) = 21\n(21) - (-3) = 24, left: ((12 + 9) - (5 - 8)) = 24\nreach 24! expression: ((12 + 9) - (5 - 8))"}, {"input": "8 5 12 9\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 8, 5\n(5) + (3) = 8, left: (5 + (12 - 9)) = 8, 8\nroll back, left: (12 - 9) = 3, 8, 5\n(3) - (5) = -2, left: ((12 - 9) - 5) = -2, 8\nroll back, left: (12 - 9) = 3, 8, 5\nroll back, left: 8 5 12 9\n(12) + (9) = 21, left: (12 + 9) = 21, 8, 5\n(5) - (8) = -3, left: (5 - 8) = -3, (12 + 9) = 21\n(21) - (-3) = 24, left: ((12 + 9) - (5 - 8)) = 24\nreach 24! expression: ((12 + 9) - (5 - 8))"}, {"input": "6 4 4 1\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 4, 4\n(4) * (-5) = -20, left: (4 * (1 - 6)) = -20, 4\n(4) - (-20) = 24, left: (4 - (4 * (1 - 6))) = 24\nreach 24! expression: (4 - (4 * (1 - 6)))"}, {"input": "6 4 4 1\n", "output": "(6) + (1) = 7, left: (6 + 1) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (6 + 1)) = 28, 4\n(28) - (4) = 24, left: ((4 * (6 + 1)) - 4) = 24\nreach 24! expression: ((4 * (6 + 1)) - 4)"}, {"input": "6 4 4 1\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (6 - 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (6 - 1))) = 24\nreach 24! expression: (4 + (4 * (6 - 1)))"}, {"input": "6 4 4 1\n", "output": "(6) + (4) = 10, left: (6 + 4) = 10, 4, 1\nroll back, left: 6 4 4 1\n(6) * (4) = 24, left: (6 * 4) = 24, 4, 1\nroll back, left: 6 4 4 1\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 6, 4\nroll back, left: 6 4 4 1\n(1) - (6) = -5, left: (1 - 6) = -5, 4, 4\n(4) * (-5) = -20, left: (4 * (1 - 6)) = -20, 4\n(4) - (-20) = 24, left: (4 - (4 * (1 - 6))) = 24\nreach 24! expression: (4 - (4 * (1 - 6)))"}, {"input": "6 4 4 1\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 4, 1\nroll back, left: 6 4 4 1\n(6) * (1) = 6, left: (6 * 1) = 6, 4, 4\n(4) / (6) = 2/3, left: (4 / (6 * 1)) = 2/3, 4\nroll back, left: (6 * 1) = 6, 4, 4\nroll back, left: 6 4 4 1\n(6) + (1) = 7, left: (6 + 1) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (6 + 1)) = 28, 4\n(28) - (4) = 24, left: ((4 * (6 + 1)) - 4) = 24\nreach 24! expression: ((4 * (6 + 1)) - 4)"}, {"input": "6 4 4 1\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 4, 4\n(4) / (6) = 2/3, left: (4 / (6 / 1)) = 2/3, 4\nroll back, left: (6 / 1) = 6, 4, 4\n(4) + (6) = 10, left: (4 + (6 / 1)) = 10, 4\nroll back, left: (6 / 1) = 6, 4, 4\nroll back, left: 6 4 4 1\n(6) - (1) = 5, left: (6 - 1) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (6 - 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (6 - 1))) = 24\nreach 24! expression: (4 + (4 * (6 - 1)))"}, {"input": "6 4 4 1\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 4, 1\nroll back, left: 6 4 4 1\n(6) - (4) = 2, left: (6 - 4) = 2, 4, 1\nroll back, left: 6 4 4 1\n(4) - (6) = -2, left: (4 - 6) = -2, 4, 1\nroll back, left: 6 4 4 1\n(6) - (1) = 5, left: (6 - 1) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (6 - 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (6 - 1))) = 24\nreach 24! expression: (4 + (4 * (6 - 1)))"}, {"input": "6 4 4 1\n", "output": "(4) * (1) = 4, left: (4 * 1) = 4, 6, 4\nroll back, left: 6 4 4 1\n(6) * (4) = 24, left: (6 * 4) = 24, 4, 1\nroll back, left: 6 4 4 1\n(6) + (1) = 7, left: (6 + 1) = 7, 4, 4\n(7) - (4) = 3, left: ((6 + 1) - 4) = 3, 4\nroll back, left: (6 + 1) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (6 + 1)) = 28, 4\n(28) - (4) = 24, left: ((4 * (6 + 1)) - 4) = 24\nreach 24! expression: ((4 * (6 + 1)) - 4)"}, {"input": "12 6 2 6\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 12, 6\n(3) / (6) = 1/2, left: ((6 / 2) / 6) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((6 / 2) / 6)) = 24\nreach 24! expression: (12 / ((6 / 2) / 6))"}, {"input": "12 6 2 6\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 2, 6\n(2) - (6) = -4, left: (2 - 6) = -4, (6 - 12) = -6\n(-6) * (-4) = 24, left: ((6 - 12) * (2 - 6)) = 24\nreach 24! expression: ((6 - 12) * (2 - 6))"}, {"input": "12 6 2 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 12, 2\n(1) / (12) = 1/12, left: ((6 / 6) / 12) = 1/12, 2\n(2) / (1/12) = 24, left: (2 / ((6 / 6) / 12)) = 24\nreach 24! expression: (2 / ((6 / 6) / 12))"}, {"input": "12 6 2 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 12, 2\n(12) + (0) = 12, left: (12 + (6 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 + (6 - 6))) = 24\nreach 24! expression: (2 * (12 + (6 - 6)))"}, {"input": "12 6 2 6\n", "output": "(2) + (6) = 8, left: (2 + 6) = 8, 12, 6\n(8) - (6) = 2, left: ((2 + 6) - 6) = 2, 12\n(12) * (2) = 24, left: (12 * ((2 + 6) - 6)) = 24\nreach 24! expression: (12 * ((2 + 6) - 6))"}, {"input": "12 6 2 6\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 2, 6\n(2) + (-6) = -4, left: (2 + (6 - 12)) = -4, 6\nroll back, left: (6 - 12) = -6, 2, 6\n(2) * (-6) = -12, left: (2 * (6 - 12)) = -12, 6\n(6) / (-12) = -1/2, left: (6 / (2 * (6 - 12))) = -1/2\nroll back, left: (2 * (6 - 12)) = -12, 6\nroll back, left: (6 - 12) = -6, 2, 6\n(2) - (6) = -4, left: (2 - 6) = -4, (6 - 12) = -6\n(-6) * (-4) = 24, left: ((6 - 12) * (2 - 6)) = 24\nreach 24! expression: ((6 - 12) * (2 - 6))"}, {"input": "12 6 2 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 12, 2\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, (6 + 6) = 12\nroll back, left: (6 + 6) = 12, 12, 2\n(12) - (2) = 10, left: ((6 + 6) - 2) = 10, 12\nroll back, left: (6 + 6) = 12, 12, 2\nroll back, left: 12 6 2 6\n(6) - (6) = 0, left: (6 - 6) = 0, 12, 2\n(12) + (0) = 12, left: (12 + (6 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (12 + (6 - 6))) = 24\nreach 24! expression: (2 * (12 + (6 - 6)))"}, {"input": "12 6 2 6\n", "output": "(2) + (6) = 8, left: (2 + 6) = 8, 12, 6\n(6) / (8) = 3/4, left: (6 / (2 + 6)) = 3/4, 12\nroll back, left: (2 + 6) = 8, 12, 6\n(6) - (8) = -2, left: (6 - (2 + 6)) = -2, 12\n(12) + (-2) = 10, left: (12 + (6 - (2 + 6))) = 10\nroll back, left: (6 - (2 + 6)) = -2, 12\nroll back, left: (2 + 6) = 8, 12, 6\n(8) - (6) = 2, left: ((2 + 6) - 6) = 2, 12\n(12) * (2) = 24, left: (12 * ((2 + 6) - 6)) = 24\nreach 24! expression: (12 * ((2 + 6) - 6))"}, {"input": "6 5 10 1\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 6, 10\n(10) - (6) = 4, left: (10 - (5 + 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (10 - (5 + 1))) = 24\nreach 24! expression: (6 * (10 - (5 + 1)))"}, {"input": "6 5 10 1\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (10 - 6) = 4\n(4) * (6) = 24, left: ((10 - 6) * (5 + 1)) = 24\nreach 24! expression: ((10 - 6) * (5 + 1))"}, {"input": "6 5 10 1\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 6, 5\n(9) - (5) = 4, left: ((10 - 1) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 - 1) - 5)) = 24\nreach 24! expression: (6 * ((10 - 1) - 5))"}, {"input": "6 5 10 1\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 6, 10\n(6) / (6) = 1, left: (6 / (5 + 1)) = 1, 10\nroll back, left: (5 + 1) = 6, 6, 10\n(6) + (6) = 12, left: (6 + (5 + 1)) = 12, 10\n(10) + (12) = 22, left: (10 + (6 + (5 + 1))) = 22\nroll back, left: (6 + (5 + 1)) = 12, 10\nroll back, left: (5 + 1) = 6, 6, 10\n(10) - (6) = 4, left: (10 - (5 + 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (10 - (5 + 1))) = 24\nreach 24! expression: (6 * (10 - (5 + 1)))"}, {"input": "6 5 10 1\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 5, 1\nroll back, left: 6 5 10 1\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, 5, 1\n(5) / (1) = 5, left: (5 / 1) = 5, (10 / 6) = 5/3\nroll back, left: (10 / 6) = 5/3, 5, 1\nroll back, left: 6 5 10 1\n(10) - (6) = 4, left: (10 - 6) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (10 - 6) = 4\n(4) * (6) = 24, left: ((10 - 6) * (5 + 1)) = 24\nreach 24! expression: ((10 - 6) * (5 + 1))"}, {"input": "6 5 10 1\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 10, 1\nroll back, left: 6 5 10 1\n(6) / (10) = 3/5, left: (6 / 10) = 3/5, 5, 1\n(1) * (3/5) = 3/5, left: (1 * (6 / 10)) = 3/5, 5\nroll back, left: (6 / 10) = 3/5, 5, 1\nroll back, left: 6 5 10 1\n(10) - (6) = 4, left: (10 - 6) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (10 - 6) = 4\n(4) * (6) = 24, left: ((10 - 6) * (5 + 1)) = 24\nreach 24! expression: ((10 - 6) * (5 + 1))"}, {"input": "6 5 10 1\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (6 - 10) = -4\nroll back, left: (6 - 10) = -4, 5, 1\nroll back, left: 6 5 10 1\n(6) * (10) = 60, left: (6 * 10) = 60, 5, 1\nroll back, left: 6 5 10 1\n(10) - (6) = 4, left: (10 - 6) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (10 - 6) = 4\n(4) * (6) = 24, left: ((10 - 6) * (5 + 1)) = 24\nreach 24! expression: ((10 - 6) * (5 + 1))"}, {"input": "6 5 10 1\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 5, 10\nroll back, left: 6 5 10 1\n(1) - (10) = -9, left: (1 - 10) = -9, 6, 5\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, (1 - 10) = -9\nroll back, left: (1 - 10) = -9, 6, 5\nroll back, left: 6 5 10 1\n(10) - (1) = 9, left: (10 - 1) = 9, 6, 5\n(9) - (5) = 4, left: ((10 - 1) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 - 1) - 5)) = 24\nreach 24! expression: (6 * ((10 - 1) - 5))"}, {"input": "5 12 6 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 12, 6\n(12) / (3) = 4, left: (12 / (8 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (12 / (8 - 5))) = 24\nreach 24! expression: (6 * (12 / (8 - 5)))"}, {"input": "5 12 6 8\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 5, 8\n(5) - (2) = 3, left: (5 - (12 / 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (12 / 6))) = 24\nreach 24! expression: (8 * (5 - (12 / 6)))"}, {"input": "5 12 6 8\n", "output": "(12) + (8) = 20, left: (12 + 8) = 20, 5, 6\n(20) / (5) = 4, left: ((12 + 8) / 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 + 8) / 5)) = 24\nreach 24! expression: (6 * ((12 + 8) / 5))"}, {"input": "5 12 6 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 12, 6\n(3) / (12) = 1/4, left: ((8 - 5) / 12) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((8 - 5) / 12)) = 24\nreach 24! expression: (6 / ((8 - 5) / 12))"}, {"input": "5 12 6 8\n", "output": "(5) - (12) = -7, left: (5 - 12) = -7, 6, 8\nroll back, left: 5 12 6 8\n(6) + (8) = 14, left: (6 + 8) = 14, 5, 12\nroll back, left: 5 12 6 8\n(8) - (6) = 2, left: (8 - 6) = 2, 5, 12\nroll back, left: 5 12 6 8\n(8) - (5) = 3, left: (8 - 5) = 3, 12, 6\n(3) / (12) = 1/4, left: ((8 - 5) / 12) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((8 - 5) / 12)) = 24\nreach 24! expression: (6 / ((8 - 5) / 12))"}, {"input": "5 12 6 8\n", "output": "(12) + (6) = 18, left: (12 + 6) = 18, 5, 8\n(8) * (18) = 144, left: (8 * (12 + 6)) = 144, 5\nroll back, left: (12 + 6) = 18, 5, 8\nroll back, left: 5 12 6 8\n(12) / (6) = 2, left: (12 / 6) = 2, 5, 8\n(5) - (8) = -3, left: (5 - 8) = -3, (12 / 6) = 2\nroll back, left: (12 / 6) = 2, 5, 8\n(5) - (2) = 3, left: (5 - (12 / 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (12 / 6))) = 24\nreach 24! expression: (8 * (5 - (12 / 6)))"}, {"input": "5 12 6 8\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 5, 8\n(5) - (8) = -3, left: (5 - 8) = -3, (6 - 12) = -6\nroll back, left: (6 - 12) = -6, 5, 8\nroll back, left: 5 12 6 8\n(12) / (6) = 2, left: (12 / 6) = 2, 5, 8\n(5) * (2) = 10, left: (5 * (12 / 6)) = 10, 8\nroll back, left: (12 / 6) = 2, 5, 8\n(5) - (2) = 3, left: (5 - (12 / 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 - (12 / 6))) = 24\nreach 24! expression: (8 * (5 - (12 / 6)))"}, {"input": "5 12 6 8\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 5, 12\n(12) / (3/4) = 16, left: (12 / (6 / 8)) = 16, 5\nroll back, left: (6 / 8) = 3/4, 5, 12\nroll back, left: 5 12 6 8\n(6) * (8) = 48, left: (6 * 8) = 48, 5, 12\nroll back, left: 5 12 6 8\n(12) + (8) = 20, left: (12 + 8) = 20, 5, 6\n(20) / (5) = 4, left: ((12 + 8) / 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 + 8) / 5)) = 24\nreach 24! expression: (6 * ((12 + 8) / 5))"}, {"input": "5 12 6 8\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 12, 6\nroll back, left: 5 12 6 8\n(5) - (8) = -3, left: (5 - 8) = -3, 12, 6\n(12) + (-3) = 9, left: (12 + (5 - 8)) = 9, 6\nroll back, left: (5 - 8) = -3, 12, 6\nroll back, left: 5 12 6 8\n(8) - (5) = 3, left: (8 - 5) = 3, 12, 6\n(12) / (3) = 4, left: (12 / (8 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (12 / (8 - 5))) = 24\nreach 24! expression: (6 * (12 / (8 - 5)))"}, {"input": "8 8 1 3\n", "output": "(8) + (1) = 9, left: (8 + 1) = 9, 8, 3\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, (8 + 1) = 9\n(9) / (3/8) = 24, left: ((8 + 1) / (3 / 8)) = 24\nreach 24! expression: ((8 + 1) / (3 / 8))"}, {"input": "8 8 1 3\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 8, 1\n(8) + (1) = 9, left: (8 + 1) = 9, (8 / 3) = 8/3\n(8/3) * (9) = 24, left: ((8 / 3) * (8 + 1)) = 24\nreach 24! expression: ((8 / 3) * (8 + 1))"}, {"input": "8 8 1 3\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 8, 1\n(8) + (1) = 9, left: (8 + 1) = 9, (3 / 8) = 3/8\n(9) / (3/8) = 24, left: ((8 + 1) / (3 / 8)) = 24\nreach 24! expression: ((8 + 1) / (3 / 8))"}, {"input": "8 8 1 3\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 1, 3\nroll back, left: 8 8 1 3\n(8) - (8) = 0, left: (8 - 8) = 0, 1, 3\nroll back, left: 8 8 1 3\n(8) - (1) = 7, left: (8 - 1) = 7, 8, 3\nroll back, left: 8 8 1 3\n(8) + (1) = 9, left: (8 + 1) = 9, 8, 3\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, (8 + 1) = 9\n(9) / (3/8) = 24, left: ((8 + 1) / (3 / 8)) = 24\nreach 24! expression: ((8 + 1) / (3 / 8))"}, {"input": "8 8 1 3\n", "output": "(8) * (8) = 64, left: (8 * 8) = 64, 1, 3\nroll back, left: 8 8 1 3\n(8) * (3) = 24, left: (8 * 3) = 24, 8, 1\n(8) / (1) = 8, left: (8 / 1) = 8, (8 * 3) = 24\nroll back, left: (8 * 3) = 24, 8, 1\nroll back, left: 8 8 1 3\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, 8, 1\n(8) + (1) = 9, left: (8 + 1) = 9, (3 / 8) = 3/8\n(9) / (3/8) = 24, left: ((8 + 1) / (3 / 8)) = 24\nreach 24! expression: ((8 + 1) / (3 / 8))"}, {"input": "8 8 1 3\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 8, 1\nroll back, left: 8 8 1 3\n(8) * (3) = 24, left: (8 * 3) = 24, 8, 1\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, (8 * 3) = 24\nroll back, left: (8 * 3) = 24, 8, 1\nroll back, left: 8 8 1 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 8, 1\n(8) + (1) = 9, left: (8 + 1) = 9, (8 / 3) = 8/3\n(8/3) * (9) = 24, left: ((8 / 3) * (8 + 1)) = 24\nreach 24! expression: ((8 / 3) * (8 + 1))"}, {"input": "2 2 3 2\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 3, 2\n(3) * (4) = 12, left: (3 * (2 * 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 * (2 * 2))) = 24\nreach 24! expression: (2 * (3 * (2 * 2)))"}, {"input": "2 2 3 2\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 2, 2\n(2) * (6) = 12, left: (2 * (2 * 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 * (2 * 3))) = 24\nreach 24! expression: (2 * (2 * (2 * 3)))"}, {"input": "2 2 3 2\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (2 * 2) = 4\n(4) * (6) = 24, left: ((2 * 2) * (2 * 3)) = 24\nreach 24! expression: ((2 * 2) * (2 * 3))"}, {"input": "2 2 3 2\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (2 * 3) = 6\n(6) * (4) = 24, left: ((2 * 3) * (2 * 2)) = 24\nreach 24! expression: ((2 * 3) * (2 * 2))"}, {"input": "2 2 3 2\n", "output": "(3) * (2) = 6, left: (3 * 2) = 6, 2, 2\n(2) * (6) = 12, left: (2 * (3 * 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 * (3 * 2))) = 24\nreach 24! expression: (2 * (2 * (3 * 2)))"}, {"input": "2 2 3 2\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 3, 2\nroll back, left: 2 2 3 2\n(2) / (2) = 1, left: (2 / 2) = 1, 3, 2\n(3) * (2) = 6, left: (3 * 2) = 6, (2 / 2) = 1\nroll back, left: (2 / 2) = 1, 3, 2\nroll back, left: 2 2 3 2\n(2) * (2) = 4, left: (2 * 2) = 4, 3, 2\n(3) * (4) = 12, left: (3 * (2 * 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 * (2 * 2))) = 24\nreach 24! expression: (2 * (3 * (2 * 2)))"}, {"input": "2 2 3 2\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 2, 2\nroll back, left: 2 2 3 2\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 2, 2\n(2) - (2) = 0, left: (2 - 2) = 0, (2 / 3) = 2/3\nroll back, left: (2 / 3) = 2/3, 2, 2\nroll back, left: 2 2 3 2\n(3) * (2) = 6, left: (3 * 2) = 6, 2, 2\n(2) * (6) = 12, left: (2 * (3 * 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 * (3 * 2))) = 24\nreach 24! expression: (2 * (2 * (3 * 2)))"}, {"input": "2 2 3 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 2, 2\n(2) * (1) = 2, left: (2 * (3 - 2)) = 2, 2\nroll back, left: (3 - 2) = 1, 2, 2\nroll back, left: 2 2 3 2\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 2, 2\nroll back, left: 2 2 3 2\n(2) * (3) = 6, left: (2 * 3) = 6, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (2 * 3) = 6\n(6) * (4) = 24, left: ((2 * 3) * (2 * 2)) = 24\nreach 24! expression: ((2 * 3) * (2 * 2))"}, {"input": "2 2 3 2\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 2, 2\n(2) / (2) = 1, left: (2 / 2) = 1, (3 / 2) = 3/2\nroll back, left: (3 / 2) = 3/2, 2, 2\n(2) - (3/2) = 1/2, left: (2 - (3 / 2)) = 1/2, 2\nroll back, left: (3 / 2) = 3/2, 2, 2\nroll back, left: 2 2 3 2\n(2) * (3) = 6, left: (2 * 3) = 6, 2, 2\n(2) * (6) = 12, left: (2 * (2 * 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 * (2 * 3))) = 24\nreach 24! expression: (2 * (2 * (2 * 3)))"}, {"input": "2 2 3 2\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 2, 3\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, (2 * 2) = 4\nroll back, left: (2 * 2) = 4, 2, 3\n(2) + (3) = 5, left: (2 + 3) = 5, (2 * 2) = 4\n(5) / (4) = 5/4, left: ((2 + 3) / (2 * 2)) = 5/4\nroll back, left: (2 + 3) = 5, (2 * 2) = 4\nroll back, left: (2 * 2) = 4, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (2 * 2) = 4\n(4) * (6) = 24, left: ((2 * 2) * (2 * 3)) = 24\nreach 24! expression: ((2 * 2) * (2 * 3))"}, {"input": "8 4 9 6\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 9, 6\n(9) / (1/2) = 18, left: (9 / (4 / 8)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 / (4 / 8))) = 24\nreach 24! expression: (6 + (9 / (4 / 8)))"}, {"input": "8 4 9 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 8, 9\n(9) - (8) = 1, left: (9 - 8) = 1, (4 * 6) = 24\n(24) / (1) = 24, left: ((4 * 6) / (9 - 8)) = 24\nreach 24! expression: ((4 * 6) / (9 - 8))"}, {"input": "8 4 9 6\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 9, 6\n(9) * (2) = 18, left: (9 * (8 / 4)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (8 / 4))) = 24\nreach 24! expression: (6 + (9 * (8 / 4)))"}, {"input": "8 4 9 6\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 4, 6\n(4) * (6) = 24, left: (4 * 6) = 24, (9 - 8) = 1\n(1) * (24) = 24, left: ((9 - 8) * (4 * 6)) = 24\nreach 24! expression: ((9 - 8) * (4 * 6))"}, {"input": "8 4 9 6\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 8, 4\nroll back, left: 8 4 9 6\n(8) - (4) = 4, left: (8 - 4) = 4, 9, 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, (8 - 4) = 4\nroll back, left: (8 - 4) = 4, 9, 6\nroll back, left: 8 4 9 6\n(8) / (4) = 2, left: (8 / 4) = 2, 9, 6\n(9) * (2) = 18, left: (9 * (8 / 4)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (8 / 4))) = 24\nreach 24! expression: (6 + (9 * (8 / 4)))"}, {"input": "8 4 9 6\n", "output": "(8) + (9) = 17, left: (8 + 9) = 17, 4, 6\nroll back, left: 8 4 9 6\n(8) / (9) = 8/9, left: (8 / 9) = 8/9, 4, 6\nroll back, left: 8 4 9 6\n(8) - (9) = -1, left: (8 - 9) = -1, 4, 6\nroll back, left: 8 4 9 6\n(9) - (8) = 1, left: (9 - 8) = 1, 4, 6\n(4) * (6) = 24, left: (4 * 6) = 24, (9 - 8) = 1\n(1) * (24) = 24, left: ((9 - 8) * (4 * 6)) = 24\nreach 24! expression: ((9 - 8) * (4 * 6))"}, {"input": "8 4 9 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 8, 9\n(8) - (24) = -16, left: (8 - (4 * 6)) = -16, 9\nroll back, left: (4 * 6) = 24, 8, 9\n(8) * (24) = 192, left: (8 * (4 * 6)) = 192, 9\nroll back, left: (4 * 6) = 24, 8, 9\n(8) + (24) = 32, left: (8 + (4 * 6)) = 32, 9\nroll back, left: (4 * 6) = 24, 8, 9\n(9) - (8) = 1, left: (9 - 8) = 1, (4 * 6) = 24\n(24) / (1) = 24, left: ((4 * 6) / (9 - 8)) = 24\nreach 24! expression: ((4 * 6) / (9 - 8))"}, {"input": "8 4 9 6\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 9, 6\n(9) - (4) = 5, left: (9 - (8 - 4)) = 5, 6\nroll back, left: (8 - 4) = 4, 9, 6\n(6) * (4) = 24, left: (6 * (8 - 4)) = 24, 9\nroll back, left: (8 - 4) = 4, 9, 6\nroll back, left: 8 4 9 6\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, 9, 6\n(9) / (1/2) = 18, left: (9 / (4 / 8)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 / (4 / 8))) = 24\nreach 24! expression: (6 + (9 / (4 / 8)))"}, {"input": "8 4 9 6\n", "output": "(4) + (6) = 10, left: (4 + 6) = 10, 8, 9\nroll back, left: 8 4 9 6\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, 8, 9\n(8) + (9) = 17, left: (8 + 9) = 17, (6 / 4) = 3/2\nroll back, left: (6 / 4) = 3/2, 8, 9\nroll back, left: 8 4 9 6\n(4) * (6) = 24, left: (4 * 6) = 24, 8, 9\n(9) - (8) = 1, left: (9 - 8) = 1, (4 * 6) = 24\n(24) / (1) = 24, left: ((4 * 6) / (9 - 8)) = 24\nreach 24! expression: ((4 * 6) / (9 - 8))"}, {"input": "5 13 10 1\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 5, 10\n(10) * (12) = 120, left: (10 * (13 - 1)) = 120, 5\n(120) / (5) = 24, left: ((10 * (13 - 1)) / 5) = 24\nreach 24! expression: ((10 * (13 - 1)) / 5)"}, {"input": "5 13 10 1\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 13, 1\n(13) - (1) = 12, left: (13 - 1) = 12, (5 / 10) = 1/2\n(12) / (1/2) = 24, left: ((13 - 1) / (5 / 10)) = 24\nreach 24! expression: ((13 - 1) / (5 / 10))"}, {"input": "5 13 10 1\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 13, 1\n(13) - (1) = 12, left: (13 - 1) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (13 - 1)) = 24\nreach 24! expression: ((10 / 5) * (13 - 1))"}, {"input": "5 13 10 1\n", "output": "(5) * (1) = 5, left: (5 * 1) = 5, 13, 10\nroll back, left: 5 13 10 1\n(5) / (1) = 5, left: (5 / 1) = 5, 13, 10\nroll back, left: 5 13 10 1\n(13) / (5) = 13/5, left: (13 / 5) = 13/5, 10, 1\nroll back, left: 5 13 10 1\n(13) - (1) = 12, left: (13 - 1) = 12, 5, 10\n(10) * (12) = 120, left: (10 * (13 - 1)) = 120, 5\n(120) / (5) = 24, left: ((10 * (13 - 1)) / 5) = 24\nreach 24! expression: ((10 * (13 - 1)) / 5)"}, {"input": "5 13 10 1\n", "output": "(13) * (10) = 130, left: (13 * 10) = 130, 5, 1\nroll back, left: 5 13 10 1\n(5) + (1) = 6, left: (5 + 1) = 6, 13, 10\nroll back, left: 5 13 10 1\n(5) + (10) = 15, left: (5 + 10) = 15, 13, 1\nroll back, left: 5 13 10 1\n(10) / (5) = 2, left: (10 / 5) = 2, 13, 1\n(13) - (1) = 12, left: (13 - 1) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (13 - 1)) = 24\nreach 24! expression: ((10 / 5) * (13 - 1))"}, {"input": "5 13 10 1\n", "output": "(5) * (13) = 65, left: (5 * 13) = 65, 10, 1\nroll back, left: 5 13 10 1\n(13) / (5) = 13/5, left: (13 / 5) = 13/5, 10, 1\nroll back, left: 5 13 10 1\n(5) + (10) = 15, left: (5 + 10) = 15, 13, 1\nroll back, left: 5 13 10 1\n(10) / (5) = 2, left: (10 / 5) = 2, 13, 1\n(13) - (1) = 12, left: (13 - 1) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (13 - 1)) = 24\nreach 24! expression: ((10 / 5) * (13 - 1))"}, {"input": "4 5 6 1\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 4, 1\n(1) - (5/6) = 1/6, left: (1 - (5 / 6)) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / (1 - (5 / 6))) = 24\nreach 24! expression: (4 / (1 - (5 / 6)))"}, {"input": "4 5 6 1\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 6, 1\n(5/4) - (1) = 1/4, left: ((5 / 4) - 1) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((5 / 4) - 1)) = 24\nreach 24! expression: (6 / ((5 / 4) - 1))"}, {"input": "4 5 6 1\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 4, 1\n(1) / (1) = 1, left: ((6 - 5) / 1) = 1, 4\nroll back, left: (6 - 5) = 1, 4, 1\nroll back, left: 4 5 6 1\n(5) * (6) = 30, left: (5 * 6) = 30, 4, 1\nroll back, left: 4 5 6 1\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 4, 1\n(1) - (5/6) = 1/6, left: (1 - (5 / 6)) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / (1 - (5 / 6))) = 24\nreach 24! expression: (4 / (1 - (5 / 6)))"}, {"input": "4 5 6 1\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 5, 1\n(2/3) - (1) = -1/3, left: ((4 / 6) - 1) = -1/3, 5\nroll back, left: (4 / 6) = 2/3, 5, 1\nroll back, left: 4 5 6 1\n(4) * (6) = 24, left: (4 * 6) = 24, 5, 1\nroll back, left: 4 5 6 1\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 6, 1\n(5/4) - (1) = 1/4, left: ((5 / 4) - 1) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((5 / 4) - 1)) = 24\nreach 24! expression: (6 / ((5 / 4) - 1))"}, {"input": "4 5 6 1\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 6, 1\nroll back, left: 4 5 6 1\n(4) + (5) = 9, left: (4 + 5) = 9, 6, 1\n(1) - (6) = -5, left: (1 - 6) = -5, (4 + 5) = 9\nroll back, left: (4 + 5) = 9, 6, 1\nroll back, left: 4 5 6 1\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 6, 1\n(5/4) - (1) = 1/4, left: ((5 / 4) - 1) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((5 / 4) - 1)) = 24\nreach 24! expression: (6 / ((5 / 4) - 1))"}, {"input": "4 5 6 1\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 4, 1\n(1) * (-1) = -1, left: (1 * (5 - 6)) = -1, 4\nroll back, left: (5 - 6) = -1, 4, 1\nroll back, left: 4 5 6 1\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 4, 1\nroll back, left: 4 5 6 1\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 4, 1\n(1) - (5/6) = 1/6, left: (1 - (5 / 6)) = 1/6, 4\n(4) / (1/6) = 24, left: (4 / (1 - (5 / 6))) = 24\nreach 24! expression: (4 / (1 - (5 / 6)))"}, {"input": "4 5 6 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 4, 5\nroll back, left: 4 5 6 1\n(5) * (1) = 5, left: (5 * 1) = 5, 4, 6\n(4) - (5) = -1, left: (4 - (5 * 1)) = -1, 6\nroll back, left: (5 * 1) = 5, 4, 6\nroll back, left: 4 5 6 1\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 6, 1\n(5/4) - (1) = 1/4, left: ((5 / 4) - 1) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((5 / 4) - 1)) = 24\nreach 24! expression: (6 / ((5 / 4) - 1))"}, {"input": "10 8 6 9\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (10 - 8)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (10 - 8))) = 24\nreach 24! expression: (6 + (9 * (10 - 8)))"}, {"input": "10 8 6 9\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 6, 9\n(9) * (-2) = -18, left: (9 * (8 - 10)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (8 - 10))) = 24\nreach 24! expression: (6 - (9 * (8 - 10)))"}, {"input": "10 8 6 9\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 10, 8\nroll back, left: 10 8 6 9\n(10) + (8) = 18, left: (10 + 8) = 18, 6, 9\n(9) / (18) = 1/2, left: (9 / (10 + 8)) = 1/2, 6\nroll back, left: (10 + 8) = 18, 6, 9\nroll back, left: 10 8 6 9\n(8) - (10) = -2, left: (8 - 10) = -2, 6, 9\n(9) * (-2) = -18, left: (9 * (8 - 10)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (8 - 10))) = 24\nreach 24! expression: (6 - (9 * (8 - 10)))"}, {"input": "10 8 6 9\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 10, 8\nroll back, left: 10 8 6 9\n(9) - (8) = 1, left: (9 - 8) = 1, 10, 6\nroll back, left: 10 8 6 9\n(10) + (6) = 16, left: (10 + 6) = 16, 8, 9\nroll back, left: 10 8 6 9\n(10) - (8) = 2, left: (10 - 8) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (10 - 8)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (10 - 8))) = 24\nreach 24! expression: (6 + (9 * (10 - 8)))"}, {"input": "10 8 6 9\n", "output": "(10) + (6) = 16, left: (10 + 6) = 16, 8, 9\nroll back, left: 10 8 6 9\n(10) * (6) = 60, left: (10 * 6) = 60, 8, 9\n(8) * (60) = 480, left: (8 * (10 * 6)) = 480, 9\nroll back, left: (10 * 6) = 60, 8, 9\nroll back, left: 10 8 6 9\n(10) - (8) = 2, left: (10 - 8) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (10 - 8)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (10 - 8))) = 24\nreach 24! expression: (6 + (9 * (10 - 8)))"}, {"input": "10 8 6 9\n", "output": "(10) + (8) = 18, left: (10 + 8) = 18, 6, 9\n(6) - (9) = -3, left: (6 - 9) = -3, (10 + 8) = 18\nroll back, left: (10 + 8) = 18, 6, 9\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, (10 + 8) = 18\nroll back, left: (10 + 8) = 18, 6, 9\nroll back, left: 10 8 6 9\n(10) - (8) = 2, left: (10 - 8) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (10 - 8)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (10 - 8))) = 24\nreach 24! expression: (6 + (9 * (10 - 8)))"}, {"input": "10 8 6 9\n", "output": "(8) / (10) = 4/5, left: (8 / 10) = 4/5, 6, 9\nroll back, left: 10 8 6 9\n(10) + (8) = 18, left: (10 + 8) = 18, 6, 9\n(9) * (18) = 162, left: (9 * (10 + 8)) = 162, 6\nroll back, left: (10 + 8) = 18, 6, 9\nroll back, left: 10 8 6 9\n(10) - (8) = 2, left: (10 - 8) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (10 - 8)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (10 - 8))) = 24\nreach 24! expression: (6 + (9 * (10 - 8)))"}, {"input": "8 7 9 12\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 8, 12\n(12) * (16) = 192, left: (12 * (7 + 9)) = 192, 8\n(192) / (8) = 24, left: ((12 * (7 + 9)) / 8) = 24\nreach 24! expression: ((12 * (7 + 9)) / 8)"}, {"input": "8 7 9 12\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 7, 9\n(7) + (9) = 16, left: (7 + 9) = 16, (12 / 8) = 3/2\n(3/2) * (16) = 24, left: ((12 / 8) * (7 + 9)) = 24\nreach 24! expression: ((12 / 8) * (7 + 9))"}, {"input": "8 7 9 12\n", "output": "(8) / (12) = 2/3, left: (8 / 12) = 2/3, 7, 9\n(7) + (9) = 16, left: (7 + 9) = 16, (8 / 12) = 2/3\n(16) / (2/3) = 24, left: ((7 + 9) / (8 / 12)) = 24\nreach 24! expression: ((7 + 9) / (8 / 12))"}, {"input": "8 7 9 12\n", "output": "(8) / (7) = 8/7, left: (8 / 7) = 8/7, 9, 12\n(9) + (12) = 21, left: (9 + 12) = 21, (8 / 7) = 8/7\n(8/7) * (21) = 24, left: ((8 / 7) * (9 + 12)) = 24\nreach 24! expression: ((8 / 7) * (9 + 12))"}, {"input": "8 7 9 12\n", "output": "(8) - (9) = -1, left: (8 - 9) = -1, 7, 12\n(7) * (-1) = -7, left: (7 * (8 - 9)) = -7, 12\nroll back, left: (8 - 9) = -1, 7, 12\nroll back, left: 8 7 9 12\n(12) - (8) = 4, left: (12 - 8) = 4, 7, 9\nroll back, left: 8 7 9 12\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 7, 9\n(7) + (9) = 16, left: (7 + 9) = 16, (8 / 12) = 2/3\n(16) / (2/3) = 24, left: ((7 + 9) / (8 / 12)) = 24\nreach 24! expression: ((7 + 9) / (8 / 12))"}, {"input": "8 7 9 12\n", "output": "(7) * (9) = 63, left: (7 * 9) = 63, 8, 12\nroll back, left: 8 7 9 12\n(9) / (7) = 9/7, left: (9 / 7) = 9/7, 8, 12\nroll back, left: 8 7 9 12\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, 8, 12\nroll back, left: 8 7 9 12\n(7) + (9) = 16, left: (7 + 9) = 16, 8, 12\n(12) * (16) = 192, left: (12 * (7 + 9)) = 192, 8\n(192) / (8) = 24, left: ((12 * (7 + 9)) / 8) = 24\nreach 24! expression: ((12 * (7 + 9)) / 8)"}, {"input": "8 7 9 12\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 7, 9\n(7) - (9) = -2, left: (7 - 9) = -2, (12 - 8) = 4\nroll back, left: (12 - 8) = 4, 7, 9\n(7) * (9) = 63, left: (7 * 9) = 63, (12 - 8) = 4\nroll back, left: (12 - 8) = 4, 7, 9\nroll back, left: 8 7 9 12\n(12) / (8) = 3/2, left: (12 / 8) = 3/2, 7, 9\n(7) + (9) = 16, left: (7 + 9) = 16, (12 / 8) = 3/2\n(3/2) * (16) = 24, left: ((12 / 8) * (7 + 9)) = 24\nreach 24! expression: ((12 / 8) * (7 + 9))"}, {"input": "8 7 9 12\n", "output": "(9) / (7) = 9/7, left: (9 / 7) = 9/7, 8, 12\n(8) * (9/7) = 72/7, left: (8 * (9 / 7)) = 72/7, 12\nroll back, left: (9 / 7) = 9/7, 8, 12\nroll back, left: 8 7 9 12\n(9) - (7) = 2, left: (9 - 7) = 2, 8, 12\nroll back, left: 8 7 9 12\n(7) + (9) = 16, left: (7 + 9) = 16, 8, 12\n(12) * (16) = 192, left: (12 * (7 + 9)) = 192, 8\n(192) / (8) = 24, left: ((12 * (7 + 9)) / 8) = 24\nreach 24! expression: ((12 * (7 + 9)) / 8)"}, {"input": "11 7 12 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 11, 12\n(12) + (1) = 13, left: (12 + (7 / 7)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (7 / 7))) = 24\nreach 24! expression: (11 + (12 + (7 / 7)))"}, {"input": "11 7 12 7\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (12 - 7)) = 35, 11\n(35) - (11) = 24, left: ((7 * (12 - 7)) - 11) = 24\nreach 24! expression: ((7 * (12 - 7)) - 11)"}, {"input": "11 7 12 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 11, 12\n(11) + (12) = 23, left: (11 + 12) = 23, (7 / 7) = 1\n(1) + (23) = 24, left: ((7 / 7) + (11 + 12)) = 24\nreach 24! expression: ((7 / 7) + (11 + 12))"}, {"input": "11 7 12 7\n", "output": "(11) + (12) = 23, left: (11 + 12) = 23, 7, 7\n(7) / (7) = 1, left: (7 / 7) = 1, (11 + 12) = 23\n(23) + (1) = 24, left: ((11 + 12) + (7 / 7)) = 24\nreach 24! expression: ((11 + 12) + (7 / 7))"}, {"input": "11 7 12 7\n", "output": "(12) * (7) = 84, left: (12 * 7) = 84, 11, 7\nroll back, left: 11 7 12 7\n(7) / (12) = 7/12, left: (7 / 12) = 7/12, 11, 7\nroll back, left: 11 7 12 7\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, 11, 7\nroll back, left: 11 7 12 7\n(12) - (7) = 5, left: (12 - 7) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (12 - 7)) = 35, 11\n(35) - (11) = 24, left: ((7 * (12 - 7)) - 11) = 24\nreach 24! expression: ((7 * (12 - 7)) - 11)"}, {"input": "11 7 12 7\n", "output": "(7) - (7) = 0, left: (7 - 7) = 0, 11, 12\n(0) - (11) = -11, left: ((7 - 7) - 11) = -11, 12\n(12) + (-11) = 1, left: (12 + ((7 - 7) - 11)) = 1\nroll back, left: ((7 - 7) - 11) = -11, 12\nroll back, left: (7 - 7) = 0, 11, 12\nroll back, left: 11 7 12 7\n(7) / (7) = 1, left: (7 / 7) = 1, 11, 12\n(12) + (1) = 13, left: (12 + (7 / 7)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (7 / 7))) = 24\nreach 24! expression: (11 + (12 + (7 / 7)))"}, {"input": "11 7 12 7\n", "output": "(7) / (11) = 7/11, left: (7 / 11) = 7/11, 12, 7\nroll back, left: 11 7 12 7\n(7) - (11) = -4, left: (7 - 11) = -4, 12, 7\n(12) * (-4) = -48, left: (12 * (7 - 11)) = -48, 7\nroll back, left: (7 - 11) = -4, 12, 7\nroll back, left: 11 7 12 7\n(7) / (7) = 1, left: (7 / 7) = 1, 11, 12\n(11) + (12) = 23, left: (11 + 12) = 23, (7 / 7) = 1\n(1) + (23) = 24, left: ((7 / 7) + (11 + 12)) = 24\nreach 24! expression: ((7 / 7) + (11 + 12))"}, {"input": "11 7 12 7\n", "output": "(11) * (7) = 77, left: (11 * 7) = 77, 7, 12\nroll back, left: 11 7 12 7\n(7) * (12) = 84, left: (7 * 12) = 84, 11, 7\nroll back, left: 11 7 12 7\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, 11, 7\nroll back, left: 11 7 12 7\n(12) - (7) = 5, left: (12 - 7) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (12 - 7)) = 35, 11\n(35) - (11) = 24, left: ((7 * (12 - 7)) - 11) = 24\nreach 24! expression: ((7 * (12 - 7)) - 11)"}, {"input": "11 1 8 7\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 1, 7\n(1) + (7) = 8, left: (1 + 7) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (1 + 7)) = 24\nreach 24! expression: ((11 - 8) * (1 + 7))"}, {"input": "11 1 8 7\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 1, 8\n(4) - (1) = 3, left: ((11 - 7) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 7) - 1)) = 24\nreach 24! expression: (8 * ((11 - 7) - 1))"}, {"input": "11 1 8 7\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 8, 7\n(10) - (7) = 3, left: ((11 - 1) - 7) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 1) - 7)) = 24\nreach 24! expression: (8 * ((11 - 1) - 7))"}, {"input": "11 1 8 7\n", "output": "(11) * (8) = 88, left: (11 * 8) = 88, 1, 7\n(7) * (88) = 616, left: (7 * (11 * 8)) = 616, 1\nroll back, left: (11 * 8) = 88, 1, 7\nroll back, left: 11 1 8 7\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, 1, 7\nroll back, left: 11 1 8 7\n(11) - (8) = 3, left: (11 - 8) = 3, 1, 7\n(1) + (7) = 8, left: (1 + 7) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (1 + 7)) = 24\nreach 24! expression: ((11 - 8) * (1 + 7))"}, {"input": "11 1 8 7\n", "output": "(1) / (11) = 1/11, left: (1 / 11) = 1/11, 8, 7\nroll back, left: 11 1 8 7\n(11) + (1) = 12, left: (11 + 1) = 12, 8, 7\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, (11 + 1) = 12\nroll back, left: (11 + 1) = 12, 8, 7\nroll back, left: 11 1 8 7\n(11) - (1) = 10, left: (11 - 1) = 10, 8, 7\n(10) - (7) = 3, left: ((11 - 1) - 7) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 1) - 7)) = 24\nreach 24! expression: (8 * ((11 - 1) - 7))"}, {"input": "11 1 8 7\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 1, 8\n(1) - (4) = -3, left: (1 - (11 - 7)) = -3, 8\n(8) + (-3) = 5, left: (8 + (1 - (11 - 7))) = 5\nroll back, left: (1 - (11 - 7)) = -3, 8\n(8) / (-3) = -8/3, left: (8 / (1 - (11 - 7))) = -8/3\nroll back, left: (1 - (11 - 7)) = -3, 8\nroll back, left: (11 - 7) = 4, 1, 8\n(4) - (1) = 3, left: ((11 - 7) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 7) - 1)) = 24\nreach 24! expression: (8 * ((11 - 7) - 1))"}, {"input": "11 1 8 7\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 1, 7\n(1) / (3) = 1/3, left: (1 / (11 - 8)) = 1/3, 7\nroll back, left: (11 - 8) = 3, 1, 7\n(7) + (3) = 10, left: (7 + (11 - 8)) = 10, 1\nroll back, left: (11 - 8) = 3, 1, 7\n(3) / (7) = 3/7, left: ((11 - 8) / 7) = 3/7, 1\nroll back, left: (11 - 8) = 3, 1, 7\n(1) + (7) = 8, left: (1 + 7) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (1 + 7)) = 24\nreach 24! expression: ((11 - 8) * (1 + 7))"}, {"input": "11 1 8 7\n", "output": "(11) / (7) = 11/7, left: (11 / 7) = 11/7, 1, 8\nroll back, left: 11 1 8 7\n(7) - (11) = -4, left: (7 - 11) = -4, 1, 8\nroll back, left: 11 1 8 7\n(11) - (7) = 4, left: (11 - 7) = 4, 1, 8\n(1) - (8) = -7, left: (1 - 8) = -7, (11 - 7) = 4\nroll back, left: (11 - 7) = 4, 1, 8\n(4) - (1) = 3, left: ((11 - 7) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 7) - 1)) = 24\nreach 24! expression: (8 * ((11 - 7) - 1))"}, {"input": "13 4 4 7\n", "output": "(4) * (7) = 28, left: (4 * 7) = 28, 13, 4\n(13) * (4) = 52, left: (13 * 4) = 52, (4 * 7) = 28\n(52) - (28) = 24, left: ((13 * 4) - (4 * 7)) = 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "13 4 4 7\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 13, 7\nroll back, left: 13 4 4 7\n(7) / (13) = 7/13, left: (7 / 13) = 7/13, 4, 4\nroll back, left: 13 4 4 7\n(13) + (7) = 20, left: (13 + 7) = 20, 4, 4\nroll back, left: 13 4 4 7\n(4) * (7) = 28, left: (4 * 7) = 28, 13, 4\n(13) * (4) = 52, left: (13 * 4) = 52, (4 * 7) = 28\n(52) - (28) = 24, left: ((13 * 4) - (4 * 7)) = 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "13 4 4 7\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 13, 4\nroll back, left: 13 4 4 7\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, 13, 4\n(4) + (4/7) = 32/7, left: (4 + (4 / 7)) = 32/7, 13\nroll back, left: (4 / 7) = 4/7, 13, 4\nroll back, left: 13 4 4 7\n(4) * (7) = 28, left: (4 * 7) = 28, 13, 4\n(13) * (4) = 52, left: (13 * 4) = 52, (4 * 7) = 28\n(52) - (28) = 24, left: ((13 * 4) - (4 * 7)) = 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "13 4 4 7\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 13, 7\nroll back, left: 13 4 4 7\n(4) / (4) = 1, left: (4 / 4) = 1, 13, 7\n(1) / (7) = 1/7, left: ((4 / 4) / 7) = 1/7, 13\nroll back, left: (4 / 4) = 1, 13, 7\nroll back, left: 13 4 4 7\n(4) * (7) = 28, left: (4 * 7) = 28, 13, 4\n(13) * (4) = 52, left: (13 * 4) = 52, (4 * 7) = 28\n(52) - (28) = 24, left: ((13 * 4) - (4 * 7)) = 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "13 4 4 7\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 13, 7\n(13) / (7) = 13/7, left: (13 / 7) = 13/7, (4 / 4) = 1\nroll back, left: (4 / 4) = 1, 13, 7\nroll back, left: 13 4 4 7\n(4) / (4) = 1, left: (4 / 4) = 1, 13, 7\nroll back, left: 13 4 4 7\n(4) * (7) = 28, left: (4 * 7) = 28, 13, 4\n(13) * (4) = 52, left: (13 * 4) = 52, (4 * 7) = 28\n(52) - (28) = 24, left: ((13 * 4) - (4 * 7)) = 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "13 4 4 7\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 13, 4\n(-3) / (4) = -3/4, left: ((4 - 7) / 4) = -3/4, 13\nroll back, left: (4 - 7) = -3, 13, 4\n(-3) - (4) = -7, left: ((4 - 7) - 4) = -7, 13\nroll back, left: (4 - 7) = -3, 13, 4\nroll back, left: 13 4 4 7\n(4) * (7) = 28, left: (4 * 7) = 28, 13, 4\n(13) * (4) = 52, left: (13 * 4) = 52, (4 * 7) = 28\n(52) - (28) = 24, left: ((13 * 4) - (4 * 7)) = 24\nreach 24! expression: ((13 * 4) - (4 * 7))"}, {"input": "3 4 10 8\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 3, 10\n(10) - (2) = 8, left: (10 - (8 / 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (8 / 4))) = 24\nreach 24! expression: (3 * (10 - (8 / 4)))"}, {"input": "3 4 10 8\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 3, 8\n(6) - (3) = 3, left: ((10 - 4) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 - 4) - 3)) = 24\nreach 24! expression: (8 * ((10 - 4) - 3))"}, {"input": "3 4 10 8\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 4, 8\n(7) - (4) = 3, left: ((10 - 3) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 - 3) - 4)) = 24\nreach 24! expression: (8 * ((10 - 3) - 4))"}, {"input": "3 4 10 8\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 10, 8\n(10) - (8) = 2, left: (10 - 8) = 2, (3 * 4) = 12\n(12) * (2) = 24, left: ((3 * 4) * (10 - 8)) = 24\nreach 24! expression: ((3 * 4) * (10 - 8))"}, {"input": "3 4 10 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 4, 10\nroll back, left: 3 4 10 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 4, 10\nroll back, left: 3 4 10 8\n(3) * (4) = 12, left: (3 * 4) = 12, 10, 8\n(12) / (8) = 3/2, left: ((3 * 4) / 8) = 3/2, 10\nroll back, left: (3 * 4) = 12, 10, 8\n(10) - (8) = 2, left: (10 - 8) = 2, (3 * 4) = 12\n(12) * (2) = 24, left: ((3 * 4) * (10 - 8)) = 24\nreach 24! expression: ((3 * 4) * (10 - 8))"}, {"input": "3 4 10 8\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 4, 8\n(8) - (7) = 1, left: (8 - (10 - 3)) = 1, 4\nroll back, left: (10 - 3) = 7, 4, 8\n(7) - (8) = -1, left: ((10 - 3) - 8) = -1, 4\nroll back, left: (10 - 3) = 7, 4, 8\n(8) / (4) = 2, left: (8 / 4) = 2, (10 - 3) = 7\nroll back, left: (10 - 3) = 7, 4, 8\n(7) - (4) = 3, left: ((10 - 3) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 - 3) - 4)) = 24\nreach 24! expression: (8 * ((10 - 3) - 4))"}, {"input": "3 4 10 8\n", "output": "(3) + (10) = 13, left: (3 + 10) = 13, 4, 8\nroll back, left: 3 4 10 8\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, 4, 8\n(4) * (10/3) = 40/3, left: (4 * (10 / 3)) = 40/3, 8\nroll back, left: (10 / 3) = 10/3, 4, 8\nroll back, left: 3 4 10 8\n(10) - (3) = 7, left: (10 - 3) = 7, 4, 8\n(7) - (4) = 3, left: ((10 - 3) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 - 3) - 4)) = 24\nreach 24! expression: (8 * ((10 - 3) - 4))"}, {"input": "3 4 10 8\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 3, 8\n(3) / (8) = 3/8, left: (3 / 8) = 3/8, (4 - 10) = -6\nroll back, left: (4 - 10) = -6, 3, 8\n(8) / (-6) = -4/3, left: (8 / (4 - 10)) = -4/3, 3\nroll back, left: (4 - 10) = -6, 3, 8\nroll back, left: 3 4 10 8\n(10) - (4) = 6, left: (10 - 4) = 6, 3, 8\n(6) - (3) = 3, left: ((10 - 4) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 - 4) - 3)) = 24\nreach 24! expression: (8 * ((10 - 4) - 3))"}, {"input": "3 4 10 8\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 3, 10\n(2) - (3) = -1, left: ((8 / 4) - 3) = -1, 10\nroll back, left: (8 / 4) = 2, 3, 10\n(2) / (10) = 1/5, left: ((8 / 4) / 10) = 1/5, 3\n(3) * (1/5) = 3/5, left: (3 * ((8 / 4) / 10)) = 3/5\nroll back, left: ((8 / 4) / 10) = 1/5, 3\nroll back, left: (8 / 4) = 2, 3, 10\n(10) - (2) = 8, left: (10 - (8 / 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (8 / 4))) = 24\nreach 24! expression: (3 * (10 - (8 / 4)))"}, {"input": "3 6 13 11\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 3, 6\n(6) + (2) = 8, left: (6 + (13 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (13 - 11))) = 24\nreach 24! expression: (3 * (6 + (13 - 11)))"}, {"input": "3 6 13 11\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 3, 6\n(6) - (-2) = 8, left: (6 - (11 - 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (11 - 13))) = 24\nreach 24! expression: (3 * (6 - (11 - 13)))"}, {"input": "3 6 13 11\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 3, 13\n(13) - (5) = 8, left: (13 - (11 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (11 - 6))) = 24\nreach 24! expression: (3 * (13 - (11 - 6)))"}, {"input": "3 6 13 11\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 3, 13\n(13) + (-5) = 8, left: (13 + (6 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 + (6 - 11))) = 24\nreach 24! expression: (3 * (13 + (6 - 11)))"}, {"input": "3 6 13 11\n", "output": "(13) - (3) = 10, left: (13 - 3) = 10, 6, 11\nroll back, left: 3 6 13 11\n(3) * (13) = 39, left: (3 * 13) = 39, 6, 11\nroll back, left: 3 6 13 11\n(3) - (13) = -10, left: (3 - 13) = -10, 6, 11\nroll back, left: 3 6 13 11\n(11) - (13) = -2, left: (11 - 13) = -2, 3, 6\n(6) - (-2) = 8, left: (6 - (11 - 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (11 - 13))) = 24\nreach 24! expression: (3 * (6 - (11 - 13)))"}, {"input": "3 6 13 11\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 13, 11\n(18) - (13) = 5, left: ((3 * 6) - 13) = 5, 11\nroll back, left: (3 * 6) = 18, 13, 11\nroll back, left: 3 6 13 11\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 13, 11\nroll back, left: 3 6 13 11\n(11) - (13) = -2, left: (11 - 13) = -2, 3, 6\n(6) - (-2) = 8, left: (6 - (11 - 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (11 - 13))) = 24\nreach 24! expression: (3 * (6 - (11 - 13)))"}, {"input": "9 12 10 12\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 12, 12\n(12) / (-1) = -12, left: (12 / (9 - 10)) = -12, 12\n(12) - (-12) = 24, left: (12 - (12 / (9 - 10))) = 24\nreach 24! expression: (12 - (12 / (9 - 10)))"}, {"input": "9 12 10 12\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 12, 12\n(12) * (-1) = -12, left: (12 * (9 - 10)) = -12, 12\n(12) - (-12) = 24, left: (12 - (12 * (9 - 10))) = 24\nreach 24! expression: (12 - (12 * (9 - 10)))"}, {"input": "9 12 10 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 9, 10\n(10) - (9) = 1, left: (10 - 9) = 1, (12 + 12) = 24\n(24) / (1) = 24, left: ((12 + 12) / (10 - 9)) = 24\nreach 24! expression: ((12 + 12) / (10 - 9))"}, {"input": "9 12 10 12\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 12, 12\n(12) / (1) = 12, left: (12 / (10 - 9)) = 12, 12\n(12) + (12) = 24, left: (12 + (12 / (10 - 9))) = 24\nreach 24! expression: (12 + (12 / (10 - 9)))"}, {"input": "9 12 10 12\n", "output": "(10) + (12) = 22, left: (10 + 12) = 22, 9, 12\nroll back, left: 9 12 10 12\n(12) * (10) = 120, left: (12 * 10) = 120, 9, 12\nroll back, left: 9 12 10 12\n(12) - (10) = 2, left: (12 - 10) = 2, 9, 12\nroll back, left: 9 12 10 12\n(9) - (10) = -1, left: (9 - 10) = -1, 12, 12\n(12) * (-1) = -12, left: (12 * (9 - 10)) = -12, 12\n(12) - (-12) = 24, left: (12 - (12 * (9 - 10))) = 24\nreach 24! expression: (12 - (12 * (9 - 10)))"}, {"input": "5 5 4 7\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (5 / 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (5 / 5))) = 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 5, 4\n(4) * (5/7) = 20/7, left: (4 * (5 / 7)) = 20/7, 5\nroll back, left: (5 / 7) = 5/7, 5, 4\nroll back, left: 5 5 4 7\n(5) * (4) = 20, left: (5 * 4) = 20, 5, 7\nroll back, left: 5 5 4 7\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (5 / 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (5 / 5))) = 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 5, 7\nroll back, left: 5 5 4 7\n(5) + (4) = 9, left: (5 + 4) = 9, 5, 7\nroll back, left: 5 5 4 7\n(5) - (5) = 0, left: (5 - 5) = 0, 4, 7\nroll back, left: 5 5 4 7\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (5 / 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (5 / 5))) = 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 5, 5\n(5) + (5) = 10, left: (5 + 5) = 10, (4 / 7) = 4/7\nroll back, left: (4 / 7) = 4/7, 5, 5\nroll back, left: 5 5 4 7\n(4) + (7) = 11, left: (4 + 7) = 11, 5, 5\nroll back, left: 5 5 4 7\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (5 / 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (5 / 5))) = 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 5, 4\n(5) + (2) = 7, left: (5 + (7 - 5)) = 7, 4\nroll back, left: (7 - 5) = 2, 5, 4\nroll back, left: 5 5 4 7\n(5) + (5) = 10, left: (5 + 5) = 10, 4, 7\nroll back, left: 5 5 4 7\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (5 / 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (5 / 5))) = 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 5 4 7\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 5, 4\nroll back, left: 5 5 4 7\n(7) / (5) = 7/5, left: (7 / 5) = 7/5, 5, 4\n(5) + (4) = 9, left: (5 + 4) = 9, (7 / 5) = 7/5\nroll back, left: (7 / 5) = 7/5, 5, 4\nroll back, left: 5 5 4 7\n(5) / (5) = 1, left: (5 / 5) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (5 / 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (5 / 5))) = 24\nreach 24! expression: (4 * (7 - (5 / 5)))"}, {"input": "5 2 5 13\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (5 - 2) = 3\n(3) * (8) = 24, left: ((5 - 2) * (13 - 5)) = 24\nreach 24! expression: ((5 - 2) * (13 - 5))"}, {"input": "5 2 5 13\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 5, 13\n(5) - (13) = -8, left: (5 - 13) = -8, (2 - 5) = -3\n(-3) * (-8) = 24, left: ((2 - 5) * (5 - 13)) = 24\nreach 24! expression: ((2 - 5) * (5 - 13))"}, {"input": "5 2 5 13\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 5, 2\n(5) - (2) = 3, left: (5 - 2) = 3, (13 - 5) = 8\n(8) * (3) = 24, left: ((13 - 5) * (5 - 2)) = 24\nreach 24! expression: ((13 - 5) * (5 - 2))"}, {"input": "5 2 5 13\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 5, 2\n(2) - (5) = -3, left: (2 - 5) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (2 - 5)) = 24\nreach 24! expression: ((5 - 13) * (2 - 5))"}, {"input": "5 2 5 13\n", "output": "(5) + (2) = 7, left: (5 + 2) = 7, 5, 13\nroll back, left: 5 2 5 13\n(5) * (2) = 10, left: (5 * 2) = 10, 5, 13\n(5) / (13) = 5/13, left: (5 / 13) = 5/13, (5 * 2) = 10\nroll back, left: (5 * 2) = 10, 5, 13\nroll back, left: 5 2 5 13\n(5) - (2) = 3, left: (5 - 2) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (5 - 2) = 3\n(3) * (8) = 24, left: ((5 - 2) * (13 - 5)) = 24\nreach 24! expression: ((5 - 2) * (13 - 5))"}, {"input": "5 2 5 13\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 5, 2\n(5) / (-8) = -5/8, left: (5 / (5 - 13)) = -5/8, 2\nroll back, left: (5 - 13) = -8, 5, 2\n(-8) / (2) = -4, left: ((5 - 13) / 2) = -4, 5\nroll back, left: (5 - 13) = -8, 5, 2\n(-8) - (2) = -10, left: ((5 - 13) - 2) = -10, 5\nroll back, left: (5 - 13) = -8, 5, 2\n(2) - (5) = -3, left: (2 - 5) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (2 - 5)) = 24\nreach 24! expression: ((5 - 13) * (2 - 5))"}, {"input": "5 2 5 13\n", "output": "(5) * (13) = 65, left: (5 * 13) = 65, 5, 2\n(5) + (2) = 7, left: (5 + 2) = 7, (5 * 13) = 65\n(65) * (7) = 455, left: ((5 * 13) * (5 + 2)) = 455\nroll back, left: (5 + 2) = 7, (5 * 13) = 65\nroll back, left: (5 * 13) = 65, 5, 2\nroll back, left: 5 2 5 13\n(13) - (5) = 8, left: (13 - 5) = 8, 5, 2\n(5) - (2) = 3, left: (5 - 2) = 3, (13 - 5) = 8\n(8) * (3) = 24, left: ((13 - 5) * (5 - 2)) = 24\nreach 24! expression: ((13 - 5) * (5 - 2))"}, {"input": "9 9 6 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 9, 6\n(21) - (6) = 15, left: ((9 + 12) - 6) = 15, 9\n(9) + (15) = 24, left: (9 + ((9 + 12) - 6)) = 24\nreach 24! expression: (9 + ((9 + 12) - 6))"}, {"input": "9 9 6 12\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 9, 9\n(9) + (6) = 15, left: (9 + (12 - 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (9 + (12 - 6))) = 24\nreach 24! expression: (9 + (9 + (12 - 6)))"}, {"input": "9 9 6 12\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 6, 12\n(6) - (18) = -12, left: (6 - (9 + 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 - (9 + 9))) = 24\nreach 24! expression: (12 - (6 - (9 + 9)))"}, {"input": "9 9 6 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 9, 6\n(9) + (21) = 30, left: (9 + (9 + 12)) = 30, 6\n(30) - (6) = 24, left: ((9 + (9 + 12)) - 6) = 24\nreach 24! expression: ((9 + (9 + 12)) - 6)"}, {"input": "9 9 6 12\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 9, 6\nroll back, left: 9 9 6 12\n(12) - (9) = 3, left: (12 - 9) = 3, 9, 6\nroll back, left: 9 9 6 12\n(9) / (12) = 3/4, left: (9 / 12) = 3/4, 9, 6\nroll back, left: 9 9 6 12\n(9) + (12) = 21, left: (9 + 12) = 21, 9, 6\n(21) - (6) = 15, left: ((9 + 12) - 6) = 15, 9\n(9) + (15) = 24, left: (9 + ((9 + 12) - 6)) = 24\nreach 24! expression: (9 + ((9 + 12) - 6))"}, {"input": "9 9 6 12\n", "output": "(9) * (12) = 108, left: (9 * 12) = 108, 9, 6\n(9) - (108) = -99, left: (9 - (9 * 12)) = -99, 6\nroll back, left: (9 * 12) = 108, 9, 6\nroll back, left: 9 9 6 12\n(12) / (9) = 4/3, left: (12 / 9) = 4/3, 9, 6\nroll back, left: 9 9 6 12\n(9) + (12) = 21, left: (9 + 12) = 21, 9, 6\n(9) + (21) = 30, left: (9 + (9 + 12)) = 30, 6\n(30) - (6) = 24, left: ((9 + (9 + 12)) - 6) = 24\nreach 24! expression: ((9 + (9 + 12)) - 6)"}, {"input": "9 9 6 12\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 6, 12\n(6) - (12) = -6, left: (6 - 12) = -6, (9 - 9) = 0\nroll back, left: (9 - 9) = 0, 6, 12\nroll back, left: 9 9 6 12\n(9) - (9) = 0, left: (9 - 9) = 0, 6, 12\nroll back, left: 9 9 6 12\n(9) + (9) = 18, left: (9 + 9) = 18, 6, 12\n(6) - (18) = -12, left: (6 - (9 + 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 - (9 + 9))) = 24\nreach 24! expression: (12 - (6 - (9 + 9)))"}, {"input": "9 9 6 12\n", "output": "(6) * (12) = 72, left: (6 * 12) = 72, 9, 9\nroll back, left: 9 9 6 12\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 9, 9\n(9) * (1/2) = 9/2, left: (9 * (6 / 12)) = 9/2, 9\nroll back, left: (6 / 12) = 1/2, 9, 9\nroll back, left: 9 9 6 12\n(12) - (6) = 6, left: (12 - 6) = 6, 9, 9\n(9) + (6) = 15, left: (9 + (12 - 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (9 + (12 - 6))) = 24\nreach 24! expression: (9 + (9 + (12 - 6)))"}, {"input": "12 3 8 6\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 8, 6\n(9) - (6) = 3, left: ((12 - 3) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 3) - 6)) = 24\nreach 24! expression: (8 * ((12 - 3) - 6))"}, {"input": "12 3 8 6\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 3, 8\n(6) - (3) = 3, left: ((12 - 6) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 6) - 3)) = 24\nreach 24! expression: (8 * ((12 - 6) - 3))"}, {"input": "12 3 8 6\n", "output": "(3) + (6) = 9, left: (3 + 6) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (3 + 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (3 + 6))) = 24\nreach 24! expression: (8 * (12 - (3 + 6)))"}, {"input": "12 3 8 6\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 8, 6\n(8) - (4) = 4, left: (8 - (12 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (12 / 3))) = 24\nreach 24! expression: (6 * (8 - (12 / 3)))"}, {"input": "12 3 8 6\n", "output": "(12) * (3) = 36, left: (12 * 3) = 36, 8, 6\n(8) - (36) = -28, left: (8 - (12 * 3)) = -28, 6\nroll back, left: (12 * 3) = 36, 8, 6\n(6) - (8) = -2, left: (6 - 8) = -2, (12 * 3) = 36\nroll back, left: (12 * 3) = 36, 8, 6\nroll back, left: 12 3 8 6\n(12) / (3) = 4, left: (12 / 3) = 4, 8, 6\n(8) - (4) = 4, left: (8 - (12 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (12 / 3))) = 24\nreach 24! expression: (6 * (8 - (12 / 3)))"}, {"input": "12 3 8 6\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 12, 3\nroll back, left: 12 3 8 6\n(3) / (12) = 1/4, left: (3 / 12) = 1/4, 8, 6\n(8) + (1/4) = 33/4, left: (8 + (3 / 12)) = 33/4, 6\nroll back, left: (3 / 12) = 1/4, 8, 6\nroll back, left: 12 3 8 6\n(12) / (3) = 4, left: (12 / 3) = 4, 8, 6\n(8) - (4) = 4, left: (8 - (12 / 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (12 / 3))) = 24\nreach 24! expression: (6 * (8 - (12 / 3)))"}, {"input": "12 3 8 6\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 3, 6\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, (12 * 8) = 96\nroll back, left: (12 * 8) = 96, 3, 6\nroll back, left: 12 3 8 6\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 12, 8\nroll back, left: 12 3 8 6\n(3) + (6) = 9, left: (3 + 6) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (3 + 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (3 + 6))) = 24\nreach 24! expression: (8 * (12 - (3 + 6)))"}, {"input": "12 3 8 6\n", "output": "(3) - (12) = -9, left: (3 - 12) = -9, 8, 6\nroll back, left: 12 3 8 6\n(12) * (3) = 36, left: (12 * 3) = 36, 8, 6\n(6) - (36) = -30, left: (6 - (12 * 3)) = -30, 8\nroll back, left: (12 * 3) = 36, 8, 6\nroll back, left: 12 3 8 6\n(12) - (3) = 9, left: (12 - 3) = 9, 8, 6\n(9) - (6) = 3, left: ((12 - 3) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 3) - 6)) = 24\nreach 24! expression: (8 * ((12 - 3) - 6))"}, {"input": "12 3 8 6\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 12, 3\nroll back, left: 12 3 8 6\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 3, 8\n(3) - (1/2) = 5/2, left: (3 - (6 / 12)) = 5/2, 8\nroll back, left: (6 / 12) = 1/2, 3, 8\nroll back, left: 12 3 8 6\n(12) - (6) = 6, left: (12 - 6) = 6, 3, 8\n(6) - (3) = 3, left: ((12 - 6) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 6) - 3)) = 24\nreach 24! expression: (8 * ((12 - 6) - 3))"}, {"input": "1 7 1 10\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (1 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (1 + 1))) = 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(7) + (10) = 17, left: (7 + 10) = 17, 1, 1\nroll back, left: 1 7 1 10\n(1) / (10) = 1/10, left: (1 / 10) = 1/10, 1, 7\nroll back, left: 1 7 1 10\n(1) / (10) = 1/10, left: (1 / 10) = 1/10, 7, 1\nroll back, left: 1 7 1 10\n(1) + (1) = 2, left: (1 + 1) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (1 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (1 + 1))) = 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(1) - (10) = -9, left: (1 - 10) = -9, 1, 7\nroll back, left: 1 7 1 10\n(7) + (1) = 8, left: (7 + 1) = 8, 1, 10\nroll back, left: 1 7 1 10\n(7) * (1) = 7, left: (7 * 1) = 7, 1, 10\nroll back, left: 1 7 1 10\n(1) + (1) = 2, left: (1 + 1) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (1 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (1 + 1))) = 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 1, 10\nroll back, left: 1 7 1 10\n(7) * (1) = 7, left: (7 * 1) = 7, 1, 10\n(1) + (7) = 8, left: (1 + (7 * 1)) = 8, 10\nroll back, left: (7 * 1) = 7, 1, 10\nroll back, left: 1 7 1 10\n(1) + (1) = 2, left: (1 + 1) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (1 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (1 + 1))) = 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 1, 10\nroll back, left: 1 7 1 10\n(7) - (1) = 6, left: (7 - 1) = 6, 1, 10\nroll back, left: 1 7 1 10\n(1) - (1) = 0, left: (1 - 1) = 0, 7, 10\nroll back, left: 1 7 1 10\n(1) + (1) = 2, left: (1 + 1) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (1 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (1 + 1))) = 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "1 7 1 10\n", "output": "(1) * (10) = 10, left: (1 * 10) = 10, 1, 7\nroll back, left: 1 7 1 10\n(1) / (10) = 1/10, left: (1 / 10) = 1/10, 1, 7\n(1) + (1/10) = 11/10, left: (1 + (1 / 10)) = 11/10, 7\nroll back, left: (1 / 10) = 1/10, 1, 7\nroll back, left: 1 7 1 10\n(1) + (1) = 2, left: (1 + 1) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (1 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (1 + 1))) = 24\nreach 24! expression: (10 + (7 * (1 + 1)))"}, {"input": "4 3 11 6\n", "output": "(11) + (6) = 17, left: (11 + 6) = 17, 4, 3\n(4) + (3) = 7, left: (4 + 3) = 7, (11 + 6) = 17\n(17) + (7) = 24, left: ((11 + 6) + (4 + 3)) = 24\nreach 24! expression: ((11 + 6) + (4 + 3))"}, {"input": "4 3 11 6\n", "output": "(3) + (6) = 9, left: (3 + 6) = 9, 4, 11\n(4) + (11) = 15, left: (4 + 11) = 15, (3 + 6) = 9\n(9) + (15) = 24, left: ((3 + 6) + (4 + 11)) = 24\nreach 24! expression: ((3 + 6) + (4 + 11))"}, {"input": "4 3 11 6\n", "output": "(3) + (6) = 9, left: (3 + 6) = 9, 4, 11\n(4) + (9) = 13, left: (4 + (3 + 6)) = 13, 11\n(11) + (13) = 24, left: (11 + (4 + (3 + 6))) = 24\nreach 24! expression: (11 + (4 + (3 + 6)))"}, {"input": "4 3 11 6\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 4, 6\n(6) + (14) = 20, left: (6 + (3 + 11)) = 20, 4\n(4) + (20) = 24, left: (4 + (6 + (3 + 11))) = 24\nreach 24! expression: (4 + (6 + (3 + 11)))"}, {"input": "4 3 11 6\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (3 + 11) = 14\n(14) + (10) = 24, left: ((3 + 11) + (4 + 6)) = 24\nreach 24! expression: ((3 + 11) + (4 + 6))"}, {"input": "4 3 11 6\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 4, 11\n(4) + (2) = 6, left: (4 + (6 / 3)) = 6, 11\n(11) / (6) = 11/6, left: (11 / (4 + (6 / 3))) = 11/6\nroll back, left: (4 + (6 / 3)) = 6, 11\nroll back, left: (6 / 3) = 2, 4, 11\nroll back, left: 4 3 11 6\n(3) + (6) = 9, left: (3 + 6) = 9, 4, 11\n(4) + (11) = 15, left: (4 + 11) = 15, (3 + 6) = 9\n(9) + (15) = 24, left: ((3 + 6) + (4 + 11)) = 24\nreach 24! expression: ((3 + 6) + (4 + 11))"}, {"input": "4 3 11 6\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 4, 11\nroll back, left: 4 3 11 6\n(3) * (6) = 18, left: (3 * 6) = 18, 4, 11\n(18) / (4) = 9/2, left: ((3 * 6) / 4) = 9/2, 11\nroll back, left: (3 * 6) = 18, 4, 11\nroll back, left: 4 3 11 6\n(3) + (6) = 9, left: (3 + 6) = 9, 4, 11\n(4) + (9) = 13, left: (4 + (3 + 6)) = 13, 11\n(11) + (13) = 24, left: (11 + (4 + (3 + 6))) = 24\nreach 24! expression: (11 + (4 + (3 + 6)))"}, {"input": "4 3 11 6\n", "output": "(11) / (3) = 11/3, left: (11 / 3) = 11/3, 4, 6\n(4) - (6) = -2, left: (4 - 6) = -2, (11 / 3) = 11/3\nroll back, left: (11 / 3) = 11/3, 4, 6\nroll back, left: 4 3 11 6\n(3) * (11) = 33, left: (3 * 11) = 33, 4, 6\nroll back, left: 4 3 11 6\n(3) + (11) = 14, left: (3 + 11) = 14, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (3 + 11) = 14\n(14) + (10) = 24, left: ((3 + 11) + (4 + 6)) = 24\nreach 24! expression: ((3 + 11) + (4 + 6))"}, {"input": "11 3 3 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (3 * 3) = 9\n(33) - (9) = 24, left: ((11 * 3) - (3 * 3)) = 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "11 3 3 3\n", "output": "(11) * (3) = 33, left: (11 * 3) = 33, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (11 * 3) = 33\n(33) - (9) = 24, left: ((11 * 3) - (3 * 3)) = 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "11 3 3 3\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (3 - 11) = -8\nroll back, left: (3 - 11) = -8, 3, 3\nroll back, left: 11 3 3 3\n(11) - (3) = 8, left: (11 - 3) = 8, 3, 3\nroll back, left: 11 3 3 3\n(11) * (3) = 33, left: (11 * 3) = 33, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (11 * 3) = 33\n(33) - (9) = 24, left: ((11 * 3) - (3 * 3)) = 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "11 3 3 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (3 - 3) = 0\nroll back, left: (3 - 3) = 0, 11, 3\n(11) + (0) = 11, left: (11 + (3 - 3)) = 11, 3\nroll back, left: (3 - 3) = 0, 11, 3\nroll back, left: 11 3 3 3\n(3) * (3) = 9, left: (3 * 3) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (3 * 3) = 9\n(33) - (9) = 24, left: ((11 * 3) - (3 * 3)) = 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "11 3 3 3\n", "output": "(11) / (3) = 11/3, left: (11 / 3) = 11/3, 3, 3\n(3) / (11/3) = 9/11, left: (3 / (11 / 3)) = 9/11, 3\nroll back, left: (11 / 3) = 11/3, 3, 3\nroll back, left: 11 3 3 3\n(3) - (11) = -8, left: (3 - 11) = -8, 3, 3\nroll back, left: 11 3 3 3\n(11) * (3) = 33, left: (11 * 3) = 33, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (11 * 3) = 33\n(33) - (9) = 24, left: ((11 * 3) - (3 * 3)) = 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "11 3 3 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 11, 3\n(11) + (9) = 20, left: (11 + (3 * 3)) = 20, 3\nroll back, left: (3 * 3) = 9, 11, 3\n(11) * (9) = 99, left: (11 * (3 * 3)) = 99, 3\n(3) * (99) = 297, left: (3 * (11 * (3 * 3))) = 297\nroll back, left: (11 * (3 * 3)) = 99, 3\nroll back, left: (3 * 3) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (3 * 3) = 9\n(33) - (9) = 24, left: ((11 * 3) - (3 * 3)) = 24\nreach 24! expression: ((11 * 3) - (3 * 3))"}, {"input": "2 12 3 3\n", "output": "(2) / (3) = 2/3, left: (2 / 3) = 2/3, 12, 3\n(12) * (2/3) = 8, left: (12 * (2 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (12 * (2 / 3))) = 24\nreach 24! expression: (3 * (12 * (2 / 3)))"}, {"input": "2 12 3 3\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 12, 3\n(3) - (1) = 2, left: (3 - (3 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (3 - 2))) = 24\nreach 24! expression: (12 * (3 - (3 - 2)))"}, {"input": "2 12 3 3\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 2, 3\n(15) - (3) = 12, left: ((12 + 3) - 3) = 12, 2\n(2) * (12) = 24, left: (2 * ((12 + 3) - 3)) = 24\nreach 24! expression: (2 * ((12 + 3) - 3))"}, {"input": "2 12 3 3\n", "output": "(3) - (12) = -9, left: (3 - 12) = -9, 2, 3\n(3) - (-9) = 12, left: (3 - (3 - 12)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 - (3 - 12))) = 24\nreach 24! expression: (2 * (3 - (3 - 12)))"}, {"input": "2 12 3 3\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 12, 3\n(3) / (3/2) = 2, left: (3 / (3 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 / (3 / 2))) = 24\nreach 24! expression: (12 * (3 / (3 / 2)))"}, {"input": "2 12 3 3\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 12, 3\n(3) - (1) = 2, left: (3 - (3 - 2)) = 2, 12\n(2) - (12) = -10, left: ((3 - (3 - 2)) - 12) = -10\nroll back, left: (3 - (3 - 2)) = 2, 12\n(12) / (2) = 6, left: (12 / (3 - (3 - 2))) = 6\nroll back, left: (3 - (3 - 2)) = 2, 12\n(2) / (12) = 1/6, left: ((3 - (3 - 2)) / 12) = 1/6\nroll back, left: (3 - (3 - 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (3 - 2))) = 24\nreach 24! expression: (12 * (3 - (3 - 2)))"}, {"input": "2 12 3 3\n", "output": "(3) - (12) = -9, left: (3 - 12) = -9, 2, 3\n(-9) / (3) = -3, left: ((3 - 12) / 3) = -3, 2\nroll back, left: (3 - 12) = -9, 2, 3\n(-9) - (3) = -12, left: ((3 - 12) - 3) = -12, 2\n(-12) / (2) = -6, left: (((3 - 12) - 3) / 2) = -6\nroll back, left: ((3 - 12) - 3) = -12, 2\nroll back, left: (3 - 12) = -9, 2, 3\n(3) - (-9) = 12, left: (3 - (3 - 12)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 - (3 - 12))) = 24\nreach 24! expression: (2 * (3 - (3 - 12)))"}, {"input": "12 4 11 7\n", "output": "(7) - (12) = -5, left: (7 - 12) = -5, 4, 11\n(11) + (-5) = 6, left: (11 + (7 - 12)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 + (7 - 12))) = 24\nreach 24! expression: (4 * (11 + (7 - 12)))"}, {"input": "12 4 11 7\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (12 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (12 - 11))) = 24\nreach 24! expression: (4 * (7 - (12 - 11)))"}, {"input": "12 4 11 7\n", "output": "(11) + (7) = 18, left: (11 + 7) = 18, 12, 4\n(18) - (12) = 6, left: ((11 + 7) - 12) = 6, 4\n(4) * (6) = 24, left: (4 * ((11 + 7) - 12)) = 24\nreach 24! expression: (4 * ((11 + 7) - 12))"}, {"input": "12 4 11 7\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 12, 11\n(12) + (3) = 15, left: (12 + (7 - 4)) = 15, 11\nroll back, left: (7 - 4) = 3, 12, 11\nroll back, left: 12 4 11 7\n(4) - (12) = -8, left: (4 - 12) = -8, 11, 7\nroll back, left: 12 4 11 7\n(11) + (7) = 18, left: (11 + 7) = 18, 12, 4\n(18) - (12) = 6, left: ((11 + 7) - 12) = 6, 4\n(4) * (6) = 24, left: (4 * ((11 + 7) - 12)) = 24\nreach 24! expression: (4 * ((11 + 7) - 12))"}, {"input": "12 4 11 7\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 4, 7\n(1) - (7) = -6, left: ((12 - 11) - 7) = -6, 4\n(4) / (-6) = -2/3, left: (4 / ((12 - 11) - 7)) = -2/3\nroll back, left: ((12 - 11) - 7) = -6, 4\nroll back, left: (12 - 11) = 1, 4, 7\n(7) * (1) = 7, left: (7 * (12 - 11)) = 7, 4\nroll back, left: (12 - 11) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (12 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (12 - 11))) = 24\nreach 24! expression: (4 * (7 - (12 - 11)))"}, {"input": "12 4 11 7\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 12, 11\nroll back, left: 12 4 11 7\n(7) - (4) = 3, left: (7 - 4) = 3, 12, 11\n(11) * (3) = 33, left: (11 * (7 - 4)) = 33, 12\nroll back, left: (7 - 4) = 3, 12, 11\nroll back, left: 12 4 11 7\n(7) - (12) = -5, left: (7 - 12) = -5, 4, 11\n(11) + (-5) = 6, left: (11 + (7 - 12)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 + (7 - 12))) = 24\nreach 24! expression: (4 * (11 + (7 - 12)))"}, {"input": "12 4 11 7\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 12, 11\nroll back, left: 12 4 11 7\n(4) / (11) = 4/11, left: (4 / 11) = 4/11, 12, 7\nroll back, left: 12 4 11 7\n(7) / (11) = 7/11, left: (7 / 11) = 7/11, 12, 4\nroll back, left: 12 4 11 7\n(11) + (7) = 18, left: (11 + 7) = 18, 12, 4\n(18) - (12) = 6, left: ((11 + 7) - 12) = 6, 4\n(4) * (6) = 24, left: (4 * ((11 + 7) - 12)) = 24\nreach 24! expression: (4 * ((11 + 7) - 12))"}, {"input": "12 4 11 7\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 4, 7\n(7) / (1) = 7, left: (7 / (12 - 11)) = 7, 4\n(7) - (4) = 3, left: ((7 / (12 - 11)) - 4) = 3\nroll back, left: (7 / (12 - 11)) = 7, 4\nroll back, left: (12 - 11) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (12 - 11)) = 6, 4\n(4) - (6) = -2, left: (4 - (7 - (12 - 11))) = -2\nroll back, left: (7 - (12 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (12 - 11))) = 24\nreach 24! expression: (4 * (7 - (12 - 11)))"}, {"input": "1 11 6 6\n", "output": "(11) + (6) = 17, left: (11 + 6) = 17, 1, 6\n(6) + (17) = 23, left: (6 + (11 + 6)) = 23, 1\n(1) + (23) = 24, left: (1 + (6 + (11 + 6))) = 24\nreach 24! expression: (1 + (6 + (11 + 6)))"}, {"input": "1 11 6 6\n", "output": "(1) + (6) = 7, left: (1 + 6) = 7, 11, 6\n(11) + (6) = 17, left: (11 + 6) = 17, (1 + 6) = 7\n(7) + (17) = 24, left: ((1 + 6) + (11 + 6)) = 24\nreach 24! expression: ((1 + 6) + (11 + 6))"}, {"input": "1 11 6 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (6 + 6) = 12\n(12) + (12) = 24, left: ((6 + 6) + (1 + 11)) = 24\nreach 24! expression: ((6 + 6) + (1 + 11))"}, {"input": "1 11 6 6\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 6, 6\n(6) + (12) = 18, left: (6 + (1 + 11)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 + (1 + 11))) = 24\nreach 24! expression: (6 + (6 + (1 + 11)))"}, {"input": "1 11 6 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 1, 11\n(1) - (11) = -10, left: (1 - 11) = -10, (6 - 6) = 0\nroll back, left: (6 - 6) = 0, 1, 11\nroll back, left: 1 11 6 6\n(6) / (6) = 1, left: (6 / 6) = 1, 1, 11\nroll back, left: 1 11 6 6\n(6) + (6) = 12, left: (6 + 6) = 12, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (6 + 6) = 12\n(12) + (12) = 24, left: ((6 + 6) + (1 + 11)) = 24\nreach 24! expression: ((6 + 6) + (1 + 11))"}, {"input": "1 11 6 6\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 6, 6\n(6) * (6) = 36, left: (6 * 6) = 36, (11 / 1) = 11\nroll back, left: (11 / 1) = 11, 6, 6\nroll back, left: 1 11 6 6\n(1) - (11) = -10, left: (1 - 11) = -10, 6, 6\nroll back, left: 1 11 6 6\n(1) + (11) = 12, left: (1 + 11) = 12, 6, 6\n(6) + (12) = 18, left: (6 + (1 + 11)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 + (1 + 11))) = 24\nreach 24! expression: (6 + (6 + (1 + 11)))"}, {"input": "1 11 6 6\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 11, 6\nroll back, left: 1 11 6 6\n(1) - (6) = -5, left: (1 - 6) = -5, 11, 6\n(11) + (6) = 17, left: (11 + 6) = 17, (1 - 6) = -5\nroll back, left: (1 - 6) = -5, 11, 6\nroll back, left: 1 11 6 6\n(1) + (6) = 7, left: (1 + 6) = 7, 11, 6\n(11) + (6) = 17, left: (11 + 6) = 17, (1 + 6) = 7\n(7) + (17) = 24, left: ((1 + 6) + (11 + 6)) = 24\nreach 24! expression: ((1 + 6) + (11 + 6))"}, {"input": "7 6 11 2\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (7 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (7 - 6))) = 24\nreach 24! expression: (2 * (11 + (7 - 6)))"}, {"input": "7 6 11 2\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 7, 2\n(7) - (-5) = 12, left: (7 - (6 - 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 - (6 - 11))) = 24\nreach 24! expression: (2 * (7 - (6 - 11)))"}, {"input": "7 6 11 2\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 7, 2\n(7) + (5) = 12, left: (7 + (11 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (11 - 6))) = 24\nreach 24! expression: (2 * (7 + (11 - 6)))"}, {"input": "7 6 11 2\n", "output": "(7) + (11) = 18, left: (7 + 11) = 18, 6, 2\n(18) - (6) = 12, left: ((7 + 11) - 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((7 + 11) - 6)) = 24\nreach 24! expression: (2 * ((7 + 11) - 6))"}, {"input": "7 6 11 2\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 7, 2\n(7) + (-5) = 2, left: (7 + (6 - 11)) = 2, 2\n(2) * (2) = 4, left: (2 * (7 + (6 - 11))) = 4\nroll back, left: (7 + (6 - 11)) = 2, 2\n(2) - (2) = 0, left: (2 - (7 + (6 - 11))) = 0\nroll back, left: (7 + (6 - 11)) = 2, 2\nroll back, left: (6 - 11) = -5, 7, 2\n(7) - (-5) = 12, left: (7 - (6 - 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 - (6 - 11))) = 24\nreach 24! expression: (2 * (7 - (6 - 11)))"}, {"input": "7 6 11 2\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 7, 2\n(7) - (2) = 5, left: (7 - 2) = 5, (11 - 6) = 5\nroll back, left: (11 - 6) = 5, 7, 2\n(7) + (2) = 9, left: (7 + 2) = 9, (11 - 6) = 5\nroll back, left: (11 - 6) = 5, 7, 2\n(2) / (7) = 2/7, left: (2 / 7) = 2/7, (11 - 6) = 5\nroll back, left: (11 - 6) = 5, 7, 2\n(7) + (5) = 12, left: (7 + (11 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (11 - 6))) = 24\nreach 24! expression: (2 * (7 + (11 - 6)))"}, {"input": "7 6 11 2\n", "output": "(7) * (11) = 77, left: (7 * 11) = 77, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (7 * 11) = 77\nroll back, left: (7 * 11) = 77, 6, 2\n(6) - (2) = 4, left: (6 - 2) = 4, (7 * 11) = 77\nroll back, left: (7 * 11) = 77, 6, 2\nroll back, left: 7 6 11 2\n(7) + (11) = 18, left: (7 + 11) = 18, 6, 2\n(18) - (6) = 12, left: ((7 + 11) - 6) = 12, 2\n(2) * (12) = 24, left: (2 * ((7 + 11) - 6)) = 24\nreach 24! expression: (2 * ((7 + 11) - 6))"}, {"input": "7 6 11 2\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 7, 11\n(7) * (1/3) = 7/3, left: (7 * (2 / 6)) = 7/3, 11\nroll back, left: (2 / 6) = 1/3, 7, 11\nroll back, left: 7 6 11 2\n(2) - (6) = -4, left: (2 - 6) = -4, 7, 11\nroll back, left: 7 6 11 2\n(11) - (6) = 5, left: (11 - 6) = 5, 7, 2\n(7) + (5) = 12, left: (7 + (11 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (11 - 6))) = 24\nreach 24! expression: (2 * (7 + (11 - 6)))"}, {"input": "7 6 11 2\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 7, 11\nroll back, left: 7 6 11 2\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, 7, 11\n(11) / (7) = 11/7, left: (11 / 7) = 11/7, (2 / 6) = 1/3\nroll back, left: (2 / 6) = 1/3, 7, 11\nroll back, left: 7 6 11 2\n(7) - (6) = 1, left: (7 - 6) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (7 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (7 - 6))) = 24\nreach 24! expression: (2 * (11 + (7 - 6)))"}, {"input": "5 9 3 4\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 3, 4\n(4) + (4) = 8, left: (4 + (9 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (9 - 5))) = 24\nreach 24! expression: (3 * (4 + (9 - 5)))"}, {"input": "5 9 3 4\n", "output": "(9) + (4) = 13, left: (9 + 4) = 13, 5, 3\n(13) - (5) = 8, left: ((9 + 4) - 5) = 8, 3\n(3) * (8) = 24, left: (3 * ((9 + 4) - 5)) = 24\nreach 24! expression: (3 * ((9 + 4) - 5))"}, {"input": "5 9 3 4\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 3, 4\n(4) - (-4) = 8, left: (4 - (5 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 - (5 - 9))) = 24\nreach 24! expression: (3 * (4 - (5 - 9)))"}, {"input": "5 9 3 4\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 9, 4\n(15) - (9) = 6, left: ((5 * 3) - 9) = 6, 4\n(4) * (6) = 24, left: (4 * ((5 * 3) - 9)) = 24\nreach 24! expression: (4 * ((5 * 3) - 9))"}, {"input": "5 9 3 4\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 5, 4\n(4) * (6) = 24, left: (4 * (9 - 3)) = 24, 5\nroll back, left: (9 - 3) = 6, 5, 4\n(6) - (5) = 1, left: ((9 - 3) - 5) = 1, 4\nroll back, left: (9 - 3) = 6, 5, 4\nroll back, left: 5 9 3 4\n(9) - (5) = 4, left: (9 - 5) = 4, 3, 4\n(4) + (4) = 8, left: (4 + (9 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (9 - 5))) = 24\nreach 24! expression: (3 * (4 + (9 - 5)))"}, {"input": "5 9 3 4\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 5, 3\n(5) / (3) = 5/3, left: ((9 - 4) / 3) = 5/3, 5\nroll back, left: (9 - 4) = 5, 5, 3\n(5) + (5) = 10, left: (5 + (9 - 4)) = 10, 3\nroll back, left: (9 - 4) = 5, 5, 3\nroll back, left: 5 9 3 4\n(9) + (4) = 13, left: (9 + 4) = 13, 5, 3\n(13) - (5) = 8, left: ((9 + 4) - 5) = 8, 3\n(3) * (8) = 24, left: (3 * ((9 + 4) - 5)) = 24\nreach 24! expression: (3 * ((9 + 4) - 5))"}, {"input": "5 9 3 4\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 5, 4\nroll back, left: 5 9 3 4\n(5) - (3) = 2, left: (5 - 3) = 2, 9, 4\n(4) - (9) = -5, left: (4 - 9) = -5, (5 - 3) = 2\nroll back, left: (5 - 3) = 2, 9, 4\nroll back, left: 5 9 3 4\n(5) * (3) = 15, left: (5 * 3) = 15, 9, 4\n(15) - (9) = 6, left: ((5 * 3) - 9) = 6, 4\n(4) * (6) = 24, left: (4 * ((5 * 3) - 9)) = 24\nreach 24! expression: (4 * ((5 * 3) - 9))"}, {"input": "5 9 3 4\n", "output": "(9) / (5) = 9/5, left: (9 / 5) = 9/5, 3, 4\n(3) + (9/5) = 24/5, left: (3 + (9 / 5)) = 24/5, 4\nroll back, left: (9 / 5) = 9/5, 3, 4\n(9/5) - (3) = -6/5, left: ((9 / 5) - 3) = -6/5, 4\nroll back, left: (9 / 5) = 9/5, 3, 4\nroll back, left: 5 9 3 4\n(5) - (9) = -4, left: (5 - 9) = -4, 3, 4\n(4) - (-4) = 8, left: (4 - (5 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 - (5 - 9))) = 24\nreach 24! expression: (3 * (4 - (5 - 9)))"}, {"input": "5 9 3 4\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 5, 3\n(3) * (9/4) = 27/4, left: (3 * (9 / 4)) = 27/4, 5\nroll back, left: (9 / 4) = 9/4, 5, 3\nroll back, left: 5 9 3 4\n(9) - (4) = 5, left: (9 - 4) = 5, 5, 3\nroll back, left: 5 9 3 4\n(9) + (4) = 13, left: (9 + 4) = 13, 5, 3\n(13) - (5) = 8, left: ((9 + 4) - 5) = 8, 3\n(3) * (8) = 24, left: (3 * ((9 + 4) - 5)) = 24\nreach 24! expression: (3 * ((9 + 4) - 5))"}, {"input": "7 7 3 10\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 7, 10\n(7) - (10) = -3, left: (7 - 10) = -3, (7 * 3) = 21\n(21) - (-3) = 24, left: ((7 * 3) - (7 - 10)) = 24\nreach 24! expression: ((7 * 3) - (7 - 10))"}, {"input": "7 7 3 10\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 7, 10\n(10) - (7) = 3, left: (10 - 7) = 3, (7 * 3) = 21\n(21) + (3) = 24, left: ((7 * 3) + (10 - 7)) = 24\nreach 24! expression: ((7 * 3) + (10 - 7))"}, {"input": "7 7 3 10\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (10 - 7) = 3\n(3) + (21) = 24, left: ((10 - 7) + (7 * 3)) = 24\nreach 24! expression: ((10 - 7) + (7 * 3))"}, {"input": "7 7 3 10\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 7, 10\n(7) - (21) = -14, left: (7 - (7 * 3)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 - (7 * 3))) = 24\nreach 24! expression: (10 - (7 - (7 * 3)))"}, {"input": "7 7 3 10\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 7, 10\n(10) + (21) = 31, left: (10 + (7 * 3)) = 31, 7\n(31) - (7) = 24, left: ((10 + (7 * 3)) - 7) = 24\nreach 24! expression: ((10 + (7 * 3)) - 7)"}, {"input": "7 7 3 10\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 7, 10\nroll back, left: 7 7 3 10\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 7, 10\n(7) - (10) = -3, left: (7 - 10) = -3, (7 / 3) = 7/3\nroll back, left: (7 / 3) = 7/3, 7, 10\nroll back, left: 7 7 3 10\n(7) * (3) = 21, left: (7 * 3) = 21, 7, 10\n(10) - (7) = 3, left: (10 - 7) = 3, (7 * 3) = 21\n(21) + (3) = 24, left: ((7 * 3) + (10 - 7)) = 24\nreach 24! expression: ((7 * 3) + (10 - 7))"}, {"input": "7 7 3 10\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 7, 10\n(10) + (4) = 14, left: (10 + (7 - 3)) = 14, 7\nroll back, left: (7 - 3) = 4, 7, 10\nroll back, left: 7 7 3 10\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 7, 10\nroll back, left: 7 7 3 10\n(7) * (3) = 21, left: (7 * 3) = 21, 7, 10\n(10) + (21) = 31, left: (10 + (7 * 3)) = 31, 7\n(31) - (7) = 24, left: ((10 + (7 * 3)) - 7) = 24\nreach 24! expression: ((10 + (7 * 3)) - 7)"}, {"input": "7 7 3 10\n", "output": "(3) - (10) = -7, left: (3 - 10) = -7, 7, 7\nroll back, left: 7 7 3 10\n(7) - (3) = 4, left: (7 - 3) = 4, 7, 10\n(7) * (10) = 70, left: (7 * 10) = 70, (7 - 3) = 4\nroll back, left: (7 - 3) = 4, 7, 10\nroll back, left: 7 7 3 10\n(7) * (3) = 21, left: (7 * 3) = 21, 7, 10\n(7) - (10) = -3, left: (7 - 10) = -3, (7 * 3) = 21\n(21) - (-3) = 24, left: ((7 * 3) - (7 - 10)) = 24\nreach 24! expression: ((7 * 3) - (7 - 10))"}, {"input": "7 7 3 10\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 3, 10\n(3) / (1) = 3, left: (3 / (7 / 7)) = 3, 10\nroll back, left: (7 / 7) = 1, 3, 10\nroll back, left: 7 7 3 10\n(3) - (10) = -7, left: (3 - 10) = -7, 7, 7\nroll back, left: 7 7 3 10\n(7) * (3) = 21, left: (7 * 3) = 21, 7, 10\n(7) - (21) = -14, left: (7 - (7 * 3)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 - (7 * 3))) = 24\nreach 24! expression: (10 - (7 - (7 * 3)))"}, {"input": "12 9 12 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (12 - 9)) = 36, 12\n(36) - (12) = 24, left: ((12 * (12 - 9)) - 12) = 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 9 12 12\n", "output": "(12) - (12) = 0, left: (12 - 12) = 0, 12, 9\nroll back, left: 12 9 12 12\n(12) + (12) = 24, left: (12 + 12) = 24, 12, 9\nroll back, left: 12 9 12 12\n(9) + (12) = 21, left: (9 + 12) = 21, 12, 12\nroll back, left: 12 9 12 12\n(12) - (9) = 3, left: (12 - 9) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (12 - 9)) = 36, 12\n(36) - (12) = 24, left: ((12 * (12 - 9)) - 12) = 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 9 12 12\n", "output": "(12) - (12) = 0, left: (12 - 12) = 0, 9, 12\nroll back, left: 12 9 12 12\n(12) / (9) = 4/3, left: (12 / 9) = 4/3, 12, 12\nroll back, left: 12 9 12 12\n(9) - (12) = -3, left: (9 - 12) = -3, 12, 12\nroll back, left: 12 9 12 12\n(12) - (9) = 3, left: (12 - 9) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (12 - 9)) = 36, 12\n(36) - (12) = 24, left: ((12 * (12 - 9)) - 12) = 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 9 12 12\n", "output": "(12) - (12) = 0, left: (12 - 12) = 0, 9, 12\nroll back, left: 12 9 12 12\n(12) / (12) = 1, left: (12 / 12) = 1, 9, 12\nroll back, left: 12 9 12 12\n(12) / (12) = 1, left: (12 / 12) = 1, 9, 12\nroll back, left: 12 9 12 12\n(12) - (9) = 3, left: (12 - 9) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (12 - 9)) = 36, 12\n(36) - (12) = 24, left: ((12 * (12 - 9)) - 12) = 24\nreach 24! expression: ((12 * (12 - 9)) - 12)"}, {"input": "12 8 8 3\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 8, 8\n(8) / (1/4) = 32, left: (8 / (3 / 12)) = 32, 8\n(32) - (8) = 24, left: ((8 / (3 / 12)) - 8) = 24\nreach 24! expression: ((8 / (3 / 12)) - 8)"}, {"input": "12 8 8 3\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 8, 3\n(96) / (3) = 32, left: ((12 * 8) / 3) = 32, 8\n(32) - (8) = 24, left: (((12 * 8) / 3) - 8) = 24\nreach 24! expression: (((12 * 8) / 3) - 8)"}, {"input": "12 8 8 3\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 12, 3\n(3) - (1) = 2, left: (3 - (8 / 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (8 / 8))) = 24\nreach 24! expression: (12 * (3 - (8 / 8)))"}, {"input": "12 8 8 3\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 8, 3\n(8) * (-4) = -32, left: (8 * (8 - 12)) = -32, 3\nroll back, left: (8 - 12) = -4, 8, 3\n(8) + (3) = 11, left: (8 + 3) = 11, (8 - 12) = -4\nroll back, left: (8 - 12) = -4, 8, 3\nroll back, left: 12 8 8 3\n(12) * (8) = 96, left: (12 * 8) = 96, 8, 3\n(96) / (3) = 32, left: ((12 * 8) / 3) = 32, 8\n(32) - (8) = 24, left: (((12 * 8) / 3) - 8) = 24\nreach 24! expression: (((12 * 8) / 3) - 8)"}, {"input": "12 8 8 3\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 12, 3\nroll back, left: 12 8 8 3\n(8) - (8) = 0, left: (8 - 8) = 0, 12, 3\nroll back, left: 12 8 8 3\n(8) / (8) = 1, left: (8 / 8) = 1, 12, 3\n(12) / (3) = 4, left: (12 / 3) = 4, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 12, 3\n(3) - (1) = 2, left: (3 - (8 / 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (8 / 8))) = 24\nreach 24! expression: (12 * (3 - (8 / 8)))"}, {"input": "12 8 8 3\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 8, 8\nroll back, left: 12 8 8 3\n(3) - (12) = -9, left: (3 - 12) = -9, 8, 8\n(8) * (-9) = -72, left: (8 * (3 - 12)) = -72, 8\nroll back, left: (3 - 12) = -9, 8, 8\nroll back, left: 12 8 8 3\n(3) / (12) = 1/4, left: (3 / 12) = 1/4, 8, 8\n(8) / (1/4) = 32, left: (8 / (3 / 12)) = 32, 8\n(32) - (8) = 24, left: ((8 / (3 / 12)) - 8) = 24\nreach 24! expression: ((8 / (3 / 12)) - 8)"}, {"input": "12 8 8 3\n", "output": "(8) / (12) = 2/3, left: (8 / 12) = 2/3, 8, 3\nroll back, left: 12 8 8 3\n(12) + (8) = 20, left: (12 + 8) = 20, 8, 3\nroll back, left: 12 8 8 3\n(12) / (8) = 3/2, left: (12 / 8) = 3/2, 8, 3\nroll back, left: 12 8 8 3\n(12) * (8) = 96, left: (12 * 8) = 96, 8, 3\n(96) / (3) = 32, left: ((12 * 8) / 3) = 32, 8\n(32) - (8) = 24, left: (((12 * 8) / 3) - 8) = 24\nreach 24! expression: (((12 * 8) / 3) - 8)"}, {"input": "2 5 13 10\n", "output": "(13) * (10) = 130, left: (13 * 10) = 130, 2, 5\n(130) / (5) = 26, left: ((13 * 10) / 5) = 26, 2\n(26) - (2) = 24, left: (((13 * 10) / 5) - 2) = 24\nreach 24! expression: (((13 * 10) / 5) - 2)"}, {"input": "2 5 13 10\n", "output": "(5) * (10) = 50, left: (5 * 10) = 50, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (5 * 10) = 50\n(50) - (26) = 24, left: ((5 * 10) - (2 * 13)) = 24\nreach 24! expression: ((5 * 10) - (2 * 13))"}, {"input": "2 5 13 10\n", "output": "(5) / (13) = 5/13, left: (5 / 13) = 5/13, 2, 10\n(10) / (5/13) = 26, left: (10 / (5 / 13)) = 26, 2\n(26) - (2) = 24, left: ((10 / (5 / 13)) - 2) = 24\nreach 24! expression: ((10 / (5 / 13)) - 2)"}, {"input": "2 5 13 10\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 2, 13\n(13) / (1/2) = 26, left: (13 / (5 / 10)) = 26, 2\n(26) - (2) = 24, left: ((13 / (5 / 10)) - 2) = 24\nreach 24! expression: ((13 / (5 / 10)) - 2)"}, {"input": "2 5 13 10\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 13, 10\nroll back, left: 2 5 13 10\n(2) - (5) = -3, left: (2 - 5) = -3, 13, 10\nroll back, left: 2 5 13 10\n(5) + (13) = 18, left: (5 + 13) = 18, 2, 10\nroll back, left: 2 5 13 10\n(5) / (13) = 5/13, left: (5 / 13) = 5/13, 2, 10\n(10) / (5/13) = 26, left: (10 / (5 / 13)) = 26, 2\n(26) - (2) = 24, left: ((10 / (5 / 13)) - 2) = 24\nreach 24! expression: ((10 / (5 / 13)) - 2)"}, {"input": "2 5 13 10\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 13, 10\nroll back, left: 2 5 13 10\n(2) + (5) = 7, left: (2 + 5) = 7, 13, 10\n(7) - (10) = -3, left: ((2 + 5) - 10) = -3, 13\nroll back, left: (2 + 5) = 7, 13, 10\nroll back, left: 2 5 13 10\n(5) * (10) = 50, left: (5 * 10) = 50, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (5 * 10) = 50\n(50) - (26) = 24, left: ((5 * 10) - (2 * 13)) = 24\nreach 24! expression: ((5 * 10) - (2 * 13))"}, {"input": "5 3 1 3\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 5, 3\n(5) + (3) = 8, left: (5 + (1 * 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 + (1 * 3))) = 24\nreach 24! expression: (3 * (5 + (1 * 3)))"}, {"input": "5 3 1 3\n", "output": "(5) * (1) = 5, left: (5 * 1) = 5, 3, 3\n(3) + (5) = 8, left: (3 + (5 * 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (3 + (5 * 1))) = 24\nreach 24! expression: (3 * (3 + (5 * 1)))"}, {"input": "5 3 1 3\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (3 + 3)) = 24\nreach 24! expression: ((5 - 1) * (3 + 3))"}, {"input": "5 3 1 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (5 - 1)) = 24\nreach 24! expression: ((3 + 3) * (5 - 1))"}, {"input": "5 3 1 3\n", "output": "(5) * (1) = 5, left: (5 * 1) = 5, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (5 * 1) = 5\nroll back, left: (5 * 1) = 5, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (5 * 1) = 5\nroll back, left: (5 * 1) = 5, 3, 3\n(3) - (3) = 0, left: (3 - 3) = 0, (5 * 1) = 5\nroll back, left: (5 * 1) = 5, 3, 3\n(3) + (5) = 8, left: (3 + (5 * 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (3 + (5 * 1))) = 24\nreach 24! expression: (3 * (3 + (5 * 1)))"}, {"input": "5 3 1 3\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 3, 3\n(3) - (3) = 0, left: (3 - 3) = 0, (5 - 1) = 4\n(4) + (0) = 4, left: ((5 - 1) + (3 - 3)) = 4\nroll back, left: (3 - 3) = 0, (5 - 1) = 4\nroll back, left: (5 - 1) = 4, 3, 3\n(3) - (3) = 0, left: (3 - 3) = 0, (5 - 1) = 4\nroll back, left: (5 - 1) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (3 + 3)) = 24\nreach 24! expression: ((5 - 1) * (3 + 3))"}, {"input": "5 3 1 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 5, 1\nroll back, left: 5 3 1 3\n(3) - (3) = 0, left: (3 - 3) = 0, 5, 1\n(0) / (1) = 0, left: ((3 - 3) / 1) = 0, 5\nroll back, left: (3 - 3) = 0, 5, 1\nroll back, left: 5 3 1 3\n(3) + (3) = 6, left: (3 + 3) = 6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (5 - 1)) = 24\nreach 24! expression: ((3 + 3) * (5 - 1))"}, {"input": "5 3 1 3\n", "output": "(5) * (1) = 5, left: (5 * 1) = 5, 3, 3\n(3) - (5) = -2, left: (3 - (5 * 1)) = -2, 3\n(-2) / (3) = -2/3, left: ((3 - (5 * 1)) / 3) = -2/3\nroll back, left: (3 - (5 * 1)) = -2, 3\n(3) - (-2) = 5, left: (3 - (3 - (5 * 1))) = 5\nroll back, left: (3 - (5 * 1)) = -2, 3\nroll back, left: (5 * 1) = 5, 3, 3\n(3) + (5) = 8, left: (3 + (5 * 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (3 + (5 * 1))) = 24\nreach 24! expression: (3 * (3 + (5 * 1)))"}, {"input": "5 3 1 3\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 5, 3\n(5) - (3) = 2, left: (5 - (1 * 3)) = 2, 3\n(3) * (2) = 6, left: (3 * (5 - (1 * 3))) = 6\nroll back, left: (5 - (1 * 3)) = 2, 3\nroll back, left: (1 * 3) = 3, 5, 3\n(3) - (5) = -2, left: ((1 * 3) - 5) = -2, 3\nroll back, left: (1 * 3) = 3, 5, 3\n(5) + (3) = 8, left: (5 + (1 * 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 + (1 * 3))) = 24\nreach 24! expression: (3 * (5 + (1 * 3)))"}, {"input": "4 4 12 9\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 4, 9\n(9) - (3) = 6, left: (9 - (12 / 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (12 / 4))) = 24\nreach 24! expression: (4 * (9 - (12 / 4)))"}, {"input": "4 4 12 9\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (12 - 9)) = 24\nreach 24! expression: ((4 + 4) * (12 - 9))"}, {"input": "4 4 12 9\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (4 + 4)) = 24\nreach 24! expression: ((12 - 9) * (4 + 4))"}, {"input": "4 4 12 9\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 4, 4\n(4) - (4/3) = 8/3, left: (4 - (12 / 9)) = 8/3, 4\nroll back, left: (12 / 9) = 4/3, 4, 4\nroll back, left: 4 4 12 9\n(12) * (9) = 108, left: (12 * 9) = 108, 4, 4\nroll back, left: 4 4 12 9\n(12) - (9) = 3, left: (12 - 9) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (12 - 9) = 3\n(3) * (8) = 24, left: ((12 - 9) * (4 + 4)) = 24\nreach 24! expression: ((12 - 9) * (4 + 4))"}, {"input": "4 4 12 9\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 12, 9\nroll back, left: 4 4 12 9\n(4) / (4) = 1, left: (4 / 4) = 1, 12, 9\n(9) - (12) = -3, left: (9 - 12) = -3, (4 / 4) = 1\nroll back, left: (4 / 4) = 1, 12, 9\nroll back, left: 4 4 12 9\n(4) + (4) = 8, left: (4 + 4) = 8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (12 - 9)) = 24\nreach 24! expression: ((4 + 4) * (12 - 9))"}, {"input": "4 4 12 9\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 4, 12\nroll back, left: 4 4 12 9\n(4) - (4) = 0, left: (4 - 4) = 0, 12, 9\n(0) - (12) = -12, left: ((4 - 4) - 12) = -12, 9\nroll back, left: (4 - 4) = 0, 12, 9\nroll back, left: 4 4 12 9\n(4) + (4) = 8, left: (4 + 4) = 8, 12, 9\n(12) - (9) = 3, left: (12 - 9) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (12 - 9)) = 24\nreach 24! expression: ((4 + 4) * (12 - 9))"}, {"input": "4 4 12 9\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 4, 9\nroll back, left: 4 4 12 9\n(4) + (12) = 16, left: (4 + 12) = 16, 4, 9\n(4) / (16) = 1/4, left: (4 / (4 + 12)) = 1/4, 9\nroll back, left: (4 + 12) = 16, 4, 9\nroll back, left: 4 4 12 9\n(12) / (4) = 3, left: (12 / 4) = 3, 4, 9\n(9) - (3) = 6, left: (9 - (12 / 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (12 / 4))) = 24\nreach 24! expression: (4 * (9 - (12 / 4)))"}, {"input": "4 4 12 9\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 4, 12\n(4) - (9/4) = 7/4, left: (4 - (9 / 4)) = 7/4, 12\nroll back, left: (9 / 4) = 9/4, 4, 12\nroll back, left: 4 4 12 9\n(9) - (4) = 5, left: (9 - 4) = 5, 4, 12\nroll back, left: 4 4 12 9\n(12) / (4) = 3, left: (12 / 4) = 3, 4, 9\n(9) - (3) = 6, left: (9 - (12 / 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (12 / 4))) = 24\nreach 24! expression: (4 * (9 - (12 / 4)))"}, {"input": "9 6 4 4\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 6, 4\n(36) / (6) = 6, left: ((9 * 4) / 6) = 6, 4\n(4) * (6) = 24, left: (4 * ((9 * 4) / 6)) = 24\nreach 24! expression: (4 * ((9 * 4) / 6))"}, {"input": "9 6 4 4\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (9 - 6)) = 24\nreach 24! expression: ((4 + 4) * (9 - 6))"}, {"input": "9 6 4 4\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 6, 4\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, (9 * 4) = 36\n(36) / (3/2) = 24, left: ((9 * 4) / (6 / 4)) = 24\nreach 24! expression: ((9 * 4) / (6 / 4))"}, {"input": "9 6 4 4\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (4 / 6) = 2/3\n(2/3) * (36) = 24, left: ((4 / 6) * (9 * 4)) = 24\nreach 24! expression: ((4 / 6) * (9 * 4))"}, {"input": "9 6 4 4\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 9, 4\n(4) * (2/3) = 8/3, left: (4 * (4 / 6)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (4 * (4 / 6))) = 24\nreach 24! expression: (9 * (4 * (4 / 6)))"}, {"input": "9 6 4 4\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 6, 4\n(6) - (4) = 2, left: (6 - 4) = 2, (4 - 9) = -5\nroll back, left: (4 - 9) = -5, 6, 4\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, (4 - 9) = -5\nroll back, left: (4 - 9) = -5, 6, 4\nroll back, left: 9 6 4 4\n(9) * (4) = 36, left: (9 * 4) = 36, 6, 4\n(36) / (6) = 6, left: ((9 * 4) / 6) = 6, 4\n(4) * (6) = 24, left: (4 * ((9 * 4) / 6)) = 24\nreach 24! expression: (4 * ((9 * 4) / 6))"}, {"input": "9 6 4 4\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 6, 4\n(4) + (-5) = -1, left: (4 + (4 - 9)) = -1, 6\nroll back, left: (4 - 9) = -5, 6, 4\n(-5) - (4) = -9, left: ((4 - 9) - 4) = -9, 6\nroll back, left: (4 - 9) = -5, 6, 4\nroll back, left: 9 6 4 4\n(9) * (4) = 36, left: (9 * 4) = 36, 6, 4\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, (9 * 4) = 36\n(36) / (3/2) = 24, left: ((9 * 4) / (6 / 4)) = 24\nreach 24! expression: ((9 * 4) / (6 / 4))"}, {"input": "9 6 4 4\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 9, 4\n(4) + (2) = 6, left: (4 + (6 - 4)) = 6, 9\n(6) - (9) = -3, left: ((4 + (6 - 4)) - 9) = -3\nroll back, left: (4 + (6 - 4)) = 6, 9\nroll back, left: (6 - 4) = 2, 9, 4\nroll back, left: 9 6 4 4\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, 9, 4\n(4) * (2/3) = 8/3, left: (4 * (4 / 6)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (4 * (4 / 6))) = 24\nreach 24! expression: (9 * (4 * (4 / 6)))"}, {"input": "4 8 4 11\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (4 + 4)) = 24\nreach 24! expression: ((11 - 8) * (4 + 4))"}, {"input": "4 8 4 11\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 8, 11\n(11) - (8) = 3, left: (11 - (4 + 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (11 - (4 + 4))) = 24\nreach 24! expression: (8 * (11 - (4 + 4)))"}, {"input": "4 8 4 11\n", "output": "(11) - (4) = 7, left: (11 - 4) = 7, 4, 8\n(7) - (4) = 3, left: ((11 - 4) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 4) - 4)) = 24\nreach 24! expression: (8 * ((11 - 4) - 4))"}, {"input": "4 8 4 11\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 8, 11\n(11) - (8) = 3, left: (11 - 8) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (11 - 8)) = 24\nreach 24! expression: ((4 + 4) * (11 - 8))"}, {"input": "4 8 4 11\n", "output": "(11) - (4) = 7, left: (11 - 4) = 7, 8, 4\n(7) - (4) = 3, left: ((11 - 4) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 4) - 4)) = 24\nreach 24! expression: (8 * ((11 - 4) - 4))"}, {"input": "4 8 4 11\n", "output": "(11) / (4) = 11/4, left: (11 / 4) = 11/4, 4, 8\nroll back, left: 4 8 4 11\n(4) - (11) = -7, left: (4 - 11) = -7, 4, 8\nroll back, left: 4 8 4 11\n(11) - (4) = 7, left: (11 - 4) = 7, 4, 8\n(4) - (7) = -3, left: (4 - (11 - 4)) = -3, 8\nroll back, left: (11 - 4) = 7, 4, 8\n(7) - (4) = 3, left: ((11 - 4) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 4) - 4)) = 24\nreach 24! expression: (8 * ((11 - 4) - 4))"}, {"input": "4 8 4 11\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 8, 11\n(8) / (11) = 8/11, left: (8 / 11) = 8/11, (4 * 4) = 16\nroll back, left: (4 * 4) = 16, 8, 11\nroll back, left: 4 8 4 11\n(4) - (4) = 0, left: (4 - 4) = 0, 8, 11\nroll back, left: 4 8 4 11\n(4) + (4) = 8, left: (4 + 4) = 8, 8, 11\n(11) - (8) = 3, left: (11 - (4 + 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (11 - (4 + 4))) = 24\nreach 24! expression: (8 * (11 - (4 + 4)))"}, {"input": "4 8 4 11\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 4, 11\n(4) / (11) = 4/11, left: (4 / 11) = 4/11, (4 - 8) = -4\nroll back, left: (4 - 8) = -4, 4, 11\nroll back, left: 4 8 4 11\n(4) + (8) = 12, left: (4 + 8) = 12, 4, 11\nroll back, left: 4 8 4 11\n(4) + (4) = 8, left: (4 + 4) = 8, 8, 11\n(11) - (8) = 3, left: (11 - 8) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (11 - 8)) = 24\nreach 24! expression: ((4 + 4) * (11 - 8))"}, {"input": "4 8 4 11\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 4, 11\nroll back, left: 4 8 4 11\n(4) * (8) = 32, left: (4 * 8) = 32, 4, 11\nroll back, left: 4 8 4 11\n(8) * (11) = 88, left: (8 * 11) = 88, 4, 4\nroll back, left: 4 8 4 11\n(11) - (8) = 3, left: (11 - 8) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (4 + 4)) = 24\nreach 24! expression: ((11 - 8) * (4 + 4))"}, {"input": "4 8 4 11\n", "output": "(4) * (11) = 44, left: (4 * 11) = 44, 8, 4\nroll back, left: 4 8 4 11\n(4) - (11) = -7, left: (4 - 11) = -7, 8, 4\n(8) / (-7) = -8/7, left: (8 / (4 - 11)) = -8/7, 4\nroll back, left: (4 - 11) = -7, 8, 4\nroll back, left: 4 8 4 11\n(11) - (4) = 7, left: (11 - 4) = 7, 8, 4\n(7) - (4) = 3, left: ((11 - 4) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 4) - 4)) = 24\nreach 24! expression: (8 * ((11 - 4) - 4))"}, {"input": "6 6 2 5\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (2 - 5)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (2 - 5))) = 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (5 - 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (5 - 2))) = 24\nreach 24! expression: (6 + (6 * (5 - 2)))"}, {"input": "6 6 2 5\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 6, 5\nroll back, left: 6 6 2 5\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, 6, 5\n(1/3) / (6) = 1/18, left: ((2 / 6) / 6) = 1/18, 5\nroll back, left: (2 / 6) = 1/3, 6, 5\nroll back, left: 6 6 2 5\n(5) - (2) = 3, left: (5 - 2) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (5 - 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (5 - 2))) = 24\nreach 24! expression: (6 + (6 * (5 - 2)))"}, {"input": "6 6 2 5\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 6, 5\nroll back, left: 6 6 2 5\n(2) - (6) = -4, left: (2 - 6) = -4, 6, 5\nroll back, left: 6 6 2 5\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 6, 2\nroll back, left: 6 6 2 5\n(2) - (5) = -3, left: (2 - 5) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (2 - 5)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (2 - 5))) = 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 6, 5\nroll back, left: 6 6 2 5\n(6) * (2) = 12, left: (6 * 2) = 12, 6, 5\nroll back, left: 6 6 2 5\n(2) + (5) = 7, left: (2 + 5) = 7, 6, 6\nroll back, left: 6 6 2 5\n(2) - (5) = -3, left: (2 - 5) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (2 - 5)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (2 - 5))) = 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 6, 2\nroll back, left: 6 6 2 5\n(6) + (5) = 11, left: (6 + 5) = 11, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (6 + 5) = 11\nroll back, left: (6 + 5) = 11, 6, 2\nroll back, left: 6 6 2 5\n(2) - (5) = -3, left: (2 - 5) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (2 - 5)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (2 - 5))) = 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "6 6 2 5\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 6, 2\n(2) - (6) = -4, left: (2 - 6) = -4, (6 + 5) = 11\nroll back, left: (6 + 5) = 11, 6, 2\nroll back, left: 6 6 2 5\n(5) - (6) = -1, left: (5 - 6) = -1, 6, 2\nroll back, left: 6 6 2 5\n(2) - (5) = -3, left: (2 - 5) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (2 - 5)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (2 - 5))) = 24\nreach 24! expression: (6 - (6 * (2 - 5)))"}, {"input": "13 2 1 5\n", "output": "(2) * (5) = 10, left: (2 * 5) = 10, 13, 1\n(13) + (1) = 14, left: (13 + 1) = 14, (2 * 5) = 10\n(10) + (14) = 24, left: ((2 * 5) + (13 + 1)) = 24\nreach 24! expression: ((2 * 5) + (13 + 1))"}, {"input": "13 2 1 5\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (2 + 1) = 3\n(3) * (8) = 24, left: ((2 + 1) * (13 - 5)) = 24\nreach 24! expression: ((2 + 1) * (13 - 5))"}, {"input": "13 2 1 5\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 13, 1\nroll back, left: 13 2 1 5\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 13, 1\n(1) + (2/5) = 7/5, left: (1 + (2 / 5)) = 7/5, 13\nroll back, left: (2 / 5) = 2/5, 13, 1\nroll back, left: 13 2 1 5\n(2) * (5) = 10, left: (2 * 5) = 10, 13, 1\n(13) + (1) = 14, left: (13 + 1) = 14, (2 * 5) = 10\n(10) + (14) = 24, left: ((2 * 5) + (13 + 1)) = 24\nreach 24! expression: ((2 * 5) + (13 + 1))"}, {"input": "13 2 1 5\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 13, 2\n(2) * (4) = 8, left: (2 * (5 - 1)) = 8, 13\nroll back, left: (5 - 1) = 4, 13, 2\nroll back, left: 13 2 1 5\n(2) * (1) = 2, left: (2 * 1) = 2, 13, 5\nroll back, left: 13 2 1 5\n(2) + (1) = 3, left: (2 + 1) = 3, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (2 + 1) = 3\n(3) * (8) = 24, left: ((2 + 1) * (13 - 5)) = 24\nreach 24! expression: ((2 + 1) * (13 - 5))"}, {"input": "13 2 1 5\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 1, 5\nroll back, left: 13 2 1 5\n(13) / (2) = 13/2, left: (13 / 2) = 13/2, 1, 5\n(1) + (13/2) = 15/2, left: (1 + (13 / 2)) = 15/2, 5\nroll back, left: (13 / 2) = 13/2, 1, 5\nroll back, left: 13 2 1 5\n(2) * (5) = 10, left: (2 * 5) = 10, 13, 1\n(13) + (1) = 14, left: (13 + 1) = 14, (2 * 5) = 10\n(10) + (14) = 24, left: ((2 * 5) + (13 + 1)) = 24\nreach 24! expression: ((2 * 5) + (13 + 1))"}, {"input": "13 2 1 5\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 13, 1\nroll back, left: 13 2 1 5\n(5) - (2) = 3, left: (5 - 2) = 3, 13, 1\n(3) / (1) = 3, left: ((5 - 2) / 1) = 3, 13\nroll back, left: (5 - 2) = 3, 13, 1\nroll back, left: 13 2 1 5\n(2) * (5) = 10, left: (2 * 5) = 10, 13, 1\n(13) + (1) = 14, left: (13 + 1) = 14, (2 * 5) = 10\n(10) + (14) = 24, left: ((2 * 5) + (13 + 1)) = 24\nreach 24! expression: ((2 * 5) + (13 + 1))"}, {"input": "13 2 1 5\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 13, 5\nroll back, left: 13 2 1 5\n(1) - (2) = -1, left: (1 - 2) = -1, 13, 5\nroll back, left: 13 2 1 5\n(2) + (1) = 3, left: (2 + 1) = 3, 13, 5\n(13) + (3) = 16, left: (13 + (2 + 1)) = 16, 5\nroll back, left: (2 + 1) = 3, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (2 + 1) = 3\n(3) * (8) = 24, left: ((2 + 1) * (13 - 5)) = 24\nreach 24! expression: ((2 + 1) * (13 - 5))"}, {"input": "11 9 3 13\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 9, 3\n(9) + (3) = 12, left: (9 + 3) = 12, (13 - 11) = 2\n(2) * (12) = 24, left: ((13 - 11) * (9 + 3)) = 24\nreach 24! expression: ((13 - 11) * (9 + 3))"}, {"input": "11 9 3 13\n", "output": "(9) + (3) = 12, left: (9 + 3) = 12, 11, 13\n(13) - (11) = 2, left: (13 - 11) = 2, (9 + 3) = 12\n(12) * (2) = 24, left: ((9 + 3) * (13 - 11)) = 24\nreach 24! expression: ((9 + 3) * (13 - 11))"}, {"input": "11 9 3 13\n", "output": "(11) / (9) = 11/9, left: (11 / 9) = 11/9, 3, 13\nroll back, left: 11 9 3 13\n(9) - (3) = 6, left: (9 - 3) = 6, 11, 13\nroll back, left: 11 9 3 13\n(3) - (9) = -6, left: (3 - 9) = -6, 11, 13\nroll back, left: 11 9 3 13\n(9) + (3) = 12, left: (9 + 3) = 12, 11, 13\n(13) - (11) = 2, left: (13 - 11) = 2, (9 + 3) = 12\n(12) * (2) = 24, left: ((9 + 3) * (13 - 11)) = 24\nreach 24! expression: ((9 + 3) * (13 - 11))"}, {"input": "11 9 3 13\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 11, 3\nroll back, left: 11 9 3 13\n(13) - (9) = 4, left: (13 - 9) = 4, 11, 3\nroll back, left: 11 9 3 13\n(11) * (9) = 99, left: (11 * 9) = 99, 3, 13\nroll back, left: 11 9 3 13\n(9) + (3) = 12, left: (9 + 3) = 12, 11, 13\n(13) - (11) = 2, left: (13 - 11) = 2, (9 + 3) = 12\n(12) * (2) = 24, left: ((9 + 3) * (13 - 11)) = 24\nreach 24! expression: ((9 + 3) * (13 - 11))"}, {"input": "11 9 3 13\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 11, 3\n(3) - (22) = -19, left: (3 - (9 + 13)) = -19, 11\nroll back, left: (9 + 13) = 22, 11, 3\nroll back, left: 11 9 3 13\n(9) / (13) = 9/13, left: (9 / 13) = 9/13, 11, 3\nroll back, left: 11 9 3 13\n(13) - (11) = 2, left: (13 - 11) = 2, 9, 3\n(9) + (3) = 12, left: (9 + 3) = 12, (13 - 11) = 2\n(2) * (12) = 24, left: ((13 - 11) * (9 + 3)) = 24\nreach 24! expression: ((13 - 11) * (9 + 3))"}, {"input": "7 11 7 13\n", "output": "(7) / (13) = 7/13, left: (7 / 13) = 7/13, 7, 11\n(7) / (7/13) = 13, left: (7 / (7 / 13)) = 13, 11\n(11) + (13) = 24, left: (11 + (7 / (7 / 13))) = 24\nreach 24! expression: (11 + (7 / (7 / 13)))"}, {"input": "7 11 7 13\n", "output": "(11) + (13) = 24, left: (11 + 13) = 24, 7, 7\n(24) - (7) = 17, left: ((11 + 13) - 7) = 17, 7\n(7) + (17) = 24, left: (7 + ((11 + 13) - 7)) = 24\nreach 24! expression: (7 + ((11 + 13) - 7))"}, {"input": "7 11 7 13\n", "output": "(11) / (7) = 11/7, left: (11 / 7) = 11/7, 7, 13\n(7) * (11/7) = 11, left: (7 * (11 / 7)) = 11, 13\n(13) + (11) = 24, left: (13 + (7 * (11 / 7))) = 24\nreach 24! expression: (13 + (7 * (11 / 7)))"}, {"input": "7 11 7 13\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 7, 13\n(13) - (7) = 6, left: (13 - 7) = 6, (11 - 7) = 4\n(4) * (6) = 24, left: ((11 - 7) * (13 - 7)) = 24\nreach 24! expression: ((11 - 7) * (13 - 7))"}, {"input": "6 11 3 9\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 11, 3\n(11) - (3) = 8, left: (11 - 3) = 8, (9 - 6) = 3\n(3) * (8) = 24, left: ((9 - 6) * (11 - 3)) = 24\nreach 24! expression: ((9 - 6) * (11 - 3))"}, {"input": "6 11 3 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (11 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (11 - 9))) = 24\nreach 24! expression: (3 * (6 + (11 - 9)))"}, {"input": "6 11 3 9\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 6, 9\n(6) - (9) = -3, left: (6 - 9) = -3, (3 - 11) = -8\n(-8) * (-3) = 24, left: ((3 - 11) * (6 - 9)) = 24\nreach 24! expression: ((3 - 11) * (6 - 9))"}, {"input": "6 11 3 9\n", "output": "(6) + (11) = 17, left: (6 + 11) = 17, 3, 9\n(17) - (9) = 8, left: ((6 + 11) - 9) = 8, 3\n(3) * (8) = 24, left: (3 * ((6 + 11) - 9)) = 24\nreach 24! expression: (3 * ((6 + 11) - 9))"}, {"input": "6 11 3 9\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 11, 3\n(11) + (-3) = 8, left: (11 + (6 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 + (6 - 9))) = 24\nreach 24! expression: (3 * (11 + (6 - 9)))"}, {"input": "6 11 3 9\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 11, 3\n(11) + (2/3) = 35/3, left: (11 + (6 / 9)) = 35/3, 3\n(3) - (35/3) = -26/3, left: (3 - (11 + (6 / 9))) = -26/3\nroll back, left: (11 + (6 / 9)) = 35/3, 3\nroll back, left: (6 / 9) = 2/3, 11, 3\nroll back, left: 6 11 3 9\n(6) - (9) = -3, left: (6 - 9) = -3, 11, 3\n(11) + (-3) = 8, left: (11 + (6 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 + (6 - 9))) = 24\nreach 24! expression: (3 * (11 + (6 - 9)))"}, {"input": "6 11 3 9\n", "output": "(3) / (11) = 3/11, left: (3 / 11) = 3/11, 6, 9\n(9) - (6) = 3, left: (9 - 6) = 3, (3 / 11) = 3/11\nroll back, left: (3 / 11) = 3/11, 6, 9\nroll back, left: 6 11 3 9\n(3) - (11) = -8, left: (3 - 11) = -8, 6, 9\n(9) - (6) = 3, left: (9 - 6) = 3, (3 - 11) = -8\nroll back, left: (3 - 11) = -8, 6, 9\n(6) - (9) = -3, left: (6 - 9) = -3, (3 - 11) = -8\n(-8) * (-3) = 24, left: ((3 - 11) * (6 - 9)) = 24\nreach 24! expression: ((3 - 11) * (6 - 9))"}, {"input": "6 11 3 9\n", "output": "(11) * (9) = 99, left: (11 * 9) = 99, 6, 3\nroll back, left: 6 11 3 9\n(11) / (9) = 11/9, left: (11 / 9) = 11/9, 6, 3\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, (11 / 9) = 11/9\nroll back, left: (11 / 9) = 11/9, 6, 3\nroll back, left: 6 11 3 9\n(11) - (9) = 2, left: (11 - 9) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (11 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (11 - 9))) = 24\nreach 24! expression: (3 * (6 + (11 - 9)))"}, {"input": "6 11 3 9\n", "output": "(6) * (9) = 54, left: (6 * 9) = 54, 11, 3\n(54) - (3) = 51, left: ((6 * 9) - 3) = 51, 11\nroll back, left: (6 * 9) = 54, 11, 3\n(11) / (54) = 11/54, left: (11 / (6 * 9)) = 11/54, 3\nroll back, left: (6 * 9) = 54, 11, 3\nroll back, left: 6 11 3 9\n(9) - (6) = 3, left: (9 - 6) = 3, 11, 3\n(11) - (3) = 8, left: (11 - 3) = 8, (9 - 6) = 3\n(3) * (8) = 24, left: ((9 - 6) * (11 - 3)) = 24\nreach 24! expression: ((9 - 6) * (11 - 3))"}, {"input": "7 4 4 5\n", "output": "(7) + (4) = 11, left: (7 + 4) = 11, 4, 5\n(11) - (5) = 6, left: ((7 + 4) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((7 + 4) - 5)) = 24\nreach 24! expression: (4 * ((7 + 4) - 5))"}, {"input": "7 4 4 5\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (5 - 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (5 - 4))) = 24\nreach 24! expression: (4 * (7 - (5 - 4)))"}, {"input": "7 4 4 5\n", "output": "(4) * (5) = 20, left: (4 * 5) = 20, 7, 4\n(7) + (20) = 27, left: (7 + (4 * 5)) = 27, 4\nroll back, left: (4 * 5) = 20, 7, 4\nroll back, left: 7 4 4 5\n(4) + (5) = 9, left: (4 + 5) = 9, 7, 4\nroll back, left: 7 4 4 5\n(5) - (4) = 1, left: (5 - 4) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (5 - 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (5 - 4))) = 24\nreach 24! expression: (4 * (7 - (5 - 4)))"}, {"input": "7 4 4 5\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 4, 5\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, (7 * 4) = 28\nroll back, left: (7 * 4) = 28, 4, 5\nroll back, left: 7 4 4 5\n(4) - (7) = -3, left: (4 - 7) = -3, 4, 5\nroll back, left: 7 4 4 5\n(7) + (4) = 11, left: (7 + 4) = 11, 4, 5\n(11) - (5) = 6, left: ((7 + 4) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((7 + 4) - 5)) = 24\nreach 24! expression: (4 * ((7 + 4) - 5))"}, {"input": "7 4 4 5\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 4, 5\n(5) + (4/7) = 39/7, left: (5 + (4 / 7)) = 39/7, 4\nroll back, left: (4 / 7) = 4/7, 4, 5\nroll back, left: 7 4 4 5\n(7) + (4) = 11, left: (7 + 4) = 11, 4, 5\n(4) * (5) = 20, left: (4 * 5) = 20, (7 + 4) = 11\nroll back, left: (7 + 4) = 11, 4, 5\n(11) - (5) = 6, left: ((7 + 4) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((7 + 4) - 5)) = 24\nreach 24! expression: (4 * ((7 + 4) - 5))"}, {"input": "7 4 4 5\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 7, 5\n(5) + (8) = 13, left: (5 + (4 + 4)) = 13, 7\nroll back, left: (4 + 4) = 8, 7, 5\nroll back, left: 7 4 4 5\n(4) - (4) = 0, left: (4 - 4) = 0, 7, 5\nroll back, left: 7 4 4 5\n(7) + (4) = 11, left: (7 + 4) = 11, 4, 5\n(11) - (5) = 6, left: ((7 + 4) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((7 + 4) - 5)) = 24\nreach 24! expression: (4 * ((7 + 4) - 5))"}, {"input": "7 4 4 5\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 7, 4\n(4) + (4/5) = 24/5, left: (4 + (4 / 5)) = 24/5, 7\nroll back, left: (4 / 5) = 4/5, 7, 4\nroll back, left: 7 4 4 5\n(4) + (5) = 9, left: (4 + 5) = 9, 7, 4\nroll back, left: 7 4 4 5\n(5) - (4) = 1, left: (5 - 4) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (5 - 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (5 - 4))) = 24\nreach 24! expression: (4 * (7 - (5 - 4)))"}, {"input": "8 2 2 12\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 2, 12\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) / (1/6) = 24, left: ((8 / 2) / (2 / 12)) = 24\nreach 24! expression: ((8 / 2) / (2 / 12))"}, {"input": "8 2 2 12\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 2, 12\n(12) / (2) = 6, left: (12 / 2) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((12 / 2) / (2 / 8)) = 24\nreach 24! expression: ((12 / 2) / (2 / 8))"}, {"input": "8 2 2 12\n", "output": "(2) + (12) = 14, left: (2 + 12) = 14, 8, 2\n(2) + (14) = 16, left: (2 + (2 + 12)) = 16, 8\n(8) + (16) = 24, left: (8 + (2 + (2 + 12))) = 24\nreach 24! expression: (8 + (2 + (2 + 12)))"}, {"input": "8 2 2 12\n", "output": "(2) + (12) = 14, left: (2 + 12) = 14, 8, 2\n(8) + (14) = 22, left: (8 + (2 + 12)) = 22, 2\n(2) + (22) = 24, left: (2 + (8 + (2 + 12))) = 24\nreach 24! expression: (2 + (8 + (2 + 12)))"}, {"input": "8 2 2 12\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 2, 12\n(2) * (-6) = -12, left: (2 * (2 - 8)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 * (2 - 8))) = 24\nreach 24! expression: (12 - (2 * (2 - 8)))"}, {"input": "8 2 2 12\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 8, 2\n(-10) - (2) = -12, left: ((2 - 12) - 2) = -12, 8\nroll back, left: (2 - 12) = -10, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (2 - 12) = -10\nroll back, left: (2 - 12) = -10, 8, 2\nroll back, left: 8 2 2 12\n(2) + (12) = 14, left: (2 + 12) = 14, 8, 2\n(2) + (14) = 16, left: (2 + (2 + 12)) = 16, 8\n(8) + (16) = 24, left: (8 + (2 + (2 + 12))) = 24\nreach 24! expression: (8 + (2 + (2 + 12)))"}, {"input": "8 2 2 12\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 8, 2\nroll back, left: 8 2 2 12\n(2) - (12) = -10, left: (2 - 12) = -10, 8, 2\n(2) - (-10) = 12, left: (2 - (2 - 12)) = 12, 8\nroll back, left: (2 - 12) = -10, 8, 2\nroll back, left: 8 2 2 12\n(2) + (12) = 14, left: (2 + 12) = 14, 8, 2\n(8) + (14) = 22, left: (8 + (2 + 12)) = 22, 2\n(2) + (22) = 24, left: (2 + (8 + (2 + 12))) = 24\nreach 24! expression: (2 + (8 + (2 + 12)))"}, {"input": "8 2 2 12\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 2, 12\n(12) / (2) = 6, left: (12 / 2) = 6, (8 * 2) = 16\n(6) / (16) = 3/8, left: ((12 / 2) / (8 * 2)) = 3/8\nroll back, left: (12 / 2) = 6, (8 * 2) = 16\nroll back, left: (8 * 2) = 16, 2, 12\nroll back, left: 8 2 2 12\n(2) - (8) = -6, left: (2 - 8) = -6, 2, 12\n(2) * (-6) = -12, left: (2 * (2 - 8)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 * (2 - 8))) = 24\nreach 24! expression: (12 - (2 * (2 - 8)))"}, {"input": "8 2 2 12\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 2, 12\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) * (1/6) = 2/3, left: ((8 / 2) * (2 / 12)) = 2/3\nroll back, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) + (1/6) = 25/6, left: ((8 / 2) + (2 / 12)) = 25/6\nroll back, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) / (1/6) = 24, left: ((8 / 2) / (2 / 12)) = 24\nreach 24! expression: ((8 / 2) / (2 / 12))"}, {"input": "8 2 2 12\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 2, 12\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) * (1/6) = 2/3, left: ((8 / 2) * (2 / 12)) = 2/3\nroll back, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) + (1/6) = 25/6, left: ((8 / 2) + (2 / 12)) = 25/6\nroll back, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) / (1/6) = 24, left: ((8 / 2) / (2 / 12)) = 24\nreach 24! expression: ((8 / 2) / (2 / 12))"}, {"input": "8 2 2 12\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 2, 12\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) * (1/6) = 2/3, left: ((8 / 2) * (2 / 12)) = 2/3\nroll back, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) + (1/6) = 25/6, left: ((8 / 2) + (2 / 12)) = 25/6\nroll back, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) / (1/6) = 24, left: ((8 / 2) / (2 / 12)) = 24\nreach 24! expression: ((8 / 2) / (2 / 12))"}, {"input": "8 2 2 12\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 2, 12\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) * (1/6) = 2/3, left: ((8 / 2) * (2 / 12)) = 2/3\nroll back, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) + (1/6) = 25/6, left: ((8 / 2) + (2 / 12)) = 25/6\nroll back, left: (2 / 12) = 1/6, (8 / 2) = 4\n(4) / (1/6) = 24, left: ((8 / 2) / (2 / 12)) = 24\nreach 24! expression: ((8 / 2) / (2 / 12))"}, {"input": "3 11 10 6\n", "output": "(11) + (6) = 17, left: (11 + 6) = 17, 3, 10\n(17) - (3) = 14, left: ((11 + 6) - 3) = 14, 10\n(10) + (14) = 24, left: (10 + ((11 + 6) - 3)) = 24\nreach 24! expression: (10 + ((11 + 6) - 3))"}, {"input": "3 11 10 6\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 3, 6\n(3) - (-1) = 4, left: (3 - (10 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (10 - 11))) = 24\nreach 24! expression: (6 * (3 - (10 - 11)))"}, {"input": "3 11 10 6\n", "output": "(11) + (6) = 17, left: (11 + 6) = 17, 3, 10\n(3) - (10) = -7, left: (3 - 10) = -7, (11 + 6) = 17\n(17) - (-7) = 24, left: ((11 + 6) - (3 - 10)) = 24\nreach 24! expression: ((11 + 6) - (3 - 10))"}, {"input": "3 11 10 6\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 11, 10\n(11) - (-3) = 14, left: (11 - (3 - 6)) = 14, 10\n(10) + (14) = 24, left: (10 + (11 - (3 - 6))) = 24\nreach 24! expression: (10 + (11 - (3 - 6)))"}, {"input": "3 11 10 6\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 3, 10\n(3) / (-5) = -3/5, left: (3 / (6 - 11)) = -3/5, 10\nroll back, left: (6 - 11) = -5, 3, 10\nroll back, left: 3 11 10 6\n(11) * (6) = 66, left: (11 * 6) = 66, 3, 10\nroll back, left: 3 11 10 6\n(11) + (6) = 17, left: (11 + 6) = 17, 3, 10\n(17) - (3) = 14, left: ((11 + 6) - 3) = 14, 10\n(10) + (14) = 24, left: (10 + ((11 + 6) - 3)) = 24\nreach 24! expression: (10 + ((11 + 6) - 3))"}, {"input": "3 11 10 6\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 11, 10\nroll back, left: 3 11 10 6\n(3) + (6) = 9, left: (3 + 6) = 9, 11, 10\nroll back, left: 3 11 10 6\n(6) / (3) = 2, left: (6 / 3) = 2, 11, 10\nroll back, left: 3 11 10 6\n(3) - (6) = -3, left: (3 - 6) = -3, 11, 10\n(11) - (-3) = 14, left: (11 - (3 - 6)) = 14, 10\n(10) + (14) = 24, left: (10 + (11 - (3 - 6))) = 24\nreach 24! expression: (10 + (11 - (3 - 6)))"}, {"input": "12 2 10 1\n", "output": "(12) + (2) = 14, left: (12 + 2) = 14, 10, 1\n(14) / (1) = 14, left: ((12 + 2) / 1) = 14, 10\n(10) + (14) = 24, left: (10 + ((12 + 2) / 1)) = 24\nreach 24! expression: (10 + ((12 + 2) / 1))"}, {"input": "12 2 10 1\n", "output": "(2) + (10) = 12, left: (2 + 10) = 12, 12, 1\n(12) + (12) = 24, left: (12 + (2 + 10)) = 24, 1\n(1) * (24) = 24, left: (1 * (12 + (2 + 10))) = 24\nreach 24! expression: (1 * (12 + (2 + 10)))"}, {"input": "12 2 10 1\n", "output": "(2) * (1) = 2, left: (2 * 1) = 2, 12, 10\n(10) + (2) = 12, left: (10 + (2 * 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (10 + (2 * 1))) = 24\nreach 24! expression: (12 + (10 + (2 * 1)))"}, {"input": "12 2 10 1\n", "output": "(2) + (10) = 12, left: (2 + 10) = 12, 12, 1\n(12) / (1) = 12, left: (12 / 1) = 12, (2 + 10) = 12\n(12) + (12) = 24, left: ((2 + 10) + (12 / 1)) = 24\nreach 24! expression: ((2 + 10) + (12 / 1))"}, {"input": "12 2 10 1\n", "output": "(12) + (2) = 14, left: (12 + 2) = 14, 10, 1\n(10) * (1) = 10, left: (10 * 1) = 10, (12 + 2) = 14\n(14) + (10) = 24, left: ((12 + 2) + (10 * 1)) = 24\nreach 24! expression: ((12 + 2) + (10 * 1))"}, {"input": "12 2 10 1\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 12, 1\n(12) + (1) = 13, left: (12 + 1) = 13, (10 / 2) = 5\nroll back, left: (10 / 2) = 5, 12, 1\nroll back, left: 12 2 10 1\n(10) - (2) = 8, left: (10 - 2) = 8, 12, 1\nroll back, left: 12 2 10 1\n(2) + (10) = 12, left: (2 + 10) = 12, 12, 1\n(12) / (1) = 12, left: (12 / 1) = 12, (2 + 10) = 12\n(12) + (12) = 24, left: ((2 + 10) + (12 / 1)) = 24\nreach 24! expression: ((2 + 10) + (12 / 1))"}, {"input": "12 2 10 1\n", "output": "(2) / (10) = 1/5, left: (2 / 10) = 1/5, 12, 1\nroll back, left: 12 2 10 1\n(10) - (2) = 8, left: (10 - 2) = 8, 12, 1\n(12) - (8) = 4, left: (12 - (10 - 2)) = 4, 1\nroll back, left: (10 - 2) = 8, 12, 1\nroll back, left: 12 2 10 1\n(2) + (10) = 12, left: (2 + 10) = 12, 12, 1\n(12) + (12) = 24, left: (12 + (2 + 10)) = 24, 1\n(1) * (24) = 24, left: (1 * (12 + (2 + 10))) = 24\nreach 24! expression: (1 * (12 + (2 + 10)))"}, {"input": "1 1 8 4\n", "output": "(8) + (4) = 12, left: (8 + 4) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (8 + 4) = 12\n(12) * (2) = 24, left: ((8 + 4) * (1 + 1)) = 24\nreach 24! expression: ((8 + 4) * (1 + 1))"}, {"input": "1 1 8 4\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (1 / 8) = 1/8\n(3) / (1/8) = 24, left: ((4 - 1) / (1 / 8)) = 24\nreach 24! expression: ((4 - 1) / (1 / 8))"}, {"input": "1 1 8 4\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 1, 4\n(7) - (1) = 6, left: ((8 - 1) - 1) = 6, 4\n(4) * (6) = 24, left: (4 * ((8 - 1) - 1)) = 24\nreach 24! expression: (4 * ((8 - 1) - 1))"}, {"input": "1 1 8 4\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 1, 8\n(4) - (1) = 3, left: ((1 * 4) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((1 * 4) - 1)) = 24\nreach 24! expression: (8 * ((1 * 4) - 1))"}, {"input": "1 1 8 4\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 1, 1\n(1) - (4) = -3, left: (1 - (8 - 4)) = -3, 1\nroll back, left: (8 - 4) = 4, 1, 1\nroll back, left: 1 1 8 4\n(8) * (4) = 32, left: (8 * 4) = 32, 1, 1\nroll back, left: 1 1 8 4\n(8) + (4) = 12, left: (8 + 4) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (8 + 4) = 12\n(12) * (2) = 24, left: ((8 + 4) * (1 + 1)) = 24\nreach 24! expression: ((8 + 4) * (1 + 1))"}, {"input": "1 1 8 4\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 1, 8\n(8) - (1) = 7, left: (8 - 1) = 7, (1 * 4) = 4\n(4) / (7) = 4/7, left: ((1 * 4) / (8 - 1)) = 4/7\nroll back, left: (8 - 1) = 7, (1 * 4) = 4\nroll back, left: (1 * 4) = 4, 1, 8\n(4) / (1) = 4, left: ((1 * 4) / 1) = 4, 8\nroll back, left: (1 * 4) = 4, 1, 8\n(4) - (1) = 3, left: ((1 * 4) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((1 * 4) - 1)) = 24\nreach 24! expression: (8 * ((1 * 4) - 1))"}, {"input": "1 1 8 4\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 1, 4\n(4) + (7) = 11, left: (4 + (8 - 1)) = 11, 1\n(1) + (11) = 12, left: (1 + (4 + (8 - 1))) = 12\nroll back, left: (4 + (8 - 1)) = 11, 1\nroll back, left: (8 - 1) = 7, 1, 4\n(1) / (7) = 1/7, left: (1 / (8 - 1)) = 1/7, 4\nroll back, left: (8 - 1) = 7, 1, 4\n(7) - (1) = 6, left: ((8 - 1) - 1) = 6, 4\n(4) * (6) = 24, left: (4 * ((8 - 1) - 1)) = 24\nreach 24! expression: (4 * ((8 - 1) - 1))"}, {"input": "1 1 8 4\n", "output": "(8) + (4) = 12, left: (8 + 4) = 12, 1, 1\n(1) - (1) = 0, left: (1 - 1) = 0, (8 + 4) = 12\nroll back, left: (8 + 4) = 12, 1, 1\n(1) * (1) = 1, left: (1 * 1) = 1, (8 + 4) = 12\n(1) - (12) = -11, left: ((1 * 1) - (8 + 4)) = -11\nroll back, left: (1 * 1) = 1, (8 + 4) = 12\nroll back, left: (8 + 4) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (8 + 4) = 12\n(12) * (2) = 24, left: ((8 + 4) * (1 + 1)) = 24\nreach 24! expression: ((8 + 4) * (1 + 1))"}, {"input": "2 6 10 6\n", "output": "(10) * (6) = 60, left: (10 * 6) = 60, 2, 6\n(60) / (2) = 30, left: ((10 * 6) / 2) = 30, 6\n(30) - (6) = 24, left: (((10 * 6) / 2) - 6) = 24\nreach 24! expression: (((10 * 6) / 2) - 6)"}, {"input": "2 6 10 6\n", "output": "(6) + (10) = 16, left: (6 + 10) = 16, 2, 6\n(6) + (16) = 22, left: (6 + (6 + 10)) = 22, 2\n(2) + (22) = 24, left: (2 + (6 + (6 + 10))) = 24\nreach 24! expression: (2 + (6 + (6 + 10)))"}, {"input": "2 6 10 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 2, 10\n(36) - (2) = 34, left: ((6 * 6) - 2) = 34, 10\n(34) - (10) = 24, left: (((6 * 6) - 2) - 10) = 24\nreach 24! expression: (((6 * 6) - 2) - 10)"}, {"input": "2 6 10 6\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (6 / 2)) = 30, 6\n(30) - (6) = 24, left: ((10 * (6 / 2)) - 6) = 24\nreach 24! expression: ((10 * (6 / 2)) - 6)"}, {"input": "2 6 10 6\n", "output": "(2) - (6) = -4, left: (2 - 6) = -4, 10, 6\nroll back, left: 2 6 10 6\n(6) / (2) = 3, left: (6 / 2) = 3, 10, 6\n(3) - (6) = -3, left: ((6 / 2) - 6) = -3, 10\nroll back, left: (6 / 2) = 3, 10, 6\n(10) + (3) = 13, left: (10 + (6 / 2)) = 13, 6\nroll back, left: (6 / 2) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (6 / 2)) = 30, 6\n(30) - (6) = 24, left: ((10 * (6 / 2)) - 6) = 24\nreach 24! expression: ((10 * (6 / 2)) - 6)"}, {"input": "2 6 10 6\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 2, 6\n(6) / (-4) = -3/2, left: (6 / (6 - 10)) = -3/2, 2\nroll back, left: (6 - 10) = -4, 2, 6\nroll back, left: 2 6 10 6\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, 2, 6\nroll back, left: 2 6 10 6\n(10) * (6) = 60, left: (10 * 6) = 60, 2, 6\n(60) / (2) = 30, left: ((10 * 6) / 2) = 30, 6\n(30) - (6) = 24, left: (((10 * 6) / 2) - 6) = 24\nreach 24! expression: (((10 * 6) / 2) - 6)"}, {"input": "2 6 10 6\n", "output": "(6) / (10) = 3/5, left: (6 / 10) = 3/5, 2, 6\n(2) * (6) = 12, left: (2 * 6) = 12, (6 / 10) = 3/5\nroll back, left: (6 / 10) = 3/5, 2, 6\nroll back, left: 2 6 10 6\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, 2, 6\nroll back, left: 2 6 10 6\n(6) + (10) = 16, left: (6 + 10) = 16, 2, 6\n(6) + (16) = 22, left: (6 + (6 + 10)) = 22, 2\n(2) + (22) = 24, left: (2 + (6 + (6 + 10))) = 24\nreach 24! expression: (2 + (6 + (6 + 10)))"}, {"input": "2 6 10 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 2, 10\nroll back, left: 2 6 10 6\n(6) / (6) = 1, left: (6 / 6) = 1, 2, 10\n(2) * (1) = 2, left: (2 * (6 / 6)) = 2, 10\nroll back, left: (6 / 6) = 1, 2, 10\nroll back, left: 2 6 10 6\n(6) * (6) = 36, left: (6 * 6) = 36, 2, 10\n(36) - (2) = 34, left: ((6 * 6) - 2) = 34, 10\n(34) - (10) = 24, left: (((6 * 6) - 2) - 10) = 24\nreach 24! expression: (((6 * 6) - 2) - 10)"}, {"input": "2 6 10 6\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 10, 6\n(3) - (6) = -3, left: ((6 / 2) - 6) = -3, 10\nroll back, left: (6 / 2) = 3, 10, 6\n(6) * (3) = 18, left: (6 * (6 / 2)) = 18, 10\n(18) / (10) = 9/5, left: ((6 * (6 / 2)) / 10) = 9/5\nroll back, left: (6 * (6 / 2)) = 18, 10\nroll back, left: (6 / 2) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (6 / 2)) = 30, 6\n(30) - (6) = 24, left: ((10 * (6 / 2)) - 6) = 24\nreach 24! expression: ((10 * (6 / 2)) - 6)"}, {"input": "9 12 12 5\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 12, 12\n(14) - (12) = 2, left: ((9 + 5) - 12) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 + 5) - 12)) = 24\nreach 24! expression: (12 * ((9 + 5) - 12))"}, {"input": "9 12 12 5\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 12, 5\n(5) + (-3) = 2, left: (5 + (9 - 12)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 + (9 - 12))) = 24\nreach 24! expression: (12 * (5 + (9 - 12)))"}, {"input": "9 12 12 5\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 9, 12\n(9) - (7) = 2, left: (9 - (12 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (9 - (12 - 5))) = 24\nreach 24! expression: (12 * (9 - (12 - 5)))"}, {"input": "9 12 12 5\n", "output": "(9) / (5) = 9/5, left: (9 / 5) = 9/5, 12, 12\n(12) - (12) = 0, left: (12 - 12) = 0, (9 / 5) = 9/5\nroll back, left: (9 / 5) = 9/5, 12, 12\nroll back, left: 9 12 12 5\n(9) * (5) = 45, left: (9 * 5) = 45, 12, 12\nroll back, left: 9 12 12 5\n(9) + (5) = 14, left: (9 + 5) = 14, 12, 12\n(14) - (12) = 2, left: ((9 + 5) - 12) = 2, 12\n(12) * (2) = 24, left: (12 * ((9 + 5) - 12)) = 24\nreach 24! expression: (12 * ((9 + 5) - 12))"}, {"input": "9 12 12 5\n", "output": "(12) - (12) = 0, left: (12 - 12) = 0, 9, 5\nroll back, left: 9 12 12 5\n(12) * (12) = 144, left: (12 * 12) = 144, 9, 5\n(5) / (9) = 5/9, left: (5 / 9) = 5/9, (12 * 12) = 144\nroll back, left: (12 * 12) = 144, 9, 5\nroll back, left: 9 12 12 5\n(9) - (12) = -3, left: (9 - 12) = -3, 12, 5\n(5) + (-3) = 2, left: (5 + (9 - 12)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 + (9 - 12))) = 24\nreach 24! expression: (12 * (5 + (9 - 12)))"}, {"input": "3 3 4 1\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 4, 1\n(4) * (1) = 4, left: (4 * 1) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (4 * 1)) = 24\nreach 24! expression: ((3 + 3) * (4 * 1))"}, {"input": "3 3 4 1\n", "output": "(3) * (1) = 3, left: (3 * 1) = 3, 3, 4\n(3) + (3) = 6, left: (3 + (3 * 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (3 * 1))) = 24\nreach 24! expression: (4 * (3 + (3 * 1)))"}, {"input": "3 3 4 1\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 4, 1\n(4) * (6) = 24, left: (4 * (3 + 3)) = 24, 1\n(1) * (24) = 24, left: (1 * (4 * (3 + 3))) = 24\nreach 24! expression: (1 * (4 * (3 + 3)))"}, {"input": "3 3 4 1\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 3, 1\n(1) + (7) = 8, left: (1 + (3 + 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (3 + 4))) = 24\nreach 24! expression: (3 * (1 + (3 + 4)))"}, {"input": "3 3 4 1\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 3, 4\n(3) * (4) = 12, left: (3 * 4) = 12, (3 - 1) = 2\n(2) * (12) = 24, left: ((3 - 1) * (3 * 4)) = 24\nreach 24! expression: ((3 - 1) * (3 * 4))"}, {"input": "3 3 4 1\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 4, 1\n(1) - (4) = -3, left: (1 - 4) = -3, (3 / 3) = 1\nroll back, left: (3 / 3) = 1, 4, 1\nroll back, left: 3 3 4 1\n(3) * (3) = 9, left: (3 * 3) = 9, 4, 1\nroll back, left: 3 3 4 1\n(3) + (3) = 6, left: (3 + 3) = 6, 4, 1\n(4) * (6) = 24, left: (4 * (3 + 3)) = 24, 1\n(1) * (24) = 24, left: (1 * (4 * (3 + 3))) = 24\nreach 24! expression: (1 * (4 * (3 + 3)))"}, {"input": "3 3 4 1\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 3, 4\n(3) - (4) = -1, left: (3 - 4) = -1, (3 - 1) = 2\n(2) / (-1) = -2, left: ((3 - 1) / (3 - 4)) = -2\nroll back, left: (3 - 4) = -1, (3 - 1) = 2\nroll back, left: (3 - 1) = 2, 3, 4\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, (3 - 1) = 2\nroll back, left: (3 - 1) = 2, 3, 4\n(3) * (4) = 12, left: (3 * 4) = 12, (3 - 1) = 2\n(2) * (12) = 24, left: ((3 - 1) * (3 * 4)) = 24\nreach 24! expression: ((3 - 1) * (3 * 4))"}, {"input": "3 3 4 1\n", "output": "(3) * (1) = 3, left: (3 * 1) = 3, 3, 4\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, (3 * 1) = 3\n(3) - (3/4) = 9/4, left: ((3 * 1) - (3 / 4)) = 9/4\nroll back, left: (3 / 4) = 3/4, (3 * 1) = 3\nroll back, left: (3 * 1) = 3, 3, 4\n(3) * (4) = 12, left: (3 * 4) = 12, (3 * 1) = 3\nroll back, left: (3 * 1) = 3, 3, 4\n(3) + (3) = 6, left: (3 + (3 * 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (3 * 1))) = 24\nreach 24! expression: (4 * (3 + (3 * 1)))"}, {"input": "3 3 4 1\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 3, 1\n(3/4) / (1) = 3/4, left: ((3 / 4) / 1) = 3/4, 3\nroll back, left: (3 / 4) = 3/4, 3, 1\nroll back, left: 3 3 4 1\n(3) + (4) = 7, left: (3 + 4) = 7, 3, 1\n(7) / (1) = 7, left: ((3 + 4) / 1) = 7, 3\nroll back, left: (3 + 4) = 7, 3, 1\n(1) + (7) = 8, left: (1 + (3 + 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (3 + 4))) = 24\nreach 24! expression: (3 * (1 + (3 + 4)))"}, {"input": "3 3 4 1\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 4, 1\nroll back, left: 3 3 4 1\n(3) * (3) = 9, left: (3 * 3) = 9, 4, 1\n(9) - (4) = 5, left: ((3 * 3) - 4) = 5, 1\nroll back, left: (3 * 3) = 9, 4, 1\nroll back, left: 3 3 4 1\n(3) + (3) = 6, left: (3 + 3) = 6, 4, 1\n(4) * (1) = 4, left: (4 * 1) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (4 * 1)) = 24\nreach 24! expression: ((3 + 3) * (4 * 1))"}, {"input": "12 7 10 6\n", "output": "(12) * (7) = 84, left: (12 * 7) = 84, 10, 6\n(10) * (6) = 60, left: (10 * 6) = 60, (12 * 7) = 84\n(84) - (60) = 24, left: ((12 * 7) - (10 * 6)) = 24\nreach 24! expression: ((12 * 7) - (10 * 6))"}, {"input": "12 7 10 6\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 7, 10\n(7) / (1/2) = 14, left: (7 / (6 / 12)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 / (6 / 12))) = 24\nreach 24! expression: (10 + (7 / (6 / 12)))"}, {"input": "12 7 10 6\n", "output": "(10) * (6) = 60, left: (10 * 6) = 60, 12, 7\n(12) * (7) = 84, left: (12 * 7) = 84, (10 * 6) = 60\n(84) - (60) = 24, left: ((12 * 7) - (10 * 6)) = 24\nreach 24! expression: ((12 * 7) - (10 * 6))"}, {"input": "12 7 10 6\n", "output": "(12) * (7) = 84, left: (12 * 7) = 84, 10, 6\n(84) / (6) = 14, left: ((12 * 7) / 6) = 14, 10\n(10) + (14) = 24, left: (10 + ((12 * 7) / 6)) = 24\nreach 24! expression: (10 + ((12 * 7) / 6))"}, {"input": "12 7 10 6\n", "output": "(7) / (6) = 7/6, left: (7 / 6) = 7/6, 12, 10\n(12) * (7/6) = 14, left: (12 * (7 / 6)) = 14, 10\n(10) + (14) = 24, left: (10 + (12 * (7 / 6))) = 24\nreach 24! expression: (10 + (12 * (7 / 6)))"}, {"input": "3 2 7 3\n", "output": "(3) + (7) = 10, left: (3 + 7) = 10, 2, 3\n(10) - (2) = 8, left: ((3 + 7) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 + 7) - 2)) = 24\nreach 24! expression: (3 * ((3 + 7) - 2))"}, {"input": "3 2 7 3\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 3, 7\n(7) - (-1) = 8, left: (7 - (2 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (2 - 3))) = 24\nreach 24! expression: (3 * (7 - (2 - 3)))"}, {"input": "3 2 7 3\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (3 - 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (3 - 2))) = 24\nreach 24! expression: (3 * (7 + (3 - 2)))"}, {"input": "3 2 7 3\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (2 + 7)) = 27, 3\n(27) - (3) = 24, left: ((3 * (2 + 7)) - 3) = 24\nreach 24! expression: ((3 * (2 + 7)) - 3)"}, {"input": "3 2 7 3\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 3, 3\n(7/2) - (3) = 1/2, left: ((7 / 2) - 3) = 1/2, 3\nroll back, left: (7 / 2) = 7/2, 3, 3\n(3) * (7/2) = 21/2, left: (3 * (7 / 2)) = 21/2, 3\nroll back, left: (7 / 2) = 7/2, 3, 3\nroll back, left: 3 2 7 3\n(2) + (7) = 9, left: (2 + 7) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (2 + 7)) = 27, 3\n(27) - (3) = 24, left: ((3 * (2 + 7)) - 3) = 24\nreach 24! expression: ((3 * (2 + 7)) - 3)"}, {"input": "3 2 7 3\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 3, 7\n(5) - (7) = -2, left: ((2 + 3) - 7) = -2, 3\nroll back, left: (2 + 3) = 5, 3, 7\nroll back, left: 3 2 7 3\n(2) - (3) = -1, left: (2 - 3) = -1, 3, 7\n(7) / (-1) = -7, left: (7 / (2 - 3)) = -7, 3\nroll back, left: (2 - 3) = -1, 3, 7\n(7) - (-1) = 8, left: (7 - (2 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (2 - 3))) = 24\nreach 24! expression: (3 * (7 - (2 - 3)))"}, {"input": "3 2 7 3\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 2, 3\n(2) * (-4) = -8, left: (2 * (3 - 7)) = -8, 3\nroll back, left: (3 - 7) = -4, 2, 3\n(-4) - (2) = -6, left: ((3 - 7) - 2) = -6, 3\nroll back, left: (3 - 7) = -4, 2, 3\nroll back, left: 3 2 7 3\n(3) + (7) = 10, left: (3 + 7) = 10, 2, 3\n(10) - (2) = 8, left: ((3 + 7) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 + 7) - 2)) = 24\nreach 24! expression: (3 * ((3 + 7) - 2))"}, {"input": "3 2 7 3\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 3, 7\n(3) + (7) = 10, left: (3 + 7) = 10, (2 - 3) = -1\nroll back, left: (2 - 3) = -1, 3, 7\n(3) * (7) = 21, left: (3 * 7) = 21, (2 - 3) = -1\n(21) / (-1) = -21, left: ((3 * 7) / (2 - 3)) = -21\nroll back, left: (3 * 7) = 21, (2 - 3) = -1\nroll back, left: (2 - 3) = -1, 3, 7\n(7) - (-1) = 8, left: (7 - (2 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (2 - 3))) = 24\nreach 24! expression: (3 * (7 - (2 - 3)))"}, {"input": "3 2 7 3\n", "output": "(2) / (3) = 2/3, left: (2 / 3) = 2/3, 7, 3\nroll back, left: 3 2 7 3\n(3) + (2) = 5, left: (3 + 2) = 5, 7, 3\n(3) * (5) = 15, left: (3 * (3 + 2)) = 15, 7\nroll back, left: (3 + 2) = 5, 7, 3\nroll back, left: 3 2 7 3\n(3) - (2) = 1, left: (3 - 2) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (3 - 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (3 - 2))) = 24\nreach 24! expression: (3 * (7 + (3 - 2)))"}, {"input": "4 8 9 10\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 8, 9\n(9) - (6) = 3, left: (9 - (10 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 - (10 - 4))) = 24\nreach 24! expression: (8 * (9 - (10 - 4)))"}, {"input": "4 8 9 10\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (10 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (10 - 9))) = 24\nreach 24! expression: (8 * (4 - (10 - 9)))"}, {"input": "4 8 9 10\n", "output": "(4) + (9) = 13, left: (4 + 9) = 13, 8, 10\n(13) - (10) = 3, left: ((4 + 9) - 10) = 3, 8\n(8) * (3) = 24, left: (8 * ((4 + 9) - 10)) = 24\nreach 24! expression: (8 * ((4 + 9) - 10))"}, {"input": "4 8 9 10\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 4, 9\nroll back, left: 4 8 9 10\n(9) / (8) = 9/8, left: (9 / 8) = 9/8, 4, 10\n(4) - (10) = -6, left: (4 - 10) = -6, (9 / 8) = 9/8\nroll back, left: (9 / 8) = 9/8, 4, 10\nroll back, left: 4 8 9 10\n(4) + (9) = 13, left: (4 + 9) = 13, 8, 10\n(13) - (10) = 3, left: ((4 + 9) - 10) = 3, 8\n(8) * (3) = 24, left: (8 * ((4 + 9) - 10)) = 24\nreach 24! expression: (8 * ((4 + 9) - 10))"}, {"input": "4 8 9 10\n", "output": "(8) * (10) = 80, left: (8 * 10) = 80, 4, 9\nroll back, left: 4 8 9 10\n(4) / (9) = 4/9, left: (4 / 9) = 4/9, 8, 10\n(4/9) / (8) = 1/18, left: ((4 / 9) / 8) = 1/18, 10\nroll back, left: (4 / 9) = 4/9, 8, 10\nroll back, left: 4 8 9 10\n(4) + (9) = 13, left: (4 + 9) = 13, 8, 10\n(13) - (10) = 3, left: ((4 + 9) - 10) = 3, 8\n(8) * (3) = 24, left: (8 * ((4 + 9) - 10)) = 24\nreach 24! expression: (8 * ((4 + 9) - 10))"}, {"input": "4 8 9 10\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 4, 8\n(4) / (1) = 4, left: (4 / (10 - 9)) = 4, 8\n(8) - (4) = 4, left: (8 - (4 / (10 - 9))) = 4\nroll back, left: (4 / (10 - 9)) = 4, 8\nroll back, left: (10 - 9) = 1, 4, 8\n(1) / (4) = 1/4, left: ((10 - 9) / 4) = 1/4, 8\nroll back, left: (10 - 9) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (10 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (10 - 9))) = 24\nreach 24! expression: (8 * (4 - (10 - 9)))"}, {"input": "4 8 9 10\n", "output": "(4) / (10) = 2/5, left: (4 / 10) = 2/5, 8, 9\n(8) / (2/5) = 20, left: (8 / (4 / 10)) = 20, 9\nroll back, left: (4 / 10) = 2/5, 8, 9\nroll back, left: 4 8 9 10\n(4) * (10) = 40, left: (4 * 10) = 40, 8, 9\nroll back, left: 4 8 9 10\n(10) - (4) = 6, left: (10 - 4) = 6, 8, 9\n(9) - (6) = 3, left: (9 - (10 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 - (10 - 4))) = 24\nreach 24! expression: (8 * (9 - (10 - 4)))"}, {"input": "8 2 5 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (5 / 5))) = 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 8, 5\n(8) - (3) = 5, left: (8 - (5 - 2)) = 5, 5\nroll back, left: (5 - 2) = 3, 8, 5\nroll back, left: 8 2 5 5\n(2) - (5) = -3, left: (2 - 5) = -3, 8, 5\nroll back, left: 8 2 5 5\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (5 / 5))) = 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 2, 5\nroll back, left: 8 2 5 5\n(2) * (5) = 10, left: (2 * 5) = 10, 8, 5\nroll back, left: 8 2 5 5\n(8) - (5) = 3, left: (8 - 5) = 3, 2, 5\nroll back, left: 8 2 5 5\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (5 / 5))) = 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 8, 5\nroll back, left: 8 2 5 5\n(5) - (8) = -3, left: (5 - 8) = -3, 2, 5\n(5) + (-3) = 2, left: (5 + (5 - 8)) = 2, 2\nroll back, left: (5 - 8) = -3, 2, 5\nroll back, left: 8 2 5 5\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (5 / 5))) = 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(8) + (2) = 10, left: (8 + 2) = 10, 5, 5\n(10) / (5) = 2, left: ((8 + 2) / 5) = 2, 5\nroll back, left: (8 + 2) = 10, 5, 5\nroll back, left: 8 2 5 5\n(5) + (5) = 10, left: (5 + 5) = 10, 8, 2\nroll back, left: 8 2 5 5\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (5 / 5))) = 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "8 2 5 5\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 8, 5\nroll back, left: 8 2 5 5\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 8, 5\n(2/5) - (8) = -38/5, left: ((2 / 5) - 8) = -38/5, 5\nroll back, left: (2 / 5) = 2/5, 8, 5\nroll back, left: 8 2 5 5\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (5 / 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (5 / 5))) = 24\nreach 24! expression: (8 * (2 + (5 / 5)))"}, {"input": "7 7 8 11\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 7, 8\n(7) - (4) = 3, left: (7 - (11 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (11 - 7))) = 24\nreach 24! expression: (8 * (7 - (11 - 7)))"}, {"input": "7 7 8 11\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 8, 11\n(14) - (11) = 3, left: ((7 + 7) - 11) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 7) - 11)) = 24\nreach 24! expression: (8 * ((7 + 7) - 11))"}, {"input": "7 7 8 11\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 7, 8\n(8) + (4) = 12, left: (8 + (11 - 7)) = 12, 7\n(7) + (12) = 19, left: (7 + (8 + (11 - 7))) = 19\nroll back, left: (8 + (11 - 7)) = 12, 7\nroll back, left: (11 - 7) = 4, 7, 8\n(7) * (4) = 28, left: (7 * (11 - 7)) = 28, 8\nroll back, left: (11 - 7) = 4, 7, 8\n(7) - (4) = 3, left: (7 - (11 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (11 - 7))) = 24\nreach 24! expression: (8 * (7 - (11 - 7)))"}, {"input": "7 7 8 11\n", "output": "(8) / (11) = 8/11, left: (8 / 11) = 8/11, 7, 7\nroll back, left: 7 7 8 11\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, 7, 7\nroll back, left: 7 7 8 11\n(7) + (11) = 18, left: (7 + 11) = 18, 7, 8\nroll back, left: 7 7 8 11\n(11) - (7) = 4, left: (11 - 7) = 4, 7, 8\n(7) - (4) = 3, left: (7 - (11 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (11 - 7))) = 24\nreach 24! expression: (8 * (7 - (11 - 7)))"}, {"input": "7 7 8 11\n", "output": "(7) - (7) = 0, left: (7 - 7) = 0, 8, 11\n(11) + (0) = 11, left: (11 + (7 - 7)) = 11, 8\nroll back, left: (7 - 7) = 0, 8, 11\nroll back, left: 7 7 8 11\n(7) - (7) = 0, left: (7 - 7) = 0, 8, 11\nroll back, left: 7 7 8 11\n(7) + (7) = 14, left: (7 + 7) = 14, 8, 11\n(14) - (11) = 3, left: ((7 + 7) - 11) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 7) - 11)) = 24\nreach 24! expression: (8 * ((7 + 7) - 11))"}, {"input": "7 7 8 11\n", "output": "(7) * (7) = 49, left: (7 * 7) = 49, 8, 11\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, (7 * 7) = 49\nroll back, left: (7 * 7) = 49, 8, 11\nroll back, left: 7 7 8 11\n(7) / (7) = 1, left: (7 / 7) = 1, 8, 11\nroll back, left: 7 7 8 11\n(7) + (7) = 14, left: (7 + 7) = 14, 8, 11\n(14) - (11) = 3, left: ((7 + 7) - 11) = 3, 8\n(8) * (3) = 24, left: (8 * ((7 + 7) - 11)) = 24\nreach 24! expression: (8 * ((7 + 7) - 11))"}, {"input": "1 12 5 3\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 1, 3\n(1) + (7) = 8, left: (1 + (12 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (12 - 5))) = 24\nreach 24! expression: (3 * (1 + (12 - 5)))"}, {"input": "1 12 5 3\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 1, 12\n(12) / (1) = 12, left: (12 / 1) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (12 / 1)) = 24\nreach 24! expression: ((5 - 3) * (12 / 1))"}, {"input": "1 12 5 3\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (12 / 3) = 4\n(4) * (6) = 24, left: ((12 / 3) * (1 + 5)) = 24\nreach 24! expression: ((12 / 3) * (1 + 5))"}, {"input": "1 12 5 3\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 12, 3\n(5) - (3) = 2, left: ((1 * 5) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((1 * 5) - 3)) = 24\nreach 24! expression: (12 * ((1 * 5) - 3))"}, {"input": "1 12 5 3\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 12, 3\n(5) - (3) = 2, left: ((1 * 5) - 3) = 2, 12\n(2) - (12) = -10, left: (((1 * 5) - 3) - 12) = -10\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) + (2) = 14, left: (12 + ((1 * 5) - 3)) = 14\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) - (2) = 10, left: (12 - ((1 * 5) - 3)) = 10\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((1 * 5) - 3)) = 24\nreach 24! expression: (12 * ((1 * 5) - 3))"}, {"input": "1 12 5 3\n", "output": "(5) / (12) = 5/12, left: (5 / 12) = 5/12, 1, 3\nroll back, left: 1 12 5 3\n(12) * (5) = 60, left: (12 * 5) = 60, 1, 3\nroll back, left: 1 12 5 3\n(12) - (5) = 7, left: (12 - 5) = 7, 1, 3\n(3) + (7) = 10, left: (3 + (12 - 5)) = 10, 1\nroll back, left: (12 - 5) = 7, 1, 3\n(1) + (7) = 8, left: (1 + (12 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (12 - 5))) = 24\nreach 24! expression: (3 * (1 + (12 - 5)))"}, {"input": "1 12 5 3\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 1, 5\n(1) - (5) = -4, left: (1 - 5) = -4, (12 / 3) = 4\nroll back, left: (12 / 3) = 4, 1, 5\n(5) - (1) = 4, left: (5 - 1) = 4, (12 / 3) = 4\n(4) * (4) = 16, left: ((12 / 3) * (5 - 1)) = 16\nroll back, left: (5 - 1) = 4, (12 / 3) = 4\nroll back, left: (12 / 3) = 4, 1, 5\n(1) + (5) = 6, left: (1 + 5) = 6, (12 / 3) = 4\n(4) * (6) = 24, left: ((12 / 3) * (1 + 5)) = 24\nreach 24! expression: ((12 / 3) * (1 + 5))"}, {"input": "1 12 5 3\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 1, 3\n(1) * (7) = 7, left: (1 * (12 - 5)) = 7, 3\n(7) - (3) = 4, left: ((1 * (12 - 5)) - 3) = 4\nroll back, left: (1 * (12 - 5)) = 7, 3\nroll back, left: (12 - 5) = 7, 1, 3\n(7) - (1) = 6, left: ((12 - 5) - 1) = 6, 3\nroll back, left: (12 - 5) = 7, 1, 3\n(1) + (7) = 8, left: (1 + (12 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 + (12 - 5))) = 24\nreach 24! expression: (3 * (1 + (12 - 5)))"}, {"input": "1 12 5 3\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 12, 3\n(5) - (3) = 2, left: ((1 * 5) - 3) = 2, 12\n(2) - (12) = -10, left: (((1 * 5) - 3) - 12) = -10\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) + (2) = 14, left: (12 + ((1 * 5) - 3)) = 14\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) - (2) = 10, left: (12 - ((1 * 5) - 3)) = 10\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((1 * 5) - 3)) = 24\nreach 24! expression: (12 * ((1 * 5) - 3))"}, {"input": "1 12 5 3\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 12, 3\n(5) - (3) = 2, left: ((1 * 5) - 3) = 2, 12\n(2) - (12) = -10, left: (((1 * 5) - 3) - 12) = -10\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) + (2) = 14, left: (12 + ((1 * 5) - 3)) = 14\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) - (2) = 10, left: (12 - ((1 * 5) - 3)) = 10\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((1 * 5) - 3)) = 24\nreach 24! expression: (12 * ((1 * 5) - 3))"}, {"input": "1 12 5 3\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 12, 3\n(5) - (3) = 2, left: ((1 * 5) - 3) = 2, 12\n(2) - (12) = -10, left: (((1 * 5) - 3) - 12) = -10\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) + (2) = 14, left: (12 + ((1 * 5) - 3)) = 14\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) - (2) = 10, left: (12 - ((1 * 5) - 3)) = 10\nroll back, left: ((1 * 5) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((1 * 5) - 3)) = 24\nreach 24! expression: (12 * ((1 * 5) - 3))"}, {"input": "1 9 2 7\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 2, 7\n(2) * (7) = 14, left: (2 * 7) = 14, (1 + 9) = 10\n(10) + (14) = 24, left: ((1 + 9) + (2 * 7)) = 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "1 9 2 7\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 1, 7\n(7) + (18) = 25, left: (7 + (9 * 2)) = 25, 1\n(25) - (1) = 24, left: ((7 + (9 * 2)) - 1) = 24\nreach 24! expression: ((7 + (9 * 2)) - 1)"}, {"input": "1 9 2 7\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 2, 7\n(2) + (10) = 12, left: (2 + (1 + 9)) = 12, 7\nroll back, left: (1 + 9) = 10, 2, 7\n(2) / (10) = 1/5, left: (2 / (1 + 9)) = 1/5, 7\n(7) - (1/5) = 34/5, left: (7 - (2 / (1 + 9))) = 34/5\nroll back, left: (2 / (1 + 9)) = 1/5, 7\nroll back, left: (1 + 9) = 10, 2, 7\n(2) * (7) = 14, left: (2 * 7) = 14, (1 + 9) = 10\n(10) + (14) = 24, left: ((1 + 9) + (2 * 7)) = 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "1 9 2 7\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 2, 7\n(7) - (-8) = 15, left: (7 - (1 - 9)) = 15, 2\n(15) - (2) = 13, left: ((7 - (1 - 9)) - 2) = 13\nroll back, left: (7 - (1 - 9)) = 15, 2\nroll back, left: (1 - 9) = -8, 2, 7\nroll back, left: 1 9 2 7\n(1) + (9) = 10, left: (1 + 9) = 10, 2, 7\n(2) * (7) = 14, left: (2 * 7) = 14, (1 + 9) = 10\n(10) + (14) = 24, left: ((1 + 9) + (2 * 7)) = 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "1 9 2 7\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 9, 7\n(-1) / (7) = -1/7, left: ((1 - 2) / 7) = -1/7, 9\n(-1/7) - (9) = -64/7, left: (((1 - 2) / 7) - 9) = -64/7\nroll back, left: ((1 - 2) / 7) = -1/7, 9\nroll back, left: (1 - 2) = -1, 9, 7\nroll back, left: 1 9 2 7\n(9) * (2) = 18, left: (9 * 2) = 18, 1, 7\n(7) + (18) = 25, left: (7 + (9 * 2)) = 25, 1\n(25) - (1) = 24, left: ((7 + (9 * 2)) - 1) = 24\nreach 24! expression: ((7 + (9 * 2)) - 1)"}, {"input": "1 9 2 7\n", "output": "(1) / (9) = 1/9, left: (1 / 9) = 1/9, 2, 7\n(2) + (7) = 9, left: (2 + 7) = 9, (1 / 9) = 1/9\nroll back, left: (1 / 9) = 1/9, 2, 7\nroll back, left: 1 9 2 7\n(9) / (1) = 9, left: (9 / 1) = 9, 2, 7\nroll back, left: 1 9 2 7\n(1) + (9) = 10, left: (1 + 9) = 10, 2, 7\n(2) * (7) = 14, left: (2 * 7) = 14, (1 + 9) = 10\n(10) + (14) = 24, left: ((1 + 9) + (2 * 7)) = 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "1 9 2 7\n", "output": "(9) + (7) = 16, left: (9 + 7) = 16, 1, 2\n(2) * (16) = 32, left: (2 * (9 + 7)) = 32, 1\n(1) - (32) = -31, left: (1 - (2 * (9 + 7))) = -31\nroll back, left: (2 * (9 + 7)) = 32, 1\nroll back, left: (9 + 7) = 16, 1, 2\nroll back, left: 1 9 2 7\n(1) + (9) = 10, left: (1 + 9) = 10, 2, 7\n(2) * (7) = 14, left: (2 * 7) = 14, (1 + 9) = 10\n(10) + (14) = 24, left: ((1 + 9) + (2 * 7)) = 24\nreach 24! expression: ((1 + 9) + (2 * 7))"}, {"input": "10 3 10 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 10, 10\n(10) - (10) = 0, left: (10 - 10) = 0, (3 * 8) = 24\n(24) - (0) = 24, left: ((3 * 8) - (10 - 10)) = 24\nreach 24! expression: ((3 * 8) - (10 - 10))"}, {"input": "10 3 10 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 10, 10\n(10) / (10) = 1, left: (10 / 10) = 1, (3 * 8) = 24\n(24) / (1) = 24, left: ((3 * 8) / (10 / 10)) = 24\nreach 24! expression: ((3 * 8) / (10 / 10))"}, {"input": "10 3 10 8\n", "output": "(3) - (10) = -7, left: (3 - 10) = -7, 10, 8\n(10) + (-7) = 3, left: (10 + (3 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 + (3 - 10))) = 24\nreach 24! expression: (8 * (10 + (3 - 10)))"}, {"input": "10 3 10 8\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 3, 8\n(1) / (8) = 1/8, left: ((10 / 10) / 8) = 1/8, 3\n(3) / (1/8) = 24, left: (3 / ((10 / 10) / 8)) = 24\nreach 24! expression: (3 / ((10 / 10) / 8))"}, {"input": "10 3 10 8\n", "output": "(10) * (8) = 80, left: (10 * 8) = 80, 10, 3\n(3) * (80) = 240, left: (3 * (10 * 8)) = 240, 10\n(240) / (10) = 24, left: ((3 * (10 * 8)) / 10) = 24\nreach 24! expression: ((3 * (10 * 8)) / 10)"}, {"input": "10 3 10 8\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 10, 10\n(10) / (10) = 1, left: (10 / 10) = 1, (3 - 8) = -5\nroll back, left: (3 - 8) = -5, 10, 10\nroll back, left: 10 3 10 8\n(8) - (3) = 5, left: (8 - 3) = 5, 10, 10\nroll back, left: 10 3 10 8\n(3) * (8) = 24, left: (3 * 8) = 24, 10, 10\n(10) - (10) = 0, left: (10 - 10) = 0, (3 * 8) = 24\n(24) - (0) = 24, left: ((3 * 8) - (10 - 10)) = 24\nreach 24! expression: ((3 * 8) - (10 - 10))"}, {"input": "6 2 9 6\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (9 + 6)) = 30, 6\n(30) - (6) = 24, left: ((2 * (9 + 6)) - 6) = 24\nreach 24! expression: ((2 * (9 + 6)) - 6)"}, {"input": "6 2 9 6\n", "output": "(6) * (9) = 54, left: (6 * 9) = 54, 2, 6\n(54) - (6) = 48, left: ((6 * 9) - 6) = 48, 2\n(48) / (2) = 24, left: (((6 * 9) - 6) / 2) = 24\nreach 24! expression: (((6 * 9) - 6) / 2)"}, {"input": "6 2 9 6\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (6 + 2) = 8\n(8) * (3) = 24, left: ((6 + 2) * (9 - 6)) = 24\nreach 24! expression: ((6 + 2) * (9 - 6))"}, {"input": "6 2 9 6\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 9, 6\n(9) * (6) = 54, left: (9 * 6) = 54, (2 / 6) = 1/3\nroll back, left: (2 / 6) = 1/3, 9, 6\nroll back, left: 6 2 9 6\n(6) + (2) = 8, left: (6 + 2) = 8, 9, 6\n(9) + (8) = 17, left: (9 + (6 + 2)) = 17, 6\nroll back, left: (6 + 2) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (6 + 2) = 8\n(8) * (3) = 24, left: ((6 + 2) * (9 - 6)) = 24\nreach 24! expression: ((6 + 2) * (9 - 6))"}, {"input": "6 2 9 6\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 6, 2\n(6) + (2/3) = 20/3, left: (6 + (6 / 9)) = 20/3, 2\nroll back, left: (6 / 9) = 2/3, 6, 2\nroll back, left: 6 2 9 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 6, 2\nroll back, left: 6 2 9 6\n(9) + (6) = 15, left: (9 + 6) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (9 + 6)) = 30, 6\n(30) - (6) = 24, left: ((2 * (9 + 6)) - 6) = 24\nreach 24! expression: ((2 * (9 + 6)) - 6)"}, {"input": "6 2 9 6\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 9, 6\n(9) + (6) = 15, left: (9 + 6) = 15, (6 - 2) = 4\n(4) / (15) = 4/15, left: ((6 - 2) / (9 + 6)) = 4/15\nroll back, left: (9 + 6) = 15, (6 - 2) = 4\nroll back, left: (6 - 2) = 4, 9, 6\nroll back, left: 6 2 9 6\n(6) + (2) = 8, left: (6 + 2) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (6 + 2) = 8\n(8) * (3) = 24, left: ((6 + 2) * (9 - 6)) = 24\nreach 24! expression: ((6 + 2) * (9 - 6))"}, {"input": "6 2 9 6\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 9, 6\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, (6 + 2) = 8\n(8) - (2/3) = 22/3, left: ((6 + 2) - (6 / 9)) = 22/3\nroll back, left: (6 / 9) = 2/3, (6 + 2) = 8\nroll back, left: (6 + 2) = 8, 9, 6\n(6) - (9) = -3, left: (6 - 9) = -3, (6 + 2) = 8\nroll back, left: (6 + 2) = 8, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (6 + 2) = 8\n(8) * (3) = 24, left: ((6 + 2) * (9 - 6)) = 24\nreach 24! expression: ((6 + 2) * (9 - 6))"}, {"input": "6 2 9 6\n", "output": "(6) * (9) = 54, left: (6 * 9) = 54, 2, 6\n(54) - (2) = 52, left: ((6 * 9) - 2) = 52, 6\nroll back, left: (6 * 9) = 54, 2, 6\n(54) / (2) = 27, left: ((6 * 9) / 2) = 27, 6\nroll back, left: (6 * 9) = 54, 2, 6\n(2) / (54) = 1/27, left: (2 / (6 * 9)) = 1/27, 6\nroll back, left: (6 * 9) = 54, 2, 6\n(54) - (6) = 48, left: ((6 * 9) - 6) = 48, 2\n(48) / (2) = 24, left: (((6 * 9) - 6) / 2) = 24\nreach 24! expression: (((6 * 9) - 6) / 2)"}, {"input": "2 4 5 3\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 4, 3\n(3) + (3) = 6, left: (3 + (5 - 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (5 - 2))) = 24\nreach 24! expression: (4 * (3 + (5 - 2)))"}, {"input": "2 4 5 3\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (3 - 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (3 - 2))) = 24\nreach 24! expression: (4 * (5 + (3 - 2)))"}, {"input": "2 4 5 3\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (2 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (2 - 3))) = 24\nreach 24! expression: (4 * (5 - (2 - 3)))"}, {"input": "2 4 5 3\n", "output": "(4) + (5) = 9, left: (4 + 5) = 9, 2, 3\n(3) + (9) = 12, left: (3 + (4 + 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 + (4 + 5))) = 24\nreach 24! expression: (2 * (3 + (4 + 5)))"}, {"input": "2 4 5 3\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 5, 3\nroll back, left: 2 4 5 3\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, 5, 3\nroll back, left: 2 4 5 3\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 4, 5\nroll back, left: 2 4 5 3\n(3) - (2) = 1, left: (3 - 2) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (3 - 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (3 - 2))) = 24\nreach 24! expression: (4 * (5 + (3 - 2)))"}, {"input": "2 4 5 3\n", "output": "(2) * (5) = 10, left: (2 * 5) = 10, 4, 3\n(4) * (10) = 40, left: (4 * (2 * 5)) = 40, 3\nroll back, left: (2 * 5) = 10, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (2 * 5) = 10\nroll back, left: (2 * 5) = 10, 4, 3\nroll back, left: 2 4 5 3\n(5) - (2) = 3, left: (5 - 2) = 3, 4, 3\n(3) + (3) = 6, left: (3 + (5 - 2)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (5 - 2))) = 24\nreach 24! expression: (4 * (3 + (5 - 2)))"}, {"input": "2 4 5 3\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 4, 5\n(4) + (5) = 9, left: (4 + (2 + 3)) = 9, 5\nroll back, left: (2 + 3) = 5, 4, 5\n(4) * (5) = 20, left: (4 * (2 + 3)) = 20, 5\nroll back, left: (2 + 3) = 5, 4, 5\nroll back, left: 2 4 5 3\n(2) - (3) = -1, left: (2 - 3) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (2 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (2 - 3))) = 24\nreach 24! expression: (4 * (5 - (2 - 3)))"}, {"input": "2 4 5 3\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 2, 3\n(3) * (-1) = -3, left: (3 * (4 - 5)) = -3, 2\nroll back, left: (4 - 5) = -1, 2, 3\nroll back, left: 2 4 5 3\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, 2, 3\nroll back, left: 2 4 5 3\n(4) + (5) = 9, left: (4 + 5) = 9, 2, 3\n(3) + (9) = 12, left: (3 + (4 + 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 + (4 + 5))) = 24\nreach 24! expression: (2 * (3 + (4 + 5)))"}, {"input": "2 4 5 3\n", "output": "(5) / (4) = 5/4, left: (5 / 4) = 5/4, 2, 3\n(3) - (2) = 1, left: (3 - 2) = 1, (5 / 4) = 5/4\nroll back, left: (5 / 4) = 5/4, 2, 3\nroll back, left: 2 4 5 3\n(4) + (5) = 9, left: (4 + 5) = 9, 2, 3\n(9) / (2) = 9/2, left: ((4 + 5) / 2) = 9/2, 3\nroll back, left: (4 + 5) = 9, 2, 3\n(3) + (9) = 12, left: (3 + (4 + 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 + (4 + 5))) = 24\nreach 24! expression: (2 * (3 + (4 + 5)))"}, {"input": "10 1 13 1\n", "output": "(1) * (1) = 1, left: (1 * 1) = 1, 10, 13\n(10) + (1) = 11, left: (10 + (1 * 1)) = 11, 13\n(13) + (11) = 24, left: (13 + (10 + (1 * 1))) = 24\nreach 24! expression: (13 + (10 + (1 * 1)))"}, {"input": "10 1 13 1\n", "output": "(10) + (13) = 23, left: (10 + 13) = 23, 1, 1\n(1) * (23) = 23, left: (1 * (10 + 13)) = 23, 1\n(1) + (23) = 24, left: (1 + (1 * (10 + 13))) = 24\nreach 24! expression: (1 + (1 * (10 + 13)))"}, {"input": "10 1 13 1\n", "output": "(10) / (1) = 10, left: (10 / 1) = 10, 13, 1\n(13) + (1) = 14, left: (13 + 1) = 14, (10 / 1) = 10\n(10) + (14) = 24, left: ((10 / 1) + (13 + 1)) = 24\nreach 24! expression: ((10 / 1) + (13 + 1))"}, {"input": "10 1 13 1\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 10, 1\n(1) + (13) = 14, left: (1 + (13 / 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (1 + (13 / 1))) = 24\nreach 24! expression: (10 + (1 + (13 / 1)))"}, {"input": "10 1 13 1\n", "output": "(13) + (1) = 14, left: (13 + 1) = 14, 10, 1\n(10) + (14) = 24, left: (10 + (13 + 1)) = 24, 1\n(1) * (24) = 24, left: (1 * (10 + (13 + 1))) = 24\nreach 24! expression: (1 * (10 + (13 + 1)))"}, {"input": "10 1 13 1\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 10, 1\n(1) + (13) = 14, left: (1 + (13 / 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (1 + (13 / 1))) = 24\nreach 24! expression: (10 + (1 + (13 / 1)))"}, {"input": "10 1 13 1\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 10, 1\n(1) + (13) = 14, left: (1 + (13 / 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (1 + (13 / 1))) = 24\nreach 24! expression: (10 + (1 + (13 / 1)))"}, {"input": "10 1 13 1\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 10, 1\n(1) + (13) = 14, left: (1 + (13 / 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (1 + (13 / 1))) = 24\nreach 24! expression: (10 + (1 + (13 / 1)))"}, {"input": "10 1 13 1\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 10, 1\n(1) + (13) = 14, left: (1 + (13 / 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (1 + (13 / 1))) = 24\nreach 24! expression: (10 + (1 + (13 / 1)))"}, {"input": "6 2 3 13\n", "output": "(3) / (13) = 3/13, left: (3 / 13) = 3/13, 6, 2\n(6) / (3/13) = 26, left: (6 / (3 / 13)) = 26, 2\n(26) - (2) = 24, left: ((6 / (3 / 13)) - 2) = 24\nreach 24! expression: ((6 / (3 / 13)) - 2)"}, {"input": "6 2 3 13\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 2, 3\n(2) + (19) = 21, left: (2 + (6 + 13)) = 21, 3\n(3) + (21) = 24, left: (3 + (2 + (6 + 13))) = 24\nreach 24! expression: (3 + (2 + (6 + 13)))"}, {"input": "6 2 3 13\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 2, 13\n(13) / (1/2) = 26, left: (13 / (3 / 6)) = 26, 2\n(26) - (2) = 24, left: ((13 / (3 / 6)) - 2) = 24\nreach 24! expression: ((13 / (3 / 6)) - 2)"}, {"input": "6 2 3 13\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 3, 13\n(3) + (8) = 11, left: (3 + (6 + 2)) = 11, 13\n(13) + (11) = 24, left: (13 + (3 + (6 + 2))) = 24\nreach 24! expression: (13 + (3 + (6 + 2)))"}, {"input": "6 2 3 13\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 2, 13\n(2) * (-3) = -6, left: (2 * (3 - 6)) = -6, 13\nroll back, left: (3 - 6) = -3, 2, 13\nroll back, left: 6 2 3 13\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 2, 13\n(13) / (2) = 13/2, left: (13 / 2) = 13/2, (3 / 6) = 1/2\nroll back, left: (3 / 6) = 1/2, 2, 13\n(13) / (1/2) = 26, left: (13 / (3 / 6)) = 26, 2\n(26) - (2) = 24, left: ((13 / (3 / 6)) - 2) = 24\nreach 24! expression: ((13 / (3 / 6)) - 2)"}, {"input": "6 2 3 13\n", "output": "(6) - (13) = -7, left: (6 - 13) = -7, 2, 3\nroll back, left: 6 2 3 13\n(6) / (13) = 6/13, left: (6 / 13) = 6/13, 2, 3\nroll back, left: 6 2 3 13\n(6) + (13) = 19, left: (6 + 13) = 19, 2, 3\n(2) - (19) = -17, left: (2 - (6 + 13)) = -17, 3\nroll back, left: (6 + 13) = 19, 2, 3\n(2) + (19) = 21, left: (2 + (6 + 13)) = 21, 3\n(3) + (21) = 24, left: (3 + (2 + (6 + 13))) = 24\nreach 24! expression: (3 + (2 + (6 + 13)))"}, {"input": "6 2 3 13\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 3, 13\n(4) - (3) = 1, left: ((6 - 2) - 3) = 1, 13\nroll back, left: (6 - 2) = 4, 3, 13\nroll back, left: 6 2 3 13\n(2) - (6) = -4, left: (2 - 6) = -4, 3, 13\nroll back, left: 6 2 3 13\n(6) + (2) = 8, left: (6 + 2) = 8, 3, 13\n(3) + (8) = 11, left: (3 + (6 + 2)) = 11, 13\n(13) + (11) = 24, left: (13 + (3 + (6 + 2))) = 24\nreach 24! expression: (13 + (3 + (6 + 2)))"}, {"input": "6 2 3 13\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 3, 13\n(1/3) - (3) = -8/3, left: ((2 / 6) - 3) = -8/3, 13\nroll back, left: (2 / 6) = 1/3, 3, 13\nroll back, left: 6 2 3 13\n(6) / (2) = 3, left: (6 / 2) = 3, 3, 13\nroll back, left: 6 2 3 13\n(6) + (2) = 8, left: (6 + 2) = 8, 3, 13\n(3) + (8) = 11, left: (3 + (6 + 2)) = 11, 13\n(13) + (11) = 24, left: (13 + (3 + (6 + 2))) = 24\nreach 24! expression: (13 + (3 + (6 + 2)))"}, {"input": "5 2 2 3\n", "output": "(5) * (2) = 10, left: (5 * 2) = 10, 2, 3\n(10) - (2) = 8, left: ((5 * 2) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 * 2) - 2)) = 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 5, 2\nroll back, left: 5 2 2 3\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 2, 2\nroll back, left: 5 2 2 3\n(3) - (5) = -2, left: (3 - 5) = -2, 2, 2\nroll back, left: 5 2 2 3\n(5) * (2) = 10, left: (5 * 2) = 10, 2, 3\n(10) - (2) = 8, left: ((5 * 2) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 * 2) - 2)) = 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(2) / (5) = 2/5, left: (2 / 5) = 2/5, 2, 3\n(2) / (2/5) = 5, left: (2 / (2 / 5)) = 5, 3\nroll back, left: (2 / 5) = 2/5, 2, 3\nroll back, left: 5 2 2 3\n(5) * (2) = 10, left: (5 * 2) = 10, 2, 3\n(2) - (3) = -1, left: (2 - 3) = -1, (5 * 2) = 10\nroll back, left: (5 * 2) = 10, 2, 3\n(10) - (2) = 8, left: ((5 * 2) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 * 2) - 2)) = 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 2, 3\n(-3) / (3) = -1, left: ((2 - 5) / 3) = -1, 2\nroll back, left: (2 - 5) = -3, 2, 3\nroll back, left: 5 2 2 3\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 2, 3\nroll back, left: 5 2 2 3\n(5) * (2) = 10, left: (5 * 2) = 10, 2, 3\n(10) - (2) = 8, left: ((5 * 2) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 * 2) - 2)) = 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 5, 2\nroll back, left: 5 2 2 3\n(2) - (2) = 0, left: (2 - 2) = 0, 5, 3\nroll back, left: 5 2 2 3\n(5) * (2) = 10, left: (5 * 2) = 10, 2, 3\n(10) - (3) = 7, left: ((5 * 2) - 3) = 7, 2\nroll back, left: (5 * 2) = 10, 2, 3\n(10) - (2) = 8, left: ((5 * 2) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 * 2) - 2)) = 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "5 2 2 3\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 5, 3\nroll back, left: 5 2 2 3\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 5, 2\nroll back, left: 5 2 2 3\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 2, 3\nroll back, left: 5 2 2 3\n(5) * (2) = 10, left: (5 * 2) = 10, 2, 3\n(10) - (2) = 8, left: ((5 * 2) - 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((5 * 2) - 2)) = 24\nreach 24! expression: (3 * ((5 * 2) - 2))"}, {"input": "6 8 2 2\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 6, 8\n(8) - (4) = 4, left: (8 - (2 * 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (2 * 2))) = 24\nreach 24! expression: (6 * (8 - (2 * 2)))"}, {"input": "6 8 2 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 8, 2\n(2) * (8) = 16, left: (2 * (6 + 2)) = 16, 8\n(8) + (16) = 24, left: (8 + (2 * (6 + 2))) = 24\nreach 24! expression: (8 + (2 * (6 + 2)))"}, {"input": "6 8 2 2\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 6, 2\n(6) - (2) = 4, left: ((8 - 2) - 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((8 - 2) - 2)) = 24\nreach 24! expression: (6 * ((8 - 2) - 2))"}, {"input": "6 8 2 2\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (8 * 2) = 16\n(16) + (8) = 24, left: ((8 * 2) + (6 + 2)) = 24\nreach 24! expression: ((8 * 2) + (6 + 2))"}, {"input": "6 8 2 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (6 + 2) = 8\n(8) + (16) = 24, left: ((6 + 2) + (8 * 2)) = 24\nreach 24! expression: ((6 + 2) + (8 * 2))"}, {"input": "6 8 2 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (6 + 2) = 8\n(8) * (16) = 128, left: ((6 + 2) * (8 * 2)) = 128\nroll back, left: (8 * 2) = 16, (6 + 2) = 8\n(8) + (16) = 24, left: ((6 + 2) + (8 * 2)) = 24\nreach 24! expression: ((6 + 2) + (8 * 2))"}, {"input": "6 8 2 2\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 6, 8\n(6) - (4) = 2, left: (6 - (2 * 2)) = 2, 8\nroll back, left: (2 * 2) = 4, 6, 8\n(6) - (8) = -2, left: (6 - 8) = -2, (2 * 2) = 4\n(-2) - (4) = -6, left: ((6 - 8) - (2 * 2)) = -6\nroll back, left: (6 - 8) = -2, (2 * 2) = 4\nroll back, left: (2 * 2) = 4, 6, 8\n(8) - (4) = 4, left: (8 - (2 * 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (2 * 2))) = 24\nreach 24! expression: (6 * (8 - (2 * 2)))"}, {"input": "6 8 2 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 8, 2\n(2) - (8) = -6, left: (2 - (6 + 2)) = -6, 8\n(8) * (-6) = -48, left: (8 * (2 - (6 + 2))) = -48\nroll back, left: (2 - (6 + 2)) = -6, 8\nroll back, left: (6 + 2) = 8, 8, 2\n(2) + (8) = 10, left: (2 + (6 + 2)) = 10, 8\nroll back, left: (6 + 2) = 8, 8, 2\n(2) * (8) = 16, left: (2 * (6 + 2)) = 16, 8\n(8) + (16) = 24, left: (8 + (2 * (6 + 2))) = 24\nreach 24! expression: (8 + (2 * (6 + 2)))"}, {"input": "6 8 2 2\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 6, 2\n(6) - (2) = 4, left: ((8 - 2) - 2) = 4, 6\n(4) - (6) = -2, left: (((8 - 2) - 2) - 6) = -2\nroll back, left: ((8 - 2) - 2) = 4, 6\n(6) / (4) = 3/2, left: (6 / ((8 - 2) - 2)) = 3/2\nroll back, left: ((8 - 2) - 2) = 4, 6\n(6) + (4) = 10, left: (6 + ((8 - 2) - 2)) = 10\nroll back, left: ((8 - 2) - 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((8 - 2) - 2)) = 24\nreach 24! expression: (6 * ((8 - 2) - 2))"}, {"input": "6 8 2 2\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 6, 2\n(6) - (2) = 4, left: (6 - 2) = 4, (8 * 2) = 16\n(4) / (16) = 1/4, left: ((6 - 2) / (8 * 2)) = 1/4\nroll back, left: (6 - 2) = 4, (8 * 2) = 16\nroll back, left: (8 * 2) = 16, 6, 2\n(2) - (6) = -4, left: (2 - 6) = -4, (8 * 2) = 16\nroll back, left: (8 * 2) = 16, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (8 * 2) = 16\n(16) + (8) = 24, left: ((8 * 2) + (6 + 2)) = 24\nreach 24! expression: ((8 * 2) + (6 + 2))"}, {"input": "6 8 2 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (6 + 2) = 8\n(8) * (16) = 128, left: ((6 + 2) * (8 * 2)) = 128\nroll back, left: (8 * 2) = 16, (6 + 2) = 8\n(8) + (16) = 24, left: ((6 + 2) + (8 * 2)) = 24\nreach 24! expression: ((6 + 2) + (8 * 2))"}, {"input": "6 8 2 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (6 + 2) = 8\n(8) * (16) = 128, left: ((6 + 2) * (8 * 2)) = 128\nroll back, left: (8 * 2) = 16, (6 + 2) = 8\n(8) + (16) = 24, left: ((6 + 2) + (8 * 2)) = 24\nreach 24! expression: ((6 + 2) + (8 * 2))"}, {"input": "6 8 2 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (6 + 2) = 8\n(8) * (16) = 128, left: ((6 + 2) * (8 * 2)) = 128\nroll back, left: (8 * 2) = 16, (6 + 2) = 8\n(8) + (16) = 24, left: ((6 + 2) + (8 * 2)) = 24\nreach 24! expression: ((6 + 2) + (8 * 2))"}, {"input": "12 11 2 7\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 12, 2\n(2) / (4) = 1/2, left: (2 / (11 - 7)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (2 / (11 - 7))) = 24\nreach 24! expression: (12 / (2 / (11 - 7)))"}, {"input": "12 11 2 7\n", "output": "(2) + (7) = 9, left: (2 + 7) = 9, 12, 11\n(11) - (9) = 2, left: (11 - (2 + 7)) = 2, 12\n(12) * (2) = 24, left: (12 * (11 - (2 + 7))) = 24\nreach 24! expression: (12 * (11 - (2 + 7)))"}, {"input": "12 11 2 7\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 12, 7\n(9) - (7) = 2, left: ((11 - 2) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 2) - 7)) = 24\nreach 24! expression: (12 * ((11 - 2) - 7))"}, {"input": "12 11 2 7\n", "output": "(11) + (7) = 18, left: (11 + 7) = 18, 12, 2\n(12) / (2) = 6, left: (12 / 2) = 6, (11 + 7) = 18\n(18) + (6) = 24, left: ((11 + 7) + (12 / 2)) = 24\nreach 24! expression: ((11 + 7) + (12 / 2))"}, {"input": "12 11 2 7\n", "output": "(12) * (7) = 84, left: (12 * 7) = 84, 11, 2\nroll back, left: 12 11 2 7\n(12) - (7) = 5, left: (12 - 7) = 5, 11, 2\nroll back, left: 12 11 2 7\n(12) / (11) = 12/11, left: (12 / 11) = 12/11, 2, 7\nroll back, left: 12 11 2 7\n(11) - (2) = 9, left: (11 - 2) = 9, 12, 7\n(9) - (7) = 2, left: ((11 - 2) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 2) - 7)) = 24\nreach 24! expression: (12 * ((11 - 2) - 7))"}, {"input": "12 11 2 7\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 12, 11\nroll back, left: 12 11 2 7\n(2) * (7) = 14, left: (2 * 7) = 14, 12, 11\nroll back, left: 12 11 2 7\n(2) + (7) = 9, left: (2 + 7) = 9, 12, 11\n(11) - (12) = -1, left: (11 - 12) = -1, (2 + 7) = 9\nroll back, left: (2 + 7) = 9, 12, 11\n(11) - (9) = 2, left: (11 - (2 + 7)) = 2, 12\n(12) * (2) = 24, left: (12 * (11 - (2 + 7))) = 24\nreach 24! expression: (12 * (11 - (2 + 7)))"}, {"input": "9 12 6 4\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 12, 4\n(4) * (-3) = -12, left: (4 * (6 - 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (4 * (6 - 9))) = 24\nreach 24! expression: (12 - (4 * (6 - 9)))"}, {"input": "9 12 6 4\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 12, 4\n(4) - (12) = -8, left: (4 - 12) = -8, (6 - 9) = -3\n(-3) * (-8) = 24, left: ((6 - 9) * (4 - 12)) = 24\nreach 24! expression: ((6 - 9) * (4 - 12))"}, {"input": "9 12 6 4\n", "output": "(12) + (4) = 16, left: (12 + 4) = 16, 9, 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, (12 + 4) = 16\n(16) * (3/2) = 24, left: ((12 + 4) * (9 / 6)) = 24\nreach 24! expression: ((12 + 4) * (9 / 6))"}, {"input": "9 12 6 4\n", "output": "(12) + (4) = 16, left: (12 + 4) = 16, 9, 6\n(9) * (16) = 144, left: (9 * (12 + 4)) = 144, 6\n(144) / (6) = 24, left: ((9 * (12 + 4)) / 6) = 24\nreach 24! expression: ((9 * (12 + 4)) / 6)"}, {"input": "9 12 6 4\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 9, 4\nroll back, left: 9 12 6 4\n(12) / (4) = 3, left: (12 / 4) = 3, 9, 6\n(6) / (3) = 2, left: (6 / (12 / 4)) = 2, 9\nroll back, left: (12 / 4) = 3, 9, 6\nroll back, left: 9 12 6 4\n(12) + (4) = 16, left: (12 + 4) = 16, 9, 6\n(9) * (16) = 144, left: (9 * (12 + 4)) = 144, 6\n(144) / (6) = 24, left: ((9 * (12 + 4)) / 6) = 24\nreach 24! expression: ((9 * (12 + 4)) / 6)"}, {"input": "9 12 6 4\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 12, 6\nroll back, left: 9 12 6 4\n(4) / (9) = 4/9, left: (4 / 9) = 4/9, 12, 6\n(6) * (4/9) = 8/3, left: (6 * (4 / 9)) = 8/3, 12\nroll back, left: (4 / 9) = 4/9, 12, 6\nroll back, left: 9 12 6 4\n(12) + (4) = 16, left: (12 + 4) = 16, 9, 6\n(9) * (16) = 144, left: (9 * (12 + 4)) = 144, 6\n(144) / (6) = 24, left: ((9 * (12 + 4)) / 6) = 24\nreach 24! expression: ((9 * (12 + 4)) / 6)"}, {"input": "9 12 6 4\n", "output": "(9) * (6) = 54, left: (9 * 6) = 54, 12, 4\n(4) / (12) = 1/3, left: (4 / 12) = 1/3, (9 * 6) = 54\nroll back, left: (9 * 6) = 54, 12, 4\nroll back, left: 9 12 6 4\n(6) - (9) = -3, left: (6 - 9) = -3, 12, 4\n(12) - (-3) = 15, left: (12 - (6 - 9)) = 15, 4\nroll back, left: (6 - 9) = -3, 12, 4\n(4) * (-3) = -12, left: (4 * (6 - 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (4 * (6 - 9))) = 24\nreach 24! expression: (12 - (4 * (6 - 9)))"}, {"input": "9 12 6 4\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 9, 4\n(4) - (9) = -5, left: (4 - 9) = -5, (6 - 12) = -6\n(-6) - (-5) = -1, left: ((6 - 12) - (4 - 9)) = -1\nroll back, left: (4 - 9) = -5, (6 - 12) = -6\nroll back, left: (6 - 12) = -6, 9, 4\nroll back, left: 9 12 6 4\n(6) - (9) = -3, left: (6 - 9) = -3, 12, 4\n(4) - (12) = -8, left: (4 - 12) = -8, (6 - 9) = -3\n(-3) * (-8) = 24, left: ((6 - 9) * (4 - 12)) = 24\nreach 24! expression: ((6 - 9) * (4 - 12))"}, {"input": "10 6 5 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 10, 5\n(12) / (5) = 12/5, left: ((6 + 6) / 5) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * ((6 + 6) / 5)) = 24\nreach 24! expression: (10 * ((6 + 6) / 5))"}, {"input": "10 6 5 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 10, 5\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, (6 + 6) = 12\n(12) / (1/2) = 24, left: ((6 + 6) / (5 / 10)) = 24\nreach 24! expression: ((6 + 6) / (5 / 10))"}, {"input": "10 6 5 6\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 6, 6\n(6) + (6) = 12, left: (6 + 6) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (6 + 6)) = 24\nreach 24! expression: ((10 / 5) * (6 + 6))"}, {"input": "10 6 5 6\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (10 - 5)) = 30, 6\n(30) - (6) = 24, left: ((6 * (10 - 5)) - 6) = 24\nreach 24! expression: ((6 * (10 - 5)) - 6)"}, {"input": "10 6 5 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 10, 5\n(5) * (36) = 180, left: (5 * (6 * 6)) = 180, 10\nroll back, left: (6 * 6) = 36, 10, 5\n(5) + (36) = 41, left: (5 + (6 * 6)) = 41, 10\nroll back, left: (6 * 6) = 36, 10, 5\nroll back, left: 10 6 5 6\n(6) + (6) = 12, left: (6 + 6) = 12, 10, 5\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, (6 + 6) = 12\n(12) / (1/2) = 24, left: ((6 + 6) / (5 / 10)) = 24\nreach 24! expression: ((6 + 6) / (5 / 10))"}, {"input": "10 6 5 6\n", "output": "(10) * (6) = 60, left: (10 * 6) = 60, 6, 5\nroll back, left: 10 6 5 6\n(10) - (6) = 4, left: (10 - 6) = 4, 6, 5\nroll back, left: 10 6 5 6\n(6) - (10) = -4, left: (6 - 10) = -4, 6, 5\nroll back, left: 10 6 5 6\n(6) + (6) = 12, left: (6 + 6) = 12, 10, 5\n(12) / (5) = 12/5, left: ((6 + 6) / 5) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * ((6 + 6) / 5)) = 24\nreach 24! expression: (10 * ((6 + 6) / 5))"}, {"input": "10 6 5 6\n", "output": "(10) * (5) = 50, left: (10 * 5) = 50, 6, 6\n(6) / (50) = 3/25, left: (6 / (10 * 5)) = 3/25, 6\nroll back, left: (10 * 5) = 50, 6, 6\nroll back, left: 10 6 5 6\n(10) / (5) = 2, left: (10 / 5) = 2, 6, 6\n(6) * (6) = 36, left: (6 * 6) = 36, (10 / 5) = 2\nroll back, left: (10 / 5) = 2, 6, 6\n(6) + (6) = 12, left: (6 + 6) = 12, (10 / 5) = 2\n(2) * (12) = 24, left: ((10 / 5) * (6 + 6)) = 24\nreach 24! expression: ((10 / 5) * (6 + 6))"}, {"input": "10 6 5 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 10, 5\nroll back, left: 10 6 5 6\n(6) / (6) = 1, left: (6 / 6) = 1, 10, 5\n(10) - (5) = 5, left: (10 - 5) = 5, (6 / 6) = 1\nroll back, left: (6 / 6) = 1, 10, 5\nroll back, left: 10 6 5 6\n(6) + (6) = 12, left: (6 + 6) = 12, 10, 5\n(12) / (5) = 12/5, left: ((6 + 6) / 5) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * ((6 + 6) / 5)) = 24\nreach 24! expression: (10 * ((6 + 6) / 5))"}, {"input": "10 6 5 6\n", "output": "(10) * (6) = 60, left: (10 * 6) = 60, 6, 5\nroll back, left: 10 6 5 6\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 10, 6\n(5/6) - (10) = -55/6, left: ((5 / 6) - 10) = -55/6, 6\nroll back, left: (5 / 6) = 5/6, 10, 6\nroll back, left: 10 6 5 6\n(10) - (5) = 5, left: (10 - 5) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (10 - 5)) = 30, 6\n(30) - (6) = 24, left: ((6 * (10 - 5)) - 6) = 24\nreach 24! expression: ((6 * (10 - 5)) - 6)"}, {"input": "4 8 5 9\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 4, 9\n(9) - (3) = 6, left: (9 - (8 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (8 - 5))) = 24\nreach 24! expression: (4 * (9 - (8 - 5)))"}, {"input": "4 8 5 9\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 4, 9\n(9) + (-3) = 6, left: (9 + (5 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (5 - 8))) = 24\nreach 24! expression: (4 * (9 + (5 - 8)))"}, {"input": "4 8 5 9\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (9 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (9 - 8))) = 24\nreach 24! expression: (4 * (5 + (9 - 8)))"}, {"input": "4 8 5 9\n", "output": "(8) - (9) = -1, left: (8 - 9) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (8 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (8 - 9))) = 24\nreach 24! expression: (4 * (5 - (8 - 9)))"}, {"input": "4 8 5 9\n", "output": "(8) / (9) = 8/9, left: (8 / 9) = 8/9, 4, 5\n(8/9) - (4) = -28/9, left: ((8 / 9) - 4) = -28/9, 5\n(-28/9) - (5) = -73/9, left: (((8 / 9) - 4) - 5) = -73/9\nroll back, left: ((8 / 9) - 4) = -28/9, 5\nroll back, left: (8 / 9) = 8/9, 4, 5\nroll back, left: 4 8 5 9\n(9) - (8) = 1, left: (9 - 8) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (9 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (9 - 8))) = 24\nreach 24! expression: (4 * (5 + (9 - 8)))"}, {"input": "4 8 5 9\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 8, 5\n(4/9) / (8) = 1/18, left: ((4 / 9) / 8) = 1/18, 5\nroll back, left: (4 / 9) = 4/9, 8, 5\nroll back, left: 4 8 5 9\n(4) * (9) = 36, left: (4 * 9) = 36, 8, 5\nroll back, left: 4 8 5 9\n(9) - (8) = 1, left: (9 - 8) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (9 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (9 - 8))) = 24\nreach 24! expression: (4 * (5 + (9 - 8)))"}, {"input": "4 8 5 9\n", "output": "(4) + (5) = 9, left: (4 + 5) = 9, 8, 9\n(9) / (9) = 1, left: ((4 + 5) / 9) = 1, 8\nroll back, left: (4 + 5) = 9, 8, 9\nroll back, left: 4 8 5 9\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, 8, 9\nroll back, left: 4 8 5 9\n(8) - (9) = -1, left: (8 - 9) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (8 - 9)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (8 - 9))) = 24\nreach 24! expression: (4 * (5 - (8 - 9)))"}, {"input": "4 8 5 9\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 4, 9\n(4) - (5/8) = 27/8, left: (4 - (5 / 8)) = 27/8, 9\nroll back, left: (5 / 8) = 5/8, 4, 9\n(9) * (5/8) = 45/8, left: (9 * (5 / 8)) = 45/8, 4\nroll back, left: (5 / 8) = 5/8, 4, 9\nroll back, left: 4 8 5 9\n(8) - (5) = 3, left: (8 - 5) = 3, 4, 9\n(9) - (3) = 6, left: (9 - (8 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (8 - 5))) = 24\nreach 24! expression: (4 * (9 - (8 - 5)))"}, {"input": "4 8 5 9\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 5, 9\n(9) / (2) = 9/2, left: (9 / (8 / 4)) = 9/2, 5\nroll back, left: (8 / 4) = 2, 5, 9\nroll back, left: 4 8 5 9\n(8) * (5) = 40, left: (8 * 5) = 40, 4, 9\nroll back, left: 4 8 5 9\n(5) - (8) = -3, left: (5 - 8) = -3, 4, 9\n(9) + (-3) = 6, left: (9 + (5 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (5 - 8))) = 24\nreach 24! expression: (4 * (9 + (5 - 8)))"}, {"input": "11 10 13 3\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 10, 13\n(10) - (13) = -3, left: (10 - 13) = -3, (3 - 11) = -8\n(-8) * (-3) = 24, left: ((3 - 11) * (10 - 13)) = 24\nreach 24! expression: ((3 - 11) * (10 - 13))"}, {"input": "11 10 13 3\n", "output": "(11) + (10) = 21, left: (11 + 10) = 21, 13, 3\n(21) - (13) = 8, left: ((11 + 10) - 13) = 8, 3\n(3) * (8) = 24, left: (3 * ((11 + 10) - 13)) = 24\nreach 24! expression: (3 * ((11 + 10) - 13))"}, {"input": "11 10 13 3\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 11, 3\n(11) - (3) = 8, left: (11 - (13 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 - (13 - 10))) = 24\nreach 24! expression: (3 * (11 - (13 - 10)))"}, {"input": "11 10 13 3\n", "output": "(10) - (13) = -3, left: (10 - 13) = -3, 11, 3\n(11) + (-3) = 8, left: (11 + (10 - 13)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 + (10 - 13))) = 24\nreach 24! expression: (3 * (11 + (10 - 13)))"}, {"input": "11 10 13 3\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 10, 13\n(13) - (10) = 3, left: (13 - 10) = 3, (11 - 3) = 8\n(8) * (3) = 24, left: ((11 - 3) * (13 - 10)) = 24\nreach 24! expression: ((11 - 3) * (13 - 10))"}, {"input": "11 10 13 3\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 11, 13\nroll back, left: 11 10 13 3\n(3) - (10) = -7, left: (3 - 10) = -7, 11, 13\nroll back, left: 11 10 13 3\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, 11, 13\nroll back, left: 11 10 13 3\n(13) - (10) = 3, left: (13 - 10) = 3, 11, 3\n(11) - (3) = 8, left: (11 - (13 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 - (13 - 10))) = 24\nreach 24! expression: (3 * (11 - (13 - 10)))"}, {"input": "7 6 13 3\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 7, 13\n(7) - (18) = -11, left: (7 - (6 * 3)) = -11, 13\n(13) - (-11) = 24, left: (13 - (7 - (6 * 3))) = 24\nreach 24! expression: (13 - (7 - (6 * 3)))"}, {"input": "7 6 13 3\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 6, 3\n(3) * (-6) = -18, left: (3 * (7 - 13)) = -18, 6\n(6) - (-18) = 24, left: (6 - (3 * (7 - 13))) = 24\nreach 24! expression: (6 - (3 * (7 - 13)))"}, {"input": "7 6 13 3\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 6, 3\n(6) * (3) = 18, left: (6 * 3) = 18, (7 - 13) = -6\n(18) - (-6) = 24, left: ((6 * 3) - (7 - 13)) = 24\nreach 24! expression: ((6 * 3) - (7 - 13))"}, {"input": "7 6 13 3\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 7, 13\n(13) - (7) = 6, left: (13 - 7) = 6, (6 * 3) = 18\n(18) + (6) = 24, left: ((6 * 3) + (13 - 7)) = 24\nreach 24! expression: ((6 * 3) + (13 - 7))"}, {"input": "7 6 13 3\n", "output": "(6) / (13) = 6/13, left: (6 / 13) = 6/13, 7, 3\nroll back, left: 7 6 13 3\n(7) * (3) = 21, left: (7 * 3) = 21, 6, 13\nroll back, left: 7 6 13 3\n(13) / (7) = 13/7, left: (13 / 7) = 13/7, 6, 3\nroll back, left: 7 6 13 3\n(7) - (13) = -6, left: (7 - 13) = -6, 6, 3\n(6) * (3) = 18, left: (6 * 3) = 18, (7 - 13) = -6\n(18) - (-6) = 24, left: ((6 * 3) - (7 - 13)) = 24\nreach 24! expression: ((6 * 3) - (7 - 13))"}, {"input": "7 6 13 3\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 6, 3\n(3) * (-6) = -18, left: (3 * (7 - 13)) = -18, 6\n(6) + (-18) = -12, left: (6 + (3 * (7 - 13))) = -12\nroll back, left: (3 * (7 - 13)) = -18, 6\n(-18) / (6) = -3, left: ((3 * (7 - 13)) / 6) = -3\nroll back, left: (3 * (7 - 13)) = -18, 6\n(-18) - (6) = -24, left: ((3 * (7 - 13)) - 6) = -24\nroll back, left: (3 * (7 - 13)) = -18, 6\n(6) - (-18) = 24, left: (6 - (3 * (7 - 13))) = 24\nreach 24! expression: (6 - (3 * (7 - 13)))"}, {"input": "7 6 13 3\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 7, 13\nroll back, left: 7 6 13 3\n(6) / (3) = 2, left: (6 / 3) = 2, 7, 13\nroll back, left: 7 6 13 3\n(6) * (3) = 18, left: (6 * 3) = 18, 7, 13\n(7) * (18) = 126, left: (7 * (6 * 3)) = 126, 13\nroll back, left: (6 * 3) = 18, 7, 13\n(7) - (18) = -11, left: (7 - (6 * 3)) = -11, 13\n(13) - (-11) = 24, left: (13 - (7 - (6 * 3))) = 24\nreach 24! expression: (13 - (7 - (6 * 3)))"}, {"input": "7 6 13 3\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 6, 13\nroll back, left: 7 6 13 3\n(13) - (3) = 10, left: (13 - 3) = 10, 7, 6\n(7) / (10) = 7/10, left: (7 / (13 - 3)) = 7/10, 6\nroll back, left: (13 - 3) = 10, 7, 6\nroll back, left: 7 6 13 3\n(6) * (3) = 18, left: (6 * 3) = 18, 7, 13\n(13) - (7) = 6, left: (13 - 7) = 6, (6 * 3) = 18\n(18) + (6) = 24, left: ((6 * 3) + (13 - 7)) = 24\nreach 24! expression: ((6 * 3) + (13 - 7))"}, {"input": "7 6 13 3\n", "output": "(7) / (13) = 7/13, left: (7 / 13) = 7/13, 6, 3\n(6) + (3) = 9, left: (6 + 3) = 9, (7 / 13) = 7/13\nroll back, left: (7 / 13) = 7/13, 6, 3\nroll back, left: 7 6 13 3\n(7) + (13) = 20, left: (7 + 13) = 20, 6, 3\nroll back, left: 7 6 13 3\n(7) - (13) = -6, left: (7 - 13) = -6, 6, 3\n(3) * (-6) = -18, left: (3 * (7 - 13)) = -18, 6\n(6) - (-18) = 24, left: (6 - (3 * (7 - 13))) = 24\nreach 24! expression: (6 - (3 * (7 - 13)))"}, {"input": "1 1 1 8\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 1, 8\n(1) + (2) = 3, left: (1 + (1 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (1 + 1))) = 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 1, 1\nroll back, left: 1 1 1 8\n(1) + (8) = 9, left: (1 + 8) = 9, 1, 1\nroll back, left: 1 1 1 8\n(1) + (1) = 2, left: (1 + 1) = 2, 1, 8\n(1) + (8) = 9, left: (1 + 8) = 9, (1 + 1) = 2\nroll back, left: (1 + 1) = 2, 1, 8\n(1) + (2) = 3, left: (1 + (1 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (1 + 1))) = 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 1, 1\n(1) / (1) = 1, left: (1 / 1) = 1, (8 - 1) = 7\nroll back, left: (8 - 1) = 7, 1, 1\nroll back, left: 1 1 1 8\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, 1, 1\nroll back, left: 1 1 1 8\n(1) + (1) = 2, left: (1 + 1) = 2, 1, 8\n(1) + (2) = 3, left: (1 + (1 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (1 + 1))) = 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 1, 1\nroll back, left: 1 1 1 8\n(8) - (1) = 7, left: (8 - 1) = 7, 1, 1\n(7) / (1) = 7, left: ((8 - 1) / 1) = 7, 1\nroll back, left: (8 - 1) = 7, 1, 1\nroll back, left: 1 1 1 8\n(1) + (1) = 2, left: (1 + 1) = 2, 1, 8\n(1) + (2) = 3, left: (1 + (1 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (1 + 1))) = 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 1, 1\nroll back, left: 1 1 1 8\n(1) - (1) = 0, left: (1 - 1) = 0, 1, 8\nroll back, left: 1 1 1 8\n(1) / (1) = 1, left: (1 / 1) = 1, 1, 8\nroll back, left: 1 1 1 8\n(1) + (1) = 2, left: (1 + 1) = 2, 1, 8\n(1) + (2) = 3, left: (1 + (1 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (1 + 1))) = 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "1 1 1 8\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 1, 1\n(1) + (7) = 8, left: (1 + (8 - 1)) = 8, 1\nroll back, left: (8 - 1) = 7, 1, 1\nroll back, left: 1 1 1 8\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, 1, 1\nroll back, left: 1 1 1 8\n(1) + (1) = 2, left: (1 + 1) = 2, 1, 8\n(1) + (2) = 3, left: (1 + (1 + 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (1 + 1))) = 24\nreach 24! expression: (8 * (1 + (1 + 1)))"}, {"input": "13 7 11 6\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 13, 11\n(13) / (1) = 13, left: (13 / (7 - 6)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 / (7 - 6))) = 24\nreach 24! expression: (11 + (13 / (7 - 6)))"}, {"input": "13 7 11 6\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 13, 11\n(11) / (-1) = -11, left: (11 / (6 - 7)) = -11, 13\n(13) - (-11) = 24, left: (13 - (11 / (6 - 7))) = 24\nreach 24! expression: (13 - (11 / (6 - 7)))"}, {"input": "13 7 11 6\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 7, 6\n(7) - (6) = 1, left: (7 - 6) = 1, (13 + 11) = 24\n(24) * (1) = 24, left: ((13 + 11) * (7 - 6)) = 24\nreach 24! expression: ((13 + 11) * (7 - 6))"}, {"input": "13 7 11 6\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 13, 11\n(13) * (-1) = -13, left: (13 * (6 - 7)) = -13, 11\n(11) - (-13) = 24, left: (11 - (13 * (6 - 7))) = 24\nreach 24! expression: (11 - (13 * (6 - 7)))"}, {"input": "13 7 11 6\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 7, 6\n(7) - (6) = 1, left: (7 - 6) = 1, (13 + 11) = 24\n(24) / (1) = 24, left: ((13 + 11) / (7 - 6)) = 24\nreach 24! expression: ((13 + 11) / (7 - 6))"}, {"input": "13 7 11 6\n", "output": "(6) / (13) = 6/13, left: (6 / 13) = 6/13, 7, 11\nroll back, left: 13 7 11 6\n(6) - (13) = -7, left: (6 - 13) = -7, 7, 11\nroll back, left: 13 7 11 6\n(11) / (6) = 11/6, left: (11 / 6) = 11/6, 13, 7\nroll back, left: 13 7 11 6\n(7) - (6) = 1, left: (7 - 6) = 1, 13, 11\n(13) / (1) = 13, left: (13 / (7 - 6)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 / (7 - 6))) = 24\nreach 24! expression: (11 + (13 / (7 - 6)))"}, {"input": "13 7 11 6\n", "output": "(13) * (6) = 78, left: (13 * 6) = 78, 7, 11\nroll back, left: 13 7 11 6\n(7) * (11) = 77, left: (7 * 11) = 77, 13, 6\nroll back, left: 13 7 11 6\n(11) / (7) = 11/7, left: (11 / 7) = 11/7, 13, 6\nroll back, left: 13 7 11 6\n(13) + (11) = 24, left: (13 + 11) = 24, 7, 6\n(7) - (6) = 1, left: (7 - 6) = 1, (13 + 11) = 24\n(24) * (1) = 24, left: ((13 + 11) * (7 - 6)) = 24\nreach 24! expression: ((13 + 11) * (7 - 6))"}, {"input": "5 6 3 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 5, 3\n(5) - (3) = 2, left: (5 - 3) = 2, (6 + 6) = 12\n(12) * (2) = 24, left: ((6 + 6) * (5 - 3)) = 24\nreach 24! expression: ((6 + 6) * (5 - 3))"}, {"input": "5 6 3 6\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 5, 6\n(9) - (5) = 4, left: ((6 + 3) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((6 + 3) - 5)) = 24\nreach 24! expression: (6 * ((6 + 3) - 5))"}, {"input": "5 6 3 6\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 3, 6\n(3) - (-1) = 4, left: (3 - (5 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (5 - 6))) = 24\nreach 24! expression: (6 * (3 - (5 - 6)))"}, {"input": "5 6 3 6\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (6 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (6 - 5))) = 24\nreach 24! expression: (6 * (3 + (6 - 5)))"}, {"input": "5 6 3 6\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 6, 3\n(3) - (-1) = 4, left: (3 - (5 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (5 - 6))) = 24\nreach 24! expression: (6 * (3 - (5 - 6)))"}, {"input": "5 6 3 6\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 3, 6\n(6) / (6/5) = 5, left: (6 / (6 / 5)) = 5, 3\n(3) - (5) = -2, left: (3 - (6 / (6 / 5))) = -2\nroll back, left: (6 / (6 / 5)) = 5, 3\nroll back, left: (6 / 5) = 6/5, 3, 6\nroll back, left: 5 6 3 6\n(5) - (6) = -1, left: (5 - 6) = -1, 3, 6\n(3) - (-1) = 4, left: (3 - (5 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (5 - 6))) = 24\nreach 24! expression: (6 * (3 - (5 - 6)))"}, {"input": "5 6 3 6\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 6, 3\n(3) - (6) = -3, left: (3 - 6) = -3, (6 / 5) = 6/5\nroll back, left: (6 / 5) = 6/5, 6, 3\nroll back, left: 5 6 3 6\n(5) * (6) = 30, left: (5 * 6) = 30, 6, 3\nroll back, left: 5 6 3 6\n(5) - (6) = -1, left: (5 - 6) = -1, 6, 3\n(3) - (-1) = 4, left: (3 - (5 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (5 - 6))) = 24\nreach 24! expression: (6 * (3 - (5 - 6)))"}, {"input": "5 6 3 6\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 6, 3\n(6) - (3) = 3, left: (6 - 3) = 3, (6 - 5) = 1\nroll back, left: (6 - 5) = 1, 6, 3\n(6) * (1) = 6, left: (6 * (6 - 5)) = 6, 3\nroll back, left: (6 - 5) = 1, 6, 3\n(1) - (3) = -2, left: ((6 - 5) - 3) = -2, 6\nroll back, left: (6 - 5) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (6 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (6 - 5))) = 24\nreach 24! expression: (6 * (3 + (6 - 5)))"}, {"input": "5 6 3 6\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 5, 6\nroll back, left: 5 6 3 6\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 5, 6\nroll back, left: 5 6 3 6\n(6) + (3) = 9, left: (6 + 3) = 9, 5, 6\n(5) - (6) = -1, left: (5 - 6) = -1, (6 + 3) = 9\nroll back, left: (6 + 3) = 9, 5, 6\n(9) - (5) = 4, left: ((6 + 3) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((6 + 3) - 5)) = 24\nreach 24! expression: (6 * ((6 + 3) - 5))"}, {"input": "1 11 2 1\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (1 / 2) = 1/2\n(12) / (1/2) = 24, left: ((11 + 1) / (1 / 2)) = 24\nreach 24! expression: ((11 + 1) / (1 / 2))"}, {"input": "1 11 2 1\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 1, 1\n(1) + (22) = 23, left: (1 + (11 * 2)) = 23, 1\n(1) + (23) = 24, left: (1 + (1 + (11 * 2))) = 24\nreach 24! expression: (1 + (1 + (11 * 2)))"}, {"input": "1 11 2 1\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (1 + 1) = 2\n(2) + (22) = 24, left: ((1 + 1) + (11 * 2)) = 24\nreach 24! expression: ((1 + 1) + (11 * 2))"}, {"input": "1 11 2 1\n", "output": "(1) * (11) = 11, left: (1 * 11) = 11, 2, 1\n(1) + (11) = 12, left: (1 + (1 * 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (1 * 11))) = 24\nreach 24! expression: (2 * (1 + (1 * 11)))"}, {"input": "1 11 2 1\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 2, 1\n(1) + (-10) = -9, left: (1 + (1 - 11)) = -9, 2\nroll back, left: (1 - 11) = -10, 2, 1\n(1) - (-10) = 11, left: (1 - (1 - 11)) = 11, 2\nroll back, left: (1 - 11) = -10, 2, 1\nroll back, left: 1 11 2 1\n(1) * (11) = 11, left: (1 * 11) = 11, 2, 1\n(1) + (11) = 12, left: (1 + (1 * 11)) = 12, 2\n(2) * (12) = 24, left: (2 * (1 + (1 * 11))) = 24\nreach 24! expression: (2 * (1 + (1 * 11)))"}, {"input": "1 11 2 1\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 11, 2\n(2) / (2) = 1, left: ((1 + 1) / 2) = 1, 11\nroll back, left: (1 + 1) = 2, 11, 2\n(2) * (2) = 4, left: (2 * (1 + 1)) = 4, 11\n(4) - (11) = -7, left: ((2 * (1 + 1)) - 11) = -7\nroll back, left: (2 * (1 + 1)) = 4, 11\nroll back, left: (1 + 1) = 2, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (1 + 1) = 2\n(2) + (22) = 24, left: ((1 + 1) + (11 * 2)) = 24\nreach 24! expression: ((1 + 1) + (11 * 2))"}, {"input": "2 9 9 4\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 2, 4\n(2) + (18) = 20, left: (2 + (9 + 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 + (9 + 9))) = 24\nreach 24! expression: (4 + (2 + (9 + 9)))"}, {"input": "2 9 9 4\n", "output": "(9) + (4) = 13, left: (9 + 4) = 13, 2, 9\n(2) + (13) = 15, left: (2 + (9 + 4)) = 15, 9\n(9) + (15) = 24, left: (9 + (2 + (9 + 4))) = 24\nreach 24! expression: (9 + (2 + (9 + 4)))"}, {"input": "2 9 9 4\n", "output": "(9) + (4) = 13, left: (9 + 4) = 13, 2, 9\n(9) + (13) = 22, left: (9 + (9 + 4)) = 22, 2\n(2) + (22) = 24, left: (2 + (9 + (9 + 4))) = 24\nreach 24! expression: (2 + (9 + (9 + 4)))"}, {"input": "2 9 9 4\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 2, 9\n(9) * (4/9) = 4, left: (9 * (4 / 9)) = 4, 2\nroll back, left: (4 / 9) = 4/9, 2, 9\nroll back, left: 2 9 9 4\n(9) / (4) = 9/4, left: (9 / 4) = 9/4, 2, 9\nroll back, left: 2 9 9 4\n(9) + (4) = 13, left: (9 + 4) = 13, 2, 9\n(9) + (13) = 22, left: (9 + (9 + 4)) = 22, 2\n(2) + (22) = 24, left: (2 + (9 + (9 + 4))) = 24\nreach 24! expression: (2 + (9 + (9 + 4)))"}, {"input": "2 9 9 4\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 2, 9\nroll back, left: 2 9 9 4\n(9) - (4) = 5, left: (9 - 4) = 5, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (9 - 4) = 5\nroll back, left: (9 - 4) = 5, 2, 9\nroll back, left: 2 9 9 4\n(9) + (4) = 13, left: (9 + 4) = 13, 2, 9\n(2) + (13) = 15, left: (2 + (9 + 4)) = 15, 9\n(9) + (15) = 24, left: (9 + (2 + (9 + 4))) = 24\nreach 24! expression: (9 + (2 + (9 + 4)))"}, {"input": "2 9 9 4\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 2, 4\n(2) / (18) = 1/9, left: (2 / (9 + 9)) = 1/9, 4\nroll back, left: (9 + 9) = 18, 2, 4\n(2) - (18) = -16, left: (2 - (9 + 9)) = -16, 4\n(4) + (-16) = -12, left: (4 + (2 - (9 + 9))) = -12\nroll back, left: (2 - (9 + 9)) = -16, 4\nroll back, left: (9 + 9) = 18, 2, 4\n(2) + (18) = 20, left: (2 + (9 + 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (2 + (9 + 9))) = 24\nreach 24! expression: (4 + (2 + (9 + 9)))"}, {"input": "2 9 9 4\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 2, 9\nroll back, left: 2 9 9 4\n(9) / (4) = 9/4, left: (9 / 4) = 9/4, 2, 9\n(9/4) - (9) = -27/4, left: ((9 / 4) - 9) = -27/4, 2\nroll back, left: (9 / 4) = 9/4, 2, 9\nroll back, left: 2 9 9 4\n(9) + (4) = 13, left: (9 + 4) = 13, 2, 9\n(9) + (13) = 22, left: (9 + (9 + 4)) = 22, 2\n(2) + (22) = 24, left: (2 + (9 + (9 + 4))) = 24\nreach 24! expression: (2 + (9 + (9 + 4)))"}, {"input": "2 9 9 4\n", "output": "(9) / (4) = 9/4, left: (9 / 4) = 9/4, 2, 9\n(9/4) - (9) = -27/4, left: ((9 / 4) - 9) = -27/4, 2\n(2) - (-27/4) = 35/4, left: (2 - ((9 / 4) - 9)) = 35/4\nroll back, left: ((9 / 4) - 9) = -27/4, 2\nroll back, left: (9 / 4) = 9/4, 2, 9\nroll back, left: 2 9 9 4\n(9) + (4) = 13, left: (9 + 4) = 13, 2, 9\n(2) + (13) = 15, left: (2 + (9 + 4)) = 15, 9\n(9) + (15) = 24, left: (9 + (2 + (9 + 4))) = 24\nreach 24! expression: (9 + (2 + (9 + 4)))"}, {"input": "6 3 6 4\n", "output": "(6) + (4) = 10, left: (6 + 4) = 10, 6, 3\n(3) * (10) = 30, left: (3 * (6 + 4)) = 30, 6\n(30) - (6) = 24, left: ((3 * (6 + 4)) - 6) = 24\nreach 24! expression: ((3 * (6 + 4)) - 6)"}, {"input": "6 3 6 4\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 6, 6\n(6) + (12) = 18, left: (6 + (3 * 4)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 + (3 * 4))) = 24\nreach 24! expression: (6 + (6 + (3 * 4)))"}, {"input": "6 3 6 4\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (6 - 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (6 - 4))) = 24\nreach 24! expression: (3 * (6 + (6 - 4)))"}, {"input": "6 3 6 4\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 3, 4\n(12) - (4) = 8, left: ((6 + 6) - 4) = 8, 3\n(3) * (8) = 24, left: (3 * ((6 + 6) - 4)) = 24\nreach 24! expression: (3 * ((6 + 6) - 4))"}, {"input": "6 3 6 4\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 3, 4\n(3) / (12) = 1/4, left: (3 / (6 + 6)) = 1/4, 4\nroll back, left: (6 + 6) = 12, 3, 4\n(3) + (12) = 15, left: (3 + (6 + 6)) = 15, 4\nroll back, left: (6 + 6) = 12, 3, 4\n(12) / (3) = 4, left: ((6 + 6) / 3) = 4, 4\nroll back, left: (6 + 6) = 12, 3, 4\n(12) - (4) = 8, left: ((6 + 6) - 4) = 8, 3\n(3) * (8) = 24, left: (3 * ((6 + 6) - 4)) = 24\nreach 24! expression: (3 * ((6 + 6) - 4))"}, {"input": "6 3 6 4\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 3, 4\n(4) + (1) = 5, left: (4 + (6 / 6)) = 5, 3\n(3) + (5) = 8, left: (3 + (4 + (6 / 6))) = 8\nroll back, left: (4 + (6 / 6)) = 5, 3\nroll back, left: (6 / 6) = 1, 3, 4\nroll back, left: 6 3 6 4\n(6) + (6) = 12, left: (6 + 6) = 12, 3, 4\n(12) - (4) = 8, left: ((6 + 6) - 4) = 8, 3\n(3) * (8) = 24, left: (3 * ((6 + 6) - 4)) = 24\nreach 24! expression: (3 * ((6 + 6) - 4))"}, {"input": "6 3 6 4\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 6, 3\n(6) * (2) = 12, left: (6 * (6 - 4)) = 12, 3\nroll back, left: (6 - 4) = 2, 6, 3\n(2) / (6) = 1/3, left: ((6 - 4) / 6) = 1/3, 3\n(1/3) - (3) = -8/3, left: (((6 - 4) / 6) - 3) = -8/3\nroll back, left: ((6 - 4) / 6) = 1/3, 3\nroll back, left: (6 - 4) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (6 - 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (6 - 4))) = 24\nreach 24! expression: (3 * (6 + (6 - 4)))"}, {"input": "6 3 6 4\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 6, 3\nroll back, left: 6 3 6 4\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, 6, 3\n(2/3) - (6) = -16/3, left: ((4 / 6) - 6) = -16/3, 3\nroll back, left: (4 / 6) = 2/3, 6, 3\nroll back, left: 6 3 6 4\n(6) + (4) = 10, left: (6 + 4) = 10, 6, 3\n(3) * (10) = 30, left: (3 * (6 + 4)) = 30, 6\n(30) - (6) = 24, left: ((3 * (6 + 4)) - 6) = 24\nreach 24! expression: ((3 * (6 + 4)) - 6)"}, {"input": "6 3 6 4\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 6, 6\nroll back, left: 6 3 6 4\n(3) + (4) = 7, left: (3 + 4) = 7, 6, 6\n(6) / (7) = 6/7, left: (6 / (3 + 4)) = 6/7, 6\nroll back, left: (3 + 4) = 7, 6, 6\nroll back, left: 6 3 6 4\n(3) * (4) = 12, left: (3 * 4) = 12, 6, 6\n(6) + (12) = 18, left: (6 + (3 * 4)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 + (3 * 4))) = 24\nreach 24! expression: (6 + (6 + (3 * 4)))"}, {"input": "5 13 10 4\n", "output": "(5) + (10) = 15, left: (5 + 10) = 15, 13, 4\n(15) - (4) = 11, left: ((5 + 10) - 4) = 11, 13\n(13) + (11) = 24, left: (13 + ((5 + 10) - 4)) = 24\nreach 24! expression: (13 + ((5 + 10) - 4))"}, {"input": "5 13 10 4\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 5, 10\n(5) - (-9) = 14, left: (5 - (4 - 13)) = 14, 10\n(10) + (14) = 24, left: (10 + (5 - (4 - 13))) = 24\nreach 24! expression: (10 + (5 - (4 - 13)))"}, {"input": "5 13 10 4\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 5, 10\n(10) - (-9) = 19, left: (10 - (4 - 13)) = 19, 5\n(5) + (19) = 24, left: (5 + (10 - (4 - 13))) = 24\nreach 24! expression: (5 + (10 - (4 - 13)))"}, {"input": "5 13 10 4\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 13, 10\n(10) + (1) = 11, left: (10 + (5 - 4)) = 11, 13\n(13) + (11) = 24, left: (13 + (10 + (5 - 4))) = 24\nreach 24! expression: (13 + (10 + (5 - 4)))"}, {"input": "5 13 10 4\n", "output": "(13) + (10) = 23, left: (13 + 10) = 23, 5, 4\n(5) + (23) = 28, left: (5 + (13 + 10)) = 28, 4\n(28) - (4) = 24, left: ((5 + (13 + 10)) - 4) = 24\nreach 24! expression: ((5 + (13 + 10)) - 4)"}, {"input": "5 13 10 4\n", "output": "(5) - (10) = -5, left: (5 - 10) = -5, 13, 4\nroll back, left: 5 13 10 4\n(5) * (10) = 50, left: (5 * 10) = 50, 13, 4\nroll back, left: 5 13 10 4\n(10) / (5) = 2, left: (10 / 5) = 2, 13, 4\nroll back, left: 5 13 10 4\n(5) + (10) = 15, left: (5 + 10) = 15, 13, 4\n(15) - (4) = 11, left: ((5 + 10) - 4) = 11, 13\n(13) + (11) = 24, left: (13 + ((5 + 10) - 4)) = 24\nreach 24! expression: (13 + ((5 + 10) - 4))"}, {"input": "5 13 10 4\n", "output": "(10) / (13) = 10/13, left: (10 / 13) = 10/13, 5, 4\nroll back, left: 5 13 10 4\n(10) - (13) = -3, left: (10 - 13) = -3, 5, 4\n(-3) - (5) = -8, left: ((10 - 13) - 5) = -8, 4\nroll back, left: (10 - 13) = -3, 5, 4\nroll back, left: 5 13 10 4\n(13) + (10) = 23, left: (13 + 10) = 23, 5, 4\n(5) + (23) = 28, left: (5 + (13 + 10)) = 28, 4\n(28) - (4) = 24, left: ((5 + (13 + 10)) - 4) = 24\nreach 24! expression: ((5 + (13 + 10)) - 4)"}, {"input": "5 13 10 4\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 5, 10\nroll back, left: 5 13 10 4\n(13) / (4) = 13/4, left: (13 / 4) = 13/4, 5, 10\nroll back, left: 5 13 10 4\n(13) + (4) = 17, left: (13 + 4) = 17, 5, 10\nroll back, left: 5 13 10 4\n(4) - (13) = -9, left: (4 - 13) = -9, 5, 10\n(5) - (-9) = 14, left: (5 - (4 - 13)) = 14, 10\n(10) + (14) = 24, left: (10 + (5 - (4 - 13))) = 24\nreach 24! expression: (10 + (5 - (4 - 13)))"}, {"input": "3 12 2 12\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 12, 2\n(12) / (1/4) = 48, left: (12 / (3 / 12)) = 48, 2\n(48) / (2) = 24, left: ((12 / (3 / 12)) / 2) = 24\nreach 24! expression: ((12 / (3 / 12)) / 2)"}, {"input": "3 12 2 12\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 2, 12\n(12) + (36) = 48, left: (12 + (3 * 12)) = 48, 2\n(48) / (2) = 24, left: ((12 + (3 * 12)) / 2) = 24\nreach 24! expression: ((12 + (3 * 12)) / 2)"}, {"input": "3 12 2 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (12 + 12) = 24\n(24) / (1) = 24, left: ((12 + 12) / (3 - 2)) = 24\nreach 24! expression: ((12 + 12) / (3 - 2))"}, {"input": "3 12 2 12\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 12, 2\n(12) + (36) = 48, left: (12 + (3 * 12)) = 48, 2\n(48) / (2) = 24, left: ((12 + (3 * 12)) / 2) = 24\nreach 24! expression: ((12 + (3 * 12)) / 2)"}, {"input": "3 12 2 12\n", "output": "(3) * (2) = 6, left: (3 * 2) = 6, 12, 12\n(12) / (6) = 2, left: (12 / (3 * 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 / (3 * 2))) = 24\nreach 24! expression: (12 * (12 / (3 * 2)))"}, {"input": "3 12 2 12\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 2, 12\n(9) - (12) = -3, left: ((12 - 3) - 12) = -3, 2\n(2) * (-3) = -6, left: (2 * ((12 - 3) - 12)) = -6\nroll back, left: ((12 - 3) - 12) = -3, 2\nroll back, left: (12 - 3) = 9, 2, 12\nroll back, left: 3 12 2 12\n(3) * (12) = 36, left: (3 * 12) = 36, 2, 12\n(12) + (36) = 48, left: (12 + (3 * 12)) = 48, 2\n(48) / (2) = 24, left: ((12 + (3 * 12)) / 2) = 24\nreach 24! expression: ((12 + (3 * 12)) / 2)"}, {"input": "3 12 2 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (12 + 12) = 24\n(24) / (1) = 24, left: ((12 + 12) / (3 - 2)) = 24\nreach 24! expression: ((12 + 12) / (3 - 2))"}, {"input": "3 12 2 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (12 + 12) = 24\n(24) / (1) = 24, left: ((12 + 12) / (3 - 2)) = 24\nreach 24! expression: ((12 + 12) / (3 - 2))"}, {"input": "3 12 2 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (12 + 12) = 24\n(24) / (1) = 24, left: ((12 + 12) / (3 - 2)) = 24\nreach 24! expression: ((12 + 12) / (3 - 2))"}, {"input": "3 12 2 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 3, 2\n(3) - (2) = 1, left: (3 - 2) = 1, (12 + 12) = 24\n(24) / (1) = 24, left: ((12 + 12) / (3 - 2)) = 24\nreach 24! expression: ((12 + 12) / (3 - 2))"}, {"input": "7 2 9 3\n", "output": "(2) - (7) = -5, left: (2 - 7) = -5, 9, 3\n(3) * (-5) = -15, left: (3 * (2 - 7)) = -15, 9\n(9) - (-15) = 24, left: (9 - (3 * (2 - 7))) = 24\nreach 24! expression: (9 - (3 * (2 - 7)))"}, {"input": "7 2 9 3\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 2, 3\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, (7 + 9) = 16\n(16) * (3/2) = 24, left: ((7 + 9) * (3 / 2)) = 24\nreach 24! expression: ((7 + 9) * (3 / 2))"}, {"input": "7 2 9 3\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 2, 9\n(21) - (9) = 12, left: ((7 * 3) - 9) = 12, 2\n(2) * (12) = 24, left: (2 * ((7 * 3) - 9)) = 24\nreach 24! expression: (2 * ((7 * 3) - 9))"}, {"input": "7 2 9 3\n", "output": "(7) * (9) = 63, left: (7 * 9) = 63, 2, 3\n(63) - (2) = 61, left: ((7 * 9) - 2) = 61, 3\nroll back, left: (7 * 9) = 63, 2, 3\nroll back, left: 7 2 9 3\n(7) - (9) = -2, left: (7 - 9) = -2, 2, 3\nroll back, left: 7 2 9 3\n(7) + (9) = 16, left: (7 + 9) = 16, 2, 3\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, (7 + 9) = 16\n(16) * (3/2) = 24, left: ((7 + 9) * (3 / 2)) = 24\nreach 24! expression: ((7 + 9) * (3 / 2))"}, {"input": "7 2 9 3\n", "output": "(7) + (2) = 9, left: (7 + 2) = 9, 9, 3\nroll back, left: 7 2 9 3\n(7) * (2) = 14, left: (7 * 2) = 14, 9, 3\nroll back, left: 7 2 9 3\n(2) - (7) = -5, left: (2 - 7) = -5, 9, 3\n(9) + (3) = 12, left: (9 + 3) = 12, (2 - 7) = -5\nroll back, left: (2 - 7) = -5, 9, 3\n(3) * (-5) = -15, left: (3 * (2 - 7)) = -15, 9\n(9) - (-15) = 24, left: (9 - (3 * (2 - 7))) = 24\nreach 24! expression: (9 - (3 * (2 - 7)))"}, {"input": "7 2 9 3\n", "output": "(7) / (9) = 7/9, left: (7 / 9) = 7/9, 2, 3\n(2) * (3) = 6, left: (2 * 3) = 6, (7 / 9) = 7/9\nroll back, left: (7 / 9) = 7/9, 2, 3\nroll back, left: 7 2 9 3\n(9) / (7) = 9/7, left: (9 / 7) = 9/7, 2, 3\nroll back, left: 7 2 9 3\n(7) + (9) = 16, left: (7 + 9) = 16, 2, 3\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, (7 + 9) = 16\n(16) * (3/2) = 24, left: ((7 + 9) * (3 / 2)) = 24\nreach 24! expression: ((7 + 9) * (3 / 2))"}, {"input": "7 2 9 3\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 2, 9\nroll back, left: 7 2 9 3\n(7) - (3) = 4, left: (7 - 3) = 4, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (7 - 3) = 4\nroll back, left: (7 - 3) = 4, 2, 9\nroll back, left: 7 2 9 3\n(7) * (3) = 21, left: (7 * 3) = 21, 2, 9\n(21) - (9) = 12, left: ((7 * 3) - 9) = 12, 2\n(2) * (12) = 24, left: (2 * ((7 * 3) - 9)) = 24\nreach 24! expression: (2 * ((7 * 3) - 9))"}, {"input": "7 2 9 3\n", "output": "(2) - (7) = -5, left: (2 - 7) = -5, 9, 3\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, (2 - 7) = -5\nroll back, left: (2 - 7) = -5, 9, 3\n(9) - (3) = 6, left: (9 - 3) = 6, (2 - 7) = -5\n(-5) + (6) = 1, left: ((2 - 7) + (9 - 3)) = 1\nroll back, left: (9 - 3) = 6, (2 - 7) = -5\nroll back, left: (2 - 7) = -5, 9, 3\n(3) * (-5) = -15, left: (3 * (2 - 7)) = -15, 9\n(9) - (-15) = 24, left: (9 - (3 * (2 - 7))) = 24\nreach 24! expression: (9 - (3 * (2 - 7)))"}, {"input": "9 10 4 2\n", "output": "(10) + (2) = 12, left: (10 + 2) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (10 + 2) = 12\n(36) - (12) = 24, left: ((9 * 4) - (10 + 2)) = 24\nreach 24! expression: ((9 * 4) - (10 + 2))"}, {"input": "9 10 4 2\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (10 - 4) = 6\n(6) + (18) = 24, left: ((10 - 4) + (9 * 2)) = 24\nreach 24! expression: ((10 - 4) + (9 * 2))"}, {"input": "9 10 4 2\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 10, 2\n(36) - (2) = 34, left: ((9 * 4) - 2) = 34, 10\n(34) - (10) = 24, left: (((9 * 4) - 2) - 10) = 24\nreach 24! expression: (((9 * 4) - 2) - 10)"}, {"input": "9 10 4 2\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (4 - 10) = -6\n(18) - (-6) = 24, left: ((9 * 2) - (4 - 10)) = 24\nreach 24! expression: ((9 * 2) - (4 - 10))"}, {"input": "9 10 4 2\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 4, 2\nroll back, left: 9 10 4 2\n(10) / (4) = 5/2, left: (10 / 4) = 5/2, 9, 2\n(5/2) - (9) = -13/2, left: ((10 / 4) - 9) = -13/2, 2\nroll back, left: (10 / 4) = 5/2, 9, 2\nroll back, left: 9 10 4 2\n(4) - (10) = -6, left: (4 - 10) = -6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (4 - 10) = -6\n(18) - (-6) = 24, left: ((9 * 2) - (4 - 10)) = 24\nreach 24! expression: ((9 * 2) - (4 - 10))"}, {"input": "9 10 4 2\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 9, 4\n(4) + (5) = 9, left: (4 + (10 / 2)) = 9, 9\nroll back, left: (10 / 2) = 5, 9, 4\n(4) / (9) = 4/9, left: (4 / 9) = 4/9, (10 / 2) = 5\nroll back, left: (10 / 2) = 5, 9, 4\nroll back, left: 9 10 4 2\n(10) + (2) = 12, left: (10 + 2) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (10 + 2) = 12\n(36) - (12) = 24, left: ((9 * 4) - (10 + 2)) = 24\nreach 24! expression: ((9 * 4) - (10 + 2))"}, {"input": "9 10 4 2\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 9, 2\n(9) + (-6) = 3, left: (9 + (4 - 10)) = 3, 2\n(3) / (2) = 3/2, left: ((9 + (4 - 10)) / 2) = 3/2\nroll back, left: (9 + (4 - 10)) = 3, 2\nroll back, left: (4 - 10) = -6, 9, 2\n(2) + (-6) = -4, left: (2 + (4 - 10)) = -4, 9\nroll back, left: (4 - 10) = -6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (4 - 10) = -6\n(18) - (-6) = 24, left: ((9 * 2) - (4 - 10)) = 24\nreach 24! expression: ((9 * 2) - (4 - 10))"}, {"input": "9 10 4 2\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 10, 2\n(2) - (-5) = 7, left: (2 - (4 - 9)) = 7, 10\nroll back, left: (4 - 9) = -5, 10, 2\nroll back, left: 9 10 4 2\n(9) - (4) = 5, left: (9 - 4) = 5, 10, 2\nroll back, left: 9 10 4 2\n(9) * (4) = 36, left: (9 * 4) = 36, 10, 2\n(36) - (2) = 34, left: ((9 * 4) - 2) = 34, 10\n(34) - (10) = 24, left: (((9 * 4) - 2) - 10) = 24\nreach 24! expression: (((9 * 4) - 2) - 10)"}, {"input": "5 4 12 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 5, 4\n(5) * (4) = 20, left: (5 * (12 - 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 * (12 - 8))) = 24\nreach 24! expression: (4 + (5 * (12 - 8)))"}, {"input": "5 4 12 8\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 4, 8\n(7) - (4) = 3, left: ((12 - 5) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 5) - 4)) = 24\nreach 24! expression: (8 * ((12 - 5) - 4))"}, {"input": "5 4 12 8\n", "output": "(5) + (4) = 9, left: (5 + 4) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (5 + 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (5 + 4))) = 24\nreach 24! expression: (8 * (12 - (5 + 4)))"}, {"input": "5 4 12 8\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 12, 8\n(8) - (12) = -4, left: (8 - 12) = -4, (4 / 5) = 4/5\nroll back, left: (4 / 5) = 4/5, 12, 8\n(12) + (8) = 20, left: (12 + 8) = 20, (4 / 5) = 4/5\nroll back, left: (4 / 5) = 4/5, 12, 8\nroll back, left: 5 4 12 8\n(5) + (4) = 9, left: (5 + 4) = 9, 12, 8\n(12) - (9) = 3, left: (12 - (5 + 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (12 - (5 + 4))) = 24\nreach 24! expression: (8 * (12 - (5 + 4)))"}, {"input": "5 4 12 8\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 5, 12\n(12) - (5) = 7, left: ((4 + 8) - 5) = 7, 12\nroll back, left: (4 + 8) = 12, 5, 12\nroll back, left: 5 4 12 8\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, 5, 12\nroll back, left: 5 4 12 8\n(12) - (5) = 7, left: (12 - 5) = 7, 4, 8\n(7) - (4) = 3, left: ((12 - 5) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 5) - 4)) = 24\nreach 24! expression: (8 * ((12 - 5) - 4))"}, {"input": "5 4 12 8\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 5, 4\n(5) / (3/2) = 10/3, left: (5 / (12 / 8)) = 10/3, 4\nroll back, left: (12 / 8) = 3/2, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (12 / 8) = 3/2\nroll back, left: (12 / 8) = 3/2, 5, 4\nroll back, left: 5 4 12 8\n(12) - (8) = 4, left: (12 - 8) = 4, 5, 4\n(5) * (4) = 20, left: (5 * (12 - 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 * (12 - 8))) = 24\nreach 24! expression: (4 + (5 * (12 - 8)))"}, {"input": "5 4 12 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 5, 4\n(4) - (5) = -1, left: ((12 - 8) - 5) = -1, 4\nroll back, left: (12 - 8) = 4, 5, 4\n(5) + (4) = 9, left: (5 + (12 - 8)) = 9, 4\nroll back, left: (12 - 8) = 4, 5, 4\n(5) - (4) = 1, left: (5 - (12 - 8)) = 1, 4\nroll back, left: (12 - 8) = 4, 5, 4\n(5) * (4) = 20, left: (5 * (12 - 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 * (12 - 8))) = 24\nreach 24! expression: (4 + (5 * (12 - 8)))"}, {"input": "12 12 12 10\n", "output": "(12) * (12) = 144, left: (12 * 12) = 144, 12, 10\n(12) * (10) = 120, left: (12 * 10) = 120, (12 * 12) = 144\n(144) - (120) = 24, left: ((12 * 12) - (12 * 10)) = 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 12 10\n", "output": "(12) * (10) = 120, left: (12 * 10) = 120, 12, 12\n(12) * (12) = 144, left: (12 * 12) = 144, (12 * 10) = 120\n(144) - (120) = 24, left: ((12 * 12) - (12 * 10)) = 24\nreach 24! expression: ((12 * 12) - (12 * 10))"}, {"input": "12 12 1 12\n", "output": "(12) / (12) = 1, left: (12 / 12) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (12 / 12)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (12 / 12))) = 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "12 12 1 12\n", "output": "(12) / (12) = 1, left: (12 / 12) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (12 / 12)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (12 / 12))) = 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "12 12 1 12\n", "output": "(12) * (1) = 12, left: (12 * 1) = 12, 12, 12\n(12) / (12) = 1, left: ((12 * 1) / 12) = 1, 12\nroll back, left: (12 * 1) = 12, 12, 12\nroll back, left: 12 12 1 12\n(1) - (12) = -11, left: (1 - 12) = -11, 12, 12\nroll back, left: 12 12 1 12\n(12) / (12) = 1, left: (12 / 12) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (12 / 12)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (12 / 12))) = 24\nreach 24! expression: (12 * (1 + (12 / 12)))"}, {"input": "5 5 10 10\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 10, 10\n(10) / (10) = 1, left: (10 / 10) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (10 / 10)) = 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "5 5 10 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (10 / 10) = 1\n(25) - (1) = 24, left: ((5 * 5) - (10 / 10)) = 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "5 5 10 10\n", "output": "(5) + (10) = 15, left: (5 + 10) = 15, 5, 10\nroll back, left: 5 5 10 10\n(5) - (10) = -5, left: (5 - 10) = -5, 5, 10\nroll back, left: 5 5 10 10\n(10) - (5) = 5, left: (10 - 5) = 5, 5, 10\nroll back, left: 5 5 10 10\n(10) / (10) = 1, left: (10 / 10) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (10 / 10) = 1\n(25) - (1) = 24, left: ((5 * 5) - (10 / 10)) = 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "5 5 10 10\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 5, 10\n(5) + (5) = 10, left: (5 + (10 - 5)) = 10, 10\nroll back, left: (10 - 5) = 5, 5, 10\nroll back, left: 5 5 10 10\n(10) / (5) = 2, left: (10 / 5) = 2, 5, 10\nroll back, left: 5 5 10 10\n(10) / (10) = 1, left: (10 / 10) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (10 / 10) = 1\n(25) - (1) = 24, left: ((5 * 5) - (10 / 10)) = 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "5 5 10 10\n", "output": "(5) * (10) = 50, left: (5 * 10) = 50, 5, 10\nroll back, left: 5 5 10 10\n(5) - (10) = -5, left: (5 - 10) = -5, 5, 10\nroll back, left: 5 5 10 10\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, 5, 10\nroll back, left: 5 5 10 10\n(10) / (10) = 1, left: (10 / 10) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (10 / 10) = 1\n(25) - (1) = 24, left: ((5 * 5) - (10 / 10)) = 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "5 5 10 10\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 10, 10\nroll back, left: 5 5 10 10\n(5) + (5) = 10, left: (5 + 5) = 10, 10, 10\n(10) * (10) = 100, left: (10 * (5 + 5)) = 100, 10\nroll back, left: (5 + 5) = 10, 10, 10\nroll back, left: 5 5 10 10\n(5) * (5) = 25, left: (5 * 5) = 25, 10, 10\n(10) / (10) = 1, left: (10 / 10) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (10 / 10)) = 24\nreach 24! expression: ((5 * 5) - (10 / 10))"}, {"input": "6 10 6 12\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 6, 12\n(6) + (-4) = 2, left: (6 + (6 - 10)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 + (6 - 10))) = 24\nreach 24! expression: (12 * (6 + (6 - 10)))"}, {"input": "6 10 6 12\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 6, 12\n(6) - (4) = 2, left: (6 - (10 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 - (10 - 6))) = 24\nreach 24! expression: (12 * (6 - (10 - 6)))"}, {"input": "6 10 6 12\n", "output": "(10) + (6) = 16, left: (10 + 6) = 16, 6, 12\n(16) - (12) = 4, left: ((10 + 6) - 12) = 4, 6\n(6) * (4) = 24, left: (6 * ((10 + 6) - 12)) = 24\nreach 24! expression: (6 * ((10 + 6) - 12))"}, {"input": "6 10 6 12\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 10, 12\n(12) - (10) = 2, left: ((6 + 6) - 10) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 + 6) - 10)) = 24\nreach 24! expression: (12 * ((6 + 6) - 10))"}, {"input": "6 10 6 12\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 10, 12\nroll back, left: 6 10 6 12\n(6) * (6) = 36, left: (6 * 6) = 36, 10, 12\n(12) - (36) = -24, left: (12 - (6 * 6)) = -24, 10\nroll back, left: (6 * 6) = 36, 10, 12\nroll back, left: 6 10 6 12\n(6) + (6) = 12, left: (6 + 6) = 12, 10, 12\n(12) - (10) = 2, left: ((6 + 6) - 10) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 + 6) - 10)) = 24\nreach 24! expression: (12 * ((6 + 6) - 10))"}, {"input": "6 10 6 12\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 10, 12\n(12) - (0) = 12, left: (12 - (6 - 6)) = 12, 10\n(10) - (12) = -2, left: (10 - (12 - (6 - 6))) = -2\nroll back, left: (12 - (6 - 6)) = 12, 10\nroll back, left: (6 - 6) = 0, 10, 12\nroll back, left: 6 10 6 12\n(6) + (6) = 12, left: (6 + 6) = 12, 10, 12\n(12) - (10) = 2, left: ((6 + 6) - 10) = 2, 12\n(12) * (2) = 24, left: (12 * ((6 + 6) - 10)) = 24\nreach 24! expression: (12 * ((6 + 6) - 10))"}, {"input": "6 3 6 11\n", "output": "(6) * (11) = 66, left: (6 * 11) = 66, 6, 3\n(6) + (66) = 72, left: (6 + (6 * 11)) = 72, 3\n(72) / (3) = 24, left: ((6 + (6 * 11)) / 3) = 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) * (11) = 66, left: (6 * 11) = 66, 3, 6\n(6) + (66) = 72, left: (6 + (6 * 11)) = 72, 3\n(72) / (3) = 24, left: ((6 + (6 * 11)) / 3) = 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 3, 11\nroll back, left: 6 3 6 11\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 6, 11\n(6) + (1/2) = 13/2, left: (6 + (3 / 6)) = 13/2, 11\nroll back, left: (3 / 6) = 1/2, 6, 11\nroll back, left: 6 3 6 11\n(6) * (11) = 66, left: (6 * 11) = 66, 6, 3\n(6) + (66) = 72, left: (6 + (6 * 11)) = 72, 3\n(72) / (3) = 24, left: ((6 + (6 * 11)) / 3) = 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 6, 11\nroll back, left: 6 3 6 11\n(6) + (3) = 9, left: (6 + 3) = 9, 6, 11\nroll back, left: 6 3 6 11\n(3) / (11) = 3/11, left: (3 / 11) = 3/11, 6, 6\nroll back, left: 6 3 6 11\n(6) * (11) = 66, left: (6 * 11) = 66, 3, 6\n(6) + (66) = 72, left: (6 + (6 * 11)) = 72, 3\n(72) / (3) = 24, left: ((6 + (6 * 11)) / 3) = 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 3, 11\n(11) - (0) = 11, left: (11 - (6 - 6)) = 11, 3\nroll back, left: (6 - 6) = 0, 3, 11\nroll back, left: 6 3 6 11\n(6) - (6) = 0, left: (6 - 6) = 0, 3, 11\nroll back, left: 6 3 6 11\n(6) * (11) = 66, left: (6 * 11) = 66, 6, 3\n(6) + (66) = 72, left: (6 + (6 * 11)) = 72, 3\n(72) / (3) = 24, left: ((6 + (6 * 11)) / 3) = 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 3, 11\n(3) * (11) = 33, left: (3 * 11) = 33, (6 + 6) = 12\nroll back, left: (6 + 6) = 12, 3, 11\nroll back, left: 6 3 6 11\n(6) / (6) = 1, left: (6 / 6) = 1, 3, 11\nroll back, left: 6 3 6 11\n(6) * (11) = 66, left: (6 * 11) = 66, 3, 6\n(6) + (66) = 72, left: (6 + (6 * 11)) = 72, 3\n(72) / (3) = 24, left: ((6 + (6 * 11)) / 3) = 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) * (11) = 66, left: (6 * 11) = 66, 3, 6\n(6) + (66) = 72, left: (6 + (6 * 11)) = 72, 3\n(72) - (3) = 69, left: ((6 + (6 * 11)) - 3) = 69\nroll back, left: (6 + (6 * 11)) = 72, 3\n(3) - (72) = -69, left: (3 - (6 + (6 * 11))) = -69\nroll back, left: (6 + (6 * 11)) = 72, 3\n(72) / (3) = 24, left: ((6 + (6 * 11)) / 3) = 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) * (11) = 66, left: (6 * 11) = 66, 3, 6\n(6) + (66) = 72, left: (6 + (6 * 11)) = 72, 3\n(72) - (3) = 69, left: ((6 + (6 * 11)) - 3) = 69\nroll back, left: (6 + (6 * 11)) = 72, 3\n(3) - (72) = -69, left: (3 - (6 + (6 * 11))) = -69\nroll back, left: (6 + (6 * 11)) = 72, 3\n(72) / (3) = 24, left: ((6 + (6 * 11)) / 3) = 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) * (11) = 66, left: (6 * 11) = 66, 3, 6\n(6) + (66) = 72, left: (6 + (6 * 11)) = 72, 3\n(72) - (3) = 69, left: ((6 + (6 * 11)) - 3) = 69\nroll back, left: (6 + (6 * 11)) = 72, 3\n(3) - (72) = -69, left: (3 - (6 + (6 * 11))) = -69\nroll back, left: (6 + (6 * 11)) = 72, 3\n(72) / (3) = 24, left: ((6 + (6 * 11)) / 3) = 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 3 6 11\n", "output": "(6) * (11) = 66, left: (6 * 11) = 66, 3, 6\n(6) + (66) = 72, left: (6 + (6 * 11)) = 72, 3\n(72) - (3) = 69, left: ((6 + (6 * 11)) - 3) = 69\nroll back, left: (6 + (6 * 11)) = 72, 3\n(3) - (72) = -69, left: (3 - (6 + (6 * 11))) = -69\nroll back, left: (6 + (6 * 11)) = 72, 3\n(72) / (3) = 24, left: ((6 + (6 * 11)) / 3) = 24\nreach 24! expression: ((6 + (6 * 11)) / 3)"}, {"input": "6 8 11 1\n", "output": "(6) + (11) = 17, left: (6 + 11) = 17, 8, 1\n(1) - (8) = -7, left: (1 - 8) = -7, (6 + 11) = 17\n(17) - (-7) = 24, left: ((6 + 11) - (1 - 8)) = 24\nreach 24! expression: ((6 + 11) - (1 - 8))"}, {"input": "6 8 11 1\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 8, 11\n(8) + (11) = 19, left: (8 + 11) = 19, (6 - 1) = 5\n(5) + (19) = 24, left: ((6 - 1) + (8 + 11)) = 24\nreach 24! expression: ((6 - 1) + (8 + 11))"}, {"input": "6 8 11 1\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 6, 1\n(1) + (3) = 4, left: (1 + (11 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (11 - 8))) = 24\nreach 24! expression: (6 * (1 + (11 - 8)))"}, {"input": "6 8 11 1\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 6, 8\n(12) - (8) = 4, left: ((11 + 1) - 8) = 4, 6\n(6) * (4) = 24, left: (6 * ((11 + 1) - 8)) = 24\nreach 24! expression: (6 * ((11 + 1) - 8))"}, {"input": "6 8 11 1\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 6, 8\n(6) + (8) = 14, left: (6 + 8) = 14, (11 - 1) = 10\n(10) + (14) = 24, left: ((11 - 1) + (6 + 8)) = 24\nreach 24! expression: ((11 - 1) + (6 + 8))"}, {"input": "6 8 11 1\n", "output": "(6) * (11) = 66, left: (6 * 11) = 66, 8, 1\n(8) - (1) = 7, left: (8 - 1) = 7, (6 * 11) = 66\nroll back, left: (6 * 11) = 66, 8, 1\nroll back, left: 6 8 11 1\n(11) / (6) = 11/6, left: (11 / 6) = 11/6, 8, 1\nroll back, left: 6 8 11 1\n(6) + (11) = 17, left: (6 + 11) = 17, 8, 1\n(1) - (8) = -7, left: (1 - 8) = -7, (6 + 11) = 17\n(17) - (-7) = 24, left: ((6 + 11) - (1 - 8)) = 24\nreach 24! expression: ((6 + 11) - (1 - 8))"}, {"input": "6 8 11 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 8, 11\n(8) + (11) = 19, left: (8 + 11) = 19, (6 * 1) = 6\nroll back, left: (6 * 1) = 6, 8, 11\nroll back, left: 6 8 11 1\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, 8, 11\nroll back, left: 6 8 11 1\n(6) - (1) = 5, left: (6 - 1) = 5, 8, 11\n(8) + (11) = 19, left: (8 + 11) = 19, (6 - 1) = 5\n(5) + (19) = 24, left: ((6 - 1) + (8 + 11)) = 24\nreach 24! expression: ((6 - 1) + (8 + 11))"}, {"input": "6 8 11 1\n", "output": "(11) * (1) = 11, left: (11 * 1) = 11, 6, 8\n(11) / (8) = 11/8, left: ((11 * 1) / 8) = 11/8, 6\nroll back, left: (11 * 1) = 11, 6, 8\n(8) / (11) = 8/11, left: (8 / (11 * 1)) = 8/11, 6\nroll back, left: (11 * 1) = 11, 6, 8\nroll back, left: 6 8 11 1\n(11) + (1) = 12, left: (11 + 1) = 12, 6, 8\n(12) - (8) = 4, left: ((11 + 1) - 8) = 4, 6\n(6) * (4) = 24, left: (6 * ((11 + 1) - 8)) = 24\nreach 24! expression: (6 * ((11 + 1) - 8))"}, {"input": "8 11 6 2\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 6, 2\n(6) + (2) = 8, left: (6 + 2) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (6 + 2)) = 24\nreach 24! expression: ((11 - 8) * (6 + 2))"}, {"input": "8 11 6 2\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (6 - 8) = -2\n(22) - (-2) = 24, left: ((11 * 2) - (6 - 8)) = 24\nreach 24! expression: ((11 * 2) - (6 - 8))"}, {"input": "8 11 6 2\n", "output": "(6) + (2) = 8, left: (6 + 2) = 8, 8, 11\n(11) - (8) = 3, left: (11 - (6 + 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (11 - (6 + 2))) = 24\nreach 24! expression: (8 * (11 - (6 + 2)))"}, {"input": "8 11 6 2\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 8, 6\n(6) - (8) = -2, left: (6 - 8) = -2, (11 * 2) = 22\n(22) - (-2) = 24, left: ((11 * 2) - (6 - 8)) = 24\nreach 24! expression: ((11 * 2) - (6 - 8))"}, {"input": "8 11 6 2\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 8, 11\nroll back, left: 8 11 6 2\n(6) - (2) = 4, left: (6 - 2) = 4, 8, 11\n(8) / (4) = 2, left: (8 / (6 - 2)) = 2, 11\nroll back, left: (6 - 2) = 4, 8, 11\nroll back, left: 8 11 6 2\n(6) + (2) = 8, left: (6 + 2) = 8, 8, 11\n(11) - (8) = 3, left: (11 - (6 + 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (11 - (6 + 2))) = 24\nreach 24! expression: (8 * (11 - (6 + 2)))"}, {"input": "8 11 6 2\n", "output": "(8) + (2) = 10, left: (8 + 2) = 10, 11, 6\nroll back, left: 8 11 6 2\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 11, 6\nroll back, left: 8 11 6 2\n(2) - (8) = -6, left: (2 - 8) = -6, 11, 6\nroll back, left: 8 11 6 2\n(11) * (2) = 22, left: (11 * 2) = 22, 8, 6\n(6) - (8) = -2, left: (6 - 8) = -2, (11 * 2) = 22\n(22) - (-2) = 24, left: ((11 * 2) - (6 - 8)) = 24\nreach 24! expression: ((11 * 2) - (6 - 8))"}, {"input": "8 11 6 2\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 11, 2\n(2) * (-2) = -4, left: (2 * (6 - 8)) = -4, 11\n(-4) - (11) = -15, left: ((2 * (6 - 8)) - 11) = -15\nroll back, left: (2 * (6 - 8)) = -4, 11\nroll back, left: (6 - 8) = -2, 11, 2\n(2) - (-2) = 4, left: (2 - (6 - 8)) = 4, 11\nroll back, left: (6 - 8) = -2, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (6 - 8) = -2\n(22) - (-2) = 24, left: ((11 * 2) - (6 - 8)) = 24\nreach 24! expression: ((11 * 2) - (6 - 8))"}, {"input": "3 7 9 8\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 3, 7\n(7) + (1) = 8, left: (7 + (9 - 8)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (9 - 8))) = 24\nreach 24! expression: (3 * (7 + (9 - 8)))"}, {"input": "3 7 9 8\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (8 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (8 - 7))) = 24\nreach 24! expression: (3 * (9 - (8 - 7)))"}, {"input": "3 7 9 8\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 3, 9\n(9) + (-1) = 8, left: (9 + (7 - 8)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 + (7 - 8))) = 24\nreach 24! expression: (3 * (9 + (7 - 8)))"}, {"input": "3 7 9 8\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 3, 8\n(16) - (8) = 8, left: ((7 + 9) - 8) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 9) - 8)) = 24\nreach 24! expression: (3 * ((7 + 9) - 8))"}, {"input": "3 7 9 8\n", "output": "(9) * (8) = 72, left: (9 * 8) = 72, 3, 7\nroll back, left: 3 7 9 8\n(9) + (8) = 17, left: (9 + 8) = 17, 3, 7\n(3) - (17) = -14, left: (3 - (9 + 8)) = -14, 7\nroll back, left: (9 + 8) = 17, 3, 7\nroll back, left: 3 7 9 8\n(9) - (8) = 1, left: (9 - 8) = 1, 3, 7\n(7) + (1) = 8, left: (7 + (9 - 8)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (9 - 8))) = 24\nreach 24! expression: (3 * (7 + (9 - 8)))"}, {"input": "3 7 9 8\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 3, 8\n(8) / (2) = 4, left: (8 / (9 - 7)) = 4, 3\n(3) - (4) = -1, left: (3 - (8 / (9 - 7))) = -1\nroll back, left: (8 / (9 - 7)) = 4, 3\nroll back, left: (9 - 7) = 2, 3, 8\nroll back, left: 3 7 9 8\n(7) + (9) = 16, left: (7 + 9) = 16, 3, 8\n(16) - (8) = 8, left: ((7 + 9) - 8) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 9) - 8)) = 24\nreach 24! expression: (3 * ((7 + 9) - 8))"}, {"input": "3 7 9 8\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 7, 9\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, (3 - 8) = -5\nroll back, left: (3 - 8) = -5, 7, 9\nroll back, left: 3 7 9 8\n(3) - (9) = -6, left: (3 - 9) = -6, 7, 8\nroll back, left: 3 7 9 8\n(8) - (7) = 1, left: (8 - 7) = 1, 3, 9\n(9) - (1) = 8, left: (9 - (8 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (8 - 7))) = 24\nreach 24! expression: (3 * (9 - (8 - 7)))"}, {"input": "3 7 9 8\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 3, 8\nroll back, left: 3 7 9 8\n(7) * (9) = 63, left: (7 * 9) = 63, 3, 8\n(8) / (63) = 8/63, left: (8 / (7 * 9)) = 8/63, 3\nroll back, left: (7 * 9) = 63, 3, 8\nroll back, left: 3 7 9 8\n(7) + (9) = 16, left: (7 + 9) = 16, 3, 8\n(16) - (8) = 8, left: ((7 + 9) - 8) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 9) - 8)) = 24\nreach 24! expression: (3 * ((7 + 9) - 8))"}, {"input": "3 7 9 8\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 3, 9\n(3) * (9) = 27, left: (3 * 9) = 27, (7 - 8) = -1\nroll back, left: (7 - 8) = -1, 3, 9\n(9) / (3) = 3, left: (9 / 3) = 3, (7 - 8) = -1\nroll back, left: (7 - 8) = -1, 3, 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, (7 - 8) = -1\nroll back, left: (7 - 8) = -1, 3, 9\n(9) + (-1) = 8, left: (9 + (7 - 8)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 + (7 - 8))) = 24\nreach 24! expression: (3 * (9 + (7 - 8)))"}, {"input": "7 1 10 12\n", "output": "(7) + (1) = 8, left: (7 + 1) = 8, 10, 12\n(10) - (8) = 2, left: (10 - (7 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 - (7 + 1))) = 24\nreach 24! expression: (12 * (10 - (7 + 1)))"}, {"input": "7 1 10 12\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 7, 12\n(9) - (7) = 2, left: ((10 - 1) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 - 1) - 7)) = 24\nreach 24! expression: (12 * ((10 - 1) - 7))"}, {"input": "7 1 10 12\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 1, 12\n(3) - (1) = 2, left: ((10 - 7) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 - 7) - 1)) = 24\nreach 24! expression: (12 * ((10 - 7) - 1))"}, {"input": "7 1 10 12\n", "output": "(10) + (12) = 22, left: (10 + 12) = 22, 7, 1\n(22) / (7) = 22/7, left: ((10 + 12) / 7) = 22/7, 1\nroll back, left: (10 + 12) = 22, 7, 1\nroll back, left: 7 1 10 12\n(7) + (10) = 17, left: (7 + 10) = 17, 1, 12\nroll back, left: 7 1 10 12\n(10) - (7) = 3, left: (10 - 7) = 3, 1, 12\n(3) - (1) = 2, left: ((10 - 7) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 - 7) - 1)) = 24\nreach 24! expression: (12 * ((10 - 7) - 1))"}, {"input": "7 1 10 12\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 7, 1\n(1) - (7) = -6, left: (1 - 7) = -6, (12 - 10) = 2\nroll back, left: (12 - 10) = 2, 7, 1\nroll back, left: 7 1 10 12\n(10) * (12) = 120, left: (10 * 12) = 120, 7, 1\nroll back, left: 7 1 10 12\n(7) + (1) = 8, left: (7 + 1) = 8, 10, 12\n(10) - (8) = 2, left: (10 - (7 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 - (7 + 1))) = 24\nreach 24! expression: (12 * (10 - (7 + 1)))"}, {"input": "7 1 10 12\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 7, 1\nroll back, left: 7 1 10 12\n(10) - (12) = -2, left: (10 - 12) = -2, 7, 1\nroll back, left: 7 1 10 12\n(1) / (10) = 1/10, left: (1 / 10) = 1/10, 7, 12\nroll back, left: 7 1 10 12\n(10) - (1) = 9, left: (10 - 1) = 9, 7, 12\n(9) - (7) = 2, left: ((10 - 1) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 - 1) - 7)) = 24\nreach 24! expression: (12 * ((10 - 1) - 7))"}, {"input": "7 1 10 12\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 10, 12\n(10) / (-6) = -5/3, left: (10 / (1 - 7)) = -5/3, 12\nroll back, left: (1 - 7) = -6, 10, 12\nroll back, left: 7 1 10 12\n(1) / (7) = 1/7, left: (1 / 7) = 1/7, 10, 12\nroll back, left: 7 1 10 12\n(7) + (1) = 8, left: (7 + 1) = 8, 10, 12\n(10) - (8) = 2, left: (10 - (7 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 - (7 + 1))) = 24\nreach 24! expression: (12 * (10 - (7 + 1)))"}, {"input": "1 8 13 5\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (13 - 8)) = 25, 1\n(25) - (1) = 24, left: ((5 * (13 - 8)) - 1) = 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 8, 13\nroll back, left: 1 8 13 5\n(13) + (5) = 18, left: (13 + 5) = 18, 1, 8\n(8) - (1) = 7, left: (8 - 1) = 7, (13 + 5) = 18\nroll back, left: (13 + 5) = 18, 1, 8\nroll back, left: 1 8 13 5\n(13) - (8) = 5, left: (13 - 8) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (13 - 8)) = 25, 1\n(25) - (1) = 24, left: ((5 * (13 - 8)) - 1) = 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(13) * (5) = 65, left: (13 * 5) = 65, 1, 8\nroll back, left: 1 8 13 5\n(13) + (5) = 18, left: (13 + 5) = 18, 1, 8\nroll back, left: 1 8 13 5\n(5) - (13) = -8, left: (5 - 13) = -8, 1, 8\nroll back, left: 1 8 13 5\n(13) - (8) = 5, left: (13 - 8) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (13 - 8)) = 25, 1\n(25) - (1) = 24, left: ((5 * (13 - 8)) - 1) = 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(1) + (8) = 9, left: (1 + 8) = 9, 13, 5\nroll back, left: 1 8 13 5\n(1) / (13) = 1/13, left: (1 / 13) = 1/13, 8, 5\nroll back, left: 1 8 13 5\n(13) * (5) = 65, left: (13 * 5) = 65, 1, 8\nroll back, left: 1 8 13 5\n(13) - (8) = 5, left: (13 - 8) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (13 - 8)) = 25, 1\n(25) - (1) = 24, left: ((5 * (13 - 8)) - 1) = 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 8, 5\nroll back, left: 1 8 13 5\n(5) - (1) = 4, left: (5 - 1) = 4, 8, 13\nroll back, left: 1 8 13 5\n(8) - (13) = -5, left: (8 - 13) = -5, 1, 5\nroll back, left: 1 8 13 5\n(13) - (8) = 5, left: (13 - 8) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (13 - 8)) = 25, 1\n(25) - (1) = 24, left: ((5 * (13 - 8)) - 1) = 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "1 8 13 5\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 1, 13\n(1) - (-3) = 4, left: (1 - (5 - 8)) = 4, 13\nroll back, left: (5 - 8) = -3, 1, 13\nroll back, left: 1 8 13 5\n(8) / (1) = 8, left: (8 / 1) = 8, 13, 5\nroll back, left: 1 8 13 5\n(13) - (8) = 5, left: (13 - 8) = 5, 1, 5\n(5) * (5) = 25, left: (5 * (13 - 8)) = 25, 1\n(25) - (1) = 24, left: ((5 * (13 - 8)) - 1) = 24\nreach 24! expression: ((5 * (13 - 8)) - 1)"}, {"input": "11 11 1 2\n", "output": "(11) + (2) = 13, left: (11 + 2) = 13, 11, 1\n(11) + (13) = 24, left: (11 + (11 + 2)) = 24, 1\n(24) / (1) = 24, left: ((11 + (11 + 2)) / 1) = 24\nreach 24! expression: ((11 + (11 + 2)) / 1)"}, {"input": "11 11 1 2\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 11, 11\n(11) + (11) = 22, left: (11 + 11) = 22, (1 * 2) = 2\n(2) + (22) = 24, left: ((1 * 2) + (11 + 11)) = 24\nreach 24! expression: ((1 * 2) + (11 + 11))"}, {"input": "11 11 1 2\n", "output": "(11) + (2) = 13, left: (11 + 2) = 13, 11, 1\n(11) / (1) = 11, left: (11 / 1) = 11, (11 + 2) = 13\n(13) + (11) = 24, left: ((11 + 2) + (11 / 1)) = 24\nreach 24! expression: ((11 + 2) + (11 / 1))"}, {"input": "11 11 1 2\n", "output": "(11) + (2) = 13, left: (11 + 2) = 13, 11, 1\n(11) + (13) = 24, left: (11 + (11 + 2)) = 24, 1\n(1) * (24) = 24, left: (1 * (11 + (11 + 2))) = 24\nreach 24! expression: (1 * (11 + (11 + 2)))"}, {"input": "11 11 1 2\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 11, 1\n(11) * (9) = 99, left: (11 * (11 - 2)) = 99, 1\nroll back, left: (11 - 2) = 9, 11, 1\nroll back, left: 11 11 1 2\n(11) * (2) = 22, left: (11 * 2) = 22, 11, 1\nroll back, left: 11 11 1 2\n(11) + (2) = 13, left: (11 + 2) = 13, 11, 1\n(11) + (13) = 24, left: (11 + (11 + 2)) = 24, 1\n(24) / (1) = 24, left: ((11 + (11 + 2)) / 1) = 24\nreach 24! expression: ((11 + (11 + 2)) / 1)"}, {"input": "13 4 12 11\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 13, 11\n(13) - (11) = 2, left: (13 - 11) = 2, (4 * 12) = 48\n(48) / (2) = 24, left: ((4 * 12) / (13 - 11)) = 24\nreach 24! expression: ((4 * 12) / (13 - 11))"}, {"input": "13 4 12 11\n", "output": "(13) + (11) = 24, left: (13 + 11) = 24, 4, 12\n(4) * (12) = 48, left: (4 * 12) = 48, (13 + 11) = 24\n(48) - (24) = 24, left: ((4 * 12) - (13 + 11)) = 24\nreach 24! expression: ((4 * 12) - (13 + 11))"}, {"input": "13 4 12 11\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 13, 11\n(48) - (11) = 37, left: ((4 * 12) - 11) = 37, 13\n(37) - (13) = 24, left: (((4 * 12) - 11) - 13) = 24\nreach 24! expression: (((4 * 12) - 11) - 13)"}, {"input": "3 6 7 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 3, 6\n(14) - (6) = 8, left: ((7 + 7) - 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 7) - 6)) = 24\nreach 24! expression: (3 * ((7 + 7) - 6))"}, {"input": "3 6 7 7\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 3, 7\n(7) - (-1) = 8, left: (7 - (6 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (6 - 7))) = 24\nreach 24! expression: (3 * (7 - (6 - 7)))"}, {"input": "3 6 7 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 3, 6\n(3) + (1) = 4, left: (3 + (7 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (7 / 7))) = 24\nreach 24! expression: (6 * (3 + (7 / 7)))"}, {"input": "3 6 7 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 3, 6\n(1) / (6) = 1/6, left: ((7 / 7) / 6) = 1/6, 3\nroll back, left: (7 / 7) = 1, 3, 6\n(6) * (1) = 6, left: (6 * (7 / 7)) = 6, 3\nroll back, left: (7 / 7) = 1, 3, 6\n(1) - (3) = -2, left: ((7 / 7) - 3) = -2, 6\nroll back, left: (7 / 7) = 1, 3, 6\n(3) + (1) = 4, left: (3 + (7 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (7 / 7))) = 24\nreach 24! expression: (6 * (3 + (7 / 7)))"}, {"input": "3 6 7 7\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 6, 7\nroll back, left: 3 6 7 7\n(6) - (7) = -1, left: (6 - 7) = -1, 3, 7\n(3) * (7) = 21, left: (3 * 7) = 21, (6 - 7) = -1\n(-1) * (21) = -21, left: ((6 - 7) * (3 * 7)) = -21\nroll back, left: (3 * 7) = 21, (6 - 7) = -1\nroll back, left: (6 - 7) = -1, 3, 7\n(7) - (-1) = 8, left: (7 - (6 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (6 - 7))) = 24\nreach 24! expression: (3 * (7 - (6 - 7)))"}, {"input": "3 6 7 7\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 6, 7\nroll back, left: 3 6 7 7\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 6, 7\nroll back, left: 3 6 7 7\n(3) - (7) = -4, left: (3 - 7) = -4, 6, 7\nroll back, left: 3 6 7 7\n(6) - (7) = -1, left: (6 - 7) = -1, 3, 7\n(7) - (-1) = 8, left: (7 - (6 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (6 - 7))) = 24\nreach 24! expression: (3 * (7 - (6 - 7)))"}, {"input": "3 6 7 7\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 3, 7\n(3) * (7) = 21, left: (3 * 7) = 21, (6 - 7) = -1\nroll back, left: (6 - 7) = -1, 3, 7\n(7) - (3) = 4, left: (7 - 3) = 4, (6 - 7) = -1\n(-1) - (4) = -5, left: ((6 - 7) - (7 - 3)) = -5\nroll back, left: (7 - 3) = 4, (6 - 7) = -1\nroll back, left: (6 - 7) = -1, 3, 7\n(7) - (-1) = 8, left: (7 - (6 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (6 - 7))) = 24\nreach 24! expression: (3 * (7 - (6 - 7)))"}, {"input": "3 6 7 7\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 6, 7\nroll back, left: 3 6 7 7\n(3) + (7) = 10, left: (3 + 7) = 10, 6, 7\nroll back, left: 3 6 7 7\n(7) - (7) = 0, left: (7 - 7) = 0, 3, 6\nroll back, left: 3 6 7 7\n(7) + (7) = 14, left: (7 + 7) = 14, 3, 6\n(14) - (6) = 8, left: ((7 + 7) - 6) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 7) - 6)) = 24\nreach 24! expression: (3 * ((7 + 7) - 6))"}, {"input": "7 6 1 4\n", "output": "(7) + (1) = 8, left: (7 + 1) = 8, 6, 4\n(8) - (4) = 4, left: ((7 + 1) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((7 + 1) - 4)) = 24\nreach 24! expression: (6 * ((7 + 1) - 4))"}, {"input": "7 6 1 4\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (4 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (4 - 1))) = 24\nreach 24! expression: (6 * (7 - (4 - 1)))"}, {"input": "7 6 1 4\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 7, 6\n(7) + (-3) = 4, left: (7 + (1 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (1 - 4))) = 24\nreach 24! expression: (6 * (7 + (1 - 4)))"}, {"input": "7 6 1 4\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 6, 1\n(1) - (-3) = 4, left: (1 - (4 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 - (4 - 7))) = 24\nreach 24! expression: (6 * (1 - (4 - 7)))"}, {"input": "7 6 1 4\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 7, 6\n(7) / (6) = 7/6, left: (7 / 6) = 7/6, (1 * 4) = 4\nroll back, left: (1 * 4) = 4, 7, 6\nroll back, left: 7 6 1 4\n(1) - (4) = -3, left: (1 - 4) = -3, 7, 6\n(7) / (6) = 7/6, left: (7 / 6) = 7/6, (1 - 4) = -3\nroll back, left: (1 - 4) = -3, 7, 6\n(7) + (-3) = 4, left: (7 + (1 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (1 - 4))) = 24\nreach 24! expression: (6 * (7 + (1 - 4)))"}, {"input": "7 6 1 4\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 6, 4\n(4) * (1/7) = 4/7, left: (4 * (1 / 7)) = 4/7, 6\nroll back, left: (1 / 7) = 1/7, 6, 4\n(4) - (1/7) = 27/7, left: (4 - (1 / 7)) = 27/7, 6\nroll back, left: (1 / 7) = 1/7, 6, 4\nroll back, left: 7 6 1 4\n(7) + (1) = 8, left: (7 + 1) = 8, 6, 4\n(8) - (4) = 4, left: ((7 + 1) - 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((7 + 1) - 4)) = 24\nreach 24! expression: (6 * ((7 + 1) - 4))"}, {"input": "7 6 1 4\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 7, 6\n(7) * (1/4) = 7/4, left: (7 * (1 / 4)) = 7/4, 6\nroll back, left: (1 / 4) = 1/4, 7, 6\nroll back, left: 7 6 1 4\n(1) + (4) = 5, left: (1 + 4) = 5, 7, 6\nroll back, left: 7 6 1 4\n(1) - (4) = -3, left: (1 - 4) = -3, 7, 6\n(7) + (-3) = 4, left: (7 + (1 - 4)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (1 - 4))) = 24\nreach 24! expression: (6 * (7 + (1 - 4)))"}, {"input": "7 6 1 4\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 6, 1\nroll back, left: 7 6 1 4\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 6, 1\nroll back, left: 7 6 1 4\n(7) + (4) = 11, left: (7 + 4) = 11, 6, 1\nroll back, left: 7 6 1 4\n(4) - (7) = -3, left: (4 - 7) = -3, 6, 1\n(1) - (-3) = 4, left: (1 - (4 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 - (4 - 7))) = 24\nreach 24! expression: (6 * (1 - (4 - 7)))"}, {"input": "7 6 1 4\n", "output": "(1) * (4) = 4, left: (1 * 4) = 4, 7, 6\n(7) * (4) = 28, left: (7 * (1 * 4)) = 28, 6\nroll back, left: (1 * 4) = 4, 7, 6\nroll back, left: 7 6 1 4\n(4) - (1) = 3, left: (4 - 1) = 3, 7, 6\n(7) * (3) = 21, left: (7 * (4 - 1)) = 21, 6\nroll back, left: (4 - 1) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (4 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (4 - 1))) = 24\nreach 24! expression: (6 * (7 - (4 - 1)))"}, {"input": "7 4 10 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (10 / 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (10 / 10))) = 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "7 4 10 10\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 7, 10\n(7) * (6) = 42, left: (7 * (10 - 4)) = 42, 10\nroll back, left: (10 - 4) = 6, 7, 10\nroll back, left: 7 4 10 10\n(4) + (10) = 14, left: (4 + 10) = 14, 7, 10\nroll back, left: 7 4 10 10\n(10) / (10) = 1, left: (10 / 10) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (10 / 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (10 / 10))) = 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "7 4 10 10\n", "output": "(10) / (7) = 10/7, left: (10 / 7) = 10/7, 4, 10\nroll back, left: 7 4 10 10\n(7) * (10) = 70, left: (7 * 10) = 70, 4, 10\n(4) + (10) = 14, left: (4 + 10) = 14, (7 * 10) = 70\nroll back, left: (7 * 10) = 70, 4, 10\nroll back, left: 7 4 10 10\n(10) / (10) = 1, left: (10 / 10) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (10 / 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (10 / 10))) = 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "7 4 10 10\n", "output": "(10) / (4) = 5/2, left: (10 / 4) = 5/2, 7, 10\nroll back, left: 7 4 10 10\n(7) + (10) = 17, left: (7 + 10) = 17, 4, 10\n(17) / (4) = 17/4, left: ((7 + 10) / 4) = 17/4, 10\nroll back, left: (7 + 10) = 17, 4, 10\nroll back, left: 7 4 10 10\n(10) / (10) = 1, left: (10 / 10) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (10 / 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (10 / 10))) = 24\nreach 24! expression: (4 * (7 - (10 / 10)))"}, {"input": "5 13 13 7\n", "output": "(5) + (13) = 18, left: (5 + 13) = 18, 13, 7\n(7) - (13) = -6, left: (7 - 13) = -6, (5 + 13) = 18\n(18) - (-6) = 24, left: ((5 + 13) - (7 - 13)) = 24\nreach 24! expression: ((5 + 13) - (7 - 13))"}, {"input": "5 13 13 7\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 5, 13\n(5) + (13) = 18, left: (5 + 13) = 18, (13 - 7) = 6\n(6) + (18) = 24, left: ((13 - 7) + (5 + 13)) = 24\nreach 24! expression: ((13 - 7) + (5 + 13))"}, {"input": "5 13 13 7\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 5, 13\n(13) + (6) = 19, left: (13 + (13 - 7)) = 19, 5\n(5) + (19) = 24, left: (5 + (13 + (13 - 7))) = 24\nreach 24! expression: (5 + (13 + (13 - 7)))"}, {"input": "5 13 13 7\n", "output": "(5) + (13) = 18, left: (5 + 13) = 18, 13, 7\n(13) + (18) = 31, left: (13 + (5 + 13)) = 31, 7\n(31) - (7) = 24, left: ((13 + (5 + 13)) - 7) = 24\nreach 24! expression: ((13 + (5 + 13)) - 7)"}, {"input": "5 13 13 7\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 5, 13\n(-6) - (5) = -11, left: ((7 - 13) - 5) = -11, 13\n(13) - (-11) = 24, left: (13 - ((7 - 13) - 5)) = 24\nreach 24! expression: (13 - ((7 - 13) - 5))"}, {"input": "5 13 13 7\n", "output": "(13) * (7) = 91, left: (13 * 7) = 91, 5, 13\n(91) / (13) = 7, left: ((13 * 7) / 13) = 7, 5\nroll back, left: (13 * 7) = 91, 5, 13\nroll back, left: 5 13 13 7\n(13) - (7) = 6, left: (13 - 7) = 6, 5, 13\n(6) - (13) = -7, left: ((13 - 7) - 13) = -7, 5\nroll back, left: (13 - 7) = 6, 5, 13\n(13) + (6) = 19, left: (13 + (13 - 7)) = 19, 5\n(5) + (19) = 24, left: (5 + (13 + (13 - 7))) = 24\nreach 24! expression: (5 + (13 + (13 - 7)))"}, {"input": "8 4 12 6\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 12, 6\n(6) * (2) = 12, left: (6 * (8 / 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (8 / 4))) = 24\nreach 24! expression: (12 + (6 * (8 / 4)))"}, {"input": "8 4 12 6\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 8, 4\n(4) - (8) = -4, left: (4 - 8) = -4, (6 - 12) = -6\n(-6) * (-4) = 24, left: ((6 - 12) * (4 - 8)) = 24\nreach 24! expression: ((6 - 12) * (4 - 8))"}, {"input": "8 4 12 6\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 4, 12\n(4) + (-2) = 2, left: (4 + (6 - 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (4 + (6 - 8))) = 24\nreach 24! expression: (12 * (4 + (6 - 8)))"}, {"input": "8 4 12 6\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (12 / 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (12 / 4))) = 24\nreach 24! expression: (8 * (6 - (12 / 4)))"}, {"input": "8 4 12 6\n", "output": "(8) * (4) = 32, left: (8 * 4) = 32, 12, 6\n(6) / (32) = 3/16, left: (6 / (8 * 4)) = 3/16, 12\nroll back, left: (8 * 4) = 32, 12, 6\nroll back, left: 8 4 12 6\n(8) / (4) = 2, left: (8 / 4) = 2, 12, 6\n(2) / (12) = 1/6, left: ((8 / 4) / 12) = 1/6, 6\nroll back, left: (8 / 4) = 2, 12, 6\n(6) * (2) = 12, left: (6 * (8 / 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (8 / 4))) = 24\nreach 24! expression: (12 + (6 * (8 / 4)))"}, {"input": "8 4 12 6\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 4, 12\n(4) - (3/4) = 13/4, left: (4 - (6 / 8)) = 13/4, 12\n(12) - (13/4) = 35/4, left: (12 - (4 - (6 / 8))) = 35/4\nroll back, left: (4 - (6 / 8)) = 13/4, 12\nroll back, left: (6 / 8) = 3/4, 4, 12\nroll back, left: 8 4 12 6\n(6) - (8) = -2, left: (6 - 8) = -2, 4, 12\n(4) + (-2) = 2, left: (4 + (6 - 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (4 + (6 - 8))) = 24\nreach 24! expression: (12 * (4 + (6 - 8)))"}, {"input": "8 4 12 6\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 8, 6\n(6) / (3) = 2, left: (6 / (12 / 4)) = 2, 8\nroll back, left: (12 / 4) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (12 / 4)) = 3, 8\n(3) - (8) = -5, left: ((6 - (12 / 4)) - 8) = -5\nroll back, left: (6 - (12 / 4)) = 3, 8\n(8) - (3) = 5, left: (8 - (6 - (12 / 4))) = 5\nroll back, left: (6 - (12 / 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (12 / 4))) = 24\nreach 24! expression: (8 * (6 - (12 / 4)))"}, {"input": "8 4 12 6\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 8, 4\n(8) / (-6) = -4/3, left: (8 / (6 - 12)) = -4/3, 4\n(4) + (-4/3) = 8/3, left: (4 + (8 / (6 - 12))) = 8/3\nroll back, left: (8 / (6 - 12)) = -4/3, 4\nroll back, left: (6 - 12) = -6, 8, 4\n(8) + (-6) = 2, left: (8 + (6 - 12)) = 2, 4\nroll back, left: (6 - 12) = -6, 8, 4\n(4) - (8) = -4, left: (4 - 8) = -4, (6 - 12) = -6\n(-6) * (-4) = 24, left: ((6 - 12) * (4 - 8)) = 24\nreach 24! expression: ((6 - 12) * (4 - 8))"}, {"input": "8 4 12 6\n", "output": "(4) + (12) = 16, left: (4 + 12) = 16, 8, 6\nroll back, left: 8 4 12 6\n(4) / (12) = 1/3, left: (4 / 12) = 1/3, 8, 6\n(8) - (1/3) = 23/3, left: (8 - (4 / 12)) = 23/3, 6\nroll back, left: (4 / 12) = 1/3, 8, 6\nroll back, left: 8 4 12 6\n(12) / (4) = 3, left: (12 / 4) = 3, 8, 6\n(6) - (3) = 3, left: (6 - (12 / 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (12 / 4))) = 24\nreach 24! expression: (8 * (6 - (12 / 4)))"}, {"input": "8 7 3 2\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 7, 3\n(3) - (7) = -4, left: (3 - 7) = -4, (2 - 8) = -6\n(-6) * (-4) = 24, left: ((2 - 8) * (3 - 7)) = 24\nreach 24! expression: ((2 - 8) * (3 - 7))"}, {"input": "8 7 3 2\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 8, 2\n(8) - (2) = 6, left: (8 - 2) = 6, (7 - 3) = 4\n(4) * (6) = 24, left: ((7 - 3) * (8 - 2)) = 24\nreach 24! expression: ((7 - 3) * (8 - 2))"}, {"input": "8 7 3 2\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 7, 2\n(7) - (-5) = 12, left: (7 - (3 - 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 - (3 - 8))) = 24\nreach 24! expression: (2 * (7 - (3 - 8)))"}, {"input": "8 7 3 2\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 8, 2\n(2) - (8) = -6, left: (2 - 8) = -6, (3 - 7) = -4\n(-4) * (-6) = 24, left: ((3 - 7) * (2 - 8)) = 24\nreach 24! expression: ((3 - 7) * (2 - 8))"}, {"input": "8 7 3 2\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 8, 2\n(7/3) - (2) = 1/3, left: ((7 / 3) - 2) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((7 / 3) - 2)) = 24\nreach 24! expression: (8 / ((7 / 3) - 2))"}, {"input": "8 7 3 2\n", "output": "(7) + (3) = 10, left: (7 + 3) = 10, 8, 2\n(8) / (2) = 4, left: (8 / 2) = 4, (7 + 3) = 10\nroll back, left: (7 + 3) = 10, 8, 2\nroll back, left: 8 7 3 2\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 8, 2\n(8) + (7/3) = 31/3, left: (8 + (7 / 3)) = 31/3, 2\nroll back, left: (7 / 3) = 7/3, 8, 2\n(7/3) - (2) = 1/3, left: ((7 / 3) - 2) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((7 / 3) - 2)) = 24\nreach 24! expression: (8 / ((7 / 3) - 2))"}, {"input": "8 7 3 2\n", "output": "(3) * (2) = 6, left: (3 * 2) = 6, 8, 7\nroll back, left: 8 7 3 2\n(2) - (3) = -1, left: (2 - 3) = -1, 8, 7\n(-1) - (7) = -8, left: ((2 - 3) - 7) = -8, 8\nroll back, left: (2 - 3) = -1, 8, 7\nroll back, left: 8 7 3 2\n(7) - (3) = 4, left: (7 - 3) = 4, 8, 2\n(8) - (2) = 6, left: (8 - 2) = 6, (7 - 3) = 4\n(4) * (6) = 24, left: ((7 - 3) * (8 - 2)) = 24\nreach 24! expression: ((7 - 3) * (8 - 2))"}, {"input": "8 7 3 2\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 7, 2\n(2) + (-5) = -3, left: (2 + (3 - 8)) = -3, 7\nroll back, left: (3 - 8) = -5, 7, 2\n(2) / (-5) = -2/5, left: (2 / (3 - 8)) = -2/5, 7\nroll back, left: (3 - 8) = -5, 7, 2\n(2) - (-5) = 7, left: (2 - (3 - 8)) = 7, 7\nroll back, left: (3 - 8) = -5, 7, 2\n(7) - (-5) = 12, left: (7 - (3 - 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 - (3 - 8))) = 24\nreach 24! expression: (2 * (7 - (3 - 8)))"}, {"input": "8 7 3 2\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 7, 3\n(7) * (4) = 28, left: (7 * (8 / 2)) = 28, 3\nroll back, left: (8 / 2) = 4, 7, 3\nroll back, left: 8 7 3 2\n(8) * (2) = 16, left: (8 * 2) = 16, 7, 3\nroll back, left: 8 7 3 2\n(2) - (8) = -6, left: (2 - 8) = -6, 7, 3\n(3) - (7) = -4, left: (3 - 7) = -4, (2 - 8) = -6\n(-6) * (-4) = 24, left: ((2 - 8) * (3 - 7)) = 24\nreach 24! expression: ((2 - 8) * (3 - 7))"}, {"input": "10 2 10 3\n", "output": "(3) - (10) = -7, left: (3 - 10) = -7, 2, 10\n(2) * (-7) = -14, left: (2 * (3 - 10)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (3 - 10))) = 24\nreach 24! expression: (10 - (2 * (3 - 10)))"}, {"input": "10 2 10 3\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 10, 2\n(2) * (7) = 14, left: (2 * (10 - 3)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (10 - 3))) = 24\nreach 24! expression: (10 + (2 * (10 - 3)))"}, {"input": "10 2 10 3\n", "output": "(3) - (10) = -7, left: (3 - 10) = -7, 10, 2\n(2) * (-7) = -14, left: (2 * (3 - 10)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (3 - 10))) = 24\nreach 24! expression: (10 - (2 * (3 - 10)))"}, {"input": "10 2 10 3\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 10, 10\nroll back, left: 10 2 10 3\n(10) * (10) = 100, left: (10 * 10) = 100, 2, 3\nroll back, left: 10 2 10 3\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, 10, 2\nroll back, left: 10 2 10 3\n(10) - (3) = 7, left: (10 - 3) = 7, 10, 2\n(2) * (7) = 14, left: (2 * (10 - 3)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (10 - 3))) = 24\nreach 24! expression: (10 + (2 * (10 - 3)))"}, {"input": "10 2 10 3\n", "output": "(10) + (2) = 12, left: (10 + 2) = 12, 10, 3\nroll back, left: 10 2 10 3\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, 10, 3\nroll back, left: 10 2 10 3\n(10) / (3) = 10/3, left: (10 / 3) = 10/3, 10, 2\nroll back, left: 10 2 10 3\n(3) - (10) = -7, left: (3 - 10) = -7, 10, 2\n(2) * (-7) = -14, left: (2 * (3 - 10)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (3 - 10))) = 24\nreach 24! expression: (10 - (2 * (3 - 10)))"}, {"input": "10 2 10 3\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 2, 3\nroll back, left: 10 2 10 3\n(2) * (10) = 20, left: (2 * 10) = 20, 10, 3\nroll back, left: 10 2 10 3\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 10, 10\nroll back, left: 10 2 10 3\n(3) - (10) = -7, left: (3 - 10) = -7, 10, 2\n(2) * (-7) = -14, left: (2 * (3 - 10)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (3 - 10))) = 24\nreach 24! expression: (10 - (2 * (3 - 10)))"}, {"input": "10 2 10 3\n", "output": "(10) / (3) = 10/3, left: (10 / 3) = 10/3, 2, 10\nroll back, left: 10 2 10 3\n(3) / (10) = 3/10, left: (3 / 10) = 3/10, 2, 10\nroll back, left: 10 2 10 3\n(10) + (3) = 13, left: (10 + 3) = 13, 2, 10\nroll back, left: 10 2 10 3\n(3) - (10) = -7, left: (3 - 10) = -7, 2, 10\n(2) * (-7) = -14, left: (2 * (3 - 10)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (3 - 10))) = 24\nreach 24! expression: (10 - (2 * (3 - 10)))"}, {"input": "13 7 12 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 13, 12\n(15) - (13) = 2, left: ((7 + 8) - 13) = 2, 12\n(12) * (2) = 24, left: (12 * ((7 + 8) - 13)) = 24\nreach 24! expression: (12 * ((7 + 8) - 13))"}, {"input": "13 7 12 8\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 7, 12\n(12) + (5) = 17, left: (12 + (13 - 8)) = 17, 7\n(7) + (17) = 24, left: (7 + (12 + (13 - 8))) = 24\nreach 24! expression: (7 + (12 + (13 - 8)))"}, {"input": "13 7 12 8\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 13, 12\n(12) - (1) = 11, left: (12 - (8 - 7)) = 11, 13\n(13) + (11) = 24, left: (13 + (12 - (8 - 7))) = 24\nreach 24! expression: (13 + (12 - (8 - 7)))"}, {"input": "13 7 12 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 13, 7\n(13) + (4) = 17, left: (13 + (12 - 8)) = 17, 7\n(7) + (17) = 24, left: (7 + (13 + (12 - 8))) = 24\nreach 24! expression: (7 + (13 + (12 - 8)))"}, {"input": "13 7 12 8\n", "output": "(7) + (12) = 19, left: (7 + 12) = 19, 13, 8\n(19) - (8) = 11, left: ((7 + 12) - 8) = 11, 13\n(13) + (11) = 24, left: (13 + ((7 + 12) - 8)) = 24\nreach 24! expression: (13 + ((7 + 12) - 8))"}, {"input": "8 6 4 1\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 8, 1\n(1) + (2) = 3, left: (1 + (6 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (6 - 4))) = 24\nreach 24! expression: (8 * (1 + (6 - 4)))"}, {"input": "8 6 4 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 8, 4\n(8) - (4) = 4, left: (8 - 4) = 4, (6 * 1) = 6\n(6) * (4) = 24, left: ((6 * 1) * (8 - 4)) = 24\nreach 24! expression: ((6 * 1) * (8 - 4))"}, {"input": "8 6 4 1\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 6, 1\n(1) / (4) = 1/4, left: (1 / (8 - 4)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (8 - 4))) = 24\nreach 24! expression: (6 / (1 / (8 - 4)))"}, {"input": "8 6 4 1\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 8, 1\n(1) - (2/3) = 1/3, left: (1 - (4 / 6)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (1 - (4 / 6))) = 24\nreach 24! expression: (8 / (1 - (4 / 6)))"}, {"input": "8 6 4 1\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 8, 4\n(8) - (4) = 4, left: (8 - 4) = 4, (1 / 6) = 1/6\n(4) / (1/6) = 24, left: ((8 - 4) / (1 / 6)) = 24\nreach 24! expression: ((8 - 4) / (1 / 6))"}, {"input": "8 6 4 1\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 8, 1\n(8) / (2) = 4, left: (8 / (6 - 4)) = 4, 1\nroll back, left: (6 - 4) = 2, 8, 1\n(1) * (2) = 2, left: (1 * (6 - 4)) = 2, 8\nroll back, left: (6 - 4) = 2, 8, 1\n(2) / (1) = 2, left: ((6 - 4) / 1) = 2, 8\nroll back, left: (6 - 4) = 2, 8, 1\n(1) + (2) = 3, left: (1 + (6 - 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 + (6 - 4))) = 24\nreach 24! expression: (8 * (1 + (6 - 4)))"}, {"input": "8 6 4 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 8, 4\n(8) * (6) = 48, left: (8 * (6 * 1)) = 48, 4\n(4) - (48) = -44, left: (4 - (8 * (6 * 1))) = -44\nroll back, left: (8 * (6 * 1)) = 48, 4\nroll back, left: (6 * 1) = 6, 8, 4\n(4) - (6) = -2, left: (4 - (6 * 1)) = -2, 8\nroll back, left: (6 * 1) = 6, 8, 4\n(8) - (4) = 4, left: (8 - 4) = 4, (6 * 1) = 6\n(6) * (4) = 24, left: ((6 * 1) * (8 - 4)) = 24\nreach 24! expression: ((6 * 1) * (8 - 4))"}, {"input": "8 6 4 1\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 4, 1\nroll back, left: 8 6 4 1\n(8) - (6) = 2, left: (8 - 6) = 2, 4, 1\n(2) - (1) = 1, left: ((8 - 6) - 1) = 1, 4\nroll back, left: (8 - 6) = 2, 4, 1\nroll back, left: 8 6 4 1\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, 8, 1\n(1) - (2/3) = 1/3, left: (1 - (4 / 6)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (1 - (4 / 6))) = 24\nreach 24! expression: (8 / (1 - (4 / 6)))"}, {"input": "8 6 4 1\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 6, 1\n(-4) - (6) = -10, left: ((4 - 8) - 6) = -10, 1\nroll back, left: (4 - 8) = -4, 6, 1\nroll back, left: 8 6 4 1\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, 6, 1\nroll back, left: 8 6 4 1\n(8) - (4) = 4, left: (8 - 4) = 4, 6, 1\n(1) / (4) = 1/4, left: (1 / (8 - 4)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (8 - 4))) = 24\nreach 24! expression: (6 / (1 / (8 - 4)))"}, {"input": "8 6 4 1\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 4, 1\nroll back, left: 8 6 4 1\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, 4, 1\nroll back, left: 8 6 4 1\n(8) - (6) = 2, left: (8 - 6) = 2, 4, 1\nroll back, left: 8 6 4 1\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, 8, 4\n(8) - (4) = 4, left: (8 - 4) = 4, (1 / 6) = 1/6\n(4) / (1/6) = 24, left: ((8 - 4) / (1 / 6)) = 24\nreach 24! expression: ((8 - 4) / (1 / 6))"}, {"input": "7 3 12 3\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 3, 12\n(12) - (4) = 8, left: (12 - (7 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (12 - (7 - 3))) = 24\nreach 24! expression: (3 * (12 - (7 - 3)))"}, {"input": "7 3 12 3\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 7, 3\n(15) - (7) = 8, left: ((12 + 3) - 7) = 8, 3\n(3) * (8) = 24, left: (3 * ((12 + 3) - 7)) = 24\nreach 24! expression: (3 * ((12 + 3) - 7))"}, {"input": "7 3 12 3\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 3, 3\n(3) + (5) = 8, left: (3 + (12 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (3 + (12 - 7))) = 24\nreach 24! expression: (3 * (3 + (12 - 7)))"}, {"input": "7 3 12 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 7, 12\n(9) - (7) = 2, left: ((3 * 3) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 * 3) - 7)) = 24\nreach 24! expression: (12 * ((3 * 3) - 7))"}, {"input": "7 3 12 3\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 3, 12\n(12) * (7/3) = 28, left: (12 * (7 / 3)) = 28, 3\n(28) - (3) = 25, left: ((12 * (7 / 3)) - 3) = 25\nroll back, left: (12 * (7 / 3)) = 28, 3\nroll back, left: (7 / 3) = 7/3, 3, 12\nroll back, left: 7 3 12 3\n(7) - (3) = 4, left: (7 - 3) = 4, 3, 12\n(12) - (4) = 8, left: (12 - (7 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (12 - (7 - 3))) = 24\nreach 24! expression: (3 * (12 - (7 - 3)))"}, {"input": "7 3 12 3\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 3, 3\n(3) / (5) = 3/5, left: (3 / (12 - 7)) = 3/5, 3\nroll back, left: (12 - 7) = 5, 3, 3\n(3) * (5) = 15, left: (3 * (12 - 7)) = 15, 3\n(3) + (15) = 18, left: (3 + (3 * (12 - 7))) = 18\nroll back, left: (3 * (12 - 7)) = 15, 3\nroll back, left: (12 - 7) = 5, 3, 3\n(3) + (5) = 8, left: (3 + (12 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (3 + (12 - 7))) = 24\nreach 24! expression: (3 * (3 + (12 - 7)))"}, {"input": "7 3 12 3\n", "output": "(12) / (7) = 12/7, left: (12 / 7) = 12/7, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (12 / 7) = 12/7\nroll back, left: (12 / 7) = 12/7, 3, 3\n(3) - (12/7) = 9/7, left: (3 - (12 / 7)) = 9/7, 3\nroll back, left: (12 / 7) = 12/7, 3, 3\nroll back, left: 7 3 12 3\n(12) - (7) = 5, left: (12 - 7) = 5, 3, 3\n(3) + (5) = 8, left: (3 + (12 - 7)) = 8, 3\n(3) * (8) = 24, left: (3 * (3 + (12 - 7))) = 24\nreach 24! expression: (3 * (3 + (12 - 7)))"}, {"input": "7 3 12 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 7, 12\nroll back, left: 7 3 12 3\n(3) / (3) = 1, left: (3 / 3) = 1, 7, 12\n(12) - (1) = 11, left: (12 - (3 / 3)) = 11, 7\nroll back, left: (3 / 3) = 1, 7, 12\nroll back, left: 7 3 12 3\n(3) * (3) = 9, left: (3 * 3) = 9, 7, 12\n(9) - (7) = 2, left: ((3 * 3) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 * 3) - 7)) = 24\nreach 24! expression: (12 * ((3 * 3) - 7))"}, {"input": "7 10 5 12\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 7, 10\n(10) + (7) = 17, left: (10 + (12 - 5)) = 17, 7\n(7) + (17) = 24, left: (7 + (10 + (12 - 5))) = 24\nreach 24! expression: (7 + (10 + (12 - 5)))"}, {"input": "7 10 5 12\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 7, 12\n(7) + (5) = 12, left: (7 + (10 - 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (7 + (10 - 5))) = 24\nreach 24! expression: (12 + (7 + (10 - 5)))"}, {"input": "7 10 5 12\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 7, 12\n(7) + (12) = 19, left: (7 + 12) = 19, (10 - 5) = 5\n(5) + (19) = 24, left: ((10 - 5) + (7 + 12)) = 24\nreach 24! expression: ((10 - 5) + (7 + 12))"}, {"input": "7 10 5 12\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 10, 12\n(12) - (10) = 2, left: ((7 + 5) - 10) = 2, 12\n(12) * (2) = 24, left: (12 * ((7 + 5) - 10)) = 24\nreach 24! expression: (12 * ((7 + 5) - 10))"}, {"input": "7 10 5 12\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 7, 10\n(7) + (7) = 14, left: (7 + (12 - 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 + (12 - 5))) = 24\nreach 24! expression: (10 + (7 + (12 - 5)))"}, {"input": "1 13 13 11\n", "output": "(13) - (11) = 2, left: (13 - 11) = 2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (13 - 11) = 2\n(2) * (12) = 24, left: ((13 - 11) * (13 - 1)) = 24\nreach 24! expression: ((13 - 11) * (13 - 1))"}, {"input": "1 13 13 11\n", "output": "(11) / (13) = 11/13, left: (11 / 13) = 11/13, 1, 13\n(1) + (11/13) = 24/13, left: (1 + (11 / 13)) = 24/13, 13\n(13) * (24/13) = 24, left: (13 * (1 + (11 / 13))) = 24\nreach 24! expression: (13 * (1 + (11 / 13)))"}, {"input": "1 13 13 11\n", "output": "(1) - (13) = -12, left: (1 - 13) = -12, 13, 11\n(11) - (13) = -2, left: (11 - 13) = -2, (1 - 13) = -12\n(-12) * (-2) = 24, left: ((1 - 13) * (11 - 13)) = 24\nreach 24! expression: ((1 - 13) * (11 - 13))"}, {"input": "1 13 13 11\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 1, 13\n(1) - (13) = -12, left: (1 - 13) = -12, (11 - 13) = -2\n(-2) * (-12) = 24, left: ((11 - 13) * (1 - 13)) = 24\nreach 24! expression: ((11 - 13) * (1 - 13))"}, {"input": "12 10 10 8\n", "output": "(12) + (10) = 22, left: (12 + 10) = 22, 10, 8\n(8) - (22) = -14, left: (8 - (12 + 10)) = -14, 10\n(10) - (-14) = 24, left: (10 - (8 - (12 + 10))) = 24\nreach 24! expression: (10 - (8 - (12 + 10)))"}, {"input": "12 10 10 8\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 12, 10\n(12) + (10) = 22, left: (12 + 10) = 22, (10 - 8) = 2\n(2) + (22) = 24, left: ((10 - 8) + (12 + 10)) = 24\nreach 24! expression: ((10 - 8) + (12 + 10))"}, {"input": "12 10 10 8\n", "output": "(12) + (10) = 22, left: (12 + 10) = 22, 10, 8\n(8) - (10) = -2, left: (8 - 10) = -2, (12 + 10) = 22\n(22) - (-2) = 24, left: ((12 + 10) - (8 - 10)) = 24\nreach 24! expression: ((12 + 10) - (8 - 10))"}, {"input": "12 10 10 8\n", "output": "(12) + (10) = 22, left: (12 + 10) = 22, 10, 8\n(10) + (22) = 32, left: (10 + (12 + 10)) = 32, 8\n(32) - (8) = 24, left: ((10 + (12 + 10)) - 8) = 24\nreach 24! expression: ((10 + (12 + 10)) - 8)"}, {"input": "12 10 10 8\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 12, 10\n(10) - (-2) = 12, left: (10 - (8 - 10)) = 12, 12\n(12) + (12) = 24, left: (12 + (10 - (8 - 10))) = 24\nreach 24! expression: (12 + (10 - (8 - 10)))"}, {"input": "4 3 12 7\n", "output": "(12) * (7) = 84, left: (12 * 7) = 84, 4, 3\n(84) / (4) = 21, left: ((12 * 7) / 4) = 21, 3\n(3) + (21) = 24, left: (3 + ((12 * 7) / 4)) = 24\nreach 24! expression: (3 + ((12 * 7) / 4))"}, {"input": "4 3 12 7\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 4, 12\n(12) / (3/7) = 28, left: (12 / (3 / 7)) = 28, 4\n(28) - (4) = 24, left: ((12 / (3 / 7)) - 4) = 24\nreach 24! expression: ((12 / (3 / 7)) - 4)"}, {"input": "4 3 12 7\n", "output": "(4) * (7) = 28, left: (4 * 7) = 28, 3, 12\n(12) / (3) = 4, left: (12 / 3) = 4, (4 * 7) = 28\n(28) - (4) = 24, left: ((4 * 7) - (12 / 3)) = 24\nreach 24! expression: ((4 * 7) - (12 / 3))"}, {"input": "4 3 12 7\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 12, 7\nroll back, left: 4 3 12 7\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, 12, 7\nroll back, left: 4 3 12 7\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, 4, 12\n(4) * (12) = 48, left: (4 * 12) = 48, (3 / 7) = 3/7\nroll back, left: (3 / 7) = 3/7, 4, 12\n(12) / (3/7) = 28, left: (12 / (3 / 7)) = 28, 4\n(28) - (4) = 24, left: ((12 / (3 / 7)) - 4) = 24\nreach 24! expression: ((12 / (3 / 7)) - 4)"}, {"input": "4 3 12 7\n", "output": "(7) - (12) = -5, left: (7 - 12) = -5, 4, 3\nroll back, left: 4 3 12 7\n(12) + (7) = 19, left: (12 + 7) = 19, 4, 3\n(3) * (19) = 57, left: (3 * (12 + 7)) = 57, 4\nroll back, left: (12 + 7) = 19, 4, 3\nroll back, left: 4 3 12 7\n(12) * (7) = 84, left: (12 * 7) = 84, 4, 3\n(84) / (4) = 21, left: ((12 * 7) / 4) = 21, 3\n(3) + (21) = 24, left: (3 + ((12 * 7) / 4)) = 24\nreach 24! expression: (3 + ((12 * 7) / 4))"}, {"input": "6 1 4 3\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 6, 1\n(1) - (3/4) = 1/4, left: (1 - (3 / 4)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (3 / 4))) = 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 4, 3\nroll back, left: 6 1 4 3\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, 4, 3\nroll back, left: 6 1 4 3\n(6) / (3) = 2, left: (6 / 3) = 2, 1, 4\nroll back, left: 6 1 4 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 6, 1\n(1) - (3/4) = 1/4, left: (1 - (3 / 4)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (3 / 4))) = 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 1, 4\nroll back, left: 6 1 4 3\n(1) + (3) = 4, left: (1 + 3) = 4, 6, 4\nroll back, left: 6 1 4 3\n(3) - (1) = 2, left: (3 - 1) = 2, 6, 4\nroll back, left: 6 1 4 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 6, 1\n(1) - (3/4) = 1/4, left: (1 - (3 / 4)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (3 / 4))) = 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 1, 4\n(1) * (4) = 4, left: (1 * 4) = 4, (6 / 3) = 2\n(2) + (4) = 6, left: ((6 / 3) + (1 * 4)) = 6\nroll back, left: (1 * 4) = 4, (6 / 3) = 2\nroll back, left: (6 / 3) = 2, 1, 4\nroll back, left: 6 1 4 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 6, 1\n(1) - (3/4) = 1/4, left: (1 - (3 / 4)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (3 / 4))) = 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 1, 4\n(1) - (9) = -8, left: (1 - (6 + 3)) = -8, 4\nroll back, left: (6 + 3) = 9, 1, 4\nroll back, left: 6 1 4 3\n(4) * (3) = 12, left: (4 * 3) = 12, 6, 1\nroll back, left: 6 1 4 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 6, 1\n(1) - (3/4) = 1/4, left: (1 - (3 / 4)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (3 / 4))) = 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "6 1 4 3\n", "output": "(4) - (6) = -2, left: (4 - 6) = -2, 1, 3\nroll back, left: 6 1 4 3\n(1) - (6) = -5, left: (1 - 6) = -5, 4, 3\nroll back, left: 6 1 4 3\n(1) + (3) = 4, left: (1 + 3) = 4, 6, 4\nroll back, left: 6 1 4 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 6, 1\n(1) - (3/4) = 1/4, left: (1 - (3 / 4)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 - (3 / 4))) = 24\nreach 24! expression: (6 / (1 - (3 / 4)))"}, {"input": "13 4 8 8\n", "output": "(13) * (8) = 104, left: (13 * 8) = 104, 4, 8\n(104) - (8) = 96, left: ((13 * 8) - 8) = 96, 4\n(96) / (4) = 24, left: (((13 * 8) - 8) / 4) = 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "13 4 8 8\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 13, 8\nroll back, left: 13 4 8 8\n(13) + (4) = 17, left: (13 + 4) = 17, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (13 + 4) = 17\nroll back, left: (13 + 4) = 17, 8, 8\nroll back, left: 13 4 8 8\n(13) * (8) = 104, left: (13 * 8) = 104, 4, 8\n(104) - (8) = 96, left: ((13 * 8) - 8) = 96, 4\n(96) / (4) = 24, left: (((13 * 8) - 8) / 4) = 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "13 4 8 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 13, 4\nroll back, left: 13 4 8 8\n(8) + (8) = 16, left: (8 + 8) = 16, 13, 4\nroll back, left: 13 4 8 8\n(8) * (8) = 64, left: (8 * 8) = 64, 13, 4\nroll back, left: 13 4 8 8\n(13) * (8) = 104, left: (13 * 8) = 104, 4, 8\n(104) - (8) = 96, left: ((13 * 8) - 8) = 96, 4\n(96) / (4) = 24, left: (((13 * 8) - 8) / 4) = 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "13 4 8 8\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 13, 8\nroll back, left: 13 4 8 8\n(8) / (13) = 8/13, left: (8 / 13) = 8/13, 4, 8\n(4) - (8) = -4, left: (4 - 8) = -4, (8 / 13) = 8/13\nroll back, left: (8 / 13) = 8/13, 4, 8\nroll back, left: 13 4 8 8\n(13) * (8) = 104, left: (13 * 8) = 104, 4, 8\n(104) - (8) = 96, left: ((13 * 8) - 8) = 96, 4\n(96) / (4) = 24, left: (((13 * 8) - 8) / 4) = 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "13 4 8 8\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (4 / 13) = 4/13\nroll back, left: (4 / 13) = 4/13, 8, 8\nroll back, left: 13 4 8 8\n(8) / (4) = 2, left: (8 / 4) = 2, 13, 8\nroll back, left: 13 4 8 8\n(13) * (8) = 104, left: (13 * 8) = 104, 4, 8\n(104) - (8) = 96, left: ((13 * 8) - 8) = 96, 4\n(96) / (4) = 24, left: (((13 * 8) - 8) / 4) = 24\nreach 24! expression: (((13 * 8) - 8) / 4)"}, {"input": "8 1 6 13\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 1, 13\n(1) - (13) = -12, left: (1 - 13) = -12, (6 - 8) = -2\n(-2) * (-12) = 24, left: ((6 - 8) * (1 - 13)) = 24\nreach 24! expression: ((6 - 8) * (1 - 13))"}, {"input": "8 1 6 13\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 1, 6\n(5) - (1) = 4, left: ((13 - 8) - 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 - 8) - 1)) = 24\nreach 24! expression: (6 * ((13 - 8) - 1))"}, {"input": "8 1 6 13\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 8, 6\n(8) - (6) = 2, left: (8 - 6) = 2, (13 - 1) = 12\n(12) * (2) = 24, left: ((13 - 1) * (8 - 6)) = 24\nreach 24! expression: ((13 - 1) * (8 - 6))"}, {"input": "8 1 6 13\n", "output": "(8) + (1) = 9, left: (8 + 1) = 9, 6, 13\n(13) - (9) = 4, left: (13 - (8 + 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (8 + 1))) = 24\nreach 24! expression: (6 * (13 - (8 + 1)))"}, {"input": "8 1 6 13\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (8 - 6) = 2\n(2) * (12) = 24, left: ((8 - 6) * (13 - 1)) = 24\nreach 24! expression: ((8 - 6) * (13 - 1))"}, {"input": "8 1 6 13\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 6, 13\nroll back, left: 8 1 6 13\n(8) - (1) = 7, left: (8 - 1) = 7, 6, 13\n(13) * (7) = 91, left: (13 * (8 - 1)) = 91, 6\nroll back, left: (8 - 1) = 7, 6, 13\nroll back, left: 8 1 6 13\n(8) + (1) = 9, left: (8 + 1) = 9, 6, 13\n(13) - (9) = 4, left: (13 - (8 + 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (8 + 1))) = 24\nreach 24! expression: (6 * (13 - (8 + 1)))"}, {"input": "8 1 6 13\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 8, 1\n(1) + (19) = 20, left: (1 + (6 + 13)) = 20, 8\nroll back, left: (6 + 13) = 19, 8, 1\nroll back, left: 8 1 6 13\n(13) / (6) = 13/6, left: (13 / 6) = 13/6, 8, 1\nroll back, left: 8 1 6 13\n(13) - (1) = 12, left: (13 - 1) = 12, 8, 6\n(8) - (6) = 2, left: (8 - 6) = 2, (13 - 1) = 12\n(12) * (2) = 24, left: ((13 - 1) * (8 - 6)) = 24\nreach 24! expression: ((13 - 1) * (8 - 6))"}, {"input": "8 1 6 13\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 8, 13\n(8) * (6) = 48, left: (8 * (6 / 1)) = 48, 13\nroll back, left: (6 / 1) = 6, 8, 13\nroll back, left: 8 1 6 13\n(1) / (6) = 1/6, left: (1 / 6) = 1/6, 8, 13\nroll back, left: 8 1 6 13\n(13) - (8) = 5, left: (13 - 8) = 5, 1, 6\n(5) - (1) = 4, left: ((13 - 8) - 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 - 8) - 1)) = 24\nreach 24! expression: (6 * ((13 - 8) - 1))"}, {"input": "8 1 6 13\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 1, 13\nroll back, left: 8 1 6 13\n(6) - (8) = -2, left: (6 - 8) = -2, 1, 13\n(-2) / (1) = -2, left: ((6 - 8) / 1) = -2, 13\n(-2) - (13) = -15, left: (((6 - 8) / 1) - 13) = -15\nroll back, left: ((6 - 8) / 1) = -2, 13\nroll back, left: (6 - 8) = -2, 1, 13\n(1) - (13) = -12, left: (1 - 13) = -12, (6 - 8) = -2\n(-2) * (-12) = 24, left: ((6 - 8) * (1 - 13)) = 24\nreach 24! expression: ((6 - 8) * (1 - 13))"}, {"input": "9 1 13 2\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 13, 2\n(13) + (9) = 22, left: (13 + (9 / 1)) = 22, 2\n(2) + (22) = 24, left: (2 + (13 + (9 / 1))) = 24\nreach 24! expression: (2 + (13 + (9 / 1)))"}, {"input": "9 1 13 2\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 9, 1\n(1) * (15) = 15, left: (1 * (13 + 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (1 * (13 + 2))) = 24\nreach 24! expression: (9 + (1 * (13 + 2)))"}, {"input": "9 1 13 2\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 1, 2\n(2) / (1) = 2, left: (2 / 1) = 2, (9 + 13) = 22\n(22) + (2) = 24, left: ((9 + 13) + (2 / 1)) = 24\nreach 24! expression: ((9 + 13) + (2 / 1))"}, {"input": "9 1 13 2\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 9, 13\n(9) + (13) = 22, left: (9 + 13) = 22, (1 * 2) = 2\n(2) + (22) = 24, left: ((1 * 2) + (9 + 13)) = 24\nreach 24! expression: ((1 * 2) + (9 + 13))"}, {"input": "9 1 13 2\n", "output": "(9) + (2) = 11, left: (9 + 2) = 11, 1, 13\n(13) + (11) = 24, left: (13 + (9 + 2)) = 24, 1\n(1) * (24) = 24, left: (1 * (13 + (9 + 2))) = 24\nreach 24! expression: (1 * (13 + (9 + 2)))"}, {"input": "9 1 13 2\n", "output": "(9) + (1) = 10, left: (9 + 1) = 10, 13, 2\nroll back, left: 9 1 13 2\n(1) - (9) = -8, left: (1 - 9) = -8, 13, 2\n(2) * (-8) = -16, left: (2 * (1 - 9)) = -16, 13\nroll back, left: (1 - 9) = -8, 13, 2\nroll back, left: 9 1 13 2\n(9) / (1) = 9, left: (9 / 1) = 9, 13, 2\n(13) + (9) = 22, left: (13 + (9 / 1)) = 22, 2\n(2) + (22) = 24, left: (2 + (13 + (9 / 1))) = 24\nreach 24! expression: (2 + (13 + (9 / 1)))"}, {"input": "7 4 6 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (6 / 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (6 / 6))) = 24\nreach 24! expression: (4 * (7 - (6 / 6)))"}, {"input": "7 4 6 6\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 4, 6\n(1) / (4) = 1/4, left: ((7 - 6) / 4) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((7 - 6) / 4)) = 24\nreach 24! expression: (6 / ((7 - 6) / 4))"}, {"input": "7 4 6 6\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 4, 6\n(6) / (1) = 6, left: (6 / (7 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (7 - 6))) = 24\nreach 24! expression: (4 * (6 / (7 - 6)))"}, {"input": "7 4 6 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 7, 6\n(7) - (6) = 1, left: (7 - 6) = 1, (4 * 6) = 24\n(24) * (1) = 24, left: ((4 * 6) * (7 - 6)) = 24\nreach 24! expression: ((4 * 6) * (7 - 6))"}, {"input": "7 4 6 6\n", "output": "(7) * (6) = 42, left: (7 * 6) = 42, 4, 6\n(42) / (4) = 21/2, left: ((7 * 6) / 4) = 21/2, 6\nroll back, left: (7 * 6) = 42, 4, 6\n(42) - (4) = 38, left: ((7 * 6) - 4) = 38, 6\nroll back, left: (7 * 6) = 42, 4, 6\nroll back, left: 7 4 6 6\n(7) - (6) = 1, left: (7 - 6) = 1, 4, 6\n(6) / (1) = 6, left: (6 / (7 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (7 - 6))) = 24\nreach 24! expression: (4 * (6 / (7 - 6)))"}, {"input": "7 4 6 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 7, 4\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, (6 / 6) = 1\nroll back, left: (6 / 6) = 1, 7, 4\n(7) + (4) = 11, left: (7 + 4) = 11, (6 / 6) = 1\n(11) / (1) = 11, left: ((7 + 4) / (6 / 6)) = 11\nroll back, left: (7 + 4) = 11, (6 / 6) = 1\nroll back, left: (6 / 6) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (6 / 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (6 / 6))) = 24\nreach 24! expression: (4 * (7 - (6 / 6)))"}, {"input": "7 4 6 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 7, 4\n(7) / (36) = 7/36, left: (7 / (6 * 6)) = 7/36, 4\nroll back, left: (6 * 6) = 36, 7, 4\nroll back, left: 7 4 6 6\n(6) / (6) = 1, left: (6 / 6) = 1, 7, 4\n(7) * (1) = 7, left: (7 * (6 / 6)) = 7, 4\nroll back, left: (6 / 6) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (6 / 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (6 / 6))) = 24\nreach 24! expression: (4 * (7 - (6 / 6)))"}, {"input": "7 4 6 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 7, 6\n(24) - (7) = 17, left: ((4 * 6) - 7) = 17, 6\nroll back, left: (4 * 6) = 24, 7, 6\n(7) - (24) = -17, left: (7 - (4 * 6)) = -17, 6\nroll back, left: (4 * 6) = 24, 7, 6\n(6) - (7) = -1, left: (6 - 7) = -1, (4 * 6) = 24\nroll back, left: (4 * 6) = 24, 7, 6\n(7) - (6) = 1, left: (7 - 6) = 1, (4 * 6) = 24\n(24) * (1) = 24, left: ((4 * 6) * (7 - 6)) = 24\nreach 24! expression: ((4 * 6) * (7 - 6))"}, {"input": "11 3 3 9\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 3, 9\n(8) / (3) = 8/3, left: ((11 - 3) / 3) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * ((11 - 3) / 3)) = 24\nreach 24! expression: (9 * ((11 - 3) / 3))"}, {"input": "11 3 3 9\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 11, 3\n(11) - (3) = 8, left: (11 - 3) = 8, (3 / 9) = 1/3\n(8) / (1/3) = 24, left: ((11 - 3) / (3 / 9)) = 24\nreach 24! expression: ((11 - 3) / (3 / 9))"}, {"input": "11 3 3 9\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 3, 9\n(9) * (8) = 72, left: (9 * (11 - 3)) = 72, 3\n(72) / (3) = 24, left: ((9 * (11 - 3)) / 3) = 24\nreach 24! expression: ((9 * (11 - 3)) / 3)"}, {"input": "11 3 3 9\n", "output": "(9) / (3) = 3, left: (9 / 3) = 3, 11, 3\n(11) - (3) = 8, left: (11 - (9 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 - (9 / 3))) = 24\nreach 24! expression: (3 * (11 - (9 / 3)))"}, {"input": "11 3 3 9\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 3, 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, (11 - 3) = 8\n(8) / (1/3) = 24, left: ((11 - 3) / (3 / 9)) = 24\nreach 24! expression: ((11 - 3) / (3 / 9))"}, {"input": "11 3 3 9\n", "output": "(9) - (3) = 6, left: (9 - 3) = 6, 11, 3\n(11) - (3) = 8, left: (11 - 3) = 8, (9 - 3) = 6\nroll back, left: (9 - 3) = 6, 11, 3\n(3) * (6) = 18, left: (3 * (9 - 3)) = 18, 11\nroll back, left: (9 - 3) = 6, 11, 3\nroll back, left: 11 3 3 9\n(9) / (3) = 3, left: (9 / 3) = 3, 11, 3\n(11) - (3) = 8, left: (11 - (9 / 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (11 - (9 / 3))) = 24\nreach 24! expression: (3 * (11 - (9 / 3)))"}, {"input": "11 3 3 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 3, 3\nroll back, left: 11 3 3 9\n(11) * (9) = 99, left: (11 * 9) = 99, 3, 3\n(3) - (99) = -96, left: (3 - (11 * 9)) = -96, 3\nroll back, left: (11 * 9) = 99, 3, 3\nroll back, left: 11 3 3 9\n(11) - (3) = 8, left: (11 - 3) = 8, 3, 9\n(8) / (3) = 8/3, left: ((11 - 3) / 3) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * ((11 - 3) / 3)) = 24\nreach 24! expression: (9 * ((11 - 3) / 3))"}, {"input": "11 3 3 9\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 3, 9\nroll back, left: 11 3 3 9\n(11) / (3) = 11/3, left: (11 / 3) = 11/3, 3, 9\n(3) / (11/3) = 9/11, left: (3 / (11 / 3)) = 9/11, 9\nroll back, left: (11 / 3) = 11/3, 3, 9\nroll back, left: 11 3 3 9\n(11) - (3) = 8, left: (11 - 3) = 8, 3, 9\n(9) * (8) = 72, left: (9 * (11 - 3)) = 72, 3\n(72) / (3) = 24, left: ((9 * (11 - 3)) / 3) = 24\nreach 24! expression: ((9 * (11 - 3)) / 3)"}, {"input": "11 3 3 9\n", "output": "(11) + (3) = 14, left: (11 + 3) = 14, 3, 9\n(3) * (14) = 42, left: (3 * (11 + 3)) = 42, 9\nroll back, left: (11 + 3) = 14, 3, 9\n(14) - (3) = 11, left: ((11 + 3) - 3) = 11, 9\nroll back, left: (11 + 3) = 14, 3, 9\nroll back, left: 11 3 3 9\n(11) - (3) = 8, left: (11 - 3) = 8, 3, 9\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, (11 - 3) = 8\n(8) / (1/3) = 24, left: ((11 - 3) / (3 / 9)) = 24\nreach 24! expression: ((11 - 3) / (3 / 9))"}, {"input": "9 6 1 10\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 1, 10\n(10) + (15) = 25, left: (10 + (9 + 6)) = 25, 1\n(25) - (1) = 24, left: ((10 + (9 + 6)) - 1) = 24\nreach 24! expression: ((10 + (9 + 6)) - 1)"}, {"input": "9 6 1 10\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 1, 10\n(1) - (15) = -14, left: (1 - (9 + 6)) = -14, 10\n(10) - (-14) = 24, left: (10 - (1 - (9 + 6))) = 24\nreach 24! expression: (10 - (1 - (9 + 6)))"}, {"input": "9 6 1 10\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 9, 6\n(9) + (9) = 18, left: (9 + (10 - 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 + (10 - 1))) = 24\nreach 24! expression: (6 + (9 + (10 - 1)))"}, {"input": "9 6 1 10\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 1, 10\n(1) - (10) = -9, left: (1 - 10) = -9, (9 + 6) = 15\n(15) - (-9) = 24, left: ((9 + 6) - (1 - 10)) = 24\nreach 24! expression: ((9 + 6) - (1 - 10))"}, {"input": "9 6 1 10\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 9, 10\n(10) - (-5) = 15, left: (10 - (1 - 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 - (1 - 6))) = 24\nreach 24! expression: (9 + (10 - (1 - 6)))"}, {"input": "9 6 1 10\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 9, 10\n(6) - (9) = -3, left: ((6 / 1) - 9) = -3, 10\nroll back, left: (6 / 1) = 6, 9, 10\nroll back, left: 9 6 1 10\n(6) + (1) = 7, left: (6 + 1) = 7, 9, 10\nroll back, left: 9 6 1 10\n(1) - (6) = -5, left: (1 - 6) = -5, 9, 10\n(10) - (-5) = 15, left: (10 - (1 - 6)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 - (1 - 6))) = 24\nreach 24! expression: (9 + (10 - (1 - 6)))"}, {"input": "9 6 1 10\n", "output": "(9) * (6) = 54, left: (9 * 6) = 54, 1, 10\n(1) * (54) = 54, left: (1 * (9 * 6)) = 54, 10\nroll back, left: (9 * 6) = 54, 1, 10\nroll back, left: 9 6 1 10\n(9) + (6) = 15, left: (9 + 6) = 15, 1, 10\n(15) - (10) = 5, left: ((9 + 6) - 10) = 5, 1\nroll back, left: (9 + 6) = 15, 1, 10\n(10) + (15) = 25, left: (10 + (9 + 6)) = 25, 1\n(25) - (1) = 24, left: ((10 + (9 + 6)) - 1) = 24\nreach 24! expression: ((10 + (9 + 6)) - 1)"}, {"input": "9 6 1 10\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 9, 6\n(9) - (9) = 0, left: (9 - (10 - 1)) = 0, 6\n(6) * (0) = 0, left: (6 * (9 - (10 - 1))) = 0\nroll back, left: (9 - (10 - 1)) = 0, 6\nroll back, left: (10 - 1) = 9, 9, 6\n(9) / (9) = 1, left: ((10 - 1) / 9) = 1, 6\nroll back, left: (10 - 1) = 9, 9, 6\n(9) + (9) = 18, left: (9 + (10 - 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 + (10 - 1))) = 24\nreach 24! expression: (6 + (9 + (10 - 1)))"}, {"input": "11 12 2 5\n", "output": "(11) / (2) = 11/2, left: (11 / 2) = 11/2, 12, 5\n(11/2) - (5) = 1/2, left: ((11 / 2) - 5) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((11 / 2) - 5)) = 24\nreach 24! expression: (12 / ((11 / 2) - 5))"}, {"input": "11 12 2 5\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 12, 2\n(2) * (6) = 12, left: (2 * (11 - 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (11 - 5))) = 24\nreach 24! expression: (12 + (2 * (11 - 5)))"}, {"input": "11 12 2 5\n", "output": "(5) - (11) = -6, left: (5 - 11) = -6, 12, 2\n(2) * (-6) = -12, left: (2 * (5 - 11)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 * (5 - 11))) = 24\nreach 24! expression: (12 - (2 * (5 - 11)))"}, {"input": "11 12 2 5\n", "output": "(5) - (12) = -7, left: (5 - 12) = -7, 11, 2\n(11) - (2) = 9, left: (11 - 2) = 9, (5 - 12) = -7\n(-7) + (9) = 2, left: ((5 - 12) + (11 - 2)) = 2\nroll back, left: (11 - 2) = 9, (5 - 12) = -7\nroll back, left: (5 - 12) = -7, 11, 2\nroll back, left: 11 12 2 5\n(11) - (5) = 6, left: (11 - 5) = 6, 12, 2\n(2) * (6) = 12, left: (2 * (11 - 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (11 - 5))) = 24\nreach 24! expression: (12 + (2 * (11 - 5)))"}, {"input": "10 13 4 9\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 4, 9\n(9) - (3) = 6, left: (9 - (13 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (13 - 10))) = 24\nreach 24! expression: (4 * (9 - (13 - 10)))"}, {"input": "10 13 4 9\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 13, 9\n(13) - (9) = 4, left: (13 - 9) = 4, (10 - 4) = 6\n(6) * (4) = 24, left: ((10 - 4) * (13 - 9)) = 24\nreach 24! expression: ((10 - 4) * (13 - 9))"}, {"input": "10 13 4 9\n", "output": "(9) - (13) = -4, left: (9 - 13) = -4, 10, 4\n(4) - (10) = -6, left: (4 - 10) = -6, (9 - 13) = -4\n(-4) * (-6) = 24, left: ((9 - 13) * (4 - 10)) = 24\nreach 24! expression: ((9 - 13) * (4 - 10))"}, {"input": "10 13 4 9\n", "output": "(10) - (13) = -3, left: (10 - 13) = -3, 4, 9\n(9) + (-3) = 6, left: (9 + (10 - 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (10 - 13))) = 24\nreach 24! expression: (4 * (9 + (10 - 13)))"}, {"input": "10 13 4 9\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 10, 9\n(9) * (9) = 81, left: (9 * (13 - 4)) = 81, 10\nroll back, left: (13 - 4) = 9, 10, 9\nroll back, left: 10 13 4 9\n(13) / (4) = 13/4, left: (13 / 4) = 13/4, 10, 9\nroll back, left: 10 13 4 9\n(10) - (13) = -3, left: (10 - 13) = -3, 4, 9\n(9) + (-3) = 6, left: (9 + (10 - 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (10 - 13))) = 24\nreach 24! expression: (4 * (9 + (10 - 13)))"}, {"input": "10 13 4 9\n", "output": "(4) * (9) = 36, left: (4 * 9) = 36, 10, 13\nroll back, left: 10 13 4 9\n(4) - (9) = -5, left: (4 - 9) = -5, 10, 13\n(10) / (-5) = -2, left: (10 / (4 - 9)) = -2, 13\nroll back, left: (4 - 9) = -5, 10, 13\nroll back, left: 10 13 4 9\n(13) - (10) = 3, left: (13 - 10) = 3, 4, 9\n(9) - (3) = 6, left: (9 - (13 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (13 - 10))) = 24\nreach 24! expression: (4 * (9 - (13 - 10)))"}, {"input": "10 13 4 9\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 10, 9\nroll back, left: 10 13 4 9\n(4) - (9) = -5, left: (4 - 9) = -5, 10, 13\n(-5) - (10) = -15, left: ((4 - 9) - 10) = -15, 13\nroll back, left: (4 - 9) = -5, 10, 13\nroll back, left: 10 13 4 9\n(10) - (13) = -3, left: (10 - 13) = -3, 4, 9\n(9) + (-3) = 6, left: (9 + (10 - 13)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 + (10 - 13))) = 24\nreach 24! expression: (4 * (9 + (10 - 13)))"}, {"input": "6 13 1 5\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 13, 1\n(11) / (1) = 11, left: ((6 + 5) / 1) = 11, 13\n(13) + (11) = 24, left: (13 + ((6 + 5) / 1)) = 24\nreach 24! expression: (13 + ((6 + 5) / 1))"}, {"input": "6 13 1 5\n", "output": "(5) / (1) = 5, left: (5 / 1) = 5, 6, 13\n(13) + (5) = 18, left: (13 + (5 / 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (13 + (5 / 1))) = 24\nreach 24! expression: (6 + (13 + (5 / 1)))"}, {"input": "6 13 1 5\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 1, 5\n(1) * (5) = 5, left: (1 * 5) = 5, (6 + 13) = 19\n(19) + (5) = 24, left: ((6 + 13) + (1 * 5)) = 24\nreach 24! expression: ((6 + 13) + (1 * 5))"}, {"input": "6 13 1 5\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 6, 13\n(6) + (5) = 11, left: (6 + (1 * 5)) = 11, 13\n(13) + (11) = 24, left: (13 + (6 + (1 * 5))) = 24\nreach 24! expression: (13 + (6 + (1 * 5)))"}, {"input": "6 13 1 5\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 6, 1\n(1) * (18) = 18, left: (1 * (13 + 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (1 * (13 + 5))) = 24\nreach 24! expression: (6 + (1 * (13 + 5)))"}, {"input": "6 13 1 5\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 13, 1\n(13) * (1) = 13, left: (13 * (6 - 5)) = 13, 1\nroll back, left: (6 - 5) = 1, 13, 1\n(13) + (1) = 14, left: (13 + (6 - 5)) = 14, 1\nroll back, left: (6 - 5) = 1, 13, 1\nroll back, left: 6 13 1 5\n(6) + (5) = 11, left: (6 + 5) = 11, 13, 1\n(11) / (1) = 11, left: ((6 + 5) / 1) = 11, 13\n(13) + (11) = 24, left: (13 + ((6 + 5) / 1)) = 24\nreach 24! expression: (13 + ((6 + 5) / 1))"}, {"input": "6 13 1 5\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 6, 13\n(-4) - (6) = -10, left: ((1 - 5) - 6) = -10, 13\nroll back, left: (1 - 5) = -4, 6, 13\nroll back, left: 6 13 1 5\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, 6, 13\nroll back, left: 6 13 1 5\n(1) * (5) = 5, left: (1 * 5) = 5, 6, 13\n(6) + (5) = 11, left: (6 + (1 * 5)) = 11, 13\n(13) + (11) = 24, left: (13 + (6 + (1 * 5))) = 24\nreach 24! expression: (13 + (6 + (1 * 5)))"}, {"input": "6 13 1 5\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 6, 13\n(6) * (13) = 78, left: (6 * 13) = 78, (5 - 1) = 4\nroll back, left: (5 - 1) = 4, 6, 13\n(6) * (4) = 24, left: (6 * (5 - 1)) = 24, 13\nroll back, left: (5 - 1) = 4, 6, 13\nroll back, left: 6 13 1 5\n(5) / (1) = 5, left: (5 / 1) = 5, 6, 13\n(13) + (5) = 18, left: (13 + (5 / 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (13 + (5 / 1))) = 24\nreach 24! expression: (6 + (13 + (5 / 1)))"}, {"input": "6 13 1 5\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 6, 1\n(6) * (-8) = -48, left: (6 * (5 - 13)) = -48, 1\n(-48) - (1) = -49, left: ((6 * (5 - 13)) - 1) = -49\nroll back, left: (6 * (5 - 13)) = -48, 1\nroll back, left: (5 - 13) = -8, 6, 1\nroll back, left: 6 13 1 5\n(13) + (5) = 18, left: (13 + 5) = 18, 6, 1\n(1) * (18) = 18, left: (1 * (13 + 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (1 * (13 + 5))) = 24\nreach 24! expression: (6 + (1 * (13 + 5)))"}, {"input": "9 7 2 8\n", "output": "(9) + (7) = 16, left: (9 + 7) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (9 + 7)) = 32, 8\n(32) - (8) = 24, left: ((2 * (9 + 7)) - 8) = 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(9) + (2) = 11, left: (9 + 2) = 11, 7, 8\nroll back, left: 9 7 2 8\n(2) + (8) = 10, left: (2 + 8) = 10, 9, 7\n(9) - (7) = 2, left: (9 - 7) = 2, (2 + 8) = 10\nroll back, left: (2 + 8) = 10, 9, 7\nroll back, left: 9 7 2 8\n(9) + (7) = 16, left: (9 + 7) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (9 + 7)) = 32, 8\n(32) - (8) = 24, left: ((2 * (9 + 7)) - 8) = 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 9, 2\nroll back, left: 9 7 2 8\n(8) - (2) = 6, left: (8 - 2) = 6, 9, 7\n(9) / (7) = 9/7, left: (9 / 7) = 9/7, (8 - 2) = 6\nroll back, left: (8 - 2) = 6, 9, 7\nroll back, left: 9 7 2 8\n(9) + (7) = 16, left: (9 + 7) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (9 + 7)) = 32, 8\n(32) - (8) = 24, left: ((2 * (9 + 7)) - 8) = 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 9, 2\nroll back, left: 9 7 2 8\n(8) - (7) = 1, left: (8 - 7) = 1, 9, 2\nroll back, left: 9 7 2 8\n(9) + (7) = 16, left: (9 + 7) = 16, 2, 8\n(2) - (16) = -14, left: (2 - (9 + 7)) = -14, 8\nroll back, left: (9 + 7) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (9 + 7)) = 32, 8\n(32) - (8) = 24, left: ((2 * (9 + 7)) - 8) = 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(9) / (7) = 9/7, left: (9 / 7) = 9/7, 2, 8\n(2) * (8) = 16, left: (2 * 8) = 16, (9 / 7) = 9/7\nroll back, left: (9 / 7) = 9/7, 2, 8\nroll back, left: 9 7 2 8\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, 2, 8\nroll back, left: 9 7 2 8\n(9) + (7) = 16, left: (9 + 7) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (9 + 7)) = 32, 8\n(32) - (8) = 24, left: ((2 * (9 + 7)) - 8) = 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "9 7 2 8\n", "output": "(9) / (7) = 9/7, left: (9 / 7) = 9/7, 2, 8\nroll back, left: 9 7 2 8\n(9) - (7) = 2, left: (9 - 7) = 2, 2, 8\n(2) * (2) = 4, left: (2 * (9 - 7)) = 4, 8\nroll back, left: (9 - 7) = 2, 2, 8\nroll back, left: 9 7 2 8\n(9) + (7) = 16, left: (9 + 7) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (9 + 7)) = 32, 8\n(32) - (8) = 24, left: ((2 * (9 + 7)) - 8) = 24\nreach 24! expression: ((2 * (9 + 7)) - 8)"}, {"input": "4 11 5 4\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 11, 5\n(11) + (8) = 19, left: (11 + (4 + 4)) = 19, 5\n(5) + (19) = 24, left: (5 + (11 + (4 + 4))) = 24\nreach 24! expression: (5 + (11 + (4 + 4)))"}, {"input": "4 11 5 4\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 5, 4\n(4) + (15) = 19, left: (4 + (4 + 11)) = 19, 5\n(5) + (19) = 24, left: (5 + (4 + (4 + 11))) = 24\nreach 24! expression: (5 + (4 + (4 + 11)))"}, {"input": "4 11 5 4\n", "output": "(5) * (4) = 20, left: (5 * 4) = 20, 4, 11\n(4) * (11) = 44, left: (4 * 11) = 44, (5 * 4) = 20\n(44) - (20) = 24, left: ((4 * 11) - (5 * 4)) = 24\nreach 24! expression: ((4 * 11) - (5 * 4))"}, {"input": "4 11 5 4\n", "output": "(4) * (11) = 44, left: (4 * 11) = 44, 5, 4\n(5) * (4) = 20, left: (5 * 4) = 20, (4 * 11) = 44\n(44) - (20) = 24, left: ((4 * 11) - (5 * 4)) = 24\nreach 24! expression: ((4 * 11) - (5 * 4))"}, {"input": "4 11 5 4\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 11, 5\n(5) + (8) = 13, left: (5 + (4 + 4)) = 13, 11\n(11) + (13) = 24, left: (11 + (5 + (4 + 4))) = 24\nreach 24! expression: (11 + (5 + (4 + 4)))"}, {"input": "4 11 5 4\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 5, 4\n(15) - (4) = 11, left: ((4 + 11) - 4) = 11, 5\nroll back, left: (4 + 11) = 15, 5, 4\n(4) * (15) = 60, left: (4 * (4 + 11)) = 60, 5\n(5) + (60) = 65, left: (5 + (4 * (4 + 11))) = 65\nroll back, left: (4 * (4 + 11)) = 60, 5\nroll back, left: (4 + 11) = 15, 5, 4\n(4) + (15) = 19, left: (4 + (4 + 11)) = 19, 5\n(5) + (19) = 24, left: (5 + (4 + (4 + 11))) = 24\nreach 24! expression: (5 + (4 + (4 + 11)))"}, {"input": "4 11 5 4\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 11, 5\n(5) - (11) = -6, left: (5 - 11) = -6, (4 - 4) = 0\nroll back, left: (4 - 4) = 0, 11, 5\n(5) + (0) = 5, left: (5 + (4 - 4)) = 5, 11\nroll back, left: (4 - 4) = 0, 11, 5\nroll back, left: 4 11 5 4\n(4) + (4) = 8, left: (4 + 4) = 8, 11, 5\n(5) + (8) = 13, left: (5 + (4 + 4)) = 13, 11\n(11) + (13) = 24, left: (11 + (5 + (4 + 4))) = 24\nreach 24! expression: (11 + (5 + (4 + 4)))"}, {"input": "4 11 5 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 11, 5\nroll back, left: 4 11 5 4\n(4) - (4) = 0, left: (4 - 4) = 0, 11, 5\nroll back, left: 4 11 5 4\n(4) / (4) = 1, left: (4 / 4) = 1, 11, 5\nroll back, left: 4 11 5 4\n(4) + (4) = 8, left: (4 + 4) = 8, 11, 5\n(11) + (8) = 19, left: (11 + (4 + 4)) = 19, 5\n(5) + (19) = 24, left: (5 + (11 + (4 + 4))) = 24\nreach 24! expression: (5 + (11 + (4 + 4)))"}, {"input": "2 4 9 13\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 9, 13\n(9) + (2) = 11, left: (9 + (4 / 2)) = 11, 13\n(13) + (11) = 24, left: (13 + (9 + (4 / 2))) = 24\nreach 24! expression: (13 + (9 + (4 / 2)))"}, {"input": "2 4 9 13\n", "output": "(4) + (9) = 13, left: (4 + 9) = 13, 2, 13\n(2) - (13) = -11, left: (2 - 13) = -11, (4 + 9) = 13\n(13) - (-11) = 24, left: ((4 + 9) - (2 - 13)) = 24\nreach 24! expression: ((4 + 9) - (2 - 13))"}, {"input": "2 4 9 13\n", "output": "(4) + (9) = 13, left: (4 + 9) = 13, 2, 13\n(13) + (13) = 26, left: (13 + (4 + 9)) = 26, 2\n(26) - (2) = 24, left: ((13 + (4 + 9)) - 2) = 24\nreach 24! expression: ((13 + (4 + 9)) - 2)"}, {"input": "2 4 9 13\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 4, 13\n(4) + (7) = 11, left: (4 + (9 - 2)) = 11, 13\n(13) + (11) = 24, left: (13 + (4 + (9 - 2))) = 24\nreach 24! expression: (13 + (4 + (9 - 2)))"}, {"input": "2 4 9 13\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 4, 13\n(-7) - (13) = -20, left: ((2 - 9) - 13) = -20, 4\n(4) - (-20) = 24, left: (4 - ((2 - 9) - 13)) = 24\nreach 24! expression: (4 - ((2 - 9) - 13))"}, {"input": "2 4 9 13\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 4, 13\n(11) - (4) = 7, left: ((2 + 9) - 4) = 7, 13\nroll back, left: (2 + 9) = 11, 4, 13\nroll back, left: 2 4 9 13\n(2) * (9) = 18, left: (2 * 9) = 18, 4, 13\nroll back, left: 2 4 9 13\n(2) - (9) = -7, left: (2 - 9) = -7, 4, 13\n(-7) - (13) = -20, left: ((2 - 9) - 13) = -20, 4\n(4) - (-20) = 24, left: (4 - ((2 - 9) - 13)) = 24\nreach 24! expression: (4 - ((2 - 9) - 13))"}, {"input": "2 4 9 13\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 9, 13\n(9) - (2) = 7, left: (9 - (4 / 2)) = 7, 13\n(13) / (7) = 13/7, left: (13 / (9 - (4 / 2))) = 13/7\nroll back, left: (9 - (4 / 2)) = 7, 13\nroll back, left: (4 / 2) = 2, 9, 13\n(2) / (9) = 2/9, left: ((4 / 2) / 9) = 2/9, 13\nroll back, left: (4 / 2) = 2, 9, 13\n(9) + (2) = 11, left: (9 + (4 / 2)) = 11, 13\n(13) + (11) = 24, left: (13 + (9 + (4 / 2))) = 24\nreach 24! expression: (13 + (9 + (4 / 2)))"}, {"input": "2 4 9 13\n", "output": "(4) + (9) = 13, left: (4 + 9) = 13, 2, 13\n(13) - (13) = 0, left: ((4 + 9) - 13) = 0, 2\nroll back, left: (4 + 9) = 13, 2, 13\n(13) / (13) = 1, left: (13 / (4 + 9)) = 1, 2\nroll back, left: (4 + 9) = 13, 2, 13\n(13) + (13) = 26, left: (13 + (4 + 9)) = 26, 2\n(26) / (2) = 13, left: ((13 + (4 + 9)) / 2) = 13\nroll back, left: (13 + (4 + 9)) = 26, 2\n(26) - (2) = 24, left: ((13 + (4 + 9)) - 2) = 24\nreach 24! expression: ((13 + (4 + 9)) - 2)"}, {"input": "7 2 9 10\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 7, 9\n(7) - (-8) = 15, left: (7 - (2 - 10)) = 15, 9\n(9) + (15) = 24, left: (9 + (7 - (2 - 10))) = 24\nreach 24! expression: (9 + (7 - (2 - 10)))"}, {"input": "7 2 9 10\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 2, 10\n(2) + (10) = 12, left: (2 + 10) = 12, (9 - 7) = 2\n(2) * (12) = 24, left: ((9 - 7) * (2 + 10)) = 24\nreach 24! expression: ((9 - 7) * (2 + 10))"}, {"input": "7 2 9 10\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 7, 9\n(9) + (8) = 17, left: (9 + (10 - 2)) = 17, 7\n(7) + (17) = 24, left: (7 + (9 + (10 - 2))) = 24\nreach 24! expression: (7 + (9 + (10 - 2)))"}, {"input": "7 2 9 10\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 7, 9\n(-8) - (7) = -15, left: ((2 - 10) - 7) = -15, 9\n(9) - (-15) = 24, left: (9 - ((2 - 10) - 7)) = 24\nreach 24! expression: (9 - ((2 - 10) - 7))"}, {"input": "7 2 9 10\n", "output": "(2) - (7) = -5, left: (2 - 7) = -5, 9, 10\n(9) + (10) = 19, left: (9 + 10) = 19, (2 - 7) = -5\n(19) - (-5) = 24, left: ((9 + 10) - (2 - 7)) = 24\nreach 24! expression: ((9 + 10) - (2 - 7))"}, {"input": "7 2 9 10\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 7, 9\n(8) / (9) = 8/9, left: ((10 - 2) / 9) = 8/9, 7\nroll back, left: (10 - 2) = 8, 7, 9\n(9) * (8) = 72, left: (9 * (10 - 2)) = 72, 7\n(72) - (7) = 65, left: ((9 * (10 - 2)) - 7) = 65\nroll back, left: (9 * (10 - 2)) = 72, 7\nroll back, left: (10 - 2) = 8, 7, 9\n(9) + (8) = 17, left: (9 + (10 - 2)) = 17, 7\n(7) + (17) = 24, left: (7 + (9 + (10 - 2))) = 24\nreach 24! expression: (7 + (9 + (10 - 2)))"}, {"input": "7 2 9 10\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 2, 10\n(2) / (2) = 1, left: ((9 - 7) / 2) = 1, 10\nroll back, left: (9 - 7) = 2, 2, 10\n(10) / (2) = 5, left: (10 / 2) = 5, (9 - 7) = 2\nroll back, left: (9 - 7) = 2, 2, 10\n(2) - (10) = -8, left: (2 - 10) = -8, (9 - 7) = 2\nroll back, left: (9 - 7) = 2, 2, 10\n(2) + (10) = 12, left: (2 + 10) = 12, (9 - 7) = 2\n(2) * (12) = 24, left: ((9 - 7) * (2 + 10)) = 24\nreach 24! expression: ((9 - 7) * (2 + 10))"}, {"input": "7 2 9 10\n", "output": "(2) / (10) = 1/5, left: (2 / 10) = 1/5, 7, 9\n(7) + (9) = 16, left: (7 + 9) = 16, (2 / 10) = 1/5\nroll back, left: (2 / 10) = 1/5, 7, 9\nroll back, left: 7 2 9 10\n(2) - (10) = -8, left: (2 - 10) = -8, 7, 9\n(7) * (-8) = -56, left: (7 * (2 - 10)) = -56, 9\nroll back, left: (2 - 10) = -8, 7, 9\n(7) - (-8) = 15, left: (7 - (2 - 10)) = 15, 9\n(9) + (15) = 24, left: (9 + (7 - (2 - 10))) = 24\nreach 24! expression: (9 + (7 - (2 - 10)))"}, {"input": "8 10 12 3\n", "output": "(10) * (12) = 120, left: (10 * 12) = 120, 8, 3\n(8) - (3) = 5, left: (8 - 3) = 5, (10 * 12) = 120\n(120) / (5) = 24, left: ((10 * 12) / (8 - 3)) = 24\nreach 24! expression: ((10 * 12) / (8 - 3))"}, {"input": "8 10 12 3\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 10, 12\n(10) * (12) = 120, left: (10 * 12) = 120, (8 - 3) = 5\n(120) / (5) = 24, left: ((10 * 12) / (8 - 3)) = 24\nreach 24! expression: ((10 * 12) / (8 - 3))"}, {"input": "8 10 12 3\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 10, 12\n(5) / (10) = 1/2, left: ((8 - 3) / 10) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((8 - 3) / 10)) = 24\nreach 24! expression: (12 / ((8 - 3) / 10))"}, {"input": "8 10 12 3\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 10, 12\n(5) / (12) = 5/12, left: ((8 - 3) / 12) = 5/12, 10\n(10) / (5/12) = 24, left: (10 / ((8 - 3) / 12)) = 24\nreach 24! expression: (10 / ((8 - 3) / 12))"}, {"input": "8 10 12 3\n", "output": "(8) / (10) = 4/5, left: (8 / 10) = 4/5, 12, 3\nroll back, left: 8 10 12 3\n(10) * (3) = 30, left: (10 * 3) = 30, 8, 12\nroll back, left: 8 10 12 3\n(10) - (3) = 7, left: (10 - 3) = 7, 8, 12\nroll back, left: 8 10 12 3\n(10) * (12) = 120, left: (10 * 12) = 120, 8, 3\n(8) - (3) = 5, left: (8 - 3) = 5, (10 * 12) = 120\n(120) / (5) = 24, left: ((10 * 12) / (8 - 3)) = 24\nreach 24! expression: ((10 * 12) / (8 - 3))"}, {"input": "8 10 12 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 8, 12\nroll back, left: 8 10 12 3\n(3) - (10) = -7, left: (3 - 10) = -7, 8, 12\n(8) / (-7) = -8/7, left: (8 / (3 - 10)) = -8/7, 12\nroll back, left: (3 - 10) = -7, 8, 12\nroll back, left: 8 10 12 3\n(8) - (3) = 5, left: (8 - 3) = 5, 10, 12\n(10) * (12) = 120, left: (10 * 12) = 120, (8 - 3) = 5\n(120) / (5) = 24, left: ((10 * 12) / (8 - 3)) = 24\nreach 24! expression: ((10 * 12) / (8 - 3))"}, {"input": "8 10 12 3\n", "output": "(12) + (3) = 15, left: (12 + 3) = 15, 8, 10\nroll back, left: 8 10 12 3\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 10, 3\nroll back, left: 8 10 12 3\n(12) / (8) = 3/2, left: (12 / 8) = 3/2, 10, 3\nroll back, left: 8 10 12 3\n(8) - (3) = 5, left: (8 - 3) = 5, 10, 12\n(5) / (12) = 5/12, left: ((8 - 3) / 12) = 5/12, 10\n(10) / (5/12) = 24, left: (10 / ((8 - 3) / 12)) = 24\nreach 24! expression: (10 / ((8 - 3) / 12))"}, {"input": "3 3 10 1\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 3, 10\n(10) - (2) = 8, left: (10 - (3 - 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (3 - 1))) = 24\nreach 24! expression: (3 * (10 - (3 - 1)))"}, {"input": "3 3 10 1\n", "output": "(3) - (10) = -7, left: (3 - 10) = -7, 3, 1\n(1) - (-7) = 8, left: (1 - (3 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 - (3 - 10))) = 24\nreach 24! expression: (3 * (1 - (3 - 10)))"}, {"input": "3 3 10 1\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 3, 10\n(10) + (-2) = 8, left: (10 + (1 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 + (1 - 3))) = 24\nreach 24! expression: (3 * (10 + (1 - 3)))"}, {"input": "3 3 10 1\n", "output": "(10) / (3) = 10/3, left: (10 / 3) = 10/3, 3, 1\nroll back, left: 3 3 10 1\n(3) * (10) = 30, left: (3 * 10) = 30, 3, 1\n(30) / (3) = 10, left: ((3 * 10) / 3) = 10, 1\nroll back, left: (3 * 10) = 30, 3, 1\nroll back, left: 3 3 10 1\n(3) - (10) = -7, left: (3 - 10) = -7, 3, 1\n(1) - (-7) = 8, left: (1 - (3 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 - (3 - 10))) = 24\nreach 24! expression: (3 * (1 - (3 - 10)))"}, {"input": "3 3 10 1\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 10, 1\n(10) * (9) = 90, left: (10 * (3 * 3)) = 90, 1\nroll back, left: (3 * 3) = 9, 10, 1\nroll back, left: 3 3 10 1\n(3) / (3) = 1, left: (3 / 3) = 1, 10, 1\nroll back, left: 3 3 10 1\n(3) - (10) = -7, left: (3 - 10) = -7, 3, 1\n(1) - (-7) = 8, left: (1 - (3 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (1 - (3 - 10))) = 24\nreach 24! expression: (3 * (1 - (3 - 10)))"}, {"input": "3 3 10 1\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 3, 10\n(-2) / (10) = -1/5, left: ((1 - 3) / 10) = -1/5, 3\n(3) / (-1/5) = -15, left: (3 / ((1 - 3) / 10)) = -15\nroll back, left: ((1 - 3) / 10) = -1/5, 3\nroll back, left: (1 - 3) = -2, 3, 10\n(10) + (-2) = 8, left: (10 + (1 - 3)) = 8, 3\n(3) - (8) = -5, left: (3 - (10 + (1 - 3))) = -5\nroll back, left: (10 + (1 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 + (1 - 3))) = 24\nreach 24! expression: (3 * (10 + (1 - 3)))"}, {"input": "3 3 10 1\n", "output": "(3) * (1) = 3, left: (3 * 1) = 3, 3, 10\n(3) * (3) = 9, left: (3 * (3 * 1)) = 9, 10\n(9) - (10) = -1, left: ((3 * (3 * 1)) - 10) = -1\nroll back, left: (3 * (3 * 1)) = 9, 10\nroll back, left: (3 * 1) = 3, 3, 10\nroll back, left: 3 3 10 1\n(1) - (3) = -2, left: (1 - 3) = -2, 3, 10\n(10) + (-2) = 8, left: (10 + (1 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 + (1 - 3))) = 24\nreach 24! expression: (3 * (10 + (1 - 3)))"}, {"input": "3 3 10 1\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 3, 10\n(10) / (2) = 5, left: (10 / (3 - 1)) = 5, 3\nroll back, left: (3 - 1) = 2, 3, 10\n(10) * (2) = 20, left: (10 * (3 - 1)) = 20, 3\n(3) - (20) = -17, left: (3 - (10 * (3 - 1))) = -17\nroll back, left: (10 * (3 - 1)) = 20, 3\nroll back, left: (3 - 1) = 2, 3, 10\n(10) - (2) = 8, left: (10 - (3 - 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 - (3 - 1))) = 24\nreach 24! expression: (3 * (10 - (3 - 1)))"}, {"input": "12 12 8 1\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 12, 1\n(3/2) - (1) = 1/2, left: ((12 / 8) - 1) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((12 / 8) - 1)) = 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "12 12 8 1\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 12, 12\n(12) / (12) = 1, left: (12 / 12) = 1, (8 / 1) = 8\nroll back, left: (8 / 1) = 8, 12, 12\nroll back, left: 12 12 8 1\n(8) * (1) = 8, left: (8 * 1) = 8, 12, 12\nroll back, left: 12 12 8 1\n(12) / (8) = 3/2, left: (12 / 8) = 3/2, 12, 1\n(3/2) - (1) = 1/2, left: ((12 / 8) - 1) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((12 / 8) - 1)) = 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "12 12 8 1\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 12, 12\nroll back, left: 12 12 8 1\n(8) * (1) = 8, left: (8 * 1) = 8, 12, 12\nroll back, left: 12 12 8 1\n(12) * (12) = 144, left: (12 * 12) = 144, 8, 1\nroll back, left: 12 12 8 1\n(12) / (8) = 3/2, left: (12 / 8) = 3/2, 12, 1\n(3/2) - (1) = 1/2, left: ((12 / 8) - 1) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((12 / 8) - 1)) = 24\nreach 24! expression: (12 / ((12 / 8) - 1))"}, {"input": "11 4 4 6\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 4, 4\n(4) * (-5) = -20, left: (4 * (6 - 11)) = -20, 4\n(4) - (-20) = 24, left: (4 - (4 * (6 - 11))) = 24\nreach 24! expression: (4 - (4 * (6 - 11)))"}, {"input": "11 4 4 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (11 - 6)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (11 - 6))) = 24\nreach 24! expression: (4 + (4 * (11 - 6)))"}, {"input": "11 4 4 6\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 4, 4\n(-5) - (4) = -9, left: ((6 - 11) - 4) = -9, 4\n(-9) / (4) = -9/4, left: (((6 - 11) - 4) / 4) = -9/4\nroll back, left: ((6 - 11) - 4) = -9, 4\nroll back, left: (6 - 11) = -5, 4, 4\n(4) * (-5) = -20, left: (4 * (6 - 11)) = -20, 4\n(4) + (-20) = -16, left: (4 + (4 * (6 - 11))) = -16\nroll back, left: (4 * (6 - 11)) = -20, 4\n(4) - (-20) = 24, left: (4 - (4 * (6 - 11))) = 24\nreach 24! expression: (4 - (4 * (6 - 11)))"}, {"input": "11 4 4 6\n", "output": "(4) + (6) = 10, left: (4 + 6) = 10, 11, 4\nroll back, left: 11 4 4 6\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, 11, 4\n(4) / (3/2) = 8/3, left: (4 / (6 / 4)) = 8/3, 11\nroll back, left: (6 / 4) = 3/2, 11, 4\nroll back, left: 11 4 4 6\n(11) - (6) = 5, left: (11 - 6) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (11 - 6)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (11 - 6))) = 24\nreach 24! expression: (4 + (4 * (11 - 6)))"}, {"input": "11 4 4 6\n", "output": "(4) + (6) = 10, left: (4 + 6) = 10, 11, 4\nroll back, left: 11 4 4 6\n(4) / (4) = 1, left: (4 / 4) = 1, 11, 6\n(6) + (1) = 7, left: (6 + (4 / 4)) = 7, 11\nroll back, left: (4 / 4) = 1, 11, 6\nroll back, left: 11 4 4 6\n(6) - (11) = -5, left: (6 - 11) = -5, 4, 4\n(4) * (-5) = -20, left: (4 * (6 - 11)) = -20, 4\n(4) - (-20) = 24, left: (4 - (4 * (6 - 11))) = 24\nreach 24! expression: (4 - (4 * (6 - 11)))"}, {"input": "11 4 4 6\n", "output": "(11) / (4) = 11/4, left: (11 / 4) = 11/4, 4, 6\nroll back, left: 11 4 4 6\n(6) - (4) = 2, left: (6 - 4) = 2, 11, 4\nroll back, left: 11 4 4 6\n(4) * (6) = 24, left: (4 * 6) = 24, 11, 4\nroll back, left: 11 4 4 6\n(11) - (6) = 5, left: (11 - 6) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (11 - 6)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (11 - 6))) = 24\nreach 24! expression: (4 + (4 * (11 - 6)))"}, {"input": "11 4 4 6\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 11, 6\n(6) - (0) = 6, left: (6 - (4 - 4)) = 6, 11\n(11) - (6) = 5, left: (11 - (6 - (4 - 4))) = 5\nroll back, left: (6 - (4 - 4)) = 6, 11\nroll back, left: (4 - 4) = 0, 11, 6\nroll back, left: 11 4 4 6\n(6) - (11) = -5, left: (6 - 11) = -5, 4, 4\n(4) * (-5) = -20, left: (4 * (6 - 11)) = -20, 4\n(4) - (-20) = 24, left: (4 - (4 * (6 - 11))) = 24\nreach 24! expression: (4 - (4 * (6 - 11)))"}, {"input": "5 5 10 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (11 - 10) = 1\n(25) - (1) = 24, left: ((5 * 5) - (11 - 10)) = 24\nreach 24! expression: ((5 * 5) - (11 - 10))"}, {"input": "5 5 10 11\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 10, 11\n(25) - (11) = 14, left: ((5 * 5) - 11) = 14, 10\n(10) + (14) = 24, left: (10 + ((5 * 5) - 11)) = 24\nreach 24! expression: (10 + ((5 * 5) - 11))"}, {"input": "5 5 10 11\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 10, 11\n(10) + (25) = 35, left: (10 + (5 * 5)) = 35, 11\n(35) - (11) = 24, left: ((10 + (5 * 5)) - 11) = 24\nreach 24! expression: ((10 + (5 * 5)) - 11)"}, {"input": "5 5 10 11\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 10, 11\n(10) / (1) = 10, left: (10 / (5 / 5)) = 10, 11\nroll back, left: (5 / 5) = 1, 10, 11\nroll back, left: 5 5 10 11\n(5) / (5) = 1, left: (5 / 5) = 1, 10, 11\nroll back, left: 5 5 10 11\n(5) * (5) = 25, left: (5 * 5) = 25, 10, 11\n(25) - (11) = 14, left: ((5 * 5) - 11) = 14, 10\n(10) + (14) = 24, left: (10 + ((5 * 5) - 11)) = 24\nreach 24! expression: (10 + ((5 * 5) - 11))"}, {"input": "2 4 12 10\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 4, 10\n(4) - (-10) = 14, left: (4 - (2 - 12)) = 14, 10\n(10) + (14) = 24, left: (10 + (4 - (2 - 12))) = 24\nreach 24! expression: (10 + (4 - (2 - 12)))"}, {"input": "2 4 12 10\n", "output": "(10) / (4) = 5/2, left: (10 / 4) = 5/2, 2, 12\n(5/2) - (2) = 1/2, left: ((10 / 4) - 2) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((10 / 4) - 2)) = 24\nreach 24! expression: (12 / ((10 / 4) - 2))"}, {"input": "2 4 12 10\n", "output": "(12) + (10) = 22, left: (12 + 10) = 22, 2, 4\n(4) + (22) = 26, left: (4 + (12 + 10)) = 26, 2\n(26) - (2) = 24, left: ((4 + (12 + 10)) - 2) = 24\nreach 24! expression: ((4 + (12 + 10)) - 2)"}, {"input": "2 4 12 10\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 2, 12\n(2) * (6) = 12, left: (2 * (10 - 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (10 - 4))) = 24\nreach 24! expression: (12 + (2 * (10 - 4)))"}, {"input": "2 4 12 10\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 2, 4\n(4) - (-2) = 6, left: (4 - (10 - 12)) = 6, 2\nroll back, left: (10 - 12) = -2, 2, 4\nroll back, left: 2 4 12 10\n(12) - (10) = 2, left: (12 - 10) = 2, 2, 4\nroll back, left: 2 4 12 10\n(12) + (10) = 22, left: (12 + 10) = 22, 2, 4\n(4) + (22) = 26, left: (4 + (12 + 10)) = 26, 2\n(26) - (2) = 24, left: ((4 + (12 + 10)) - 2) = 24\nreach 24! expression: ((4 + (12 + 10)) - 2)"}, {"input": "2 12 6 10\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 6, 10\n(10) - (6) = 4, left: (10 - (12 / 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (10 - (12 / 2))) = 24\nreach 24! expression: (6 * (10 - (12 / 2)))"}, {"input": "2 12 6 10\n", "output": "(2) + (12) = 14, left: (2 + 12) = 14, 6, 10\n(14) - (10) = 4, left: ((2 + 12) - 10) = 4, 6\n(6) * (4) = 24, left: (6 * ((2 + 12) - 10)) = 24\nreach 24! expression: (6 * ((2 + 12) - 10))"}, {"input": "2 12 6 10\n", "output": "(2) + (10) = 12, left: (2 + 10) = 12, 12, 6\n(12) / (6) = 2, left: ((2 + 10) / 6) = 2, 12\n(12) * (2) = 24, left: (12 * ((2 + 10) / 6)) = 24\nreach 24! expression: (12 * ((2 + 10) / 6))"}, {"input": "2 12 6 10\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 2, 6\n(2) - (-2) = 4, left: (2 - (10 - 12)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 - (10 - 12))) = 24\nreach 24! expression: (6 * (2 - (10 - 12)))"}, {"input": "2 12 6 10\n", "output": "(10) / (12) = 5/6, left: (10 / 12) = 5/6, 2, 6\n(6) - (2) = 4, left: (6 - 2) = 4, (10 / 12) = 5/6\nroll back, left: (10 / 12) = 5/6, 2, 6\nroll back, left: 2 12 6 10\n(12) + (10) = 22, left: (12 + 10) = 22, 2, 6\nroll back, left: 2 12 6 10\n(10) - (12) = -2, left: (10 - 12) = -2, 2, 6\n(2) - (-2) = 4, left: (2 - (10 - 12)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 - (10 - 12))) = 24\nreach 24! expression: (6 * (2 - (10 - 12)))"}, {"input": "2 12 6 10\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 6, 10\n(6) - (10) = -4, left: ((12 / 2) - 10) = -4, 6\n(6) - (-4) = 10, left: (6 - ((12 / 2) - 10)) = 10\nroll back, left: ((12 / 2) - 10) = -4, 6\nroll back, left: (12 / 2) = 6, 6, 10\n(10) - (6) = 4, left: (10 - (12 / 2)) = 4, 6\n(6) - (4) = 2, left: (6 - (10 - (12 / 2))) = 2\nroll back, left: (10 - (12 / 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (10 - (12 / 2))) = 24\nreach 24! expression: (6 * (10 - (12 / 2)))"}, {"input": "6 11 1 7\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 6, 7\n(11) - (7) = 4, left: ((11 / 1) - 7) = 4, 6\n(6) * (4) = 24, left: (6 * ((11 / 1) - 7)) = 24\nreach 24! expression: (6 * ((11 / 1) - 7))"}, {"input": "6 11 1 7\n", "output": "(11) + (7) = 18, left: (11 + 7) = 18, 6, 1\n(1) * (18) = 18, left: (1 * (11 + 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (1 * (11 + 7))) = 24\nreach 24! expression: (6 + (1 * (11 + 7)))"}, {"input": "6 11 1 7\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 11, 7\n(7) * (5) = 35, left: (7 * (6 - 1)) = 35, 11\n(35) - (11) = 24, left: ((7 * (6 - 1)) - 11) = 24\nreach 24! expression: ((7 * (6 - 1)) - 11)"}, {"input": "6 11 1 7\n", "output": "(11) + (7) = 18, left: (11 + 7) = 18, 6, 1\n(6) + (18) = 24, left: (6 + (11 + 7)) = 24, 1\n(1) * (24) = 24, left: (1 * (6 + (11 + 7))) = 24\nreach 24! expression: (1 * (6 + (11 + 7)))"}, {"input": "6 11 1 7\n", "output": "(1) * (7) = 7, left: (1 * 7) = 7, 6, 11\n(11) + (7) = 18, left: (11 + (1 * 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (11 + (1 * 7))) = 24\nreach 24! expression: (6 + (11 + (1 * 7)))"}, {"input": "6 11 1 7\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 6, 11\n(11) / (6) = 11/6, left: (11 / 6) = 11/6, (1 - 7) = -6\nroll back, left: (1 - 7) = -6, 6, 11\n(-6) / (11) = -6/11, left: ((1 - 7) / 11) = -6/11, 6\nroll back, left: (1 - 7) = -6, 6, 11\nroll back, left: 6 11 1 7\n(1) * (7) = 7, left: (1 * 7) = 7, 6, 11\n(11) + (7) = 18, left: (11 + (1 * 7)) = 18, 6\n(6) + (18) = 24, left: (6 + (11 + (1 * 7))) = 24\nreach 24! expression: (6 + (11 + (1 * 7)))"}, {"input": "6 11 1 7\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 6, 7\n(10) - (7) = 3, left: ((11 - 1) - 7) = 3, 6\n(3) - (6) = -3, left: (((11 - 1) - 7) - 6) = -3\nroll back, left: ((11 - 1) - 7) = 3, 6\nroll back, left: (11 - 1) = 10, 6, 7\nroll back, left: 6 11 1 7\n(11) / (1) = 11, left: (11 / 1) = 11, 6, 7\n(11) - (7) = 4, left: ((11 / 1) - 7) = 4, 6\n(6) * (4) = 24, left: (6 * ((11 / 1) - 7)) = 24\nreach 24! expression: (6 * ((11 / 1) - 7))"}, {"input": "6 11 1 7\n", "output": "(11) * (7) = 77, left: (11 * 7) = 77, 6, 1\n(6) - (77) = -71, left: (6 - (11 * 7)) = -71, 1\nroll back, left: (11 * 7) = 77, 6, 1\n(77) / (1) = 77, left: ((11 * 7) / 1) = 77, 6\nroll back, left: (11 * 7) = 77, 6, 1\nroll back, left: 6 11 1 7\n(11) + (7) = 18, left: (11 + 7) = 18, 6, 1\n(6) + (18) = 24, left: (6 + (11 + 7)) = 24, 1\n(1) * (24) = 24, left: (1 * (6 + (11 + 7))) = 24\nreach 24! expression: (1 * (6 + (11 + 7)))"}, {"input": "8 4 3 3\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (8 - 4) = 4\n(4) * (6) = 24, left: ((8 - 4) * (3 + 3)) = 24\nreach 24! expression: ((8 - 4) * (3 + 3))"}, {"input": "8 4 3 3\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 8, 3\n(8) * (3) = 24, left: (8 * 3) = 24, (4 - 3) = 1\n(1) * (24) = 24, left: ((4 - 3) * (8 * 3)) = 24\nreach 24! expression: ((4 - 3) * (8 * 3))"}, {"input": "8 4 3 3\n", "output": "(8) * (3) = 24, left: (8 * 3) = 24, 4, 3\n(4) - (3) = 1, left: (4 - 3) = 1, (8 * 3) = 24\n(24) / (1) = 24, left: ((8 * 3) / (4 - 3)) = 24\nreach 24! expression: ((8 * 3) / (4 - 3))"}, {"input": "8 4 3 3\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 3, 3\n(3) + (4) = 7, left: (3 + (8 - 4)) = 7, 3\n(3) - (7) = -4, left: (3 - (3 + (8 - 4))) = -4\nroll back, left: (3 + (8 - 4)) = 7, 3\nroll back, left: (8 - 4) = 4, 3, 3\n(3) / (4) = 3/4, left: (3 / (8 - 4)) = 3/4, 3\nroll back, left: (8 - 4) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (8 - 4) = 4\n(4) * (6) = 24, left: ((8 - 4) * (3 + 3)) = 24\nreach 24! expression: ((8 - 4) * (3 + 3))"}, {"input": "8 4 3 3\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 4, 3\nroll back, left: 8 4 3 3\n(8) * (3) = 24, left: (8 * 3) = 24, 4, 3\n(4) - (24) = -20, left: (4 - (8 * 3)) = -20, 3\nroll back, left: (8 * 3) = 24, 4, 3\n(3) - (4) = -1, left: (3 - 4) = -1, (8 * 3) = 24\nroll back, left: (8 * 3) = 24, 4, 3\n(4) - (3) = 1, left: (4 - 3) = 1, (8 * 3) = 24\n(24) / (1) = 24, left: ((8 * 3) / (4 - 3)) = 24\nreach 24! expression: ((8 * 3) / (4 - 3))"}, {"input": "8 4 3 3\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 8, 3\n(8) * (-1) = -8, left: (8 * (3 - 4)) = -8, 3\nroll back, left: (3 - 4) = -1, 8, 3\n(3) - (-1) = 4, left: (3 - (3 - 4)) = 4, 8\nroll back, left: (3 - 4) = -1, 8, 3\nroll back, left: 8 4 3 3\n(4) - (3) = 1, left: (4 - 3) = 1, 8, 3\n(8) * (3) = 24, left: (8 * 3) = 24, (4 - 3) = 1\n(1) * (24) = 24, left: ((4 - 3) * (8 * 3)) = 24\nreach 24! expression: ((4 - 3) * (8 * 3))"}, {"input": "8 4 3 3\n", "output": "(8) + (4) = 12, left: (8 + 4) = 12, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (8 + 4) = 12\n(12) - (6) = 6, left: ((8 + 4) - (3 + 3)) = 6\nroll back, left: (3 + 3) = 6, (8 + 4) = 12\nroll back, left: (8 + 4) = 12, 3, 3\nroll back, left: 8 4 3 3\n(8) - (4) = 4, left: (8 - 4) = 4, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (8 - 4) = 4\n(4) * (6) = 24, left: ((8 - 4) * (3 + 3)) = 24\nreach 24! expression: ((8 - 4) * (3 + 3))"}, {"input": "8 4 3 3\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 4, 3\nroll back, left: 8 4 3 3\n(8) + (3) = 11, left: (8 + 3) = 11, 4, 3\n(3) * (11) = 33, left: (3 * (8 + 3)) = 33, 4\nroll back, left: (8 + 3) = 11, 4, 3\nroll back, left: 8 4 3 3\n(8) * (3) = 24, left: (8 * 3) = 24, 4, 3\n(4) - (3) = 1, left: (4 - 3) = 1, (8 * 3) = 24\n(24) / (1) = 24, left: ((8 * 3) / (4 - 3)) = 24\nreach 24! expression: ((8 * 3) / (4 - 3))"}, {"input": "7 2 3 2\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 7, 2\n(7) + (5) = 12, left: (7 + (2 + 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (2 + 3))) = 24\nreach 24! expression: (2 * (7 + (2 + 3)))"}, {"input": "7 2 3 2\n", "output": "(7) + (2) = 9, left: (7 + 2) = 9, 3, 2\n(3) + (9) = 12, left: (3 + (7 + 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 + (7 + 2))) = 24\nreach 24! expression: (2 * (3 + (7 + 2)))"}, {"input": "7 2 3 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (2 / 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (2 / 2))) = 24\nreach 24! expression: (3 * (7 + (2 / 2)))"}, {"input": "7 2 3 2\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 3, 2\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, (7 / 2) = 7/2\n(2/3) - (7/2) = -17/6, left: ((2 / 3) - (7 / 2)) = -17/6\nroll back, left: (2 / 3) = 2/3, (7 / 2) = 7/2\nroll back, left: (7 / 2) = 7/2, 3, 2\nroll back, left: 7 2 3 2\n(7) + (2) = 9, left: (7 + 2) = 9, 3, 2\n(3) + (9) = 12, left: (3 + (7 + 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 + (7 + 2))) = 24\nreach 24! expression: (2 * (3 + (7 + 2)))"}, {"input": "7 2 3 2\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 7, 3\n(3) + (0) = 3, left: (3 + (2 - 2)) = 3, 7\nroll back, left: (2 - 2) = 0, 7, 3\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, (2 - 2) = 0\nroll back, left: (2 - 2) = 0, 7, 3\nroll back, left: 7 2 3 2\n(2) / (2) = 1, left: (2 / 2) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (2 / 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (2 / 2))) = 24\nreach 24! expression: (3 * (7 + (2 / 2)))"}, {"input": "7 2 3 2\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 7, 3\nroll back, left: 7 2 3 2\n(2) + (2) = 4, left: (2 + 2) = 4, 7, 3\nroll back, left: 7 2 3 2\n(2) - (2) = 0, left: (2 - 2) = 0, 7, 3\nroll back, left: 7 2 3 2\n(2) / (2) = 1, left: (2 / 2) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (2 / 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (2 / 2))) = 24\nreach 24! expression: (3 * (7 + (2 / 2)))"}, {"input": "7 2 3 2\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 7, 2\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, (2 + 3) = 5\nroll back, left: (2 + 3) = 5, 7, 2\n(7) + (2) = 9, left: (7 + 2) = 9, (2 + 3) = 5\nroll back, left: (2 + 3) = 5, 7, 2\n(5) / (7) = 5/7, left: ((2 + 3) / 7) = 5/7, 2\nroll back, left: (2 + 3) = 5, 7, 2\n(7) + (5) = 12, left: (7 + (2 + 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (2 + 3))) = 24\nreach 24! expression: (2 * (7 + (2 + 3)))"}, {"input": "7 2 3 2\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 7, 2\nroll back, left: 7 2 3 2\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 7, 2\n(2/3) / (7) = 2/21, left: ((2 / 3) / 7) = 2/21, 2\nroll back, left: (2 / 3) = 2/3, 7, 2\nroll back, left: 7 2 3 2\n(2) + (3) = 5, left: (2 + 3) = 5, 7, 2\n(7) + (5) = 12, left: (7 + (2 + 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (2 + 3))) = 24\nreach 24! expression: (2 * (7 + (2 + 3)))"}, {"input": "1 11 1 11\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (11 + 1) = 12\n(12) + (12) = 24, left: ((11 + 1) + (1 + 11)) = 24\nreach 24! expression: ((11 + 1) + (1 + 11))"}, {"input": "1 11 1 11\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 11, 1\n(11) + (12) = 23, left: (11 + (1 + 11)) = 23, 1\n(1) + (23) = 24, left: (1 + (11 + (1 + 11))) = 24\nreach 24! expression: (1 + (11 + (1 + 11)))"}, {"input": "1 11 1 11\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 1, 11\n(11) + (12) = 23, left: (11 + (1 + 11)) = 23, 1\n(1) + (23) = 24, left: (1 + (11 + (1 + 11))) = 24\nreach 24! expression: (1 + (11 + (1 + 11)))"}, {"input": "1 11 1 11\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 11, 11\n(11) + (2) = 13, left: (11 + (1 + 1)) = 13, 11\n(11) + (13) = 24, left: (11 + (11 + (1 + 1))) = 24\nreach 24! expression: (11 + (11 + (1 + 1)))"}, {"input": "1 11 1 11\n", "output": "(1) - (1) = 0, left: (1 - 1) = 0, 11, 11\n(11) * (0) = 0, left: (11 * (1 - 1)) = 0, 11\nroll back, left: (1 - 1) = 0, 11, 11\nroll back, left: 1 11 1 11\n(1) + (1) = 2, left: (1 + 1) = 2, 11, 11\n(2) - (11) = -9, left: ((1 + 1) - 11) = -9, 11\nroll back, left: (1 + 1) = 2, 11, 11\n(11) + (2) = 13, left: (11 + (1 + 1)) = 13, 11\n(11) + (13) = 24, left: (11 + (11 + (1 + 1))) = 24\nreach 24! expression: (11 + (11 + (1 + 1)))"}, {"input": "1 11 1 11\n", "output": "(1) / (1) = 1, left: (1 / 1) = 1, 11, 11\nroll back, left: 1 11 1 11\n(1) * (1) = 1, left: (1 * 1) = 1, 11, 11\nroll back, left: 1 11 1 11\n(1) - (1) = 0, left: (1 - 1) = 0, 11, 11\nroll back, left: 1 11 1 11\n(1) + (1) = 2, left: (1 + 1) = 2, 11, 11\n(11) + (2) = 13, left: (11 + (1 + 1)) = 13, 11\n(11) + (13) = 24, left: (11 + (11 + (1 + 1))) = 24\nreach 24! expression: (11 + (11 + (1 + 1)))"}, {"input": "9 6 7 2\n", "output": "(7) + (2) = 9, left: (7 + 2) = 9, 9, 6\n(6) + (9) = 15, left: (6 + (7 + 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 + (7 + 2))) = 24\nreach 24! expression: (9 + (6 + (7 + 2)))"}, {"input": "9 6 7 2\n", "output": "(7) - (2) = 5, left: (7 - 2) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (7 - 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (7 - 2))) = 24\nreach 24! expression: (6 * (9 - (7 - 2)))"}, {"input": "9 6 7 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 6, 7\n(6) * (7) = 42, left: (6 * 7) = 42, (9 * 2) = 18\n(42) - (18) = 24, left: ((6 * 7) - (9 * 2)) = 24\nreach 24! expression: ((6 * 7) - (9 * 2))"}, {"input": "9 6 7 2\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 7, 2\n(7) + (2) = 9, left: (7 + 2) = 9, (9 + 6) = 15\n(15) + (9) = 24, left: ((9 + 6) + (7 + 2)) = 24\nreach 24! expression: ((9 + 6) + (7 + 2))"}, {"input": "9 6 7 2\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 9, 6\n(9) * (7/2) = 63/2, left: (9 * (7 / 2)) = 63/2, 6\n(6) / (63/2) = 4/21, left: (6 / (9 * (7 / 2))) = 4/21\nroll back, left: (9 * (7 / 2)) = 63/2, 6\nroll back, left: (7 / 2) = 7/2, 9, 6\nroll back, left: 9 6 7 2\n(7) + (2) = 9, left: (7 + 2) = 9, 9, 6\n(6) + (9) = 15, left: (6 + (7 + 2)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 + (7 + 2))) = 24\nreach 24! expression: (9 + (6 + (7 + 2)))"}, {"input": "9 6 7 2\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 9, 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, (7 * 2) = 14\nroll back, left: (7 * 2) = 14, 9, 6\nroll back, left: 9 6 7 2\n(7) - (2) = 5, left: (7 - 2) = 5, 9, 6\n(9) / (5) = 9/5, left: (9 / (7 - 2)) = 9/5, 6\nroll back, left: (7 - 2) = 5, 9, 6\n(9) - (5) = 4, left: (9 - (7 - 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (7 - 2))) = 24\nreach 24! expression: (6 * (9 - (7 - 2)))"}, {"input": "9 6 7 2\n", "output": "(9) / (6) = 3/2, left: (9 / 6) = 3/2, 7, 2\n(7) - (2) = 5, left: (7 - 2) = 5, (9 / 6) = 3/2\nroll back, left: (9 / 6) = 3/2, 7, 2\n(2) + (3/2) = 7/2, left: (2 + (9 / 6)) = 7/2, 7\nroll back, left: (9 / 6) = 3/2, 7, 2\nroll back, left: 9 6 7 2\n(9) + (6) = 15, left: (9 + 6) = 15, 7, 2\n(7) + (2) = 9, left: (7 + 2) = 9, (9 + 6) = 15\n(15) + (9) = 24, left: ((9 + 6) + (7 + 2)) = 24\nreach 24! expression: ((9 + 6) + (7 + 2))"}, {"input": "9 6 7 2\n", "output": "(9) / (6) = 3/2, left: (9 / 6) = 3/2, 7, 2\n(7) / (3/2) = 14/3, left: (7 / (9 / 6)) = 14/3, 2\nroll back, left: (9 / 6) = 3/2, 7, 2\nroll back, left: 9 6 7 2\n(6) - (9) = -3, left: (6 - 9) = -3, 7, 2\nroll back, left: 9 6 7 2\n(9) + (6) = 15, left: (9 + 6) = 15, 7, 2\n(7) + (2) = 9, left: (7 + 2) = 9, (9 + 6) = 15\n(15) + (9) = 24, left: ((9 + 6) + (7 + 2)) = 24\nreach 24! expression: ((9 + 6) + (7 + 2))"}, {"input": "9 6 7 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 6, 7\n(6) / (18) = 1/3, left: (6 / (9 * 2)) = 1/3, 7\n(7) / (1/3) = 21, left: (7 / (6 / (9 * 2))) = 21\nroll back, left: (6 / (9 * 2)) = 1/3, 7\nroll back, left: (9 * 2) = 18, 6, 7\n(18) - (7) = 11, left: ((9 * 2) - 7) = 11, 6\nroll back, left: (9 * 2) = 18, 6, 7\n(6) * (7) = 42, left: (6 * 7) = 42, (9 * 2) = 18\n(42) - (18) = 24, left: ((6 * 7) - (9 * 2)) = 24\nreach 24! expression: ((6 * 7) - (9 * 2))"}, {"input": "13 2 7 2\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 7, 2\n(7) + (15) = 22, left: (7 + (13 + 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (7 + (13 + 2))) = 24\nreach 24! expression: (2 + (7 + (13 + 2)))"}, {"input": "13 2 7 2\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 13, 7\n(13) - (7) = 6, left: (13 - 7) = 6, (2 * 2) = 4\n(4) * (6) = 24, left: ((2 * 2) * (13 - 7)) = 24\nreach 24! expression: ((2 * 2) * (13 - 7))"}, {"input": "13 2 7 2\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 2, 7\n(7) + (15) = 22, left: (7 + (13 + 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (7 + (13 + 2))) = 24\nreach 24! expression: (2 + (7 + (13 + 2)))"}, {"input": "13 2 7 2\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 13, 7\n(7) + (4) = 11, left: (7 + (2 * 2)) = 11, 13\n(13) + (11) = 24, left: (13 + (7 + (2 * 2))) = 24\nreach 24! expression: (13 + (7 + (2 * 2)))"}, {"input": "13 2 7 2\n", "output": "(13) + (7) = 20, left: (13 + 7) = 20, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (13 + 7) = 20\n(20) + (4) = 24, left: ((13 + 7) + (2 * 2)) = 24\nreach 24! expression: ((13 + 7) + (2 * 2))"}, {"input": "13 2 7 2\n", "output": "(13) * (7) = 91, left: (13 * 7) = 91, 2, 2\n(2) * (91) = 182, left: (2 * (13 * 7)) = 182, 2\nroll back, left: (13 * 7) = 91, 2, 2\n(2) / (2) = 1, left: (2 / 2) = 1, (13 * 7) = 91\nroll back, left: (13 * 7) = 91, 2, 2\nroll back, left: 13 2 7 2\n(13) + (7) = 20, left: (13 + 7) = 20, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (13 + 7) = 20\n(20) + (4) = 24, left: ((13 + 7) + (2 * 2)) = 24\nreach 24! expression: ((13 + 7) + (2 * 2))"}, {"input": "13 2 7 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 13, 7\n(7) - (1) = 6, left: (7 - (2 / 2)) = 6, 13\nroll back, left: (2 / 2) = 1, 13, 7\nroll back, left: 13 2 7 2\n(2) - (2) = 0, left: (2 - 2) = 0, 13, 7\nroll back, left: 13 2 7 2\n(2) * (2) = 4, left: (2 * 2) = 4, 13, 7\n(7) + (4) = 11, left: (7 + (2 * 2)) = 11, 13\n(13) + (11) = 24, left: (13 + (7 + (2 * 2))) = 24\nreach 24! expression: (13 + (7 + (2 * 2)))"}, {"input": "13 2 7 2\n", "output": "(2) / (13) = 2/13, left: (2 / 13) = 2/13, 7, 2\nroll back, left: 13 2 7 2\n(13) - (2) = 11, left: (13 - 2) = 11, 7, 2\nroll back, left: 13 2 7 2\n(2) - (13) = -11, left: (2 - 13) = -11, 7, 2\nroll back, left: 13 2 7 2\n(13) + (2) = 15, left: (13 + 2) = 15, 7, 2\n(7) + (15) = 22, left: (7 + (13 + 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (7 + (13 + 2))) = 24\nreach 24! expression: (2 + (7 + (13 + 2)))"}, {"input": "13 2 7 2\n", "output": "(13) / (2) = 13/2, left: (13 / 2) = 13/2, 2, 7\nroll back, left: 13 2 7 2\n(2) / (13) = 2/13, left: (2 / 13) = 2/13, 2, 7\n(7) / (2/13) = 91/2, left: (7 / (2 / 13)) = 91/2, 2\nroll back, left: (2 / 13) = 2/13, 2, 7\nroll back, left: 13 2 7 2\n(13) + (2) = 15, left: (13 + 2) = 15, 2, 7\n(7) + (15) = 22, left: (7 + (13 + 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (7 + (13 + 2))) = 24\nreach 24! expression: (2 + (7 + (13 + 2)))"}, {"input": "13 2 7 2\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 13, 7\nroll back, left: 13 2 7 2\n(2) / (2) = 1, left: (2 / 2) = 1, 13, 7\nroll back, left: 13 2 7 2\n(2) - (2) = 0, left: (2 - 2) = 0, 13, 7\nroll back, left: 13 2 7 2\n(2) * (2) = 4, left: (2 * 2) = 4, 13, 7\n(13) - (7) = 6, left: (13 - 7) = 6, (2 * 2) = 4\n(4) * (6) = 24, left: ((2 * 2) * (13 - 7)) = 24\nreach 24! expression: ((2 * 2) * (13 - 7))"}, {"input": "9 7 10 4\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 7, 4\n(7) + (-1) = 6, left: (7 + (9 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (9 - 10))) = 24\nreach 24! expression: (4 * (7 + (9 - 10)))"}, {"input": "9 7 10 4\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (10 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (10 - 7))) = 24\nreach 24! expression: (4 * (9 - (10 - 7)))"}, {"input": "9 7 10 4\n", "output": "(9) + (7) = 16, left: (9 + 7) = 16, 10, 4\n(10) * (4) = 40, left: (10 * 4) = 40, (9 + 7) = 16\n(40) - (16) = 24, left: ((10 * 4) - (9 + 7)) = 24\nreach 24! expression: ((10 * 4) - (9 + 7))"}, {"input": "9 7 10 4\n", "output": "(10) * (4) = 40, left: (10 * 4) = 40, 9, 7\n(40) - (7) = 33, left: ((10 * 4) - 7) = 33, 9\n(33) - (9) = 24, left: (((10 * 4) - 7) - 9) = 24\nreach 24! expression: (((10 * 4) - 7) - 9)"}, {"input": "9 7 10 4\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 10, 4\n(10) * (-2) = -20, left: (10 * (7 - 9)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 * (7 - 9))) = 24\nreach 24! expression: (4 - (10 * (7 - 9)))"}, {"input": "9 7 10 4\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 9, 10\n(10) / (9) = 10/9, left: (10 / 9) = 10/9, (7 * 4) = 28\nroll back, left: (7 * 4) = 28, 9, 10\nroll back, left: 9 7 10 4\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, 9, 10\nroll back, left: 9 7 10 4\n(9) - (10) = -1, left: (9 - 10) = -1, 7, 4\n(7) + (-1) = 6, left: (7 + (9 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (9 - 10))) = 24\nreach 24! expression: (4 * (7 + (9 - 10)))"}, {"input": "9 7 10 4\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 9, 4\n(9) / (4) = 9/4, left: (9 / 4) = 9/4, (10 - 7) = 3\nroll back, left: (10 - 7) = 3, 9, 4\n(3) - (9) = -6, left: ((10 - 7) - 9) = -6, 4\n(-6) - (4) = -10, left: (((10 - 7) - 9) - 4) = -10\nroll back, left: ((10 - 7) - 9) = -6, 4\nroll back, left: (10 - 7) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (10 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (10 - 7))) = 24\nreach 24! expression: (4 * (9 - (10 - 7)))"}, {"input": "9 7 10 4\n", "output": "(9) * (7) = 63, left: (9 * 7) = 63, 10, 4\n(63) - (10) = 53, left: ((9 * 7) - 10) = 53, 4\nroll back, left: (9 * 7) = 63, 10, 4\n(63) - (4) = 59, left: ((9 * 7) - 4) = 59, 10\nroll back, left: (9 * 7) = 63, 10, 4\nroll back, left: 9 7 10 4\n(9) + (7) = 16, left: (9 + 7) = 16, 10, 4\n(10) * (4) = 40, left: (10 * 4) = 40, (9 + 7) = 16\n(40) - (16) = 24, left: ((10 * 4) - (9 + 7)) = 24\nreach 24! expression: ((10 * 4) - (9 + 7))"}, {"input": "9 7 10 4\n", "output": "(7) + (4) = 11, left: (7 + 4) = 11, 9, 10\nroll back, left: 9 7 10 4\n(7) - (4) = 3, left: (7 - 4) = 3, 9, 10\nroll back, left: 9 7 10 4\n(10) / (4) = 5/2, left: (10 / 4) = 5/2, 9, 7\nroll back, left: 9 7 10 4\n(10) * (4) = 40, left: (10 * 4) = 40, 9, 7\n(40) - (7) = 33, left: ((10 * 4) - 7) = 33, 9\n(33) - (9) = 24, left: (((10 * 4) - 7) - 9) = 24\nreach 24! expression: (((10 * 4) - 7) - 9)"}, {"input": "3 13 12 12\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 3, 12\n(3) - (1) = 2, left: (3 - (13 - 12)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (13 - 12))) = 24\nreach 24! expression: (12 * (3 - (13 - 12)))"}, {"input": "3 13 12 12\n", "output": "(3) + (12) = 15, left: (3 + 12) = 15, 13, 12\n(15) - (13) = 2, left: ((3 + 12) - 13) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 + 12) - 13)) = 24\nreach 24! expression: (12 * ((3 + 12) - 13))"}, {"input": "3 13 12 12\n", "output": "(12) - (13) = -1, left: (12 - 13) = -1, 3, 12\n(3) + (-1) = 2, left: (3 + (12 - 13)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 + (12 - 13))) = 24\nreach 24! expression: (12 * (3 + (12 - 13)))"}, {"input": "4 12 8 11\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 4, 12\n(4) * (3) = 12, left: (4 * (11 - 8)) = 12, 12\n(12) + (12) = 24, left: (12 + (4 * (11 - 8))) = 24\nreach 24! expression: (12 + (4 * (11 - 8)))"}, {"input": "4 12 8 11\n", "output": "(4) * (11) = 44, left: (4 * 11) = 44, 12, 8\n(12) + (8) = 20, left: (12 + 8) = 20, (4 * 11) = 44\n(44) - (20) = 24, left: ((4 * 11) - (12 + 8)) = 24\nreach 24! expression: ((4 * 11) - (12 + 8))"}, {"input": "4 12 8 11\n", "output": "(12) + (8) = 20, left: (12 + 8) = 20, 4, 11\n(4) * (11) = 44, left: (4 * 11) = 44, (12 + 8) = 20\n(44) - (20) = 24, left: ((4 * 11) - (12 + 8)) = 24\nreach 24! expression: ((4 * 11) - (12 + 8))"}, {"input": "2 3 13 8\n", "output": "(3) + (13) = 16, left: (3 + 13) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (3 + 13)) = 32, 8\n(32) - (8) = 24, left: ((2 * (3 + 13)) - 8) = 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "2 3 13 8\n", "output": "(13) / (8) = 13/8, left: (13 / 8) = 13/8, 2, 3\nroll back, left: 2 3 13 8\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, 13, 8\n(13) / (3/2) = 26/3, left: (13 / (3 / 2)) = 26/3, 8\nroll back, left: (3 / 2) = 3/2, 13, 8\nroll back, left: 2 3 13 8\n(3) + (13) = 16, left: (3 + 13) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (3 + 13)) = 32, 8\n(32) - (8) = 24, left: ((2 * (3 + 13)) - 8) = 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "2 3 13 8\n", "output": "(3) * (13) = 39, left: (3 * 13) = 39, 2, 8\nroll back, left: 2 3 13 8\n(3) - (13) = -10, left: (3 - 13) = -10, 2, 8\nroll back, left: 2 3 13 8\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, 2, 8\nroll back, left: 2 3 13 8\n(3) + (13) = 16, left: (3 + 13) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (3 + 13)) = 32, 8\n(32) - (8) = 24, left: ((2 * (3 + 13)) - 8) = 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "2 3 13 8\n", "output": "(3) / (13) = 3/13, left: (3 / 13) = 3/13, 2, 8\nroll back, left: 2 3 13 8\n(13) - (3) = 10, left: (13 - 3) = 10, 2, 8\n(10) / (8) = 5/4, left: ((13 - 3) / 8) = 5/4, 2\nroll back, left: (13 - 3) = 10, 2, 8\nroll back, left: 2 3 13 8\n(3) + (13) = 16, left: (3 + 13) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (3 + 13)) = 32, 8\n(32) - (8) = 24, left: ((2 * (3 + 13)) - 8) = 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "2 3 13 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 2, 13\nroll back, left: 2 3 13 8\n(8) - (2) = 6, left: (8 - 2) = 6, 3, 13\nroll back, left: 2 3 13 8\n(2) - (8) = -6, left: (2 - 8) = -6, 3, 13\nroll back, left: 2 3 13 8\n(3) + (13) = 16, left: (3 + 13) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (3 + 13)) = 32, 8\n(32) - (8) = 24, left: ((2 * (3 + 13)) - 8) = 24\nreach 24! expression: ((2 * (3 + 13)) - 8)"}, {"input": "8 8 1 6\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 8, 1\n(1) - (-2) = 3, left: (1 - (6 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (6 - 8))) = 24\nreach 24! expression: (8 * (1 - (6 - 8)))"}, {"input": "8 8 1 6\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 8, 1\n(4/3) - (1) = 1/3, left: ((8 / 6) - 1) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((8 / 6) - 1)) = 24\nreach 24! expression: (8 / ((8 / 6) - 1))"}, {"input": "8 8 1 6\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 8, 8\n(8) - (5) = 3, left: (8 - (6 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (8 - (6 - 1))) = 24\nreach 24! expression: (8 * (8 - (6 - 1)))"}, {"input": "8 8 1 6\n", "output": "(8) + (1) = 9, left: (8 + 1) = 9, 8, 6\n(9) - (6) = 3, left: ((8 + 1) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((8 + 1) - 6)) = 24\nreach 24! expression: (8 * ((8 + 1) - 6))"}, {"input": "8 8 1 6\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 8, 1\n(8) - (4/3) = 20/3, left: (8 - (8 / 6)) = 20/3, 1\nroll back, left: (8 / 6) = 4/3, 8, 1\n(8) / (4/3) = 6, left: (8 / (8 / 6)) = 6, 1\n(1) * (6) = 6, left: (1 * (8 / (8 / 6))) = 6\nroll back, left: (8 / (8 / 6)) = 6, 1\nroll back, left: (8 / 6) = 4/3, 8, 1\n(4/3) - (1) = 1/3, left: ((8 / 6) - 1) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((8 / 6) - 1)) = 24\nreach 24! expression: (8 / ((8 / 6) - 1))"}, {"input": "8 8 1 6\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 8, 8\n(5) / (8) = 5/8, left: ((6 - 1) / 8) = 5/8, 8\nroll back, left: (6 - 1) = 5, 8, 8\n(8) * (5) = 40, left: (8 * (6 - 1)) = 40, 8\n(8) / (40) = 1/5, left: (8 / (8 * (6 - 1))) = 1/5\nroll back, left: (8 * (6 - 1)) = 40, 8\nroll back, left: (6 - 1) = 5, 8, 8\n(8) - (5) = 3, left: (8 - (6 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (8 - (6 - 1))) = 24\nreach 24! expression: (8 * (8 - (6 - 1)))"}, {"input": "8 8 1 6\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 8, 6\n(6) * (7) = 42, left: (6 * (8 - 1)) = 42, 8\nroll back, left: (8 - 1) = 7, 8, 6\nroll back, left: 8 8 1 6\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, 8, 6\nroll back, left: 8 8 1 6\n(8) + (1) = 9, left: (8 + 1) = 9, 8, 6\n(9) - (6) = 3, left: ((8 + 1) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((8 + 1) - 6)) = 24\nreach 24! expression: (8 * ((8 + 1) - 6))"}, {"input": "8 8 1 6\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 8, 8\n(8) + (5) = 13, left: (8 + (6 - 1)) = 13, 8\nroll back, left: (6 - 1) = 5, 8, 8\n(8) * (5) = 40, left: (8 * (6 - 1)) = 40, 8\n(40) - (8) = 32, left: ((8 * (6 - 1)) - 8) = 32\nroll back, left: (8 * (6 - 1)) = 40, 8\nroll back, left: (6 - 1) = 5, 8, 8\n(8) - (5) = 3, left: (8 - (6 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (8 - (6 - 1))) = 24\nreach 24! expression: (8 * (8 - (6 - 1)))"}, {"input": "8 8 1 6\n", "output": "(8) + (6) = 14, left: (8 + 6) = 14, 8, 1\n(1) * (14) = 14, left: (1 * (8 + 6)) = 14, 8\nroll back, left: (8 + 6) = 14, 8, 1\n(14) / (8) = 7/4, left: ((8 + 6) / 8) = 7/4, 1\nroll back, left: (8 + 6) = 14, 8, 1\nroll back, left: 8 8 1 6\n(6) - (8) = -2, left: (6 - 8) = -2, 8, 1\n(1) - (-2) = 3, left: (1 - (6 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (6 - 8))) = 24\nreach 24! expression: (8 * (1 - (6 - 8)))"}, {"input": "12 9 12 9\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 12, 9\n(9) * (4/3) = 12, left: (9 * (12 / 9)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 * (12 / 9))) = 24\nreach 24! expression: (12 + (9 * (12 / 9)))"}, {"input": "12 9 12 9\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 12, 9\n(9) + (3) = 12, left: (9 + (12 - 9)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 + (12 - 9))) = 24\nreach 24! expression: (12 + (9 + (12 - 9)))"}, {"input": "12 9 12 9\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 12, 12\n(12) + (12) = 24, left: (12 + 12) = 24, (9 - 9) = 0\n(24) - (0) = 24, left: ((12 + 12) - (9 - 9)) = 24\nreach 24! expression: ((12 + 12) - (9 - 9))"}, {"input": "12 9 12 9\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 12, 9\n(9) / (3/4) = 12, left: (9 / (9 / 12)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 / (9 / 12))) = 24\nreach 24! expression: (12 + (9 / (9 / 12)))"}, {"input": "12 9 12 9\n", "output": "(12) + (9) = 21, left: (12 + 9) = 21, 9, 12\n(12) + (21) = 33, left: (12 + (12 + 9)) = 33, 9\n(33) - (9) = 24, left: ((12 + (12 + 9)) - 9) = 24\nreach 24! expression: ((12 + (12 + 9)) - 9)"}, {"input": "5 6 6 8\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (5 - 8)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (5 - 8))) = 24\nreach 24! expression: (6 - (6 * (5 - 8)))"}, {"input": "5 6 6 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (8 - 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (8 - 5))) = 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 6, 8\n(5/6) / (8) = 5/48, left: ((5 / 6) / 8) = 5/48, 6\nroll back, left: (5 / 6) = 5/6, 6, 8\nroll back, left: 5 6 6 8\n(5) + (8) = 13, left: (5 + 8) = 13, 6, 6\nroll back, left: 5 6 6 8\n(8) - (5) = 3, left: (8 - 5) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (8 - 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (8 - 5))) = 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 6, 8\nroll back, left: 5 6 6 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 6, 6\nroll back, left: 5 6 6 8\n(8) / (5) = 8/5, left: (8 / 5) = 8/5, 6, 6\nroll back, left: 5 6 6 8\n(8) - (5) = 3, left: (8 - 5) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (8 - 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (8 - 5))) = 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 6, 6\nroll back, left: 5 6 6 8\n(5) + (8) = 13, left: (5 + 8) = 13, 6, 6\n(6) / (6) = 1, left: (6 / 6) = 1, (5 + 8) = 13\nroll back, left: (5 + 8) = 13, 6, 6\nroll back, left: 5 6 6 8\n(8) - (5) = 3, left: (8 - 5) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (8 - 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (8 - 5))) = 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 5, 8\nroll back, left: 5 6 6 8\n(6) * (6) = 36, left: (6 * 6) = 36, 5, 8\nroll back, left: 5 6 6 8\n(6) + (6) = 12, left: (6 + 6) = 12, 5, 8\nroll back, left: 5 6 6 8\n(8) - (5) = 3, left: (8 - 5) = 3, 6, 6\n(6) * (3) = 18, left: (6 * (8 - 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (6 * (8 - 5))) = 24\nreach 24! expression: (6 + (6 * (8 - 5)))"}, {"input": "5 6 6 8\n", "output": "(5) + (6) = 11, left: (5 + 6) = 11, 6, 8\nroll back, left: 5 6 6 8\n(6) - (6) = 0, left: (6 - 6) = 0, 5, 8\nroll back, left: 5 6 6 8\n(8) / (5) = 8/5, left: (8 / 5) = 8/5, 6, 6\nroll back, left: 5 6 6 8\n(5) - (8) = -3, left: (5 - 8) = -3, 6, 6\n(6) * (-3) = -18, left: (6 * (5 - 8)) = -18, 6\n(6) - (-18) = 24, left: (6 - (6 * (5 - 8))) = 24\nreach 24! expression: (6 - (6 * (5 - 8)))"}, {"input": "8 6 10 4\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 8, 4\n(4) * (-4) = -16, left: (4 * (6 - 10)) = -16, 8\n(8) - (-16) = 24, left: (8 - (4 * (6 - 10))) = 24\nreach 24! expression: (8 - (4 * (6 - 10)))"}, {"input": "8 6 10 4\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (10 - 6)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (10 - 6))) = 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "8 6 10 4\n", "output": "(10) / (4) = 5/2, left: (10 / 4) = 5/2, 8, 6\nroll back, left: 8 6 10 4\n(10) * (4) = 40, left: (10 * 4) = 40, 8, 6\n(6) + (40) = 46, left: (6 + (10 * 4)) = 46, 8\nroll back, left: (10 * 4) = 40, 8, 6\nroll back, left: 8 6 10 4\n(10) - (6) = 4, left: (10 - 6) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (10 - 6)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (10 - 6))) = 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "8 6 10 4\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 6, 10\nroll back, left: 8 6 10 4\n(4) - (10) = -6, left: (4 - 10) = -6, 8, 6\nroll back, left: 8 6 10 4\n(6) + (4) = 10, left: (6 + 4) = 10, 8, 10\nroll back, left: 8 6 10 4\n(10) - (6) = 4, left: (10 - 6) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (10 - 6)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (10 - 6))) = 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "8 6 10 4\n", "output": "(10) * (4) = 40, left: (10 * 4) = 40, 8, 6\nroll back, left: 8 6 10 4\n(10) - (4) = 6, left: (10 - 4) = 6, 8, 6\n(8) * (6) = 48, left: (8 * (10 - 4)) = 48, 6\nroll back, left: (10 - 4) = 6, 8, 6\nroll back, left: 8 6 10 4\n(6) - (10) = -4, left: (6 - 10) = -4, 8, 4\n(4) * (-4) = -16, left: (4 * (6 - 10)) = -16, 8\n(8) - (-16) = 24, left: (8 - (4 * (6 - 10))) = 24\nreach 24! expression: (8 - (4 * (6 - 10)))"}, {"input": "8 6 10 4\n", "output": "(6) / (10) = 3/5, left: (6 / 10) = 3/5, 8, 4\n(4) - (3/5) = 17/5, left: (4 - (6 / 10)) = 17/5, 8\nroll back, left: (6 / 10) = 3/5, 8, 4\nroll back, left: 8 6 10 4\n(10) - (6) = 4, left: (10 - 6) = 4, 8, 4\n(4) - (8) = -4, left: ((10 - 6) - 8) = -4, 4\nroll back, left: (10 - 6) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (10 - 6)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (10 - 6))) = 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "8 6 10 4\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 8, 10\nroll back, left: 8 6 10 4\n(6) * (4) = 24, left: (6 * 4) = 24, 8, 10\nroll back, left: 8 6 10 4\n(6) + (4) = 10, left: (6 + 4) = 10, 8, 10\nroll back, left: 8 6 10 4\n(10) - (6) = 4, left: (10 - 6) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (10 - 6)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (10 - 6))) = 24\nreach 24! expression: (8 + (4 * (10 - 6)))"}, {"input": "6 4 8 2\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 6, 8\n(2) / (8) = 1/4, left: ((4 - 2) / 8) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((4 - 2) / 8)) = 24\nreach 24! expression: (6 / ((4 - 2) / 8))"}, {"input": "6 4 8 2\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 6, 4\n(16) / (4) = 4, left: ((8 * 2) / 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((8 * 2) / 4)) = 24\nreach 24! expression: (6 * ((8 * 2) / 4))"}, {"input": "6 4 8 2\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 6, 8\n(6) / (2) = 3, left: (6 / (4 - 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 / (4 - 2))) = 24\nreach 24! expression: (8 * (6 / (4 - 2)))"}, {"input": "6 4 8 2\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (6 / 4) = 3/2\n(3/2) * (16) = 24, left: ((6 / 4) * (8 * 2)) = 24\nreach 24! expression: ((6 / 4) * (8 * 2))"}, {"input": "6 4 8 2\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (4 / 6) = 2/3\n(16) / (2/3) = 24, left: ((8 * 2) / (4 / 6)) = 24\nreach 24! expression: ((8 * 2) / (4 / 6))"}, {"input": "6 4 8 2\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 6, 4\n(6) * (4) = 24, left: (6 * (8 / 2)) = 24, 4\nroll back, left: (8 / 2) = 4, 6, 4\n(6) - (4) = 2, left: (6 - 4) = 2, (8 / 2) = 4\nroll back, left: (8 / 2) = 4, 6, 4\nroll back, left: 6 4 8 2\n(8) * (2) = 16, left: (8 * 2) = 16, 6, 4\n(16) / (4) = 4, left: ((8 * 2) / 4) = 4, 6\n(6) * (4) = 24, left: (6 * ((8 * 2) / 4)) = 24\nreach 24! expression: (6 * ((8 * 2) / 4))"}, {"input": "6 4 8 2\n", "output": "(4) - (6) = -2, left: (4 - 6) = -2, 8, 2\n(8) + (-2) = 6, left: (8 + (4 - 6)) = 6, 2\nroll back, left: (4 - 6) = -2, 8, 2\nroll back, left: 6 4 8 2\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, 8, 2\n(8) - (2) = 6, left: (8 - 2) = 6, (4 / 6) = 2/3\nroll back, left: (4 / 6) = 2/3, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (4 / 6) = 2/3\n(16) / (2/3) = 24, left: ((8 * 2) / (4 / 6)) = 24\nreach 24! expression: ((8 * 2) / (4 / 6))"}, {"input": "6 4 8 2\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 6, 8\n(2) - (8) = -6, left: ((4 - 2) - 8) = -6, 6\nroll back, left: (4 - 2) = 2, 6, 8\n(8) + (2) = 10, left: (8 + (4 - 2)) = 10, 6\n(6) * (10) = 60, left: (6 * (8 + (4 - 2))) = 60\nroll back, left: (8 + (4 - 2)) = 10, 6\nroll back, left: (4 - 2) = 2, 6, 8\n(2) / (8) = 1/4, left: ((4 - 2) / 8) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((4 - 2) / 8)) = 24\nreach 24! expression: (6 / ((4 - 2) / 8))"}, {"input": "6 4 8 2\n", "output": "(6) * (4) = 24, left: (6 * 4) = 24, 8, 2\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, (6 * 4) = 24\nroll back, left: (6 * 4) = 24, 8, 2\n(2) * (24) = 48, left: (2 * (6 * 4)) = 48, 8\nroll back, left: (6 * 4) = 24, 8, 2\nroll back, left: 6 4 8 2\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (6 / 4) = 3/2\n(3/2) * (16) = 24, left: ((6 / 4) * (8 * 2)) = 24\nreach 24! expression: ((6 / 4) * (8 * 2))"}, {"input": "6 4 8 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 6, 8\n(6) + (6) = 12, left: (6 + (4 + 2)) = 12, 8\nroll back, left: (4 + 2) = 6, 6, 8\nroll back, left: 6 4 8 2\n(2) - (4) = -2, left: (2 - 4) = -2, 6, 8\nroll back, left: 6 4 8 2\n(4) - (2) = 2, left: (4 - 2) = 2, 6, 8\n(6) / (2) = 3, left: (6 / (4 - 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 / (4 - 2))) = 24\nreach 24! expression: (8 * (6 / (4 - 2)))"}, {"input": "5 2 2 12\n", "output": "(2) + (12) = 14, left: (2 + 12) = 14, 5, 2\n(5) * (2) = 10, left: (5 * 2) = 10, (2 + 12) = 14\n(14) + (10) = 24, left: ((2 + 12) + (5 * 2)) = 24\nreach 24! expression: ((2 + 12) + (5 * 2))"}, {"input": "5 2 2 12\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 2, 12\n(5/2) - (2) = 1/2, left: ((5 / 2) - 2) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((5 / 2) - 2)) = 24\nreach 24! expression: (12 / ((5 / 2) - 2))"}, {"input": "5 2 2 12\n", "output": "(5) * (2) = 10, left: (5 * 2) = 10, 2, 12\n(2) + (10) = 12, left: (2 + (5 * 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 + (5 * 2))) = 24\nreach 24! expression: (12 + (2 + (5 * 2)))"}, {"input": "5 2 2 12\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 5, 12\nroll back, left: 5 2 2 12\n(2) + (2) = 4, left: (2 + 2) = 4, 5, 12\nroll back, left: 5 2 2 12\n(2) - (2) = 0, left: (2 - 2) = 0, 5, 12\nroll back, left: 5 2 2 12\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 2, 12\n(5/2) - (2) = 1/2, left: ((5 / 2) - 2) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((5 / 2) - 2)) = 24\nreach 24! expression: (12 / ((5 / 2) - 2))"}, {"input": "5 2 2 12\n", "output": "(5) + (2) = 7, left: (5 + 2) = 7, 2, 12\n(2) * (12) = 24, left: (2 * 12) = 24, (5 + 2) = 7\nroll back, left: (5 + 2) = 7, 2, 12\nroll back, left: 5 2 2 12\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 2, 12\nroll back, left: 5 2 2 12\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 2, 12\n(5/2) - (2) = 1/2, left: ((5 / 2) - 2) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((5 / 2) - 2)) = 24\nreach 24! expression: (12 / ((5 / 2) - 2))"}, {"input": "5 2 2 12\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 5, 2\nroll back, left: 5 2 2 12\n(2) * (12) = 24, left: (2 * 12) = 24, 5, 2\n(5) + (24) = 29, left: (5 + (2 * 12)) = 29, 2\nroll back, left: (2 * 12) = 24, 5, 2\nroll back, left: 5 2 2 12\n(2) + (12) = 14, left: (2 + 12) = 14, 5, 2\n(5) * (2) = 10, left: (5 * 2) = 10, (2 + 12) = 14\n(14) + (10) = 24, left: ((2 + 12) + (5 * 2)) = 24\nreach 24! expression: ((2 + 12) + (5 * 2))"}, {"input": "13 2 2 13\n", "output": "(2) / (13) = 2/13, left: (2 / 13) = 2/13, 2, 13\n(2) - (2/13) = 24/13, left: (2 - (2 / 13)) = 24/13, 13\n(13) * (24/13) = 24, left: (13 * (2 - (2 / 13))) = 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "13 2 2 13\n", "output": "(2) / (13) = 2/13, left: (2 / 13) = 2/13, 13, 2\n(2) - (2/13) = 24/13, left: (2 - (2 / 13)) = 24/13, 13\n(13) * (24/13) = 24, left: (13 * (2 - (2 / 13))) = 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "13 2 2 13\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 13, 13\nroll back, left: 13 2 2 13\n(2) + (2) = 4, left: (2 + 2) = 4, 13, 13\nroll back, left: 13 2 2 13\n(13) + (2) = 15, left: (13 + 2) = 15, 2, 13\nroll back, left: 13 2 2 13\n(2) / (13) = 2/13, left: (2 / 13) = 2/13, 2, 13\n(2) - (2/13) = 24/13, left: (2 - (2 / 13)) = 24/13, 13\n(13) * (24/13) = 24, left: (13 * (2 - (2 / 13))) = 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "13 2 2 13\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 13, 2\nroll back, left: 13 2 2 13\n(2) - (13) = -11, left: (2 - 13) = -11, 13, 2\nroll back, left: 13 2 2 13\n(2) * (13) = 26, left: (2 * 13) = 26, 13, 2\nroll back, left: 13 2 2 13\n(2) / (13) = 2/13, left: (2 / 13) = 2/13, 13, 2\n(2) - (2/13) = 24/13, left: (2 - (2 / 13)) = 24/13, 13\n(13) * (24/13) = 24, left: (13 * (2 - (2 / 13))) = 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "13 2 2 13\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 13, 2\nroll back, left: 13 2 2 13\n(13) - (2) = 11, left: (13 - 2) = 11, 13, 2\nroll back, left: 13 2 2 13\n(2) + (13) = 15, left: (2 + 13) = 15, 13, 2\nroll back, left: 13 2 2 13\n(2) / (13) = 2/13, left: (2 / 13) = 2/13, 13, 2\n(2) - (2/13) = 24/13, left: (2 - (2 / 13)) = 24/13, 13\n(13) * (24/13) = 24, left: (13 * (2 - (2 / 13))) = 24\nreach 24! expression: (13 * (2 - (2 / 13)))"}, {"input": "1 12 6 7\n", "output": "(1) - (12) = -11, left: (1 - 12) = -11, 6, 7\n(6) - (-11) = 17, left: (6 - (1 - 12)) = 17, 7\n(7) + (17) = 24, left: (7 + (6 - (1 - 12))) = 24\nreach 24! expression: (7 + (6 - (1 - 12)))"}, {"input": "1 12 6 7\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 12, 7\n(7) + (-5) = 2, left: (7 + (1 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (7 + (1 - 6))) = 24\nreach 24! expression: (12 * (7 + (1 - 6)))"}, {"input": "1 12 6 7\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 12, 7\n(12) + (7) = 19, left: (12 + 7) = 19, (6 - 1) = 5\n(5) + (19) = 24, left: ((6 - 1) + (12 + 7)) = 24\nreach 24! expression: ((6 - 1) + (12 + 7))"}, {"input": "1 12 6 7\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 6, 7\n(7) + (11) = 18, left: (7 + (12 - 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (7 + (12 - 1))) = 24\nreach 24! expression: (6 + (7 + (12 - 1)))"}, {"input": "1 12 6 7\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 12, 7\n(7) - (5) = 2, left: (7 - (6 - 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (7 - (6 - 1))) = 24\nreach 24! expression: (12 * (7 - (6 - 1)))"}, {"input": "1 12 6 7\n", "output": "(1) * (12) = 12, left: (1 * 12) = 12, 6, 7\n(6) * (7) = 42, left: (6 * 7) = 42, (1 * 12) = 12\nroll back, left: (1 * 12) = 12, 6, 7\nroll back, left: 1 12 6 7\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, 6, 7\nroll back, left: 1 12 6 7\n(1) - (12) = -11, left: (1 - 12) = -11, 6, 7\n(6) - (-11) = 17, left: (6 - (1 - 12)) = 17, 7\n(7) + (17) = 24, left: (7 + (6 - (1 - 12))) = 24\nreach 24! expression: (7 + (6 - (1 - 12)))"}, {"input": "1 12 6 7\n", "output": "(1) * (6) = 6, left: (1 * 6) = 6, 12, 7\n(6) - (12) = -6, left: ((1 * 6) - 12) = -6, 7\nroll back, left: (1 * 6) = 6, 12, 7\n(7) * (6) = 42, left: (7 * (1 * 6)) = 42, 12\nroll back, left: (1 * 6) = 6, 12, 7\nroll back, left: 1 12 6 7\n(6) - (1) = 5, left: (6 - 1) = 5, 12, 7\n(7) - (5) = 2, left: (7 - (6 - 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (7 - (6 - 1))) = 24\nreach 24! expression: (12 * (7 - (6 - 1)))"}, {"input": "1 12 6 7\n", "output": "(1) * (6) = 6, left: (1 * 6) = 6, 12, 7\n(7) + (6) = 13, left: (7 + (1 * 6)) = 13, 12\nroll back, left: (1 * 6) = 6, 12, 7\n(7) / (6) = 7/6, left: (7 / (1 * 6)) = 7/6, 12\nroll back, left: (1 * 6) = 6, 12, 7\nroll back, left: 1 12 6 7\n(1) - (6) = -5, left: (1 - 6) = -5, 12, 7\n(7) + (-5) = 2, left: (7 + (1 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (7 + (1 - 6))) = 24\nreach 24! expression: (12 * (7 + (1 - 6)))"}, {"input": "1 12 6 7\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 6, 7\n(6) / (12) = 1/2, left: (6 / (12 / 1)) = 1/2, 7\nroll back, left: (12 / 1) = 12, 6, 7\nroll back, left: 1 12 6 7\n(12) - (1) = 11, left: (12 - 1) = 11, 6, 7\n(11) / (7) = 11/7, left: ((12 - 1) / 7) = 11/7, 6\nroll back, left: (12 - 1) = 11, 6, 7\n(7) + (11) = 18, left: (7 + (12 - 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (7 + (12 - 1))) = 24\nreach 24! expression: (6 + (7 + (12 - 1)))"}, {"input": "2 9 11 6\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 2, 6\n(2) * (2) = 4, left: (2 * (11 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 * (11 - 9))) = 24\nreach 24! expression: (6 * (2 * (11 - 9)))"}, {"input": "2 9 11 6\n", "output": "(2) - (11) = -9, left: (2 - 11) = -9, 9, 6\n(6) - (-9) = 15, left: (6 - (2 - 11)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 - (2 - 11))) = 24\nreach 24! expression: (9 + (6 - (2 - 11)))"}, {"input": "2 9 11 6\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 2, 11\n(11) + (15) = 26, left: (11 + (9 + 6)) = 26, 2\n(26) - (2) = 24, left: ((11 + (9 + 6)) - 2) = 24\nreach 24! expression: ((11 + (9 + 6)) - 2)"}, {"input": "2 9 11 6\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 11, 6\n(6) + (7) = 13, left: (6 + (9 - 2)) = 13, 11\n(11) + (13) = 24, left: (11 + (6 + (9 - 2))) = 24\nreach 24! expression: (11 + (6 + (9 - 2)))"}, {"input": "2 9 11 6\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 11, 6\n(11) - (-7) = 18, left: (11 - (2 - 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (11 - (2 - 9))) = 24\nreach 24! expression: (6 + (11 - (2 - 9)))"}, {"input": "2 9 11 6\n", "output": "(9) / (2) = 9/2, left: (9 / 2) = 9/2, 11, 6\n(6) / (9/2) = 4/3, left: (6 / (9 / 2)) = 4/3, 11\nroll back, left: (9 / 2) = 9/2, 11, 6\n(6) * (9/2) = 27, left: (6 * (9 / 2)) = 27, 11\nroll back, left: (9 / 2) = 9/2, 11, 6\nroll back, left: 2 9 11 6\n(2) - (9) = -7, left: (2 - 9) = -7, 11, 6\n(11) - (-7) = 18, left: (11 - (2 - 9)) = 18, 6\n(6) + (18) = 24, left: (6 + (11 - (2 - 9))) = 24\nreach 24! expression: (6 + (11 - (2 - 9)))"}, {"input": "2 9 11 6\n", "output": "(2) / (9) = 2/9, left: (2 / 9) = 2/9, 11, 6\n(6) - (2/9) = 52/9, left: (6 - (2 / 9)) = 52/9, 11\nroll back, left: (2 / 9) = 2/9, 11, 6\nroll back, left: 2 9 11 6\n(2) * (9) = 18, left: (2 * 9) = 18, 11, 6\nroll back, left: 2 9 11 6\n(9) - (2) = 7, left: (9 - 2) = 7, 11, 6\n(6) + (7) = 13, left: (6 + (9 - 2)) = 13, 11\n(11) + (13) = 24, left: (11 + (6 + (9 - 2))) = 24\nreach 24! expression: (11 + (6 + (9 - 2)))"}, {"input": "2 9 11 6\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 2, 6\n(2) / (2) = 1, left: ((11 - 9) / 2) = 1, 6\n(6) / (1) = 6, left: (6 / ((11 - 9) / 2)) = 6\nroll back, left: ((11 - 9) / 2) = 1, 6\n(6) - (1) = 5, left: (6 - ((11 - 9) / 2)) = 5\nroll back, left: ((11 - 9) / 2) = 1, 6\nroll back, left: (11 - 9) = 2, 2, 6\n(2) * (2) = 4, left: (2 * (11 - 9)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 * (11 - 9))) = 24\nreach 24! expression: (6 * (2 * (11 - 9)))"}, {"input": "2 9 11 6\n", "output": "(2) * (11) = 22, left: (2 * 11) = 22, 9, 6\n(9) - (6) = 3, left: (9 - 6) = 3, (2 * 11) = 22\nroll back, left: (2 * 11) = 22, 9, 6\n(9) / (22) = 9/22, left: (9 / (2 * 11)) = 9/22, 6\nroll back, left: (2 * 11) = 22, 9, 6\nroll back, left: 2 9 11 6\n(2) - (11) = -9, left: (2 - 11) = -9, 9, 6\n(6) - (-9) = 15, left: (6 - (2 - 11)) = 15, 9\n(9) + (15) = 24, left: (9 + (6 - (2 - 11))) = 24\nreach 24! expression: (9 + (6 - (2 - 11)))"}, {"input": "8 4 1 4\n", "output": "(1) / (4) = 1/4, left: (1 / 4) = 1/4, 8, 4\n(4) / (1/4) = 16, left: (4 / (1 / 4)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 / (1 / 4))) = 24\nreach 24! expression: (8 + (4 / (1 / 4)))"}, {"input": "8 4 1 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 8, 1\n(16) / (1) = 16, left: ((4 * 4) / 1) = 16, 8\n(8) + (16) = 24, left: (8 + ((4 * 4) / 1)) = 24\nreach 24! expression: (8 + ((4 * 4) / 1))"}, {"input": "8 4 1 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 8, 1\n(8) + (16) = 24, left: (8 + (4 * 4)) = 24, 1\n(1) * (24) = 24, left: (1 * (8 + (4 * 4))) = 24\nreach 24! expression: (1 * (8 + (4 * 4)))"}, {"input": "8 4 1 4\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (4 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (4 / 1))) = 24\nreach 24! expression: (8 + (4 * (4 / 1)))"}, {"input": "8 4 1 4\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 8, 1\n(8) - (0) = 8, left: (8 - (4 - 4)) = 8, 1\nroll back, left: (4 - 4) = 0, 8, 1\nroll back, left: 8 4 1 4\n(4) / (4) = 1, left: (4 / 4) = 1, 8, 1\nroll back, left: 8 4 1 4\n(4) * (4) = 16, left: (4 * 4) = 16, 8, 1\n(8) + (16) = 24, left: (8 + (4 * 4)) = 24, 1\n(1) * (24) = 24, left: (1 * (8 + (4 * 4))) = 24\nreach 24! expression: (1 * (8 + (4 * 4)))"}, {"input": "8 4 1 4\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 1, 4\nroll back, left: 8 4 1 4\n(4) / (4) = 1, left: (4 / 4) = 1, 8, 1\n(1) / (8) = 1/8, left: ((4 / 4) / 8) = 1/8, 1\nroll back, left: (4 / 4) = 1, 8, 1\nroll back, left: 8 4 1 4\n(4) * (4) = 16, left: (4 * 4) = 16, 8, 1\n(16) / (1) = 16, left: ((4 * 4) / 1) = 16, 8\n(8) + (16) = 24, left: (8 + ((4 * 4) / 1)) = 24\nreach 24! expression: (8 + ((4 * 4) / 1))"}, {"input": "8 4 1 4\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (4 / 1)) = 16, 8\n(16) / (8) = 2, left: ((4 * (4 / 1)) / 8) = 2\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) * (16) = 128, left: (8 * (4 * (4 / 1))) = 128\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) - (16) = -8, left: (8 - (4 * (4 / 1))) = -8\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (4 / 1))) = 24\nreach 24! expression: (8 + (4 * (4 / 1)))"}, {"input": "8 4 1 4\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 1, 4\nroll back, left: 8 4 1 4\n(8) + (4) = 12, left: (8 + 4) = 12, 1, 4\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, (8 + 4) = 12\nroll back, left: (8 + 4) = 12, 1, 4\nroll back, left: 8 4 1 4\n(1) / (4) = 1/4, left: (1 / 4) = 1/4, 8, 4\n(4) / (1/4) = 16, left: (4 / (1 / 4)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 / (1 / 4))) = 24\nreach 24! expression: (8 + (4 / (1 / 4)))"}, {"input": "8 4 1 4\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (4 / 1)) = 16, 8\n(16) / (8) = 2, left: ((4 * (4 / 1)) / 8) = 2\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) * (16) = 128, left: (8 * (4 * (4 / 1))) = 128\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) - (16) = -8, left: (8 - (4 * (4 / 1))) = -8\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (4 / 1))) = 24\nreach 24! expression: (8 + (4 * (4 / 1)))"}, {"input": "8 4 1 4\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (4 / 1)) = 16, 8\n(16) / (8) = 2, left: ((4 * (4 / 1)) / 8) = 2\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) * (16) = 128, left: (8 * (4 * (4 / 1))) = 128\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) - (16) = -8, left: (8 - (4 * (4 / 1))) = -8\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (4 / 1))) = 24\nreach 24! expression: (8 + (4 * (4 / 1)))"}, {"input": "8 4 1 4\n", "output": "(4) / (1) = 4, left: (4 / 1) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (4 / 1)) = 16, 8\n(16) / (8) = 2, left: ((4 * (4 / 1)) / 8) = 2\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) * (16) = 128, left: (8 * (4 * (4 / 1))) = 128\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) - (16) = -8, left: (8 - (4 * (4 / 1))) = -8\nroll back, left: (4 * (4 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (4 / 1))) = 24\nreach 24! expression: (8 + (4 * (4 / 1)))"}, {"input": "10 12 10 11\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 12, 11\n(12) + (11) = 23, left: (12 + 11) = 23, (10 / 10) = 1\n(1) + (23) = 24, left: ((10 / 10) + (12 + 11)) = 24\nreach 24! expression: ((10 / 10) + (12 + 11))"}, {"input": "10 12 10 11\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 12, 11\n(12) + (1) = 13, left: (12 + (10 / 10)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (10 / 10))) = 24\nreach 24! expression: (11 + (12 + (10 / 10)))"}, {"input": "10 12 10 11\n", "output": "(12) + (11) = 23, left: (12 + 11) = 23, 10, 10\n(10) / (10) = 1, left: (10 / 10) = 1, (12 + 11) = 23\n(23) + (1) = 24, left: ((12 + 11) + (10 / 10)) = 24\nreach 24! expression: ((12 + 11) + (10 / 10))"}, {"input": "10 12 10 11\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 12, 11\n(11) + (1) = 12, left: (11 + (10 / 10)) = 12, 12\n(12) + (12) = 24, left: (12 + (11 + (10 / 10))) = 24\nreach 24! expression: (12 + (11 + (10 / 10)))"}, {"input": "10 8 7 8\n", "output": "(10) * (8) = 80, left: (10 * 8) = 80, 8, 7\n(8) * (7) = 56, left: (8 * 7) = 56, (10 * 8) = 80\n(80) - (56) = 24, left: ((10 * 8) - (8 * 7)) = 24\nreach 24! expression: ((10 * 8) - (8 * 7))"}, {"input": "10 8 7 8\n", "output": "(8) * (7) = 56, left: (8 * 7) = 56, 10, 8\n(10) * (8) = 80, left: (10 * 8) = 80, (8 * 7) = 56\n(80) - (56) = 24, left: ((10 * 8) - (8 * 7)) = 24\nreach 24! expression: ((10 * 8) - (8 * 7))"}, {"input": "10 8 7 8\n", "output": "(10) * (8) = 80, left: (10 * 8) = 80, 7, 8\n(7) * (8) = 56, left: (7 * 8) = 56, (10 * 8) = 80\n(80) - (56) = 24, left: ((10 * 8) - (7 * 8)) = 24\nreach 24! expression: ((10 * 8) - (7 * 8))"}, {"input": "10 8 7 8\n", "output": "(10) / (8) = 5/4, left: (10 / 8) = 5/4, 8, 7\nroll back, left: 10 8 7 8\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 8, 7\n(8) + (4/5) = 44/5, left: (8 + (8 / 10)) = 44/5, 7\nroll back, left: (8 / 10) = 4/5, 8, 7\nroll back, left: 10 8 7 8\n(10) * (8) = 80, left: (10 * 8) = 80, 8, 7\n(8) * (7) = 56, left: (8 * 7) = 56, (10 * 8) = 80\n(80) - (56) = 24, left: ((10 * 8) - (8 * 7)) = 24\nreach 24! expression: ((10 * 8) - (8 * 7))"}, {"input": "10 8 7 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 10, 7\nroll back, left: 10 8 7 8\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 7, 8\nroll back, left: 10 8 7 8\n(10) - (8) = 2, left: (10 - 8) = 2, 7, 8\nroll back, left: 10 8 7 8\n(10) * (8) = 80, left: (10 * 8) = 80, 7, 8\n(7) * (8) = 56, left: (7 * 8) = 56, (10 * 8) = 80\n(80) - (56) = 24, left: ((10 * 8) - (7 * 8)) = 24\nreach 24! expression: ((10 * 8) - (7 * 8))"}, {"input": "10 8 7 8\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 10, 8\n(10) / (7/8) = 80/7, left: (10 / (7 / 8)) = 80/7, 8\nroll back, left: (7 / 8) = 7/8, 10, 8\nroll back, left: 10 8 7 8\n(7) - (8) = -1, left: (7 - 8) = -1, 10, 8\nroll back, left: 10 8 7 8\n(8) * (7) = 56, left: (8 * 7) = 56, 10, 8\n(10) * (8) = 80, left: (10 * 8) = 80, (8 * 7) = 56\n(80) - (56) = 24, left: ((10 * 8) - (8 * 7)) = 24\nreach 24! expression: ((10 * 8) - (8 * 7))"}, {"input": "10 8 7 8\n", "output": "(8) / (10) = 4/5, left: (8 / 10) = 4/5, 8, 7\nroll back, left: 10 8 7 8\n(10) / (8) = 5/4, left: (10 / 8) = 5/4, 8, 7\n(8) - (7) = 1, left: (8 - 7) = 1, (10 / 8) = 5/4\nroll back, left: (10 / 8) = 5/4, 8, 7\nroll back, left: 10 8 7 8\n(10) * (8) = 80, left: (10 * 8) = 80, 8, 7\n(8) * (7) = 56, left: (8 * 7) = 56, (10 * 8) = 80\n(80) - (56) = 24, left: ((10 * 8) - (8 * 7)) = 24\nreach 24! expression: ((10 * 8) - (8 * 7))"}, {"input": "1 10 3 10\n", "output": "(1) + (10) = 11, left: (1 + 10) = 11, 10, 3\n(3) + (11) = 14, left: (3 + (1 + 10)) = 14, 10\n(10) + (14) = 24, left: (10 + (3 + (1 + 10))) = 24\nreach 24! expression: (10 + (3 + (1 + 10)))"}, {"input": "1 10 3 10\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 10, 10\n(10) + (4) = 14, left: (10 + (1 + 3)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 + (1 + 3))) = 24\nreach 24! expression: (10 + (10 + (1 + 3)))"}, {"input": "1 10 3 10\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 1, 3\n(3) + (20) = 23, left: (3 + (10 + 10)) = 23, 1\n(1) + (23) = 24, left: (1 + (3 + (10 + 10))) = 24\nreach 24! expression: (1 + (3 + (10 + 10)))"}, {"input": "1 10 3 10\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 1, 3\n(1) + (20) = 21, left: (1 + (10 + 10)) = 21, 3\n(3) + (21) = 24, left: (3 + (1 + (10 + 10))) = 24\nreach 24! expression: (3 + (1 + (10 + 10)))"}, {"input": "1 10 3 10\n", "output": "(1) + (10) = 11, left: (1 + 10) = 11, 10, 3\n(10) + (11) = 21, left: (10 + (1 + 10)) = 21, 3\n(3) + (21) = 24, left: (3 + (10 + (1 + 10))) = 24\nreach 24! expression: (3 + (10 + (1 + 10)))"}, {"input": "1 10 3 10\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 10, 10\nroll back, left: 1 10 3 10\n(1) / (3) = 1/3, left: (1 / 3) = 1/3, 10, 10\n(10) - (1/3) = 29/3, left: (10 - (1 / 3)) = 29/3, 10\nroll back, left: (1 / 3) = 1/3, 10, 10\nroll back, left: 1 10 3 10\n(1) + (3) = 4, left: (1 + 3) = 4, 10, 10\n(10) + (4) = 14, left: (10 + (1 + 3)) = 14, 10\n(10) + (14) = 24, left: (10 + (10 + (1 + 3))) = 24\nreach 24! expression: (10 + (10 + (1 + 3)))"}, {"input": "1 10 3 10\n", "output": "(10) - (10) = 0, left: (10 - 10) = 0, 1, 3\nroll back, left: 1 10 3 10\n(10) / (10) = 1, left: (10 / 10) = 1, 1, 3\n(1) / (1) = 1, left: (1 / (10 / 10)) = 1, 3\nroll back, left: (10 / 10) = 1, 1, 3\nroll back, left: 1 10 3 10\n(10) + (10) = 20, left: (10 + 10) = 20, 1, 3\n(1) + (20) = 21, left: (1 + (10 + 10)) = 21, 3\n(3) + (21) = 24, left: (3 + (1 + (10 + 10))) = 24\nreach 24! expression: (3 + (1 + (10 + 10)))"}, {"input": "1 10 3 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 1, 3\nroll back, left: 1 10 3 10\n(10) * (10) = 100, left: (10 * 10) = 100, 1, 3\n(100) / (1) = 100, left: ((10 * 10) / 1) = 100, 3\nroll back, left: (10 * 10) = 100, 1, 3\nroll back, left: 1 10 3 10\n(10) + (10) = 20, left: (10 + 10) = 20, 1, 3\n(3) + (20) = 23, left: (3 + (10 + 10)) = 23, 1\n(1) + (23) = 24, left: (1 + (3 + (10 + 10))) = 24\nreach 24! expression: (1 + (3 + (10 + 10)))"}, {"input": "1 10 3 10\n", "output": "(10) / (1) = 10, left: (10 / 1) = 10, 10, 3\n(3) / (10) = 3/10, left: (3 / (10 / 1)) = 3/10, 10\nroll back, left: (10 / 1) = 10, 10, 3\nroll back, left: 1 10 3 10\n(1) - (10) = -9, left: (1 - 10) = -9, 10, 3\nroll back, left: 1 10 3 10\n(1) + (10) = 11, left: (1 + 10) = 11, 10, 3\n(10) + (11) = 21, left: (10 + (1 + 10)) = 21, 3\n(3) + (21) = 24, left: (3 + (10 + (1 + 10))) = 24\nreach 24! expression: (3 + (10 + (1 + 10)))"}, {"input": "11 7 9 10\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 7, 10\n(7) * (-2) = -14, left: (7 * (9 - 11)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (9 - 11))) = 24\nreach 24! expression: (10 - (7 * (9 - 11)))"}, {"input": "11 7 9 10\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (10 - 7)) = 33, 9\n(33) - (9) = 24, left: ((11 * (10 - 7)) - 9) = 24\nreach 24! expression: ((11 * (10 - 7)) - 9)"}, {"input": "11 7 9 10\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (11 - 9)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (11 - 9))) = 24\nreach 24! expression: (10 + (7 * (11 - 9)))"}, {"input": "11 7 9 10\n", "output": "(10) / (9) = 10/9, left: (10 / 9) = 10/9, 11, 7\nroll back, left: 11 7 9 10\n(9) * (10) = 90, left: (9 * 10) = 90, 11, 7\nroll back, left: 11 7 9 10\n(9) / (10) = 9/10, left: (9 / 10) = 9/10, 11, 7\nroll back, left: 11 7 9 10\n(10) - (7) = 3, left: (10 - 7) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (10 - 7)) = 33, 9\n(33) - (9) = 24, left: ((11 * (10 - 7)) - 9) = 24\nreach 24! expression: ((11 * (10 - 7)) - 9)"}, {"input": "11 7 9 10\n", "output": "(10) / (11) = 10/11, left: (10 / 11) = 10/11, 7, 9\nroll back, left: 11 7 9 10\n(7) / (11) = 7/11, left: (7 / 11) = 7/11, 9, 10\nroll back, left: 11 7 9 10\n(11) + (7) = 18, left: (11 + 7) = 18, 9, 10\nroll back, left: 11 7 9 10\n(9) - (11) = -2, left: (9 - 11) = -2, 7, 10\n(7) * (-2) = -14, left: (7 * (9 - 11)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (9 - 11))) = 24\nreach 24! expression: (10 - (7 * (9 - 11)))"}, {"input": "11 7 9 10\n", "output": "(7) * (10) = 70, left: (7 * 10) = 70, 11, 9\nroll back, left: 11 7 9 10\n(7) + (10) = 17, left: (7 + 10) = 17, 11, 9\n(17) - (9) = 8, left: ((7 + 10) - 9) = 8, 11\nroll back, left: (7 + 10) = 17, 11, 9\nroll back, left: 11 7 9 10\n(10) - (7) = 3, left: (10 - 7) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (10 - 7)) = 33, 9\n(33) - (9) = 24, left: ((11 * (10 - 7)) - 9) = 24\nreach 24! expression: ((11 * (10 - 7)) - 9)"}, {"input": "11 7 9 10\n", "output": "(9) / (10) = 9/10, left: (9 / 10) = 9/10, 11, 7\nroll back, left: 11 7 9 10\n(9) / (7) = 9/7, left: (9 / 7) = 9/7, 11, 10\nroll back, left: 11 7 9 10\n(7) * (9) = 63, left: (7 * 9) = 63, 11, 10\nroll back, left: 11 7 9 10\n(11) - (9) = 2, left: (11 - 9) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (11 - 9)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (11 - 9))) = 24\nreach 24! expression: (10 + (7 * (11 - 9)))"}, {"input": "11 7 9 10\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 9, 10\nroll back, left: 11 7 9 10\n(11) + (7) = 18, left: (11 + 7) = 18, 9, 10\n(18) / (9) = 2, left: ((11 + 7) / 9) = 2, 10\nroll back, left: (11 + 7) = 18, 9, 10\nroll back, left: 11 7 9 10\n(10) - (7) = 3, left: (10 - 7) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (10 - 7)) = 33, 9\n(33) - (9) = 24, left: ((11 * (10 - 7)) - 9) = 24\nreach 24! expression: ((11 * (10 - 7)) - 9)"}, {"input": "8 12 6 6\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (6 / 12) = 1/2\n(1/2) * (48) = 24, left: ((6 / 12) * (8 * 6)) = 24\nreach 24! expression: ((6 / 12) * (8 * 6))"}, {"input": "8 12 6 6\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (12 / 6) = 2\n(48) / (2) = 24, left: ((8 * 6) / (12 / 6)) = 24\nreach 24! expression: ((8 * 6) / (12 / 6))"}, {"input": "8 12 6 6\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 6, 6\n(6) * (6) = 36, left: (6 * 6) = 36, (12 / 8) = 3/2\n(36) / (3/2) = 24, left: ((6 * 6) / (12 / 8)) = 24\nreach 24! expression: ((6 * 6) / (12 / 8))"}, {"input": "8 12 6 6\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 6, 6\n(6) / (3/2) = 4, left: (6 / (12 / 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 / (12 / 8))) = 24\nreach 24! expression: (6 * (6 / (12 / 8)))"}, {"input": "8 12 6 6\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (6 - 8)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (6 - 8))) = 24\nreach 24! expression: (12 - (6 * (6 - 8)))"}, {"input": "8 12 6 6\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 6, 6\n(6) / (3/2) = 4, left: (6 / (12 / 8)) = 4, 6\n(4) - (6) = -2, left: ((6 / (12 / 8)) - 6) = -2\nroll back, left: (6 / (12 / 8)) = 4, 6\n(4) / (6) = 2/3, left: ((6 / (12 / 8)) / 6) = 2/3\nroll back, left: (6 / (12 / 8)) = 4, 6\n(6) - (4) = 2, left: (6 - (6 / (12 / 8))) = 2\nroll back, left: (6 / (12 / 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 / (12 / 8))) = 24\nreach 24! expression: (6 * (6 / (12 / 8)))"}, {"input": "8 12 6 6\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 8, 6\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, (12 - 6) = 6\nroll back, left: (12 - 6) = 6, 8, 6\n(6) - (6) = 0, left: ((12 - 6) - 6) = 0, 8\nroll back, left: (12 - 6) = 6, 8, 6\nroll back, left: 8 12 6 6\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (6 / 12) = 1/2\n(1/2) * (48) = 24, left: ((6 / 12) * (8 * 6)) = 24\nreach 24! expression: ((6 / 12) * (8 * 6))"}, {"input": "8 12 6 6\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 12, 6\n(12) - (-2) = 14, left: (12 - (6 - 8)) = 14, 6\nroll back, left: (6 - 8) = -2, 12, 6\n(12) * (-2) = -24, left: (12 * (6 - 8)) = -24, 6\nroll back, left: (6 - 8) = -2, 12, 6\n(-2) - (12) = -14, left: ((6 - 8) - 12) = -14, 6\nroll back, left: (6 - 8) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (6 - 8)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (6 - 8))) = 24\nreach 24! expression: (12 - (6 * (6 - 8)))"}, {"input": "8 12 6 6\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 6, 6\n(6) / (3/2) = 4, left: (6 / (12 / 8)) = 4, 6\n(4) - (6) = -2, left: ((6 / (12 / 8)) - 6) = -2\nroll back, left: (6 / (12 / 8)) = 4, 6\n(4) / (6) = 2/3, left: ((6 / (12 / 8)) / 6) = 2/3\nroll back, left: (6 / (12 / 8)) = 4, 6\n(6) - (4) = 2, left: (6 - (6 / (12 / 8))) = 2\nroll back, left: (6 / (12 / 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 / (12 / 8))) = 24\nreach 24! expression: (6 * (6 / (12 / 8)))"}, {"input": "8 12 6 6\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 6, 6\n(6) / (3/2) = 4, left: (6 / (12 / 8)) = 4, 6\n(4) - (6) = -2, left: ((6 / (12 / 8)) - 6) = -2\nroll back, left: (6 / (12 / 8)) = 4, 6\n(4) / (6) = 2/3, left: ((6 / (12 / 8)) / 6) = 2/3\nroll back, left: (6 / (12 / 8)) = 4, 6\n(6) - (4) = 2, left: (6 - (6 / (12 / 8))) = 2\nroll back, left: (6 / (12 / 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 / (12 / 8))) = 24\nreach 24! expression: (6 * (6 / (12 / 8)))"}, {"input": "8 12 6 6\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 6, 6\n(6) / (3/2) = 4, left: (6 / (12 / 8)) = 4, 6\n(4) - (6) = -2, left: ((6 / (12 / 8)) - 6) = -2\nroll back, left: (6 / (12 / 8)) = 4, 6\n(4) / (6) = 2/3, left: ((6 / (12 / 8)) / 6) = 2/3\nroll back, left: (6 / (12 / 8)) = 4, 6\n(6) - (4) = 2, left: (6 - (6 / (12 / 8))) = 2\nroll back, left: (6 / (12 / 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (6 / (12 / 8))) = 24\nreach 24! expression: (6 * (6 / (12 / 8)))"}, {"input": "8 6 7 9\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 8, 6\n(2) / (6) = 1/3, left: ((9 - 7) / 6) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((9 - 7) / 6)) = 24\nreach 24! expression: (8 / ((9 - 7) / 6))"}, {"input": "8 6 7 9\n", "output": "(8) * (6) = 48, left: (8 * 6) = 48, 7, 9\n(9) - (7) = 2, left: (9 - 7) = 2, (8 * 6) = 48\n(48) / (2) = 24, left: ((8 * 6) / (9 - 7)) = 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (9 - 7) = 2\n(48) / (2) = 24, left: ((8 * 6) / (9 - 7)) = 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(8) / (9) = 8/9, left: (8 / 9) = 8/9, 6, 7\n(6) - (7) = -1, left: (6 - 7) = -1, (8 / 9) = 8/9\nroll back, left: (8 / 9) = 8/9, 6, 7\nroll back, left: 8 6 7 9\n(6) * (7) = 42, left: (6 * 7) = 42, 8, 9\nroll back, left: 8 6 7 9\n(9) - (7) = 2, left: (9 - 7) = 2, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (9 - 7) = 2\n(48) / (2) = 24, left: ((8 * 6) / (9 - 7)) = 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 8, 7\n(3) / (8) = 3/8, left: ((9 - 6) / 8) = 3/8, 7\nroll back, left: (9 - 6) = 3, 8, 7\nroll back, left: 8 6 7 9\n(8) + (6) = 14, left: (8 + 6) = 14, 7, 9\nroll back, left: 8 6 7 9\n(8) * (6) = 48, left: (8 * 6) = 48, 7, 9\n(9) - (7) = 2, left: (9 - 7) = 2, (8 * 6) = 48\n(48) / (2) = 24, left: ((8 * 6) / (9 - 7)) = 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "8 6 7 9\n", "output": "(7) / (6) = 7/6, left: (7 / 6) = 7/6, 8, 9\nroll back, left: 8 6 7 9\n(6) + (7) = 13, left: (6 + 7) = 13, 8, 9\nroll back, left: 8 6 7 9\n(6) * (7) = 42, left: (6 * 7) = 42, 8, 9\nroll back, left: 8 6 7 9\n(9) - (7) = 2, left: (9 - 7) = 2, 8, 6\n(2) / (6) = 1/3, left: ((9 - 7) / 6) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((9 - 7) / 6)) = 24\nreach 24! expression: (8 / ((9 - 7) / 6))"}, {"input": "8 6 7 9\n", "output": "(9) / (7) = 9/7, left: (9 / 7) = 9/7, 8, 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, (9 / 7) = 9/7\nroll back, left: (9 / 7) = 9/7, 8, 6\n(6) / (9/7) = 14/3, left: (6 / (9 / 7)) = 14/3, 8\nroll back, left: (9 / 7) = 9/7, 8, 6\nroll back, left: 8 6 7 9\n(9) - (7) = 2, left: (9 - 7) = 2, 8, 6\n(8) * (6) = 48, left: (8 * 6) = 48, (9 - 7) = 2\n(48) / (2) = 24, left: ((8 * 6) / (9 - 7)) = 24\nreach 24! expression: ((8 * 6) / (9 - 7))"}, {"input": "3 12 6 9\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 12, 9\n(9) - (-3) = 12, left: (9 - (3 - 6)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 - (3 - 6))) = 24\nreach 24! expression: (12 + (9 - (3 - 6)))"}, {"input": "3 12 6 9\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 12, 9\n(12) + (3) = 15, left: (12 + (6 - 3)) = 15, 9\n(9) + (15) = 24, left: (9 + (12 + (6 - 3))) = 24\nreach 24! expression: (9 + (12 + (6 - 3)))"}, {"input": "3 12 6 9\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 3, 12\n(3) * (2/3) = 2, left: (3 * (6 / 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 * (6 / 9))) = 24\nreach 24! expression: (12 * (3 * (6 / 9)))"}, {"input": "3 12 6 9\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 12, 9\n(9) + (3) = 12, left: (9 + (6 - 3)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 + (6 - 3))) = 24\nreach 24! expression: (12 + (9 + (6 - 3)))"}, {"input": "3 12 6 9\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 12, 9\n(9) / (12) = 3/4, left: (9 / 12) = 3/4, (3 * 6) = 18\n(18) / (3/4) = 24, left: ((3 * 6) / (9 / 12)) = 24\nreach 24! expression: ((3 * 6) / (9 / 12))"}, {"input": "3 12 6 9\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 12, 9\n(2) - (12) = -10, left: ((6 / 3) - 12) = -10, 9\n(-10) - (9) = -19, left: (((6 / 3) - 12) - 9) = -19\nroll back, left: ((6 / 3) - 12) = -10, 9\nroll back, left: (6 / 3) = 2, 12, 9\nroll back, left: 3 12 6 9\n(6) - (3) = 3, left: (6 - 3) = 3, 12, 9\n(9) + (3) = 12, left: (9 + (6 - 3)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 + (6 - 3))) = 24\nreach 24! expression: (12 + (9 + (6 - 3)))"}, {"input": "3 12 6 9\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 3, 12\nroll back, left: 3 12 6 9\n(6) - (9) = -3, left: (6 - 9) = -3, 3, 12\n(12) / (3) = 4, left: (12 / 3) = 4, (6 - 9) = -3\nroll back, left: (6 - 9) = -3, 3, 12\nroll back, left: 3 12 6 9\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, 3, 12\n(3) * (2/3) = 2, left: (3 * (6 / 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 * (6 / 9))) = 24\nreach 24! expression: (12 * (3 * (6 / 9)))"}, {"input": "3 12 6 9\n", "output": "(3) + (6) = 9, left: (3 + 6) = 9, 12, 9\nroll back, left: 3 12 6 9\n(6) / (3) = 2, left: (6 / 3) = 2, 12, 9\nroll back, left: 3 12 6 9\n(3) - (6) = -3, left: (3 - 6) = -3, 12, 9\n(9) + (-3) = 6, left: (9 + (3 - 6)) = 6, 12\nroll back, left: (3 - 6) = -3, 12, 9\n(9) - (-3) = 12, left: (9 - (3 - 6)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 - (3 - 6))) = 24\nreach 24! expression: (12 + (9 - (3 - 6)))"}, {"input": "3 12 6 9\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 12, 9\n(12) - (3) = 9, left: (12 - (6 - 3)) = 9, 9\nroll back, left: (6 - 3) = 3, 12, 9\n(3) / (12) = 1/4, left: ((6 - 3) / 12) = 1/4, 9\n(9) * (1/4) = 9/4, left: (9 * ((6 - 3) / 12)) = 9/4\nroll back, left: ((6 - 3) / 12) = 1/4, 9\nroll back, left: (6 - 3) = 3, 12, 9\n(12) + (3) = 15, left: (12 + (6 - 3)) = 15, 9\n(9) + (15) = 24, left: (9 + (12 + (6 - 3))) = 24\nreach 24! expression: (9 + (12 + (6 - 3)))"}, {"input": "13 1 13 2\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 13, 13\n(2) - (13) = -11, left: ((2 / 1) - 13) = -11, 13\n(13) - (-11) = 24, left: (13 - ((2 / 1) - 13)) = 24\nreach 24! expression: (13 - ((2 / 1) - 13))"}, {"input": "13 1 13 2\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 13, 13\n(13) - (2) = 11, left: (13 - (2 / 1)) = 11, 13\n(13) + (11) = 24, left: (13 + (13 - (2 / 1))) = 24\nreach 24! expression: (13 + (13 - (2 / 1)))"}, {"input": "13 1 13 2\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 13, 2\n(13) - (2) = 11, left: ((13 / 1) - 2) = 11, 13\n(13) + (11) = 24, left: (13 + ((13 / 1) - 2)) = 24\nreach 24! expression: (13 + ((13 / 1) - 2))"}, {"input": "13 1 13 2\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 13, 2\n(13) + (13) = 26, left: (13 + (13 / 1)) = 26, 2\n(26) - (2) = 24, left: ((13 + (13 / 1)) - 2) = 24\nreach 24! expression: ((13 + (13 / 1)) - 2)"}, {"input": "13 1 13 2\n", "output": "(1) / (13) = 1/13, left: (1 / 13) = 1/13, 13, 2\nroll back, left: 13 1 13 2\n(13) + (1) = 14, left: (13 + 1) = 14, 13, 2\nroll back, left: 13 1 13 2\n(13) - (1) = 12, left: (13 - 1) = 12, 13, 2\nroll back, left: 13 1 13 2\n(13) / (1) = 13, left: (13 / 1) = 13, 13, 2\n(13) + (13) = 26, left: (13 + (13 / 1)) = 26, 2\n(26) - (2) = 24, left: ((13 + (13 / 1)) - 2) = 24\nreach 24! expression: ((13 + (13 / 1)) - 2)"}, {"input": "7 1 5 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 7, 1\n(7) + (1) = 8, left: (7 + 1) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (7 + 1)) = 24\nreach 24! expression: ((8 - 5) * (7 + 1))"}, {"input": "7 1 5 8\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 1, 8\n(1) - (-2) = 3, left: (1 - (5 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (5 - 7))) = 24\nreach 24! expression: (8 * (1 - (5 - 7)))"}, {"input": "7 1 5 8\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 7, 8\n(7) - (4) = 3, left: (7 - (5 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (5 - 1))) = 24\nreach 24! expression: (8 * (7 - (5 - 1)))"}, {"input": "7 1 5 8\n", "output": "(1) / (5) = 1/5, left: (1 / 5) = 1/5, 7, 8\n(7) + (1/5) = 36/5, left: (7 + (1 / 5)) = 36/5, 8\nroll back, left: (1 / 5) = 1/5, 7, 8\n(1/5) - (8) = -39/5, left: ((1 / 5) - 8) = -39/5, 7\nroll back, left: (1 / 5) = 1/5, 7, 8\nroll back, left: 7 1 5 8\n(5) - (1) = 4, left: (5 - 1) = 4, 7, 8\n(7) - (4) = 3, left: (7 - (5 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (5 - 1))) = 24\nreach 24! expression: (8 * (7 - (5 - 1)))"}, {"input": "7 1 5 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 7, 1\n(7) - (13) = -6, left: (7 - (5 + 8)) = -6, 1\nroll back, left: (5 + 8) = 13, 7, 1\nroll back, left: 7 1 5 8\n(8) - (5) = 3, left: (8 - 5) = 3, 7, 1\n(1) / (7) = 1/7, left: (1 / 7) = 1/7, (8 - 5) = 3\nroll back, left: (8 - 5) = 3, 7, 1\n(7) + (1) = 8, left: (7 + 1) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (7 + 1)) = 24\nreach 24! expression: ((8 - 5) * (7 + 1))"}, {"input": "7 1 5 8\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 7, 1\nroll back, left: 7 1 5 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 7, 1\nroll back, left: 7 1 5 8\n(5) + (8) = 13, left: (5 + 8) = 13, 7, 1\nroll back, left: 7 1 5 8\n(8) - (5) = 3, left: (8 - 5) = 3, 7, 1\n(7) + (1) = 8, left: (7 + 1) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (7 + 1)) = 24\nreach 24! expression: ((8 - 5) * (7 + 1))"}, {"input": "7 1 5 8\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 7, 1\nroll back, left: 7 1 5 8\n(5) - (8) = -3, left: (5 - 8) = -3, 7, 1\nroll back, left: 7 1 5 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 7, 1\nroll back, left: 7 1 5 8\n(8) - (5) = 3, left: (8 - 5) = 3, 7, 1\n(7) + (1) = 8, left: (7 + 1) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (7 + 1)) = 24\nreach 24! expression: ((8 - 5) * (7 + 1))"}, {"input": "7 1 5 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 1, 5\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, (7 + 8) = 15\nroll back, left: (7 + 8) = 15, 1, 5\nroll back, left: 7 1 5 8\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, 1, 5\nroll back, left: 7 1 5 8\n(5) - (7) = -2, left: (5 - 7) = -2, 1, 8\n(1) - (-2) = 3, left: (1 - (5 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (5 - 7))) = 24\nreach 24! expression: (8 * (1 - (5 - 7)))"}, {"input": "2 9 2 2\n", "output": "(9) + (2) = 11, left: (9 + 2) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (9 + 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (9 + 2))) = 24\nreach 24! expression: (2 + (2 * (9 + 2)))"}, {"input": "2 9 2 2\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (2 + 9)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (2 + 9))) = 24\nreach 24! expression: (2 + (2 * (2 + 9)))"}, {"input": "2 9 2 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 2, 2\n(2) * (18) = 36, left: (2 * (9 * 2)) = 36, 2\nroll back, left: (9 * 2) = 18, 2, 2\nroll back, left: 2 9 2 2\n(2) - (9) = -7, left: (2 - 9) = -7, 2, 2\nroll back, left: 2 9 2 2\n(9) + (2) = 11, left: (9 + 2) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (9 + 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (9 + 2))) = 24\nreach 24! expression: (2 + (2 * (9 + 2)))"}, {"input": "2 9 2 2\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 2, 2\nroll back, left: 2 9 2 2\n(9) - (2) = 7, left: (9 - 2) = 7, 2, 2\n(7) - (2) = 5, left: ((9 - 2) - 2) = 5, 2\nroll back, left: (9 - 2) = 7, 2, 2\nroll back, left: 2 9 2 2\n(2) + (9) = 11, left: (2 + 9) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (2 + 9)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (2 + 9))) = 24\nreach 24! expression: (2 + (2 * (2 + 9)))"}, {"input": "2 9 2 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 2, 2\n(18) - (2) = 16, left: ((9 * 2) - 2) = 16, 2\nroll back, left: (9 * 2) = 18, 2, 2\nroll back, left: 2 9 2 2\n(9) + (2) = 11, left: (9 + 2) = 11, 2, 2\n(2) / (11) = 2/11, left: (2 / (9 + 2)) = 2/11, 2\nroll back, left: (9 + 2) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (9 + 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (9 + 2))) = 24\nreach 24! expression: (2 + (2 * (9 + 2)))"}, {"input": "2 9 2 2\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 2, 9\nroll back, left: 2 9 2 2\n(2) * (2) = 4, left: (2 * 2) = 4, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (2 * 2) = 4\nroll back, left: (2 * 2) = 4, 2, 9\nroll back, left: 2 9 2 2\n(9) + (2) = 11, left: (9 + 2) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (9 + 2)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (9 + 2))) = 24\nreach 24! expression: (2 + (2 * (9 + 2)))"}, {"input": "2 9 2 2\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 2, 2\n(11) / (2) = 11/2, left: ((2 + 9) / 2) = 11/2, 2\n(2) * (11/2) = 11, left: (2 * ((2 + 9) / 2)) = 11\nroll back, left: ((2 + 9) / 2) = 11/2, 2\nroll back, left: (2 + 9) = 11, 2, 2\n(11) - (2) = 9, left: ((2 + 9) - 2) = 9, 2\nroll back, left: (2 + 9) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (2 + 9)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (2 + 9))) = 24\nreach 24! expression: (2 + (2 * (2 + 9)))"}, {"input": "1 4 4 2\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 4, 2\n(4) * (3) = 12, left: (4 * (4 - 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (4 * (4 - 1))) = 24\nreach 24! expression: (2 * (4 * (4 - 1)))"}, {"input": "1 4 4 2\n", "output": "(4) + (4) = 8, left: (4 + 4) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (1 + 2)) = 24\nreach 24! expression: ((4 + 4) * (1 + 2))"}, {"input": "1 4 4 2\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (4 * 2) = 8\n(8) * (3) = 24, left: ((4 * 2) * (4 - 1)) = 24\nreach 24! expression: ((4 * 2) * (4 - 1))"}, {"input": "1 4 4 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 1, 4\n(4) * (6) = 24, left: (4 * (4 + 2)) = 24, 1\n(24) / (1) = 24, left: ((4 * (4 + 2)) / 1) = 24\nreach 24! expression: ((4 * (4 + 2)) / 1)"}, {"input": "1 4 4 2\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 1, 4\n(4) + (-2) = 2, left: (4 + (2 - 4)) = 2, 1\nroll back, left: (2 - 4) = -2, 1, 4\nroll back, left: 1 4 4 2\n(4) + (2) = 6, left: (4 + 2) = 6, 1, 4\n(4) / (6) = 2/3, left: (4 / (4 + 2)) = 2/3, 1\nroll back, left: (4 + 2) = 6, 1, 4\n(4) * (6) = 24, left: (4 * (4 + 2)) = 24, 1\n(24) / (1) = 24, left: ((4 * (4 + 2)) / 1) = 24\nreach 24! expression: ((4 * (4 + 2)) / 1)"}, {"input": "1 4 4 2\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 1, 4\nroll back, left: 1 4 4 2\n(4) * (2) = 8, left: (4 * 2) = 8, 1, 4\n(1) - (8) = -7, left: (1 - (4 * 2)) = -7, 4\nroll back, left: (4 * 2) = 8, 1, 4\n(1) * (4) = 4, left: (1 * 4) = 4, (4 * 2) = 8\nroll back, left: (4 * 2) = 8, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (4 * 2) = 8\n(8) * (3) = 24, left: ((4 * 2) * (4 - 1)) = 24\nreach 24! expression: ((4 * 2) * (4 - 1))"}, {"input": "1 4 4 2\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 4, 2\n(4) - (3) = 1, left: (4 - (4 - 1)) = 1, 2\nroll back, left: (4 - 1) = 3, 4, 2\n(4) / (3) = 4/3, left: (4 / (4 - 1)) = 4/3, 2\nroll back, left: (4 - 1) = 3, 4, 2\n(4) + (3) = 7, left: (4 + (4 - 1)) = 7, 2\nroll back, left: (4 - 1) = 3, 4, 2\n(4) * (3) = 12, left: (4 * (4 - 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (4 * (4 - 1))) = 24\nreach 24! expression: (2 * (4 * (4 - 1)))"}, {"input": "1 4 4 2\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 1, 4\n(4) / (8) = 1/2, left: (4 / (4 * 2)) = 1/2, 1\nroll back, left: (4 * 2) = 8, 1, 4\n(4) * (8) = 32, left: (4 * (4 * 2)) = 32, 1\n(32) - (1) = 31, left: ((4 * (4 * 2)) - 1) = 31\nroll back, left: (4 * (4 * 2)) = 32, 1\nroll back, left: (4 * 2) = 8, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (4 * 2) = 8\n(8) * (3) = 24, left: ((4 * 2) * (4 - 1)) = 24\nreach 24! expression: ((4 * 2) * (4 - 1))"}, {"input": "1 4 4 2\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 1, 2\n(2) * (16) = 32, left: (2 * (4 * 4)) = 32, 1\nroll back, left: (4 * 4) = 16, 1, 2\nroll back, left: 1 4 4 2\n(4) + (4) = 8, left: (4 + 4) = 8, 1, 2\n(1) - (2) = -1, left: (1 - 2) = -1, (4 + 4) = 8\nroll back, left: (4 + 4) = 8, 1, 2\n(1) + (2) = 3, left: (1 + 2) = 3, (4 + 4) = 8\n(8) * (3) = 24, left: ((4 + 4) * (1 + 2)) = 24\nreach 24! expression: ((4 + 4) * (1 + 2))"}, {"input": "3 11 4 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 11, 4\n(11) + (9) = 20, left: (11 + (3 * 3)) = 20, 4\n(4) + (20) = 24, left: (4 + (11 + (3 * 3))) = 24\nreach 24! expression: (4 + (11 + (3 * 3)))"}, {"input": "3 11 4 3\n", "output": "(11) - (4) = 7, left: (11 - 4) = 7, 3, 3\n(3) * (7) = 21, left: (3 * (11 - 4)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 * (11 - 4))) = 24\nreach 24! expression: (3 + (3 * (11 - 4)))"}, {"input": "3 11 4 3\n", "output": "(11) + (4) = 15, left: (11 + 4) = 15, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (11 + 4) = 15\n(15) + (9) = 24, left: ((11 + 4) + (3 * 3)) = 24\nreach 24! expression: ((11 + 4) + (3 * 3))"}, {"input": "3 11 4 3\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 3, 4\n(4) * (-8) = -32, left: (4 * (3 - 11)) = -32, 3\nroll back, left: (3 - 11) = -8, 3, 4\nroll back, left: 3 11 4 3\n(4) * (3) = 12, left: (4 * 3) = 12, 3, 11\nroll back, left: 3 11 4 3\n(11) - (4) = 7, left: (11 - 4) = 7, 3, 3\n(3) * (7) = 21, left: (3 * (11 - 4)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 * (11 - 4))) = 24\nreach 24! expression: (3 + (3 * (11 - 4)))"}, {"input": "3 11 4 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 11, 4\n(4) / (11) = 4/11, left: (4 / 11) = 4/11, (3 - 3) = 0\nroll back, left: (3 - 3) = 0, 11, 4\nroll back, left: 3 11 4 3\n(3) * (3) = 9, left: (3 * 3) = 9, 11, 4\n(9) - (11) = -2, left: ((3 * 3) - 11) = -2, 4\nroll back, left: (3 * 3) = 9, 11, 4\n(11) + (9) = 20, left: (11 + (3 * 3)) = 20, 4\n(4) + (20) = 24, left: (4 + (11 + (3 * 3))) = 24\nreach 24! expression: (4 + (11 + (3 * 3)))"}, {"input": "3 11 4 3\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 3, 11\nroll back, left: 3 11 4 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 11, 3\nroll back, left: 3 11 4 3\n(3) * (4) = 12, left: (3 * 4) = 12, 11, 3\nroll back, left: 3 11 4 3\n(11) + (4) = 15, left: (11 + 4) = 15, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (11 + 4) = 15\n(15) + (9) = 24, left: ((11 + 4) + (3 * 3)) = 24\nreach 24! expression: ((11 + 4) + (3 * 3))"}, {"input": "3 11 4 3\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 11, 3\nroll back, left: 3 11 4 3\n(3) - (4) = -1, left: (3 - 4) = -1, 11, 3\nroll back, left: 3 11 4 3\n(3) * (11) = 33, left: (3 * 11) = 33, 4, 3\nroll back, left: 3 11 4 3\n(3) * (3) = 9, left: (3 * 3) = 9, 11, 4\n(11) + (9) = 20, left: (11 + (3 * 3)) = 20, 4\n(4) + (20) = 24, left: (4 + (11 + (3 * 3))) = 24\nreach 24! expression: (4 + (11 + (3 * 3)))"}, {"input": "11 4 10 5\n", "output": "(5) - (10) = -5, left: (5 - 10) = -5, 11, 4\n(11) + (-5) = 6, left: (11 + (5 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 + (5 - 10))) = 24\nreach 24! expression: (4 * (11 + (5 - 10)))"}, {"input": "11 4 10 5\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 4, 10\n(4) * (10) = 40, left: (4 * 10) = 40, (11 + 5) = 16\n(40) - (16) = 24, left: ((4 * 10) - (11 + 5)) = 24\nreach 24! expression: ((4 * 10) - (11 + 5))"}, {"input": "11 4 10 5\n", "output": "(4) * (10) = 40, left: (4 * 10) = 40, 11, 5\n(40) - (5) = 35, left: ((4 * 10) - 5) = 35, 11\n(35) - (11) = 24, left: (((4 * 10) - 5) - 11) = 24\nreach 24! expression: (((4 * 10) - 5) - 11)"}, {"input": "11 4 10 5\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 11, 4\n(11) - (5) = 6, left: (11 - (10 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (10 - 5))) = 24\nreach 24! expression: (4 * (11 - (10 - 5)))"}, {"input": "11 4 10 5\n", "output": "(5) - (10) = -5, left: (5 - 10) = -5, 11, 4\n(11) - (-5) = 16, left: (11 - (5 - 10)) = 16, 4\n(16) - (4) = 12, left: ((11 - (5 - 10)) - 4) = 12\nroll back, left: (11 - (5 - 10)) = 16, 4\nroll back, left: (5 - 10) = -5, 11, 4\n(11) + (-5) = 6, left: (11 + (5 - 10)) = 6, 4\n(4) - (6) = -2, left: (4 - (11 + (5 - 10))) = -2\nroll back, left: (11 + (5 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 + (5 - 10))) = 24\nreach 24! expression: (4 * (11 + (5 - 10)))"}, {"input": "11 4 10 5\n", "output": "(11) * (5) = 55, left: (11 * 5) = 55, 4, 10\n(4) + (55) = 59, left: (4 + (11 * 5)) = 59, 10\nroll back, left: (11 * 5) = 55, 4, 10\nroll back, left: 11 4 10 5\n(11) - (5) = 6, left: (11 - 5) = 6, 4, 10\nroll back, left: 11 4 10 5\n(11) + (5) = 16, left: (11 + 5) = 16, 4, 10\n(4) * (10) = 40, left: (4 * 10) = 40, (11 + 5) = 16\n(40) - (16) = 24, left: ((4 * 10) - (11 + 5)) = 24\nreach 24! expression: ((4 * 10) - (11 + 5))"}, {"input": "2 6 5 8\n", "output": "(6) + (8) = 14, left: (6 + 8) = 14, 2, 5\n(2) * (5) = 10, left: (2 * 5) = 10, (6 + 8) = 14\n(14) + (10) = 24, left: ((6 + 8) + (2 * 5)) = 24\nreach 24! expression: ((6 + 8) + (2 * 5))"}, {"input": "2 6 5 8\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (8 - 2) = 6\n(30) - (6) = 24, left: ((6 * 5) - (8 - 2)) = 24\nreach 24! expression: ((6 * 5) - (8 - 2))"}, {"input": "2 6 5 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (2 + 6)) = 24\nreach 24! expression: ((8 - 5) * (2 + 6))"}, {"input": "2 6 5 8\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 6, 8\n(6) - (3) = 3, left: (6 - (5 - 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (5 - 2))) = 24\nreach 24! expression: (8 * (6 - (5 - 2)))"}, {"input": "2 6 5 8\n", "output": "(2) + (6) = 8, left: (2 + 6) = 8, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (2 + 6) = 8\n(8) * (3) = 24, left: ((2 + 6) * (8 - 5)) = 24\nreach 24! expression: ((2 + 6) * (8 - 5))"}, {"input": "2 6 5 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 2, 6\nroll back, left: 2 6 5 8\n(5) * (8) = 40, left: (5 * 8) = 40, 2, 6\nroll back, left: 2 6 5 8\n(8) / (5) = 8/5, left: (8 / 5) = 8/5, 2, 6\nroll back, left: 2 6 5 8\n(8) - (5) = 3, left: (8 - 5) = 3, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (2 + 6)) = 24\nreach 24! expression: ((8 - 5) * (2 + 6))"}, {"input": "2 6 5 8\n", "output": "(6) + (8) = 14, left: (6 + 8) = 14, 2, 5\n(2) - (14) = -12, left: (2 - (6 + 8)) = -12, 5\nroll back, left: (6 + 8) = 14, 2, 5\n(14) / (2) = 7, left: ((6 + 8) / 2) = 7, 5\nroll back, left: (6 + 8) = 14, 2, 5\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, (6 + 8) = 14\nroll back, left: (6 + 8) = 14, 2, 5\n(2) * (5) = 10, left: (2 * 5) = 10, (6 + 8) = 14\n(14) + (10) = 24, left: ((6 + 8) + (2 * 5)) = 24\nreach 24! expression: ((6 + 8) + (2 * 5))"}, {"input": "2 6 5 8\n", "output": "(2) + (6) = 8, left: (2 + 6) = 8, 5, 8\n(8) * (8) = 64, left: (8 * (2 + 6)) = 64, 5\nroll back, left: (2 + 6) = 8, 5, 8\n(5) - (8) = -3, left: (5 - 8) = -3, (2 + 6) = 8\nroll back, left: (2 + 6) = 8, 5, 8\n(8) - (5) = 3, left: (8 - 5) = 3, (2 + 6) = 8\n(3) / (8) = 3/8, left: ((8 - 5) / (2 + 6)) = 3/8\nroll back, left: (8 - 5) = 3, (2 + 6) = 8\n(8) * (3) = 24, left: ((2 + 6) * (8 - 5)) = 24\nreach 24! expression: ((2 + 6) * (8 - 5))"}, {"input": "2 6 5 8\n", "output": "(2) / (5) = 2/5, left: (2 / 5) = 2/5, 6, 8\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, (2 / 5) = 2/5\nroll back, left: (2 / 5) = 2/5, 6, 8\nroll back, left: 2 6 5 8\n(5) - (2) = 3, left: (5 - 2) = 3, 6, 8\n(3) / (8) = 3/8, left: ((5 - 2) / 8) = 3/8, 6\nroll back, left: (5 - 2) = 3, 6, 8\n(6) - (3) = 3, left: (6 - (5 - 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (5 - 2))) = 24\nreach 24! expression: (8 * (6 - (5 - 2)))"}, {"input": "2 6 5 8\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 6, 5\n(6) + (1/4) = 25/4, left: (6 + (2 / 8)) = 25/4, 5\nroll back, left: (2 / 8) = 1/4, 6, 5\n(1/4) / (6) = 1/24, left: ((2 / 8) / 6) = 1/24, 5\nroll back, left: (2 / 8) = 1/4, 6, 5\nroll back, left: 2 6 5 8\n(8) - (2) = 6, left: (8 - 2) = 6, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (8 - 2) = 6\n(30) - (6) = 24, left: ((6 * 5) - (8 - 2)) = 24\nreach 24! expression: ((6 * 5) - (8 - 2))"}, {"input": "11 6 4 2\n", "output": "(11) + (4) = 15, left: (11 + 4) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (11 + 4)) = 30, 6\n(30) - (6) = 24, left: ((2 * (11 + 4)) - 6) = 24\nreach 24! expression: ((2 * (11 + 4)) - 6)"}, {"input": "11 6 4 2\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 6, 4\n(22) - (4) = 18, left: ((11 * 2) - 4) = 18, 6\n(6) + (18) = 24, left: (6 + ((11 * 2) - 4)) = 24\nreach 24! expression: (6 + ((11 * 2) - 4))"}, {"input": "11 6 4 2\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 6, 4\n(4) - (22) = -18, left: (4 - (11 * 2)) = -18, 6\n(6) - (-18) = 24, left: (6 - (4 - (11 * 2))) = 24\nreach 24! expression: (6 - (4 - (11 * 2)))"}, {"input": "11 6 4 2\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 6, 4\n(6) + (22) = 28, left: (6 + (11 * 2)) = 28, 4\n(28) - (4) = 24, left: ((6 + (11 * 2)) - 4) = 24\nreach 24! expression: ((6 + (11 * 2)) - 4)"}, {"input": "11 6 4 2\n", "output": "(11) + (2) = 13, left: (11 + 2) = 13, 6, 4\n(6) + (4) = 10, left: (6 + 4) = 10, (11 + 2) = 13\nroll back, left: (11 + 2) = 13, 6, 4\n(13) / (4) = 13/4, left: ((11 + 2) / 4) = 13/4, 6\nroll back, left: (11 + 2) = 13, 6, 4\nroll back, left: 11 6 4 2\n(11) * (2) = 22, left: (11 * 2) = 22, 6, 4\n(4) - (22) = -18, left: (4 - (11 * 2)) = -18, 6\n(6) - (-18) = 24, left: (6 - (4 - (11 * 2))) = 24\nreach 24! expression: (6 - (4 - (11 * 2)))"}, {"input": "11 6 4 2\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 6, 2\nroll back, left: 11 6 4 2\n(11) / (4) = 11/4, left: (11 / 4) = 11/4, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (11 / 4) = 11/4\nroll back, left: (11 / 4) = 11/4, 6, 2\nroll back, left: 11 6 4 2\n(11) + (4) = 15, left: (11 + 4) = 15, 6, 2\n(2) * (15) = 30, left: (2 * (11 + 4)) = 30, 6\n(30) - (6) = 24, left: ((2 * (11 + 4)) - 6) = 24\nreach 24! expression: ((2 * (11 + 4)) - 6)"}, {"input": "11 6 4 2\n", "output": "(11) / (2) = 11/2, left: (11 / 2) = 11/2, 6, 4\nroll back, left: 11 6 4 2\n(11) - (2) = 9, left: (11 - 2) = 9, 6, 4\n(4) - (6) = -2, left: (4 - 6) = -2, (11 - 2) = 9\nroll back, left: (11 - 2) = 9, 6, 4\nroll back, left: 11 6 4 2\n(11) * (2) = 22, left: (11 * 2) = 22, 6, 4\n(6) + (22) = 28, left: (6 + (11 * 2)) = 28, 4\n(28) - (4) = 24, left: ((6 + (11 * 2)) - 4) = 24\nreach 24! expression: ((6 + (11 * 2)) - 4)"}, {"input": "1 13 3 12\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 3, 12\n(3) * (12) = 36, left: (3 * (13 - 1)) = 36, 12\n(36) - (12) = 24, left: ((3 * (13 - 1)) - 12) = 24\nreach 24! expression: ((3 * (13 - 1)) - 12)"}, {"input": "1 13 3 12\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 1, 13\n(36) - (13) = 23, left: ((3 * 12) - 13) = 23, 1\n(1) + (23) = 24, left: (1 + ((3 * 12) - 13)) = 24\nreach 24! expression: (1 + ((3 * 12) - 13))"}, {"input": "1 13 3 12\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 1, 13\n(13) - (1) = 12, left: (13 - 1) = 12, (3 * 12) = 36\n(36) - (12) = 24, left: ((3 * 12) - (13 - 1)) = 24\nreach 24! expression: ((3 * 12) - (13 - 1))"}, {"input": "1 13 3 12\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 1, 13\n(1) + (36) = 37, left: (1 + (3 * 12)) = 37, 13\n(37) - (13) = 24, left: ((1 + (3 * 12)) - 13) = 24\nreach 24! expression: ((1 + (3 * 12)) - 13)"}, {"input": "1 13 3 12\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 13, 12\n(13) - (12) = 1, left: (13 - 12) = 1, (1 - 3) = -2\nroll back, left: (1 - 3) = -2, 13, 12\nroll back, left: 1 13 3 12\n(1) + (3) = 4, left: (1 + 3) = 4, 13, 12\nroll back, left: 1 13 3 12\n(13) - (1) = 12, left: (13 - 1) = 12, 3, 12\n(3) * (12) = 36, left: (3 * (13 - 1)) = 36, 12\n(36) - (12) = 24, left: ((3 * (13 - 1)) - 12) = 24\nreach 24! expression: ((3 * (13 - 1)) - 12)"}, {"input": "1 13 3 12\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 1, 12\n(12) / (1) = 12, left: (12 / 1) = 12, (3 - 13) = -10\nroll back, left: (3 - 13) = -10, 1, 12\nroll back, left: 1 13 3 12\n(12) - (3) = 9, left: (12 - 3) = 9, 1, 13\nroll back, left: 1 13 3 12\n(3) * (12) = 36, left: (3 * 12) = 36, 1, 13\n(1) + (36) = 37, left: (1 + (3 * 12)) = 37, 13\n(37) - (13) = 24, left: ((1 + (3 * 12)) - 13) = 24\nreach 24! expression: ((1 + (3 * 12)) - 13)"}, {"input": "1 13 3 12\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 13, 12\nroll back, left: 1 13 3 12\n(3) + (12) = 15, left: (3 + 12) = 15, 1, 13\n(1) + (13) = 14, left: (1 + 13) = 14, (3 + 12) = 15\nroll back, left: (3 + 12) = 15, 1, 13\nroll back, left: 1 13 3 12\n(3) * (12) = 36, left: (3 * 12) = 36, 1, 13\n(36) - (13) = 23, left: ((3 * 12) - 13) = 23, 1\n(1) + (23) = 24, left: (1 + ((3 * 12) - 13)) = 24\nreach 24! expression: (1 + ((3 * 12) - 13))"}, {"input": "7 3 6 8\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 6, 8\n(8) + (-4) = 4, left: (8 + (3 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 + (3 - 7))) = 24\nreach 24! expression: (6 * (8 + (3 - 7)))"}, {"input": "7 3 6 8\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 6, 8\n(8) - (4) = 4, left: (8 - (7 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (7 - 3))) = 24\nreach 24! expression: (6 * (8 - (7 - 3)))"}, {"input": "7 3 6 8\n", "output": "(7) + (8) = 15, left: (7 + 8) = 15, 3, 6\n(3) + (6) = 9, left: (3 + 6) = 9, (7 + 8) = 15\n(15) + (9) = 24, left: ((7 + 8) + (3 + 6)) = 24\nreach 24! expression: ((7 + 8) + (3 + 6))"}, {"input": "7 3 6 8\n", "output": "(6) + (8) = 14, left: (6 + 8) = 14, 7, 3\n(7) + (3) = 10, left: (7 + 3) = 10, (6 + 8) = 14\n(14) + (10) = 24, left: ((6 + 8) + (7 + 3)) = 24\nreach 24! expression: ((6 + 8) + (7 + 3))"}, {"input": "7 3 6 8\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 6, 8\nroll back, left: 7 3 6 8\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, 6, 8\nroll back, left: 7 3 6 8\n(3) - (7) = -4, left: (3 - 7) = -4, 6, 8\n(6) * (-4) = -24, left: (6 * (3 - 7)) = -24, 8\nroll back, left: (3 - 7) = -4, 6, 8\n(8) + (-4) = 4, left: (8 + (3 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 + (3 - 7))) = 24\nreach 24! expression: (6 * (8 + (3 - 7)))"}, {"input": "7 3 6 8\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 3, 6\n(7/8) / (3) = 7/24, left: ((7 / 8) / 3) = 7/24, 6\nroll back, left: (7 / 8) = 7/8, 3, 6\n(6) / (7/8) = 48/7, left: (6 / (7 / 8)) = 48/7, 3\nroll back, left: (7 / 8) = 7/8, 3, 6\nroll back, left: 7 3 6 8\n(7) + (8) = 15, left: (7 + 8) = 15, 3, 6\n(3) + (6) = 9, left: (3 + 6) = 9, (7 + 8) = 15\n(15) + (9) = 24, left: ((7 + 8) + (3 + 6)) = 24\nreach 24! expression: ((7 + 8) + (3 + 6))"}, {"input": "7 3 6 8\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 6, 8\n(6) * (8) = 48, left: (6 * 8) = 48, (3 / 7) = 3/7\nroll back, left: (3 / 7) = 3/7, 6, 8\nroll back, left: 7 3 6 8\n(7) * (3) = 21, left: (7 * 3) = 21, 6, 8\nroll back, left: 7 3 6 8\n(3) - (7) = -4, left: (3 - 7) = -4, 6, 8\n(8) + (-4) = 4, left: (8 + (3 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 + (3 - 7))) = 24\nreach 24! expression: (6 * (8 + (3 - 7)))"}, {"input": "7 3 6 8\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 6, 8\n(6) + (4) = 10, left: (6 + (7 - 3)) = 10, 8\nroll back, left: (7 - 3) = 4, 6, 8\n(6) - (8) = -2, left: (6 - 8) = -2, (7 - 3) = 4\n(4) / (-2) = -2, left: ((7 - 3) / (6 - 8)) = -2\nroll back, left: (6 - 8) = -2, (7 - 3) = 4\nroll back, left: (7 - 3) = 4, 6, 8\n(8) - (4) = 4, left: (8 - (7 - 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (7 - 3))) = 24\nreach 24! expression: (6 * (8 - (7 - 3)))"}, {"input": "7 3 6 8\n", "output": "(6) * (8) = 48, left: (6 * 8) = 48, 7, 3\nroll back, left: 7 3 6 8\n(6) - (8) = -2, left: (6 - 8) = -2, 7, 3\n(-2) - (7) = -9, left: ((6 - 8) - 7) = -9, 3\nroll back, left: (6 - 8) = -2, 7, 3\nroll back, left: 7 3 6 8\n(6) + (8) = 14, left: (6 + 8) = 14, 7, 3\n(7) + (3) = 10, left: (7 + 3) = 10, (6 + 8) = 14\n(14) + (10) = 24, left: ((6 + 8) + (7 + 3)) = 24\nreach 24! expression: ((6 + 8) + (7 + 3))"}, {"input": "2 6 10 11\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 10, 11\n(10) + (11) = 21, left: (10 + 11) = 21, (6 / 2) = 3\n(3) + (21) = 24, left: ((6 / 2) + (10 + 11)) = 24\nreach 24! expression: ((6 / 2) + (10 + 11))"}, {"input": "2 6 10 11\n", "output": "(6) + (11) = 17, left: (6 + 11) = 17, 2, 10\n(2) * (17) = 34, left: (2 * (6 + 11)) = 34, 10\n(34) - (10) = 24, left: ((2 * (6 + 11)) - 10) = 24\nreach 24! expression: ((2 * (6 + 11)) - 10)"}, {"input": "2 6 10 11\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 10, 11\n(11) + (3) = 14, left: (11 + (6 / 2)) = 14, 10\n(10) + (14) = 24, left: (10 + (11 + (6 / 2))) = 24\nreach 24! expression: (10 + (11 + (6 / 2)))"}, {"input": "2 6 10 11\n", "output": "(2) * (10) = 20, left: (2 * 10) = 20, 6, 11\nroll back, left: 2 6 10 11\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, 6, 11\nroll back, left: 2 6 10 11\n(2) - (10) = -8, left: (2 - 10) = -8, 6, 11\nroll back, left: 2 6 10 11\n(6) + (11) = 17, left: (6 + 11) = 17, 2, 10\n(2) * (17) = 34, left: (2 * (6 + 11)) = 34, 10\n(34) - (10) = 24, left: ((2 * (6 + 11)) - 10) = 24\nreach 24! expression: ((2 * (6 + 11)) - 10)"}, {"input": "2 6 10 11\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 2, 11\nroll back, left: 2 6 10 11\n(2) - (10) = -8, left: (2 - 10) = -8, 6, 11\n(-8) - (6) = -14, left: ((2 - 10) - 6) = -14, 11\nroll back, left: (2 - 10) = -8, 6, 11\nroll back, left: 2 6 10 11\n(6) / (2) = 3, left: (6 / 2) = 3, 10, 11\n(10) + (11) = 21, left: (10 + 11) = 21, (6 / 2) = 3\n(3) + (21) = 24, left: ((6 / 2) + (10 + 11)) = 24\nreach 24! expression: ((6 / 2) + (10 + 11))"}, {"input": "7 3 5 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (5 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (5 / 5))) = 24\nreach 24! expression: (3 * (7 + (5 / 5)))"}, {"input": "7 3 5 5\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (7 + 5) = 12\n(12) * (2) = 24, left: ((7 + 5) * (5 - 3)) = 24\nreach 24! expression: ((7 + 5) * (5 - 3))"}, {"input": "7 3 5 5\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (7 + 5)) = 24\nreach 24! expression: ((5 - 3) * (7 + 5))"}, {"input": "7 3 5 5\n", "output": "(5) / (3) = 5/3, left: (5 / 3) = 5/3, 7, 5\nroll back, left: 7 3 5 5\n(5) - (3) = 2, left: (5 - 3) = 2, 7, 5\n(5) / (7) = 5/7, left: (5 / 7) = 5/7, (5 - 3) = 2\n(5/7) - (2) = -9/7, left: ((5 / 7) - (5 - 3)) = -9/7\nroll back, left: (5 / 7) = 5/7, (5 - 3) = 2\nroll back, left: (5 - 3) = 2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (7 + 5)) = 24\nreach 24! expression: ((5 - 3) * (7 + 5))"}, {"input": "7 3 5 5\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 3, 5\n(5/7) / (5) = 1/7, left: ((5 / 7) / 5) = 1/7, 3\nroll back, left: (5 / 7) = 5/7, 3, 5\nroll back, left: 7 3 5 5\n(7) * (5) = 35, left: (7 * 5) = 35, 3, 5\nroll back, left: 7 3 5 5\n(7) + (5) = 12, left: (7 + 5) = 12, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (7 + 5) = 12\n(12) * (2) = 24, left: ((7 + 5) * (5 - 3)) = 24\nreach 24! expression: ((7 + 5) * (5 - 3))"}, {"input": "7 3 5 5\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 7, 5\nroll back, left: 7 3 5 5\n(5) - (3) = 2, left: (5 - 3) = 2, 7, 5\n(2) / (5) = 2/5, left: ((5 - 3) / 5) = 2/5, 7\n(7) + (2/5) = 37/5, left: (7 + ((5 - 3) / 5)) = 37/5\nroll back, left: ((5 - 3) / 5) = 2/5, 7\nroll back, left: (5 - 3) = 2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (7 + 5)) = 24\nreach 24! expression: ((5 - 3) * (7 + 5))"}, {"input": "7 3 5 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 7, 3\n(7) - (1) = 6, left: (7 - (5 / 5)) = 6, 3\nroll back, left: (5 / 5) = 1, 7, 3\n(7) / (1) = 7, left: (7 / (5 / 5)) = 7, 3\nroll back, left: (5 / 5) = 1, 7, 3\n(7) + (1) = 8, left: (7 + (5 / 5)) = 8, 3\n(8) / (3) = 8/3, left: ((7 + (5 / 5)) / 3) = 8/3\nroll back, left: (7 + (5 / 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 + (5 / 5))) = 24\nreach 24! expression: (3 * (7 + (5 / 5)))"}, {"input": "10 2 2 13\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 10, 13\n(10) + (13) = 23, left: (10 + 13) = 23, (2 / 2) = 1\n(1) + (23) = 24, left: ((2 / 2) + (10 + 13)) = 24\nreach 24! expression: ((2 / 2) + (10 + 13))"}, {"input": "10 2 2 13\n", "output": "(10) + (13) = 23, left: (10 + 13) = 23, 2, 2\n(2) / (2) = 1, left: (2 / 2) = 1, (10 + 13) = 23\n(23) + (1) = 24, left: ((10 + 13) + (2 / 2)) = 24\nreach 24! expression: ((10 + 13) + (2 / 2))"}, {"input": "10 2 2 13\n", "output": "(13) / (2) = 13/2, left: (13 / 2) = 13/2, 10, 2\nroll back, left: 10 2 2 13\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, 2, 13\nroll back, left: 10 2 2 13\n(10) - (2) = 8, left: (10 - 2) = 8, 2, 13\nroll back, left: 10 2 2 13\n(10) + (13) = 23, left: (10 + 13) = 23, 2, 2\n(2) / (2) = 1, left: (2 / 2) = 1, (10 + 13) = 23\n(23) + (1) = 24, left: ((10 + 13) + (2 / 2)) = 24\nreach 24! expression: ((10 + 13) + (2 / 2))"}, {"input": "10 2 2 13\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 2, 13\nroll back, left: 10 2 2 13\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, 2, 13\n(2) / (1/5) = 10, left: (2 / (2 / 10)) = 10, 13\nroll back, left: (2 / 10) = 1/5, 2, 13\nroll back, left: 10 2 2 13\n(10) + (13) = 23, left: (10 + 13) = 23, 2, 2\n(2) / (2) = 1, left: (2 / 2) = 1, (10 + 13) = 23\n(23) + (1) = 24, left: ((10 + 13) + (2 / 2)) = 24\nreach 24! expression: ((10 + 13) + (2 / 2))"}, {"input": "10 2 2 13\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 2, 13\nroll back, left: 10 2 2 13\n(10) - (2) = 8, left: (10 - 2) = 8, 2, 13\nroll back, left: 10 2 2 13\n(2) + (2) = 4, left: (2 + 2) = 4, 10, 13\nroll back, left: 10 2 2 13\n(2) / (2) = 1, left: (2 / 2) = 1, 10, 13\n(10) + (13) = 23, left: (10 + 13) = 23, (2 / 2) = 1\n(1) + (23) = 24, left: ((2 / 2) + (10 + 13)) = 24\nreach 24! expression: ((2 / 2) + (10 + 13))"}, {"input": "8 3 11 8\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 8, 11\n(8) + (11) = 19, left: (8 + 11) = 19, (8 - 3) = 5\n(5) + (19) = 24, left: ((8 - 3) + (8 + 11)) = 24\nreach 24! expression: ((8 - 3) + (8 + 11))"}, {"input": "8 3 11 8\n", "output": "(11) + (8) = 19, left: (11 + 8) = 19, 8, 3\n(3) - (19) = -16, left: (3 - (11 + 8)) = -16, 8\n(8) - (-16) = 24, left: (8 - (3 - (11 + 8))) = 24\nreach 24! expression: (8 - (3 - (11 + 8)))"}, {"input": "8 3 11 8\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 8, 8\n(8) + (8) = 16, left: (8 + (11 - 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 + (11 - 3))) = 24\nreach 24! expression: (8 + (8 + (11 - 3)))"}, {"input": "8 3 11 8\n", "output": "(11) / (8) = 11/8, left: (11 / 8) = 11/8, 8, 3\nroll back, left: 8 3 11 8\n(8) - (11) = -3, left: (8 - 11) = -3, 8, 3\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (8 - 11) = -3\nroll back, left: (8 - 11) = -3, 8, 3\nroll back, left: 8 3 11 8\n(11) + (8) = 19, left: (11 + 8) = 19, 8, 3\n(3) - (19) = -16, left: (3 - (11 + 8)) = -16, 8\n(8) - (-16) = 24, left: (8 - (3 - (11 + 8))) = 24\nreach 24! expression: (8 - (3 - (11 + 8)))"}, {"input": "8 3 11 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 8, 11\n(8/3) - (11) = -25/3, left: ((8 / 3) - 11) = -25/3, 8\nroll back, left: (8 / 3) = 8/3, 8, 11\nroll back, left: 8 3 11 8\n(3) + (8) = 11, left: (3 + 8) = 11, 8, 11\nroll back, left: 8 3 11 8\n(8) - (3) = 5, left: (8 - 3) = 5, 8, 11\n(8) + (11) = 19, left: (8 + 11) = 19, (8 - 3) = 5\n(5) + (19) = 24, left: ((8 - 3) + (8 + 11)) = 24\nreach 24! expression: ((8 - 3) + (8 + 11))"}, {"input": "8 3 11 8\n", "output": "(3) + (11) = 14, left: (3 + 11) = 14, 8, 8\n(8) + (14) = 22, left: (8 + (3 + 11)) = 22, 8\nroll back, left: (3 + 11) = 14, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (3 + 11) = 14\nroll back, left: (3 + 11) = 14, 8, 8\nroll back, left: 8 3 11 8\n(11) - (3) = 8, left: (11 - 3) = 8, 8, 8\n(8) + (8) = 16, left: (8 + (11 - 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 + (11 - 3))) = 24\nreach 24! expression: (8 + (8 + (11 - 3)))"}, {"input": "1 13 3 5\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 3, 5\n(5) - (3) = 2, left: (5 - 3) = 2, (13 - 1) = 12\n(12) * (2) = 24, left: ((13 - 1) * (5 - 3)) = 24\nreach 24! expression: ((13 - 1) * (5 - 3))"}, {"input": "1 13 3 5\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 13, 3\n(13) - (5) = 8, left: (13 - (1 * 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (1 * 5))) = 24\nreach 24! expression: (3 * (13 - (1 * 5)))"}, {"input": "1 13 3 5\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 1, 13\n(1) - (13) = -12, left: (1 - 13) = -12, (3 - 5) = -2\n(-2) * (-12) = 24, left: ((3 - 5) * (1 - 13)) = 24\nreach 24! expression: ((3 - 5) * (1 - 13))"}, {"input": "1 13 3 5\n", "output": "(1) * (5) = 5, left: (1 * 5) = 5, 13, 3\n(13) + (5) = 18, left: (13 + (1 * 5)) = 18, 3\nroll back, left: (1 * 5) = 5, 13, 3\n(13) / (5) = 13/5, left: (13 / (1 * 5)) = 13/5, 3\nroll back, left: (1 * 5) = 5, 13, 3\n(13) * (5) = 65, left: (13 * (1 * 5)) = 65, 3\nroll back, left: (1 * 5) = 5, 13, 3\n(13) - (5) = 8, left: (13 - (1 * 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (1 * 5))) = 24\nreach 24! expression: (3 * (13 - (1 * 5)))"}, {"input": "1 13 3 5\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 13, 3\n(13) * (6) = 78, left: (13 * (1 + 5)) = 78, 3\nroll back, left: (1 + 5) = 6, 13, 3\n(6) - (3) = 3, left: ((1 + 5) - 3) = 3, 13\nroll back, left: (1 + 5) = 6, 13, 3\nroll back, left: 1 13 3 5\n(1) * (5) = 5, left: (1 * 5) = 5, 13, 3\n(13) - (5) = 8, left: (13 - (1 * 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (1 * 5))) = 24\nreach 24! expression: (3 * (13 - (1 * 5)))"}, {"input": "1 13 3 5\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 13, 3\n(-4) / (13) = -4/13, left: ((1 - 5) / 13) = -4/13, 3\nroll back, left: (1 - 5) = -4, 13, 3\nroll back, left: 1 13 3 5\n(5) - (1) = 4, left: (5 - 1) = 4, 13, 3\nroll back, left: 1 13 3 5\n(1) * (5) = 5, left: (1 * 5) = 5, 13, 3\n(13) - (5) = 8, left: (13 - (1 * 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (1 * 5))) = 24\nreach 24! expression: (3 * (13 - (1 * 5)))"}, {"input": "8 13 5 5\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 8, 5\n(5) - (8) = -3, left: (5 - 8) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (5 - 8)) = 24\nreach 24! expression: ((5 - 13) * (5 - 8))"}, {"input": "8 13 5 5\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 8, 13\n(13) - (10) = 3, left: (13 - (5 + 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (5 + 5))) = 24\nreach 24! expression: (8 * (13 - (5 + 5)))"}, {"input": "8 13 5 5\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (13 - 5)) = 24\nreach 24! expression: ((8 - 5) * (13 - 5))"}, {"input": "8 13 5 5\n", "output": "(8) + (13) = 21, left: (8 + 13) = 21, 5, 5\n(5) * (21) = 105, left: (5 * (8 + 13)) = 105, 5\nroll back, left: (8 + 13) = 21, 5, 5\nroll back, left: 8 13 5 5\n(8) / (13) = 8/13, left: (8 / 13) = 8/13, 5, 5\nroll back, left: 8 13 5 5\n(8) - (5) = 3, left: (8 - 5) = 3, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (13 - 5)) = 24\nreach 24! expression: ((8 - 5) * (13 - 5))"}, {"input": "8 13 5 5\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 8, 13\nroll back, left: 8 13 5 5\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 13\nroll back, left: 8 13 5 5\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 13\nroll back, left: 8 13 5 5\n(5) + (5) = 10, left: (5 + 5) = 10, 8, 13\n(13) - (10) = 3, left: (13 - (5 + 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (5 + 5))) = 24\nreach 24! expression: (8 * (13 - (5 + 5)))"}, {"input": "8 13 5 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 8, 13\nroll back, left: 8 13 5 5\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 13\n(13) - (8) = 5, left: (13 - 8) = 5, (5 / 5) = 1\nroll back, left: (5 / 5) = 1, 8, 13\nroll back, left: 8 13 5 5\n(5) + (5) = 10, left: (5 + 5) = 10, 8, 13\n(13) - (10) = 3, left: (13 - (5 + 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (5 + 5))) = 24\nreach 24! expression: (8 * (13 - (5 + 5)))"}, {"input": "8 13 5 5\n", "output": "(8) * (5) = 40, left: (8 * 5) = 40, 13, 5\n(13) - (40) = -27, left: (13 - (8 * 5)) = -27, 5\nroll back, left: (8 * 5) = 40, 13, 5\n(13) * (40) = 520, left: (13 * (8 * 5)) = 520, 5\nroll back, left: (8 * 5) = 40, 13, 5\nroll back, left: 8 13 5 5\n(8) - (5) = 3, left: (8 - 5) = 3, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (13 - 5)) = 24\nreach 24! expression: ((8 - 5) * (13 - 5))"}, {"input": "5 11 1 5\n", "output": "(5) - (11) = -6, left: (5 - 11) = -6, 1, 5\n(1) - (5) = -4, left: (1 - 5) = -4, (5 - 11) = -6\n(-6) * (-4) = 24, left: ((5 - 11) * (1 - 5)) = 24\nreach 24! expression: ((5 - 11) * (1 - 5))"}, {"input": "5 11 1 5\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 5, 11\n(5) - (11) = -6, left: (5 - 11) = -6, (1 - 5) = -4\n(-4) * (-6) = 24, left: ((1 - 5) * (5 - 11)) = 24\nreach 24! expression: ((1 - 5) * (5 - 11))"}, {"input": "5 11 1 5\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (11 - 5) = 6\n(6) * (4) = 24, left: ((11 - 5) * (5 - 1)) = 24\nreach 24! expression: ((11 - 5) * (5 - 1))"}, {"input": "5 11 1 5\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (11 - 5)) = 24\nreach 24! expression: ((5 - 1) * (11 - 5))"}, {"input": "5 11 1 5\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 5, 11\nroll back, left: 5 11 1 5\n(1) / (5) = 1/5, left: (1 / 5) = 1/5, 5, 11\n(11) + (1/5) = 56/5, left: (11 + (1 / 5)) = 56/5, 5\nroll back, left: (1 / 5) = 1/5, 5, 11\nroll back, left: 5 11 1 5\n(5) - (1) = 4, left: (5 - 1) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (5 - 1) = 4\n(4) * (6) = 24, left: ((5 - 1) * (11 - 5)) = 24\nreach 24! expression: ((5 - 1) * (11 - 5))"}, {"input": "5 11 1 5\n", "output": "(11) / (1) = 11, left: (11 / 1) = 11, 5, 5\nroll back, left: 5 11 1 5\n(11) - (1) = 10, left: (11 - 1) = 10, 5, 5\n(5) / (10) = 1/2, left: (5 / (11 - 1)) = 1/2, 5\nroll back, left: (11 - 1) = 10, 5, 5\nroll back, left: 5 11 1 5\n(11) - (5) = 6, left: (11 - 5) = 6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (11 - 5) = 6\n(6) * (4) = 24, left: ((11 - 5) * (5 - 1)) = 24\nreach 24! expression: ((11 - 5) * (5 - 1))"}, {"input": "5 11 1 5\n", "output": "(1) - (5) = -4, left: (1 - 5) = -4, 5, 11\n(5) + (-4) = 1, left: (5 + (1 - 5)) = 1, 11\nroll back, left: (1 - 5) = -4, 5, 11\n(-4) - (5) = -9, left: ((1 - 5) - 5) = -9, 11\nroll back, left: (1 - 5) = -4, 5, 11\n(11) / (5) = 11/5, left: (11 / 5) = 11/5, (1 - 5) = -4\nroll back, left: (1 - 5) = -4, 5, 11\n(5) - (11) = -6, left: (5 - 11) = -6, (1 - 5) = -4\n(-4) * (-6) = 24, left: ((1 - 5) * (5 - 11)) = 24\nreach 24! expression: ((1 - 5) * (5 - 11))"}, {"input": "5 11 1 5\n", "output": "(11) * (5) = 55, left: (11 * 5) = 55, 5, 1\nroll back, left: 5 11 1 5\n(5) / (11) = 5/11, left: (5 / 11) = 5/11, 5, 1\nroll back, left: 5 11 1 5\n(11) - (5) = 6, left: (11 - 5) = 6, 5, 1\n(5) * (1) = 5, left: (5 * 1) = 5, (11 - 5) = 6\nroll back, left: (11 - 5) = 6, 5, 1\n(5) - (1) = 4, left: (5 - 1) = 4, (11 - 5) = 6\n(6) * (4) = 24, left: ((11 - 5) * (5 - 1)) = 24\nreach 24! expression: ((11 - 5) * (5 - 1))"}, {"input": "4 5 8 11\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 5, 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, (4 + 11) = 15\n(15) / (5/8) = 24, left: ((4 + 11) / (5 / 8)) = 24\nreach 24! expression: ((4 + 11) / (5 / 8))"}, {"input": "4 5 8 11\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 4, 8\n(8) - (4) = 4, left: (8 - 4) = 4, (11 - 5) = 6\n(6) * (4) = 24, left: ((11 - 5) * (8 - 4)) = 24\nreach 24! expression: ((11 - 5) * (8 - 4))"}, {"input": "4 5 8 11\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 5, 8\n(5) / (15) = 1/3, left: (5 / (4 + 11)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (5 / (4 + 11))) = 24\nreach 24! expression: (8 / (5 / (4 + 11)))"}, {"input": "4 5 8 11\n", "output": "(4) + (11) = 15, left: (4 + 11) = 15, 5, 8\n(15) / (5) = 3, left: ((4 + 11) / 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((4 + 11) / 5)) = 24\nreach 24! expression: (8 * ((4 + 11) / 5))"}, {"input": "4 5 8 11\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 5, 11\n(5) - (11) = -6, left: (5 - 11) = -6, (4 - 8) = -4\n(-4) * (-6) = 24, left: ((4 - 8) * (5 - 11)) = 24\nreach 24! expression: ((4 - 8) * (5 - 11))"}, {"input": "4 5 8 11\n", "output": "(8) + (11) = 19, left: (8 + 11) = 19, 4, 5\n(5) / (19) = 5/19, left: (5 / (8 + 11)) = 5/19, 4\nroll back, left: (8 + 11) = 19, 4, 5\nroll back, left: 4 5 8 11\n(8) * (11) = 88, left: (8 * 11) = 88, 4, 5\nroll back, left: 4 5 8 11\n(4) + (11) = 15, left: (4 + 11) = 15, 5, 8\n(5) / (15) = 1/3, left: (5 / (4 + 11)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (5 / (4 + 11))) = 24\nreach 24! expression: (8 / (5 / (4 + 11)))"}, {"input": "4 5 8 11\n", "output": "(5) + (11) = 16, left: (5 + 11) = 16, 4, 8\n(16) / (8) = 2, left: ((5 + 11) / 8) = 2, 4\nroll back, left: (5 + 11) = 16, 4, 8\nroll back, left: 4 5 8 11\n(5) * (11) = 55, left: (5 * 11) = 55, 4, 8\nroll back, left: 4 5 8 11\n(11) - (5) = 6, left: (11 - 5) = 6, 4, 8\n(8) - (4) = 4, left: (8 - 4) = 4, (11 - 5) = 6\n(6) * (4) = 24, left: ((11 - 5) * (8 - 4)) = 24\nreach 24! expression: ((11 - 5) * (8 - 4))"}, {"input": "4 5 8 11\n", "output": "(4) * (5) = 20, left: (4 * 5) = 20, 8, 11\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, (4 * 5) = 20\nroll back, left: (4 * 5) = 20, 8, 11\nroll back, left: 4 5 8 11\n(4) - (5) = -1, left: (4 - 5) = -1, 8, 11\nroll back, left: 4 5 8 11\n(4) - (8) = -4, left: (4 - 8) = -4, 5, 11\n(5) - (11) = -6, left: (5 - 11) = -6, (4 - 8) = -4\n(-4) * (-6) = 24, left: ((4 - 8) * (5 - 11)) = 24\nreach 24! expression: ((4 - 8) * (5 - 11))"}, {"input": "4 5 8 11\n", "output": "(11) - (4) = 7, left: (11 - 4) = 7, 5, 8\nroll back, left: 4 5 8 11\n(4) * (11) = 44, left: (4 * 11) = 44, 5, 8\nroll back, left: 4 5 8 11\n(4) / (11) = 4/11, left: (4 / 11) = 4/11, 5, 8\nroll back, left: 4 5 8 11\n(4) + (11) = 15, left: (4 + 11) = 15, 5, 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, (4 + 11) = 15\n(15) / (5/8) = 24, left: ((4 + 11) / (5 / 8)) = 24\nreach 24! expression: ((4 + 11) / (5 / 8))"}, {"input": "4 5 8 11\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 8, 11\nroll back, left: 4 5 8 11\n(4) / (11) = 4/11, left: (4 / 11) = 4/11, 5, 8\n(4/11) / (8) = 1/22, left: ((4 / 11) / 8) = 1/22, 5\nroll back, left: (4 / 11) = 4/11, 5, 8\nroll back, left: 4 5 8 11\n(4) + (11) = 15, left: (4 + 11) = 15, 5, 8\n(15) / (5) = 3, left: ((4 + 11) / 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((4 + 11) / 5)) = 24\nreach 24! expression: (8 * ((4 + 11) / 5))"}, {"input": "11 2 4 8\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 2, 4\n(2) * (4) = 8, left: (2 * 4) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (2 * 4)) = 24\nreach 24! expression: ((11 - 8) * (2 * 4))"}, {"input": "11 2 4 8\n", "output": "(11) / (4) = 11/4, left: (11 / 4) = 11/4, 2, 8\n(8) * (11/4) = 22, left: (8 * (11 / 4)) = 22, 2\n(2) + (22) = 24, left: (2 + (8 * (11 / 4))) = 24\nreach 24! expression: (2 + (8 * (11 / 4)))"}, {"input": "11 2 4 8\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 4, 8\n(8) / (4) = 2, left: (8 / 4) = 2, (11 * 2) = 22\n(22) + (2) = 24, left: ((11 * 2) + (8 / 4)) = 24\nreach 24! expression: ((11 * 2) + (8 / 4))"}, {"input": "11 2 4 8\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 11, 4\nroll back, left: 11 2 4 8\n(2) / (11) = 2/11, left: (2 / 11) = 2/11, 4, 8\n(4) / (2/11) = 22, left: (4 / (2 / 11)) = 22, 8\nroll back, left: (2 / 11) = 2/11, 4, 8\nroll back, left: 11 2 4 8\n(11) * (2) = 22, left: (11 * 2) = 22, 4, 8\n(8) / (4) = 2, left: (8 / 4) = 2, (11 * 2) = 22\n(22) + (2) = 24, left: ((11 * 2) + (8 / 4)) = 24\nreach 24! expression: ((11 * 2) + (8 / 4))"}, {"input": "11 2 4 8\n", "output": "(11) + (8) = 19, left: (11 + 8) = 19, 2, 4\nroll back, left: 11 2 4 8\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, 2, 4\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, (11 / 8) = 11/8\nroll back, left: (11 / 8) = 11/8, 2, 4\nroll back, left: 11 2 4 8\n(11) - (8) = 3, left: (11 - 8) = 3, 2, 4\n(2) * (4) = 8, left: (2 * 4) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (2 * 4)) = 24\nreach 24! expression: ((11 - 8) * (2 * 4))"}, {"input": "11 2 4 8\n", "output": "(11) * (4) = 44, left: (11 * 4) = 44, 2, 8\n(2) - (8) = -6, left: (2 - 8) = -6, (11 * 4) = 44\nroll back, left: (11 * 4) = 44, 2, 8\nroll back, left: 11 2 4 8\n(4) - (11) = -7, left: (4 - 11) = -7, 2, 8\nroll back, left: 11 2 4 8\n(11) / (4) = 11/4, left: (11 / 4) = 11/4, 2, 8\n(8) * (11/4) = 22, left: (8 * (11 / 4)) = 22, 2\n(2) + (22) = 24, left: (2 + (8 * (11 / 4))) = 24\nreach 24! expression: (2 + (8 * (11 / 4)))"}, {"input": "11 2 4 8\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 2, 4\n(4) - (2) = 2, left: (4 - 2) = 2, (11 - 8) = 3\nroll back, left: (11 - 8) = 3, 2, 4\n(4) / (2) = 2, left: (4 / 2) = 2, (11 - 8) = 3\n(2) - (3) = -1, left: ((4 / 2) - (11 - 8)) = -1\nroll back, left: (4 / 2) = 2, (11 - 8) = 3\nroll back, left: (11 - 8) = 3, 2, 4\n(2) * (4) = 8, left: (2 * 4) = 8, (11 - 8) = 3\n(3) * (8) = 24, left: ((11 - 8) * (2 * 4)) = 24\nreach 24! expression: ((11 - 8) * (2 * 4))"}, {"input": "1 7 12 4\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 1, 7\n(1) + (7) = 8, left: (1 + 7) = 8, (4 / 12) = 1/3\n(8) / (1/3) = 24, left: ((1 + 7) / (4 / 12)) = 24\nreach 24! expression: ((1 + 7) / (4 / 12))"}, {"input": "1 7 12 4\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 7, 12\n(12) + (5) = 17, left: (12 + (1 + 4)) = 17, 7\n(7) + (17) = 24, left: (7 + (12 + (1 + 4))) = 24\nreach 24! expression: (7 + (12 + (1 + 4)))"}, {"input": "1 7 12 4\n", "output": "(1) + (12) = 13, left: (1 + 12) = 13, 7, 4\n(4) + (13) = 17, left: (4 + (1 + 12)) = 17, 7\n(7) + (17) = 24, left: (7 + (4 + (1 + 12))) = 24\nreach 24! expression: (7 + (4 + (1 + 12)))"}, {"input": "1 7 12 4\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 12, 4\n(12) + (-6) = 6, left: (12 + (1 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (12 + (1 - 7))) = 24\nreach 24! expression: (4 * (12 + (1 - 7)))"}, {"input": "1 7 12 4\n", "output": "(1) * (12) = 12, left: (1 * 12) = 12, 7, 4\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, (1 * 12) = 12\nroll back, left: (1 * 12) = 12, 7, 4\nroll back, left: 1 7 12 4\n(12) - (1) = 11, left: (12 - 1) = 11, 7, 4\nroll back, left: 1 7 12 4\n(1) + (12) = 13, left: (1 + 12) = 13, 7, 4\n(4) + (13) = 17, left: (4 + (1 + 12)) = 17, 7\n(7) + (17) = 24, left: (7 + (4 + (1 + 12))) = 24\nreach 24! expression: (7 + (4 + (1 + 12)))"}, {"input": "1 7 12 4\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 7, 12\n(12) + (5) = 17, left: (12 + (1 + 4)) = 17, 7\n(17) / (7) = 17/7, left: ((12 + (1 + 4)) / 7) = 17/7\nroll back, left: (12 + (1 + 4)) = 17, 7\n(7) * (17) = 119, left: (7 * (12 + (1 + 4))) = 119\nroll back, left: (12 + (1 + 4)) = 17, 7\n(7) + (17) = 24, left: (7 + (12 + (1 + 4))) = 24\nreach 24! expression: (7 + (12 + (1 + 4)))"}, {"input": "1 7 12 4\n", "output": "(1) - (12) = -11, left: (1 - 12) = -11, 7, 4\n(-11) - (4) = -15, left: ((1 - 12) - 4) = -15, 7\nroll back, left: (1 - 12) = -11, 7, 4\nroll back, left: 1 7 12 4\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, 7, 4\nroll back, left: 1 7 12 4\n(1) + (12) = 13, left: (1 + 12) = 13, 7, 4\n(4) + (13) = 17, left: (4 + (1 + 12)) = 17, 7\n(7) + (17) = 24, left: (7 + (4 + (1 + 12))) = 24\nreach 24! expression: (7 + (4 + (1 + 12)))"}, {"input": "1 7 12 4\n", "output": "(1) * (7) = 7, left: (1 * 7) = 7, 12, 4\n(7) / (12) = 7/12, left: ((1 * 7) / 12) = 7/12, 4\nroll back, left: (1 * 7) = 7, 12, 4\nroll back, left: 1 7 12 4\n(1) - (7) = -6, left: (1 - 7) = -6, 12, 4\n(12) * (4) = 48, left: (12 * 4) = 48, (1 - 7) = -6\nroll back, left: (1 - 7) = -6, 12, 4\n(12) + (-6) = 6, left: (12 + (1 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (12 + (1 - 7))) = 24\nreach 24! expression: (4 * (12 + (1 - 7)))"}, {"input": "1 7 12 4\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 7, 12\n(12) + (5) = 17, left: (12 + (1 + 4)) = 17, 7\n(17) / (7) = 17/7, left: ((12 + (1 + 4)) / 7) = 17/7\nroll back, left: (12 + (1 + 4)) = 17, 7\n(7) * (17) = 119, left: (7 * (12 + (1 + 4))) = 119\nroll back, left: (12 + (1 + 4)) = 17, 7\n(7) + (17) = 24, left: (7 + (12 + (1 + 4))) = 24\nreach 24! expression: (7 + (12 + (1 + 4)))"}, {"input": "1 7 12 4\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 7, 12\n(12) + (5) = 17, left: (12 + (1 + 4)) = 17, 7\n(17) / (7) = 17/7, left: ((12 + (1 + 4)) / 7) = 17/7\nroll back, left: (12 + (1 + 4)) = 17, 7\n(7) * (17) = 119, left: (7 * (12 + (1 + 4))) = 119\nroll back, left: (12 + (1 + 4)) = 17, 7\n(7) + (17) = 24, left: (7 + (12 + (1 + 4))) = 24\nreach 24! expression: (7 + (12 + (1 + 4)))"}, {"input": "1 7 12 4\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 7, 12\n(12) + (5) = 17, left: (12 + (1 + 4)) = 17, 7\n(17) / (7) = 17/7, left: ((12 + (1 + 4)) / 7) = 17/7\nroll back, left: (12 + (1 + 4)) = 17, 7\n(7) * (17) = 119, left: (7 * (12 + (1 + 4))) = 119\nroll back, left: (12 + (1 + 4)) = 17, 7\n(7) + (17) = 24, left: (7 + (12 + (1 + 4))) = 24\nreach 24! expression: (7 + (12 + (1 + 4)))"}, {"input": "4 4 6 13\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (13 - 6)) = 28, 4\n(28) - (4) = 24, left: ((4 * (13 - 6)) - 4) = 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(13) / (4) = 13/4, left: (13 / 4) = 13/4, 4, 6\n(6) - (13/4) = 11/4, left: (6 - (13 / 4)) = 11/4, 4\nroll back, left: (13 / 4) = 13/4, 4, 6\nroll back, left: 4 4 6 13\n(4) + (13) = 17, left: (4 + 13) = 17, 4, 6\nroll back, left: 4 4 6 13\n(13) - (6) = 7, left: (13 - 6) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (13 - 6)) = 28, 4\n(28) - (4) = 24, left: ((4 * (13 - 6)) - 4) = 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 6, 13\nroll back, left: 4 4 6 13\n(4) + (4) = 8, left: (4 + 4) = 8, 6, 13\nroll back, left: 4 4 6 13\n(6) - (13) = -7, left: (6 - 13) = -7, 4, 4\nroll back, left: 4 4 6 13\n(13) - (6) = 7, left: (13 - 6) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (13 - 6)) = 28, 4\n(28) - (4) = 24, left: ((4 * (13 - 6)) - 4) = 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 6, 13\n(6) + (13) = 19, left: (6 + 13) = 19, (4 / 4) = 1\nroll back, left: (4 / 4) = 1, 6, 13\nroll back, left: 4 4 6 13\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, 4, 13\nroll back, left: 4 4 6 13\n(13) - (6) = 7, left: (13 - 6) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (13 - 6)) = 28, 4\n(28) - (4) = 24, left: ((4 * (13 - 6)) - 4) = 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) - (4) = 0, left: (4 - 4) = 0, 6, 13\n(6) - (13) = -7, left: (6 - 13) = -7, (4 - 4) = 0\nroll back, left: (4 - 4) = 0, 6, 13\nroll back, left: 4 4 6 13\n(4) - (13) = -9, left: (4 - 13) = -9, 4, 6\nroll back, left: 4 4 6 13\n(13) - (6) = 7, left: (13 - 6) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (13 - 6)) = 28, 4\n(28) - (4) = 24, left: ((4 * (13 - 6)) - 4) = 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "4 4 6 13\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 4, 6\nroll back, left: 4 4 6 13\n(13) / (4) = 13/4, left: (13 / 4) = 13/4, 4, 6\nroll back, left: 4 4 6 13\n(4) * (6) = 24, left: (4 * 6) = 24, 4, 13\nroll back, left: 4 4 6 13\n(13) - (6) = 7, left: (13 - 6) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (13 - 6)) = 28, 4\n(28) - (4) = 24, left: ((4 * (13 - 6)) - 4) = 24\nreach 24! expression: ((4 * (13 - 6)) - 4)"}, {"input": "12 5 4 6\n", "output": "(12) / (5) = 12/5, left: (12 / 5) = 12/5, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (12 / 5) = 12/5\n(12/5) * (10) = 24, left: ((12 / 5) * (4 + 6)) = 24\nreach 24! expression: ((12 / 5) * (4 + 6))"}, {"input": "12 5 4 6\n", "output": "(4) + (6) = 10, left: (4 + 6) = 10, 12, 5\n(10) / (5) = 2, left: ((4 + 6) / 5) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 + 6) / 5)) = 24\nreach 24! expression: (12 * ((4 + 6) / 5))"}, {"input": "12 5 4 6\n", "output": "(4) + (6) = 10, left: (4 + 6) = 10, 12, 5\n(12) / (5) = 12/5, left: (12 / 5) = 12/5, (4 + 6) = 10\n(10) * (12/5) = 24, left: ((4 + 6) * (12 / 5)) = 24\nreach 24! expression: ((4 + 6) * (12 / 5))"}, {"input": "12 5 4 6\n", "output": "(5) / (12) = 5/12, left: (5 / 12) = 5/12, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (5 / 12) = 5/12\n(10) / (5/12) = 24, left: ((4 + 6) / (5 / 12)) = 24\nreach 24! expression: ((4 + 6) / (5 / 12))"}, {"input": "12 5 4 6\n", "output": "(4) + (6) = 10, left: (4 + 6) = 10, 12, 5\n(12) * (10) = 120, left: (12 * (4 + 6)) = 120, 5\n(120) / (5) = 24, left: ((12 * (4 + 6)) / 5) = 24\nreach 24! expression: ((12 * (4 + 6)) / 5)"}, {"input": "12 5 4 6\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 5, 4\nroll back, left: 12 5 4 6\n(12) - (6) = 6, left: (12 - 6) = 6, 5, 4\nroll back, left: 12 5 4 6\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 5, 4\nroll back, left: 12 5 4 6\n(12) / (5) = 12/5, left: (12 / 5) = 12/5, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (12 / 5) = 12/5\n(12/5) * (10) = 24, left: ((12 / 5) * (4 + 6)) = 24\nreach 24! expression: ((12 / 5) * (4 + 6))"}, {"input": "12 5 4 6\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 12, 4\nroll back, left: 12 5 4 6\n(5) + (4) = 9, left: (5 + 4) = 9, 12, 6\nroll back, left: 12 5 4 6\n(12) / (6) = 2, left: (12 / 6) = 2, 5, 4\nroll back, left: 12 5 4 6\n(4) + (6) = 10, left: (4 + 6) = 10, 12, 5\n(12) * (10) = 120, left: (12 * (4 + 6)) = 120, 5\n(120) / (5) = 24, left: ((12 * (4 + 6)) / 5) = 24\nreach 24! expression: ((12 * (4 + 6)) / 5)"}, {"input": "12 5 4 6\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 12, 5\n(12) * (5) = 60, left: (12 * 5) = 60, (4 / 6) = 2/3\nroll back, left: (4 / 6) = 2/3, 12, 5\nroll back, left: 12 5 4 6\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, 12, 5\nroll back, left: 12 5 4 6\n(4) + (6) = 10, left: (4 + 6) = 10, 12, 5\n(10) / (5) = 2, left: ((4 + 6) / 5) = 2, 12\n(12) * (2) = 24, left: (12 * ((4 + 6) / 5)) = 24\nreach 24! expression: (12 * ((4 + 6) / 5))"}, {"input": "12 5 4 6\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 5, 4\nroll back, left: 12 5 4 6\n(5) - (4) = 1, left: (5 - 4) = 1, 12, 6\nroll back, left: 12 5 4 6\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, 12, 6\nroll back, left: 12 5 4 6\n(5) / (12) = 5/12, left: (5 / 12) = 5/12, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (5 / 12) = 5/12\n(10) / (5/12) = 24, left: ((4 + 6) / (5 / 12)) = 24\nreach 24! expression: ((4 + 6) / (5 / 12))"}, {"input": "12 5 10 10\n", "output": "(12) + (10) = 22, left: (12 + 10) = 22, 5, 10\n(10) / (5) = 2, left: (10 / 5) = 2, (12 + 10) = 22\n(22) + (2) = 24, left: ((12 + 10) + (10 / 5)) = 24\nreach 24! expression: ((12 + 10) + (10 / 5))"}, {"input": "12 5 10 10\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 12, 10\n(12) + (2) = 14, left: (12 + (10 / 5)) = 14, 10\n(10) + (14) = 24, left: (10 + (12 + (10 / 5))) = 24\nreach 24! expression: (10 + (12 + (10 / 5)))"}, {"input": "12 5 10 10\n", "output": "(12) * (10) = 120, left: (12 * 10) = 120, 5, 10\n(10) - (5) = 5, left: (10 - 5) = 5, (12 * 10) = 120\n(120) / (5) = 24, left: ((12 * 10) / (10 - 5)) = 24\nreach 24! expression: ((12 * 10) / (10 - 5))"}, {"input": "12 5 10 10\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 12, 10\n(5) / (10) = 1/2, left: ((10 - 5) / 10) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((10 - 5) / 10)) = 24\nreach 24! expression: (12 / ((10 - 5) / 10))"}, {"input": "3 13 5 8\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 3, 13\n(3) + (13) = 16, left: (3 + 13) = 16, (5 * 8) = 40\n(40) - (16) = 24, left: ((5 * 8) - (3 + 13)) = 24\nreach 24! expression: ((5 * 8) - (3 + 13))"}, {"input": "3 13 5 8\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 3, 13\n(40) - (13) = 27, left: ((5 * 8) - 13) = 27, 3\n(27) - (3) = 24, left: (((5 * 8) - 13) - 3) = 24\nreach 24! expression: (((5 * 8) - 13) - 3)"}, {"input": "3 13 5 8\n", "output": "(3) + (13) = 16, left: (3 + 13) = 16, 5, 8\n(5) * (8) = 40, left: (5 * 8) = 40, (3 + 13) = 16\n(40) - (16) = 24, left: ((5 * 8) - (3 + 13)) = 24\nreach 24! expression: ((5 * 8) - (3 + 13))"}, {"input": "3 13 5 8\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 13, 5\n(13) - (5) = 8, left: (13 - 5) = 8, (8 - 3) = 5\nroll back, left: (8 - 3) = 5, 13, 5\nroll back, left: 3 13 5 8\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, 13, 8\nroll back, left: 3 13 5 8\n(5) * (8) = 40, left: (5 * 8) = 40, 3, 13\n(3) + (13) = 16, left: (3 + 13) = 16, (5 * 8) = 40\n(40) - (16) = 24, left: ((5 * 8) - (3 + 13)) = 24\nreach 24! expression: ((5 * 8) - (3 + 13))"}, {"input": "3 13 5 8\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 3, 13\n(3) + (13) = 16, left: (3 + 13) = 16, (5 / 8) = 5/8\nroll back, left: (5 / 8) = 5/8, 3, 13\nroll back, left: 3 13 5 8\n(5) + (8) = 13, left: (5 + 8) = 13, 3, 13\nroll back, left: 3 13 5 8\n(5) * (8) = 40, left: (5 * 8) = 40, 3, 13\n(40) - (13) = 27, left: ((5 * 8) - 13) = 27, 3\n(27) - (3) = 24, left: (((5 * 8) - 13) - 3) = 24\nreach 24! expression: (((5 * 8) - 13) - 3)"}, {"input": "3 13 5 8\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 3, 13\nroll back, left: 3 13 5 8\n(8) - (5) = 3, left: (8 - 5) = 3, 3, 13\nroll back, left: 3 13 5 8\n(5) + (8) = 13, left: (5 + 8) = 13, 3, 13\nroll back, left: 3 13 5 8\n(5) * (8) = 40, left: (5 * 8) = 40, 3, 13\n(40) - (13) = 27, left: ((5 * 8) - 13) = 27, 3\n(27) - (3) = 24, left: (((5 * 8) - 13) - 3) = 24\nreach 24! expression: (((5 * 8) - 13) - 3)"}, {"input": "3 13 5 8\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 13, 5\nroll back, left: 3 13 5 8\n(5) - (8) = -3, left: (5 - 8) = -3, 3, 13\n(3) - (13) = -10, left: (3 - 13) = -10, (5 - 8) = -3\nroll back, left: (5 - 8) = -3, 3, 13\nroll back, left: 3 13 5 8\n(5) * (8) = 40, left: (5 * 8) = 40, 3, 13\n(3) + (13) = 16, left: (3 + 13) = 16, (5 * 8) = 40\n(40) - (16) = 24, left: ((5 * 8) - (3 + 13)) = 24\nreach 24! expression: ((5 * 8) - (3 + 13))"}, {"input": "1 8 8 7\n", "output": "(8) + (7) = 15, left: (8 + 7) = 15, 1, 8\n(1) + (8) = 9, left: (1 + 8) = 9, (8 + 7) = 15\n(15) + (9) = 24, left: ((8 + 7) + (1 + 8)) = 24\nreach 24! expression: ((8 + 7) + (1 + 8))"}, {"input": "1 8 8 7\n", "output": "(1) + (8) = 9, left: (1 + 8) = 9, 8, 7\n(8) + (7) = 15, left: (8 + 7) = 15, (1 + 8) = 9\n(9) + (15) = 24, left: ((1 + 8) + (8 + 7)) = 24\nreach 24! expression: ((1 + 8) + (8 + 7))"}, {"input": "1 8 8 7\n", "output": "(1) + (8) = 9, left: (1 + 8) = 9, 8, 7\n(7) + (9) = 16, left: (7 + (1 + 8)) = 16, 8\n(8) + (16) = 24, left: (8 + (7 + (1 + 8))) = 24\nreach 24! expression: (8 + (7 + (1 + 8)))"}, {"input": "1 8 8 7\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 8, 7\n(8) - (7) = 1, left: ((8 / 1) - 7) = 1, 8\nroll back, left: (8 / 1) = 8, 8, 7\n(8) / (8) = 1, left: (8 / (8 / 1)) = 1, 7\nroll back, left: (8 / 1) = 8, 8, 7\nroll back, left: 1 8 8 7\n(1) + (8) = 9, left: (1 + 8) = 9, 8, 7\n(7) + (9) = 16, left: (7 + (1 + 8)) = 16, 8\n(8) + (16) = 24, left: (8 + (7 + (1 + 8))) = 24\nreach 24! expression: (8 + (7 + (1 + 8)))"}, {"input": "1 8 8 7\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 1, 8\nroll back, left: 1 8 8 7\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, 1, 8\n(1) + (7/8) = 15/8, left: (1 + (7 / 8)) = 15/8, 8\nroll back, left: (7 / 8) = 7/8, 1, 8\nroll back, left: 1 8 8 7\n(8) + (7) = 15, left: (8 + 7) = 15, 1, 8\n(1) + (8) = 9, left: (1 + 8) = 9, (8 + 7) = 15\n(15) + (9) = 24, left: ((8 + 7) + (1 + 8)) = 24\nreach 24! expression: ((8 + 7) + (1 + 8))"}, {"input": "1 8 8 7\n", "output": "(8) + (7) = 15, left: (8 + 7) = 15, 1, 8\n(1) - (8) = -7, left: (1 - 8) = -7, (8 + 7) = 15\n(15) * (-7) = -105, left: ((8 + 7) * (1 - 8)) = -105\nroll back, left: (1 - 8) = -7, (8 + 7) = 15\nroll back, left: (8 + 7) = 15, 1, 8\n(8) - (1) = 7, left: (8 - 1) = 7, (8 + 7) = 15\nroll back, left: (8 + 7) = 15, 1, 8\n(1) + (8) = 9, left: (1 + 8) = 9, (8 + 7) = 15\n(15) + (9) = 24, left: ((8 + 7) + (1 + 8)) = 24\nreach 24! expression: ((8 + 7) + (1 + 8))"}, {"input": "1 8 8 7\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 8, 7\nroll back, left: 1 8 8 7\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, 8, 7\n(8) / (1/8) = 64, left: (8 / (1 / 8)) = 64, 7\nroll back, left: (1 / 8) = 1/8, 8, 7\nroll back, left: 1 8 8 7\n(1) + (8) = 9, left: (1 + 8) = 9, 8, 7\n(8) + (7) = 15, left: (8 + 7) = 15, (1 + 8) = 9\n(9) + (15) = 24, left: ((1 + 8) + (8 + 7)) = 24\nreach 24! expression: ((1 + 8) + (8 + 7))"}, {"input": "1 8 8 7\n", "output": "(8) / (7) = 8/7, left: (8 / 7) = 8/7, 1, 8\nroll back, left: 1 8 8 7\n(8) * (7) = 56, left: (8 * 7) = 56, 1, 8\n(1) + (8) = 9, left: (1 + 8) = 9, (8 * 7) = 56\nroll back, left: (8 * 7) = 56, 1, 8\nroll back, left: 1 8 8 7\n(8) + (7) = 15, left: (8 + 7) = 15, 1, 8\n(1) + (8) = 9, left: (1 + 8) = 9, (8 + 7) = 15\n(15) + (9) = 24, left: ((8 + 7) + (1 + 8)) = 24\nreach 24! expression: ((8 + 7) + (1 + 8))"}, {"input": "12 8 8 8\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (12 / 8) = 3/2\n(3/2) * (16) = 24, left: ((12 / 8) * (8 + 8)) = 24\nreach 24! expression: ((12 / 8) * (8 + 8))"}, {"input": "12 8 8 8\n", "output": "(8) / (12) = 2/3, left: (8 / 12) = 2/3, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (8 / 12) = 2/3\n(16) / (2/3) = 24, left: ((8 + 8) / (8 / 12)) = 24\nreach 24! expression: ((8 + 8) / (8 / 12))"}, {"input": "12 8 8 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (12 - 8)) = 32, 8\n(32) - (8) = 24, left: ((8 * (12 - 8)) - 8) = 24\nreach 24! expression: ((8 * (12 - 8)) - 8)"}, {"input": "12 8 8 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 12, 8\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, (8 + 8) = 16\n(16) / (2/3) = 24, left: ((8 + 8) / (8 / 12)) = 24\nreach 24! expression: ((8 + 8) / (8 / 12))"}, {"input": "12 8 8 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 12, 8\n(12) * (16) = 192, left: (12 * (8 + 8)) = 192, 8\n(192) / (8) = 24, left: ((12 * (8 + 8)) / 8) = 24\nreach 24! expression: ((12 * (8 + 8)) / 8)"}, {"input": "12 8 8 8\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (12 * 8) = 96\nroll back, left: (12 * 8) = 96, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (12 * 8) = 96\nroll back, left: (12 * 8) = 96, 8, 8\nroll back, left: 12 8 8 8\n(12) - (8) = 4, left: (12 - 8) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (12 - 8)) = 32, 8\n(32) - (8) = 24, left: ((8 * (12 - 8)) - 8) = 24\nreach 24! expression: ((8 * (12 - 8)) - 8)"}, {"input": "12 8 8 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 12, 8\nroll back, left: 12 8 8 8\n(8) - (8) = 0, left: (8 - 8) = 0, 12, 8\n(0) - (12) = -12, left: ((8 - 8) - 12) = -12, 8\nroll back, left: (8 - 8) = 0, 12, 8\nroll back, left: 12 8 8 8\n(8) + (8) = 16, left: (8 + 8) = 16, 12, 8\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, (8 + 8) = 16\n(16) / (2/3) = 24, left: ((8 + 8) / (8 / 12)) = 24\nreach 24! expression: ((8 + 8) / (8 / 12))"}, {"input": "12 8 8 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 12, 8\n(12) - (0) = 12, left: (12 - (8 - 8)) = 12, 8\nroll back, left: (8 - 8) = 0, 12, 8\nroll back, left: 12 8 8 8\n(8) + (8) = 16, left: (8 + 8) = 16, 12, 8\n(16) - (12) = 4, left: ((8 + 8) - 12) = 4, 8\nroll back, left: (8 + 8) = 16, 12, 8\n(12) * (16) = 192, left: (12 * (8 + 8)) = 192, 8\n(192) / (8) = 24, left: ((12 * (8 + 8)) / 8) = 24\nreach 24! expression: ((12 * (8 + 8)) / 8)"}, {"input": "5 2 4 8\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 5, 4\n(5) / (1/4) = 20, left: (5 / (2 / 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 / (2 / 8))) = 24\nreach 24! expression: (4 + (5 / (2 / 8)))"}, {"input": "5 2 4 8\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 2, 4\n(40) / (2) = 20, left: ((5 * 8) / 2) = 20, 4\n(4) + (20) = 24, left: (4 + ((5 * 8) / 2)) = 24\nreach 24! expression: (4 + ((5 * 8) / 2))"}, {"input": "5 2 4 8\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 5, 4\n(5) * (4) = 20, left: (5 * (8 / 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 * (8 / 2))) = 24\nreach 24! expression: (4 + (5 * (8 / 2)))"}, {"input": "5 2 4 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 2, 4\n(4) * (3) = 12, left: (4 * (8 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (4 * (8 - 5))) = 24\nreach 24! expression: (2 * (4 * (8 - 5)))"}, {"input": "5 2 4 8\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 2, 4\n(2) - (4) = -2, left: (2 - 4) = -2, (8 / 5) = 8/5\nroll back, left: (8 / 5) = 8/5, 2, 4\n(8/5) / (4) = 2/5, left: ((8 / 5) / 4) = 2/5, 2\nroll back, left: (8 / 5) = 8/5, 2, 4\nroll back, left: 5 2 4 8\n(8) - (5) = 3, left: (8 - 5) = 3, 2, 4\n(4) * (3) = 12, left: (4 * (8 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (4 * (8 - 5))) = 24\nreach 24! expression: (2 * (4 * (8 - 5)))"}, {"input": "5 2 4 8\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 5, 4\n(4) - (5) = -1, left: ((8 / 2) - 5) = -1, 4\n(4) + (-1) = 3, left: (4 + ((8 / 2) - 5)) = 3\nroll back, left: ((8 / 2) - 5) = -1, 4\nroll back, left: (8 / 2) = 4, 5, 4\n(5) - (4) = 1, left: (5 - (8 / 2)) = 1, 4\nroll back, left: (8 / 2) = 4, 5, 4\n(5) * (4) = 20, left: (5 * (8 / 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 * (8 / 2))) = 24\nreach 24! expression: (4 + (5 * (8 / 2)))"}, {"input": "5 2 4 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 2, 4\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, (5 + 8) = 13\nroll back, left: (5 + 8) = 13, 2, 4\nroll back, left: 5 2 4 8\n(8) / (5) = 8/5, left: (8 / 5) = 8/5, 2, 4\nroll back, left: 5 2 4 8\n(5) * (8) = 40, left: (5 * 8) = 40, 2, 4\n(40) / (2) = 20, left: ((5 * 8) / 2) = 20, 4\n(4) + (20) = 24, left: (4 + ((5 * 8) / 2)) = 24\nreach 24! expression: (4 + ((5 * 8) / 2))"}, {"input": "5 2 4 8\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 5, 4\nroll back, left: 5 2 4 8\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 5, 4\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, (2 / 8) = 1/4\nroll back, left: (2 / 8) = 1/4, 5, 4\n(5) * (1/4) = 5/4, left: (5 * (2 / 8)) = 5/4, 4\nroll back, left: (2 / 8) = 1/4, 5, 4\n(5) / (1/4) = 20, left: (5 / (2 / 8)) = 20, 4\n(4) + (20) = 24, left: (4 + (5 / (2 / 8))) = 24\nreach 24! expression: (4 + (5 / (2 / 8)))"}, {"input": "5 2 4 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 2, 4\n(2) * (4) = 8, left: (2 * 4) = 8, (5 + 8) = 13\nroll back, left: (5 + 8) = 13, 2, 4\nroll back, left: 5 2 4 8\n(5) * (8) = 40, left: (5 * 8) = 40, 2, 4\n(2) + (4) = 6, left: (2 + 4) = 6, (5 * 8) = 40\nroll back, left: (5 * 8) = 40, 2, 4\n(40) / (2) = 20, left: ((5 * 8) / 2) = 20, 4\n(4) + (20) = 24, left: (4 + ((5 * 8) / 2)) = 24\nreach 24! expression: (4 + ((5 * 8) / 2))"}, {"input": "10 5 6 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (8 - 5)) = 30, 6\n(30) - (6) = 24, left: ((10 * (8 - 5)) - 6) = 24\nreach 24! expression: ((10 * (8 - 5)) - 6)"}, {"input": "10 5 6 8\n", "output": "(10) / (8) = 5/4, left: (10 / 8) = 5/4, 5, 6\n(5) / (5/4) = 4, left: (5 / (10 / 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 / (10 / 8))) = 24\nreach 24! expression: (6 * (5 / (10 / 8)))"}, {"input": "10 5 6 8\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 10, 6\n(10) / (40) = 1/4, left: (10 / (5 * 8)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (10 / (5 * 8))) = 24\nreach 24! expression: (6 / (10 / (5 * 8)))"}, {"input": "10 5 6 8\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 6, 8\n(2) / (8) = 1/4, left: ((10 / 5) / 8) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((10 / 5) / 8)) = 24\nreach 24! expression: (6 / ((10 / 5) / 8))"}, {"input": "10 5 6 8\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 10, 8\n(8) * (30) = 240, left: (8 * (5 * 6)) = 240, 10\n(240) / (10) = 24, left: ((8 * (5 * 6)) / 10) = 24\nreach 24! expression: ((8 * (5 * 6)) / 10)"}, {"input": "10 5 6 8\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 10, 8\n(8) * (-1) = -8, left: (8 * (5 - 6)) = -8, 10\nroll back, left: (5 - 6) = -1, 10, 8\n(10) * (-1) = -10, left: (10 * (5 - 6)) = -10, 8\nroll back, left: (5 - 6) = -1, 10, 8\nroll back, left: 10 5 6 8\n(5) * (6) = 30, left: (5 * 6) = 30, 10, 8\n(8) * (30) = 240, left: (8 * (5 * 6)) = 240, 10\n(240) / (10) = 24, left: ((8 * (5 * 6)) / 10) = 24\nreach 24! expression: ((8 * (5 * 6)) / 10)"}, {"input": "10 5 6 8\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 6, 8\nroll back, left: 10 5 6 8\n(10) * (5) = 50, left: (10 * 5) = 50, 6, 8\n(6) * (8) = 48, left: (6 * 8) = 48, (10 * 5) = 50\nroll back, left: (10 * 5) = 50, 6, 8\nroll back, left: 10 5 6 8\n(10) / (5) = 2, left: (10 / 5) = 2, 6, 8\n(2) / (8) = 1/4, left: ((10 / 5) / 8) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((10 / 5) / 8)) = 24\nreach 24! expression: (6 / ((10 / 5) / 8))"}, {"input": "10 5 6 8\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 10, 6\nroll back, left: 10 5 6 8\n(8) - (5) = 3, left: (8 - 5) = 3, 10, 6\n(6) + (3) = 9, left: (6 + (8 - 5)) = 9, 10\nroll back, left: (8 - 5) = 3, 10, 6\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, (8 - 5) = 3\nroll back, left: (8 - 5) = 3, 10, 6\n(10) * (3) = 30, left: (10 * (8 - 5)) = 30, 6\n(30) - (6) = 24, left: ((10 * (8 - 5)) - 6) = 24\nreach 24! expression: ((10 * (8 - 5)) - 6)"}, {"input": "8 8 10 12\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (10 - 12)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (10 - 12))) = 24\nreach 24! expression: (8 - (8 * (10 - 12)))"}, {"input": "8 8 10 12\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (12 - 10)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (12 - 10))) = 24\nreach 24! expression: (8 + (8 * (12 - 10)))"}, {"input": "8 8 10 12\n", "output": "(8) / (10) = 4/5, left: (8 / 10) = 4/5, 8, 12\nroll back, left: 8 8 10 12\n(8) * (10) = 80, left: (8 * 10) = 80, 8, 12\nroll back, left: 8 8 10 12\n(8) - (10) = -2, left: (8 - 10) = -2, 8, 12\nroll back, left: 8 8 10 12\n(10) - (12) = -2, left: (10 - 12) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (10 - 12)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (10 - 12))) = 24\nreach 24! expression: (8 - (8 * (10 - 12)))"}, {"input": "8 8 10 12\n", "output": "(12) / (8) = 3/2, left: (12 / 8) = 3/2, 8, 10\nroll back, left: 8 8 10 12\n(8) * (12) = 96, left: (8 * 12) = 96, 8, 10\nroll back, left: 8 8 10 12\n(12) - (8) = 4, left: (12 - 8) = 4, 8, 10\nroll back, left: 8 8 10 12\n(10) - (12) = -2, left: (10 - 12) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (10 - 12)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (10 - 12))) = 24\nreach 24! expression: (8 - (8 * (10 - 12)))"}, {"input": "8 8 10 12\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 10, 12\nroll back, left: 8 8 10 12\n(8) - (12) = -4, left: (8 - 12) = -4, 8, 10\nroll back, left: 8 8 10 12\n(8) + (12) = 20, left: (8 + 12) = 20, 8, 10\nroll back, left: 8 8 10 12\n(12) - (10) = 2, left: (12 - 10) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (12 - 10)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (12 - 10))) = 24\nreach 24! expression: (8 + (8 * (12 - 10)))"}, {"input": "8 8 10 12\n", "output": "(8) * (10) = 80, left: (8 * 10) = 80, 8, 12\nroll back, left: 8 8 10 12\n(8) - (12) = -4, left: (8 - 12) = -4, 8, 10\n(8) * (10) = 80, left: (8 * 10) = 80, (8 - 12) = -4\nroll back, left: (8 - 12) = -4, 8, 10\nroll back, left: 8 8 10 12\n(10) - (12) = -2, left: (10 - 12) = -2, 8, 8\n(8) * (-2) = -16, left: (8 * (10 - 12)) = -16, 8\n(8) - (-16) = 24, left: (8 - (8 * (10 - 12))) = 24\nreach 24! expression: (8 - (8 * (10 - 12)))"}, {"input": "2 12 6 13\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 2, 13\n(13) / (1/2) = 26, left: (13 / (6 / 12)) = 26, 2\n(26) - (2) = 24, left: ((13 / (6 / 12)) - 2) = 24\nreach 24! expression: ((13 / (6 / 12)) - 2)"}, {"input": "2 12 6 13\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 2, 13\n(13) * (2) = 26, left: (13 * (12 / 6)) = 26, 2\n(26) - (2) = 24, left: ((13 * (12 / 6)) - 2) = 24\nreach 24! expression: ((13 * (12 / 6)) - 2)"}, {"input": "2 12 6 13\n", "output": "(12) * (13) = 156, left: (12 * 13) = 156, 2, 6\n(156) / (6) = 26, left: ((12 * 13) / 6) = 26, 2\n(26) - (2) = 24, left: (((12 * 13) / 6) - 2) = 24\nreach 24! expression: (((12 * 13) / 6) - 2)"}, {"input": "2 12 6 13\n", "output": "(2) * (6) = 12, left: (2 * 6) = 12, 12, 13\nroll back, left: 2 12 6 13\n(2) + (6) = 8, left: (2 + 6) = 8, 12, 13\n(8) - (12) = -4, left: ((2 + 6) - 12) = -4, 13\nroll back, left: (2 + 6) = 8, 12, 13\nroll back, left: 2 12 6 13\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, 2, 13\n(13) / (1/2) = 26, left: (13 / (6 / 12)) = 26, 2\n(26) - (2) = 24, left: ((13 / (6 / 12)) - 2) = 24\nreach 24! expression: ((13 / (6 / 12)) - 2)"}, {"input": "2 12 6 13\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 12, 13\n(12) + (13) = 25, left: (12 + 13) = 25, (6 / 2) = 3\nroll back, left: (6 / 2) = 3, 12, 13\nroll back, left: 2 12 6 13\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, 12, 13\nroll back, left: 2 12 6 13\n(12) / (6) = 2, left: (12 / 6) = 2, 2, 13\n(13) * (2) = 26, left: (13 * (12 / 6)) = 26, 2\n(26) - (2) = 24, left: ((13 * (12 / 6)) - 2) = 24\nreach 24! expression: ((13 * (12 / 6)) - 2)"}, {"input": "2 12 6 13\n", "output": "(2) + (12) = 14, left: (2 + 12) = 14, 6, 13\n(13) + (14) = 27, left: (13 + (2 + 12)) = 27, 6\nroll back, left: (2 + 12) = 14, 6, 13\nroll back, left: 2 12 6 13\n(2) * (12) = 24, left: (2 * 12) = 24, 6, 13\nroll back, left: 2 12 6 13\n(12) / (6) = 2, left: (12 / 6) = 2, 2, 13\n(13) * (2) = 26, left: (13 * (12 / 6)) = 26, 2\n(26) - (2) = 24, left: ((13 * (12 / 6)) - 2) = 24\nreach 24! expression: ((13 * (12 / 6)) - 2)"}, {"input": "10 12 2 11\n", "output": "(2) * (11) = 22, left: (2 * 11) = 22, 10, 12\n(22) - (10) = 12, left: ((2 * 11) - 10) = 12, 12\n(12) + (12) = 24, left: (12 + ((2 * 11) - 10)) = 24\nreach 24! expression: (12 + ((2 * 11) - 10))"}, {"input": "10 12 2 11\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 2, 11\n(2) * (11) = 22, left: (2 * 11) = 22, (12 - 10) = 2\n(2) + (22) = 24, left: ((12 - 10) + (2 * 11)) = 24\nreach 24! expression: ((12 - 10) + (2 * 11))"}, {"input": "10 12 2 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 12, 2\n(12) * (2) = 24, left: (12 * 2) = 24, (11 - 10) = 1\n(1) * (24) = 24, left: ((11 - 10) * (12 * 2)) = 24\nreach 24! expression: ((11 - 10) * (12 * 2))"}, {"input": "10 12 2 11\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 12, 2\n(12) * (2) = 24, left: (12 * 2) = 24, (11 - 10) = 1\n(24) / (1) = 24, left: ((12 * 2) / (11 - 10)) = 24\nreach 24! expression: ((12 * 2) / (11 - 10))"}, {"input": "10 12 2 11\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 2, 11\n(2) * (11) = 22, left: (2 * 11) = 22, (12 - 10) = 2\n(2) + (22) = 24, left: ((12 - 10) + (2 * 11)) = 24\nreach 24! expression: ((12 - 10) + (2 * 11))"}, {"input": "10 12 2 11\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 12, 11\nroll back, left: 10 12 2 11\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, 12, 11\nroll back, left: 10 12 2 11\n(11) - (12) = -1, left: (11 - 12) = -1, 10, 2\nroll back, left: 10 12 2 11\n(11) - (10) = 1, left: (11 - 10) = 1, 12, 2\n(12) * (2) = 24, left: (12 * 2) = 24, (11 - 10) = 1\n(1) * (24) = 24, left: ((11 - 10) * (12 * 2)) = 24\nreach 24! expression: ((11 - 10) * (12 * 2))"}, {"input": "10 12 2 11\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 2, 11\n(2) * (11) = 22, left: (2 * 11) = 22, (12 - 10) = 2\n(2) + (22) = 24, left: ((12 - 10) + (2 * 11)) = 24\nreach 24! expression: ((12 - 10) + (2 * 11))"}, {"input": "10 12 2 11\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 2, 11\n(2) * (11) = 22, left: (2 * 11) = 22, (12 - 10) = 2\n(2) + (22) = 24, left: ((12 - 10) + (2 * 11)) = 24\nreach 24! expression: ((12 - 10) + (2 * 11))"}, {"input": "10 12 2 11\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 2, 11\n(2) * (11) = 22, left: (2 * 11) = 22, (12 - 10) = 2\n(2) + (22) = 24, left: ((12 - 10) + (2 * 11)) = 24\nreach 24! expression: ((12 - 10) + (2 * 11))"}, {"input": "8 6 11 10\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 6, 10\n(10) * (3) = 30, left: (10 * (11 - 8)) = 30, 6\n(30) - (6) = 24, left: ((10 * (11 - 8)) - 6) = 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "8 6 11 10\n", "output": "(8) * (11) = 88, left: (8 * 11) = 88, 6, 10\nroll back, left: 8 6 11 10\n(8) - (11) = -3, left: (8 - 11) = -3, 6, 10\n(10) * (-3) = -30, left: (10 * (8 - 11)) = -30, 6\nroll back, left: (8 - 11) = -3, 6, 10\nroll back, left: 8 6 11 10\n(11) - (8) = 3, left: (11 - 8) = 3, 6, 10\n(10) * (3) = 30, left: (10 * (11 - 8)) = 30, 6\n(30) - (6) = 24, left: ((10 * (11 - 8)) - 6) = 24\nreach 24! expression: ((10 * (11 - 8)) - 6)"}, {"input": "7 11 12 6\n", "output": "(11) + (12) = 23, left: (11 + 12) = 23, 7, 6\n(23) - (6) = 17, left: ((11 + 12) - 6) = 17, 7\n(7) + (17) = 24, left: (7 + ((11 + 12) - 6)) = 24\nreach 24! expression: (7 + ((11 + 12) - 6))"}, {"input": "7 11 12 6\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 11, 12\n(12) - (-1) = 13, left: (12 - (6 - 7)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 - (6 - 7))) = 24\nreach 24! expression: (11 + (12 - (6 - 7)))"}, {"input": "7 11 12 6\n", "output": "(7) + (12) = 19, left: (7 + 12) = 19, 11, 6\n(11) - (6) = 5, left: (11 - 6) = 5, (7 + 12) = 19\n(19) + (5) = 24, left: ((7 + 12) + (11 - 6)) = 24\nreach 24! expression: ((7 + 12) + (11 - 6))"}, {"input": "7 11 12 6\n", "output": "(7) + (11) = 18, left: (7 + 11) = 18, 12, 6\n(6) - (12) = -6, left: (6 - 12) = -6, (7 + 11) = 18\n(18) - (-6) = 24, left: ((7 + 11) - (6 - 12)) = 24\nreach 24! expression: ((7 + 11) - (6 - 12))"}, {"input": "7 11 12 6\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 7, 12\n(12) - (-5) = 17, left: (12 - (6 - 11)) = 17, 7\n(7) + (17) = 24, left: (7 + (12 - (6 - 11))) = 24\nreach 24! expression: (7 + (12 - (6 - 11)))"}, {"input": "7 11 12 6\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 7, 12\nroll back, left: 7 11 12 6\n(6) - (11) = -5, left: (6 - 11) = -5, 7, 12\n(12) + (-5) = 7, left: (12 + (6 - 11)) = 7, 7\n(7) / (7) = 1, left: ((12 + (6 - 11)) / 7) = 1\nroll back, left: (12 + (6 - 11)) = 7, 7\nroll back, left: (6 - 11) = -5, 7, 12\n(12) - (-5) = 17, left: (12 - (6 - 11)) = 17, 7\n(7) + (17) = 24, left: (7 + (12 - (6 - 11))) = 24\nreach 24! expression: (7 + (12 - (6 - 11)))"}, {"input": "11 8 12 1\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 8, 12\n(10) - (8) = 2, left: ((11 - 1) - 8) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 1) - 8)) = 24\nreach 24! expression: (12 * ((11 - 1) - 8))"}, {"input": "11 8 12 1\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 12, 1\n(3) - (1) = 2, left: ((11 - 8) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 8) - 1)) = 24\nreach 24! expression: (12 * ((11 - 8) - 1))"}, {"input": "11 8 12 1\n", "output": "(8) + (1) = 9, left: (8 + 1) = 9, 11, 12\n(11) - (9) = 2, left: (11 - (8 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (11 - (8 + 1))) = 24\nreach 24! expression: (12 * (11 - (8 + 1)))"}, {"input": "11 8 12 1\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 11, 1\nroll back, left: 11 8 12 1\n(12) / (1) = 12, left: (12 / 1) = 12, 11, 8\nroll back, left: 11 8 12 1\n(8) - (11) = -3, left: (8 - 11) = -3, 12, 1\nroll back, left: 11 8 12 1\n(11) - (8) = 3, left: (11 - 8) = 3, 12, 1\n(3) - (1) = 2, left: ((11 - 8) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 8) - 1)) = 24\nreach 24! expression: (12 * ((11 - 8) - 1))"}, {"input": "11 8 12 1\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 8, 12\nroll back, left: 11 8 12 1\n(11) * (1) = 11, left: (11 * 1) = 11, 8, 12\nroll back, left: 11 8 12 1\n(11) - (1) = 10, left: (11 - 1) = 10, 8, 12\n(8) + (12) = 20, left: (8 + 12) = 20, (11 - 1) = 10\nroll back, left: (11 - 1) = 10, 8, 12\n(10) - (8) = 2, left: ((11 - 1) - 8) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 1) - 8)) = 24\nreach 24! expression: (12 * ((11 - 1) - 8))"}, {"input": "11 8 12 1\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 11, 12\nroll back, left: 11 8 12 1\n(8) - (1) = 7, left: (8 - 1) = 7, 11, 12\n(7) - (11) = -4, left: ((8 - 1) - 11) = -4, 12\nroll back, left: (8 - 1) = 7, 11, 12\nroll back, left: 11 8 12 1\n(8) + (1) = 9, left: (8 + 1) = 9, 11, 12\n(11) - (9) = 2, left: (11 - (8 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (11 - (8 + 1))) = 24\nreach 24! expression: (12 * (11 - (8 + 1)))"}, {"input": "11 8 12 1\n", "output": "(1) / (12) = 1/12, left: (1 / 12) = 1/12, 11, 8\nroll back, left: 11 8 12 1\n(12) - (11) = 1, left: (12 - 11) = 1, 8, 1\n(8) + (1) = 9, left: (8 + (12 - 11)) = 9, 1\nroll back, left: (12 - 11) = 1, 8, 1\nroll back, left: 11 8 12 1\n(11) - (8) = 3, left: (11 - 8) = 3, 12, 1\n(3) - (1) = 2, left: ((11 - 8) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((11 - 8) - 1)) = 24\nreach 24! expression: (12 * ((11 - 8) - 1))"}, {"input": "4 10 1 9\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 10, 9\n(10) + (5) = 15, left: (10 + (4 + 1)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 + (4 + 1))) = 24\nreach 24! expression: (9 + (10 + (4 + 1)))"}, {"input": "4 10 1 9\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 4, 10\n(10) + (10) = 20, left: (10 + (1 + 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 + (1 + 9))) = 24\nreach 24! expression: (4 + (10 + (1 + 9)))"}, {"input": "4 10 1 9\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 10, 9\n(9) + (5) = 14, left: (9 + (4 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (9 + (4 + 1))) = 24\nreach 24! expression: (10 + (9 + (4 + 1)))"}, {"input": "4 10 1 9\n", "output": "(10) + (1) = 11, left: (10 + 1) = 11, 4, 9\n(9) + (11) = 20, left: (9 + (10 + 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (9 + (10 + 1))) = 24\nreach 24! expression: (4 + (9 + (10 + 1)))"}, {"input": "4 10 1 9\n", "output": "(9) / (1) = 9, left: (9 / 1) = 9, 4, 10\n(4) + (9) = 13, left: (4 + (9 / 1)) = 13, 10\nroll back, left: (9 / 1) = 9, 4, 10\nroll back, left: 4 10 1 9\n(1) * (9) = 9, left: (1 * 9) = 9, 4, 10\nroll back, left: 4 10 1 9\n(1) + (9) = 10, left: (1 + 9) = 10, 4, 10\n(10) + (10) = 20, left: (10 + (1 + 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 + (1 + 9))) = 24\nreach 24! expression: (4 + (10 + (1 + 9)))"}, {"input": "4 10 1 9\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 10, 9\n(10) * (9) = 90, left: (10 * 9) = 90, (1 - 4) = -3\nroll back, left: (1 - 4) = -3, 10, 9\nroll back, left: 4 10 1 9\n(4) / (1) = 4, left: (4 / 1) = 4, 10, 9\nroll back, left: 4 10 1 9\n(4) + (1) = 5, left: (4 + 1) = 5, 10, 9\n(10) + (5) = 15, left: (10 + (4 + 1)) = 15, 9\n(9) + (15) = 24, left: (9 + (10 + (4 + 1))) = 24\nreach 24! expression: (9 + (10 + (4 + 1)))"}, {"input": "4 10 1 9\n", "output": "(1) - (10) = -9, left: (1 - 10) = -9, 4, 9\n(4) - (9) = -5, left: (4 - 9) = -5, (1 - 10) = -9\nroll back, left: (1 - 10) = -9, 4, 9\n(4) * (-9) = -36, left: (4 * (1 - 10)) = -36, 9\nroll back, left: (1 - 10) = -9, 4, 9\nroll back, left: 4 10 1 9\n(10) + (1) = 11, left: (10 + 1) = 11, 4, 9\n(9) + (11) = 20, left: (9 + (10 + 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (9 + (10 + 1))) = 24\nreach 24! expression: (4 + (9 + (10 + 1)))"}, {"input": "4 10 1 9\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 10, 9\nroll back, left: 4 10 1 9\n(4) * (1) = 4, left: (4 * 1) = 4, 10, 9\nroll back, left: 4 10 1 9\n(1) - (4) = -3, left: (1 - 4) = -3, 10, 9\nroll back, left: 4 10 1 9\n(4) + (1) = 5, left: (4 + 1) = 5, 10, 9\n(9) + (5) = 14, left: (9 + (4 + 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (9 + (4 + 1))) = 24\nreach 24! expression: (10 + (9 + (4 + 1)))"}, {"input": "4 10 1 9\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 4, 10\n(10) + (10) = 20, left: (10 + (1 + 9)) = 20, 4\n(4) - (20) = -16, left: (4 - (10 + (1 + 9))) = -16\nroll back, left: (10 + (1 + 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 + (1 + 9))) = 24\nreach 24! expression: (4 + (10 + (1 + 9)))"}, {"input": "4 10 1 9\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 4, 10\n(10) + (10) = 20, left: (10 + (1 + 9)) = 20, 4\n(4) - (20) = -16, left: (4 - (10 + (1 + 9))) = -16\nroll back, left: (10 + (1 + 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 + (1 + 9))) = 24\nreach 24! expression: (4 + (10 + (1 + 9)))"}, {"input": "4 10 1 9\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 4, 10\n(10) + (10) = 20, left: (10 + (1 + 9)) = 20, 4\n(4) - (20) = -16, left: (4 - (10 + (1 + 9))) = -16\nroll back, left: (10 + (1 + 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 + (1 + 9))) = 24\nreach 24! expression: (4 + (10 + (1 + 9)))"}, {"input": "4 10 1 9\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 4, 10\n(10) + (10) = 20, left: (10 + (1 + 9)) = 20, 4\n(4) - (20) = -16, left: (4 - (10 + (1 + 9))) = -16\nroll back, left: (10 + (1 + 9)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 + (1 + 9))) = 24\nreach 24! expression: (4 + (10 + (1 + 9)))"}, {"input": "3 6 9 4\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 6, 4\n(6) - (4) = 2, left: (6 - 4) = 2, (3 + 9) = 12\n(12) * (2) = 24, left: ((3 + 9) * (6 - 4)) = 24\nreach 24! expression: ((3 + 9) * (6 - 4))"}, {"input": "3 6 9 4\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (6 - 4) = 2\n(2) * (12) = 24, left: ((6 - 4) * (3 + 9)) = 24\nreach 24! expression: ((6 - 4) * (3 + 9))"}, {"input": "3 6 9 4\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 3, 4\n(3) + (3) = 6, left: (3 + (9 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (9 - 6))) = 24\nreach 24! expression: (4 * (3 + (9 - 6)))"}, {"input": "3 6 9 4\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 3, 9\nroll back, left: 3 6 9 4\n(6) + (4) = 10, left: (6 + 4) = 10, 3, 9\nroll back, left: 3 6 9 4\n(4) - (6) = -2, left: (4 - 6) = -2, 3, 9\nroll back, left: 3 6 9 4\n(6) - (4) = 2, left: (6 - 4) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (6 - 4) = 2\n(2) * (12) = 24, left: ((6 - 4) * (3 + 9)) = 24\nreach 24! expression: ((6 - 4) * (3 + 9))"}, {"input": "3 6 9 4\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 3, 6\nroll back, left: 3 6 9 4\n(3) - (9) = -6, left: (3 - 9) = -6, 6, 4\n(6) * (-6) = -36, left: (6 * (3 - 9)) = -36, 4\nroll back, left: (3 - 9) = -6, 6, 4\nroll back, left: 3 6 9 4\n(3) + (9) = 12, left: (3 + 9) = 12, 6, 4\n(6) - (4) = 2, left: (6 - 4) = 2, (3 + 9) = 12\n(12) * (2) = 24, left: ((3 + 9) * (6 - 4)) = 24\nreach 24! expression: ((3 + 9) * (6 - 4))"}, {"input": "3 6 9 4\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 6, 4\nroll back, left: 3 6 9 4\n(9) - (3) = 6, left: (9 - 3) = 6, 6, 4\n(6) - (4) = 2, left: ((9 - 3) - 4) = 2, 6\nroll back, left: (9 - 3) = 6, 6, 4\nroll back, left: 3 6 9 4\n(3) + (9) = 12, left: (3 + 9) = 12, 6, 4\n(6) - (4) = 2, left: (6 - 4) = 2, (3 + 9) = 12\n(12) * (2) = 24, left: ((3 + 9) * (6 - 4)) = 24\nreach 24! expression: ((3 + 9) * (6 - 4))"}, {"input": "3 6 9 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 6, 9\nroll back, left: 3 6 9 4\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 6, 9\nroll back, left: 3 6 9 4\n(3) * (4) = 12, left: (3 * 4) = 12, 6, 9\nroll back, left: 3 6 9 4\n(9) - (6) = 3, left: (9 - 6) = 3, 3, 4\n(3) + (3) = 6, left: (3 + (9 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (9 - 6))) = 24\nreach 24! expression: (4 * (3 + (9 - 6)))"}, {"input": "3 6 9 4\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 3, 9\n(3) / (2/3) = 9/2, left: (3 / (4 / 6)) = 9/2, 9\nroll back, left: (4 / 6) = 2/3, 3, 9\n(9) / (2/3) = 27/2, left: (9 / (4 / 6)) = 27/2, 3\nroll back, left: (4 / 6) = 2/3, 3, 9\nroll back, left: 3 6 9 4\n(6) - (4) = 2, left: (6 - 4) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (6 - 4) = 2\n(2) * (12) = 24, left: ((6 - 4) * (3 + 9)) = 24\nreach 24! expression: ((6 - 4) * (3 + 9))"}, {"input": "8 8 1 8\n", "output": "(8) * (1) = 8, left: (8 * 1) = 8, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (8 * 1) = 8\n(8) + (16) = 24, left: ((8 * 1) + (8 + 8)) = 24\nreach 24! expression: ((8 * 1) + (8 + 8))"}, {"input": "8 8 1 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 1, 8\n(8) / (1) = 8, left: (8 / 1) = 8, (8 + 8) = 16\n(16) + (8) = 24, left: ((8 + 8) + (8 / 1)) = 24\nreach 24! expression: ((8 + 8) + (8 / 1))"}, {"input": "8 8 1 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 1, 8\n(16) / (1) = 16, left: ((8 + 8) / 1) = 16, 8\n(8) + (16) = 24, left: (8 + ((8 + 8) / 1)) = 24\nreach 24! expression: (8 + ((8 + 8) / 1))"}, {"input": "8 8 1 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 8, 1\n(16) / (1) = 16, left: ((8 + 8) / 1) = 16, 8\n(8) + (16) = 24, left: (8 + ((8 + 8) / 1)) = 24\nreach 24! expression: (8 + ((8 + 8) / 1))"}, {"input": "8 8 1 8\n", "output": "(8) * (1) = 8, left: (8 * 1) = 8, 8, 8\n(8) + (8) = 16, left: (8 + (8 * 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 + (8 * 1))) = 24\nreach 24! expression: (8 + (8 + (8 * 1)))"}, {"input": "8 8 1 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 1, 8\n(0) - (1) = -1, left: ((8 - 8) - 1) = -1, 8\nroll back, left: (8 - 8) = 0, 1, 8\nroll back, left: 8 8 1 8\n(8) / (8) = 1, left: (8 / 8) = 1, 1, 8\nroll back, left: 8 8 1 8\n(8) + (8) = 16, left: (8 + 8) = 16, 1, 8\n(8) / (1) = 8, left: (8 / 1) = 8, (8 + 8) = 16\n(16) + (8) = 24, left: ((8 + 8) + (8 / 1)) = 24\nreach 24! expression: ((8 + 8) + (8 / 1))"}, {"input": "8 8 1 8\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 8, 8\n(8) / (1/8) = 64, left: (8 / (1 / 8)) = 64, 8\nroll back, left: (1 / 8) = 1/8, 8, 8\nroll back, left: 8 8 1 8\n(8) - (1) = 7, left: (8 - 1) = 7, 8, 8\nroll back, left: 8 8 1 8\n(8) * (1) = 8, left: (8 * 1) = 8, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (8 * 1) = 8\n(8) + (16) = 24, left: ((8 * 1) + (8 + 8)) = 24\nreach 24! expression: ((8 * 1) + (8 + 8))"}, {"input": "8 8 1 8\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 8, 8\n(8) - (8) = 0, left: (8 - 8) = 0, (1 - 8) = -7\nroll back, left: (1 - 8) = -7, 8, 8\n(-7) - (8) = -15, left: ((1 - 8) - 8) = -15, 8\nroll back, left: (1 - 8) = -7, 8, 8\nroll back, left: 8 8 1 8\n(8) * (1) = 8, left: (8 * 1) = 8, 8, 8\n(8) + (8) = 16, left: (8 + (8 * 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 + (8 * 1))) = 24\nreach 24! expression: (8 + (8 + (8 * 1)))"}, {"input": "8 8 1 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 8, 1\n(8) / (1) = 8, left: (8 / 1) = 8, (8 / 8) = 1\n(1) / (8) = 1/8, left: ((8 / 8) / (8 / 1)) = 1/8\nroll back, left: (8 / 1) = 8, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 8, 1\nroll back, left: 8 8 1 8\n(8) + (8) = 16, left: (8 + 8) = 16, 8, 1\n(16) / (1) = 16, left: ((8 + 8) / 1) = 16, 8\n(8) + (16) = 24, left: (8 + ((8 + 8) / 1)) = 24\nreach 24! expression: (8 + ((8 + 8) / 1))"}, {"input": "8 8 1 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 1, 8\n(1) * (8) = 8, left: (1 * 8) = 8, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 1, 8\n(8) / (1) = 8, left: (8 / (8 / 8)) = 8, 1\nroll back, left: (8 / 8) = 1, 1, 8\nroll back, left: 8 8 1 8\n(8) + (8) = 16, left: (8 + 8) = 16, 1, 8\n(16) / (1) = 16, left: ((8 + 8) / 1) = 16, 8\n(8) + (16) = 24, left: (8 + ((8 + 8) / 1)) = 24\nreach 24! expression: (8 + ((8 + 8) / 1))"}, {"input": "6 2 9 3\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 6, 9\n(9) - (5) = 4, left: (9 - (2 + 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (2 + 3))) = 24\nreach 24! expression: (6 * (9 - (2 + 3)))"}, {"input": "6 2 9 3\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 2, 9\n(9) - (-3) = 12, left: (9 - (3 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (3 - 6))) = 24\nreach 24! expression: (2 * (9 - (3 - 6)))"}, {"input": "6 2 9 3\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 6, 2\n(6) / (2) = 3, left: (6 / 2) = 3, (9 * 3) = 27\n(27) - (3) = 24, left: ((9 * 3) - (6 / 2)) = 24\nreach 24! expression: ((9 * 3) - (6 / 2))"}, {"input": "6 2 9 3\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 6, 9\n(6) - (5) = 1, left: (6 - (2 + 3)) = 1, 9\nroll back, left: (2 + 3) = 5, 6, 9\n(5) / (6) = 5/6, left: ((2 + 3) / 6) = 5/6, 9\nroll back, left: (2 + 3) = 5, 6, 9\n(5) - (9) = -4, left: ((2 + 3) - 9) = -4, 6\nroll back, left: (2 + 3) = 5, 6, 9\n(9) - (5) = 4, left: (9 - (2 + 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (2 + 3))) = 24\nreach 24! expression: (6 * (9 - (2 + 3)))"}, {"input": "6 2 9 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 2, 9\nroll back, left: 6 2 9 3\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 2, 9\nroll back, left: 6 2 9 3\n(3) - (6) = -3, left: (3 - 6) = -3, 2, 9\n(9) * (-3) = -27, left: (9 * (3 - 6)) = -27, 2\nroll back, left: (3 - 6) = -3, 2, 9\n(9) - (-3) = 12, left: (9 - (3 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (3 - 6))) = 24\nreach 24! expression: (2 * (9 - (3 - 6)))"}, {"input": "6 2 9 3\n", "output": "(2) / (3) = 2/3, left: (2 / 3) = 2/3, 6, 9\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, (2 / 3) = 2/3\nroll back, left: (2 / 3) = 2/3, 6, 9\n(6) / (2/3) = 9, left: (6 / (2 / 3)) = 9, 9\nroll back, left: (2 / 3) = 2/3, 6, 9\nroll back, left: 6 2 9 3\n(2) + (3) = 5, left: (2 + 3) = 5, 6, 9\n(9) - (5) = 4, left: (9 - (2 + 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (9 - (2 + 3))) = 24\nreach 24! expression: (6 * (9 - (2 + 3)))"}, {"input": "6 2 9 3\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 6, 2\n(27) / (6) = 9/2, left: ((9 * 3) / 6) = 9/2, 2\nroll back, left: (9 * 3) = 27, 6, 2\n(27) - (6) = 21, left: ((9 * 3) - 6) = 21, 2\nroll back, left: (9 * 3) = 27, 6, 2\n(2) / (27) = 2/27, left: (2 / (9 * 3)) = 2/27, 6\nroll back, left: (9 * 3) = 27, 6, 2\n(6) / (2) = 3, left: (6 / 2) = 3, (9 * 3) = 27\n(27) - (3) = 24, left: ((9 * 3) - (6 / 2)) = 24\nreach 24! expression: ((9 * 3) - (6 / 2))"}, {"input": "6 2 9 3\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 2, 9\n(9) - (2) = 7, left: (9 - 2) = 7, (3 / 6) = 1/2\nroll back, left: (3 / 6) = 1/2, 2, 9\n(2) + (9) = 11, left: (2 + 9) = 11, (3 / 6) = 1/2\nroll back, left: (3 / 6) = 1/2, 2, 9\nroll back, left: 6 2 9 3\n(3) - (6) = -3, left: (3 - 6) = -3, 2, 9\n(9) - (-3) = 12, left: (9 - (3 - 6)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (3 - 6))) = 24\nreach 24! expression: (2 * (9 - (3 - 6)))"}, {"input": "12 2 4 2\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 2, 4\n(2) * (-10) = -20, left: (2 * (2 - 12)) = -20, 4\n(4) - (-20) = 24, left: (4 - (2 * (2 - 12))) = 24\nreach 24! expression: (4 - (2 * (2 - 12)))"}, {"input": "12 2 4 2\n", "output": "(2) + (4) = 6, left: (2 + 4) = 6, 12, 2\n(2) * (6) = 12, left: (2 * (2 + 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (2 + 4))) = 24\nreach 24! expression: (12 + (2 * (2 + 4)))"}, {"input": "12 2 4 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 12, 2\n(2) * (6) = 12, left: (2 * (4 + 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (4 + 2))) = 24\nreach 24! expression: (12 + (2 * (4 + 2)))"}, {"input": "12 2 4 2\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 2, 2\n(2) - (3) = -1, left: (2 - (12 / 4)) = -1, 2\nroll back, left: (12 / 4) = 3, 2, 2\nroll back, left: 12 2 4 2\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, 12, 2\nroll back, left: 12 2 4 2\n(4) + (2) = 6, left: (4 + 2) = 6, 12, 2\n(2) * (6) = 12, left: (2 * (4 + 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (4 + 2))) = 24\nreach 24! expression: (12 + (2 * (4 + 2)))"}, {"input": "12 2 4 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 12, 2\n(12) / (2) = 6, left: (12 / 2) = 6, (4 + 2) = 6\nroll back, left: (4 + 2) = 6, 12, 2\n(2) - (12) = -10, left: (2 - 12) = -10, (4 + 2) = 6\nroll back, left: (4 + 2) = 6, 12, 2\n(6) - (2) = 4, left: ((4 + 2) - 2) = 4, 12\nroll back, left: (4 + 2) = 6, 12, 2\n(2) * (6) = 12, left: (2 * (4 + 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (4 + 2))) = 24\nreach 24! expression: (12 + (2 * (4 + 2)))"}, {"input": "12 2 4 2\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 12, 4\n(12) + (4) = 16, left: (12 + 4) = 16, (2 + 2) = 4\nroll back, left: (2 + 2) = 4, 12, 4\nroll back, left: 12 2 4 2\n(2) + (4) = 6, left: (2 + 4) = 6, 12, 2\n(12) * (2) = 24, left: (12 * 2) = 24, (2 + 4) = 6\nroll back, left: (2 + 4) = 6, 12, 2\n(2) * (6) = 12, left: (2 * (2 + 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (2 + 4))) = 24\nreach 24! expression: (12 + (2 * (2 + 4)))"}, {"input": "12 2 4 2\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 2, 2\n(2) - (1/3) = 5/3, left: (2 - (4 / 12)) = 5/3, 2\nroll back, left: (4 / 12) = 1/3, 2, 2\n(1/3) / (2) = 1/6, left: ((4 / 12) / 2) = 1/6, 2\nroll back, left: (4 / 12) = 1/3, 2, 2\nroll back, left: 12 2 4 2\n(2) + (4) = 6, left: (2 + 4) = 6, 12, 2\n(2) * (6) = 12, left: (2 * (2 + 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (2 * (2 + 4))) = 24\nreach 24! expression: (12 + (2 * (2 + 4)))"}, {"input": "8 13 2 9\n", "output": "(9) - (13) = -4, left: (9 - 13) = -4, 8, 2\n(8) - (-4) = 12, left: (8 - (9 - 13)) = 12, 2\n(2) * (12) = 24, left: (2 * (8 - (9 - 13))) = 24\nreach 24! expression: (2 * (8 - (9 - 13)))"}, {"input": "8 13 2 9\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 13, 9\n(13) - (9) = 4, left: (13 - 9) = 4, (8 - 2) = 6\n(6) * (4) = 24, left: ((8 - 2) * (13 - 9)) = 24\nreach 24! expression: ((8 - 2) * (13 - 9))"}, {"input": "8 13 2 9\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 8, 2\n(8) + (4) = 12, left: (8 + (13 - 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (8 + (13 - 9))) = 24\nreach 24! expression: (2 * (8 + (13 - 9)))"}, {"input": "8 13 2 9\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (9 - 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (9 - 8))) = 24\nreach 24! expression: (2 * (13 - (9 - 8)))"}, {"input": "8 13 2 9\n", "output": "(13) / (8) = 13/8, left: (13 / 8) = 13/8, 2, 9\n(2) - (13/8) = 3/8, left: (2 - (13 / 8)) = 3/8, 9\n(9) / (3/8) = 24, left: (9 / (2 - (13 / 8))) = 24\nreach 24! expression: (9 / (2 - (13 / 8)))"}, {"input": "8 13 2 9\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 8, 2\n(4) / (8) = 1/2, left: ((13 - 9) / 8) = 1/2, 2\n(1/2) - (2) = -3/2, left: (((13 - 9) / 8) - 2) = -3/2\nroll back, left: ((13 - 9) / 8) = 1/2, 2\nroll back, left: (13 - 9) = 4, 8, 2\n(8) / (4) = 2, left: (8 / (13 - 9)) = 2, 2\nroll back, left: (13 - 9) = 4, 8, 2\n(8) + (4) = 12, left: (8 + (13 - 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (8 + (13 - 9))) = 24\nreach 24! expression: (2 * (8 + (13 - 9)))"}, {"input": "8 13 2 9\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 13, 2\n(2) * (1) = 2, left: (2 * (9 - 8)) = 2, 13\nroll back, left: (9 - 8) = 1, 13, 2\n(1) / (13) = 1/13, left: ((9 - 8) / 13) = 1/13, 2\nroll back, left: (9 - 8) = 1, 13, 2\n(1) - (13) = -12, left: ((9 - 8) - 13) = -12, 2\nroll back, left: (9 - 8) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (9 - 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (9 - 8))) = 24\nreach 24! expression: (2 * (13 - (9 - 8)))"}, {"input": "8 13 2 9\n", "output": "(13) * (9) = 117, left: (13 * 9) = 117, 8, 2\n(117) - (8) = 109, left: ((13 * 9) - 8) = 109, 2\nroll back, left: (13 * 9) = 117, 8, 2\nroll back, left: 8 13 2 9\n(9) - (13) = -4, left: (9 - 13) = -4, 8, 2\n(8) + (-4) = 4, left: (8 + (9 - 13)) = 4, 2\nroll back, left: (9 - 13) = -4, 8, 2\n(8) - (-4) = 12, left: (8 - (9 - 13)) = 12, 2\n(2) * (12) = 24, left: (2 * (8 - (9 - 13))) = 24\nreach 24! expression: (2 * (8 - (9 - 13)))"}, {"input": "8 13 2 9\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 8, 13\nroll back, left: 8 13 2 9\n(13) / (2) = 13/2, left: (13 / 2) = 13/2, 8, 9\nroll back, left: 8 13 2 9\n(13) * (2) = 26, left: (13 * 2) = 26, 8, 9\nroll back, left: 8 13 2 9\n(8) - (2) = 6, left: (8 - 2) = 6, 13, 9\n(13) - (9) = 4, left: (13 - 9) = 4, (8 - 2) = 6\n(6) * (4) = 24, left: ((8 - 2) * (13 - 9)) = 24\nreach 24! expression: ((8 - 2) * (13 - 9))"}, {"input": "8 5 8 8\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (5 * 8) = 40\n(40) - (16) = 24, left: ((5 * 8) - (8 + 8)) = 24\nreach 24! expression: ((5 * 8) - (8 + 8))"}, {"input": "8 5 8 8\n", "output": "(8) * (8) = 64, left: (8 * 8) = 64, 5, 8\n(5) * (8) = 40, left: (5 * 8) = 40, (8 * 8) = 64\n(64) - (40) = 24, left: ((8 * 8) - (5 * 8)) = 24\nreach 24! expression: ((8 * 8) - (5 * 8))"}, {"input": "8 5 8 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (8 + 8) = 16\n(40) - (16) = 24, left: ((8 * 5) - (8 + 8)) = 24\nreach 24! expression: ((8 * 5) - (8 + 8))"}, {"input": "8 5 8 8\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 8, 8\n(40) - (8) = 32, left: ((5 * 8) - 8) = 32, 8\n(32) - (8) = 24, left: (((5 * 8) - 8) - 8) = 24\nreach 24! expression: (((5 * 8) - 8) - 8)"}, {"input": "8 5 8 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 8, 5\n(5) - (0) = 5, left: (5 - (8 - 8)) = 5, 8\n(5) - (8) = -3, left: ((5 - (8 - 8)) - 8) = -3\nroll back, left: (5 - (8 - 8)) = 5, 8\nroll back, left: (8 - 8) = 0, 8, 5\nroll back, left: 8 5 8 8\n(8) + (8) = 16, left: (8 + 8) = 16, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (8 + 8) = 16\n(40) - (16) = 24, left: ((8 * 5) - (8 + 8)) = 24\nreach 24! expression: ((8 * 5) - (8 + 8))"}, {"input": "8 5 8 8\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 8, 8\nroll back, left: 8 5 8 8\n(8) - (5) = 3, left: (8 - 5) = 3, 8, 8\n(8) * (8) = 64, left: (8 * 8) = 64, (8 - 5) = 3\nroll back, left: (8 - 5) = 3, 8, 8\nroll back, left: 8 5 8 8\n(5) * (8) = 40, left: (5 * 8) = 40, 8, 8\n(40) - (8) = 32, left: ((5 * 8) - 8) = 32, 8\n(32) - (8) = 24, left: (((5 * 8) - 8) - 8) = 24\nreach 24! expression: (((5 * 8) - 8) - 8)"}, {"input": "8 5 8 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (8 + 8) = 16\n(16) / (40) = 2/5, left: ((8 + 8) / (8 * 5)) = 2/5\nroll back, left: (8 * 5) = 40, (8 + 8) = 16\n(40) - (16) = 24, left: ((8 * 5) - (8 + 8)) = 24\nreach 24! expression: ((8 * 5) - (8 + 8))"}, {"input": "8 5 8 8\n", "output": "(8) * (8) = 64, left: (8 * 8) = 64, 5, 8\n(5) + (64) = 69, left: (5 + (8 * 8)) = 69, 8\n(8) * (69) = 552, left: (8 * (5 + (8 * 8))) = 552\nroll back, left: (5 + (8 * 8)) = 69, 8\nroll back, left: (8 * 8) = 64, 5, 8\n(5) * (64) = 320, left: (5 * (8 * 8)) = 320, 8\nroll back, left: (8 * 8) = 64, 5, 8\n(5) * (8) = 40, left: (5 * 8) = 40, (8 * 8) = 64\n(64) - (40) = 24, left: ((8 * 8) - (5 * 8)) = 24\nreach 24! expression: ((8 * 8) - (5 * 8))"}, {"input": "8 5 8 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 8, 8\n(8) + (13) = 21, left: (8 + (5 + 8)) = 21, 8\nroll back, left: (5 + 8) = 13, 8, 8\nroll back, left: 8 5 8 8\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 8, 8\nroll back, left: 8 5 8 8\n(5) * (8) = 40, left: (5 * 8) = 40, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (5 * 8) = 40\n(40) - (16) = 24, left: ((5 * 8) - (8 + 8)) = 24\nreach 24! expression: ((5 * 8) - (8 + 8))"}, {"input": "8 5 8 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (8 + 8) = 16\n(16) / (40) = 2/5, left: ((8 + 8) / (8 * 5)) = 2/5\nroll back, left: (8 * 5) = 40, (8 + 8) = 16\n(40) - (16) = 24, left: ((8 * 5) - (8 + 8)) = 24\nreach 24! expression: ((8 * 5) - (8 + 8))"}, {"input": "8 5 8 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (8 + 8) = 16\n(16) / (40) = 2/5, left: ((8 + 8) / (8 * 5)) = 2/5\nroll back, left: (8 * 5) = 40, (8 + 8) = 16\n(40) - (16) = 24, left: ((8 * 5) - (8 + 8)) = 24\nreach 24! expression: ((8 * 5) - (8 + 8))"}, {"input": "8 5 8 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 8, 5\n(8) * (5) = 40, left: (8 * 5) = 40, (8 + 8) = 16\n(16) / (40) = 2/5, left: ((8 + 8) / (8 * 5)) = 2/5\nroll back, left: (8 * 5) = 40, (8 + 8) = 16\n(40) - (16) = 24, left: ((8 * 5) - (8 + 8)) = 24\nreach 24! expression: ((8 * 5) - (8 + 8))"}, {"input": "5 8 7 6\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (8 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (8 - 5))) = 24\nreach 24! expression: (6 * (7 - (8 - 5)))"}, {"input": "5 8 7 6\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 8, 6\n(6) / (2) = 3, left: (6 / (7 - 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 / (7 - 5))) = 24\nreach 24! expression: (8 * (6 / (7 - 5)))"}, {"input": "5 8 7 6\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 7, 6\n(7) + (-3) = 4, left: (7 + (5 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (5 - 8))) = 24\nreach 24! expression: (6 * (7 + (5 - 8)))"}, {"input": "5 8 7 6\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (7 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (7 - 8))) = 24\nreach 24! expression: (6 * (5 + (7 - 8)))"}, {"input": "5 8 7 6\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 8, 6\n(8) - (6) = 2, left: (8 - 6) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (8 - 6)) = 24\nreach 24! expression: ((5 + 7) * (8 - 6))"}, {"input": "5 8 7 6\n", "output": "(6) / (7) = 6/7, left: (6 / 7) = 6/7, 5, 8\n(8) * (6/7) = 48/7, left: (8 * (6 / 7)) = 48/7, 5\nroll back, left: (6 / 7) = 6/7, 5, 8\nroll back, left: 5 8 7 6\n(7) * (6) = 42, left: (7 * 6) = 42, 5, 8\nroll back, left: 5 8 7 6\n(7) - (5) = 2, left: (7 - 5) = 2, 8, 6\n(6) / (2) = 3, left: (6 / (7 - 5)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 / (7 - 5))) = 24\nreach 24! expression: (8 * (6 / (7 - 5)))"}, {"input": "5 8 7 6\n", "output": "(6) / (7) = 6/7, left: (6 / 7) = 6/7, 5, 8\nroll back, left: 5 8 7 6\n(7) * (6) = 42, left: (7 * 6) = 42, 5, 8\nroll back, left: 5 8 7 6\n(5) * (8) = 40, left: (5 * 8) = 40, 7, 6\nroll back, left: 5 8 7 6\n(5) - (8) = -3, left: (5 - 8) = -3, 7, 6\n(7) + (-3) = 4, left: (7 + (5 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (5 - 8))) = 24\nreach 24! expression: (6 * (7 + (5 - 8)))"}, {"input": "5 8 7 6\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 8, 6\n(8) / (5/7) = 56/5, left: (8 / (5 / 7)) = 56/5, 6\nroll back, left: (5 / 7) = 5/7, 8, 6\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, (5 / 7) = 5/7\nroll back, left: (5 / 7) = 5/7, 8, 6\nroll back, left: 5 8 7 6\n(5) + (7) = 12, left: (5 + 7) = 12, 8, 6\n(8) - (6) = 2, left: (8 - 6) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (8 - 6)) = 24\nreach 24! expression: ((5 + 7) * (8 - 6))"}, {"input": "5 8 7 6\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 5, 6\n(6) / (-1) = -6, left: (6 / (7 - 8)) = -6, 5\nroll back, left: (7 - 8) = -1, 5, 6\n(-1) - (6) = -7, left: ((7 - 8) - 6) = -7, 5\nroll back, left: (7 - 8) = -1, 5, 6\n(-1) / (5) = -1/5, left: ((7 - 8) / 5) = -1/5, 6\nroll back, left: (7 - 8) = -1, 5, 6\n(5) + (-1) = 4, left: (5 + (7 - 8)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 + (7 - 8))) = 24\nreach 24! expression: (6 * (5 + (7 - 8)))"}, {"input": "5 8 7 6\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 8, 7\nroll back, left: 5 8 7 6\n(5) * (8) = 40, left: (5 * 8) = 40, 7, 6\n(6) / (7) = 6/7, left: (6 / 7) = 6/7, (5 * 8) = 40\nroll back, left: (5 * 8) = 40, 7, 6\nroll back, left: 5 8 7 6\n(8) - (5) = 3, left: (8 - 5) = 3, 7, 6\n(7) - (3) = 4, left: (7 - (8 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 - (8 - 5))) = 24\nreach 24! expression: (6 * (7 - (8 - 5)))"}, {"input": "10 8 5 8\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (10 / 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (10 / 5))) = 24\nreach 24! expression: (8 + (8 * (10 / 5)))"}, {"input": "10 8 5 8\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 8, 5\n(5) + (-2) = 3, left: (5 + (8 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 + (8 - 10))) = 24\nreach 24! expression: (8 * (5 + (8 - 10)))"}, {"input": "10 8 5 8\n", "output": "(8) + (5) = 13, left: (8 + 5) = 13, 10, 8\n(13) - (10) = 3, left: ((8 + 5) - 10) = 3, 8\n(8) * (3) = 24, left: (8 * ((8 + 5) - 10)) = 24\nreach 24! expression: (8 * ((8 + 5) - 10))"}, {"input": "10 8 5 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 10, 5\n(10) + (5) = 15, left: (10 + 5) = 15, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 10, 5\nroll back, left: 10 8 5 8\n(8) * (8) = 64, left: (8 * 8) = 64, 10, 5\nroll back, left: 10 8 5 8\n(10) / (5) = 2, left: (10 / 5) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (10 / 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (10 / 5))) = 24\nreach 24! expression: (8 + (8 * (10 / 5)))"}, {"input": "10 8 5 8\n", "output": "(10) + (8) = 18, left: (10 + 8) = 18, 8, 5\nroll back, left: 10 8 5 8\n(10) / (8) = 5/4, left: (10 / 8) = 5/4, 8, 5\n(8) - (5) = 3, left: (8 - 5) = 3, (10 / 8) = 5/4\nroll back, left: (10 / 8) = 5/4, 8, 5\nroll back, left: 10 8 5 8\n(8) - (10) = -2, left: (8 - 10) = -2, 8, 5\n(5) + (-2) = 3, left: (5 + (8 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 + (8 - 10))) = 24\nreach 24! expression: (8 * (5 + (8 - 10)))"}, {"input": "10 8 5 8\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 8, 5\n(8) / (-2) = -4, left: (8 / (8 - 10)) = -4, 5\nroll back, left: (8 - 10) = -2, 8, 5\n(-2) / (8) = -1/4, left: ((8 - 10) / 8) = -1/4, 5\nroll back, left: (8 - 10) = -2, 8, 5\n(8) + (-2) = 6, left: (8 + (8 - 10)) = 6, 5\nroll back, left: (8 - 10) = -2, 8, 5\n(5) + (-2) = 3, left: (5 + (8 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 + (8 - 10))) = 24\nreach 24! expression: (8 * (5 + (8 - 10)))"}, {"input": "10 8 5 8\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 8, 5\n(-2) / (8) = -1/4, left: ((8 - 10) / 8) = -1/4, 5\n(5) + (-1/4) = 19/4, left: (5 + ((8 - 10) / 8)) = 19/4\nroll back, left: ((8 - 10) / 8) = -1/4, 5\nroll back, left: (8 - 10) = -2, 8, 5\n(8) * (-2) = -16, left: (8 * (8 - 10)) = -16, 5\nroll back, left: (8 - 10) = -2, 8, 5\n(5) + (-2) = 3, left: (5 + (8 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (5 + (8 - 10))) = 24\nreach 24! expression: (8 * (5 + (8 - 10)))"}, {"input": "8 13 6 4\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 8, 6\n(9) - (6) = 3, left: ((13 - 4) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 4) - 6)) = 24\nreach 24! expression: (8 * ((13 - 4) - 6))"}, {"input": "8 13 6 4\n", "output": "(6) + (4) = 10, left: (6 + 4) = 10, 8, 13\n(13) - (10) = 3, left: (13 - (6 + 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (6 + 4))) = 24\nreach 24! expression: (8 * (13 - (6 + 4)))"}, {"input": "8 13 6 4\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 8, 4\n(7) - (4) = 3, left: ((13 - 6) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 6) - 4)) = 24\nreach 24! expression: (8 * ((13 - 6) - 4))"}, {"input": "8 13 6 4\n", "output": "(6) + (4) = 10, left: (6 + 4) = 10, 8, 13\n(8) + (10) = 18, left: (8 + (6 + 4)) = 18, 13\nroll back, left: (6 + 4) = 10, 8, 13\n(10) / (8) = 5/4, left: ((6 + 4) / 8) = 5/4, 13\nroll back, left: (6 + 4) = 10, 8, 13\n(8) * (10) = 80, left: (8 * (6 + 4)) = 80, 13\nroll back, left: (6 + 4) = 10, 8, 13\n(13) - (10) = 3, left: (13 - (6 + 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (6 + 4))) = 24\nreach 24! expression: (8 * (13 - (6 + 4)))"}, {"input": "8 13 6 4\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 8, 13\n(13) + (2/3) = 41/3, left: (13 + (4 / 6)) = 41/3, 8\nroll back, left: (4 / 6) = 2/3, 8, 13\nroll back, left: 8 13 6 4\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, 8, 13\nroll back, left: 8 13 6 4\n(6) + (4) = 10, left: (6 + 4) = 10, 8, 13\n(13) - (10) = 3, left: (13 - (6 + 4)) = 3, 8\n(8) * (3) = 24, left: (8 * (13 - (6 + 4))) = 24\nreach 24! expression: (8 * (13 - (6 + 4)))"}, {"input": "8 13 6 4\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 13, 4\n(3/4) / (4) = 3/16, left: ((6 / 8) / 4) = 3/16, 13\nroll back, left: (6 / 8) = 3/4, 13, 4\nroll back, left: 8 13 6 4\n(8) * (6) = 48, left: (8 * 6) = 48, 13, 4\nroll back, left: 8 13 6 4\n(13) - (4) = 9, left: (13 - 4) = 9, 8, 6\n(9) - (6) = 3, left: ((13 - 4) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 4) - 6)) = 24\nreach 24! expression: (8 * ((13 - 4) - 6))"}, {"input": "8 13 6 4\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 13, 4\nroll back, left: 8 13 6 4\n(6) - (8) = -2, left: (6 - 8) = -2, 13, 4\nroll back, left: 8 13 6 4\n(13) - (4) = 9, left: (13 - 4) = 9, 8, 6\n(8) - (6) = 2, left: (8 - 6) = 2, (13 - 4) = 9\nroll back, left: (13 - 4) = 9, 8, 6\n(9) - (6) = 3, left: ((13 - 4) - 6) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 4) - 6)) = 24\nreach 24! expression: (8 * ((13 - 4) - 6))"}, {"input": "8 13 6 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 13, 6\n(6) / (13) = 6/13, left: (6 / 13) = 6/13, (8 / 4) = 2\nroll back, left: (8 / 4) = 2, 13, 6\nroll back, left: 8 13 6 4\n(6) / (13) = 6/13, left: (6 / 13) = 6/13, 8, 4\nroll back, left: 8 13 6 4\n(13) - (6) = 7, left: (13 - 6) = 7, 8, 4\n(7) - (4) = 3, left: ((13 - 6) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 6) - 4)) = 24\nreach 24! expression: (8 * ((13 - 6) - 4))"}, {"input": "3 3 6 13\n", "output": "(13) - (3) = 10, left: (13 - 3) = 10, 3, 6\n(3) * (10) = 30, left: (3 * (13 - 3)) = 30, 6\n(30) - (6) = 24, left: ((3 * (13 - 3)) - 6) = 24\nreach 24! expression: ((3 * (13 - 3)) - 6)"}, {"input": "3 3 6 13\n", "output": "(6) - (13) = -7, left: (6 - 13) = -7, 3, 3\n(3) * (-7) = -21, left: (3 * (6 - 13)) = -21, 3\n(3) - (-21) = 24, left: (3 - (3 * (6 - 13))) = 24\nreach 24! expression: (3 - (3 * (6 - 13)))"}, {"input": "3 3 6 13\n", "output": "(13) / (6) = 13/6, left: (13 / 6) = 13/6, 3, 3\nroll back, left: 3 3 6 13\n(6) + (13) = 19, left: (6 + 13) = 19, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (6 + 13) = 19\nroll back, left: (6 + 13) = 19, 3, 3\nroll back, left: 3 3 6 13\n(6) - (13) = -7, left: (6 - 13) = -7, 3, 3\n(3) * (-7) = -21, left: (3 * (6 - 13)) = -21, 3\n(3) - (-21) = 24, left: (3 - (3 * (6 - 13))) = 24\nreach 24! expression: (3 - (3 * (6 - 13)))"}, {"input": "3 3 6 13\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 3, 6\n(-10) - (3) = -13, left: ((3 - 13) - 3) = -13, 6\nroll back, left: (3 - 13) = -10, 3, 6\nroll back, left: 3 3 6 13\n(3) + (13) = 16, left: (3 + 13) = 16, 3, 6\nroll back, left: 3 3 6 13\n(13) - (3) = 10, left: (13 - 3) = 10, 3, 6\n(3) * (10) = 30, left: (3 * (13 - 3)) = 30, 6\n(30) - (6) = 24, left: ((3 * (13 - 3)) - 6) = 24\nreach 24! expression: ((3 * (13 - 3)) - 6)"}, {"input": "3 3 6 13\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 3, 13\n(3) / (-3) = -1, left: (3 / (3 - 6)) = -1, 13\nroll back, left: (3 - 6) = -3, 3, 13\nroll back, left: 3 3 6 13\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, 3, 6\nroll back, left: 3 3 6 13\n(13) - (3) = 10, left: (13 - 3) = 10, 3, 6\n(3) * (10) = 30, left: (3 * (13 - 3)) = 30, 6\n(30) - (6) = 24, left: ((3 * (13 - 3)) - 6) = 24\nreach 24! expression: ((3 * (13 - 3)) - 6)"}, {"input": "8 8 13 2\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 8, 2\n(5) - (2) = 3, left: ((13 - 8) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 8) - 2)) = 24\nreach 24! expression: (8 * ((13 - 8) - 2))"}, {"input": "8 8 13 2\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (8 / 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (8 / 8))) = 24\nreach 24! expression: (2 * (13 - (8 / 8)))"}, {"input": "8 8 13 2\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 8, 8\n(11) - (8) = 3, left: ((13 - 2) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 2) - 8)) = 24\nreach 24! expression: (8 * ((13 - 2) - 8))"}, {"input": "8 8 13 2\n", "output": "(8) / (13) = 8/13, left: (8 / 13) = 8/13, 8, 2\n(2) / (8/13) = 13/4, left: (2 / (8 / 13)) = 13/4, 8\nroll back, left: (8 / 13) = 8/13, 8, 2\nroll back, left: 8 8 13 2\n(13) - (8) = 5, left: (13 - 8) = 5, 8, 2\n(5) / (8) = 5/8, left: ((13 - 8) / 8) = 5/8, 2\nroll back, left: (13 - 8) = 5, 8, 2\n(5) - (2) = 3, left: ((13 - 8) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 8) - 2)) = 24\nreach 24! expression: (8 * ((13 - 8) - 2))"}, {"input": "8 8 13 2\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 13, 2\n(16) / (2) = 8, left: ((8 + 8) / 2) = 8, 13\nroll back, left: (8 + 8) = 16, 13, 2\nroll back, left: 8 8 13 2\n(8) / (8) = 1, left: (8 / 8) = 1, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (8 / 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (8 / 8))) = 24\nreach 24! expression: (2 * (13 - (8 / 8)))"}, {"input": "8 8 13 2\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 8, 2\nroll back, left: 8 8 13 2\n(13) / (8) = 13/8, left: (13 / 8) = 13/8, 8, 2\n(2) + (13/8) = 29/8, left: (2 + (13 / 8)) = 29/8, 8\nroll back, left: (13 / 8) = 13/8, 8, 2\nroll back, left: 8 8 13 2\n(13) - (8) = 5, left: (13 - 8) = 5, 8, 2\n(5) - (2) = 3, left: ((13 - 8) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 8) - 2)) = 24\nreach 24! expression: (8 * ((13 - 8) - 2))"}, {"input": "8 8 13 2\n", "output": "(2) / (13) = 2/13, left: (2 / 13) = 2/13, 8, 8\n(2/13) - (8) = -102/13, left: ((2 / 13) - 8) = -102/13, 8\nroll back, left: (2 / 13) = 2/13, 8, 8\nroll back, left: 8 8 13 2\n(13) * (2) = 26, left: (13 * 2) = 26, 8, 8\nroll back, left: 8 8 13 2\n(13) - (2) = 11, left: (13 - 2) = 11, 8, 8\n(11) - (8) = 3, left: ((13 - 2) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((13 - 2) - 8)) = 24\nreach 24! expression: (8 * ((13 - 2) - 8))"}, {"input": "8 8 13 2\n", "output": "(8) * (8) = 64, left: (8 * 8) = 64, 13, 2\n(13) / (2) = 13/2, left: (13 / 2) = 13/2, (8 * 8) = 64\nroll back, left: (8 * 8) = 64, 13, 2\n(13) * (2) = 26, left: (13 * 2) = 26, (8 * 8) = 64\nroll back, left: (8 * 8) = 64, 13, 2\nroll back, left: 8 8 13 2\n(8) / (8) = 1, left: (8 / 8) = 1, 13, 2\n(13) - (1) = 12, left: (13 - (8 / 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (8 / 8))) = 24\nreach 24! expression: (2 * (13 - (8 / 8)))"}, {"input": "7 3 6 12\n", "output": "(3) + (6) = 9, left: (3 + 6) = 9, 7, 12\n(9) - (7) = 2, left: ((3 + 6) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 + 6) - 7)) = 24\nreach 24! expression: (12 * ((3 + 6) - 7))"}, {"input": "7 3 6 12\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 6, 12\n(6) - (4) = 2, left: (6 - (7 - 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 - (7 - 3))) = 24\nreach 24! expression: (12 * (6 - (7 - 3)))"}, {"input": "7 3 6 12\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 7, 3\n(3) - (7) = -4, left: (3 - 7) = -4, (6 - 12) = -6\n(-6) * (-4) = 24, left: ((6 - 12) * (3 - 7)) = 24\nreach 24! expression: ((6 - 12) * (3 - 7))"}, {"input": "7 3 6 12\n", "output": "(6) + (12) = 18, left: (6 + 12) = 18, 7, 3\nroll back, left: 7 3 6 12\n(12) / (6) = 2, left: (12 / 6) = 2, 7, 3\n(2) / (7) = 2/7, left: ((12 / 6) / 7) = 2/7, 3\nroll back, left: (12 / 6) = 2, 7, 3\nroll back, left: 7 3 6 12\n(6) - (12) = -6, left: (6 - 12) = -6, 7, 3\n(3) - (7) = -4, left: (3 - 7) = -4, (6 - 12) = -6\n(-6) * (-4) = 24, left: ((6 - 12) * (3 - 7)) = 24\nreach 24! expression: ((6 - 12) * (3 - 7))"}, {"input": "7 3 6 12\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 7, 12\n(7) / (12) = 7/12, left: (7 / 12) = 7/12, (3 / 6) = 1/2\nroll back, left: (3 / 6) = 1/2, 7, 12\nroll back, left: 7 3 6 12\n(3) - (6) = -3, left: (3 - 6) = -3, 7, 12\nroll back, left: 7 3 6 12\n(3) + (6) = 9, left: (3 + 6) = 9, 7, 12\n(9) - (7) = 2, left: ((3 + 6) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 + 6) - 7)) = 24\nreach 24! expression: (12 * ((3 + 6) - 7))"}, {"input": "7 3 6 12\n", "output": "(7) - (12) = -5, left: (7 - 12) = -5, 3, 6\n(-5) / (6) = -5/6, left: ((7 - 12) / 6) = -5/6, 3\nroll back, left: (7 - 12) = -5, 3, 6\nroll back, left: 7 3 6 12\n(12) - (3) = 9, left: (12 - 3) = 9, 7, 6\nroll back, left: 7 3 6 12\n(3) + (6) = 9, left: (3 + 6) = 9, 7, 12\n(9) - (7) = 2, left: ((3 + 6) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 + 6) - 7)) = 24\nreach 24! expression: (12 * ((3 + 6) - 7))"}, {"input": "7 3 6 12\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 6, 12\nroll back, left: 7 3 6 12\n(7) + (3) = 10, left: (7 + 3) = 10, 6, 12\nroll back, left: 7 3 6 12\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, 6, 12\nroll back, left: 7 3 6 12\n(7) - (3) = 4, left: (7 - 3) = 4, 6, 12\n(6) - (4) = 2, left: (6 - (7 - 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 - (7 - 3))) = 24\nreach 24! expression: (12 * (6 - (7 - 3)))"}, {"input": "7 3 6 12\n", "output": "(3) * (12) = 36, left: (3 * 12) = 36, 7, 6\nroll back, left: 7 3 6 12\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 7, 12\n(7) + (1/2) = 15/2, left: (7 + (3 / 6)) = 15/2, 12\nroll back, left: (3 / 6) = 1/2, 7, 12\nroll back, left: 7 3 6 12\n(3) + (6) = 9, left: (3 + 6) = 9, 7, 12\n(9) - (7) = 2, left: ((3 + 6) - 7) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 + 6) - 7)) = 24\nreach 24! expression: (12 * ((3 + 6) - 7))"}, {"input": "5 2 12 13\n", "output": "(5) + (13) = 18, left: (5 + 13) = 18, 2, 12\n(12) / (2) = 6, left: (12 / 2) = 6, (5 + 13) = 18\n(18) + (6) = 24, left: ((5 + 13) + (12 / 2)) = 24\nreach 24! expression: ((5 + 13) + (12 / 2))"}, {"input": "5 2 12 13\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 5, 13\n(5) + (13) = 18, left: (5 + 13) = 18, (12 / 2) = 6\n(6) + (18) = 24, left: ((12 / 2) + (5 + 13)) = 24\nreach 24! expression: ((12 / 2) + (5 + 13))"}, {"input": "5 2 12 13\n", "output": "(5) + (13) = 18, left: (5 + 13) = 18, 2, 12\n(2) * (18) = 36, left: (2 * (5 + 13)) = 36, 12\n(36) - (12) = 24, left: ((2 * (5 + 13)) - 12) = 24\nreach 24! expression: ((2 * (5 + 13)) - 12)"}, {"input": "5 2 12 13\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 5, 13\n(13) + (6) = 19, left: (13 + (12 / 2)) = 19, 5\n(5) + (19) = 24, left: (5 + (13 + (12 / 2))) = 24\nreach 24! expression: (5 + (13 + (12 / 2)))"}, {"input": "5 2 12 13\n", "output": "(5) * (12) = 60, left: (5 * 12) = 60, 2, 13\nroll back, left: 5 2 12 13\n(2) / (13) = 2/13, left: (2 / 13) = 2/13, 5, 12\nroll back, left: 5 2 12 13\n(2) * (12) = 24, left: (2 * 12) = 24, 5, 13\nroll back, left: 5 2 12 13\n(12) / (2) = 6, left: (12 / 2) = 6, 5, 13\n(13) + (6) = 19, left: (13 + (12 / 2)) = 19, 5\n(5) + (19) = 24, left: (5 + (13 + (12 / 2))) = 24\nreach 24! expression: (5 + (13 + (12 / 2)))"}, {"input": "5 2 12 13\n", "output": "(5) + (2) = 7, left: (5 + 2) = 7, 12, 13\n(12) * (7) = 84, left: (12 * (5 + 2)) = 84, 13\nroll back, left: (5 + 2) = 7, 12, 13\nroll back, left: 5 2 12 13\n(13) - (5) = 8, left: (13 - 5) = 8, 2, 12\nroll back, left: 5 2 12 13\n(5) + (13) = 18, left: (5 + 13) = 18, 2, 12\n(2) * (18) = 36, left: (2 * (5 + 13)) = 36, 12\n(36) - (12) = 24, left: ((2 * (5 + 13)) - 12) = 24\nreach 24! expression: ((2 * (5 + 13)) - 12)"}, {"input": "5 2 12 13\n", "output": "(5) + (2) = 7, left: (5 + 2) = 7, 12, 13\nroll back, left: 5 2 12 13\n(2) * (12) = 24, left: (2 * 12) = 24, 5, 13\n(13) / (5) = 13/5, left: (13 / 5) = 13/5, (2 * 12) = 24\nroll back, left: (2 * 12) = 24, 5, 13\nroll back, left: 5 2 12 13\n(12) / (2) = 6, left: (12 / 2) = 6, 5, 13\n(13) + (6) = 19, left: (13 + (12 / 2)) = 19, 5\n(5) + (19) = 24, left: (5 + (13 + (12 / 2))) = 24\nreach 24! expression: (5 + (13 + (12 / 2)))"}, {"input": "13 5 8 6\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (6 / 8) = 3/4\n(18) / (3/4) = 24, left: ((13 + 5) / (6 / 8)) = 24\nreach 24! expression: ((13 + 5) / (6 / 8))"}, {"input": "13 5 8 6\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (8 / 6) = 4/3\n(4/3) * (18) = 24, left: ((8 / 6) * (13 + 5)) = 24\nreach 24! expression: ((8 / 6) * (13 + 5))"}, {"input": "13 5 8 6\n", "output": "(13) + (5) = 18, left: (13 + 5) = 18, 8, 6\n(8) * (18) = 144, left: (8 * (13 + 5)) = 144, 6\n(144) / (6) = 24, left: ((8 * (13 + 5)) / 6) = 24\nreach 24! expression: ((8 * (13 + 5)) / 6)"}, {"input": "13 5 8 6\n", "output": "(13) * (8) = 104, left: (13 * 8) = 104, 5, 6\nroll back, left: 13 5 8 6\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 13, 8\nroll back, left: 13 5 8 6\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 13, 8\nroll back, left: 13 5 8 6\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (8 / 6) = 4/3\n(4/3) * (18) = 24, left: ((8 / 6) * (13 + 5)) = 24\nreach 24! expression: ((8 / 6) * (13 + 5))"}, {"input": "13 5 8 6\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 13, 6\n(13) - (-3) = 16, left: (13 - (5 - 8)) = 16, 6\nroll back, left: (5 - 8) = -3, 13, 6\nroll back, left: 13 5 8 6\n(6) - (8) = -2, left: (6 - 8) = -2, 13, 5\nroll back, left: 13 5 8 6\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (8 / 6) = 4/3\n(4/3) * (18) = 24, left: ((8 / 6) * (13 + 5)) = 24\nreach 24! expression: ((8 / 6) * (13 + 5))"}, {"input": "13 5 8 6\n", "output": "(13) * (8) = 104, left: (13 * 8) = 104, 5, 6\nroll back, left: 13 5 8 6\n(8) - (13) = -5, left: (8 - 13) = -5, 5, 6\nroll back, left: 13 5 8 6\n(13) + (8) = 21, left: (13 + 8) = 21, 5, 6\nroll back, left: 13 5 8 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 13, 5\n(13) + (5) = 18, left: (13 + 5) = 18, (6 / 8) = 3/4\n(18) / (3/4) = 24, left: ((13 + 5) / (6 / 8)) = 24\nreach 24! expression: ((13 + 5) / (6 / 8))"}, {"input": "13 5 8 6\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 13, 6\nroll back, left: 13 5 8 6\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 13, 8\n(5/6) / (13) = 5/78, left: ((5 / 6) / 13) = 5/78, 8\nroll back, left: (5 / 6) = 5/6, 13, 8\nroll back, left: 13 5 8 6\n(13) + (5) = 18, left: (13 + 5) = 18, 8, 6\n(8) * (18) = 144, left: (8 * (13 + 5)) = 144, 6\n(144) / (6) = 24, left: ((8 * (13 + 5)) / 6) = 24\nreach 24! expression: ((8 * (13 + 5)) / 6)"}, {"input": "4 9 5 13\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 4, 5\n(4) * (5) = 20, left: (4 * 5) = 20, (13 - 9) = 4\n(4) + (20) = 24, left: ((13 - 9) + (4 * 5)) = 24\nreach 24! expression: ((13 - 9) + (4 * 5))"}, {"input": "4 9 5 13\n", "output": "(4) * (5) = 20, left: (4 * 5) = 20, 9, 13\n(9) - (13) = -4, left: (9 - 13) = -4, (4 * 5) = 20\n(20) - (-4) = 24, left: ((4 * 5) - (9 - 13)) = 24\nreach 24! expression: ((4 * 5) - (9 - 13))"}, {"input": "4 9 5 13\n", "output": "(4) * (5) = 20, left: (4 * 5) = 20, 9, 13\n(13) + (20) = 33, left: (13 + (4 * 5)) = 33, 9\n(33) - (9) = 24, left: ((13 + (4 * 5)) - 9) = 24\nreach 24! expression: ((13 + (4 * 5)) - 9)"}, {"input": "4 9 5 13\n", "output": "(9) - (13) = -4, left: (9 - 13) = -4, 4, 5\n(5) * (-4) = -20, left: (5 * (9 - 13)) = -20, 4\n(4) - (-20) = 24, left: (4 - (5 * (9 - 13))) = 24\nreach 24! expression: (4 - (5 * (9 - 13)))"}, {"input": "4 9 5 13\n", "output": "(9) - (13) = -4, left: (9 - 13) = -4, 4, 5\n(4) * (5) = 20, left: (4 * 5) = 20, (9 - 13) = -4\n(20) - (-4) = 24, left: ((4 * 5) - (9 - 13)) = 24\nreach 24! expression: ((4 * 5) - (9 - 13))"}, {"input": "4 9 5 13\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 9, 5\nroll back, left: 4 9 5 13\n(9) / (13) = 9/13, left: (9 / 13) = 9/13, 4, 5\n(5) - (4) = 1, left: (5 - 4) = 1, (9 / 13) = 9/13\nroll back, left: (9 / 13) = 9/13, 4, 5\nroll back, left: 4 9 5 13\n(9) - (13) = -4, left: (9 - 13) = -4, 4, 5\n(5) * (-4) = -20, left: (5 * (9 - 13)) = -20, 4\n(4) - (-20) = 24, left: (4 - (5 * (9 - 13))) = 24\nreach 24! expression: (4 - (5 * (9 - 13)))"}, {"input": "4 9 5 13\n", "output": "(5) * (13) = 65, left: (5 * 13) = 65, 4, 9\nroll back, left: 4 9 5 13\n(9) + (13) = 22, left: (9 + 13) = 22, 4, 5\n(5) / (22) = 5/22, left: (5 / (9 + 13)) = 5/22, 4\nroll back, left: (9 + 13) = 22, 4, 5\nroll back, left: 4 9 5 13\n(13) - (9) = 4, left: (13 - 9) = 4, 4, 5\n(4) * (5) = 20, left: (4 * 5) = 20, (13 - 9) = 4\n(4) + (20) = 24, left: ((13 - 9) + (4 * 5)) = 24\nreach 24! expression: ((13 - 9) + (4 * 5))"}, {"input": "4 9 5 13\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 9, 13\nroll back, left: 4 9 5 13\n(4) + (5) = 9, left: (4 + 5) = 9, 9, 13\n(13) / (9) = 13/9, left: (13 / 9) = 13/9, (4 + 5) = 9\nroll back, left: (4 + 5) = 9, 9, 13\nroll back, left: 4 9 5 13\n(4) * (5) = 20, left: (4 * 5) = 20, 9, 13\n(13) + (20) = 33, left: (13 + (4 * 5)) = 33, 9\n(33) - (9) = 24, left: ((13 + (4 * 5)) - 9) = 24\nreach 24! expression: ((13 + (4 * 5)) - 9)"}, {"input": "4 9 5 13\n", "output": "(13) / (5) = 13/5, left: (13 / 5) = 13/5, 4, 9\nroll back, left: 4 9 5 13\n(5) * (13) = 65, left: (5 * 13) = 65, 4, 9\n(65) - (9) = 56, left: ((5 * 13) - 9) = 56, 4\nroll back, left: (5 * 13) = 65, 4, 9\nroll back, left: 4 9 5 13\n(4) * (5) = 20, left: (4 * 5) = 20, 9, 13\n(9) - (13) = -4, left: (9 - 13) = -4, (4 * 5) = 20\n(20) - (-4) = 24, left: ((4 * 5) - (9 - 13)) = 24\nreach 24! expression: ((4 * 5) - (9 - 13))"}, {"input": "4 9 5 13\n", "output": "(13) / (4) = 13/4, left: (13 / 4) = 13/4, 9, 5\n(9) - (5) = 4, left: (9 - 5) = 4, (13 / 4) = 13/4\nroll back, left: (13 / 4) = 13/4, 9, 5\nroll back, left: 4 9 5 13\n(4) + (13) = 17, left: (4 + 13) = 17, 9, 5\nroll back, left: 4 9 5 13\n(9) - (13) = -4, left: (9 - 13) = -4, 4, 5\n(4) * (5) = 20, left: (4 * 5) = 20, (9 - 13) = -4\n(20) - (-4) = 24, left: ((4 * 5) - (9 - 13)) = 24\nreach 24! expression: ((4 * 5) - (9 - 13))"}, {"input": "4 8 6 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (6 / 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (6 / 6))) = 24\nreach 24! expression: (8 * (4 - (6 / 6)))"}, {"input": "4 8 6 6\n", "output": "(8) + (6) = 14, left: (8 + 6) = 14, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (8 + 6) = 14\n(14) + (10) = 24, left: ((8 + 6) + (4 + 6)) = 24\nreach 24! expression: ((8 + 6) + (4 + 6))"}, {"input": "4 8 6 6\n", "output": "(8) + (6) = 14, left: (8 + 6) = 14, 4, 6\n(4) + (14) = 18, left: (4 + (8 + 6)) = 18, 6\n(6) + (18) = 24, left: (6 + (4 + (8 + 6))) = 24\nreach 24! expression: (6 + (4 + (8 + 6)))"}, {"input": "4 8 6 6\n", "output": "(4) / (8) = 1/2, left: (4 / 8) = 1/2, 6, 6\n(6) + (6) = 12, left: (6 + 6) = 12, (4 / 8) = 1/2\n(12) / (1/2) = 24, left: ((6 + 6) / (4 / 8)) = 24\nreach 24! expression: ((6 + 6) / (4 / 8))"}, {"input": "4 8 6 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 4, 8\n(1) / (4) = 1/4, left: ((6 / 6) / 4) = 1/4, 8\n(8) / (1/4) = 32, left: (8 / ((6 / 6) / 4)) = 32\nroll back, left: ((6 / 6) / 4) = 1/4, 8\nroll back, left: (6 / 6) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (6 / 6)) = 3, 8\n(8) + (3) = 11, left: (8 + (4 - (6 / 6))) = 11\nroll back, left: (4 - (6 / 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (6 / 6))) = 24\nreach 24! expression: (8 * (4 - (6 / 6)))"}, {"input": "4 8 6 6\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 4, 6\nroll back, left: 4 8 6 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 4, 6\n(6) * (3/4) = 9/2, left: (6 * (6 / 8)) = 9/2, 4\nroll back, left: (6 / 8) = 3/4, 4, 6\nroll back, left: 4 8 6 6\n(8) + (6) = 14, left: (8 + 6) = 14, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (8 + 6) = 14\n(14) + (10) = 24, left: ((8 + 6) + (4 + 6)) = 24\nreach 24! expression: ((8 + 6) + (4 + 6))"}, {"input": "4 8 6 6\n", "output": "(8) + (6) = 14, left: (8 + 6) = 14, 4, 6\n(14) / (4) = 7/2, left: ((8 + 6) / 4) = 7/2, 6\n(6) + (7/2) = 19/2, left: (6 + ((8 + 6) / 4)) = 19/2\nroll back, left: ((8 + 6) / 4) = 7/2, 6\nroll back, left: (8 + 6) = 14, 4, 6\n(4) / (14) = 2/7, left: (4 / (8 + 6)) = 2/7, 6\nroll back, left: (8 + 6) = 14, 4, 6\n(4) + (14) = 18, left: (4 + (8 + 6)) = 18, 6\n(6) + (18) = 24, left: (6 + (4 + (8 + 6))) = 24\nreach 24! expression: (6 + (4 + (8 + 6)))"}, {"input": "4 5 5 4\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (4 / 4)) = 24\nreach 24! expression: ((5 * 5) - (4 / 4))"}, {"input": "4 5 5 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (4 / 4) = 1\n(25) - (1) = 24, left: ((5 * 5) - (4 / 4)) = 24\nreach 24! expression: ((5 * 5) - (4 / 4))"}, {"input": "4 5 5 4\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 5, 4\n(5) - (-1) = 6, left: (5 - (4 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (4 - 5))) = 24\nreach 24! expression: (4 * (5 - (4 - 5)))"}, {"input": "4 5 5 4\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 4, 5\n(4) + (4/5) = 24/5, left: (4 + (4 / 5)) = 24/5, 5\n(5) * (24/5) = 24, left: (5 * (4 + (4 / 5))) = 24\nreach 24! expression: (5 * (4 + (4 / 5)))"}, {"input": "4 5 5 4\n", "output": "(4) + (5) = 9, left: (4 + 5) = 9, 5, 4\nroll back, left: 4 5 5 4\n(4) * (5) = 20, left: (4 * 5) = 20, 5, 4\n(20) - (4) = 16, left: ((4 * 5) - 4) = 16, 5\nroll back, left: (4 * 5) = 20, 5, 4\nroll back, left: 4 5 5 4\n(4) - (5) = -1, left: (4 - 5) = -1, 5, 4\n(5) - (-1) = 6, left: (5 - (4 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (4 - 5))) = 24\nreach 24! expression: (4 * (5 - (4 - 5)))"}, {"input": "4 5 5 4\n", "output": "(4) * (5) = 20, left: (4 * 5) = 20, 5, 4\n(5) - (4) = 1, left: (5 - 4) = 1, (4 * 5) = 20\nroll back, left: (4 * 5) = 20, 5, 4\n(20) - (4) = 16, left: ((4 * 5) - 4) = 16, 5\nroll back, left: (4 * 5) = 20, 5, 4\nroll back, left: 4 5 5 4\n(4) - (5) = -1, left: (4 - 5) = -1, 5, 4\n(5) - (-1) = 6, left: (5 - (4 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (4 - 5))) = 24\nreach 24! expression: (4 * (5 - (4 - 5)))"}, {"input": "4 5 5 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 5, 5\nroll back, left: 4 5 5 4\n(4) - (4) = 0, left: (4 - 4) = 0, 5, 5\n(5) - (0) = 5, left: (5 - (4 - 4)) = 5, 5\nroll back, left: (4 - 4) = 0, 5, 5\nroll back, left: 4 5 5 4\n(4) / (4) = 1, left: (4 / 4) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (4 / 4) = 1\n(25) - (1) = 24, left: ((5 * 5) - (4 / 4)) = 24\nreach 24! expression: ((5 * 5) - (4 / 4))"}, {"input": "4 5 5 4\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 4, 4\n(1) / (4) = 1/4, left: ((5 / 5) / 4) = 1/4, 4\nroll back, left: (5 / 5) = 1, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (5 / 5) = 1\nroll back, left: (5 / 5) = 1, 4, 4\nroll back, left: 4 5 5 4\n(5) * (5) = 25, left: (5 * 5) = 25, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (4 / 4)) = 24\nreach 24! expression: ((5 * 5) - (4 / 4))"}, {"input": "3 3 5 5\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (3 / 3) = 1\n(25) - (1) = 24, left: ((5 * 5) - (3 / 3)) = 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (3 / 3)) = 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(3) * (5) = 15, left: (3 * 5) = 15, 3, 5\nroll back, left: 3 3 5 5\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, 3, 5\n(5/3) - (5) = -10/3, left: ((5 / 3) - 5) = -10/3, 3\nroll back, left: (5 / 3) = 5/3, 3, 5\nroll back, left: 3 3 5 5\n(3) / (3) = 1, left: (3 / 3) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (3 / 3) = 1\n(25) - (1) = 24, left: ((5 * 5) - (3 / 3)) = 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 3, 3\n(1) / (3) = 1/3, left: ((5 / 5) / 3) = 1/3, 3\nroll back, left: (5 / 5) = 1, 3, 3\nroll back, left: 3 3 5 5\n(5) - (5) = 0, left: (5 - 5) = 0, 3, 3\nroll back, left: 3 3 5 5\n(5) * (5) = 25, left: (5 * 5) = 25, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (3 / 3)) = 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 3, 5\nroll back, left: 3 3 5 5\n(3) * (5) = 15, left: (3 * 5) = 15, 3, 5\n(15) / (5) = 3, left: ((3 * 5) / 5) = 3, 3\nroll back, left: (3 * 5) = 15, 3, 5\nroll back, left: 3 3 5 5\n(3) / (3) = 1, left: (3 / 3) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (3 / 3) = 1\n(25) - (1) = 24, left: ((5 * 5) - (3 / 3)) = 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 3, 3\n(25) / (3) = 25/3, left: ((5 * 5) / 3) = 25/3, 3\nroll back, left: (5 * 5) = 25, 3, 3\n(3) / (25) = 3/25, left: (3 / (5 * 5)) = 3/25, 3\nroll back, left: (5 * 5) = 25, 3, 3\n(3) - (25) = -22, left: (3 - (5 * 5)) = -22, 3\nroll back, left: (5 * 5) = 25, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (3 / 3)) = 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "3 3 5 5\n", "output": "(5) / (3) = 5/3, left: (5 / 3) = 5/3, 3, 5\nroll back, left: 3 3 5 5\n(3) - (3) = 0, left: (3 - 3) = 0, 5, 5\n(5) - (0) = 5, left: (5 - (3 - 3)) = 5, 5\nroll back, left: (3 - 3) = 0, 5, 5\nroll back, left: 3 3 5 5\n(3) / (3) = 1, left: (3 / 3) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (3 / 3) = 1\n(25) - (1) = 24, left: ((5 * 5) - (3 / 3)) = 24\nreach 24! expression: ((5 * 5) - (3 / 3))"}, {"input": "5 3 6 13\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (13 - 5)) = 24\nreach 24! expression: ((6 - 3) * (13 - 5))"}, {"input": "5 3 6 13\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 3, 6\n(3) - (6) = -3, left: (3 - 6) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (3 - 6)) = 24\nreach 24! expression: ((5 - 13) * (3 - 6))"}, {"input": "5 3 6 13\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 3, 13\nroll back, left: 5 3 6 13\n(5) * (6) = 30, left: (5 * 6) = 30, 3, 13\nroll back, left: 5 3 6 13\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 6, 13\nroll back, left: 5 3 6 13\n(6) - (3) = 3, left: (6 - 3) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (13 - 5)) = 24\nreach 24! expression: ((6 - 3) * (13 - 5))"}, {"input": "5 3 6 13\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 3, 13\nroll back, left: 5 3 6 13\n(6) - (3) = 3, left: (6 - 3) = 3, 5, 13\n(5) / (3) = 5/3, left: (5 / (6 - 3)) = 5/3, 13\nroll back, left: (6 - 3) = 3, 5, 13\n(13) + (3) = 16, left: (13 + (6 - 3)) = 16, 5\nroll back, left: (6 - 3) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (13 - 5)) = 24\nreach 24! expression: ((6 - 3) * (13 - 5))"}, {"input": "5 3 6 13\n", "output": "(5) / (3) = 5/3, left: (5 / 3) = 5/3, 6, 13\nroll back, left: 5 3 6 13\n(5) * (3) = 15, left: (5 * 3) = 15, 6, 13\n(15) / (6) = 5/2, left: ((5 * 3) / 6) = 5/2, 13\nroll back, left: (5 * 3) = 15, 6, 13\nroll back, left: 5 3 6 13\n(5) - (13) = -8, left: (5 - 13) = -8, 3, 6\n(3) - (6) = -3, left: (3 - 6) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (3 - 6)) = 24\nreach 24! expression: ((5 - 13) * (3 - 6))"}, {"input": "5 3 6 13\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 3, 13\n(3) + (13) = 16, left: (3 + 13) = 16, (6 / 5) = 6/5\nroll back, left: (6 / 5) = 6/5, 3, 13\nroll back, left: 5 3 6 13\n(5) + (6) = 11, left: (5 + 6) = 11, 3, 13\nroll back, left: 5 3 6 13\n(6) - (3) = 3, left: (6 - 3) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (13 - 5)) = 24\nreach 24! expression: ((6 - 3) * (13 - 5))"}, {"input": "5 3 6 13\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 6, 13\n(15) - (13) = 2, left: ((5 * 3) - 13) = 2, 6\nroll back, left: (5 * 3) = 15, 6, 13\nroll back, left: 5 3 6 13\n(3) - (5) = -2, left: (3 - 5) = -2, 6, 13\nroll back, left: 5 3 6 13\n(6) - (3) = 3, left: (6 - 3) = 3, 5, 13\n(13) - (5) = 8, left: (13 - 5) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (13 - 5)) = 24\nreach 24! expression: ((6 - 3) * (13 - 5))"}, {"input": "2 2 4 13\n", "output": "(2) / (13) = 2/13, left: (2 / 13) = 2/13, 2, 4\n(4) / (2/13) = 26, left: (4 / (2 / 13)) = 26, 2\n(26) - (2) = 24, left: ((4 / (2 / 13)) - 2) = 24\nreach 24! expression: ((4 / (2 / 13)) - 2)"}, {"input": "2 2 4 13\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 2, 13\n(13) / (1/2) = 26, left: (13 / (2 / 4)) = 26, 2\n(26) - (2) = 24, left: ((13 / (2 / 4)) - 2) = 24\nreach 24! expression: ((13 / (2 / 4)) - 2)"}, {"input": "2 2 4 13\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 2, 4\n(2) + (26) = 28, left: (2 + (2 * 13)) = 28, 4\n(28) - (4) = 24, left: ((2 + (2 * 13)) - 4) = 24\nreach 24! expression: ((2 + (2 * 13)) - 4)"}, {"input": "2 2 4 13\n", "output": "(4) * (13) = 52, left: (4 * 13) = 52, 2, 2\n(52) / (2) = 26, left: ((4 * 13) / 2) = 26, 2\n(26) - (2) = 24, left: (((4 * 13) / 2) - 2) = 24\nreach 24! expression: (((4 * 13) / 2) - 2)"}, {"input": "2 2 4 13\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (4 / 2) = 2\n(26) - (2) = 24, left: ((2 * 13) - (4 / 2)) = 24\nreach 24! expression: ((2 * 13) - (4 / 2))"}, {"input": "2 2 4 13\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 4, 13\nroll back, left: 2 2 4 13\n(2) + (2) = 4, left: (2 + 2) = 4, 4, 13\n(4) + (13) = 17, left: (4 + 13) = 17, (2 + 2) = 4\nroll back, left: (2 + 2) = 4, 4, 13\nroll back, left: 2 2 4 13\n(4) / (2) = 2, left: (4 / 2) = 2, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (4 / 2) = 2\n(26) - (2) = 24, left: ((2 * 13) - (4 / 2)) = 24\nreach 24! expression: ((2 * 13) - (4 / 2))"}, {"input": "2 2 4 13\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 2, 4\n(2) + (26) = 28, left: (2 + (2 * 13)) = 28, 4\n(4) / (28) = 1/7, left: (4 / (2 + (2 * 13))) = 1/7\nroll back, left: (2 + (2 * 13)) = 28, 4\n(28) - (4) = 24, left: ((2 + (2 * 13)) - 4) = 24\nreach 24! expression: ((2 + (2 * 13)) - 4)"}, {"input": "2 2 4 13\n", "output": "(4) * (13) = 52, left: (4 * 13) = 52, 2, 2\n(52) / (2) = 26, left: ((4 * 13) / 2) = 26, 2\n(2) / (26) = 1/13, left: (2 / ((4 * 13) / 2)) = 1/13\nroll back, left: ((4 * 13) / 2) = 26, 2\n(26) - (2) = 24, left: (((4 * 13) / 2) - 2) = 24\nreach 24! expression: (((4 * 13) / 2) - 2)"}, {"input": "2 2 4 13\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 2, 4\n(2) + (26) = 28, left: (2 + (2 * 13)) = 28, 4\n(4) / (28) = 1/7, left: (4 / (2 + (2 * 13))) = 1/7\nroll back, left: (2 + (2 * 13)) = 28, 4\n(28) - (4) = 24, left: ((2 + (2 * 13)) - 4) = 24\nreach 24! expression: ((2 + (2 * 13)) - 4)"}, {"input": "2 2 4 13\n", "output": "(4) * (13) = 52, left: (4 * 13) = 52, 2, 2\n(52) / (2) = 26, left: ((4 * 13) / 2) = 26, 2\n(2) / (26) = 1/13, left: (2 / ((4 * 13) / 2)) = 1/13\nroll back, left: ((4 * 13) / 2) = 26, 2\n(26) - (2) = 24, left: (((4 * 13) / 2) - 2) = 24\nreach 24! expression: (((4 * 13) / 2) - 2)"}, {"input": "2 2 4 13\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 2, 4\n(2) + (26) = 28, left: (2 + (2 * 13)) = 28, 4\n(4) / (28) = 1/7, left: (4 / (2 + (2 * 13))) = 1/7\nroll back, left: (2 + (2 * 13)) = 28, 4\n(28) - (4) = 24, left: ((2 + (2 * 13)) - 4) = 24\nreach 24! expression: ((2 + (2 * 13)) - 4)"}, {"input": "2 2 4 13\n", "output": "(4) * (13) = 52, left: (4 * 13) = 52, 2, 2\n(52) / (2) = 26, left: ((4 * 13) / 2) = 26, 2\n(2) / (26) = 1/13, left: (2 / ((4 * 13) / 2)) = 1/13\nroll back, left: ((4 * 13) / 2) = 26, 2\n(26) - (2) = 24, left: (((4 * 13) / 2) - 2) = 24\nreach 24! expression: (((4 * 13) / 2) - 2)"}, {"input": "2 2 4 13\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 2, 4\n(2) + (26) = 28, left: (2 + (2 * 13)) = 28, 4\n(4) / (28) = 1/7, left: (4 / (2 + (2 * 13))) = 1/7\nroll back, left: (2 + (2 * 13)) = 28, 4\n(28) - (4) = 24, left: ((2 + (2 * 13)) - 4) = 24\nreach 24! expression: ((2 + (2 * 13)) - 4)"}, {"input": "2 2 4 13\n", "output": "(4) * (13) = 52, left: (4 * 13) = 52, 2, 2\n(52) / (2) = 26, left: ((4 * 13) / 2) = 26, 2\n(2) / (26) = 1/13, left: (2 / ((4 * 13) / 2)) = 1/13\nroll back, left: ((4 * 13) / 2) = 26, 2\n(26) - (2) = 24, left: (((4 * 13) / 2) - 2) = 24\nreach 24! expression: (((4 * 13) / 2) - 2)"}, {"input": "11 8 9 11\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (11 - 8)) = 33, 9\n(33) - (9) = 24, left: ((11 * (11 - 8)) - 9) = 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "11 8 9 11\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (11 - 8)) = 33, 9\n(33) - (9) = 24, left: ((11 * (11 - 8)) - 9) = 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "11 8 9 11\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 8, 9\nroll back, left: 11 8 9 11\n(11) + (8) = 19, left: (11 + 8) = 19, 9, 11\nroll back, left: 11 8 9 11\n(11) / (8) = 11/8, left: (11 / 8) = 11/8, 9, 11\nroll back, left: 11 8 9 11\n(11) - (8) = 3, left: (11 - 8) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (11 - 8)) = 33, 9\n(33) - (9) = 24, left: ((11 * (11 - 8)) - 9) = 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "11 8 9 11\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 8, 11\nroll back, left: 11 8 9 11\n(8) / (11) = 8/11, left: (8 / 11) = 8/11, 11, 9\nroll back, left: 11 8 9 11\n(8) + (11) = 19, left: (8 + 11) = 19, 11, 9\nroll back, left: 11 8 9 11\n(11) - (8) = 3, left: (11 - 8) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (11 - 8)) = 33, 9\n(33) - (9) = 24, left: ((11 * (11 - 8)) - 9) = 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "11 8 9 11\n", "output": "(8) * (11) = 88, left: (8 * 11) = 88, 11, 9\nroll back, left: 11 8 9 11\n(8) - (11) = -3, left: (8 - 11) = -3, 11, 9\nroll back, left: 11 8 9 11\n(8) / (11) = 8/11, left: (8 / 11) = 8/11, 11, 9\nroll back, left: 11 8 9 11\n(11) - (8) = 3, left: (11 - 8) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (11 - 8)) = 33, 9\n(33) - (9) = 24, left: ((11 * (11 - 8)) - 9) = 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "11 8 9 11\n", "output": "(11) + (9) = 20, left: (11 + 9) = 20, 8, 11\nroll back, left: 11 8 9 11\n(9) - (11) = -2, left: (9 - 11) = -2, 8, 11\n(8) / (-2) = -4, left: (8 / (9 - 11)) = -4, 11\nroll back, left: (9 - 11) = -2, 8, 11\nroll back, left: 11 8 9 11\n(11) - (8) = 3, left: (11 - 8) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (11 - 8)) = 33, 9\n(33) - (9) = 24, left: ((11 * (11 - 8)) - 9) = 24\nreach 24! expression: ((11 * (11 - 8)) - 9)"}, {"input": "12 4 12 5\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 12, 12\n(12) + (12) = 24, left: (12 + 12) = 24, (5 - 4) = 1\n(1) * (24) = 24, left: ((5 - 4) * (12 + 12)) = 24\nreach 24! expression: ((5 - 4) * (12 + 12))"}, {"input": "12 4 12 5\n", "output": "(12) / (12) = 1, left: (12 / 12) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (12 / 12)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (12 / 12))) = 24\nreach 24! expression: (4 * (5 + (12 / 12)))"}, {"input": "12 4 12 5\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 12, 12\n(12) / (-1) = -12, left: (12 / (4 - 5)) = -12, 12\n(12) - (-12) = 24, left: (12 - (12 / (4 - 5))) = 24\nreach 24! expression: (12 - (12 / (4 - 5)))"}, {"input": "12 4 12 5\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (12 / 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (12 / 4))) = 24\nreach 24! expression: (12 * (5 - (12 / 4)))"}, {"input": "12 4 12 5\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 12, 5\n(5) * (1/3) = 5/3, left: (5 * (4 / 12)) = 5/3, 12\nroll back, left: (4 / 12) = 1/3, 12, 5\nroll back, left: 12 4 12 5\n(4) - (12) = -8, left: (4 - 12) = -8, 12, 5\nroll back, left: 12 4 12 5\n(12) / (4) = 3, left: (12 / 4) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (12 / 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (12 / 4))) = 24\nreach 24! expression: (12 * (5 - (12 / 4)))"}, {"input": "12 4 12 5\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 12, 5\nroll back, left: 12 4 12 5\n(4) - (12) = -8, left: (4 - 12) = -8, 12, 5\n(12) * (-8) = -96, left: (12 * (4 - 12)) = -96, 5\nroll back, left: (4 - 12) = -8, 12, 5\nroll back, left: 12 4 12 5\n(12) / (4) = 3, left: (12 / 4) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (12 / 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (12 / 4))) = 24\nreach 24! expression: (12 * (5 - (12 / 4)))"}, {"input": "12 4 12 5\n", "output": "(12) + (5) = 17, left: (12 + 5) = 17, 4, 12\nroll back, left: 12 4 12 5\n(12) * (5) = 60, left: (12 * 5) = 60, 4, 12\nroll back, left: 12 4 12 5\n(5) - (12) = -7, left: (5 - 12) = -7, 4, 12\nroll back, left: 12 4 12 5\n(12) / (12) = 1, left: (12 / 12) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (12 / 12)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (12 / 12))) = 24\nreach 24! expression: (4 * (5 + (12 / 12)))"}, {"input": "3 8 5 7\n", "output": "(5) * (7) = 35, left: (5 * 7) = 35, 3, 8\n(3) + (8) = 11, left: (3 + 8) = 11, (5 * 7) = 35\n(35) - (11) = 24, left: ((5 * 7) - (3 + 8)) = 24\nreach 24! expression: ((5 * 7) - (3 + 8))"}, {"input": "3 8 5 7\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 3, 7\n(3) * (7) = 21, left: (3 * 7) = 21, (8 - 5) = 3\n(3) + (21) = 24, left: ((8 - 5) + (3 * 7)) = 24\nreach 24! expression: ((8 - 5) + (3 * 7))"}, {"input": "3 8 5 7\n", "output": "(3) + (8) = 11, left: (3 + 8) = 11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (3 + 8) = 11\n(35) - (11) = 24, left: ((5 * 7) - (3 + 8)) = 24\nreach 24! expression: ((5 * 7) - (3 + 8))"}, {"input": "3 8 5 7\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 8, 5\n(8) + (21) = 29, left: (8 + (3 * 7)) = 29, 5\n(29) - (5) = 24, left: ((8 + (3 * 7)) - 5) = 24\nreach 24! expression: ((8 + (3 * 7)) - 5)"}, {"input": "3 8 5 7\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 5, 7\nroll back, left: 3 8 5 7\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 5, 7\n(7) * (8/3) = 56/3, left: (7 * (8 / 3)) = 56/3, 5\nroll back, left: (8 / 3) = 8/3, 5, 7\nroll back, left: 3 8 5 7\n(3) + (8) = 11, left: (3 + 8) = 11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (3 + 8) = 11\n(35) - (11) = 24, left: ((5 * 7) - (3 + 8)) = 24\nreach 24! expression: ((5 * 7) - (3 + 8))"}, {"input": "3 8 5 7\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 3, 8\n(8) / (5/7) = 56/5, left: (8 / (5 / 7)) = 56/5, 3\nroll back, left: (5 / 7) = 5/7, 3, 8\nroll back, left: 3 8 5 7\n(5) * (7) = 35, left: (5 * 7) = 35, 3, 8\n(3) * (8) = 24, left: (3 * 8) = 24, (5 * 7) = 35\nroll back, left: (5 * 7) = 35, 3, 8\n(3) + (8) = 11, left: (3 + 8) = 11, (5 * 7) = 35\n(35) - (11) = 24, left: ((5 * 7) - (3 + 8)) = 24\nreach 24! expression: ((5 * 7) - (3 + 8))"}, {"input": "3 8 5 7\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 3, 8\n(5/7) - (3) = -16/7, left: ((5 / 7) - 3) = -16/7, 8\nroll back, left: (5 / 7) = 5/7, 3, 8\nroll back, left: 3 8 5 7\n(7) - (5) = 2, left: (7 - 5) = 2, 3, 8\nroll back, left: 3 8 5 7\n(5) * (7) = 35, left: (5 * 7) = 35, 3, 8\n(3) + (8) = 11, left: (3 + 8) = 11, (5 * 7) = 35\n(35) - (11) = 24, left: ((5 * 7) - (3 + 8)) = 24\nreach 24! expression: ((5 * 7) - (3 + 8))"}, {"input": "3 8 5 7\n", "output": "(3) - (7) = -4, left: (3 - 7) = -4, 8, 5\n(5) + (-4) = 1, left: (5 + (3 - 7)) = 1, 8\nroll back, left: (3 - 7) = -4, 8, 5\n(8) - (5) = 3, left: (8 - 5) = 3, (3 - 7) = -4\nroll back, left: (3 - 7) = -4, 8, 5\nroll back, left: 3 8 5 7\n(3) * (7) = 21, left: (3 * 7) = 21, 8, 5\n(8) + (21) = 29, left: (8 + (3 * 7)) = 29, 5\n(29) - (5) = 24, left: ((8 + (3 * 7)) - 5) = 24\nreach 24! expression: ((8 + (3 * 7)) - 5)"}, {"input": "3 8 5 7\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 3, 7\n(3) - (7) = -4, left: (3 - 7) = -4, (8 - 5) = 3\n(3) / (-4) = -3/4, left: ((8 - 5) / (3 - 7)) = -3/4\nroll back, left: (3 - 7) = -4, (8 - 5) = 3\nroll back, left: (8 - 5) = 3, 3, 7\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, (8 - 5) = 3\nroll back, left: (8 - 5) = 3, 3, 7\n(3) * (7) = 21, left: (3 * 7) = 21, (8 - 5) = 3\n(3) + (21) = 24, left: ((8 - 5) + (3 * 7)) = 24\nreach 24! expression: ((8 - 5) + (3 * 7))"}, {"input": "4 8 12 12\n", "output": "(4) + (12) = 16, left: (4 + 12) = 16, 8, 12\n(8) / (16) = 1/2, left: (8 / (4 + 12)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (8 / (4 + 12))) = 24\nreach 24! expression: (12 / (8 / (4 + 12)))"}, {"input": "4 8 12 12\n", "output": "(8) / (12) = 2/3, left: (8 / 12) = 2/3, 4, 12\n(4) + (12) = 16, left: (4 + 12) = 16, (8 / 12) = 2/3\n(16) / (2/3) = 24, left: ((4 + 12) / (8 / 12)) = 24\nreach 24! expression: ((4 + 12) / (8 / 12))"}, {"input": "4 8 12 12\n", "output": "(4) + (12) = 16, left: (4 + 12) = 16, 8, 12\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, (4 + 12) = 16\n(16) / (2/3) = 24, left: ((4 + 12) / (8 / 12)) = 24\nreach 24! expression: ((4 + 12) / (8 / 12))"}, {"input": "4 8 12 12\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 8, 12\n(12) - (48) = -36, left: (12 - (4 * 12)) = -36, 8\nroll back, left: (4 * 12) = 48, 8, 12\nroll back, left: 4 8 12 12\n(12) - (4) = 8, left: (12 - 4) = 8, 8, 12\nroll back, left: 4 8 12 12\n(4) + (12) = 16, left: (4 + 12) = 16, 8, 12\n(8) / (16) = 1/2, left: (8 / (4 + 12)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (8 / (4 + 12))) = 24\nreach 24! expression: (12 / (8 / (4 + 12)))"}, {"input": "4 8 12 12\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 12, 12\nroll back, left: 4 8 12 12\n(8) / (4) = 2, left: (8 / 4) = 2, 12, 12\nroll back, left: 4 8 12 12\n(4) * (8) = 32, left: (4 * 8) = 32, 12, 12\nroll back, left: 4 8 12 12\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 4, 12\n(4) + (12) = 16, left: (4 + 12) = 16, (8 / 12) = 2/3\n(16) / (2/3) = 24, left: ((4 + 12) / (8 / 12)) = 24\nreach 24! expression: ((4 + 12) / (8 / 12))"}, {"input": "4 8 12 12\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 8, 12\n(8) * (12) = 96, left: (8 * 12) = 96, (12 / 4) = 3\nroll back, left: (12 / 4) = 3, 8, 12\nroll back, left: 4 8 12 12\n(4) / (12) = 1/3, left: (4 / 12) = 1/3, 8, 12\nroll back, left: 4 8 12 12\n(4) + (12) = 16, left: (4 + 12) = 16, 8, 12\n(8) / (16) = 1/2, left: (8 / (4 + 12)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (8 / (4 + 12))) = 24\nreach 24! expression: (12 / (8 / (4 + 12)))"}, {"input": "4 8 12 12\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 12, 12\nroll back, left: 4 8 12 12\n(8) / (4) = 2, left: (8 / 4) = 2, 12, 12\nroll back, left: 4 8 12 12\n(4) + (8) = 12, left: (4 + 8) = 12, 12, 12\nroll back, left: 4 8 12 12\n(4) + (12) = 16, left: (4 + 12) = 16, 8, 12\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, (4 + 12) = 16\n(16) / (2/3) = 24, left: ((4 + 12) / (8 / 12)) = 24\nreach 24! expression: ((4 + 12) / (8 / 12))"}, {"input": "5 5 3 8\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 5, 3\n(5) / (40) = 1/8, left: (5 / (5 * 8)) = 1/8, 3\n(3) / (1/8) = 24, left: (3 / (5 / (5 * 8))) = 24\nreach 24! expression: (3 / (5 / (5 * 8)))"}, {"input": "5 5 3 8\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 3, 8\n(3) * (8) = 24, left: (3 * 8) = 24, (5 - 5) = 0\n(0) + (24) = 24, left: ((5 - 5) + (3 * 8)) = 24\nreach 24! expression: ((5 - 5) + (3 * 8))"}, {"input": "5 5 3 8\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 5, 8\n(8) - (5) = 3, left: ((5 + 3) - 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((5 + 3) - 5)) = 24\nreach 24! expression: (8 * ((5 + 3) - 5))"}, {"input": "5 5 3 8\n", "output": "(5) / (3) = 5/3, left: (5 / 3) = 5/3, 5, 8\n(5) * (8) = 40, left: (5 * 8) = 40, (5 / 3) = 5/3\n(40) / (5/3) = 24, left: ((5 * 8) / (5 / 3)) = 24\nreach 24! expression: ((5 * 8) / (5 / 3))"}, {"input": "5 5 3 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (5 + 3)) = 24\nreach 24! expression: ((8 - 5) * (5 + 3))"}, {"input": "5 5 3 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (5 + 3)) = 24\nreach 24! expression: ((8 - 5) * (5 + 3))"}, {"input": "5 5 3 8\n", "output": "(5) * (8) = 40, left: (5 * 8) = 40, 5, 3\n(5) + (40) = 45, left: (5 + (5 * 8)) = 45, 3\nroll back, left: (5 * 8) = 40, 5, 3\n(5) - (40) = -35, left: (5 - (5 * 8)) = -35, 3\n(-35) / (3) = -35/3, left: ((5 - (5 * 8)) / 3) = -35/3\nroll back, left: (5 - (5 * 8)) = -35, 3\nroll back, left: (5 * 8) = 40, 5, 3\n(5) / (40) = 1/8, left: (5 / (5 * 8)) = 1/8, 3\n(3) / (1/8) = 24, left: (3 / (5 / (5 * 8))) = 24\nreach 24! expression: (3 / (5 / (5 * 8)))"}, {"input": "5 5 3 8\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 5, 8\n(5) + (8) = 13, left: (5 + (5 + 3)) = 13, 8\n(8) - (13) = -5, left: (8 - (5 + (5 + 3))) = -5\nroll back, left: (5 + (5 + 3)) = 13, 8\nroll back, left: (5 + 3) = 8, 5, 8\n(8) - (5) = 3, left: ((5 + 3) - 5) = 3, 8\n(3) / (8) = 3/8, left: (((5 + 3) - 5) / 8) = 3/8\nroll back, left: ((5 + 3) - 5) = 3, 8\n(8) * (3) = 24, left: (8 * ((5 + 3) - 5)) = 24\nreach 24! expression: (8 * ((5 + 3) - 5))"}, {"input": "5 5 3 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (5 + 3)) = 24\nreach 24! expression: ((8 - 5) * (5 + 3))"}, {"input": "5 5 3 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (5 + 3)) = 24\nreach 24! expression: ((8 - 5) * (5 + 3))"}, {"input": "5 5 3 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (8 - 5) = 3\n(3) * (8) = 24, left: ((8 - 5) * (5 + 3)) = 24\nreach 24! expression: ((8 - 5) * (5 + 3))"}, {"input": "4 2 4 11\n", "output": "(4) * (11) = 44, left: (4 * 11) = 44, 2, 4\n(4) + (44) = 48, left: (4 + (4 * 11)) = 48, 2\n(48) / (2) = 24, left: ((4 + (4 * 11)) / 2) = 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(4) * (11) = 44, left: (4 * 11) = 44, 4, 2\n(4) + (44) = 48, left: (4 + (4 * 11)) = 48, 2\n(48) / (2) = 24, left: ((4 + (4 * 11)) / 2) = 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 4, 11\n(4) + (6) = 10, left: (4 + (4 + 2)) = 10, 11\nroll back, left: (4 + 2) = 6, 4, 11\nroll back, left: 4 2 4 11\n(4) * (2) = 8, left: (4 * 2) = 8, 4, 11\nroll back, left: 4 2 4 11\n(4) * (11) = 44, left: (4 * 11) = 44, 4, 2\n(4) + (44) = 48, left: (4 + (4 * 11)) = 48, 2\n(48) / (2) = 24, left: ((4 + (4 * 11)) / 2) = 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(2) * (4) = 8, left: (2 * 4) = 8, 4, 11\nroll back, left: 4 2 4 11\n(2) + (4) = 6, left: (2 + 4) = 6, 4, 11\n(6) / (11) = 6/11, left: ((2 + 4) / 11) = 6/11, 4\nroll back, left: (2 + 4) = 6, 4, 11\nroll back, left: 4 2 4 11\n(4) * (11) = 44, left: (4 * 11) = 44, 4, 2\n(4) + (44) = 48, left: (4 + (4 * 11)) = 48, 2\n(48) / (2) = 24, left: ((4 + (4 * 11)) / 2) = 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(4) / (11) = 4/11, left: (4 / 11) = 4/11, 4, 2\nroll back, left: 4 2 4 11\n(11) / (4) = 11/4, left: (11 / 4) = 11/4, 4, 2\n(4) - (2) = 2, left: (4 - 2) = 2, (11 / 4) = 11/4\nroll back, left: (11 / 4) = 11/4, 4, 2\nroll back, left: 4 2 4 11\n(4) * (11) = 44, left: (4 * 11) = 44, 4, 2\n(4) + (44) = 48, left: (4 + (4 * 11)) = 48, 2\n(48) / (2) = 24, left: ((4 + (4 * 11)) / 2) = 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(4) / (11) = 4/11, left: (4 / 11) = 4/11, 2, 4\nroll back, left: 4 2 4 11\n(4) - (11) = -7, left: (4 - 11) = -7, 2, 4\nroll back, left: 4 2 4 11\n(4) + (11) = 15, left: (4 + 11) = 15, 2, 4\nroll back, left: 4 2 4 11\n(4) * (11) = 44, left: (4 * 11) = 44, 2, 4\n(4) + (44) = 48, left: (4 + (4 * 11)) = 48, 2\n(48) / (2) = 24, left: ((4 + (4 * 11)) / 2) = 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "4 2 4 11\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 4, 11\n(4) - (2) = 2, left: (4 - (4 - 2)) = 2, 11\nroll back, left: (4 - 2) = 2, 4, 11\nroll back, left: 4 2 4 11\n(2) * (11) = 22, left: (2 * 11) = 22, 4, 4\nroll back, left: 4 2 4 11\n(4) * (11) = 44, left: (4 * 11) = 44, 4, 2\n(4) + (44) = 48, left: (4 + (4 * 11)) = 48, 2\n(48) / (2) = 24, left: ((4 + (4 * 11)) / 2) = 24\nreach 24! expression: ((4 + (4 * 11)) / 2)"}, {"input": "12 2 13 1\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 13, 1\n(13) - (-10) = 23, left: (13 - (2 - 12)) = 23, 1\n(1) + (23) = 24, left: (1 + (13 - (2 - 12))) = 24\nreach 24! expression: (1 + (13 - (2 - 12)))"}, {"input": "12 2 13 1\n", "output": "(12) + (1) = 13, left: (12 + 1) = 13, 2, 13\n(2) - (13) = -11, left: (2 - 13) = -11, (12 + 1) = 13\n(13) - (-11) = 24, left: ((12 + 1) - (2 - 13)) = 24\nreach 24! expression: ((12 + 1) - (2 - 13))"}, {"input": "12 2 13 1\n", "output": "(12) + (13) = 25, left: (12 + 13) = 25, 2, 1\n(2) - (25) = -23, left: (2 - (12 + 13)) = -23, 1\n(1) - (-23) = 24, left: (1 - (2 - (12 + 13))) = 24\nreach 24! expression: (1 - (2 - (12 + 13)))"}, {"input": "12 2 13 1\n", "output": "(12) + (13) = 25, left: (12 + 13) = 25, 2, 1\n(1) - (2) = -1, left: (1 - 2) = -1, (12 + 13) = 25\n(25) + (-1) = 24, left: ((12 + 13) + (1 - 2)) = 24\nreach 24! expression: ((12 + 13) + (1 - 2))"}, {"input": "12 2 13 1\n", "output": "(1) - (2) = -1, left: (1 - 2) = -1, 12, 13\n(13) + (-1) = 12, left: (13 + (1 - 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (13 + (1 - 2))) = 24\nreach 24! expression: (12 + (13 + (1 - 2)))"}, {"input": "12 2 13 1\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 2, 1\nroll back, left: 12 2 13 1\n(12) - (13) = -1, left: (12 - 13) = -1, 2, 1\n(2) * (-1) = -2, left: (2 * (12 - 13)) = -2, 1\nroll back, left: (12 - 13) = -1, 2, 1\nroll back, left: 12 2 13 1\n(12) + (13) = 25, left: (12 + 13) = 25, 2, 1\n(1) - (2) = -1, left: (1 - 2) = -1, (12 + 13) = 25\n(25) + (-1) = 24, left: ((12 + 13) + (1 - 2)) = 24\nreach 24! expression: ((12 + 13) + (1 - 2))"}, {"input": "12 2 13 1\n", "output": "(13) - (12) = 1, left: (13 - 12) = 1, 2, 1\n(1) - (1) = 0, left: ((13 - 12) - 1) = 0, 2\nroll back, left: (13 - 12) = 1, 2, 1\n(1) - (2) = -1, left: ((13 - 12) - 2) = -1, 1\nroll back, left: (13 - 12) = 1, 2, 1\nroll back, left: 12 2 13 1\n(12) + (13) = 25, left: (12 + 13) = 25, 2, 1\n(2) - (25) = -23, left: (2 - (12 + 13)) = -23, 1\n(1) - (-23) = 24, left: (1 - (2 - (12 + 13))) = 24\nreach 24! expression: (1 - (2 - (12 + 13)))"}, {"input": "11 1 8 10\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 8, 10\n(10) - (8) = 2, left: (10 - 8) = 2, (11 + 1) = 12\n(12) * (2) = 24, left: ((11 + 1) * (10 - 8)) = 24\nreach 24! expression: ((11 + 1) * (10 - 8))"}, {"input": "11 1 8 10\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (10 - 8) = 2\n(2) * (12) = 24, left: ((10 - 8) * (11 + 1)) = 24\nreach 24! expression: ((10 - 8) * (11 + 1))"}, {"input": "11 1 8 10\n", "output": "(11) / (10) = 11/10, left: (11 / 10) = 11/10, 1, 8\nroll back, left: 11 1 8 10\n(11) - (10) = 1, left: (11 - 10) = 1, 1, 8\nroll back, left: 11 1 8 10\n(10) - (11) = -1, left: (10 - 11) = -1, 1, 8\nroll back, left: 11 1 8 10\n(10) - (8) = 2, left: (10 - 8) = 2, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (10 - 8) = 2\n(2) * (12) = 24, left: ((10 - 8) * (11 + 1)) = 24\nreach 24! expression: ((10 - 8) * (11 + 1))"}, {"input": "11 1 8 10\n", "output": "(11) * (8) = 88, left: (11 * 8) = 88, 1, 10\nroll back, left: 11 1 8 10\n(11) + (8) = 19, left: (11 + 8) = 19, 1, 10\nroll back, left: 11 1 8 10\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 11, 1\nroll back, left: 11 1 8 10\n(10) - (8) = 2, left: (10 - 8) = 2, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (10 - 8) = 2\n(2) * (12) = 24, left: ((10 - 8) * (11 + 1)) = 24\nreach 24! expression: ((10 - 8) * (11 + 1))"}, {"input": "9 4 6 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (6 + 6) = 12\n(36) - (12) = 24, left: ((9 * 4) - (6 + 6)) = 24\nreach 24! expression: ((9 * 4) - (6 + 6))"}, {"input": "9 4 6 6\n", "output": "(9) * (4) = 36, left: (9 * 4) = 36, 6, 6\n(36) - (6) = 30, left: ((9 * 4) - 6) = 30, 6\n(30) - (6) = 24, left: (((9 * 4) - 6) - 6) = 24\nreach 24! expression: (((9 * 4) - 6) - 6)"}, {"input": "9 4 6 6\n", "output": "(4) - (6) = -2, left: (4 - 6) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (4 - 6)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (4 - 6))) = 24\nreach 24! expression: (6 - (9 * (4 - 6)))"}, {"input": "9 4 6 6\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (9 - 4)) = 30, 6\n(30) - (6) = 24, left: ((6 * (9 - 4)) - 6) = 24\nreach 24! expression: ((6 * (9 - 4)) - 6)"}, {"input": "9 4 6 6\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 4, 6\nroll back, left: 9 4 6 6\n(6) - (9) = -3, left: (6 - 9) = -3, 4, 6\nroll back, left: 9 4 6 6\n(4) + (6) = 10, left: (4 + 6) = 10, 9, 6\nroll back, left: 9 4 6 6\n(4) - (6) = -2, left: (4 - 6) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (4 - 6)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (4 - 6))) = 24\nreach 24! expression: (6 - (9 * (4 - 6)))"}, {"input": "9 4 6 6\n", "output": "(4) + (6) = 10, left: (4 + 6) = 10, 9, 6\nroll back, left: 9 4 6 6\n(4) * (6) = 24, left: (4 * 6) = 24, 9, 6\nroll back, left: 9 4 6 6\n(4) - (6) = -2, left: (4 - 6) = -2, 9, 6\n(-2) / (9) = -2/9, left: ((4 - 6) / 9) = -2/9, 6\nroll back, left: (4 - 6) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (4 - 6)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (4 - 6))) = 24\nreach 24! expression: (6 - (9 * (4 - 6)))"}, {"input": "9 4 6 6\n", "output": "(6) - (6) = 0, left: (6 - 6) = 0, 9, 4\n(0) / (4) = 0, left: ((6 - 6) / 4) = 0, 9\nroll back, left: (6 - 6) = 0, 9, 4\nroll back, left: 9 4 6 6\n(6) / (6) = 1, left: (6 / 6) = 1, 9, 4\nroll back, left: 9 4 6 6\n(6) + (6) = 12, left: (6 + 6) = 12, 9, 4\n(9) * (4) = 36, left: (9 * 4) = 36, (6 + 6) = 12\n(36) - (12) = 24, left: ((9 * 4) - (6 + 6)) = 24\nreach 24! expression: ((9 * 4) - (6 + 6))"}, {"input": "9 4 6 6\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 6, 6\n(6) - (6) = 0, left: (6 - 6) = 0, (4 - 9) = -5\n(0) - (-5) = 5, left: ((6 - 6) - (4 - 9)) = 5\nroll back, left: (6 - 6) = 0, (4 - 9) = -5\nroll back, left: (4 - 9) = -5, 6, 6\nroll back, left: 9 4 6 6\n(9) * (4) = 36, left: (9 * 4) = 36, 6, 6\n(36) - (6) = 30, left: ((9 * 4) - 6) = 30, 6\n(30) - (6) = 24, left: (((9 * 4) - 6) - 6) = 24\nreach 24! expression: (((9 * 4) - 6) - 6)"}, {"input": "9 4 6 6\n", "output": "(9) + (4) = 13, left: (9 + 4) = 13, 6, 6\n(6) * (13) = 78, left: (6 * (9 + 4)) = 78, 6\nroll back, left: (9 + 4) = 13, 6, 6\nroll back, left: 9 4 6 6\n(9) - (4) = 5, left: (9 - 4) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (9 - 4)) = 30, 6\n(6) + (30) = 36, left: (6 + (6 * (9 - 4))) = 36\nroll back, left: (6 * (9 - 4)) = 30, 6\n(30) - (6) = 24, left: ((6 * (9 - 4)) - 6) = 24\nreach 24! expression: ((6 * (9 - 4)) - 6)"}, {"input": "9 5 5 2\n", "output": "(5) * (2) = 10, left: (5 * 2) = 10, 9, 5\n(9) + (5) = 14, left: (9 + 5) = 14, (5 * 2) = 10\n(10) + (14) = 24, left: ((5 * 2) + (9 + 5)) = 24\nreach 24! expression: ((5 * 2) + (9 + 5))"}, {"input": "9 5 5 2\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 5, 2\n(5) * (2) = 10, left: (5 * 2) = 10, (9 + 5) = 14\n(14) + (10) = 24, left: ((9 + 5) + (5 * 2)) = 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "9 5 5 2\n", "output": "(2) / (9) = 2/9, left: (2 / 9) = 2/9, 5, 5\n(5) - (2/9) = 43/9, left: (5 - (2 / 9)) = 43/9, 5\nroll back, left: (2 / 9) = 2/9, 5, 5\nroll back, left: 9 5 5 2\n(9) + (2) = 11, left: (9 + 2) = 11, 5, 5\nroll back, left: 9 5 5 2\n(9) + (5) = 14, left: (9 + 5) = 14, 5, 2\n(5) * (2) = 10, left: (5 * 2) = 10, (9 + 5) = 14\n(14) + (10) = 24, left: ((9 + 5) + (5 * 2)) = 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "9 5 5 2\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 5, 2\n(2) + (5/9) = 23/9, left: (2 + (5 / 9)) = 23/9, 5\nroll back, left: (5 / 9) = 5/9, 5, 2\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, (5 / 9) = 5/9\nroll back, left: (5 / 9) = 5/9, 5, 2\nroll back, left: 9 5 5 2\n(9) + (5) = 14, left: (9 + 5) = 14, 5, 2\n(5) * (2) = 10, left: (5 * 2) = 10, (9 + 5) = 14\n(14) + (10) = 24, left: ((9 + 5) + (5 * 2)) = 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "9 5 5 2\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 5, 2\n(5) + (14) = 19, left: (5 + (9 + 5)) = 19, 2\nroll back, left: (9 + 5) = 14, 5, 2\n(5) / (14) = 5/14, left: (5 / (9 + 5)) = 5/14, 2\nroll back, left: (9 + 5) = 14, 5, 2\n(2) + (14) = 16, left: (2 + (9 + 5)) = 16, 5\nroll back, left: (9 + 5) = 14, 5, 2\n(5) * (2) = 10, left: (5 * 2) = 10, (9 + 5) = 14\n(14) + (10) = 24, left: ((9 + 5) + (5 * 2)) = 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "9 5 5 2\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 5, 2\nroll back, left: 9 5 5 2\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, 5, 2\n(5) + (2) = 7, left: (5 + 2) = 7, (9 / 5) = 9/5\nroll back, left: (9 / 5) = 9/5, 5, 2\nroll back, left: 9 5 5 2\n(9) + (5) = 14, left: (9 + 5) = 14, 5, 2\n(5) * (2) = 10, left: (5 * 2) = 10, (9 + 5) = 14\n(14) + (10) = 24, left: ((9 + 5) + (5 * 2)) = 24\nreach 24! expression: ((9 + 5) + (5 * 2))"}, {"input": "2 10 7 2\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 2, 7\n(7) + (5) = 12, left: (7 + (10 / 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (10 / 2))) = 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 7, 2\n(7) + (5) = 12, left: (7 + (10 / 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (10 / 2))) = 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 10, 7\nroll back, left: 2 10 7 2\n(2) - (2) = 0, left: (2 - 2) = 0, 10, 7\n(0) - (10) = -10, left: ((2 - 2) - 10) = -10, 7\nroll back, left: (2 - 2) = 0, 10, 7\nroll back, left: 2 10 7 2\n(10) / (2) = 5, left: (10 / 2) = 5, 2, 7\n(7) + (5) = 12, left: (7 + (10 / 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (10 / 2))) = 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 10, 7\n(7) / (1) = 7, left: (7 / (2 / 2)) = 7, 10\n(10) + (7) = 17, left: (10 + (7 / (2 / 2))) = 17\nroll back, left: (7 / (2 / 2)) = 7, 10\nroll back, left: (2 / 2) = 1, 10, 7\nroll back, left: 2 10 7 2\n(10) / (2) = 5, left: (10 / 2) = 5, 2, 7\n(7) + (5) = 12, left: (7 + (10 / 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (10 / 2))) = 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 10, 7\nroll back, left: 2 10 7 2\n(7) + (2) = 9, left: (7 + 2) = 9, 2, 10\n(9) - (10) = -1, left: ((7 + 2) - 10) = -1, 2\nroll back, left: (7 + 2) = 9, 2, 10\nroll back, left: 2 10 7 2\n(10) / (2) = 5, left: (10 / 2) = 5, 2, 7\n(7) + (5) = 12, left: (7 + (10 / 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (10 / 2))) = 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(2) + (10) = 12, left: (2 + 10) = 12, 7, 2\n(12) - (2) = 10, left: ((2 + 10) - 2) = 10, 7\nroll back, left: (2 + 10) = 12, 7, 2\nroll back, left: 2 10 7 2\n(2) / (10) = 1/5, left: (2 / 10) = 1/5, 7, 2\nroll back, left: 2 10 7 2\n(10) / (2) = 5, left: (10 / 2) = 5, 7, 2\n(7) + (5) = 12, left: (7 + (10 / 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (10 / 2))) = 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "2 10 7 2\n", "output": "(10) + (7) = 17, left: (10 + 7) = 17, 2, 2\n(17) - (2) = 15, left: ((10 + 7) - 2) = 15, 2\nroll back, left: (10 + 7) = 17, 2, 2\nroll back, left: 2 10 7 2\n(10) * (7) = 70, left: (10 * 7) = 70, 2, 2\nroll back, left: 2 10 7 2\n(10) / (2) = 5, left: (10 / 2) = 5, 2, 7\n(7) + (5) = 12, left: (7 + (10 / 2)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (10 / 2))) = 24\nreach 24! expression: (2 * (7 + (10 / 2)))"}, {"input": "10 13 7 7\n", "output": "(10) + (13) = 23, left: (10 + 13) = 23, 7, 7\n(7) / (7) = 1, left: (7 / 7) = 1, (10 + 13) = 23\n(23) + (1) = 24, left: ((10 + 13) + (7 / 7)) = 24\nreach 24! expression: ((10 + 13) + (7 / 7))"}, {"input": "10 13 7 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 10, 13\n(10) + (1) = 11, left: (10 + (7 / 7)) = 11, 13\n(13) + (11) = 24, left: (13 + (10 + (7 / 7))) = 24\nreach 24! expression: (13 + (10 + (7 / 7)))"}, {"input": "10 13 7 7\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 13, 7\nroll back, left: 10 13 7 7\n(10) * (7) = 70, left: (10 * 7) = 70, 13, 7\nroll back, left: 10 13 7 7\n(7) - (10) = -3, left: (7 - 10) = -3, 13, 7\nroll back, left: 10 13 7 7\n(7) / (7) = 1, left: (7 / 7) = 1, 10, 13\n(10) + (1) = 11, left: (10 + (7 / 7)) = 11, 13\n(13) + (11) = 24, left: (13 + (10 + (7 / 7))) = 24\nreach 24! expression: (13 + (10 + (7 / 7)))"}, {"input": "10 13 7 7\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 13, 7\n(13) + (-3) = 10, left: (13 + (7 - 10)) = 10, 7\nroll back, left: (7 - 10) = -3, 13, 7\nroll back, left: 10 13 7 7\n(10) * (7) = 70, left: (10 * 7) = 70, 13, 7\nroll back, left: 10 13 7 7\n(10) + (13) = 23, left: (10 + 13) = 23, 7, 7\n(7) / (7) = 1, left: (7 / 7) = 1, (10 + 13) = 23\n(23) + (1) = 24, left: ((10 + 13) + (7 / 7)) = 24\nreach 24! expression: ((10 + 13) + (7 / 7))"}, {"input": "12 10 9 13\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 12, 10\n(10) - (12) = -2, left: (10 - 12) = -2, (9 + 13) = 22\n(22) - (-2) = 24, left: ((9 + 13) - (10 - 12)) = 24\nreach 24! expression: ((9 + 13) - (10 - 12))"}, {"input": "12 10 9 13\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 9, 13\n(9) + (13) = 22, left: (9 + 13) = 22, (12 - 10) = 2\n(2) + (22) = 24, left: ((12 - 10) + (9 + 13)) = 24\nreach 24! expression: ((12 - 10) + (9 + 13))"}, {"input": "12 10 9 13\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 12, 13\n(12) + (13) = 25, left: (12 + 13) = 25, (9 - 10) = -1\n(-1) + (25) = 24, left: ((9 - 10) + (12 + 13)) = 24\nreach 24! expression: ((9 - 10) + (12 + 13))"}, {"input": "12 10 9 13\n", "output": "(12) + (13) = 25, left: (12 + 13) = 25, 10, 9\n(9) + (25) = 34, left: (9 + (12 + 13)) = 34, 10\n(34) - (10) = 24, left: ((9 + (12 + 13)) - 10) = 24\nreach 24! expression: ((9 + (12 + 13)) - 10)"}, {"input": "12 10 9 13\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 9, 13\n(9) + (13) = 22, left: (9 + 13) = 22, (10 - 12) = -2\n(22) - (-2) = 24, left: ((9 + 13) - (10 - 12)) = 24\nreach 24! expression: ((9 + 13) - (10 - 12))"}, {"input": "4 5 11 11\n", "output": "(11) - (4) = 7, left: (11 - 4) = 7, 5, 11\n(5) * (7) = 35, left: (5 * (11 - 4)) = 35, 11\n(35) - (11) = 24, left: ((5 * (11 - 4)) - 11) = 24\nreach 24! expression: ((5 * (11 - 4)) - 11)"}, {"input": "4 5 11 11\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (11 / 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (11 / 11))) = 24\nreach 24! expression: (4 * (5 + (11 / 11)))"}, {"input": "4 5 11 11\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 4, 11\n(6) / (4) = 3/2, left: ((11 - 5) / 4) = 3/2, 11\nroll back, left: (11 - 5) = 6, 4, 11\nroll back, left: 4 5 11 11\n(11) / (5) = 11/5, left: (11 / 5) = 11/5, 4, 11\nroll back, left: 4 5 11 11\n(11) - (4) = 7, left: (11 - 4) = 7, 5, 11\n(5) * (7) = 35, left: (5 * (11 - 4)) = 35, 11\n(35) - (11) = 24, left: ((5 * (11 - 4)) - 11) = 24\nreach 24! expression: ((5 * (11 - 4)) - 11)"}, {"input": "4 5 11 11\n", "output": "(5) - (11) = -6, left: (5 - 11) = -6, 4, 11\n(11) / (-6) = -11/6, left: (11 / (5 - 11)) = -11/6, 4\nroll back, left: (5 - 11) = -6, 4, 11\nroll back, left: 4 5 11 11\n(4) + (11) = 15, left: (4 + 11) = 15, 5, 11\nroll back, left: 4 5 11 11\n(11) - (4) = 7, left: (11 - 4) = 7, 5, 11\n(5) * (7) = 35, left: (5 * (11 - 4)) = 35, 11\n(35) - (11) = 24, left: ((5 * (11 - 4)) - 11) = 24\nreach 24! expression: ((5 * (11 - 4)) - 11)"}, {"input": "4 5 11 11\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 5, 11\nroll back, left: 4 5 11 11\n(4) + (11) = 15, left: (4 + 11) = 15, 5, 11\n(15) - (5) = 10, left: ((4 + 11) - 5) = 10, 11\nroll back, left: (4 + 11) = 15, 5, 11\nroll back, left: 4 5 11 11\n(11) - (4) = 7, left: (11 - 4) = 7, 5, 11\n(5) * (7) = 35, left: (5 * (11 - 4)) = 35, 11\n(35) - (11) = 24, left: ((5 * (11 - 4)) - 11) = 24\nreach 24! expression: ((5 * (11 - 4)) - 11)"}, {"input": "4 5 11 11\n", "output": "(4) * (11) = 44, left: (4 * 11) = 44, 5, 11\nroll back, left: 4 5 11 11\n(4) + (11) = 15, left: (4 + 11) = 15, 5, 11\n(15) / (11) = 15/11, left: ((4 + 11) / 11) = 15/11, 5\nroll back, left: (4 + 11) = 15, 5, 11\nroll back, left: 4 5 11 11\n(11) - (4) = 7, left: (11 - 4) = 7, 5, 11\n(5) * (7) = 35, left: (5 * (11 - 4)) = 35, 11\n(35) - (11) = 24, left: ((5 * (11 - 4)) - 11) = 24\nreach 24! expression: ((5 * (11 - 4)) - 11)"}, {"input": "4 5 11 11\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 11, 11\nroll back, left: 4 5 11 11\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 11, 11\nroll back, left: 4 5 11 11\n(5) - (4) = 1, left: (5 - 4) = 1, 11, 11\nroll back, left: 4 5 11 11\n(11) / (11) = 1, left: (11 / 11) = 1, 4, 5\n(5) + (1) = 6, left: (5 + (11 / 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 + (11 / 11))) = 24\nreach 24! expression: (4 * (5 + (11 / 11)))"}, {"input": "11 9 5 6\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 11, 9\n(11) + (9) = 20, left: (11 + 9) = 20, (6 / 5) = 6/5\n(6/5) * (20) = 24, left: ((6 / 5) * (11 + 9)) = 24\nreach 24! expression: ((6 / 5) * (11 + 9))"}, {"input": "11 9 5 6\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 11, 5\n(11) + (5) = 16, left: (11 + 5) = 16, (6 / 9) = 2/3\n(16) / (2/3) = 24, left: ((11 + 5) / (6 / 9)) = 24\nreach 24! expression: ((11 + 5) / (6 / 9))"}, {"input": "11 9 5 6\n", "output": "(11) + (9) = 20, left: (11 + 9) = 20, 5, 6\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, (11 + 9) = 20\n(20) / (5/6) = 24, left: ((11 + 9) / (5 / 6)) = 24\nreach 24! expression: ((11 + 9) / (5 / 6))"}, {"input": "11 9 5 6\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 9, 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, (11 + 5) = 16\n(16) * (3/2) = 24, left: ((11 + 5) * (9 / 6)) = 24\nreach 24! expression: ((11 + 5) * (9 / 6))"}, {"input": "11 9 5 6\n", "output": "(11) + (9) = 20, left: (11 + 9) = 20, 5, 6\n(6) * (20) = 120, left: (6 * (11 + 9)) = 120, 5\n(120) / (5) = 24, left: ((6 * (11 + 9)) / 5) = 24\nreach 24! expression: ((6 * (11 + 9)) / 5)"}, {"input": "11 9 5 6\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 11, 9\nroll back, left: 11 9 5 6\n(5) * (6) = 30, left: (5 * 6) = 30, 11, 9\nroll back, left: 11 9 5 6\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 11, 9\n(11) - (9) = 2, left: (11 - 9) = 2, (6 / 5) = 6/5\nroll back, left: (6 / 5) = 6/5, 11, 9\n(11) + (9) = 20, left: (11 + 9) = 20, (6 / 5) = 6/5\n(6/5) * (20) = 24, left: ((6 / 5) * (11 + 9)) = 24\nreach 24! expression: ((6 / 5) * (11 + 9))"}, {"input": "11 9 5 6\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 11, 6\n(6) / (-4) = -3/2, left: (6 / (5 - 9)) = -3/2, 11\nroll back, left: (5 - 9) = -4, 11, 6\nroll back, left: 11 9 5 6\n(11) - (9) = 2, left: (11 - 9) = 2, 5, 6\nroll back, left: 11 9 5 6\n(11) + (9) = 20, left: (11 + 9) = 20, 5, 6\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, (11 + 9) = 20\n(20) / (5/6) = 24, left: ((11 + 9) / (5 / 6)) = 24\nreach 24! expression: ((11 + 9) / (5 / 6))"}, {"input": "11 9 5 6\n", "output": "(9) * (5) = 45, left: (9 * 5) = 45, 11, 6\nroll back, left: 11 9 5 6\n(9) + (5) = 14, left: (9 + 5) = 14, 11, 6\nroll back, left: 11 9 5 6\n(9) / (11) = 9/11, left: (9 / 11) = 9/11, 5, 6\nroll back, left: 11 9 5 6\n(11) + (9) = 20, left: (11 + 9) = 20, 5, 6\n(6) * (20) = 120, left: (6 * (11 + 9)) = 120, 5\n(120) / (5) = 24, left: ((6 * (11 + 9)) / 5) = 24\nreach 24! expression: ((6 * (11 + 9)) / 5)"}, {"input": "11 9 5 6\n", "output": "(9) * (5) = 45, left: (9 * 5) = 45, 11, 6\n(6) - (45) = -39, left: (6 - (9 * 5)) = -39, 11\nroll back, left: (9 * 5) = 45, 11, 6\nroll back, left: 11 9 5 6\n(11) - (5) = 6, left: (11 - 5) = 6, 9, 6\nroll back, left: 11 9 5 6\n(11) + (5) = 16, left: (11 + 5) = 16, 9, 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, (11 + 5) = 16\n(16) * (3/2) = 24, left: ((11 + 5) * (9 / 6)) = 24\nreach 24! expression: ((11 + 5) * (9 / 6))"}, {"input": "8 9 4 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (9 / 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (9 / 9))) = 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 8, 9\nroll back, left: 8 9 4 9\n(4) - (9) = -5, left: (4 - 9) = -5, 8, 9\nroll back, left: 8 9 4 9\n(9) - (9) = 0, left: (9 - 9) = 0, 8, 4\nroll back, left: 8 9 4 9\n(9) / (9) = 1, left: (9 / 9) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (9 / 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (9 / 9))) = 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 8, 4\n(8) * (1) = 8, left: (8 * (9 / 9)) = 8, 4\nroll back, left: (9 / 9) = 1, 8, 4\n(8) + (1) = 9, left: (8 + (9 / 9)) = 9, 4\nroll back, left: (9 / 9) = 1, 8, 4\n(1) / (8) = 1/8, left: ((9 / 9) / 8) = 1/8, 4\nroll back, left: (9 / 9) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (9 / 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (9 / 9))) = 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 8, 4\nroll back, left: 8 9 4 9\n(9) - (9) = 0, left: (9 - 9) = 0, 8, 4\nroll back, left: 8 9 4 9\n(9) * (9) = 81, left: (9 * 9) = 81, 8, 4\nroll back, left: 8 9 4 9\n(9) / (9) = 1, left: (9 / 9) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (9 / 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (9 / 9))) = 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(9) / (8) = 9/8, left: (9 / 8) = 9/8, 9, 4\nroll back, left: 8 9 4 9\n(9) - (8) = 1, left: (9 - 8) = 1, 4, 9\n(9) / (1) = 9, left: (9 / (9 - 8)) = 9, 4\nroll back, left: (9 - 8) = 1, 4, 9\nroll back, left: 8 9 4 9\n(9) / (9) = 1, left: (9 / 9) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (9 / 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (9 / 9))) = 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 9 4 9\n", "output": "(9) / (8) = 9/8, left: (9 / 8) = 9/8, 9, 4\nroll back, left: 8 9 4 9\n(8) + (4) = 12, left: (8 + 4) = 12, 9, 9\nroll back, left: 8 9 4 9\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, 9, 9\nroll back, left: 8 9 4 9\n(9) / (9) = 1, left: (9 / 9) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (9 / 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (9 / 9))) = 24\nreach 24! expression: (8 * (4 - (9 / 9)))"}, {"input": "8 10 7 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 10, 7\n(7) * (2) = 14, left: (7 * (8 / 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (8 / 4))) = 24\nreach 24! expression: (10 + (7 * (8 / 4)))"}, {"input": "8 10 7 4\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 8, 10\n(8) * (7/4) = 14, left: (8 * (7 / 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (8 * (7 / 4))) = 24\nreach 24! expression: (10 + (8 * (7 / 4)))"}, {"input": "8 10 7 4\n", "output": "(8) * (7) = 56, left: (8 * 7) = 56, 10, 4\n(56) / (4) = 14, left: ((8 * 7) / 4) = 14, 10\n(10) + (14) = 24, left: (10 + ((8 * 7) / 4)) = 24\nreach 24! expression: (10 + ((8 * 7) / 4))"}, {"input": "8 10 7 4\n", "output": "(8) / (10) = 4/5, left: (8 / 10) = 4/5, 7, 4\n(4) - (7) = -3, left: (4 - 7) = -3, (8 / 10) = 4/5\nroll back, left: (8 / 10) = 4/5, 7, 4\nroll back, left: 8 10 7 4\n(8) - (10) = -2, left: (8 - 10) = -2, 7, 4\nroll back, left: 8 10 7 4\n(8) * (7) = 56, left: (8 * 7) = 56, 10, 4\n(56) / (4) = 14, left: ((8 * 7) / 4) = 14, 10\n(10) + (14) = 24, left: (10 + ((8 * 7) / 4)) = 24\nreach 24! expression: (10 + ((8 * 7) / 4))"}, {"input": "8 10 7 4\n", "output": "(7) + (4) = 11, left: (7 + 4) = 11, 8, 10\nroll back, left: 8 10 7 4\n(7) - (4) = 3, left: (7 - 4) = 3, 8, 10\n(3) - (8) = -5, left: ((7 - 4) - 8) = -5, 10\nroll back, left: (7 - 4) = 3, 8, 10\nroll back, left: 8 10 7 4\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 8, 10\n(8) * (7/4) = 14, left: (8 * (7 / 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (8 * (7 / 4))) = 24\nreach 24! expression: (10 + (8 * (7 / 4)))"}, {"input": "8 10 7 4\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (7 - 10) = -3\nroll back, left: (7 - 10) = -3, 8, 4\nroll back, left: 8 10 7 4\n(7) / (10) = 7/10, left: (7 / 10) = 7/10, 8, 4\nroll back, left: 8 10 7 4\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 8, 10\n(8) * (7/4) = 14, left: (8 * (7 / 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (8 * (7 / 4))) = 24\nreach 24! expression: (10 + (8 * (7 / 4)))"}, {"input": "8 10 7 4\n", "output": "(8) / (10) = 4/5, left: (8 / 10) = 4/5, 7, 4\nroll back, left: 8 10 7 4\n(8) + (10) = 18, left: (8 + 10) = 18, 7, 4\nroll back, left: 8 10 7 4\n(10) - (8) = 2, left: (10 - 8) = 2, 7, 4\nroll back, left: 8 10 7 4\n(8) / (4) = 2, left: (8 / 4) = 2, 10, 7\n(7) * (2) = 14, left: (7 * (8 / 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (8 / 4))) = 24\nreach 24! expression: (10 + (7 * (8 / 4)))"}, {"input": "8 10 7 4\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 7, 4\n(4) - (7) = -3, left: (4 - 7) = -3, (10 - 8) = 2\nroll back, left: (10 - 8) = 2, 7, 4\nroll back, left: 8 10 7 4\n(8) * (10) = 80, left: (8 * 10) = 80, 7, 4\nroll back, left: 8 10 7 4\n(8) * (7) = 56, left: (8 * 7) = 56, 10, 4\n(56) / (4) = 14, left: ((8 * 7) / 4) = 14, 10\n(10) + (14) = 24, left: (10 + ((8 * 7) / 4)) = 24\nreach 24! expression: (10 + ((8 * 7) / 4))"}, {"input": "6 11 8 11\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 8, 11\n(8) + (5) = 13, left: (8 + (11 - 6)) = 13, 11\n(11) + (13) = 24, left: (11 + (8 + (11 - 6))) = 24\nreach 24! expression: (11 + (8 + (11 - 6)))"}, {"input": "6 11 8 11\n", "output": "(11) + (8) = 19, left: (11 + 8) = 19, 6, 11\n(19) - (6) = 13, left: ((11 + 8) - 6) = 13, 11\n(11) + (13) = 24, left: (11 + ((11 + 8) - 6)) = 24\nreach 24! expression: (11 + ((11 + 8) - 6))"}, {"input": "6 11 8 11\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 11, 8\n(8) - (-5) = 13, left: (8 - (6 - 11)) = 13, 11\n(11) + (13) = 24, left: (11 + (8 - (6 - 11))) = 24\nreach 24! expression: (11 + (8 - (6 - 11)))"}, {"input": "6 11 8 11\n", "output": "(6) - (11) = -5, left: (6 - 11) = -5, 11, 8\n(-5) - (8) = -13, left: ((6 - 11) - 8) = -13, 11\n(11) - (-13) = 24, left: (11 - ((6 - 11) - 8)) = 24\nreach 24! expression: (11 - ((6 - 11) - 8))"}, {"input": "6 11 8 11\n", "output": "(8) + (11) = 19, left: (8 + 11) = 19, 6, 11\n(19) - (6) = 13, left: ((8 + 11) - 6) = 13, 11\n(11) + (13) = 24, left: (11 + ((8 + 11) - 6)) = 24\nreach 24! expression: (11 + ((8 + 11) - 6))"}, {"input": "6 11 8 11\n", "output": "(6) + (11) = 17, left: (6 + 11) = 17, 8, 11\n(11) + (17) = 28, left: (11 + (6 + 11)) = 28, 8\nroll back, left: (6 + 11) = 17, 8, 11\nroll back, left: 6 11 8 11\n(6) / (11) = 6/11, left: (6 / 11) = 6/11, 8, 11\nroll back, left: 6 11 8 11\n(11) - (6) = 5, left: (11 - 6) = 5, 8, 11\n(8) + (5) = 13, left: (8 + (11 - 6)) = 13, 11\n(11) + (13) = 24, left: (11 + (8 + (11 - 6))) = 24\nreach 24! expression: (11 + (8 + (11 - 6)))"}, {"input": "6 11 8 11\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 6, 11\n(6) / (11) = 6/11, left: (6 / 11) = 6/11, (8 - 11) = -3\nroll back, left: (8 - 11) = -3, 6, 11\nroll back, left: 6 11 8 11\n(11) - (8) = 3, left: (11 - 8) = 3, 6, 11\nroll back, left: 6 11 8 11\n(8) + (11) = 19, left: (8 + 11) = 19, 6, 11\n(19) - (6) = 13, left: ((8 + 11) - 6) = 13, 11\n(11) + (13) = 24, left: (11 + ((8 + 11) - 6)) = 24\nreach 24! expression: (11 + ((8 + 11) - 6))"}, {"input": "7 12 1 12\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 12, 12\n(12) * (12) = 144, left: (12 * 12) = 144, (7 - 1) = 6\n(144) / (6) = 24, left: ((12 * 12) / (7 - 1)) = 24\nreach 24! expression: ((12 * 12) / (7 - 1))"}, {"input": "7 12 1 12\n", "output": "(12) * (12) = 144, left: (12 * 12) = 144, 7, 1\n(7) - (1) = 6, left: (7 - 1) = 6, (12 * 12) = 144\n(144) / (6) = 24, left: ((12 * 12) / (7 - 1)) = 24\nreach 24! expression: ((12 * 12) / (7 - 1))"}, {"input": "7 12 1 12\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 12, 12\n(6) / (12) = 1/2, left: ((7 - 1) / 12) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((7 - 1) / 12)) = 24\nreach 24! expression: (12 / ((7 - 1) / 12))"}, {"input": "7 12 1 12\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 1, 12\nroll back, left: 7 12 1 12\n(7) * (12) = 84, left: (7 * 12) = 84, 12, 1\nroll back, left: 7 12 1 12\n(7) * (1) = 7, left: (7 * 1) = 7, 12, 12\nroll back, left: 7 12 1 12\n(7) - (1) = 6, left: (7 - 1) = 6, 12, 12\n(6) / (12) = 1/2, left: ((7 - 1) / 12) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((7 - 1) / 12)) = 24\nreach 24! expression: (12 / ((7 - 1) / 12))"}, {"input": "7 12 1 12\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 12, 12\n(7) / (12) = 7/12, left: ((7 / 1) / 12) = 7/12, 12\nroll back, left: (7 / 1) = 7, 12, 12\nroll back, left: 7 12 1 12\n(7) * (1) = 7, left: (7 * 1) = 7, 12, 12\nroll back, left: 7 12 1 12\n(7) - (1) = 6, left: (7 - 1) = 6, 12, 12\n(12) * (12) = 144, left: (12 * 12) = 144, (7 - 1) = 6\n(144) / (6) = 24, left: ((12 * 12) / (7 - 1)) = 24\nreach 24! expression: ((12 * 12) / (7 - 1))"}, {"input": "7 12 1 12\n", "output": "(7) * (1) = 7, left: (7 * 1) = 7, 12, 12\n(12) - (7) = 5, left: (12 - (7 * 1)) = 5, 12\nroll back, left: (7 * 1) = 7, 12, 12\nroll back, left: 7 12 1 12\n(1) / (7) = 1/7, left: (1 / 7) = 1/7, 12, 12\nroll back, left: 7 12 1 12\n(7) - (1) = 6, left: (7 - 1) = 6, 12, 12\n(12) * (12) = 144, left: (12 * 12) = 144, (7 - 1) = 6\n(144) / (6) = 24, left: ((12 * 12) / (7 - 1)) = 24\nreach 24! expression: ((12 * 12) / (7 - 1))"}, {"input": "11 5 6 4\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 6, 4\n(6) * (16) = 96, left: (6 * (11 + 5)) = 96, 4\n(96) / (4) = 24, left: ((6 * (11 + 5)) / 4) = 24\nreach 24! expression: ((6 * (11 + 5)) / 4)"}, {"input": "11 5 6 4\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 6, 4\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, (11 + 5) = 16\n(16) * (3/2) = 24, left: ((11 + 5) * (6 / 4)) = 24\nreach 24! expression: ((11 + 5) * (6 / 4))"}, {"input": "11 5 6 4\n", "output": "(11) + (5) = 16, left: (11 + 5) = 16, 6, 4\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, (11 + 5) = 16\n(16) / (2/3) = 24, left: ((11 + 5) / (4 / 6)) = 24\nreach 24! expression: ((11 + 5) / (4 / 6))"}, {"input": "11 5 6 4\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 11, 5\n(11) + (5) = 16, left: (11 + 5) = 16, (4 / 6) = 2/3\n(16) / (2/3) = 24, left: ((11 + 5) / (4 / 6)) = 24\nreach 24! expression: ((11 + 5) / (4 / 6))"}, {"input": "11 5 6 4\n", "output": "(11) / (5) = 11/5, left: (11 / 5) = 11/5, 6, 4\nroll back, left: 11 5 6 4\n(11) * (5) = 55, left: (11 * 5) = 55, 6, 4\n(55) - (4) = 51, left: ((11 * 5) - 4) = 51, 6\nroll back, left: (11 * 5) = 55, 6, 4\nroll back, left: 11 5 6 4\n(11) + (5) = 16, left: (11 + 5) = 16, 6, 4\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, (11 + 5) = 16\n(16) / (2/3) = 24, left: ((11 + 5) / (4 / 6)) = 24\nreach 24! expression: ((11 + 5) / (4 / 6))"}, {"input": "11 5 6 4\n", "output": "(11) * (6) = 66, left: (11 * 6) = 66, 5, 4\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, (11 * 6) = 66\nroll back, left: (11 * 6) = 66, 5, 4\nroll back, left: 11 5 6 4\n(11) / (6) = 11/6, left: (11 / 6) = 11/6, 5, 4\nroll back, left: 11 5 6 4\n(11) + (5) = 16, left: (11 + 5) = 16, 6, 4\n(6) * (16) = 96, left: (6 * (11 + 5)) = 96, 4\n(96) / (4) = 24, left: ((6 * (11 + 5)) / 4) = 24\nreach 24! expression: ((6 * (11 + 5)) / 4)"}, {"input": "11 5 6 4\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 5, 4\nroll back, left: 11 5 6 4\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 11, 6\nroll back, left: 11 5 6 4\n(5) * (4) = 20, left: (5 * 4) = 20, 11, 6\nroll back, left: 11 5 6 4\n(11) + (5) = 16, left: (11 + 5) = 16, 6, 4\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, (11 + 5) = 16\n(16) * (3/2) = 24, left: ((11 + 5) * (6 / 4)) = 24\nreach 24! expression: ((11 + 5) * (6 / 4))"}, {"input": "10 10 11 2\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (10 / 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (10 / 10))) = 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "10 10 11 2\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 10, 11\n(11) - (-8) = 19, left: (11 - (2 - 10)) = 19, 10\nroll back, left: (2 - 10) = -8, 10, 11\nroll back, left: 10 10 11 2\n(10) + (2) = 12, left: (10 + 2) = 12, 10, 11\nroll back, left: 10 10 11 2\n(10) / (10) = 1, left: (10 / 10) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (10 / 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (10 / 10))) = 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "10 10 11 2\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 10, 2\nroll back, left: 10 10 11 2\n(10) + (11) = 21, left: (10 + 11) = 21, 10, 2\nroll back, left: 10 10 11 2\n(11) - (10) = 1, left: (11 - 10) = 1, 10, 2\nroll back, left: 10 10 11 2\n(10) / (10) = 1, left: (10 / 10) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (10 / 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (10 / 10))) = 24\nreach 24! expression: (2 * (11 + (10 / 10)))"}, {"input": "5 8 10 7\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (10 - 8) = 2\n(2) * (12) = 24, left: ((10 - 8) * (5 + 7)) = 24\nreach 24! expression: ((10 - 8) * (5 + 7))"}, {"input": "5 8 10 7\n", "output": "(5) + (7) = 12, left: (5 + 7) = 12, 8, 10\n(10) - (8) = 2, left: (10 - 8) = 2, (5 + 7) = 12\n(12) * (2) = 24, left: ((5 + 7) * (10 - 8)) = 24\nreach 24! expression: ((5 + 7) * (10 - 8))"}, {"input": "5 8 10 7\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 5, 10\n(-1) - (5) = -6, left: ((7 - 8) - 5) = -6, 10\nroll back, left: (7 - 8) = -1, 5, 10\nroll back, left: 5 8 10 7\n(8) / (7) = 8/7, left: (8 / 7) = 8/7, 5, 10\nroll back, left: 5 8 10 7\n(10) - (8) = 2, left: (10 - 8) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (10 - 8) = 2\n(2) * (12) = 24, left: ((10 - 8) * (5 + 7)) = 24\nreach 24! expression: ((10 - 8) * (5 + 7))"}, {"input": "5 8 10 7\n", "output": "(8) * (10) = 80, left: (8 * 10) = 80, 5, 7\nroll back, left: 5 8 10 7\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (8 / 10) = 4/5\nroll back, left: (8 / 10) = 4/5, 5, 7\nroll back, left: 5 8 10 7\n(10) - (8) = 2, left: (10 - 8) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (10 - 8) = 2\n(2) * (12) = 24, left: ((10 - 8) * (5 + 7)) = 24\nreach 24! expression: ((10 - 8) * (5 + 7))"}, {"input": "5 8 10 7\n", "output": "(10) * (7) = 70, left: (10 * 7) = 70, 5, 8\nroll back, left: 5 8 10 7\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 10, 7\nroll back, left: 5 8 10 7\n(5) - (8) = -3, left: (5 - 8) = -3, 10, 7\nroll back, left: 5 8 10 7\n(10) - (8) = 2, left: (10 - 8) = 2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (10 - 8) = 2\n(2) * (12) = 24, left: ((10 - 8) * (5 + 7)) = 24\nreach 24! expression: ((10 - 8) * (5 + 7))"}, {"input": "2 2 2 10\n", "output": "(2) * (10) = 20, left: (2 * 10) = 20, 2, 2\n(2) + (20) = 22, left: (2 + (2 * 10)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 + (2 * 10))) = 24\nreach 24! expression: (2 + (2 + (2 * 10)))"}, {"input": "2 2 2 10\n", "output": "(2) * (10) = 20, left: (2 * 10) = 20, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (2 * 10) = 20\n(20) + (4) = 24, left: ((2 * 10) + (2 * 2)) = 24\nreach 24! expression: ((2 * 10) + (2 * 2))"}, {"input": "2 2 2 10\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (2 * 2) = 4\n(4) + (20) = 24, left: ((2 * 2) + (2 * 10)) = 24\nreach 24! expression: ((2 * 2) + (2 * 10))"}, {"input": "2 2 2 10\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 2, 2\nroll back, left: 2 2 2 10\n(10) - (2) = 8, left: (10 - 2) = 8, 2, 2\n(2) * (8) = 16, left: (2 * (10 - 2)) = 16, 2\nroll back, left: (10 - 2) = 8, 2, 2\nroll back, left: 2 2 2 10\n(2) * (10) = 20, left: (2 * 10) = 20, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (2 * 10) = 20\n(20) + (4) = 24, left: ((2 * 10) + (2 * 2)) = 24\nreach 24! expression: ((2 * 10) + (2 * 2))"}, {"input": "2 2 2 10\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 2, 10\nroll back, left: 2 2 2 10\n(2) / (2) = 1, left: (2 / 2) = 1, 2, 10\n(1) / (10) = 1/10, left: ((2 / 2) / 10) = 1/10, 2\nroll back, left: (2 / 2) = 1, 2, 10\nroll back, left: 2 2 2 10\n(2) * (2) = 4, left: (2 * 2) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (2 * 2) = 4\n(4) + (20) = 24, left: ((2 * 2) + (2 * 10)) = 24\nreach 24! expression: ((2 * 2) + (2 * 10))"}, {"input": "2 2 2 10\n", "output": "(2) / (10) = 1/5, left: (2 / 10) = 1/5, 2, 2\n(2) / (1/5) = 10, left: (2 / (2 / 10)) = 10, 2\n(2) - (10) = -8, left: (2 - (2 / (2 / 10))) = -8\nroll back, left: (2 / (2 / 10)) = 10, 2\nroll back, left: (2 / 10) = 1/5, 2, 2\nroll back, left: 2 2 2 10\n(2) * (10) = 20, left: (2 * 10) = 20, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (2 * 10) = 20\n(20) + (4) = 24, left: ((2 * 10) + (2 * 2)) = 24\nreach 24! expression: ((2 * 10) + (2 * 2))"}, {"input": "2 2 2 10\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 2, 2\n(2) + (5) = 7, left: (2 + (10 / 2)) = 7, 2\nroll back, left: (10 / 2) = 5, 2, 2\nroll back, left: 2 2 2 10\n(2) - (10) = -8, left: (2 - 10) = -8, 2, 2\nroll back, left: 2 2 2 10\n(2) * (10) = 20, left: (2 * 10) = 20, 2, 2\n(2) * (2) = 4, left: (2 * 2) = 4, (2 * 10) = 20\n(20) + (4) = 24, left: ((2 * 10) + (2 * 2)) = 24\nreach 24! expression: ((2 * 10) + (2 * 2))"}, {"input": "2 2 2 10\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 2, 2\n(2) - (5) = -3, left: (2 - (10 / 2)) = -3, 2\nroll back, left: (10 / 2) = 5, 2, 2\nroll back, left: 2 2 2 10\n(2) - (10) = -8, left: (2 - 10) = -8, 2, 2\nroll back, left: 2 2 2 10\n(2) * (10) = 20, left: (2 * 10) = 20, 2, 2\n(2) + (20) = 22, left: (2 + (2 * 10)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 + (2 * 10))) = 24\nreach 24! expression: (2 + (2 + (2 * 10)))"}, {"input": "4 12 4 4\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (12 / 4) = 3\n(3) * (8) = 24, left: ((12 / 4) * (4 + 4)) = 24\nreach 24! expression: ((12 / 4) * (4 + 4))"}, {"input": "4 12 4 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 4, 12\n(4) - (12) = -8, left: (4 - 12) = -8, (4 * 4) = 16\n(16) - (-8) = 24, left: ((4 * 4) - (4 - 12)) = 24\nreach 24! expression: ((4 * 4) - (4 - 12))"}, {"input": "4 12 4 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 12, 4\n(12) + (16) = 28, left: (12 + (4 * 4)) = 28, 4\n(28) - (4) = 24, left: ((12 + (4 * 4)) - 4) = 24\nreach 24! expression: ((12 + (4 * 4)) - 4)"}, {"input": "4 12 4 4\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (4 / 12) = 1/3\n(8) / (1/3) = 24, left: ((4 + 4) / (4 / 12)) = 24\nreach 24! expression: ((4 + 4) / (4 / 12))"}, {"input": "4 12 4 4\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 4, 4\n(3) / (4) = 3/4, left: ((12 / 4) / 4) = 3/4, 4\nroll back, left: (12 / 4) = 3, 4, 4\n(4) - (3) = 1, left: (4 - (12 / 4)) = 1, 4\nroll back, left: (12 / 4) = 3, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (12 / 4) = 3\nroll back, left: (12 / 4) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (12 / 4) = 3\n(3) * (8) = 24, left: ((12 / 4) * (4 + 4)) = 24\nreach 24! expression: ((12 / 4) * (4 + 4))"}, {"input": "4 12 4 4\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 4, 4\n(4) - (4) = 0, left: (4 - 4) = 0, (12 / 4) = 3\n(0) / (3) = 0, left: ((4 - 4) / (12 / 4)) = 0\nroll back, left: (4 - 4) = 0, (12 / 4) = 3\nroll back, left: (12 / 4) = 3, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (12 / 4) = 3\nroll back, left: (12 / 4) = 3, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (12 / 4) = 3\n(3) * (8) = 24, left: ((12 / 4) * (4 + 4)) = 24\nreach 24! expression: ((12 / 4) * (4 + 4))"}, {"input": "4 12 4 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 4, 12\nroll back, left: 4 12 4 4\n(4) - (4) = 0, left: (4 - 4) = 0, 4, 12\n(12) / (4) = 3, left: (12 / 4) = 3, (4 - 4) = 0\nroll back, left: (4 - 4) = 0, 4, 12\nroll back, left: 4 12 4 4\n(4) * (4) = 16, left: (4 * 4) = 16, 4, 12\n(4) - (12) = -8, left: (4 - 12) = -8, (4 * 4) = 16\n(16) - (-8) = 24, left: ((4 * 4) - (4 - 12)) = 24\nreach 24! expression: ((4 * 4) - (4 - 12))"}, {"input": "4 12 4 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 12, 4\nroll back, left: 4 12 4 4\n(4) - (4) = 0, left: (4 - 4) = 0, 12, 4\n(12) + (0) = 12, left: (12 + (4 - 4)) = 12, 4\nroll back, left: (4 - 4) = 0, 12, 4\nroll back, left: 4 12 4 4\n(4) * (4) = 16, left: (4 * 4) = 16, 12, 4\n(12) + (16) = 28, left: (12 + (4 * 4)) = 28, 4\n(28) - (4) = 24, left: ((12 + (4 * 4)) - 4) = 24\nreach 24! expression: ((12 + (4 * 4)) - 4)"}, {"input": "13 13 7 1\n", "output": "(13) * (13) = 169, left: (13 * 13) = 169, 7, 1\n(169) - (1) = 168, left: ((13 * 13) - 1) = 168, 7\n(168) / (7) = 24, left: (((13 * 13) - 1) / 7) = 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "13 13 7 1\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 13, 1\n(13) - (-6) = 19, left: (13 - (7 - 13)) = 19, 1\nroll back, left: (7 - 13) = -6, 13, 1\nroll back, left: 13 13 7 1\n(13) - (7) = 6, left: (13 - 7) = 6, 13, 1\nroll back, left: 13 13 7 1\n(13) * (13) = 169, left: (13 * 13) = 169, 7, 1\n(169) - (1) = 168, left: ((13 * 13) - 1) = 168, 7\n(168) / (7) = 24, left: (((13 * 13) - 1) / 7) = 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "13 13 7 1\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 13, 13\nroll back, left: 13 13 7 1\n(7) / (1) = 7, left: (7 / 1) = 7, 13, 13\nroll back, left: 13 13 7 1\n(7) - (1) = 6, left: (7 - 1) = 6, 13, 13\nroll back, left: 13 13 7 1\n(13) * (13) = 169, left: (13 * 13) = 169, 7, 1\n(169) - (1) = 168, left: ((13 * 13) - 1) = 168, 7\n(168) / (7) = 24, left: (((13 * 13) - 1) / 7) = 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "13 13 7 1\n", "output": "(13) * (1) = 13, left: (13 * 1) = 13, 13, 7\nroll back, left: 13 13 7 1\n(13) / (1) = 13, left: (13 / 1) = 13, 13, 7\nroll back, left: 13 13 7 1\n(13) - (1) = 12, left: (13 - 1) = 12, 13, 7\nroll back, left: 13 13 7 1\n(13) * (13) = 169, left: (13 * 13) = 169, 7, 1\n(169) - (1) = 168, left: ((13 * 13) - 1) = 168, 7\n(168) / (7) = 24, left: (((13 * 13) - 1) / 7) = 24\nreach 24! expression: (((13 * 13) - 1) / 7)"}, {"input": "9 9 12 11\n", "output": "(9) / (9) = 1, left: (9 / 9) = 1, 12, 11\n(12) + (1) = 13, left: (12 + (9 / 9)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (9 / 9))) = 24\nreach 24! expression: (11 + (12 + (9 / 9)))"}, {"input": "9 9 12 11\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (12 - 9)) = 33, 9\n(33) - (9) = 24, left: ((11 * (12 - 9)) - 9) = 24\nreach 24! expression: ((11 * (12 - 9)) - 9)"}, {"input": "9 9 12 11\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 12, 11\n(11) + (0) = 11, left: (11 + (9 - 9)) = 11, 12\nroll back, left: (9 - 9) = 0, 12, 11\nroll back, left: 9 9 12 11\n(9) + (9) = 18, left: (9 + 9) = 18, 12, 11\nroll back, left: 9 9 12 11\n(9) / (9) = 1, left: (9 / 9) = 1, 12, 11\n(12) + (1) = 13, left: (12 + (9 / 9)) = 13, 11\n(11) + (13) = 24, left: (11 + (12 + (9 / 9))) = 24\nreach 24! expression: (11 + (12 + (9 / 9)))"}, {"input": "9 9 12 11\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 9, 11\n(9) / (-3) = -3, left: (9 / (9 - 12)) = -3, 11\nroll back, left: (9 - 12) = -3, 9, 11\nroll back, left: 9 9 12 11\n(12) - (9) = 3, left: (12 - 9) = 3, 9, 11\n(9) / (3) = 3, left: (9 / (12 - 9)) = 3, 11\nroll back, left: (12 - 9) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (12 - 9)) = 33, 9\n(33) - (9) = 24, left: ((11 * (12 - 9)) - 9) = 24\nreach 24! expression: ((11 * (12 - 9)) - 9)"}, {"input": "9 9 12 11\n", "output": "(9) - (12) = -3, left: (9 - 12) = -3, 9, 11\nroll back, left: 9 9 12 11\n(9) + (12) = 21, left: (9 + 12) = 21, 9, 11\nroll back, left: 9 9 12 11\n(12) / (9) = 4/3, left: (12 / 9) = 4/3, 9, 11\nroll back, left: 9 9 12 11\n(12) - (9) = 3, left: (12 - 9) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (12 - 9)) = 33, 9\n(33) - (9) = 24, left: ((11 * (12 - 9)) - 9) = 24\nreach 24! expression: ((11 * (12 - 9)) - 9)"}, {"input": "6 8 3 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 6, 8\n(6) * (8) = 48, left: (6 * 8) = 48, (3 * 8) = 24\n(48) - (24) = 24, left: ((6 * 8) - (3 * 8)) = 24\nreach 24! expression: ((6 * 8) - (3 * 8))"}, {"input": "6 8 3 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 6, 8\n(6) * (8/3) = 16, left: (6 * (8 / 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (6 * (8 / 3))) = 24\nreach 24! expression: (8 + (6 * (8 / 3)))"}, {"input": "6 8 3 8\n", "output": "(6) * (8) = 48, left: (6 * 8) = 48, 3, 8\n(48) / (3) = 16, left: ((6 * 8) / 3) = 16, 8\n(8) + (16) = 24, left: (8 + ((6 * 8) / 3)) = 24\nreach 24! expression: (8 + ((6 * 8) / 3))"}, {"input": "6 8 3 8\n", "output": "(6) * (8) = 48, left: (6 * 8) = 48, 3, 8\n(3) * (8) = 24, left: (3 * 8) = 24, (6 * 8) = 48\n(48) - (24) = 24, left: ((6 * 8) - (3 * 8)) = 24\nreach 24! expression: ((6 * 8) - (3 * 8))"}, {"input": "6 8 3 8\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 3, 8\n(8) - (2) = 6, left: (8 - (8 - 6)) = 6, 3\n(6) / (3) = 2, left: ((8 - (8 - 6)) / 3) = 2\nroll back, left: (8 - (8 - 6)) = 6, 3\nroll back, left: (8 - 6) = 2, 3, 8\nroll back, left: 6 8 3 8\n(6) * (8) = 48, left: (6 * 8) = 48, 3, 8\n(48) / (3) = 16, left: ((6 * 8) / 3) = 16, 8\n(8) + (16) = 24, left: (8 + ((6 * 8) / 3)) = 24\nreach 24! expression: (8 + ((6 * 8) / 3))"}, {"input": "6 8 3 8\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 6, 8\n(6) + (5) = 11, left: (6 + (8 - 3)) = 11, 8\nroll back, left: (8 - 3) = 5, 6, 8\nroll back, left: 6 8 3 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 6, 8\n(6) - (8/3) = 10/3, left: (6 - (8 / 3)) = 10/3, 8\nroll back, left: (8 / 3) = 8/3, 6, 8\n(6) * (8/3) = 16, left: (6 * (8 / 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (6 * (8 / 3))) = 24\nreach 24! expression: (8 + (6 * (8 / 3)))"}, {"input": "6 8 3 8\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 6, 8\n(6) + (24) = 30, left: (6 + (3 * 8)) = 30, 8\n(8) - (30) = -22, left: (8 - (6 + (3 * 8))) = -22\nroll back, left: (6 + (3 * 8)) = 30, 8\nroll back, left: (3 * 8) = 24, 6, 8\n(6) / (24) = 1/4, left: (6 / (3 * 8)) = 1/4, 8\nroll back, left: (3 * 8) = 24, 6, 8\n(6) * (8) = 48, left: (6 * 8) = 48, (3 * 8) = 24\n(48) - (24) = 24, left: ((6 * 8) - (3 * 8)) = 24\nreach 24! expression: ((6 * 8) - (3 * 8))"}, {"input": "6 8 3 8\n", "output": "(6) + (8) = 14, left: (6 + 8) = 14, 3, 8\nroll back, left: 6 8 3 8\n(6) - (8) = -2, left: (6 - 8) = -2, 3, 8\n(-2) / (3) = -2/3, left: ((6 - 8) / 3) = -2/3, 8\nroll back, left: (6 - 8) = -2, 3, 8\nroll back, left: 6 8 3 8\n(6) * (8) = 48, left: (6 * 8) = 48, 3, 8\n(3) * (8) = 24, left: (3 * 8) = 24, (6 * 8) = 48\n(48) - (24) = 24, left: ((6 * 8) - (3 * 8)) = 24\nreach 24! expression: ((6 * 8) - (3 * 8))"}, {"input": "4 10 2 6\n", "output": "(2) - (6) = -4, left: (2 - 6) = -4, 4, 10\n(10) + (-4) = 6, left: (10 + (2 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 + (2 - 6))) = 24\nreach 24! expression: (4 * (10 + (2 - 6)))"}, {"input": "4 10 2 6\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 10, 6\n(10) - (6) = 4, left: (10 - (4 + 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (10 - (4 + 2))) = 24\nreach 24! expression: (6 * (10 - (4 + 2)))"}, {"input": "4 10 2 6\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (10 - 6) = 4\n(4) * (6) = 24, left: ((10 - 6) * (4 + 2)) = 24\nreach 24! expression: ((10 - 6) * (4 + 2))"}, {"input": "4 10 2 6\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 10, 6\n(10) - (6) = 4, left: (10 - 6) = 4, (4 + 2) = 6\n(6) * (4) = 24, left: ((4 + 2) * (10 - 6)) = 24\nreach 24! expression: ((4 + 2) * (10 - 6))"}, {"input": "4 10 2 6\n", "output": "(10) + (6) = 16, left: (10 + 6) = 16, 4, 2\n(16) - (4) = 12, left: ((10 + 6) - 4) = 12, 2\n(2) * (12) = 24, left: (2 * ((10 + 6) - 4)) = 24\nreach 24! expression: (2 * ((10 + 6) - 4))"}, {"input": "4 10 2 6\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 10, 6\n(6) - (6) = 0, left: ((4 + 2) - 6) = 0, 10\nroll back, left: (4 + 2) = 6, 10, 6\n(6) / (6) = 1, left: ((4 + 2) / 6) = 1, 10\nroll back, left: (4 + 2) = 6, 10, 6\n(6) - (10) = -4, left: ((4 + 2) - 10) = -4, 6\nroll back, left: (4 + 2) = 6, 10, 6\n(10) - (6) = 4, left: (10 - (4 + 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (10 - (4 + 2))) = 24\nreach 24! expression: (6 * (10 - (4 + 2)))"}, {"input": "4 10 2 6\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 4, 10\n(10) / (4) = 5/2, left: (10 / 4) = 5/2, (6 / 2) = 3\nroll back, left: (6 / 2) = 3, 4, 10\nroll back, left: 4 10 2 6\n(2) - (6) = -4, left: (2 - 6) = -4, 4, 10\n(10) * (-4) = -40, left: (10 * (2 - 6)) = -40, 4\nroll back, left: (2 - 6) = -4, 4, 10\n(10) + (-4) = 6, left: (10 + (2 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 + (2 - 6))) = 24\nreach 24! expression: (4 * (10 + (2 - 6)))"}, {"input": "4 10 2 6\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 10, 6\nroll back, left: 4 10 2 6\n(4) / (2) = 2, left: (4 / 2) = 2, 10, 6\nroll back, left: 4 10 2 6\n(4) + (2) = 6, left: (4 + 2) = 6, 10, 6\n(6) / (10) = 3/5, left: (6 / 10) = 3/5, (4 + 2) = 6\nroll back, left: (4 + 2) = 6, 10, 6\n(10) - (6) = 4, left: (10 - 6) = 4, (4 + 2) = 6\n(6) * (4) = 24, left: ((4 + 2) * (10 - 6)) = 24\nreach 24! expression: ((4 + 2) * (10 - 6))"}, {"input": "4 8 10 5\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 10, 5\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, (4 + 8) = 12\n(12) / (1/2) = 24, left: ((4 + 8) / (5 / 10)) = 24\nreach 24! expression: ((4 + 8) / (5 / 10))"}, {"input": "4 8 10 5\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (4 + 8)) = 120, 5\n(120) / (5) = 24, left: ((10 * (4 + 8)) / 5) = 24\nreach 24! expression: ((10 * (4 + 8)) / 5)"}, {"input": "4 8 10 5\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 10, 5\n(10) / (5) = 2, left: (10 / 5) = 2, (4 + 8) = 12\n(12) * (2) = 24, left: ((4 + 8) * (10 / 5)) = 24\nreach 24! expression: ((4 + 8) * (10 / 5))"}, {"input": "4 8 10 5\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 10, 5\nroll back, left: 4 8 10 5\n(4) - (8) = -4, left: (4 - 8) = -4, 10, 5\n(10) - (-4) = 14, left: (10 - (4 - 8)) = 14, 5\nroll back, left: (4 - 8) = -4, 10, 5\nroll back, left: 4 8 10 5\n(4) + (8) = 12, left: (4 + 8) = 12, 10, 5\n(10) / (5) = 2, left: (10 / 5) = 2, (4 + 8) = 12\n(12) * (2) = 24, left: ((4 + 8) * (10 / 5)) = 24\nreach 24! expression: ((4 + 8) * (10 / 5))"}, {"input": "4 8 10 5\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 10, 5\n(10) + (5) = 15, left: (10 + 5) = 15, (4 - 8) = -4\nroll back, left: (4 - 8) = -4, 10, 5\n(10) * (-4) = -40, left: (10 * (4 - 8)) = -40, 5\nroll back, left: (4 - 8) = -4, 10, 5\nroll back, left: 4 8 10 5\n(4) + (8) = 12, left: (4 + 8) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (4 + 8)) = 120, 5\n(120) / (5) = 24, left: ((10 * (4 + 8)) / 5) = 24\nreach 24! expression: ((10 * (4 + 8)) / 5)"}, {"input": "4 8 10 5\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 10, 5\nroll back, left: 4 8 10 5\n(8) / (4) = 2, left: (8 / 4) = 2, 10, 5\nroll back, left: 4 8 10 5\n(4) - (8) = -4, left: (4 - 8) = -4, 10, 5\nroll back, left: 4 8 10 5\n(4) + (8) = 12, left: (4 + 8) = 12, 10, 5\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, (4 + 8) = 12\n(12) / (1/2) = 24, left: ((4 + 8) / (5 / 10)) = 24\nreach 24! expression: ((4 + 8) / (5 / 10))"}, {"input": "4 8 10 5\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (4 + 8)) = 120, 5\n(120) / (5) = 24, left: ((10 * (4 + 8)) / 5) = 24\nreach 24! expression: ((10 * (4 + 8)) / 5)"}, {"input": "4 8 10 5\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (4 + 8)) = 120, 5\n(120) / (5) = 24, left: ((10 * (4 + 8)) / 5) = 24\nreach 24! expression: ((10 * (4 + 8)) / 5)"}, {"input": "4 8 10 5\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (4 + 8)) = 120, 5\n(120) / (5) = 24, left: ((10 * (4 + 8)) / 5) = 24\nreach 24! expression: ((10 * (4 + 8)) / 5)"}, {"input": "4 8 10 5\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 10, 5\n(10) * (12) = 120, left: (10 * (4 + 8)) = 120, 5\n(120) / (5) = 24, left: ((10 * (4 + 8)) / 5) = 24\nreach 24! expression: ((10 * (4 + 8)) / 5)"}, {"input": "6 11 1 2\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 11, 1\n(11) + (12) = 23, left: (11 + (6 * 2)) = 23, 1\n(1) + (23) = 24, left: (1 + (11 + (6 * 2))) = 24\nreach 24! expression: (1 + (11 + (6 * 2)))"}, {"input": "6 11 1 2\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (11 + 1) = 12\n(12) + (12) = 24, left: ((11 + 1) + (6 * 2)) = 24\nreach 24! expression: ((11 + 1) + (6 * 2))"}, {"input": "6 11 1 2\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (6 * 2) = 12\n(12) + (12) = 24, left: ((6 * 2) + (11 + 1)) = 24\nreach 24! expression: ((6 * 2) + (11 + 1))"}, {"input": "6 11 1 2\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 11, 2\nroll back, left: 6 11 1 2\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, 11, 1\n(1) / (11) = 1/11, left: (1 / 11) = 1/11, (2 / 6) = 1/3\nroll back, left: (2 / 6) = 1/3, 11, 1\nroll back, left: 6 11 1 2\n(6) * (2) = 12, left: (6 * 2) = 12, 11, 1\n(11) + (12) = 23, left: (11 + (6 * 2)) = 23, 1\n(1) + (23) = 24, left: (1 + (11 + (6 * 2))) = 24\nreach 24! expression: (1 + (11 + (6 * 2)))"}, {"input": "6 11 1 2\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 1, 2\nroll back, left: 6 11 1 2\n(2) - (6) = -4, left: (2 - 6) = -4, 11, 1\n(11) / (-4) = -11/4, left: (11 / (2 - 6)) = -11/4, 1\nroll back, left: (2 - 6) = -4, 11, 1\nroll back, left: 6 11 1 2\n(6) * (2) = 12, left: (6 * 2) = 12, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (6 * 2) = 12\n(12) + (12) = 24, left: ((6 * 2) + (11 + 1)) = 24\nreach 24! expression: ((6 * 2) + (11 + 1))"}, {"input": "6 11 1 2\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 1, 2\nroll back, left: 6 11 1 2\n(6) + (11) = 17, left: (6 + 11) = 17, 1, 2\nroll back, left: 6 11 1 2\n(1) - (6) = -5, left: (1 - 6) = -5, 11, 2\nroll back, left: 6 11 1 2\n(11) + (1) = 12, left: (11 + 1) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (11 + 1) = 12\n(12) + (12) = 24, left: ((11 + 1) + (6 * 2)) = 24\nreach 24! expression: ((11 + 1) + (6 * 2))"}, {"input": "6 11 1 2\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 11, 2\nroll back, left: 6 11 1 2\n(6) * (11) = 66, left: (6 * 11) = 66, 1, 2\nroll back, left: 6 11 1 2\n(1) - (11) = -10, left: (1 - 11) = -10, 6, 2\nroll back, left: 6 11 1 2\n(11) + (1) = 12, left: (11 + 1) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (11 + 1) = 12\n(12) + (12) = 24, left: ((11 + 1) + (6 * 2)) = 24\nreach 24! expression: ((11 + 1) + (6 * 2))"}, {"input": "6 11 1 2\n", "output": "(1) - (11) = -10, left: (1 - 11) = -10, 6, 2\n(6) / (-10) = -3/5, left: (6 / (1 - 11)) = -3/5, 2\nroll back, left: (1 - 11) = -10, 6, 2\nroll back, left: 6 11 1 2\n(11) * (1) = 11, left: (11 * 1) = 11, 6, 2\nroll back, left: 6 11 1 2\n(11) + (1) = 12, left: (11 + 1) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (11 + 1) = 12\n(12) + (12) = 24, left: ((11 + 1) + (6 * 2)) = 24\nreach 24! expression: ((11 + 1) + (6 * 2))"}, {"input": "11 13 2 6\n", "output": "(2) - (11) = -9, left: (2 - 11) = -9, 13, 6\n(13) + (-9) = 4, left: (13 + (2 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 + (2 - 11))) = 24\nreach 24! expression: (6 * (13 + (2 - 11)))"}, {"input": "11 13 2 6\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 11, 6\n(15) - (11) = 4, left: ((13 + 2) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 + 2) - 11)) = 24\nreach 24! expression: (6 * ((13 + 2) - 11))"}, {"input": "11 13 2 6\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 13, 6\n(13) - (9) = 4, left: (13 - (11 - 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (11 - 2))) = 24\nreach 24! expression: (6 * (13 - (11 - 2)))"}, {"input": "11 13 2 6\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 13, 6\n(6) - (22) = -16, left: (6 - (11 * 2)) = -16, 13\nroll back, left: (11 * 2) = 22, 13, 6\n(13) - (22) = -9, left: (13 - (11 * 2)) = -9, 6\nroll back, left: (11 * 2) = 22, 13, 6\nroll back, left: 11 13 2 6\n(2) - (11) = -9, left: (2 - 11) = -9, 13, 6\n(13) + (-9) = 4, left: (13 + (2 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 + (2 - 11))) = 24\nreach 24! expression: (6 * (13 + (2 - 11)))"}, {"input": "11 13 2 6\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 13, 6\nroll back, left: 11 13 2 6\n(11) + (2) = 13, left: (11 + 2) = 13, 13, 6\n(6) + (13) = 19, left: (6 + (11 + 2)) = 19, 13\nroll back, left: (11 + 2) = 13, 13, 6\nroll back, left: 11 13 2 6\n(2) - (11) = -9, left: (2 - 11) = -9, 13, 6\n(13) + (-9) = 4, left: (13 + (2 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 + (2 - 11))) = 24\nreach 24! expression: (6 * (13 + (2 - 11)))"}, {"input": "11 13 2 6\n", "output": "(11) * (6) = 66, left: (11 * 6) = 66, 13, 2\nroll back, left: 11 13 2 6\n(6) / (11) = 6/11, left: (6 / 11) = 6/11, 13, 2\nroll back, left: 11 13 2 6\n(2) - (13) = -11, left: (2 - 13) = -11, 11, 6\nroll back, left: 11 13 2 6\n(13) + (2) = 15, left: (13 + 2) = 15, 11, 6\n(15) - (11) = 4, left: ((13 + 2) - 11) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 + 2) - 11)) = 24\nreach 24! expression: (6 * ((13 + 2) - 11))"}, {"input": "12 8 5 12\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (8 - 5)) = 36, 12\n(36) - (12) = 24, left: ((12 * (8 - 5)) - 12) = 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "12 8 5 12\n", "output": "(12) * (5) = 60, left: (12 * 5) = 60, 8, 12\nroll back, left: 12 8 5 12\n(5) - (8) = -3, left: (5 - 8) = -3, 12, 12\n(-3) / (12) = -1/4, left: ((5 - 8) / 12) = -1/4, 12\nroll back, left: (5 - 8) = -3, 12, 12\nroll back, left: 12 8 5 12\n(8) - (5) = 3, left: (8 - 5) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (8 - 5)) = 36, 12\n(36) - (12) = 24, left: ((12 * (8 - 5)) - 12) = 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "12 8 5 12\n", "output": "(12) * (5) = 60, left: (12 * 5) = 60, 8, 12\n(12) - (60) = -48, left: (12 - (12 * 5)) = -48, 8\nroll back, left: (12 * 5) = 60, 8, 12\nroll back, left: 12 8 5 12\n(8) * (12) = 96, left: (8 * 12) = 96, 12, 5\nroll back, left: 12 8 5 12\n(8) - (5) = 3, left: (8 - 5) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (8 - 5)) = 36, 12\n(36) - (12) = 24, left: ((12 * (8 - 5)) - 12) = 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "12 8 5 12\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 5, 12\nroll back, left: 12 8 5 12\n(8) - (12) = -4, left: (8 - 12) = -4, 12, 5\nroll back, left: 12 8 5 12\n(8) + (5) = 13, left: (8 + 5) = 13, 12, 12\nroll back, left: 12 8 5 12\n(8) - (5) = 3, left: (8 - 5) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (8 - 5)) = 36, 12\n(36) - (12) = 24, left: ((12 * (8 - 5)) - 12) = 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "12 8 5 12\n", "output": "(5) / (12) = 5/12, left: (5 / 12) = 5/12, 8, 12\nroll back, left: 12 8 5 12\n(5) - (12) = -7, left: (5 - 12) = -7, 8, 12\n(8) * (12) = 96, left: (8 * 12) = 96, (5 - 12) = -7\nroll back, left: (5 - 12) = -7, 8, 12\nroll back, left: 12 8 5 12\n(8) - (5) = 3, left: (8 - 5) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (8 - 5)) = 36, 12\n(36) - (12) = 24, left: ((12 * (8 - 5)) - 12) = 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "12 8 5 12\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 12, 12\n(5/8) - (12) = -91/8, left: ((5 / 8) - 12) = -91/8, 12\nroll back, left: (5 / 8) = 5/8, 12, 12\nroll back, left: 12 8 5 12\n(5) - (8) = -3, left: (5 - 8) = -3, 12, 12\nroll back, left: 12 8 5 12\n(8) - (5) = 3, left: (8 - 5) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (8 - 5)) = 36, 12\n(36) - (12) = 24, left: ((12 * (8 - 5)) - 12) = 24\nreach 24! expression: ((12 * (8 - 5)) - 12)"}, {"input": "13 7 9 13\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 7, 13\n(13) + (4) = 17, left: (13 + (13 - 9)) = 17, 7\n(7) + (17) = 24, left: (7 + (13 + (13 - 9))) = 24\nreach 24! expression: (7 + (13 + (13 - 9)))"}, {"input": "13 7 9 13\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 7, 13\n(7) + (4) = 11, left: (7 + (13 - 9)) = 11, 13\n(13) + (11) = 24, left: (13 + (7 + (13 - 9))) = 24\nreach 24! expression: (13 + (7 + (13 - 9)))"}, {"input": "13 7 9 13\n", "output": "(13) + (13) = 26, left: (13 + 13) = 26, 7, 9\n(26) - (9) = 17, left: ((13 + 13) - 9) = 17, 7\n(7) + (17) = 24, left: (7 + ((13 + 13) - 9)) = 24\nreach 24! expression: (7 + ((13 + 13) - 9))"}, {"input": "13 7 9 13\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 13, 13\n(13) + (13) = 26, left: (13 + 13) = 26, (7 - 9) = -2\n(-2) + (26) = 24, left: ((7 - 9) + (13 + 13)) = 24\nreach 24! expression: ((7 - 9) + (13 + 13))"}, {"input": "13 7 9 13\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 13, 13\n(13) + (13) = 26, left: (13 + 13) = 26, (9 - 7) = 2\n(26) - (2) = 24, left: ((13 + 13) - (9 - 7)) = 24\nreach 24! expression: ((13 + 13) - (9 - 7))"}, {"input": "12 13 12 12\n", "output": "(12) / (12) = 1, left: (12 / 12) = 1, 12, 13\n(1) - (13) = -12, left: ((12 / 12) - 13) = -12, 12\n(12) - (-12) = 24, left: (12 - ((12 / 12) - 13)) = 24\nreach 24! expression: (12 - ((12 / 12) - 13))"}, {"input": "12 13 12 12\n", "output": "(12) / (12) = 1, left: (12 / 12) = 1, 13, 12\n(1) - (12) = -11, left: ((12 / 12) - 12) = -11, 13\n(13) - (-11) = 24, left: (13 - ((12 / 12) - 12)) = 24\nreach 24! expression: (13 - ((12 / 12) - 12))"}, {"input": "12 13 12 12\n", "output": "(12) / (12) = 1, left: (12 / 12) = 1, 13, 12\n(13) + (12) = 25, left: (13 + 12) = 25, (12 / 12) = 1\n(25) - (1) = 24, left: ((13 + 12) - (12 / 12)) = 24\nreach 24! expression: ((13 + 12) - (12 / 12))"}, {"input": "12 13 12 12\n", "output": "(13) + (12) = 25, left: (13 + 12) = 25, 12, 12\n(12) / (12) = 1, left: (12 / 12) = 1, (13 + 12) = 25\n(25) - (1) = 24, left: ((13 + 12) - (12 / 12)) = 24\nreach 24! expression: ((13 + 12) - (12 / 12))"}, {"input": "8 2 8 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (8 / 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (8 / 8))) = 24\nreach 24! expression: (8 * (2 + (8 / 8)))"}, {"input": "8 2 8 8\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (8 / 2)) = 32, 8\n(32) - (8) = 24, left: ((8 * (8 / 2)) - 8) = 24\nreach 24! expression: ((8 * (8 / 2)) - 8)"}, {"input": "8 2 8 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (8 + 8)) = 32, 8\n(32) - (8) = 24, left: ((2 * (8 + 8)) - 8) = 24\nreach 24! expression: ((2 * (8 + 8)) - 8)"}, {"input": "8 2 8 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 2, 8\n(2) + (1) = 3, left: (2 + (8 / 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (8 / 8))) = 24\nreach 24! expression: (8 * (2 + (8 / 8)))"}, {"input": "8 2 8 8\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 8, 8\nroll back, left: 8 2 8 8\n(2) - (8) = -6, left: (2 - 8) = -6, 8, 8\nroll back, left: 8 2 8 8\n(8) * (2) = 16, left: (8 * 2) = 16, 8, 8\nroll back, left: 8 2 8 8\n(8) / (2) = 4, left: (8 / 2) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (8 / 2)) = 32, 8\n(32) - (8) = 24, left: ((8 * (8 / 2)) - 8) = 24\nreach 24! expression: ((8 * (8 / 2)) - 8)"}, {"input": "8 2 8 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 2, 8\n(2) + (0) = 2, left: (2 + (8 - 8)) = 2, 8\nroll back, left: (8 - 8) = 0, 2, 8\n(8) - (0) = 8, left: (8 - (8 - 8)) = 8, 2\nroll back, left: (8 - 8) = 0, 2, 8\nroll back, left: 8 2 8 8\n(8) + (8) = 16, left: (8 + 8) = 16, 2, 8\n(2) * (16) = 32, left: (2 * (8 + 8)) = 32, 8\n(32) - (8) = 24, left: ((2 * (8 + 8)) - 8) = 24\nreach 24! expression: ((2 * (8 + 8)) - 8)"}, {"input": "8 2 8 8\n", "output": "(2) * (8) = 16, left: (2 * 8) = 16, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (2 * 8) = 16\nroll back, left: (2 * 8) = 16, 8, 8\n(8) + (16) = 24, left: (8 + (2 * 8)) = 24, 8\nroll back, left: (2 * 8) = 16, 8, 8\nroll back, left: 8 2 8 8\n(8) / (2) = 4, left: (8 / 2) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (8 / 2)) = 32, 8\n(32) - (8) = 24, left: ((8 * (8 / 2)) - 8) = 24\nreach 24! expression: ((8 * (8 / 2)) - 8)"}, {"input": "8 2 8 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 2, 8\n(8) - (0) = 8, left: (8 - (8 - 8)) = 8, 2\nroll back, left: (8 - 8) = 0, 2, 8\n(2) + (8) = 10, left: (2 + 8) = 10, (8 - 8) = 0\nroll back, left: (8 - 8) = 0, 2, 8\nroll back, left: 8 2 8 8\n(8) / (8) = 1, left: (8 / 8) = 1, 2, 8\n(2) + (1) = 3, left: (2 + (8 / 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (8 / 8))) = 24\nreach 24! expression: (8 * (2 + (8 / 8)))"}, {"input": "8 2 8 8\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 8, 2\n(8) - (0) = 8, left: (8 - (8 - 8)) = 8, 2\nroll back, left: (8 - 8) = 0, 8, 2\nroll back, left: 8 2 8 8\n(8) / (8) = 1, left: (8 / 8) = 1, 8, 2\n(8) / (2) = 4, left: (8 / 2) = 4, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 8, 2\n(2) + (1) = 3, left: (2 + (8 / 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 + (8 / 8))) = 24\nreach 24! expression: (8 * (2 + (8 / 8)))"}, {"input": "4 8 2 9\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 8, 9\n(9) - (6) = 3, left: (9 - (4 + 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 - (4 + 2))) = 24\nreach 24! expression: (8 * (9 - (4 + 2)))"}, {"input": "4 8 2 9\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 8, 2\n(5) - (2) = 3, left: ((9 - 4) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 4) - 2)) = 24\nreach 24! expression: (8 * ((9 - 4) - 2))"}, {"input": "4 8 2 9\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 4, 8\n(7) - (4) = 3, left: ((9 - 2) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 2) - 4)) = 24\nreach 24! expression: (8 * ((9 - 2) - 4))"}, {"input": "4 8 2 9\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 2, 9\nroll back, left: 4 8 2 9\n(8) - (9) = -1, left: (8 - 9) = -1, 4, 2\nroll back, left: 4 8 2 9\n(4) + (2) = 6, left: (4 + 2) = 6, 8, 9\n(8) - (6) = 2, left: (8 - (4 + 2)) = 2, 9\nroll back, left: (4 + 2) = 6, 8, 9\n(9) - (6) = 3, left: (9 - (4 + 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 - (4 + 2))) = 24\nreach 24! expression: (8 * (9 - (4 + 2)))"}, {"input": "4 8 2 9\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 4, 8\nroll back, left: 4 8 2 9\n(2) * (9) = 18, left: (2 * 9) = 18, 4, 8\nroll back, left: 4 8 2 9\n(2) - (9) = -7, left: (2 - 9) = -7, 4, 8\nroll back, left: 4 8 2 9\n(9) - (2) = 7, left: (9 - 2) = 7, 4, 8\n(7) - (4) = 3, left: ((9 - 2) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 2) - 4)) = 24\nreach 24! expression: (8 * ((9 - 2) - 4))"}, {"input": "4 8 2 9\n", "output": "(9) / (8) = 9/8, left: (9 / 8) = 9/8, 4, 2\nroll back, left: 4 8 2 9\n(8) - (9) = -1, left: (8 - 9) = -1, 4, 2\n(4) - (-1) = 5, left: (4 - (8 - 9)) = 5, 2\nroll back, left: (8 - 9) = -1, 4, 2\nroll back, left: 4 8 2 9\n(4) + (2) = 6, left: (4 + 2) = 6, 8, 9\n(9) - (6) = 3, left: (9 - (4 + 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 - (4 + 2))) = 24\nreach 24! expression: (8 * (9 - (4 + 2)))"}, {"input": "4 8 2 9\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 4, 9\nroll back, left: 4 8 2 9\n(8) / (2) = 4, left: (8 / 2) = 4, 4, 9\n(4) - (9) = -5, left: ((8 / 2) - 9) = -5, 4\nroll back, left: (8 / 2) = 4, 4, 9\nroll back, left: 4 8 2 9\n(9) - (2) = 7, left: (9 - 2) = 7, 4, 8\n(7) - (4) = 3, left: ((9 - 2) - 4) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 2) - 4)) = 24\nreach 24! expression: (8 * ((9 - 2) - 4))"}, {"input": "4 8 2 9\n", "output": "(4) * (8) = 32, left: (4 * 8) = 32, 2, 9\nroll back, left: 4 8 2 9\n(8) / (4) = 2, left: (8 / 4) = 2, 2, 9\nroll back, left: 4 8 2 9\n(4) * (9) = 36, left: (4 * 9) = 36, 8, 2\nroll back, left: 4 8 2 9\n(9) - (4) = 5, left: (9 - 4) = 5, 8, 2\n(5) - (2) = 3, left: ((9 - 4) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((9 - 4) - 2)) = 24\nreach 24! expression: (8 * ((9 - 4) - 2))"}, {"input": "7 7 11 6\n", "output": "(7) * (6) = 42, left: (7 * 6) = 42, 7, 11\n(42) - (7) = 35, left: ((7 * 6) - 7) = 35, 11\n(35) - (11) = 24, left: (((7 * 6) - 7) - 11) = 24\nreach 24! expression: (((7 * 6) - 7) - 11)"}, {"input": "7 7 11 6\n", "output": "(7) * (6) = 42, left: (7 * 6) = 42, 7, 11\n(42) - (11) = 31, left: ((7 * 6) - 11) = 31, 7\n(31) - (7) = 24, left: (((7 * 6) - 11) - 7) = 24\nreach 24! expression: (((7 * 6) - 11) - 7)"}, {"input": "7 7 11 6\n", "output": "(7) * (6) = 42, left: (7 * 6) = 42, 7, 11\n(7) + (11) = 18, left: (7 + 11) = 18, (7 * 6) = 42\n(42) - (18) = 24, left: ((7 * 6) - (7 + 11)) = 24\nreach 24! expression: ((7 * 6) - (7 + 11))"}, {"input": "7 7 11 6\n", "output": "(7) + (11) = 18, left: (7 + 11) = 18, 7, 6\n(7) * (6) = 42, left: (7 * 6) = 42, (7 + 11) = 18\n(42) - (18) = 24, left: ((7 * 6) - (7 + 11)) = 24\nreach 24! expression: ((7 * 6) - (7 + 11))"}, {"input": "7 7 11 6\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 7, 11\n(7) / (1) = 7, left: (7 / (7 - 6)) = 7, 11\nroll back, left: (7 - 6) = 1, 7, 11\nroll back, left: 7 7 11 6\n(6) / (7) = 6/7, left: (6 / 7) = 6/7, 7, 11\nroll back, left: 7 7 11 6\n(7) * (6) = 42, left: (7 * 6) = 42, 7, 11\n(7) + (11) = 18, left: (7 + 11) = 18, (7 * 6) = 42\n(42) - (18) = 24, left: ((7 * 6) - (7 + 11)) = 24\nreach 24! expression: ((7 * 6) - (7 + 11))"}, {"input": "7 7 11 6\n", "output": "(7) * (7) = 49, left: (7 * 7) = 49, 11, 6\nroll back, left: 7 7 11 6\n(7) - (7) = 0, left: (7 - 7) = 0, 11, 6\nroll back, left: 7 7 11 6\n(11) - (7) = 4, left: (11 - 7) = 4, 7, 6\nroll back, left: 7 7 11 6\n(7) + (11) = 18, left: (7 + 11) = 18, 7, 6\n(7) * (6) = 42, left: (7 * 6) = 42, (7 + 11) = 18\n(42) - (18) = 24, left: ((7 * 6) - (7 + 11)) = 24\nreach 24! expression: ((7 * 6) - (7 + 11))"}, {"input": "4 7 9 2\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 7, 2\n(7) + (5) = 12, left: (7 + (9 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (9 - 4))) = 24\nreach 24! expression: (2 * (7 + (9 - 4)))"}, {"input": "4 7 9 2\n", "output": "(4) - (9) = -5, left: (4 - 9) = -5, 7, 2\n(7) - (-5) = 12, left: (7 - (4 - 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 - (4 - 9))) = 24\nreach 24! expression: (2 * (7 - (4 - 9)))"}, {"input": "4 7 9 2\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 9, 2\n(9) - (-3) = 12, left: (9 - (4 - 7)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (4 - 7))) = 24\nreach 24! expression: (2 * (9 - (4 - 7)))"}, {"input": "4 7 9 2\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 4, 2\n(16) - (4) = 12, left: ((7 + 9) - 4) = 12, 2\n(2) * (12) = 24, left: (2 * ((7 + 9) - 4)) = 24\nreach 24! expression: (2 * ((7 + 9) - 4))"}, {"input": "4 7 9 2\n", "output": "(4) + (9) = 13, left: (4 + 9) = 13, 7, 2\n(7) - (13) = -6, left: (7 - (4 + 9)) = -6, 2\nroll back, left: (4 + 9) = 13, 7, 2\nroll back, left: 4 7 9 2\n(4) - (9) = -5, left: (4 - 9) = -5, 7, 2\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, (4 - 9) = -5\nroll back, left: (4 - 9) = -5, 7, 2\n(7) - (-5) = 12, left: (7 - (4 - 9)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 - (4 - 9))) = 24\nreach 24! expression: (2 * (7 - (4 - 9)))"}, {"input": "4 7 9 2\n", "output": "(4) / (7) = 4/7, left: (4 / 7) = 4/7, 9, 2\nroll back, left: 4 7 9 2\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 9, 2\n(2) * (7/4) = 7/2, left: (2 * (7 / 4)) = 7/2, 9\nroll back, left: (7 / 4) = 7/4, 9, 2\nroll back, left: 4 7 9 2\n(4) - (7) = -3, left: (4 - 7) = -3, 9, 2\n(9) - (-3) = 12, left: (9 - (4 - 7)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (4 - 7))) = 24\nreach 24! expression: (2 * (9 - (4 - 7)))"}, {"input": "4 7 9 2\n", "output": "(4) + (9) = 13, left: (4 + 9) = 13, 7, 2\nroll back, left: 4 7 9 2\n(9) - (4) = 5, left: (9 - 4) = 5, 7, 2\n(7) * (5) = 35, left: (7 * (9 - 4)) = 35, 2\n(35) / (2) = 35/2, left: ((7 * (9 - 4)) / 2) = 35/2\nroll back, left: (7 * (9 - 4)) = 35, 2\nroll back, left: (9 - 4) = 5, 7, 2\n(7) + (5) = 12, left: (7 + (9 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (7 + (9 - 4))) = 24\nreach 24! expression: (2 * (7 + (9 - 4)))"}, {"input": "4 7 9 2\n", "output": "(7) + (9) = 16, left: (7 + 9) = 16, 4, 2\n(2) / (16) = 1/8, left: (2 / (7 + 9)) = 1/8, 4\n(1/8) / (4) = 1/32, left: ((2 / (7 + 9)) / 4) = 1/32\nroll back, left: (2 / (7 + 9)) = 1/8, 4\nroll back, left: (7 + 9) = 16, 4, 2\n(4) - (16) = -12, left: (4 - (7 + 9)) = -12, 2\nroll back, left: (7 + 9) = 16, 4, 2\n(16) - (4) = 12, left: ((7 + 9) - 4) = 12, 2\n(2) * (12) = 24, left: (2 * ((7 + 9) - 4)) = 24\nreach 24! expression: (2 * ((7 + 9) - 4))"}, {"input": "4 7 9 2\n", "output": "(7) + (2) = 9, left: (7 + 2) = 9, 4, 9\nroll back, left: 4 7 9 2\n(4) - (7) = -3, left: (4 - 7) = -3, 9, 2\n(2) * (-3) = -6, left: (2 * (4 - 7)) = -6, 9\n(9) + (-6) = 3, left: (9 + (2 * (4 - 7))) = 3\nroll back, left: (2 * (4 - 7)) = -6, 9\nroll back, left: (4 - 7) = -3, 9, 2\n(9) - (-3) = 12, left: (9 - (4 - 7)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (4 - 7))) = 24\nreach 24! expression: (2 * (9 - (4 - 7)))"}, {"input": "6 3 5 1\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 6, 3\n(3) * (6) = 18, left: (3 * (5 + 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 * (5 + 1))) = 24\nreach 24! expression: (6 + (3 * (5 + 1)))"}, {"input": "6 3 5 1\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (6 * 3) = 18\n(18) + (6) = 24, left: ((6 * 3) + (5 + 1)) = 24\nreach 24! expression: ((6 * 3) + (5 + 1))"}, {"input": "6 3 5 1\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 5, 1\n(1) + (18) = 19, left: (1 + (6 * 3)) = 19, 5\n(5) + (19) = 24, left: (5 + (1 + (6 * 3))) = 24\nreach 24! expression: (5 + (1 + (6 * 3)))"}, {"input": "6 3 5 1\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 6, 3\n(6) * (3) = 18, left: (6 * 3) = 18, (5 + 1) = 6\n(6) + (18) = 24, left: ((5 + 1) + (6 * 3)) = 24\nreach 24! expression: ((5 + 1) + (6 * 3))"}, {"input": "6 3 5 1\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 5, 1\n(5) + (-3) = 2, left: (5 + (3 - 6)) = 2, 1\nroll back, left: (3 - 6) = -3, 5, 1\n(-3) - (5) = -8, left: ((3 - 6) - 5) = -8, 1\nroll back, left: (3 - 6) = -3, 5, 1\nroll back, left: 6 3 5 1\n(6) * (3) = 18, left: (6 * 3) = 18, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (6 * 3) = 18\n(18) + (6) = 24, left: ((6 * 3) + (5 + 1)) = 24\nreach 24! expression: ((6 * 3) + (5 + 1))"}, {"input": "6 3 5 1\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 6, 1\n(6) + (-2) = 4, left: (6 + (3 - 5)) = 4, 1\nroll back, left: (3 - 5) = -2, 6, 1\nroll back, left: 6 3 5 1\n(5) - (3) = 2, left: (5 - 3) = 2, 6, 1\nroll back, left: 6 3 5 1\n(6) * (3) = 18, left: (6 * 3) = 18, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (6 * 3) = 18\n(18) + (6) = 24, left: ((6 * 3) + (5 + 1)) = 24\nreach 24! expression: ((6 * 3) + (5 + 1))"}, {"input": "6 3 5 1\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 3, 1\nroll back, left: 6 3 5 1\n(5) * (1) = 5, left: (5 * 1) = 5, 6, 3\n(6) / (5) = 6/5, left: (6 / (5 * 1)) = 6/5, 3\nroll back, left: (5 * 1) = 5, 6, 3\nroll back, left: 6 3 5 1\n(5) + (1) = 6, left: (5 + 1) = 6, 6, 3\n(3) * (6) = 18, left: (3 * (5 + 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 * (5 + 1))) = 24\nreach 24! expression: (6 + (3 * (5 + 1)))"}, {"input": "6 3 5 1\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 6, 1\n(6) / (2) = 3, left: (6 / (5 - 3)) = 3, 1\n(1) - (3) = -2, left: (1 - (6 / (5 - 3))) = -2\nroll back, left: (6 / (5 - 3)) = 3, 1\nroll back, left: (5 - 3) = 2, 6, 1\nroll back, left: 6 3 5 1\n(5) + (1) = 6, left: (5 + 1) = 6, 6, 3\n(6) * (3) = 18, left: (6 * 3) = 18, (5 + 1) = 6\n(6) + (18) = 24, left: ((5 + 1) + (6 * 3)) = 24\nreach 24! expression: ((5 + 1) + (6 * 3))"}, {"input": "6 3 5 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 3, 5\nroll back, left: 6 3 5 1\n(6) - (1) = 5, left: (6 - 1) = 5, 3, 5\nroll back, left: 6 3 5 1\n(6) - (5) = 1, left: (6 - 5) = 1, 3, 1\nroll back, left: 6 3 5 1\n(6) * (3) = 18, left: (6 * 3) = 18, 5, 1\n(1) + (18) = 19, left: (1 + (6 * 3)) = 19, 5\n(5) + (19) = 24, left: (5 + (1 + (6 * 3))) = 24\nreach 24! expression: (5 + (1 + (6 * 3)))"}, {"input": "1 2 10 5\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 1, 10\n(10) * (5/2) = 25, left: (10 * (5 / 2)) = 25, 1\n(25) - (1) = 24, left: ((10 * (5 / 2)) - 1) = 24\nreach 24! expression: ((10 * (5 / 2)) - 1)"}, {"input": "1 2 10 5\n", "output": "(2) / (10) = 1/5, left: (2 / 10) = 1/5, 1, 5\n(5) / (1/5) = 25, left: (5 / (2 / 10)) = 25, 1\n(25) - (1) = 24, left: ((5 / (2 / 10)) - 1) = 24\nreach 24! expression: ((5 / (2 / 10)) - 1)"}, {"input": "1 2 10 5\n", "output": "(2) * (10) = 20, left: (2 * 10) = 20, 1, 5\n(5) + (20) = 25, left: (5 + (2 * 10)) = 25, 1\n(25) - (1) = 24, left: ((5 + (2 * 10)) - 1) = 24\nreach 24! expression: ((5 + (2 * 10)) - 1)"}, {"input": "1 2 10 5\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (5 - 1) = 4\n(4) + (20) = 24, left: ((5 - 1) + (2 * 10)) = 24\nreach 24! expression: ((5 - 1) + (2 * 10))"}, {"input": "1 2 10 5\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 10, 5\n(10) - (5) = 5, left: (10 - 5) = 5, (1 / 2) = 1/2\nroll back, left: (1 / 2) = 1/2, 10, 5\nroll back, left: 1 2 10 5\n(2) - (1) = 1, left: (2 - 1) = 1, 10, 5\nroll back, left: 1 2 10 5\n(5) - (1) = 4, left: (5 - 1) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (5 - 1) = 4\n(4) + (20) = 24, left: ((5 - 1) + (2 * 10)) = 24\nreach 24! expression: ((5 - 1) + (2 * 10))"}, {"input": "1 2 10 5\n", "output": "(1) * (10) = 10, left: (1 * 10) = 10, 2, 5\n(5) - (2) = 3, left: (5 - 2) = 3, (1 * 10) = 10\nroll back, left: (1 * 10) = 10, 2, 5\nroll back, left: 1 2 10 5\n(1) + (10) = 11, left: (1 + 10) = 11, 2, 5\nroll back, left: 1 2 10 5\n(2) * (10) = 20, left: (2 * 10) = 20, 1, 5\n(5) + (20) = 25, left: (5 + (2 * 10)) = 25, 1\n(25) - (1) = 24, left: ((5 + (2 * 10)) - 1) = 24\nreach 24! expression: ((5 + (2 * 10)) - 1)"}, {"input": "11 10 3 5\n", "output": "(10) * (3) = 30, left: (10 * 3) = 30, 11, 5\n(30) - (11) = 19, left: ((10 * 3) - 11) = 19, 5\n(5) + (19) = 24, left: (5 + ((10 * 3) - 11)) = 24\nreach 24! expression: (5 + ((10 * 3) - 11))"}, {"input": "11 10 3 5\n", "output": "(10) * (3) = 30, left: (10 * 3) = 30, 11, 5\n(5) + (30) = 35, left: (5 + (10 * 3)) = 35, 11\n(35) - (11) = 24, left: ((5 + (10 * 3)) - 11) = 24\nreach 24! expression: ((5 + (10 * 3)) - 11)"}, {"input": "11 10 3 5\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (10 - 3)) = 35, 11\n(35) - (11) = 24, left: ((5 * (10 - 3)) - 11) = 24\nreach 24! expression: ((5 * (10 - 3)) - 11)"}, {"input": "11 10 3 5\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 10, 3\n(10) * (3) = 30, left: (10 * 3) = 30, (11 - 5) = 6\n(30) - (6) = 24, left: ((10 * 3) - (11 - 5)) = 24\nreach 24! expression: ((10 * 3) - (11 - 5))"}, {"input": "11 10 3 5\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 3, 5\nroll back, left: 11 10 3 5\n(10) - (11) = -1, left: (10 - 11) = -1, 3, 5\nroll back, left: 11 10 3 5\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, 11, 3\nroll back, left: 11 10 3 5\n(10) - (3) = 7, left: (10 - 3) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (10 - 3)) = 35, 11\n(35) - (11) = 24, left: ((5 * (10 - 3)) - 11) = 24\nreach 24! expression: ((5 * (10 - 3)) - 11)"}, {"input": "11 10 3 5\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 10, 5\nroll back, left: 11 10 3 5\n(10) / (11) = 10/11, left: (10 / 11) = 10/11, 3, 5\nroll back, left: 11 10 3 5\n(10) / (5) = 2, left: (10 / 5) = 2, 11, 3\nroll back, left: 11 10 3 5\n(10) * (3) = 30, left: (10 * 3) = 30, 11, 5\n(5) + (30) = 35, left: (5 + (10 * 3)) = 35, 11\n(35) - (11) = 24, left: ((5 + (10 * 3)) - 11) = 24\nreach 24! expression: ((5 + (10 * 3)) - 11)"}, {"input": "1 4 10 3\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (10 - 4) = 6\n(6) * (4) = 24, left: ((10 - 4) * (1 + 3)) = 24\nreach 24! expression: ((10 - 4) * (1 + 3))"}, {"input": "1 4 10 3\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 1, 4\n(7) - (1) = 6, left: ((10 - 3) - 1) = 6, 4\n(4) * (6) = 24, left: (4 * ((10 - 3) - 1)) = 24\nreach 24! expression: (4 * ((10 - 3) - 1))"}, {"input": "1 4 10 3\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 4, 3\n(9) - (3) = 6, left: ((10 - 1) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((10 - 1) - 3)) = 24\nreach 24! expression: (4 * ((10 - 1) - 3))"}, {"input": "1 4 10 3\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 4, 10\n(10) - (4) = 6, left: (10 - (1 + 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 - (1 + 3))) = 24\nreach 24! expression: (4 * (10 - (1 + 3)))"}, {"input": "1 4 10 3\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 4, 3\n(3) - (4) = -1, left: (3 - 4) = -1, (10 - 1) = 9\nroll back, left: (10 - 1) = 9, 4, 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, (10 - 1) = 9\nroll back, left: (10 - 1) = 9, 4, 3\n(3) * (9) = 27, left: (3 * (10 - 1)) = 27, 4\nroll back, left: (10 - 1) = 9, 4, 3\n(9) - (3) = 6, left: ((10 - 1) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((10 - 1) - 3)) = 24\nreach 24! expression: (4 * ((10 - 1) - 3))"}, {"input": "1 4 10 3\n", "output": "(3) / (10) = 3/10, left: (3 / 10) = 3/10, 1, 4\nroll back, left: 1 4 10 3\n(3) - (10) = -7, left: (3 - 10) = -7, 1, 4\n(1) * (4) = 4, left: (1 * 4) = 4, (3 - 10) = -7\nroll back, left: (3 - 10) = -7, 1, 4\nroll back, left: 1 4 10 3\n(10) - (3) = 7, left: (10 - 3) = 7, 1, 4\n(7) - (1) = 6, left: ((10 - 3) - 1) = 6, 4\n(4) * (6) = 24, left: (4 * ((10 - 3) - 1)) = 24\nreach 24! expression: (4 * ((10 - 3) - 1))"}, {"input": "1 4 10 3\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 10, 3\nroll back, left: 1 4 10 3\n(4) * (3) = 12, left: (4 * 3) = 12, 1, 10\nroll back, left: 1 4 10 3\n(4) + (3) = 7, left: (4 + 3) = 7, 1, 10\nroll back, left: 1 4 10 3\n(1) + (3) = 4, left: (1 + 3) = 4, 4, 10\n(10) - (4) = 6, left: (10 - (1 + 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 - (1 + 3))) = 24\nreach 24! expression: (4 * (10 - (1 + 3)))"}, {"input": "1 4 10 3\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 1, 10\nroll back, left: 1 4 10 3\n(3) - (4) = -1, left: (3 - 4) = -1, 1, 10\n(-1) - (1) = -2, left: ((3 - 4) - 1) = -2, 10\nroll back, left: (3 - 4) = -1, 1, 10\nroll back, left: 1 4 10 3\n(10) - (4) = 6, left: (10 - 4) = 6, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (10 - 4) = 6\n(6) * (4) = 24, left: ((10 - 4) * (1 + 3)) = 24\nreach 24! expression: ((10 - 4) * (1 + 3))"}, {"input": "1 4 10 3\n", "output": "(1) + (4) = 5, left: (1 + 4) = 5, 10, 3\n(3) * (5) = 15, left: (3 * (1 + 4)) = 15, 10\nroll back, left: (1 + 4) = 5, 10, 3\nroll back, left: 1 4 10 3\n(10) * (3) = 30, left: (10 * 3) = 30, 1, 4\nroll back, left: 1 4 10 3\n(10) - (3) = 7, left: (10 - 3) = 7, 1, 4\n(7) - (1) = 6, left: ((10 - 3) - 1) = 6, 4\n(4) * (6) = 24, left: (4 * ((10 - 3) - 1)) = 24\nreach 24! expression: (4 * ((10 - 3) - 1))"}, {"input": "3 5 3 3\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (5 * 3) = 15\n(15) + (9) = 24, left: ((5 * 3) + (3 * 3)) = 24\nreach 24! expression: ((5 * 3) + (3 * 3))"}, {"input": "3 5 3 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 5, 3\n(5) * (3) = 15, left: (5 * 3) = 15, (3 * 3) = 9\n(9) + (15) = 24, left: ((3 * 3) + (5 * 3)) = 24\nreach 24! expression: ((3 * 3) + (5 * 3))"}, {"input": "3 5 3 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 3, 5\n(3) * (5) = 15, left: (3 * 5) = 15, (3 * 3) = 9\n(9) + (15) = 24, left: ((3 * 3) + (3 * 5)) = 24\nreach 24! expression: ((3 * 3) + (3 * 5))"}, {"input": "3 5 3 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 3, 3\n(3) / (8) = 3/8, left: (3 / (5 + 3)) = 3/8, 3\nroll back, left: (5 + 3) = 8, 3, 3\nroll back, left: 3 5 3 3\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 3, 3\nroll back, left: 3 5 3 3\n(5) * (3) = 15, left: (5 * 3) = 15, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (5 * 3) = 15\n(15) + (9) = 24, left: ((5 * 3) + (3 * 3)) = 24\nreach 24! expression: ((5 * 3) + (3 * 3))"}, {"input": "3 5 3 3\n", "output": "(3) / (5) = 3/5, left: (3 / 5) = 3/5, 3, 3\n(3/5) / (3) = 1/5, left: ((3 / 5) / 3) = 1/5, 3\nroll back, left: (3 / 5) = 3/5, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (3 / 5) = 3/5\nroll back, left: (3 / 5) = 3/5, 3, 3\nroll back, left: 3 5 3 3\n(5) * (3) = 15, left: (5 * 3) = 15, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (5 * 3) = 15\n(15) + (9) = 24, left: ((5 * 3) + (3 * 3)) = 24\nreach 24! expression: ((5 * 3) + (3 * 3))"}, {"input": "3 5 3 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 5, 3\nroll back, left: 3 5 3 3\n(3) - (3) = 0, left: (3 - 3) = 0, 5, 3\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, (3 - 3) = 0\nroll back, left: (3 - 3) = 0, 5, 3\nroll back, left: 3 5 3 3\n(3) * (3) = 9, left: (3 * 3) = 9, 5, 3\n(5) * (3) = 15, left: (5 * 3) = 15, (3 * 3) = 9\n(9) + (15) = 24, left: ((3 * 3) + (5 * 3)) = 24\nreach 24! expression: ((3 * 3) + (5 * 3))"}, {"input": "3 5 3 3\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 3, 5\nroll back, left: 3 5 3 3\n(3) / (3) = 1, left: (3 / 3) = 1, 3, 5\n(3) * (1) = 3, left: (3 * (3 / 3)) = 3, 5\nroll back, left: (3 / 3) = 1, 3, 5\nroll back, left: 3 5 3 3\n(3) * (3) = 9, left: (3 * 3) = 9, 3, 5\n(3) * (5) = 15, left: (3 * 5) = 15, (3 * 3) = 9\n(9) + (15) = 24, left: ((3 * 3) + (3 * 5)) = 24\nreach 24! expression: ((3 * 3) + (3 * 5))"}, {"input": "3 5 3 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 3, 3\n(3) / (3) = 1, left: (3 / 3) = 1, (5 + 3) = 8\nroll back, left: (5 + 3) = 8, 3, 3\nroll back, left: 3 5 3 3\n(3) - (5) = -2, left: (3 - 5) = -2, 3, 3\nroll back, left: 3 5 3 3\n(5) * (3) = 15, left: (5 * 3) = 15, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (5 * 3) = 15\n(15) + (9) = 24, left: ((5 * 3) + (3 * 3)) = 24\nreach 24! expression: ((5 * 3) + (3 * 3))"}, {"input": "6 7 10 4\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 6, 10\n(10) * (3) = 30, left: (10 * (7 - 4)) = 30, 6\n(30) - (6) = 24, left: ((10 * (7 - 4)) - 6) = 24\nreach 24! expression: ((10 * (7 - 4)) - 6)"}, {"input": "6 7 10 4\n", "output": "(6) - (10) = -4, left: (6 - 10) = -4, 7, 4\n(7) * (4) = 28, left: (7 * 4) = 28, (6 - 10) = -4\n(-4) + (28) = 24, left: ((6 - 10) + (7 * 4)) = 24\nreach 24! expression: ((6 - 10) + (7 * 4))"}, {"input": "6 7 10 4\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (6 - 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (6 - 4))) = 24\nreach 24! expression: (10 + (7 * (6 - 4)))"}, {"input": "6 7 10 4\n", "output": "(10) / (4) = 5/2, left: (10 / 4) = 5/2, 6, 7\nroll back, left: 6 7 10 4\n(10) + (4) = 14, left: (10 + 4) = 14, 6, 7\n(6) * (7) = 42, left: (6 * 7) = 42, (10 + 4) = 14\nroll back, left: (10 + 4) = 14, 6, 7\nroll back, left: 6 7 10 4\n(6) - (4) = 2, left: (6 - 4) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (6 - 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (6 - 4))) = 24\nreach 24! expression: (10 + (7 * (6 - 4)))"}, {"input": "6 7 10 4\n", "output": "(6) / (7) = 6/7, left: (6 / 7) = 6/7, 10, 4\nroll back, left: 6 7 10 4\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 6, 10\nroll back, left: 6 7 10 4\n(7) + (4) = 11, left: (7 + 4) = 11, 6, 10\nroll back, left: 6 7 10 4\n(7) - (4) = 3, left: (7 - 4) = 3, 6, 10\n(10) * (3) = 30, left: (10 * (7 - 4)) = 30, 6\n(30) - (6) = 24, left: ((10 * (7 - 4)) - 6) = 24\nreach 24! expression: ((10 * (7 - 4)) - 6)"}, {"input": "6 7 10 4\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 7, 10\n(10) * (2) = 20, left: (10 * (6 - 4)) = 20, 7\nroll back, left: (6 - 4) = 2, 7, 10\n(7) / (2) = 7/2, left: (7 / (6 - 4)) = 7/2, 10\nroll back, left: (6 - 4) = 2, 7, 10\n(2) / (7) = 2/7, left: ((6 - 4) / 7) = 2/7, 10\nroll back, left: (6 - 4) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (6 - 4)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (6 - 4))) = 24\nreach 24! expression: (10 + (7 * (6 - 4)))"}, {"input": "6 9 4 7\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 9, 7\n(9) + (7) = 16, left: (9 + 7) = 16, (6 / 4) = 3/2\n(3/2) * (16) = 24, left: ((6 / 4) * (9 + 7)) = 24\nreach 24! expression: ((6 / 4) * (9 + 7))"}, {"input": "6 9 4 7\n", "output": "(4) / (6) = 2/3, left: (4 / 6) = 2/3, 9, 7\n(9) + (7) = 16, left: (9 + 7) = 16, (4 / 6) = 2/3\n(16) / (2/3) = 24, left: ((9 + 7) / (4 / 6)) = 24\nreach 24! expression: ((9 + 7) / (4 / 6))"}, {"input": "6 9 4 7\n", "output": "(9) + (7) = 16, left: (9 + 7) = 16, 6, 4\n(6) * (16) = 96, left: (6 * (9 + 7)) = 96, 4\n(96) / (4) = 24, left: ((6 * (9 + 7)) / 4) = 24\nreach 24! expression: ((6 * (9 + 7)) / 4)"}, {"input": "6 9 4 7\n", "output": "(9) + (7) = 16, left: (9 + 7) = 16, 6, 4\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, (9 + 7) = 16\n(16) * (3/2) = 24, left: ((9 + 7) * (6 / 4)) = 24\nreach 24! expression: ((9 + 7) * (6 / 4))"}, {"input": "6 9 4 7\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 9, 7\n(9) * (2) = 18, left: (9 * (6 - 4)) = 18, 7\nroll back, left: (6 - 4) = 2, 9, 7\n(7) + (2) = 9, left: (7 + (6 - 4)) = 9, 9\nroll back, left: (6 - 4) = 2, 9, 7\nroll back, left: 6 9 4 7\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, 9, 7\n(9) + (7) = 16, left: (9 + 7) = 16, (4 / 6) = 2/3\n(16) / (2/3) = 24, left: ((9 + 7) / (4 / 6)) = 24\nreach 24! expression: ((9 + 7) / (4 / 6))"}, {"input": "6 9 4 7\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 6, 7\nroll back, left: 6 9 4 7\n(4) - (9) = -5, left: (4 - 9) = -5, 6, 7\nroll back, left: 6 9 4 7\n(9) - (6) = 3, left: (9 - 6) = 3, 4, 7\nroll back, left: 6 9 4 7\n(9) + (7) = 16, left: (9 + 7) = 16, 6, 4\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, (9 + 7) = 16\n(16) * (3/2) = 24, left: ((9 + 7) * (6 / 4)) = 24\nreach 24! expression: ((9 + 7) * (6 / 4))"}, {"input": "6 9 4 7\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 9, 4\nroll back, left: 6 9 4 7\n(4) * (7) = 28, left: (4 * 7) = 28, 6, 9\nroll back, left: 6 9 4 7\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, 6, 9\nroll back, left: 6 9 4 7\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, 9, 7\n(9) + (7) = 16, left: (9 + 7) = 16, (6 / 4) = 3/2\n(3/2) * (16) = 24, left: ((6 / 4) * (9 + 7)) = 24\nreach 24! expression: ((6 / 4) * (9 + 7))"}, {"input": "6 9 4 7\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 4, 7\nroll back, left: 6 9 4 7\n(9) - (6) = 3, left: (9 - 6) = 3, 4, 7\nroll back, left: 6 9 4 7\n(6) - (9) = -3, left: (6 - 9) = -3, 4, 7\nroll back, left: 6 9 4 7\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, 9, 7\n(9) + (7) = 16, left: (9 + 7) = 16, (6 / 4) = 3/2\n(3/2) * (16) = 24, left: ((6 / 4) * (9 + 7)) = 24\nreach 24! expression: ((6 / 4) * (9 + 7))"}, {"input": "6 9 4 7\n", "output": "(9) * (7) = 63, left: (9 * 7) = 63, 6, 4\nroll back, left: 6 9 4 7\n(9) / (7) = 9/7, left: (9 / 7) = 9/7, 6, 4\nroll back, left: 6 9 4 7\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, 6, 4\nroll back, left: 6 9 4 7\n(9) + (7) = 16, left: (9 + 7) = 16, 6, 4\n(6) * (16) = 96, left: (6 * (9 + 7)) = 96, 4\n(96) / (4) = 24, left: ((6 * (9 + 7)) / 4) = 24\nreach 24! expression: ((6 * (9 + 7)) / 4)"}, {"input": "9 2 11 5\n", "output": "(5) - (11) = -6, left: (5 - 11) = -6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (5 - 11) = -6\n(18) - (-6) = 24, left: ((9 * 2) - (5 - 11)) = 24\nreach 24! expression: ((9 * 2) - (5 - 11))"}, {"input": "9 2 11 5\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 11, 5\n(18) - (5) = 13, left: ((9 * 2) - 5) = 13, 11\n(11) + (13) = 24, left: (11 + ((9 * 2) - 5)) = 24\nreach 24! expression: (11 + ((9 * 2) - 5))"}, {"input": "9 2 11 5\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (9 - 2)) = 35, 11\n(35) - (11) = 24, left: ((5 * (9 - 2)) - 11) = 24\nreach 24! expression: ((5 * (9 - 2)) - 11)"}, {"input": "9 2 11 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (5 - 2)) = 33, 9\n(33) - (9) = 24, left: ((11 * (5 - 2)) - 9) = 24\nreach 24! expression: ((11 * (5 - 2)) - 9)"}, {"input": "9 2 11 5\n", "output": "(9) + (11) = 20, left: (9 + 11) = 20, 2, 5\n(5) + (20) = 25, left: (5 + (9 + 11)) = 25, 2\nroll back, left: (9 + 11) = 20, 2, 5\nroll back, left: 9 2 11 5\n(11) / (9) = 11/9, left: (11 / 9) = 11/9, 2, 5\nroll back, left: 9 2 11 5\n(5) - (2) = 3, left: (5 - 2) = 3, 9, 11\n(11) * (3) = 33, left: (11 * (5 - 2)) = 33, 9\n(33) - (9) = 24, left: ((11 * (5 - 2)) - 9) = 24\nreach 24! expression: ((11 * (5 - 2)) - 9)"}, {"input": "9 2 11 5\n", "output": "(9) / (5) = 9/5, left: (9 / 5) = 9/5, 2, 11\nroll back, left: 9 2 11 5\n(5) - (9) = -4, left: (5 - 9) = -4, 2, 11\n(2) * (11) = 22, left: (2 * 11) = 22, (5 - 9) = -4\nroll back, left: (5 - 9) = -4, 2, 11\nroll back, left: 9 2 11 5\n(9) - (2) = 7, left: (9 - 2) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (9 - 2)) = 35, 11\n(35) - (11) = 24, left: ((5 * (9 - 2)) - 11) = 24\nreach 24! expression: ((5 * (9 - 2)) - 11)"}, {"input": "9 2 11 5\n", "output": "(11) / (2) = 11/2, left: (11 / 2) = 11/2, 9, 5\nroll back, left: 9 2 11 5\n(9) + (11) = 20, left: (9 + 11) = 20, 2, 5\n(2) + (20) = 22, left: (2 + (9 + 11)) = 22, 5\nroll back, left: (9 + 11) = 20, 2, 5\nroll back, left: 9 2 11 5\n(5) - (11) = -6, left: (5 - 11) = -6, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (5 - 11) = -6\n(18) - (-6) = 24, left: ((9 * 2) - (5 - 11)) = 24\nreach 24! expression: ((9 * 2) - (5 - 11))"}, {"input": "9 2 11 5\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 11, 5\n(5) - (7) = -2, left: (5 - (9 - 2)) = -2, 11\n(-2) / (11) = -2/11, left: ((5 - (9 - 2)) / 11) = -2/11\nroll back, left: (5 - (9 - 2)) = -2, 11\nroll back, left: (9 - 2) = 7, 11, 5\n(5) * (7) = 35, left: (5 * (9 - 2)) = 35, 11\n(11) * (35) = 385, left: (11 * (5 * (9 - 2))) = 385\nroll back, left: (5 * (9 - 2)) = 35, 11\n(35) - (11) = 24, left: ((5 * (9 - 2)) - 11) = 24\nreach 24! expression: ((5 * (9 - 2)) - 11)"}, {"input": "9 2 11 5\n", "output": "(2) + (11) = 13, left: (2 + 11) = 13, 9, 5\n(9) * (13) = 117, left: (9 * (2 + 11)) = 117, 5\nroll back, left: (2 + 11) = 13, 9, 5\nroll back, left: 9 2 11 5\n(9) + (5) = 14, left: (9 + 5) = 14, 2, 11\nroll back, left: 9 2 11 5\n(9) * (2) = 18, left: (9 * 2) = 18, 11, 5\n(18) - (5) = 13, left: ((9 * 2) - 5) = 13, 11\n(11) + (13) = 24, left: (11 + ((9 * 2) - 5)) = 24\nreach 24! expression: (11 + ((9 * 2) - 5))"}, {"input": "9 11 11 2\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (11 - 9) = 2\n(2) + (22) = 24, left: ((11 - 9) + (11 * 2)) = 24\nreach 24! expression: ((11 - 9) + (11 * 2))"}, {"input": "9 11 11 2\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 9, 11\n(9) - (22) = -13, left: (9 - (11 * 2)) = -13, 11\n(11) - (-13) = 24, left: (11 - (9 - (11 * 2))) = 24\nreach 24! expression: (11 - (9 - (11 * 2)))"}, {"input": "9 11 11 2\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 11, 2\n(11) * (2) = 22, left: (11 * (11 - 9)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 * (11 - 9))) = 24\nreach 24! expression: (2 + (11 * (11 - 9)))"}, {"input": "9 11 11 2\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 9, 11\n(11) - (9) = 2, left: (11 - 9) = 2, (11 * 2) = 22\n(22) + (2) = 24, left: ((11 * 2) + (11 - 9)) = 24\nreach 24! expression: ((11 * 2) + (11 - 9))"}, {"input": "9 11 11 2\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 11, 2\n(11) * (-2) = -22, left: (11 * (9 - 11)) = -22, 2\n(2) - (-22) = 24, left: (2 - (11 * (9 - 11))) = 24\nreach 24! expression: (2 - (11 * (9 - 11)))"}, {"input": "9 11 11 2\n", "output": "(9) * (11) = 99, left: (9 * 11) = 99, 11, 2\nroll back, left: 9 11 11 2\n(9) + (11) = 20, left: (9 + 11) = 20, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (9 + 11) = 20\nroll back, left: (9 + 11) = 20, 11, 2\nroll back, left: 9 11 11 2\n(11) - (9) = 2, left: (11 - 9) = 2, 11, 2\n(11) * (2) = 22, left: (11 * (11 - 9)) = 22, 2\n(2) + (22) = 24, left: (2 + (11 * (11 - 9))) = 24\nreach 24! expression: (2 + (11 * (11 - 9)))"}, {"input": "9 11 11 2\n", "output": "(2) - (11) = -9, left: (2 - 11) = -9, 9, 11\n(9) / (-9) = -1, left: (9 / (2 - 11)) = -1, 11\nroll back, left: (2 - 11) = -9, 9, 11\n(11) - (9) = 2, left: (11 - 9) = 2, (2 - 11) = -9\nroll back, left: (2 - 11) = -9, 9, 11\nroll back, left: 9 11 11 2\n(11) * (2) = 22, left: (11 * 2) = 22, 9, 11\n(11) - (9) = 2, left: (11 - 9) = 2, (11 * 2) = 22\n(22) + (2) = 24, left: ((11 * 2) + (11 - 9)) = 24\nreach 24! expression: ((11 * 2) + (11 - 9))"}, {"input": "9 11 11 2\n", "output": "(9) + (11) = 20, left: (9 + 11) = 20, 11, 2\n(20) / (2) = 10, left: ((9 + 11) / 2) = 10, 11\nroll back, left: (9 + 11) = 20, 11, 2\nroll back, left: 9 11 11 2\n(9) - (11) = -2, left: (9 - 11) = -2, 11, 2\n(11) - (-2) = 13, left: (11 - (9 - 11)) = 13, 2\nroll back, left: (9 - 11) = -2, 11, 2\n(11) * (-2) = -22, left: (11 * (9 - 11)) = -22, 2\n(2) - (-22) = 24, left: (2 - (11 * (9 - 11))) = 24\nreach 24! expression: (2 - (11 * (9 - 11)))"}, {"input": "9 11 11 2\n", "output": "(9) / (2) = 9/2, left: (9 / 2) = 9/2, 11, 11\nroll back, left: 9 11 11 2\n(9) * (11) = 99, left: (9 * 11) = 99, 11, 2\nroll back, left: 9 11 11 2\n(9) + (11) = 20, left: (9 + 11) = 20, 11, 2\nroll back, left: 9 11 11 2\n(11) - (9) = 2, left: (11 - 9) = 2, 11, 2\n(11) * (2) = 22, left: (11 * 2) = 22, (11 - 9) = 2\n(2) + (22) = 24, left: ((11 - 9) + (11 * 2)) = 24\nreach 24! expression: ((11 - 9) + (11 * 2))"}, {"input": "9 11 11 2\n", "output": "(11) + (2) = 13, left: (11 + 2) = 13, 9, 11\n(9) - (13) = -4, left: (9 - (11 + 2)) = -4, 11\n(11) - (-4) = 15, left: (11 - (9 - (11 + 2))) = 15\nroll back, left: (9 - (11 + 2)) = -4, 11\nroll back, left: (11 + 2) = 13, 9, 11\nroll back, left: 9 11 11 2\n(11) * (2) = 22, left: (11 * 2) = 22, 9, 11\n(9) - (22) = -13, left: (9 - (11 * 2)) = -13, 11\n(11) - (-13) = 24, left: (11 - (9 - (11 * 2))) = 24\nreach 24! expression: (11 - (9 - (11 * 2)))"}, {"input": "2 1 6 6\n", "output": "(6) - (2) = 4, left: (6 - 2) = 4, 1, 6\n(1) / (4) = 1/4, left: (1 / (6 - 2)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (6 - 2))) = 24\nreach 24! expression: (6 / (1 / (6 - 2)))"}, {"input": "2 1 6 6\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 1, 6\n(1) + (3) = 4, left: (1 + (6 / 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (6 / 2))) = 24\nreach 24! expression: (6 * (1 + (6 / 2)))"}, {"input": "2 1 6 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 2, 1\n(2) * (12) = 24, left: (2 * (6 + 6)) = 24, 1\n(1) * (24) = 24, left: (1 * (2 * (6 + 6))) = 24\nreach 24! expression: (1 * (2 * (6 + 6)))"}, {"input": "2 1 6 6\n", "output": "(1) * (6) = 6, left: (1 * 6) = 6, 2, 6\n(6) - (2) = 4, left: (6 - 2) = 4, (1 * 6) = 6\n(6) * (4) = 24, left: ((1 * 6) * (6 - 2)) = 24\nreach 24! expression: ((1 * 6) * (6 - 2))"}, {"input": "2 1 6 6\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 2, 6\n(6) - (2) = 4, left: (6 - 2) = 4, (1 / 6) = 1/6\n(4) / (1/6) = 24, left: ((6 - 2) / (1 / 6)) = 24\nreach 24! expression: ((6 - 2) / (1 / 6))"}, {"input": "2 1 6 6\n", "output": "(6) / (6) = 1, left: (6 / 6) = 1, 2, 1\n(2) - (1) = 1, left: (2 - (6 / 6)) = 1, 1\nroll back, left: (6 / 6) = 1, 2, 1\n(1) - (1) = 0, left: ((6 / 6) - 1) = 0, 2\nroll back, left: (6 / 6) = 1, 2, 1\nroll back, left: 2 1 6 6\n(6) + (6) = 12, left: (6 + 6) = 12, 2, 1\n(2) * (12) = 24, left: (2 * (6 + 6)) = 24, 1\n(1) * (24) = 24, left: (1 * (2 * (6 + 6))) = 24\nreach 24! expression: (1 * (2 * (6 + 6)))"}, {"input": "2 1 6 6\n", "output": "(2) * (6) = 12, left: (2 * 6) = 12, 1, 6\n(6) + (12) = 18, left: (6 + (2 * 6)) = 18, 1\nroll back, left: (2 * 6) = 12, 1, 6\nroll back, left: 2 1 6 6\n(2) / (6) = 1/3, left: (2 / 6) = 1/3, 1, 6\nroll back, left: 2 1 6 6\n(6) - (2) = 4, left: (6 - 2) = 4, 1, 6\n(1) / (4) = 1/4, left: (1 / (6 - 2)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (6 - 2))) = 24\nreach 24! expression: (6 / (1 / (6 - 2)))"}, {"input": "2 1 6 6\n", "output": "(2) * (6) = 12, left: (2 * 6) = 12, 1, 6\n(6) + (12) = 18, left: (6 + (2 * 6)) = 18, 1\nroll back, left: (2 * 6) = 12, 1, 6\n(1) * (12) = 12, left: (1 * (2 * 6)) = 12, 6\nroll back, left: (2 * 6) = 12, 1, 6\nroll back, left: 2 1 6 6\n(6) / (2) = 3, left: (6 / 2) = 3, 1, 6\n(1) + (3) = 4, left: (1 + (6 / 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (6 / 2))) = 24\nreach 24! expression: (6 * (1 + (6 / 2)))"}, {"input": "2 1 6 6\n", "output": "(1) * (6) = 6, left: (1 * 6) = 6, 2, 6\n(2) + (6) = 8, left: (2 + 6) = 8, (1 * 6) = 6\n(6) + (8) = 14, left: ((1 * 6) + (2 + 6)) = 14\nroll back, left: (2 + 6) = 8, (1 * 6) = 6\nroll back, left: (1 * 6) = 6, 2, 6\n(2) * (6) = 12, left: (2 * 6) = 12, (1 * 6) = 6\nroll back, left: (1 * 6) = 6, 2, 6\n(6) - (2) = 4, left: (6 - 2) = 4, (1 * 6) = 6\n(6) * (4) = 24, left: ((1 * 6) * (6 - 2)) = 24\nreach 24! expression: ((1 * 6) * (6 - 2))"}, {"input": "12 11 6 9\n", "output": "(11) - (9) = 2, left: (11 - 9) = 2, 12, 6\n(6) * (2) = 12, left: (6 * (11 - 9)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (11 - 9))) = 24\nreach 24! expression: (12 + (6 * (11 - 9)))"}, {"input": "12 11 6 9\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (9 - 11)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (9 - 11))) = 24\nreach 24! expression: (12 - (6 * (9 - 11)))"}, {"input": "12 11 6 9\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 11, 9\n(11) + (1/2) = 23/2, left: (11 + (6 / 12)) = 23/2, 9\nroll back, left: (6 / 12) = 1/2, 11, 9\nroll back, left: 12 11 6 9\n(12) + (11) = 23, left: (12 + 11) = 23, 6, 9\nroll back, left: 12 11 6 9\n(9) - (11) = -2, left: (9 - 11) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (9 - 11)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (9 - 11))) = 24\nreach 24! expression: (12 - (6 * (9 - 11)))"}, {"input": "12 11 6 9\n", "output": "(11) - (12) = -1, left: (11 - 12) = -1, 6, 9\nroll back, left: 12 11 6 9\n(9) / (12) = 3/4, left: (9 / 12) = 3/4, 11, 6\nroll back, left: 12 11 6 9\n(12) + (9) = 21, left: (12 + 9) = 21, 11, 6\nroll back, left: 12 11 6 9\n(9) - (11) = -2, left: (9 - 11) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (9 - 11)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (9 - 11))) = 24\nreach 24! expression: (12 - (6 * (9 - 11)))"}, {"input": "12 11 6 9\n", "output": "(6) / (11) = 6/11, left: (6 / 11) = 6/11, 12, 9\nroll back, left: 12 11 6 9\n(6) * (9) = 54, left: (6 * 9) = 54, 12, 11\nroll back, left: 12 11 6 9\n(12) / (11) = 12/11, left: (12 / 11) = 12/11, 6, 9\nroll back, left: 12 11 6 9\n(11) - (9) = 2, left: (11 - 9) = 2, 12, 6\n(6) * (2) = 12, left: (6 * (11 - 9)) = 12, 12\n(12) + (12) = 24, left: (12 + (6 * (11 - 9))) = 24\nreach 24! expression: (12 + (6 * (11 - 9)))"}, {"input": "12 11 6 9\n", "output": "(12) + (9) = 21, left: (12 + 9) = 21, 11, 6\nroll back, left: 12 11 6 9\n(6) * (9) = 54, left: (6 * 9) = 54, 12, 11\nroll back, left: 12 11 6 9\n(6) - (9) = -3, left: (6 - 9) = -3, 12, 11\nroll back, left: 12 11 6 9\n(9) - (11) = -2, left: (9 - 11) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (9 - 11)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (9 - 11))) = 24\nreach 24! expression: (12 - (6 * (9 - 11)))"}, {"input": "12 11 6 9\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 11, 9\nroll back, left: 12 11 6 9\n(11) * (6) = 66, left: (11 * 6) = 66, 12, 9\n(12) + (9) = 21, left: (12 + 9) = 21, (11 * 6) = 66\nroll back, left: (11 * 6) = 66, 12, 9\nroll back, left: 12 11 6 9\n(9) - (11) = -2, left: (9 - 11) = -2, 12, 6\n(6) * (-2) = -12, left: (6 * (9 - 11)) = -12, 12\n(12) - (-12) = 24, left: (12 - (6 * (9 - 11))) = 24\nreach 24! expression: (12 - (6 * (9 - 11)))"}, {"input": "1 7 10 3\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 7, 10\n(7) * (-2) = -14, left: (7 * (1 - 3)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (1 - 3))) = 24\nreach 24! expression: (10 - (7 * (1 - 3)))"}, {"input": "1 7 10 3\n", "output": "(10) * (3) = 30, left: (10 * 3) = 30, 1, 7\n(1) - (7) = -6, left: (1 - 7) = -6, (10 * 3) = 30\n(30) + (-6) = 24, left: ((10 * 3) + (1 - 7)) = 24\nreach 24! expression: ((10 * 3) + (1 - 7))"}, {"input": "1 7 10 3\n", "output": "(10) * (3) = 30, left: (10 * 3) = 30, 1, 7\n(1) + (30) = 31, left: (1 + (10 * 3)) = 31, 7\n(31) - (7) = 24, left: ((1 + (10 * 3)) - 7) = 24\nreach 24! expression: ((1 + (10 * 3)) - 7)"}, {"input": "1 7 10 3\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (3 - 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (3 - 1))) = 24\nreach 24! expression: (10 + (7 * (3 - 1)))"}, {"input": "1 7 10 3\n", "output": "(7) * (10) = 70, left: (7 * 10) = 70, 1, 3\nroll back, left: 1 7 10 3\n(7) + (10) = 17, left: (7 + 10) = 17, 1, 3\nroll back, left: 1 7 10 3\n(10) - (7) = 3, left: (10 - 7) = 3, 1, 3\nroll back, left: 1 7 10 3\n(10) * (3) = 30, left: (10 * 3) = 30, 1, 7\n(1) + (30) = 31, left: (1 + (10 * 3)) = 31, 7\n(31) - (7) = 24, left: ((1 + (10 * 3)) - 7) = 24\nreach 24! expression: ((1 + (10 * 3)) - 7)"}, {"input": "1 7 10 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 1, 7\nroll back, left: 1 7 10 3\n(10) - (3) = 7, left: (10 - 3) = 7, 1, 7\n(1) * (7) = 7, left: (1 * (10 - 3)) = 7, 7\nroll back, left: (10 - 3) = 7, 1, 7\nroll back, left: 1 7 10 3\n(10) * (3) = 30, left: (10 * 3) = 30, 1, 7\n(1) - (7) = -6, left: (1 - 7) = -6, (10 * 3) = 30\n(30) + (-6) = 24, left: ((10 * 3) + (1 - 7)) = 24\nreach 24! expression: ((10 * 3) + (1 - 7))"}, {"input": "1 7 10 3\n", "output": "(7) * (3) = 21, left: (7 * 3) = 21, 1, 10\nroll back, left: 1 7 10 3\n(7) + (3) = 10, left: (7 + 3) = 10, 1, 10\nroll back, left: 1 7 10 3\n(3) / (1) = 3, left: (3 / 1) = 3, 7, 10\nroll back, left: 1 7 10 3\n(3) - (1) = 2, left: (3 - 1) = 2, 7, 10\n(7) * (2) = 14, left: (7 * (3 - 1)) = 14, 10\n(10) + (14) = 24, left: (10 + (7 * (3 - 1))) = 24\nreach 24! expression: (10 + (7 * (3 - 1)))"}, {"input": "1 7 10 3\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 1, 3\nroll back, left: 1 7 10 3\n(3) - (10) = -7, left: (3 - 10) = -7, 1, 7\n(1) - (7) = -6, left: (1 - 7) = -6, (3 - 10) = -7\nroll back, left: (3 - 10) = -7, 1, 7\nroll back, left: 1 7 10 3\n(10) * (3) = 30, left: (10 * 3) = 30, 1, 7\n(1) + (30) = 31, left: (1 + (10 * 3)) = 31, 7\n(31) - (7) = 24, left: ((1 + (10 * 3)) - 7) = 24\nreach 24! expression: ((1 + (10 * 3)) - 7)"}, {"input": "1 7 10 3\n", "output": "(7) - (3) = 4, left: (7 - 3) = 4, 1, 10\nroll back, left: 1 7 10 3\n(7) / (3) = 7/3, left: (7 / 3) = 7/3, 1, 10\nroll back, left: 1 7 10 3\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, 1, 10\nroll back, left: 1 7 10 3\n(1) - (3) = -2, left: (1 - 3) = -2, 7, 10\n(7) * (-2) = -14, left: (7 * (1 - 3)) = -14, 10\n(10) - (-14) = 24, left: (10 - (7 * (1 - 3))) = 24\nreach 24! expression: (10 - (7 * (1 - 3)))"}, {"input": "13 6 3 6\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 13, 6\n(13) - (9) = 4, left: (13 - (6 + 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (6 + 3))) = 24\nreach 24! expression: (6 * (13 - (6 + 3)))"}, {"input": "13 6 3 6\n", "output": "(13) - (3) = 10, left: (13 - 3) = 10, 6, 6\n(10) - (6) = 4, left: ((13 - 3) - 6) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 - 3) - 6)) = 24\nreach 24! expression: (6 * ((13 - 3) - 6))"}, {"input": "13 6 3 6\n", "output": "(3) + (6) = 9, left: (3 + 6) = 9, 13, 6\n(13) - (9) = 4, left: (13 - (3 + 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (3 + 6))) = 24\nreach 24! expression: (6 * (13 - (3 + 6)))"}, {"input": "13 6 3 6\n", "output": "(13) / (3) = 13/3, left: (13 / 3) = 13/3, 6, 6\nroll back, left: 13 6 3 6\n(3) - (13) = -10, left: (3 - 13) = -10, 6, 6\n(-10) - (6) = -16, left: ((3 - 13) - 6) = -16, 6\nroll back, left: (3 - 13) = -10, 6, 6\nroll back, left: 13 6 3 6\n(13) - (3) = 10, left: (13 - 3) = 10, 6, 6\n(10) - (6) = 4, left: ((13 - 3) - 6) = 4, 6\n(6) * (4) = 24, left: (6 * ((13 - 3) - 6)) = 24\nreach 24! expression: (6 * ((13 - 3) - 6))"}, {"input": "13 6 3 6\n", "output": "(3) + (6) = 9, left: (3 + 6) = 9, 13, 6\n(9) - (6) = 3, left: ((3 + 6) - 6) = 3, 13\n(3) - (13) = -10, left: (((3 + 6) - 6) - 13) = -10\nroll back, left: ((3 + 6) - 6) = 3, 13\nroll back, left: (3 + 6) = 9, 13, 6\n(9) / (13) = 9/13, left: ((3 + 6) / 13) = 9/13, 6\nroll back, left: (3 + 6) = 9, 13, 6\n(13) - (9) = 4, left: (13 - (3 + 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (13 - (3 + 6))) = 24\nreach 24! expression: (6 * (13 - (3 + 6)))"}, {"input": "12 12 6 4\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 12, 4\n(12) * (4) = 48, left: (12 * 4) = 48, (12 / 6) = 2\n(48) / (2) = 24, left: ((12 * 4) / (12 / 6)) = 24\nreach 24! expression: ((12 * 4) / (12 / 6))"}, {"input": "12 12 6 4\n", "output": "(12) * (4) = 48, left: (12 * 4) = 48, 12, 6\n(6) * (48) = 288, left: (6 * (12 * 4)) = 288, 12\n(288) / (12) = 24, left: ((6 * (12 * 4)) / 12) = 24\nreach 24! expression: ((6 * (12 * 4)) / 12)"}, {"input": "12 12 6 4\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 12, 4\n(2) / (4) = 1/2, left: ((12 / 6) / 4) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((12 / 6) / 4)) = 24\nreach 24! expression: (12 / ((12 / 6) / 4))"}, {"input": "12 12 6 4\n", "output": "(6) + (4) = 10, left: (6 + 4) = 10, 12, 12\n(12) - (10) = 2, left: (12 - (6 + 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 - (6 + 4))) = 24\nreach 24! expression: (12 * (12 - (6 + 4)))"}, {"input": "12 12 6 4\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 12, 4\n(6) - (4) = 2, left: ((12 - 6) - 4) = 2, 12\n(12) * (2) = 24, left: (12 * ((12 - 6) - 4)) = 24\nreach 24! expression: (12 * ((12 - 6) - 4))"}, {"input": "12 12 6 4\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 12, 4\n(2) / (4) = 1/2, left: ((12 / 6) / 4) = 1/2, 12\n(12) - (1/2) = 23/2, left: (12 - ((12 / 6) / 4)) = 23/2\nroll back, left: ((12 / 6) / 4) = 1/2, 12\n(12) * (1/2) = 6, left: (12 * ((12 / 6) / 4)) = 6\nroll back, left: ((12 / 6) / 4) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((12 / 6) / 4)) = 24\nreach 24! expression: (12 / ((12 / 6) / 4))"}, {"input": "12 12 6 4\n", "output": "(4) - (6) = -2, left: (4 - 6) = -2, 12, 12\n(12) / (-2) = -6, left: (12 / (4 - 6)) = -6, 12\nroll back, left: (4 - 6) = -2, 12, 12\nroll back, left: 12 12 6 4\n(6) - (4) = 2, left: (6 - 4) = 2, 12, 12\nroll back, left: 12 12 6 4\n(6) + (4) = 10, left: (6 + 4) = 10, 12, 12\n(12) - (10) = 2, left: (12 - (6 + 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 - (6 + 4))) = 24\nreach 24! expression: (12 * (12 - (6 + 4)))"}, {"input": "12 12 6 4\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 12, 4\n(2) / (4) = 1/2, left: ((12 / 6) / 4) = 1/2, 12\n(12) - (1/2) = 23/2, left: (12 - ((12 / 6) / 4)) = 23/2\nroll back, left: ((12 / 6) / 4) = 1/2, 12\n(12) * (1/2) = 6, left: (12 * ((12 / 6) / 4)) = 6\nroll back, left: ((12 / 6) / 4) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((12 / 6) / 4)) = 24\nreach 24! expression: (12 / ((12 / 6) / 4))"}, {"input": "12 12 6 4\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 12, 4\n(2) / (4) = 1/2, left: ((12 / 6) / 4) = 1/2, 12\n(12) - (1/2) = 23/2, left: (12 - ((12 / 6) / 4)) = 23/2\nroll back, left: ((12 / 6) / 4) = 1/2, 12\n(12) * (1/2) = 6, left: (12 * ((12 / 6) / 4)) = 6\nroll back, left: ((12 / 6) / 4) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((12 / 6) / 4)) = 24\nreach 24! expression: (12 / ((12 / 6) / 4))"}, {"input": "12 12 6 4\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 12, 4\n(2) / (4) = 1/2, left: ((12 / 6) / 4) = 1/2, 12\n(12) - (1/2) = 23/2, left: (12 - ((12 / 6) / 4)) = 23/2\nroll back, left: ((12 / 6) / 4) = 1/2, 12\n(12) * (1/2) = 6, left: (12 * ((12 / 6) / 4)) = 6\nroll back, left: ((12 / 6) / 4) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((12 / 6) / 4)) = 24\nreach 24! expression: (12 / ((12 / 6) / 4))"}, {"input": "6 5 4 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 6, 5\n(6) - (5) = 1, left: (6 - 5) = 1, (4 * 6) = 24\n(24) / (1) = 24, left: ((4 * 6) / (6 - 5)) = 24\nreach 24! expression: ((4 * 6) / (6 - 5))"}, {"input": "6 5 4 6\n", "output": "(4) * (6) = 24, left: (4 * 6) = 24, 6, 5\n(6) - (5) = 1, left: (6 - 5) = 1, (4 * 6) = 24\n(24) * (1) = 24, left: ((4 * 6) * (6 - 5)) = 24\nreach 24! expression: ((4 * 6) * (6 - 5))"}, {"input": "6 5 4 6\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 4, 6\n(6) / (1) = 6, left: (6 / (6 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (6 - 5))) = 24\nreach 24! expression: (4 * (6 / (6 - 5)))"}, {"input": "6 5 4 6\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 6, 4\n(4) * (1) = 4, left: (4 * (6 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 * (6 - 5))) = 24\nreach 24! expression: (6 * (4 * (6 - 5)))"}, {"input": "6 5 4 6\n", "output": "(6) - (5) = 1, left: (6 - 5) = 1, 4, 6\n(4) * (1) = 4, left: (4 * (6 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 * (6 - 5))) = 24\nreach 24! expression: (6 * (4 * (6 - 5)))"}, {"input": "6 5 4 6\n", "output": "(4) + (6) = 10, left: (4 + 6) = 10, 6, 5\n(10) - (5) = 5, left: ((4 + 6) - 5) = 5, 6\nroll back, left: (4 + 6) = 10, 6, 5\nroll back, left: 6 5 4 6\n(4) * (6) = 24, left: (4 * 6) = 24, 6, 5\n(5) * (24) = 120, left: (5 * (4 * 6)) = 120, 6\nroll back, left: (4 * 6) = 24, 6, 5\n(6) - (5) = 1, left: (6 - 5) = 1, (4 * 6) = 24\n(24) * (1) = 24, left: ((4 * 6) * (6 - 5)) = 24\nreach 24! expression: ((4 * 6) * (6 - 5))"}, {"input": "6 5 4 6\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 4, 6\nroll back, left: 6 5 4 6\n(5) / (6) = 5/6, left: (5 / 6) = 5/6, 4, 6\n(5/6) - (4) = -19/6, left: ((5 / 6) - 4) = -19/6, 6\nroll back, left: (5 / 6) = 5/6, 4, 6\nroll back, left: 6 5 4 6\n(6) - (5) = 1, left: (6 - 5) = 1, 4, 6\n(4) * (1) = 4, left: (4 * (6 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 * (6 - 5))) = 24\nreach 24! expression: (6 * (4 * (6 - 5)))"}, {"input": "6 5 4 6\n", "output": "(6) * (5) = 30, left: (6 * 5) = 30, 4, 6\n(30) / (4) = 15/2, left: ((6 * 5) / 4) = 15/2, 6\nroll back, left: (6 * 5) = 30, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (6 * 5) = 30\nroll back, left: (6 * 5) = 30, 4, 6\nroll back, left: 6 5 4 6\n(6) - (5) = 1, left: (6 - 5) = 1, 4, 6\n(6) / (1) = 6, left: (6 / (6 - 5)) = 6, 4\n(4) * (6) = 24, left: (4 * (6 / (6 - 5))) = 24\nreach 24! expression: (4 * (6 / (6 - 5)))"}, {"input": "6 5 4 6\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 6, 5\nroll back, left: 6 5 4 6\n(6) - (4) = 2, left: (6 - 4) = 2, 6, 5\nroll back, left: 6 5 4 6\n(4) - (6) = -2, left: (4 - 6) = -2, 6, 5\nroll back, left: 6 5 4 6\n(4) * (6) = 24, left: (4 * 6) = 24, 6, 5\n(6) - (5) = 1, left: (6 - 5) = 1, (4 * 6) = 24\n(24) / (1) = 24, left: ((4 * 6) / (6 - 5)) = 24\nreach 24! expression: ((4 * 6) / (6 - 5))"}, {"input": "6 5 4 6\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 6, 4\n(4) - (30) = -26, left: (4 - (5 * 6)) = -26, 6\nroll back, left: (5 * 6) = 30, 6, 4\n(30) / (6) = 5, left: ((5 * 6) / 6) = 5, 4\nroll back, left: (5 * 6) = 30, 6, 4\nroll back, left: 6 5 4 6\n(6) - (5) = 1, left: (6 - 5) = 1, 6, 4\n(4) * (1) = 4, left: (4 * (6 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 * (6 - 5))) = 24\nreach 24! expression: (6 * (4 * (6 - 5)))"}, {"input": "10 9 3 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 9, 3\n(9) - (1) = 8, left: (9 - (10 / 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (10 / 10))) = 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "10 9 3 10\n", "output": "(10) / (3) = 10/3, left: (10 / 3) = 10/3, 9, 10\n(10/3) - (9) = -17/3, left: ((10 / 3) - 9) = -17/3, 10\nroll back, left: (10 / 3) = 10/3, 9, 10\nroll back, left: 10 9 3 10\n(10) - (10) = 0, left: (10 - 10) = 0, 9, 3\nroll back, left: 10 9 3 10\n(10) / (10) = 1, left: (10 / 10) = 1, 9, 3\n(9) - (1) = 8, left: (9 - (10 / 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (10 / 10))) = 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "10 9 3 10\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 10, 9\nroll back, left: 10 9 3 10\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, 10, 10\n(10) * (1/3) = 10/3, left: (10 * (3 / 9)) = 10/3, 10\nroll back, left: (3 / 9) = 1/3, 10, 10\nroll back, left: 10 9 3 10\n(10) / (10) = 1, left: (10 / 10) = 1, 9, 3\n(9) - (1) = 8, left: (9 - (10 / 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (10 / 10))) = 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "10 9 3 10\n", "output": "(10) - (10) = 0, left: (10 - 10) = 0, 9, 3\n(0) / (9) = 0, left: ((10 - 10) / 9) = 0, 3\nroll back, left: (10 - 10) = 0, 9, 3\n(0) / (3) = 0, left: ((10 - 10) / 3) = 0, 9\nroll back, left: (10 - 10) = 0, 9, 3\nroll back, left: 10 9 3 10\n(10) / (10) = 1, left: (10 / 10) = 1, 9, 3\n(9) - (1) = 8, left: (9 - (10 / 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (9 - (10 / 10))) = 24\nreach 24! expression: (3 * (9 - (10 / 10)))"}, {"input": "8 7 3 12\n", "output": "(3) - (12) = -9, left: (3 - 12) = -9, 8, 7\n(-9) - (8) = -17, left: ((3 - 12) - 8) = -17, 7\n(7) - (-17) = 24, left: (7 - ((3 - 12) - 8)) = 24\nreach 24! expression: (7 - ((3 - 12) - 8))"}, {"input": "8 7 3 12\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 8, 7\n(7) - (4) = 3, left: (7 - (12 / 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (12 / 3))) = 24\nreach 24! expression: (8 * (7 - (12 / 3)))"}, {"input": "8 7 3 12\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 8, 7\n(8) + (9) = 17, left: (8 + (12 - 3)) = 17, 7\n(7) + (17) = 24, left: (7 + (8 + (12 - 3))) = 24\nreach 24! expression: (7 + (8 + (12 - 3)))"}, {"input": "8 7 3 12\n", "output": "(8) + (12) = 20, left: (8 + 12) = 20, 7, 3\n(7) - (3) = 4, left: (7 - 3) = 4, (8 + 12) = 20\n(20) + (4) = 24, left: ((8 + 12) + (7 - 3)) = 24\nreach 24! expression: ((8 + 12) + (7 - 3))"}, {"input": "8 7 3 12\n", "output": "(8) * (12) = 96, left: (8 * 12) = 96, 7, 3\n(7) - (3) = 4, left: (7 - 3) = 4, (8 * 12) = 96\n(96) / (4) = 24, left: ((8 * 12) / (7 - 3)) = 24\nreach 24! expression: ((8 * 12) / (7 - 3))"}, {"input": "8 7 3 12\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 8, 7\n(7) - (8) = -1, left: (7 - 8) = -1, (12 / 3) = 4\nroll back, left: (12 / 3) = 4, 8, 7\n(4) / (7) = 4/7, left: ((12 / 3) / 7) = 4/7, 8\n(8) / (4/7) = 14, left: (8 / ((12 / 3) / 7)) = 14\nroll back, left: ((12 / 3) / 7) = 4/7, 8\nroll back, left: (12 / 3) = 4, 8, 7\n(7) - (4) = 3, left: (7 - (12 / 3)) = 3, 8\n(8) * (3) = 24, left: (8 * (7 - (12 / 3))) = 24\nreach 24! expression: (8 * (7 - (12 / 3)))"}, {"input": "8 7 3 12\n", "output": "(8) - (12) = -4, left: (8 - 12) = -4, 7, 3\nroll back, left: 8 7 3 12\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 7, 3\n(3) / (2/3) = 9/2, left: (3 / (8 / 12)) = 9/2, 7\nroll back, left: (8 / 12) = 2/3, 7, 3\nroll back, left: 8 7 3 12\n(8) * (12) = 96, left: (8 * 12) = 96, 7, 3\n(7) - (3) = 4, left: (7 - 3) = 4, (8 * 12) = 96\n(96) / (4) = 24, left: ((8 * 12) / (7 - 3)) = 24\nreach 24! expression: ((8 * 12) / (7 - 3))"}, {"input": "8 7 3 12\n", "output": "(3) + (12) = 15, left: (3 + 12) = 15, 8, 7\n(15) - (7) = 8, left: ((3 + 12) - 7) = 8, 8\nroll back, left: (3 + 12) = 15, 8, 7\nroll back, left: 8 7 3 12\n(3) * (12) = 36, left: (3 * 12) = 36, 8, 7\nroll back, left: 8 7 3 12\n(12) - (3) = 9, left: (12 - 3) = 9, 8, 7\n(8) + (9) = 17, left: (8 + (12 - 3)) = 17, 7\n(7) + (17) = 24, left: (7 + (8 + (12 - 3))) = 24\nreach 24! expression: (7 + (8 + (12 - 3)))"}, {"input": "8 7 3 12\n", "output": "(3) - (12) = -9, left: (3 - 12) = -9, 8, 7\n(-9) - (8) = -17, left: ((3 - 12) - 8) = -17, 7\n(7) - (-17) = 24, left: (7 - ((3 - 12) - 8)) = 24\nreach 24! expression: (7 - ((3 - 12) - 8))"}, {"input": "8 7 3 12\n", "output": "(3) - (12) = -9, left: (3 - 12) = -9, 8, 7\n(-9) - (8) = -17, left: ((3 - 12) - 8) = -17, 7\n(7) - (-17) = 24, left: (7 - ((3 - 12) - 8)) = 24\nreach 24! expression: (7 - ((3 - 12) - 8))"}, {"input": "8 7 3 12\n", "output": "(3) - (12) = -9, left: (3 - 12) = -9, 8, 7\n(-9) - (8) = -17, left: ((3 - 12) - 8) = -17, 7\n(7) - (-17) = 24, left: (7 - ((3 - 12) - 8)) = 24\nreach 24! expression: (7 - ((3 - 12) - 8))"}, {"input": "8 7 3 12\n", "output": "(3) - (12) = -9, left: (3 - 12) = -9, 8, 7\n(-9) - (8) = -17, left: ((3 - 12) - 8) = -17, 7\n(7) - (-17) = 24, left: (7 - ((3 - 12) - 8)) = 24\nreach 24! expression: (7 - ((3 - 12) - 8))"}, {"input": "4 2 5 13\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 5, 13\n(5) + (13) = 18, left: (5 + 13) = 18, (4 + 2) = 6\n(6) + (18) = 24, left: ((4 + 2) + (5 + 13)) = 24\nreach 24! expression: ((4 + 2) + (5 + 13))"}, {"input": "4 2 5 13\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 4, 5\n(11) - (5) = 6, left: ((13 - 2) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((13 - 2) - 5)) = 24\nreach 24! expression: (4 * ((13 - 2) - 5))"}, {"input": "4 2 5 13\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (5 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (5 - 4))) = 24\nreach 24! expression: (2 * (13 - (5 - 4)))"}, {"input": "4 2 5 13\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 5, 13\n(5) + (6) = 11, left: (5 + (4 + 2)) = 11, 13\n(13) + (11) = 24, left: (13 + (5 + (4 + 2))) = 24\nreach 24! expression: (13 + (5 + (4 + 2)))"}, {"input": "4 2 5 13\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 2, 13\n(13) + (-1) = 12, left: (13 + (4 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 + (4 - 5))) = 24\nreach 24! expression: (2 * (13 + (4 - 5)))"}, {"input": "4 2 5 13\n", "output": "(2) - (13) = -11, left: (2 - 13) = -11, 4, 5\n(4) - (5) = -1, left: (4 - 5) = -1, (2 - 13) = -11\nroll back, left: (2 - 13) = -11, 4, 5\nroll back, left: 4 2 5 13\n(13) - (2) = 11, left: (13 - 2) = 11, 4, 5\n(4) * (5) = 20, left: (4 * 5) = 20, (13 - 2) = 11\nroll back, left: (13 - 2) = 11, 4, 5\n(11) - (5) = 6, left: ((13 - 2) - 5) = 6, 4\n(4) * (6) = 24, left: (4 * ((13 - 2) - 5)) = 24\nreach 24! expression: (4 * ((13 - 2) - 5))"}, {"input": "4 2 5 13\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 5, 13\nroll back, left: 4 2 5 13\n(4) - (2) = 2, left: (4 - 2) = 2, 5, 13\nroll back, left: 4 2 5 13\n(2) - (4) = -2, left: (2 - 4) = -2, 5, 13\nroll back, left: 4 2 5 13\n(4) + (2) = 6, left: (4 + 2) = 6, 5, 13\n(5) + (13) = 18, left: (5 + 13) = 18, (4 + 2) = 6\n(6) + (18) = 24, left: ((4 + 2) + (5 + 13)) = 24\nreach 24! expression: ((4 + 2) + (5 + 13))"}, {"input": "4 2 5 13\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 2, 13\n(2) - (4/5) = 6/5, left: (2 - (4 / 5)) = 6/5, 13\nroll back, left: (4 / 5) = 4/5, 2, 13\nroll back, left: 4 2 5 13\n(4) * (5) = 20, left: (4 * 5) = 20, 2, 13\nroll back, left: 4 2 5 13\n(4) - (5) = -1, left: (4 - 5) = -1, 2, 13\n(13) + (-1) = 12, left: (13 + (4 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 + (4 - 5))) = 24\nreach 24! expression: (2 * (13 + (4 - 5)))"}, {"input": "4 2 5 13\n", "output": "(4) * (5) = 20, left: (4 * 5) = 20, 2, 13\n(2) - (20) = -18, left: (2 - (4 * 5)) = -18, 13\n(13) - (-18) = 31, left: (13 - (2 - (4 * 5))) = 31\nroll back, left: (2 - (4 * 5)) = -18, 13\nroll back, left: (4 * 5) = 20, 2, 13\nroll back, left: 4 2 5 13\n(5) - (4) = 1, left: (5 - 4) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (5 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (5 - 4))) = 24\nreach 24! expression: (2 * (13 - (5 - 4)))"}, {"input": "4 2 5 13\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 5, 13\n(5) - (6) = -1, left: (5 - (4 + 2)) = -1, 13\n(13) / (-1) = -13, left: (13 / (5 - (4 + 2))) = -13\nroll back, left: (5 - (4 + 2)) = -1, 13\nroll back, left: (4 + 2) = 6, 5, 13\n(5) * (6) = 30, left: (5 * (4 + 2)) = 30, 13\nroll back, left: (4 + 2) = 6, 5, 13\n(5) + (6) = 11, left: (5 + (4 + 2)) = 11, 13\n(13) + (11) = 24, left: (13 + (5 + (4 + 2))) = 24\nreach 24! expression: (13 + (5 + (4 + 2)))"}, {"input": "4 12 4 5\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (12 - 5)) = 28, 4\n(28) - (4) = 24, left: ((4 * (12 - 5)) - 4) = 24\nreach 24! expression: ((4 * (12 - 5)) - 4)"}, {"input": "4 12 4 5\n", "output": "(4) + (5) = 9, left: (4 + 5) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (4 + 5)) = 36, 12\n(36) - (12) = 24, left: ((4 * (4 + 5)) - 12) = 24\nreach 24! expression: ((4 * (4 + 5)) - 12)"}, {"input": "4 12 4 5\n", "output": "(4) * (12) = 48, left: (4 * 12) = 48, 4, 5\nroll back, left: 4 12 4 5\n(4) * (4) = 16, left: (4 * 4) = 16, 12, 5\n(12) - (5) = 7, left: (12 - 5) = 7, (4 * 4) = 16\nroll back, left: (4 * 4) = 16, 12, 5\nroll back, left: 4 12 4 5\n(4) + (5) = 9, left: (4 + 5) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (4 + 5)) = 36, 12\n(36) - (12) = 24, left: ((4 * (4 + 5)) - 12) = 24\nreach 24! expression: ((4 * (4 + 5)) - 12)"}, {"input": "4 12 4 5\n", "output": "(4) * (5) = 20, left: (4 * 5) = 20, 12, 4\nroll back, left: 4 12 4 5\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 12, 4\nroll back, left: 4 12 4 5\n(4) / (5) = 4/5, left: (4 / 5) = 4/5, 12, 4\nroll back, left: 4 12 4 5\n(4) + (5) = 9, left: (4 + 5) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (4 + 5)) = 36, 12\n(36) - (12) = 24, left: ((4 * (4 + 5)) - 12) = 24\nreach 24! expression: ((4 * (4 + 5)) - 12)"}, {"input": "4 12 4 5\n", "output": "(4) - (5) = -1, left: (4 - 5) = -1, 12, 4\nroll back, left: 4 12 4 5\n(4) * (5) = 20, left: (4 * 5) = 20, 12, 4\nroll back, left: 4 12 4 5\n(5) - (4) = 1, left: (5 - 4) = 1, 12, 4\nroll back, left: 4 12 4 5\n(4) + (5) = 9, left: (4 + 5) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (4 + 5)) = 36, 12\n(36) - (12) = 24, left: ((4 * (4 + 5)) - 12) = 24\nreach 24! expression: ((4 * (4 + 5)) - 12)"}, {"input": "4 12 4 5\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 12, 4\nroll back, left: 4 12 4 5\n(5) - (4) = 1, left: (5 - 4) = 1, 12, 4\nroll back, left: 4 12 4 5\n(4) + (5) = 9, left: (4 + 5) = 9, 12, 4\n(4) - (12) = -8, left: (4 - 12) = -8, (4 + 5) = 9\nroll back, left: (4 + 5) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (4 + 5)) = 36, 12\n(36) - (12) = 24, left: ((4 * (4 + 5)) - 12) = 24\nreach 24! expression: ((4 * (4 + 5)) - 12)"}, {"input": "4 12 4 5\n", "output": "(5) - (12) = -7, left: (5 - 12) = -7, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (5 - 12) = -7\nroll back, left: (5 - 12) = -7, 4, 4\nroll back, left: 4 12 4 5\n(5) / (12) = 5/12, left: (5 / 12) = 5/12, 4, 4\nroll back, left: 4 12 4 5\n(12) - (5) = 7, left: (12 - 5) = 7, 4, 4\n(4) * (7) = 28, left: (4 * (12 - 5)) = 28, 4\n(28) - (4) = 24, left: ((4 * (12 - 5)) - 4) = 24\nreach 24! expression: ((4 * (12 - 5)) - 4)"}, {"input": "8 5 11 2\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 8, 2\n(8) / (2) = 4, left: (8 / 2) = 4, (11 - 5) = 6\n(6) * (4) = 24, left: ((11 - 5) * (8 / 2)) = 24\nreach 24! expression: ((11 - 5) * (8 / 2))"}, {"input": "8 5 11 2\n", "output": "(5) + (11) = 16, left: (5 + 11) = 16, 8, 2\n(2) * (16) = 32, left: (2 * (5 + 11)) = 32, 8\n(32) - (8) = 24, left: ((2 * (5 + 11)) - 8) = 24\nreach 24! expression: ((2 * (5 + 11)) - 8)"}, {"input": "8 5 11 2\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (11 - 5)) = 48, 2\n(48) / (2) = 24, left: ((8 * (11 - 5)) / 2) = 24\nreach 24! expression: ((8 * (11 - 5)) / 2)"}, {"input": "8 5 11 2\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((11 - 5) / (2 / 8)) = 24\nreach 24! expression: ((11 - 5) / (2 / 8))"}, {"input": "8 5 11 2\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (8 / 2) = 4\n(4) * (6) = 24, left: ((8 / 2) * (11 - 5)) = 24\nreach 24! expression: ((8 / 2) * (11 - 5))"}, {"input": "8 5 11 2\n", "output": "(11) + (2) = 13, left: (11 + 2) = 13, 8, 5\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, (11 + 2) = 13\nroll back, left: (11 + 2) = 13, 8, 5\nroll back, left: 8 5 11 2\n(8) * (11) = 88, left: (8 * 11) = 88, 5, 2\nroll back, left: 8 5 11 2\n(8) / (2) = 4, left: (8 / 2) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (8 / 2) = 4\n(4) * (6) = 24, left: ((8 / 2) * (11 - 5)) = 24\nreach 24! expression: ((8 / 2) * (11 - 5))"}, {"input": "8 5 11 2\n", "output": "(11) / (8) = 11/8, left: (11 / 8) = 11/8, 5, 2\nroll back, left: 8 5 11 2\n(2) - (5) = -3, left: (2 - 5) = -3, 8, 11\nroll back, left: 8 5 11 2\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 8, 11\nroll back, left: 8 5 11 2\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((11 - 5) / (2 / 8)) = 24\nreach 24! expression: ((11 - 5) / (2 / 8))"}, {"input": "8 5 11 2\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 8, 2\n(8) - (6) = 2, left: (8 - (11 - 5)) = 2, 2\nroll back, left: (11 - 5) = 6, 8, 2\n(8) + (6) = 14, left: (8 + (11 - 5)) = 14, 2\nroll back, left: (11 - 5) = 6, 8, 2\n(6) / (8) = 3/4, left: ((11 - 5) / 8) = 3/4, 2\nroll back, left: (11 - 5) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (11 - 5)) = 48, 2\n(48) / (2) = 24, left: ((8 * (11 - 5)) / 2) = 24\nreach 24! expression: ((8 * (11 - 5)) / 2)"}, {"input": "8 5 11 2\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 11, 2\nroll back, left: 8 5 11 2\n(8) + (5) = 13, left: (8 + 5) = 13, 11, 2\nroll back, left: 8 5 11 2\n(5) / (11) = 5/11, left: (5 / 11) = 5/11, 8, 2\nroll back, left: 8 5 11 2\n(5) + (11) = 16, left: (5 + 11) = 16, 8, 2\n(2) * (16) = 32, left: (2 * (5 + 11)) = 32, 8\n(32) - (8) = 24, left: ((2 * (5 + 11)) - 8) = 24\nreach 24! expression: ((2 * (5 + 11)) - 8)"}, {"input": "1 9 4 3\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 1, 4\n(27) - (4) = 23, left: ((9 * 3) - 4) = 23, 1\n(1) + (23) = 24, left: (1 + ((9 * 3) - 4)) = 24\nreach 24! expression: (1 + ((9 * 3) - 4))"}, {"input": "1 9 4 3\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (1 * 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (1 * 3))) = 24\nreach 24! expression: (4 * (9 - (1 * 3)))"}, {"input": "1 9 4 3\n", "output": "(9) * (3) = 27, left: (9 * 3) = 27, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (9 * 3) = 27\n(27) - (3) = 24, left: ((9 * 3) - (4 - 1)) = 24\nreach 24! expression: ((9 * 3) - (4 - 1))"}, {"input": "1 9 4 3\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (3 / 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (3 / 1))) = 24\nreach 24! expression: (4 * (9 - (3 / 1)))"}, {"input": "1 9 4 3\n", "output": "(1) * (9) = 9, left: (1 * 9) = 9, 4, 3\n(9) - (3) = 6, left: ((1 * 9) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 * 9) - 3)) = 24\nreach 24! expression: (4 * ((1 * 9) - 3))"}, {"input": "1 9 4 3\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 1, 3\n(1) - (4/9) = 5/9, left: (1 - (4 / 9)) = 5/9, 3\n(5/9) - (3) = -22/9, left: ((1 - (4 / 9)) - 3) = -22/9\nroll back, left: (1 - (4 / 9)) = 5/9, 3\nroll back, left: (4 / 9) = 4/9, 1, 3\nroll back, left: 1 9 4 3\n(9) * (3) = 27, left: (9 * 3) = 27, 1, 4\n(27) - (4) = 23, left: ((9 * 3) - 4) = 23, 1\n(1) + (23) = 24, left: (1 + ((9 * 3) - 4)) = 24\nreach 24! expression: (1 + ((9 * 3) - 4))"}, {"input": "1 9 4 3\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 9, 4\n(9) / (4) = 9/4, left: (9 / 4) = 9/4, (1 + 3) = 4\nroll back, left: (1 + 3) = 4, 9, 4\nroll back, left: 1 9 4 3\n(1) * (3) = 3, left: (1 * 3) = 3, 9, 4\n(9) / (3) = 3, left: (9 / (1 * 3)) = 3, 4\nroll back, left: (1 * 3) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (1 * 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (1 * 3))) = 24\nreach 24! expression: (4 * (9 - (1 * 3)))"}, {"input": "1 9 4 3\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 9, 4\n(9) * (3) = 27, left: (9 * (3 / 1)) = 27, 4\nroll back, left: (3 / 1) = 3, 9, 4\n(3) / (9) = 1/3, left: ((3 / 1) / 9) = 1/3, 4\n(1/3) / (4) = 1/12, left: (((3 / 1) / 9) / 4) = 1/12\nroll back, left: ((3 / 1) / 9) = 1/3, 4\nroll back, left: (3 / 1) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (3 / 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (3 / 1))) = 24\nreach 24! expression: (4 * (9 - (3 / 1)))"}, {"input": "1 9 4 3\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 4, 3\n(8) - (3) = 5, left: ((9 - 1) - 3) = 5, 4\n(4) / (5) = 4/5, left: (4 / ((9 - 1) - 3)) = 4/5\nroll back, left: ((9 - 1) - 3) = 5, 4\nroll back, left: (9 - 1) = 8, 4, 3\nroll back, left: 1 9 4 3\n(1) * (9) = 9, left: (1 * 9) = 9, 4, 3\n(9) - (3) = 6, left: ((1 * 9) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 * 9) - 3)) = 24\nreach 24! expression: (4 * ((1 * 9) - 3))"}, {"input": "1 9 4 3\n", "output": "(4) + (3) = 7, left: (4 + 3) = 7, 1, 9\nroll back, left: 1 9 4 3\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, 1, 9\nroll back, left: 1 9 4 3\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 1, 9\nroll back, left: 1 9 4 3\n(9) * (3) = 27, left: (9 * 3) = 27, 1, 4\n(4) - (1) = 3, left: (4 - 1) = 3, (9 * 3) = 27\n(27) - (3) = 24, left: ((9 * 3) - (4 - 1)) = 24\nreach 24! expression: ((9 * 3) - (4 - 1))"}, {"input": "13 10 11 10\n", "output": "(10) - (13) = -3, left: (10 - 13) = -3, 11, 10\n(11) + (10) = 21, left: (11 + 10) = 21, (10 - 13) = -3\n(21) - (-3) = 24, left: ((11 + 10) - (10 - 13)) = 24\nreach 24! expression: ((11 + 10) - (10 - 13))"}, {"input": "13 10 11 10\n", "output": "(10) - (10) = 0, left: (10 - 10) = 0, 13, 11\n(11) + (0) = 11, left: (11 + (10 - 10)) = 11, 13\n(13) + (11) = 24, left: (13 + (11 + (10 - 10))) = 24\nreach 24! expression: (13 + (11 + (10 - 10)))"}, {"input": "13 10 11 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 11, 10\n(10) + (3) = 13, left: (10 + (13 - 10)) = 13, 11\n(11) + (13) = 24, left: (11 + (10 + (13 - 10))) = 24\nreach 24! expression: (11 + (10 + (13 - 10)))"}, {"input": "13 10 11 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 13, 11\n(13) * (1) = 13, left: (13 * (10 / 10)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 * (10 / 10))) = 24\nreach 24! expression: (11 + (13 * (10 / 10)))"}, {"input": "13 10 11 10\n", "output": "(11) - (10) = 1, left: (11 - 10) = 1, 13, 10\n(13) + (1) = 14, left: (13 + (11 - 10)) = 14, 10\n(10) + (14) = 24, left: (10 + (13 + (11 - 10))) = 24\nreach 24! expression: (10 + (13 + (11 - 10)))"}, {"input": "13 10 11 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 11, 10\n(10) + (3) = 13, left: (10 + (13 - 10)) = 13, 11\n(11) * (13) = 143, left: (11 * (10 + (13 - 10))) = 143\nroll back, left: (10 + (13 - 10)) = 13, 11\n(13) - (11) = 2, left: ((10 + (13 - 10)) - 11) = 2\nroll back, left: (10 + (13 - 10)) = 13, 11\n(11) + (13) = 24, left: (11 + (10 + (13 - 10))) = 24\nreach 24! expression: (11 + (10 + (13 - 10)))"}, {"input": "13 10 11 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 11, 10\n(10) + (3) = 13, left: (10 + (13 - 10)) = 13, 11\n(11) * (13) = 143, left: (11 * (10 + (13 - 10))) = 143\nroll back, left: (10 + (13 - 10)) = 13, 11\n(13) - (11) = 2, left: ((10 + (13 - 10)) - 11) = 2\nroll back, left: (10 + (13 - 10)) = 13, 11\n(11) + (13) = 24, left: (11 + (10 + (13 - 10))) = 24\nreach 24! expression: (11 + (10 + (13 - 10)))"}, {"input": "13 10 11 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 11, 10\n(10) + (3) = 13, left: (10 + (13 - 10)) = 13, 11\n(11) * (13) = 143, left: (11 * (10 + (13 - 10))) = 143\nroll back, left: (10 + (13 - 10)) = 13, 11\n(13) - (11) = 2, left: ((10 + (13 - 10)) - 11) = 2\nroll back, left: (10 + (13 - 10)) = 13, 11\n(11) + (13) = 24, left: (11 + (10 + (13 - 10))) = 24\nreach 24! expression: (11 + (10 + (13 - 10)))"}, {"input": "13 10 11 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 11, 10\n(10) + (3) = 13, left: (10 + (13 - 10)) = 13, 11\n(11) * (13) = 143, left: (11 * (10 + (13 - 10))) = 143\nroll back, left: (10 + (13 - 10)) = 13, 11\n(13) - (11) = 2, left: ((10 + (13 - 10)) - 11) = 2\nroll back, left: (10 + (13 - 10)) = 13, 11\n(11) + (13) = 24, left: (11 + (10 + (13 - 10))) = 24\nreach 24! expression: (11 + (10 + (13 - 10)))"}, {"input": "1 1 4 10\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (1 + 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (1 + 1))) = 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(1) * (10) = 10, left: (1 * 10) = 10, 1, 4\nroll back, left: 1 1 4 10\n(10) - (1) = 9, left: (10 - 1) = 9, 1, 4\n(4) / (1) = 4, left: (4 / 1) = 4, (10 - 1) = 9\nroll back, left: (10 - 1) = 9, 1, 4\nroll back, left: 1 1 4 10\n(1) + (1) = 2, left: (1 + 1) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (1 + 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (1 + 1))) = 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 1, 1\nroll back, left: 1 1 4 10\n(10) - (1) = 9, left: (10 - 1) = 9, 1, 4\nroll back, left: 1 1 4 10\n(1) * (1) = 1, left: (1 * 1) = 1, 4, 10\nroll back, left: 1 1 4 10\n(1) + (1) = 2, left: (1 + 1) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (1 + 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (1 + 1))) = 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(4) + (10) = 14, left: (4 + 10) = 14, 1, 1\nroll back, left: 1 1 4 10\n(4) - (10) = -6, left: (4 - 10) = -6, 1, 1\nroll back, left: 1 1 4 10\n(1) * (1) = 1, left: (1 * 1) = 1, 4, 10\nroll back, left: 1 1 4 10\n(1) + (1) = 2, left: (1 + 1) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (1 + 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (1 + 1))) = 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(1) * (1) = 1, left: (1 * 1) = 1, 4, 10\nroll back, left: 1 1 4 10\n(1) / (1) = 1, left: (1 / 1) = 1, 4, 10\nroll back, left: 1 1 4 10\n(1) / (1) = 1, left: (1 / 1) = 1, 4, 10\nroll back, left: 1 1 4 10\n(1) + (1) = 2, left: (1 + 1) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (1 + 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (1 + 1))) = 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "1 1 4 10\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 1, 10\nroll back, left: 1 1 4 10\n(1) - (4) = -3, left: (1 - 4) = -3, 1, 10\nroll back, left: 1 1 4 10\n(4) - (1) = 3, left: (4 - 1) = 3, 1, 10\nroll back, left: 1 1 4 10\n(1) + (1) = 2, left: (1 + 1) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (1 + 1)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (1 + 1))) = 24\nreach 24! expression: (4 + (10 * (1 + 1)))"}, {"input": "6 1 13 2\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 1, 13\n(1) - (13) = -12, left: (1 - 13) = -12, (6 * 2) = 12\n(12) - (-12) = 24, left: ((6 * 2) - (1 - 13)) = 24\nreach 24! expression: ((6 * 2) - (1 - 13))"}, {"input": "6 1 13 2\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 1, 13\n(13) + (12) = 25, left: (13 + (6 * 2)) = 25, 1\n(25) - (1) = 24, left: ((13 + (6 * 2)) - 1) = 24\nreach 24! expression: ((13 + (6 * 2)) - 1)"}, {"input": "6 1 13 2\n", "output": "(13) - (1) = 12, left: (13 - 1) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (13 - 1) = 12\n(12) + (12) = 24, left: ((13 - 1) + (6 * 2)) = 24\nreach 24! expression: ((13 - 1) + (6 * 2))"}, {"input": "6 1 13 2\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 1, 13\nroll back, left: 6 1 13 2\n(6) - (2) = 4, left: (6 - 2) = 4, 1, 13\n(1) * (13) = 13, left: (1 * 13) = 13, (6 - 2) = 4\nroll back, left: (6 - 2) = 4, 1, 13\nroll back, left: 6 1 13 2\n(6) * (2) = 12, left: (6 * 2) = 12, 1, 13\n(13) + (12) = 25, left: (13 + (6 * 2)) = 25, 1\n(25) - (1) = 24, left: ((13 + (6 * 2)) - 1) = 24\nreach 24! expression: ((13 + (6 * 2)) - 1)"}, {"input": "6 1 13 2\n", "output": "(6) / (2) = 3, left: (6 / 2) = 3, 1, 13\n(1) / (3) = 1/3, left: (1 / (6 / 2)) = 1/3, 13\nroll back, left: (6 / 2) = 3, 1, 13\n(13) / (3) = 13/3, left: (13 / (6 / 2)) = 13/3, 1\nroll back, left: (6 / 2) = 3, 1, 13\nroll back, left: 6 1 13 2\n(6) * (2) = 12, left: (6 * 2) = 12, 1, 13\n(1) - (13) = -12, left: (1 - 13) = -12, (6 * 2) = 12\n(12) - (-12) = 24, left: ((6 * 2) - (1 - 13)) = 24\nreach 24! expression: ((6 * 2) - (1 - 13))"}, {"input": "6 1 13 2\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 6, 1\nroll back, left: 6 1 13 2\n(13) * (2) = 26, left: (13 * 2) = 26, 6, 1\nroll back, left: 6 1 13 2\n(6) * (13) = 78, left: (6 * 13) = 78, 1, 2\nroll back, left: 6 1 13 2\n(13) - (1) = 12, left: (13 - 1) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (13 - 1) = 12\n(12) + (12) = 24, left: ((13 - 1) + (6 * 2)) = 24\nreach 24! expression: ((13 - 1) + (6 * 2))"}, {"input": "6 1 13 2\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 13, 2\nroll back, left: 6 1 13 2\n(6) + (13) = 19, left: (6 + 13) = 19, 1, 2\nroll back, left: 6 1 13 2\n(1) + (13) = 14, left: (1 + 13) = 14, 6, 2\nroll back, left: 6 1 13 2\n(13) - (1) = 12, left: (13 - 1) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (13 - 1) = 12\n(12) + (12) = 24, left: ((13 - 1) + (6 * 2)) = 24\nreach 24! expression: ((13 - 1) + (6 * 2))"}, {"input": "6 1 13 2\n", "output": "(13) + (2) = 15, left: (13 + 2) = 15, 6, 1\nroll back, left: 6 1 13 2\n(1) - (2) = -1, left: (1 - 2) = -1, 6, 13\nroll back, left: 6 1 13 2\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 6, 13\nroll back, left: 6 1 13 2\n(13) - (1) = 12, left: (13 - 1) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (13 - 1) = 12\n(12) + (12) = 24, left: ((13 - 1) + (6 * 2)) = 24\nreach 24! expression: ((13 - 1) + (6 * 2))"}, {"input": "1 3 8 12\n", "output": "(3) + (12) = 15, left: (3 + 12) = 15, 1, 8\n(1) + (15) = 16, left: (1 + (3 + 12)) = 16, 8\n(8) + (16) = 24, left: (8 + (1 + (3 + 12))) = 24\nreach 24! expression: (8 + (1 + (3 + 12)))"}, {"input": "1 3 8 12\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 1, 8\n(4) - (1) = 3, left: ((12 / 3) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 / 3) - 1)) = 24\nreach 24! expression: (8 * ((12 / 3) - 1))"}, {"input": "1 3 8 12\n", "output": "(1) + (8) = 9, left: (1 + 8) = 9, 3, 12\n(12) + (9) = 21, left: (12 + (1 + 8)) = 21, 3\n(3) + (21) = 24, left: (3 + (12 + (1 + 8))) = 24\nreach 24! expression: (3 + (12 + (1 + 8)))"}, {"input": "1 3 8 12\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 8, 12\n(4) / (8) = 1/2, left: ((1 + 3) / 8) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((1 + 3) / 8)) = 24\nreach 24! expression: (12 / ((1 + 3) / 8))"}, {"input": "1 3 8 12\n", "output": "(1) + (12) = 13, left: (1 + 12) = 13, 3, 8\n(3) + (8) = 11, left: (3 + 8) = 11, (1 + 12) = 13\n(13) + (11) = 24, left: ((1 + 12) + (3 + 8)) = 24\nreach 24! expression: ((1 + 12) + (3 + 8))"}, {"input": "1 3 8 12\n", "output": "(1) / (12) = 1/12, left: (1 / 12) = 1/12, 3, 8\nroll back, left: 1 3 8 12\n(1) * (12) = 12, left: (1 * 12) = 12, 3, 8\nroll back, left: 1 3 8 12\n(1) - (12) = -11, left: (1 - 12) = -11, 3, 8\nroll back, left: 1 3 8 12\n(1) + (12) = 13, left: (1 + 12) = 13, 3, 8\n(3) + (8) = 11, left: (3 + 8) = 11, (1 + 12) = 13\n(13) + (11) = 24, left: ((1 + 12) + (3 + 8)) = 24\nreach 24! expression: ((1 + 12) + (3 + 8))"}, {"input": "1 3 8 12\n", "output": "(1) / (3) = 1/3, left: (1 / 3) = 1/3, 8, 12\n(1/3) / (12) = 1/36, left: ((1 / 3) / 12) = 1/36, 8\nroll back, left: (1 / 3) = 1/3, 8, 12\nroll back, left: 1 3 8 12\n(1) + (3) = 4, left: (1 + 3) = 4, 8, 12\n(8) - (4) = 4, left: (8 - (1 + 3)) = 4, 12\nroll back, left: (1 + 3) = 4, 8, 12\n(4) / (8) = 1/2, left: ((1 + 3) / 8) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((1 + 3) / 8)) = 24\nreach 24! expression: (12 / ((1 + 3) / 8))"}, {"input": "1 3 8 12\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 3, 12\nroll back, left: 1 3 8 12\n(1) * (8) = 8, left: (1 * 8) = 8, 3, 12\nroll back, left: 1 3 8 12\n(8) / (1) = 8, left: (8 / 1) = 8, 3, 12\nroll back, left: 1 3 8 12\n(1) + (8) = 9, left: (1 + 8) = 9, 3, 12\n(12) + (9) = 21, left: (12 + (1 + 8)) = 21, 3\n(3) + (21) = 24, left: (3 + (12 + (1 + 8))) = 24\nreach 24! expression: (3 + (12 + (1 + 8)))"}, {"input": "1 3 8 12\n", "output": "(3) + (12) = 15, left: (3 + 12) = 15, 1, 8\n(1) * (15) = 15, left: (1 * (3 + 12)) = 15, 8\n(8) - (15) = -7, left: (8 - (1 * (3 + 12))) = -7\nroll back, left: (1 * (3 + 12)) = 15, 8\nroll back, left: (3 + 12) = 15, 1, 8\n(1) - (15) = -14, left: (1 - (3 + 12)) = -14, 8\nroll back, left: (3 + 12) = 15, 1, 8\n(1) + (15) = 16, left: (1 + (3 + 12)) = 16, 8\n(8) + (16) = 24, left: (8 + (1 + (3 + 12))) = 24\nreach 24! expression: (8 + (1 + (3 + 12)))"}, {"input": "1 3 8 12\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 1, 8\n(4) / (8) = 1/2, left: ((12 / 3) / 8) = 1/2, 1\nroll back, left: (12 / 3) = 4, 1, 8\n(4) - (8) = -4, left: ((12 / 3) - 8) = -4, 1\nroll back, left: (12 / 3) = 4, 1, 8\n(4) / (1) = 4, left: ((12 / 3) / 1) = 4, 8\nroll back, left: (12 / 3) = 4, 1, 8\n(4) - (1) = 3, left: ((12 / 3) - 1) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 / 3) - 1)) = 24\nreach 24! expression: (8 * ((12 / 3) - 1))"}, {"input": "8 2 9 10\n", "output": "(2) + (10) = 12, left: (2 + 10) = 12, 8, 9\n(12) - (9) = 3, left: ((2 + 10) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 10) - 9)) = 24\nreach 24! expression: (8 * ((2 + 10) - 9))"}, {"input": "8 2 9 10\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 8, 2\n(2) - (-1) = 3, left: (2 - (9 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (9 - 10))) = 24\nreach 24! expression: (8 * (2 - (9 - 10)))"}, {"input": "8 2 9 10\n", "output": "(8) + (9) = 17, left: (8 + 9) = 17, 2, 10\n(2) * (17) = 34, left: (2 * (8 + 9)) = 34, 10\n(34) - (10) = 24, left: ((2 * (8 + 9)) - 10) = 24\nreach 24! expression: ((2 * (8 + 9)) - 10)"}, {"input": "8 2 9 10\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 8, 10\n(10) - (7) = 3, left: (10 - (9 - 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 - (9 - 2))) = 24\nreach 24! expression: (8 * (10 - (9 - 2)))"}, {"input": "8 2 9 10\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 2, 9\n(18) - (9) = 9, left: ((8 + 10) - 9) = 9, 2\nroll back, left: (8 + 10) = 18, 2, 9\nroll back, left: 8 2 9 10\n(2) - (10) = -8, left: (2 - 10) = -8, 8, 9\nroll back, left: 8 2 9 10\n(2) + (10) = 12, left: (2 + 10) = 12, 8, 9\n(12) - (9) = 3, left: ((2 + 10) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((2 + 10) - 9)) = 24\nreach 24! expression: (8 * ((2 + 10) - 9))"}, {"input": "8 2 9 10\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 2, 9\nroll back, left: 8 2 9 10\n(8) - (9) = -1, left: (8 - 9) = -1, 2, 10\nroll back, left: 8 2 9 10\n(8) + (9) = 17, left: (8 + 9) = 17, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (8 + 9) = 17\nroll back, left: (8 + 9) = 17, 2, 10\n(2) * (17) = 34, left: (2 * (8 + 9)) = 34, 10\n(34) - (10) = 24, left: ((2 * (8 + 9)) - 10) = 24\nreach 24! expression: ((2 * (8 + 9)) - 10)"}, {"input": "8 2 9 10\n", "output": "(9) / (10) = 9/10, left: (9 / 10) = 9/10, 8, 2\nroll back, left: 8 2 9 10\n(9) - (10) = -1, left: (9 - 10) = -1, 8, 2\n(8) - (2) = 6, left: (8 - 2) = 6, (9 - 10) = -1\n(-1) / (6) = -1/6, left: ((9 - 10) / (8 - 2)) = -1/6\nroll back, left: (8 - 2) = 6, (9 - 10) = -1\nroll back, left: (9 - 10) = -1, 8, 2\n(2) - (-1) = 3, left: (2 - (9 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (2 - (9 - 10))) = 24\nreach 24! expression: (8 * (2 - (9 - 10)))"}, {"input": "8 2 9 10\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 9, 10\nroll back, left: 8 2 9 10\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 9, 10\nroll back, left: 8 2 9 10\n(2) - (8) = -6, left: (2 - 8) = -6, 9, 10\nroll back, left: 8 2 9 10\n(8) + (9) = 17, left: (8 + 9) = 17, 2, 10\n(2) * (17) = 34, left: (2 * (8 + 9)) = 34, 10\n(34) - (10) = 24, left: ((2 * (8 + 9)) - 10) = 24\nreach 24! expression: ((2 * (8 + 9)) - 10)"}, {"input": "8 2 9 10\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 9, 10\n(9) - (10) = -1, left: (9 - 10) = -1, (2 / 8) = 1/4\nroll back, left: (2 / 8) = 1/4, 9, 10\nroll back, left: 8 2 9 10\n(2) - (8) = -6, left: (2 - 8) = -6, 9, 10\nroll back, left: 8 2 9 10\n(9) - (2) = 7, left: (9 - 2) = 7, 8, 10\n(10) - (7) = 3, left: (10 - (9 - 2)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 - (9 - 2))) = 24\nreach 24! expression: (8 * (10 - (9 - 2)))"}, {"input": "4 4 6 8\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 4, 6\n(6) - (4) = 2, left: (6 - 4) = 2, (4 + 8) = 12\n(12) * (2) = 24, left: ((4 + 8) * (6 - 4)) = 24\nreach 24! expression: ((4 + 8) * (6 - 4))"}, {"input": "4 4 6 8\n", "output": "(6) - (4) = 2, left: (6 - 4) = 2, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (6 - 4) = 2\n(2) * (12) = 24, left: ((6 - 4) * (4 + 8)) = 24\nreach 24! expression: ((6 - 4) * (4 + 8))"}, {"input": "4 4 6 8\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 4, 6\n(12) - (6) = 6, left: ((4 + 8) - 6) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 + 8) - 6)) = 24\nreach 24! expression: (4 * ((4 + 8) - 6))"}, {"input": "4 4 6 8\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 4, 4\n(4) - (-2) = 6, left: (4 - (6 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (4 - (6 - 8))) = 24\nreach 24! expression: (4 * (4 - (6 - 8)))"}, {"input": "4 4 6 8\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 6, 8\n(16) / (6) = 8/3, left: ((4 * 4) / 6) = 8/3, 8\nroll back, left: (4 * 4) = 16, 6, 8\nroll back, left: 4 4 6 8\n(4) / (4) = 1, left: (4 / 4) = 1, 6, 8\nroll back, left: 4 4 6 8\n(4) + (8) = 12, left: (4 + 8) = 12, 4, 6\n(12) - (6) = 6, left: ((4 + 8) - 6) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 + 8) - 6)) = 24\nreach 24! expression: (4 * ((4 + 8) - 6))"}, {"input": "4 4 6 8\n", "output": "(6) / (4) = 3/2, left: (6 / 4) = 3/2, 4, 8\n(4) * (8) = 32, left: (4 * 8) = 32, (6 / 4) = 3/2\nroll back, left: (6 / 4) = 3/2, 4, 8\nroll back, left: 4 4 6 8\n(4) + (6) = 10, left: (4 + 6) = 10, 4, 8\nroll back, left: 4 4 6 8\n(6) - (4) = 2, left: (6 - 4) = 2, 4, 8\n(4) + (8) = 12, left: (4 + 8) = 12, (6 - 4) = 2\n(2) * (12) = 24, left: ((6 - 4) * (4 + 8)) = 24\nreach 24! expression: ((6 - 4) * (4 + 8))"}, {"input": "4 4 6 8\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 4, 6\nroll back, left: 4 4 6 8\n(4) * (8) = 32, left: (4 * 8) = 32, 4, 6\n(32) / (6) = 16/3, left: ((4 * 8) / 6) = 16/3, 4\nroll back, left: (4 * 8) = 32, 4, 6\nroll back, left: 4 4 6 8\n(4) + (8) = 12, left: (4 + 8) = 12, 4, 6\n(12) - (6) = 6, left: ((4 + 8) - 6) = 6, 4\n(4) * (6) = 24, left: (4 * ((4 + 8) - 6)) = 24\nreach 24! expression: (4 * ((4 + 8) - 6))"}, {"input": "4 4 6 8\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 4, 4\n(4) + (4) = 8, left: (4 + 4) = 8, (6 - 8) = -2\nroll back, left: (6 - 8) = -2, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (6 - 8) = -2\n(-2) + (1) = -1, left: ((6 - 8) + (4 / 4)) = -1\nroll back, left: (4 / 4) = 1, (6 - 8) = -2\nroll back, left: (6 - 8) = -2, 4, 4\n(4) - (-2) = 6, left: (4 - (6 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (4 - (6 - 8))) = 24\nreach 24! expression: (4 * (4 - (6 - 8)))"}, {"input": "4 4 6 8\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 4, 6\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, (4 - 8) = -4\nroll back, left: (4 - 8) = -4, 4, 6\n(4) / (-4) = -1, left: (4 / (4 - 8)) = -1, 6\nroll back, left: (4 - 8) = -4, 4, 6\nroll back, left: 4 4 6 8\n(4) + (8) = 12, left: (4 + 8) = 12, 4, 6\n(6) - (4) = 2, left: (6 - 4) = 2, (4 + 8) = 12\n(12) * (2) = 24, left: ((4 + 8) * (6 - 4)) = 24\nreach 24! expression: ((4 + 8) * (6 - 4))"}, {"input": "12 6 9 5\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 12, 6\n(6) + (-4) = 2, left: (6 + (5 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 + (5 - 9))) = 24\nreach 24! expression: (12 * (6 + (5 - 9)))"}, {"input": "12 6 9 5\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (9 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (9 - 6))) = 24\nreach 24! expression: (12 * (5 - (9 - 6)))"}, {"input": "12 6 9 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 12, 6\n(6) - (4) = 2, left: (6 - (9 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 - (9 - 5))) = 24\nreach 24! expression: (12 * (6 - (9 - 5)))"}, {"input": "12 6 9 5\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 9, 5\n(5) - (9) = -4, left: (5 - 9) = -4, (6 - 12) = -6\n(-6) * (-4) = 24, left: ((6 - 12) * (5 - 9)) = 24\nreach 24! expression: ((6 - 12) * (5 - 9))"}, {"input": "12 6 9 5\n", "output": "(6) + (9) = 15, left: (6 + 9) = 15, 12, 5\nroll back, left: 12 6 9 5\n(9) - (6) = 3, left: (9 - 6) = 3, 12, 5\n(3) / (12) = 1/4, left: ((9 - 6) / 12) = 1/4, 5\nroll back, left: (9 - 6) = 3, 12, 5\n(12) / (3) = 4, left: (12 / (9 - 6)) = 4, 5\nroll back, left: (9 - 6) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (9 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (9 - 6))) = 24\nreach 24! expression: (12 * (5 - (9 - 6)))"}, {"input": "12 6 9 5\n", "output": "(6) * (9) = 54, left: (6 * 9) = 54, 12, 5\n(54) - (12) = 42, left: ((6 * 9) - 12) = 42, 5\nroll back, left: (6 * 9) = 54, 12, 5\nroll back, left: 12 6 9 5\n(9) - (6) = 3, left: (9 - 6) = 3, 12, 5\n(12) * (3) = 36, left: (12 * (9 - 6)) = 36, 5\nroll back, left: (9 - 6) = 3, 12, 5\n(5) - (3) = 2, left: (5 - (9 - 6)) = 2, 12\n(12) * (2) = 24, left: (12 * (5 - (9 - 6))) = 24\nreach 24! expression: (12 * (5 - (9 - 6)))"}, {"input": "12 6 9 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 12, 6\n(6) - (4) = 2, left: (6 - (9 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 - (9 - 5))) = 24\nreach 24! expression: (12 * (6 - (9 - 5)))"}, {"input": "12 6 9 5\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 6, 5\n(6) + (5) = 11, left: (6 + 5) = 11, (12 - 9) = 3\nroll back, left: (12 - 9) = 3, 6, 5\nroll back, left: 12 6 9 5\n(12) * (9) = 108, left: (12 * 9) = 108, 6, 5\nroll back, left: 12 6 9 5\n(6) - (12) = -6, left: (6 - 12) = -6, 9, 5\n(5) - (9) = -4, left: (5 - 9) = -4, (6 - 12) = -6\n(-6) * (-4) = 24, left: ((6 - 12) * (5 - 9)) = 24\nreach 24! expression: ((6 - 12) * (5 - 9))"}, {"input": "12 6 9 5\n", "output": "(9) + (5) = 14, left: (9 + 5) = 14, 12, 6\nroll back, left: 12 6 9 5\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, 12, 6\n(6) - (12) = -6, left: (6 - 12) = -6, (9 / 5) = 9/5\nroll back, left: (9 / 5) = 9/5, 12, 6\nroll back, left: 12 6 9 5\n(5) - (9) = -4, left: (5 - 9) = -4, 12, 6\n(6) + (-4) = 2, left: (6 + (5 - 9)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 + (5 - 9))) = 24\nreach 24! expression: (12 * (6 + (5 - 9)))"}, {"input": "12 6 9 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 12, 6\n(6) - (4) = 2, left: (6 - (9 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 - (9 - 5))) = 24\nreach 24! expression: (12 * (6 - (9 - 5)))"}, {"input": "12 6 9 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 12, 6\n(6) - (4) = 2, left: (6 - (9 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 - (9 - 5))) = 24\nreach 24! expression: (12 * (6 - (9 - 5)))"}, {"input": "12 6 9 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 12, 6\n(6) - (4) = 2, left: (6 - (9 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (6 - (9 - 5))) = 24\nreach 24! expression: (12 * (6 - (9 - 5)))"}, {"input": "5 6 4 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 6, 4\n(1) / (4) = 1/4, left: ((5 / 5) / 4) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / ((5 / 5) / 4)) = 24\nreach 24! expression: (6 / ((5 / 5) / 4))"}, {"input": "5 6 4 5\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (5 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (5 - 6))) = 24\nreach 24! expression: (4 * (5 - (5 - 6)))"}, {"input": "5 6 4 5\n", "output": "(5) + (4) = 9, left: (5 + 4) = 9, 6, 5\n(9) - (5) = 4, left: ((5 + 4) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 + 4) - 5)) = 24\nreach 24! expression: (6 * ((5 + 4) - 5))"}, {"input": "5 6 4 5\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 6, 4\n(4) - (0) = 4, left: (4 - (5 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 - (5 - 5))) = 24\nreach 24! expression: (6 * (4 - (5 - 5)))"}, {"input": "5 6 4 5\n", "output": "(4) / (5) = 4/5, left: (4 / 5) = 4/5, 6, 5\n(6) * (5) = 30, left: (6 * 5) = 30, (4 / 5) = 4/5\n(4/5) * (30) = 24, left: ((4 / 5) * (6 * 5)) = 24\nreach 24! expression: ((4 / 5) * (6 * 5))"}, {"input": "5 6 4 5\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (5 - 6)) = 6, 4\n(4) - (6) = -2, left: (4 - (5 - (5 - 6))) = -2\nroll back, left: (5 - (5 - 6)) = 6, 4\n(6) - (4) = 2, left: ((5 - (5 - 6)) - 4) = 2\nroll back, left: (5 - (5 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (5 - 6))) = 24\nreach 24! expression: (4 * (5 - (5 - 6)))"}, {"input": "5 6 4 5\n", "output": "(5) + (4) = 9, left: (5 + 4) = 9, 6, 5\n(6) - (9) = -3, left: (6 - (5 + 4)) = -3, 5\n(5) / (-3) = -5/3, left: (5 / (6 - (5 + 4))) = -5/3\nroll back, left: (6 - (5 + 4)) = -3, 5\nroll back, left: (5 + 4) = 9, 6, 5\n(6) + (5) = 11, left: (6 + 5) = 11, (5 + 4) = 9\nroll back, left: (5 + 4) = 9, 6, 5\n(9) - (5) = 4, left: ((5 + 4) - 5) = 4, 6\n(6) * (4) = 24, left: (6 * ((5 + 4) - 5)) = 24\nreach 24! expression: (6 * ((5 + 4) - 5))"}, {"input": "5 6 4 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 6, 4\n(6) / (4) = 3/2, left: (6 / 4) = 3/2, (5 * 5) = 25\nroll back, left: (5 * 5) = 25, 6, 4\n(6) * (25) = 150, left: (6 * (5 * 5)) = 150, 4\nroll back, left: (5 * 5) = 25, 6, 4\nroll back, left: 5 6 4 5\n(5) - (5) = 0, left: (5 - 5) = 0, 6, 4\n(4) - (0) = 4, left: (4 - (5 - 5)) = 4, 6\n(6) * (4) = 24, left: (6 * (4 - (5 - 5))) = 24\nreach 24! expression: (6 * (4 - (5 - 5)))"}, {"input": "5 6 4 5\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (5 - 6)) = 6, 4\n(4) - (6) = -2, left: (4 - (5 - (5 - 6))) = -2\nroll back, left: (5 - (5 - 6)) = 6, 4\n(6) - (4) = 2, left: ((5 - (5 - 6)) - 4) = 2\nroll back, left: (5 - (5 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (5 - 6))) = 24\nreach 24! expression: (4 * (5 - (5 - 6)))"}, {"input": "5 6 4 5\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (5 - 6)) = 6, 4\n(4) - (6) = -2, left: (4 - (5 - (5 - 6))) = -2\nroll back, left: (5 - (5 - 6)) = 6, 4\n(6) - (4) = 2, left: ((5 - (5 - 6)) - 4) = 2\nroll back, left: (5 - (5 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (5 - 6))) = 24\nreach 24! expression: (4 * (5 - (5 - 6)))"}, {"input": "5 6 4 5\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 4, 5\n(5) - (-1) = 6, left: (5 - (5 - 6)) = 6, 4\n(4) - (6) = -2, left: (4 - (5 - (5 - 6))) = -2\nroll back, left: (5 - (5 - 6)) = 6, 4\n(6) - (4) = 2, left: ((5 - (5 - 6)) - 4) = 2\nroll back, left: (5 - (5 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (5 - (5 - 6))) = 24\nreach 24! expression: (4 * (5 - (5 - 6)))"}, {"input": "10 13 8 8\n", "output": "(10) * (8) = 80, left: (10 * 8) = 80, 13, 8\n(13) * (8) = 104, left: (13 * 8) = 104, (10 * 8) = 80\n(104) - (80) = 24, left: ((13 * 8) - (10 * 8)) = 24\nreach 24! expression: ((13 * 8) - (10 * 8))"}, {"input": "10 13 8 8\n", "output": "(13) * (8) = 104, left: (13 * 8) = 104, 10, 8\n(10) * (8) = 80, left: (10 * 8) = 80, (13 * 8) = 104\n(104) - (80) = 24, left: ((13 * 8) - (10 * 8)) = 24\nreach 24! expression: ((13 * 8) - (10 * 8))"}, {"input": "10 13 8 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 10, 13\n(13) + (1) = 14, left: (13 + (8 / 8)) = 14, 10\n(10) + (14) = 24, left: (10 + (13 + (8 / 8))) = 24\nreach 24! expression: (10 + (13 + (8 / 8)))"}, {"input": "5 12 10 3\n", "output": "(5) + (12) = 17, left: (5 + 12) = 17, 10, 3\n(10) + (17) = 27, left: (10 + (5 + 12)) = 27, 3\n(27) - (3) = 24, left: ((10 + (5 + 12)) - 3) = 24\nreach 24! expression: ((10 + (5 + 12)) - 3)"}, {"input": "5 12 10 3\n", "output": "(5) + (10) = 15, left: (5 + 10) = 15, 12, 3\n(12) + (15) = 27, left: (12 + (5 + 10)) = 27, 3\n(27) - (3) = 24, left: ((12 + (5 + 10)) - 3) = 24\nreach 24! expression: ((12 + (5 + 10)) - 3)"}, {"input": "5 12 10 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 12, 10\n(10) - (8) = 2, left: (10 - (5 + 3)) = 2, 12\n(12) * (2) = 24, left: (12 * (10 - (5 + 3))) = 24\nreach 24! expression: (12 * (10 - (5 + 3)))"}, {"input": "5 12 10 3\n", "output": "(12) + (10) = 22, left: (12 + 10) = 22, 5, 3\n(5) + (22) = 27, left: (5 + (12 + 10)) = 27, 3\n(27) - (3) = 24, left: ((5 + (12 + 10)) - 3) = 24\nreach 24! expression: ((5 + (12 + 10)) - 3)"}, {"input": "5 12 10 3\n", "output": "(10) - (5) = 5, left: (10 - 5) = 5, 12, 3\n(5) - (3) = 2, left: ((10 - 5) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 - 5) - 3)) = 24\nreach 24! expression: (12 * ((10 - 5) - 3))"}, {"input": "5 12 10 3\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 12, 3\n(3) + (2) = 5, left: (3 + (10 / 5)) = 5, 12\nroll back, left: (10 / 5) = 2, 12, 3\n(12) * (2) = 24, left: (12 * (10 / 5)) = 24, 3\nroll back, left: (10 / 5) = 2, 12, 3\nroll back, left: 5 12 10 3\n(10) - (5) = 5, left: (10 - 5) = 5, 12, 3\n(5) - (3) = 2, left: ((10 - 5) - 3) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 - 5) - 3)) = 24\nreach 24! expression: (12 * ((10 - 5) - 3))"}, {"input": "8 10 8 1\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 8, 10\n(10) + (-7) = 3, left: (10 + (1 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 + (1 - 8))) = 24\nreach 24! expression: (8 * (10 + (1 - 8)))"}, {"input": "8 10 8 1\n", "output": "(10) + (1) = 11, left: (10 + 1) = 11, 8, 8\n(11) - (8) = 3, left: ((10 + 1) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 + 1) - 8)) = 24\nreach 24! expression: (8 * ((10 + 1) - 8))"}, {"input": "8 10 8 1\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 8, 1\n(1) - (-2) = 3, left: (1 - (8 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (8 - 10))) = 24\nreach 24! expression: (8 * (1 - (8 - 10)))"}, {"input": "8 10 8 1\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 10, 8\n(10) - (7) = 3, left: (10 - (8 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 - (8 - 1))) = 24\nreach 24! expression: (8 * (10 - (8 - 1)))"}, {"input": "8 10 8 1\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 8, 10\n(10) * (-7) = -70, left: (10 * (1 - 8)) = -70, 8\n(8) / (-70) = -4/35, left: (8 / (10 * (1 - 8))) = -4/35\nroll back, left: (10 * (1 - 8)) = -70, 8\nroll back, left: (1 - 8) = -7, 8, 10\n(10) + (-7) = 3, left: (10 + (1 - 8)) = 3, 8\n(8) - (3) = 5, left: (8 - (10 + (1 - 8))) = 5\nroll back, left: (10 + (1 - 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 + (1 - 8))) = 24\nreach 24! expression: (8 * (10 + (1 - 8)))"}, {"input": "8 10 8 1\n", "output": "(10) / (8) = 5/4, left: (10 / 8) = 5/4, 8, 1\n(8) + (1) = 9, left: (8 + 1) = 9, (10 / 8) = 5/4\nroll back, left: (10 / 8) = 5/4, 8, 1\n(5/4) - (8) = -27/4, left: ((10 / 8) - 8) = -27/4, 1\nroll back, left: (10 / 8) = 5/4, 8, 1\nroll back, left: 8 10 8 1\n(8) - (10) = -2, left: (8 - 10) = -2, 8, 1\n(1) - (-2) = 3, left: (1 - (8 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (8 - 10))) = 24\nreach 24! expression: (8 * (1 - (8 - 10)))"}, {"input": "8 10 8 1\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 8, 1\n(8) - (1) = 7, left: (8 - 1) = 7, (8 - 10) = -2\n(7) - (-2) = 9, left: ((8 - 1) - (8 - 10)) = 9\nroll back, left: (8 - 1) = 7, (8 - 10) = -2\nroll back, left: (8 - 10) = -2, 8, 1\n(1) - (-2) = 3, left: (1 - (8 - 10)) = 3, 8\n(8) - (3) = 5, left: (8 - (1 - (8 - 10))) = 5\nroll back, left: (1 - (8 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (1 - (8 - 10))) = 24\nreach 24! expression: (8 * (1 - (8 - 10)))"}, {"input": "8 10 8 1\n", "output": "(1) / (10) = 1/10, left: (1 / 10) = 1/10, 8, 8\n(8) / (1/10) = 80, left: (8 / (1 / 10)) = 80, 8\nroll back, left: (1 / 10) = 1/10, 8, 8\nroll back, left: 8 10 8 1\n(10) * (1) = 10, left: (10 * 1) = 10, 8, 8\nroll back, left: 8 10 8 1\n(10) + (1) = 11, left: (10 + 1) = 11, 8, 8\n(11) - (8) = 3, left: ((10 + 1) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 + 1) - 8)) = 24\nreach 24! expression: (8 * ((10 + 1) - 8))"}, {"input": "8 10 8 1\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 10, 1\n(16) - (10) = 6, left: ((8 + 8) - 10) = 6, 1\n(6) / (1) = 6, left: (((8 + 8) - 10) / 1) = 6\nroll back, left: ((8 + 8) - 10) = 6, 1\nroll back, left: (8 + 8) = 16, 10, 1\nroll back, left: 8 10 8 1\n(8) - (1) = 7, left: (8 - 1) = 7, 10, 8\n(10) - (7) = 3, left: (10 - (8 - 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 - (8 - 1))) = 24\nreach 24! expression: (8 * (10 - (8 - 1)))"}, {"input": "10 10 12 3\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 10, 3\n(10) + (-2) = 8, left: (10 + (10 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 + (10 - 12))) = 24\nreach 24! expression: (3 * (10 + (10 - 12)))"}, {"input": "10 10 12 3\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 10, 10\n(10) + (10) = 20, left: (10 + 10) = 20, (12 / 3) = 4\n(4) + (20) = 24, left: ((12 / 3) + (10 + 10)) = 24\nreach 24! expression: ((12 / 3) + (10 + 10))"}, {"input": "10 10 12 3\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 10, 12\nroll back, left: 10 10 12 3\n(3) - (10) = -7, left: (3 - 10) = -7, 10, 12\nroll back, left: 10 10 12 3\n(10) * (12) = 120, left: (10 * 12) = 120, 10, 3\nroll back, left: 10 10 12 3\n(10) - (12) = -2, left: (10 - 12) = -2, 10, 3\n(10) + (-2) = 8, left: (10 + (10 - 12)) = 8, 3\n(3) * (8) = 24, left: (3 * (10 + (10 - 12))) = 24\nreach 24! expression: (3 * (10 + (10 - 12)))"}, {"input": "3 8 11 5\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 3, 5\n(5) - (-3) = 8, left: (5 - (8 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 - (8 - 11))) = 24\nreach 24! expression: (3 * (5 - (8 - 11)))"}, {"input": "3 8 11 5\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 3, 8\n(6) - (3) = 3, left: ((11 - 5) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 5) - 3)) = 24\nreach 24! expression: (8 * ((11 - 5) - 3))"}, {"input": "3 8 11 5\n", "output": "(3) + (5) = 8, left: (3 + 5) = 8, 8, 11\n(11) - (8) = 3, left: (11 - 8) = 3, (3 + 5) = 8\n(8) * (3) = 24, left: ((3 + 5) * (11 - 8)) = 24\nreach 24! expression: ((3 + 5) * (11 - 8))"}, {"input": "3 8 11 5\n", "output": "(8) * (11) = 88, left: (8 * 11) = 88, 3, 5\n(3) + (88) = 91, left: (3 + (8 * 11)) = 91, 5\n(91) - (5) = 86, left: ((3 + (8 * 11)) - 5) = 86\nroll back, left: (3 + (8 * 11)) = 91, 5\nroll back, left: (8 * 11) = 88, 3, 5\nroll back, left: 3 8 11 5\n(8) - (11) = -3, left: (8 - 11) = -3, 3, 5\n(5) - (-3) = 8, left: (5 - (8 - 11)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 - (8 - 11))) = 24\nreach 24! expression: (3 * (5 - (8 - 11)))"}, {"input": "3 8 11 5\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 3, 8\n(8) * (6) = 48, left: (8 * (11 - 5)) = 48, 3\nroll back, left: (11 - 5) = 6, 3, 8\n(3) / (6) = 1/2, left: (3 / (11 - 5)) = 1/2, 8\nroll back, left: (11 - 5) = 6, 3, 8\n(3) - (6) = -3, left: (3 - (11 - 5)) = -3, 8\nroll back, left: (11 - 5) = 6, 3, 8\n(6) - (3) = 3, left: ((11 - 5) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 5) - 3)) = 24\nreach 24! expression: (8 * ((11 - 5) - 3))"}, {"input": "3 8 11 5\n", "output": "(5) / (3) = 5/3, left: (5 / 3) = 5/3, 8, 11\n(11) - (8) = 3, left: (11 - 8) = 3, (5 / 3) = 5/3\nroll back, left: (5 / 3) = 5/3, 8, 11\nroll back, left: 3 8 11 5\n(3) - (5) = -2, left: (3 - 5) = -2, 8, 11\nroll back, left: 3 8 11 5\n(3) + (5) = 8, left: (3 + 5) = 8, 8, 11\n(11) - (8) = 3, left: (11 - 8) = 3, (3 + 5) = 8\n(8) * (3) = 24, left: ((3 + 5) * (11 - 8)) = 24\nreach 24! expression: ((3 + 5) * (11 - 8))"}, {"input": "3 8 11 5\n", "output": "(11) - (5) = 6, left: (11 - 5) = 6, 3, 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, (11 - 5) = 6\nroll back, left: (11 - 5) = 6, 3, 8\n(8) + (6) = 14, left: (8 + (11 - 5)) = 14, 3\nroll back, left: (11 - 5) = 6, 3, 8\n(3) + (6) = 9, left: (3 + (11 - 5)) = 9, 8\nroll back, left: (11 - 5) = 6, 3, 8\n(6) - (3) = 3, left: ((11 - 5) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((11 - 5) - 3)) = 24\nreach 24! expression: (8 * ((11 - 5) - 3))"}, {"input": "3 2 1 3\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 3, 2\n(3) * (4) = 12, left: (3 * (1 + 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 * (1 + 3))) = 24\nreach 24! expression: (2 * (3 * (1 + 3)))"}, {"input": "3 2 1 3\n", "output": "(3) * (2) = 6, left: (3 * 2) = 6, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (3 * 2) = 6\n(6) * (4) = 24, left: ((3 * 2) * (1 + 3)) = 24\nreach 24! expression: ((3 * 2) * (1 + 3))"}, {"input": "3 2 1 3\n", "output": "(2) * (3) = 6, left: (2 * 3) = 6, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (2 * 3) = 6\n(6) * (4) = 24, left: ((2 * 3) * (3 + 1)) = 24\nreach 24! expression: ((2 * 3) * (3 + 1))"}, {"input": "3 2 1 3\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 3, 3\nroll back, left: 3 2 1 3\n(2) + (1) = 3, left: (2 + 1) = 3, 3, 3\n(3) + (3) = 6, left: (3 + (2 + 1)) = 6, 3\nroll back, left: (2 + 1) = 3, 3, 3\nroll back, left: 3 2 1 3\n(2) * (3) = 6, left: (2 * 3) = 6, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (2 * 3) = 6\n(6) * (4) = 24, left: ((2 * 3) * (3 + 1)) = 24\nreach 24! expression: ((2 * 3) * (3 + 1))"}, {"input": "3 2 1 3\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 2, 1\n(2) + (1) = 3, left: (2 + (3 / 3)) = 3, 1\n(1) / (3) = 1/3, left: (1 / (2 + (3 / 3))) = 1/3\nroll back, left: (2 + (3 / 3)) = 3, 1\nroll back, left: (3 / 3) = 1, 2, 1\nroll back, left: 3 2 1 3\n(2) * (3) = 6, left: (2 * 3) = 6, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (2 * 3) = 6\n(6) * (4) = 24, left: ((2 * 3) * (3 + 1)) = 24\nreach 24! expression: ((2 * 3) * (3 + 1))"}, {"input": "3 2 1 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 2, 1\nroll back, left: 3 2 1 3\n(3) / (3) = 1, left: (3 / 3) = 1, 2, 1\nroll back, left: 3 2 1 3\n(3) * (3) = 9, left: (3 * 3) = 9, 2, 1\nroll back, left: 3 2 1 3\n(2) * (3) = 6, left: (2 * 3) = 6, 3, 1\n(3) + (1) = 4, left: (3 + 1) = 4, (2 * 3) = 6\n(6) * (4) = 24, left: ((2 * 3) * (3 + 1)) = 24\nreach 24! expression: ((2 * 3) * (3 + 1))"}, {"input": "3 2 1 3\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 3, 2\n(3) + (4) = 7, left: (3 + (1 + 3)) = 7, 2\nroll back, left: (1 + 3) = 4, 3, 2\n(3) / (4) = 3/4, left: (3 / (1 + 3)) = 3/4, 2\nroll back, left: (1 + 3) = 4, 3, 2\n(3) - (4) = -1, left: (3 - (1 + 3)) = -1, 2\nroll back, left: (1 + 3) = 4, 3, 2\n(3) * (4) = 12, left: (3 * (1 + 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (3 * (1 + 3))) = 24\nreach 24! expression: (2 * (3 * (1 + 3)))"}, {"input": "3 2 1 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 2, 1\n(2) / (1) = 2, left: (2 / 1) = 2, (3 + 3) = 6\nroll back, left: (3 + 3) = 6, 2, 1\nroll back, left: 3 2 1 3\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 1, 3\nroll back, left: 3 2 1 3\n(3) * (2) = 6, left: (3 * 2) = 6, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (3 * 2) = 6\n(6) * (4) = 24, left: ((3 * 2) * (1 + 3)) = 24\nreach 24! expression: ((3 * 2) * (1 + 3))"}, {"input": "2 10 1 2\n", "output": "(10) * (1) = 10, left: (10 * 1) = 10, 2, 2\n(2) + (10) = 12, left: (2 + (10 * 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 + (10 * 1))) = 24\nreach 24! expression: (2 * (2 + (10 * 1)))"}, {"input": "2 10 1 2\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (10 - 2) = 8\n(8) * (3) = 24, left: ((10 - 2) * (2 + 1)) = 24\nreach 24! expression: ((10 - 2) * (2 + 1))"}, {"input": "2 10 1 2\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 2, 10\n(2) + (10) = 12, left: (2 + 10) = 12, (1 / 2) = 1/2\n(12) / (1/2) = 24, left: ((2 + 10) / (1 / 2)) = 24\nreach 24! expression: ((2 + 10) / (1 / 2))"}, {"input": "2 10 1 2\n", "output": "(10) + (1) = 11, left: (10 + 1) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (10 + 1)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (10 + 1))) = 24\nreach 24! expression: (2 + (2 * (10 + 1)))"}, {"input": "2 10 1 2\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 10, 1\nroll back, left: 2 10 1 2\n(2) + (2) = 4, left: (2 + 2) = 4, 10, 1\nroll back, left: 2 10 1 2\n(2) / (2) = 1, left: (2 / 2) = 1, 10, 1\nroll back, left: 2 10 1 2\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 2, 10\n(2) + (10) = 12, left: (2 + 10) = 12, (1 / 2) = 1/2\n(12) / (1/2) = 24, left: ((2 + 10) / (1 / 2)) = 24\nreach 24! expression: ((2 + 10) / (1 / 2))"}, {"input": "2 10 1 2\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 10, 1\n(10) - (1) = 9, left: (10 - 1) = 9, (2 * 2) = 4\n(4) / (9) = 4/9, left: ((2 * 2) / (10 - 1)) = 4/9\nroll back, left: (10 - 1) = 9, (2 * 2) = 4\nroll back, left: (2 * 2) = 4, 10, 1\nroll back, left: 2 10 1 2\n(10) - (2) = 8, left: (10 - 2) = 8, 2, 1\n(2) + (1) = 3, left: (2 + 1) = 3, (10 - 2) = 8\n(8) * (3) = 24, left: ((10 - 2) * (2 + 1)) = 24\nreach 24! expression: ((10 - 2) * (2 + 1))"}, {"input": "5 11 2 7\n", "output": "(5) * (11) = 55, left: (5 * 11) = 55, 2, 7\n(55) - (7) = 48, left: ((5 * 11) - 7) = 48, 2\n(48) / (2) = 24, left: (((5 * 11) - 7) / 2) = 24\nreach 24! expression: (((5 * 11) - 7) / 2)"}, {"input": "5 11 2 7\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 5, 7\n(5) - (22) = -17, left: (5 - (11 * 2)) = -17, 7\n(7) - (-17) = 24, left: (7 - (5 - (11 * 2))) = 24\nreach 24! expression: (7 - (5 - (11 * 2)))"}, {"input": "5 11 2 7\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 5, 7\n(7) + (22) = 29, left: (7 + (11 * 2)) = 29, 5\n(29) - (5) = 24, left: ((7 + (11 * 2)) - 5) = 24\nreach 24! expression: ((7 + (11 * 2)) - 5)"}, {"input": "5 11 2 7\n", "output": "(7) - (11) = -4, left: (7 - 11) = -4, 5, 2\n(2) * (-4) = -8, left: (2 * (7 - 11)) = -8, 5\nroll back, left: (7 - 11) = -4, 5, 2\nroll back, left: 5 11 2 7\n(11) / (7) = 11/7, left: (11 / 7) = 11/7, 5, 2\nroll back, left: 5 11 2 7\n(11) * (2) = 22, left: (11 * 2) = 22, 5, 7\n(7) + (22) = 29, left: (7 + (11 * 2)) = 29, 5\n(29) - (5) = 24, left: ((7 + (11 * 2)) - 5) = 24\nreach 24! expression: ((7 + (11 * 2)) - 5)"}, {"input": "5 11 2 7\n", "output": "(2) / (11) = 2/11, left: (2 / 11) = 2/11, 5, 7\n(2/11) / (7) = 2/77, left: ((2 / 11) / 7) = 2/77, 5\nroll back, left: (2 / 11) = 2/11, 5, 7\nroll back, left: 5 11 2 7\n(11) - (2) = 9, left: (11 - 2) = 9, 5, 7\nroll back, left: 5 11 2 7\n(11) * (2) = 22, left: (11 * 2) = 22, 5, 7\n(7) + (22) = 29, left: (7 + (11 * 2)) = 29, 5\n(29) - (5) = 24, left: ((7 + (11 * 2)) - 5) = 24\nreach 24! expression: ((7 + (11 * 2)) - 5)"}, {"input": "5 11 2 7\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 11, 7\nroll back, left: 5 11 2 7\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 11, 7\n(7) - (2/5) = 33/5, left: (7 - (2 / 5)) = 33/5, 11\nroll back, left: (2 / 5) = 2/5, 11, 7\nroll back, left: 5 11 2 7\n(11) * (2) = 22, left: (11 * 2) = 22, 5, 7\n(7) + (22) = 29, left: (7 + (11 * 2)) = 29, 5\n(29) - (5) = 24, left: ((7 + (11 * 2)) - 5) = 24\nreach 24! expression: ((7 + (11 * 2)) - 5)"}, {"input": "11 9 4 8\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 11, 9\n(11) + (9) = 20, left: (11 + 9) = 20, (4 - 8) = -4\n(20) - (-4) = 24, left: ((11 + 9) - (4 - 8)) = 24\nreach 24! expression: ((11 + 9) - (4 - 8))"}, {"input": "11 9 4 8\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 11, 9\n(11) + (9) = 20, left: (11 + 9) = 20, (8 - 4) = 4\n(4) + (20) = 24, left: ((8 - 4) + (11 + 9)) = 24\nreach 24! expression: ((8 - 4) + (11 + 9))"}, {"input": "11 9 4 8\n", "output": "(9) + (8) = 17, left: (9 + 8) = 17, 11, 4\n(4) - (17) = -13, left: (4 - (9 + 8)) = -13, 11\n(11) - (-13) = 24, left: (11 - (4 - (9 + 8))) = 24\nreach 24! expression: (11 - (4 - (9 + 8)))"}, {"input": "11 9 4 8\n", "output": "(11) + (8) = 19, left: (11 + 8) = 19, 9, 4\n(9) + (19) = 28, left: (9 + (11 + 8)) = 28, 4\n(28) - (4) = 24, left: ((9 + (11 + 8)) - 4) = 24\nreach 24! expression: ((9 + (11 + 8)) - 4)"}, {"input": "11 9 4 8\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 11, 9\n(2) / (11) = 2/11, left: ((8 / 4) / 11) = 2/11, 9\nroll back, left: (8 / 4) = 2, 11, 9\n(11) - (2) = 9, left: (11 - (8 / 4)) = 9, 9\nroll back, left: (8 / 4) = 2, 11, 9\nroll back, left: 11 9 4 8\n(8) - (4) = 4, left: (8 - 4) = 4, 11, 9\n(11) + (9) = 20, left: (11 + 9) = 20, (8 - 4) = 4\n(4) + (20) = 24, left: ((8 - 4) + (11 + 9)) = 24\nreach 24! expression: ((8 - 4) + (11 + 9))"}, {"input": "4 8 7 7\n", "output": "(8) - (7) = 1, left: (8 - 7) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (8 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (8 - 7))) = 24\nreach 24! expression: (4 * (7 - (8 - 7)))"}, {"input": "4 8 7 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (7 / 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (7 / 7))) = 24\nreach 24! expression: (8 * (4 - (7 / 7)))"}, {"input": "4 8 7 7\n", "output": "(7) - (8) = -1, left: (7 - 8) = -1, 4, 7\n(7) + (-1) = 6, left: (7 + (7 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (7 - 8))) = 24\nreach 24! expression: (4 * (7 + (7 - 8)))"}, {"input": "4 8 7 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 4, 8\n(14) - (8) = 6, left: ((7 + 7) - 8) = 6, 4\n(4) * (6) = 24, left: (4 * ((7 + 7) - 8)) = 24\nreach 24! expression: (4 * ((7 + 7) - 8))"}, {"input": "4 8 7 7\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 4, 8\n(14) - (4) = 10, left: ((7 + 7) - 4) = 10, 8\nroll back, left: (7 + 7) = 14, 4, 8\n(4) + (14) = 18, left: (4 + (7 + 7)) = 18, 8\nroll back, left: (7 + 7) = 14, 4, 8\n(14) / (4) = 7/2, left: ((7 + 7) / 4) = 7/2, 8\nroll back, left: (7 + 7) = 14, 4, 8\n(14) - (8) = 6, left: ((7 + 7) - 8) = 6, 4\n(4) * (6) = 24, left: (4 * ((7 + 7) - 8)) = 24\nreach 24! expression: (4 * ((7 + 7) - 8))"}, {"input": "4 8 7 7\n", "output": "(8) / (7) = 8/7, left: (8 / 7) = 8/7, 4, 7\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, (8 / 7) = 8/7\nroll back, left: (8 / 7) = 8/7, 4, 7\nroll back, left: 4 8 7 7\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, 4, 7\nroll back, left: 4 8 7 7\n(8) - (7) = 1, left: (8 - 7) = 1, 4, 7\n(7) - (1) = 6, left: (7 - (8 - 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (8 - 7))) = 24\nreach 24! expression: (4 * (7 - (8 - 7)))"}, {"input": "4 8 7 7\n", "output": "(4) + (7) = 11, left: (4 + 7) = 11, 8, 7\nroll back, left: 4 8 7 7\n(4) * (7) = 28, left: (4 * 7) = 28, 8, 7\nroll back, left: 4 8 7 7\n(4) - (7) = -3, left: (4 - 7) = -3, 8, 7\nroll back, left: 4 8 7 7\n(7) + (7) = 14, left: (7 + 7) = 14, 4, 8\n(14) - (8) = 6, left: ((7 + 7) - 8) = 6, 4\n(4) * (6) = 24, left: (4 * ((7 + 7) - 8)) = 24\nreach 24! expression: (4 * ((7 + 7) - 8))"}, {"input": "4 8 7 7\n", "output": "(7) / (8) = 7/8, left: (7 / 8) = 7/8, 4, 7\n(4) / (7/8) = 32/7, left: (4 / (7 / 8)) = 32/7, 7\nroll back, left: (7 / 8) = 7/8, 4, 7\nroll back, left: 4 8 7 7\n(8) + (7) = 15, left: (8 + 7) = 15, 4, 7\nroll back, left: 4 8 7 7\n(7) - (8) = -1, left: (7 - 8) = -1, 4, 7\n(7) + (-1) = 6, left: (7 + (7 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (7 - 8))) = 24\nreach 24! expression: (4 * (7 + (7 - 8)))"}, {"input": "4 8 7 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (7 / 7)) = 3, 8\n(3) / (8) = 3/8, left: ((4 - (7 / 7)) / 8) = 3/8\nroll back, left: (4 - (7 / 7)) = 3, 8\n(8) - (3) = 5, left: (8 - (4 - (7 / 7))) = 5\nroll back, left: (4 - (7 / 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (7 / 7))) = 24\nreach 24! expression: (8 * (4 - (7 / 7)))"}, {"input": "4 8 7 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (7 / 7)) = 3, 8\n(3) / (8) = 3/8, left: ((4 - (7 / 7)) / 8) = 3/8\nroll back, left: (4 - (7 / 7)) = 3, 8\n(8) - (3) = 5, left: (8 - (4 - (7 / 7))) = 5\nroll back, left: (4 - (7 / 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (7 / 7))) = 24\nreach 24! expression: (8 * (4 - (7 / 7)))"}, {"input": "4 8 7 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (7 / 7)) = 3, 8\n(3) / (8) = 3/8, left: ((4 - (7 / 7)) / 8) = 3/8\nroll back, left: (4 - (7 / 7)) = 3, 8\n(8) - (3) = 5, left: (8 - (4 - (7 / 7))) = 5\nroll back, left: (4 - (7 / 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (7 / 7))) = 24\nreach 24! expression: (8 * (4 - (7 / 7)))"}, {"input": "4 8 7 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 4, 8\n(4) - (1) = 3, left: (4 - (7 / 7)) = 3, 8\n(3) / (8) = 3/8, left: ((4 - (7 / 7)) / 8) = 3/8\nroll back, left: (4 - (7 / 7)) = 3, 8\n(8) - (3) = 5, left: (8 - (4 - (7 / 7))) = 5\nroll back, left: (4 - (7 / 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (7 / 7))) = 24\nreach 24! expression: (8 * (4 - (7 / 7)))"}, {"input": "1 13 10 7\n", "output": "(1) + (7) = 8, left: (1 + 7) = 8, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (1 + 7) = 8\n(8) * (3) = 24, left: ((1 + 7) * (13 - 10)) = 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "1 13 10 7\n", "output": "(7) / (10) = 7/10, left: (7 / 10) = 7/10, 1, 13\nroll back, left: 1 13 10 7\n(10) + (7) = 17, left: (10 + 7) = 17, 1, 13\nroll back, left: 1 13 10 7\n(7) - (1) = 6, left: (7 - 1) = 6, 13, 10\nroll back, left: 1 13 10 7\n(1) + (7) = 8, left: (1 + 7) = 8, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (1 + 7) = 8\n(8) * (3) = 24, left: ((1 + 7) * (13 - 10)) = 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "1 13 10 7\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 13, 10\n(1/7) - (10) = -69/7, left: ((1 / 7) - 10) = -69/7, 13\nroll back, left: (1 / 7) = 1/7, 13, 10\nroll back, left: 1 13 10 7\n(1) * (7) = 7, left: (1 * 7) = 7, 13, 10\nroll back, left: 1 13 10 7\n(1) + (7) = 8, left: (1 + 7) = 8, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (1 + 7) = 8\n(8) * (3) = 24, left: ((1 + 7) * (13 - 10)) = 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "1 13 10 7\n", "output": "(10) / (7) = 10/7, left: (10 / 7) = 10/7, 1, 13\nroll back, left: 1 13 10 7\n(7) / (1) = 7, left: (7 / 1) = 7, 13, 10\n(10) + (7) = 17, left: (10 + (7 / 1)) = 17, 13\nroll back, left: (7 / 1) = 7, 13, 10\nroll back, left: 1 13 10 7\n(1) + (7) = 8, left: (1 + 7) = 8, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (1 + 7) = 8\n(8) * (3) = 24, left: ((1 + 7) * (13 - 10)) = 24\nreach 24! expression: ((1 + 7) * (13 - 10))"}, {"input": "5 3 3 6\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 5, 3\n(5) - (-3) = 8, left: (5 - (3 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 - (3 - 6))) = 24\nreach 24! expression: (3 * (5 - (3 - 6)))"}, {"input": "5 3 3 6\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 3, 6\n(3) + (15) = 18, left: (3 + (5 * 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 + (5 * 3))) = 24\nreach 24! expression: (6 + (3 + (5 * 3)))"}, {"input": "5 3 3 6\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 3, 6\n(6) - (3) = 3, left: (6 - 3) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (6 - 3)) = 24\nreach 24! expression: ((5 + 3) * (6 - 3))"}, {"input": "5 3 3 6\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 3, 6\n(6) - (-2) = 8, left: (6 - (3 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (3 - 5))) = 24\nreach 24! expression: (3 * (6 - (3 - 5)))"}, {"input": "5 3 3 6\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 3, 6\n(6) + (2) = 8, left: (6 + (5 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (5 - 3))) = 24\nreach 24! expression: (3 * (6 + (5 - 3)))"}, {"input": "5 3 3 6\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 3, 6\n(3) / (8) = 3/8, left: (3 / (5 + 3)) = 3/8, 6\nroll back, left: (5 + 3) = 8, 3, 6\n(6) - (8) = -2, left: (6 - (5 + 3)) = -2, 3\n(3) - (-2) = 5, left: (3 - (6 - (5 + 3))) = 5\nroll back, left: (6 - (5 + 3)) = -2, 3\nroll back, left: (5 + 3) = 8, 3, 6\n(6) - (3) = 3, left: (6 - 3) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (6 - 3)) = 24\nreach 24! expression: ((5 + 3) * (6 - 3))"}, {"input": "5 3 3 6\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 3, 6\n(3) + (15) = 18, left: (3 + (5 * 3)) = 18, 6\n(6) - (18) = -12, left: (6 - (3 + (5 * 3))) = -12\nroll back, left: (3 + (5 * 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 + (5 * 3))) = 24\nreach 24! expression: (6 + (3 + (5 * 3)))"}, {"input": "5 3 3 6\n", "output": "(3) / (5) = 3/5, left: (3 / 5) = 3/5, 3, 6\nroll back, left: 5 3 3 6\n(5) - (3) = 2, left: (5 - 3) = 2, 3, 6\n(3) - (2) = 1, left: (3 - (5 - 3)) = 1, 6\nroll back, left: (5 - 3) = 2, 3, 6\n(6) - (2) = 4, left: (6 - (5 - 3)) = 4, 3\nroll back, left: (5 - 3) = 2, 3, 6\n(6) + (2) = 8, left: (6 + (5 - 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (5 - 3))) = 24\nreach 24! expression: (3 * (6 + (5 - 3)))"}, {"input": "5 3 3 6\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 5, 3\n(3) - (5) = -2, left: (3 - 5) = -2, (3 - 6) = -3\nroll back, left: (3 - 6) = -3, 5, 3\n(-3) - (3) = -6, left: ((3 - 6) - 3) = -6, 5\nroll back, left: (3 - 6) = -3, 5, 3\n(5) + (-3) = 2, left: (5 + (3 - 6)) = 2, 3\nroll back, left: (3 - 6) = -3, 5, 3\n(5) - (-3) = 8, left: (5 - (3 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 - (3 - 6))) = 24\nreach 24! expression: (3 * (5 - (3 - 6)))"}, {"input": "5 3 3 6\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 3, 6\n(6) - (-2) = 8, left: (6 - (3 - 5)) = 8, 3\n(3) - (8) = -5, left: (3 - (6 - (3 - 5))) = -5\nroll back, left: (6 - (3 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (3 - 5))) = 24\nreach 24! expression: (3 * (6 - (3 - 5)))"}, {"input": "5 3 3 6\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 3, 6\n(3) + (15) = 18, left: (3 + (5 * 3)) = 18, 6\n(6) - (18) = -12, left: (6 - (3 + (5 * 3))) = -12\nroll back, left: (3 + (5 * 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 + (5 * 3))) = 24\nreach 24! expression: (6 + (3 + (5 * 3)))"}, {"input": "5 3 3 6\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 3, 6\n(6) - (-2) = 8, left: (6 - (3 - 5)) = 8, 3\n(3) - (8) = -5, left: (3 - (6 - (3 - 5))) = -5\nroll back, left: (6 - (3 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (3 - 5))) = 24\nreach 24! expression: (3 * (6 - (3 - 5)))"}, {"input": "5 3 3 6\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 3, 6\n(3) + (15) = 18, left: (3 + (5 * 3)) = 18, 6\n(6) - (18) = -12, left: (6 - (3 + (5 * 3))) = -12\nroll back, left: (3 + (5 * 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 + (5 * 3))) = 24\nreach 24! expression: (6 + (3 + (5 * 3)))"}, {"input": "5 3 3 6\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 3, 6\n(6) - (-2) = 8, left: (6 - (3 - 5)) = 8, 3\n(3) - (8) = -5, left: (3 - (6 - (3 - 5))) = -5\nroll back, left: (6 - (3 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (3 - 5))) = 24\nreach 24! expression: (3 * (6 - (3 - 5)))"}, {"input": "5 3 3 6\n", "output": "(5) * (3) = 15, left: (5 * 3) = 15, 3, 6\n(3) + (15) = 18, left: (3 + (5 * 3)) = 18, 6\n(6) - (18) = -12, left: (6 - (3 + (5 * 3))) = -12\nroll back, left: (3 + (5 * 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 + (5 * 3))) = 24\nreach 24! expression: (6 + (3 + (5 * 3)))"}, {"input": "5 3 3 6\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 3, 6\n(6) - (-2) = 8, left: (6 - (3 - 5)) = 8, 3\n(3) - (8) = -5, left: (3 - (6 - (3 - 5))) = -5\nroll back, left: (6 - (3 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 - (3 - 5))) = 24\nreach 24! expression: (3 * (6 - (3 - 5)))"}, {"input": "8 3 4 4\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (8 - 3)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (8 - 3))) = 24\nreach 24! expression: (4 + (4 * (8 - 3)))"}, {"input": "8 3 4 4\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 8, 4\n(8) / (4/3) = 6, left: (8 / (4 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (8 / (4 / 3))) = 24\nreach 24! expression: (4 * (8 / (4 / 3)))"}, {"input": "8 3 4 4\n", "output": "(3) / (4) = 3/4, left: (3 / 4) = 3/4, 8, 4\n(8) * (3/4) = 6, left: (8 * (3 / 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (8 * (3 / 4))) = 24\nreach 24! expression: (4 * (8 * (3 / 4)))"}, {"input": "8 3 4 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 3, 4\n(3) * (4) = 12, left: (3 * 4) = 12, (8 / 4) = 2\n(2) * (12) = 24, left: ((8 / 4) * (3 * 4)) = 24\nreach 24! expression: ((8 / 4) * (3 * 4))"}, {"input": "8 3 4 4\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 8, 4\n(8) / (4/3) = 6, left: (8 / (4 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (8 / (4 / 3))) = 24\nreach 24! expression: (4 * (8 / (4 / 3)))"}, {"input": "8 3 4 4\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 4, 4\n(4) / (5) = 4/5, left: (4 / (8 - 3)) = 4/5, 4\n(4) - (4/5) = 16/5, left: (4 - (4 / (8 - 3))) = 16/5\nroll back, left: (4 / (8 - 3)) = 4/5, 4\nroll back, left: (8 - 3) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (8 - 3)) = 20, 4\n(20) / (4) = 5, left: ((4 * (8 - 3)) / 4) = 5\nroll back, left: (4 * (8 - 3)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (8 - 3))) = 24\nreach 24! expression: (4 + (4 * (8 - 3)))"}, {"input": "8 3 4 4\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 4, 4\n(4) - (5) = -1, left: (4 - (8 - 3)) = -1, 4\n(4) + (-1) = 3, left: (4 + (4 - (8 - 3))) = 3\nroll back, left: (4 - (8 - 3)) = -1, 4\nroll back, left: (8 - 3) = 5, 4, 4\n(4) + (5) = 9, left: (4 + (8 - 3)) = 9, 4\nroll back, left: (8 - 3) = 5, 4, 4\n(4) * (5) = 20, left: (4 * (8 - 3)) = 20, 4\n(4) + (20) = 24, left: (4 + (4 * (8 - 3))) = 24\nreach 24! expression: (4 + (4 * (8 - 3)))"}, {"input": "8 3 4 4\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 8, 4\n(8) / (4/3) = 6, left: (8 / (4 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (8 / (4 / 3))) = 24\nreach 24! expression: (4 * (8 / (4 / 3)))"}, {"input": "8 3 4 4\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 8, 4\n(8) / (4/3) = 6, left: (8 / (4 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (8 / (4 / 3))) = 24\nreach 24! expression: (4 * (8 / (4 / 3)))"}, {"input": "8 3 4 4\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 8, 4\n(8) / (4/3) = 6, left: (8 / (4 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (8 / (4 / 3))) = 24\nreach 24! expression: (4 * (8 / (4 / 3)))"}, {"input": "4 12 13 4\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (13 - 4)) = 36, 12\n(36) - (12) = 24, left: ((4 * (13 - 4)) - 12) = 24\nreach 24! expression: ((4 * (13 - 4)) - 12)"}, {"input": "4 12 13 4\n", "output": "(12) + (13) = 25, left: (12 + 13) = 25, 4, 4\n(4) / (4) = 1, left: (4 / 4) = 1, (12 + 13) = 25\n(25) - (1) = 24, left: ((12 + 13) - (4 / 4)) = 24\nreach 24! expression: ((12 + 13) - (4 / 4))"}, {"input": "4 12 13 4\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 4, 12\n(4) * (9) = 36, left: (4 * (13 - 4)) = 36, 12\n(36) - (12) = 24, left: ((4 * (13 - 4)) - 12) = 24\nreach 24! expression: ((4 * (13 - 4)) - 12)"}, {"input": "4 12 13 4\n", "output": "(4) - (13) = -9, left: (4 - 13) = -9, 4, 12\n(12) / (4) = 3, left: (12 / 4) = 3, (4 - 13) = -9\nroll back, left: (4 - 13) = -9, 4, 12\n(4) - (-9) = 13, left: (4 - (4 - 13)) = 13, 12\nroll back, left: (4 - 13) = -9, 4, 12\nroll back, left: 4 12 13 4\n(13) - (4) = 9, left: (13 - 4) = 9, 4, 12\n(4) * (9) = 36, left: (4 * (13 - 4)) = 36, 12\n(36) - (12) = 24, left: ((4 * (13 - 4)) - 12) = 24\nreach 24! expression: ((4 * (13 - 4)) - 12)"}, {"input": "4 12 13 4\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 4, 12\nroll back, left: 4 12 13 4\n(4) - (13) = -9, left: (4 - 13) = -9, 4, 12\nroll back, left: 4 12 13 4\n(13) * (4) = 52, left: (13 * 4) = 52, 4, 12\nroll back, left: 4 12 13 4\n(13) - (4) = 9, left: (13 - 4) = 9, 4, 12\n(4) * (9) = 36, left: (4 * (13 - 4)) = 36, 12\n(36) - (12) = 24, left: ((4 * (13 - 4)) - 12) = 24\nreach 24! expression: ((4 * (13 - 4)) - 12)"}, {"input": "9 13 9 11\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 9, 11\n(22) - (9) = 13, left: ((9 + 13) - 9) = 13, 11\n(11) + (13) = 24, left: (11 + ((9 + 13) - 9)) = 24\nreach 24! expression: (11 + ((9 + 13) - 9))"}, {"input": "9 13 9 11\n", "output": "(11) / (9) = 11/9, left: (11 / 9) = 11/9, 13, 9\n(9) * (11/9) = 11, left: (9 * (11 / 9)) = 11, 13\n(13) + (11) = 24, left: (13 + (9 * (11 / 9))) = 24\nreach 24! expression: (13 + (9 * (11 / 9)))"}, {"input": "9 13 9 11\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 9, 13\n(-2) - (9) = -11, left: ((9 - 11) - 9) = -11, 13\n(13) - (-11) = 24, left: (13 - ((9 - 11) - 9)) = 24\nreach 24! expression: (13 - ((9 - 11) - 9))"}, {"input": "9 13 9 11\n", "output": "(9) - (11) = -2, left: (9 - 11) = -2, 13, 9\n(13) + (9) = 22, left: (13 + 9) = 22, (9 - 11) = -2\n(22) - (-2) = 24, left: ((13 + 9) - (9 - 11)) = 24\nreach 24! expression: ((13 + 9) - (9 - 11))"}, {"input": "9 13 9 11\n", "output": "(9) - (9) = 0, left: (9 - 9) = 0, 13, 11\n(13) - (0) = 13, left: (13 - (9 - 9)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 - (9 - 9))) = 24\nreach 24! expression: (11 + (13 - (9 - 9)))"}, {"input": "9 13 9 11\n", "output": "(9) + (9) = 18, left: (9 + 9) = 18, 13, 11\n(13) - (18) = -5, left: (13 - (9 + 9)) = -5, 11\nroll back, left: (9 + 9) = 18, 13, 11\n(18) - (13) = 5, left: ((9 + 9) - 13) = 5, 11\nroll back, left: (9 + 9) = 18, 13, 11\nroll back, left: 9 13 9 11\n(9) - (9) = 0, left: (9 - 9) = 0, 13, 11\n(13) - (0) = 13, left: (13 - (9 - 9)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 - (9 - 9))) = 24\nreach 24! expression: (11 + (13 - (9 - 9)))"}, {"input": "6 4 1 1\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 4, 1\n(1) + (5) = 6, left: (1 + (6 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (6 - 1))) = 24\nreach 24! expression: (4 * (1 + (6 - 1)))"}, {"input": "6 4 1 1\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 4, 1\n(1) - (-5) = 6, left: (1 - (1 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 - (1 - 6))) = 24\nreach 24! expression: (4 * (1 - (1 - 6)))"}, {"input": "6 4 1 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 4, 1\n(1) * (6) = 6, left: (1 * (6 * 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 * (6 * 1))) = 24\nreach 24! expression: (4 * (1 * (6 * 1)))"}, {"input": "6 4 1 1\n", "output": "(1) * (1) = 1, left: (1 * 1) = 1, 6, 4\n(6) * (4) = 24, left: (6 * 4) = 24, (1 * 1) = 1\n(24) / (1) = 24, left: ((6 * 4) / (1 * 1)) = 24\nreach 24! expression: ((6 * 4) / (1 * 1))"}, {"input": "6 4 1 1\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 4, 1\n(5) - (4) = 1, left: ((6 - 1) - 4) = 1, 1\nroll back, left: (6 - 1) = 5, 4, 1\n(5) / (1) = 5, left: ((6 - 1) / 1) = 5, 4\nroll back, left: (6 - 1) = 5, 4, 1\n(1) * (5) = 5, left: (1 * (6 - 1)) = 5, 4\nroll back, left: (6 - 1) = 5, 4, 1\n(1) + (5) = 6, left: (1 + (6 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (6 - 1))) = 24\nreach 24! expression: (4 * (1 + (6 - 1)))"}, {"input": "6 4 1 1\n", "output": "(6) - (1) = 5, left: (6 - 1) = 5, 4, 1\n(1) / (5) = 1/5, left: (1 / (6 - 1)) = 1/5, 4\n(1/5) / (4) = 1/20, left: ((1 / (6 - 1)) / 4) = 1/20\nroll back, left: (1 / (6 - 1)) = 1/5, 4\n(4) / (1/5) = 20, left: (4 / (1 / (6 - 1))) = 20\nroll back, left: (1 / (6 - 1)) = 1/5, 4\nroll back, left: (6 - 1) = 5, 4, 1\n(1) + (5) = 6, left: (1 + (6 - 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 + (6 - 1))) = 24\nreach 24! expression: (4 * (1 + (6 - 1)))"}, {"input": "6 4 1 1\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 4, 1\n(-5) - (1) = -6, left: ((1 - 6) - 1) = -6, 4\nroll back, left: (1 - 6) = -5, 4, 1\n(1) / (-5) = -1/5, left: (1 / (1 - 6)) = -1/5, 4\nroll back, left: (1 - 6) = -5, 4, 1\n(1) - (-5) = 6, left: (1 - (1 - 6)) = 6, 4\n(4) / (6) = 2/3, left: (4 / (1 - (1 - 6))) = 2/3\nroll back, left: (1 - (1 - 6)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 - (1 - 6))) = 24\nreach 24! expression: (4 * (1 - (1 - 6)))"}, {"input": "6 4 1 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 4, 1\n(1) * (6) = 6, left: (1 * (6 * 1)) = 6, 4\n(4) + (6) = 10, left: (4 + (1 * (6 * 1))) = 10\nroll back, left: (1 * (6 * 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 * (6 * 1))) = 24\nreach 24! expression: (4 * (1 * (6 * 1)))"}, {"input": "6 4 1 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 4, 1\n(1) * (6) = 6, left: (1 * (6 * 1)) = 6, 4\n(4) + (6) = 10, left: (4 + (1 * (6 * 1))) = 10\nroll back, left: (1 * (6 * 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 * (6 * 1))) = 24\nreach 24! expression: (4 * (1 * (6 * 1)))"}, {"input": "6 4 1 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 4, 1\n(1) * (6) = 6, left: (1 * (6 * 1)) = 6, 4\n(4) + (6) = 10, left: (4 + (1 * (6 * 1))) = 10\nroll back, left: (1 * (6 * 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 * (6 * 1))) = 24\nreach 24! expression: (4 * (1 * (6 * 1)))"}, {"input": "6 4 1 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 4, 1\n(1) * (6) = 6, left: (1 * (6 * 1)) = 6, 4\n(4) + (6) = 10, left: (4 + (1 * (6 * 1))) = 10\nroll back, left: (1 * (6 * 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (1 * (6 * 1))) = 24\nreach 24! expression: (4 * (1 * (6 * 1)))"}, {"input": "5 6 7 5\n", "output": "(6) + (5) = 11, left: (6 + 5) = 11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (6 + 5) = 11\n(35) - (11) = 24, left: ((5 * 7) - (6 + 5)) = 24\nreach 24! expression: ((5 * 7) - (6 + 5))"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: (5 * 7) = 35, 6, 5\n(35) - (5) = 30, left: ((5 * 7) - 5) = 30, 6\n(30) - (6) = 24, left: (((5 * 7) - 5) - 6) = 24\nreach 24! expression: (((5 * 7) - 5) - 6)"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: (5 * 7) = 35, 6, 5\n(35) - (6) = 29, left: ((5 * 7) - 6) = 29, 5\n(29) - (5) = 24, left: (((5 * 7) - 6) - 5) = 24\nreach 24! expression: (((5 * 7) - 6) - 5)"}, {"input": "5 6 7 5\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (7 - 6) = 1\n(25) - (1) = 24, left: ((5 * 5) - (7 - 6)) = 24\nreach 24! expression: ((5 * 5) - (7 - 6))"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: (5 * 7) = 35, 6, 5\n(6) + (5) = 11, left: (6 + 5) = 11, (5 * 7) = 35\n(35) - (11) = 24, left: ((5 * 7) - (6 + 5)) = 24\nreach 24! expression: ((5 * 7) - (6 + 5))"}, {"input": "5 6 7 5\n", "output": "(5) * (7) = 35, left: (5 * 7) = 35, 6, 5\n(5) * (35) = 175, left: (5 * (5 * 7)) = 175, 6\n(6) - (175) = -169, left: (6 - (5 * (5 * 7))) = -169\nroll back, left: (5 * (5 * 7)) = 175, 6\nroll back, left: (5 * 7) = 35, 6, 5\n(35) - (5) = 30, left: ((5 * 7) - 5) = 30, 6\n(6) * (30) = 180, left: (6 * ((5 * 7) - 5)) = 180\nroll back, left: ((5 * 7) - 5) = 30, 6\n(30) - (6) = 24, left: (((5 * 7) - 5) - 6) = 24\nreach 24! expression: (((5 * 7) - 5) - 6)"}, {"input": "5 6 7 5\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 5, 7\nroll back, left: 5 6 7 5\n(6) * (5) = 30, left: (6 * 5) = 30, 5, 7\n(5) * (30) = 150, left: (5 * (6 * 5)) = 150, 7\nroll back, left: (6 * 5) = 30, 5, 7\nroll back, left: 5 6 7 5\n(6) + (5) = 11, left: (6 + 5) = 11, 5, 7\n(5) * (7) = 35, left: (5 * 7) = 35, (6 + 5) = 11\n(35) - (11) = 24, left: ((5 * 7) - (6 + 5)) = 24\nreach 24! expression: ((5 * 7) - (6 + 5))"}, {"input": "5 6 7 5\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 5, 5\n(5) / (1) = 5, left: (5 / (7 - 6)) = 5, 5\nroll back, left: (7 - 6) = 1, 5, 5\n(5) + (1) = 6, left: (5 + (7 - 6)) = 6, 5\n(5) - (6) = -1, left: (5 - (5 + (7 - 6))) = -1\nroll back, left: (5 + (7 - 6)) = 6, 5\nroll back, left: (7 - 6) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (7 - 6) = 1\n(25) - (1) = 24, left: ((5 * 5) - (7 - 6)) = 24\nreach 24! expression: ((5 * 5) - (7 - 6))"}, {"input": "8 3 5 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 8, 3\n(8) + (3) = 11, left: (8 + 3) = 11, (5 + 8) = 13\n(13) + (11) = 24, left: ((5 + 8) + (8 + 3)) = 24\nreach 24! expression: ((5 + 8) + (8 + 3))"}, {"input": "8 3 5 8\n", "output": "(3) + (8) = 11, left: (3 + 8) = 11, 8, 5\n(5) + (11) = 16, left: (5 + (3 + 8)) = 16, 8\n(8) + (16) = 24, left: (8 + (5 + (3 + 8))) = 24\nreach 24! expression: (8 + (5 + (3 + 8)))"}, {"input": "8 3 5 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 3, 5\n(3) + (16) = 19, left: (3 + (8 + 8)) = 19, 5\n(5) + (19) = 24, left: (5 + (3 + (8 + 8))) = 24\nreach 24! expression: (5 + (3 + (8 + 8)))"}, {"input": "8 3 5 8\n", "output": "(8) + (5) = 13, left: (8 + 5) = 13, 3, 8\n(3) + (13) = 16, left: (3 + (8 + 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (3 + (8 + 5))) = 24\nreach 24! expression: (8 + (3 + (8 + 5)))"}, {"input": "8 3 5 8\n", "output": "(8) + (3) = 11, left: (8 + 3) = 11, 5, 8\n(8) + (11) = 19, left: (8 + (8 + 3)) = 19, 5\n(5) + (19) = 24, left: (5 + (8 + (8 + 3))) = 24\nreach 24! expression: (5 + (8 + (8 + 3)))"}, {"input": "8 3 5 8\n", "output": "(8) + (3) = 11, left: (8 + 3) = 11, 5, 8\n(8) * (11) = 88, left: (8 * (8 + 3)) = 88, 5\n(5) + (88) = 93, left: (5 + (8 * (8 + 3))) = 93\nroll back, left: (8 * (8 + 3)) = 88, 5\nroll back, left: (8 + 3) = 11, 5, 8\n(11) / (8) = 11/8, left: ((8 + 3) / 8) = 11/8, 5\nroll back, left: (8 + 3) = 11, 5, 8\n(8) + (11) = 19, left: (8 + (8 + 3)) = 19, 5\n(5) + (19) = 24, left: (5 + (8 + (8 + 3))) = 24\nreach 24! expression: (5 + (8 + (8 + 3)))"}, {"input": "8 3 5 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 8, 5\n(8) * (8/3) = 64/3, left: (8 * (8 / 3)) = 64/3, 5\nroll back, left: (8 / 3) = 8/3, 8, 5\n(8/3) - (8) = -16/3, left: ((8 / 3) - 8) = -16/3, 5\nroll back, left: (8 / 3) = 8/3, 8, 5\nroll back, left: 8 3 5 8\n(3) + (8) = 11, left: (3 + 8) = 11, 8, 5\n(5) + (11) = 16, left: (5 + (3 + 8)) = 16, 8\n(8) + (16) = 24, left: (8 + (5 + (3 + 8))) = 24\nreach 24! expression: (8 + (5 + (3 + 8)))"}, {"input": "8 3 5 8\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 8, 3\nroll back, left: 8 3 5 8\n(5) - (8) = -3, left: (5 - 8) = -3, 8, 3\n(8) + (-3) = 5, left: (8 + (5 - 8)) = 5, 3\nroll back, left: (5 - 8) = -3, 8, 3\nroll back, left: 8 3 5 8\n(5) + (8) = 13, left: (5 + 8) = 13, 8, 3\n(8) + (3) = 11, left: (8 + 3) = 11, (5 + 8) = 13\n(13) + (11) = 24, left: ((5 + 8) + (8 + 3)) = 24\nreach 24! expression: ((5 + 8) + (8 + 3))"}, {"input": "8 3 5 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 3, 5\n(16) - (3) = 13, left: ((8 + 8) - 3) = 13, 5\nroll back, left: (8 + 8) = 16, 3, 5\n(16) / (3) = 16/3, left: ((8 + 8) / 3) = 16/3, 5\nroll back, left: (8 + 8) = 16, 3, 5\n(3) - (16) = -13, left: (3 - (8 + 8)) = -13, 5\nroll back, left: (8 + 8) = 16, 3, 5\n(3) + (16) = 19, left: (3 + (8 + 8)) = 19, 5\n(5) + (19) = 24, left: (5 + (3 + (8 + 8))) = 24\nreach 24! expression: (5 + (3 + (8 + 8)))"}, {"input": "8 3 5 8\n", "output": "(8) * (5) = 40, left: (8 * 5) = 40, 3, 8\n(40) / (3) = 40/3, left: ((8 * 5) / 3) = 40/3, 8\nroll back, left: (8 * 5) = 40, 3, 8\nroll back, left: 8 3 5 8\n(8) - (5) = 3, left: (8 - 5) = 3, 3, 8\nroll back, left: 8 3 5 8\n(8) + (5) = 13, left: (8 + 5) = 13, 3, 8\n(3) + (13) = 16, left: (3 + (8 + 5)) = 16, 8\n(8) + (16) = 24, left: (8 + (3 + (8 + 5))) = 24\nreach 24! expression: (8 + (3 + (8 + 5)))"}, {"input": "10 4 4 8\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 10, 4\n(10) * (2) = 20, left: (10 * (8 / 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (8 / 4))) = 24\nreach 24! expression: (4 + (10 * (8 / 4)))"}, {"input": "10 4 4 8\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 10, 4\n(4) - (10) = -6, left: (4 - 10) = -6, (4 - 8) = -4\n(-4) * (-6) = 24, left: ((4 - 8) * (4 - 10)) = 24\nreach 24! expression: ((4 - 8) * (4 - 10))"}, {"input": "10 4 4 8\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 4, 4\n(4) - (-2) = 6, left: (4 - (8 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (4 - (8 - 10))) = 24\nreach 24! expression: (4 * (4 - (8 - 10)))"}, {"input": "10 4 4 8\n", "output": "(10) / (4) = 5/2, left: (10 / 4) = 5/2, 4, 8\n(8) * (5/2) = 20, left: (8 * (10 / 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (8 * (10 / 4))) = 24\nreach 24! expression: (4 + (8 * (10 / 4)))"}, {"input": "10 4 4 8\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 10, 8\nroll back, left: 10 4 4 8\n(4) - (4) = 0, left: (4 - 4) = 0, 10, 8\n(10) + (8) = 18, left: (10 + 8) = 18, (4 - 4) = 0\nroll back, left: (4 - 4) = 0, 10, 8\nroll back, left: 10 4 4 8\n(8) - (10) = -2, left: (8 - 10) = -2, 4, 4\n(4) - (-2) = 6, left: (4 - (8 - 10)) = 6, 4\n(4) * (6) = 24, left: (4 * (4 - (8 - 10))) = 24\nreach 24! expression: (4 * (4 - (8 - 10)))"}, {"input": "10 4 4 8\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 10, 4\n(10) / (4) = 5/2, left: (10 / 4) = 5/2, (4 + 8) = 12\nroll back, left: (4 + 8) = 12, 10, 4\nroll back, left: 10 4 4 8\n(8) / (4) = 2, left: (8 / 4) = 2, 10, 4\n(2) / (10) = 1/5, left: ((8 / 4) / 10) = 1/5, 4\nroll back, left: (8 / 4) = 2, 10, 4\n(10) * (2) = 20, left: (10 * (8 / 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (8 / 4))) = 24\nreach 24! expression: (4 + (10 * (8 / 4)))"}, {"input": "13 3 3 7\n", "output": "(3) * (7) = 21, left: (3 * 7) = 21, 13, 3\n(21) - (13) = 8, left: ((3 * 7) - 13) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 7) - 13)) = 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "13 3 3 7\n", "output": "(7) / (3) = 7/3, left: (7 / 3) = 7/3, 13, 3\nroll back, left: 13 3 3 7\n(3) - (7) = -4, left: (3 - 7) = -4, 13, 3\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, (3 - 7) = -4\nroll back, left: (3 - 7) = -4, 13, 3\nroll back, left: 13 3 3 7\n(3) * (7) = 21, left: (3 * 7) = 21, 13, 3\n(21) - (13) = 8, left: ((3 * 7) - 13) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 7) - 13)) = 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "13 3 3 7\n", "output": "(7) / (13) = 7/13, left: (7 / 13) = 7/13, 3, 3\n(7/13) - (3) = -32/13, left: ((7 / 13) - 3) = -32/13, 3\nroll back, left: (7 / 13) = 7/13, 3, 3\nroll back, left: 13 3 3 7\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, 3, 7\nroll back, left: 13 3 3 7\n(3) * (7) = 21, left: (3 * 7) = 21, 13, 3\n(21) - (13) = 8, left: ((3 * 7) - 13) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 7) - 13)) = 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "13 3 3 7\n", "output": "(13) * (3) = 39, left: (13 * 3) = 39, 3, 7\n(3) + (7) = 10, left: (3 + 7) = 10, (13 * 3) = 39\nroll back, left: (13 * 3) = 39, 3, 7\nroll back, left: 13 3 3 7\n(13) + (3) = 16, left: (13 + 3) = 16, 3, 7\nroll back, left: 13 3 3 7\n(3) * (7) = 21, left: (3 * 7) = 21, 13, 3\n(21) - (13) = 8, left: ((3 * 7) - 13) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 7) - 13)) = 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "13 3 3 7\n", "output": "(13) * (7) = 91, left: (13 * 7) = 91, 3, 3\nroll back, left: 13 3 3 7\n(13) + (3) = 16, left: (13 + 3) = 16, 3, 7\nroll back, left: 13 3 3 7\n(3) - (13) = -10, left: (3 - 13) = -10, 3, 7\nroll back, left: 13 3 3 7\n(3) * (7) = 21, left: (3 * 7) = 21, 13, 3\n(21) - (13) = 8, left: ((3 * 7) - 13) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 7) - 13)) = 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "13 3 3 7\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 3, 7\nroll back, left: 13 3 3 7\n(13) * (3) = 39, left: (13 * 3) = 39, 3, 7\nroll back, left: 13 3 3 7\n(3) / (7) = 3/7, left: (3 / 7) = 3/7, 13, 3\nroll back, left: 13 3 3 7\n(3) * (7) = 21, left: (3 * 7) = 21, 13, 3\n(21) - (13) = 8, left: ((3 * 7) - 13) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 * 7) - 13)) = 24\nreach 24! expression: (3 * ((3 * 7) - 13))"}, {"input": "3 8 2 8\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 2, 8\n(5) - (2) = 3, left: ((8 - 3) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((8 - 3) - 2)) = 24\nreach 24! expression: (8 * ((8 - 3) - 2))"}, {"input": "3 8 2 8\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 8, 2\n(5) - (2) = 3, left: ((8 - 3) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((8 - 3) - 2)) = 24\nreach 24! expression: (8 * ((8 - 3) - 2))"}, {"input": "3 8 2 8\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 3, 8\n(6) - (3) = 3, left: ((8 - 2) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((8 - 2) - 3)) = 24\nreach 24! expression: (8 * ((8 - 2) - 3))"}, {"input": "3 8 2 8\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 3, 2\n(2) / (16) = 1/8, left: (2 / (8 + 8)) = 1/8, 3\n(3) / (1/8) = 24, left: (3 / (2 / (8 + 8))) = 24\nreach 24! expression: (3 / (2 / (8 + 8)))"}, {"input": "3 8 2 8\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 2, 8\nroll back, left: 3 8 2 8\n(3) * (8) = 24, left: (3 * 8) = 24, 2, 8\n(8) + (24) = 32, left: (8 + (3 * 8)) = 32, 2\nroll back, left: (3 * 8) = 24, 2, 8\nroll back, left: 3 8 2 8\n(8) - (3) = 5, left: (8 - 3) = 5, 2, 8\n(5) - (2) = 3, left: ((8 - 3) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((8 - 3) - 2)) = 24\nreach 24! expression: (8 * ((8 - 3) - 2))"}, {"input": "3 8 2 8\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 3, 8\n(8) - (6) = 2, left: (8 - (8 - 2)) = 2, 3\nroll back, left: (8 - 2) = 6, 3, 8\n(6) - (8) = -2, left: ((8 - 2) - 8) = -2, 3\nroll back, left: (8 - 2) = 6, 3, 8\n(8) - (3) = 5, left: (8 - 3) = 5, (8 - 2) = 6\nroll back, left: (8 - 2) = 6, 3, 8\n(6) - (3) = 3, left: ((8 - 2) - 3) = 3, 8\n(8) * (3) = 24, left: (8 * ((8 - 2) - 3)) = 24\nreach 24! expression: (8 * ((8 - 2) - 3))"}, {"input": "3 8 2 8\n", "output": "(3) + (8) = 11, left: (3 + 8) = 11, 2, 8\n(2) + (11) = 13, left: (2 + (3 + 8)) = 13, 8\n(8) / (13) = 8/13, left: (8 / (2 + (3 + 8))) = 8/13\nroll back, left: (2 + (3 + 8)) = 13, 8\nroll back, left: (3 + 8) = 11, 2, 8\nroll back, left: 3 8 2 8\n(8) - (3) = 5, left: (8 - 3) = 5, 2, 8\n(5) - (2) = 3, left: ((8 - 3) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((8 - 3) - 2)) = 24\nreach 24! expression: (8 * ((8 - 3) - 2))"}, {"input": "3 8 2 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 3, 2\n(3) * (1) = 3, left: (3 * (8 / 8)) = 3, 2\nroll back, left: (8 / 8) = 1, 3, 2\nroll back, left: 3 8 2 8\n(8) / (8) = 1, left: (8 / 8) = 1, 3, 2\nroll back, left: 3 8 2 8\n(8) + (8) = 16, left: (8 + 8) = 16, 3, 2\n(2) / (16) = 1/8, left: (2 / (8 + 8)) = 1/8, 3\n(3) / (1/8) = 24, left: (3 / (2 / (8 + 8))) = 24\nreach 24! expression: (3 / (2 / (8 + 8)))"}, {"input": "3 8 2 8\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 8, 2\n(2) * (5) = 10, left: (2 * (8 - 3)) = 10, 8\n(8) + (10) = 18, left: (8 + (2 * (8 - 3))) = 18\nroll back, left: (2 * (8 - 3)) = 10, 8\nroll back, left: (8 - 3) = 5, 8, 2\n(5) - (2) = 3, left: ((8 - 3) - 2) = 3, 8\n(8) + (3) = 11, left: (8 + ((8 - 3) - 2)) = 11\nroll back, left: ((8 - 3) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((8 - 3) - 2)) = 24\nreach 24! expression: (8 * ((8 - 3) - 2))"}, {"input": "1 2 2 12\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 2, 12\n(2) * (12) = 24, left: (2 * 12) = 24, (2 - 1) = 1\n(24) / (1) = 24, left: ((2 * 12) / (2 - 1)) = 24\nreach 24! expression: ((2 * 12) / (2 - 1))"}, {"input": "1 2 2 12\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (2 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (2 / 2))) = 24\nreach 24! expression: (12 * (1 + (2 / 2)))"}, {"input": "1 2 2 12\n", "output": "(2) * (12) = 24, left: (2 * 12) = 24, 1, 2\n(2) - (1) = 1, left: (2 - 1) = 1, (2 * 12) = 24\n(24) * (1) = 24, left: ((2 * 12) * (2 - 1)) = 24\nreach 24! expression: ((2 * 12) * (2 - 1))"}, {"input": "1 2 2 12\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 2, 2\n(2) * (11) = 22, left: (2 * (12 - 1)) = 22, 2\n(2) + (22) = 24, left: (2 + (2 * (12 - 1))) = 24\nreach 24! expression: (2 + (2 * (12 - 1)))"}, {"input": "1 2 2 12\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 1, 12\n(1) + (4) = 5, left: (1 + (2 + 2)) = 5, 12\nroll back, left: (2 + 2) = 4, 1, 12\nroll back, left: 1 2 2 12\n(2) / (2) = 1, left: (2 / 2) = 1, 1, 12\n(12) / (1) = 12, left: (12 / (2 / 2)) = 12, 1\nroll back, left: (2 / 2) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (2 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (2 / 2))) = 24\nreach 24! expression: (12 * (1 + (2 / 2)))"}, {"input": "1 2 2 12\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 1, 2\nroll back, left: 1 2 2 12\n(2) + (12) = 14, left: (2 + 12) = 14, 1, 2\nroll back, left: 1 2 2 12\n(2) * (12) = 24, left: (2 * 12) = 24, 1, 2\n(1) + (24) = 25, left: (1 + (2 * 12)) = 25, 2\nroll back, left: (2 * 12) = 24, 1, 2\n(2) - (1) = 1, left: (2 - 1) = 1, (2 * 12) = 24\n(24) * (1) = 24, left: ((2 * 12) * (2 - 1)) = 24\nreach 24! expression: ((2 * 12) * (2 - 1))"}, {"input": "1 2 2 12\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 1, 12\n(12) - (1) = 11, left: (12 - 1) = 11, (2 + 2) = 4\nroll back, left: (2 + 2) = 4, 1, 12\nroll back, left: 1 2 2 12\n(2) / (2) = 1, left: (2 / 2) = 1, 1, 12\n(1) - (12) = -11, left: ((2 / 2) - 12) = -11, 1\nroll back, left: (2 / 2) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (2 / 2)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (2 / 2))) = 24\nreach 24! expression: (12 * (1 + (2 / 2)))"}, {"input": "3 2 9 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 3, 2\n(2) * (4) = 8, left: (2 * (9 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 * (9 - 5))) = 24\nreach 24! expression: (3 * (2 * (9 - 5)))"}, {"input": "3 2 9 5\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 3, 9\n(3) * (9) = 27, left: (3 * 9) = 27, (5 - 2) = 3\n(27) - (3) = 24, left: ((3 * 9) - (5 - 2)) = 24\nreach 24! expression: ((3 * 9) - (5 - 2))"}, {"input": "3 2 9 5\n", "output": "(3) * (2) = 6, left: (3 * 2) = 6, 9, 5\n(9) - (5) = 4, left: (9 - 5) = 4, (3 * 2) = 6\n(6) * (4) = 24, left: ((3 * 2) * (9 - 5)) = 24\nreach 24! expression: ((3 * 2) * (9 - 5))"}, {"input": "3 2 9 5\n", "output": "(9) * (5) = 45, left: (9 * 5) = 45, 3, 2\n(3) + (45) = 48, left: (3 + (9 * 5)) = 48, 2\n(48) / (2) = 24, left: ((3 + (9 * 5)) / 2) = 24\nreach 24! expression: ((3 + (9 * 5)) / 2)"}, {"input": "3 2 9 5\n", "output": "(3) / (2) = 3/2, left: (3 / 2) = 3/2, 9, 5\n(9) + (3/2) = 21/2, left: (9 + (3 / 2)) = 21/2, 5\nroll back, left: (3 / 2) = 3/2, 9, 5\nroll back, left: 3 2 9 5\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 9, 5\nroll back, left: 3 2 9 5\n(3) * (2) = 6, left: (3 * 2) = 6, 9, 5\n(9) - (5) = 4, left: (9 - 5) = 4, (3 * 2) = 6\n(6) * (4) = 24, left: ((3 * 2) * (9 - 5)) = 24\nreach 24! expression: ((3 * 2) * (9 - 5))"}, {"input": "3 2 9 5\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 3, 9\nroll back, left: 3 2 9 5\n(2) * (5) = 10, left: (2 * 5) = 10, 3, 9\n(10) / (3) = 10/3, left: ((2 * 5) / 3) = 10/3, 9\nroll back, left: (2 * 5) = 10, 3, 9\nroll back, left: 3 2 9 5\n(5) - (2) = 3, left: (5 - 2) = 3, 3, 9\n(3) * (9) = 27, left: (3 * 9) = 27, (5 - 2) = 3\n(27) - (3) = 24, left: ((3 * 9) - (5 - 2)) = 24\nreach 24! expression: ((3 * 9) - (5 - 2))"}, {"input": "3 2 9 5\n", "output": "(9) * (5) = 45, left: (9 * 5) = 45, 3, 2\n(45) - (3) = 42, left: ((9 * 5) - 3) = 42, 2\n(2) / (42) = 1/21, left: (2 / ((9 * 5) - 3)) = 1/21\nroll back, left: ((9 * 5) - 3) = 42, 2\nroll back, left: (9 * 5) = 45, 3, 2\n(3) * (45) = 135, left: (3 * (9 * 5)) = 135, 2\nroll back, left: (9 * 5) = 45, 3, 2\n(3) + (45) = 48, left: (3 + (9 * 5)) = 48, 2\n(48) / (2) = 24, left: ((3 + (9 * 5)) / 2) = 24\nreach 24! expression: ((3 + (9 * 5)) / 2)"}, {"input": "3 2 9 5\n", "output": "(5) / (3) = 5/3, left: (5 / 3) = 5/3, 2, 9\n(2) - (5/3) = 1/3, left: (2 - (5 / 3)) = 1/3, 9\n(9) * (1/3) = 3, left: (9 * (2 - (5 / 3))) = 3\nroll back, left: (2 - (5 / 3)) = 1/3, 9\nroll back, left: (5 / 3) = 5/3, 2, 9\nroll back, left: 3 2 9 5\n(9) * (5) = 45, left: (9 * 5) = 45, 3, 2\n(3) + (45) = 48, left: (3 + (9 * 5)) = 48, 2\n(48) / (2) = 24, left: ((3 + (9 * 5)) / 2) = 24\nreach 24! expression: ((3 + (9 * 5)) / 2)"}, {"input": "3 2 9 5\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 2, 9\nroll back, left: 3 2 9 5\n(3) * (5) = 15, left: (3 * 5) = 15, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (3 * 5) = 15\nroll back, left: (3 * 5) = 15, 2, 9\nroll back, left: 3 2 9 5\n(9) - (5) = 4, left: (9 - 5) = 4, 3, 2\n(2) * (4) = 8, left: (2 * (9 - 5)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 * (9 - 5))) = 24\nreach 24! expression: (3 * (2 * (9 - 5)))"}, {"input": "2 8 10 10\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 2, 10\n(10) + (2) = 12, left: (10 + (10 - 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (10 + (10 - 8))) = 24\nreach 24! expression: (2 * (10 + (10 - 8)))"}, {"input": "2 8 10 10\n", "output": "(8) - (10) = -2, left: (8 - 10) = -2, 2, 10\n(10) - (-2) = 12, left: (10 - (8 - 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (10 - (8 - 10))) = 24\nreach 24! expression: (2 * (10 - (8 - 10)))"}, {"input": "2 8 10 10\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 2, 8\n(8) / (2) = 4, left: (8 / 2) = 4, (10 + 10) = 20\n(20) + (4) = 24, left: ((10 + 10) + (8 / 2)) = 24\nreach 24! expression: ((10 + 10) + (8 / 2))"}, {"input": "2 8 10 10\n", "output": "(8) / (10) = 4/5, left: (8 / 10) = 4/5, 2, 10\n(10) + (4/5) = 54/5, left: (10 + (8 / 10)) = 54/5, 2\nroll back, left: (8 / 10) = 4/5, 2, 10\nroll back, left: 2 8 10 10\n(8) + (10) = 18, left: (8 + 10) = 18, 2, 10\nroll back, left: 2 8 10 10\n(8) - (10) = -2, left: (8 - 10) = -2, 2, 10\n(10) - (-2) = 12, left: (10 - (8 - 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (10 - (8 - 10))) = 24\nreach 24! expression: (2 * (10 - (8 - 10)))"}, {"input": "10 6 2 10\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 6, 2\n(6) - (2) = 4, left: (6 - 2) = 4, (10 + 10) = 20\n(20) + (4) = 24, left: ((10 + 10) + (6 - 2)) = 24\nreach 24! expression: ((10 + 10) + (6 - 2))"}, {"input": "10 6 2 10\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (10 - 6) = 4\n(4) + (20) = 24, left: ((10 - 6) + (10 * 2)) = 24\nreach 24! expression: ((10 - 6) + (10 * 2))"}, {"input": "10 6 2 10\n", "output": "(2) - (10) = -8, left: (2 - 10) = -8, 10, 6\n(-8) - (6) = -14, left: ((2 - 10) - 6) = -14, 10\n(10) - (-14) = 24, left: (10 - ((2 - 10) - 6)) = 24\nreach 24! expression: (10 - ((2 - 10) - 6))"}, {"input": "10 6 2 10\n", "output": "(10) - (2) = 8, left: (10 - 2) = 8, 10, 6\n(6) + (8) = 14, left: (6 + (10 - 2)) = 14, 10\n(10) + (14) = 24, left: (10 + (6 + (10 - 2))) = 24\nreach 24! expression: (10 + (6 + (10 - 2)))"}, {"input": "10 6 2 10\n", "output": "(10) - (6) = 4, left: (10 - 6) = 4, 2, 10\n(2) * (10) = 20, left: (2 * 10) = 20, (10 - 6) = 4\n(4) + (20) = 24, left: ((10 - 6) + (2 * 10)) = 24\nreach 24! expression: ((10 - 6) + (2 * 10))"}, {"input": "10 6 2 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 6, 2\n(6) / (1) = 6, left: (6 / (10 / 10)) = 6, 2\nroll back, left: (10 / 10) = 1, 6, 2\nroll back, left: 10 6 2 10\n(10) * (10) = 100, left: (10 * 10) = 100, 6, 2\nroll back, left: 10 6 2 10\n(10) + (10) = 20, left: (10 + 10) = 20, 6, 2\n(6) - (2) = 4, left: (6 - 2) = 4, (10 + 10) = 20\n(20) + (4) = 24, left: ((10 + 10) + (6 - 2)) = 24\nreach 24! expression: ((10 + 10) + (6 - 2))"}, {"input": "13 12 11 11\n", "output": "(11) - (12) = -1, left: (11 - 12) = -1, 13, 11\n(13) / (-1) = -13, left: (13 / (11 - 12)) = -13, 11\n(11) - (-13) = 24, left: (11 - (13 / (11 - 12))) = 24\nreach 24! expression: (11 - (13 / (11 - 12)))"}, {"input": "13 12 11 11\n", "output": "(13) + (12) = 25, left: (13 + 12) = 25, 11, 11\n(11) / (11) = 1, left: (11 / 11) = 1, (13 + 12) = 25\n(25) - (1) = 24, left: ((13 + 12) - (11 / 11)) = 24\nreach 24! expression: ((13 + 12) - (11 / 11))"}, {"input": "13 12 11 11\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 13, 12\n(1) - (12) = -11, left: ((11 / 11) - 12) = -11, 13\n(13) - (-11) = 24, left: (13 - ((11 / 11) - 12)) = 24\nreach 24! expression: (13 - ((11 / 11) - 12))"}, {"input": "13 12 11 11\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 13, 11\n(13) / (1) = 13, left: (13 / (12 - 11)) = 13, 11\n(11) + (13) = 24, left: (11 + (13 / (12 - 11))) = 24\nreach 24! expression: (11 + (13 / (12 - 11)))"}, {"input": "8 1 8 12\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 8, 8\n(11) - (8) = 3, left: ((12 - 1) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 1) - 8)) = 24\nreach 24! expression: (8 * ((12 - 1) - 8))"}, {"input": "8 1 8 12\n", "output": "(8) / (12) = 2/3, left: (8 / 12) = 2/3, 8, 1\n(1) - (2/3) = 1/3, left: (1 - (8 / 12)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (1 - (8 / 12))) = 24\nreach 24! expression: (8 / (1 - (8 / 12)))"}, {"input": "8 1 8 12\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (8 / 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (8 / 8))) = 24\nreach 24! expression: (12 * (1 + (8 / 8)))"}, {"input": "8 1 8 12\n", "output": "(8) + (12) = 20, left: (8 + 12) = 20, 8, 1\nroll back, left: 8 1 8 12\n(12) / (8) = 3/2, left: (12 / 8) = 3/2, 8, 1\n(1) - (3/2) = -1/2, left: (1 - (12 / 8)) = -1/2, 8\nroll back, left: (12 / 8) = 3/2, 8, 1\nroll back, left: 8 1 8 12\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 8, 1\n(1) - (2/3) = 1/3, left: (1 - (8 / 12)) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / (1 - (8 / 12))) = 24\nreach 24! expression: (8 / (1 - (8 / 12)))"}, {"input": "8 1 8 12\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 8, 8\n(12) - (8) = 4, left: ((12 / 1) - 8) = 4, 8\nroll back, left: (12 / 1) = 12, 8, 8\nroll back, left: 8 1 8 12\n(12) - (1) = 11, left: (12 - 1) = 11, 8, 8\n(8) - (11) = -3, left: (8 - (12 - 1)) = -3, 8\nroll back, left: (12 - 1) = 11, 8, 8\n(11) - (8) = 3, left: ((12 - 1) - 8) = 3, 8\n(8) * (3) = 24, left: (8 * ((12 - 1) - 8)) = 24\nreach 24! expression: (8 * ((12 - 1) - 8))"}, {"input": "8 1 8 12\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 1, 12\n(12) / (1) = 12, left: (12 / (8 / 8)) = 12, 1\n(1) - (12) = -11, left: (1 - (12 / (8 / 8))) = -11\nroll back, left: (12 / (8 / 8)) = 12, 1\nroll back, left: (8 / 8) = 1, 1, 12\n(1) / (1) = 1, left: (1 / (8 / 8)) = 1, 12\nroll back, left: (8 / 8) = 1, 1, 12\n(1) + (1) = 2, left: (1 + (8 / 8)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (8 / 8))) = 24\nreach 24! expression: (12 * (1 + (8 / 8)))"}, {"input": "2 12 1 9\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 12, 9\n(12) + (9) = 21, left: (12 + 9) = 21, (2 + 1) = 3\n(3) + (21) = 24, left: ((2 + 1) + (12 + 9)) = 24\nreach 24! expression: ((2 + 1) + (12 + 9))"}, {"input": "2 12 1 9\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 12, 9\n(9) + (3) = 12, left: (9 + (2 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 + (2 + 1))) = 24\nreach 24! expression: (12 + (9 + (2 + 1)))"}, {"input": "2 12 1 9\n", "output": "(12) + (9) = 21, left: (12 + 9) = 21, 2, 1\n(2) + (21) = 23, left: (2 + (12 + 9)) = 23, 1\n(1) + (23) = 24, left: (1 + (2 + (12 + 9))) = 24\nreach 24! expression: (1 + (2 + (12 + 9)))"}, {"input": "2 12 1 9\n", "output": "(12) + (1) = 13, left: (12 + 1) = 13, 2, 9\n(9) + (13) = 22, left: (9 + (12 + 1)) = 22, 2\n(2) + (22) = 24, left: (2 + (9 + (12 + 1))) = 24\nreach 24! expression: (2 + (9 + (12 + 1)))"}, {"input": "2 12 1 9\n", "output": "(2) + (12) = 14, left: (2 + 12) = 14, 1, 9\n(1) + (9) = 10, left: (1 + 9) = 10, (2 + 12) = 14\n(14) + (10) = 24, left: ((2 + 12) + (1 + 9)) = 24\nreach 24! expression: ((2 + 12) + (1 + 9))"}, {"input": "2 12 1 9\n", "output": "(12) * (1) = 12, left: (12 * 1) = 12, 2, 9\n(9) - (2) = 7, left: (9 - 2) = 7, (12 * 1) = 12\nroll back, left: (12 * 1) = 12, 2, 9\n(2) * (9) = 18, left: (2 * 9) = 18, (12 * 1) = 12\nroll back, left: (12 * 1) = 12, 2, 9\nroll back, left: 2 12 1 9\n(12) + (1) = 13, left: (12 + 1) = 13, 2, 9\n(9) + (13) = 22, left: (9 + (12 + 1)) = 22, 2\n(2) + (22) = 24, left: (2 + (9 + (12 + 1))) = 24\nreach 24! expression: (2 + (9 + (12 + 1)))"}, {"input": "2 12 1 9\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 12, 9\n(2) - (9) = -7, left: ((2 / 1) - 9) = -7, 12\n(-7) - (12) = -19, left: (((2 / 1) - 9) - 12) = -19\nroll back, left: ((2 / 1) - 9) = -7, 12\nroll back, left: (2 / 1) = 2, 12, 9\nroll back, left: 2 12 1 9\n(2) + (1) = 3, left: (2 + 1) = 3, 12, 9\n(9) + (3) = 12, left: (9 + (2 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (9 + (2 + 1))) = 24\nreach 24! expression: (12 + (9 + (2 + 1)))"}, {"input": "2 12 1 9\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 2, 1\n(3/4) - (2) = -5/4, left: ((9 / 12) - 2) = -5/4, 1\nroll back, left: (9 / 12) = 3/4, 2, 1\nroll back, left: 2 12 1 9\n(12) + (9) = 21, left: (12 + 9) = 21, 2, 1\n(2) / (21) = 2/21, left: (2 / (12 + 9)) = 2/21, 1\nroll back, left: (12 + 9) = 21, 2, 1\n(2) + (21) = 23, left: (2 + (12 + 9)) = 23, 1\n(1) + (23) = 24, left: (1 + (2 + (12 + 9))) = 24\nreach 24! expression: (1 + (2 + (12 + 9)))"}, {"input": "2 12 1 9\n", "output": "(2) / (12) = 1/6, left: (2 / 12) = 1/6, 1, 9\nroll back, left: 2 12 1 9\n(12) / (2) = 6, left: (12 / 2) = 6, 1, 9\n(1) * (9) = 9, left: (1 * 9) = 9, (12 / 2) = 6\nroll back, left: (12 / 2) = 6, 1, 9\nroll back, left: 2 12 1 9\n(2) + (12) = 14, left: (2 + 12) = 14, 1, 9\n(1) + (9) = 10, left: (1 + 9) = 10, (2 + 12) = 14\n(14) + (10) = 24, left: ((2 + 12) + (1 + 9)) = 24\nreach 24! expression: ((2 + 12) + (1 + 9))"}, {"input": "7 2 5 4\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 2, 4\n(4) - (2) = 2, left: (4 - 2) = 2, (7 + 5) = 12\n(12) * (2) = 24, left: ((7 + 5) * (4 - 2)) = 24\nreach 24! expression: ((7 + 5) * (4 - 2))"}, {"input": "7 2 5 4\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (2 / 4) = 1/2\n(12) / (1/2) = 24, left: ((7 + 5) / (2 / 4)) = 24\nreach 24! expression: ((7 + 5) / (2 / 4))"}, {"input": "7 2 5 4\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 2, 4\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, (7 + 5) = 12\n(12) / (1/2) = 24, left: ((7 + 5) / (2 / 4)) = 24\nreach 24! expression: ((7 + 5) / (2 / 4))"}, {"input": "7 2 5 4\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (4 - 2) = 2\n(2) * (12) = 24, left: ((4 - 2) * (7 + 5)) = 24\nreach 24! expression: ((4 - 2) * (7 + 5))"}, {"input": "7 2 5 4\n", "output": "(2) * (5) = 10, left: (2 * 5) = 10, 7, 4\nroll back, left: 7 2 5 4\n(2) / (7) = 2/7, left: (2 / 7) = 2/7, 5, 4\nroll back, left: 7 2 5 4\n(7) * (2) = 14, left: (7 * 2) = 14, 5, 4\nroll back, left: 7 2 5 4\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (2 / 4) = 1/2\n(12) / (1/2) = 24, left: ((7 + 5) / (2 / 4)) = 24\nreach 24! expression: ((7 + 5) / (2 / 4))"}, {"input": "7 2 5 4\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 7, 4\nroll back, left: 7 2 5 4\n(2) * (5) = 10, left: (2 * 5) = 10, 7, 4\nroll back, left: 7 2 5 4\n(7) * (4) = 28, left: (7 * 4) = 28, 2, 5\nroll back, left: 7 2 5 4\n(4) - (2) = 2, left: (4 - 2) = 2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (4 - 2) = 2\n(2) * (12) = 24, left: ((4 - 2) * (7 + 5)) = 24\nreach 24! expression: ((4 - 2) * (7 + 5))"}, {"input": "7 2 5 4\n", "output": "(5) + (4) = 9, left: (5 + 4) = 9, 7, 2\nroll back, left: 7 2 5 4\n(5) / (4) = 5/4, left: (5 / 4) = 5/4, 7, 2\nroll back, left: 7 2 5 4\n(4) - (5) = -1, left: (4 - 5) = -1, 7, 2\nroll back, left: 7 2 5 4\n(4) - (2) = 2, left: (4 - 2) = 2, 7, 5\n(7) + (5) = 12, left: (7 + 5) = 12, (4 - 2) = 2\n(2) * (12) = 24, left: ((4 - 2) * (7 + 5)) = 24\nreach 24! expression: ((4 - 2) * (7 + 5))"}, {"input": "7 2 5 4\n", "output": "(7) / (5) = 7/5, left: (7 / 5) = 7/5, 2, 4\n(4) / (2) = 2, left: (4 / 2) = 2, (7 / 5) = 7/5\nroll back, left: (7 / 5) = 7/5, 2, 4\nroll back, left: 7 2 5 4\n(7) * (5) = 35, left: (7 * 5) = 35, 2, 4\nroll back, left: 7 2 5 4\n(7) + (5) = 12, left: (7 + 5) = 12, 2, 4\n(4) - (2) = 2, left: (4 - 2) = 2, (7 + 5) = 12\n(12) * (2) = 24, left: ((7 + 5) * (4 - 2)) = 24\nreach 24! expression: ((7 + 5) * (4 - 2))"}, {"input": "7 2 5 4\n", "output": "(7) - (4) = 3, left: (7 - 4) = 3, 2, 5\n(5) - (3) = 2, left: (5 - (7 - 4)) = 2, 2\nroll back, left: (7 - 4) = 3, 2, 5\nroll back, left: 7 2 5 4\n(7) / (2) = 7/2, left: (7 / 2) = 7/2, 5, 4\nroll back, left: 7 2 5 4\n(7) + (5) = 12, left: (7 + 5) = 12, 2, 4\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, (7 + 5) = 12\n(12) / (1/2) = 24, left: ((7 + 5) / (2 / 4)) = 24\nreach 24! expression: ((7 + 5) / (2 / 4))"}, {"input": "10 2 2 8\n", "output": "(10) * (2) = 20, left: (10 * 2) = 20, 2, 8\n(20) - (8) = 12, left: ((10 * 2) - 8) = 12, 2\n(2) * (12) = 24, left: (2 * ((10 * 2) - 8)) = 24\nreach 24! expression: (2 * ((10 * 2) - 8))"}, {"input": "10 2 2 8\n", "output": "(8) / (2) = 4, left: (8 / 2) = 4, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (8 / 2) = 4\n(4) + (20) = 24, left: ((8 / 2) + (10 * 2)) = 24\nreach 24! expression: ((8 / 2) + (10 * 2))"}, {"input": "10 2 2 8\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 2, 8\n(5) - (2) = 3, left: ((10 / 2) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 / 2) - 2)) = 24\nreach 24! expression: (8 * ((10 / 2) - 2))"}, {"input": "10 2 2 8\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 10, 2\n(10) - (2) = 8, left: (10 - 2) = 8, (2 - 8) = -6\nroll back, left: (2 - 8) = -6, 10, 2\nroll back, left: 10 2 2 8\n(2) + (8) = 10, left: (2 + 8) = 10, 10, 2\nroll back, left: 10 2 2 8\n(8) / (2) = 4, left: (8 / 2) = 4, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (8 / 2) = 4\n(4) + (20) = 24, left: ((8 / 2) + (10 * 2)) = 24\nreach 24! expression: ((8 / 2) + (10 * 2))"}, {"input": "10 2 2 8\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 10, 2\n(10) - (6) = 4, left: (10 - (8 - 2)) = 4, 2\nroll back, left: (8 - 2) = 6, 10, 2\nroll back, left: 10 2 2 8\n(8) / (2) = 4, left: (8 / 2) = 4, 10, 2\n(4) / (10) = 2/5, left: ((8 / 2) / 10) = 2/5, 2\nroll back, left: (8 / 2) = 4, 10, 2\n(10) * (2) = 20, left: (10 * 2) = 20, (8 / 2) = 4\n(4) + (20) = 24, left: ((8 / 2) + (10 * 2)) = 24\nreach 24! expression: ((8 / 2) + (10 * 2))"}, {"input": "10 2 2 8\n", "output": "(10) / (2) = 5, left: (10 / 2) = 5, 2, 8\n(2) * (5) = 10, left: (2 * (10 / 2)) = 10, 8\n(8) + (10) = 18, left: (8 + (2 * (10 / 2))) = 18\nroll back, left: (2 * (10 / 2)) = 10, 8\n(8) - (10) = -2, left: (8 - (2 * (10 / 2))) = -2\nroll back, left: (2 * (10 / 2)) = 10, 8\nroll back, left: (10 / 2) = 5, 2, 8\n(5) - (2) = 3, left: ((10 / 2) - 2) = 3, 8\n(8) * (3) = 24, left: (8 * ((10 / 2) - 2)) = 24\nreach 24! expression: (8 * ((10 / 2) - 2))"}, {"input": "10 2 2 8\n", "output": "(2) - (2) = 0, left: (2 - 2) = 0, 10, 8\nroll back, left: 10 2 2 8\n(2) / (2) = 1, left: (2 / 2) = 1, 10, 8\nroll back, left: 10 2 2 8\n(8) - (10) = -2, left: (8 - 10) = -2, 2, 2\nroll back, left: 10 2 2 8\n(10) * (2) = 20, left: (10 * 2) = 20, 2, 8\n(20) - (8) = 12, left: ((10 * 2) - 8) = 12, 2\n(2) * (12) = 24, left: (2 * ((10 * 2) - 8)) = 24\nreach 24! expression: (2 * ((10 * 2) - 8))"}, {"input": "8 13 1 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 8, 1\n(8) * (3) = 24, left: (8 * (13 - 10)) = 24, 1\n(1) * (24) = 24, left: (1 * (8 * (13 - 10))) = 24\nreach 24! expression: (1 * (8 * (13 - 10)))"}, {"input": "8 13 1 10\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (1 / 8) = 1/8\n(3) / (1/8) = 24, left: ((13 - 10) / (1 / 8)) = 24\nreach 24! expression: ((13 - 10) / (1 / 8))"}, {"input": "8 13 1 10\n", "output": "(8) * (1) = 8, left: (8 * 1) = 8, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (8 * 1) = 8\n(8) * (3) = 24, left: ((8 * 1) * (13 - 10)) = 24\nreach 24! expression: ((8 * 1) * (13 - 10))"}, {"input": "8 13 1 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 8, 1\n(1) / (8) = 1/8, left: (1 / 8) = 1/8, (13 - 10) = 3\n(3) / (1/8) = 24, left: ((13 - 10) / (1 / 8)) = 24\nreach 24! expression: ((13 - 10) / (1 / 8))"}, {"input": "8 13 1 10\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 13, 10\n(-7) - (10) = -17, left: ((1 - 8) - 10) = -17, 13\nroll back, left: (1 - 8) = -7, 13, 10\nroll back, left: 8 13 1 10\n(8) - (1) = 7, left: (8 - 1) = 7, 13, 10\nroll back, left: 8 13 1 10\n(8) * (1) = 8, left: (8 * 1) = 8, 13, 10\n(13) - (10) = 3, left: (13 - 10) = 3, (8 * 1) = 8\n(8) * (3) = 24, left: ((8 * 1) * (13 - 10)) = 24\nreach 24! expression: ((8 * 1) * (13 - 10))"}, {"input": "6 3 4 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 6, 3\n(6) * (3) = 18, left: (6 * 3) = 18, (4 + 2) = 6\n(6) + (18) = 24, left: ((4 + 2) + (6 * 3)) = 24\nreach 24! expression: ((4 + 2) + (6 * 3))"}, {"input": "6 3 4 2\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (3 * 4) = 12\n(12) + (12) = 24, left: ((3 * 4) + (6 * 2)) = 24\nreach 24! expression: ((3 * 4) + (6 * 2))"}, {"input": "6 3 4 2\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (4 / 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (4 / 2))) = 24\nreach 24! expression: (3 * (6 + (4 / 2)))"}, {"input": "6 3 4 2\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 4, 2\n(4) * (2) = 8, left: (4 * 2) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (4 * 2)) = 24\nreach 24! expression: ((6 - 3) * (4 * 2))"}, {"input": "6 3 4 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 6, 3\n(3) * (6) = 18, left: (3 * (4 + 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 * (4 + 2))) = 24\nreach 24! expression: (6 + (3 * (4 + 2)))"}, {"input": "6 3 4 2\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (6 - 3) = 3\nroll back, left: (6 - 3) = 3, 4, 2\n(4) / (2) = 2, left: (4 / 2) = 2, (6 - 3) = 3\n(2) / (3) = 2/3, left: ((4 / 2) / (6 - 3)) = 2/3\nroll back, left: (4 / 2) = 2, (6 - 3) = 3\nroll back, left: (6 - 3) = 3, 4, 2\n(4) * (2) = 8, left: (4 * 2) = 8, (6 - 3) = 3\n(3) * (8) = 24, left: ((6 - 3) * (4 * 2)) = 24\nreach 24! expression: ((6 - 3) * (4 * 2))"}, {"input": "6 3 4 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 6, 3\n(3) - (6) = -3, left: (3 - 6) = -3, (4 + 2) = 6\n(6) + (-3) = 3, left: ((4 + 2) + (3 - 6)) = 3\nroll back, left: (3 - 6) = -3, (4 + 2) = 6\n(6) / (-3) = -2, left: ((4 + 2) / (3 - 6)) = -2\nroll back, left: (3 - 6) = -3, (4 + 2) = 6\nroll back, left: (4 + 2) = 6, 6, 3\n(6) * (3) = 18, left: (6 * 3) = 18, (4 + 2) = 6\n(6) + (18) = 24, left: ((4 + 2) + (6 * 3)) = 24\nreach 24! expression: ((4 + 2) + (6 * 3))"}, {"input": "6 3 4 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 6, 3\n(6) / (3) = 2, left: ((4 + 2) / 3) = 2, 6\n(2) / (6) = 1/3, left: (((4 + 2) / 3) / 6) = 1/3\nroll back, left: ((4 + 2) / 3) = 2, 6\nroll back, left: (4 + 2) = 6, 6, 3\n(3) * (6) = 18, left: (3 * (4 + 2)) = 18, 6\n(6) * (18) = 108, left: (6 * (3 * (4 + 2))) = 108\nroll back, left: (3 * (4 + 2)) = 18, 6\n(6) + (18) = 24, left: (6 + (3 * (4 + 2))) = 24\nreach 24! expression: (6 + (3 * (4 + 2)))"}, {"input": "6 3 4 2\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 6, 3\n(6) + (3) = 9, left: (6 + 3) = 9, (2 / 4) = 1/2\n(9) / (1/2) = 18, left: ((6 + 3) / (2 / 4)) = 18\nroll back, left: (6 + 3) = 9, (2 / 4) = 1/2\nroll back, left: (2 / 4) = 1/2, 6, 3\nroll back, left: 6 3 4 2\n(4) / (2) = 2, left: (4 / 2) = 2, 6, 3\n(6) + (2) = 8, left: (6 + (4 / 2)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (4 / 2))) = 24\nreach 24! expression: (3 * (6 + (4 / 2)))"}, {"input": "6 3 4 2\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 6, 2\n(4/3) - (6) = -14/3, left: ((4 / 3) - 6) = -14/3, 2\nroll back, left: (4 / 3) = 4/3, 6, 2\nroll back, left: 6 3 4 2\n(4) - (3) = 1, left: (4 - 3) = 1, 6, 2\nroll back, left: 6 3 4 2\n(3) * (4) = 12, left: (3 * 4) = 12, 6, 2\n(6) * (2) = 12, left: (6 * 2) = 12, (3 * 4) = 12\n(12) + (12) = 24, left: ((3 * 4) + (6 * 2)) = 24\nreach 24! expression: ((3 * 4) + (6 * 2))"}, {"input": "12 12 9 8\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 9, 8\n(9) - (8) = 1, left: (9 - 8) = 1, (12 + 12) = 24\n(24) * (1) = 24, left: ((12 + 12) * (9 - 8)) = 24\nreach 24! expression: ((12 + 12) * (9 - 8))"}, {"input": "12 12 9 8\n", "output": "(12) - (8) = 4, left: (12 - 8) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (12 - 8)) = 36, 12\n(36) - (12) = 24, left: ((9 * (12 - 8)) - 12) = 24\nreach 24! expression: ((9 * (12 - 8)) - 12)"}, {"input": "12 12 9 8\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 9, 8\n(9) - (8) = 1, left: (9 - 8) = 1, (12 + 12) = 24\n(24) / (1) = 24, left: ((12 + 12) / (9 - 8)) = 24\nreach 24! expression: ((12 + 12) / (9 - 8))"}, {"input": "12 12 9 8\n", "output": "(12) / (9) = 4/3, left: (12 / 9) = 4/3, 12, 8\n(12) * (4/3) = 16, left: (12 * (12 / 9)) = 16, 8\n(8) + (16) = 24, left: (8 + (12 * (12 / 9))) = 24\nreach 24! expression: (8 + (12 * (12 / 9)))"}, {"input": "12 12 9 8\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 12, 8\n(12) / (3/4) = 16, left: (12 / (9 / 12)) = 16, 8\n(8) + (16) = 24, left: (8 + (12 / (9 / 12))) = 24\nreach 24! expression: (8 + (12 / (9 / 12)))"}, {"input": "12 12 9 8\n", "output": "(12) + (8) = 20, left: (12 + 8) = 20, 12, 9\n(9) - (12) = -3, left: (9 - 12) = -3, (12 + 8) = 20\nroll back, left: (12 + 8) = 20, 12, 9\nroll back, left: 12 12 9 8\n(8) / (12) = 2/3, left: (8 / 12) = 2/3, 12, 9\nroll back, left: 12 12 9 8\n(12) - (8) = 4, left: (12 - 8) = 4, 12, 9\n(9) * (4) = 36, left: (9 * (12 - 8)) = 36, 12\n(36) - (12) = 24, left: ((9 * (12 - 8)) - 12) = 24\nreach 24! expression: ((9 * (12 - 8)) - 12)"}, {"input": "9 2 1 4\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 9, 2\n(9) - (-3) = 12, left: (9 - (1 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (1 - 4))) = 24\nreach 24! expression: (2 * (9 - (1 - 4)))"}, {"input": "9 2 1 4\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (2 + 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (2 + 1))) = 24\nreach 24! expression: (4 * (9 - (2 + 1)))"}, {"input": "9 2 1 4\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (4 - 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (4 - 1))) = 24\nreach 24! expression: (2 * (9 + (4 - 1)))"}, {"input": "9 2 1 4\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 9, 4\n(4) / (3) = 4/3, left: (4 / (2 + 1)) = 4/3, 9\n(4/3) - (9) = -23/3, left: ((4 / (2 + 1)) - 9) = -23/3\nroll back, left: (4 / (2 + 1)) = 4/3, 9\nroll back, left: (2 + 1) = 3, 9, 4\n(9) / (3) = 3, left: (9 / (2 + 1)) = 3, 4\nroll back, left: (2 + 1) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (2 + 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (2 + 1))) = 24\nreach 24! expression: (4 * (9 - (2 + 1)))"}, {"input": "9 2 1 4\n", "output": "(1) - (4) = -3, left: (1 - 4) = -3, 9, 2\n(-3) - (2) = -5, left: ((1 - 4) - 2) = -5, 9\n(9) / (-5) = -9/5, left: (9 / ((1 - 4) - 2)) = -9/5\nroll back, left: ((1 - 4) - 2) = -5, 9\nroll back, left: (1 - 4) = -3, 9, 2\n(9) * (2) = 18, left: (9 * 2) = 18, (1 - 4) = -3\nroll back, left: (1 - 4) = -3, 9, 2\n(9) - (-3) = 12, left: (9 - (1 - 4)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 - (1 - 4))) = 24\nreach 24! expression: (2 * (9 - (1 - 4)))"}, {"input": "9 2 1 4\n", "output": "(2) * (1) = 2, left: (2 * 1) = 2, 9, 4\nroll back, left: 9 2 1 4\n(1) / (2) = 1/2, left: (1 / 2) = 1/2, 9, 4\n(1/2) / (9) = 1/18, left: ((1 / 2) / 9) = 1/18, 4\nroll back, left: (1 / 2) = 1/2, 9, 4\nroll back, left: 9 2 1 4\n(2) + (1) = 3, left: (2 + 1) = 3, 9, 4\n(9) - (3) = 6, left: (9 - (2 + 1)) = 6, 4\n(4) * (6) = 24, left: (4 * (9 - (2 + 1))) = 24\nreach 24! expression: (4 * (9 - (2 + 1)))"}, {"input": "9 2 1 4\n", "output": "(4) / (2) = 2, left: (4 / 2) = 2, 9, 1\nroll back, left: 9 2 1 4\n(2) * (4) = 8, left: (2 * 4) = 8, 9, 1\n(9) + (8) = 17, left: (9 + (2 * 4)) = 17, 1\nroll back, left: (2 * 4) = 8, 9, 1\nroll back, left: 9 2 1 4\n(4) - (1) = 3, left: (4 - 1) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (4 - 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (4 - 1))) = 24\nreach 24! expression: (2 * (9 + (4 - 1)))"}, {"input": "9 2 1 4\n", "output": "(4) - (1) = 3, left: (4 - 1) = 3, 9, 2\n(9) - (2) = 7, left: (9 - 2) = 7, (4 - 1) = 3\nroll back, left: (4 - 1) = 3, 9, 2\n(9) + (2) = 11, left: (9 + 2) = 11, (4 - 1) = 3\nroll back, left: (4 - 1) = 3, 9, 2\n(2) + (3) = 5, left: (2 + (4 - 1)) = 5, 9\nroll back, left: (4 - 1) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (4 - 1)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (4 - 1))) = 24\nreach 24! expression: (2 * (9 + (4 - 1)))"}, {"input": "11 13 9 12\n", "output": "(13) + (9) = 22, left: (13 + 9) = 22, 11, 12\n(12) / (11) = 12/11, left: (12 / 11) = 12/11, (13 + 9) = 22\n(22) * (12/11) = 24, left: ((13 + 9) * (12 / 11)) = 24\nreach 24! expression: ((13 + 9) * (12 / 11))"}, {"input": "11 13 9 12\n", "output": "(13) + (9) = 22, left: (13 + 9) = 22, 11, 12\n(22) / (11) = 2, left: ((13 + 9) / 11) = 2, 12\n(12) * (2) = 24, left: (12 * ((13 + 9) / 11)) = 24\nreach 24! expression: (12 * ((13 + 9) / 11))"}, {"input": "11 13 9 12\n", "output": "(13) + (9) = 22, left: (13 + 9) = 22, 11, 12\n(12) * (22) = 264, left: (12 * (13 + 9)) = 264, 11\n(264) / (11) = 24, left: ((12 * (13 + 9)) / 11) = 24\nreach 24! expression: ((12 * (13 + 9)) / 11)"}, {"input": "4 9 13 3\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (13 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (13 - 9))) = 24\nreach 24! expression: (3 * (4 + (13 - 9)))"}, {"input": "4 9 13 3\n", "output": "(9) - (4) = 5, left: (9 - 4) = 5, 13, 3\n(13) - (5) = 8, left: (13 - (9 - 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (9 - 4))) = 24\nreach 24! expression: (3 * (13 - (9 - 4)))"}, {"input": "4 9 13 3\n", "output": "(4) + (13) = 17, left: (4 + 13) = 17, 9, 3\n(17) - (9) = 8, left: ((4 + 13) - 9) = 8, 3\n(3) * (8) = 24, left: (3 * ((4 + 13) - 9)) = 24\nreach 24! expression: (3 * ((4 + 13) - 9))"}, {"input": "4 9 13 3\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 9, 3\n(9) - (9) = 0, left: ((13 - 4) - 9) = 0, 3\nroll back, left: (13 - 4) = 9, 9, 3\n(9) / (9) = 1, left: ((13 - 4) / 9) = 1, 3\nroll back, left: (13 - 4) = 9, 9, 3\nroll back, left: 4 9 13 3\n(4) + (13) = 17, left: (4 + 13) = 17, 9, 3\n(17) - (9) = 8, left: ((4 + 13) - 9) = 8, 3\n(3) * (8) = 24, left: (3 * ((4 + 13) - 9)) = 24\nreach 24! expression: (3 * ((4 + 13) - 9))"}, {"input": "4 9 13 3\n", "output": "(13) / (9) = 13/9, left: (13 / 9) = 13/9, 4, 3\n(13/9) / (4) = 13/36, left: ((13 / 9) / 4) = 13/36, 3\nroll back, left: (13 / 9) = 13/9, 4, 3\nroll back, left: 4 9 13 3\n(9) + (13) = 22, left: (9 + 13) = 22, 4, 3\nroll back, left: 4 9 13 3\n(13) - (9) = 4, left: (13 - 9) = 4, 4, 3\n(4) + (4) = 8, left: (4 + (13 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (4 + (13 - 9))) = 24\nreach 24! expression: (3 * (4 + (13 - 9)))"}, {"input": "4 9 13 3\n", "output": "(13) / (4) = 13/4, left: (13 / 4) = 13/4, 9, 3\nroll back, left: 4 9 13 3\n(13) - (4) = 9, left: (13 - 4) = 9, 9, 3\n(3) + (9) = 12, left: (3 + (13 - 4)) = 12, 9\nroll back, left: (13 - 4) = 9, 9, 3\nroll back, left: 4 9 13 3\n(4) + (13) = 17, left: (4 + 13) = 17, 9, 3\n(17) - (9) = 8, left: ((4 + 13) - 9) = 8, 3\n(3) * (8) = 24, left: (3 * ((4 + 13) - 9)) = 24\nreach 24! expression: (3 * ((4 + 13) - 9))"}, {"input": "4 9 13 3\n", "output": "(4) / (9) = 4/9, left: (4 / 9) = 4/9, 13, 3\n(4/9) / (3) = 4/27, left: ((4 / 9) / 3) = 4/27, 13\nroll back, left: (4 / 9) = 4/9, 13, 3\nroll back, left: 4 9 13 3\n(9) - (4) = 5, left: (9 - 4) = 5, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (9 - 4) = 5\nroll back, left: (9 - 4) = 5, 13, 3\n(13) - (5) = 8, left: (13 - (9 - 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (9 - 4))) = 24\nreach 24! expression: (3 * (13 - (9 - 4)))"}, {"input": "5 3 3 13\n", "output": "(5) + (13) = 18, left: (5 + 13) = 18, 3, 3\n(3) + (18) = 21, left: (3 + (5 + 13)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 + (5 + 13))) = 24\nreach 24! expression: (3 + (3 + (5 + 13)))"}, {"input": "5 3 3 13\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 3, 13\n(13) + (8) = 21, left: (13 + (5 + 3)) = 21, 3\n(3) + (21) = 24, left: (3 + (13 + (5 + 3))) = 24\nreach 24! expression: (3 + (13 + (5 + 3)))"}, {"input": "5 3 3 13\n", "output": "(3) + (13) = 16, left: (3 + 13) = 16, 5, 3\n(5) + (16) = 21, left: (5 + (3 + 13)) = 21, 3\n(3) + (21) = 24, left: (3 + (5 + (3 + 13))) = 24\nreach 24! expression: (3 + (5 + (3 + 13)))"}, {"input": "5 3 3 13\n", "output": "(3) + (13) = 16, left: (3 + 13) = 16, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (3 + 13) = 16\n(16) + (8) = 24, left: ((3 + 13) + (5 + 3)) = 24\nreach 24! expression: ((3 + 13) + (5 + 3))"}, {"input": "5 3 3 13\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 5, 13\n(13) + (6) = 19, left: (13 + (3 + 3)) = 19, 5\n(5) + (19) = 24, left: (5 + (13 + (3 + 3))) = 24\nreach 24! expression: (5 + (13 + (3 + 3)))"}, {"input": "5 3 3 13\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 5, 13\n(0) / (5) = 0, left: ((3 - 3) / 5) = 0, 13\nroll back, left: (3 - 3) = 0, 5, 13\nroll back, left: 5 3 3 13\n(3) - (3) = 0, left: (3 - 3) = 0, 5, 13\nroll back, left: 5 3 3 13\n(3) + (3) = 6, left: (3 + 3) = 6, 5, 13\n(13) + (6) = 19, left: (13 + (3 + 3)) = 19, 5\n(5) + (19) = 24, left: (5 + (13 + (3 + 3))) = 24\nreach 24! expression: (5 + (13 + (3 + 3)))"}, {"input": "5 3 3 13\n", "output": "(5) * (13) = 65, left: (5 * 13) = 65, 3, 3\n(3) + (65) = 68, left: (3 + (5 * 13)) = 68, 3\nroll back, left: (5 * 13) = 65, 3, 3\nroll back, left: 5 3 3 13\n(5) / (13) = 5/13, left: (5 / 13) = 5/13, 3, 3\nroll back, left: 5 3 3 13\n(5) + (13) = 18, left: (5 + 13) = 18, 3, 3\n(3) + (18) = 21, left: (3 + (5 + 13)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 + (5 + 13))) = 24\nreach 24! expression: (3 + (3 + (5 + 13)))"}, {"input": "5 3 3 13\n", "output": "(13) / (3) = 13/3, left: (13 / 3) = 13/3, 5, 3\nroll back, left: 5 3 3 13\n(13) - (3) = 10, left: (13 - 3) = 10, 5, 3\nroll back, left: 5 3 3 13\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, 5, 3\nroll back, left: 5 3 3 13\n(3) + (13) = 16, left: (3 + 13) = 16, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (3 + 13) = 16\n(16) + (8) = 24, left: ((3 + 13) + (5 + 3)) = 24\nreach 24! expression: ((3 + 13) + (5 + 3))"}, {"input": "5 3 3 13\n", "output": "(3) / (5) = 3/5, left: (3 / 5) = 3/5, 3, 13\nroll back, left: 5 3 3 13\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, 3, 13\n(5/3) / (3) = 5/9, left: ((5 / 3) / 3) = 5/9, 13\nroll back, left: (5 / 3) = 5/3, 3, 13\nroll back, left: 5 3 3 13\n(5) + (3) = 8, left: (5 + 3) = 8, 3, 13\n(13) + (8) = 21, left: (13 + (5 + 3)) = 21, 3\n(3) + (21) = 24, left: (3 + (13 + (5 + 3))) = 24\nreach 24! expression: (3 + (13 + (5 + 3)))"}, {"input": "9 10 2 2\n", "output": "(2) - (9) = -7, left: (2 - 9) = -7, 10, 2\n(2) * (-7) = -14, left: (2 * (2 - 9)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (2 - 9))) = 24\nreach 24! expression: (10 - (2 * (2 - 9)))"}, {"input": "9 10 2 2\n", "output": "(9) - (2) = 7, left: (9 - 2) = 7, 10, 2\n(2) * (7) = 14, left: (2 * (9 - 2)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (9 - 2))) = 24\nreach 24! expression: (10 + (2 * (9 - 2)))"}, {"input": "9 10 2 2\n", "output": "(10) + (2) = 12, left: (10 + 2) = 12, 9, 2\n(9) / (2) = 9/2, left: (9 / 2) = 9/2, (10 + 2) = 12\nroll back, left: (10 + 2) = 12, 9, 2\nroll back, left: 9 10 2 2\n(10) - (2) = 8, left: (10 - 2) = 8, 9, 2\nroll back, left: 9 10 2 2\n(9) - (2) = 7, left: (9 - 2) = 7, 10, 2\n(2) * (7) = 14, left: (2 * (9 - 2)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (9 - 2))) = 24\nreach 24! expression: (10 + (2 * (9 - 2)))"}, {"input": "9 10 2 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 9, 10\n(9) * (10) = 90, left: (9 * 10) = 90, (2 / 2) = 1\nroll back, left: (2 / 2) = 1, 9, 10\nroll back, left: 9 10 2 2\n(2) / (2) = 1, left: (2 / 2) = 1, 9, 10\nroll back, left: 9 10 2 2\n(2) - (9) = -7, left: (2 - 9) = -7, 10, 2\n(2) * (-7) = -14, left: (2 * (2 - 9)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (2 - 9))) = 24\nreach 24! expression: (10 - (2 * (2 - 9)))"}, {"input": "9 10 2 2\n", "output": "(2) / (10) = 1/5, left: (2 / 10) = 1/5, 9, 2\nroll back, left: 9 10 2 2\n(10) - (2) = 8, left: (10 - 2) = 8, 9, 2\nroll back, left: 9 10 2 2\n(2) * (2) = 4, left: (2 * 2) = 4, 9, 10\nroll back, left: 9 10 2 2\n(9) - (2) = 7, left: (9 - 2) = 7, 10, 2\n(2) * (7) = 14, left: (2 * (9 - 2)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 * (9 - 2))) = 24\nreach 24! expression: (10 + (2 * (9 - 2)))"}, {"input": "9 10 2 2\n", "output": "(9) / (10) = 9/10, left: (9 / 10) = 9/10, 2, 2\nroll back, left: 9 10 2 2\n(10) / (9) = 10/9, left: (10 / 9) = 10/9, 2, 2\nroll back, left: 9 10 2 2\n(9) + (10) = 19, left: (9 + 10) = 19, 2, 2\nroll back, left: 9 10 2 2\n(2) - (9) = -7, left: (2 - 9) = -7, 10, 2\n(2) * (-7) = -14, left: (2 * (2 - 9)) = -14, 10\n(10) - (-14) = 24, left: (10 - (2 * (2 - 9))) = 24\nreach 24! expression: (10 - (2 * (2 - 9)))"}, {"input": "13 6 8 6\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (13 - 8)) = 30, 6\n(30) - (6) = 24, left: ((6 * (13 - 8)) - 6) = 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "13 6 8 6\n", "output": "(8) - (13) = -5, left: (8 - 13) = -5, 6, 6\nroll back, left: 13 6 8 6\n(13) / (8) = 13/8, left: (13 / 8) = 13/8, 6, 6\n(13/8) / (6) = 13/48, left: ((13 / 8) / 6) = 13/48, 6\nroll back, left: (13 / 8) = 13/8, 6, 6\nroll back, left: 13 6 8 6\n(13) - (8) = 5, left: (13 - 8) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (13 - 8)) = 30, 6\n(30) - (6) = 24, left: ((6 * (13 - 8)) - 6) = 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "13 6 8 6\n", "output": "(13) * (6) = 78, left: (13 * 6) = 78, 8, 6\nroll back, left: 13 6 8 6\n(13) + (6) = 19, left: (13 + 6) = 19, 8, 6\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, (13 + 6) = 19\nroll back, left: (13 + 6) = 19, 8, 6\nroll back, left: 13 6 8 6\n(13) - (8) = 5, left: (13 - 8) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (13 - 8)) = 30, 6\n(30) - (6) = 24, left: ((6 * (13 - 8)) - 6) = 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "13 6 8 6\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 13, 6\nroll back, left: 13 6 8 6\n(6) - (6) = 0, left: (6 - 6) = 0, 13, 8\nroll back, left: 13 6 8 6\n(8) + (6) = 14, left: (8 + 6) = 14, 13, 6\nroll back, left: 13 6 8 6\n(13) - (8) = 5, left: (13 - 8) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (13 - 8)) = 30, 6\n(30) - (6) = 24, left: ((6 * (13 - 8)) - 6) = 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "13 6 8 6\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 13, 6\nroll back, left: 13 6 8 6\n(13) + (8) = 21, left: (13 + 8) = 21, 6, 6\n(6) - (6) = 0, left: (6 - 6) = 0, (13 + 8) = 21\nroll back, left: (13 + 8) = 21, 6, 6\nroll back, left: 13 6 8 6\n(13) - (8) = 5, left: (13 - 8) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (13 - 8)) = 30, 6\n(30) - (6) = 24, left: ((6 * (13 - 8)) - 6) = 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "13 6 8 6\n", "output": "(13) - (6) = 7, left: (13 - 6) = 7, 8, 6\nroll back, left: 13 6 8 6\n(6) / (13) = 6/13, left: (6 / 13) = 6/13, 8, 6\nroll back, left: 13 6 8 6\n(13) * (8) = 104, left: (13 * 8) = 104, 6, 6\nroll back, left: 13 6 8 6\n(13) - (8) = 5, left: (13 - 8) = 5, 6, 6\n(6) * (5) = 30, left: (6 * (13 - 8)) = 30, 6\n(30) - (6) = 24, left: ((6 * (13 - 8)) - 6) = 24\nreach 24! expression: ((6 * (13 - 8)) - 6)"}, {"input": "3 11 1 3\n", "output": "(3) * (1) = 3, left: (3 * 1) = 3, 11, 3\n(11) - (3) = 8, left: (11 - 3) = 8, (3 * 1) = 3\n(3) * (8) = 24, left: ((3 * 1) * (11 - 3)) = 24\nreach 24! expression: ((3 * 1) * (11 - 3))"}, {"input": "3 11 1 3\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 11, 3\n(11) - (3) = 8, left: (11 - 3) = 8, (3 / 1) = 3\n(3) * (8) = 24, left: ((3 / 1) * (11 - 3)) = 24\nreach 24! expression: ((3 / 1) * (11 - 3))"}, {"input": "3 11 1 3\n", "output": "(1) / (3) = 1/3, left: (1 / 3) = 1/3, 11, 3\n(11) - (3) = 8, left: (11 - 3) = 8, (1 / 3) = 1/3\n(8) / (1/3) = 24, left: ((11 - 3) / (1 / 3)) = 24\nreach 24! expression: ((11 - 3) / (1 / 3))"}, {"input": "3 11 1 3\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 1, 3\n(8) / (1) = 8, left: ((11 - 3) / 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((11 - 3) / 1)) = 24\nreach 24! expression: (3 * ((11 - 3) / 1))"}, {"input": "3 11 1 3\n", "output": "(11) * (1) = 11, left: (11 * 1) = 11, 3, 3\n(11) - (3) = 8, left: ((11 * 1) - 3) = 8, 3\n(3) * (8) = 24, left: (3 * ((11 * 1) - 3)) = 24\nreach 24! expression: (3 * ((11 * 1) - 3))"}, {"input": "3 11 1 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 11, 1\n(1) - (11) = -10, left: (1 - 11) = -10, (3 * 3) = 9\n(9) + (-10) = -1, left: ((3 * 3) + (1 - 11)) = -1\nroll back, left: (1 - 11) = -10, (3 * 3) = 9\nroll back, left: (3 * 3) = 9, 11, 1\nroll back, left: 3 11 1 3\n(11) * (1) = 11, left: (11 * 1) = 11, 3, 3\n(11) - (3) = 8, left: ((11 * 1) - 3) = 8, 3\n(3) * (8) = 24, left: (3 * ((11 * 1) - 3)) = 24\nreach 24! expression: (3 * ((11 * 1) - 3))"}, {"input": "3 11 1 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 11, 1\nroll back, left: 3 11 1 3\n(3) - (1) = 2, left: (3 - 1) = 2, 11, 3\n(2) / (3) = 2/3, left: ((3 - 1) / 3) = 2/3, 11\nroll back, left: (3 - 1) = 2, 11, 3\nroll back, left: 3 11 1 3\n(3) * (1) = 3, left: (3 * 1) = 3, 11, 3\n(11) - (3) = 8, left: (11 - 3) = 8, (3 * 1) = 3\n(3) * (8) = 24, left: ((3 * 1) * (11 - 3)) = 24\nreach 24! expression: ((3 * 1) * (11 - 3))"}, {"input": "3 11 1 3\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 1, 3\n(8) / (1) = 8, left: ((11 - 3) / 1) = 8, 3\n(3) + (8) = 11, left: (3 + ((11 - 3) / 1)) = 11\nroll back, left: ((11 - 3) / 1) = 8, 3\n(3) / (8) = 3/8, left: (3 / ((11 - 3) / 1)) = 3/8\nroll back, left: ((11 - 3) / 1) = 8, 3\n(3) - (8) = -5, left: (3 - ((11 - 3) / 1)) = -5\nroll back, left: ((11 - 3) / 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((11 - 3) / 1)) = 24\nreach 24! expression: (3 * ((11 - 3) / 1))"}, {"input": "10 7 2 7\n", "output": "(10) / (7) = 10/7, left: (10 / 7) = 10/7, 7, 2\n(2) + (10/7) = 24/7, left: (2 + (10 / 7)) = 24/7, 7\n(7) * (24/7) = 24, left: (7 * (2 + (10 / 7))) = 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(10) / (7) = 10/7, left: (10 / 7) = 10/7, 2, 7\n(2) + (10/7) = 24/7, left: (2 + (10 / 7)) = 24/7, 7\n(7) * (24/7) = 24, left: (7 * (2 + (10 / 7))) = 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(2) / (10) = 1/5, left: (2 / 10) = 1/5, 7, 7\nroll back, left: 10 7 2 7\n(2) - (10) = -8, left: (2 - 10) = -8, 7, 7\n(7) - (-8) = 15, left: (7 - (2 - 10)) = 15, 7\nroll back, left: (2 - 10) = -8, 7, 7\nroll back, left: 10 7 2 7\n(10) / (7) = 10/7, left: (10 / 7) = 10/7, 2, 7\n(2) + (10/7) = 24/7, left: (2 + (10 / 7)) = 24/7, 7\n(7) * (24/7) = 24, left: (7 * (2 + (10 / 7))) = 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(2) / (7) = 2/7, left: (2 / 7) = 2/7, 10, 7\nroll back, left: 10 7 2 7\n(10) + (7) = 17, left: (10 + 7) = 17, 2, 7\n(2) * (17) = 34, left: (2 * (10 + 7)) = 34, 7\nroll back, left: (10 + 7) = 17, 2, 7\nroll back, left: 10 7 2 7\n(10) / (7) = 10/7, left: (10 / 7) = 10/7, 2, 7\n(2) + (10/7) = 24/7, left: (2 + (10 / 7)) = 24/7, 7\n(7) * (24/7) = 24, left: (7 * (2 + (10 / 7))) = 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(7) * (2) = 14, left: (7 * 2) = 14, 10, 7\n(7) + (14) = 21, left: (7 + (7 * 2)) = 21, 10\nroll back, left: (7 * 2) = 14, 10, 7\nroll back, left: 10 7 2 7\n(7) - (2) = 5, left: (7 - 2) = 5, 10, 7\nroll back, left: 10 7 2 7\n(10) / (7) = 10/7, left: (10 / 7) = 10/7, 2, 7\n(2) + (10/7) = 24/7, left: (2 + (10 / 7)) = 24/7, 7\n(7) * (24/7) = 24, left: (7 * (2 + (10 / 7))) = 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "10 7 2 7\n", "output": "(2) * (7) = 14, left: (2 * 7) = 14, 10, 7\n(14) - (10) = 4, left: ((2 * 7) - 10) = 4, 7\nroll back, left: (2 * 7) = 14, 10, 7\nroll back, left: 10 7 2 7\n(2) + (7) = 9, left: (2 + 7) = 9, 10, 7\nroll back, left: 10 7 2 7\n(10) / (7) = 10/7, left: (10 / 7) = 10/7, 2, 7\n(2) + (10/7) = 24/7, left: (2 + (10 / 7)) = 24/7, 7\n(7) * (24/7) = 24, left: (7 * (2 + (10 / 7))) = 24\nreach 24! expression: (7 * (2 + (10 / 7)))"}, {"input": "5 9 7 6\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (5 - 7)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (5 - 7))) = 24\nreach 24! expression: (6 - (9 * (5 - 7)))"}, {"input": "5 9 7 6\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 9, 6\n(9) * (2) = 18, left: (9 * (7 - 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (7 - 5))) = 24\nreach 24! expression: (6 + (9 * (7 - 5)))"}, {"input": "5 9 7 6\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 5, 7\nroll back, left: 5 9 7 6\n(5) * (6) = 30, left: (5 * 6) = 30, 9, 7\n(9) * (7) = 63, left: (9 * 7) = 63, (5 * 6) = 30\nroll back, left: (5 * 6) = 30, 9, 7\nroll back, left: 5 9 7 6\n(5) - (7) = -2, left: (5 - 7) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (5 - 7)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (5 - 7))) = 24\nreach 24! expression: (6 - (9 * (5 - 7)))"}, {"input": "5 9 7 6\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 5, 7\nroll back, left: 5 9 7 6\n(5) - (9) = -4, left: (5 - 9) = -4, 7, 6\nroll back, left: 5 9 7 6\n(7) / (6) = 7/6, left: (7 / 6) = 7/6, 5, 9\nroll back, left: 5 9 7 6\n(5) - (7) = -2, left: (5 - 7) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (5 - 7)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (5 - 7))) = 24\nreach 24! expression: (6 - (9 * (5 - 7)))"}, {"input": "5 9 7 6\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 9, 7\n(9) - (7) = 2, left: (9 - 7) = 2, (6 / 5) = 6/5\n(6/5) - (2) = -4/5, left: ((6 / 5) - (9 - 7)) = -4/5\nroll back, left: (9 - 7) = 2, (6 / 5) = 6/5\nroll back, left: (6 / 5) = 6/5, 9, 7\nroll back, left: 5 9 7 6\n(7) - (5) = 2, left: (7 - 5) = 2, 9, 6\n(9) * (2) = 18, left: (9 * (7 - 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (7 - 5))) = 24\nreach 24! expression: (6 + (9 * (7 - 5)))"}, {"input": "5 9 7 6\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 9, 6\n(2) - (6) = -4, left: ((7 - 5) - 6) = -4, 9\n(9) * (-4) = -36, left: (9 * ((7 - 5) - 6)) = -36\nroll back, left: ((7 - 5) - 6) = -4, 9\nroll back, left: (7 - 5) = 2, 9, 6\n(6) + (2) = 8, left: (6 + (7 - 5)) = 8, 9\nroll back, left: (7 - 5) = 2, 9, 6\n(9) * (2) = 18, left: (9 * (7 - 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (7 - 5))) = 24\nreach 24! expression: (6 + (9 * (7 - 5)))"}, {"input": "5 9 7 6\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 5, 9\nroll back, left: 5 9 7 6\n(9) / (7) = 9/7, left: (9 / 7) = 9/7, 5, 6\nroll back, left: 5 9 7 6\n(9) + (7) = 16, left: (9 + 7) = 16, 5, 6\nroll back, left: 5 9 7 6\n(7) - (5) = 2, left: (7 - 5) = 2, 9, 6\n(9) * (2) = 18, left: (9 * (7 - 5)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (7 - 5))) = 24\nreach 24! expression: (6 + (9 * (7 - 5)))"}, {"input": "2 1 11 9\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (2 + 1)) = 33, 9\n(33) - (9) = 24, left: ((11 * (2 + 1)) - 9) = 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(1) * (11) = 11, left: (1 * 11) = 11, 2, 9\nroll back, left: 2 1 11 9\n(2) / (11) = 2/11, left: (2 / 11) = 2/11, 1, 9\nroll back, left: 2 1 11 9\n(2) * (11) = 22, left: (2 * 11) = 22, 1, 9\nroll back, left: 2 1 11 9\n(2) + (1) = 3, left: (2 + 1) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (2 + 1)) = 33, 9\n(33) - (9) = 24, left: ((11 * (2 + 1)) - 9) = 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 1, 11\nroll back, left: 2 1 11 9\n(2) / (9) = 2/9, left: (2 / 9) = 2/9, 1, 11\nroll back, left: 2 1 11 9\n(2) / (11) = 2/11, left: (2 / 11) = 2/11, 1, 9\nroll back, left: 2 1 11 9\n(2) + (1) = 3, left: (2 + 1) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (2 + 1)) = 33, 9\n(33) - (9) = 24, left: ((11 * (2 + 1)) - 9) = 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(2) + (1) = 3, left: (2 + 1) = 3, 11, 9\n(11) - (3) = 8, left: (11 - (2 + 1)) = 8, 9\nroll back, left: (2 + 1) = 3, 11, 9\n(11) / (3) = 11/3, left: (11 / (2 + 1)) = 11/3, 9\nroll back, left: (2 + 1) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (2 + 1)) = 33, 9\n(9) + (33) = 42, left: (9 + (11 * (2 + 1))) = 42\nroll back, left: (11 * (2 + 1)) = 33, 9\n(33) - (9) = 24, left: ((11 * (2 + 1)) - 9) = 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(2) + (9) = 11, left: (2 + 9) = 11, 1, 11\nroll back, left: 2 1 11 9\n(11) - (9) = 2, left: (11 - 9) = 2, 2, 1\nroll back, left: 2 1 11 9\n(11) / (9) = 11/9, left: (11 / 9) = 11/9, 2, 1\nroll back, left: 2 1 11 9\n(2) + (1) = 3, left: (2 + 1) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (2 + 1)) = 33, 9\n(33) - (9) = 24, left: ((11 * (2 + 1)) - 9) = 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "2 1 11 9\n", "output": "(9) / (2) = 9/2, left: (9 / 2) = 9/2, 1, 11\nroll back, left: 2 1 11 9\n(2) - (11) = -9, left: (2 - 11) = -9, 1, 9\n(9) / (1) = 9, left: (9 / 1) = 9, (2 - 11) = -9\nroll back, left: (2 - 11) = -9, 1, 9\nroll back, left: 2 1 11 9\n(2) + (1) = 3, left: (2 + 1) = 3, 11, 9\n(11) * (3) = 33, left: (11 * (2 + 1)) = 33, 9\n(33) - (9) = 24, left: ((11 * (2 + 1)) - 9) = 24\nreach 24! expression: ((11 * (2 + 1)) - 9)"}, {"input": "11 1 3 8\n", "output": "(1) + (8) = 9, left: (1 + 8) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (1 + 8) = 9\n(33) - (9) = 24, left: ((11 * 3) - (1 + 8)) = 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "11 1 3 8\n", "output": "(1) / (8) = 1/8, left: (1 / 8) = 1/8, 11, 3\nroll back, left: 11 1 3 8\n(8) - (1) = 7, left: (8 - 1) = 7, 11, 3\nroll back, left: 11 1 3 8\n(1) - (8) = -7, left: (1 - 8) = -7, 11, 3\nroll back, left: 11 1 3 8\n(1) + (8) = 9, left: (1 + 8) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (1 + 8) = 9\n(33) - (9) = 24, left: ((11 * 3) - (1 + 8)) = 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "11 1 3 8\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 11, 8\nroll back, left: 11 1 3 8\n(11) + (1) = 12, left: (11 + 1) = 12, 3, 8\nroll back, left: 11 1 3 8\n(1) - (8) = -7, left: (1 - 8) = -7, 11, 3\nroll back, left: 11 1 3 8\n(1) + (8) = 9, left: (1 + 8) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (1 + 8) = 9\n(33) - (9) = 24, left: ((11 * 3) - (1 + 8)) = 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "11 1 3 8\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 11, 1\nroll back, left: 11 1 3 8\n(8) / (11) = 8/11, left: (8 / 11) = 8/11, 1, 3\n(1) / (8/11) = 11/8, left: (1 / (8 / 11)) = 11/8, 3\nroll back, left: (8 / 11) = 8/11, 1, 3\nroll back, left: 11 1 3 8\n(1) + (8) = 9, left: (1 + 8) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (1 + 8) = 9\n(33) - (9) = 24, left: ((11 * 3) - (1 + 8)) = 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "11 1 3 8\n", "output": "(11) / (8) = 11/8, left: (11 / 8) = 11/8, 1, 3\nroll back, left: 11 1 3 8\n(11) * (8) = 88, left: (11 * 8) = 88, 1, 3\nroll back, left: 11 1 3 8\n(1) * (8) = 8, left: (1 * 8) = 8, 11, 3\nroll back, left: 11 1 3 8\n(1) + (8) = 9, left: (1 + 8) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (1 + 8) = 9\n(33) - (9) = 24, left: ((11 * 3) - (1 + 8)) = 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "11 1 3 8\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 11, 1\nroll back, left: 11 1 3 8\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 11, 1\nroll back, left: 11 1 3 8\n(3) + (8) = 11, left: (3 + 8) = 11, 11, 1\nroll back, left: 11 1 3 8\n(1) + (8) = 9, left: (1 + 8) = 9, 11, 3\n(11) * (3) = 33, left: (11 * 3) = 33, (1 + 8) = 9\n(33) - (9) = 24, left: ((11 * 3) - (1 + 8)) = 24\nreach 24! expression: ((11 * 3) - (1 + 8))"}, {"input": "9 13 3 2\n", "output": "(13) - (9) = 4, left: (13 - 9) = 4, 3, 2\n(2) * (4) = 8, left: (2 * (13 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 * (13 - 9))) = 24\nreach 24! expression: (3 * (2 * (13 - 9)))"}, {"input": "9 13 3 2\n", "output": "(3) * (2) = 6, left: (3 * 2) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (3 * 2) = 6\n(6) * (4) = 24, left: ((3 * 2) * (13 - 9)) = 24\nreach 24! expression: ((3 * 2) * (13 - 9))"}, {"input": "9 13 3 2\n", "output": "(13) * (3) = 39, left: (13 * 3) = 39, 9, 2\n(9) + (39) = 48, left: (9 + (13 * 3)) = 48, 2\n(48) / (2) = 24, left: ((9 + (13 * 3)) / 2) = 24\nreach 24! expression: ((9 + (13 * 3)) / 2)"}, {"input": "9 13 3 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 9, 13\nroll back, left: 9 13 3 2\n(3) + (2) = 5, left: (3 + 2) = 5, 9, 13\n(9) + (13) = 22, left: (9 + 13) = 22, (3 + 2) = 5\nroll back, left: (3 + 2) = 5, 9, 13\nroll back, left: 9 13 3 2\n(3) * (2) = 6, left: (3 * 2) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (3 * 2) = 6\n(6) * (4) = 24, left: ((3 * 2) * (13 - 9)) = 24\nreach 24! expression: ((3 * 2) * (13 - 9))"}, {"input": "9 13 3 2\n", "output": "(9) - (13) = -4, left: (9 - 13) = -4, 3, 2\n(3) + (-4) = -1, left: (3 + (9 - 13)) = -1, 2\nroll back, left: (9 - 13) = -4, 3, 2\nroll back, left: 9 13 3 2\n(13) - (9) = 4, left: (13 - 9) = 4, 3, 2\n(2) / (4) = 1/2, left: (2 / (13 - 9)) = 1/2, 3\nroll back, left: (13 - 9) = 4, 3, 2\n(2) * (4) = 8, left: (2 * (13 - 9)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 * (13 - 9))) = 24\nreach 24! expression: (3 * (2 * (13 - 9)))"}, {"input": "9 13 3 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 9, 13\n(1) / (9) = 1/9, left: ((3 - 2) / 9) = 1/9, 13\nroll back, left: (3 - 2) = 1, 9, 13\nroll back, left: 9 13 3 2\n(3) * (2) = 6, left: (3 * 2) = 6, 9, 13\n(6) - (9) = -3, left: ((3 * 2) - 9) = -3, 13\nroll back, left: (3 * 2) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (3 * 2) = 6\n(6) * (4) = 24, left: ((3 * 2) * (13 - 9)) = 24\nreach 24! expression: ((3 * 2) * (13 - 9))"}, {"input": "9 13 3 2\n", "output": "(9) * (2) = 18, left: (9 * 2) = 18, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (9 * 2) = 18\nroll back, left: (9 * 2) = 18, 13, 3\nroll back, left: 9 13 3 2\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, 9, 2\nroll back, left: 9 13 3 2\n(13) * (3) = 39, left: (13 * 3) = 39, 9, 2\n(9) + (39) = 48, left: (9 + (13 * 3)) = 48, 2\n(48) / (2) = 24, left: ((9 + (13 * 3)) / 2) = 24\nreach 24! expression: ((9 + (13 * 3)) / 2)"}, {"input": "9 13 3 2\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 9, 13\nroll back, left: 9 13 3 2\n(3) + (2) = 5, left: (3 + 2) = 5, 9, 13\n(5) - (9) = -4, left: ((3 + 2) - 9) = -4, 13\nroll back, left: (3 + 2) = 5, 9, 13\nroll back, left: 9 13 3 2\n(3) * (2) = 6, left: (3 * 2) = 6, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (3 * 2) = 6\n(6) * (4) = 24, left: ((3 * 2) * (13 - 9)) = 24\nreach 24! expression: ((3 * 2) * (13 - 9))"}, {"input": "2 2 5 11\n", "output": "(2) * (2) = 4, left: (2 * 2) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (2 * 2) = 4\n(4) * (6) = 24, left: ((2 * 2) * (11 - 5)) = 24\nreach 24! expression: ((2 * 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (2 + 2) = 4\n(4) * (6) = 24, left: ((2 + 2) * (11 - 5)) = 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) - (11) = -9, left: (2 - 11) = -9, 2, 5\nroll back, left: 2 2 5 11\n(2) * (11) = 22, left: (2 * 11) = 22, 2, 5\nroll back, left: 2 2 5 11\n(2) / (11) = 2/11, left: (2 / 11) = 2/11, 2, 5\nroll back, left: 2 2 5 11\n(2) + (2) = 4, left: (2 + 2) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (2 + 2) = 4\n(4) * (6) = 24, left: ((2 + 2) * (11 - 5)) = 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) * (5) = 10, left: (2 * 5) = 10, 2, 11\n(2) - (11) = -9, left: (2 - 11) = -9, (2 * 5) = 10\nroll back, left: (2 * 5) = 10, 2, 11\nroll back, left: 2 2 5 11\n(2) + (5) = 7, left: (2 + 5) = 7, 2, 11\nroll back, left: 2 2 5 11\n(2) * (2) = 4, left: (2 * 2) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (2 * 2) = 4\n(4) * (6) = 24, left: ((2 * 2) * (11 - 5)) = 24\nreach 24! expression: ((2 * 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 2, 11\n(11) * (-3) = -33, left: (11 * (2 - 5)) = -33, 2\nroll back, left: (2 - 5) = -3, 2, 11\nroll back, left: 2 2 5 11\n(2) / (11) = 2/11, left: (2 / 11) = 2/11, 2, 5\nroll back, left: 2 2 5 11\n(2) + (2) = 4, left: (2 + 2) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (2 + 2) = 4\n(4) * (6) = 24, left: ((2 + 2) * (11 - 5)) = 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(2) * (11) = 22, left: (2 * 11) = 22, 2, 5\nroll back, left: 2 2 5 11\n(2) - (11) = -9, left: (2 - 11) = -9, 2, 5\n(-9) / (2) = -9/2, left: ((2 - 11) / 2) = -9/2, 5\nroll back, left: (2 - 11) = -9, 2, 5\nroll back, left: 2 2 5 11\n(2) + (2) = 4, left: (2 + 2) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (2 + 2) = 4\n(4) * (6) = 24, left: ((2 + 2) * (11 - 5)) = 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "2 2 5 11\n", "output": "(5) / (2) = 5/2, left: (5 / 2) = 5/2, 2, 11\nroll back, left: 2 2 5 11\n(2) * (5) = 10, left: (2 * 5) = 10, 2, 11\nroll back, left: 2 2 5 11\n(11) / (2) = 11/2, left: (11 / 2) = 11/2, 2, 5\nroll back, left: 2 2 5 11\n(2) + (2) = 4, left: (2 + 2) = 4, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (2 + 2) = 4\n(4) * (6) = 24, left: ((2 + 2) * (11 - 5)) = 24\nreach 24! expression: ((2 + 2) * (11 - 5))"}, {"input": "4 2 2 8\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 2, 8\n(2) * (8) = 16, left: (2 * 8) = 16, (4 * 2) = 8\n(8) + (16) = 24, left: ((4 * 2) + (2 * 8)) = 24\nreach 24! expression: ((4 * 2) + (2 * 8))"}, {"input": "4 2 2 8\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 2, 8\n(8) * (6) = 48, left: (8 * (4 + 2)) = 48, 2\n(48) / (2) = 24, left: ((8 * (4 + 2)) / 2) = 24\nreach 24! expression: ((8 * (4 + 2)) / 2)"}, {"input": "4 2 2 8\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((4 + 2) / (2 / 8)) = 24\nreach 24! expression: ((4 + 2) / (2 / 8))"}, {"input": "4 2 2 8\n", "output": "(4) * (2) = 8, left: (4 * 2) = 8, 2, 8\n(8) - (8) = 0, left: ((4 * 2) - 8) = 0, 2\n(2) - (0) = 2, left: (2 - ((4 * 2) - 8)) = 2\nroll back, left: ((4 * 2) - 8) = 0, 2\nroll back, left: (4 * 2) = 8, 2, 8\n(8) / (8) = 1, left: ((4 * 2) / 8) = 1, 2\nroll back, left: (4 * 2) = 8, 2, 8\n(2) * (8) = 16, left: (2 * 8) = 16, (4 * 2) = 8\n(8) + (16) = 24, left: ((4 * 2) + (2 * 8)) = 24\nreach 24! expression: ((4 * 2) + (2 * 8))"}, {"input": "4 2 2 8\n", "output": "(2) - (8) = -6, left: (2 - 8) = -6, 4, 2\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, (2 - 8) = -6\nroll back, left: (2 - 8) = -6, 4, 2\nroll back, left: 4 2 2 8\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, 4, 2\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, (2 / 8) = 1/4\nroll back, left: (2 / 8) = 1/4, 4, 2\n(4) + (2) = 6, left: (4 + 2) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((4 + 2) / (2 / 8)) = 24\nreach 24! expression: ((4 + 2) / (2 / 8))"}, {"input": "4 2 2 8\n", "output": "(2) / (4) = 1/2, left: (2 / 4) = 1/2, 2, 8\n(2) - (1/2) = 3/2, left: (2 - (2 / 4)) = 3/2, 8\nroll back, left: (2 / 4) = 1/2, 2, 8\n(1/2) - (2) = -3/2, left: ((2 / 4) - 2) = -3/2, 8\nroll back, left: (2 / 4) = 1/2, 2, 8\nroll back, left: 4 2 2 8\n(4) + (2) = 6, left: (4 + 2) = 6, 2, 8\n(8) * (6) = 48, left: (8 * (4 + 2)) = 48, 2\n(48) / (2) = 24, left: ((8 * (4 + 2)) / 2) = 24\nreach 24! expression: ((8 * (4 + 2)) / 2)"}, {"input": "4 2 2 8\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 2, 2\nroll back, left: 4 2 2 8\n(8) - (4) = 4, left: (8 - 4) = 4, 2, 2\n(2) - (2) = 0, left: (2 - 2) = 0, (8 - 4) = 4\nroll back, left: (8 - 4) = 4, 2, 2\nroll back, left: 4 2 2 8\n(4) * (2) = 8, left: (4 * 2) = 8, 2, 8\n(2) * (8) = 16, left: (2 * 8) = 16, (4 * 2) = 8\n(8) + (16) = 24, left: ((4 * 2) + (2 * 8)) = 24\nreach 24! expression: ((4 * 2) + (2 * 8))"}, {"input": "4 2 2 8\n", "output": "(4) - (2) = 2, left: (4 - 2) = 2, 2, 8\n(8) + (2) = 10, left: (8 + (4 - 2)) = 10, 2\nroll back, left: (4 - 2) = 2, 2, 8\n(2) - (8) = -6, left: ((4 - 2) - 8) = -6, 2\nroll back, left: (4 - 2) = 2, 2, 8\nroll back, left: 4 2 2 8\n(4) + (2) = 6, left: (4 + 2) = 6, 2, 8\n(8) * (6) = 48, left: (8 * (4 + 2)) = 48, 2\n(48) / (2) = 24, left: ((8 * (4 + 2)) / 2) = 24\nreach 24! expression: ((8 * (4 + 2)) / 2)"}, {"input": "8 4 5 1\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (8 - 4) = 4\n(4) * (6) = 24, left: ((8 - 4) * (5 + 1)) = 24\nreach 24! expression: ((8 - 4) * (5 + 1))"}, {"input": "8 4 5 1\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (5 - 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (5 - 1))) = 24\nreach 24! expression: (8 + (4 * (5 - 1)))"}, {"input": "8 4 5 1\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 8, 4\n(8) - (4) = 4, left: (8 - 4) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (8 - 4)) = 24\nreach 24! expression: ((5 + 1) * (8 - 4))"}, {"input": "8 4 5 1\n", "output": "(8) + (5) = 13, left: (8 + 5) = 13, 4, 1\nroll back, left: 8 4 5 1\n(4) * (5) = 20, left: (4 * 5) = 20, 8, 1\n(1) * (20) = 20, left: (1 * (4 * 5)) = 20, 8\nroll back, left: (4 * 5) = 20, 8, 1\nroll back, left: 8 4 5 1\n(5) + (1) = 6, left: (5 + 1) = 6, 8, 4\n(8) - (4) = 4, left: (8 - 4) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (8 - 4)) = 24\nreach 24! expression: ((5 + 1) * (8 - 4))"}, {"input": "8 4 5 1\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 5, 1\n(2) / (5) = 2/5, left: ((8 / 4) / 5) = 2/5, 1\nroll back, left: (8 / 4) = 2, 5, 1\n(5) / (2) = 5/2, left: (5 / (8 / 4)) = 5/2, 1\nroll back, left: (8 / 4) = 2, 5, 1\nroll back, left: 8 4 5 1\n(8) - (4) = 4, left: (8 - 4) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (8 - 4) = 4\n(4) * (6) = 24, left: ((8 - 4) * (5 + 1)) = 24\nreach 24! expression: ((8 - 4) * (5 + 1))"}, {"input": "8 4 5 1\n", "output": "(8) + (1) = 9, left: (8 + 1) = 9, 4, 5\n(9) - (4) = 5, left: ((8 + 1) - 4) = 5, 5\nroll back, left: (8 + 1) = 9, 4, 5\nroll back, left: 8 4 5 1\n(4) - (1) = 3, left: (4 - 1) = 3, 8, 5\nroll back, left: 8 4 5 1\n(8) - (4) = 4, left: (8 - 4) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (8 - 4) = 4\n(4) * (6) = 24, left: ((8 - 4) * (5 + 1)) = 24\nreach 24! expression: ((8 - 4) * (5 + 1))"}, {"input": "8 4 5 1\n", "output": "(4) + (1) = 5, left: (4 + 1) = 5, 8, 5\nroll back, left: 8 4 5 1\n(8) / (1) = 8, left: (8 / 1) = 8, 4, 5\n(4) - (8) = -4, left: (4 - (8 / 1)) = -4, 5\nroll back, left: (8 / 1) = 8, 4, 5\nroll back, left: 8 4 5 1\n(5) + (1) = 6, left: (5 + 1) = 6, 8, 4\n(8) - (4) = 4, left: (8 - 4) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (8 - 4)) = 24\nreach 24! expression: ((5 + 1) * (8 - 4))"}, {"input": "8 4 5 1\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 8, 4\n(4) - (8) = -4, left: ((5 - 1) - 8) = -4, 4\nroll back, left: (5 - 1) = 4, 8, 4\n(8) - (4) = 4, left: (8 - (5 - 1)) = 4, 4\nroll back, left: (5 - 1) = 4, 8, 4\n(8) + (4) = 12, left: (8 + (5 - 1)) = 12, 4\nroll back, left: (5 - 1) = 4, 8, 4\n(4) * (4) = 16, left: (4 * (5 - 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (5 - 1))) = 24\nreach 24! expression: (8 + (4 * (5 - 1)))"}, {"input": "11 2 8 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (8 / 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (8 / 8))) = 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "11 2 8 8\n", "output": "(8) - (2) = 6, left: (8 - 2) = 6, 11, 8\nroll back, left: 11 2 8 8\n(8) - (8) = 0, left: (8 - 8) = 0, 11, 2\nroll back, left: 11 2 8 8\n(8) * (8) = 64, left: (8 * 8) = 64, 11, 2\nroll back, left: 11 2 8 8\n(8) / (8) = 1, left: (8 / 8) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (8 / 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (8 / 8))) = 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "11 2 8 8\n", "output": "(2) * (8) = 16, left: (2 * 8) = 16, 11, 8\n(11) - (16) = -5, left: (11 - (2 * 8)) = -5, 8\nroll back, left: (2 * 8) = 16, 11, 8\nroll back, left: 11 2 8 8\n(8) / (8) = 1, left: (8 / 8) = 1, 11, 2\n(1) - (11) = -10, left: ((8 / 8) - 11) = -10, 2\nroll back, left: (8 / 8) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (8 / 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (8 / 8))) = 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "11 2 8 8\n", "output": "(11) / (2) = 11/2, left: (11 / 2) = 11/2, 8, 8\nroll back, left: 11 2 8 8\n(11) * (2) = 22, left: (11 * 2) = 22, 8, 8\nroll back, left: 11 2 8 8\n(2) * (8) = 16, left: (2 * 8) = 16, 11, 8\nroll back, left: 11 2 8 8\n(8) / (8) = 1, left: (8 / 8) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (8 / 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (8 / 8))) = 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "11 2 8 8\n", "output": "(11) * (2) = 22, left: (11 * 2) = 22, 8, 8\n(22) / (8) = 11/4, left: ((11 * 2) / 8) = 11/4, 8\nroll back, left: (11 * 2) = 22, 8, 8\nroll back, left: 11 2 8 8\n(2) - (11) = -9, left: (2 - 11) = -9, 8, 8\nroll back, left: 11 2 8 8\n(8) / (8) = 1, left: (8 / 8) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (8 / 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (8 / 8))) = 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "11 2 8 8\n", "output": "(11) / (8) = 11/8, left: (11 / 8) = 11/8, 2, 8\nroll back, left: 11 2 8 8\n(8) / (11) = 8/11, left: (8 / 11) = 8/11, 2, 8\nroll back, left: 11 2 8 8\n(8) / (2) = 4, left: (8 / 2) = 4, 11, 8\nroll back, left: 11 2 8 8\n(8) / (8) = 1, left: (8 / 8) = 1, 11, 2\n(11) + (1) = 12, left: (11 + (8 / 8)) = 12, 2\n(2) * (12) = 24, left: (2 * (11 + (8 / 8))) = 24\nreach 24! expression: (2 * (11 + (8 / 8)))"}, {"input": "1 1 3 6\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 1, 6\n(1) + (3) = 4, left: (1 + (1 * 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (1 * 3))) = 24\nreach 24! expression: (6 * (1 + (1 * 3)))"}, {"input": "1 1 3 6\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 1, 6\n(1) / (4) = 1/4, left: (1 / (1 + 3)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (1 + 3))) = 24\nreach 24! expression: (6 / (1 / (1 + 3)))"}, {"input": "1 1 3 6\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 3, 6\n(6) + (2) = 8, left: (6 + (1 + 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (1 + 1))) = 24\nreach 24! expression: (3 * (6 + (1 + 1)))"}, {"input": "1 1 3 6\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (1 / 6) = 1/6\n(4) / (1/6) = 24, left: ((1 + 3) / (1 / 6)) = 24\nreach 24! expression: ((1 + 3) / (1 / 6))"}, {"input": "1 1 3 6\n", "output": "(1) * (6) = 6, left: (1 * 6) = 6, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (1 * 6) = 6\n(6) * (4) = 24, left: ((1 * 6) * (1 + 3)) = 24\nreach 24! expression: ((1 * 6) * (1 + 3))"}, {"input": "1 1 3 6\n", "output": "(1) * (6) = 6, left: (1 * 6) = 6, 1, 3\n(6) - (1) = 5, left: ((1 * 6) - 1) = 5, 3\n(3) + (5) = 8, left: (3 + ((1 * 6) - 1)) = 8\nroll back, left: ((1 * 6) - 1) = 5, 3\nroll back, left: (1 * 6) = 6, 1, 3\n(1) + (6) = 7, left: (1 + (1 * 6)) = 7, 3\nroll back, left: (1 * 6) = 6, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (1 * 6) = 6\n(6) * (4) = 24, left: ((1 * 6) * (1 + 3)) = 24\nreach 24! expression: ((1 * 6) * (1 + 3))"}, {"input": "1 1 3 6\n", "output": "(1) - (1) = 0, left: (1 - 1) = 0, 3, 6\n(6) * (0) = 0, left: (6 * (1 - 1)) = 0, 3\n(3) - (0) = 3, left: (3 - (6 * (1 - 1))) = 3\nroll back, left: (6 * (1 - 1)) = 0, 3\nroll back, left: (1 - 1) = 0, 3, 6\nroll back, left: 1 1 3 6\n(1) + (1) = 2, left: (1 + 1) = 2, 3, 6\n(6) + (2) = 8, left: (6 + (1 + 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (6 + (1 + 1))) = 24\nreach 24! expression: (3 * (6 + (1 + 1)))"}, {"input": "1 1 3 6\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 1, 3\n(1) / (1/6) = 6, left: (1 / (1 / 6)) = 6, 3\n(6) / (3) = 2, left: ((1 / (1 / 6)) / 3) = 2\nroll back, left: (1 / (1 / 6)) = 6, 3\nroll back, left: (1 / 6) = 1/6, 1, 3\n(1) - (3) = -2, left: (1 - 3) = -2, (1 / 6) = 1/6\nroll back, left: (1 / 6) = 1/6, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (1 / 6) = 1/6\n(4) / (1/6) = 24, left: ((1 + 3) / (1 / 6)) = 24\nreach 24! expression: ((1 + 3) / (1 / 6))"}, {"input": "1 1 3 6\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 1, 6\n(1) - (3) = -2, left: (1 - (1 * 3)) = -2, 6\nroll back, left: (1 * 3) = 3, 1, 6\n(1) * (3) = 3, left: (1 * (1 * 3)) = 3, 6\n(6) - (3) = 3, left: (6 - (1 * (1 * 3))) = 3\nroll back, left: (1 * (1 * 3)) = 3, 6\nroll back, left: (1 * 3) = 3, 1, 6\n(1) + (3) = 4, left: (1 + (1 * 3)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (1 * 3))) = 24\nreach 24! expression: (6 * (1 + (1 * 3)))"}, {"input": "1 1 3 6\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 1, 6\n(1) / (4) = 1/4, left: (1 / (1 + 3)) = 1/4, 6\n(6) + (1/4) = 25/4, left: (6 + (1 / (1 + 3))) = 25/4\nroll back, left: (1 / (1 + 3)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (1 + 3))) = 24\nreach 24! expression: (6 / (1 / (1 + 3)))"}, {"input": "1 1 3 6\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 1, 6\n(1) / (4) = 1/4, left: (1 / (1 + 3)) = 1/4, 6\n(6) + (1/4) = 25/4, left: (6 + (1 / (1 + 3))) = 25/4\nroll back, left: (1 / (1 + 3)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (1 + 3))) = 24\nreach 24! expression: (6 / (1 / (1 + 3)))"}, {"input": "1 1 3 6\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 1, 6\n(1) / (4) = 1/4, left: (1 / (1 + 3)) = 1/4, 6\n(6) + (1/4) = 25/4, left: (6 + (1 / (1 + 3))) = 25/4\nroll back, left: (1 / (1 + 3)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (1 + 3))) = 24\nreach 24! expression: (6 / (1 / (1 + 3)))"}, {"input": "1 1 3 6\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 1, 6\n(1) / (4) = 1/4, left: (1 / (1 + 3)) = 1/4, 6\n(6) + (1/4) = 25/4, left: (6 + (1 / (1 + 3))) = 25/4\nroll back, left: (1 / (1 + 3)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (1 / (1 + 3))) = 24\nreach 24! expression: (6 / (1 / (1 + 3)))"}, {"input": "7 4 10 5\n", "output": "(5) - (7) = -2, left: (5 - 7) = -2, 4, 10\n(10) * (-2) = -20, left: (10 * (5 - 7)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 * (5 - 7))) = 24\nreach 24! expression: (4 - (10 * (5 - 7)))"}, {"input": "7 4 10 5\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (7 - 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (7 - 5))) = 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(5) - (4) = 1, left: (5 - 4) = 1, 7, 10\nroll back, left: 7 4 10 5\n(5) - (10) = -5, left: (5 - 10) = -5, 7, 4\nroll back, left: 7 4 10 5\n(10) * (5) = 50, left: (10 * 5) = 50, 7, 4\nroll back, left: 7 4 10 5\n(7) - (5) = 2, left: (7 - 5) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (7 - 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (7 - 5))) = 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(5) / (10) = 1/2, left: (5 / 10) = 1/2, 7, 4\nroll back, left: 7 4 10 5\n(4) * (5) = 20, left: (4 * 5) = 20, 7, 10\nroll back, left: 7 4 10 5\n(4) + (5) = 9, left: (4 + 5) = 9, 7, 10\nroll back, left: 7 4 10 5\n(7) - (5) = 2, left: (7 - 5) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (7 - 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (7 - 5))) = 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(10) * (5) = 50, left: (10 * 5) = 50, 7, 4\nroll back, left: 7 4 10 5\n(4) / (7) = 4/7, left: (4 / 7) = 4/7, 10, 5\nroll back, left: 7 4 10 5\n(7) * (4) = 28, left: (7 * 4) = 28, 10, 5\nroll back, left: 7 4 10 5\n(5) - (7) = -2, left: (5 - 7) = -2, 4, 10\n(10) * (-2) = -20, left: (10 * (5 - 7)) = -20, 4\n(4) - (-20) = 24, left: (4 - (10 * (5 - 7))) = 24\nreach 24! expression: (4 - (10 * (5 - 7)))"}, {"input": "7 4 10 5\n", "output": "(7) * (5) = 35, left: (7 * 5) = 35, 4, 10\nroll back, left: 7 4 10 5\n(7) + (5) = 12, left: (7 + 5) = 12, 4, 10\n(10) / (12) = 5/6, left: (10 / (7 + 5)) = 5/6, 4\nroll back, left: (7 + 5) = 12, 4, 10\nroll back, left: 7 4 10 5\n(7) - (5) = 2, left: (7 - 5) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (7 - 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (7 - 5))) = 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "7 4 10 5\n", "output": "(10) / (5) = 2, left: (10 / 5) = 2, 7, 4\nroll back, left: 7 4 10 5\n(5) / (10) = 1/2, left: (5 / 10) = 1/2, 7, 4\nroll back, left: 7 4 10 5\n(4) + (10) = 14, left: (4 + 10) = 14, 7, 5\nroll back, left: 7 4 10 5\n(7) - (5) = 2, left: (7 - 5) = 2, 4, 10\n(10) * (2) = 20, left: (10 * (7 - 5)) = 20, 4\n(4) + (20) = 24, left: (4 + (10 * (7 - 5))) = 24\nreach 24! expression: (4 + (10 * (7 - 5)))"}, {"input": "2 13 10 10\n", "output": "(13) - (10) = 3, left: (13 - 10) = 3, 2, 10\n(10) - (2) = 8, left: (10 - 2) = 8, (13 - 10) = 3\n(3) * (8) = 24, left: ((13 - 10) * (10 - 2)) = 24\nreach 24! expression: ((13 - 10) * (10 - 2))"}, {"input": "2 13 10 10\n", "output": "(10) - (13) = -3, left: (10 - 13) = -3, 2, 10\n(2) - (10) = -8, left: (2 - 10) = -8, (10 - 13) = -3\n(-3) * (-8) = 24, left: ((10 - 13) * (2 - 10)) = 24\nreach 24! expression: ((10 - 13) * (2 - 10))"}, {"input": "2 13 10 10\n", "output": "(10) / (10) = 1, left: (10 / 10) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (10 / 10)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (10 / 10))) = 24\nreach 24! expression: (2 * (13 - (10 / 10)))"}, {"input": "6 8 11 7\n", "output": "(11) - (7) = 4, left: (11 - 7) = 4, 6, 8\n(8) - (4) = 4, left: (8 - (11 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (11 - 7))) = 24\nreach 24! expression: (6 * (8 - (11 - 7)))"}, {"input": "6 8 11 7\n", "output": "(6) / (8) = 3/4, left: (6 / 8) = 3/4, 11, 7\n(11) + (7) = 18, left: (11 + 7) = 18, (6 / 8) = 3/4\n(18) / (3/4) = 24, left: ((11 + 7) / (6 / 8)) = 24\nreach 24! expression: ((11 + 7) / (6 / 8))"}, {"input": "6 8 11 7\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 6, 7\n(7) + (-3) = 4, left: (7 + (8 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (8 - 11))) = 24\nreach 24! expression: (6 * (7 + (8 - 11)))"}, {"input": "6 8 11 7\n", "output": "(8) / (6) = 4/3, left: (8 / 6) = 4/3, 11, 7\n(11) + (7) = 18, left: (11 + 7) = 18, (8 / 6) = 4/3\n(4/3) * (18) = 24, left: ((8 / 6) * (11 + 7)) = 24\nreach 24! expression: ((8 / 6) * (11 + 7))"}, {"input": "6 8 11 7\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 11, 7\n(11) + (-2) = 9, left: (11 + (6 - 8)) = 9, 7\nroll back, left: (6 - 8) = -2, 11, 7\n(-2) - (7) = -9, left: ((6 - 8) - 7) = -9, 11\nroll back, left: (6 - 8) = -2, 11, 7\nroll back, left: 6 8 11 7\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 11, 7\n(11) + (7) = 18, left: (11 + 7) = 18, (6 / 8) = 3/4\n(18) / (3/4) = 24, left: ((11 + 7) / (6 / 8)) = 24\nreach 24! expression: ((11 + 7) / (6 / 8))"}, {"input": "6 8 11 7\n", "output": "(8) * (11) = 88, left: (8 * 11) = 88, 6, 7\n(88) / (6) = 44/3, left: ((8 * 11) / 6) = 44/3, 7\nroll back, left: (8 * 11) = 88, 6, 7\nroll back, left: 6 8 11 7\n(8) + (11) = 19, left: (8 + 11) = 19, 6, 7\nroll back, left: 6 8 11 7\n(8) - (11) = -3, left: (8 - 11) = -3, 6, 7\n(7) + (-3) = 4, left: (7 + (8 - 11)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (8 - 11))) = 24\nreach 24! expression: (6 * (7 + (8 - 11)))"}, {"input": "6 8 11 7\n", "output": "(11) * (7) = 77, left: (11 * 7) = 77, 6, 8\nroll back, left: 6 8 11 7\n(11) - (7) = 4, left: (11 - 7) = 4, 6, 8\n(6) / (4) = 3/2, left: (6 / (11 - 7)) = 3/2, 8\nroll back, left: (11 - 7) = 4, 6, 8\n(6) - (8) = -2, left: (6 - 8) = -2, (11 - 7) = 4\nroll back, left: (11 - 7) = 4, 6, 8\n(8) - (4) = 4, left: (8 - (11 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (8 - (11 - 7))) = 24\nreach 24! expression: (6 * (8 - (11 - 7)))"}, {"input": "8 11 11 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 11, 11\n(11) + (2) = 13, left: (11 + (8 / 4)) = 13, 11\n(11) + (13) = 24, left: (11 + (11 + (8 / 4))) = 24\nreach 24! expression: (11 + (11 + (8 / 4)))"}, {"input": "8 11 11 4\n", "output": "(11) + (11) = 22, left: (11 + 11) = 22, 8, 4\n(8) / (4) = 2, left: (8 / 4) = 2, (11 + 11) = 22\n(22) + (2) = 24, left: ((11 + 11) + (8 / 4)) = 24\nreach 24! expression: ((11 + 11) + (8 / 4))"}, {"input": "8 11 11 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 11, 11\n(11) + (11) = 22, left: (11 + 11) = 22, (8 / 4) = 2\n(2) + (22) = 24, left: ((8 / 4) + (11 + 11)) = 24\nreach 24! expression: ((8 / 4) + (11 + 11))"}, {"input": "8 11 11 4\n", "output": "(11) + (4) = 15, left: (11 + 4) = 15, 8, 11\nroll back, left: 8 11 11 4\n(11) / (4) = 11/4, left: (11 / 4) = 11/4, 8, 11\nroll back, left: 8 11 11 4\n(4) - (8) = -4, left: (4 - 8) = -4, 11, 11\nroll back, left: 8 11 11 4\n(8) / (4) = 2, left: (8 / 4) = 2, 11, 11\n(11) + (2) = 13, left: (11 + (8 / 4)) = 13, 11\n(11) + (13) = 24, left: (11 + (11 + (8 / 4))) = 24\nreach 24! expression: (11 + (11 + (8 / 4)))"}, {"input": "8 11 11 4\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 11, 4\n(4) / (11) = 4/11, left: (4 / 11) = 4/11, (11 - 8) = 3\nroll back, left: (11 - 8) = 3, 11, 4\nroll back, left: 8 11 11 4\n(8) * (4) = 32, left: (8 * 4) = 32, 11, 11\nroll back, left: 8 11 11 4\n(8) / (4) = 2, left: (8 / 4) = 2, 11, 11\n(11) + (11) = 22, left: (11 + 11) = 22, (8 / 4) = 2\n(2) + (22) = 24, left: ((8 / 4) + (11 + 11)) = 24\nreach 24! expression: ((8 / 4) + (11 + 11))"}, {"input": "8 11 11 4\n", "output": "(11) + (4) = 15, left: (11 + 4) = 15, 8, 11\nroll back, left: 8 11 11 4\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, 11, 11\n(11) * (1/2) = 11/2, left: (11 * (4 / 8)) = 11/2, 11\nroll back, left: (4 / 8) = 1/2, 11, 11\nroll back, left: 8 11 11 4\n(8) / (4) = 2, left: (8 / 4) = 2, 11, 11\n(11) + (2) = 13, left: (11 + (8 / 4)) = 13, 11\n(11) + (13) = 24, left: (11 + (11 + (8 / 4))) = 24\nreach 24! expression: (11 + (11 + (8 / 4)))"}, {"input": "12 9 1 12\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 9, 12\n(11) - (9) = 2, left: ((12 - 1) - 9) = 2, 12\n(12) * (2) = 24, left: (12 * ((12 - 1) - 9)) = 24\nreach 24! expression: (12 * ((12 - 1) - 9))"}, {"input": "12 9 1 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 12, 1\n(3) - (1) = 2, left: ((12 - 9) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((12 - 9) - 1)) = 24\nreach 24! expression: (12 * ((12 - 9) - 1))"}, {"input": "12 9 1 12\n", "output": "(9) + (1) = 10, left: (9 + 1) = 10, 12, 12\n(12) - (10) = 2, left: (12 - (9 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 - (9 + 1))) = 24\nreach 24! expression: (12 * (12 - (9 + 1)))"}, {"input": "12 9 1 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 1, 12\n(3) - (1) = 2, left: ((12 - 9) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((12 - 9) - 1)) = 24\nreach 24! expression: (12 * ((12 - 9) - 1))"}, {"input": "12 9 1 12\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 12, 12\n(12) - (-8) = 20, left: (12 - (1 - 9)) = 20, 12\nroll back, left: (1 - 9) = -8, 12, 12\nroll back, left: 12 9 1 12\n(9) * (1) = 9, left: (9 * 1) = 9, 12, 12\nroll back, left: 12 9 1 12\n(9) + (1) = 10, left: (9 + 1) = 10, 12, 12\n(12) - (10) = 2, left: (12 - (9 + 1)) = 2, 12\n(12) * (2) = 24, left: (12 * (12 - (9 + 1))) = 24\nreach 24! expression: (12 * (12 - (9 + 1)))"}, {"input": "12 9 1 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 12, 1\n(3) - (1) = 2, left: ((12 - 9) - 1) = 2, 12\n(12) + (2) = 14, left: (12 + ((12 - 9) - 1)) = 14\nroll back, left: ((12 - 9) - 1) = 2, 12\n(2) - (12) = -10, left: (((12 - 9) - 1) - 12) = -10\nroll back, left: ((12 - 9) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((12 - 9) - 1)) = 24\nreach 24! expression: (12 * ((12 - 9) - 1))"}, {"input": "12 9 1 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 12, 1\n(3) - (1) = 2, left: ((12 - 9) - 1) = 2, 12\n(12) + (2) = 14, left: (12 + ((12 - 9) - 1)) = 14\nroll back, left: ((12 - 9) - 1) = 2, 12\n(2) - (12) = -10, left: (((12 - 9) - 1) - 12) = -10\nroll back, left: ((12 - 9) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((12 - 9) - 1)) = 24\nreach 24! expression: (12 * ((12 - 9) - 1))"}, {"input": "12 9 1 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 12, 1\n(3) - (1) = 2, left: ((12 - 9) - 1) = 2, 12\n(12) + (2) = 14, left: (12 + ((12 - 9) - 1)) = 14\nroll back, left: ((12 - 9) - 1) = 2, 12\n(2) - (12) = -10, left: (((12 - 9) - 1) - 12) = -10\nroll back, left: ((12 - 9) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((12 - 9) - 1)) = 24\nreach 24! expression: (12 * ((12 - 9) - 1))"}, {"input": "12 9 1 12\n", "output": "(12) - (9) = 3, left: (12 - 9) = 3, 12, 1\n(3) - (1) = 2, left: ((12 - 9) - 1) = 2, 12\n(12) + (2) = 14, left: (12 + ((12 - 9) - 1)) = 14\nroll back, left: ((12 - 9) - 1) = 2, 12\n(2) - (12) = -10, left: (((12 - 9) - 1) - 12) = -10\nroll back, left: ((12 - 9) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((12 - 9) - 1)) = 24\nreach 24! expression: (12 * ((12 - 9) - 1))"}, {"input": "4 12 2 6\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 2, 6\n(6) * (8) = 48, left: (6 * (12 - 4)) = 48, 2\n(48) / (2) = 24, left: ((6 * (12 - 4)) / 2) = 24\nreach 24! expression: ((6 * (12 - 4)) / 2)"}, {"input": "4 12 2 6\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 2, 6\n(8) / (2) = 4, left: ((12 - 4) / 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 - 4) / 2)) = 24\nreach 24! expression: (6 * ((12 - 4) / 2))"}, {"input": "4 12 2 6\n", "output": "(12) + (2) = 14, left: (12 + 2) = 14, 4, 6\n(6) + (14) = 20, left: (6 + (12 + 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (6 + (12 + 2))) = 24\nreach 24! expression: (4 + (6 + (12 + 2)))"}, {"input": "4 12 2 6\n", "output": "(12) + (2) = 14, left: (12 + 2) = 14, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (12 + 2) = 14\n(14) + (10) = 24, left: ((12 + 2) + (4 + 6)) = 24\nreach 24! expression: ((12 + 2) + (4 + 6))"}, {"input": "4 12 2 6\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 2, 6\n(8) / (2) = 4, left: ((12 - 4) / 2) = 4, 6\n(6) + (4) = 10, left: (6 + ((12 - 4) / 2)) = 10\nroll back, left: ((12 - 4) / 2) = 4, 6\n(4) - (6) = -2, left: (((12 - 4) / 2) - 6) = -2\nroll back, left: ((12 - 4) / 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 - 4) / 2)) = 24\nreach 24! expression: (6 * ((12 - 4) / 2))"}, {"input": "4 12 2 6\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 4, 6\n(4) + (-10) = -6, left: (4 + (2 - 12)) = -6, 6\nroll back, left: (2 - 12) = -10, 4, 6\nroll back, left: 4 12 2 6\n(12) + (2) = 14, left: (12 + 2) = 14, 4, 6\n(14) / (6) = 7/3, left: ((12 + 2) / 6) = 7/3, 4\nroll back, left: (12 + 2) = 14, 4, 6\n(6) + (14) = 20, left: (6 + (12 + 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (6 + (12 + 2))) = 24\nreach 24! expression: (4 + (6 + (12 + 2)))"}, {"input": "4 12 2 6\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 4, 6\nroll back, left: 4 12 2 6\n(12) / (2) = 6, left: (12 / 2) = 6, 4, 6\n(4) / (6) = 2/3, left: (4 / 6) = 2/3, (12 / 2) = 6\nroll back, left: (12 / 2) = 6, 4, 6\nroll back, left: 4 12 2 6\n(12) + (2) = 14, left: (12 + 2) = 14, 4, 6\n(4) + (6) = 10, left: (4 + 6) = 10, (12 + 2) = 14\n(14) + (10) = 24, left: ((12 + 2) + (4 + 6)) = 24\nreach 24! expression: ((12 + 2) + (4 + 6))"}, {"input": "4 12 2 6\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 4, 6\n(6) - (4) = 2, left: ((12 / 2) - 4) = 2, 6\nroll back, left: (12 / 2) = 6, 4, 6\n(6) / (4) = 3/2, left: ((12 / 2) / 4) = 3/2, 6\nroll back, left: (12 / 2) = 6, 4, 6\nroll back, left: 4 12 2 6\n(12) + (2) = 14, left: (12 + 2) = 14, 4, 6\n(6) + (14) = 20, left: (6 + (12 + 2)) = 20, 4\n(4) + (20) = 24, left: (4 + (6 + (12 + 2))) = 24\nreach 24! expression: (4 + (6 + (12 + 2)))"}, {"input": "4 12 2 6\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 2, 6\n(6) + (8) = 14, left: (6 + (12 - 4)) = 14, 2\n(2) * (14) = 28, left: (2 * (6 + (12 - 4))) = 28\nroll back, left: (6 + (12 - 4)) = 14, 2\nroll back, left: (12 - 4) = 8, 2, 6\n(8) - (6) = 2, left: ((12 - 4) - 6) = 2, 2\nroll back, left: (12 - 4) = 8, 2, 6\n(6) * (8) = 48, left: (6 * (12 - 4)) = 48, 2\n(48) / (2) = 24, left: ((6 * (12 - 4)) / 2) = 24\nreach 24! expression: ((6 * (12 - 4)) / 2)"}, {"input": "4 12 2 6\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 2, 6\n(8) / (2) = 4, left: ((12 - 4) / 2) = 4, 6\n(6) + (4) = 10, left: (6 + ((12 - 4) / 2)) = 10\nroll back, left: ((12 - 4) / 2) = 4, 6\n(4) - (6) = -2, left: (((12 - 4) / 2) - 6) = -2\nroll back, left: ((12 - 4) / 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 - 4) / 2)) = 24\nreach 24! expression: (6 * ((12 - 4) / 2))"}, {"input": "4 12 2 6\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 2, 6\n(8) / (2) = 4, left: ((12 - 4) / 2) = 4, 6\n(6) + (4) = 10, left: (6 + ((12 - 4) / 2)) = 10\nroll back, left: ((12 - 4) / 2) = 4, 6\n(4) - (6) = -2, left: (((12 - 4) / 2) - 6) = -2\nroll back, left: ((12 - 4) / 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 - 4) / 2)) = 24\nreach 24! expression: (6 * ((12 - 4) / 2))"}, {"input": "4 12 2 6\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 2, 6\n(8) / (2) = 4, left: ((12 - 4) / 2) = 4, 6\n(6) + (4) = 10, left: (6 + ((12 - 4) / 2)) = 10\nroll back, left: ((12 - 4) / 2) = 4, 6\n(4) - (6) = -2, left: (((12 - 4) / 2) - 6) = -2\nroll back, left: ((12 - 4) / 2) = 4, 6\n(6) * (4) = 24, left: (6 * ((12 - 4) / 2)) = 24\nreach 24! expression: (6 * ((12 - 4) / 2))"}, {"input": "6 8 10 7\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 6, 8\n(6) - (3) = 3, left: (6 - (10 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (10 - 7))) = 24\nreach 24! expression: (8 * (6 - (10 - 7)))"}, {"input": "6 8 10 7\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 6, 7\n(6) * (7) = 42, left: (6 * 7) = 42, (8 + 10) = 18\n(42) - (18) = 24, left: ((6 * 7) - (8 + 10)) = 24\nreach 24! expression: ((6 * 7) - (8 + 10))"}, {"input": "6 8 10 7\n", "output": "(6) + (7) = 13, left: (6 + 7) = 13, 8, 10\n(13) - (10) = 3, left: ((6 + 7) - 10) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 + 7) - 10)) = 24\nreach 24! expression: (8 * ((6 + 7) - 10))"}, {"input": "6 8 10 7\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 6, 8\n(6) + (-3) = 3, left: (6 + (7 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 + (7 - 10))) = 24\nreach 24! expression: (8 * (6 + (7 - 10)))"}, {"input": "6 8 10 7\n", "output": "(8) / (7) = 8/7, left: (8 / 7) = 8/7, 6, 10\nroll back, left: 6 8 10 7\n(8) * (7) = 56, left: (8 * 7) = 56, 6, 10\n(6) * (56) = 336, left: (6 * (8 * 7)) = 336, 10\nroll back, left: (8 * 7) = 56, 6, 10\nroll back, left: 6 8 10 7\n(10) - (7) = 3, left: (10 - 7) = 3, 6, 8\n(6) - (3) = 3, left: (6 - (10 - 7)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 - (10 - 7))) = 24\nreach 24! expression: (8 * (6 - (10 - 7)))"}, {"input": "6 8 10 7\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 6, 7\nroll back, left: 6 8 10 7\n(10) / (8) = 5/4, left: (10 / 8) = 5/4, 6, 7\nroll back, left: 6 8 10 7\n(8) / (10) = 4/5, left: (8 / 10) = 4/5, 6, 7\nroll back, left: 6 8 10 7\n(8) + (10) = 18, left: (8 + 10) = 18, 6, 7\n(6) * (7) = 42, left: (6 * 7) = 42, (8 + 10) = 18\n(42) - (18) = 24, left: ((6 * 7) - (8 + 10)) = 24\nreach 24! expression: ((6 * 7) - (8 + 10))"}, {"input": "6 8 10 7\n", "output": "(7) / (6) = 7/6, left: (7 / 6) = 7/6, 8, 10\n(8) / (7/6) = 48/7, left: (8 / (7 / 6)) = 48/7, 10\nroll back, left: (7 / 6) = 7/6, 8, 10\nroll back, left: 6 8 10 7\n(6) + (7) = 13, left: (6 + 7) = 13, 8, 10\n(8) * (13) = 104, left: (8 * (6 + 7)) = 104, 10\nroll back, left: (6 + 7) = 13, 8, 10\n(13) - (10) = 3, left: ((6 + 7) - 10) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 + 7) - 10)) = 24\nreach 24! expression: (8 * ((6 + 7) - 10))"}, {"input": "6 8 10 7\n", "output": "(8) / (7) = 8/7, left: (8 / 7) = 8/7, 6, 10\n(10) - (8/7) = 62/7, left: (10 - (8 / 7)) = 62/7, 6\nroll back, left: (8 / 7) = 8/7, 6, 10\nroll back, left: 6 8 10 7\n(8) + (7) = 15, left: (8 + 7) = 15, 6, 10\nroll back, left: 6 8 10 7\n(7) - (10) = -3, left: (7 - 10) = -3, 6, 8\n(6) + (-3) = 3, left: (6 + (7 - 10)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 + (7 - 10))) = 24\nreach 24! expression: (8 * (6 + (7 - 10)))"}, {"input": "12 10 6 11\n", "output": "(12) * (10) = 120, left: (12 * 10) = 120, 6, 11\n(11) - (6) = 5, left: (11 - 6) = 5, (12 * 10) = 120\n(120) / (5) = 24, left: ((12 * 10) / (11 - 6)) = 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "12 10 6 11\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 12, 10\n(12) * (10) = 120, left: (12 * 10) = 120, (11 - 6) = 5\n(120) / (5) = 24, left: ((12 * 10) / (11 - 6)) = 24\nreach 24! expression: ((12 * 10) / (11 - 6))"}, {"input": "4 3 12 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 3, 12\n(3) - (1) = 2, left: (3 - (4 / 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (4 / 4))) = 24\nreach 24! expression: (12 * (3 - (4 / 4)))"}, {"input": "4 3 12 4\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 3, 4\n(3) + (3) = 6, left: (3 + (12 / 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (12 / 4))) = 24\nreach 24! expression: (4 * (3 + (12 / 4)))"}, {"input": "4 3 12 4\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 4, 3\n(3) + (3) = 6, left: (3 + (12 / 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (12 / 4))) = 24\nreach 24! expression: (4 * (3 + (12 / 4)))"}, {"input": "4 3 12 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 3, 12\n(1) / (3) = 1/3, left: ((4 / 4) / 3) = 1/3, 12\n(12) - (1/3) = 35/3, left: (12 - ((4 / 4) / 3)) = 35/3\nroll back, left: ((4 / 4) / 3) = 1/3, 12\nroll back, left: (4 / 4) = 1, 3, 12\n(3) - (1) = 2, left: (3 - (4 / 4)) = 2, 12\n(12) / (2) = 6, left: (12 / (3 - (4 / 4))) = 6\nroll back, left: (3 - (4 / 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (4 / 4))) = 24\nreach 24! expression: (12 * (3 - (4 / 4)))"}, {"input": "4 3 12 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 3, 12\n(12) - (1) = 11, left: (12 - (4 / 4)) = 11, 3\nroll back, left: (4 / 4) = 1, 3, 12\n(3) + (1) = 4, left: (3 + (4 / 4)) = 4, 12\nroll back, left: (4 / 4) = 1, 3, 12\n(1) - (3) = -2, left: ((4 / 4) - 3) = -2, 12\nroll back, left: (4 / 4) = 1, 3, 12\n(3) - (1) = 2, left: (3 - (4 / 4)) = 2, 12\n(12) * (2) = 24, left: (12 * (3 - (4 / 4))) = 24\nreach 24! expression: (12 * (3 - (4 / 4)))"}, {"input": "4 3 12 4\n", "output": "(4) / (12) = 1/3, left: (4 / 12) = 1/3, 4, 3\n(3) - (1/3) = 8/3, left: (3 - (4 / 12)) = 8/3, 4\nroll back, left: (4 / 12) = 1/3, 4, 3\n(4) - (1/3) = 11/3, left: (4 - (4 / 12)) = 11/3, 3\nroll back, left: (4 / 12) = 1/3, 4, 3\nroll back, left: 4 3 12 4\n(12) / (4) = 3, left: (12 / 4) = 3, 4, 3\n(3) + (3) = 6, left: (3 + (12 / 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (12 / 4))) = 24\nreach 24! expression: (4 * (3 + (12 / 4)))"}, {"input": "4 3 12 4\n", "output": "(3) + (12) = 15, left: (3 + 12) = 15, 4, 4\n(4) * (15) = 60, left: (4 * (3 + 12)) = 60, 4\nroll back, left: (3 + 12) = 15, 4, 4\nroll back, left: 4 3 12 4\n(12) / (3) = 4, left: (12 / 3) = 4, 4, 4\nroll back, left: 4 3 12 4\n(12) / (4) = 3, left: (12 / 4) = 3, 3, 4\n(3) + (3) = 6, left: (3 + (12 / 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (12 / 4))) = 24\nreach 24! expression: (4 * (3 + (12 / 4)))"}, {"input": "4 3 12 4\n", "output": "(4) - (12) = -8, left: (4 - 12) = -8, 4, 3\nroll back, left: 4 3 12 4\n(12) / (4) = 3, left: (12 / 4) = 3, 4, 3\n(4) * (3) = 12, left: (4 * 3) = 12, (12 / 4) = 3\n(3) * (12) = 36, left: ((12 / 4) * (4 * 3)) = 36\nroll back, left: (4 * 3) = 12, (12 / 4) = 3\nroll back, left: (12 / 4) = 3, 4, 3\n(3) + (3) = 6, left: (3 + (12 / 4)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 + (12 / 4))) = 24\nreach 24! expression: (4 * (3 + (12 / 4)))"}, {"input": "2 7 7 5\n", "output": "(7) + (7) = 14, left: (7 + 7) = 14, 2, 5\n(2) * (5) = 10, left: (2 * 5) = 10, (7 + 7) = 14\n(14) + (10) = 24, left: ((7 + 7) + (2 * 5)) = 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 2, 5\n(5) - (1) = 4, left: (5 - (7 / 7)) = 4, 2\nroll back, left: (7 / 7) = 1, 2, 5\nroll back, left: 2 7 7 5\n(7) * (7) = 49, left: (7 * 7) = 49, 2, 5\nroll back, left: 2 7 7 5\n(7) + (7) = 14, left: (7 + 7) = 14, 2, 5\n(2) * (5) = 10, left: (2 * 5) = 10, (7 + 7) = 14\n(14) + (10) = 24, left: ((7 + 7) + (2 * 5)) = 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(7) / (2) = 7/2, left: (7 / 2) = 7/2, 7, 5\nroll back, left: 2 7 7 5\n(7) - (2) = 5, left: (7 - 2) = 5, 7, 5\n(5) / (7) = 5/7, left: (5 / 7) = 5/7, (7 - 2) = 5\nroll back, left: (7 - 2) = 5, 7, 5\nroll back, left: 2 7 7 5\n(7) + (7) = 14, left: (7 + 7) = 14, 2, 5\n(2) * (5) = 10, left: (2 * 5) = 10, (7 + 7) = 14\n(14) + (10) = 24, left: ((7 + 7) + (2 * 5)) = 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 2, 7\n(2) + (7) = 9, left: (2 + 7) = 9, (5 / 7) = 5/7\nroll back, left: (5 / 7) = 5/7, 2, 7\nroll back, left: 2 7 7 5\n(7) * (5) = 35, left: (7 * 5) = 35, 2, 7\nroll back, left: 2 7 7 5\n(7) + (7) = 14, left: (7 + 7) = 14, 2, 5\n(2) * (5) = 10, left: (2 * 5) = 10, (7 + 7) = 14\n(14) + (10) = 24, left: ((7 + 7) + (2 * 5)) = 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(7) * (5) = 35, left: (7 * 5) = 35, 2, 7\n(2) - (35) = -33, left: (2 - (7 * 5)) = -33, 7\nroll back, left: (7 * 5) = 35, 2, 7\nroll back, left: 2 7 7 5\n(7) - (5) = 2, left: (7 - 5) = 2, 2, 7\nroll back, left: 2 7 7 5\n(7) + (7) = 14, left: (7 + 7) = 14, 2, 5\n(2) * (5) = 10, left: (2 * 5) = 10, (7 + 7) = 14\n(14) + (10) = 24, left: ((7 + 7) + (2 * 5)) = 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "2 7 7 5\n", "output": "(2) - (7) = -5, left: (2 - 7) = -5, 7, 5\n(5) / (-5) = -1, left: (5 / (2 - 7)) = -1, 7\nroll back, left: (2 - 7) = -5, 7, 5\nroll back, left: 2 7 7 5\n(7) + (7) = 14, left: (7 + 7) = 14, 2, 5\n(2) * (14) = 28, left: (2 * (7 + 7)) = 28, 5\nroll back, left: (7 + 7) = 14, 2, 5\n(2) * (5) = 10, left: (2 * 5) = 10, (7 + 7) = 14\n(14) + (10) = 24, left: ((7 + 7) + (2 * 5)) = 24\nreach 24! expression: ((7 + 7) + (2 * 5))"}, {"input": "7 1 9 5\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 7, 1\n(7) - (1) = 6, left: (7 - 1) = 6, (9 - 5) = 4\n(4) * (6) = 24, left: ((9 - 5) * (7 - 1)) = 24\nreach 24! expression: ((9 - 5) * (7 - 1))"}, {"input": "7 1 9 5\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 9, 5\n(9) - (5) = 4, left: (9 - 5) = 4, (7 - 1) = 6\n(6) * (4) = 24, left: ((7 - 1) * (9 - 5)) = 24\nreach 24! expression: ((7 - 1) * (9 - 5))"}, {"input": "7 1 9 5\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 9, 5\n(5) - (9) = -4, left: (5 - 9) = -4, (1 - 7) = -6\n(-6) * (-4) = 24, left: ((1 - 7) * (5 - 9)) = 24\nreach 24! expression: ((1 - 7) * (5 - 9))"}, {"input": "7 1 9 5\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 7, 1\n(1) - (7) = -6, left: (1 - 7) = -6, (5 - 9) = -4\n(-4) * (-6) = 24, left: ((5 - 9) * (1 - 7)) = 24\nreach 24! expression: ((5 - 9) * (1 - 7))"}, {"input": "7 1 9 5\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 7, 5\nroll back, left: 7 1 9 5\n(9) / (1) = 9, left: (9 / 1) = 9, 7, 5\nroll back, left: 7 1 9 5\n(9) + (5) = 14, left: (9 + 5) = 14, 7, 1\nroll back, left: 7 1 9 5\n(5) - (9) = -4, left: (5 - 9) = -4, 7, 1\n(1) - (7) = -6, left: (1 - 7) = -6, (5 - 9) = -4\n(-4) * (-6) = 24, left: ((5 - 9) * (1 - 7)) = 24\nreach 24! expression: ((5 - 9) * (1 - 7))"}, {"input": "7 1 9 5\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 1, 5\n(-2) / (1) = -2, left: ((7 - 9) / 1) = -2, 5\nroll back, left: (7 - 9) = -2, 1, 5\nroll back, left: 7 1 9 5\n(7) / (9) = 7/9, left: (7 / 9) = 7/9, 1, 5\nroll back, left: 7 1 9 5\n(7) - (1) = 6, left: (7 - 1) = 6, 9, 5\n(9) - (5) = 4, left: (9 - 5) = 4, (7 - 1) = 6\n(6) * (4) = 24, left: ((7 - 1) * (9 - 5)) = 24\nreach 24! expression: ((7 - 1) * (9 - 5))"}, {"input": "7 1 9 5\n", "output": "(1) + (5) = 6, left: (1 + 5) = 6, 7, 9\nroll back, left: 7 1 9 5\n(9) / (1) = 9, left: (9 / 1) = 9, 7, 5\nroll back, left: 7 1 9 5\n(9) - (1) = 8, left: (9 - 1) = 8, 7, 5\nroll back, left: 7 1 9 5\n(9) - (5) = 4, left: (9 - 5) = 4, 7, 1\n(7) - (1) = 6, left: (7 - 1) = 6, (9 - 5) = 4\n(4) * (6) = 24, left: ((9 - 5) * (7 - 1)) = 24\nreach 24! expression: ((9 - 5) * (7 - 1))"}, {"input": "7 1 9 5\n", "output": "(5) / (9) = 5/9, left: (5 / 9) = 5/9, 7, 1\n(1) - (5/9) = 4/9, left: (1 - (5 / 9)) = 4/9, 7\n(4/9) / (7) = 4/63, left: ((1 - (5 / 9)) / 7) = 4/63\nroll back, left: (1 - (5 / 9)) = 4/9, 7\nroll back, left: (5 / 9) = 5/9, 7, 1\nroll back, left: 7 1 9 5\n(5) - (9) = -4, left: (5 - 9) = -4, 7, 1\n(1) - (7) = -6, left: (1 - 7) = -6, (5 - 9) = -4\n(-4) * (-6) = 24, left: ((5 - 9) * (1 - 7)) = 24\nreach 24! expression: ((5 - 9) * (1 - 7))"}, {"input": "7 1 9 5\n", "output": "(1) + (9) = 10, left: (1 + 9) = 10, 7, 5\n(7) / (10) = 7/10, left: (7 / (1 + 9)) = 7/10, 5\nroll back, left: (1 + 9) = 10, 7, 5\nroll back, left: 7 1 9 5\n(1) / (9) = 1/9, left: (1 / 9) = 1/9, 7, 5\nroll back, left: 7 1 9 5\n(1) - (7) = -6, left: (1 - 7) = -6, 9, 5\n(5) - (9) = -4, left: (5 - 9) = -4, (1 - 7) = -6\n(-6) * (-4) = 24, left: ((1 - 7) * (5 - 9)) = 24\nreach 24! expression: ((1 - 7) * (5 - 9))"}, {"input": "5 9 8 2\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (8 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (8 - 5))) = 24\nreach 24! expression: (2 * (9 + (8 - 5)))"}, {"input": "5 9 8 2\n", "output": "(9) * (8) = 72, left: (9 * 8) = 72, 5, 2\n(5) - (2) = 3, left: (5 - 2) = 3, (9 * 8) = 72\n(72) / (3) = 24, left: ((9 * 8) / (5 - 2)) = 24\nreach 24! expression: ((9 * 8) / (5 - 2))"}, {"input": "5 9 8 2\n", "output": "(9) + (2) = 11, left: (9 + 2) = 11, 5, 8\n(5) + (8) = 13, left: (5 + 8) = 13, (9 + 2) = 11\n(11) + (13) = 24, left: ((9 + 2) + (5 + 8)) = 24\nreach 24! expression: ((9 + 2) + (5 + 8))"}, {"input": "5 9 8 2\n", "output": "(5) - (2) = 3, left: (5 - 2) = 3, 9, 8\n(8) / (3) = 8/3, left: (8 / (5 - 2)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (8 / (5 - 2))) = 24\nreach 24! expression: (9 * (8 / (5 - 2)))"}, {"input": "5 9 8 2\n", "output": "(9) + (8) = 17, left: (9 + 8) = 17, 5, 2\n(17) - (5) = 12, left: ((9 + 8) - 5) = 12, 2\n(2) * (12) = 24, left: (2 * ((9 + 8) - 5)) = 24\nreach 24! expression: (2 * ((9 + 8) - 5))"}, {"input": "5 9 8 2\n", "output": "(2) - (5) = -3, left: (2 - 5) = -3, 9, 8\nroll back, left: 5 9 8 2\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 9, 8\n(8) / (2/5) = 20, left: (8 / (2 / 5)) = 20, 9\nroll back, left: (2 / 5) = 2/5, 9, 8\nroll back, left: 5 9 8 2\n(5) - (2) = 3, left: (5 - 2) = 3, 9, 8\n(8) / (3) = 8/3, left: (8 / (5 - 2)) = 8/3, 9\n(9) * (8/3) = 24, left: (9 * (8 / (5 - 2))) = 24\nreach 24! expression: (9 * (8 / (5 - 2)))"}, {"input": "5 9 8 2\n", "output": "(8) / (9) = 8/9, left: (8 / 9) = 8/9, 5, 2\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, (8 / 9) = 8/9\nroll back, left: (8 / 9) = 8/9, 5, 2\n(2) - (8/9) = 10/9, left: (2 - (8 / 9)) = 10/9, 5\nroll back, left: (8 / 9) = 8/9, 5, 2\nroll back, left: 5 9 8 2\n(9) + (8) = 17, left: (9 + 8) = 17, 5, 2\n(17) - (5) = 12, left: ((9 + 8) - 5) = 12, 2\n(2) * (12) = 24, left: (2 * ((9 + 8) - 5)) = 24\nreach 24! expression: (2 * ((9 + 8) - 5))"}, {"input": "5 9 8 2\n", "output": "(2) / (9) = 2/9, left: (2 / 9) = 2/9, 5, 8\nroll back, left: 5 9 8 2\n(9) * (2) = 18, left: (9 * 2) = 18, 5, 8\nroll back, left: 5 9 8 2\n(9) - (2) = 7, left: (9 - 2) = 7, 5, 8\nroll back, left: 5 9 8 2\n(9) + (2) = 11, left: (9 + 2) = 11, 5, 8\n(5) + (8) = 13, left: (5 + 8) = 13, (9 + 2) = 11\n(11) + (13) = 24, left: ((9 + 2) + (5 + 8)) = 24\nreach 24! expression: ((9 + 2) + (5 + 8))"}, {"input": "5 9 8 2\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 9, 2\n(2) - (9) = -7, left: (2 - 9) = -7, (8 - 5) = 3\nroll back, left: (8 - 5) = 3, 9, 2\n(9) - (3) = 6, left: (9 - (8 - 5)) = 6, 2\n(2) + (6) = 8, left: (2 + (9 - (8 - 5))) = 8\nroll back, left: (9 - (8 - 5)) = 6, 2\nroll back, left: (8 - 5) = 3, 9, 2\n(9) + (3) = 12, left: (9 + (8 - 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (9 + (8 - 5))) = 24\nreach 24! expression: (2 * (9 + (8 - 5)))"}, {"input": "7 8 10 1\n", "output": "(7) / (1) = 7, left: (7 / 1) = 7, 8, 10\n(10) - (7) = 3, left: (10 - (7 / 1)) = 3, 8\n(8) * (3) = 24, left: (8 * (10 - (7 / 1))) = 24\nreach 24! expression: (8 * (10 - (7 / 1)))"}, {"input": "7 8 10 1\n", "output": "(1) - (7) = -6, left: (1 - 7) = -6, 8, 10\n(-6) - (8) = -14, left: ((1 - 7) - 8) = -14, 10\n(10) - (-14) = 24, left: (10 - ((1 - 7) - 8)) = 24\nreach 24! expression: (10 - ((1 - 7) - 8))"}, {"input": "7 8 10 1\n", "output": "(7) + (10) = 17, left: (7 + 10) = 17, 8, 1\n(8) + (17) = 25, left: (8 + (7 + 10)) = 25, 1\n(25) - (1) = 24, left: ((8 + (7 + 10)) - 1) = 24\nreach 24! expression: ((8 + (7 + 10)) - 1)"}, {"input": "7 8 10 1\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 7, 10\n(10) + (7) = 17, left: (10 + (8 - 1)) = 17, 7\n(7) + (17) = 24, left: (7 + (10 + (8 - 1))) = 24\nreach 24! expression: (7 + (10 + (8 - 1)))"}, {"input": "7 8 10 1\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 8, 1\nroll back, left: 7 8 10 1\n(7) / (10) = 7/10, left: (7 / 10) = 7/10, 8, 1\n(8) * (7/10) = 28/5, left: (8 * (7 / 10)) = 28/5, 1\nroll back, left: (7 / 10) = 7/10, 8, 1\nroll back, left: 7 8 10 1\n(7) + (10) = 17, left: (7 + 10) = 17, 8, 1\n(8) + (17) = 25, left: (8 + (7 + 10)) = 25, 1\n(25) - (1) = 24, left: ((8 + (7 + 10)) - 1) = 24\nreach 24! expression: ((8 + (7 + 10)) - 1)"}, {"input": "5 5 11 6\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 5, 11\n(5) - (11) = -6, left: (5 - 11) = -6, (5 * 6) = 30\n(30) + (-6) = 24, left: ((5 * 6) + (5 - 11)) = 24\nreach 24! expression: ((5 * 6) + (5 - 11))"}, {"input": "5 5 11 6\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 5, 11\n(5) + (30) = 35, left: (5 + (5 * 6)) = 35, 11\n(35) - (11) = 24, left: ((5 + (5 * 6)) - 11) = 24\nreach 24! expression: ((5 + (5 * 6)) - 11)"}, {"input": "5 5 11 6\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 5, 11\n(30) - (11) = 19, left: ((5 * 6) - 11) = 19, 5\n(5) + (19) = 24, left: (5 + ((5 * 6) - 11)) = 24\nreach 24! expression: (5 + ((5 * 6) - 11))"}, {"input": "5 5 11 6\n", "output": "(5) * (6) = 30, left: (5 * 6) = 30, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (5 * 6) = 30\n(30) - (6) = 24, left: ((5 * 6) - (11 - 5)) = 24\nreach 24! expression: ((5 * 6) - (11 - 5))"}, {"input": "5 5 11 6\n", "output": "(5) + (6) = 11, left: (5 + 6) = 11, 5, 11\nroll back, left: 5 5 11 6\n(6) - (5) = 1, left: (6 - 5) = 1, 5, 11\nroll back, left: 5 5 11 6\n(5) - (6) = -1, left: (5 - 6) = -1, 5, 11\nroll back, left: 5 5 11 6\n(5) * (6) = 30, left: (5 * 6) = 30, 5, 11\n(5) - (11) = -6, left: (5 - 11) = -6, (5 * 6) = 30\n(30) + (-6) = 24, left: ((5 * 6) + (5 - 11)) = 24\nreach 24! expression: ((5 * 6) + (5 - 11))"}, {"input": "5 5 11 6\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 5, 5\nroll back, left: 5 5 11 6\n(11) + (6) = 17, left: (11 + 6) = 17, 5, 5\nroll back, left: 5 5 11 6\n(6) / (5) = 6/5, left: (6 / 5) = 6/5, 5, 11\nroll back, left: 5 5 11 6\n(5) * (6) = 30, left: (5 * 6) = 30, 5, 11\n(11) - (5) = 6, left: (11 - 5) = 6, (5 * 6) = 30\n(30) - (6) = 24, left: ((5 * 6) - (11 - 5)) = 24\nreach 24! expression: ((5 * 6) - (11 - 5))"}, {"input": "5 5 11 6\n", "output": "(6) / (5) = 6/5, left: (6 / 5) = 6/5, 5, 11\nroll back, left: 5 5 11 6\n(6) - (5) = 1, left: (6 - 5) = 1, 5, 11\n(11) / (1) = 11, left: (11 / (6 - 5)) = 11, 5\nroll back, left: (6 - 5) = 1, 5, 11\nroll back, left: 5 5 11 6\n(5) * (6) = 30, left: (5 * 6) = 30, 5, 11\n(30) - (11) = 19, left: ((5 * 6) - 11) = 19, 5\n(5) + (19) = 24, left: (5 + ((5 * 6) - 11)) = 24\nreach 24! expression: (5 + ((5 * 6) - 11))"}, {"input": "1 12 7 13\n", "output": "(1) + (13) = 14, left: (1 + 13) = 14, 12, 7\n(12) * (14) = 168, left: (12 * (1 + 13)) = 168, 7\n(168) / (7) = 24, left: ((12 * (1 + 13)) / 7) = 24\nreach 24! expression: ((12 * (1 + 13)) / 7)"}, {"input": "1 12 7 13\n", "output": "(1) + (13) = 14, left: (1 + 13) = 14, 12, 7\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, (1 + 13) = 14\n(14) * (12/7) = 24, left: ((1 + 13) * (12 / 7)) = 24\nreach 24! expression: ((1 + 13) * (12 / 7))"}, {"input": "1 12 7 13\n", "output": "(1) + (13) = 14, left: (1 + 13) = 14, 12, 7\n(7) / (14) = 1/2, left: (7 / (1 + 13)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (7 / (1 + 13))) = 24\nreach 24! expression: (12 / (7 / (1 + 13)))"}, {"input": "1 12 7 13\n", "output": "(12) / (7) = 12/7, left: (12 / 7) = 12/7, 1, 13\n(1) + (13) = 14, left: (1 + 13) = 14, (12 / 7) = 12/7\n(12/7) * (14) = 24, left: ((12 / 7) * (1 + 13)) = 24\nreach 24! expression: ((12 / 7) * (1 + 13))"}, {"input": "1 12 7 13\n", "output": "(7) / (12) = 7/12, left: (7 / 12) = 7/12, 1, 13\n(1) + (13) = 14, left: (1 + 13) = 14, (7 / 12) = 7/12\n(14) / (7/12) = 24, left: ((1 + 13) / (7 / 12)) = 24\nreach 24! expression: ((1 + 13) / (7 / 12))"}, {"input": "1 12 7 13\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 7, 13\nroll back, left: 1 12 7 13\n(7) / (1) = 7, left: (7 / 1) = 7, 12, 13\nroll back, left: 1 12 7 13\n(1) - (7) = -6, left: (1 - 7) = -6, 12, 13\nroll back, left: 1 12 7 13\n(1) + (13) = 14, left: (1 + 13) = 14, 12, 7\n(12) / (7) = 12/7, left: (12 / 7) = 12/7, (1 + 13) = 14\n(14) * (12/7) = 24, left: ((1 + 13) * (12 / 7)) = 24\nreach 24! expression: ((1 + 13) * (12 / 7))"}, {"input": "1 12 7 13\n", "output": "(1) - (13) = -12, left: (1 - 13) = -12, 12, 7\n(7) - (-12) = 19, left: (7 - (1 - 13)) = 19, 12\nroll back, left: (1 - 13) = -12, 12, 7\nroll back, left: 1 12 7 13\n(13) - (1) = 12, left: (13 - 1) = 12, 12, 7\nroll back, left: 1 12 7 13\n(1) + (13) = 14, left: (1 + 13) = 14, 12, 7\n(7) / (14) = 1/2, left: (7 / (1 + 13)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (7 / (1 + 13))) = 24\nreach 24! expression: (12 / (7 / (1 + 13)))"}, {"input": "9 5 8 8\n", "output": "(8) - (5) = 3, left: (8 - 5) = 3, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (8 - 5) = 3\n(72) / (3) = 24, left: ((9 * 8) / (8 - 5)) = 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 9, 5\nroll back, left: 9 5 8 8\n(5) + (8) = 13, left: (5 + 8) = 13, 9, 8\nroll back, left: 9 5 8 8\n(5) - (8) = -3, left: (5 - 8) = -3, 9, 8\nroll back, left: 9 5 8 8\n(8) - (5) = 3, left: (8 - 5) = 3, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (8 - 5) = 3\n(72) / (3) = 24, left: ((9 * 8) / (8 - 5)) = 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(8) / (5) = 8/5, left: (8 / 5) = 8/5, 9, 8\nroll back, left: 9 5 8 8\n(5) + (8) = 13, left: (5 + 8) = 13, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (5 + 8) = 13\nroll back, left: (5 + 8) = 13, 9, 8\nroll back, left: 9 5 8 8\n(8) - (5) = 3, left: (8 - 5) = 3, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (8 - 5) = 3\n(72) / (3) = 24, left: ((9 * 8) / (8 - 5)) = 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(5) / (8) = 5/8, left: (5 / 8) = 5/8, 9, 8\nroll back, left: 9 5 8 8\n(5) - (8) = -3, left: (5 - 8) = -3, 9, 8\n(8) + (-3) = 5, left: (8 + (5 - 8)) = 5, 9\nroll back, left: (5 - 8) = -3, 9, 8\nroll back, left: 9 5 8 8\n(8) - (5) = 3, left: (8 - 5) = 3, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (8 - 5) = 3\n(72) / (3) = 24, left: ((9 * 8) / (8 - 5)) = 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "9 5 8 8\n", "output": "(5) + (8) = 13, left: (5 + 8) = 13, 9, 8\n(8) / (13) = 8/13, left: (8 / (5 + 8)) = 8/13, 9\nroll back, left: (5 + 8) = 13, 9, 8\nroll back, left: 9 5 8 8\n(8) / (5) = 8/5, left: (8 / 5) = 8/5, 9, 8\nroll back, left: 9 5 8 8\n(8) - (5) = 3, left: (8 - 5) = 3, 9, 8\n(9) * (8) = 72, left: (9 * 8) = 72, (8 - 5) = 3\n(72) / (3) = 24, left: ((9 * 8) / (8 - 5)) = 24\nreach 24! expression: ((9 * 8) / (8 - 5))"}, {"input": "13 2 12 2\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 13, 12\n(13) - (1) = 12, left: (13 - (2 / 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (13 - (2 / 2))) = 24\nreach 24! expression: (12 + (13 - (2 / 2)))"}, {"input": "13 2 12 2\n", "output": "(13) + (12) = 25, left: (13 + 12) = 25, 2, 2\n(2) / (2) = 1, left: (2 / 2) = 1, (13 + 12) = 25\n(25) - (1) = 24, left: ((13 + 12) - (2 / 2)) = 24\nreach 24! expression: ((13 + 12) - (2 / 2))"}, {"input": "13 2 12 2\n", "output": "(12) / (2) = 6, left: (12 / 2) = 6, 13, 2\n(13) / (6) = 13/6, left: (13 / (12 / 2)) = 13/6, 2\nroll back, left: (12 / 2) = 6, 13, 2\nroll back, left: 13 2 12 2\n(2) / (12) = 1/6, left: (2 / 12) = 1/6, 13, 2\nroll back, left: 13 2 12 2\n(13) + (12) = 25, left: (13 + 12) = 25, 2, 2\n(2) / (2) = 1, left: (2 / 2) = 1, (13 + 12) = 25\n(25) - (1) = 24, left: ((13 + 12) - (2 / 2)) = 24\nreach 24! expression: ((13 + 12) - (2 / 2))"}, {"input": "13 2 12 2\n", "output": "(2) / (13) = 2/13, left: (2 / 13) = 2/13, 12, 2\n(2) / (2/13) = 13, left: (2 / (2 / 13)) = 13, 12\nroll back, left: (2 / 13) = 2/13, 12, 2\nroll back, left: 13 2 12 2\n(2) - (13) = -11, left: (2 - 13) = -11, 12, 2\nroll back, left: 13 2 12 2\n(2) / (2) = 1, left: (2 / 2) = 1, 13, 12\n(13) - (1) = 12, left: (13 - (2 / 2)) = 12, 12\n(12) + (12) = 24, left: (12 + (13 - (2 / 2))) = 24\nreach 24! expression: (12 + (13 - (2 / 2)))"}, {"input": "9 10 1 7\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (10 - 7) = 3\n(3) * (8) = 24, left: ((10 - 7) * (9 - 1)) = 24\nreach 24! expression: ((10 - 7) * (9 - 1))"}, {"input": "9 10 1 7\n", "output": "(9) - (1) = 8, left: (9 - 1) = 8, 10, 7\n(10) - (7) = 3, left: (10 - 7) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (10 - 7)) = 24\nreach 24! expression: ((9 - 1) * (10 - 7))"}, {"input": "9 10 1 7\n", "output": "(1) - (9) = -8, left: (1 - 9) = -8, 10, 7\n(7) - (10) = -3, left: (7 - 10) = -3, (1 - 9) = -8\n(-8) * (-3) = 24, left: ((1 - 9) * (7 - 10)) = 24\nreach 24! expression: ((1 - 9) * (7 - 10))"}, {"input": "9 10 1 7\n", "output": "(9) - (10) = -1, left: (9 - 10) = -1, 1, 7\nroll back, left: 9 10 1 7\n(9) - (7) = 2, left: (9 - 7) = 2, 10, 1\nroll back, left: 9 10 1 7\n(9) * (7) = 63, left: (9 * 7) = 63, 10, 1\nroll back, left: 9 10 1 7\n(1) - (9) = -8, left: (1 - 9) = -8, 10, 7\n(7) - (10) = -3, left: (7 - 10) = -3, (1 - 9) = -8\n(-8) * (-3) = 24, left: ((1 - 9) * (7 - 10)) = 24\nreach 24! expression: ((1 - 9) * (7 - 10))"}, {"input": "9 10 1 7\n", "output": "(1) / (10) = 1/10, left: (1 / 10) = 1/10, 9, 7\nroll back, left: 9 10 1 7\n(1) / (7) = 1/7, left: (1 / 7) = 1/7, 9, 10\nroll back, left: 9 10 1 7\n(7) / (10) = 7/10, left: (7 / 10) = 7/10, 9, 1\nroll back, left: 9 10 1 7\n(10) - (7) = 3, left: (10 - 7) = 3, 9, 1\n(9) - (1) = 8, left: (9 - 1) = 8, (10 - 7) = 3\n(3) * (8) = 24, left: ((10 - 7) * (9 - 1)) = 24\nreach 24! expression: ((10 - 7) * (9 - 1))"}, {"input": "9 10 1 7\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 10, 1\nroll back, left: 9 10 1 7\n(9) * (7) = 63, left: (9 * 7) = 63, 10, 1\n(1) / (63) = 1/63, left: (1 / (9 * 7)) = 1/63, 10\nroll back, left: (9 * 7) = 63, 10, 1\nroll back, left: 9 10 1 7\n(1) - (9) = -8, left: (1 - 9) = -8, 10, 7\n(7) - (10) = -3, left: (7 - 10) = -3, (1 - 9) = -8\n(-8) * (-3) = 24, left: ((1 - 9) * (7 - 10)) = 24\nreach 24! expression: ((1 - 9) * (7 - 10))"}, {"input": "9 10 1 7\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 9, 10\n(9) / (1/7) = 63, left: (9 / (1 / 7)) = 63, 10\nroll back, left: (1 / 7) = 1/7, 9, 10\nroll back, left: 9 10 1 7\n(7) / (1) = 7, left: (7 / 1) = 7, 9, 10\nroll back, left: 9 10 1 7\n(9) - (1) = 8, left: (9 - 1) = 8, 10, 7\n(10) - (7) = 3, left: (10 - 7) = 3, (9 - 1) = 8\n(8) * (3) = 24, left: ((9 - 1) * (10 - 7)) = 24\nreach 24! expression: ((9 - 1) * (10 - 7))"}, {"input": "4 10 8 2\n", "output": "(4) + (2) = 6, left: (4 + 2) = 6, 10, 8\n(10) + (8) = 18, left: (10 + 8) = 18, (4 + 2) = 6\n(6) + (18) = 24, left: ((4 + 2) + (10 + 8)) = 24\nreach 24! expression: ((4 + 2) + (10 + 8))"}, {"input": "4 10 8 2\n", "output": "(4) * (10) = 40, left: (4 * 10) = 40, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (4 * 10) = 40\n(40) - (16) = 24, left: ((4 * 10) - (8 * 2)) = 24\nreach 24! expression: ((4 * 10) - (8 * 2))"}, {"input": "4 10 8 2\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (10 - 4)) = 48, 2\n(48) / (2) = 24, left: ((8 * (10 - 4)) / 2) = 24\nreach 24! expression: ((8 * (10 - 4)) / 2)"}, {"input": "4 10 8 2\n", "output": "(4) * (10) = 40, left: (4 * 10) = 40, 8, 2\n(8) + (40) = 48, left: (8 + (4 * 10)) = 48, 2\n(48) / (2) = 24, left: ((8 + (4 * 10)) / 2) = 24\nreach 24! expression: ((8 + (4 * 10)) / 2)"}, {"input": "4 10 8 2\n", "output": "(10) + (8) = 18, left: (10 + 8) = 18, 4, 2\n(4) + (18) = 22, left: (4 + (10 + 8)) = 22, 2\n(2) + (22) = 24, left: (2 + (4 + (10 + 8))) = 24\nreach 24! expression: (2 + (4 + (10 + 8)))"}, {"input": "4 10 8 2\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 8, 2\nroll back, left: 4 10 8 2\n(10) / (4) = 5/2, left: (10 / 4) = 5/2, 8, 2\n(8) + (5/2) = 21/2, left: (8 + (10 / 4)) = 21/2, 2\nroll back, left: (10 / 4) = 5/2, 8, 2\nroll back, left: 4 10 8 2\n(4) * (10) = 40, left: (4 * 10) = 40, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (4 * 10) = 40\n(40) - (16) = 24, left: ((4 * 10) - (8 * 2)) = 24\nreach 24! expression: ((4 * 10) - (8 * 2))"}, {"input": "4 10 8 2\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 8, 2\n(8) - (6) = 2, left: (8 - (10 - 4)) = 2, 2\n(2) - (2) = 0, left: (2 - (8 - (10 - 4))) = 0\nroll back, left: (8 - (10 - 4)) = 2, 2\nroll back, left: (10 - 4) = 6, 8, 2\n(8) / (6) = 4/3, left: (8 / (10 - 4)) = 4/3, 2\nroll back, left: (10 - 4) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (10 - 4)) = 48, 2\n(48) / (2) = 24, left: ((8 * (10 - 4)) / 2) = 24\nreach 24! expression: ((8 * (10 - 4)) / 2)"}, {"input": "4 10 8 2\n", "output": "(2) - (4) = -2, left: (2 - 4) = -2, 10, 8\nroll back, left: 4 10 8 2\n(2) / (4) = 1/2, left: (2 / 4) = 1/2, 10, 8\n(10) * (8) = 80, left: (10 * 8) = 80, (2 / 4) = 1/2\nroll back, left: (2 / 4) = 1/2, 10, 8\nroll back, left: 4 10 8 2\n(4) + (2) = 6, left: (4 + 2) = 6, 10, 8\n(10) + (8) = 18, left: (10 + 8) = 18, (4 + 2) = 6\n(6) + (18) = 24, left: ((4 + 2) + (10 + 8)) = 24\nreach 24! expression: ((4 + 2) + (10 + 8))"}, {"input": "4 10 8 2\n", "output": "(8) / (10) = 4/5, left: (8 / 10) = 4/5, 4, 2\nroll back, left: 4 10 8 2\n(10) / (8) = 5/4, left: (10 / 8) = 5/4, 4, 2\n(4) * (2) = 8, left: (4 * 2) = 8, (10 / 8) = 5/4\nroll back, left: (10 / 8) = 5/4, 4, 2\nroll back, left: 4 10 8 2\n(10) + (8) = 18, left: (10 + 8) = 18, 4, 2\n(4) + (18) = 22, left: (4 + (10 + 8)) = 22, 2\n(2) + (22) = 24, left: (2 + (4 + (10 + 8))) = 24\nreach 24! expression: (2 + (4 + (10 + 8)))"}, {"input": "4 10 8 2\n", "output": "(4) * (10) = 40, left: (4 * 10) = 40, 8, 2\n(40) - (2) = 38, left: ((4 * 10) - 2) = 38, 8\nroll back, left: (4 * 10) = 40, 8, 2\n(40) - (8) = 32, left: ((4 * 10) - 8) = 32, 2\nroll back, left: (4 * 10) = 40, 8, 2\n(40) / (8) = 5, left: ((4 * 10) / 8) = 5, 2\nroll back, left: (4 * 10) = 40, 8, 2\n(8) + (40) = 48, left: (8 + (4 * 10)) = 48, 2\n(48) / (2) = 24, left: ((8 + (4 * 10)) / 2) = 24\nreach 24! expression: ((8 + (4 * 10)) / 2)"}, {"input": "7 6 5 7\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (7 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (7 / 7))) = 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(5) / (6) = 5/6, left: (5 / 6) = 5/6, 7, 7\nroll back, left: 7 6 5 7\n(6) - (5) = 1, left: (6 - 5) = 1, 7, 7\nroll back, left: 7 6 5 7\n(5) - (7) = -2, left: (5 - 7) = -2, 6, 7\nroll back, left: 7 6 5 7\n(7) / (7) = 1, left: (7 / 7) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (7 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (7 / 7))) = 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(5) / (7) = 5/7, left: (5 / 7) = 5/7, 7, 6\n(6) - (7) = -1, left: (6 - 7) = -1, (5 / 7) = 5/7\nroll back, left: (5 / 7) = 5/7, 7, 6\nroll back, left: 7 6 5 7\n(7) / (5) = 7/5, left: (7 / 5) = 7/5, 7, 6\nroll back, left: 7 6 5 7\n(7) / (7) = 1, left: (7 / 7) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (7 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (7 / 7))) = 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 5, 7\n(1) / (5) = 1/5, left: ((7 - 6) / 5) = 1/5, 7\nroll back, left: (7 - 6) = 1, 5, 7\nroll back, left: 7 6 5 7\n(7) + (6) = 13, left: (7 + 6) = 13, 5, 7\nroll back, left: 7 6 5 7\n(7) / (7) = 1, left: (7 / 7) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (7 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (7 / 7))) = 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(7) + (5) = 12, left: (7 + 5) = 12, 6, 7\n(6) + (12) = 18, left: (6 + (7 + 5)) = 18, 7\nroll back, left: (7 + 5) = 12, 6, 7\nroll back, left: 7 6 5 7\n(6) / (7) = 6/7, left: (6 / 7) = 6/7, 5, 7\nroll back, left: 7 6 5 7\n(7) / (7) = 1, left: (7 / 7) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (7 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (7 / 7))) = 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "7 6 5 7\n", "output": "(7) / (5) = 7/5, left: (7 / 5) = 7/5, 7, 6\n(7/5) - (7) = -28/5, left: ((7 / 5) - 7) = -28/5, 6\nroll back, left: (7 / 5) = 7/5, 7, 6\nroll back, left: 7 6 5 7\n(6) * (7) = 42, left: (6 * 7) = 42, 7, 5\nroll back, left: 7 6 5 7\n(7) / (7) = 1, left: (7 / 7) = 1, 6, 5\n(5) - (1) = 4, left: (5 - (7 / 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (5 - (7 / 7))) = 24\nreach 24! expression: (6 * (5 - (7 / 7)))"}, {"input": "1 6 1 9\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (1 + 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (1 + 1))) = 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(1) - (1) = 0, left: (1 - 1) = 0, 6, 9\nroll back, left: 1 6 1 9\n(1) / (1) = 1, left: (1 / 1) = 1, 6, 9\nroll back, left: 1 6 1 9\n(1) + (1) = 2, left: (1 + 1) = 2, 6, 9\n(6) * (2) = 12, left: (6 * (1 + 1)) = 12, 9\nroll back, left: (1 + 1) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (1 + 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (1 + 1))) = 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 1, 1\nroll back, left: 1 6 1 9\n(6) + (9) = 15, left: (6 + 9) = 15, 1, 1\nroll back, left: 1 6 1 9\n(1) - (6) = -5, left: (1 - 6) = -5, 1, 9\nroll back, left: 1 6 1 9\n(1) + (1) = 2, left: (1 + 1) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (1 + 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (1 + 1))) = 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 6, 9\n(6) + (2) = 8, left: (6 + (1 + 1)) = 8, 9\n(9) / (8) = 9/8, left: (9 / (6 + (1 + 1))) = 9/8\nroll back, left: (6 + (1 + 1)) = 8, 9\nroll back, left: (1 + 1) = 2, 6, 9\n(6) - (2) = 4, left: (6 - (1 + 1)) = 4, 9\nroll back, left: (1 + 1) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (1 + 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (1 + 1))) = 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 1, 9\nroll back, left: 1 6 1 9\n(6) - (1) = 5, left: (6 - 1) = 5, 1, 9\n(1) + (9) = 10, left: (1 + 9) = 10, (6 - 1) = 5\nroll back, left: (6 - 1) = 5, 1, 9\nroll back, left: 1 6 1 9\n(1) + (1) = 2, left: (1 + 1) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (1 + 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (1 + 1))) = 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "1 6 1 9\n", "output": "(6) * (9) = 54, left: (6 * 9) = 54, 1, 1\nroll back, left: 1 6 1 9\n(6) / (9) = 2/3, left: (6 / 9) = 2/3, 1, 1\nroll back, left: 1 6 1 9\n(9) / (1) = 9, left: (9 / 1) = 9, 1, 6\nroll back, left: 1 6 1 9\n(1) + (1) = 2, left: (1 + 1) = 2, 6, 9\n(9) * (2) = 18, left: (9 * (1 + 1)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 * (1 + 1))) = 24\nreach 24! expression: (6 + (9 * (1 + 1)))"}, {"input": "5 3 12 4\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 5, 3\n(5) + (3) = 8, left: (5 + (12 / 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 + (12 / 4))) = 24\nreach 24! expression: (3 * (5 + (12 / 4)))"}, {"input": "5 3 12 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 5, 12\n(5) + (7) = 12, left: (5 + (3 + 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (5 + (3 + 4))) = 24\nreach 24! expression: (12 + (5 + (3 + 4)))"}, {"input": "5 3 12 4\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 12, 4\n(4) + (-2) = 2, left: (4 + (3 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (4 + (3 - 5))) = 24\nreach 24! expression: (12 * (4 + (3 - 5)))"}, {"input": "5 3 12 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 5, 12\n(12) + (7) = 19, left: (12 + (3 + 4)) = 19, 5\n(5) + (19) = 24, left: (5 + (12 + (3 + 4))) = 24\nreach 24! expression: (5 + (12 + (3 + 4)))"}, {"input": "5 3 12 4\n", "output": "(5) + (12) = 17, left: (5 + 12) = 17, 3, 4\n(3) + (17) = 20, left: (3 + (5 + 12)) = 20, 4\n(4) + (20) = 24, left: (4 + (3 + (5 + 12))) = 24\nreach 24! expression: (4 + (3 + (5 + 12)))"}, {"input": "5 3 12 4\n", "output": "(5) - (12) = -7, left: (5 - 12) = -7, 3, 4\n(-7) - (3) = -10, left: ((5 - 12) - 3) = -10, 4\n(-10) - (4) = -14, left: (((5 - 12) - 3) - 4) = -14\nroll back, left: ((5 - 12) - 3) = -10, 4\nroll back, left: (5 - 12) = -7, 3, 4\nroll back, left: 5 3 12 4\n(5) + (12) = 17, left: (5 + 12) = 17, 3, 4\n(3) + (17) = 20, left: (3 + (5 + 12)) = 20, 4\n(4) + (20) = 24, left: (4 + (3 + (5 + 12))) = 24\nreach 24! expression: (4 + (3 + (5 + 12)))"}, {"input": "5 3 12 4\n", "output": "(12) / (4) = 3, left: (12 / 4) = 3, 5, 3\n(5) - (3) = 2, left: (5 - (12 / 4)) = 2, 3\n(3) + (2) = 5, left: (3 + (5 - (12 / 4))) = 5\nroll back, left: (5 - (12 / 4)) = 2, 3\nroll back, left: (12 / 4) = 3, 5, 3\n(5) * (3) = 15, left: (5 * (12 / 4)) = 15, 3\nroll back, left: (12 / 4) = 3, 5, 3\n(5) + (3) = 8, left: (5 + (12 / 4)) = 8, 3\n(3) * (8) = 24, left: (3 * (5 + (12 / 4))) = 24\nreach 24! expression: (3 * (5 + (12 / 4)))"}, {"input": "5 3 12 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 5, 12\n(5) + (7) = 12, left: (5 + (3 + 4)) = 12, 12\n(12) / (12) = 1, left: (12 / (5 + (3 + 4))) = 1\nroll back, left: (5 + (3 + 4)) = 12, 12\n(12) * (12) = 144, left: (12 * (5 + (3 + 4))) = 144\nroll back, left: (5 + (3 + 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (5 + (3 + 4))) = 24\nreach 24! expression: (12 + (5 + (3 + 4)))"}, {"input": "5 3 12 4\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 5, 12\nroll back, left: 5 3 12 4\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, 5, 12\nroll back, left: 5 3 12 4\n(3) / (4) = 3/4, left: (3 / 4) = 3/4, 5, 12\nroll back, left: 5 3 12 4\n(3) + (4) = 7, left: (3 + 4) = 7, 5, 12\n(12) + (7) = 19, left: (12 + (3 + 4)) = 19, 5\n(5) + (19) = 24, left: (5 + (12 + (3 + 4))) = 24\nreach 24! expression: (5 + (12 + (3 + 4)))"}, {"input": "5 3 12 4\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 12, 4\n(12) + (-2) = 10, left: (12 + (3 - 5)) = 10, 4\nroll back, left: (3 - 5) = -2, 12, 4\n(4) - (-2) = 6, left: (4 - (3 - 5)) = 6, 12\n(12) - (6) = 6, left: (12 - (4 - (3 - 5))) = 6\nroll back, left: (4 - (3 - 5)) = 6, 12\nroll back, left: (3 - 5) = -2, 12, 4\n(4) + (-2) = 2, left: (4 + (3 - 5)) = 2, 12\n(12) * (2) = 24, left: (12 * (4 + (3 - 5))) = 24\nreach 24! expression: (12 * (4 + (3 - 5)))"}, {"input": "5 3 12 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 5, 12\n(5) + (7) = 12, left: (5 + (3 + 4)) = 12, 12\n(12) / (12) = 1, left: (12 / (5 + (3 + 4))) = 1\nroll back, left: (5 + (3 + 4)) = 12, 12\n(12) * (12) = 144, left: (12 * (5 + (3 + 4))) = 144\nroll back, left: (5 + (3 + 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (5 + (3 + 4))) = 24\nreach 24! expression: (12 + (5 + (3 + 4)))"}, {"input": "5 3 12 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 5, 12\n(5) + (7) = 12, left: (5 + (3 + 4)) = 12, 12\n(12) / (12) = 1, left: (12 / (5 + (3 + 4))) = 1\nroll back, left: (5 + (3 + 4)) = 12, 12\n(12) * (12) = 144, left: (12 * (5 + (3 + 4))) = 144\nroll back, left: (5 + (3 + 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (5 + (3 + 4))) = 24\nreach 24! expression: (12 + (5 + (3 + 4)))"}, {"input": "5 3 12 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 5, 12\n(5) + (7) = 12, left: (5 + (3 + 4)) = 12, 12\n(12) / (12) = 1, left: (12 / (5 + (3 + 4))) = 1\nroll back, left: (5 + (3 + 4)) = 12, 12\n(12) * (12) = 144, left: (12 * (5 + (3 + 4))) = 144\nroll back, left: (5 + (3 + 4)) = 12, 12\n(12) + (12) = 24, left: (12 + (5 + (3 + 4))) = 24\nreach 24! expression: (12 + (5 + (3 + 4)))"}, {"input": "4 13 7 11\n", "output": "(13) + (7) = 20, left: (13 + 7) = 20, 4, 11\n(4) * (11) = 44, left: (4 * 11) = 44, (13 + 7) = 20\n(44) - (20) = 24, left: ((4 * 11) - (13 + 7)) = 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "4 13 7 11\n", "output": "(4) * (11) = 44, left: (4 * 11) = 44, 13, 7\n(13) + (7) = 20, left: (13 + 7) = 20, (4 * 11) = 44\n(44) - (20) = 24, left: ((4 * 11) - (13 + 7)) = 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "4 13 7 11\n", "output": "(11) - (13) = -2, left: (11 - 13) = -2, 4, 7\n(-2) / (7) = -2/7, left: ((11 - 13) / 7) = -2/7, 4\nroll back, left: (11 - 13) = -2, 4, 7\nroll back, left: 4 13 7 11\n(4) + (13) = 17, left: (4 + 13) = 17, 7, 11\nroll back, left: 4 13 7 11\n(13) + (7) = 20, left: (13 + 7) = 20, 4, 11\n(4) * (11) = 44, left: (4 * 11) = 44, (13 + 7) = 20\n(44) - (20) = 24, left: ((4 * 11) - (13 + 7)) = 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "4 13 7 11\n", "output": "(4) / (11) = 4/11, left: (4 / 11) = 4/11, 13, 7\nroll back, left: 4 13 7 11\n(11) / (4) = 11/4, left: (11 / 4) = 11/4, 13, 7\nroll back, left: 4 13 7 11\n(11) - (4) = 7, left: (11 - 4) = 7, 13, 7\nroll back, left: 4 13 7 11\n(4) * (11) = 44, left: (4 * 11) = 44, 13, 7\n(13) + (7) = 20, left: (13 + 7) = 20, (4 * 11) = 44\n(44) - (20) = 24, left: ((4 * 11) - (13 + 7)) = 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "4 13 7 11\n", "output": "(11) - (4) = 7, left: (11 - 4) = 7, 13, 7\nroll back, left: 4 13 7 11\n(4) / (11) = 4/11, left: (4 / 11) = 4/11, 13, 7\nroll back, left: 4 13 7 11\n(4) - (11) = -7, left: (4 - 11) = -7, 13, 7\nroll back, left: 4 13 7 11\n(4) * (11) = 44, left: (4 * 11) = 44, 13, 7\n(13) + (7) = 20, left: (13 + 7) = 20, (4 * 11) = 44\n(44) - (20) = 24, left: ((4 * 11) - (13 + 7)) = 24\nreach 24! expression: ((4 * 11) - (13 + 7))"}, {"input": "7 7 7 4\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (7 / 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (7 / 7))) = 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) * (7) = 49, left: (7 * 7) = 49, 7, 4\nroll back, left: 7 7 7 4\n(7) / (7) = 1, left: (7 / 7) = 1, 7, 4\n(7) - (4) = 3, left: (7 - 4) = 3, (7 / 7) = 1\nroll back, left: (7 / 7) = 1, 7, 4\n(1) - (4) = -3, left: ((7 / 7) - 4) = -3, 7\nroll back, left: (7 / 7) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (7 / 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (7 / 7))) = 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 7, 7\n(7) - (7) = 0, left: (7 - 7) = 0, (7 / 4) = 7/4\nroll back, left: (7 / 4) = 7/4, 7, 7\nroll back, left: 7 7 7 4\n(7) * (4) = 28, left: (7 * 4) = 28, 7, 7\nroll back, left: 7 7 7 4\n(7) / (7) = 1, left: (7 / 7) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (7 / 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (7 / 7))) = 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) * (4) = 28, left: (7 * 4) = 28, 7, 7\nroll back, left: 7 7 7 4\n(7) * (7) = 49, left: (7 * 7) = 49, 7, 4\n(4) / (49) = 4/49, left: (4 / (7 * 7)) = 4/49, 7\nroll back, left: (7 * 7) = 49, 7, 4\nroll back, left: 7 7 7 4\n(7) / (7) = 1, left: (7 / 7) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (7 / 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (7 / 7))) = 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) / (7) = 1, left: (7 / 7) = 1, 7, 4\n(7) / (4) = 7/4, left: (7 / 4) = 7/4, (7 / 7) = 1\nroll back, left: (7 / 7) = 1, 7, 4\n(7) * (4) = 28, left: (7 * 4) = 28, (7 / 7) = 1\n(1) * (28) = 28, left: ((7 / 7) * (7 * 4)) = 28\nroll back, left: (7 * 4) = 28, (7 / 7) = 1\nroll back, left: (7 / 7) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (7 / 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (7 / 7))) = 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "7 7 7 4\n", "output": "(7) - (7) = 0, left: (7 - 7) = 0, 7, 4\n(7) + (0) = 7, left: (7 + (7 - 7)) = 7, 4\nroll back, left: (7 - 7) = 0, 7, 4\nroll back, left: 7 7 7 4\n(7) / (7) = 1, left: (7 / 7) = 1, 7, 4\n(4) / (1) = 4, left: (4 / (7 / 7)) = 4, 7\nroll back, left: (7 / 7) = 1, 7, 4\n(7) - (1) = 6, left: (7 - (7 / 7)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 - (7 / 7))) = 24\nreach 24! expression: (4 * (7 - (7 / 7)))"}, {"input": "10 3 1 12\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 10, 12\n(12) - (-2) = 14, left: (12 - (1 - 3)) = 14, 10\n(10) + (14) = 24, left: (10 + (12 - (1 - 3))) = 24\nreach 24! expression: (10 + (12 - (1 - 3)))"}, {"input": "10 3 1 12\n", "output": "(10) - (1) = 9, left: (10 - 1) = 9, 3, 12\n(12) + (9) = 21, left: (12 + (10 - 1)) = 21, 3\n(3) + (21) = 24, left: (3 + (12 + (10 - 1))) = 24\nreach 24! expression: (3 + (12 + (10 - 1)))"}, {"input": "10 3 1 12\n", "output": "(3) + (12) = 15, left: (3 + 12) = 15, 10, 1\n(15) - (1) = 14, left: ((3 + 12) - 1) = 14, 10\n(10) + (14) = 24, left: (10 + ((3 + 12) - 1)) = 24\nreach 24! expression: (10 + ((3 + 12) - 1))"}, {"input": "10 3 1 12\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 10, 3\n(10) + (3) = 13, left: (10 + 3) = 13, (12 - 1) = 11\n(11) + (13) = 24, left: ((12 - 1) + (10 + 3)) = 24\nreach 24! expression: ((12 - 1) + (10 + 3))"}, {"input": "10 3 1 12\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 10, 1\nroll back, left: 10 3 1 12\n(12) / (3) = 4, left: (12 / 3) = 4, 10, 1\n(10) / (1) = 10, left: (10 / 1) = 10, (12 / 3) = 4\nroll back, left: (12 / 3) = 4, 10, 1\nroll back, left: 10 3 1 12\n(3) + (12) = 15, left: (3 + 12) = 15, 10, 1\n(15) - (1) = 14, left: ((3 + 12) - 1) = 14, 10\n(10) + (14) = 24, left: (10 + ((3 + 12) - 1)) = 24\nreach 24! expression: (10 + ((3 + 12) - 1))"}, {"input": "13 12 7 12\n", "output": "(13) * (12) = 156, left: (13 * 12) = 156, 7, 12\n(12) + (156) = 168, left: (12 + (13 * 12)) = 168, 7\n(168) / (7) = 24, left: ((12 + (13 * 12)) / 7) = 24\nreach 24! expression: ((12 + (13 * 12)) / 7)"}, {"input": "13 12 7 12\n", "output": "(12) * (12) = 144, left: (12 * 12) = 144, 13, 7\n(13) - (7) = 6, left: (13 - 7) = 6, (12 * 12) = 144\n(144) / (6) = 24, left: ((12 * 12) / (13 - 7)) = 24\nreach 24! expression: ((12 * 12) / (13 - 7))"}, {"input": "13 12 7 12\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 12, 12\n(12) * (12) = 144, left: (12 * 12) = 144, (13 - 7) = 6\n(144) / (6) = 24, left: ((12 * 12) / (13 - 7)) = 24\nreach 24! expression: ((12 * 12) / (13 - 7))"}, {"input": "13 12 7 12\n", "output": "(13) - (7) = 6, left: (13 - 7) = 6, 12, 12\n(6) / (12) = 1/2, left: ((13 - 7) / 12) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((13 - 7) / 12)) = 24\nreach 24! expression: (12 / ((13 - 7) / 12))"}, {"input": "13 12 7 12\n", "output": "(12) - (7) = 5, left: (12 - 7) = 5, 13, 12\nroll back, left: 13 12 7 12\n(12) * (7) = 84, left: (12 * 7) = 84, 13, 12\nroll back, left: 13 12 7 12\n(13) + (7) = 20, left: (13 + 7) = 20, 12, 12\nroll back, left: 13 12 7 12\n(13) - (7) = 6, left: (13 - 7) = 6, 12, 12\n(6) / (12) = 1/2, left: ((13 - 7) / 12) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / ((13 - 7) / 12)) = 24\nreach 24! expression: (12 / ((13 - 7) / 12))"}, {"input": "12 11 8 12\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (11 - 8)) = 36, 12\n(36) - (12) = 24, left: ((12 * (11 - 8)) - 12) = 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "12 11 8 12\n", "output": "(12) * (12) = 144, left: (12 * 12) = 144, 11, 8\nroll back, left: 12 11 8 12\n(8) - (12) = -4, left: (8 - 12) = -4, 12, 11\nroll back, left: 12 11 8 12\n(8) * (12) = 96, left: (8 * 12) = 96, 12, 11\nroll back, left: 12 11 8 12\n(11) - (8) = 3, left: (11 - 8) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (11 - 8)) = 36, 12\n(36) - (12) = 24, left: ((12 * (11 - 8)) - 12) = 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "12 11 8 12\n", "output": "(11) + (12) = 23, left: (11 + 12) = 23, 12, 8\nroll back, left: 12 11 8 12\n(11) - (12) = -1, left: (11 - 12) = -1, 12, 8\nroll back, left: 12 11 8 12\n(11) * (12) = 132, left: (11 * 12) = 132, 12, 8\nroll back, left: 12 11 8 12\n(11) - (8) = 3, left: (11 - 8) = 3, 12, 12\n(12) * (3) = 36, left: (12 * (11 - 8)) = 36, 12\n(36) - (12) = 24, left: ((12 * (11 - 8)) - 12) = 24\nreach 24! expression: ((12 * (11 - 8)) - 12)"}, {"input": "2 2 2 5\n", "output": "(2) * (5) = 10, left: (2 * 5) = 10, 2, 2\n(2) + (10) = 12, left: (2 + (2 * 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 + (2 * 5))) = 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 2, 5\nroll back, left: 2 2 2 5\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, 2, 2\n(5/2) - (2) = 1/2, left: ((5 / 2) - 2) = 1/2, 2\nroll back, left: (5 / 2) = 5/2, 2, 2\nroll back, left: 2 2 2 5\n(2) * (5) = 10, left: (2 * 5) = 10, 2, 2\n(2) + (10) = 12, left: (2 + (2 * 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 + (2 * 5))) = 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 2, 2\nroll back, left: 2 2 2 5\n(2) / (5) = 2/5, left: (2 / 5) = 2/5, 2, 2\n(2/5) - (2) = -8/5, left: ((2 / 5) - 2) = -8/5, 2\nroll back, left: (2 / 5) = 2/5, 2, 2\nroll back, left: 2 2 2 5\n(2) * (5) = 10, left: (2 * 5) = 10, 2, 2\n(2) + (10) = 12, left: (2 + (2 * 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 + (2 * 5))) = 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) + (5) = 7, left: (2 + 5) = 7, 2, 2\n(2) * (7) = 14, left: (2 * (2 + 5)) = 14, 2\nroll back, left: (2 + 5) = 7, 2, 2\n(7) / (2) = 7/2, left: ((2 + 5) / 2) = 7/2, 2\nroll back, left: (2 + 5) = 7, 2, 2\nroll back, left: 2 2 2 5\n(2) * (5) = 10, left: (2 * 5) = 10, 2, 2\n(2) + (10) = 12, left: (2 + (2 * 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 + (2 * 5))) = 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) / (2) = 1, left: (2 / 2) = 1, 2, 5\n(2) + (1) = 3, left: (2 + (2 / 2)) = 3, 5\nroll back, left: (2 / 2) = 1, 2, 5\nroll back, left: 2 2 2 5\n(2) / (2) = 1, left: (2 / 2) = 1, 2, 5\nroll back, left: 2 2 2 5\n(2) * (5) = 10, left: (2 * 5) = 10, 2, 2\n(2) + (10) = 12, left: (2 + (2 * 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 + (2 * 5))) = 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "2 2 2 5\n", "output": "(2) + (2) = 4, left: (2 + 2) = 4, 2, 5\nroll back, left: 2 2 2 5\n(2) * (2) = 4, left: (2 * 2) = 4, 2, 5\n(5) - (4) = 1, left: (5 - (2 * 2)) = 1, 2\nroll back, left: (2 * 2) = 4, 2, 5\nroll back, left: 2 2 2 5\n(2) * (5) = 10, left: (2 * 5) = 10, 2, 2\n(2) + (10) = 12, left: (2 + (2 * 5)) = 12, 2\n(2) * (12) = 24, left: (2 * (2 + (2 * 5))) = 24\nreach 24! expression: (2 * (2 + (2 * 5)))"}, {"input": "12 2 11 4\n", "output": "(11) - (2) = 9, left: (11 - 2) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (11 - 2)) = 36, 12\n(36) - (12) = 24, left: ((4 * (11 - 2)) - 12) = 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "12 2 11 4\n", "output": "(2) / (12) = 1/6, left: (2 / 12) = 1/6, 11, 4\nroll back, left: 12 2 11 4\n(2) - (12) = -10, left: (2 - 12) = -10, 11, 4\nroll back, left: 12 2 11 4\n(12) + (2) = 14, left: (12 + 2) = 14, 11, 4\nroll back, left: 12 2 11 4\n(11) - (2) = 9, left: (11 - 2) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (11 - 2)) = 36, 12\n(36) - (12) = 24, left: ((4 * (11 - 2)) - 12) = 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "12 2 11 4\n", "output": "(11) + (4) = 15, left: (11 + 4) = 15, 12, 2\nroll back, left: 12 2 11 4\n(12) - (4) = 8, left: (12 - 4) = 8, 2, 11\n(11) - (8) = 3, left: (11 - (12 - 4)) = 3, 2\nroll back, left: (12 - 4) = 8, 2, 11\nroll back, left: 12 2 11 4\n(11) - (2) = 9, left: (11 - 2) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (11 - 2)) = 36, 12\n(36) - (12) = 24, left: ((4 * (11 - 2)) - 12) = 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "12 2 11 4\n", "output": "(2) * (11) = 22, left: (2 * 11) = 22, 12, 4\nroll back, left: 12 2 11 4\n(2) - (11) = -9, left: (2 - 11) = -9, 12, 4\n(12) + (4) = 16, left: (12 + 4) = 16, (2 - 11) = -9\nroll back, left: (2 - 11) = -9, 12, 4\nroll back, left: 12 2 11 4\n(11) - (2) = 9, left: (11 - 2) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (11 - 2)) = 36, 12\n(36) - (12) = 24, left: ((4 * (11 - 2)) - 12) = 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "12 2 11 4\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 11, 4\nroll back, left: 12 2 11 4\n(2) - (11) = -9, left: (2 - 11) = -9, 12, 4\n(-9) / (4) = -9/4, left: ((2 - 11) / 4) = -9/4, 12\nroll back, left: (2 - 11) = -9, 12, 4\nroll back, left: 12 2 11 4\n(11) - (2) = 9, left: (11 - 2) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (11 - 2)) = 36, 12\n(36) - (12) = 24, left: ((4 * (11 - 2)) - 12) = 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "12 2 11 4\n", "output": "(12) * (2) = 24, left: (12 * 2) = 24, 11, 4\nroll back, left: 12 2 11 4\n(11) - (4) = 7, left: (11 - 4) = 7, 12, 2\n(2) / (7) = 2/7, left: (2 / (11 - 4)) = 2/7, 12\nroll back, left: (11 - 4) = 7, 12, 2\nroll back, left: 12 2 11 4\n(11) - (2) = 9, left: (11 - 2) = 9, 12, 4\n(4) * (9) = 36, left: (4 * (11 - 2)) = 36, 12\n(36) - (12) = 24, left: ((4 * (11 - 2)) - 12) = 24\nreach 24! expression: ((4 * (11 - 2)) - 12)"}, {"input": "3 12 8 11\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 12, 11\n(12) - (11) = 1, left: (12 - 11) = 1, (3 * 8) = 24\n(24) * (1) = 24, left: ((3 * 8) * (12 - 11)) = 24\nreach 24! expression: ((3 * 8) * (12 - 11))"}, {"input": "3 12 8 11\n", "output": "(3) * (8) = 24, left: (3 * 8) = 24, 12, 11\n(12) - (11) = 1, left: (12 - 11) = 1, (3 * 8) = 24\n(24) / (1) = 24, left: ((3 * 8) / (12 - 11)) = 24\nreach 24! expression: ((3 * 8) / (12 - 11))"}, {"input": "3 12 8 11\n", "output": "(12) - (11) = 1, left: (12 - 11) = 1, 3, 8\n(3) * (1) = 3, left: (3 * (12 - 11)) = 3, 8\n(8) * (3) = 24, left: (8 * (3 * (12 - 11))) = 24\nreach 24! expression: (8 * (3 * (12 - 11)))"}, {"input": "3 12 8 11\n", "output": "(3) + (8) = 11, left: (3 + 8) = 11, 12, 11\nroll back, left: 3 12 8 11\n(8) - (3) = 5, left: (8 - 3) = 5, 12, 11\n(11) - (5) = 6, left: (11 - (8 - 3)) = 6, 12\nroll back, left: (8 - 3) = 5, 12, 11\nroll back, left: 3 12 8 11\n(3) * (8) = 24, left: (3 * 8) = 24, 12, 11\n(12) - (11) = 1, left: (12 - 11) = 1, (3 * 8) = 24\n(24) * (1) = 24, left: ((3 * 8) * (12 - 11)) = 24\nreach 24! expression: ((3 * 8) * (12 - 11))"}, {"input": "3 12 8 11\n", "output": "(11) - (8) = 3, left: (11 - 8) = 3, 3, 12\nroll back, left: 3 12 8 11\n(8) * (11) = 88, left: (8 * 11) = 88, 3, 12\n(12) - (88) = -76, left: (12 - (8 * 11)) = -76, 3\nroll back, left: (8 * 11) = 88, 3, 12\nroll back, left: 3 12 8 11\n(3) * (8) = 24, left: (3 * 8) = 24, 12, 11\n(12) - (11) = 1, left: (12 - 11) = 1, (3 * 8) = 24\n(24) / (1) = 24, left: ((3 * 8) / (12 - 11)) = 24\nreach 24! expression: ((3 * 8) / (12 - 11))"}, {"input": "3 12 8 11\n", "output": "(8) / (3) = 8/3, left: (8 / 3) = 8/3, 12, 11\nroll back, left: 3 12 8 11\n(3) - (8) = -5, left: (3 - 8) = -5, 12, 11\nroll back, left: 3 12 8 11\n(3) + (8) = 11, left: (3 + 8) = 11, 12, 11\nroll back, left: 3 12 8 11\n(3) * (8) = 24, left: (3 * 8) = 24, 12, 11\n(12) - (11) = 1, left: (12 - 11) = 1, (3 * 8) = 24\n(24) / (1) = 24, left: ((3 * 8) / (12 - 11)) = 24\nreach 24! expression: ((3 * 8) / (12 - 11))"}, {"input": "10 3 10 6\n", "output": "(6) / (10) = 3/5, left: (6 / 10) = 3/5, 3, 10\n(3) - (3/5) = 12/5, left: (3 - (6 / 10)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (3 - (6 / 10))) = 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "10 3 10 6\n", "output": "(6) / (10) = 3/5, left: (6 / 10) = 3/5, 10, 3\n(3) - (3/5) = 12/5, left: (3 - (6 / 10)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (3 - (6 / 10))) = 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "10 3 10 6\n", "output": "(10) * (6) = 60, left: (10 * 6) = 60, 10, 3\nroll back, left: 10 3 10 6\n(10) / (6) = 5/3, left: (10 / 6) = 5/3, 10, 3\nroll back, left: 10 3 10 6\n(10) - (6) = 4, left: (10 - 6) = 4, 10, 3\nroll back, left: 10 3 10 6\n(6) / (10) = 3/5, left: (6 / 10) = 3/5, 10, 3\n(3) - (3/5) = 12/5, left: (3 - (6 / 10)) = 12/5, 10\n(10) * (12/5) = 24, left: (10 * (3 - (6 / 10))) = 24\nreach 24! expression: (10 * (3 - (6 / 10)))"}, {"input": "11 1 6 3\n", "output": "(6) / (3) = 2, left: (6 / 3) = 2, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (6 / 3) = 2\n(2) * (12) = 24, left: ((6 / 3) * (11 + 1)) = 24\nreach 24! expression: ((6 / 3) * (11 + 1))"}, {"input": "11 1 6 3\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 6, 3\n(3) * (10) = 30, left: (3 * (11 - 1)) = 30, 6\n(30) - (6) = 24, left: ((3 * (11 - 1)) - 6) = 24\nreach 24! expression: ((3 * (11 - 1)) - 6)"}, {"input": "11 1 6 3\n", "output": "(11) + (1) = 12, left: (11 + 1) = 12, 6, 3\n(6) * (12) = 72, left: (6 * (11 + 1)) = 72, 3\n(72) / (3) = 24, left: ((6 * (11 + 1)) / 3) = 24\nreach 24! expression: ((6 * (11 + 1)) / 3)"}, {"input": "11 1 6 3\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 11, 1\n(11) / (3) = 11/3, left: (11 / (6 - 3)) = 11/3, 1\nroll back, left: (6 - 3) = 3, 11, 1\n(11) - (3) = 8, left: (11 - (6 - 3)) = 8, 1\nroll back, left: (6 - 3) = 3, 11, 1\nroll back, left: 11 1 6 3\n(6) / (3) = 2, left: (6 / 3) = 2, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (6 / 3) = 2\n(2) * (12) = 24, left: ((6 / 3) * (11 + 1)) = 24\nreach 24! expression: ((6 / 3) * (11 + 1))"}, {"input": "11 1 6 3\n", "output": "(6) - (3) = 3, left: (6 - 3) = 3, 11, 1\n(1) - (11) = -10, left: (1 - 11) = -10, (6 - 3) = 3\nroll back, left: (6 - 3) = 3, 11, 1\nroll back, left: 11 1 6 3\n(3) - (6) = -3, left: (3 - 6) = -3, 11, 1\nroll back, left: 11 1 6 3\n(6) / (3) = 2, left: (6 / 3) = 2, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (6 / 3) = 2\n(2) * (12) = 24, left: ((6 / 3) * (11 + 1)) = 24\nreach 24! expression: ((6 / 3) * (11 + 1))"}, {"input": "11 1 6 3\n", "output": "(1) - (6) = -5, left: (1 - 6) = -5, 11, 3\nroll back, left: 11 1 6 3\n(1) * (6) = 6, left: (1 * 6) = 6, 11, 3\nroll back, left: 11 1 6 3\n(11) / (3) = 11/3, left: (11 / 3) = 11/3, 1, 6\nroll back, left: 11 1 6 3\n(6) / (3) = 2, left: (6 / 3) = 2, 11, 1\n(11) + (1) = 12, left: (11 + 1) = 12, (6 / 3) = 2\n(2) * (12) = 24, left: ((6 / 3) * (11 + 1)) = 24\nreach 24! expression: ((6 / 3) * (11 + 1))"}, {"input": "11 1 6 3\n", "output": "(1) / (11) = 1/11, left: (1 / 11) = 1/11, 6, 3\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, (1 / 11) = 1/11\nroll back, left: (1 / 11) = 1/11, 6, 3\nroll back, left: 11 1 6 3\n(11) / (1) = 11, left: (11 / 1) = 11, 6, 3\nroll back, left: 11 1 6 3\n(11) - (1) = 10, left: (11 - 1) = 10, 6, 3\n(3) * (10) = 30, left: (3 * (11 - 1)) = 30, 6\n(30) - (6) = 24, left: ((3 * (11 - 1)) - 6) = 24\nreach 24! expression: ((3 * (11 - 1)) - 6)"}, {"input": "11 1 6 3\n", "output": "(11) - (6) = 5, left: (11 - 6) = 5, 1, 3\nroll back, left: 11 1 6 3\n(11) + (6) = 17, left: (11 + 6) = 17, 1, 3\n(1) - (17) = -16, left: (1 - (11 + 6)) = -16, 3\nroll back, left: (11 + 6) = 17, 1, 3\nroll back, left: 11 1 6 3\n(11) + (1) = 12, left: (11 + 1) = 12, 6, 3\n(6) * (12) = 72, left: (6 * (11 + 1)) = 72, 3\n(72) / (3) = 24, left: ((6 * (11 + 1)) / 3) = 24\nreach 24! expression: ((6 * (11 + 1)) / 3)"}, {"input": "1 4 3 8\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 4, 8\n(4) * (4) = 16, left: (4 * (1 + 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (1 + 3))) = 24\nreach 24! expression: (8 + (4 * (1 + 3)))"}, {"input": "1 4 3 8\n", "output": "(4) + (8) = 12, left: (4 + 8) = 12, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (4 + 8) = 12\n(12) * (2) = 24, left: ((4 + 8) * (3 - 1)) = 24\nreach 24! expression: ((4 + 8) * (3 - 1))"}, {"input": "1 4 3 8\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 1, 8\n(4/3) - (1) = 1/3, left: ((4 / 3) - 1) = 1/3, 8\n(8) / (1/3) = 24, left: (8 / ((4 / 3) - 1)) = 24\nreach 24! expression: (8 / ((4 / 3) - 1))"}, {"input": "1 4 3 8\n", "output": "(1) + (8) = 9, left: (1 + 8) = 9, 4, 3\n(9) - (3) = 6, left: ((1 + 8) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 + 8) - 3)) = 24\nreach 24! expression: (4 * ((1 + 8) - 3))"}, {"input": "1 4 3 8\n", "output": "(4) * (8) = 32, left: (4 * 8) = 32, 1, 3\n(1) - (3) = -2, left: (1 - 3) = -2, (4 * 8) = 32\n(32) - (-2) = 34, left: ((4 * 8) - (1 - 3)) = 34\nroll back, left: (1 - 3) = -2, (4 * 8) = 32\nroll back, left: (4 * 8) = 32, 1, 3\nroll back, left: 1 4 3 8\n(4) + (8) = 12, left: (4 + 8) = 12, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (4 + 8) = 12\n(12) * (2) = 24, left: ((4 + 8) * (3 - 1)) = 24\nreach 24! expression: ((4 + 8) * (3 - 1))"}, {"input": "1 4 3 8\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 4, 8\n(4) + (4) = 8, left: (4 + (1 + 3)) = 8, 8\n(8) + (8) = 16, left: (8 + (4 + (1 + 3))) = 16\nroll back, left: (4 + (1 + 3)) = 8, 8\nroll back, left: (1 + 3) = 4, 4, 8\n(4) / (4) = 1, left: ((1 + 3) / 4) = 1, 8\nroll back, left: (1 + 3) = 4, 4, 8\n(4) * (4) = 16, left: (4 * (1 + 3)) = 16, 8\n(8) + (16) = 24, left: (8 + (4 * (1 + 3))) = 24\nreach 24! expression: (8 + (4 * (1 + 3)))"}, {"input": "1 4 3 8\n", "output": "(8) / (1) = 8, left: (8 / 1) = 8, 4, 3\n(3) / (8) = 3/8, left: (3 / (8 / 1)) = 3/8, 4\nroll back, left: (8 / 1) = 8, 4, 3\n(4) / (8) = 1/2, left: (4 / (8 / 1)) = 1/2, 3\nroll back, left: (8 / 1) = 8, 4, 3\nroll back, left: 1 4 3 8\n(1) + (8) = 9, left: (1 + 8) = 9, 4, 3\n(9) - (3) = 6, left: ((1 + 8) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((1 + 8) - 3)) = 24\nreach 24! expression: (4 * ((1 + 8) - 3))"}, {"input": "1 4 3 8\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 1, 3\n(4) - (1) = 3, left: ((8 - 4) - 1) = 3, 3\nroll back, left: (8 - 4) = 4, 1, 3\nroll back, left: 1 4 3 8\n(4) / (8) = 1/2, left: (4 / 8) = 1/2, 1, 3\nroll back, left: 1 4 3 8\n(4) + (8) = 12, left: (4 + 8) = 12, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (4 + 8) = 12\n(12) * (2) = 24, left: ((4 + 8) * (3 - 1)) = 24\nreach 24! expression: ((4 + 8) * (3 - 1))"}, {"input": "2 13 6 8\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (6 - 8) = -2\n(-2) + (26) = 24, left: ((6 - 8) + (2 * 13)) = 24\nreach 24! expression: ((6 - 8) + (2 * 13))"}, {"input": "2 13 6 8\n", "output": "(13) + (8) = 21, left: (13 + 8) = 21, 2, 6\n(6) / (2) = 3, left: (6 / 2) = 3, (13 + 8) = 21\n(21) + (3) = 24, left: ((13 + 8) + (6 / 2)) = 24\nreach 24! expression: ((13 + 8) + (6 / 2))"}, {"input": "2 13 6 8\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (8 - 6) = 2\n(26) - (2) = 24, left: ((2 * 13) - (8 - 6)) = 24\nreach 24! expression: ((2 * 13) - (8 - 6))"}, {"input": "2 13 6 8\n", "output": "(2) * (13) = 26, left: (2 * 13) = 26, 6, 8\n(26) - (8) = 18, left: ((2 * 13) - 8) = 18, 6\n(6) + (18) = 24, left: (6 + ((2 * 13) - 8)) = 24\nreach 24! expression: (6 + ((2 * 13) - 8))"}, {"input": "2 13 6 8\n", "output": "(8) - (6) = 2, left: (8 - 6) = 2, 2, 13\n(13) * (2) = 26, left: (13 * (8 - 6)) = 26, 2\n(26) - (2) = 24, left: ((13 * (8 - 6)) - 2) = 24\nreach 24! expression: ((13 * (8 - 6)) - 2)"}, {"input": "2 13 6 8\n", "output": "(6) / (13) = 6/13, left: (6 / 13) = 6/13, 2, 8\n(6/13) / (8) = 3/52, left: ((6 / 13) / 8) = 3/52, 2\nroll back, left: (6 / 13) = 6/13, 2, 8\nroll back, left: 2 13 6 8\n(13) - (6) = 7, left: (13 - 6) = 7, 2, 8\nroll back, left: 2 13 6 8\n(13) + (8) = 21, left: (13 + 8) = 21, 2, 6\n(6) / (2) = 3, left: (6 / 2) = 3, (13 + 8) = 21\n(21) + (3) = 24, left: ((13 + 8) + (6 / 2)) = 24\nreach 24! expression: ((13 + 8) + (6 / 2))"}, {"input": "2 13 6 8\n", "output": "(2) + (8) = 10, left: (2 + 8) = 10, 13, 6\n(6) - (13) = -7, left: (6 - 13) = -7, (2 + 8) = 10\nroll back, left: (2 + 8) = 10, 13, 6\nroll back, left: 2 13 6 8\n(6) / (8) = 3/4, left: (6 / 8) = 3/4, 2, 13\nroll back, left: 2 13 6 8\n(8) - (6) = 2, left: (8 - 6) = 2, 2, 13\n(13) * (2) = 26, left: (13 * (8 - 6)) = 26, 2\n(26) - (2) = 24, left: ((13 * (8 - 6)) - 2) = 24\nreach 24! expression: ((13 * (8 - 6)) - 2)"}, {"input": "2 13 6 8\n", "output": "(6) * (8) = 48, left: (6 * 8) = 48, 2, 13\n(13) * (48) = 624, left: (13 * (6 * 8)) = 624, 2\nroll back, left: (6 * 8) = 48, 2, 13\nroll back, left: 2 13 6 8\n(6) - (8) = -2, left: (6 - 8) = -2, 2, 13\n(-2) - (2) = -4, left: ((6 - 8) - 2) = -4, 13\nroll back, left: (6 - 8) = -2, 2, 13\n(2) * (13) = 26, left: (2 * 13) = 26, (6 - 8) = -2\n(-2) + (26) = 24, left: ((6 - 8) + (2 * 13)) = 24\nreach 24! expression: ((6 - 8) + (2 * 13))"}, {"input": "13 10 5 7\n", "output": "(5) - (13) = -8, left: (5 - 13) = -8, 10, 7\n(7) - (10) = -3, left: (7 - 10) = -3, (5 - 13) = -8\n(-8) * (-3) = 24, left: ((5 - 13) * (7 - 10)) = 24\nreach 24! expression: ((5 - 13) * (7 - 10))"}, {"input": "13 10 5 7\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 13, 5\n(5) - (13) = -8, left: (5 - 13) = -8, (7 - 10) = -3\n(-3) * (-8) = 24, left: ((7 - 10) * (5 - 13)) = 24\nreach 24! expression: ((7 - 10) * (5 - 13))"}, {"input": "13 10 5 7\n", "output": "(7) - (5) = 2, left: (7 - 5) = 2, 13, 10\nroll back, left: 13 10 5 7\n(13) + (7) = 20, left: (13 + 7) = 20, 10, 5\nroll back, left: 13 10 5 7\n(13) * (7) = 91, left: (13 * 7) = 91, 10, 5\nroll back, left: 13 10 5 7\n(7) - (10) = -3, left: (7 - 10) = -3, 13, 5\n(5) - (13) = -8, left: (5 - 13) = -8, (7 - 10) = -3\n(-3) * (-8) = 24, left: ((7 - 10) * (5 - 13)) = 24\nreach 24! expression: ((7 - 10) * (5 - 13))"}, {"input": "2 5 9 12\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 2, 12\n(2) - (14) = -12, left: (2 - (5 + 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 - (5 + 9))) = 24\nreach 24! expression: (12 - (2 - (5 + 9)))"}, {"input": "2 5 9 12\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 5, 9\n(9) + (10) = 19, left: (9 + (12 - 2)) = 19, 5\n(5) + (19) = 24, left: (5 + (9 + (12 - 2))) = 24\nreach 24! expression: (5 + (9 + (12 - 2)))"}, {"input": "2 5 9 12\n", "output": "(2) / (12) = 1/6, left: (2 / 12) = 1/6, 5, 9\n(9) - (5) = 4, left: (9 - 5) = 4, (2 / 12) = 1/6\n(4) / (1/6) = 24, left: ((9 - 5) / (2 / 12)) = 24\nreach 24! expression: ((9 - 5) / (2 / 12))"}, {"input": "2 5 9 12\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 2, 12\n(2) / (4) = 1/2, left: (2 / (9 - 5)) = 1/2, 12\n(12) / (1/2) = 24, left: (12 / (2 / (9 - 5))) = 24\nreach 24! expression: (12 / (2 / (9 - 5)))"}, {"input": "2 5 9 12\n", "output": "(9) + (12) = 21, left: (9 + 12) = 21, 2, 5\n(21) - (2) = 19, left: ((9 + 12) - 2) = 19, 5\n(5) + (19) = 24, left: (5 + ((9 + 12) - 2)) = 24\nreach 24! expression: (5 + ((9 + 12) - 2))"}, {"input": "2 5 9 12\n", "output": "(12) - (2) = 10, left: (12 - 2) = 10, 5, 9\n(9) - (10) = -1, left: (9 - (12 - 2)) = -1, 5\n(5) * (-1) = -5, left: (5 * (9 - (12 - 2))) = -5\nroll back, left: (9 - (12 - 2)) = -1, 5\n(-1) / (5) = -1/5, left: ((9 - (12 - 2)) / 5) = -1/5\nroll back, left: (9 - (12 - 2)) = -1, 5\nroll back, left: (12 - 2) = 10, 5, 9\n(9) + (10) = 19, left: (9 + (12 - 2)) = 19, 5\n(5) + (19) = 24, left: (5 + (9 + (12 - 2))) = 24\nreach 24! expression: (5 + (9 + (12 - 2)))"}, {"input": "2 5 9 12\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 2, 12\n(2) - (14) = -12, left: (2 - (5 + 9)) = -12, 12\n(-12) / (12) = -1, left: ((2 - (5 + 9)) / 12) = -1\nroll back, left: (2 - (5 + 9)) = -12, 12\n(12) / (-12) = -1, left: (12 / (2 - (5 + 9))) = -1\nroll back, left: (2 - (5 + 9)) = -12, 12\n(12) * (-12) = -144, left: (12 * (2 - (5 + 9))) = -144\nroll back, left: (2 - (5 + 9)) = -12, 12\n(12) - (-12) = 24, left: (12 - (2 - (5 + 9))) = 24\nreach 24! expression: (12 - (2 - (5 + 9)))"}, {"input": "2 5 9 12\n", "output": "(9) / (12) = 3/4, left: (9 / 12) = 3/4, 2, 5\nroll back, left: 2 5 9 12\n(12) - (9) = 3, left: (12 - 9) = 3, 2, 5\n(5) / (2) = 5/2, left: (5 / 2) = 5/2, (12 - 9) = 3\nroll back, left: (12 - 9) = 3, 2, 5\nroll back, left: 2 5 9 12\n(9) + (12) = 21, left: (9 + 12) = 21, 2, 5\n(21) - (2) = 19, left: ((9 + 12) - 2) = 19, 5\n(5) + (19) = 24, left: (5 + ((9 + 12) - 2)) = 24\nreach 24! expression: (5 + ((9 + 12) - 2))"}, {"input": "3 6 6 7\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 3, 6\n(3) - (-1) = 4, left: (3 - (6 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (6 - 7))) = 24\nreach 24! expression: (6 * (3 - (6 - 7)))"}, {"input": "3 6 6 7\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 6, 7\n(7) + (-3) = 4, left: (7 + (3 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (3 - 6))) = 24\nreach 24! expression: (6 * (7 + (3 - 6)))"}, {"input": "3 6 6 7\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 3, 6\n(3) + (1) = 4, left: (3 + (7 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (7 - 6))) = 24\nreach 24! expression: (6 * (3 + (7 - 6)))"}, {"input": "3 6 6 7\n", "output": "(3) * (6) = 18, left: (3 * 6) = 18, 6, 7\n(6) * (7) = 42, left: (6 * 7) = 42, (3 * 6) = 18\n(42) - (18) = 24, left: ((6 * 7) - (3 * 6)) = 24\nreach 24! expression: ((6 * 7) - (3 * 6))"}, {"input": "3 6 6 7\n", "output": "(3) + (7) = 10, left: (3 + 7) = 10, 6, 6\n(10) - (6) = 4, left: ((3 + 7) - 6) = 4, 6\n(6) * (4) = 24, left: (6 * ((3 + 7) - 6)) = 24\nreach 24! expression: (6 * ((3 + 7) - 6))"}, {"input": "3 6 6 7\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 3, 6\n(-1) - (3) = -4, left: ((6 - 7) - 3) = -4, 6\nroll back, left: (6 - 7) = -1, 3, 6\n(3) / (-1) = -3, left: (3 / (6 - 7)) = -3, 6\n(6) + (-3) = 3, left: (6 + (3 / (6 - 7))) = 3\nroll back, left: (3 / (6 - 7)) = -3, 6\nroll back, left: (6 - 7) = -1, 3, 6\n(3) - (-1) = 4, left: (3 - (6 - 7)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 - (6 - 7))) = 24\nreach 24! expression: (6 * (3 - (6 - 7)))"}, {"input": "3 6 6 7\n", "output": "(7) - (6) = 1, left: (7 - 6) = 1, 3, 6\n(6) * (1) = 6, left: (6 * (7 - 6)) = 6, 3\n(3) - (6) = -3, left: (3 - (6 * (7 - 6))) = -3\nroll back, left: (6 * (7 - 6)) = 6, 3\nroll back, left: (7 - 6) = 1, 3, 6\n(3) * (1) = 3, left: (3 * (7 - 6)) = 3, 6\nroll back, left: (7 - 6) = 1, 3, 6\n(3) + (1) = 4, left: (3 + (7 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (7 - 6))) = 24\nreach 24! expression: (6 * (3 + (7 - 6)))"}, {"input": "3 6 6 7\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 6, 7\n(7) + (-3) = 4, left: (7 + (3 - 6)) = 4, 6\n(6) + (4) = 10, left: (6 + (7 + (3 - 6))) = 10\nroll back, left: (7 + (3 - 6)) = 4, 6\n(6) - (4) = 2, left: (6 - (7 + (3 - 6))) = 2\nroll back, left: (7 + (3 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (3 - 6))) = 24\nreach 24! expression: (6 * (7 + (3 - 6)))"}, {"input": "3 6 6 7\n", "output": "(3) / (7) = 3/7, left: (3 / 7) = 3/7, 6, 6\n(6) - (6) = 0, left: (6 - 6) = 0, (3 / 7) = 3/7\nroll back, left: (3 / 7) = 3/7, 6, 6\nroll back, left: 3 6 6 7\n(3) + (7) = 10, left: (3 + 7) = 10, 6, 6\n(6) / (10) = 3/5, left: (6 / (3 + 7)) = 3/5, 6\nroll back, left: (3 + 7) = 10, 6, 6\n(10) - (6) = 4, left: ((3 + 7) - 6) = 4, 6\n(6) * (4) = 24, left: (6 * ((3 + 7) - 6)) = 24\nreach 24! expression: (6 * ((3 + 7) - 6))"}, {"input": "3 6 6 7\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 6, 7\n(7) + (-3) = 4, left: (7 + (3 - 6)) = 4, 6\n(6) + (4) = 10, left: (6 + (7 + (3 - 6))) = 10\nroll back, left: (7 + (3 - 6)) = 4, 6\n(6) - (4) = 2, left: (6 - (7 + (3 - 6))) = 2\nroll back, left: (7 + (3 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (3 - 6))) = 24\nreach 24! expression: (6 * (7 + (3 - 6)))"}, {"input": "3 6 6 7\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 6, 7\n(7) + (-3) = 4, left: (7 + (3 - 6)) = 4, 6\n(6) + (4) = 10, left: (6 + (7 + (3 - 6))) = 10\nroll back, left: (7 + (3 - 6)) = 4, 6\n(6) - (4) = 2, left: (6 - (7 + (3 - 6))) = 2\nroll back, left: (7 + (3 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (3 - 6))) = 24\nreach 24! expression: (6 * (7 + (3 - 6)))"}, {"input": "3 6 6 7\n", "output": "(3) - (6) = -3, left: (3 - 6) = -3, 6, 7\n(7) + (-3) = 4, left: (7 + (3 - 6)) = 4, 6\n(6) + (4) = 10, left: (6 + (7 + (3 - 6))) = 10\nroll back, left: (7 + (3 - 6)) = 4, 6\n(6) - (4) = 2, left: (6 - (7 + (3 - 6))) = 2\nroll back, left: (7 + (3 - 6)) = 4, 6\n(6) * (4) = 24, left: (6 * (7 + (3 - 6))) = 24\nreach 24! expression: (6 * (7 + (3 - 6)))"}, {"input": "3 9 3 6\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 9, 6\n(9) + (9) = 18, left: (9 + (3 * 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 + (3 * 3))) = 24\nreach 24! expression: (6 + (9 + (3 * 3)))"}, {"input": "3 9 3 6\n", "output": "(9) + (3) = 12, left: (9 + 3) = 12, 3, 6\n(12) / (3) = 4, left: ((9 + 3) / 3) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 + 3) / 3)) = 24\nreach 24! expression: (6 * ((9 + 3) / 3))"}, {"input": "3 9 3 6\n", "output": "(9) + (6) = 15, left: (9 + 6) = 15, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (9 + 6) = 15\n(15) + (9) = 24, left: ((9 + 6) + (3 * 3)) = 24\nreach 24! expression: ((9 + 6) + (3 * 3))"}, {"input": "3 9 3 6\n", "output": "(3) + (9) = 12, left: (3 + 9) = 12, 3, 6\n(3) / (12) = 1/4, left: (3 / (3 + 9)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (3 / (3 + 9))) = 24\nreach 24! expression: (6 / (3 / (3 + 9)))"}, {"input": "3 9 3 6\n", "output": "(6) / (9) = 2/3, left: (6 / 9) = 2/3, 3, 3\n(3) + (3) = 6, left: (3 + 3) = 6, (6 / 9) = 2/3\nroll back, left: (6 / 9) = 2/3, 3, 3\n(3) - (2/3) = 7/3, left: (3 - (6 / 9)) = 7/3, 3\nroll back, left: (6 / 9) = 2/3, 3, 3\nroll back, left: 3 9 3 6\n(9) + (6) = 15, left: (9 + 6) = 15, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (9 + 6) = 15\n(15) + (9) = 24, left: ((9 + 6) + (3 * 3)) = 24\nreach 24! expression: ((9 + 6) + (3 * 3))"}, {"input": "3 9 3 6\n", "output": "(9) + (3) = 12, left: (9 + 3) = 12, 3, 6\n(3) + (12) = 15, left: (3 + (9 + 3)) = 15, 6\n(15) - (6) = 9, left: ((3 + (9 + 3)) - 6) = 9\nroll back, left: (3 + (9 + 3)) = 15, 6\n(6) + (15) = 21, left: (6 + (3 + (9 + 3))) = 21\nroll back, left: (3 + (9 + 3)) = 15, 6\nroll back, left: (9 + 3) = 12, 3, 6\n(12) / (3) = 4, left: ((9 + 3) / 3) = 4, 6\n(6) * (4) = 24, left: (6 * ((9 + 3) / 3)) = 24\nreach 24! expression: (6 * ((9 + 3) / 3))"}, {"input": "3 9 3 6\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 3, 6\n(6) - (3) = 3, left: (6 - 3) = 3, (3 / 9) = 1/3\nroll back, left: (3 / 9) = 1/3, 3, 6\n(3) - (1/3) = 8/3, left: (3 - (3 / 9)) = 8/3, 6\nroll back, left: (3 / 9) = 1/3, 3, 6\nroll back, left: 3 9 3 6\n(3) + (9) = 12, left: (3 + 9) = 12, 3, 6\n(3) / (12) = 1/4, left: (3 / (3 + 9)) = 1/4, 6\n(6) / (1/4) = 24, left: (6 / (3 / (3 + 9))) = 24\nreach 24! expression: (6 / (3 / (3 + 9)))"}, {"input": "3 9 3 6\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 9, 6\n(1) / (9) = 1/9, left: ((3 / 3) / 9) = 1/9, 6\n(1/9) / (6) = 1/54, left: (((3 / 3) / 9) / 6) = 1/54\nroll back, left: ((3 / 3) / 9) = 1/9, 6\nroll back, left: (3 / 3) = 1, 9, 6\nroll back, left: 3 9 3 6\n(3) * (3) = 9, left: (3 * 3) = 9, 9, 6\n(9) + (9) = 18, left: (9 + (3 * 3)) = 18, 6\n(6) + (18) = 24, left: (6 + (9 + (3 * 3))) = 24\nreach 24! expression: (6 + (9 + (3 * 3)))"}, {"input": "3 9 3 6\n", "output": "(9) * (6) = 54, left: (9 * 6) = 54, 3, 3\n(54) - (3) = 51, left: ((9 * 6) - 3) = 51, 3\nroll back, left: (9 * 6) = 54, 3, 3\nroll back, left: 3 9 3 6\n(9) / (6) = 3/2, left: (9 / 6) = 3/2, 3, 3\nroll back, left: 3 9 3 6\n(9) + (6) = 15, left: (9 + 6) = 15, 3, 3\n(3) * (3) = 9, left: (3 * 3) = 9, (9 + 6) = 15\n(15) + (9) = 24, left: ((9 + 6) + (3 * 3)) = 24\nreach 24! expression: ((9 + 6) + (3 * 3))"}, {"input": "5 5 1 9\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 5, 9\n(9) - (5) = 4, left: (9 - 5) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (9 - 5)) = 24\nreach 24! expression: ((5 + 1) * (9 - 5))"}, {"input": "5 5 1 9\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (9 - 5) = 4\n(4) * (6) = 24, left: ((9 - 5) * (5 + 1)) = 24\nreach 24! expression: ((9 - 5) * (5 + 1))"}, {"input": "5 5 1 9\n", "output": "(5) + (1) = 6, left: (5 + 1) = 6, 5, 9\n(5) * (9) = 45, left: (5 * 9) = 45, (5 + 1) = 6\nroll back, left: (5 + 1) = 6, 5, 9\n(5) / (9) = 5/9, left: (5 / 9) = 5/9, (5 + 1) = 6\nroll back, left: (5 + 1) = 6, 5, 9\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, (5 + 1) = 6\nroll back, left: (5 + 1) = 6, 5, 9\n(9) - (5) = 4, left: (9 - 5) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (9 - 5)) = 24\nreach 24! expression: ((5 + 1) * (9 - 5))"}, {"input": "5 5 1 9\n", "output": "(5) - (9) = -4, left: (5 - 9) = -4, 5, 1\nroll back, left: 5 5 1 9\n(5) * (9) = 45, left: (5 * 9) = 45, 5, 1\n(5) + (45) = 50, left: (5 + (5 * 9)) = 50, 1\nroll back, left: (5 * 9) = 45, 5, 1\nroll back, left: 5 5 1 9\n(9) - (5) = 4, left: (9 - 5) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (9 - 5) = 4\n(4) * (6) = 24, left: ((9 - 5) * (5 + 1)) = 24\nreach 24! expression: ((9 - 5) * (5 + 1))"}, {"input": "5 5 1 9\n", "output": "(5) - (1) = 4, left: (5 - 1) = 4, 5, 9\n(5) / (4) = 5/4, left: (5 / (5 - 1)) = 5/4, 9\nroll back, left: (5 - 1) = 4, 5, 9\nroll back, left: 5 5 1 9\n(1) - (5) = -4, left: (1 - 5) = -4, 5, 9\nroll back, left: 5 5 1 9\n(5) + (1) = 6, left: (5 + 1) = 6, 5, 9\n(9) - (5) = 4, left: (9 - 5) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (9 - 5)) = 24\nreach 24! expression: ((5 + 1) * (9 - 5))"}, {"input": "5 5 1 9\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 5, 1\n(1) + (14) = 15, left: (1 + (5 + 9)) = 15, 5\nroll back, left: (5 + 9) = 14, 5, 1\nroll back, left: 5 5 1 9\n(5) / (9) = 5/9, left: (5 / 9) = 5/9, 5, 1\nroll back, left: 5 5 1 9\n(9) - (5) = 4, left: (9 - 5) = 4, 5, 1\n(5) + (1) = 6, left: (5 + 1) = 6, (9 - 5) = 4\n(4) * (6) = 24, left: ((9 - 5) * (5 + 1)) = 24\nreach 24! expression: ((9 - 5) * (5 + 1))"}, {"input": "5 5 1 9\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 1, 9\nroll back, left: 5 5 1 9\n(5) - (5) = 0, left: (5 - 5) = 0, 1, 9\nroll back, left: 5 5 1 9\n(1) - (9) = -8, left: (1 - 9) = -8, 5, 5\nroll back, left: 5 5 1 9\n(5) + (1) = 6, left: (5 + 1) = 6, 5, 9\n(9) - (5) = 4, left: (9 - 5) = 4, (5 + 1) = 6\n(6) * (4) = 24, left: ((5 + 1) * (9 - 5)) = 24\nreach 24! expression: ((5 + 1) * (9 - 5))"}, {"input": "4 11 3 4\n", "output": "(11) - (3) = 8, left: (11 - 3) = 8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (11 - 3) = 8\n(8) + (16) = 24, left: ((11 - 3) + (4 * 4)) = 24\nreach 24! expression: ((11 - 3) + (4 * 4))"}, {"input": "4 11 3 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 11, 3\n(11) + (16) = 27, left: (11 + (4 * 4)) = 27, 3\n(27) - (3) = 24, left: ((11 + (4 * 4)) - 3) = 24\nreach 24! expression: ((11 + (4 * 4)) - 3)"}, {"input": "4 11 3 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 11, 3\n(16) - (3) = 13, left: ((4 * 4) - 3) = 13, 11\n(11) + (13) = 24, left: (11 + ((4 * 4) - 3)) = 24\nreach 24! expression: (11 + ((4 * 4) - 3))"}, {"input": "4 11 3 4\n", "output": "(4) * (4) = 16, left: (4 * 4) = 16, 11, 3\n(3) - (16) = -13, left: (3 - (4 * 4)) = -13, 11\n(11) - (-13) = 24, left: (11 - (3 - (4 * 4))) = 24\nreach 24! expression: (11 - (3 - (4 * 4)))"}, {"input": "4 11 3 4\n", "output": "(3) - (11) = -8, left: (3 - 11) = -8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (3 - 11) = -8\n(16) - (-8) = 24, left: ((4 * 4) - (3 - 11)) = 24\nreach 24! expression: ((4 * 4) - (3 - 11))"}, {"input": "4 11 3 4\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 4, 11\nroll back, left: 4 11 3 4\n(4) - (4) = 0, left: (4 - 4) = 0, 11, 3\n(3) * (0) = 0, left: (3 * (4 - 4)) = 0, 11\nroll back, left: (4 - 4) = 0, 11, 3\nroll back, left: 4 11 3 4\n(4) * (4) = 16, left: (4 * 4) = 16, 11, 3\n(16) - (3) = 13, left: ((4 * 4) - 3) = 13, 11\n(11) + (13) = 24, left: (11 + ((4 * 4) - 3)) = 24\nreach 24! expression: (11 + ((4 * 4) - 3))"}, {"input": "4 11 3 4\n", "output": "(4) / (4) = 1, left: (4 / 4) = 1, 11, 3\nroll back, left: 4 11 3 4\n(4) - (4) = 0, left: (4 - 4) = 0, 11, 3\n(0) / (11) = 0, left: ((4 - 4) / 11) = 0, 3\nroll back, left: (4 - 4) = 0, 11, 3\nroll back, left: 4 11 3 4\n(4) * (4) = 16, left: (4 * 4) = 16, 11, 3\n(3) - (16) = -13, left: (3 - (4 * 4)) = -13, 11\n(11) - (-13) = 24, left: (11 - (3 - (4 * 4))) = 24\nreach 24! expression: (11 - (3 - (4 * 4)))"}, {"input": "4 11 3 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 4, 11\nroll back, left: 4 11 3 4\n(4) / (11) = 4/11, left: (4 / 11) = 4/11, 3, 4\nroll back, left: 4 11 3 4\n(11) + (3) = 14, left: (11 + 3) = 14, 4, 4\nroll back, left: 4 11 3 4\n(3) - (11) = -8, left: (3 - 11) = -8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (3 - 11) = -8\n(16) - (-8) = 24, left: ((4 * 4) - (3 - 11)) = 24\nreach 24! expression: ((4 * 4) - (3 - 11))"}, {"input": "4 11 3 4\n", "output": "(4) - (3) = 1, left: (4 - 3) = 1, 11, 4\n(11) - (1) = 10, left: (11 - (4 - 3)) = 10, 4\nroll back, left: (4 - 3) = 1, 11, 4\nroll back, left: 4 11 3 4\n(11) * (3) = 33, left: (11 * 3) = 33, 4, 4\nroll back, left: 4 11 3 4\n(11) - (3) = 8, left: (11 - 3) = 8, 4, 4\n(4) * (4) = 16, left: (4 * 4) = 16, (11 - 3) = 8\n(8) + (16) = 24, left: ((11 - 3) + (4 * 4)) = 24\nreach 24! expression: ((11 - 3) + (4 * 4))"}, {"input": "4 11 3 4\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 4, 11\nroll back, left: 4 11 3 4\n(11) - (4) = 7, left: (11 - 4) = 7, 3, 4\nroll back, left: 4 11 3 4\n(4) - (11) = -7, left: (4 - 11) = -7, 3, 4\nroll back, left: 4 11 3 4\n(4) * (4) = 16, left: (4 * 4) = 16, 11, 3\n(11) + (16) = 27, left: (11 + (4 * 4)) = 27, 3\n(27) - (3) = 24, left: ((11 + (4 * 4)) - 3) = 24\nreach 24! expression: ((11 + (4 * 4)) - 3)"}, {"input": "8 8 8 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (8 / 4)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (8 / 4))) = 24\nreach 24! expression: (8 + (8 * (8 / 4)))"}, {"input": "8 8 8 4\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (8 - 4)) = 32, 8\n(32) - (8) = 24, left: ((8 * (8 - 4)) - 8) = 24\nreach 24! expression: ((8 * (8 - 4)) - 8)"}, {"input": "8 8 8 4\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (8 / 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (8 / 8))) = 24\nreach 24! expression: (8 * (4 - (8 / 8)))"}, {"input": "8 8 8 4\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 8, 8\n(4) - (8) = -4, left: ((8 - 4) - 8) = -4, 8\nroll back, left: (8 - 4) = 4, 8, 8\n(8) - (4) = 4, left: (8 - (8 - 4)) = 4, 8\n(8) + (4) = 12, left: (8 + (8 - (8 - 4))) = 12\nroll back, left: (8 - (8 - 4)) = 4, 8\nroll back, left: (8 - 4) = 4, 8, 8\n(8) * (4) = 32, left: (8 * (8 - 4)) = 32, 8\n(32) - (8) = 24, left: ((8 * (8 - 4)) - 8) = 24\nreach 24! expression: ((8 * (8 - 4)) - 8)"}, {"input": "8 8 8 4\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 8, 4\n(8) / (4) = 2, left: (8 / 4) = 2, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 8, 4\n(1) - (8) = -7, left: ((8 / 8) - 8) = -7, 4\nroll back, left: (8 / 8) = 1, 8, 4\n(8) / (1) = 8, left: (8 / (8 / 8)) = 8, 4\nroll back, left: (8 / 8) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (8 / 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (8 / 8))) = 24\nreach 24! expression: (8 * (4 - (8 / 8)))"}, {"input": "8 8 8 4\n", "output": "(8) / (4) = 2, left: (8 / 4) = 2, 8, 8\n(2) - (8) = -6, left: ((8 / 4) - 8) = -6, 8\n(8) + (-6) = 2, left: (8 + ((8 / 4) - 8)) = 2\nroll back, left: ((8 / 4) - 8) = -6, 8\n(8) * (-6) = -48, left: (8 * ((8 / 4) - 8)) = -48\nroll back, left: ((8 / 4) - 8) = -6, 8\nroll back, left: (8 / 4) = 2, 8, 8\n(8) * (2) = 16, left: (8 * (8 / 4)) = 16, 8\n(8) + (16) = 24, left: (8 + (8 * (8 / 4))) = 24\nreach 24! expression: (8 + (8 * (8 / 4)))"}, {"input": "8 8 8 4\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 8, 4\n(0) - (4) = -4, left: ((8 - 8) - 4) = -4, 8\nroll back, left: (8 - 8) = 0, 8, 4\n(4) - (0) = 4, left: (4 - (8 - 8)) = 4, 8\nroll back, left: (8 - 8) = 0, 8, 4\nroll back, left: 8 8 8 4\n(8) / (8) = 1, left: (8 / 8) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (8 / 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (8 / 8))) = 24\nreach 24! expression: (8 * (4 - (8 / 8)))"}, {"input": "8 8 8 4\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 8, 4\n(8) * (4) = 32, left: (8 * 4) = 32, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 8, 4\n(4) - (8) = -4, left: (4 - 8) = -4, (8 / 8) = 1\nroll back, left: (8 / 8) = 1, 8, 4\n(1) - (4) = -3, left: ((8 / 8) - 4) = -3, 8\nroll back, left: (8 / 8) = 1, 8, 4\n(4) - (1) = 3, left: (4 - (8 / 8)) = 3, 8\n(8) * (3) = 24, left: (8 * (4 - (8 / 8))) = 24\nreach 24! expression: (8 * (4 - (8 / 8)))"}, {"input": "8 3 9 10\n", "output": "(8) + (10) = 18, left: (8 + 10) = 18, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (8 + 10) = 18\n(18) + (6) = 24, left: ((8 + 10) + (9 - 3)) = 24\nreach 24! expression: ((8 + 10) + (9 - 3))"}, {"input": "8 3 9 10\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (10 - 8) = 2\n(2) * (12) = 24, left: ((10 - 8) * (3 + 9)) = 24\nreach 24! expression: ((10 - 8) * (3 + 9))"}, {"input": "8 3 9 10\n", "output": "(8) * (3) = 24, left: (8 * 3) = 24, 9, 10\n(10) - (9) = 1, left: (10 - 9) = 1, (8 * 3) = 24\n(24) / (1) = 24, left: ((8 * 3) / (10 - 9)) = 24\nreach 24! expression: ((8 * 3) / (10 - 9))"}, {"input": "8 3 9 10\n", "output": "(9) + (10) = 19, left: (9 + 10) = 19, 8, 3\n(8) + (19) = 27, left: (8 + (9 + 10)) = 27, 3\n(27) - (3) = 24, left: ((8 + (9 + 10)) - 3) = 24\nreach 24! expression: ((8 + (9 + 10)) - 3)"}, {"input": "8 3 9 10\n", "output": "(8) * (10) = 80, left: (8 * 10) = 80, 3, 9\nroll back, left: 8 3 9 10\n(10) / (8) = 5/4, left: (10 / 8) = 5/4, 3, 9\nroll back, left: 8 3 9 10\n(8) + (10) = 18, left: (8 + 10) = 18, 3, 9\n(3) * (9) = 27, left: (3 * 9) = 27, (8 + 10) = 18\nroll back, left: (8 + 10) = 18, 3, 9\n(9) - (3) = 6, left: (9 - 3) = 6, (8 + 10) = 18\n(18) + (6) = 24, left: ((8 + 10) + (9 - 3)) = 24\nreach 24! expression: ((8 + 10) + (9 - 3))"}, {"input": "8 3 9 10\n", "output": "(8) * (10) = 80, left: (8 * 10) = 80, 3, 9\nroll back, left: 8 3 9 10\n(10) - (8) = 2, left: (10 - 8) = 2, 3, 9\n(3) + (2) = 5, left: (3 + (10 - 8)) = 5, 9\n(9) / (5) = 9/5, left: (9 / (3 + (10 - 8))) = 9/5\nroll back, left: (3 + (10 - 8)) = 5, 9\nroll back, left: (10 - 8) = 2, 3, 9\n(3) + (9) = 12, left: (3 + 9) = 12, (10 - 8) = 2\n(2) * (12) = 24, left: ((10 - 8) * (3 + 9)) = 24\nreach 24! expression: ((10 - 8) * (3 + 9))"}, {"input": "7 10 8 13\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 8, 13\n(-3) - (13) = -16, left: ((7 - 10) - 13) = -16, 8\n(8) - (-16) = 24, left: (8 - ((7 - 10) - 13)) = 24\nreach 24! expression: (8 - ((7 - 10) - 13))"}, {"input": "7 10 8 13\n", "output": "(10) + (13) = 23, left: (10 + 13) = 23, 7, 8\n(7) - (8) = -1, left: (7 - 8) = -1, (10 + 13) = 23\n(23) - (-1) = 24, left: ((10 + 13) - (7 - 8)) = 24\nreach 24! expression: ((10 + 13) - (7 - 8))"}, {"input": "7 10 8 13\n", "output": "(10) - (7) = 3, left: (10 - 7) = 3, 8, 13\n(8) + (3) = 11, left: (8 + (10 - 7)) = 11, 13\n(13) + (11) = 24, left: (13 + (8 + (10 - 7))) = 24\nreach 24! expression: (13 + (8 + (10 - 7)))"}, {"input": "7 10 8 13\n", "output": "(10) + (8) = 18, left: (10 + 8) = 18, 7, 13\n(13) + (18) = 31, left: (13 + (10 + 8)) = 31, 7\n(31) - (7) = 24, left: ((13 + (10 + 8)) - 7) = 24\nreach 24! expression: ((13 + (10 + 8)) - 7)"}, {"input": "7 10 8 13\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 8, 13\n(-3) - (13) = -16, left: ((7 - 10) - 13) = -16, 8\n(8) - (-16) = 24, left: (8 - ((7 - 10) - 13)) = 24\nreach 24! expression: (8 - ((7 - 10) - 13))"}, {"input": "7 10 8 13\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 8, 13\n(-3) - (13) = -16, left: ((7 - 10) - 13) = -16, 8\n(8) - (-16) = 24, left: (8 - ((7 - 10) - 13)) = 24\nreach 24! expression: (8 - ((7 - 10) - 13))"}, {"input": "7 10 8 13\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 8, 13\n(-3) - (13) = -16, left: ((7 - 10) - 13) = -16, 8\n(8) - (-16) = 24, left: (8 - ((7 - 10) - 13)) = 24\nreach 24! expression: (8 - ((7 - 10) - 13))"}, {"input": "7 10 8 13\n", "output": "(7) - (10) = -3, left: (7 - 10) = -3, 8, 13\n(-3) - (13) = -16, left: ((7 - 10) - 13) = -16, 8\n(8) - (-16) = 24, left: (8 - ((7 - 10) - 13)) = 24\nreach 24! expression: (8 - ((7 - 10) - 13))"}, {"input": "10 9 10 13\n", "output": "(10) + (13) = 23, left: (10 + 13) = 23, 10, 9\n(9) - (10) = -1, left: (9 - 10) = -1, (10 + 13) = 23\n(23) - (-1) = 24, left: ((10 + 13) - (9 - 10)) = 24\nreach 24! expression: ((10 + 13) - (9 - 10))"}, {"input": "10 9 10 13\n", "output": "(10) - (9) = 1, left: (10 - 9) = 1, 10, 13\n(13) + (1) = 14, left: (13 + (10 - 9)) = 14, 10\n(10) + (14) = 24, left: (10 + (13 + (10 - 9))) = 24\nreach 24! expression: (10 + (13 + (10 - 9)))"}, {"input": "10 9 10 13\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 9, 13\n(13) - (9) = 4, left: (13 - 9) = 4, (10 + 10) = 20\n(20) + (4) = 24, left: ((10 + 10) + (13 - 9)) = 24\nreach 24! expression: ((10 + 10) + (13 - 9))"}, {"input": "10 9 10 13\n", "output": "(10) + (10) = 20, left: (10 + 10) = 20, 9, 13\n(13) + (20) = 33, left: (13 + (10 + 10)) = 33, 9\n(33) - (9) = 24, left: ((13 + (10 + 10)) - 9) = 24\nreach 24! expression: ((13 + (10 + 10)) - 9)"}, {"input": "11 11 8 10\n", "output": "(11) + (10) = 21, left: (11 + 10) = 21, 11, 8\n(8) - (21) = -13, left: (8 - (11 + 10)) = -13, 11\n(11) - (-13) = 24, left: (11 - (8 - (11 + 10))) = 24\nreach 24! expression: (11 - (8 - (11 + 10)))"}, {"input": "11 11 8 10\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 11, 10\n(-3) - (11) = -14, left: ((8 - 11) - 11) = -14, 10\n(10) - (-14) = 24, left: (10 - ((8 - 11) - 11)) = 24\nreach 24! expression: (10 - ((8 - 11) - 11))"}, {"input": "11 11 8 10\n", "output": "(11) + (10) = 21, left: (11 + 10) = 21, 11, 8\n(8) - (11) = -3, left: (8 - 11) = -3, (11 + 10) = 21\n(21) - (-3) = 24, left: ((11 + 10) - (8 - 11)) = 24\nreach 24! expression: ((11 + 10) - (8 - 11))"}, {"input": "11 11 8 10\n", "output": "(10) - (8) = 2, left: (10 - 8) = 2, 11, 11\n(11) + (2) = 13, left: (11 + (10 - 8)) = 13, 11\n(11) + (13) = 24, left: (11 + (11 + (10 - 8))) = 24\nreach 24! expression: (11 + (11 + (10 - 8)))"}, {"input": "11 11 8 10\n", "output": "(11) + (11) = 22, left: (11 + 11) = 22, 8, 10\n(10) - (8) = 2, left: (10 - 8) = 2, (11 + 11) = 22\n(22) + (2) = 24, left: ((11 + 11) + (10 - 8)) = 24\nreach 24! expression: ((11 + 11) + (10 - 8))"}, {"input": "4 2 10 3\n", "output": "(4) * (3) = 12, left: (4 * 3) = 12, 2, 10\n(2) + (12) = 14, left: (2 + (4 * 3)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 + (4 * 3))) = 24\nreach 24! expression: (10 + (2 + (4 * 3)))"}, {"input": "4 2 10 3\n", "output": "(10) * (3) = 30, left: (10 * 3) = 30, 4, 2\n(30) - (4) = 26, left: ((10 * 3) - 4) = 26, 2\n(26) - (2) = 24, left: (((10 * 3) - 4) - 2) = 24\nreach 24! expression: (((10 * 3) - 4) - 2)"}, {"input": "4 2 10 3\n", "output": "(4) - (10) = -6, left: (4 - 10) = -6, 2, 3\n(2) - (-6) = 8, left: (2 - (4 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 - (4 - 10))) = 24\nreach 24! expression: (3 * (2 - (4 - 10)))"}, {"input": "4 2 10 3\n", "output": "(10) * (3) = 30, left: (10 * 3) = 30, 4, 2\n(30) - (2) = 28, left: ((10 * 3) - 2) = 28, 4\n(28) - (4) = 24, left: (((10 * 3) - 2) - 4) = 24\nreach 24! expression: (((10 * 3) - 2) - 4)"}, {"input": "4 2 10 3\n", "output": "(10) - (3) = 7, left: (10 - 3) = 7, 4, 2\n(4) / (2) = 2, left: (4 / 2) = 2, (10 - 3) = 7\nroll back, left: (10 - 3) = 7, 4, 2\nroll back, left: 4 2 10 3\n(3) - (10) = -7, left: (3 - 10) = -7, 4, 2\nroll back, left: 4 2 10 3\n(10) * (3) = 30, left: (10 * 3) = 30, 4, 2\n(30) - (4) = 26, left: ((10 * 3) - 4) = 26, 2\n(26) - (2) = 24, left: (((10 * 3) - 4) - 2) = 24\nreach 24! expression: (((10 * 3) - 4) - 2)"}, {"input": "4 2 10 3\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 2, 10\n(10) - (4/3) = 26/3, left: (10 - (4 / 3)) = 26/3, 2\nroll back, left: (4 / 3) = 4/3, 2, 10\nroll back, left: 4 2 10 3\n(4) * (3) = 12, left: (4 * 3) = 12, 2, 10\n(2) - (12) = -10, left: (2 - (4 * 3)) = -10, 10\nroll back, left: (4 * 3) = 12, 2, 10\n(2) + (12) = 14, left: (2 + (4 * 3)) = 14, 10\n(10) + (14) = 24, left: (10 + (2 + (4 * 3))) = 24\nreach 24! expression: (10 + (2 + (4 * 3)))"}, {"input": "4 2 10 3\n", "output": "(10) + (3) = 13, left: (10 + 3) = 13, 4, 2\n(4) / (2) = 2, left: (4 / 2) = 2, (10 + 3) = 13\nroll back, left: (10 + 3) = 13, 4, 2\nroll back, left: 4 2 10 3\n(3) / (10) = 3/10, left: (3 / 10) = 3/10, 4, 2\nroll back, left: 4 2 10 3\n(10) * (3) = 30, left: (10 * 3) = 30, 4, 2\n(30) - (2) = 28, left: ((10 * 3) - 2) = 28, 4\n(28) - (4) = 24, left: (((10 * 3) - 2) - 4) = 24\nreach 24! expression: (((10 * 3) - 2) - 4)"}, {"input": "4 2 10 3\n", "output": "(4) * (10) = 40, left: (4 * 10) = 40, 2, 3\nroll back, left: 4 2 10 3\n(4) + (10) = 14, left: (4 + 10) = 14, 2, 3\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, (4 + 10) = 14\nroll back, left: (4 + 10) = 14, 2, 3\nroll back, left: 4 2 10 3\n(4) - (10) = -6, left: (4 - 10) = -6, 2, 3\n(2) - (-6) = 8, left: (2 - (4 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 - (4 - 10))) = 24\nreach 24! expression: (3 * (2 - (4 - 10)))"}, {"input": "4 2 10 3\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 4, 10\n(5) / (4) = 5/4, left: ((2 + 3) / 4) = 5/4, 10\n(10) / (5/4) = 8, left: (10 / ((2 + 3) / 4)) = 8\nroll back, left: ((2 + 3) / 4) = 5/4, 10\nroll back, left: (2 + 3) = 5, 4, 10\nroll back, left: 4 2 10 3\n(4) - (10) = -6, left: (4 - 10) = -6, 2, 3\n(2) - (-6) = 8, left: (2 - (4 - 10)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 - (4 - 10))) = 24\nreach 24! expression: (3 * (2 - (4 - 10)))"}, {"input": "3 4 12 10\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 12, 10\n(12) - (10) = 2, left: (12 - 10) = 2, (3 * 4) = 12\n(12) * (2) = 24, left: ((3 * 4) * (12 - 10)) = 24\nreach 24! expression: ((3 * 4) * (12 - 10))"}, {"input": "3 4 12 10\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 3, 12\n(12) * (6) = 72, left: (12 * (10 - 4)) = 72, 3\n(72) / (3) = 24, left: ((12 * (10 - 4)) / 3) = 24\nreach 24! expression: ((12 * (10 - 4)) / 3)"}, {"input": "3 4 12 10\n", "output": "(3) * (4) = 12, left: (3 * 4) = 12, 12, 10\n(12) - (10) = 2, left: ((3 * 4) - 10) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 * 4) - 10)) = 24\nreach 24! expression: (12 * ((3 * 4) - 10))"}, {"input": "3 4 12 10\n", "output": "(12) / (3) = 4, left: (12 / 3) = 4, 4, 10\n(10) - (4) = 6, left: (10 - (12 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 - (12 / 3))) = 24\nreach 24! expression: (4 * (10 - (12 / 3)))"}, {"input": "3 4 12 10\n", "output": "(3) * (10) = 30, left: (3 * 10) = 30, 4, 12\nroll back, left: 3 4 12 10\n(3) + (10) = 13, left: (3 + 10) = 13, 4, 12\nroll back, left: 3 4 12 10\n(3) / (10) = 3/10, left: (3 / 10) = 3/10, 4, 12\nroll back, left: 3 4 12 10\n(12) / (3) = 4, left: (12 / 3) = 4, 4, 10\n(10) - (4) = 6, left: (10 - (12 / 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (10 - (12 / 3))) = 24\nreach 24! expression: (4 * (10 - (12 / 3)))"}, {"input": "3 4 12 10\n", "output": "(4) / (3) = 4/3, left: (4 / 3) = 4/3, 12, 10\nroll back, left: 3 4 12 10\n(4) - (3) = 1, left: (4 - 3) = 1, 12, 10\n(1) - (10) = -9, left: ((4 - 3) - 10) = -9, 12\nroll back, left: (4 - 3) = 1, 12, 10\nroll back, left: 3 4 12 10\n(3) * (4) = 12, left: (3 * 4) = 12, 12, 10\n(12) - (10) = 2, left: ((3 * 4) - 10) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 * 4) - 10)) = 24\nreach 24! expression: (12 * ((3 * 4) - 10))"}, {"input": "12 8 12 10\n", "output": "(8) * (12) = 96, left: (8 * 12) = 96, 12, 10\n(12) * (10) = 120, left: (12 * 10) = 120, (8 * 12) = 96\n(120) - (96) = 24, left: ((12 * 10) - (8 * 12)) = 24\nreach 24! expression: ((12 * 10) - (8 * 12))"}, {"input": "12 8 12 10\n", "output": "(10) / (12) = 5/6, left: (10 / 12) = 5/6, 8, 12\n(8) + (12) = 20, left: (8 + 12) = 20, (10 / 12) = 5/6\n(20) / (5/6) = 24, left: ((8 + 12) / (10 / 12)) = 24\nreach 24! expression: ((8 + 12) / (10 / 12))"}, {"input": "12 8 12 10\n", "output": "(12) / (10) = 6/5, left: (12 / 10) = 6/5, 12, 8\n(12) + (8) = 20, left: (12 + 8) = 20, (12 / 10) = 6/5\n(6/5) * (20) = 24, left: ((12 / 10) * (12 + 8)) = 24\nreach 24! expression: ((12 / 10) * (12 + 8))"}, {"input": "12 8 12 10\n", "output": "(12) * (8) = 96, left: (12 * 8) = 96, 12, 10\n(12) * (10) = 120, left: (12 * 10) = 120, (12 * 8) = 96\n(120) - (96) = 24, left: ((12 * 10) - (12 * 8)) = 24\nreach 24! expression: ((12 * 10) - (12 * 8))"}, {"input": "12 8 12 10\n", "output": "(12) * (10) = 120, left: (12 * 10) = 120, 8, 12\n(8) * (12) = 96, left: (8 * 12) = 96, (12 * 10) = 120\n(120) - (96) = 24, left: ((12 * 10) - (8 * 12)) = 24\nreach 24! expression: ((12 * 10) - (8 * 12))"}, {"input": "8 3 3 1\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 3, 3\n(3) * (-7) = -21, left: (3 * (1 - 8)) = -21, 3\n(3) - (-21) = 24, left: (3 - (3 * (1 - 8))) = 24\nreach 24! expression: (3 - (3 * (1 - 8)))"}, {"input": "8 3 3 1\n", "output": "(8) + (1) = 9, left: (8 + 1) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (8 + 1)) = 27, 3\n(27) - (3) = 24, left: ((3 * (8 + 1)) - 3) = 24\nreach 24! expression: ((3 * (8 + 1)) - 3)"}, {"input": "8 3 3 1\n", "output": "(8) - (1) = 7, left: (8 - 1) = 7, 3, 3\n(3) * (7) = 21, left: (3 * (8 - 1)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 * (8 - 1))) = 24\nreach 24! expression: (3 + (3 * (8 - 1)))"}, {"input": "8 3 3 1\n", "output": "(1) / (3) = 1/3, left: (1 / 3) = 1/3, 8, 3\n(8) * (3) = 24, left: (8 * 3) = 24, (1 / 3) = 1/3\nroll back, left: (1 / 3) = 1/3, 8, 3\nroll back, left: 8 3 3 1\n(8) + (3) = 11, left: (8 + 3) = 11, 3, 1\nroll back, left: 8 3 3 1\n(1) - (8) = -7, left: (1 - 8) = -7, 3, 3\n(3) * (-7) = -21, left: (3 * (1 - 8)) = -21, 3\n(3) - (-21) = 24, left: (3 - (3 * (1 - 8))) = 24\nreach 24! expression: (3 - (3 * (1 - 8)))"}, {"input": "8 3 3 1\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 3, 1\nroll back, left: 8 3 3 1\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 3, 1\n(3) / (1) = 3, left: (3 / 1) = 3, (8 / 3) = 8/3\nroll back, left: (8 / 3) = 8/3, 3, 1\nroll back, left: 8 3 3 1\n(1) - (8) = -7, left: (1 - 8) = -7, 3, 3\n(3) * (-7) = -21, left: (3 * (1 - 8)) = -21, 3\n(3) - (-21) = 24, left: (3 - (3 * (1 - 8))) = 24\nreach 24! expression: (3 - (3 * (1 - 8)))"}, {"input": "8 3 3 1\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 3, 1\nroll back, left: 8 3 3 1\n(3) + (1) = 4, left: (3 + 1) = 4, 8, 3\n(3) - (4) = -1, left: (3 - (3 + 1)) = -1, 8\nroll back, left: (3 + 1) = 4, 8, 3\nroll back, left: 8 3 3 1\n(8) + (1) = 9, left: (8 + 1) = 9, 3, 3\n(3) * (9) = 27, left: (3 * (8 + 1)) = 27, 3\n(27) - (3) = 24, left: ((3 * (8 + 1)) - 3) = 24\nreach 24! expression: ((3 * (8 + 1)) - 3)"}, {"input": "8 3 3 1\n", "output": "(1) - (8) = -7, left: (1 - 8) = -7, 3, 3\n(-7) / (3) = -7/3, left: ((1 - 8) / 3) = -7/3, 3\nroll back, left: (1 - 8) = -7, 3, 3\n(-7) - (3) = -10, left: ((1 - 8) - 3) = -10, 3\n(3) - (-10) = 13, left: (3 - ((1 - 8) - 3)) = 13\nroll back, left: ((1 - 8) - 3) = -10, 3\nroll back, left: (1 - 8) = -7, 3, 3\n(3) * (-7) = -21, left: (3 * (1 - 8)) = -21, 3\n(3) - (-21) = 24, left: (3 - (3 * (1 - 8))) = 24\nreach 24! expression: (3 - (3 * (1 - 8)))"}, {"input": "8 3 3 1\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 8, 1\nroll back, left: 8 3 3 1\n(3) * (1) = 3, left: (3 * 1) = 3, 8, 3\nroll back, left: 8 3 3 1\n(3) / (1) = 3, left: (3 / 1) = 3, 8, 3\nroll back, left: 8 3 3 1\n(8) - (1) = 7, left: (8 - 1) = 7, 3, 3\n(3) * (7) = 21, left: (3 * (8 - 1)) = 21, 3\n(3) + (21) = 24, left: (3 + (3 * (8 - 1))) = 24\nreach 24! expression: (3 + (3 * (8 - 1)))"}, {"input": "12 2 1 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 2, 1\n(2) - (1) = 1, left: (2 - 1) = 1, (12 + 12) = 24\n(24) * (1) = 24, left: ((12 + 12) * (2 - 1)) = 24\nreach 24! expression: ((12 + 12) * (2 - 1))"}, {"input": "12 2 1 12\n", "output": "(12) + (12) = 24, left: (12 + 12) = 24, 2, 1\n(2) - (1) = 1, left: (2 - 1) = 1, (12 + 12) = 24\n(24) / (1) = 24, left: ((12 + 12) / (2 - 1)) = 24\nreach 24! expression: ((12 + 12) / (2 - 1))"}, {"input": "12 2 1 12\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 12, 12\n(12) * (1) = 12, left: (12 * (2 - 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (12 * (2 - 1))) = 24\nreach 24! expression: (12 + (12 * (2 - 1)))"}, {"input": "12 2 1 12\n", "output": "(1) + (12) = 13, left: (1 + 12) = 13, 12, 2\n(2) * (13) = 26, left: (2 * (1 + 12)) = 26, 12\nroll back, left: (1 + 12) = 13, 12, 2\nroll back, left: 12 2 1 12\n(1) - (12) = -11, left: (1 - 12) = -11, 12, 2\nroll back, left: 12 2 1 12\n(12) + (12) = 24, left: (12 + 12) = 24, 2, 1\n(2) - (1) = 1, left: (2 - 1) = 1, (12 + 12) = 24\n(24) * (1) = 24, left: ((12 + 12) * (2 - 1)) = 24\nreach 24! expression: ((12 + 12) * (2 - 1))"}, {"input": "12 2 1 12\n", "output": "(2) - (12) = -10, left: (2 - 12) = -10, 12, 1\n(12) - (1) = 11, left: (12 - 1) = 11, (2 - 12) = -10\nroll back, left: (2 - 12) = -10, 12, 1\nroll back, left: 12 2 1 12\n(2) + (12) = 14, left: (2 + 12) = 14, 12, 1\nroll back, left: 12 2 1 12\n(2) - (1) = 1, left: (2 - 1) = 1, 12, 12\n(12) * (1) = 12, left: (12 * (2 - 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (12 * (2 - 1))) = 24\nreach 24! expression: (12 + (12 * (2 - 1)))"}, {"input": "8 7 1 2\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 7, 1\n(7) - (1) = 6, left: (7 - 1) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((7 - 1) / (2 / 8)) = 24\nreach 24! expression: ((7 - 1) / (2 / 8))"}, {"input": "8 7 1 2\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (7 - 1)) = 48, 2\n(48) / (2) = 24, left: ((8 * (7 - 1)) / 2) = 24\nreach 24! expression: ((8 * (7 - 1)) / 2)"}, {"input": "8 7 1 2\n", "output": "(8) * (2) = 16, left: (8 * 2) = 16, 7, 1\n(1) + (16) = 17, left: (1 + (8 * 2)) = 17, 7\n(7) + (17) = 24, left: (7 + (1 + (8 * 2))) = 24\nreach 24! expression: (7 + (1 + (8 * 2)))"}, {"input": "8 7 1 2\n", "output": "(7) + (1) = 8, left: (7 + 1) = 8, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (7 + 1) = 8\n(8) + (16) = 24, left: ((7 + 1) + (8 * 2)) = 24\nreach 24! expression: ((7 + 1) + (8 * 2))"}, {"input": "8 7 1 2\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 8, 7\nroll back, left: 8 7 1 2\n(1) - (7) = -6, left: (1 - 7) = -6, 8, 2\n(8) - (-6) = 14, left: (8 - (1 - 7)) = 14, 2\nroll back, left: (1 - 7) = -6, 8, 2\nroll back, left: 8 7 1 2\n(7) - (1) = 6, left: (7 - 1) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (7 - 1)) = 48, 2\n(48) / (2) = 24, left: ((8 * (7 - 1)) / 2) = 24\nreach 24! expression: ((8 * (7 - 1)) / 2)"}, {"input": "8 7 1 2\n", "output": "(1) / (7) = 1/7, left: (1 / 7) = 1/7, 8, 2\n(8) / (1/7) = 56, left: (8 / (1 / 7)) = 56, 2\nroll back, left: (1 / 7) = 1/7, 8, 2\nroll back, left: 8 7 1 2\n(7) + (1) = 8, left: (7 + 1) = 8, 8, 2\n(2) / (8) = 1/4, left: (2 / 8) = 1/4, (7 + 1) = 8\nroll back, left: (7 + 1) = 8, 8, 2\n(8) * (2) = 16, left: (8 * 2) = 16, (7 + 1) = 8\n(8) + (16) = 24, left: ((7 + 1) + (8 * 2)) = 24\nreach 24! expression: ((7 + 1) + (8 * 2))"}, {"input": "8 7 1 2\n", "output": "(7) + (2) = 9, left: (7 + 2) = 9, 8, 1\n(9) - (1) = 8, left: ((7 + 2) - 1) = 8, 8\nroll back, left: (7 + 2) = 9, 8, 1\nroll back, left: 8 7 1 2\n(7) / (8) = 7/8, left: (7 / 8) = 7/8, 1, 2\nroll back, left: 8 7 1 2\n(8) * (2) = 16, left: (8 * 2) = 16, 7, 1\n(1) + (16) = 17, left: (1 + (8 * 2)) = 17, 7\n(7) + (17) = 24, left: (7 + (1 + (8 * 2))) = 24\nreach 24! expression: (7 + (1 + (8 * 2)))"}, {"input": "8 7 1 2\n", "output": "(7) - (1) = 6, left: (7 - 1) = 6, 8, 2\n(8) / (6) = 4/3, left: (8 / (7 - 1)) = 4/3, 2\n(2) - (4/3) = 2/3, left: (2 - (8 / (7 - 1))) = 2/3\nroll back, left: (8 / (7 - 1)) = 4/3, 2\n(4/3) / (2) = 2/3, left: ((8 / (7 - 1)) / 2) = 2/3\nroll back, left: (8 / (7 - 1)) = 4/3, 2\nroll back, left: (7 - 1) = 6, 8, 2\n(8) * (6) = 48, left: (8 * (7 - 1)) = 48, 2\n(48) / (2) = 24, left: ((8 * (7 - 1)) / 2) = 24\nreach 24! expression: ((8 * (7 - 1)) / 2)"}, {"input": "8 7 1 2\n", "output": "(2) / (8) = 1/4, left: (2 / 8) = 1/4, 7, 1\n(1/4) / (1) = 1/4, left: ((2 / 8) / 1) = 1/4, 7\nroll back, left: (2 / 8) = 1/4, 7, 1\n(1) / (1/4) = 4, left: (1 / (2 / 8)) = 4, 7\n(7) - (4) = 3, left: (7 - (1 / (2 / 8))) = 3\nroll back, left: (1 / (2 / 8)) = 4, 7\nroll back, left: (2 / 8) = 1/4, 7, 1\n(7) - (1) = 6, left: (7 - 1) = 6, (2 / 8) = 1/4\n(6) / (1/4) = 24, left: ((7 - 1) / (2 / 8)) = 24\nreach 24! expression: ((7 - 1) / (2 / 8))"}, {"input": "6 2 3 1\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (2 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (2 - 1))) = 24\nreach 24! expression: (6 * (3 + (2 - 1)))"}, {"input": "6 2 3 1\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 6, 1\n(5) - (1) = 4, left: ((2 + 3) - 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((2 + 3) - 1)) = 24\nreach 24! expression: (6 * ((2 + 3) - 1))"}, {"input": "6 2 3 1\n", "output": "(6) * (1) = 6, left: (6 * 1) = 6, 2, 3\n(2) + (6) = 8, left: (2 + (6 * 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (6 * 1))) = 24\nreach 24! expression: (3 * (2 + (6 * 1)))"}, {"input": "6 2 3 1\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 2, 1\n(1) + (18) = 19, left: (1 + (6 * 3)) = 19, 2\nroll back, left: (6 * 3) = 18, 2, 1\nroll back, left: 6 2 3 1\n(2) / (3) = 2/3, left: (2 / 3) = 2/3, 6, 1\nroll back, left: 6 2 3 1\n(2) + (3) = 5, left: (2 + 3) = 5, 6, 1\n(5) - (1) = 4, left: ((2 + 3) - 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((2 + 3) - 1)) = 24\nreach 24! expression: (6 * ((2 + 3) - 1))"}, {"input": "6 2 3 1\n", "output": "(1) / (2) = 1/2, left: (1 / 2) = 1/2, 6, 3\n(3) / (1/2) = 6, left: (3 / (1 / 2)) = 6, 6\nroll back, left: (1 / 2) = 1/2, 6, 3\n(3) - (6) = -3, left: (3 - 6) = -3, (1 / 2) = 1/2\nroll back, left: (1 / 2) = 1/2, 6, 3\nroll back, left: 6 2 3 1\n(2) - (1) = 1, left: (2 - 1) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (2 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (2 - 1))) = 24\nreach 24! expression: (6 * (3 + (2 - 1)))"}, {"input": "6 2 3 1\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 6, 1\n(1) - (6) = -5, left: (1 - 6) = -5, (2 - 3) = -1\nroll back, left: (2 - 3) = -1, 6, 1\nroll back, left: 6 2 3 1\n(3) / (2) = 3/2, left: (3 / 2) = 3/2, 6, 1\nroll back, left: 6 2 3 1\n(2) + (3) = 5, left: (2 + 3) = 5, 6, 1\n(5) - (1) = 4, left: ((2 + 3) - 1) = 4, 6\n(6) * (4) = 24, left: (6 * ((2 + 3) - 1)) = 24\nreach 24! expression: (6 * ((2 + 3) - 1))"}, {"input": "6 2 3 1\n", "output": "(6) * (3) = 18, left: (6 * 3) = 18, 2, 1\nroll back, left: 6 2 3 1\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 2, 1\n(1/2) - (1) = -1/2, left: ((3 / 6) - 1) = -1/2, 2\nroll back, left: (3 / 6) = 1/2, 2, 1\nroll back, left: 6 2 3 1\n(6) * (1) = 6, left: (6 * 1) = 6, 2, 3\n(2) + (6) = 8, left: (2 + (6 * 1)) = 8, 3\n(3) * (8) = 24, left: (3 * (2 + (6 * 1))) = 24\nreach 24! expression: (3 * (2 + (6 * 1)))"}, {"input": "6 2 3 1\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (2 - 1)) = 4, 6\n(6) + (4) = 10, left: (6 + (3 + (2 - 1))) = 10\nroll back, left: (3 + (2 - 1)) = 4, 6\n(6) / (4) = 3/2, left: (6 / (3 + (2 - 1))) = 3/2\nroll back, left: (3 + (2 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (2 - 1))) = 24\nreach 24! expression: (6 * (3 + (2 - 1)))"}, {"input": "6 2 3 1\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (2 - 1)) = 4, 6\n(6) + (4) = 10, left: (6 + (3 + (2 - 1))) = 10\nroll back, left: (3 + (2 - 1)) = 4, 6\n(6) / (4) = 3/2, left: (6 / (3 + (2 - 1))) = 3/2\nroll back, left: (3 + (2 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (2 - 1))) = 24\nreach 24! expression: (6 * (3 + (2 - 1)))"}, {"input": "6 2 3 1\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (2 - 1)) = 4, 6\n(6) + (4) = 10, left: (6 + (3 + (2 - 1))) = 10\nroll back, left: (3 + (2 - 1)) = 4, 6\n(6) / (4) = 3/2, left: (6 / (3 + (2 - 1))) = 3/2\nroll back, left: (3 + (2 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (2 - 1))) = 24\nreach 24! expression: (6 * (3 + (2 - 1)))"}, {"input": "6 2 3 1\n", "output": "(2) - (1) = 1, left: (2 - 1) = 1, 6, 3\n(3) + (1) = 4, left: (3 + (2 - 1)) = 4, 6\n(6) + (4) = 10, left: (6 + (3 + (2 - 1))) = 10\nroll back, left: (3 + (2 - 1)) = 4, 6\n(6) / (4) = 3/2, left: (6 / (3 + (2 - 1))) = 3/2\nroll back, left: (3 + (2 - 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (3 + (2 - 1))) = 24\nreach 24! expression: (6 * (3 + (2 - 1)))"}, {"input": "11 1 5 11\n", "output": "(11) * (11) = 121, left: (11 * 11) = 121, 1, 5\n(121) - (1) = 120, left: ((11 * 11) - 1) = 120, 5\n(120) / (5) = 24, left: (((11 * 11) - 1) / 5) = 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "11 1 5 11\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 1, 5\nroll back, left: 11 1 5 11\n(11) - (11) = 0, left: (11 - 11) = 0, 1, 5\n(0) - (1) = -1, left: ((11 - 11) - 1) = -1, 5\nroll back, left: (11 - 11) = 0, 1, 5\nroll back, left: 11 1 5 11\n(11) * (11) = 121, left: (11 * 11) = 121, 1, 5\n(121) - (1) = 120, left: ((11 * 11) - 1) = 120, 5\n(120) / (5) = 24, left: (((11 * 11) - 1) / 5) = 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "11 1 5 11\n", "output": "(11) - (1) = 10, left: (11 - 1) = 10, 11, 5\nroll back, left: 11 1 5 11\n(5) / (1) = 5, left: (5 / 1) = 5, 11, 11\n(5) - (11) = -6, left: ((5 / 1) - 11) = -6, 11\nroll back, left: (5 / 1) = 5, 11, 11\nroll back, left: 11 1 5 11\n(11) * (11) = 121, left: (11 * 11) = 121, 1, 5\n(121) - (1) = 120, left: ((11 * 11) - 1) = 120, 5\n(120) / (5) = 24, left: (((11 * 11) - 1) / 5) = 24\nreach 24! expression: (((11 * 11) - 1) / 5)"}, {"input": "13 3 12 2\n", "output": "(13) + (12) = 25, left: (13 + 12) = 25, 3, 2\n(3) - (25) = -22, left: (3 - (13 + 12)) = -22, 2\n(2) - (-22) = 24, left: (2 - (3 - (13 + 12))) = 24\nreach 24! expression: (2 - (3 - (13 + 12)))"}, {"input": "13 3 12 2\n", "output": "(13) + (12) = 25, left: (13 + 12) = 25, 3, 2\n(2) + (25) = 27, left: (2 + (13 + 12)) = 27, 3\n(27) - (3) = 24, left: ((2 + (13 + 12)) - 3) = 24\nreach 24! expression: ((2 + (13 + 12)) - 3)"}, {"input": "13 3 12 2\n", "output": "(3) - (2) = 1, left: (3 - 2) = 1, 13, 12\n(13) + (12) = 25, left: (13 + 12) = 25, (3 - 2) = 1\n(25) - (1) = 24, left: ((13 + 12) - (3 - 2)) = 24\nreach 24! expression: ((13 + 12) - (3 - 2))"}, {"input": "13 3 12 2\n", "output": "(3) - (13) = -10, left: (3 - 13) = -10, 12, 2\n(12) + (2) = 14, left: (12 + 2) = 14, (3 - 13) = -10\n(14) - (-10) = 24, left: ((12 + 2) - (3 - 13)) = 24\nreach 24! expression: ((12 + 2) - (3 - 13))"}, {"input": "13 3 12 2\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 13, 12\n(13) + (12) = 25, left: (13 + 12) = 25, (2 - 3) = -1\n(-1) + (25) = 24, left: ((2 - 3) + (13 + 12)) = 24\nreach 24! expression: ((2 - 3) + (13 + 12))"}, {"input": "12 10 2 10\n", "output": "(12) - (10) = 2, left: (12 - 10) = 2, 10, 2\n(10) + (2) = 12, left: (10 + 2) = 12, (12 - 10) = 2\n(2) * (12) = 24, left: ((12 - 10) * (10 + 2)) = 24\nreach 24! expression: ((12 - 10) * (10 + 2))"}, {"input": "12 10 2 10\n", "output": "(10) - (12) = -2, left: (10 - 12) = -2, 2, 10\n(10) - (-2) = 12, left: (10 - (10 - 12)) = 12, 2\n(2) * (12) = 24, left: (2 * (10 - (10 - 12))) = 24\nreach 24! expression: (2 * (10 - (10 - 12)))"}, {"input": "12 10 2 10\n", "output": "(12) * (10) = 120, left: (12 * 10) = 120, 2, 10\n(2) * (120) = 240, left: (2 * (12 * 10)) = 240, 10\n(240) / (10) = 24, left: ((2 * (12 * 10)) / 10) = 24\nreach 24! expression: ((2 * (12 * 10)) / 10)"}, {"input": "12 10 2 10\n", "output": "(10) + (2) = 12, left: (10 + 2) = 12, 12, 10\n(12) - (10) = 2, left: ((10 + 2) - 10) = 2, 12\n(12) * (2) = 24, left: (12 * ((10 + 2) - 10)) = 24\nreach 24! expression: (12 * ((10 + 2) - 10))"}, {"input": "12 10 2 10\n", "output": "(12) * (10) = 120, left: (12 * 10) = 120, 10, 2\n(120) / (10) = 12, left: ((12 * 10) / 10) = 12, 2\n(2) * (12) = 24, left: (2 * ((12 * 10) / 10)) = 24\nreach 24! expression: (2 * ((12 * 10) / 10))"}, {"input": "11 11 12 1\n", "output": "(11) / (11) = 1, left: (11 / 11) = 1, 12, 1\n(1) + (1) = 2, left: (1 + (11 / 11)) = 2, 12\n(12) * (2) = 24, left: (12 * (1 + (11 / 11))) = 24\nreach 24! expression: (12 * (1 + (11 / 11)))"}, {"input": "11 7 10 4\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 7, 4\n(7) + (-1) = 6, left: (7 + (10 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (10 - 11))) = 24\nreach 24! expression: (4 * (7 + (10 - 11)))"}, {"input": "11 7 10 4\n", "output": "(4) - (7) = -3, left: (4 - 7) = -3, 11, 10\n(-3) - (10) = -13, left: ((4 - 7) - 10) = -13, 11\n(11) - (-13) = 24, left: (11 - ((4 - 7) - 10)) = 24\nreach 24! expression: (11 - ((4 - 7) - 10))"}, {"input": "11 7 10 4\n", "output": "(10) - (4) = 6, left: (10 - 4) = 6, 11, 7\n(7) + (6) = 13, left: (7 + (10 - 4)) = 13, 11\n(11) + (13) = 24, left: (11 + (7 + (10 - 4))) = 24\nreach 24! expression: (11 + (7 + (10 - 4)))"}, {"input": "11 7 10 4\n", "output": "(11) + (7) = 18, left: (11 + 7) = 18, 10, 4\n(18) - (4) = 14, left: ((11 + 7) - 4) = 14, 10\n(10) + (14) = 24, left: (10 + ((11 + 7) - 4)) = 24\nreach 24! expression: (10 + ((11 + 7) - 4))"}, {"input": "11 7 10 4\n", "output": "(4) - (11) = -7, left: (4 - 11) = -7, 7, 10\n(-7) - (7) = -14, left: ((4 - 11) - 7) = -14, 10\n(10) - (-14) = 24, left: (10 - ((4 - 11) - 7)) = 24\nreach 24! expression: (10 - ((4 - 11) - 7))"}, {"input": "11 7 10 4\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 7, 4\n(7) + (-1) = 6, left: (7 + (10 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (10 - 11))) = 24\nreach 24! expression: (4 * (7 + (10 - 11)))"}, {"input": "11 7 10 4\n", "output": "(7) / (4) = 7/4, left: (7 / 4) = 7/4, 11, 10\nroll back, left: 11 7 10 4\n(7) + (4) = 11, left: (7 + 4) = 11, 11, 10\n(11) - (10) = 1, left: (11 - 10) = 1, (7 + 4) = 11\nroll back, left: (7 + 4) = 11, 11, 10\nroll back, left: 11 7 10 4\n(4) - (7) = -3, left: (4 - 7) = -3, 11, 10\n(-3) - (10) = -13, left: ((4 - 7) - 10) = -13, 11\n(11) - (-13) = 24, left: (11 - ((4 - 7) - 10)) = 24\nreach 24! expression: (11 - ((4 - 7) - 10))"}, {"input": "11 7 10 4\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 7, 4\n(7) + (-1) = 6, left: (7 + (10 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (10 - 11))) = 24\nreach 24! expression: (4 * (7 + (10 - 11)))"}, {"input": "11 7 10 4\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 7, 4\n(7) + (-1) = 6, left: (7 + (10 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (10 - 11))) = 24\nreach 24! expression: (4 * (7 + (10 - 11)))"}, {"input": "11 7 10 4\n", "output": "(10) - (11) = -1, left: (10 - 11) = -1, 7, 4\n(7) + (-1) = 6, left: (7 + (10 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (7 + (10 - 11))) = 24\nreach 24! expression: (4 * (7 + (10 - 11)))"}, {"input": "3 8 4 11\n", "output": "(8) - (3) = 5, left: (8 - 3) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (8 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (8 - 3))) = 24\nreach 24! expression: (4 * (11 - (8 - 3)))"}, {"input": "3 8 4 11\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 4, 11\n(11) + (-5) = 6, left: (11 + (3 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 + (3 - 8))) = 24\nreach 24! expression: (4 * (11 + (3 - 8)))"}, {"input": "3 8 4 11\n", "output": "(8) - (11) = -3, left: (8 - 11) = -3, 3, 4\n(3) - (-3) = 6, left: (3 - (8 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 - (8 - 11))) = 24\nreach 24! expression: (4 * (3 - (8 - 11)))"}, {"input": "3 8 4 11\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 8, 11\nroll back, left: 3 8 4 11\n(3) * (4) = 12, left: (3 * 4) = 12, 8, 11\nroll back, left: 3 8 4 11\n(3) - (4) = -1, left: (3 - 4) = -1, 8, 11\nroll back, left: 3 8 4 11\n(8) - (11) = -3, left: (8 - 11) = -3, 3, 4\n(3) - (-3) = 6, left: (3 - (8 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 - (8 - 11))) = 24\nreach 24! expression: (4 * (3 - (8 - 11)))"}, {"input": "3 8 4 11\n", "output": "(8) * (11) = 88, left: (8 * 11) = 88, 3, 4\nroll back, left: 3 8 4 11\n(8) + (11) = 19, left: (8 + 11) = 19, 3, 4\nroll back, left: 3 8 4 11\n(8) - (11) = -3, left: (8 - 11) = -3, 3, 4\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, (8 - 11) = -3\nroll back, left: (8 - 11) = -3, 3, 4\n(3) - (-3) = 6, left: (3 - (8 - 11)) = 6, 4\n(4) * (6) = 24, left: (4 * (3 - (8 - 11))) = 24\nreach 24! expression: (4 * (3 - (8 - 11)))"}, {"input": "3 8 4 11\n", "output": "(3) / (8) = 3/8, left: (3 / 8) = 3/8, 4, 11\n(3/8) / (4) = 3/32, left: ((3 / 8) / 4) = 3/32, 11\nroll back, left: (3 / 8) = 3/8, 4, 11\nroll back, left: 3 8 4 11\n(8) / (3) = 8/3, left: (8 / 3) = 8/3, 4, 11\nroll back, left: 3 8 4 11\n(3) - (8) = -5, left: (3 - 8) = -5, 4, 11\n(11) + (-5) = 6, left: (11 + (3 - 8)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 + (3 - 8))) = 24\nreach 24! expression: (4 * (11 + (3 - 8)))"}, {"input": "3 8 4 11\n", "output": "(4) * (11) = 44, left: (4 * 11) = 44, 3, 8\n(3) * (8) = 24, left: (3 * 8) = 24, (4 * 11) = 44\nroll back, left: (4 * 11) = 44, 3, 8\nroll back, left: 3 8 4 11\n(4) + (11) = 15, left: (4 + 11) = 15, 3, 8\nroll back, left: 3 8 4 11\n(8) - (3) = 5, left: (8 - 3) = 5, 4, 11\n(11) - (5) = 6, left: (11 - (8 - 3)) = 6, 4\n(4) * (6) = 24, left: (4 * (11 - (8 - 3))) = 24\nreach 24! expression: (4 * (11 - (8 - 3)))"}, {"input": "12 1 1 3\n", "output": "(1) * (3) = 3, left: (1 * 3) = 3, 12, 1\n(3) - (1) = 2, left: ((1 * 3) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((1 * 3) - 1)) = 24\nreach 24! expression: (12 * ((1 * 3) - 1))"}, {"input": "12 1 1 3\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 12, 1\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, (3 - 1) = 2\n(2) / (1/12) = 24, left: ((3 - 1) / (1 / 12)) = 24\nreach 24! expression: ((3 - 1) / (1 / 12))"}, {"input": "12 1 1 3\n", "output": "(1) / (12) = 1/12, left: (1 / 12) = 1/12, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (1 / 12) = 1/12\n(2) / (1/12) = 24, left: ((3 - 1) / (1 / 12)) = 24\nreach 24! expression: ((3 - 1) / (1 / 12))"}, {"input": "12 1 1 3\n", "output": "(12) / (1) = 12, left: (12 / 1) = 12, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (12 / 1) = 12\n(12) * (2) = 24, left: ((12 / 1) * (3 - 1)) = 24\nreach 24! expression: ((12 / 1) * (3 - 1))"}, {"input": "12 1 1 3\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 12, 1\n(3) - (1) = 2, left: ((3 / 1) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 / 1) - 1)) = 24\nreach 24! expression: (12 * ((3 / 1) - 1))"}, {"input": "12 1 1 3\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 1, 1\n(1) / (1/4) = 4, left: (1 / (3 / 12)) = 4, 1\n(4) / (1) = 4, left: ((1 / (3 / 12)) / 1) = 4\nroll back, left: (1 / (3 / 12)) = 4, 1\nroll back, left: (3 / 12) = 1/4, 1, 1\nroll back, left: 12 1 1 3\n(3) / (1) = 3, left: (3 / 1) = 3, 12, 1\n(3) - (1) = 2, left: ((3 / 1) - 1) = 2, 12\n(12) * (2) = 24, left: (12 * ((3 / 1) - 1)) = 24\nreach 24! expression: (12 * ((3 / 1) - 1))"}, {"input": "12 1 1 3\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 12, 1\n(12) + (-2) = 10, left: (12 + (1 - 3)) = 10, 1\nroll back, left: (1 - 3) = -2, 12, 1\nroll back, left: 12 1 1 3\n(3) - (1) = 2, left: (3 - 1) = 2, 12, 1\n(1) - (12) = -11, left: (1 - 12) = -11, (3 - 1) = 2\nroll back, left: (3 - 1) = 2, 12, 1\n(1) / (12) = 1/12, left: (1 / 12) = 1/12, (3 - 1) = 2\n(2) / (1/12) = 24, left: ((3 - 1) / (1 / 12)) = 24\nreach 24! expression: ((3 - 1) / (1 / 12))"}, {"input": "12 1 1 3\n", "output": "(12) + (1) = 13, left: (12 + 1) = 13, 1, 3\n(3) * (13) = 39, left: (3 * (12 + 1)) = 39, 1\nroll back, left: (12 + 1) = 13, 1, 3\n(13) - (3) = 10, left: ((12 + 1) - 3) = 10, 1\nroll back, left: (12 + 1) = 13, 1, 3\nroll back, left: 12 1 1 3\n(12) / (1) = 12, left: (12 / 1) = 12, 1, 3\n(3) - (1) = 2, left: (3 - 1) = 2, (12 / 1) = 12\n(12) * (2) = 24, left: ((12 / 1) * (3 - 1)) = 24\nreach 24! expression: ((12 / 1) * (3 - 1))"}, {"input": "2 3 13 3\n", "output": "(13) - (2) = 11, left: (13 - 2) = 11, 3, 3\n(11) - (3) = 8, left: ((13 - 2) - 3) = 8, 3\n(3) * (8) = 24, left: (3 * ((13 - 2) - 3)) = 24\nreach 24! expression: (3 * ((13 - 2) - 3))"}, {"input": "2 3 13 3\n", "output": "(2) + (3) = 5, left: (2 + 3) = 5, 13, 3\n(13) - (5) = 8, left: (13 - (2 + 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (2 + 3))) = 24\nreach 24! expression: (3 * (13 - (2 + 3)))"}, {"input": "2 3 13 3\n", "output": "(3) / (3) = 1, left: (3 / 3) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (3 / 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (3 / 3))) = 24\nreach 24! expression: (2 * (13 - (3 / 3)))"}, {"input": "2 3 13 3\n", "output": "(3) * (3) = 9, left: (3 * 3) = 9, 2, 13\n(13) + (9) = 22, left: (13 + (3 * 3)) = 22, 2\n(2) + (22) = 24, left: (2 + (13 + (3 * 3))) = 24\nreach 24! expression: (2 + (13 + (3 * 3)))"}, {"input": "2 3 13 3\n", "output": "(3) + (13) = 16, left: (3 + 13) = 16, 2, 3\n(16) / (2) = 8, left: ((3 + 13) / 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 + 13) / 2)) = 24\nreach 24! expression: (3 * ((3 + 13) / 2))"}, {"input": "2 3 13 3\n", "output": "(2) - (13) = -11, left: (2 - 13) = -11, 3, 3\n(3) * (-11) = -33, left: (3 * (2 - 13)) = -33, 3\n(3) / (-33) = -1/11, left: (3 / (3 * (2 - 13))) = -1/11\nroll back, left: (3 * (2 - 13)) = -33, 3\nroll back, left: (2 - 13) = -11, 3, 3\nroll back, left: 2 3 13 3\n(13) - (2) = 11, left: (13 - 2) = 11, 3, 3\n(11) - (3) = 8, left: ((13 - 2) - 3) = 8, 3\n(3) * (8) = 24, left: (3 * ((13 - 2) - 3)) = 24\nreach 24! expression: (3 * ((13 - 2) - 3))"}, {"input": "2 3 13 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 2, 13\n(2) + (0) = 2, left: (2 + (3 - 3)) = 2, 13\nroll back, left: (3 - 3) = 0, 2, 13\n(13) + (0) = 13, left: (13 + (3 - 3)) = 13, 2\nroll back, left: (3 - 3) = 0, 2, 13\nroll back, left: 2 3 13 3\n(3) / (3) = 1, left: (3 / 3) = 1, 2, 13\n(13) - (1) = 12, left: (13 - (3 / 3)) = 12, 2\n(2) * (12) = 24, left: (2 * (13 - (3 / 3))) = 24\nreach 24! expression: (2 * (13 - (3 / 3)))"}, {"input": "2 3 13 3\n", "output": "(3) + (13) = 16, left: (3 + 13) = 16, 2, 3\n(2) + (16) = 18, left: (2 + (3 + 13)) = 18, 3\n(3) / (18) = 1/6, left: (3 / (2 + (3 + 13))) = 1/6\nroll back, left: (2 + (3 + 13)) = 18, 3\nroll back, left: (3 + 13) = 16, 2, 3\n(16) - (2) = 14, left: ((3 + 13) - 2) = 14, 3\nroll back, left: (3 + 13) = 16, 2, 3\n(16) / (2) = 8, left: ((3 + 13) / 2) = 8, 3\n(3) * (8) = 24, left: (3 * ((3 + 13) / 2)) = 24\nreach 24! expression: (3 * ((3 + 13) / 2))"}, {"input": "2 3 13 3\n", "output": "(2) - (3) = -1, left: (2 - 3) = -1, 13, 3\nroll back, left: 2 3 13 3\n(2) + (3) = 5, left: (2 + 3) = 5, 13, 3\n(5) - (3) = 2, left: ((2 + 3) - 3) = 2, 13\n(13) - (2) = 11, left: (13 - ((2 + 3) - 3)) = 11\nroll back, left: ((2 + 3) - 3) = 2, 13\nroll back, left: (2 + 3) = 5, 13, 3\n(13) - (5) = 8, left: (13 - (2 + 3)) = 8, 3\n(3) * (8) = 24, left: (3 * (13 - (2 + 3))) = 24\nreach 24! expression: (3 * (13 - (2 + 3)))"}, {"input": "8 12 6 9\n", "output": "(8) * (9) = 72, left: (8 * 9) = 72, 12, 6\n(72) / (6) = 12, left: ((8 * 9) / 6) = 12, 12\n(12) + (12) = 24, left: (12 + ((8 * 9) / 6)) = 24\nreach 24! expression: (12 + ((8 * 9) / 6))"}, {"input": "8 12 6 9\n", "output": "(12) - (6) = 6, left: (12 - 6) = 6, 8, 9\n(9) - (6) = 3, left: (9 - (12 - 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 - (12 - 6))) = 24\nreach 24! expression: (8 * (9 - (12 - 6)))"}, {"input": "8 12 6 9\n", "output": "(6) + (9) = 15, left: (6 + 9) = 15, 8, 12\n(15) - (12) = 3, left: ((6 + 9) - 12) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 + 9) - 12)) = 24\nreach 24! expression: (8 * ((6 + 9) - 12))"}, {"input": "8 12 6 9\n", "output": "(6) - (12) = -6, left: (6 - 12) = -6, 8, 9\n(9) + (-6) = 3, left: (9 + (6 - 12)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 + (6 - 12))) = 24\nreach 24! expression: (8 * (9 + (6 - 12)))"}, {"input": "8 12 6 9\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 8, 9\n(9) / (8) = 9/8, left: (9 / 8) = 9/8, (12 / 6) = 2\nroll back, left: (12 / 6) = 2, 8, 9\nroll back, left: 8 12 6 9\n(6) - (12) = -6, left: (6 - 12) = -6, 8, 9\n(8) * (9) = 72, left: (8 * 9) = 72, (6 - 12) = -6\nroll back, left: (6 - 12) = -6, 8, 9\n(9) + (-6) = 3, left: (9 + (6 - 12)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 + (6 - 12))) = 24\nreach 24! expression: (8 * (9 + (6 - 12)))"}, {"input": "8 12 6 9\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 8, 9\n(9) + (1/2) = 19/2, left: (9 + (6 / 12)) = 19/2, 8\nroll back, left: (6 / 12) = 1/2, 8, 9\nroll back, left: 8 12 6 9\n(12) * (6) = 72, left: (12 * 6) = 72, 8, 9\nroll back, left: 8 12 6 9\n(12) - (6) = 6, left: (12 - 6) = 6, 8, 9\n(9) - (6) = 3, left: (9 - (12 - 6)) = 3, 8\n(8) * (3) = 24, left: (8 * (9 - (12 - 6))) = 24\nreach 24! expression: (8 * (9 - (12 - 6)))"}, {"input": "8 12 6 9\n", "output": "(9) - (6) = 3, left: (9 - 6) = 3, 8, 12\n(12) + (3) = 15, left: (12 + (9 - 6)) = 15, 8\nroll back, left: (9 - 6) = 3, 8, 12\nroll back, left: 8 12 6 9\n(6) + (9) = 15, left: (6 + 9) = 15, 8, 12\n(8) * (15) = 120, left: (8 * (6 + 9)) = 120, 12\nroll back, left: (6 + 9) = 15, 8, 12\n(15) - (12) = 3, left: ((6 + 9) - 12) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 + 9) - 12)) = 24\nreach 24! expression: (8 * ((6 + 9) - 12))"}, {"input": "8 6 9 6\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 8, 6\n(6) + (-3) = 3, left: (6 + (6 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 + (6 - 9))) = 24\nreach 24! expression: (8 * (6 + (6 - 9)))"}, {"input": "8 6 9 6\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 6, 9\n(9) * (-2) = -18, left: (9 * (6 - 8)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (6 - 8))) = 24\nreach 24! expression: (6 - (9 * (6 - 8)))"}, {"input": "8 6 9 6\n", "output": "(6) + (6) = 12, left: (6 + 6) = 12, 8, 9\n(12) - (9) = 3, left: ((6 + 6) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 + 6) - 9)) = 24\nreach 24! expression: (8 * ((6 + 6) - 9))"}, {"input": "8 6 9 6\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (6 - 8)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (6 - 8))) = 24\nreach 24! expression: (6 - (9 * (6 - 8)))"}, {"input": "8 6 9 6\n", "output": "(6) - (9) = -3, left: (6 - 9) = -3, 8, 6\n(8) - (6) = 2, left: (8 - 6) = 2, (6 - 9) = -3\nroll back, left: (6 - 9) = -3, 8, 6\n(8) / (6) = 4/3, left: (8 / 6) = 4/3, (6 - 9) = -3\n(-3) / (4/3) = -9/4, left: ((6 - 9) / (8 / 6)) = -9/4\nroll back, left: (8 / 6) = 4/3, (6 - 9) = -3\nroll back, left: (6 - 9) = -3, 8, 6\n(6) + (-3) = 3, left: (6 + (6 - 9)) = 3, 8\n(8) * (3) = 24, left: (8 * (6 + (6 - 9))) = 24\nreach 24! expression: (8 * (6 + (6 - 9)))"}, {"input": "8 6 9 6\n", "output": "(6) * (6) = 36, left: (6 * 6) = 36, 8, 9\nroll back, left: 8 6 9 6\n(6) - (6) = 0, left: (6 - 6) = 0, 8, 9\n(9) - (0) = 9, left: (9 - (6 - 6)) = 9, 8\nroll back, left: (6 - 6) = 0, 8, 9\nroll back, left: 8 6 9 6\n(6) + (6) = 12, left: (6 + 6) = 12, 8, 9\n(12) - (9) = 3, left: ((6 + 6) - 9) = 3, 8\n(8) * (3) = 24, left: (8 * ((6 + 6) - 9)) = 24\nreach 24! expression: (8 * ((6 + 6) - 9))"}, {"input": "8 6 9 6\n", "output": "(9) - (8) = 1, left: (9 - 8) = 1, 6, 6\n(6) + (1) = 7, left: (6 + (9 - 8)) = 7, 6\nroll back, left: (9 - 8) = 1, 6, 6\nroll back, left: 8 6 9 6\n(8) + (6) = 14, left: (8 + 6) = 14, 9, 6\nroll back, left: 8 6 9 6\n(6) - (8) = -2, left: (6 - 8) = -2, 9, 6\n(9) * (-2) = -18, left: (9 * (6 - 8)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (6 - 8))) = 24\nreach 24! expression: (6 - (9 * (6 - 8)))"}, {"input": "8 6 9 6\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 6, 9\n(-2) - (6) = -8, left: ((6 - 8) - 6) = -8, 9\nroll back, left: (6 - 8) = -2, 6, 9\n(6) - (-2) = 8, left: (6 - (6 - 8)) = 8, 9\nroll back, left: (6 - 8) = -2, 6, 9\n(6) * (-2) = -12, left: (6 * (6 - 8)) = -12, 9\nroll back, left: (6 - 8) = -2, 6, 9\n(9) * (-2) = -18, left: (9 * (6 - 8)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (6 - 8))) = 24\nreach 24! expression: (6 - (9 * (6 - 8)))"}, {"input": "8 6 9 6\n", "output": "(6) - (8) = -2, left: (6 - 8) = -2, 6, 9\n(9) / (-2) = -9/2, left: (9 / (6 - 8)) = -9/2, 6\n(-9/2) / (6) = -3/4, left: ((9 / (6 - 8)) / 6) = -3/4\nroll back, left: (9 / (6 - 8)) = -9/2, 6\nroll back, left: (6 - 8) = -2, 6, 9\n(9) + (-2) = 7, left: (9 + (6 - 8)) = 7, 6\nroll back, left: (6 - 8) = -2, 6, 9\n(9) * (-2) = -18, left: (9 * (6 - 8)) = -18, 6\n(6) - (-18) = 24, left: (6 - (9 * (6 - 8))) = 24\nreach 24! expression: (6 - (9 * (6 - 8)))"}, {"input": "12 12 5 5\n", "output": "(12) / (5) = 12/5, left: (12 / 5) = 12/5, 12, 5\n(5) * (12/5) = 12, left: (5 * (12 / 5)) = 12, 12\n(12) + (12) = 24, left: (12 + (5 * (12 / 5))) = 24\nreach 24! expression: (12 + (5 * (12 / 5)))"}, {"input": "12 12 5 5\n", "output": "(12) + (5) = 17, left: (12 + 5) = 17, 12, 5\n(5) - (12) = -7, left: (5 - 12) = -7, (12 + 5) = 17\n(17) - (-7) = 24, left: ((12 + 5) - (5 - 12)) = 24\nreach 24! expression: ((12 + 5) - (5 - 12))"}, {"input": "12 12 5 5\n", "output": "(5) - (12) = -7, left: (5 - 12) = -7, 12, 5\n(12) + (5) = 17, left: (12 + 5) = 17, (5 - 12) = -7\n(17) - (-7) = 24, left: ((12 + 5) - (5 - 12)) = 24\nreach 24! expression: ((12 + 5) - (5 - 12))"}, {"input": "12 12 5 5\n", "output": "(12) - (5) = 7, left: (12 - 5) = 7, 12, 5\n(12) + (5) = 17, left: (12 + 5) = 17, (12 - 5) = 7\n(7) + (17) = 24, left: ((12 - 5) + (12 + 5)) = 24\nreach 24! expression: ((12 - 5) + (12 + 5))"}, {"input": "1 3 8 13\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 3, 8\n(8) + (13) = 21, left: (8 + (13 / 1)) = 21, 3\n(3) + (21) = 24, left: (3 + (8 + (13 / 1))) = 24\nreach 24! expression: (3 + (8 + (13 / 1)))"}, {"input": "1 3 8 13\n", "output": "(3) / (1) = 3, left: (3 / 1) = 3, 8, 13\n(13) + (3) = 16, left: (13 + (3 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (13 + (3 / 1))) = 24\nreach 24! expression: (8 + (13 + (3 / 1)))"}, {"input": "1 3 8 13\n", "output": "(3) + (8) = 11, left: (3 + 8) = 11, 1, 13\n(1) * (13) = 13, left: (1 * 13) = 13, (3 + 8) = 11\n(11) + (13) = 24, left: ((3 + 8) + (1 * 13)) = 24\nreach 24! expression: ((3 + 8) + (1 * 13))"}, {"input": "1 3 8 13\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 3, 8\n(3) + (13) = 16, left: (3 + (13 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (3 + (13 / 1))) = 24\nreach 24! expression: (8 + (3 + (13 / 1)))"}, {"input": "1 3 8 13\n", "output": "(8) + (13) = 21, left: (8 + 13) = 21, 1, 3\n(3) + (21) = 24, left: (3 + (8 + 13)) = 24, 1\n(1) * (24) = 24, left: (1 * (3 + (8 + 13))) = 24\nreach 24! expression: (1 * (3 + (8 + 13)))"}, {"input": "1 3 8 13\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 8, 13\n(8) * (13) = 104, left: (8 * 13) = 104, (1 - 3) = -2\nroll back, left: (1 - 3) = -2, 8, 13\n(13) - (8) = 5, left: (13 - 8) = 5, (1 - 3) = -2\nroll back, left: (1 - 3) = -2, 8, 13\nroll back, left: 1 3 8 13\n(3) / (1) = 3, left: (3 / 1) = 3, 8, 13\n(13) + (3) = 16, left: (13 + (3 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (13 + (3 / 1))) = 24\nreach 24! expression: (8 + (13 + (3 / 1)))"}, {"input": "1 3 8 13\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 3, 8\n(3) + (13) = 16, left: (3 + (13 / 1)) = 16, 8\n(8) * (16) = 128, left: (8 * (3 + (13 / 1))) = 128\nroll back, left: (3 + (13 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (3 + (13 / 1))) = 24\nreach 24! expression: (8 + (3 + (13 / 1)))"}, {"input": "1 3 8 13\n", "output": "(13) - (8) = 5, left: (13 - 8) = 5, 1, 3\n(1) - (3) = -2, left: (1 - 3) = -2, (13 - 8) = 5\nroll back, left: (13 - 8) = 5, 1, 3\nroll back, left: 1 3 8 13\n(8) - (13) = -5, left: (8 - 13) = -5, 1, 3\nroll back, left: 1 3 8 13\n(8) + (13) = 21, left: (8 + 13) = 21, 1, 3\n(3) + (21) = 24, left: (3 + (8 + 13)) = 24, 1\n(1) * (24) = 24, left: (1 * (3 + (8 + 13))) = 24\nreach 24! expression: (1 * (3 + (8 + 13)))"}, {"input": "1 3 8 13\n", "output": "(3) - (8) = -5, left: (3 - 8) = -5, 1, 13\n(1) / (13) = 1/13, left: (1 / 13) = 1/13, (3 - 8) = -5\nroll back, left: (3 - 8) = -5, 1, 13\n(-5) / (1) = -5, left: ((3 - 8) / 1) = -5, 13\nroll back, left: (3 - 8) = -5, 1, 13\nroll back, left: 1 3 8 13\n(3) + (8) = 11, left: (3 + 8) = 11, 1, 13\n(1) * (13) = 13, left: (1 * 13) = 13, (3 + 8) = 11\n(11) + (13) = 24, left: ((3 + 8) + (1 * 13)) = 24\nreach 24! expression: ((3 + 8) + (1 * 13))"}, {"input": "1 3 8 13\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 3, 8\n(3) + (13) = 16, left: (3 + (13 / 1)) = 16, 8\n(8) * (16) = 128, left: (8 * (3 + (13 / 1))) = 128\nroll back, left: (3 + (13 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (3 + (13 / 1))) = 24\nreach 24! expression: (8 + (3 + (13 / 1)))"}, {"input": "1 3 8 13\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 3, 8\n(3) + (13) = 16, left: (3 + (13 / 1)) = 16, 8\n(8) * (16) = 128, left: (8 * (3 + (13 / 1))) = 128\nroll back, left: (3 + (13 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (3 + (13 / 1))) = 24\nreach 24! expression: (8 + (3 + (13 / 1)))"}, {"input": "1 3 8 13\n", "output": "(13) / (1) = 13, left: (13 / 1) = 13, 3, 8\n(3) + (13) = 16, left: (3 + (13 / 1)) = 16, 8\n(8) * (16) = 128, left: (8 * (3 + (13 / 1))) = 128\nroll back, left: (3 + (13 / 1)) = 16, 8\n(8) + (16) = 24, left: (8 + (3 + (13 / 1))) = 24\nreach 24! expression: (8 + (3 + (13 / 1)))"}, {"input": "5 11 13 5\n", "output": "(11) / (5) = 11/5, left: (11 / 5) = 11/5, 13, 5\n(5) * (11/5) = 11, left: (5 * (11 / 5)) = 11, 13\n(13) + (11) = 24, left: (13 + (5 * (11 / 5))) = 24\nreach 24! expression: (13 + (5 * (11 / 5)))"}, {"input": "5 11 13 5\n", "output": "(13) - (5) = 8, left: (13 - 5) = 8, 11, 5\n(11) + (5) = 16, left: (11 + 5) = 16, (13 - 5) = 8\n(8) + (16) = 24, left: ((13 - 5) + (11 + 5)) = 24\nreach 24! expression: ((13 - 5) + (11 + 5))"}, {"input": "5 11 13 5\n", "output": "(5) - (11) = -6, left: (5 - 11) = -6, 5, 13\n(-6) - (5) = -11, left: ((5 - 11) - 5) = -11, 13\n(13) - (-11) = 24, left: (13 - ((5 - 11) - 5)) = 24\nreach 24! expression: (13 - ((5 - 11) - 5))"}, {"input": "5 11 13 5\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 11, 13\n(0) - (11) = -11, left: ((5 - 5) - 11) = -11, 13\n(13) - (-11) = 24, left: (13 - ((5 - 5) - 11)) = 24\nreach 24! expression: (13 - ((5 - 5) - 11))"}, {"input": "5 11 13 5\n", "output": "(11) + (13) = 24, left: (11 + 13) = 24, 5, 5\n(24) - (5) = 19, left: ((11 + 13) - 5) = 19, 5\n(5) + (19) = 24, left: (5 + ((11 + 13) - 5)) = 24\nreach 24! expression: (5 + ((11 + 13) - 5))"}, {"input": "5 5 5 9\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 5, 5\n(5) + (14) = 19, left: (5 + (5 + 9)) = 19, 5\n(5) + (19) = 24, left: (5 + (5 + (5 + 9))) = 24\nreach 24! expression: (5 + (5 + (5 + 9)))"}, {"input": "5 5 5 9\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 5, 9\n(5) + (10) = 15, left: (5 + (5 + 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 + (5 + 5))) = 24\nreach 24! expression: (9 + (5 + (5 + 5)))"}, {"input": "5 5 5 9\n", "output": "(5) + (9) = 14, left: (5 + 9) = 14, 5, 5\n(5) + (5) = 10, left: (5 + 5) = 10, (5 + 9) = 14\n(14) + (10) = 24, left: ((5 + 9) + (5 + 5)) = 24\nreach 24! expression: ((5 + 9) + (5 + 5))"}, {"input": "5 5 5 9\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 5, 9\n(5) + (9) = 14, left: (5 + 9) = 14, (5 + 5) = 10\n(10) + (14) = 24, left: ((5 + 5) + (5 + 9)) = 24\nreach 24! expression: ((5 + 5) + (5 + 9))"}, {"input": "5 5 5 9\n", "output": "(5) + (5) = 10, left: (5 + 5) = 10, 5, 9\n(10) - (5) = 5, left: ((5 + 5) - 5) = 5, 9\nroll back, left: (5 + 5) = 10, 5, 9\n(5) - (10) = -5, left: (5 - (5 + 5)) = -5, 9\nroll back, left: (5 + 5) = 10, 5, 9\n(5) * (10) = 50, left: (5 * (5 + 5)) = 50, 9\nroll back, left: (5 + 5) = 10, 5, 9\n(5) + (10) = 15, left: (5 + (5 + 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 + (5 + 5))) = 24\nreach 24! expression: (9 + (5 + (5 + 5)))"}, {"input": "5 5 5 9\n", "output": "(9) - (5) = 4, left: (9 - 5) = 4, 5, 5\nroll back, left: 5 5 5 9\n(9) / (5) = 9/5, left: (9 / 5) = 9/5, 5, 5\n(9/5) - (5) = -16/5, left: ((9 / 5) - 5) = -16/5, 5\nroll back, left: (9 / 5) = 9/5, 5, 5\nroll back, left: 5 5 5 9\n(5) + (9) = 14, left: (5 + 9) = 14, 5, 5\n(5) + (5) = 10, left: (5 + 5) = 10, (5 + 9) = 14\n(14) + (10) = 24, left: ((5 + 9) + (5 + 5)) = 24\nreach 24! expression: ((5 + 9) + (5 + 5))"}, {"input": "5 5 5 9\n", "output": "(5) * (9) = 45, left: (5 * 9) = 45, 5, 5\n(5) - (5) = 0, left: (5 - 5) = 0, (5 * 9) = 45\n(45) * (0) = 0, left: ((5 * 9) * (5 - 5)) = 0\nroll back, left: (5 - 5) = 0, (5 * 9) = 45\nroll back, left: (5 * 9) = 45, 5, 5\nroll back, left: 5 5 5 9\n(5) + (9) = 14, left: (5 + 9) = 14, 5, 5\n(5) + (14) = 19, left: (5 + (5 + 9)) = 19, 5\n(5) + (19) = 24, left: (5 + (5 + (5 + 9))) = 24\nreach 24! expression: (5 + (5 + (5 + 9)))"}, {"input": "5 5 5 9\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 5, 9\nroll back, left: 5 5 5 9\n(5) / (5) = 1, left: (5 / 5) = 1, 5, 9\n(1) / (5) = 1/5, left: ((5 / 5) / 5) = 1/5, 9\nroll back, left: (5 / 5) = 1, 5, 9\nroll back, left: 5 5 5 9\n(5) + (5) = 10, left: (5 + 5) = 10, 5, 9\n(5) + (10) = 15, left: (5 + (5 + 5)) = 15, 9\n(9) + (15) = 24, left: (9 + (5 + (5 + 5))) = 24\nreach 24! expression: (9 + (5 + (5 + 5)))"}, {"input": "5 7 6 3\n", "output": "(3) / (6) = 1/2, left: (3 / 6) = 1/2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (3 / 6) = 1/2\n(12) / (1/2) = 24, left: ((5 + 7) / (3 / 6)) = 24\nreach 24! expression: ((5 + 7) / (3 / 6))"}, {"input": "5 7 6 3\n", "output": "(7) + (6) = 13, left: (7 + 6) = 13, 5, 3\n(13) - (5) = 8, left: ((7 + 6) - 5) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 6) - 5)) = 24\nreach 24! expression: (3 * ((7 + 6) - 5))"}, {"input": "5 7 6 3\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 7, 3\n(7) - (-1) = 8, left: (7 - (5 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (5 - 6))) = 24\nreach 24! expression: (3 * (7 - (5 - 6)))"}, {"input": "5 7 6 3\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 7, 6\nroll back, left: 5 7 6 3\n(5) - (3) = 2, left: (5 - 3) = 2, 7, 6\n(2) - (7) = -5, left: ((5 - 3) - 7) = -5, 6\nroll back, left: (5 - 3) = 2, 7, 6\nroll back, left: 5 7 6 3\n(5) - (6) = -1, left: (5 - 6) = -1, 7, 3\n(7) - (-1) = 8, left: (7 - (5 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (5 - 6))) = 24\nreach 24! expression: (3 * (7 - (5 - 6)))"}, {"input": "5 7 6 3\n", "output": "(6) - (7) = -1, left: (6 - 7) = -1, 5, 3\n(5) / (3) = 5/3, left: (5 / 3) = 5/3, (6 - 7) = -1\nroll back, left: (6 - 7) = -1, 5, 3\nroll back, left: 5 7 6 3\n(7) + (6) = 13, left: (7 + 6) = 13, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (7 + 6) = 13\nroll back, left: (7 + 6) = 13, 5, 3\n(13) - (5) = 8, left: ((7 + 6) - 5) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 6) - 5)) = 24\nreach 24! expression: (3 * ((7 + 6) - 5))"}, {"input": "5 7 6 3\n", "output": "(7) + (6) = 13, left: (7 + 6) = 13, 5, 3\n(5) * (3) = 15, left: (5 * 3) = 15, (7 + 6) = 13\nroll back, left: (7 + 6) = 13, 5, 3\n(3) * (13) = 39, left: (3 * (7 + 6)) = 39, 5\n(5) - (39) = -34, left: (5 - (3 * (7 + 6))) = -34\nroll back, left: (3 * (7 + 6)) = 39, 5\nroll back, left: (7 + 6) = 13, 5, 3\n(13) - (5) = 8, left: ((7 + 6) - 5) = 8, 3\n(3) * (8) = 24, left: (3 * ((7 + 6) - 5)) = 24\nreach 24! expression: (3 * ((7 + 6) - 5))"}, {"input": "5 7 6 3\n", "output": "(6) + (3) = 9, left: (6 + 3) = 9, 5, 7\n(5) - (9) = -4, left: (5 - (6 + 3)) = -4, 7\nroll back, left: (6 + 3) = 9, 5, 7\nroll back, left: 5 7 6 3\n(3) / (6) = 1/2, left: (3 / 6) = 1/2, 5, 7\n(7) * (1/2) = 7/2, left: (7 * (3 / 6)) = 7/2, 5\nroll back, left: (3 / 6) = 1/2, 5, 7\n(5) + (7) = 12, left: (5 + 7) = 12, (3 / 6) = 1/2\n(12) / (1/2) = 24, left: ((5 + 7) / (3 / 6)) = 24\nreach 24! expression: ((5 + 7) / (3 / 6))"}, {"input": "5 7 6 3\n", "output": "(5) - (6) = -1, left: (5 - 6) = -1, 7, 3\n(3) / (-1) = -3, left: (3 / (5 - 6)) = -3, 7\nroll back, left: (5 - 6) = -1, 7, 3\n(7) * (3) = 21, left: (7 * 3) = 21, (5 - 6) = -1\n(-1) + (21) = 20, left: ((5 - 6) + (7 * 3)) = 20\nroll back, left: (7 * 3) = 21, (5 - 6) = -1\nroll back, left: (5 - 6) = -1, 7, 3\n(7) - (-1) = 8, left: (7 - (5 - 6)) = 8, 3\n(3) * (8) = 24, left: (3 * (7 - (5 - 6))) = 24\nreach 24! expression: (3 * (7 - (5 - 6)))"}, {"input": "9 13 9 7\n", "output": "(13) + (9) = 22, left: (13 + 9) = 22, 9, 7\n(9) + (22) = 31, left: (9 + (13 + 9)) = 31, 7\n(31) - (7) = 24, left: ((9 + (13 + 9)) - 7) = 24\nreach 24! expression: ((9 + (13 + 9)) - 7)"}, {"input": "9 13 9 7\n", "output": "(7) - (9) = -2, left: (7 - 9) = -2, 9, 13\n(-2) - (13) = -15, left: ((7 - 9) - 13) = -15, 9\n(9) - (-15) = 24, left: (9 - ((7 - 9) - 13)) = 24\nreach 24! expression: (9 - ((7 - 9) - 13))"}, {"input": "9 13 9 7\n", "output": "(9) - (7) = 2, left: (9 - 7) = 2, 9, 13\n(9) + (2) = 11, left: (9 + (9 - 7)) = 11, 13\n(13) + (11) = 24, left: (13 + (9 + (9 - 7))) = 24\nreach 24! expression: (13 + (9 + (9 - 7)))"}, {"input": "9 13 9 7\n", "output": "(9) + (13) = 22, left: (9 + 13) = 22, 9, 7\n(9) + (22) = 31, left: (9 + (9 + 13)) = 31, 7\n(31) - (7) = 24, left: ((9 + (9 + 13)) - 7) = 24\nreach 24! expression: ((9 + (9 + 13)) - 7)"}, {"input": "9 13 9 7\n", "output": "(7) - (13) = -6, left: (7 - 13) = -6, 9, 9\n(9) + (9) = 18, left: (9 + 9) = 18, (7 - 13) = -6\n(18) - (-6) = 24, left: ((9 + 9) - (7 - 13)) = 24\nreach 24! expression: ((9 + 9) - (7 - 13))"}, {"input": "9 13 9 7\n", "output": "(13) + (9) = 22, left: (13 + 9) = 22, 9, 7\n(9) + (22) = 31, left: (9 + (13 + 9)) = 31, 7\n(7) - (31) = -24, left: (7 - (9 + (13 + 9))) = -24\nroll back, left: (9 + (13 + 9)) = 31, 7\n(7) / (31) = 7/31, left: (7 / (9 + (13 + 9))) = 7/31\nroll back, left: (9 + (13 + 9)) = 31, 7\n(31) - (7) = 24, left: ((9 + (13 + 9)) - 7) = 24\nreach 24! expression: ((9 + (13 + 9)) - 7)"}, {"input": "9 13 9 7\n", "output": "(9) - (13) = -4, left: (9 - 13) = -4, 9, 7\nroll back, left: 9 13 9 7\n(13) - (9) = 4, left: (13 - 9) = 4, 9, 7\n(4) - (9) = -5, left: ((13 - 9) - 9) = -5, 7\nroll back, left: (13 - 9) = 4, 9, 7\nroll back, left: 9 13 9 7\n(9) + (13) = 22, left: (9 + 13) = 22, 9, 7\n(9) + (22) = 31, left: (9 + (9 + 13)) = 31, 7\n(31) - (7) = 24, left: ((9 + (9 + 13)) - 7) = 24\nreach 24! expression: ((9 + (9 + 13)) - 7)"}, {"input": "9 13 9 7\n", "output": "(13) + (9) = 22, left: (13 + 9) = 22, 9, 7\n(9) + (22) = 31, left: (9 + (13 + 9)) = 31, 7\n(7) - (31) = -24, left: (7 - (9 + (13 + 9))) = -24\nroll back, left: (9 + (13 + 9)) = 31, 7\n(7) / (31) = 7/31, left: (7 / (9 + (13 + 9))) = 7/31\nroll back, left: (9 + (13 + 9)) = 31, 7\n(31) - (7) = 24, left: ((9 + (13 + 9)) - 7) = 24\nreach 24! expression: ((9 + (13 + 9)) - 7)"}, {"input": "9 13 9 7\n", "output": "(13) + (9) = 22, left: (13 + 9) = 22, 9, 7\n(9) + (22) = 31, left: (9 + (13 + 9)) = 31, 7\n(7) - (31) = -24, left: (7 - (9 + (13 + 9))) = -24\nroll back, left: (9 + (13 + 9)) = 31, 7\n(7) / (31) = 7/31, left: (7 / (9 + (13 + 9))) = 7/31\nroll back, left: (9 + (13 + 9)) = 31, 7\n(31) - (7) = 24, left: ((9 + (13 + 9)) - 7) = 24\nreach 24! expression: ((9 + (13 + 9)) - 7)"}, {"input": "9 13 9 7\n", "output": "(13) + (9) = 22, left: (13 + 9) = 22, 9, 7\n(9) + (22) = 31, left: (9 + (13 + 9)) = 31, 7\n(7) - (31) = -24, left: (7 - (9 + (13 + 9))) = -24\nroll back, left: (9 + (13 + 9)) = 31, 7\n(7) / (31) = 7/31, left: (7 / (9 + (13 + 9))) = 7/31\nroll back, left: (9 + (13 + 9)) = 31, 7\n(31) - (7) = 24, left: ((9 + (13 + 9)) - 7) = 24\nreach 24! expression: ((9 + (13 + 9)) - 7)"}, {"input": "1 1 6 2\n", "output": "(6) * (2) = 12, left: (6 * 2) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (6 * 2) = 12\n(12) * (2) = 24, left: ((6 * 2) * (1 + 1)) = 24\nreach 24! expression: ((6 * 2) * (1 + 1))"}, {"input": "1 1 6 2\n", "output": "(1) + (1) = 2, left: (1 + 1) = 2, 6, 2\n(2) + (2) = 4, left: (2 + (1 + 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 + (1 + 1))) = 24\nreach 24! expression: (6 * (2 + (1 + 1)))"}, {"input": "1 1 6 2\n", "output": "(1) + (2) = 3, left: (1 + 2) = 3, 1, 6\n(1) + (3) = 4, left: (1 + (1 + 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (1 + 2))) = 24\nreach 24! expression: (6 * (1 + (1 + 2)))"}, {"input": "1 1 6 2\n", "output": "(2) / (6) = 1/3, left: (2 / 6) = 1/3, 1, 1\n(1/3) / (1) = 1/3, left: ((2 / 6) / 1) = 1/3, 1\nroll back, left: (2 / 6) = 1/3, 1, 1\nroll back, left: 1 1 6 2\n(6) - (2) = 4, left: (6 - 2) = 4, 1, 1\nroll back, left: 1 1 6 2\n(6) * (2) = 12, left: (6 * 2) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (6 * 2) = 12\n(12) * (2) = 24, left: ((6 * 2) * (1 + 1)) = 24\nreach 24! expression: ((6 * 2) * (1 + 1))"}, {"input": "1 1 6 2\n", "output": "(1) * (2) = 2, left: (1 * 2) = 2, 1, 6\nroll back, left: 1 1 6 2\n(2) / (1) = 2, left: (2 / 1) = 2, 1, 6\n(6) / (1) = 6, left: (6 / 1) = 6, (2 / 1) = 2\nroll back, left: (2 / 1) = 2, 1, 6\nroll back, left: 1 1 6 2\n(1) + (2) = 3, left: (1 + 2) = 3, 1, 6\n(1) + (3) = 4, left: (1 + (1 + 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (1 + 2))) = 24\nreach 24! expression: (6 * (1 + (1 + 2)))"}, {"input": "1 1 6 2\n", "output": "(2) / (1) = 2, left: (2 / 1) = 2, 1, 6\n(6) / (1) = 6, left: (6 / 1) = 6, (2 / 1) = 2\nroll back, left: (2 / 1) = 2, 1, 6\nroll back, left: 1 1 6 2\n(1) + (2) = 3, left: (1 + 2) = 3, 1, 6\n(6) * (3) = 18, left: (6 * (1 + 2)) = 18, 1\nroll back, left: (1 + 2) = 3, 1, 6\n(1) + (3) = 4, left: (1 + (1 + 2)) = 4, 6\n(6) * (4) = 24, left: (6 * (1 + (1 + 2))) = 24\nreach 24! expression: (6 * (1 + (1 + 2)))"}, {"input": "1 1 6 2\n", "output": "(1) / (6) = 1/6, left: (1 / 6) = 1/6, 1, 2\nroll back, left: 1 1 6 2\n(1) / (1) = 1, left: (1 / 1) = 1, 6, 2\n(1) / (2) = 1/2, left: ((1 / 1) / 2) = 1/2, 6\nroll back, left: (1 / 1) = 1, 6, 2\nroll back, left: 1 1 6 2\n(1) + (1) = 2, left: (1 + 1) = 2, 6, 2\n(2) + (2) = 4, left: (2 + (1 + 1)) = 4, 6\n(6) * (4) = 24, left: (6 * (2 + (1 + 1))) = 24\nreach 24! expression: (6 * (2 + (1 + 1)))"}, {"input": "1 1 6 2\n", "output": "(6) / (1) = 6, left: (6 / 1) = 6, 1, 2\nroll back, left: 1 1 6 2\n(2) - (6) = -4, left: (2 - 6) = -4, 1, 1\n(1) - (-4) = 5, left: (1 - (2 - 6)) = 5, 1\nroll back, left: (2 - 6) = -4, 1, 1\nroll back, left: 1 1 6 2\n(6) * (2) = 12, left: (6 * 2) = 12, 1, 1\n(1) + (1) = 2, left: (1 + 1) = 2, (6 * 2) = 12\n(12) * (2) = 24, left: ((6 * 2) * (1 + 1)) = 24\nreach 24! expression: ((6 * 2) * (1 + 1))"}, {"input": "13 3 4 4\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 3, 4\n(9) - (3) = 6, left: ((13 - 4) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((13 - 4) - 3)) = 24\nreach 24! expression: (4 * ((13 - 4) - 3))"}, {"input": "13 3 4 4\n", "output": "(3) + (4) = 7, left: (3 + 4) = 7, 13, 4\n(13) + (7) = 20, left: (13 + (3 + 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (13 + (3 + 4))) = 24\nreach 24! expression: (4 + (13 + (3 + 4)))"}, {"input": "13 3 4 4\n", "output": "(13) + (4) = 17, left: (13 + 4) = 17, 3, 4\n(3) + (17) = 20, left: (3 + (13 + 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (3 + (13 + 4))) = 24\nreach 24! expression: (4 + (3 + (13 + 4)))"}, {"input": "13 3 4 4\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 3, 4\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, (13 - 4) = 9\nroll back, left: (13 - 4) = 9, 3, 4\n(3) * (9) = 27, left: (3 * (13 - 4)) = 27, 4\nroll back, left: (13 - 4) = 9, 3, 4\n(3) + (9) = 12, left: (3 + (13 - 4)) = 12, 4\nroll back, left: (13 - 4) = 9, 3, 4\n(9) - (3) = 6, left: ((13 - 4) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((13 - 4) - 3)) = 24\nreach 24! expression: (4 * ((13 - 4) - 3))"}, {"input": "13 3 4 4\n", "output": "(4) / (13) = 4/13, left: (4 / 13) = 4/13, 3, 4\n(4) - (3) = 1, left: (4 - 3) = 1, (4 / 13) = 4/13\nroll back, left: (4 / 13) = 4/13, 3, 4\nroll back, left: 13 3 4 4\n(13) / (4) = 13/4, left: (13 / 4) = 13/4, 3, 4\nroll back, left: 13 3 4 4\n(13) - (4) = 9, left: (13 - 4) = 9, 3, 4\n(9) - (3) = 6, left: ((13 - 4) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((13 - 4) - 3)) = 24\nreach 24! expression: (4 * ((13 - 4) - 3))"}, {"input": "13 3 4 4\n", "output": "(3) - (4) = -1, left: (3 - 4) = -1, 13, 4\nroll back, left: 13 3 4 4\n(4) / (3) = 4/3, left: (4 / 3) = 4/3, 13, 4\n(4/3) - (4) = -8/3, left: ((4 / 3) - 4) = -8/3, 13\nroll back, left: (4 / 3) = 4/3, 13, 4\nroll back, left: 13 3 4 4\n(3) + (4) = 7, left: (3 + 4) = 7, 13, 4\n(13) + (7) = 20, left: (13 + (3 + 4)) = 20, 4\n(4) + (20) = 24, left: (4 + (13 + (3 + 4))) = 24\nreach 24! expression: (4 + (13 + (3 + 4)))"}, {"input": "13 3 4 4\n", "output": "(13) - (4) = 9, left: (13 - 4) = 9, 3, 4\n(3) - (9) = -6, left: (3 - (13 - 4)) = -6, 4\n(4) / (-6) = -2/3, left: (4 / (3 - (13 - 4))) = -2/3\nroll back, left: (3 - (13 - 4)) = -6, 4\n(4) + (-6) = -2, left: (4 + (3 - (13 - 4))) = -2\nroll back, left: (3 - (13 - 4)) = -6, 4\nroll back, left: (13 - 4) = 9, 3, 4\n(9) - (3) = 6, left: ((13 - 4) - 3) = 6, 4\n(4) * (6) = 24, left: (4 * ((13 - 4) - 3)) = 24\nreach 24! expression: (4 * ((13 - 4) - 3))"}, {"input": "9 5 3 3\n", "output": "(5) - (3) = 2, left: (5 - 3) = 2, 9, 3\n(9) + (3) = 12, left: (9 + 3) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (9 + 3)) = 24\nreach 24! expression: ((5 - 3) * (9 + 3))"}, {"input": "9 5 3 3\n", "output": "(3) / (9) = 1/3, left: (3 / 9) = 1/3, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (3 / 9) = 1/3\n(8) / (1/3) = 24, left: ((5 + 3) / (3 / 9)) = 24\nreach 24! expression: ((5 + 3) / (3 / 9))"}, {"input": "9 5 3 3\n", "output": "(3) + (3) = 6, left: (3 + 3) = 6, 9, 5\n(9) - (5) = 4, left: (9 - 5) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (9 - 5)) = 24\nreach 24! expression: ((3 + 3) * (9 - 5))"}, {"input": "9 5 3 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 9, 3\n(9) / (3) = 3, left: (9 / 3) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (9 / 3)) = 24\nreach 24! expression: ((5 + 3) * (9 / 3))"}, {"input": "9 5 3 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 9, 3\n(9) / (3) = 3, left: (9 / 3) = 3, (5 + 3) = 8\n(3) / (8) = 3/8, left: ((9 / 3) / (5 + 3)) = 3/8\nroll back, left: (9 / 3) = 3, (5 + 3) = 8\n(8) + (3) = 11, left: ((5 + 3) + (9 / 3)) = 11\nroll back, left: (9 / 3) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (9 / 3)) = 24\nreach 24! expression: ((5 + 3) * (9 / 3))"}, {"input": "9 5 3 3\n", "output": "(3) / (5) = 3/5, left: (3 / 5) = 3/5, 9, 3\n(9) * (3) = 27, left: (9 * 3) = 27, (3 / 5) = 3/5\nroll back, left: (3 / 5) = 3/5, 9, 3\nroll back, left: 9 5 3 3\n(3) - (5) = -2, left: (3 - 5) = -2, 9, 3\nroll back, left: 9 5 3 3\n(5) - (3) = 2, left: (5 - 3) = 2, 9, 3\n(9) + (3) = 12, left: (9 + 3) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (9 + 3)) = 24\nreach 24! expression: ((5 - 3) * (9 + 3))"}, {"input": "9 5 3 3\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 9, 3\n(9) * (-2) = -18, left: (9 * (3 - 5)) = -18, 3\nroll back, left: (3 - 5) = -2, 9, 3\nroll back, left: 9 5 3 3\n(5) - (3) = 2, left: (5 - 3) = 2, 9, 3\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, (5 - 3) = 2\nroll back, left: (5 - 3) = 2, 9, 3\n(9) + (3) = 12, left: (9 + 3) = 12, (5 - 3) = 2\n(2) * (12) = 24, left: ((5 - 3) * (9 + 3)) = 24\nreach 24! expression: ((5 - 3) * (9 + 3))"}, {"input": "9 5 3 3\n", "output": "(3) - (9) = -6, left: (3 - 9) = -6, 5, 3\nroll back, left: 9 5 3 3\n(3) / (9) = 1/3, left: (3 / 9) = 1/3, 5, 3\n(5) - (1/3) = 14/3, left: (5 - (3 / 9)) = 14/3, 3\n(3) - (14/3) = -5/3, left: (3 - (5 - (3 / 9))) = -5/3\nroll back, left: (5 - (3 / 9)) = 14/3, 3\nroll back, left: (3 / 9) = 1/3, 5, 3\n(5) + (3) = 8, left: (5 + 3) = 8, (3 / 9) = 1/3\n(8) / (1/3) = 24, left: ((5 + 3) / (3 / 9)) = 24\nreach 24! expression: ((5 + 3) / (3 / 9))"}, {"input": "9 5 3 3\n", "output": "(3) - (3) = 0, left: (3 - 3) = 0, 9, 5\nroll back, left: 9 5 3 3\n(3) * (3) = 9, left: (3 * 3) = 9, 9, 5\n(5) + (9) = 14, left: (5 + (3 * 3)) = 14, 9\nroll back, left: (3 * 3) = 9, 9, 5\nroll back, left: 9 5 3 3\n(3) + (3) = 6, left: (3 + 3) = 6, 9, 5\n(9) - (5) = 4, left: (9 - 5) = 4, (3 + 3) = 6\n(6) * (4) = 24, left: ((3 + 3) * (9 - 5)) = 24\nreach 24! expression: ((3 + 3) * (9 - 5))"}, {"input": "9 5 3 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 9, 3\n(9) / (3) = 3, left: (9 / 3) = 3, (5 + 3) = 8\n(3) / (8) = 3/8, left: ((9 / 3) / (5 + 3)) = 3/8\nroll back, left: (9 / 3) = 3, (5 + 3) = 8\n(8) + (3) = 11, left: ((5 + 3) + (9 / 3)) = 11\nroll back, left: (9 / 3) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (9 / 3)) = 24\nreach 24! expression: ((5 + 3) * (9 / 3))"}, {"input": "9 5 3 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 9, 3\n(9) / (3) = 3, left: (9 / 3) = 3, (5 + 3) = 8\n(3) / (8) = 3/8, left: ((9 / 3) / (5 + 3)) = 3/8\nroll back, left: (9 / 3) = 3, (5 + 3) = 8\n(8) + (3) = 11, left: ((5 + 3) + (9 / 3)) = 11\nroll back, left: (9 / 3) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (9 / 3)) = 24\nreach 24! expression: ((5 + 3) * (9 / 3))"}, {"input": "9 5 3 3\n", "output": "(5) + (3) = 8, left: (5 + 3) = 8, 9, 3\n(9) / (3) = 3, left: (9 / 3) = 3, (5 + 3) = 8\n(3) / (8) = 3/8, left: ((9 / 3) / (5 + 3)) = 3/8\nroll back, left: (9 / 3) = 3, (5 + 3) = 8\n(8) + (3) = 11, left: ((5 + 3) + (9 / 3)) = 11\nroll back, left: (9 / 3) = 3, (5 + 3) = 8\n(8) * (3) = 24, left: ((5 + 3) * (9 / 3)) = 24\nreach 24! expression: ((5 + 3) * (9 / 3))"}, {"input": "1 12 11 6\n", "output": "(12) / (6) = 2, left: (12 / 6) = 2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (12 / 6) = 2\n(2) * (12) = 24, left: ((12 / 6) * (1 + 11)) = 24\nreach 24! expression: ((12 / 6) * (1 + 11))"}, {"input": "1 12 11 6\n", "output": "(6) / (12) = 1/2, left: (6 / 12) = 1/2, 1, 11\n(1) + (11) = 12, left: (1 + 11) = 12, (6 / 12) = 1/2\n(12) / (1/2) = 24, left: ((1 + 11) / (6 / 12)) = 24\nreach 24! expression: ((1 + 11) / (6 / 12))"}, {"input": "1 12 11 6\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 12, 6\n(6) / (12) = 1/2, left: (6 / 12) = 1/2, (1 + 11) = 12\n(12) / (1/2) = 24, left: ((1 + 11) / (6 / 12)) = 24\nreach 24! expression: ((1 + 11) / (6 / 12))"}, {"input": "1 12 11 6\n", "output": "(1) + (11) = 12, left: (1 + 11) = 12, 12, 6\n(12) / (6) = 2, left: (12 / 6) = 2, (1 + 11) = 12\n(12) * (2) = 24, left: ((1 + 11) * (12 / 6)) = 24\nreach 24! expression: ((1 + 11) * (12 / 6))"}, {"input": "13 7 1 3\n", "output": "(13) + (3) = 16, left: (13 + 3) = 16, 7, 1\n(1) + (16) = 17, left: (1 + (13 + 3)) = 17, 7\n(7) + (17) = 24, left: (7 + (1 + (13 + 3))) = 24\nreach 24! expression: (7 + (1 + (13 + 3)))"}, {"input": "13 7 1 3\n", "output": "(13) + (7) = 20, left: (13 + 7) = 20, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (13 + 7) = 20\n(20) + (4) = 24, left: ((13 + 7) + (1 + 3)) = 24\nreach 24! expression: ((13 + 7) + (1 + 3))"}, {"input": "13 7 1 3\n", "output": "(7) + (1) = 8, left: (7 + 1) = 8, 13, 3\n(13) + (3) = 16, left: (13 + 3) = 16, (7 + 1) = 8\n(8) + (16) = 24, left: ((7 + 1) + (13 + 3)) = 24\nreach 24! expression: ((7 + 1) + (13 + 3))"}, {"input": "13 7 1 3\n", "output": "(1) + (3) = 4, left: (1 + 3) = 4, 13, 7\n(7) + (4) = 11, left: (7 + (1 + 3)) = 11, 13\n(13) + (11) = 24, left: (13 + (7 + (1 + 3))) = 24\nreach 24! expression: (13 + (7 + (1 + 3)))"}, {"input": "13 7 1 3\n", "output": "(13) - (3) = 10, left: (13 - 3) = 10, 7, 1\nroll back, left: 13 7 1 3\n(3) / (13) = 3/13, left: (3 / 13) = 3/13, 7, 1\n(1) + (3/13) = 16/13, left: (1 + (3 / 13)) = 16/13, 7\nroll back, left: (3 / 13) = 3/13, 7, 1\nroll back, left: 13 7 1 3\n(13) + (3) = 16, left: (13 + 3) = 16, 7, 1\n(1) + (16) = 17, left: (1 + (13 + 3)) = 17, 7\n(7) + (17) = 24, left: (7 + (1 + (13 + 3))) = 24\nreach 24! expression: (7 + (1 + (13 + 3)))"}, {"input": "13 7 1 3\n", "output": "(1) - (3) = -2, left: (1 - 3) = -2, 13, 7\nroll back, left: 13 7 1 3\n(3) - (1) = 2, left: (3 - 1) = 2, 13, 7\nroll back, left: 13 7 1 3\n(1) + (3) = 4, left: (1 + 3) = 4, 13, 7\n(4) / (7) = 4/7, left: ((1 + 3) / 7) = 4/7, 13\nroll back, left: (1 + 3) = 4, 13, 7\n(7) + (4) = 11, left: (7 + (1 + 3)) = 11, 13\n(13) + (11) = 24, left: (13 + (7 + (1 + 3))) = 24\nreach 24! expression: (13 + (7 + (1 + 3)))"}, {"input": "13 7 1 3\n", "output": "(13) / (7) = 13/7, left: (13 / 7) = 13/7, 1, 3\nroll back, left: 13 7 1 3\n(7) - (13) = -6, left: (7 - 13) = -6, 1, 3\n(1) / (-6) = -1/6, left: (1 / (7 - 13)) = -1/6, 3\nroll back, left: (7 - 13) = -6, 1, 3\nroll back, left: 13 7 1 3\n(13) + (7) = 20, left: (13 + 7) = 20, 1, 3\n(1) + (3) = 4, left: (1 + 3) = 4, (13 + 7) = 20\n(20) + (4) = 24, left: ((13 + 7) + (1 + 3)) = 24\nreach 24! expression: ((13 + 7) + (1 + 3))"}, {"input": "5 8 8 5\n", "output": "(5) * (5) = 25, left: (5 * 5) = 25, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (8 / 8)) = 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(8) / (8) = 1, left: (8 / 8) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (8 / 8) = 1\n(25) - (1) = 24, left: ((5 * 5) - (8 / 8)) = 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(5) / (5) = 1, left: (5 / 5) = 1, 8, 8\nroll back, left: 5 8 8 5\n(5) - (5) = 0, left: (5 - 5) = 0, 8, 8\n(8) - (0) = 8, left: (8 - (5 - 5)) = 8, 8\nroll back, left: (5 - 5) = 0, 8, 8\nroll back, left: 5 8 8 5\n(5) * (5) = 25, left: (5 * 5) = 25, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (8 / 8)) = 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(5) - (8) = -3, left: (5 - 8) = -3, 5, 8\nroll back, left: 5 8 8 5\n(5) / (8) = 5/8, left: (5 / 8) = 5/8, 5, 8\nroll back, left: 5 8 8 5\n(5) / (5) = 1, left: (5 / 5) = 1, 8, 8\nroll back, left: 5 8 8 5\n(5) * (5) = 25, left: (5 * 5) = 25, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (8 / 8)) = 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(5) - (5) = 0, left: (5 - 5) = 0, 8, 8\n(8) * (8) = 64, left: (8 * 8) = 64, (5 - 5) = 0\nroll back, left: (5 - 5) = 0, 8, 8\nroll back, left: 5 8 8 5\n(5) + (5) = 10, left: (5 + 5) = 10, 8, 8\nroll back, left: 5 8 8 5\n(5) * (5) = 25, left: (5 * 5) = 25, 8, 8\n(8) / (8) = 1, left: (8 / 8) = 1, (5 * 5) = 25\n(25) - (1) = 24, left: ((5 * 5) - (8 / 8)) = 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(8) + (8) = 16, left: (8 + 8) = 16, 5, 5\nroll back, left: 5 8 8 5\n(8) / (8) = 1, left: (8 / 8) = 1, 5, 5\n(5) + (1) = 6, left: (5 + (8 / 8)) = 6, 5\nroll back, left: (8 / 8) = 1, 5, 5\n(5) * (1) = 5, left: (5 * (8 / 8)) = 5, 5\nroll back, left: (8 / 8) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (8 / 8) = 1\n(25) - (1) = 24, left: ((5 * 5) - (8 / 8)) = 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "5 8 8 5\n", "output": "(8) - (8) = 0, left: (8 - 8) = 0, 5, 5\nroll back, left: 5 8 8 5\n(8) - (8) = 0, left: (8 - 8) = 0, 5, 5\n(5) * (0) = 0, left: (5 * (8 - 8)) = 0, 5\nroll back, left: (8 - 8) = 0, 5, 5\nroll back, left: 5 8 8 5\n(8) / (8) = 1, left: (8 / 8) = 1, 5, 5\n(5) * (5) = 25, left: (5 * 5) = 25, (8 / 8) = 1\n(25) - (1) = 24, left: ((5 * 5) - (8 / 8)) = 24\nreach 24! expression: ((5 * 5) - (8 / 8))"}, {"input": "13 6 8 13\n", "output": "(13) + (13) = 26, left: (13 + 13) = 26, 6, 8\n(6) + (26) = 32, left: (6 + (13 + 13)) = 32, 8\n(32) - (8) = 24, left: ((6 + (13 + 13)) - 8) = 24\nreach 24! expression: ((6 + (13 + 13)) - 8)"}, {"input": "13 6 8 13\n", "output": "(6) + (13) = 19, left: (6 + 13) = 19, 13, 8\n(13) - (8) = 5, left: (13 - 8) = 5, (6 + 13) = 19\n(19) + (5) = 24, left: ((6 + 13) + (13 - 8)) = 24\nreach 24! expression: ((6 + 13) + (13 - 8))"}, {"input": "13 6 8 13\n", "output": "(13) + (6) = 19, left: (13 + 6) = 19, 8, 13\n(19) - (8) = 11, left: ((13 + 6) - 8) = 11, 13\n(13) + (11) = 24, left: (13 + ((13 + 6) - 8)) = 24\nreach 24! expression: (13 + ((13 + 6) - 8))"}, {"input": "13 6 8 13\n", "output": "(13) + (13) = 26, left: (13 + 13) = 26, 6, 8\n(6) - (8) = -2, left: (6 - 8) = -2, (13 + 13) = 26\n(26) + (-2) = 24, left: ((13 + 13) + (6 - 8)) = 24\nreach 24! expression: ((13 + 13) + (6 - 8))"}, {"input": "13 6 8 13\n", "output": "(13) - (13) = 0, left: (13 - 13) = 0, 6, 8\nroll back, left: 13 6 8 13\n(13) / (13) = 1, left: (13 / 13) = 1, 6, 8\n(6) + (8) = 14, left: (6 + 8) = 14, (13 / 13) = 1\nroll back, left: (13 / 13) = 1, 6, 8\nroll back, left: 13 6 8 13\n(13) + (13) = 26, left: (13 + 13) = 26, 6, 8\n(6) + (26) = 32, left: (6 + (13 + 13)) = 32, 8\n(32) - (8) = 24, left: ((6 + (13 + 13)) - 8) = 24\nreach 24! expression: ((6 + (13 + 13)) - 8)"}, {"input": "13 6 8 13\n", "output": "(13) / (6) = 13/6, left: (13 / 6) = 13/6, 8, 13\nroll back, left: 13 6 8 13\n(6) / (13) = 6/13, left: (6 / 13) = 6/13, 8, 13\nroll back, left: 13 6 8 13\n(6) - (13) = -7, left: (6 - 13) = -7, 8, 13\nroll back, left: 13 6 8 13\n(13) + (6) = 19, left: (13 + 6) = 19, 8, 13\n(19) - (8) = 11, left: ((13 + 6) - 8) = 11, 13\n(13) + (11) = 24, left: (13 + ((13 + 6) - 8)) = 24\nreach 24! expression: (13 + ((13 + 6) - 8))"}, {"input": "13 6 8 13\n", "output": "(13) - (13) = 0, left: (13 - 13) = 0, 6, 8\nroll back, left: 13 6 8 13\n(13) / (13) = 1, left: (13 / 13) = 1, 6, 8\n(6) + (8) = 14, left: (6 + 8) = 14, (13 / 13) = 1\nroll back, left: (13 / 13) = 1, 6, 8\nroll back, left: 13 6 8 13\n(13) + (13) = 26, left: (13 + 13) = 26, 6, 8\n(6) - (8) = -2, left: (6 - 8) = -2, (13 + 13) = 26\n(26) + (-2) = 24, left: ((13 + 13) + (6 - 8)) = 24\nreach 24! expression: ((13 + 13) + (6 - 8))"}, {"input": "12 3 5 12\n", "output": "(12) * (5) = 60, left: (12 * 5) = 60, 3, 12\n(3) * (12) = 36, left: (3 * 12) = 36, (12 * 5) = 60\n(60) - (36) = 24, left: ((12 * 5) - (3 * 12)) = 24\nreach 24! expression: ((12 * 5) - (3 * 12))"}, {"input": "12 3 5 12\n", "output": "(5) * (12) = 60, left: (5 * 12) = 60, 12, 3\n(12) * (3) = 36, left: (12 * 3) = 36, (5 * 12) = 60\n(60) - (36) = 24, left: ((5 * 12) - (12 * 3)) = 24\nreach 24! expression: ((5 * 12) - (12 * 3))"}, {"input": "12 3 5 12\n", "output": "(5) * (12) = 60, left: (5 * 12) = 60, 12, 3\n(12) + (60) = 72, left: (12 + (5 * 12)) = 72, 3\n(72) / (3) = 24, left: ((12 + (5 * 12)) / 3) = 24\nreach 24! expression: ((12 + (5 * 12)) / 3)"}, {"input": "12 3 5 12\n", "output": "(12) / (12) = 1, left: (12 / 12) = 1, 3, 5\n(5) / (1) = 5, left: (5 / (12 / 12)) = 5, 3\nroll back, left: (12 / 12) = 1, 3, 5\nroll back, left: 12 3 5 12\n(12) * (12) = 144, left: (12 * 12) = 144, 3, 5\nroll back, left: 12 3 5 12\n(5) * (12) = 60, left: (5 * 12) = 60, 12, 3\n(12) + (60) = 72, left: (12 + (5 * 12)) = 72, 3\n(72) / (3) = 24, left: ((12 + (5 * 12)) / 3) = 24\nreach 24! expression: ((12 + (5 * 12)) / 3)"}, {"input": "12 3 5 12\n", "output": "(3) - (5) = -2, left: (3 - 5) = -2, 12, 12\nroll back, left: 12 3 5 12\n(3) / (5) = 3/5, left: (3 / 5) = 3/5, 12, 12\nroll back, left: 12 3 5 12\n(5) / (12) = 5/12, left: (5 / 12) = 5/12, 3, 12\nroll back, left: 12 3 5 12\n(12) * (5) = 60, left: (12 * 5) = 60, 3, 12\n(3) * (12) = 36, left: (3 * 12) = 36, (12 * 5) = 60\n(60) - (36) = 24, left: ((12 * 5) - (3 * 12)) = 24\nreach 24! expression: ((12 * 5) - (3 * 12))"}, {"input": "3 3 1 12\n", "output": "(3) + (1) = 4, left: (3 + 1) = 4, 3, 12\n(3) * (4) = 12, left: (3 * (3 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (3 * (3 + 1))) = 24\nreach 24! expression: (12 + (3 * (3 + 1)))"}, {"input": "3 3 1 12\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 3, 1\n(9) - (1) = 8, left: ((12 - 3) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((12 - 3) - 1)) = 24\nreach 24! expression: (3 * ((12 - 3) - 1))"}, {"input": "3 3 1 12\n", "output": "(12) - (1) = 11, left: (12 - 1) = 11, 3, 3\n(11) - (3) = 8, left: ((12 - 1) - 3) = 8, 3\n(3) * (8) = 24, left: (3 * ((12 - 1) - 3)) = 24\nreach 24! expression: (3 * ((12 - 1) - 3))"}, {"input": "3 3 1 12\n", "output": "(3) - (1) = 2, left: (3 - 1) = 2, 3, 12\n(2) / (3) = 2/3, left: ((3 - 1) / 3) = 2/3, 12\nroll back, left: (3 - 1) = 2, 3, 12\nroll back, left: 3 3 1 12\n(3) + (1) = 4, left: (3 + 1) = 4, 3, 12\n(3) - (12) = -9, left: (3 - 12) = -9, (3 + 1) = 4\nroll back, left: (3 + 1) = 4, 3, 12\n(3) * (4) = 12, left: (3 * (3 + 1)) = 12, 12\n(12) + (12) = 24, left: (12 + (3 * (3 + 1))) = 24\nreach 24! expression: (12 + (3 * (3 + 1)))"}, {"input": "3 3 1 12\n", "output": "(3) / (12) = 1/4, left: (3 / 12) = 1/4, 3, 1\nroll back, left: 3 3 1 12\n(12) - (3) = 9, left: (12 - 3) = 9, 3, 1\n(3) * (1) = 3, left: (3 * 1) = 3, (12 - 3) = 9\n(9) + (3) = 12, left: ((12 - 3) + (3 * 1)) = 12\nroll back, left: (3 * 1) = 3, (12 - 3) = 9\nroll back, left: (12 - 3) = 9, 3, 1\n(9) - (1) = 8, left: ((12 - 3) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((12 - 3) - 1)) = 24\nreach 24! expression: (3 * ((12 - 3) - 1))"}, {"input": "3 3 1 12\n", "output": "(12) - (3) = 9, left: (12 - 3) = 9, 3, 1\n(3) / (9) = 1/3, left: (3 / (12 - 3)) = 1/3, 1\n(1/3) / (1) = 1/3, left: ((3 / (12 - 3)) / 1) = 1/3\nroll back, left: (3 / (12 - 3)) = 1/3, 1\nroll back, left: (12 - 3) = 9, 3, 1\n(9) / (3) = 3, left: ((12 - 3) / 3) = 3, 1\nroll back, left: (12 - 3) = 9, 3, 1\n(9) - (1) = 8, left: ((12 - 3) - 1) = 8, 3\n(3) * (8) = 24, left: (3 * ((12 - 3) - 1)) = 24\nreach 24! expression: (3 * ((12 - 3) - 1))"}, {"input": "8 12 4 8\n", "output": "(8) - (4) = 4, left: (8 - 4) = 4, 12, 8\n(12) + (8) = 20, left: (12 + 8) = 20, (8 - 4) = 4\n(4) + (20) = 24, left: ((8 - 4) + (12 + 8)) = 24\nreach 24! expression: ((8 - 4) + (12 + 8))"}, {"input": "8 12 4 8\n", "output": "(8) + (12) = 20, left: (8 + 12) = 20, 4, 8\n(8) + (20) = 28, left: (8 + (8 + 12)) = 28, 4\n(28) - (4) = 24, left: ((8 + (8 + 12)) - 4) = 24\nreach 24! expression: ((8 + (8 + 12)) - 4)"}, {"input": "8 12 4 8\n", "output": "(4) - (8) = -4, left: (4 - 8) = -4, 12, 8\n(12) + (8) = 20, left: (12 + 8) = 20, (4 - 8) = -4\n(20) - (-4) = 24, left: ((12 + 8) - (4 - 8)) = 24\nreach 24! expression: ((12 + 8) - (4 - 8))"}, {"input": "8 12 4 8\n", "output": "(12) - (4) = 8, left: (12 - 4) = 8, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (12 - 4) = 8\n(8) + (16) = 24, left: ((12 - 4) + (8 + 8)) = 24\nreach 24! expression: ((12 - 4) + (8 + 8))"}, {"input": "8 12 4 8\n", "output": "(8) + (4) = 12, left: (8 + 4) = 12, 12, 8\nroll back, left: 8 12 4 8\n(8) / (4) = 2, left: (8 / 4) = 2, 12, 8\n(8) / (2) = 4, left: (8 / (8 / 4)) = 4, 12\nroll back, left: (8 / 4) = 2, 12, 8\nroll back, left: 8 12 4 8\n(4) - (8) = -4, left: (4 - 8) = -4, 12, 8\n(12) + (8) = 20, left: (12 + 8) = 20, (4 - 8) = -4\n(20) - (-4) = 24, left: ((12 + 8) - (4 - 8)) = 24\nreach 24! expression: ((12 + 8) - (4 - 8))"}, {"input": "8 12 4 8\n", "output": "(12) + (4) = 16, left: (12 + 4) = 16, 8, 8\nroll back, left: 8 12 4 8\n(12) * (4) = 48, left: (12 * 4) = 48, 8, 8\n(48) / (8) = 6, left: ((12 * 4) / 8) = 6, 8\nroll back, left: (12 * 4) = 48, 8, 8\nroll back, left: 8 12 4 8\n(12) - (4) = 8, left: (12 - 4) = 8, 8, 8\n(8) + (8) = 16, left: (8 + 8) = 16, (12 - 4) = 8\n(8) + (16) = 24, left: ((12 - 4) + (8 + 8)) = 24\nreach 24! expression: ((12 - 4) + (8 + 8))"}]